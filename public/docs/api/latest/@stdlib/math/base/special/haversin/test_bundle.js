// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './float64array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./float64array.js":1,"./polyfill.js":3,"@stdlib/assert/has-float64array-support":14}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './uint16array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":5,"./uint16array.js":6,"@stdlib/assert/has-uint16array-support":22}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './uint32array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":8,"./uint32array.js":9,"@stdlib/assert/has-uint32array-support":25}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './uint8array.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./polyfill.js":11,"./uint8array.js":12,"@stdlib/assert/has-uint8array-support":28}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":15}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":13,"@stdlib/assert/is-float64array":31}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var hasOwnProp = require( './main.js' );


// EXPORTS //

module.exports = hasOwnProp;

},{"./main.js":17}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var hasSymbolSupport = require( './main.js' );


// EXPORTS //

module.exports = hasSymbolSupport;

},{"./main.js":19}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var hasToStringTagSupport = require( './main.js' );


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":18}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":24,"@stdlib/assert/is-uint16array":36,"@stdlib/constants/uint16/max":51}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":26}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":27,"@stdlib/assert/is-uint32array":38,"@stdlib/constants/uint32/max":52}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":29}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":30,"@stdlib/assert/is-uint8array":40,"@stdlib/constants/uint8/max":53}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":109}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":4,"@stdlib/array/uint8":10}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":35}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":33}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":37}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":109}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":39}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":109}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":41}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":109}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/float64/eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/constants/float64/exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/float64/exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* Bias of a double-precision floating-point number's exponent.
*
* ## Notes
*
* The bias can be computed via
*
* ```tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/constants/float64/max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ```text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/constants/float64/min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ```text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":89}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/float64/smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './main.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./main.js":55}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './main.js' );


// EXPORTS //

module.exports = isnan;

},{"./main.js":57}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './main.js' );


// EXPORTS //

module.exports = abs;

},{"./main.js":59}],59:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toWords = require( '@stdlib/number/float64/base/to-words' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000>>>0; // asm type annotation

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	toWords( WORDS, x );
	hx = WORDS[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = copysign;

},{"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/get-high-word":97,"@stdlib/number/float64/base/to-words":105}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":60}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Scratch array for storing temporary values:
var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= HIGH_WORD_ABS_MASK;

	// Case: |x| ~< pi/4
	if ( ix <= HIGH_WORD_PIO4 ) {
		// Case: x < 2**-27
		if ( ix < HIGH_WORD_TWO_NEG_27 ) {
			return 1.0;
		}
		return kernelCos( x, 0.0 );
	}
	// Case: cos(Inf or NaN) is NaN */
	if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = rempio2( x, buffer );
	switch ( n & 3 ) {
	case 0:
		return kernelCos( buffer[ 0 ], buffer[ 1 ] );
	case 1:
		return -kernelSin( buffer[ 0 ], buffer[ 1 ] );
	case 2:
		return -kernelCos( buffer[ 0 ], buffer[ 1 ] );
	default:
		return kernelSin( buffer[ 0 ], buffer[ 1 ] );
	}
}


// EXPORTS //

module.exports = cos;

},{"@stdlib/math/base/special/kernel-cos":75,"@stdlib/math/base/special/kernel-sin":79,"@stdlib/math/base/special/rempio2":83,"@stdlib/number/float64/base/get-high-word":97}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( 3.141592653589793/4.0 );
* // returns ~0.707
*
* v = cos( -3.141592653589793/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":62}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Round a double-precision floating-point number toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './main.js' );


// EXPORTS //

module.exports = floor;

},{"./main.js":65}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation (?)

/**
* Rounds a double-precision floating-point number toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = floor;

},{}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the half-value versed sine.
*
* @module @stdlib/math/base/special/haversin
*
* @example
* var haversin = require( '@stdlib/math/base/special/haversin' );
*
* var v = haversin( 0.0 );
* // returns 0.0
*
* v = haversin( 3.141592653589793/2.0 );
* // returns ~0.5
*
* v = haversin( -3.141592653589793/6.0 );
* // returns ~0.06699
*
* v = haversin( NaN );
* // returns NaN
*/

// MODULES //

var haversin = require( './main.js' );


// EXPORTS //

module.exports = haversin;

},{"./main.js":67}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the half-value versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} half-value versed sine
*
* @example
* var v = haversin( 0.0 );
* // returns 0.0
*
* @example
* var v = haversin( 3.141592653589793/2.0 );
* // returns ~0.5
*
* @example
* var v = haversin( -3.141592653589793/6.0 );
* // returns ~0.06699
*
* @example
* var v = haversin( NaN );
* // returns NaN
*/
function haversin( x ) {
	return (1.0 - cos( x )) / 2.0;
}


// EXPORTS //

module.exports = haversin;

},{"@stdlib/math/base/special/cos":63}],68:[function(require,module,exports){
module.exports={"expected":[0.455183631556538,0.46389716207143616,0.9947863403740154,0.09033384382491033,0.02074590951715588,0.00026245511718703263,0.3286945619389081,0.18904822049449804,0.08126206702184752,0.01637989459991146,0.0010495449379939181,0.6903095590494908,0.8826177875627896,0.9251832323754657,0.6132359632894467,0.0023604431594160813,0.2986341739407372,0.8719892601949201,0.06444637461122904,0.4067085482253533,0.00419377357366818,0.28391323875601293,0.8551290869375535,0.945200103769843,0.414414514562224,0.0052668725370796365,0.27687687562700286,0.8495722076641687,0.9487104664716443,0.4304187139512162,0.009419485870028943,0.2551671414863856,0.8378072163818828,0.9556212419155607,0.44649596119854423,0.012806381692405111,0.24117215764279276,0.8256875881693484,0.9651868201031151,0.4626293780809667,0.016704743347523976,0.22744889656598843,0.8132260464603365,0.9680010783632573,0.4955333264435982,0.01877159505061743,0.20718747041328417,0.8070828418949683,0.9707004987295209,0.5033656194064848,0.02095653036303119,0.20087487016940658,0.8008642854801282,0.9784161621598664,0.511197086515197,0.02857070979221754,0.19463566911519758,0.7668832669500508,0.9806337785271892,0.5357374967283471,0.03732303662389319,0.17555662483618661,0.7602274855682098,0.9827334571943557,0.5435451382412951,0.04034896943445615,0.16963713566128819,0.7535078496831347,0.9885492713277293,0.5513420946678289,0.05056951312141417,0.1637987107772863,0.7320325920828508,0.9931856061718447,0.5757103796497317,0.05405692672618978,0.13440488960940827,0.7250664793039119,0.9944137464695386,0.5834428399055375,0.06570277958886944,0.12910692131803964,0.702863584067611,0.9930079511588852,0.6075577752753084,0.06963703319867537,0.12389996260331326,0.6956802393884269,0.9999201953093622,0.6151932771023073,0.07367688907949238,0.11878529114641401,0.6570432900681147,0.9999987876053847,0.6228005128548397,0.07782135593330347,0.11376416198312095,0.6495883113979659,0.9999546904240428,0.630377615872822,0.08206941679269819,0.08887898416802409,0.6420966268153225,0.9997879145858828,0.6379227268901276,0.10614447631192192,0.08447190313689779,0.634570074626374,0.9994985010142847,0.6771120814512821,0.1110176973367456,0.08016678420307688,0.6270105016931076,0.9990865207254207,0.7150932872882716,0.11598636666384693,0.07596468375470694,0.6194197629801257,0.9948913253103655,0.722137209118005,0.14372011024425885,0.0718666329013038,0.5789459852492521,0.9937138781708345,0.7291266230193885,0.14925888297351375,0.06787363722074063,0.5712024841732226,0.992415283742186,0.7360598139331858,0.15488372040013387,0.04859101904276886,0.5634415114636876,0.9909958606729362,0.7429350805961327,0.18591645965639553,0.04527843794057912,0.5556649715046358,0.9894559572604787,0.7497507359583909,0.19204894985630916,0.02967202771684757,0.5478747724999409,0.9877959513656196,0.7846435048452536,0.1982570049462437,0.027071831459640205,0.5400728260051268,0.9770717536531739,0.7910476207771775,0.20453910159643657,0.0245876821034805,0.46536086103396423,0.9746686987593691,0.7973803195749671,0.21089369830884036,0.02222018920781893,0.45755187093721844,0.9721491698739954,0.8036400473238432,0.24554369737266346,0.01996993370699618,0.4497532967432687,0.9423594024935377,0.8353854650369734,0.28192943944653914,0.027772640376473035,0.4753211807217606,0.9537252999113051,0.8159344639206567,0.2591508672238478,0.015823314653443776,0.4341950474808434,0.9348417821187133,0.8468369756515517,0.2961305204275305,0.00031919328739676844,0.4596901877845851,0.9469220356417243,0.8279188041142442,0.27299442038024213,0.0018919035302768505,0.4187013830147027,0.9268973828034134,0.901349620178328,0.31053169073771036,4.849572581455686e-6,0.44409875723459385,0.9396801361703534,0.8855356568751118,0.28706076997602226,0.0007751430227355693,0.40328750972559674,0.9185340016418039,0.9104933483724207,0.3251188162334445,0.00018123009199821905,0.30015998572766356,0.9320067091172755,0.8953193459583144,0.3013361104800184,0.00014835073876678928,0.3239180413651368,0.9097598469411308,0.9192341945908278,0.3398775802638966,0.0008481617355774462,0.28590122977921695,0.9239092856287651,0.9047150457117069,0.37951130584155907,1.2141848664326549e-5,0.30934560286931334,0.9005835301656107,0.9275635800602084,0.41996693052927103,0.0020049899379301905,0.2718526027789748,0.8745252424159777,0.9137135346507159,0.3947710728591694,0.0003666500357313307,0.2949602836544568,0.845912175850102,0.9354733298386604,0.43546645444404036,0.0036505793207768367,0.2580278928641236,0.8149395110541002,0.954262596175375,0.4101341176478663,0.0012115273650759595,0.2807762023070172,0.8344332922056845,0.9429556808390824,0.45102931532257456,0.020330304530199905,0.24444066840663786,0.8026202413010548,0.9605838117346068,0.4922585606225477,0.013726341821519328,0.2668072799069322,0.8226261763352563,0.9750701256520995,0.4666402388707519,0.024986426006057716,0.2311042646964931,0.7900039624949242,0.9863158059465645,0.5079226753080507,0.01760964443307006,0.2530672263646718,0.8105024164270009,0.9797208249902479,0.48228390362295953,0.0301087533484099,0.16543198562689432,0.7771030569833188,0.9897163085395003,0.5235790142205881,0.04581316878765568,0.1849197276446165,0.7980739114419221,0.9839006984928111,0.4979449559794685,0.03569225920817043,0.1539569665508317,0.7639301864630021,0.99263617514968,0.6054061187409095,0.05258534481544247,0.1729132039929609,0.7853528594355134,0.9876056437895524,0.5802119852880603,0.0417314636089135,0.1428215741740591,0.7504982795529684,0.9950725400506955,0.6206646028615921,0.05979663953040443,0.11516639395207273,0.713934955837888,0.9908320246323157,0.5956319624688023,0.04822043932524023,0.13203673741637173,0.6759123005976404,0.9970230120527539,0.6358046597439553,0.10479166130952455,0.10535578960424419,0.6366896807937649,0.9935766744638513,0.6109580808960935,0.08961016746514122,0.1216130411419521,0.6611651297597771,0.9984856768495287,0.6508114300582366,0.11457978437711314,0.0959325119690348,0.6215570410173802,0.9952005202067666,0.6261752986285818,0.0987585056723489,0.11156071577077081,0.6462597821179615,0.9980923106456596,0.6656701852898408,0.12474618119397196,0.08690580959755068,0.6063050981121196,0.9927926253562778,0.6412686806063721,0.10830064554918828,0.06506877567226027,0.631210886644697,0.9999423228222393,0.7410079602129013,0.13528087386873827,0.0782845418189374,0.5244977804135479,0.98990107524732,0.7182336565114072,0.21727263610224135,0.09260926731030794,0.5500663593677324,0.9943824730561144,0.8097809224795973,0.1965039800322509,0.10800528329196851,0.5755032818791697,0.9975638235161279,0.7892541687188734,0.17653340888158525,0.050477739565360835,0.6007416580286689,0.9753561456129183,0.7679667809639016,0.26599401028939285,0.062291749467287494,0.6257151200022623,0.9826788328958063,0.7459747373561445,0.24365049809528588,0.020590742756288194,0.5188164492835395,0.9887322491765491,0.8337489411954018,0.22198109250583337,0.001276365612168151,0.5444051251790827,0.993500476156632,0.8142245527836078,0.20104277623142963,0.003762368395833271,0.5698770316331355,0.9647151662252663,0.7938738672859912,0.29412170033429885,0.0075532969252358195,0.5951651867313731,0.9735621395051117,0.7727503996553846,0.2710344982223838,0.012639182427507278,0.35567392953084753,0.9811638153937676,0.8564070391411575,0.24854939268502607,1.9398196252351507e-5,0.3804042324840018,0.9875002042291325,0.8379616467390878,0.22672551142887792,0.0009025604462997161,0.40544902911150393,0.9522502408313296,0.8186275372671818,0.32305743567177864,0.003098168704119386,0.30218055276982714,0.9625867768996939,0.7984555524504806,0.299317157878794,0.006600449312977763,0.32598084376799374,0.971706876816566,0.877666286257633,0.276104603480275,0.0007247889906079052,0.3502387422968198,0.8402558747825294,0.8603722856084248,0.2534808131106471,1.6444111730629096e-6,0.37489045884436223,0.8585897057853471,0.8421306360031702,0.3526876473401466,0.000593314923300392,0.2738143688776137,0.8759805753732413,0.9124728428214945,0.3283874713391246,0.002498244647235748,0.29697076034311953,0.8923827518402294,0.8974432427914205,0.30453857430744785,0.0033897694289909963,0.320661045381165,0.8166468663597933,0.9533380576974517,0.28120367023084025,0.0010631562675929573,0.34482292709828394,0.8360671024406559,0.9419298983199748,0.38289604064930943,4.8566804959349064e-5,0.24633593388741193,0.8546036034189376,0.9818548031861121,0.3581313414402292,0.00034866904493918716,0.26875754002439084,0.8722076249918651,0.9743788311643738,0.33373970556467614,0.008003879813116066,0.2917872303136223,0.791795060565087,0.9656554141473457,0.4389233711730125,0.00408292972090879,0.31536444498724336,0.8122254798474232,0.955707491571159,0.5469590882260886,0.0014660624139306022,0.21985309704840056,0.8318348588837567,0.9892672236761055,0.5213790663945925,0.02132546894750964,0.24145191599691707,0.8505716320895111,0.9833416859919075,0.49574282533992303,0.014549010365598303,0.26373062302694816,0.7657979974728958,0.9761451342413234,0.6032524175080173,0.009049112556838768,0.17458197486403254,0.7871584132437146,0.9676964927562899,0.5780375601822301,0.004840238266078489,0.19446980001774544,0.8077637061002646,0.9947593345582189,0.5526174922578689,0.09410154735053511,0.2151610592495397,0.7159232901588277,0.9904074881688967,0.5270590593326484,0.07966793299163699,0.23660134202066596,0.738757712142216,0.9847660472054078,0.6336839582195656,0.06633964015828525,0.15145020947208127,0.7609642875744256,0.999760280465461,0.6088097449616676,0.05415171744687264,0.17028566890324404,0.7824846211823846,0.9983095800184016,0.5836494013731685,0.11318067858361947,0.09723350285159377,0.687260480789814,0.995548505349598,0.5582690900705835,0.09744841808600596,0.11295108011123867,0.7107803341423453,0.9914843170882157,0.6635908069489703,0.08277472285989113,0.053987747546173526,0.7337459113432911,0.9997489248638528,0.6391548657797979,0.06919817942404372,0.06615931175418216,0.7560968212190551,0.9999040258094009,0.6143529975719733,0.1337780248605166,0.07947172028270372,0.5266970671649279,0.9987445597166377,0.7162502039314358,0.1168088652808581,0.09388996630533031,0.5522569750337494,0.9962735755626246,0.6928555832419984,0.10084735998895866,0.04071174860177973,0.5776794659318032,0.9977761203535412,0.6689538220219886,0.17485728941315787,0.051446335229774154,0.6028976878898294,0.9995364139408514,0.6446077732708528,0.15581274430170078,0.0633604559926777,0.49538032329078663,0.9999831071762947,0.7440550908282694,0.13767328736314893,0.021220851525537043,0.5210168760051911,0.9891923865140779,0.7213634266944196,0.12048661881785089,0.029238395735575684,0.5465981619263346,0.9555582005279091,0.6980896566978516,0.19928050530433394,0.03849387294058587,0.5720569115113984,0.9655232541092457,0.6742949824479045,0.17919835352671587,0.048962944578304746,0.46408171104112517,0.974264149664592,0.7709020935401614,0.15995979421588574,0.013135924146431666,0.4896942884980114,0.9817579017955733,0.7490024477640115,0.14161541783447018,0.019612720351010082,0.5153339662540498,0.941760214465017,0.8363354318218383,0.22488400572510125,0.027352761600331066,0.407612382624595,0.9531850192034244,0.8169273386825637,0.20384306709008793,0.036335694381367634,0.4329240733592431,0.9634181110174623,0.8926073337025877,0.18358091422608414,0.006961874335557339,0.4584121495552473,0.9122678358375031,0.8762194499937815,0.16415082927707164,0.011872501960032311,0.48400958677770123,0.9262283775673141,0.8588422450100914,0.3752414761180578,0.018066728608095384,0.3770237888044417,0.9390680926043702,0.9252637246579947,0.35058465456585935,0.02552826570082134,0.4020296998817725,0.9507532171354238,0.9112241497243166,0.32632074140804235,0.0027229344277152068,0.42729323746463177,0.8937438346412786,0.8961032037980567,0.4311015006160076,0.006048119903468874,0.4527479675735696,0.9090236502551583,0.8799406495057924,0.4058050295568296,0.01067222042403626,0.34691786046538325,0.9232278813953092,0.9408955431163958,0.38075625724966466,0.01910577914779077,0.3715198469679122,0.9363191760639529,0.9282269649556907,0.3560210529188541,0.012720304921230996,0.3964596898699364,0.8736744405960825,0.9144323045392257,0.46224705126590243,0.007616200302671017,0.4216718063921082,0.8902135588241193,0.8995478368417,0.4367382858859707,0.0038068872438160595,0.31741275942297975,0.9057265563252792,0.9547969044614906,0.41139587596602295,0.02862171357786908,0.22167985761411985,0.9201726395189394,0.9435490455795443,0.38628646289126944,0.020693830450230044,0.24333932041909334,0.8521384234382559,0.9311348129036499,0.36147607534936876,0.0002306954044157261,0.15714947836396803,0.7676606524560664,0.9754684277023393,0.4679198361361952,0.008636803608863153,0.28862428932454587,0.8866328077971035,0.9975994350192383,0.575861621281151,0.03998774588607906,0.19621596522385948,0.8094962846626443,0.9571302544413516,0.6802609508136974,0.0017448099572821008,0.3361311636742234,0.7179074359370967,0.9899734386386443,0.5248598548996876,0.02234388133968135,0.23847572059402988,0.6161431202707587,0.9339868923636474,0.6315606634549424,0.065247717236392,0.3853605682919605,0.7628401829477786,0.9771970177018986,0.732118078252489,0.009720966112045759,0.2834845251257728,0.6653281035150141,0.9981238168333694,0.5814774577209292,0.042245844285682455,0.19171894949492985,0.805010048492153,0.9594044733505389,0.6855534504859704,0.09614613931212013,0.33076926245435756,0.7127752171993775,0.9910748499842723,0.7809647871182368,0.02405571837746978,0.23364594966236873,0.6106045744960327,0.9367828344112672,0.637038351586737,0.06808457709736965,0.016406330667501412,0.7579857143303029,0.9788638809391075,0.7371397314928199,0.13228227993249236,0.08066705627613013,0.6599506970441731,0.9985837649454399,0.5870827548247872,0.04456315445932579,0.03195502113087423,0.554446577003793,0.961619267012507,0.690821948303,0.09952496843078457,0.005098946011968919,0.7076154753951285,0.9921127394313201,0.7856504663919852,0.02582912013271016,0.05242363206840339,0.6050517217117665,0.9996263769046624,0.6424983134263558,0.07097730642038497,0.014992851919549188,0.7530978745426659,0.9804688018005672,0.742130710048887,0.13615925712089244,0.07759700480394538,0.6545526005055027,0.9989792198598817,0.830456502907039,0.04693937665648862,0.02998497852318016,0.5487902947489129,0.9637743489375316,0.6960657627699307,0.10295560010936433,0.00432090593268214,0.702428877951312,0.993086972725899,0.7902991959828978,0.1775123205752901,0.04991773398028598,0.5994852801949222,0.916679941531733,0.6479398427125387,0.0739255310228491,0.013642110196048607,0.4918960898025339,0.9823426429177332,0.7470903683237231,0.14008329812200704,7.759127984929837e-5,0.6491345121578138,0.9427874095690372,0.8347026925722356,0.04937420350621635,0.028075733666636182,0.5431277013336163,0.8825556507567102,0.7012842155847667,0.10643759058610391,0.0036069833237620252,0.4351069872331709,0.964240455616171,0.7949103745648638,0.18187887867201746,0.047470055285924406,0.5939059699802024,0.9135098464729403,0.874765315715813,0.07692886954370437,0.012354280219200875,0.4862107845952917,0.8434698651901955,0.7520180647717272,0.14405389535021157,9.746891468986885e-6,0.6436971328459138,0.9401173754118812,0.8389055875126203,0.22780028061143964,0.026227533527378222,0.5374595292301214,0.8788693330572024,0.9099674795816934,0.1099704894558442,0.002957270533084977,0.4294727048974706,0.9620985487993692,0.7994834056691004,0.4289210073097482,0.0028970546861080138,0.5883145127669113,0.9102862627646466,0.8785054182357899,0.5369037587039026,0.011129528573397718,0.48052726306143956,0.8393151339622671,0.7569131619816492,0.37861878697476137,6.57763387584831e-6,0.3736493177590642,0.9373904108473032,0.8430646440720355,0.485653691619113,0.012231460227523527,0.5317865116322651,0.8751340075550138,0.913196283015276,0.3295924822934019,0.0023718516028086722,0.42384754546367975,0.7953602410950711,0.8040176977613065,0.4345544277680258,0.0035404700647821974,0.3194646157390186,0.9070096073863763,0.8821965600264808,0.5425724380979114,0.009968013683673227,0.4748462603803059,0.835116511377396,0.9425282641866151,0.3841431042331555,6.808391702223249e-5,0.36815547503776,0.7475747204619323,0.8471793242649397,0.49133885452252973,0.013513115568837053,0.5261093823606625,0.8713501574248939,0.9163716383596635,0.5989390480980927,0.0018508022585011497,0.1779384217724077,0.7907527747967074,0.8085126643181805,0.4401963137932164,0.004248103865374553,0.10329458288995264,0.903680304182622,0.8858382636284222,0.5482356106285667,0.029795175503079918,0.21879185988358713,0.8308745405390989,0.9451466508175672,0.38968240790346415,0.00019425778489923218,0.13654175294977444,0.7426181662529142,0.8512490958459982,0.49702513776921925,0.014857699342617492,0.0712637945858931,0.8675182721183881,0.9194931348738047,0.6045067826387351,0.0013941898993450885,0.17360946537602423,0.7861076988177151,0.968148404443422,0.44584593559166047,0.005019864553483577,0.09985889817248988,0.6913369599113781,0.8894300579771177,0.5538925437487404,0.03175927088421293,0.21410807770797802,0.8265897701581097,0.9477074564903264,0.6594225705192691,0.0003850829165658598,0.13266014110105595,0.7376302287088485,0.9850785816445216,0.5027118058226179,0.01626503762321152,0.06836560990311602,0.8636388473005253,0.9225603687834378,0.6100609989361854,0.05473361624074752,0.169322728503688,0.7814256140116005,0.9911793761318977,0.7122707526757389,0.005855652299716296,0.09647497282020101,0.6860708510665084,0.9957176091748923,0.5595425057183891,0.03378393450684103,0.04247033534510264,0.8222627544814025,0.9981717420803824,0.6648020354673168,0.08348277328671372,0.12882604568544787,0.732611553033339,0.9773631071478893,0.5083981230963859,0.01773494836749573,0.06552325833000106,0.6320982570552849,0.9999275058556544,0.6156009785371068,0.057349346651919986,0.022508919151612405,0.7767071260190637,0.9900841839595214,0.7174056981575939,0.006755358992601657,0.09314324455324835,0.6807806734391902,0.9573557531150003,0.5651847656992074,0.035868904475089725,0.04020642097873789,0.5764124356664273,0.997653672100021,0.6701601828134081,0.0866556461860436,0.12503996265386286,0.7275627884060519,0.9756405568032194,0.7671897521532514,0.019267241438424343,0.06273710753263484,0.6266051875952142,0.9314167962357008,0.6211260048297198,0.2428611953598025,0.0208528034700336,0.7719528451896591,0.9889255980339724,0.7225125216073197,0.34098578454708045,0.08986414433995588,0.6754671113286231,0.9550281849413207,0.8135085310679468,0.20030598368841224,0.038001982191493866,0.5707877158660812,0.9970712292321289,0.6754963194662712,0.29328381377790813,0.007713409474271793,0.7224845878987431,0.973856481028748,0.771979019570459,0.3959145210626382,0.06000751790737724,0.6210957414017669,0.9285143972589978,0.6266353631364963,0.24775476920781792,0.019258666811864167,0.514052174091776,0.9877037682215646,0.72759056244309,0.3463874049622747,0.0009586482763353499,0.6701308520588545,0.9526417576055075,0.8179181288090435,0.20487723577770672,0.03585730413366289,0.5651538394776752,0.8964430601172058,0.6808097551817789,0.2984750092104564,0.006750249847536471,0.7173776083907819,0.9720111105996423,0.7767331057445268,0.4014832503158835,0.05733484253424326,0.3511165950992115,0.9255565687523896,0.8597340493374708,0.2526809716784725,0.017726715383117653,0.252051106688746,0.9864188525693849,0.7326391638061897,0.35180889559416384,0.0006389572269358545,0.40077253445177285,0.9501967797985782,0.8222866029553649,0.4578567930174876,0.03377266422532077,0.29781168738026587,0.8929521915271388,0.6860998026522331,0.3036922724614375,0.0058508934487710995,0.2042922826442567,0.970104684219703,0.7814513957211771,0.40706472298488733,0.0010040483896927577,0.34569759889211926,0.9225436933192257,0.8636602552239894,0.2576391655537663,0.016257147345974998,0.24712902888958033,0.8552514832250611,0.7376576726459815,0.35724955515784595,0.00038385991821549004,0.16036859290392003,0.9476935677852171,0.8266133884326223,0.46352585969974247,0.031748332120441425,0.29262386383204564,0.8894104934774533,0.9971490664191653,0.3089349286633294,0.005015456612229019,0.19972594032186464,0.8129433971984497,0.9553282212551613,0.4126582170906258,0.0013965186150726172,0.34029856213005705,0.9194761606833287,0.9890768342412883,0.520460041987878,0.014850152793151827,0.24223966065430552,0.8512268960495546,0.9999873777649064,0.3627086798888642,0.00019338934772117344,0.15621720851026089,0.9451324453628649,0.9758636022901994,0.4691996444135581,0.008875736023107428,0.2874628649641976,0.8858184240966488,0.9977233060029824,0.577128871008964,0.004244047403990148,0.19519843928479952,0.8084881171416939,0.957648263307709,0.4182630090990688,0.0018534845884576323,0.11716711304609312,0.9163543676385825,0.9902273458666003,0.5261405320594943,0.02272451161928224,0.2373836344363106,0.847156876697527,0.9999146343484093,0.36818556363424104,6.757015335118188e-5,0.15211029337747983,0.7617484505632207,0.9775782921926102,0.4748774132390909,0.009974211992711757,0.08308210794427257,0.8821764480288969,0.9982331636919297,0.5827423942240307,0.042763235906644104,0.19071036517792123,0.8039929332884173,0.9956223991924111,0.42387837401477113,0.09690351640866729,0.11353404780154225,0.7116140790010892,0.9913144452203484,0.5318176407805357,0.16986690372709345,0.23256157837610203,0.8430419516373092,0.9997772255826222,0.638271142039933,0.06873201983118676,0.14804837874647953,0.7568864017821837,0.979231206013754,0.4805584317411411,0.1331523995341548,0.07997001105098422,0.8784850363739385,0.9986785735344961,0.5883452144801201,0.21470319800780696,0.1862622985461065,0.799458427103162,0.994839506073067,0.4295035854746525,0.10029406537168595,0.10995097300350076,0.7064482228622306,0.9923379916832056,0.5374906338011889,0.17415905438614104,0.05185348657300343,0.8388826531459102,0.9995751692417512,0.6437270089430644,0.07163729623010695,0.14403199003722228,0.7519911240301229,0.983484044132706,0.4862419650641544,0.13704003358817773,0.0769122462057727,0.3889753588648476,0.9990594779156786,0.5939366070368386,0.21939165166328856,0.18185481475915372,0.5475139092048701,0.9939926040864002,0.6972447587765356,0.10373631740979022,0.1064183521326661,0.4394765490523159,0.965858112622783,0.543158777304018,0.1784933534783678,0.04936068887643924,0.5982282479823503,0.9993084914623462,0.6491642843575754,0.2682635543747378,0.14006164678076594,0.49061393998742087,0.9820032802611351,0.748204374018652,0.1409746175240279,0.07390920893903086,0.3834379260917797,0.9993758275644358,0.5995158486319971,0.22411640278960243,0.02765362656517295,0.5418499938094542,0.9930818027815396,0.7024573991683799,0.3201409261354465,0.10293664214337955,0.433835701785506,0.9637626913983071,0.5488213380988852,0.1828692403501232,0.04692618262896542,0.3289110364475262,0.9989772267399205,0.6545822649567582,0.27331748062534034,0.012072585571174854,0.4849289727844703,0.9804601679237754,0.9377412428751954,0.14495564239232267,0.07096128770198717,0.3779155709473815,0.9395074059199418,0.8398472990856143,0.22887684022704075,0.02581922527932773,0.27660305796003715,0.9921072199731686,0.9107002181951858,0.325458481416013,0.0995062934045185,0.4282034130548153,0.9616072811789778,0.9623749643578419,0.18728614896826162,0.04455028274074074,0.32357879473405127,0.9095519989011402,0.8793420605397917,0.27840072889071543,0.010862080223270287,0.479245955060835,0.9788549067265023,0.9404609684934531,0.37986317072792586,0.06806886381645816,0.3724090077636605,0.936767652069366,0.9810119871305361,0.23367234819977206,0.024046160596408628,0.2715300853400304,0.9910689817262863,0.9139170053507195,0.33079861412778355,0.0022487317795306105,0.4225804114124666,0.959392160773106,0.9645092301728411,0.4358259555784113,0.0422332965410282,0.31826937359448415,0.9062634342220165,0.8830220955230181,0.2835126416385523,0.028315764940686217,0.22244448024039348,0.9771877043143193,0.9431237192595674,0.3853909298824971,0.07496299340378637,0.36691894882989007,0.9339714011074052,0.9825331131205497,0.23850230639549336,0.013810829067613883,0.26648666593935094,0.8704902472485306,0.9170802511896183,0.3361606335097294,0.05023399505576759,0.41696742420937194,0.9571176167126809,0.9665834104261187,0.44146964978081943,0.004416538889668586,0.31298345981722603,0.9029223182369842,0.9942988594475224,0.28865255762871,0.030232775182482463,0.21773247240600396,0.9754587763444985,0.945729150739316,0.3909335140392622,0.07798539398303855,0.3614461043004729,0.931119014736904,0.9839918221094193,0.49830746976610224,0.015169579413315593,0.2614734521383347,0.8666475983138773,0.9201895465372292,0.3415438459697202,0.05274729275600132,0.17263910276898353,0.9547839432163077,0.9685972368166864,0.4471209150469271,0.11121004435894194,0.30772173714993556,0.6901515933692135,0.995123178677286,0.29381981199874985,0.03221055112224125,0.2130569766619015,0.586368711954875,0.9482769259128855,0.3964902062495347,0.08106238332610877,0.1317913883283694,0.7365011822282687,0.9853879254090776,0.5039941229536786,0.016591043923275817,0.25649109241013945,0.6363409381468048,0.923244489197545,0.6113115289685576,0.0009225687361845147,0.1683619631817317,0.5298140792556031,0.9705504488504957,0.7134311005071714,0.006052957800846304,0.09571909703306142,0.8960841678215536,0.9958834523458857,0.80558423332373,0.03424883692914038,0.04195464568121565,0.8212812357457868,0.998060542624587,0.402060287739712,0.08419356341586182,0.009579209074139117,0.7314756646872398,0.9769800576663809,0.5096802594903347,0.1535549042601177,0.2515402312368626,0.6308610408605146,0.9336263777282585,0.6168481991200775,0.0006095605976341179,0.16412772189754055,0.5241356930496021,0.8700239584469671,0.7185597623663156,0.006967062381980249,0.09239919896034432,0.8925880179249434,0.7891427962889783,0.8100653974532803,0.03634736894523782,0.03970411771449067,0.8169032123091198,0.9975279504574659,0.8870921314981546,0.08737852922543843,0.3451379247322675,0.7264202051247522,0.9752436136419081,0.9460431024550884,0.15767757780358072,0.24662150902617597,0.6253642163343831,0.9307671673251814,0.6223697546318352,0.2439618105273273,0.1599369266273047,0.9474312027906311,0.8661754961587593,0.7236601529119131,0.34220207458775154,0.0891320251856556,0.8890410856755833,0.7844847909934856,0.8145064537607117,0.038505875719576754,0.037513130301211506,0.8124841965599516,0.9969310016652585,0.8906664727525151,0.09061686877064701,0.007490652413423504,0.7213354574785706,0.9734456955333368,0.9485838202114574,0.16184453170508933,0.241735562028487,0.6198511755979615,0.9278522359901213,0.6278754812752579,0.24886279753330187,0.15579011946205595,0.5127702894992937,0.8622796680510021,0.728731612394252,0.3476082368299781,0.08591799832701613,0.8854438298790316,0.7797899867985143,0.8189068277830307,0.040724078043298584,0.03538196685169803,0.8080247601102681,0.6842351535984154,0.8941902802113417,0.09390816316325457,0.006541869781116594,0.7162220794749543,0.971586535906378,0.9510665124022062,0.16605522695755914,0.2368830222546382,0.12750487426864515,0.9248819607775594,0.9868796158140638,0.2537962698353679,0.15168783680284237,0.06454865192612003,0.8583369780599042,0.7337734848059333,0.35303411137089974,0.08275753412774522,0.3995160217047853,0.7750589909900532,0.8232659503196107,0.45913471339341644,0.03331090303787376,0.29663952923149517,0.6789367718840159,0.8976630980603326,0.09725198666517126,0.005656917331321232,0.20325921452042628,0.969666375248504,0.9534908578841903,0.17030911889584022,0.0010869153055991787,0.12373559102159853,0.9218567259008605,0.9881422810102802,0.25876158927515247,0.14763060929134314,0.06178211623334978,0.8543479361833888,0.7387851179667284,0.35847899635854363,0.07965104140268303,0.020291787046143706,0.7702924155355771,0.8275832575058193,0.46480490804751784,0.03130020675760703,0.29145769615084766,0.6736152442001654,0.9010844770808336,0.1006479067435207,0.004835909535099769,0.1987015794766403,0.9676854619378398,0.9558565430615743,0.1746056572671711,0.0014939340044810012,0.12001497862305333,0.9187769226825763,0.9893418036438748,0.2637581135747669,0.1436189617412288,0.059072265243470645,0.8503130584151246,0.74376586360794,0.36394218748188256,0.07659892198530938,0.018719237429220548,0.7654908770048874,0.8318581908859564,0.47047965528471647,0.02935013810005782,0.2863028385976074,0.6682712589012805,0.9044539747079461,0.10409548412658948,0.004078952592095619,0.1941829182221076,0.5631939987458003,0.9581632619263962,0.1789442863023556,0.001965435850416253,0.11634351834457834,0.9156429495038242,0.9904780285532568,0.26878519641988696,0.1396534130702749,0.05641944948325012,0.846232866677781,0.9998892951537648,0.36942297806194,0.07360157067576545,0.01720894281841223,0.7606549964903564,0.8360901974854913,0.4761582210606636,0.0274609493120343,0.2811756233669458,0.6629055072467325,0.9077711550877741,0.5840067864770622,0.003386144416796133,0.18970381525823748,0.5575489366002495,0.9604107160981512,0.18332444478765292,0.3055113053004464,0.11272168509977887,0.9124552117527573,0.9915508087645717,0.27384218754335543,0.4090071939467047,0.053824012101789886,0.8421078887555148,0.9997373065580456,0.37492065914320055,0.06938229929254452,0.01576109857453012,0.7557853995265873,0.8402787298825922,0.48183987083707175,0.13402493212898925,0.00031034103777033417,0.6575186833114318,0.9110355891338036,0.589607093032022,0.21575723970856664,0.1852648499694644,0.551896430339582,0.9625986148623871,0.18774556613737242,0.3107626271996501,0.10914994738286515,0.4438508070545783,0.9925600055107135,0.27892843280929613,0.41460469629644003,0.05128628882613878,0.8379386582257006,0.9995206755508795,0.3804345195853154,0.07230010365749379,0.014375891980256572,0.7508827160095006,0.9831555875761766,0.48752386967672945,0.13792319747715964,0.0001423351217539892,0.6521114838960468,0.914246854582405,0.5951958086601081,0.22045393154441117,0.18086659654830278,0.5462372111312146,0.9647266752083092,0.6984224573771997,0.31603842747970146,0.10562876720805164,0.4382038325457081,0.9935054882492744,0.28404327429772824,0.4202132447663772,0.0488066079178654,0.833725714389911,0.9992394301540902,0.3859638461550905,0.5281138068249158,0.013053502215919888,0.745947580114854,0.9816607471582192,0.49320948233856743,0.1418682984674502,3.898718586825556e-5,0.6466846084368707,0.9174045360474553,0.6007722104453999,0.22518678344222892,0.010370792283427355,0.5405720110109024,0.9667946218653896,0.703629251059156,0.32133802370115083,0.10215860004979382,0.4325648515430861,0.9943871346794307,0.2891860503896698,0.42583211387516245,0.046385290130596446,0.3277066627417353,0.9988936067475525,0.3915079236187451,0.5337895685281606,0.011794100336316504,0.7409806302162105,0.9801036025820828,0.4988959733727639,0.1458597247900681,3.105984562878916e-7,0.6412387589153482,0.9388945455044466,0.9797911071925565,0.22995518319445474,0.011554647041014943,0.5349015627880478,0.9688021873389723,0.9988182576385242,0.32666073034647747,0.09873989478387168,0.42693459346459905,0.995204830757763,0.9945524503740966,0.4314605768064382,0.044022648668526676,0.32237950692302564,0.9984832500644865,0.8801762076665023,0.5394609594566748,0.010597849248584645,0.7359825088023636,0.9784843552687525,0.9410664044980865,0.6456186620410548,2.631036244232776e-5,0.6357746397672714,0.9361420203890003,0.9813604404030692,0.2347585139953094,0.012801683564424293,0.5292265999509105,0.9707491119448761,0.9991767337433619,0.3320058589087629,0.04832740643290412,0.42131378659979934,0.9959584707130076,0.993683329872204,0.4370979055028595,0.04171898914590477,0.31707532680943984,0.9980084131856712,0.8838451116363018,0.5451272460002576,0.009464903691131787,0.22137876902761366,0.9768032146723747,0.9437162596221398,0.6510493119210458,0.00011698311468449907,0.6302929577916596,0.9333330790893681,0.9828675083009177,0.23959615452058552,0.014111740546010276,0.5235478565717274,0.8696279001189591,0.9994706399484066,0.3373727179807513,0.05079567285441311,0.41570315801569846,0.9966479570597389,0.992750350057598,0.44274337076026987,0.03947460954750143,0.31179480851143804,0.9974691575325785,0.9630204511761107,0.5507876952089744,0.008395410213619059,0.21667494158392547,0.9750603982531644,0.9463087188130821,0.6564604231521469,0.00027231712640990446,0.6247944220593327,0.9304680849499252,0.9843121159426751,0.7548270311527843,0.015484648526256306,0.5178660672117595,0.8657745128317377,0.9996999382360724,0.3427606133442849,0.053322045105841265,0.41010343346271894,0.9972732006109789,0.9917536316138141,0.44839624232202624,0.11201764114823581,0.3065386350787584,0.9968655528594279,0.9608442590457731,0.5564415748879662,0.007389507158004183,0.2120077630250794,0.5851053593182097,0.9488434467291021,0.6618512957920607,0.0004922923047319117,0.6192797438211908,0.47727163875430545,0.9856940764643223,0.7597031630480051,0.01692022991569414,0.5121819668262739,0.3704992481421733,0.9998645989459878,0.3481688480601032,0.05590619639390648,0.40451533728081657,0.7793020532948923,0.9906933034691572,0.4540557889734592,0.11562969207928231,0.30130748641206323,0.6836879277290716,0.9586084554279297,0.5620881536921608,0.006447324640647123,0.20737783706361146,0.5794962590060316,0.9513201154960893,0.6672212325164073,0.0007768801952489079,0.12711255457027404,0.4715924106047088,0.9870132111054195,0.7645457016162931,0.018418299017875617,0.5064962906694751,0.3650150909907872,0.9999646007788314,0.3535967225579937,0.05854779245144753,0.3989395923057851,0.2647410646684508,0.9895695027800236,0.45972127863645806,0.1192914623794184,0.29610203917499167,0.6783871188360304,0.9563133295300006,0.5677267012208748,0.0055689845354786605,0.2027857625933306,0.573876875631501,0.9017490206520825,0.6725695387089263,0.0011260439857252447,0.12334828566831285,0.46591685705586305,0.9882693492322296,0.7693540204618068,0.019978662053392993,0.5008097741993981,0.35954839451306464,0.9999999307990883,0.8535606710874867,0.06124649158066259,0.393376919775755,0.25973849965873097,0.9883823749131604,0.465391978464167,0.12300247838846451,0.2909229667066313,0.6730632350726898,0.9539591782329087,0.5733564881122922,0.20236284754063705,0.19823213361184994,0.5682479360774972,0.8983377760361148,0.6778955225513265,0.0015397385108528727,0.1196327377138785,0.4602457122564156,0.9894623283597901,0.7741274976151212,0.021601117184944896,0.05879507851895677,0.3540998658414096,0.9999705844367217,0.8575587379194585,0.06400194469730819,0.38782803923789994,0.25476701314276395,0.9871320734268609,0.4710671549357809,0.12676226007617153,0.28577093893442007,0.1668856289992227,0.9515463060526761,0.5789767861378103,0.2069513899758324,0.006363380627664839,0.5626101684630175,0.894875005320183,0.6831984951127748,0.0020179102580935027,0.03497128185071913,0.45457970978472984,0.8197645102339011,0.7788655156136813,0.02328545454344455,0.08529429494086949,0.3486702097581699,0.9998765654877653,0.861510553533541,0.06681379537585502,0.017056207815714985,0.24982724819616703,0.9858187600511024,0.9272743929279438,0.1305703211043141,0.0005159098875811008,0.16266642384310864,0.9490750251010347,0.5845868682962373,0.21157783906433247,0.007299661570387694,0.5569643020489936,0.891361156423317,0.6884777704390115,0.30605359940429155,0.037090686886821045,0.44891958255399494,0.8153721770685847,0.7835674615816723,0.02503145625516684,0.08849785573645103,0.3432601286044714,0.9997178861138318,0.8654156067513858,0.06968167989559199,0.1591206444983213,0.244919843791284,0.984442604666625,0.9302002019318235,0.13442616888959985,0.0002899555557785427,0.15849085372392024,0.9465456550450535,0.5901860089078322,0.21624159636207158,0.008299674673145185,0.08800907084095438,0.8877966838716511,0.69373266564108,0.3113074860914747,0.03926997053091996,0.44326606271742114,0.8109390496344366,0.7882327273092973,0.02683889646993104,0.091754645479665,0.3378703221893684,0.7195617180470621,0.8692733924434913,0.07260522728767466,0.1633028603704434,0.24004543471453288,0.9830037852829577,0.9330703633422719,0.1383293046673864,0.00012864010899266143,0.15435945876327367,0.9439585230657889,0.9766445587020964,0.2209420585990633,0.009363290581459127,0.08481361077793886,0.8841820487396302,0.698962500983661,0.31658578068049137,0.04150885088661127,0.4376198815735338,0.8064657013688283,0.7928607093314498,0.8954029242197084,0.09506424289569404,0.3325014876993214,0.7144385453771365,0.8730834115945412,0.07558405938311119,0.16752862895465503,0.23520465148429376,0.9815024880153924,0.9358845058959224,0.635268212618235,0.255518191702895,0.1502727733686054,0.9413139638159629,0.9783314146658515,0.7355185405928413,0.010490371713651747,0.08167185622989498,0.8805177185903688,0.7041665999729972,0.824771028528444,0.04380703834848981,0.03260530779700377,0.8019527109118083,0.7974508090057753,0.89885791713557,0.09842621987890127,0.32715431960801383,0.7092876344845518,0.8768451713679544,0.5343767055557836,0.17179740363602897,0.23039812026935025,0.6068496037904728,0.9386422655756037,0.6407339863481191,0.2604944281788158,0.146231326164045,0.9386123193766744,0.9799563971298517,0.7405195133158429,0.011680772278641671,0.07858421359151752,0.87680416741517,0.9988583497191496,0.8290736734151737,0.046164235639611195,0.03061565115421605,0.7974006620312521,0.8020024325901056,0.9022613166697688,0.10184014154820703,0.32182950958652035,0.7041096516539675,0.8805581851696345,0.9566648522975201,0.17610863223667944,0.22562646280789223,0.6012874795530384,0.9413432856574255,0.6461815557451853,0.2655016453670314,0.14223563992203642,0.935853939213151,0.981519295898093,0.7454893741703952,0.36584485964575686,0.07555108225797519,0.8730418755722137,0.9992101456131777,0.833333751706386,0.04858013784994536,0.02868671068331835,0.7928101435473518,0.8065149913192626,0.9056126825831032,0.10530556630334192,0.003830917079270524,0.6989052666718744,0.8842219727109129,0.9589510095073188,0.1804617570871882,0.22089029632709256,0.5957122534982258,0.9439872167569234,0.6516102161511708,0.2705391955700628,0.13828623149571562,0.9330391801295437,0.9830199088052693,0.7504274802911649,0.37133160033962254,0.07257285457324752,0.8692313297244207,0.9994973672854943,0.8375507123490975,0.051054432475817646,0.026818735898129165,0.7881817492564492,0.8109879014812155,0.9089115813670647,0.10882204588196914,0.0031604226697780624,0.6936751527399541,0.9627980147265905,0.9611778001267086,0.18485621509874045,0.21619023346326705,0.5901246467970416,0.9113349269805915,0.6570192653537432,0.2756064271667709,0.13438361175205432,0.48236565498906464,0.8406640277476467,0.7553331929203819,0.3768349846490877,0.06964991577937446,0.865373022776502,0.7540853852228975,0.8417240098677123,0.05358679946033179,0.0250119684263857,0.7835160778542274,0.6556419000581755,0.9121575862999143,0.11238912541766821,0.0025541958423920263,0.6884199863879998,0.9606156403235016,0.9633449361141251,0.18929143783596192,0.21152688218262805,0.5845253822219638,0.9080753943589788,0.9928958004209165,0.2807026846966459,0.130528285505778,0.47668375702491733,0.8364795449599386,0.7602058774904641,0.3823543006960751,0.06678264396662398,0.8614674538111995,0.7491713520547301,0.8458531044345821,0.48949953337198543,0.02326664197848899,0.7788137328582675,0.6502277835850233,0.9153502775018798,0.11600634349877353,0.002012315014239874,0.6831404473864054,0.9583736840053746,0.9654521371444971,0.1937668515904477,0.004012161106095702,0.5789151840534488,0.9047630760493708,0.9938191128274808,0.2858273089445925,0.12672075145406653,0.4710048750816914,0.832251537606617,0.7650449037061011,0.3878888345416931,0.06397141002458506,0.36444853062143195,0.7442250878786931,0.8499374619398321,0.4951855346655767,0.02158298231727257,0.7740753225299821,0.644794234729958,0.9184892419894686,0.11967323222805909,0.0015348502791148189,0.6778372186582343,0.5386020292557471,0.9674991306455065,0.19828187745497294,0.0047631871246768265,0.5732947779862438,0.9013984005093597,0.9946785483574285,0.2909796370262019,0.12296150211204637,0.4653297437385715,0.8279805525922002,0.9987583173883288,0.39343787027858523,0.061216577594192245,0.011371223034209454,0.7392472325078243,0.8539765540604519,0.5008721587236583,0.019961207228799516,0.7693014597959349,0.6393419563376463,0.9215740737288878,0.6082657205995735,0.0011218633984091397,0.1707048437144436,0.5329299289678991,0.969485651832847,0.20283593139837597,0.00557827340332151,0.09756398968912933,0.8979818029690909,0.9954739958403818,0.2961590024734967,0.033122339468054096,0.04321540083407727,0.8236671423804868,0.998325546727417,0.39900069012353523,0.05851850302068751,0.010196954146439619,0.7342384298415697,0.8579698583286344,0.5065586699655817,0.01840152649419119,5.0488303090734377e-5,0.6338716536754729,0.9246043736885665,0.6138103843095127,0.0007734077931253469,0.16644698303456135,0.5272535691020902,0.9714114437444741,0.20742842434110464,0.00645731450835102,0.09421532806157995,0.4193628441976225,0.996205352382995,0.3013647353211416,0.0351878293326221,0.040932308304428455,0.8193118649230924,0.9978283162701217,0.40457657451031387,0.05587753530752598,0.00908604264584606,0.7291993277824945,0.9762045490275304,0.5122443328252912,0.01690414186249134,0.00016363326755952645,0.6283840343423118,0.9275797498907712,0.6193403263294902,0.0004895285369657665,0.1622322683657515,0.5215736839112671,0.9732762572738444,0.7208635703768078,0.00740019673335196,0.09091915581070525,0.4137559226661486,0.9968725233822637,0.30659616219310437,0.03731344394510766,0.03870859745835453,0.8149152835872775,0.9972666903345861,0.41016480218275725,0.08883243276378944,0.008038632231923193,0.7241305781524747,0.9744403519999001,0.5179284118464721,0.015469247024569588,0.00034143345718445905,0.6228798081769965,0.9304998174623091,0.6248548313461151,0.00027026235050225944,0.01597643169387225,0.5158910081043874,0.9750798512021377,0.7259509945110127,0.00840679811388434,0.08767589930555958,0.408160157046108,0.9974754225377624,0.31185260638975926,0.03949890835134473,0.03654455593904227,0.30471788513523523,0.9966407415686884,0.4157646502880631,0.5584046843710345,0.007054858390123153,0.7190328366083819,0.9726147847923003,0.5236101717776831,0.16373816624574722,0.0005838658730162316,0.6173596871665007,0.9265194750463741,0.6303531860428155,0.2510838025590481,0.017433749675033305,0.5102062767513823,0.9768219922294596,0.7310091912552223,0.35005289966520975,0.08448597807039832,0.40257627116535744,0.9980139718628074,0.8208779262740833,0.456023968758984,0.034440463671285115,0.299495591432956,0.9959505509406432,0.42137539447029376,0.5640485549810553,0.006134848374330426,0.7139067625572727,0.9707280835469301,0.529288877667464,0.6690823118584903,0.0008908991557470824,0.6118243853538403,0.9235243651158906,0.6358346791921091,0.2560317171244484,0.018953488943727892,0.5045202251880738,0.9785024550050201,0.7360375063176099,0.35548743492717066,0.08134980473041131,0.3970049873150765,0.9984881016945445,0.8252182596346025,0.46169135212980644,0.03239659282527385,0.2942992335339587,0.9951962077285292,0.4269963089640737,0.5696841407322326,0.005278721190400959,0.7087530190710922,0.9687804923138463,0.5349637949594034,0.6744229390921096,0.0012624935897673772,0.6062746187457103,0.9204744711300479,0.6412986017476009,0.2610111896662388,0.020535452917452013,0.49883358892105684,0.9801210221562815,0.7410352892716275,0.36094066329162383,0.06219762364188702,0.39144702615633686,0.9988977507029606,0.8295165251081069,0.46736369083084955,0.03041320778139084,0.28912948360159973,0.9943778095087406,0.43262666668846933,0.5753107126458648,0.004486587580768808,0.19665881001290708,0.9667722630193956,0.5406341895871553,0.6797410042331122,0.0016986011083028885,0.6007111052198675,0.9173701876011211,0.6467442469357014,0.26602157607578747,0.02217943696476271,0.49314710353255914,0.8484784764678328,0.7460018936401407,0.36641187936830316,0.06497271627633455,0.3859031066268831,0.9992428658988162,0.9866828188397405,0.4730402511293154,0.028490565096011555,0.28398701035742113,0.9934954621433647,0.9506941162432425,0.5809275429092152,0.0037585500101210423,0.1921579174315433,0.9647036554336264,0.9591842148906717,0.6850358193749712,0.0021991652996323774,0.5951345644322704,0.9142119160768244,0.9909697137282855,0.7805036111559567,0.023885228431748118,0.4874615045852922,0.8443780205407453,0.9998287526702688,0.3719003754401819,0.06780408090067769,0.38037394584813583,0.9995234026405002,0.985347647541533,0.47872029874633076,0.13190487561415365,0.2788724789946492,0.9925492797664888,0.9482026121016955,0.586533904969657,0.003094702652143566,0.18769684508033035,0.962574937136687,0.9614048451932715,0.6903066996186116,0.002764121414384424,0.11110460716038678,0.9110000650883695,0.9920138345798655,0.7851928790758795,0.025652606669534506,0.48177752752730363,0.8402330183582453,0.9996476075097611,0.3774054415550179,0.07069135127002224,0.37486025903243025,0.7535783548720363,0.9839496951743212,0.48440309895192785,0.1357772133255027,0.2737865510921502,0.9915393847694368,0.9456531317048584,0.5921290736286541,0.00249513137733981,0.18327617001139257,0.9603863834842137,0.8865462242045864,0.6955529631610045,0.0033933963739133377,0.1075556140118677,0.9077350500976209,0.9929943120725946,0.7898452565031595,0.027481343062827845,0.4760959075968453,0.8360440060879012,0.9994018315406279,0.8706028541943402,0.07363415390791012,0.36936275939050156,0.7486609566177287,0.982489142567134,0.49008791666008394,0.1396966642679946,0.2687298845288534,0.9904659077849374,0.9430460048351159,0.5977123251355683,0.22258400057140232,0.17889646405135362,0.9581382775717127,0.8829142662021612,0.7007739313833592,0.004086908779751763,0.10405738463690761,0.9044172934433544,0.9939110193789802,0.7944601416398283,0.029371201059486096,0.047707352995206065,0.33064079980022554,0.9990914565546751,0.874396158270498,0.0766321081546299,0.3638821580392286,0.23353041714431655,0.9809661786465165,0.4957740165238069,0.14366272144974146,0.263703133398652,0.14886317310556296,0.9403815687315846,0.6032829372812782,0.22733296056609414,0.1745582937273688,0.5380152532168523,0.879232777173695,0.7059689289389057,0.004844568924139758,0.10061037154121222,0.4300244901078689,0.8003752251487739,0.7990369375376492,0.03132193620111762,0.04531245982119736,0.32530132309770743,0.9987165226997707,0.8781410331615829,0.07968482621645606,0.35841916390964956,0.2287359346588667,0.9793810004120902,0.9395873487040569,0.14767487185020872,0.258706947925795,0.14483756934033798,0.9376601680464902,0.608840189491599,0.2321171908012099,0.17026222019384324,0.5323426780671675,0.87550223333004,0.7111372838402517,0.3290686407843215,0.09721502060551901,0.4243984044217003,0.7958097406715386,0.8035750521753351,0.03333329615470265,0.04297638174597418,0.3199844441552592,0.9982770784746524,0.8818369944576053,0.08279191321581109,0.010079046356434307,0.22397654093523717,0.9777338129110715,0.94226856900981,0.15173259648657567,0.2537419743807785,0.1408579068239889,0.9348821548005855,0.6143833629204905,0.23693607242325337,0.16600879915984512,0.07450987294693229,0.8717231172274248,0.7162783275463062,0.33442365553993747,0.09387177102792132,0.41878209801233024,0.7912059923810648,0.8080738985351275,0.03540502074523327,0.04069942094773721,0.3146908507259696,0.6970906305783078,0.8854835640756853,0.08595296724234408,0.008974699939657438,0.21925285161425223,0.9760248292117483,0.9448925806452622,0.15583537048086732,0.24880885499674865,0.13692470033693838,0.9320478883376151,0.9835267680903038,0.2417889820964752,0.16179858081722315,0.07155081541061548,0.8678959177050353,0.7213913950487576,0.33980008805653306,0.09058105526705673,0.41317629736462386,0.7865645757850068,0.8125328946787285,0.4452919341798998,0.11005592958604005,0.3094212275508817,0.6918517338038987,0.8890802703218936,0.0891675794049191,0.18639290834495198,0.21456547771827228,0.9742542703759182,0.9474590441872053,0.15998266312784887,0.2773741720949211,0.13303845865039204,0.9291577352778343,0.9849431446243053,0.24667529208350264,0.016124345568251985,0.06864717896876343,0.8640211298217813,0.7264758249580943,0.3451972428775989,0.054480360272316064,0.40758172760449674,0.7818860912635188,0.8169514638225771,0.45094790677489055,0.11364048542826277,0.30417625627041933,0.6865880204737701,0.8926266479522672,0.09243533388450614,0.19084216318601882,0.20991502557215647,0.9724223654302944,0.9499676276564373,0.16417393796367397,0.2824803622788937,0.1291996844605281,0.9262120694705853,0.9862967924128803,0.25159437032653964,0.017588132295618508,0.06579933921483122,0.8600992547922596,0.7315309595891564,0.3506144218661377,0.057090460892852024,0.022674550195513954,0.7771711439915948,0.821329034412457,0.4566102243946592,0.11727501794899164,0.2989566153362151,0.6813001714638908,0.8961222382329895,0.09575580798796862,0.19533140845371005,0.20530209672483268,0.5769631551173655,0.9524180065607047,0.16840865283527756,0.2876146892333953,0.12540887432347197,0.9232112719459382,0.9875875363579201,0.25654558052912496,0.019114320340696933,0.06300766452481688,0.8561307999219204,0.9999885413656293,0.35605092429497054,0.059757853094954905,0.0210123717793555,0.7724203438607868,0.8256650401974288,0.4622781546026627,0.1209590570113297,0.29376297992335093,0.6759888707722472,0.8995665889997291,0.5702668548167651,0.19986006345165602,0.20072728787148586,0.5713393718564156,0.9548098639366767,0.17268625997050518,0.2927764888189446,0.12166651859106514,0.9201557308654049,0.9888152094981029,0.2615282822384388,0.3953694815704964,0.060272516009611254,0.8521162785414461,0.9999947024996407,0.855369486156597,0.06248219184401965,0.019412151746001527,0.7676343054003139,0.8299589203030766,0.9226333368760296,0.12469212607457092,0.000993452866705713,0.6706548054303658,0.9029592547161278,0.9701617823810234,0.2044275423857288,0.1961911907763736,0.5657063606491679,0.9571428903909445,0.6802900451099199,0.2979650933423992,0.11797310134743721,0.45768967316340137,0.9899796530304912,0.7762687632185251,0.400936923146596,0.05759424746828712,0.8480562099403502,0.9999361879273236,0.8593467574265717,0.06526312473924689,0.01787409708836707,0.762813647697571,0.9865475619264445,0.9256445943409966,0.028295072717513636,0.2834564094556369,0.6652986654144443,0.9504389740747279,0.9720664115151256,0.0036868704124460305,0.19169439219627976,0.5600648501412997,0.8932965611503136,0.9964444827125625,0.002254645653441689,0.11432910034638799,0.4520262297256048,0.8177886613451909,0.27158557808177486,0.024065278010829916,0.05497320534233435,0.34622780598494723,0.7274412127941985,0.37246932800442906,0.0681002920592268,0.016398406758102668,0.24760997188265638,0.6264731053757928,0.4793082860696926,0.13230341639256604,0.0004060042421125676,0.16077781354791731,0.9095877823372642,0.5871134702306406,0.21367660385224607,0.007742783522007801,0.08978606987815652,0.961631251049488,0.6908507792747189,0.30842002918080424,0.03806614428819627,0.03794979131061216,0.9921182569742473,0.7856760666304021,0.41210952673128987,0.08996009835430391,0.007689539294366277,0.9996251703047991,0.8671613439984875,0.5199031825511351,0.1610013910399397,0.7530709732246732,0.9838014461040515,0.9315015519396109,0.02464567727195982,0.24787265815307863,0.6545229354527531,0.945385993449579,0.9756922420004509,0.0024367561340476462,0.34651733456177414,0.5487592512090564,0.8861726711274298,0.9976698732840616,0.00346218823028549,0.4523290807009486,0.44071869125158813,0.8089265210975187,0.28176105426799464,0.027674089694983306,0.560366881500803,0.33544634796732403,0.7172546513162696,0.38349859272705733,0.07394185476488091,0.6655857734167616,0.23785804831857943,0.6154377972085572,0.4906763136799547,0.14010495086398628,7.704275342573785e-5,0.1525108030040181,0.5082304272418431,0.5982894161126439,0.22307380744064959,0.009863754054373342,0.0833900110048687,0.40063872692886143,0.7013127683149989,0.31897408742335054,0.042538005404860746,0.9040709505750846,0.29768682858033446,0.7949355628450604,0.4233276043547064,0.096574030770323,0.8313710538962429,0.20418220300895829,0.8747859633469547,0.5312614370463059,0.16944854870626325,0.7431973612473111,0.980805014122512,0.937135253051464,0.6377354768776099,0.25775859021855657,0.6436672561895167,0.9401025726053778,0.979071951983425,0.737777782126223,0.3573804047610878,0.5374284245132673,0.878848977526896,0.1992212750773169,0.8267167491575103,0.4636620240515459,0.42944182459476954,0.7999045439976785,0.29204944606269745,0.900399258942362,0.571640491691252,0.324750029087837,0.7069556834982768,0.39458813462545383,0.08000385756914807,0.6762736147735713,0.22824175553242693,0.6043427621714451,0.5020491653133105,0.14809269301858113,0.7726754155425947,0.14442358142486345,0.49685742186349713,0.6094145076011263,0.23261429109042275,0.012238318335851428,0.07720950380706088,0.38951882826843354,0.7116705992562123,0.3296218074594014,0.04724655479594991,0.02973817015937913,0.28733929455446033,0.8040424610510075,0.43458535184629926,0.10339669352381986,0.8227691206400136,0.19509022497797945,0.8822166705366169,0.5426035170489988,0.17806673184254862,0.733197920317034,0.11707930804790956,0.9425427828311463,0.6486322564322937,0.2677698566330139,0.6327372442923991,0.9345914451544846,0.9822037928210274,0.7477204221488027,0.36831726554037325,0.5260782325602171,0.8713292695867711,0.9993476788244169,0.8352409653319465,0.47501376846742277,0.418201464342812,0.7907273979661027,0.3024454303095791,0.9071070020717278,0.5828770354924541,0.31414438356198005,0.6965496379684994,0.4057322160327367,0.9599626556957124,0.6868702531491488,0.2187660689402396,0.5931937407734574,0.5134209567200074,0.15626251004328762,0.7821373248854026,0.13652033309361356,0.48548604243748206,0.6204829886360472,0.24229311860874758,0.8642296327142731,0.07124774604454903,0.37845609194761537,0.7219189130146295,0.3403576802182325,0.052189356284374655,0.025996294883534,0.2771017899867807,0.812992049390106,0.4458769445105546,0.11042455660728967,0.0028790541063127284,0.1861560055572412,0.8894496209611826,0.5539235542305306,0.18685148144909902,0.7230778240885871,0.10986556859799074,0.4449895252255286,0.6594521344897725,0.2779012776232662,0.6217385548883527,0.051792958818998425,0.3395119110552226,0.7575348930120841,0.3793222582291048,0.5147145478756665,0.8636174379618371,0.24152849384256242,0.8435917297081166,0.4863784406195831,0.40700342619516894,0.7813998312067603,0.1556147348071502,0.9136041103178356,0.594070699179566,0.3036348986913612,0.6860418987566257,0.9596118804238672,0.9643027170170164,0.6973702059021355,0.20943589120920064,0.581996501455836,0.9065880531346657,0.9933201134022471,0.7914532579561553,0.1288051471067005,0.47412217245183824,0.8345780757152483,0.25210528222446316,0.8719265266709106,0.06550782229741642,0.36745624176423297,0.746944546332526,0.35117615101939437,0.9350322096478607,0.02249966647051127,0.2669796117048334,0.6477796249318624,0.45719654014065575,0.11765398384372577,0.0017890005716151847,0.1773841672618442,0.5417139445848603,0.5652156916670511,0.19579825234565856,0.00434293568287053,0.10285368251830423,0.4337003781445369,0.6701895129057255,0.28814761124882465,0.6106768786376875,0.04686845396032274,0.32878275750099617,0.7672161167637992,0.39038968890568826,0.5033432499664398,0.012042783573118832,0.23186034538831457,0.851764721647293,0.4977501604902923,0.39585350395407404,0.7719266697504623,0.14745905803341214,0.9198872221132595,0.6052156912136755,0.2932270120246044,0.6754379025080852,0.07952012169847056,0.9684025507124197,0.7077680404157716,0.2002560497210234,0.5707568376075044,0.8998639217748676,0.9950452220098254,0.8006183947432469,0.1212820152581523,0.46277169150926384,0.8260404300211512,0.26204570517905823,0.8794309879252677,0.05999270237006887,0.35652496897917707,0.7369920626096855,0.36207162244667307,0.9405255649352313,0.019250094056272316,0.256977996866982,0.6368770471605147,0.46853828204120823,0.12508123476795768,0.0009567186182672938,0.16877924859180427,0.5303703826042576,0.5764740868698811,0.20490241552306326,0.005966808662684953,0.09604727771944421,0.4224455341166455,0.6808388362206848,0.29850355611404605,0.5995579387897553,0.042178396826237696,0.31814219078930017,0.7767590843929891,0.4015138313434641,0.491970222278401,0.009688082331375969,0.22233093088990286,0.8597557124892111,0.5091230444153657,0.3847574665268604,0.7623128149579009,0.13948578396897887,0.9259530866111392,0.6163062452383109,0.2829261085439915,0.6647431356711593,0.07347531031715604,0.9722600355509252,0.718058376908703,0.19123129407429096,0.5594805645676008,0.8929329030609989,0.9965141969915634,0.8096279932562245,0.11395482997426137,0.4514404722850409,0.8173340928342392,0.9975829917860666,0.886739133711113,0.05470523975467456,0.3456679293717766,0.7269169605206982,0.3730384572441618,0.9457909947620471,0.016249258951388235,0.24710212025273914,0.6259036499714155,0.47989630205846134,0.9840260740900632,0.0003826388642911849,0.16034570168385753,0.5190111071577559,0.5876929148083848,0.21415926053826428,0.007846291649336534,0.08944987579714098,0.4112308163351325,0.6913945945343987,0.3089637541110457,0.038291692476037476,0.0377252140260424,0.307595716289769,0.786158858421639,0.41268892997342516,0.48060134915239233,0.007587065730311426,0.21294518081302843,0.8675605677399556,0.5204912081283436,0.37372105494116004,0.0004427703626889712,0.13169903794120463,0.9317985653671497,0.627336623062922,0.272737517879303,0.6539631316583236,0.06765118042193946,0.9758731756914777,0.7282358912184493,0.18236629362704032,0.5481735166166539,0.023792405030997166,0.9977262783080312,0.818477391979267,0.10682738229966465,0.44013437748854656,0.8084635687646209,0.9963374145882546,0.8938471828347392,0.0496481701547834,0.33489074031352983,0.7167244528669693,0.9717714393031891,0.9508257748243993,0.013498713771138815,0.23735709158536455,0.6148651109388239,0.49126472361645784,0.9867524795847219,0.7635727056161458,0.15208789000795025,0.5076419954708641,0.5988663709238069,0.9999496536015784,0.8486965905362553,0.08306489021020663,0.40006202723218065,0.7018513263566231,0.3195227931919524,0.917537641352474,0.033511209611581716,0.29714879068925304,0.7954105754593007,0.4239092028621157,0.9668812369861896,0.00574082082414995,0.20370795129222508,0.8751752492111231,0.5318487698049773,0.16989033077906196,0.001050497736439726,0.12410284876888206,0.9374206339633143,0.6383011176317874,0.25827358334969713,0.0196592609950636,0.06205074538501615,0.9792401017156005,0.7382953175560963,0.35794456068641567,0.5368415439579594,0.020449243619742874,0.998680838835143,0.8271620122830279,0.4642489987872363,0.4288592568299193,0.001240978904842427,0.9948350351913984,0.9007514576313314,0.572222875699891,0.32419897786170815,0.7064198131948851,0.9678822755134022,0.9556273001552765,0.676824212887627,0.2277479528881231,0.603767141341025,0.9190811534507342,0.9892270420720357,0.7731685168776122,0.14401008610960353,0.4962689298583075,0.6099886741325198,0.9999817003791573,0.8567568669424857,0.07689562451443077,0.38894494547673175,0.7122036214328659,0.9873890725263113,0.9236859979684954,0.02953856388514331,0.28680681916856016,0.8045094487193845,0.43516884470317163,0.9708305684215071,0.004150302849667775,0.19462402161832265,0.8825958171091592,0.5431898531064525,0.9959891021746532,0.0019163787887717665,0.11670114667775361,0.9428163835728227,0.6491940559768136,0.26829119467443774,0.02294110764895857,0.056676902840114285,0.9823590715946219,0.748231451230785,0.3688850860297144,0.06624271277567806,0.017354199084573918,0.9993773846886271,0.8356773607935917,0.4756015562993442,0.4176209439934526,0.0005692594498684644,0.9930766309181847,0.9074483858677709,0.5834573431609715,0.3135981738743352,0.007105878199932081,0.9637510320541924,0.9601930864723587,0.687415982444093,0.21827967587556985,0.592615483205345,0.9127699845125007,0.99144848122723,0.7826229922780655,0.13611646939932232,0.48489779468054983,0.8425141136335734,0.99975505942463,0.8646325593434357,0.07094527065333939,0.3778853229846355,0.722446123543623,0.9847249347518445,0.9296151418216165,0.02580933227138099,0.27657515260584475,0.813450770495815,0.947059958139596,0.9745362947571599,0.0028163347319587473,0.18569809176566854,0.8898184320737854,0.5545085902197738,0.9972983673531938,0.003039965517677101,0.10949776126703514,0.9479830224650405,0.6600098021526959,0.9968384554632452,0.026469781902443423,0.05153243318327555,0.9852284715909914,0.7580391513425899,0.3798934494953176,0.07201169858794426,0.014508872784201987,0.9998155554795591,0.8440190317173211,0.48696673742960267,0.13753907741857613,0.00015594266347046526,0.9910631115571384,0.9139345025908876,0.5946486302600236,0.3030938131480344,0.009143871284459926,0.9593798464077922,0.9645207714633717,0.6979107840206865,0.20895715938121306,0.04105295580336543,0.9062452506956044,0.9934156476901248,0.7919312401248741,0.1284111239901919,0.473534473299259,0.8341405124523489,0.9992698480007571,0.8723195928999579,0.06521690730670093,0.3668888819426404,0.7464326548230293,0.9818100030103759,0.9353220052060083,0.02232544425384969,0.26645908480809366,0.8222299145987726,0.9418514225533012,0.9779964986710925,0.0017396066586573555,0.1769347799603873,0.8968393571644622,0.8812600237456394,0.9983503331411101,0.004420676585673744,0.10249641952800242,0.9529178774499358,0.6707427601529266,0.995433060234723,0.030243458039218463,0.04661999813429368,0.987846817093218,0.767713343442392,0.969380905748396,0.0780021231508215,0.01191473687452238,0.9999951245008254,0.85218270912039,0.49833866189693476,0.14546651985665116,1.2423934393490654e-6,0.9887955188919024,0.9202064519202086,0.6057909466877683,0.229486311705781,0.011435830581414508,0.07920197383576294,0.9686081160083342,0.708303187665838,0.19978522682288513,0.04568454869109012,0.031011673176896404,0.9951275236598078,0.8010884443827241,0.12089803658478049,0.10114810894510884,0.004721383385867695,0.9985263171532123,0.8798139903839336,0.059713498297634726,0.3559613118477666,0.001558763232016036,0.9786457854712663,0.9408036354225113,0.019088702376701516,0.2564638497721402,0.02167149531590723,0.9364142755151441,0.9812093898731753,0.0009206757228395479,0.16833862029093655,0.5297829423931075,0.87380384175637,0.9991444552571942,0.0060577976205865025,0.09570074391566691,0.4218642044972661,0.7937381586263428,0.9937713307150347,0.034260183580381354,0.04194213935955565,0.31759411769316587,0.7772490221573696,0.9653409211821449,0.08421088705218466,0.00957313354692868,0.22184170729252117,0.8601641691618226,0.9151808210614923,0.15357739593212638,0.0001052386808286232,0.1390782547931052,0.9262609887842707,0.6168785274720779,0.23912055220400352,0.01398057024388949,0.07316850565985283,0.972453005338066,0.7185878164080941,0.33684580857340146,0.05055120184936246,0.027190200083212712,0.9965832234212377,0.8100898671654087,0.11358109441244185,0.10810942099397741,0.0032903539572348706,0.9975248515806927,0.8871118742360702,0.05443789105914548,0.183967472881492,0.002585001221280081,0.9752339192829523,0.9460571963063462,0.016100781312059498,0.24659461897662305,0.025107079225170414,0.9307513301745567,0.9841733060314912,0.00035996563478585264,0.15991406036219458,0.06980489067743467,0.866154255752507,0.9996803228271098,0.007950481585159042,0.0891142504745378,0.41065172109166,0.7844591391795928,0.9918541266737289,0.03851788029462894,0.03750127715699764,0.3070526608198841,0.6894808386057286,0.9610601718289713,0.09063477791235741,0.007485274333870751,0.21246352378775152,0.8679592822788862,0.9087364214727145,0.16186750912313758,0.000467877718541454,0.1313012709525111,0.9320949805996033,0.8373262001738452,0.24888977026770964,0.016776773637832865,0.06735587770905238,0.9760534501283575,0.7287593490381329,0.3476379453543502,0.05565039729908944,0.02361335613248644,0.9977819938035094,0.8189308511871838,0.45350086181459515,0.1152734950340149,0.002116319318116844,0.9962659694358778,0.894209468572127,0.0493928151608774,0.19286188989472225,0.0038685989456148095,0.9715761697258948,0.9510799696945296,0.013363226993551358,0.2847924923638715,0.028788370072458547,0.924865516507748,0.9868867136324163,5.776650275612916e-5,0.1516654589942949,0.07571197205447217,0.8583152235870148,0.9999576585959769,0.010097749215306262,0.08274034701944016,0.14244824717068377,0.7750329421670729,0.9896824400614412,0.043014345273522436,0.03329970920385639,0.29661103381947684,0.6789076450941118,0.9565408725246205,0.0972704720461795,0.005652239482014432,0.20323411004570074,0.5744280262868742,0.9020805439482045,0.17033257017154052,0.0010889718791703418,0.12371504976978126,0.9377054088915086,0.8288445491588143,0.2587889113581763,0.01982299402326604,0.06176709740451525,0.9794075875292352,0.7402527367754317,0.3585089134092145,0.06097949674509845,0.020282991963748997,0.9987232145695395,0.827606822172422,0.4648360230508199,0.12263662441342865,0.0011998869074617557,0.99475032205734,0.9011031011365381,0.5728051596540771,0.20191521844628751,0.005408892278745192,0.9676744292992328,0.9558693568322352,0.010877455816452497,0.2951132633102236,0.03271346317850066,0.9187598798017517,0.9893482087740518,1.4234682889080474e-5,0.39787875687928353,0.081838577681349,0.8502908011312407,0.9999763190718214,0.01249848952678001,0.07658233137233061,0.15049027561820927,0.7654644446503349,0.9872573944966645,0.047747252071259905,0.029339609367864006,0.23546277798580179,0.6682418857687247,0.9517853615292463,0.9710283112612736,0.004074977393327794,0.19415824131335857,0.563163056451304,0.8952166322017235,0.9960631510600098,0.0019681998120745225,0.1163235163132762,0.9430893708558044,0.8201927558154283,0.9979336863803409,0.023117655302819062,0.056405056349876415,0.9825136821287893,0.730217068411445,0.9765525701786392,0.06653574294117676,0.01720083068877276,0.9994063987369742,0.8361132912223174,0.9329182210730305,0.13019499949030794,0.0005415308822673826,0.9929786936325463,0.9077892052024159,0.8690682009066779,0.21112277439468968,0.007205084281525664,0.9635307167416152,0.9604228797173765,0.6879614521010285,0.30554004150686653,0.036880327722102424,0.9124375790788104,0.9915565178925947,0.78310826813704,0.40903786555573074,0.08818153768662002,0.8420851401764302,0.9997362945998178,0.8650349808263974,0.07064338965602301,0.15871313844003465,0.7557585973164148,0.9845802446843945,0.9299159173417682,0.02562302658250093,0.24518156650819967,0.6574890790337188,0.9467960993176091,0.9747213792161837,0.0027543041343836006,0.18524061339438636,0.5518654064040103,0.8881482375827745,0.9973591179951145,0.0031051066096446367,0.10913049492101712,0.44381981216357247,0.811375296533117,0.9967720354589942,0.026659052837194552,0.05127252883515249,0.9853701268510668,0.7200622870253728,0.9729875461791163,0.0723162611166549,0.014368467000542784,0.9998311928301508,0.6184731870441129,0.9271162973590982,0.1379447096037113,0.00014159187225459835,0.9909520007921233,0.9142643214169557,0.8613003057405604,0.22047979380203914,0.009256245614271852,0.9591471759867163,0.9647381823827106,0.7786129333866639,0.31606743219714667,0.04128680779088162,0.9059018854619165,0.9935104984212726,0.79240881786466,0.4202440375311929,0.09473757025829616,0.8337024862856135,0.999237709367284,0.8727121433335198,0.528144949729492,0.16711258117298022,0.7459204219163749,0.9816523757669535,0.9356111976878492,0.022151883786889093,0.25503219666121907,0.6466547883310878,0.9415756673060396,0.9781688289877108,0.00169090301413094,0.35439089762037024,0.5405409214858657,0.8808790172391535,0.9983977541075528,0.004499104042669899,0.10213970722199472,0.4325339443640045,0.8023967334159392,0.9953533574681981,0.030445354327138352,0.04637217040133984,0.3276773811589394,0.7097936466442422,0.9691778010717151,0.07831806046379713,0.011787366348171346,0.999997377062984,0.607393976719538,0.9210933860645691,0.14588174509702106,2.7680362768567335e-7,0.9886712921355979,0.4999794074406642,0.8533454758193697,0.22998143539888954,0.011561315017595719,0.9545260750539768,0.9688130321148019,0.7690976458150496,0.3266899885680694,0.04593062349672489,0.8991561804823501,0.9952091393815012,0.6722839564261696,0.43149147479503935,0.10150328334183562,0.8251471765969743,0.9984808213394273,0.8801964666646995,0.5394920543911159,0.17568425799240894,0.7359550086670777,0.9784753026073245,0.9410810952394708,0.6456485019035277,0.2650095717839778,0.6357446192621745,0.9361267665168285,0.9813688768846474,0.0008853242303547559,0.3653080647304084,0.5291954609219551,0.873412732224762,0.9991785220128164,0.006149470864684203,0.4718961701842453,0.42128298312384344,0.7932617119221761,0.9936783864240012,0.034474600761461194,0.04170651646645235,0.31704629729426365,0.6994164602050867,0.9651253059972213,0.08453803568522866,0.009458864178682969,0.22135286904362583,0.5962592013527657,0.9148526034100213,0.15400199939251663,0.00011765879201186547,0.9861377476888582,0.48860699574977606,0.8452078269275638,0.2396227830890837,0.014119099861495343,0.9496698048751435,0.38148680107888655,0.7594431286283148,0.3374022145684499,0.050809372155389276,0.892203954330095,0.9966515619059595,0.6615634009955339,0.4427743579862103,0.10847517639517396,0.8164236375798402,0.9974660221258751,0.556139263331026,0.5508187260849353,0.18442373396073203,0.0026451110654091003,0.9750506690053703,0.9463227799022689,0.6564900486516134,0.2751085296384562,0.025291552058609224,0.9304522161807329,0.9843198672201303,0.7548538678750973,0.37629492069354153,0.07010511230484812,0.8657532455536585,0.9997010177459629,0.008055353185135061,0.4832578789386244,0.13499316518574667,0.7839749584607965,0.9917479889470425,0.03874470743061981,0.5910026319794934,0.21692567992652928,0.6889360968060626,0.9608321576938946,0.09097296860059889,0.007384165246061669,0.31207671276563786,0.5850746220142211,0.9083971783414548,0.16230127111609538,0.0004936771046237243,0.41600306430112133,0.4772404787354913,0.8368915694391122,0.24939884849331367,0.016928276762414873,0.06706117436264847,0.37046912046553965,0.7496543770195911,0.3481985677525391,0.05592052952963755,0.023434967199459145,0.2697463725922285,0.6507592535659046,0.4540868494041217,0.11564964219988477,0.002062574898275882,0.9961938367780581,0.5448242335888112,0.5621191044544401,0.19332648732202046,0.00394200870351108,0.97138024684734,0.4367960885879306,0.6672506283247996,0.28532384508040987,0.02898550604538208,0.9245549522783216,0.987020273168284,0.7645721697958586,0.3873457809720157,0.07602362872556356,0.8579045202013571,0.9999649709706258,0.8495391747838759,0.49462824997269234,0.1428598713323393,0.7745412779460394,0.9895631638141675,0.043253465005334335,0.602161559724085,0.22637322987533515,0.678357978928507,0.9563005774126272,0.09761952981165012,0.7049243045375647,0.32266394106600527,0.5738460255426255,0.9017304508596526,0.17077526627103962,0.0011281371916937455,0.42723558676142454,0.4658857373700659,0.8284010061390722,0.25930457353008096,0.019987392267955928,0.5352050599710405,0.3595184584039499,0.7397364556341482,0.35907346214765434,0.06126145113526443,0.02011740488698127,0.259711145031273,0.6398771041426635,0.4654230960290586,0.12302296872753443,0.0011594859262169521,0.1711244276399121,0.5334860120391327,0.573387342747139,0.20238791184153648,0.005495563968611061,0.9674659351891056,0.4255312476955161,0.677924673459418,0.2956502327628302,0.03292316029386044,0.918438026020916,0.32105389716266514,0.7741535835574511,0.3984549279126027,0.08216150814670181,0.8498706170544059,0.9999702451188845,0.857580540779524,0.5060014003201451,0.15091135978168252,0.7649655513113794,0.9871250414416657,0.924309816457483,0.6132676296497335,0.23596235278281819,0.6676875796313773,0.9515329097676817,0.10447428042482942,0.7152446818752636,0.3333429220502639,0.5625792215509183,0.8948558702920832,0.17941960045970662,0.8071706078728895,0.43850575712168977,0.4545486465331009,0.8197405299973518,0.269334833032719,0.023294863608885663,0.5465401446610995,0.34864048070534936,0.7296944959489752,0.3700212711443299,0.06682937360933794,0.6524012805104873,0.24980024157837022,0.6289225830889871,0.4767772325504952,0.13059134106026482,0.0005144942428601529,0.16264340076895906,0.5221304650143316,0.584617610839636,0.21160331918897357,0.007304973059914066,0.09123985863873513,0.4143049365185528,0.6885066613642855,0.3060823498705535,0.03710247748378526,0.9121046022719095,0.31048104881898864,0.7835931517900461,0.4096166137048815,0.08851557486381978,0.8416556928093069,0.2155069913884215,0.8654368966056607,0.5173714455766774,0.15914346473873736,0.7552527329841572,0.9844348833004002,0.9302160972749739,0.6243150955380483,0.24568808729048086,0.6569304197195203,0.9465316215236013,0.37462611007401453,0.7254536928198323,0.34410813047345,0.5512800394203958,0.8877769935082377,0.18822980115199156,0.816064441026151,0.44980774425888054,0.44323507197191275,0.8109146218958121,0.27948443740112605,0.8919161551637593,0.5578511497409142,0.33784081557448753,0.7195336936177827,0.38103633040749374,0.07262141613994771,0.6631931216571594,0.24001879007947008,0.6179013582127281,0.9268100426202719,0.1383508433646104,0.7609145816471106,0.1543369203134049,0.5107634678108526,0.8608932415600987,0.22096794136417225,0.009369299799288189,0.08479623097506078,0.40312296348758153,0.7781240681480726,0.3166147988846032,0.04152129525984466,0.034644013660335204,0.3000062565194334,0.6823675349944736,0.42082506335512365,0.09508254131837784,0.8332639978218646,0.20622851366877815,0.5780951161143068,0.5287325029445403,0.16755192695849502,0.7454078483221881,0.1261688068018656,0.4701759457185665,0.6352982414920397,0.2555454013577486,0.6460920648872394,0.9412993003189181,0.36364944775309926,0.7355460552861739,0.35495399647700576,0.5399543252846221,0.8804974830793255,0.26349001354009327,0.8247947442074427,0.46113570058813796,0.43195086726662857,0.8019278483098837,0.9952729684605238,0.8988767263662156,0.5691322229597932,0.3271250506976298,0.709259305782801,0.9689740464163703,0.954332648679276,0.6739005275964933,0.23037185140280647,0.6068191318339238,0.9207757803462697,0.14629746091752854,0.7705483242664303,0.14620928399972483,0.49939090164939876,0.8529288500441019,0.2304769331640567,0.8545625202626665,0.078567427416528,0.3919911140928345,0.7686014548572404,0.32724213037483646,0.04617732735046476,0.030604904820507595,0.28963493986288114,0.6717313705583974,0.4320744776742423,0.10185900979870444,0.004561387661946692,0.19710203167117607,0.5668420698601744,0.5400786942762689,0.1761323959496866,0.7354359910136692,0.11871333223447761,0.4588314930605129,0.6462113848934916,0.2655291948655194,0.6351781228386347,0.05812930231778657,0.3527433324444156,0.7455165475424612,0.3658749084705927,0.5286079390046721,0.8730211053832806,0.2535315106098703,0.8333570004067841,0.47248376508828877,0.42070187080157656,0.7927848589458983,0.16582885070433673,0.9056309209839779,0.5803775275536217,0.3164987303515202,0.6988766483547643,0.9649090464477856,0.9589633859431712,0.6845179583766126,0.22086441682043229,0.5956816378344469,0.9145238110396692,0.9908639674945579,0.780042086697722,0.1382646970214364,0.4880186506320208,0.844781855117333,0.24012537468951567,0.8624892909433942,0.07255667071121946,0.38091514789085523,0.7589398686777109,0.33795884581944835,0.9280095932661333,0.026808658374527172,0.27937246491049533,0.6610063532728118,0.44335903627826023,0.10884147419795304,0.0031569220674797505,0.18813226738629668,0.5555544398933816,0.5514041491160011,0.18488043222570277,0.0027059099235228756,0.11145513325395978,0.4475083407574249,0.6570488793431168,0.27563430225493707,0.6241942403862093,0.05292159954345266,0.34191340691095495,0.7553600109118308,0.37686521603549755,0.5172467511372725,0.015264964614409182,0.24370052909594647,0.8417467795607622,0.48384606633430444,0.4094939027445384,0.7834903843353561,0.15745588348885176,0.9121752444345717,0.5915812452647715,0.3059673525348032,0.6883910932624873,0.9606035051418478,0.9633566581211654,0.6950399205982842,0.21150140542576307,0.5844946386913283,0.9080573694343811,0.992901038926201,0.7893909569214644,0.1305072698633562,0.4766525986977158,0.8364564719893478,0.24990827389093073,0.8702285116947626,0.06676707079099703,0.3699007955245363,0.7491443084600728,0.3487594004498767,0.9337777717153495,0.02325723847904776,0.26922414140935114,0.650198032201605,0.45467290059974425,0.11602632182814204,0.0020095202994401262,0.1793238617199544,0.5442380663704675,0.5627030077368207,0.19379150960155928,0.8215142995029294,0.10439796521182215,0.43621234734489966,0.6678051175819721,0.2858554952000224,0.6131461005292392,0.04794521263007956,0.3311652744955456,0.7650713524414543,0.3879192328481269,0.5058766398974084,0.012601737593305629,0.23400215549310815,0.8499597408446219,0.4952167255351441,0.1432719902605059,0.7740492333873759,0.14926014668115867,0.9185063107216884,0.6027375793524345,0.22686597928059482,0.6778080656734605,0.08089638474690541,0.967510192158834,0.705460970257173,0.3232143113834859,0.5732639224952822,0.9013798012310831,0.9946830861203251,0.7985900978845533,0.4278178777439242,0.46529862657810983,0.8279570081667583,0.9987561195041412,0.8777761782872913,0.5357920807950023,0.3589537557581167,0.7392198423723322,0.3596382061196337,0.9393215159744381,0.6420949267705155,0.259195220045202,0.6393119995095777,0.46601021690864686,0.9803521725404403,0.7417624680645272,0.17068137209191786,0.5328988043197264,0.5739694241725455,0.20286101753571995,0.8301406011254732,0.0975454794472927,0.4249493573066763,0.6784745343926226,0.2961874853127795,0.9031023957851236,0.043202716332390756,0.32050449622171473,0.7746455475376035,0.3990312396220794,0.08248501746745679,0.01019068770396303,0.22444140768555093,0.8579916349181838,0.5065898595754077,0.15133292755748246,5.0932539385095676e-5,0.14124588070958932,0.9246208441870825,0.6138407575918243,0.23646229336618851,0.6671330411868985,0.07480283703009372,0.9714218390409237,0.7157757155605387,0.333897890075056,0.5619952999559816,0.02821491970969625,0.9962091870556903,0.8076347500029651,0.43908983764486753,0.45396260875480043,0.8192878612245531,0.9978254112541076,0.8851283856005485,0.5471260632942107,0.3480796925286732,0.7291716052776702,0.976195039976252,0.944637957741162,0.6529616770321812,0.2492908897258045,0.6283538875690879,0.4773651193409936,0.9833845907000129,0.751654549260871,0.16220927007792674,0.5215425206118485,0.5851975692423985,0.9995589608023758,0.8385960898496316,0.09090122139813522,0.4137251980507331,0.6890516094785546,0.3066249268793785,0.9097264521565256,0.038696564391414834,0.30993658791644574,0.7840776425653467,0.41019548706727244,0.9617241127694326,0.008033062410093383,0.21502323235065457,0.865838306124429,0.5179595840592273,0.15957426324536406,0.0003425869704318796,0.13341723211048118,0.9305156812053775,0.6248850352606925,0.24619496038550337],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],69:[function(require,module,exports){
module.exports={"expected":[0.455183631556538,0.46389716207143616,0.9947863403740154,0.09033384382491033,0.02074590951715588,0.00026245511718703263,0.3286945619389081,0.18904822049449804,0.08126206702184752,0.01637989459991146,0.0010495449379939181,0.6903095590494908,0.8826177875627896,0.9251832323754657,0.6132359632894467,0.0023604431594160813,0.2986341739407372,0.8719892601949201,0.06444637461122904,0.4067085482253533,0.00419377357366818,0.28391323875601293,0.8551290869375535,0.945200103769843,0.414414514562224,0.0052668725370796365,0.27687687562700286,0.8495722076641687,0.9487104664716443,0.4304187139512162,0.009419485870028943,0.2551671414863856,0.8378072163818828,0.9556212419155607,0.44649596119854423,0.012806381692405111,0.24117215764279276,0.8256875881693484,0.9651868201031151,0.4626293780809667,0.016704743347523976,0.22744889656598843,0.8132260464603365,0.9680010783632573,0.4955333264435982,0.01877159505061743,0.20718747041328417,0.8070828418949683,0.9707004987295209,0.5033656194064848,0.02095653036303119,0.20087487016940658,0.8008642854801282,0.9784161621598664,0.511197086515197,0.02857070979221754,0.19463566911519758,0.7668832669500508,0.9806337785271892,0.5357374967283471,0.03732303662389319,0.17555662483618661,0.7602274855682098,0.9827334571943557,0.5435451382412951,0.04034896943445615,0.16963713566128819,0.7535078496831347,0.9885492713277293,0.5513420946678289,0.05056951312141417,0.1637987107772863,0.7320325920828508,0.9931856061718447,0.5757103796497317,0.05405692672618978,0.13440488960940827,0.7250664793039119,0.9944137464695386,0.5834428399055375,0.06570277958886944,0.12910692131803964,0.702863584067611,0.9930079511588852,0.6075577752753084,0.06963703319867537,0.12389996260331326,0.6956802393884269,0.9999201953093622,0.6151932771023073,0.07367688907949238,0.11878529114641401,0.6570432900681147,0.9999987876053847,0.6228005128548397,0.07782135593330347,0.11376416198312095,0.6495883113979659,0.9999546904240428,0.630377615872822,0.08206941679269819,0.08887898416802409,0.6420966268153225,0.9997879145858828,0.6379227268901276,0.10614447631192192,0.08447190313689779,0.634570074626374,0.9994985010142847,0.6771120814512821,0.1110176973367456,0.08016678420307688,0.6270105016931076,0.9990865207254207,0.7150932872882716,0.11598636666384693,0.07596468375470694,0.6194197629801257,0.9948913253103655,0.722137209118005,0.14372011024425885,0.0718666329013038,0.5789459852492521,0.9937138781708345,0.7291266230193885,0.14925888297351375,0.06787363722074063,0.5712024841732226,0.992415283742186,0.7360598139331858,0.15488372040013387,0.04859101904276886,0.5634415114636876,0.9909958606729362,0.7429350805961327,0.18591645965639553,0.04527843794057912,0.5556649715046358,0.9894559572604787,0.7497507359583909,0.19204894985630916,0.02967202771684757,0.5478747724999409,0.9877959513656196,0.7846435048452536,0.1982570049462437,0.027071831459640205,0.5400728260051268,0.9770717536531739,0.7910476207771775,0.20453910159643657,0.0245876821034805,0.46536086103396423,0.9746686987593691,0.7973803195749671,0.21089369830884036,0.02222018920781893,0.45755187093721844,0.9721491698739954,0.8036400473238432,0.24554369737266346,0.01996993370699618,0.4497532967432687,0.9423594024935377,0.8353854650369734,0.28192943944653914,0.027772640376473035,0.4753211807217606,0.9537252999113051,0.8159344639206567,0.2591508672238478,0.015823314653443776,0.4341950474808434,0.9348417821187133,0.8468369756515517,0.2961305204275305,0.00031919328739676844,0.4596901877845851,0.9469220356417243,0.8279188041142442,0.27299442038024213,0.0018919035302768505,0.4187013830147027,0.9268973828034134,0.901349620178328,0.31053169073771036,4.849572581455686e-6,0.44409875723459385,0.9396801361703534,0.8855356568751118,0.28706076997602226,0.0007751430227355693,0.40328750972559674,0.9185340016418039,0.9104933483724207,0.3251188162334445,0.00018123009199821905,0.30015998572766356,0.9320067091172755,0.8953193459583144,0.3013361104800184,0.00014835073876678928,0.3239180413651368,0.9097598469411308,0.9192341945908278,0.3398775802638966,0.0008481617355774462,0.28590122977921695,0.9239092856287651,0.9047150457117069,0.37951130584155907,1.2141848664326549e-5,0.30934560286931334,0.9005835301656107,0.9275635800602084,0.41996693052927103,0.0020049899379301905,0.2718526027789748,0.8745252424159777,0.9137135346507159,0.3947710728591694,0.0003666500357313307,0.2949602836544568,0.845912175850102,0.9354733298386604,0.43546645444404036,0.0036505793207768367,0.2580278928641236,0.8149395110541002,0.954262596175375,0.4101341176478663,0.0012115273650759595,0.2807762023070172,0.8344332922056845,0.9429556808390824,0.45102931532257456,0.020330304530199905,0.24444066840663786,0.8026202413010548,0.9605838117346068,0.4922585606225477,0.013726341821519328,0.2668072799069322,0.8226261763352563,0.9750701256520995,0.4666402388707519,0.024986426006057716,0.2311042646964931,0.7900039624949242,0.9863158059465645,0.5079226753080507,0.01760964443307006,0.2530672263646718,0.8105024164270009,0.9797208249902479,0.48228390362295953,0.0301087533484099,0.16543198562689432,0.7771030569833188,0.9897163085395003,0.5235790142205881,0.04581316878765568,0.1849197276446165,0.7980739114419221,0.9839006984928111,0.4979449559794685,0.03569225920817043,0.1539569665508317,0.7639301864630021,0.99263617514968,0.6054061187409095,0.05258534481544247,0.1729132039929609,0.7853528594355134,0.9876056437895524,0.5802119852880603,0.0417314636089135,0.1428215741740591,0.7504982795529684,0.9950725400506955,0.6206646028615921,0.05979663953040443,0.11516639395207273,0.713934955837888,0.9908320246323157,0.5956319624688023,0.04822043932524023,0.13203673741637173,0.6759123005976404,0.9970230120527539,0.6358046597439553,0.10479166130952455,0.10535578960424419,0.6366896807937649,0.9935766744638513,0.6109580808960935,0.08961016746514122,0.1216130411419521,0.6611651297597771,0.9984856768495287,0.6508114300582366,0.11457978437711314,0.0959325119690348,0.6215570410173802,0.9952005202067666,0.6261752986285818,0.0987585056723489,0.11156071577077081,0.6462597821179615,0.9980923106456596,0.6656701852898408,0.12474618119397196,0.08690580959755068,0.6063050981121196,0.9927926253562778,0.6412686806063721,0.10830064554918828,0.06506877567226027,0.631210886644697,0.9999423228222393,0.7410079602129013,0.13528087386873827,0.0782845418189374,0.5244977804135479,0.98990107524732,0.7182336565114072,0.21727263610224135,0.09260926731030794,0.5500663593677324,0.9943824730561144,0.8097809224795973,0.1965039800322509,0.10800528329196851,0.5755032818791697,0.9975638235161279,0.7892541687188734,0.17653340888158525,0.050477739565360835,0.6007416580286689,0.9753561456129183,0.7679667809639016,0.26599401028939285,0.062291749467287494,0.6257151200022623,0.9826788328958063,0.7459747373561445,0.24365049809528588,0.020590742756288194,0.5188164492835395,0.9887322491765491,0.8337489411954018,0.22198109250583337,0.001276365612168151,0.5444051251790827,0.993500476156632,0.8142245527836078,0.20104277623142963,0.003762368395833271,0.5698770316331355,0.9647151662252663,0.7938738672859912,0.29412170033429885,0.0075532969252358195,0.5951651867313731,0.9735621395051117,0.7727503996553846,0.2710344982223838,0.012639182427507278,0.35567392953084753,0.9811638153937676,0.8564070391411575,0.24854939268502607,1.9398196252351507e-5,0.3804042324840018,0.9875002042291325,0.8379616467390878,0.22672551142887792,0.0009025604462997161,0.40544902911150393,0.9522502408313296,0.8186275372671818,0.32305743567177864,0.003098168704119386,0.30218055276982714,0.9625867768996939,0.7984555524504806,0.299317157878794,0.006600449312977763,0.32598084376799374,0.971706876816566,0.877666286257633,0.276104603480275,0.0007247889906079052,0.3502387422968198,0.8402558747825294,0.8603722856084248,0.2534808131106471,1.6444111730629096e-6,0.37489045884436223,0.8585897057853471,0.8421306360031702,0.3526876473401466,0.000593314923300392,0.2738143688776137,0.8759805753732413,0.9124728428214945,0.3283874713391246,0.002498244647235748,0.29697076034311953,0.8923827518402294,0.8974432427914205,0.30453857430744785,0.0033897694289909963,0.320661045381165,0.8166468663597933,0.9533380576974517,0.28120367023084025,0.0010631562675929573,0.34482292709828394,0.8360671024406559,0.9419298983199748,0.38289604064930943,4.8566804959349064e-5,0.24633593388741193,0.8546036034189376,0.9818548031861121,0.3581313414402292,0.00034866904493918716,0.26875754002439084,0.8722076249918651,0.9743788311643738,0.33373970556467614,0.008003879813116066,0.2917872303136223,0.791795060565087,0.9656554141473457,0.4389233711730125,0.00408292972090879,0.31536444498724336,0.8122254798474232,0.955707491571159,0.5469590882260886,0.0014660624139306022,0.21985309704840056,0.8318348588837567,0.9892672236761055,0.5213790663945925,0.02132546894750964,0.24145191599691707,0.8505716320895111,0.9833416859919075,0.49574282533992303,0.014549010365598303,0.26373062302694816,0.7657979974728958,0.9761451342413234,0.6032524175080173,0.009049112556838768,0.17458197486403254,0.7871584132437146,0.9676964927562899,0.5780375601822301,0.004840238266078489,0.19446980001774544,0.8077637061002646,0.9947593345582189,0.5526174922578689,0.09410154735053511,0.2151610592495397,0.7159232901588277,0.9904074881688967,0.5270590593326484,0.07966793299163699,0.23660134202066596,0.738757712142216,0.9847660472054078,0.6336839582195656,0.06633964015828525,0.15145020947208127,0.7609642875744256,0.999760280465461,0.6088097449616676,0.05415171744687264,0.17028566890324404,0.7824846211823846,0.9983095800184016,0.5836494013731685,0.11318067858361947,0.09723350285159377,0.687260480789814,0.995548505349598,0.5582690900705835,0.09744841808600596,0.11295108011123867,0.7107803341423453,0.9914843170882157,0.6635908069489703,0.08277472285989113,0.053987747546173526,0.7337459113432911,0.9997489248638528,0.6391548657797979,0.06919817942404372,0.06615931175418216,0.7560968212190551,0.9999040258094009,0.6143529975719733,0.1337780248605166,0.07947172028270372,0.5266970671649279,0.9987445597166377,0.7162502039314358,0.1168088652808581,0.09388996630533031,0.5522569750337494,0.9962735755626246,0.6928555832419984,0.10084735998895866,0.04071174860177973,0.5776794659318032,0.9977761203535412,0.6689538220219886,0.17485728941315787,0.051446335229774154,0.6028976878898294,0.9995364139408514,0.6446077732708528,0.15581274430170078,0.0633604559926777,0.49538032329078663,0.9999831071762947,0.7440550908282694,0.13767328736314893,0.021220851525537043,0.5210168760051911,0.9891923865140779,0.7213634266944196,0.12048661881785089,0.029238395735575684,0.5465981619263346,0.9555582005279091,0.6980896566978516,0.19928050530433394,0.03849387294058587,0.5720569115113984,0.9655232541092457,0.6742949824479045,0.17919835352671587,0.048962944578304746,0.46408171104112517,0.974264149664592,0.7709020935401614,0.15995979421588574,0.013135924146431666,0.4896942884980114,0.9817579017955733,0.7490024477640115,0.14161541783447018,0.019612720351010082,0.5153339662540498,0.941760214465017,0.8363354318218383,0.22488400572510125,0.027352761600331066,0.407612382624595,0.9531850192034244,0.8169273386825637,0.20384306709008793,0.036335694381367634,0.4329240733592431,0.9634181110174623,0.8926073337025877,0.18358091422608414,0.006961874335557339,0.4584121495552473,0.9122678358375031,0.8762194499937815,0.16415082927707164,0.011872501960032311,0.48400958677770123,0.9262283775673141,0.8588422450100914,0.3752414761180578,0.018066728608095384,0.3770237888044417,0.9390680926043702,0.9252637246579947,0.35058465456585935,0.02552826570082134,0.4020296998817725,0.9507532171354238,0.9112241497243166,0.32632074140804235,0.0027229344277152068,0.42729323746463177,0.8937438346412786,0.8961032037980567,0.4311015006160076,0.006048119903468874,0.4527479675735696,0.9090236502551583,0.8799406495057924,0.4058050295568296,0.01067222042403626,0.34691786046538325,0.9232278813953092,0.9408955431163958,0.38075625724966466,0.01910577914779077,0.3715198469679122,0.9363191760639529,0.9282269649556907,0.3560210529188541,0.012720304921230996,0.3964596898699364,0.8736744405960825,0.9144323045392257,0.46224705126590243,0.007616200302671017,0.4216718063921082,0.8902135588241193,0.8995478368417,0.4367382858859707,0.0038068872438160595,0.31741275942297975,0.9057265563252792,0.9547969044614906,0.41139587596602295,0.02862171357786908,0.22167985761411985,0.9201726395189394,0.9435490455795443,0.38628646289126944,0.020693830450230044,0.24333932041909334,0.8521384234382559,0.9311348129036499,0.36147607534936876,0.0002306954044157261,0.15714947836396803,0.7676606524560664,0.9754684277023393,0.4679198361361952,0.008636803608863153,0.28862428932454587,0.8866328077971035,0.9975994350192383,0.575861621281151,0.03998774588607906,0.19621596522385948,0.8094962846626443,0.9571302544413516,0.6802609508136974,0.0017448099572821008,0.3361311636742234,0.7179074359370967,0.9899734386386443,0.5248598548996876,0.02234388133968135,0.23847572059402988,0.6161431202707587,0.9339868923636474,0.6315606634549424,0.065247717236392,0.3853605682919605,0.7628401829477786,0.9771970177018986,0.732118078252489,0.009720966112045759,0.2834845251257728,0.6653281035150141,0.9981238168333694,0.5814774577209292,0.042245844285682455,0.19171894949492985,0.805010048492153,0.9594044733505389,0.6855534504859704,0.09614613931212013,0.33076926245435756,0.7127752171993775,0.9910748499842723,0.7809647871182368,0.02405571837746978,0.23364594966236873,0.6106045744960327,0.9367828344112672,0.637038351586737,0.06808457709736965,0.016406330667501412,0.7579857143303029,0.9788638809391075,0.7371397314928199,0.13228227993249236,0.08066705627613013,0.6599506970441731,0.9985837649454399,0.5870827548247872,0.04456315445932579,0.03195502113087423,0.554446577003793,0.961619267012507,0.690821948303,0.09952496843078457,0.005098946011968919,0.7076154753951285,0.9921127394313201,0.7856504663919852,0.02582912013271016,0.05242363206840339,0.6050517217117665,0.9996263769046624,0.6424983134263558,0.07097730642038497,0.014992851919549188,0.7530978745426659,0.9804688018005672,0.742130710048887,0.13615925712089244,0.07759700480394538,0.6545526005055027,0.9989792198598817,0.830456502907039,0.04693937665648862,0.02998497852318016,0.5487902947489129,0.9637743489375316,0.6960657627699307,0.10295560010936433,0.00432090593268214,0.702428877951312,0.993086972725899,0.7902991959828978,0.1775123205752901,0.04991773398028598,0.5994852801949222,0.916679941531733,0.6479398427125387,0.0739255310228491,0.013642110196048607,0.4918960898025339,0.9823426429177332,0.7470903683237231,0.14008329812200704,7.759127984929837e-5,0.6491345121578138,0.9427874095690372,0.8347026925722356,0.04937420350621635,0.028075733666636182,0.5431277013336163,0.8825556507567102,0.7012842155847667,0.10643759058610391,0.0036069833237620252,0.4351069872331709,0.964240455616171,0.7949103745648638,0.18187887867201746,0.047470055285924406,0.5939059699802024,0.9135098464729403,0.874765315715813,0.07692886954370437,0.012354280219200875,0.4862107845952917,0.8434698651901955,0.7520180647717272,0.14405389535021157,9.746891468986885e-6,0.6436971328459138,0.9401173754118812,0.8389055875126203,0.22780028061143964,0.026227533527378222,0.5374595292301214,0.8788693330572024,0.9099674795816934,0.1099704894558442,0.002957270533084977,0.4294727048974706,0.9620985487993692,0.7994834056691004,0.4289210073097482,0.0028970546861080138,0.5883145127669113,0.9102862627646466,0.8785054182357899,0.5369037587039026,0.011129528573397718,0.48052726306143956,0.8393151339622671,0.7569131619816492,0.37861878697476137,6.57763387584831e-6,0.3736493177590642,0.9373904108473032,0.8430646440720355,0.485653691619113,0.012231460227523527,0.5317865116322651,0.8751340075550138,0.913196283015276,0.3295924822934019,0.0023718516028086722,0.42384754546367975,0.7953602410950711,0.8040176977613065,0.4345544277680258,0.0035404700647821974,0.3194646157390186,0.9070096073863763,0.8821965600264808,0.5425724380979114,0.009968013683673227,0.4748462603803059,0.835116511377396,0.9425282641866151,0.3841431042331555,6.808391702223249e-5,0.36815547503776,0.7475747204619323,0.8471793242649397,0.49133885452252973,0.013513115568837053,0.5261093823606625,0.8713501574248939,0.9163716383596635,0.5989390480980927,0.0018508022585011497,0.1779384217724077,0.7907527747967074,0.8085126643181805,0.4401963137932164,0.004248103865374553,0.10329458288995264,0.903680304182622,0.8858382636284222,0.5482356106285667,0.029795175503079918,0.21879185988358713,0.8308745405390989,0.9451466508175672,0.38968240790346415,0.00019425778489923218,0.13654175294977444,0.7426181662529142,0.8512490958459982,0.49702513776921925,0.014857699342617492,0.0712637945858931,0.8675182721183881,0.9194931348738047,0.6045067826387351,0.0013941898993450885,0.17360946537602423,0.7861076988177151,0.968148404443422,0.44584593559166047,0.005019864553483577,0.09985889817248988,0.6913369599113781,0.8894300579771177,0.5538925437487404,0.03175927088421293,0.21410807770797802,0.8265897701581097,0.9477074564903264,0.6594225705192691,0.0003850829165658598,0.13266014110105595,0.7376302287088485,0.9850785816445216,0.5027118058226179,0.01626503762321152,0.06836560990311602,0.8636388473005253,0.9225603687834378,0.6100609989361854,0.05473361624074752,0.169322728503688,0.7814256140116005,0.9911793761318977,0.7122707526757389,0.005855652299716296,0.09647497282020101,0.6860708510665084,0.9957176091748923,0.5595425057183891,0.03378393450684103,0.04247033534510264,0.8222627544814025,0.9981717420803824,0.6648020354673168,0.08348277328671372,0.12882604568544787,0.732611553033339,0.9773631071478893,0.5083981230963859,0.01773494836749573,0.06552325833000106,0.6320982570552849,0.9999275058556544,0.6156009785371068,0.057349346651919986,0.022508919151612405,0.7767071260190637,0.9900841839595214,0.7174056981575939,0.006755358992601657,0.09314324455324835,0.6807806734391902,0.9573557531150003,0.5651847656992074,0.035868904475089725,0.04020642097873789,0.5764124356664273,0.997653672100021,0.6701601828134081,0.0866556461860436,0.12503996265386286,0.7275627884060519,0.9756405568032194,0.7671897521532514,0.019267241438424343,0.06273710753263484,0.6266051875952142,0.9314167962357008,0.6211260048297198,0.2428611953598025,0.0208528034700336,0.7719528451896591,0.9889255980339724,0.7225125216073197,0.34098578454708045,0.08986414433995588,0.6754671113286231,0.9550281849413207,0.8135085310679468,0.20030598368841224,0.038001982191493866,0.5707877158660812,0.9970712292321289,0.6754963194662712,0.29328381377790813,0.007713409474271793,0.7224845878987431,0.973856481028748,0.771979019570459,0.3959145210626382,0.06000751790737724,0.6210957414017669,0.9285143972589978,0.6266353631364963,0.24775476920781792,0.019258666811864167,0.514052174091776,0.9877037682215646,0.72759056244309,0.3463874049622747,0.0009586482763353499,0.6701308520588545,0.9526417576055075,0.8179181288090435,0.20487723577770672,0.03585730413366289,0.5651538394776752,0.8964430601172058,0.6808097551817789,0.2984750092104564,0.006750249847536471,0.7173776083907819,0.9720111105996423,0.7767331057445268,0.4014832503158835,0.05733484253424326,0.3511165950992115,0.9255565687523896,0.8597340493374708,0.2526809716784725,0.017726715383117653,0.252051106688746,0.9864188525693849,0.7326391638061897,0.35180889559416384,0.0006389572269358545,0.40077253445177285,0.9501967797985782,0.8222866029553649,0.4578567930174876,0.03377266422532077,0.29781168738026587,0.8929521915271388,0.6860998026522331,0.3036922724614375,0.0058508934487710995,0.2042922826442567,0.970104684219703,0.7814513957211771,0.40706472298488733,0.0010040483896927577,0.34569759889211926,0.9225436933192257,0.8636602552239894,0.2576391655537663,0.016257147345974998,0.24712902888958033,0.8552514832250611,0.7376576726459815,0.35724955515784595,0.00038385991821549004,0.16036859290392003,0.9476935677852171,0.8266133884326223,0.46352585969974247,0.031748332120441425,0.29262386383204564,0.8894104934774533,0.9971490664191653,0.3089349286633294,0.005015456612229019,0.19972594032186464,0.8129433971984497,0.9553282212551613,0.4126582170906258,0.0013965186150726172,0.34029856213005705,0.9194761606833287,0.9890768342412883,0.520460041987878,0.014850152793151827,0.24223966065430552,0.8512268960495546,0.9999873777649064,0.3627086798888642,0.00019338934772117344,0.15621720851026089,0.9451324453628649,0.9758636022901994,0.4691996444135581,0.008875736023107428,0.2874628649641976,0.8858184240966488,0.9977233060029824,0.577128871008964,0.004244047403990148,0.19519843928479952,0.8084881171416939,0.957648263307709,0.4182630090990688,0.0018534845884576323,0.11716711304609312,0.9163543676385825,0.9902273458666003,0.5261405320594943,0.02272451161928224,0.2373836344363106,0.847156876697527,0.9999146343484093,0.36818556363424104,6.757015335118188e-5,0.15211029337747983,0.7617484505632207,0.9775782921926102,0.4748774132390909,0.009974211992711757,0.08308210794427257,0.8821764480288969,0.9982331636919297,0.5827423942240307,0.042763235906644104,0.19071036517792123,0.8039929332884173,0.9956223991924111,0.42387837401477113,0.09690351640866729,0.11353404780154225,0.7116140790010892,0.9913144452203484,0.5318176407805357,0.16986690372709345,0.23256157837610203,0.8430419516373092,0.9997772255826222,0.638271142039933,0.06873201983118676,0.14804837874647953,0.7568864017821837,0.979231206013754,0.4805584317411411,0.1331523995341548,0.07997001105098422,0.8784850363739385,0.9986785735344961,0.5883452144801201,0.21470319800780696,0.1862622985461065,0.799458427103162,0.994839506073067,0.4295035854746525,0.10029406537168595,0.10995097300350076,0.7064482228622306,0.9923379916832056,0.5374906338011889,0.17415905438614104,0.05185348657300343,0.8388826531459102,0.9995751692417512,0.6437270089430644,0.07163729623010695,0.14403199003722228,0.7519911240301229,0.983484044132706,0.4862419650641544,0.13704003358817773,0.0769122462057727,0.3889753588648476,0.9990594779156786,0.5939366070368386,0.21939165166328856,0.18185481475915372,0.5475139092048701,0.9939926040864002,0.6972447587765356,0.10373631740979022,0.1064183521326661,0.4394765490523159,0.965858112622783,0.543158777304018,0.1784933534783678,0.04936068887643924,0.5982282479823503,0.9993084914623462,0.6491642843575754,0.2682635543747378,0.14006164678076594,0.49061393998742087,0.9820032802611351,0.748204374018652,0.1409746175240279,0.07390920893903086,0.3834379260917797,0.9993758275644358,0.5995158486319971,0.22411640278960243,0.02765362656517295,0.5418499938094542,0.9930818027815396,0.7024573991683799,0.3201409261354465,0.10293664214337955,0.433835701785506,0.9637626913983071,0.5488213380988852,0.1828692403501232,0.04692618262896542,0.3289110364475262,0.9989772267399205,0.6545822649567582,0.27331748062534034,0.012072585571174854,0.4849289727844703,0.9804601679237754,0.9377412428751954,0.14495564239232267,0.07096128770198717,0.3779155709473815,0.9395074059199418,0.8398472990856143,0.22887684022704075,0.02581922527932773,0.27660305796003715,0.9921072199731686,0.9107002181951858,0.325458481416013,0.0995062934045185,0.4282034130548153,0.9616072811789778,0.9623749643578419,0.18728614896826162,0.04455028274074074,0.32357879473405127,0.9095519989011402,0.8793420605397917,0.27840072889071543,0.010862080223270287,0.479245955060835,0.9788549067265023,0.9404609684934531,0.37986317072792586,0.06806886381645816,0.3724090077636605,0.936767652069366,0.9810119871305361,0.23367234819977206,0.024046160596408628,0.2715300853400304,0.9910689817262863,0.9139170053507195,0.33079861412778355,0.0022487317795306105,0.4225804114124666,0.959392160773106,0.9645092301728411,0.4358259555784113,0.0422332965410282,0.31826937359448415,0.9062634342220165,0.8830220955230181,0.2835126416385523,0.028315764940686217,0.22244448024039348,0.9771877043143193,0.9431237192595674,0.3853909298824971,0.07496299340378637,0.36691894882989007,0.9339714011074052,0.9825331131205497,0.23850230639549336,0.013810829067613883,0.26648666593935094,0.8704902472485306,0.9170802511896183,0.3361606335097294,0.05023399505576759,0.41696742420937194,0.9571176167126809,0.9665834104261187,0.44146964978081943,0.004416538889668586,0.31298345981722603,0.9029223182369842,0.9942988594475224,0.28865255762871,0.030232775182482463,0.21773247240600396,0.9754587763444985,0.945729150739316,0.3909335140392622,0.07798539398303855,0.3614461043004729,0.931119014736904,0.9839918221094193,0.49830746976610224,0.015169579413315593,0.2614734521383347,0.8666475983138773,0.9201895465372292,0.3415438459697202,0.05274729275600132,0.17263910276898353,0.9547839432163077,0.9685972368166864,0.4471209150469271,0.11121004435894194,0.30772173714993556,0.6901515933692135,0.995123178677286,0.29381981199874985,0.03221055112224125,0.2130569766619015,0.586368711954875,0.9482769259128855,0.3964902062495347,0.08106238332610877,0.1317913883283694,0.7365011822282687,0.9853879254090776,0.5039941229536786,0.016591043923275817,0.25649109241013945,0.6363409381468048,0.923244489197545,0.6113115289685576,0.0009225687361845147,0.1683619631817317,0.5298140792556031,0.9705504488504957,0.7134311005071714,0.006052957800846304,0.09571909703306142,0.8960841678215536,0.9958834523458857,0.80558423332373,0.03424883692914038,0.04195464568121565,0.8212812357457868,0.998060542624587,0.402060287739712,0.08419356341586182,0.009579209074139117,0.7314756646872398,0.9769800576663809,0.5096802594903347,0.1535549042601177,0.2515402312368626,0.6308610408605146,0.9336263777282585,0.6168481991200775,0.0006095605976341179,0.16412772189754055,0.5241356930496021,0.8700239584469671,0.7185597623663156,0.006967062381980249,0.09239919896034432,0.8925880179249434,0.7891427962889783,0.8100653974532803,0.03634736894523782,0.03970411771449067,0.8169032123091198,0.9975279504574659,0.8870921314981546,0.08737852922543843,0.3451379247322675,0.7264202051247522,0.9752436136419081,0.9460431024550884,0.15767757780358072,0.24662150902617597,0.6253642163343831,0.9307671673251814,0.6223697546318352,0.2439618105273273,0.1599369266273047,0.9474312027906311,0.8661754961587593,0.7236601529119131,0.34220207458775154,0.0891320251856556,0.8890410856755833,0.7844847909934856,0.8145064537607117,0.038505875719576754,0.037513130301211506,0.8124841965599516,0.9969310016652585,0.8906664727525151,0.09061686877064701,0.007490652413423504,0.7213354574785706,0.9734456955333368,0.9485838202114574,0.16184453170508933,0.241735562028487,0.6198511755979615,0.9278522359901213,0.6278754812752579,0.24886279753330187,0.15579011946205595,0.5127702894992937,0.8622796680510021,0.728731612394252,0.3476082368299781,0.08591799832701613,0.8854438298790316,0.7797899867985143,0.8189068277830307,0.040724078043298584,0.03538196685169803,0.8080247601102681,0.6842351535984154,0.8941902802113417,0.09390816316325457,0.006541869781116594,0.7162220794749543,0.971586535906378,0.9510665124022062,0.16605522695755914,0.2368830222546382,0.12750487426864515,0.9248819607775594,0.9868796158140638,0.2537962698353679,0.15168783680284237,0.06454865192612003,0.8583369780599042,0.7337734848059333,0.35303411137089974,0.08275753412774522,0.3995160217047853,0.7750589909900532,0.8232659503196107,0.45913471339341644,0.03331090303787376,0.29663952923149517,0.6789367718840159,0.8976630980603326,0.09725198666517126,0.005656917331321232,0.20325921452042628,0.969666375248504,0.9534908578841903,0.17030911889584022,0.0010869153055991787,0.12373559102159853,0.9218567259008605,0.9881422810102802,0.25876158927515247,0.14763060929134314,0.06178211623334978,0.8543479361833888,0.7387851179667284,0.35847899635854363,0.07965104140268303,0.020291787046143706,0.7702924155355771,0.8275832575058193,0.46480490804751784,0.03130020675760703,0.29145769615084766,0.6736152442001654,0.9010844770808336,0.1006479067435207,0.004835909535099769,0.1987015794766403,0.9676854619378398,0.9558565430615743,0.1746056572671711,0.0014939340044810012,0.12001497862305333,0.9187769226825763,0.9893418036438748,0.2637581135747669,0.1436189617412288,0.059072265243470645,0.8503130584151246,0.74376586360794,0.36394218748188256,0.07659892198530938,0.018719237429220548,0.7654908770048874,0.8318581908859564,0.47047965528471647,0.02935013810005782,0.2863028385976074,0.6682712589012805,0.9044539747079461,0.10409548412658948,0.004078952592095619,0.1941829182221076,0.5631939987458003,0.9581632619263962,0.1789442863023556,0.001965435850416253,0.11634351834457834,0.9156429495038242,0.9904780285532568,0.26878519641988696,0.1396534130702749,0.05641944948325012,0.846232866677781,0.9998892951537648,0.36942297806194,0.07360157067576545,0.01720894281841223,0.7606549964903564,0.8360901974854913,0.4761582210606636,0.0274609493120343,0.2811756233669458,0.6629055072467325,0.9077711550877741,0.5840067864770622,0.003386144416796133,0.18970381525823748,0.5575489366002495,0.9604107160981512,0.18332444478765292,0.3055113053004464,0.11272168509977887,0.9124552117527573,0.9915508087645717,0.27384218754335543,0.4090071939467047,0.053824012101789886,0.8421078887555148,0.9997373065580456,0.37492065914320055,0.06938229929254452,0.01576109857453012,0.7557853995265873,0.8402787298825922,0.48183987083707175,0.13402493212898925,0.00031034103777033417,0.6575186833114318,0.9110355891338036,0.589607093032022,0.21575723970856664,0.1852648499694644,0.551896430339582,0.9625986148623871,0.18774556613737242,0.3107626271996501,0.10914994738286515,0.4438508070545783,0.9925600055107135,0.27892843280929613,0.41460469629644003,0.05128628882613878,0.8379386582257006,0.9995206755508795,0.3804345195853154,0.07230010365749379,0.014375891980256572,0.7508827160095006,0.9831555875761766,0.48752386967672945,0.13792319747715964,0.0001423351217539892,0.6521114838960468,0.914246854582405,0.5951958086601081,0.22045393154441117,0.18086659654830278,0.5462372111312146,0.9647266752083092,0.6984224573771997,0.31603842747970146,0.10562876720805164,0.4382038325457081,0.9935054882492744,0.28404327429772824,0.4202132447663772,0.0488066079178654,0.833725714389911,0.9992394301540902,0.3859638461550905,0.5281138068249158,0.013053502215919888,0.745947580114854,0.9816607471582192,0.49320948233856743,0.1418682984674502,3.898718586825556e-5,0.6466846084368707,0.9174045360474553,0.6007722104453999,0.22518678344222892,0.010370792283427355,0.5405720110109024,0.9667946218653896,0.703629251059156,0.32133802370115083,0.10215860004979382,0.4325648515430861,0.9943871346794307,0.2891860503896698,0.42583211387516245,0.046385290130596446,0.3277066627417353,0.9988936067475525,0.3915079236187451,0.5337895685281606,0.011794100336316504,0.7409806302162105,0.9801036025820828,0.4988959733727639,0.1458597247900681,3.105984562878916e-7,0.6412387589153482,0.9388945455044466,0.9797911071925565,0.22995518319445474,0.011554647041014943,0.5349015627880478,0.9688021873389723,0.9988182576385242,0.32666073034647747,0.09873989478387168,0.42693459346459905,0.995204830757763,0.9945524503740966,0.4314605768064382,0.044022648668526676,0.32237950692302564,0.9984832500644865,0.8801762076665023,0.5394609594566748,0.010597849248584645,0.7359825088023636,0.9784843552687525,0.9410664044980865,0.6456186620410548,2.631036244232776e-5,0.6357746397672714,0.9361420203890003,0.9813604404030692,0.2347585139953094,0.012801683564424293,0.5292265999509105,0.9707491119448761,0.9991767337433619,0.3320058589087629,0.04832740643290412,0.42131378659979934,0.9959584707130076,0.993683329872204,0.4370979055028595,0.04171898914590477,0.31707532680943984,0.9980084131856712,0.8838451116363018,0.5451272460002576,0.009464903691131787,0.22137876902761366,0.9768032146723747,0.9437162596221398,0.6510493119210458,0.00011698311468449907,0.6302929577916596,0.9333330790893681,0.9828675083009177,0.23959615452058552,0.014111740546010276,0.5235478565717274,0.8696279001189591,0.9994706399484066,0.3373727179807513,0.05079567285441311,0.41570315801569846,0.9966479570597389,0.992750350057598,0.44274337076026987,0.03947460954750143,0.31179480851143804,0.9974691575325785,0.9630204511761107,0.5507876952089744,0.008395410213619059,0.21667494158392547,0.9750603982531644,0.9463087188130821,0.6564604231521469,0.00027231712640990446,0.6247944220593327,0.9304680849499252,0.9843121159426751,0.7548270311527843,0.015484648526256306,0.5178660672117595,0.8657745128317377,0.9996999382360724,0.3427606133442849,0.053322045105841265,0.41010343346271894,0.9972732006109789,0.9917536316138141,0.44839624232202624,0.11201764114823581,0.3065386350787584,0.9968655528594279,0.9608442590457731,0.5564415748879662,0.007389507158004183,0.2120077630250794,0.5851053593182097,0.9488434467291021,0.6618512957920607,0.0004922923047319117,0.6192797438211908,0.47727163875430545,0.9856940764643223,0.7597031630480051,0.01692022991569414,0.5121819668262739,0.3704992481421733,0.9998645989459878,0.3481688480601032,0.05590619639390648,0.40451533728081657,0.7793020532948923,0.9906933034691572,0.4540557889734592,0.11562969207928231,0.30130748641206323,0.6836879277290716,0.9586084554279297,0.5620881536921608,0.006447324640647123,0.20737783706361146,0.5794962590060316,0.9513201154960893,0.6672212325164073,0.0007768801952489079,0.12711255457027404,0.4715924106047088,0.9870132111054195,0.7645457016162931,0.018418299017875617,0.5064962906694751,0.3650150909907872,0.9999646007788314,0.3535967225579937,0.05854779245144753,0.3989395923057851,0.2647410646684508,0.9895695027800236,0.45972127863645806,0.1192914623794184,0.29610203917499167,0.6783871188360304,0.9563133295300006,0.5677267012208748,0.0055689845354786605,0.2027857625933306,0.573876875631501,0.9017490206520825,0.6725695387089263,0.0011260439857252447,0.12334828566831285,0.46591685705586305,0.9882693492322296,0.7693540204618068,0.019978662053392993,0.5008097741993981,0.35954839451306464,0.9999999307990883,0.8535606710874867,0.06124649158066259,0.393376919775755,0.25973849965873097,0.9883823749131604,0.465391978464167,0.12300247838846451,0.2909229667066313,0.6730632350726898,0.9539591782329087,0.5733564881122922,0.20236284754063705,0.19823213361184994,0.5682479360774972,0.8983377760361148,0.6778955225513265,0.0015397385108528727,0.1196327377138785,0.4602457122564156,0.9894623283597901,0.7741274976151212,0.021601117184944896,0.05879507851895677,0.3540998658414096,0.9999705844367217,0.8575587379194585,0.06400194469730819,0.38782803923789994,0.25476701314276395,0.9871320734268609,0.4710671549357809,0.12676226007617153,0.28577093893442007,0.1668856289992227,0.9515463060526761,0.5789767861378103,0.2069513899758324,0.006363380627664839,0.5626101684630175,0.894875005320183,0.6831984951127748,0.0020179102580935027,0.03497128185071913,0.45457970978472984,0.8197645102339011,0.7788655156136813,0.02328545454344455,0.08529429494086949,0.3486702097581699,0.9998765654877653,0.861510553533541,0.06681379537585502,0.017056207815714985,0.24982724819616703,0.9858187600511024,0.9272743929279438,0.1305703211043141,0.0005159098875811008,0.16266642384310864,0.9490750251010347,0.5845868682962373,0.21157783906433247,0.007299661570387694,0.5569643020489936,0.891361156423317,0.6884777704390115,0.30605359940429155,0.037090686886821045,0.44891958255399494,0.8153721770685847,0.7835674615816723,0.02503145625516684,0.08849785573645103,0.3432601286044714,0.9997178861138318,0.8654156067513858,0.06968167989559199,0.1591206444983213,0.244919843791284,0.984442604666625,0.9302002019318235,0.13442616888959985,0.0002899555557785427,0.15849085372392024,0.9465456550450535,0.5901860089078322,0.21624159636207158,0.008299674673145185,0.08800907084095438,0.8877966838716511,0.69373266564108,0.3113074860914747,0.03926997053091996,0.44326606271742114,0.8109390496344366,0.7882327273092973,0.02683889646993104,0.091754645479665,0.3378703221893684,0.7195617180470621,0.8692733924434913,0.07260522728767466,0.1633028603704434,0.24004543471453288,0.9830037852829577,0.9330703633422719,0.1383293046673864,0.00012864010899266143,0.15435945876327367,0.9439585230657889,0.9766445587020964,0.2209420585990633,0.009363290581459127,0.08481361077793886,0.8841820487396302,0.698962500983661,0.31658578068049137,0.04150885088661127,0.4376198815735338,0.8064657013688283,0.7928607093314498,0.8954029242197084,0.09506424289569404,0.3325014876993214,0.7144385453771365,0.8730834115945412,0.07558405938311119,0.16752862895465503,0.23520465148429376,0.9815024880153924,0.9358845058959224,0.635268212618235,0.255518191702895,0.1502727733686054,0.9413139638159629,0.9783314146658515,0.7355185405928413,0.010490371713651747,0.08167185622989498,0.8805177185903688,0.7041665999729972,0.824771028528444,0.04380703834848981,0.03260530779700377,0.8019527109118083,0.7974508090057753,0.89885791713557,0.09842621987890127,0.32715431960801383,0.7092876344845518,0.8768451713679544,0.5343767055557836,0.17179740363602897,0.23039812026935025,0.6068496037904728,0.9386422655756037,0.6407339863481191,0.2604944281788158,0.146231326164045,0.9386123193766744,0.9799563971298517,0.7405195133158429,0.011680772278641671,0.07858421359151752,0.87680416741517,0.9988583497191496,0.8290736734151737,0.046164235639611195,0.03061565115421605,0.7974006620312521,0.8020024325901056,0.9022613166697688,0.10184014154820703,0.32182950958652035,0.7041096516539675,0.8805581851696345,0.9566648522975201,0.17610863223667944,0.22562646280789223,0.6012874795530384,0.9413432856574255,0.6461815557451853,0.2655016453670314,0.14223563992203642,0.935853939213151,0.981519295898093,0.7454893741703952,0.36584485964575686,0.07555108225797519,0.8730418755722137,0.9992101456131777,0.833333751706386,0.04858013784994536,0.02868671068331835,0.7928101435473518,0.8065149913192626,0.9056126825831032,0.10530556630334192,0.003830917079270524,0.6989052666718744,0.8842219727109129,0.9589510095073188,0.1804617570871882,0.22089029632709256,0.5957122534982258,0.9439872167569234,0.6516102161511708,0.2705391955700628,0.13828623149571562,0.9330391801295437,0.9830199088052693,0.7504274802911649,0.37133160033962254,0.07257285457324752,0.8692313297244207,0.9994973672854943,0.8375507123490975,0.051054432475817646,0.026818735898129165,0.7881817492564492,0.8109879014812155,0.9089115813670647,0.10882204588196914,0.0031604226697780624,0.6936751527399541,0.9627980147265905,0.9611778001267086,0.18485621509874045,0.21619023346326705,0.5901246467970416,0.9113349269805915,0.6570192653537432,0.2756064271667709,0.13438361175205432,0.48236565498906464,0.8406640277476467,0.7553331929203819,0.3768349846490877,0.06964991577937446,0.865373022776502,0.7540853852228975,0.8417240098677123,0.05358679946033179,0.0250119684263857,0.7835160778542274,0.6556419000581755,0.9121575862999143,0.11238912541766821,0.0025541958423920263,0.6884199863879998,0.9606156403235016,0.9633449361141251,0.18929143783596192,0.21152688218262805,0.5845253822219638,0.9080753943589788,0.9928958004209165,0.2807026846966459,0.130528285505778,0.47668375702491733,0.8364795449599386,0.7602058774904641,0.3823543006960751,0.06678264396662398,0.8614674538111995,0.7491713520547301,0.8458531044345821,0.48949953337198543,0.02326664197848899,0.7788137328582675,0.6502277835850233,0.9153502775018798,0.11600634349877353,0.002012315014239874,0.6831404473864054,0.9583736840053746,0.9654521371444971,0.1937668515904477,0.004012161106095702,0.5789151840534488,0.9047630760493708,0.9938191128274808,0.2858273089445925,0.12672075145406653,0.4710048750816914,0.832251537606617,0.7650449037061011,0.3878888345416931,0.06397141002458506,0.36444853062143195,0.7442250878786931,0.8499374619398321,0.4951855346655767,0.02158298231727257,0.7740753225299821,0.644794234729958,0.9184892419894686,0.11967323222805909,0.0015348502791148189,0.6778372186582343,0.5386020292557471,0.9674991306455065,0.19828187745497294,0.0047631871246768265,0.5732947779862438,0.9013984005093597,0.9946785483574285,0.2909796370262019,0.12296150211204637,0.4653297437385715,0.8279805525922002,0.9987583173883288,0.39343787027858523,0.061216577594192245,0.011371223034209454,0.7392472325078243,0.8539765540604519,0.5008721587236583,0.019961207228799516,0.7693014597959349,0.6393419563376463,0.9215740737288878,0.6082657205995735,0.0011218633984091397,0.1707048437144436,0.5329299289678991,0.969485651832847,0.20283593139837597,0.00557827340332151,0.09756398968912933,0.8979818029690909,0.9954739958403818,0.2961590024734967,0.033122339468054096,0.04321540083407727,0.8236671423804868,0.998325546727417,0.39900069012353523,0.05851850302068751,0.010196954146439619,0.7342384298415697,0.8579698583286344,0.5065586699655817,0.01840152649419119,5.0488303090734377e-5,0.6338716536754729,0.9246043736885665,0.6138103843095127,0.0007734077931253469,0.16644698303456135,0.5272535691020902,0.9714114437444741,0.20742842434110464,0.00645731450835102,0.09421532806157995,0.4193628441976225,0.996205352382995,0.3013647353211416,0.0351878293326221,0.040932308304428455,0.8193118649230924,0.9978283162701217,0.40457657451031387,0.05587753530752598,0.00908604264584606,0.7291993277824945,0.9762045490275304,0.5122443328252912,0.01690414186249134,0.00016363326755952645,0.6283840343423118,0.9275797498907712,0.6193403263294902,0.0004895285369657665,0.1622322683657515,0.5215736839112671,0.9732762572738444,0.7208635703768078,0.00740019673335196,0.09091915581070525,0.4137559226661486,0.9968725233822637,0.30659616219310437,0.03731344394510766,0.03870859745835453,0.8149152835872775,0.9972666903345861,0.41016480218275725,0.08883243276378944,0.008038632231923193,0.7241305781524747,0.9744403519999001,0.5179284118464721,0.015469247024569588,0.00034143345718445905,0.6228798081769965,0.9304998174623091,0.6248548313461151,0.00027026235050225944,0.01597643169387225,0.5158910081043874,0.9750798512021377,0.7259509945110127,0.00840679811388434,0.08767589930555958,0.408160157046108,0.9974754225377624,0.31185260638975926,0.03949890835134473,0.03654455593904227,0.30471788513523523,0.9966407415686884,0.4157646502880631,0.5584046843710345,0.007054858390123153,0.7190328366083819,0.9726147847923003,0.5236101717776831,0.16373816624574722,0.0005838658730162316,0.6173596871665007,0.9265194750463741,0.6303531860428155,0.2510838025590481,0.017433749675033305,0.5102062767513823,0.9768219922294596,0.7310091912552223,0.35005289966520975,0.08448597807039832,0.40257627116535744,0.9980139718628074,0.8208779262740833,0.456023968758984,0.034440463671285115,0.299495591432956,0.9959505509406432,0.42137539447029376,0.5640485549810553,0.006134848374330426,0.7139067625572727,0.9707280835469301,0.529288877667464,0.6690823118584903,0.0008908991557470824,0.6118243853538403,0.9235243651158906,0.6358346791921091,0.2560317171244484,0.018953488943727892,0.5045202251880738,0.9785024550050201,0.7360375063176099,0.35548743492717066,0.08134980473041131,0.3970049873150765,0.9984881016945445,0.8252182596346025,0.46169135212980644,0.03239659282527385,0.2942992335339587,0.9951962077285292,0.4269963089640737,0.5696841407322326,0.005278721190400959,0.7087530190710922,0.9687804923138463,0.5349637949594034,0.6744229390921096,0.0012624935897673772,0.6062746187457103,0.9204744711300479,0.6412986017476009,0.2610111896662388,0.020535452917452013,0.49883358892105684,0.9801210221562815,0.7410352892716275,0.36094066329162383,0.06219762364188702,0.39144702615633686,0.9988977507029606,0.8295165251081069,0.46736369083084955,0.03041320778139084,0.28912948360159973,0.9943778095087406,0.43262666668846933,0.5753107126458648,0.004486587580768808,0.19665881001290708,0.9667722630193956,0.5406341895871553,0.6797410042331122,0.0016986011083028885,0.6007111052198675,0.9173701876011211,0.6467442469357014,0.26602157607578747,0.02217943696476271,0.49314710353255914,0.8484784764678328,0.7460018936401407,0.36641187936830316,0.06497271627633455,0.3859031066268831,0.9992428658988162,0.9866828188397405,0.4730402511293154,0.028490565096011555,0.28398701035742113,0.9934954621433647,0.9506941162432425,0.5809275429092152,0.0037585500101210423,0.1921579174315433,0.9647036554336264,0.9591842148906717,0.6850358193749712,0.0021991652996323774,0.5951345644322704,0.9142119160768244,0.9909697137282855,0.7805036111559567,0.023885228431748118,0.4874615045852922,0.8443780205407453,0.9998287526702688,0.3719003754401819,0.06780408090067769,0.38037394584813583,0.9995234026405002,0.985347647541533,0.47872029874633076,0.13190487561415365,0.2788724789946492,0.9925492797664888,0.9482026121016955,0.586533904969657,0.003094702652143566,0.18769684508033035,0.962574937136687,0.9614048451932715,0.6903066996186116,0.002764121414384424,0.11110460716038678,0.9110000650883695,0.9920138345798655,0.7851928790758795,0.025652606669534506,0.48177752752730363,0.8402330183582453,0.9996476075097611,0.3774054415550179,0.07069135127002224,0.37486025903243025,0.7535783548720363,0.9839496951743212,0.48440309895192785,0.1357772133255027,0.2737865510921502,0.9915393847694368,0.9456531317048584,0.5921290736286541,0.00249513137733981,0.18327617001139257,0.9603863834842137,0.8865462242045864,0.6955529631610045,0.0033933963739133377,0.1075556140118677,0.9077350500976209,0.9929943120725946,0.7898452565031595,0.027481343062827845,0.4760959075968453,0.8360440060879012,0.9994018315406279,0.8706028541943402,0.07363415390791012,0.36936275939050156,0.7486609566177287,0.982489142567134,0.49008791666008394,0.1396966642679946,0.2687298845288534,0.9904659077849374,0.9430460048351159,0.5977123251355683,0.22258400057140232,0.17889646405135362,0.9581382775717127,0.8829142662021612,0.7007739313833592,0.004086908779751763,0.10405738463690761,0.9044172934433544,0.9939110193789802,0.7944601416398283,0.029371201059486096,0.047707352995206065,0.33064079980022554,0.9990914565546751,0.874396158270498,0.0766321081546299,0.3638821580392286,0.23353041714431655,0.9809661786465165,0.4957740165238069,0.14366272144974146,0.263703133398652,0.14886317310556296,0.9403815687315846,0.6032829372812782,0.22733296056609414,0.1745582937273688,0.5380152532168523,0.879232777173695,0.7059689289389057,0.004844568924139758,0.10061037154121222,0.4300244901078689,0.8003752251487739,0.7990369375376492,0.03132193620111762,0.04531245982119736,0.32530132309770743,0.9987165226997707,0.8781410331615829,0.07968482621645606,0.35841916390964956,0.2287359346588667,0.9793810004120902,0.9395873487040569,0.14767487185020872,0.258706947925795,0.14483756934033798,0.9376601680464902,0.608840189491599,0.2321171908012099,0.17026222019384324,0.5323426780671675,0.87550223333004,0.7111372838402517,0.3290686407843215,0.09721502060551901,0.4243984044217003,0.7958097406715386,0.8035750521753351,0.03333329615470265,0.04297638174597418,0.3199844441552592,0.9982770784746524,0.8818369944576053,0.08279191321581109,0.010079046356434307,0.22397654093523717,0.9777338129110715,0.94226856900981,0.15173259648657567,0.2537419743807785,0.1408579068239889,0.9348821548005855,0.6143833629204905,0.23693607242325337,0.16600879915984512,0.07450987294693229,0.8717231172274248,0.7162783275463062,0.33442365553993747,0.09387177102792132,0.41878209801233024,0.7912059923810648,0.8080738985351275,0.03540502074523327,0.04069942094773721,0.3146908507259696,0.6970906305783078,0.8854835640756853,0.08595296724234408,0.008974699939657438,0.21925285161425223,0.9760248292117483,0.9448925806452622,0.15583537048086732,0.24880885499674865,0.13692470033693838,0.9320478883376151,0.9835267680903038,0.2417889820964752,0.16179858081722315,0.07155081541061548,0.8678959177050353,0.7213913950487576,0.33980008805653306,0.09058105526705673,0.41317629736462386,0.7865645757850068,0.8125328946787285,0.4452919341798998,0.11005592958604005,0.3094212275508817,0.6918517338038987,0.8890802703218936,0.0891675794049191,0.18639290834495198,0.21456547771827228,0.9742542703759182,0.9474590441872053,0.15998266312784887,0.2773741720949211,0.13303845865039204,0.9291577352778343,0.9849431446243053,0.24667529208350264,0.016124345568251985,0.06864717896876343,0.8640211298217813,0.7264758249580943,0.3451972428775989,0.054480360272316064,0.40758172760449674,0.7818860912635188,0.8169514638225771,0.45094790677489055,0.11364048542826277,0.30417625627041933,0.6865880204737701,0.8926266479522672,0.09243533388450614,0.19084216318601882,0.20991502557215647,0.9724223654302944,0.9499676276564373,0.16417393796367397,0.2824803622788937,0.1291996844605281,0.9262120694705853,0.9862967924128803,0.25159437032653964,0.017588132295618508,0.06579933921483122,0.8600992547922596,0.7315309595891564,0.3506144218661377,0.057090460892852024,0.022674550195513954,0.7771711439915948,0.821329034412457,0.4566102243946592,0.11727501794899164,0.2989566153362151,0.6813001714638908,0.8961222382329895,0.09575580798796862,0.19533140845371005,0.20530209672483268,0.5769631551173655,0.9524180065607047,0.16840865283527756,0.2876146892333953,0.12540887432347197,0.9232112719459382,0.9875875363579201,0.25654558052912496,0.019114320340696933,0.06300766452481688,0.8561307999219204,0.9999885413656293,0.35605092429497054,0.059757853094954905,0.0210123717793555,0.7724203438607868,0.8256650401974288,0.4622781546026627,0.1209590570113297,0.29376297992335093,0.6759888707722472,0.8995665889997291,0.5702668548167651,0.19986006345165602,0.20072728787148586,0.5713393718564156,0.9548098639366767,0.17268625997050518,0.2927764888189446,0.12166651859106514,0.9201557308654049,0.9888152094981029,0.2615282822384388,0.3953694815704964,0.060272516009611254,0.8521162785414461,0.9999947024996407,0.855369486156597,0.06248219184401965,0.019412151746001527,0.7676343054003139,0.8299589203030766,0.9226333368760296,0.12469212607457092,0.000993452866705713,0.6706548054303658,0.9029592547161278,0.9701617823810234,0.2044275423857288,0.1961911907763736,0.5657063606491679,0.9571428903909445,0.6802900451099199,0.2979650933423992,0.11797310134743721,0.45768967316340137,0.9899796530304912,0.7762687632185251,0.400936923146596,0.05759424746828712,0.8480562099403502,0.9999361879273236,0.8593467574265717,0.06526312473924689,0.01787409708836707,0.762813647697571,0.9865475619264445,0.9256445943409966,0.028295072717513636,0.2834564094556369,0.6652986654144443,0.9504389740747279,0.9720664115151256,0.0036868704124460305,0.19169439219627976,0.5600648501412997,0.8932965611503136,0.9964444827125625,0.002254645653441689,0.11432910034638799,0.4520262297256048,0.8177886613451909,0.27158557808177486,0.024065278010829916,0.05497320534233435,0.34622780598494723,0.7274412127941985,0.37246932800442906,0.0681002920592268,0.016398406758102668,0.24760997188265638,0.6264731053757928,0.4793082860696926,0.13230341639256604,0.0004060042421125676,0.16077781354791731,0.9095877823372642,0.5871134702306406,0.21367660385224607,0.007742783522007801,0.08978606987815652,0.961631251049488,0.6908507792747189,0.30842002918080424,0.03806614428819627,0.03794979131061216,0.9921182569742473,0.7856760666304021,0.41210952673128987,0.08996009835430391,0.007689539294366277,0.9996251703047991,0.8671613439984875,0.5199031825511351,0.1610013910399397,0.7530709732246732,0.9838014461040515,0.9315015519396109,0.02464567727195982,0.24787265815307863,0.6545229354527531,0.945385993449579,0.9756922420004509,0.0024367561340476462,0.34651733456177414,0.5487592512090564,0.8861726711274298,0.9976698732840616,0.00346218823028549,0.4523290807009486,0.44071869125158813,0.8089265210975187,0.28176105426799464,0.027674089694983306,0.560366881500803,0.33544634796732403,0.7172546513162696,0.38349859272705733,0.07394185476488091,0.6655857734167616,0.23785804831857943,0.6154377972085572,0.4906763136799547,0.14010495086398628,7.704275342573785e-5,0.1525108030040181,0.5082304272418431,0.5982894161126439,0.22307380744064959,0.009863754054373342,0.0833900110048687,0.40063872692886143,0.7013127683149989,0.31897408742335054,0.042538005404860746,0.9040709505750846,0.29768682858033446,0.7949355628450604,0.4233276043547064,0.096574030770323,0.8313710538962429,0.20418220300895829,0.8747859633469547,0.5312614370463059,0.16944854870626325,0.7431973612473111,0.980805014122512,0.937135253051464,0.6377354768776099,0.25775859021855657,0.6436672561895167,0.9401025726053778,0.979071951983425,0.737777782126223,0.3573804047610878,0.5374284245132673,0.878848977526896,0.1992212750773169,0.8267167491575103,0.4636620240515459,0.42944182459476954,0.7999045439976785,0.29204944606269745,0.900399258942362,0.571640491691252,0.324750029087837,0.7069556834982768,0.39458813462545383,0.08000385756914807,0.6762736147735713,0.22824175553242693,0.6043427621714451,0.5020491653133105,0.14809269301858113,0.7726754155425947,0.14442358142486345,0.49685742186349713,0.6094145076011263,0.23261429109042275,0.012238318335851428,0.07720950380706088,0.38951882826843354,0.7116705992562123,0.3296218074594014,0.04724655479594991,0.02973817015937913,0.28733929455446033,0.8040424610510075,0.43458535184629926,0.10339669352381986,0.8227691206400136,0.19509022497797945,0.8822166705366169,0.5426035170489988,0.17806673184254862,0.733197920317034,0.11707930804790956,0.9425427828311463,0.6486322564322937,0.2677698566330139,0.6327372442923991,0.9345914451544846,0.9822037928210274,0.7477204221488027,0.36831726554037325,0.5260782325602171,0.8713292695867711,0.9993476788244169,0.8352409653319465,0.47501376846742277,0.418201464342812,0.7907273979661027,0.3024454303095791,0.9071070020717278,0.5828770354924541,0.31414438356198005,0.6965496379684994,0.4057322160327367,0.9599626556957124,0.6868702531491488,0.2187660689402396,0.5931937407734574,0.5134209567200074,0.15626251004328762,0.7821373248854026,0.13652033309361356,0.48548604243748206,0.6204829886360472,0.24229311860874758,0.8642296327142731,0.07124774604454903,0.37845609194761537,0.7219189130146295,0.3403576802182325,0.052189356284374655,0.025996294883534,0.2771017899867807,0.812992049390106,0.4458769445105546,0.11042455660728967,0.0028790541063127284,0.1861560055572412,0.8894496209611826,0.5539235542305306,0.18685148144909902,0.7230778240885871,0.10986556859799074,0.4449895252255286,0.6594521344897725,0.2779012776232662,0.6217385548883527,0.051792958818998425,0.3395119110552226,0.7575348930120841,0.3793222582291048,0.5147145478756665,0.8636174379618371,0.24152849384256242,0.8435917297081166,0.4863784406195831,0.40700342619516894,0.7813998312067603,0.1556147348071502,0.9136041103178356,0.594070699179566,0.3036348986913612,0.6860418987566257,0.9596118804238672,0.9643027170170164,0.6973702059021355,0.20943589120920064,0.581996501455836,0.9065880531346657,0.9933201134022471,0.7914532579561553,0.1288051471067005,0.47412217245183824,0.8345780757152483,0.25210528222446316,0.8719265266709106,0.06550782229741642,0.36745624176423297,0.746944546332526,0.35117615101939437,0.9350322096478607,0.02249966647051127,0.2669796117048334,0.6477796249318624,0.45719654014065575,0.11765398384372577,0.0017890005716151847,0.1773841672618442,0.5417139445848603,0.5652156916670511,0.19579825234565856,0.00434293568287053,0.10285368251830423,0.4337003781445369,0.6701895129057255,0.28814761124882465,0.6106768786376875,0.04686845396032274,0.32878275750099617,0.7672161167637992,0.39038968890568826,0.5033432499664398,0.012042783573118832,0.23186034538831457,0.851764721647293,0.4977501604902923,0.39585350395407404,0.7719266697504623,0.14745905803341214,0.9198872221132595,0.6052156912136755,0.2932270120246044,0.6754379025080852,0.07952012169847056,0.9684025507124197,0.7077680404157716,0.2002560497210234,0.5707568376075044,0.8998639217748676,0.9950452220098254,0.8006183947432469,0.1212820152581523,0.46277169150926384,0.8260404300211512,0.26204570517905823,0.8794309879252677,0.05999270237006887,0.35652496897917707,0.7369920626096855,0.36207162244667307,0.9405255649352313,0.019250094056272316,0.256977996866982,0.6368770471605147,0.46853828204120823,0.12508123476795768,0.0009567186182672938,0.16877924859180427,0.5303703826042576,0.5764740868698811,0.20490241552306326,0.005966808662684953,0.09604727771944421,0.4224455341166455,0.6808388362206848,0.29850355611404605,0.5995579387897553,0.042178396826237696,0.31814219078930017,0.7767590843929891,0.4015138313434641,0.491970222278401,0.009688082331375969,0.22233093088990286,0.8597557124892111,0.5091230444153657,0.3847574665268604,0.7623128149579009,0.13948578396897887,0.9259530866111392,0.6163062452383109,0.2829261085439915,0.6647431356711593,0.07347531031715604,0.9722600355509252,0.718058376908703,0.19123129407429096,0.5594805645676008,0.8929329030609989,0.9965141969915634,0.8096279932562245,0.11395482997426137,0.4514404722850409,0.8173340928342392,0.9975829917860666,0.886739133711113,0.05470523975467456,0.3456679293717766,0.7269169605206982,0.3730384572441618,0.9457909947620471,0.016249258951388235,0.24710212025273914,0.6259036499714155,0.47989630205846134,0.9840260740900632,0.0003826388642911849,0.16034570168385753,0.5190111071577559,0.5876929148083848,0.21415926053826428,0.007846291649336534,0.08944987579714098,0.4112308163351325,0.6913945945343987,0.3089637541110457,0.038291692476037476,0.0377252140260424,0.307595716289769,0.786158858421639,0.41268892997342516,0.48060134915239233,0.007587065730311426,0.21294518081302843,0.8675605677399556,0.5204912081283436,0.37372105494116004,0.0004427703626889712,0.13169903794120463,0.9317985653671497,0.627336623062922,0.272737517879303,0.6539631316583236,0.06765118042193946,0.9758731756914777,0.7282358912184493,0.18236629362704032,0.5481735166166539,0.023792405030997166,0.9977262783080312,0.818477391979267,0.10682738229966465,0.44013437748854656,0.8084635687646209,0.9963374145882546,0.8938471828347392,0.0496481701547834,0.33489074031352983,0.7167244528669693,0.9717714393031891,0.9508257748243993,0.013498713771138815,0.23735709158536455,0.6148651109388239,0.49126472361645784,0.9867524795847219,0.7635727056161458,0.15208789000795025,0.5076419954708641,0.5988663709238069,0.9999496536015784,0.8486965905362553,0.08306489021020663,0.40006202723218065,0.7018513263566231,0.3195227931919524,0.917537641352474,0.033511209611581716,0.29714879068925304,0.7954105754593007,0.4239092028621157,0.9668812369861896,0.00574082082414995,0.20370795129222508,0.8751752492111231,0.5318487698049773,0.16989033077906196,0.001050497736439726,0.12410284876888206,0.9374206339633143,0.6383011176317874,0.25827358334969713,0.0196592609950636,0.06205074538501615,0.9792401017156005,0.7382953175560963,0.35794456068641567,0.5368415439579594,0.020449243619742874,0.998680838835143,0.8271620122830279,0.4642489987872363,0.4288592568299193,0.001240978904842427,0.9948350351913984,0.9007514576313314,0.572222875699891,0.32419897786170815,0.7064198131948851,0.9678822755134022,0.9556273001552765,0.676824212887627,0.2277479528881231,0.603767141341025,0.9190811534507342,0.9892270420720357,0.7731685168776122,0.14401008610960353,0.4962689298583075,0.6099886741325198,0.9999817003791573,0.8567568669424857,0.07689562451443077,0.38894494547673175,0.7122036214328659,0.9873890725263113,0.9236859979684954,0.02953856388514331,0.28680681916856016,0.8045094487193845,0.43516884470317163,0.9708305684215071,0.004150302849667775,0.19462402161832265,0.8825958171091592,0.5431898531064525,0.9959891021746532,0.0019163787887717665,0.11670114667775361,0.9428163835728227,0.6491940559768136,0.26829119467443774,0.02294110764895857,0.056676902840114285,0.9823590715946219,0.748231451230785,0.3688850860297144,0.06624271277567806,0.017354199084573918,0.9993773846886271,0.8356773607935917,0.4756015562993442,0.4176209439934526,0.0005692594498684644,0.9930766309181847,0.9074483858677709,0.5834573431609715,0.3135981738743352,0.007105878199932081,0.9637510320541924,0.9601930864723587,0.687415982444093,0.21827967587556985,0.592615483205345,0.9127699845125007,0.99144848122723,0.7826229922780655,0.13611646939932232,0.48489779468054983,0.8425141136335734,0.99975505942463,0.8646325593434357,0.07094527065333939,0.3778853229846355,0.722446123543623,0.9847249347518445,0.9296151418216165,0.02580933227138099,0.27657515260584475,0.813450770495815,0.947059958139596,0.9745362947571599,0.0028163347319587473,0.18569809176566854,0.8898184320737854,0.5545085902197738,0.9972983673531938,0.003039965517677101,0.10949776126703514,0.9479830224650405,0.6600098021526959,0.9968384554632452,0.026469781902443423,0.05153243318327555,0.9852284715909914,0.7580391513425899,0.3798934494953176,0.07201169858794426,0.014508872784201987,0.9998155554795591,0.8440190317173211,0.48696673742960267,0.13753907741857613,0.00015594266347046526,0.9910631115571384,0.9139345025908876,0.5946486302600236,0.3030938131480344,0.009143871284459926,0.9593798464077922,0.9645207714633717,0.6979107840206865,0.20895715938121306,0.04105295580336543,0.9062452506956044,0.9934156476901248,0.7919312401248741,0.1284111239901919,0.473534473299259,0.8341405124523489,0.9992698480007571,0.8723195928999579,0.06521690730670093,0.3668888819426404,0.7464326548230293,0.9818100030103759,0.9353220052060083,0.02232544425384969,0.26645908480809366,0.8222299145987726,0.9418514225533012,0.9779964986710925,0.0017396066586573555,0.1769347799603873,0.8968393571644622,0.8812600237456394,0.9983503331411101,0.004420676585673744,0.10249641952800242,0.9529178774499358,0.6707427601529266,0.995433060234723,0.030243458039218463,0.04661999813429368,0.987846817093218,0.767713343442392,0.969380905748396,0.0780021231508215,0.01191473687452238,0.9999951245008254,0.85218270912039,0.49833866189693476,0.14546651985665116,1.2423934393490654e-6,0.9887955188919024,0.9202064519202086,0.6057909466877683,0.229486311705781,0.011435830581414508,0.07920197383576294,0.9686081160083342,0.708303187665838,0.19978522682288513,0.04568454869109012,0.031011673176896404,0.9951275236598078,0.8010884443827241,0.12089803658478049,0.10114810894510884,0.004721383385867695,0.9985263171532123,0.8798139903839336,0.059713498297634726,0.3559613118477666,0.001558763232016036,0.9786457854712663,0.9408036354225113,0.019088702376701516,0.2564638497721402,0.02167149531590723,0.9364142755151441,0.9812093898731753,0.0009206757228395479,0.16833862029093655,0.5297829423931075,0.87380384175637,0.9991444552571942,0.0060577976205865025,0.09570074391566691,0.4218642044972661,0.7937381586263428,0.9937713307150347,0.034260183580381354,0.04194213935955565,0.31759411769316587,0.7772490221573696,0.9653409211821449,0.08421088705218466,0.00957313354692868,0.22184170729252117,0.8601641691618226,0.9151808210614923,0.15357739593212638,0.0001052386808286232,0.1390782547931052,0.9262609887842707,0.6168785274720779,0.23912055220400352,0.01398057024388949,0.07316850565985283,0.972453005338066,0.7185878164080941,0.33684580857340146,0.05055120184936246,0.027190200083212712,0.9965832234212377,0.8100898671654087,0.11358109441244185,0.10810942099397741,0.0032903539572348706,0.9975248515806927,0.8871118742360702,0.05443789105914548,0.183967472881492,0.002585001221280081,0.9752339192829523,0.9460571963063462,0.016100781312059498,0.24659461897662305,0.025107079225170414,0.9307513301745567,0.9841733060314912,0.00035996563478585264,0.15991406036219458,0.06980489067743467,0.866154255752507,0.9996803228271098,0.007950481585159042,0.0891142504745378,0.41065172109166,0.7844591391795928,0.9918541266737289,0.03851788029462894,0.03750127715699764,0.3070526608198841,0.6894808386057286,0.9610601718289713,0.09063477791235741,0.007485274333870751,0.21246352378775152,0.8679592822788862,0.9087364214727145,0.16186750912313758,0.000467877718541454,0.1313012709525111,0.9320949805996033,0.8373262001738452,0.24888977026770964,0.016776773637832865,0.06735587770905238,0.9760534501283575,0.7287593490381329,0.3476379453543502,0.05565039729908944,0.02361335613248644,0.9977819938035094,0.8189308511871838,0.45350086181459515,0.1152734950340149,0.002116319318116844,0.9962659694358778,0.894209468572127,0.0493928151608774,0.19286188989472225,0.0038685989456148095,0.9715761697258948,0.9510799696945296,0.013363226993551358,0.2847924923638715,0.028788370072458547,0.924865516507748,0.9868867136324163,5.776650275612916e-5,0.1516654589942949,0.07571197205447217,0.8583152235870148,0.9999576585959769,0.010097749215306262,0.08274034701944016,0.14244824717068377,0.7750329421670729,0.9896824400614412,0.043014345273522436,0.03329970920385639,0.29661103381947684,0.6789076450941118,0.9565408725246205,0.0972704720461795,0.005652239482014432,0.20323411004570074,0.5744280262868742,0.9020805439482045,0.17033257017154052,0.0010889718791703418,0.12371504976978126,0.9377054088915086,0.8288445491588143,0.2587889113581763,0.01982299402326604,0.06176709740451525,0.9794075875292352,0.7402527367754317,0.3585089134092145,0.06097949674509845,0.020282991963748997,0.9987232145695395,0.827606822172422,0.4648360230508199,0.12263662441342865,0.0011998869074617557,0.99475032205734,0.9011031011365381,0.5728051596540771,0.20191521844628751,0.005408892278745192,0.9676744292992328,0.9558693568322352,0.010877455816452497,0.2951132633102236,0.03271346317850066,0.9187598798017517,0.9893482087740518,1.4234682889080474e-5,0.39787875687928353,0.081838577681349,0.8502908011312407,0.9999763190718214,0.01249848952678001,0.07658233137233061,0.15049027561820927,0.7654644446503349,0.9872573944966645,0.047747252071259905,0.029339609367864006,0.23546277798580179,0.6682418857687247,0.9517853615292463,0.9710283112612736,0.004074977393327794,0.19415824131335857,0.563163056451304,0.8952166322017235,0.9960631510600098,0.0019681998120745225,0.1163235163132762,0.9430893708558044,0.8201927558154283,0.9979336863803409,0.023117655302819062,0.056405056349876415,0.9825136821287893,0.730217068411445,0.9765525701786392,0.06653574294117676,0.01720083068877276,0.9994063987369742,0.8361132912223174,0.9329182210730305,0.13019499949030794,0.0005415308822673826,0.9929786936325463,0.9077892052024159,0.8690682009066779,0.21112277439468968,0.007205084281525664,0.9635307167416152,0.9604228797173765,0.6879614521010285,0.30554004150686653,0.036880327722102424,0.9124375790788104,0.9915565178925947,0.78310826813704,0.40903786555573074,0.08818153768662002,0.8420851401764302,0.9997362945998178,0.8650349808263974,0.07064338965602301,0.15871313844003465,0.7557585973164148,0.9845802446843945,0.9299159173417682,0.02562302658250093,0.24518156650819967,0.6574890790337188,0.9467960993176091,0.9747213792161837,0.0027543041343836006,0.18524061339438636,0.5518654064040103,0.8881482375827745,0.9973591179951145,0.0031051066096446367,0.10913049492101712,0.44381981216357247,0.811375296533117,0.9967720354589942,0.026659052837194552,0.05127252883515249,0.9853701268510668,0.7200622870253728,0.9729875461791163,0.0723162611166549,0.014368467000542784,0.9998311928301508,0.6184731870441129,0.9271162973590982,0.1379447096037113,0.00014159187225459835,0.9909520007921233,0.9142643214169557,0.8613003057405604,0.22047979380203914,0.009256245614271852,0.9591471759867163,0.9647381823827106,0.7786129333866639,0.31606743219714667,0.04128680779088162,0.9059018854619165,0.9935104984212726,0.79240881786466,0.4202440375311929,0.09473757025829616,0.8337024862856135,0.999237709367284,0.8727121433335198,0.528144949729492,0.16711258117298022,0.7459204219163749,0.9816523757669535,0.9356111976878492,0.022151883786889093,0.25503219666121907,0.6466547883310878,0.9415756673060396,0.9781688289877108,0.00169090301413094,0.35439089762037024,0.5405409214858657,0.8808790172391535,0.9983977541075528,0.004499104042669899,0.10213970722199472,0.4325339443640045,0.8023967334159392,0.9953533574681981,0.030445354327138352,0.04637217040133984,0.3276773811589394,0.7097936466442422,0.9691778010717151,0.07831806046379713,0.011787366348171346,0.999997377062984,0.607393976719538,0.9210933860645691,0.14588174509702106,2.7680362768567335e-7,0.9886712921355979,0.4999794074406642,0.8533454758193697,0.22998143539888954,0.011561315017595719,0.9545260750539768,0.9688130321148019,0.7690976458150496,0.3266899885680694,0.04593062349672489,0.8991561804823501,0.9952091393815012,0.6722839564261696,0.43149147479503935,0.10150328334183562,0.8251471765969743,0.9984808213394273,0.8801964666646995,0.5394920543911159,0.17568425799240894,0.7359550086670777,0.9784753026073245,0.9410810952394708,0.6456485019035277,0.2650095717839778,0.6357446192621745,0.9361267665168285,0.9813688768846474,0.0008853242303547559,0.3653080647304084,0.5291954609219551,0.873412732224762,0.9991785220128164,0.006149470864684203,0.4718961701842453,0.42128298312384344,0.7932617119221761,0.9936783864240012,0.034474600761461194,0.04170651646645235,0.31704629729426365,0.6994164602050867,0.9651253059972213,0.08453803568522866,0.009458864178682969,0.22135286904362583,0.5962592013527657,0.9148526034100213,0.15400199939251663,0.00011765879201186547,0.9861377476888582,0.48860699574977606,0.8452078269275638,0.2396227830890837,0.014119099861495343,0.9496698048751435,0.38148680107888655,0.7594431286283148,0.3374022145684499,0.050809372155389276,0.892203954330095,0.9966515619059595,0.6615634009955339,0.4427743579862103,0.10847517639517396,0.8164236375798402,0.9974660221258751,0.556139263331026,0.5508187260849353,0.18442373396073203,0.0026451110654091003,0.9750506690053703,0.9463227799022689,0.6564900486516134,0.2751085296384562,0.025291552058609224,0.9304522161807329,0.9843198672201303,0.7548538678750973,0.37629492069354153,0.07010511230484812,0.8657532455536585,0.9997010177459629,0.008055353185135061,0.4832578789386244,0.13499316518574667,0.7839749584607965,0.9917479889470425,0.03874470743061981,0.5910026319794934,0.21692567992652928,0.6889360968060626,0.9608321576938946,0.09097296860059889,0.007384165246061669,0.31207671276563786,0.5850746220142211,0.9083971783414548,0.16230127111609538,0.0004936771046237243,0.41600306430112133,0.4772404787354913,0.8368915694391122,0.24939884849331367,0.016928276762414873,0.06706117436264847,0.37046912046553965,0.7496543770195911,0.3481985677525391,0.05592052952963755,0.023434967199459145,0.2697463725922285,0.6507592535659046,0.4540868494041217,0.11564964219988477,0.002062574898275882,0.9961938367780581,0.5448242335888112,0.5621191044544401,0.19332648732202046,0.00394200870351108,0.97138024684734,0.4367960885879306,0.6672506283247996,0.28532384508040987,0.02898550604538208,0.9245549522783216,0.987020273168284,0.7645721697958586,0.3873457809720157,0.07602362872556356,0.8579045202013571,0.9999649709706258,0.8495391747838759,0.49462824997269234,0.1428598713323393,0.7745412779460394,0.9895631638141675,0.043253465005334335,0.602161559724085,0.22637322987533515,0.678357978928507,0.9563005774126272,0.09761952981165012,0.7049243045375647,0.32266394106600527,0.5738460255426255,0.9017304508596526,0.17077526627103962,0.0011281371916937455,0.42723558676142454,0.4658857373700659,0.8284010061390722,0.25930457353008096,0.019987392267955928,0.5352050599710405,0.3595184584039499,0.7397364556341482,0.35907346214765434,0.06126145113526443,0.02011740488698127,0.259711145031273,0.6398771041426635,0.4654230960290586,0.12302296872753443,0.0011594859262169521,0.1711244276399121,0.5334860120391327,0.573387342747139,0.20238791184153648,0.005495563968611061,0.9674659351891056,0.4255312476955161,0.677924673459418,0.2956502327628302,0.03292316029386044,0.918438026020916,0.32105389716266514,0.7741535835574511,0.3984549279126027,0.08216150814670181,0.8498706170544059,0.9999702451188845,0.857580540779524,0.5060014003201451,0.15091135978168252,0.7649655513113794,0.9871250414416657,0.924309816457483,0.6132676296497335,0.23596235278281819,0.6676875796313773,0.9515329097676817,0.10447428042482942,0.7152446818752636,0.3333429220502639,0.5625792215509183,0.8948558702920832,0.17941960045970662,0.8071706078728895,0.43850575712168977,0.4545486465331009,0.8197405299973518,0.269334833032719,0.023294863608885663,0.5465401446610995,0.34864048070534936,0.7296944959489752,0.3700212711443299,0.06682937360933794,0.6524012805104873,0.24980024157837022,0.6289225830889871,0.4767772325504952,0.13059134106026482,0.0005144942428601529,0.16264340076895906,0.5221304650143316,0.584617610839636,0.21160331918897357,0.007304973059914066,0.09123985863873513,0.4143049365185528,0.6885066613642855,0.3060823498705535,0.03710247748378526,0.9121046022719095,0.31048104881898864,0.7835931517900461,0.4096166137048815,0.08851557486381978,0.8416556928093069,0.2155069913884215,0.8654368966056607,0.5173714455766774,0.15914346473873736,0.7552527329841572,0.9844348833004002,0.9302160972749739,0.6243150955380483,0.24568808729048086,0.6569304197195203,0.9465316215236013,0.37462611007401453,0.7254536928198323,0.34410813047345,0.5512800394203958,0.8877769935082377,0.18822980115199156,0.816064441026151,0.44980774425888054,0.44323507197191275,0.8109146218958121,0.27948443740112605,0.8919161551637593,0.5578511497409142,0.33784081557448753,0.7195336936177827,0.38103633040749374,0.07262141613994771,0.6631931216571594,0.24001879007947008,0.6179013582127281,0.9268100426202719,0.1383508433646104,0.7609145816471106,0.1543369203134049,0.5107634678108526,0.8608932415600987,0.22096794136417225,0.009369299799288189,0.08479623097506078,0.40312296348758153,0.7781240681480726,0.3166147988846032,0.04152129525984466,0.034644013660335204,0.3000062565194334,0.6823675349944736,0.42082506335512365,0.09508254131837784,0.8332639978218646,0.20622851366877815,0.5780951161143068,0.5287325029445403,0.16755192695849502,0.7454078483221881,0.1261688068018656,0.4701759457185665,0.6352982414920397,0.2555454013577486,0.6460920648872394,0.9412993003189181,0.36364944775309926,0.7355460552861739,0.35495399647700576,0.5399543252846221,0.8804974830793255,0.26349001354009327,0.8247947442074427,0.46113570058813796,0.43195086726662857,0.8019278483098837,0.9952729684605238,0.8988767263662156,0.5691322229597932,0.3271250506976298,0.709259305782801,0.9689740464163703,0.954332648679276,0.6739005275964933,0.23037185140280647,0.6068191318339238,0.9207757803462697,0.14629746091752854,0.7705483242664303,0.14620928399972483,0.49939090164939876,0.8529288500441019,0.2304769331640567,0.8545625202626665,0.078567427416528,0.3919911140928345,0.7686014548572404,0.32724213037483646,0.04617732735046476,0.030604904820507595,0.28963493986288114,0.6717313705583974,0.4320744776742423,0.10185900979870444,0.004561387661946692,0.19710203167117607,0.5668420698601744,0.5400786942762689,0.1761323959496866,0.7354359910136692,0.11871333223447761,0.4588314930605129,0.6462113848934916,0.2655291948655194,0.6351781228386347,0.05812930231778657,0.3527433324444156,0.7455165475424612,0.3658749084705927,0.5286079390046721,0.8730211053832806,0.2535315106098703,0.8333570004067841,0.47248376508828877,0.42070187080157656,0.7927848589458983,0.16582885070433673,0.9056309209839779,0.5803775275536217,0.3164987303515202,0.6988766483547643,0.9649090464477856,0.9589633859431712,0.6845179583766126,0.22086441682043229,0.5956816378344469,0.9145238110396692,0.9908639674945579,0.780042086697722,0.1382646970214364,0.4880186506320208,0.844781855117333,0.24012537468951567,0.8624892909433942,0.07255667071121946,0.38091514789085523,0.7589398686777109,0.33795884581944835,0.9280095932661333,0.026808658374527172,0.27937246491049533,0.6610063532728118,0.44335903627826023,0.10884147419795304,0.0031569220674797505,0.18813226738629668,0.5555544398933816,0.5514041491160011,0.18488043222570277,0.0027059099235228756,0.11145513325395978,0.4475083407574249,0.6570488793431168,0.27563430225493707,0.6241942403862093,0.05292159954345266,0.34191340691095495,0.7553600109118308,0.37686521603549755,0.5172467511372725,0.015264964614409182,0.24370052909594647,0.8417467795607622,0.48384606633430444,0.4094939027445384,0.7834903843353561,0.15745588348885176,0.9121752444345717,0.5915812452647715,0.3059673525348032,0.6883910932624873,0.9606035051418478,0.9633566581211654,0.6950399205982842,0.21150140542576307,0.5844946386913283,0.9080573694343811,0.992901038926201,0.7893909569214644,0.1305072698633562,0.4766525986977158,0.8364564719893478,0.24990827389093073,0.8702285116947626,0.06676707079099703,0.3699007955245363,0.7491443084600728,0.3487594004498767,0.9337777717153495,0.02325723847904776,0.26922414140935114,0.650198032201605,0.45467290059974425,0.11602632182814204,0.0020095202994401262,0.1793238617199544,0.5442380663704675,0.5627030077368207,0.19379150960155928,0.8215142995029294,0.10439796521182215,0.43621234734489966,0.6678051175819721,0.2858554952000224,0.6131461005292392,0.04794521263007956,0.3311652744955456,0.7650713524414543,0.3879192328481269,0.5058766398974084,0.012601737593305629,0.23400215549310815,0.8499597408446219,0.4952167255351441,0.1432719902605059,0.7740492333873759,0.14926014668115867,0.9185063107216884,0.6027375793524345,0.22686597928059482,0.6778080656734605,0.08089638474690541,0.967510192158834,0.705460970257173,0.3232143113834859,0.5732639224952822,0.9013798012310831,0.9946830861203251,0.7985900978845533,0.4278178777439242,0.46529862657810983,0.8279570081667583,0.9987561195041412,0.8777761782872913,0.5357920807950023,0.3589537557581167,0.7392198423723322,0.3596382061196337,0.9393215159744381,0.6420949267705155,0.259195220045202,0.6393119995095777,0.46601021690864686,0.9803521725404403,0.7417624680645272,0.17068137209191786,0.5328988043197264,0.5739694241725455,0.20286101753571995,0.8301406011254732,0.0975454794472927,0.4249493573066763,0.6784745343926226,0.2961874853127795,0.9031023957851236,0.043202716332390756,0.32050449622171473,0.7746455475376035,0.3990312396220794,0.08248501746745679,0.01019068770396303,0.22444140768555093,0.8579916349181838,0.5065898595754077,0.15133292755748246,5.0932539385095676e-5,0.14124588070958932,0.9246208441870825,0.6138407575918243,0.23646229336618851,0.6671330411868985,0.07480283703009372,0.9714218390409237,0.7157757155605387,0.333897890075056,0.5619952999559816,0.02821491970969625,0.9962091870556903,0.8076347500029651,0.43908983764486753,0.45396260875480043,0.8192878612245531,0.9978254112541076,0.8851283856005485,0.5471260632942107,0.3480796925286732,0.7291716052776702,0.976195039976252,0.944637957741162,0.6529616770321812,0.2492908897258045,0.6283538875690879,0.4773651193409936,0.9833845907000129,0.751654549260871,0.16220927007792674,0.5215425206118485,0.5851975692423985,0.9995589608023758,0.8385960898496316,0.09090122139813522,0.4137251980507331,0.6890516094785546,0.3066249268793785,0.9097264521565256,0.038696564391414834,0.30993658791644574,0.7840776425653467,0.41019548706727244,0.9617241127694326,0.008033062410093383,0.21502323235065457,0.865838306124429,0.5179595840592273,0.15957426324536406,0.0003425869704318796,0.13341723211048118,0.9305156812053775,0.6248850352606925,0.24619496038550337],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],70:[function(require,module,exports){
module.exports={"expected":[0.0,0.7446628378809379,0.7934921593871429,0.01650781736404311,0.7339765832812138,0.7778363900957881,0.029381309051883464,0.6947691320191086,0.8996156195513405,0.008200705780025519,0.531622441356563,0.6299207802694466,0.23755354864170908,0.15065815289119222,0.9455358942493982,0.005243426384484218,0.6899096532646602,0.9027575725104124,0.11498023136465729,0.7625181972093387,0.849281534618058,0.0682773851271884,0.9947443907163654,0.3100123710616423,0.39811021567783356,0.049747753280021734,0.8200080117607649,0.01020878216717297,0.521108039784614,0.9795657314392261,0.2465732365580821,0.14320322047636563,0.9262718334497437,0.6502955185163032,0.000919663473248733,0.9089071811069883,0.12178272075873448,0.27431474201660766,0.39794516822388926,0.04982109003824725,0.8201375322765833,0.7950928852157999,0.03690896216758077,0.4292449099879798,0.997367323910073,0.3298126408239467,0.08507749538035281,0.8711906010061965,0.7351045547412259,0.9088101368592105,0.49988723183143635,0.2744651946109833,0.2650945174020303,0.48933144564179754,0.9147966144972921,0.6703994113914364,0.002655840565312595,0.07927989217457798,0.9631760351938015,0.9983382754103607,0.9264479665221372,0.04099252320505492,0.0008993356529556906,0.8119577801173681,0.0453280589993747,0.40830150467149995,0.9990939586708184,0.3499196027552103,0.0736103319991025,0.8566387415062655,0.6603296596994217,0.020498135298326503,0.13588776285599902,0.2557291685049878,0.9824457294669844,0.1147826338275329,0.012440115541644536,0.7256344419515592,0.8782545231057017,0.09112559267019099,0.31981880494867265,0.12888420811766071,0.43982332749886754,0.9404323653607916,0.7864124065839333,0.5708656100485319,0.05456651353449943,0.20481699451501795,0.41847840487589966,0.9502274812305751,0.06291155924765063,0.5532478981936064,0.04518787954905823,0.9317513378160104,0.4574844669224027,0.23743333931777283,0.07378652926795415,0.5317633982608101,0.7533305152732075,0.7064940308841101,0.4790035065196552,0.10370811979865763,0.977478949075965,0.5102198253413268,0.14828362478038648,0.025831320866759322,0.643413750744436,0.09093161224156132,0.9706379210012304,0.9962021891276893,0.16393298733294004,0.03311168351937033,0.6226286128220481,0.8256343238960411,0.9629216091355915,0.03424234463465342,0.16626002873968132,0.996577971227383,0.6016154124501325,0.841690429711465,0.640408702730592,0.728726559613093,0.15051799770956648,0.9935983717392484,0.2809137119306741,0.8571110659200258,0.48213506538052464,0.7093441415155053,0.7506236524615154,0.9897007870341961,0.30049534995528626,0.24010551762409266,0.9988730636756749,0.68957238901537,0.7690444614911085,0.0005194786669434626,0.8062993855351114,0.9515817296219977,0.9998557208076884,0.20229330160382047,0.7869649065558202,1.5123679903972231e-6,0.7889755777972653,0.6671320123132656,0.4367133787443867,0.21988991629509202,0.3227456950873805,0.9842865617349346,0.8761975679332179,0.6872941743523401,0.013144413884438488,0.11678812797338362,0.3027530479016426,0.9891982229017512,0.1337471247747481,0.4326827698827508,0.008686617231383975,0.8588282369753548,0.5779847153522246,0.3469331489063582,0.14876325621818814,0.411384062264896,0.9533120647338252,0.8434819256850113,0.5992059537530062,0.9962846969488206,0.9280757449820571,0.4646619261554133,0.11262963287327665,0.07759474695701929,0.6202426907368674,0.0339975009746637,0.9165383428808396,0.48619845784394466,0.9698017851501988,0.08952225739419128,0.6410558025654229,0.9069977328815276,0.0281644943481138,0.507760657387954,0.08683434901703535,0.968158432432014,0.3739012311927203,0.9191414472714912,0.8911624252881856,0.5293084238034045,0.07507765699506014,0.0030163292502448646,0.3948792370501848,0.16093395574023545,0.9956856678228427,0.5945559934295765,0.06411122776881112,0.9512918169573523,0.41605274457844904,0.1454057214223718,0.05345461339484442,0.5732994819833969,0.2524829304319643,0.009588352575721437,0.7027846992594814,0.13053695505329993,0.9881963617018834,0.3071172459631346,0.23398228389655867,0.014245935074899463,0.458828461884659,0.11635530929255467,0.00024317416050295693,0.8005774888551576,0.21597637224036403,0.999976839615037,0.20810807942073628,0.33624892561347963,0.9770769895185052,0.3475752740546084,0.19849868252829778,0.9997194060555976,0.6421211744185638,0.3160325075460299,0.9860269915404283,0.7650373070061564,0.6939497250607972,0.9985326034916584,0.24416632535009414,0.29615822885369825,0.9906358416752524,0.7465110797679461,0.7136390309141964,0.9964186391169048,0.8537775895441366,0.5850876528369565,0.9943322162523457,0.15392335419857545,0.4043080915416639,0.9563026674183686,0.8382147765983332,0.257583231827856,0.9971092408219281,0.16980436230004525,0.38323798064437353,0.964691992479366,0.08149053785358412,0.5173825503387611,0.03143651693305749,0.1862994622045962,0.3623850216134645,0.9722170918784898,0.0936754518804726,0.6479478888387407,0.0243488800121901,0.030595488934543336,0.5149581108224925,0.08282274344241936,0.10661604086457421,0.4742688959560512,0.923023217838381,0.03845723622027242,0.5364921323154017,0.9846202668214157,0.12028823813536127,0.45276380823570045,0.15567817803384326,0.04717735228998321,0.5874769710267869,0.8520592848016305,0.0069914123278370655,0.4313465695201799,0.9444142028140902,0.056739619631422544,0.5661705378979691,0.05074870005326321,0.011042291837829898,0.6961832156073856,0.12572458040628193,0.9865907233259925,0.5447410420139566,0.8813372347848851,0.016002525943562662,0.6761719308006164,0.1117782716398732,0.9811791662130664,0.5232283375589483,0.21008096343197674,0.9999943030459311,0.6558330046616019,0.7986354949965685,0.0001734115819340687,0.7771069813245177,0.9077796876958066,0.028612484087223666,0.6352042631528907,0.8156478272275806,0.001205912086980565,0.7589053278141802,0.7005650660431799,0.01006689082534179,0.25037821563583873,0.8320731234071443,0.00316606070678227,0.7402221669141865,0.720125759994223,0.9955070689149221,0.2692891537185166,0.8478808360700741,0.9953618652056451,0.15915520091242485,0.7392770680860189,0.0032882201223792817,0.8328775087037161,0.6132753528975303,0.997830723830184,0.7015511402254271,0.7579833730663248,0.0012818232450215739,0.0854730942808925,0.6341670884479398,0.02897267563963868,0.908401963351482,0.7762098852915391,0.00020293330423670763,0.7994985854166051,0.654809302503053,0.022178985873185175,0.8955852949158498,0.522152463136168,5.355679978857886e-5,0.9629088131454573,0.6751636050510064,0.16623481843902244,0.8820329241895409,0.8110888974928473,0.06766626844920987,0.7638926900830961,0.40899780482133885,0.01126851676664331,0.993592970124278,0.5651028739358605,0.0572389560536955,0.9449066889146396,0.7148576632419497,0.007172028517293538,0.8528232150398255,0.3005263957333175,0.04763508254339788,0.9988753344193728,0.4516917512897795,0.12098980067255155,0.9848842047880435,0.6075692013793873,0.038872509026481816,0.9235963862558996,0.47319339936083615,0.10728172025417976,0.9791726814293613,0.340766717775685,0.20424566074150485,0.9999081074798456,0.49474490185709247,0.0943040101041493,0.9725700014885514,0.6492356799548734,0.1871388328481453,0.9990299620468197,0.23803631236253942,0.3027219369546853,0.9650884445089121,0.3821910456385691,0.017787551121685063,0.997223729824642,0.537837127589482,0.28309673088234705,0.9567419245531711,0.14878735358011802,0.4113507411855609,0.9944927700109383,0.2756999958539018,0.0599873999825401,0.9962888155606278,0.4244913617730284,0.3902171296165927,0.990842161594782,0.07761286378783289,0.2450922453033869,0.9375176663070073,0.18075210520872442,0.12483163302304923,0.9698133722227313,0.3150314997075724,0.5029872881377363,0.9996821709104526,0.19764023011724402,0.3486013471855599,0.9808108540129159,0.33523171729521944,0.2089831691579298,0.919159906498821,0.21509067819138705,0.6156037117425535,0.9828070187844489,0.11566552874019448,0.45990188335501514,0.9993600555339195,0.23307099540723902,0.30811131487188104,0.987962597670154,0.12981215529833878,0.43845102527667307,0.9410851517744743,0.05346984601021537,0.5732659903362007,0.9922106726483977,0.14464725043412713,0.4171146348549268,0.9953248645740246,0.06358462270359083,0.5518729750480139,0.8766637038153953,0.014253960573185509,0.39593239311814044,0.9597306343036138,0.2898522149096093,0.5303834873503176,0.9979544113664969,0.019816350286884277,0.37494369441177566,0.7928579981887203,3.604094461145957e-5,0.5088374929989876,0.903591461875138,0.1930013550716771,0.6420887133489876,0.9749577124685296,0.000759786217758629,0.48727506283993993,0.6939809309219316,0.03360823431759308,0.33370263113777177,0.8266822476024824,0.11194957748301304,0.7464816228082234,0.9275182478183992,0.007395639134803733,0.6002612951645083,0.8426984941360152,0.004989637424244908,0.4442612567375531,0.9382997698582112,0.05086805267393546,0.8381898396930361,0.8580773962829198,0.008487876757733548,0.7080877768683792,0.751819048238936,0.0018457765330714415,0.5576883672763473,0.8727903526424794,0.012900221341371976,0.6882923093822985,0.7702087948894615,0.0004583807605150758,0.805205429865275,0.6479802296515041,0.024338444269611736,0.668146659305738,0.7880960121691634,2.3347791977545995e-8,0.5146864878418941,0.6684344286157349,0.02443271749347853,0.8866162849038588,0.5365258992103454,0.0004715567396285092,0.7699516137904914,0.9126664136326768,0.012831342044146321,0.6269552590098805,0.5579919153150734,0.0018721039868535017,0.9481306922381583,0.7083656149764019,0.039501374068013406,0.8578640387150755,0.8384148669204168,0.05073383881722199,0.7326905271406057,0.4445649620014297,0.0049466642172463215,0.9865829337223605,0.6005606690945805,0.007448098280162463,0.9273596938098293,0.7467474638023439,0.11175693611932236,0.8264508343467369,0.33399086403193645,0.03349817198150323,0.9157719647415266,0.4875805659007857,0.000743038635487081,0.8098186396695377,0.6423816871252551,0.19276020011040207,0.903410990583503,0.5091430432770591,0.08605728001389479,0.96767114024642,0.375239604488443,0.019731257858408124,0.8902997600492422,0.5306885165888003,0.07435061481101202,0.9596103925766291,0.39623131961052527,0.15991913705702926,0.9955025391261518,0.26931919177460845,0.06343556454360161,0.9506948699114497,0.41741602182501003,0.009535462650683835,0.9921568484903611,0.5735682776561742,0.25128258771889955,0.9978338731042843,0.4387543122104845,0.12960680239225775,0.8467150724155692,0.30839354928513885,0.04405999727417742,0.9993754188994024,0.46020650620506653,0.3554457914688386,0.9827274788440696,0.6159010094358669,0.2148395986231681,0.918993221756111,0.20923172637465354,0.10204858857283533,0.9808946142564905,0.3488926287490568,0.467048193624995,0.9996711829942215,0.5032928817933788,0.314747614794019,0.9697087079325981,0.12503372153430048,0.1805169675976509,0.9376655128722615,0.2453551953468041,0.294896540242411,0.9909002911742253,0.39051529245732913,0.16423120863840013,0.9962515580651796,0.060132619700032974,0.27542691335103886,0.9945379101175611,0.15492255663836507,0.40295143192080257,0.956866180103662,0.2833721185432353,0.2563749433756223,0.9972557965077005,0.4329520481015164,0.3818940718985332,0.9652005468334367,0.08224865074554,0.5160007375309394,0.899320348458397,0.18737727304413898,0.3610563631195316,0.9726697421012587,0.3229998147448331,0.49443932005009367,0.9999138728293102,0.03107349748777921,0.6282265966129676,0.9792598748344854,0.10747094212894026,0.20207502242878633,0.9237586678435349,0.22215654825552794,0.6072707376728939,0.9849586888248854,0.004030725608385632,0.45138759033712306,0.9988547555660192,0.04776534816481354,0.3002462060735256,0.8530396860992375,0.1356119492654111,0.7145816774843687,0.9450460584642055,0.05738101952788954,0.5647998636790521,0.9936416437466857,0.15071238776318102,0.408697326362886,0.7641522103564082,0.06781986556913339,0.8108495927490968,0.8822300068717146,0.01635136249141006,0.6748773393177347,0.9630242343512547,0.07906247231375046,0.5218471594127138,0.8957721244197541,0.022269083595758077,0.6545186908332797,0.7997432387582617,0.00021173259341744632,0.7759550961854791,0.9085781922150251,0.029075279914030305,0.6338726713159287,0.9775595157576147,0.0013037848679230413,0.7577215455717199,0.7018307736228904,0.00979272418487609,0.8628313660637386,0.8331054759526944,0.0033233032351772662,0.739008689144851,0.9318883257706618,0.006002907304259453,0.5918725705764939,0.5935314841624607,0.0446012703526783,0.7198513287327344,0.7404901406619084,0.05469002218577762,0.8318445942518722,0.8639908514203283,0.03612461979867759,0.7002850928436077,0.48041878058574444,0.0011847933964603263,0.5491893359043228,0.6354984526567884,0.014900516943608666,0.9076027691305255,0.7773613028586785,0.09011876758323295,0.7983903362109164,0.8921697117632577,0.021773599787559828,0.6600722430874524,0.5235336029340556,7.570375626875236e-5,0.9623844681161791,0.13873278322626864,0.027141540756318916,0.8811395070285116,0.8121700984924827,0.06697338852515083,0.7627173466967128,0.4103576425614254,0.010978512515293692,0.9933704586736822,0.5664734372242018,0.0026838852060269702,0.9442740817575969,0.7161052642726173,0.13445804126404814,0.8518422180921146,0.3017949500373259,0.04704785158338298,0.9989661076622038,0.9395914552083218,0.0038196266668225065,0.9845449635197469,0.6089189971046031,0.220754592905549,0.922860220827884,0.20343249109182,0.06205447978237477,0.9788834459976185,0.34207792325521436,0.030490316435268394,0.6857907086953909,0.4961274276911499,0.3214219609245803,0.5335302292449856,0.12033229646932059,0.1860615514749246,0.934155988415788,0.7902964761774799,0.0813233998494548,0.9894890910532526,0.9017221138619442,0.017423899414998778,0.9970763338931019,0.056770954459256784,0.0005959502394954908,0.867085545666727,0.14977275944714125,0.1537028521186789,0.8707823602823932,0.27693651212779513,0.5446735986996659,0.7492201402456788,0.42585837589320596,0.3888687053901544,0.7811237663456101,0.5820121793575249,0.24390380690085828,0.8949672246254978,0.7301663315755299,0.12391910338200407,0.9702846971861847,0.00017519942020927104,0.040618170943414356,0.9997295494429133,0.028635066437941725,0.0021263686868936427,0.980429664706451,0.10307292242972838,0.7588473959677701,0.9142675968632481,0.2162279325766126,0.6142581494536389,0.8076969418624291,0.3570627043225198,0.45852390771027807,0.7201865571385351,0.5118398993093257,0.30683533669505736,0.8479294703903819,0.1307429329899773,0.17398847860170435,0.8886080951560766,0.0032804715450859834,0.07294151284016404,0.99245188411446,0.00986638315890026,0.4157514985877031,0.9951343453892803,0.06426102305599163,0.8164299148981241,0.9495202961431568,0.16115861650565066,0.14254105585728472,0.9602724811671204,0.2911075557067334,0.5290033441231912,0.654873688192356,0.020203563684508097,0.3736055333507817,0.9872988180446527,0.07886112223947367,0.23053652130776292,0.904406059051563,0.19409381205225762,0.6407625895222417,0.9753879633907245,0.0008378854836679772,0.9543019511357845,0.9999994634361199,0.03410835121617145,0.33239939540438207,0.8277276734481871,0.11282292949436701,0.7452777647398063,0.9282335759840963,0.007160605043682433,0.5989064112662065,0.9869686185493106,0.005186365894132183,0.44288750541255206,0.7341834268590792,0.051477354370251416,0.8371702015738005,0.8590409887331314,0.03884633602158882,0.16223737136977034,0.948876890220917,0.001728992329982304,0.5563147977733304,0.6285873901937451,0.01321411620764984,0.9117108362592526,0.9927033672744401,0.09426443451026173,0.8041091405496239,0.8876845944289382,0.1728791098459183,0.6668439596811893,0.5163738560656321,0.3054848993253092,0.9650635814460602,0.6697355570436747,0.17056291692415465,0.3584671871928232,0.8065408724813585,0.07060014534659109,0.2174353550878365,0.9134455061934483,0.012521995167398214,0.9944827428995553,0.9800217413089719,0.2638152317326155,0.9475157675493602,0.9997755830775272,0.04004174581759773,0.8568971041734774,0.29523705715144744,0.12295530867046356,0.7314658997021938,0.4459392322975625,0.3692223317218122,0.5834569941194722,0.6019146155344197,0.22672693721312787,0.42730750682984336,0.7479490194244973,0.1108872079292022,0.9767739270515119,0.8697979218707639,0.152647587942766,0.9999855351865025,0.9555759086341105,0.0006696004614568651,0.974427436906824,0.11570884565856704,0.017042594012204593,0.9025926262330977,0.23312825552368266,0.08052433220299299,0.7914880311269581,0.3765789317205847,0.4383838262968405,0.6519510420793637,0.5320683747252638,0.28832157939908565,0.9590642541306311,0.6844297967963706,0.029988567765140528,0.9508563925873229,0.818801524344573,0.06276323935457345,0.9955523595157258,0.41877993052087104,0.009268610748680517,0.9919110418911598,0.07454660440728633,0.0036410184827934122,0.9402876219719399,0.7237817518415444,0.12867948181233474,0.8457175634993175,0.3096713176583775,0.5087697889504578,0.9994425941008078,0.46158485479240763,0.002837609227462512,0.9823653739218454,0.6172454910359196,0.21370500538453707,0.9182371572335634,0.21035759658575565,0.10121306103562427,0.9812713142187091,0.002418657061417362,0.027619685878403244,0.9996191393731477,0.504675421329722,0.3134641385091188,0.9692329971793328,0.12594975288430504,0.1794546585620011,0.9383323514716582,0.24654601239531743,0.07671188753815211,0.9911609871770353,0.3918647402483325,0.42282297334841207,0.996080682600714,0.06079167043479644,0.2741924924648645,0.8728354752359899,0.698941895569683,0.14758778047602883,0.9574261995226345,0.2846190279089433,0.5361535722718987,0.997398550102177,0.018236581965878296,0.006499867626570788,0.7881513535970932,0.08300995782604026,0.23659987607762195,0.9326246528461047,0.18845747424324594,0.6476235986118748,0.834196595698415,0.0004745015181737977,0.4930568447052481,0.6886380885371193,0.4772684156914197,0.33916734168186985,0.8222825638730789,0.6324605760906666,0.2009658155619437,0.9244908777272988,0.008419519673343145,0.09193275204074869,0.5794169347767295,0.004207822305979492,0.02270347978921744,0.9987593248121449,0.0483568018926151,0.8424265625659237,0.9635751477471737,0.13656006830509498,0.7133320717848112,0.883172814824287,0.2602140778306057,0.5634286939908024,0.6216499190955717,0.4072573420516746,0.4073383396414751,0.7653250887725759,0.09849342937864008,0.2602864107135858,0.9457118706404027,0.02615249126820407,0.1366166809702074,0.9635442570257826,3.169806166392064e-5,0.9676471823433751,0.998753514972213,0.022678930300255806,0.89025743274533,0.9853132405088589,0.09188512634188856,0.22337573668539001,0.39629756076507827,0.20089975917028058,0.6325400558687405,0.5522442603205727,0.0014054707538150857,0.47735075744913325,0.999938917715061,0.14438472680450692,0.3243707167619689,0.8341352815245549,0.1182880782518676,0.7377933838797617,0.9325833230258151,0.005791199307161432,0.9878810397785871,0.988836220509596,0.006486626830010334,0.43440411292636305,0.741701374414647,0.055320451621163225,0.8308091424672264,0.8649373533911178,0.03561041305481971,0.6990175140523738,0.952576527396036,0.0010915775626749724,0.5478132725744431,0.6368287808244464,0.015237384500631723,0.906800458318568,0.7785105996803127,0.08932852473267427,0.7972798054686261,0.8930258722585638,0.021371870291654438,0.658761816065124,0.5249145627905377,0.00010167320778808886,0.9618565876269345,0.6777508450122246,0.1641810372372543,0.8802431756184934,0.8132489125934179,0.06628381958654822,0.7615399945346768,0.41171816572022274,0.010692247394496479,0.9931441748396579,0.5678434922468201,0.25631581303909184,0.46166703835311057,0.7173512129305021,0.1335161201937105,0.8508585309068151,0.3030650198464337,0.04646408396242424,0.9990530657364471,0.9402485534626899,0.36099131687424135,0.9842020173490615,0.6102679600190728,0.009252820109489135,0.9221208221481372,0.2045467459032052,0.0627232623196875,0.979279170853643,0.34339033623027754,0.4728206295432347,0.6845064086603191,0.4975099831354675,0.3201312501255442,0.5321506312595342,0.6518725118500392,0.1849866705214696,0.934840114851168,0.7914210563708044,0.586048675126603,0.9897692180523687,0.9025437398174979,0.01706393755648422,0.9969251372424635,0.0574125202238388,0.0006653428241973902,0.9556098680723907,0.15076084320339617,0.03297296641090558,0.86985339422381,0.2781747339780772,0.5432963753807378,0.7480205937950299,0.4272259569111968,0.3875211308900158,0.9903078528077511,0.5833757226346105,0.004743224072968066,0.895813501951983,0.7313928340533669,0.12300944931106506,0.9707524262833529,0.00021370760142214174,0.04007407274560526,0.9997731069693974,0.029098038701116713,0.0020008989163193824,0.9800448019637802,0.6255377172794243,0.7576635170018153,0.9134918542233915,0.21736735672499652,0.6129117135300304,0.9835185198437137,0.35838813364560707,0.02488711931862475,0.7214270181092,0.513222048469019,0.3055608354837918,0.9662122973492516,0.13167653407571256,0.17294145238784175,0.9423806018295868,0.0031242546387325043,0.0722240909003834,0.9926893302206503,0.40022593290512837,0.4143890064969701,0.9949400403341688,0.06494075513299602,0.26659913707392924,0.8784764350738141,0.16217659973341936,0.14157570939922604,0.9608108087192248,0.29236449372635315,0.52762297913221,0.9981966663129465,0.020594445676579975,0.3722683387205561,0.7950947219968285,0.5988256120122102,0.22937292999074033,0.9052175640795046,0.1951886080367527,0.6394353894039368,0.9758145794263068,0.0009198014168623758,0.034138279666468985,0.696526538682356,0.034612030391137805,0.3310974411699802,0.8287705934396747,0.11369924191881237,0.7440720312413572,0.9289456298125947,0.006929339275398183,0.5975507711148694,0.5878445030753711,0.3735257854905253,0.4415141907781237,0.7354040899852723,0.05209008553699074,0.8361479854013827,0.8600018359028903,0.038313790190334485,0.16121923392787102,0.47464172266328153,0.0016160179806435915,0.5549407976790484,0.9951228674498653,0.013531733110723865,0.910924743760325,0.9924661457085391,0.09345801504120721,0.8030105259705483,0.36274395618516586,0.1739259871953857,0.6655399843430715,0.5177556340275039,0.3067593121751452,0.5119223027122562,0.6710353876484649,0.16952412461129207,0.3571416930322392,0.2579098024013213,0.06989347427863413,0.21629580185785963,0.9142214374887878,0.012216375619506004,0.9942760283037502,0.9804068229613385,0.002118781727543262,0.9468974210888772,0.9997322533620112,0.04058563447595814,0.8559274407438846,0.2964991675558385,0.12386479108618659,0.7302395024413109,0.4473139159503133,0.004566237444314392,0.5820934885567428,0.9905609488561709,0.22557016760159415,0.42593989234486834,0.7491486791918107,0.11002045495298657,0.824351396790284,0.8707270567251897,0.032510218611577824,0.9999731071326953,0.9561438886856198,0.0005999802414438093,0.5392977728484046,0.11659482300265794,0.017402335802691737,0.901771183599984,0.23429845142109051,0.08451264312660428,0.790363583536146,0.8982522792494598,0.4370120180057769,0.6506332706616527,0.5334479876621956,0.00034709578264119356,0.9585146056115137,0.6857141812134923,0.15789730835577592,0.9514524083666974,0.8198653985156376,0.06209425734242441,0.7542167230767349,0.4201444602373845,0.009005511051391135,0.991661474067446,0.5763022108645804,0.248887616646483,0.9396307242629197,0.7250172733322725,0.1277550004039611,0.8447174111754912,0.3109505413128449,0.042931993274142044,0.9995059504903397,0.4629634971076253,0.35280093050725786,0.5665551313096752,0.6185890761596234,0.2125726011997386,0.9174778948079118,0.21148568144547253,0.1003805826822744,0.9816443343093451,0.8810861513012486,0.46428955534855687,0.9995632755903091,0.5060579251171028,7.714484960369417e-5,0.968753698601236,0.12686864427776962,0.021749547007665793,0.9389958385171262,0.24773876739047096,0.5776159480807787,0.7774298809989767,0.39321501485751026,0.4214572557101687,0.9959060140300473,0.5491073084066656,0.27295979813625865,0.8737552841787275,0.7002095653542333,0.6869479884995906,0.9579827213932951,0.28586758410938906,0.05472751163500117,0.9975375005138427,0.01860841896813553,0.006279547614451986,0.9885613599922904,0.0837744532740185,0.7866591178966947,0.9319298526340003,0.18954005754253922,0.6463020863961761,0.8331669422205519,0.3255886183800286,0.49167442244879384,0.6899177777523474,0.47864965513606633,0.871617898851968,0.8233383840945014,0.6337932522415302,0.19985889515466138,0.9252198418910877,0.008168743630079578,0.09113537045736447,0.985624406075172,0.004388709903823507,0.022293415411275275,0.998660080470775,0.048951708951045336,0.8414177919433792,0.9630553362666612,0.13751096626019943,0.7120808349167104,0.9462995562954212,0.26142821397088145,0.06786132159779784,0.6229904910931999,0.4086162868247815,0.40598006142481113,0.7664959384739096,0.06921699588855063,0.2590739984462581,0.8840067764801176,0.025713013986914335,0.13566839605413633,0.9640607353724266,0.30017064578973107,0.519084312542387,0.9988491731047155,0.023092426672182642,0.8893916372256057,0.8019518421859164,0.09268544222290287,0.2222250808812059,0.3976504753501112,0.20200882996089048,0.6312064270007007,0.9783713128912721,0.0015109689671512494,0.4759696811553927,0.7043575494325693,0.14341418805330303,0.32307690631049624,0.8351625322486801,0.11918254437878029,0.18744160539230753,0.4401939448928086,0.005583270103579063,0.5891530917243936,0.9891248801486976,0.3818139793714497,0.9296272929839373,0.7429107600829625,0.05595428114208273,0.2834464102615063,0.32984661637056295,0.035099757102363016,0.69774841354382,0.9531625132005049,0.27535327160501244,0.9762214092325301,0.6381580627790281,0.01557795862424266,0.3905957202683467,0.22825589751863162,0.08854142193689729,0.7961670016810163,0.8938790276199762,0.18045356646049254,0.9983077260571751,0.8418000267141177,0.0001314649557803138,0.5033753066378268,0.9996681873587452,0.16315799429750105,0.8793439368129687,0.814325331546881,0.10199869085953522,0.9947496145448117,0.9152564274509081,0.01040972359307707,0.7703227346007964,0.9827059943654972,0.35536688667538785,0.9429986813506646,0.7185954996888964,0.04402617087254068,0.9657301859155203,0.3043365954494993,0.04588378414409511,0.022935445076979033,0.9409022855115659,0.359663773056867,0.9838553688982048,0.6116160798084269,0.7698376095536171,0.4174973175309509,0.995377653805183,0.10472804376133038,0.8177988519674781,0.0018838307262136755,0.15985871780630545,0.9998113902823567,0.49889255761882195,0.8347739093185824,0.5307707874456057,0.12213738633162852,0.18391419820647897,0.8966244820245566,0.004927679412607355,0.08601105274434229,0.9900456002036742,0.9298948301882273,0.01670766829846293,0.746865244022407,0.9748363084647413,0.2793670875798148,0.334118616719142,0.69362323817956,0.03346851568874909,0.9550605758664252,0.2794146519371207,0.05803268311001719,0.7468191509422726,0.01672125805515573,0.3861744164199305,0.08883905454062008,0.5847386284086009,0.7925004232689971,0.8966567528299456,0.18395526775869203,0.9979143646236273,0.8384755398628048,0.8578064687868376,0.14028618297865542,0.9998128431568579,0.1598198716004276,0.0018792369204576609,0.8178397691290238,0.10476050494461542,0.412563926464416,0.9127129499637189,0.009509157828537507,0.6115644142667762,0.983868726145272,0.35971464575394935,0.024458175391370074,0.668512035294494,0.9655394752316928,0.304287820983109,0.30851864675231644,0.6680690310967454,0.7185478297491914,0.943023255565814,0.25515569014163864,0.07150993979841291,0.7702781447722358,0.010420485369821264,0.4130271690005435,0.9947419508943753,0.5576064902771168,0.8142841104489347,0.47196281191932915,0.16319716600882417,0.9996662539169232,0.8581349204142104,0.00013025241224695616,0.12179478833594737,0.9983120803139824,0.444179344587026,0.00500125986919453,0.7962097036653936,0.5802127237073129,0.22821140792828354,0.9275609858317793,0.01556483416160298,0.057812890006730455,0.9762375573133072,0.3336248992838816,0.9531401128258459,0.6977970934193065,0.9548434368234926,0.3297967783895006,0.9749834649360872,0.6420096830525198,0.7428644315320926,0.017904327732394643,0.23163262174228533,0.08627504755343784,0.5892052442768153,0.005591171555247132,0.4401413233348347,0.9979618529880726,0.11914820061611348,0.8351231989917982,0.49936300992683297,0.1434513441909463,0.9999163680750789,0.8767179062435644,0.0015068543488738761,0.8213280508619365,0.9953136123811811,0.4170333497336377,0.009611029476879862,0.7736893632146797,0.07361914287187682,0.2516192759764627,0.3640739492738654,0.93871961033011,0.04568711655436569,0.9671750296165271,0.3001220615066513,0.044219402648170814,0.6723339104914084,0.02572979486036331,0.9451077681008859,0.9828284415002425,0.6155235168886282,0.7664510905549498,0.9149942015858099,0.2089161466491456,0.994065534400397,0.09923793361832328,0.8790372902822243,0.4674353863012048,0.9996851026198443,0.13747446172056121,0.8549550558404873,0.8414565121091591,0.5217118588634948,0.9986639553658716,0.8941686451378418,0.004381705577519601,0.7998516231594115,0.9908264514231064,0.22441549632110946,0.9251919563859613,0.750346433931508,0.05994825930796732,0.2757736663131947,0.3379089930344409,0.03202160178885033,0.6898687465886488,0.03680827652075802,0.9587442037801774,0.056170729327910784,0.6463527682663022,0.017765767606229166,0.3822711532565259,0.2354706789117995,0.08374508705297617,0.5936645192168436,0.8990867108105528,0.1870745405105858,0.997532243860342,0.5348273448508715,0.00040051346194242,0.8640836877861741,0.1466458467059637,0.47549978246681535,0.8737200752296224,0.8209268269486009,0.10723070824431835,0.9959127799864046,0.4215096005411547,0.9075243174742138,0.6076496964558611,0.9848640838553436,0.24769300659943405,0.9389704650724208,0.7262510743076795,0.6599439359310925,0.9687721389707971,0.9642356690102374,0.04237323133885068,0.7149320886784852,0.0271855714120674,0.351480183231604,0.9816301021635323,0.06690569639055283,0.9147020008948488,0.4090788560210208,0.21261597232830065,0.09955115987803803,0.8111534231305411,0.002697916746099538,0.4629106405086053,0.9995035920728488,0.507440382584693,5.47699991533257e-5,0.844755801416807,0.9986254410416089,0.17733740140566884,0.45320288282376886,0.7994325780915097,0.09086475728176602,0.9916711107496005,0.39456610596046326,0.014587116696952007,0.7542623620956377,0.062119841594805436,0.27172883979058426,0.03220617465744041,0.7014757043068635,0.6856649694629308,0.9585357414603952,0.28711777759792756,0.972071941782729,0.7393494402416636,0.9316926789979977,0.3778678050615759,0.9882654497989465,0.08124938123616893,0.006205439862376705,0.9018027309006451,0.19062501466442683,0.5343051417932603,0.832134741299019,0.0006025788029218049,0.4902920638509357,0.9999736540395707,0.15360517611556473,0.001211640149874571,0.8243917320228621,0.995845714704299,0.19875426967061627,0.42599231052481534,0.7770383677162978,0.6032159225057135,0.9859516962318166,0.3679394989006488,0.021887003648465908,0.7302865498322884,0.049550064791356985,0.2964507548409452,0.9625319841966256,0.6760947877023072,0.7108279764472081,0.3519800939032224,0.26264417426628517,0.9803921282512893,0.6243301226873599,0.012228023045185665,0.9199855618746532,0.993433288059637,0.5660888353275991,0.0026438845903385966,0.8848907604162479,0.458388946894459,0.1347228968713436,0.5119752899896715,8.208002967691197e-6,0.12744107496174767,0.9989410169627293,0.17388580833969475,0.8885228643598857,0.80305268496457,0.0934888724912118,0.22107654898509804,0.9230671545106366,0.753811502886528,0.6298717949089326,0.06432745816217267,0.3417098071324524,0.9494609799559687,0.7056185983424367,0.038334140698630836,0.3217844486391406,0.9722441791584616,0.052066532857944436,0.7353573280458388,0.9339633894593382,0.2388839572689676,0.987268469057531,0.7859547830055207,0.006938135543049673,0.9044856856141849,0.9971180847159575,0.11366559332032633,0.0005771612017367866,0.8668219790221541,0.14949593165605618,0.15398285039840992,0.4845639764858259,0.8676323992832691,0.5450600596770213,0.9964087844913572,0.19514659517785488,0.00801480739803756,0.7808027959525746,0.07814590945440408,0.9869993183977045,0.372319583165945,0.7298217932557345,0.6561373303005538,0.9701527812274997,0.3159558654752983,0.9607902364405572,0.038794015386394376,0.028505779409690235,0.3476537793382293,0.9805370175789756,0.06491463573053974,0.759179299907772,0.9197012885598708,0.40017399703471584,0.9926802969709525,0.8080026992173868,0.003130173310676776,0.8877701047900929,0.9993087649035299,0.13164069180336962,0.8488831159296328,0.8476506934609285,0.130481422092511,0.17428277800323372,0.4571990568221032,0.003324996882051734,0.5722820238573574,0.09614644054323479,0.9932389805954431,0.01364065719223767,0.757708938284434,0.06407085270278634,0.26816645766124375,0.346018744518235,0.029080223911390035,0.7097445714965486,0.9601207652719504,0.290755078854793,0.970734561855302,0.6545046987954175,0.020094520619255707,0.9361983879611049,0.3690916219214423,0.597089315634004,0.7822222937516916,0.9041777517431193,0.4271735193191135,0.9966113464372318,0.5433491784636562,0.8252995237880214,0.4862808533005394,0.9999987444093742,0.15072291498316936,0.4890981654129849,0.8274345241136536,0.540540946124415,0.9969310035272357,0.9054929894163217,0.00722618776486228,0.59928674033426,0.08059804897393047,0.24035027686224714,0.9348139495928786,0.019311235757527023,0.7383003177401561,0.29279255564388923,0.3201807052269904,0.038996430468152155,0.7071830302973847,0.030034781417915046,0.3433400017342002,0.27066705244425954,0.6282123764490078,0.013125644840485284,0.9221492270949669,0.21965267944589417,0.09449131636633429,0.575069427488349,0.0036573507225386437,0.17258574968474172,0.9990498024652679,0.5159860329278528,1.316428310471629e-6,0.850896290809142,0.13355217785413231,0.9994489688090409,0.8859848491512262,0.8062342318186196,0.5677909796306864,0.9931529191200279,0.40293699962210394,0.9181629259200548,0.7615851661532962,0.9799130072544673,0.2641573094911728,0.9476886936402087,0.02757531481542569,0.677701303948211,0.9618768894516402,0.3133384939028298,0.6540067772020828,0.7318097741694349,0.021387203461074034,0.36959688964249326,0.986353118868756,0.07663981856172125,0.7784665797019694,0.9068312728940779,0.1973851835157786,0.11113099974611135,0.5478660318248552,0.869536648909961,0.4817474097283521,0.1560226731328419,0.48857484046758254,0.0006898257343186942,0.8308488839819386,0.11546072118273543,0.19197616948776702,0.4344566576097088,0.006478119751682998,0.5948372635204926,0.24079776009942677,0.37620294976214275,0.932556740707695,0.7378400071146825,0.05332581751542076,0.9731625684585625,0.959217884044238,0.6840690765613744,0.7030465038265195,0.9506884992354117,0.33903911608295045,0.0629515922108893,0.6325911614506629,0.014178123284636746,0.21921940018180863,0.9919804080126049,0.09185450768559883,0.8008063546405161,0.8902905643345739,0.44987699540729936,0.1289394508600113,0.5205187721004028,0.850523198683806,0.5091577529445626,0.13665308954624977,0.46119798696930203,0.8830857972619045,0.8098070921556322,0.09852501902324623,0.21402321182717127,0.4073904244473172,0.011616327829020667,0.6215985086606868,0.9811659635651035,0.34984097892571686,0.9456504817908578,0.6781904872619944,0.04168394585753599,0.963595004598299,0.2990280466947446,0.04833406437538962,0.7277814359744508,0.93814553929081,0.24621160995681252,0.07691854880584181,0.6059717379486524,0.7746879499236892,0.42320637265115024,0.9961290222650885,0.10829590112875437,0.0010607287563552115,0.872576815449847,0.4772154682086,0.9999367825445744,0.4931098420480016,0.0004721957635785978,0.5365405720172911,0.9973588697320619,0.4339377551117789,0.9001190886326078,0.005770664918933965,0.08279597258462162,0.9888646609311245,0.38060253459258475,0.018222400605095446,0.647994282618176,0.9729931198890389,0.28457119626386934,0.9574047951915018,0.6882786802437864,0.03141956897491616,0.9526340797791488,0.9781051456766823,0.06076634328370334,0.6369590351858088,0.9242857081920701,0.39181299282442833,0.09215710058770499,0.579033810405532,0.004157736854251859,0.45039784142377237,0.1794953378680637,0.9984086980170719,0.8427092069145178,0.853743265912212,0.5046224212065157,0.167845207142249,0.46572162075431367,0.002413452864563681,0.8133544576729907,0.10124503546020541,0.40687607706085555,0.9159497994934347,0.7649961212807308,0.06832085640392666,0.982379323495362,0.25619756577537883,0.026276483155228625,0.67394525140414,0.9633986686880045,0.3096223065389726,0.9677843526571037,0.6626114717774322,0.7237343530612929,0.9403127376794623,0.9854064501739677,0.07451876374450817,0.6104000506445166,0.9091506624440251,0.41872763251985445,0.9955453029412689,0.551858342283331,0.001376547437428488,0.47773839228431836,0.15894567482597766,0.14465760042018433,0.8621463428618098,0.0002956732161469855,0.8375956457747127,0.18882557886362994,0.4384364250646575,0.005850234424546075,0.5908947653822411,0.08531298586629421,0.23308343572064133,0.3850119449464728,0.7413616241349335,0.055143176260044835,0.9744441677697864,0.32818275630580884,0.035754368479617105,0.6924727899910398,0.03302134955370467,0.2737728482037163,0.9767579578417158,0.6364555253523114,0.7479029917549445,0.9266680107885298,0.22677132450732473,0.9902812987239527,0.7975917091109603,0.89278589128113,0.445886540904028,0.9984501540900503,0.5245270109857001,0.8393924268388018,0.8569342227006165,0.9996005593209316,0.1644686191284142,0.8804950275304163,0.001988813443440818,0.559312316970179,0.9944905922224241,0.2066294163616732,0.7645520846113998,0.6177027750777018,0.0706273015047949,0.2566547096352237,0.9438169167328341,0.024844942162045247,0.6696857011457231,0.9650830433129155,0.30270841847679986,0.046627570258838125,0.6668939232504859,0.94006447642146,0.36136408752769167,0.2540690619334586,0.07215399262462124,0.00917866431974318,0.9117409091033439,0.20423379849812368,0.10581485108993421,0.5563674626190762,0.0017333991203931087,0.8785649199664458,0.14502605152819453,0.4971219623718627,0.8590040992336472,0.8372093377552765,0.12098020513073021,0.9982081398380961,0.44294016124190605,0.7911056640795048,0.5864308861666543,0.9896909774850389,0.22925906314102862,0.9282062136508547,0.7453239501919591,0.639305327856148,0.32769127171548285,0.955769566917287,0.03408911316267682,0.6952056862012344,0.954324085512793,0.33096997932918887,0.9753715363724602,0.6408134474014946,0.0162702161265868,0.3878992453974291,0.23058116953787133,0.5829931039734944,0.7939346090218021,0.005406722040057987,0.18258521450521548,0.1232644558171972,0.5290562571286842,0.00020251440079088745,0.500610164382049,0.14257811759990596,0.16111964285188374,0.877536764540429,0.5598320437971529,0.10367850584010396,0.995141718883112,0.4158037436555414,0.009855908560623183,0.7726447877601961,0.9834195688689902,0.3580160381419504,0.9417097320361267,0.721079049463992,0.6654121870160516,0.3059183784671937,0.3068842251354451,0.04473360563700912,0.023770614924134126,0.9421996310244913,0.35701191465909266,0.9831509757863655,0.6143097487866206,0.7675055740928808,0.4147713284138477,0.20790303064745852,0.555847313345509,0.8156592369705669,0.0021312544390094668,0.1618906385699761,0.9997278035811357,0.5016577214171015,0.00017379924055882512,0.5280104045360744,0.12395403294535745,0.18177651227453845,0.8949347217872937,0.7947813931504573,0.08756797317477061,0.9905871215384674,0.9284762349685196,0.016006218451994902,0.7492660879123542,0.05935750230182918,0.2768890778275931,0.9538856668847456,0.696169683171695,0.03447031193411276,0.3314627086466936,0.28189953824621217,0.9739459953610916,0.7444106127905014,0.9287461205804692,0.38348360875197673,0.08727190723469191,0.5874624857683349,0.7902533203003084,0.8983341494730108,0.18610280568896476,0.5285336704643661,0.8364351332618629,0.8597324487687679,0.14221226940870507,0.999880850328614,0.15779855390849878,0.0016473399447321513,0.5553264578379205,0.1064601756747185,0.2033898203550722,0.9111456804315226,0.7722058530737858,0.6088672669344498,0.9845580369036144,0.36237087774736726,0.023611198978002124,0.7251382047648077,0.9665411331991529,0.3017462910366774,0.3110759237861628,0.6706707178217347,0.7160574669265991,0.3575135871702414,0.25757036460778787,0.07009147192487114,0.7679476661394957,0.010989561141361182,0.9168195424081558,0.9943344249481514,0.5603523493113194,0.8121286937671279,0.46920243773428766,0.16524601646924908,0.13869614283547238,0.5061933440441962,7.478427420198885e-5,0.1236092514708721,0.9985314769593214,0.44692806568870963,0.00461870770353473,0.7984328639050378,0.5774821578074187,0.22589460707585507,0.9261209175217097,0.7488121829381373,0.6354474328200326,0.9770725857327993,0.336235024920633,0.9519644154373601,0.7003336560325126,0.9559848352366533,0.3271993669605968,0.28598997290412975,0.6446587919940315,0.7404436704292585,0.9310620909556384,0.23396982692506224,0.08472863123967728,0.7906793876507431,0.006011098479286714,0.43739697200676436,0.9977048222082072,0.11736241077345522,0.5381072035465376,0.4965978682663017,0.14539534924579545,0.15818039484917823,0.8748939974980745,0.0012999625476227683,0.5508163189226698,0.10927423091012572,0.4197614387419915,0.009078971903416944,0.7759992935366697,0.07506990339709818,0.24922323302987498,0.366737043206,0.02225344448833666,0.046848823495668934,0.9681532659721119,0.31059137697196115,0.9630042283947085,0.674926993187041,0.026612650315134934,0.9463605982948091,0.9821026138663325,0.6182120860001813,0.7641072069060344,0.9165302045744897,0.21116885794642493,0.993633215137802,0.564852418727621,0.8808348383055025,0.46467660151169066,0.9995793395268573,0.1355756578000193,0.853002151373025,0.8434712343541648,0.5189489814380619,0.4464075965259145,0.8924613751553072,0.004024011938051242,0.5779992474010696,0.9913461957608813,0.2221124840523242,0.9237305334924422,0.7527361917098523,0.061267833625606005,0.2733055827147939,0.34052729253884356,0.6998539440875129,0.6873078152304029,0.03785666578443747,0.2855170073329907,0.054904157032801215,0.6489945773879252,0.018503690108848725,0.37958554335431516,0.2378211928055573,0.08221952898994517,0.7869769542621049,0.43791634247755706,0.1892359872713852,0.9972502482601022,0.5375852497984155,0.0005188084173854968,0.8659733546411659,0.14860761040845383,0.4782619891552408,0.8718773880277297,0.823042314155632,0.546301998202292,0.20016932443714014,0.4242416711536183,0.9059159760923403,0.0747942709920244,0.9855318837000255,0.24530958315440943,0.9376398824664081,0.7287134769904599,0.6573216302514819,0.9697268732129296,0.3147968460971001,0.6744365221233728,0.7124321624480432,0.02809216167157841,0.2610872784372619,0.9808800999736648,0.06553052450033103,0.011841894245136986,0.40636119421346617,0.2148831375770049,0.09790150626105171,0.8089841761806645,0.8837581557523885,0.46015367214208974,0.9993727676886609,0.8533726729583755,2.1488405410663436e-5,0.8467532599716723,0.12964240835011104,0.17523001273409777,0.455956614255232,0.8016424720443341,0.09246051649806858,0.9921661967910571,0.39727069631896206,0.9213052795915453,0.6315808157030367,0.0634614051147882,0.2692721686830421,0.031236967655334957,0.7040033510038002,0.6830946823452464,0.9596312592968292,0.28962303819018,0.971153511976125,0.7369180328084461,0.019746003208688467,0.23737561521416767,0.987662431654048,0.0797448069659506,0.00664728512756424,0.9034423018584392,0.19280201717492818,0.11479201325583038,0.8300627287138046,0.0007459299243720574,0.48752757990931284,0.9999943940715073,0.4827943107065521,0.0010268820366551301,0.8264909788031465,0.9961938399516799,0.1965519372391446,0.42872813791229575,0.7793360264538793,0.6005087491488759,0.9865951270955826,0.3706084802061707,0.021085150370231398,0.6578184130980893,0.05075710449082088,0.9712618254254333,0.9614746743215343,0.6786800814285527,0.7083174330344892,0.34934115016660316,0.2650815301189514,0.9796180132250667,0.6270065237004594,0.012843275246215757,0.21445328440618272,0.9929790663647857,0.5688287169789653,0.00293547544709849,0.8866498927570592,0.455634021828935,0.13284028460194353,0.850149259081883,9.959526814373731e-9,0.5149389742392574,0.9991132590754535,0.45543521780459384,0.8867764131842358,0.8052474105655607,0.9920736299501802,0.21878589202818272,0.40171387317456486,0.756190020665815,0.6271995618809812,0.065690900483799,0.34433515761100464,0.029678211759893103,0.6835816783428313,0.03940302875161489,0.3192036311556502,0.971328480390165,0.05084476294435125,0.6576290089448746,0.9353301833254348,0.24124608277142995,0.9866409954581046,0.7836821084627585,0.007404724322749745,0.42892570028238464,0.1963933271878312,0.11191615587363057,0.0007176212572870821,0.8686953855744194,0.15147327003317157,0.1519920752009331,0.48732804815813374,0.865752611619778,0.542305468638736,0.9967320110014751,0.4282100668714586,0.9035601722089284,0.7830864040025733,0.079636700870516,0.98761832733098,0.37499501293981685,0.7322740213072603,0.6535080691487168,0.05276678018185965,0.31852969448780166,0.9597097922001777,0.6829089366918719,0.02943330321280635,0.3450224362702501,0.9797656821018179,0.06355875875703271,0.7568106784031234,0.9211977595259067,0.3974660411618642,0.22238177824184774,0.805819761687192,0.0034466963101277837,0.4561554367534201,0.9991557803563316,0.1297765295102939,0.8468970305254224,1.96777943314852e-5,0.1323498591762684,0.17218982326492677,0.45995471527877174,0.003014229843390781,0.5695448115638373,0.09778290653171023,0.21504712397306036,0.01300661270288267,0.7600745652705236,0.06543177577509607,0.9808253940468784,0.3486518622509185,0.028158159849847875,0.7122514608767145,0.9611958743453017,0.29326965061284316,0.9697952320995424,0.6571321602868005,0.020877892447349722,0.9375433201472309,0.24513784385173143,0.5998003531452034,0.7799354238958408,0.9057994020811218,0.4244389676612076,0.9962823670060922,0.5461032573155832,0.8231946323383222,0.15109813350795454,0.9999972951745275,0.14874963068872793,0.8661093218065852,0.829519260666935,0.5377842769422041,0.9972293047009528,0.4327017407634227,0.0067653102840691814,0.5965751336315845,0.08210990530948875,0.37448824931923125,0.9334421225887202,0.01855752482661127,0.05253297001142426,0.29027919096343036,0.32276359693448553,0.037932887769393964,0.7046632671707751,0.030985897801255657,0.34071647587482623,0.9784686759062274,0.757259671244008,0.013762510225302005,0.9236245432962217,0.22194657645855292,0.09287984158557389,0.577802089914663,0.889181391623705,0.1746805975095807,0.9988717786345445,0.5187495284613416,0.8436162549232173,0.5109280050514443,0.1354390292679098,0.16877843468220188,0.0030718930011987555,0.8084153889972145,0.5650503223656363,0.9936014251678804,0.4056510349655776,0.9166405836722784,0.763937707672681,0.06769289635912479,0.3481530466556937,0.9464505020549474,0.0266769370141669,0.04097905166843396,0.9629288438952792,0.31077611141102224,0.04909638448105741,0.7293562080894415,0.022194599394240233,0.3669294288826086,0.9857040550952068,0.6042406917300398,0.7761657027254116,0.9084325389643284,0.9963458089284258,0.10939880243165107,0.5506177535233923,0.001285618858023918,0.4789843782814216,0.15803475374137643,0.4913394468407923,0.0005522604834077294,0.5383062148321915,0.11723396140076225,0.9976856801265399,0.9011783812367333,0.006041994363996495,0.5921208553727391,0.2384371427275246,0.37888390030867736,0.9311631907323936,0.7402686500186448,0.05457521081494049,0.2861703776436312,0.9581170493325863,0.0362189483892969,0.03080474669998917,0.9518790161196239,0.3364236233288489,0.06161509746522853,0.6352552902381263,0.014839372093569225,0.3935423330044725,0.9914796233258498,0.5772849678731209,0.7985929832887281,0.8920129675782453,0.17813834836271708,0.12709173722867206,0.5232812826162477,0.852489712764774,0.5063929230912756,0.1385582000162084,0.46395539500170024,0.881302951606274,0.5655692931216575,0.10017931847193773,0.21175936826287983,0.9169297473477542,0.011031217024871587,0.7677791299643973,0.9819103879327764,0.35248078692708995,0.9443899124811559,0.675604166648038,0.04279627462140667,0.31126073724227954,0.30156307246690545,0.047154879898112734,0.022040634554069793,0.9394710404498886,0.24859796539352563,0.07545140102328124,0.608672452081183,0.7723732551714879,0.42047520165463026,0.9957780218017758,0.10658332739129844,0.8201228257835034,0.8744151790867513,0.15765305576282462,0.9998851676236367,0.4958748384998397,0.8325263232755236,0.5337822536098619,0.12016798002633056,0.43667967725785295,0.8984547562099268,0.005359327514229961,0.08432635917359016,0.23458231622768977,0.9314280075650734,0.01749006296803851,0.6453507682387399,0.97388236830318,0.28207916091150453,0.33127480792251685,0.7009959221014285,0.0323914900362407,0.9538019075898374,0.9772885277967873,0.05945186298106925,0.7494390910806663,0.015956159073381437,0.2252901778462611,0.09056370936373387,0.5817629927343339,0.004521174379575221,0.44764708657584085,0.18162258603610326,0.9981806416287515,0.8406905210526379,0.8556920646366521,0.138196706231263,0.9997211786791516,0.4684807927892091,0.0021497032555152784,0.8155044212842855,0.10291936661615464,0.40959427231879836,0.9144089825487606,0.010103837113545622,0.06972273046988009,0.9830995593352403,0.35682066693262404,0.025399119767376632,0.6713501625893888,0.964430068462302,0.307068347185736,0.9668006997471942,0.6652238177026033,0.7212580558839521,0.024945861190218577,0.9847358380224865,0.07307293836127632,0.7728120759719991,0.9107337868180223,0.4160004950069118,0.9951694358310247,0.10380022761726809,0.0015892158920023935,0.4749763211339665,0.16097291124199276,0.1427177196050058,0.8602342517268373,0.00020823441860151615,0.5292555123592982,0.1866659410419626,0.44118147983528855,0.005436034574248072,0.7937731221516472,0.08686420146706686,0.23074933162932232,0.38770474060077564,0.743779579942922,0.0564123243913342,0.975309628081136,0.3307821491816777,0.03473461630616442,0.6950219155394146,0.0340167140752653,0.27624223743117166,0.975917408378126,0.639113625034631,0.7454978492029745,0.9281031302442923,0.22909128283984664,0.9897312600800324,0.004451211279095979,0.894490880294063,0.44313845669001534,0.998224982844345,0.5272884606632848,0.837356681575486,0.858865145696887,0.14134220150314575,0.16242366374072525,0.8786952780202056,0.0017500443178330438,0.10260147669800751,0.9948923871904782,0.20439475164657567,0.010208805812007782,0.7711588713152238,0.6100841600869604,0.2542428634261522,0.36117232953244727,0.9401591959595785,0.667082057686687,0.3075513697793163,0.3052522252346729,0.965156285313237,0.721727348750452,0.02478284518301449,0.9437249579886553,0.9836037203699415,0.7732505977643761,0.009713565908683108,0.9133034022792617,0.9952417511787572,0.1041197537793297,0.5591141266965816,0.8131020224710297,0.47044731895169356,0.14308410880522882,0.4998871142206208,0.857073966511549,0.5297780548834042,0.12278945802594726,0.9984344112250905,0.8960181142759888,0.004789372587902241,0.08656958016822841,0.9902420978517218,0.22693850435854895,0.01645367213538934,0.7477296371826069,0.9751469082534729,0.2784750321713385,0.3350571728653182,0.9524963956995995,0.6926569885839781,0.035680285073211304,0.2803076267193413,0.9745071244961453,0.7459537290837812,0.016977268278268842,0.9304288210273122,0.9898365340780131,0.08542453130658773,0.590698489043625,0.8972614676053605,0.9982687779942192,0.12145218086066839,0.5318162934387342,0.8585004559647229,0.49784500346467886,0.1445172116445126,0.9999418275017057,0.8757180454824114,0.5570858443700638,0.10537044212832553,0.4135433313111044,0.9121506957318476,0.009317084356106065,0.7749585022062001,0.6056552126328117,0.9427800393066788,0.36553541661709077,0.723555837639695,0.9659013862489885,0.04847307663437128,0.04568684552096658,0.6690053849021239,0.7176528780255007,0.026212667976765747,0.9457972306307187,0.982431805727763,0.7694408815988667,0.010623443463084636,0.9158390059442241,0.9945971164288637,0.21428893010909073,0.0019249078803124653,0.16020416296086282,0.46592074873528805,0.13992235478360093,0.5044228345147465,0.85388429676437,0.5252491649414128,0.12578218074921976,0.4451677944629975,0.8932328826561627,0.004183462753318989,0.08913750764596312,0.38668482178289554,0.2231501480181129,0.01531957132911027,0.05827800261087901,0.6322788678258685,0.9548431672927559,0.3393457701169548,0.6987101284057626,0.6884635685778955,0.03738206613055761,0.05781258706329789,0.6429630016673384,0.7419945994543786,0.018169045454697108,0.23247231101769722,0.37588919892790384,0.7921182143328416,0.44417869963465206,0.8999993632523011,0.997871159223476,0.19223134195268654,0.0002713334751058838,0.8616474265018963,0.4933094184978933,0.159474762397656,0.4770160825119306,0.8727098941436832,0.5525774386274569,0.20523975076631662,0.9961041943941122,0.9095658362008652,0.008465742454960956,0.07413944357988783,0.36016688742010255,0.2463836024064291,0.022778792693442962,0.7276037377666897,0.6585049514137825,0.965539238461059,0.0438113779134382,0.6732671846625933,0.7135604960873689,0.027681479944393794,0.25999245367102075,0.6164909350599698,0.7656089924526294,0.01157359306860356,0.20972536557330085,0.4026193203369121,0.8139175692819094,0.0023430164988536006,0.8829574998918915,0.9996488221413924,0.13679023247428274,0.00011972178965641289,0.8421823600834843,0.5207181971809244,0.1288056988159647,0.44967840997069763,0.8904152908945606,0.5797476878534116,0.22781610479234665,0.9919447641391452,0.9246678165025524,0.01422535611755027,0.06042132745837614,0.3340692293715404,0.2703793151957964,0.03167232933817832,0.7028640915344875,0.6842546394217193,0.32460724055828516,0.055713611691847964,0.6473034766140056,0.738015555469151,0.3813047916719524,0.2363151685163366,0.5896687483707046,0.08042181635343876,0.0064461338229822585,0.18785085693032277,0.4296421248763393,0.8347734272540741,0.00044130164052486043,0.8647646361454346,0.48877438411620755,0.1561675572374407,0.0014705285014439684,0.8216888452637072,0.9953777418500975,0.11100556768451963,0.4224919818092368,0.19353101763481545,0.6066782509013138,0.2512105228817473,0.9863067661224868,0.9384934337068351,0.021444992897061033,0.048024389853896565,0.9691171840788781,0.9638653681676886,0.0419734512368401,0.6775147258223501,0.709450539708655,0.35053080936972014,0.06895117329280348,0.979968974501004,0.7617552456616429,0.40810106058053863,0.21343040300918042,0.562577057195902,0.8103742949361585,0.002802078586069956,0.8858579440666816,0.9994582970332809,0.8546231047907685,4.103865303639598e-5,0.8454754516920109,0.5161855244668888,0.17657828981861234,0.4541931665710164,0.8002284764583308,0.5752667539365455,0.09437458128033988,0.3955385083722154,0.9222561509986134,0.6332881864435399,0.0626008263614839,0.9792071456654732,0.2663596346476258,0.030102953767563112,0.03698589046229689,0.9589313868664354,0.9733957752376546,0.292610923258265,0.651631829580041,0.734016924573826,0.37690361627197766,0.08348427647757761,0.9869258443730552,0.784708215685731,0.007192415941945418,0.19140693860425861,0.9969530444934409,0.8313906597775675,0.0006523797716088686,0.867851828372167,0.9999828745985873,0.15288864693018844,0.0011434305493941421,0.8251479212644789,0.5435480183100201,0.1979610846087233,0.4269760587991593,0.7778657540173592,0.6022425832422313,0.07896272497197665,0.98734098513389,0.9362959148491488,0.6594975168165362,0.04998262042229551,0.3126679145061202,0.2909363718589445,0.040173216738869144,0.6817476588403459,0.9473662454614868,0.9815033645792683,0.2679896331968514,0.6252931953134524,0.757879958360608,0.4036463963050186,0.21715902299167883,0.5670745352337568,0.8068054790941829,0.003302056364565764,0.13751051924085428,0.9992266702217869,0.8514110112821335,0.5180263187550752,0.8487401132401586,0.9990047254074194,0.17313255700078534,0.003745164028517378,0.8038431404031428,0.5707796261255882,0.09704329646476983,0.39997842860519683,0.7546678903655912,0.6289111166918091,0.06481631996365156,0.980481833036467,0.949024366696227,0.028572247229236014,0.038716967123460455,0.2875441411990749,0.31614146160746825,0.051625515067095507,0.6559477043741853,0.934456519549443,0.372512570788918,0.2440656633911652,0.5985779852748382,0.7809679193737515,0.4306787725336719,0.19498841519214571,0.5398202343564527,0.10985100086967414,0.0009045504981974317,0.15020589652840982,0.9999998420086054,0.8703751771531469,0.4906158654122593,0.8285802400094504,0.5390277467893307,0.19435888562483672,0.007838419433552013,0.7816251418296571,0.5977985017789246,0.08142643796973464,0.3732814188908462,0.9340624920823961,0.6551922005024062,0.2960205480535056,0.9721785656639292,0.9604032504592285,0.038410822565436264,0.02883772602197837,0.9493734998854884,0.34189914857298764,0.06442542822306957,0.629679040278396,0.9202410100403593,0.3991996612145024,0.09657316151061679,0.9916121414855763,0.8032114154429852,0.99950592164568,0.17373453693038587,0.5124462515167123,0.1275742210045004,7.104182074613163e-6,0.8519760760705613,0.9992702360424411,0.888226159519448,0.0032114724547604445,0.8074328003171761,0.5662866736777876,0.9228158836272196,0.40442657986964525,0.7585607029930664,0.6245234385138845,0.06706762594623217,0.34696526902600155,0.9470106478857903,0.6810068453929138,0.040486003947675264,0.9624561389551314,0.9703983662606008,0.7349415771274,0.020374589734718895,0.9366836628213537,0.3681320165731604,0.24797266295926657,0.603020618505933,0.9047624424506118,0.42618971274905726,0.11336670486401984,0.9958713509698842,0.8245435924851015,0.48528669804200225,0.15346126793741693,0.4850348607653769,0.14641678784364442,0.0006124147417663206,0.831985519044315,0.9970400451952158,0.19078183863161519,0.0070586860925652695,0.7853613539872241,0.5933463722262472,0.9368063218332112,0.37767426593278897,0.7347191453664125,0.6508741130243368,0.054010016614435385,0.32110907368477737,0.9586152879506784,0.7062774639907302,0.030375219078394466,0.9513437742124329,0.3376026566410386,0.7587763157145049,0.01335299469558543,0.922681348355341,0.9925997633393959,0.22468578133033512,0.5760525624484524,0.7995923997472749,0.45340160526895407,0.1313222964135956,0.998640191114103,0.8449003354376778,0.5126981201186369,0.1342295406677383,0.9994946604501014,0.8853518862197287,0.0027186628822122305,0.8109971607981161,0.39895289881183466,0.21277932696173218,0.012387462678650873,0.9148134713710137,0.620125512983049,0.9494839139787397,0.3512896088956529,0.7101721260971332,0.6767713268703954,0.042292855356367065,0.9641615016832702,0.6549526759865769,0.7309281040249902,0.021675918001155037,0.9388748702754239,0.36376231411173876,0.7818332874753394,0.6074547739062874,0.9074086412340876,0.996556371301505,0.2022263721286639,0.5488559261209346,0.8702058762328466,0.48075355189495855,0.15674515690686985,0.9999103400128624,0.8642204609605171,0.5400713772783742,0.11609715716339897,0.9975123983487972,0.9022326429719663,0.44046286726566386,0.7890740830275855,0.37226896619537075,0.2356400732399011,0.01918178627414807,0.7387143671008805,0.6465436097288139,0.28777224049588956,0.32535190933452574,0.9567895848146445,0.7021372445138014,0.03195135876168853,0.9532769063033959,0.6286676698467286,0.06004305839518065,0.014414246956469534,0.9250869031388274,0.3903314416387659,0.80404319337958,0.5805323728004227,0.8909114444410775,0.4488875476141913,0.18066193837656958,0.9982853870807822,0.8512317393155105,0.508163344807314,0.13733703060857638,0.46218962125669866,0.1629578742469583,0.5673241976514448,0.8145359285256033,0.9940348346468602,0.9179044668074383,0.41334611064664056,0.7662821767806447,0.9814354091034219,0.25929536820256416,0.35562618652453537,0.7142790266970628,0.6725212613823212,0.3129015347792202,0.05009248116789922,0.967246119320323,0.7268956272570277,0.6688169133908692,0.9410299615915756,0.6019959457611365,0.07372342526827214,0.00861203130662519,0.9100213133162813,0.41723018420935953,0.10767855147224609,0.0011264645425427822,0.8732393412326325,0.4762219895874584,0.16005729319712858,0.9998038779724499,0.8312019555766387,0.00024577908957024164,0.11901890833916967,0.43492372350241515,0.18370437598058187,0.5943746713476413,0.08334494512365792,0.9890724213583246,0.23180105148768926,0.38648979718417215,0.742689944418251,0.9733146262430117,0.2836741145252356,0.32960911722328073,0.6891996585812411,0.033352116670461895,0.33859316406254114,0.0627229475963943,0.9762983192356919,0.7509720623829884,0.015515459313535651,0.92745747643155,0.9909638069645397,0.08868499045244932,0.0042867099383255836,0.8937233812885355,0.4443776961341374,0.12525542882224733,3.7874159517614636e-5,0.8382761309985569,0.5036278977134239,0.1671024752233048,0.9998201800921088,0.810176725662053,0.001855848591371112,0.10184584624929222,0.9947130414695304,0.20540152206887713,0.6211414966411173,0.06882355521058969,0.9826400732964856,0.25532973588100005,0.025959248976574256,0.9407494555213902,0.9637712695521339,0.9692042987154671,0.3041041673397429,0.6635516402101601,0.043893384406365366,0.36476991070360304,0.25099200984395853,0.9839189776628572,0.7742941868066612,0.009470455483752416,0.9126002436937112,0.9954118581993998,0.8218816831356386,0.5578755362987559,0.8762420914104098,0.4716923840333785,0.14395862213737903,0.00045194817140264965,0.8579458566934706,0.5310229019879963,0.12197201142543385,0.9983342444428179,0.7882192420872554,0.5899166005558293,0.08586945894657189,0.9899953850315819,0.2279841005143487,0.01677248267187409,0.055598090444690995,0.9747571232465854,0.2795937905661442,0.03538595398425093,0.9530255607206959,0.9528340221280998,0.33430692030535936,0.27918799344069584,0.6374120581510101,0.7470387950263155,0.39135309901255055,0.2276047933992557,0.9900851902826869,0.08612301068667616,0.004899765893186692,0.8965029176298278,0.9983709211256333,0.8423660221538919,0.5305715684687341,0.8576299846855509,0.4990921520705327,0.16373191791423125,0.0023674420553783104,0.8765397559080188,0.5583246651792251,0.104605842297675,0.9953505370880606,0.9128554910990556,0.6167359351789433,0.07113776436500469,0.9838050198009034,0.9433579957121649,0.024536271825611744,0.04370830070696813,0.6639788896729582,0.30452028855692187,0.04620908273732499,0.963940072021394,0.9405357564855115,0.3604088000065305,0.25493548249345244,0.9827579961025932,0.7704906223410779,0.41826283171614936,0.2050362761262453,0.5523268805372115,0.1021195359737479,0.0018171280074442686,0.8105312631735688,0.9998321021125596,0.8618213607640586,0.5031757160637412,0.8379430008514792,0.5264946486958921,0.184515886396032,0.44392833354286626,0.791913700199488,0.5854511302964998,0.08842805263313247,0.990878025728739,0.9276918844768096,0.6432044133584717,0.7505808588034242,0.9761605512696769,0.955359690233481,0.03372909405700064,0.033189921431723945,0.9547384764448188,0.33003431185637977,0.2832665242063681,0.6417674699917525,0.9269134357560649,0.3869302289399968,0.23141952678885647,0.9891662432344295,0.7931294748196649,0.005553564915262321,0.183354288977712,0.5249975349328734,0.11931191345805853,0.00023180686872309453,0.8607850929704148,0.9997910094982307,0.16038903296749307,0.47577031886483157,0.81724031024955,0.5538175141588229,0.20624806019213637,0.41678426482050834,0.7692286108669146,0.00869579786686997,0.07348726569197095,0.3589699337318913,0.9412428257501366,0.6692424825889501,0.7264925824887523,0.9670849553196467,0.30035362313079184,0.0443233198198375,0.02407456620169235,0.9426629468660812,0.35605917662708003,0.2588991221301964,0.6152777395143295,0.7666647985089103,0.4137914954538135,0.2087108048593871,0.9941042736060169,0.8148873101128604,0.0022239699111433753,0.16262399839010183,0.9996940022957297,0.13764847047847184,0.5077112096718541,0.8412719463133725,0.9982477667888187,0.1810100197679923,0.00511134549059733,0.8911932265922183,0.5809786280446454,0.09102051563010738,0.38989030568823235,0.7457343397448992,0.014522239920834956,0.0598283868528342,0.9775247948205974,0.9534675868000126,0.03211060475766031,0.03483411455621721,0.9566055091668093,0.32577569031950226,0.7479484558367899,0.6461112154240369,0.9292569688097047,0.019057934348874872,0.2352563623539739,0.5884415352827141,0.7894429226971267,0.4409118664950026,0.18687756905083935,0.9975572456882938,0.11638702583621913,0.5001390624808686,0.1429077104221183,0.9999015724365836,0.15707409547766038,0.48030170282790025,0.8207330875549492,0.5493059343572453,0.2025897489628718,0.009763049105340704,0.9076706184404862,0.6078963560921772,0.2522931010564161,0.363327287458527,0.9390913447850651,0.02180781279068983,0.04749246864719453,0.9686842091611376,0.9643294254169448,0.04247505570426874,0.025484624389132904,0.7105823432701719,0.35172139850690753,0.7713705171283953,0.6196865161346181,0.9145608346995808,0.4093272535102705,0.21240930452697587,0.9933894619099273,0.8113511098404828,0.4682098302573012,0.16598544038604585,0.9995147813787271,0.13453799369164626,0.5275400299397415,0.8445728076321182,0.9986066601792014,0.8946456314044513,0.4529514003281777,0.7992302473946782,0.5764994618539399,0.22506336145773825,0.394319201905751,0.9229227332297135,0.6344897955501129,0.2764675771547702,0.3371750467823145,0.9515381663565816,0.6905864395442793,0.7058654630779909,0.958434966651163,0.6407632122818354,0.054214623700835074,0.017561316972530383,0.7351183192753025,0.378112766402268,0.08417552945463952,0.5929020922639743,0.8986187145964578,0.4364103654104033,0.19042661677134737,0.9970889724951764,0.8600594829888621,0.000590245015572255,0.14609721133718773,0.9999709971932851,0.15378737823943545,0.5548582242838397,0.8241994709125293,0.9958131574554776,0.1989559123854323,0.42574250505092903,0.7768280538326184,0.9846739979338737,0.2483633115414755,0.3676958883329721,0.9369037298678329,0.020502555438617565,0.04944048824567371,0.3115121856953896,0.9626278644772241,0.7156325225221736,0.6805852502317759,0.9468078719676654,0.9818379463345955,0.06729402481298047,0.011088006254165783,0.758947633898089,0.4048704732594319,0.21613147076999478,0.5658384459101813,0.8077892876872783,0.4636845995472906,0.1693743692961852,0.9992944541101003,0.8405060695995383,9.719164095922661e-6,0.1272726570994746,0.998924521949581,0.17407732436759144,0.0038990676248389367,0.8028517343802146,0.9915294602955577,0.22128622612883342,0.3987567948670064,0.9204858536761509,0.9772133956510309,0.27241956989869265,0.34147022223712575,0.7007652018677786,0.02898926763266213,0.038237201429025924,0.9602266983471348,0.9723271084332142,0.7400305097799489,0.6547622782209279,0.9338378710001314,0.9884320057872409,0.0816739481622561,0.5973550040939524,0.9013403697177342,0.4319140972798156,0.19400114007900282,0.00035019762643417884,0.8289209457193294,0.4910679816704487,0.8700712519146936,0.9999992780551936,0.8199292459945351,0.0009319423289579354,0.10956835593342074,0.9963785008880397,0.1953468494975435,0.4302309758579582,0.07531836662380109,0.9857684435930946,0.24445422985457704,0.37207537685186387,0.9346801610228784,0.9683185015661571,0.05142558554116655,0.3157210263382504,0.6753682458758853,0.03889162917406297,0.02842176877261121,0.261961424320552,0.9806067465992652,0.06503915864024773,0.6284741594456789,0.9195639458186988,0.9935580552717366,0.09731117407720746,0.570331958782123,0.884394936764564,0.003690124442104925,0.17279050623687403,7.56924633231737e-5,0.8490640132795686,0.5184782094789593,0.13031130339695723,0.999201325942298,0.8890108780302539,0.003354142716371744,0.09303751911568892,0.9923405862186987,0.2175320268707283,0.40320271939110014,0.06149398861316541,0.6257309086126264,0.26839029081950033,0.030891873713247142,0.9475680126054922,0.9580160497855916,0.039995815128600454,0.2905256912983083,0.9708196521263358,0.05017987795616308,0.020023691113415287,0.2382224516433729,0.9874418940554364,0.07920679199285485,0.006809895413235623,0.7782415756085755,0.9972006881569626,0.8331049919447981,0.5430975267975361,0.8662941831276745,0.001113070615317402,0.15256331900108133,0.48378831257166044,0.8681579492412537,0.0006756759784121158,0.11241789122278312,0.9969029960615376,0.9056407236365952,0.60448709052202,0.7843363751127617,0.9868229141220599,0.08323428256717119,0.3764653926158674,0.048987565175903414,0.6520626644158344,0.2930224678410468,0.31994503177016387,0.9591106732584683,0.7074128952297619,0.3483931145824223,0.2659599431191816,0.9793359965029544,0.06282008650996213,0.6328523029787602,0.21527026616660644,0.3959807642311228,0.09463914308828975,0.003044070725744641,0.8005899522686546,0.9993489563041351,0.1321659017059459,0.5157335627630594,0.8458022008177635,3.544961979123906e-5,0.13338037232480143,0.45642590452091414,0.8861453657018905,0.002850088068411749,0.09568937895774637,0.5630256682292963,0.921051393147328,0.6311262608329198,0.7613698622774063,0.9798420682731135,0.2643800714968959,0.3500993560773567,0.7090398492401986,0.677937387296341,0.31827672752055225,0.29465278539880285,0.9692734508635656,0.732033554445203,0.37473214637302876,0.9382759696071845,0.9864116694808487,0.7828625625447441,0.6062364271932479,0.19317385197948406,0.42293873945730687,0.11128982912409147,0.5476145885988807,0.8220348888571832,0.9999964029720557,0.15127864556809778,0.4883223106174495,0.8650737635531465,0.5413143945118801,0.834437415723442,0.42919446087413493,0.7797266291012417,0.006518712285652928,0.08017604508987902,0.5901135726555262,0.9351965689252182,0.019525410050560577,0.7376177875651655,0.9714190299981671,0.28890213430691697,0.3241838543868967,0.6838341954378642,0.9483629000914346,0.03151413948777193,0.2699777216739403,0.9780258006189455,0.7559568237131493,0.40144767776979173,0.9244289518093293,0.9920254047254218,0.09200047028323377,0.5793012518281576,0.17199962110231293,0.9990970226732236,0.1291088055233537,0.5202663850066993,0.8425119314065563,0.5094103066664409,0.17143949114829238,0.4609461564265507,0.8832480764816866,0.568559784427946,0.8135654788574398,0.40217582727257273,0.9185878795311742,0.011670522372936198,0.06592451581993652,0.9810972267035564,0.9480337368458899,0.027830045073512943,0.7131515391775264,0.673691286820951,0.31405866366994994,0.2987967780478952,0.6580760175826585,0.9355617179348356,0.02264405592645019,0.24599400289264844,0.9853414168432985,0.7791108002972118,0.42845941373485485,0.9093062888353904,0.9961603298384688,0.10845294221187768,0.5521277320736926,0.8724083125984652,0.9999930346732648,0.14804251634652627,0.49285726965022797,0.8302666241257922,0.5367924891706652,0.19258784388694433,0.9978292723481922,0.9002705156798343,0.5955991140413252,0.7917511032421825,0.3754512097448719,0.9329454690929433,0.018290034274195233,0.741598798979417,0.972911165785902,0.9595243140764266,0.0375538135526679,0.02959276123455795,0.6991249951869599,0.3397740502167656,0.9546551877217857,0.6318427333323208,0.921451430445055,0.015208692604490925,0.22277371347574143,0.9911983120390542,0.8014258936135938,0.004125292715932094,0.1754364949751157,0.9988040170691227,0.12608223092775517,0.524797539477574,0.8535647035094699,0.999386289380154,0.13960876534260963,0.46546962217307053,0.8091975903779662,0.5640640897715424,0.21466014121595317,0.40662791142892196,0.9160899192455663,0.010716362096966692,0.06819345308806318,0.34910093063776826,0.9460018166051273,0.026357352672701895,0.7172456883283844,0.9633037436609615,0.30985590140848496,0.04866749015289945,0.021012817240957937,0.7239602221381993,0.365971004901318,0.24991129304592208,0.605213188303683,0.7753360693065574,0.009230396926126816,0.2003866433139787,0.9955788829770469,0.8228350343895197,0.0013578803197926148,0.15508071311996868,0.47293762523307437,0.14483535060835728,0.0005065168289248301,0.8336584357433448,0.9972786104011238,0.12115691675513873,0.4381857576959075,0.8975358916072185,0.5911431421338302,0.23759004359959035,0.3798490771741053,0.9306587410683707,0.01709429964553988,0.055027917571369156,0.9743643845017254,0.9577176804781733,0.7042333485508354,0.6922396334963299,0.9523038359783249,0.33548411908279685,0.061137672091755524,0.6362124994534797,0.7481223239979782,0.3925707912973362,0.2265598124679868,0.5782674190977174,0.7977946557389863,0.45117012538620443,0.8957419007808842,0.9984699636040144,0.8432738762437197,8.916496552680009e-5,0.13576160565418888,0.5003393063246323,0.16465593769376413,0.46999592951288366,0.8127493387116824,0.9936763324843358,0.21094727577234101,0.41108767941375385,0.9135577178540585,0.980811032086961,0.0704979248236624,0.3534313633010427,0.25246706417567855,0.02492363753929311,0.043199770769611234,0.964990245655118,0.968057848021784,0.04673414324879216,0.666655791592785,0.7198957441138372,0.9855919924287531,0.07492687953340649,0.6096430189340453,0.7715386802050691,0.010118096000988508,0.20403017181092786,0.9949566536591681,0.8193582035213951,0.47851370194290554,0.8783998588531007,0.9998628646139145,0.8626809890831126,0.00032295984875801986,0.8370227897530479,0.5277399676118759,0.185484420290506,0.44268922147692236,0.790900255886049,0.5866796698235677,0.2337399792706248,0.9906393589266147,0.9283365730322102,0.9725702134972443,0.05711482811215263,0.32745416974020936,0.9558733801188557,0.03418084426117618,0.6964187952952299,0.9542185523738587,0.9769912412786459,0.058982371831914016,0.6405710562989437,0.7441742846004276,0.9913928055040706,0.23036841355409576,0.5827440001312346,0.8923052197958272,0.005369738550412451,0.18239008518166605,0.9980948897680145,0.8399619021935391,0.00019538960860859822,0.8599205147867166,0.9997533995641246,0.8809980437344183,0.0020585622857657304,0.8162753501007345,0.9943751088176633,0.10662731265420106,0.41555476422133053,0.06766659447612466,0.6135356958889276,0.25733294229309844,0.984624760789338,0.9418280384580855,0.6704154923717234,0.045062847788130744,0.3019955724134122,0.9664434133253608,0.044838096753764656,0.6709252830374997,0.24900529772982904,0.35725398088005467,0.07255610379444061,0.6140638267593628,0.7677189454896287,0.9957167097605358,0.20769805642361416,0.5555962895646616,0.8158550918481826,0.0021080202753057664,0.16170459308227114,0.4963459262783025,0.8595438261758634,0.0001805225729055726,0.8403594092935874,0.5232100963495023,0.8981699872557802,0.005290755825440863,0.7945773270281568,0.9895336116370355,0.09030432970630492,0.38867411188928386,0.7446474352701467,0.6400504840105596,0.2816552548574415,0.9771535955736936,0.9539915647706771,0.6959199163704388,0.03437820675886316,0.9560958899605478,0.9756115245197411,0.056863364043029774,0.644918045191899,0.22568392742276494,0.38372926659707074,0.08741454251864433,0.5872137719489068,0.7904589619739083,0.998550709459797,0.18590622928665335,0.5282814812110762,0.8366219518070991,0.0003427444540867741,0.8630541224078783,0.46895097178678063,0.8780451208903288,0.001667891194253035,0.10320583487442792,0.5505468558011577,0.9141452084014918,0.4200287982437939,0.7719939351686356,0.9832207935496847,0.07521271022511994,0.3621280557989315,0.7203827129434729,0.666144342495854,0.046963362750917004,0.30616862555445745,0.9647905938049528,0.7208354919997128,0.36261311079303493,0.9441824755644384,0.9833501584262103,0.26178534825299715,0.6184752479800287,0.2031870295585293,0.4105540105674715,0.1035130301280966,0.5601015912231466,0.8123259876499201,0.4694545592990756,0.14238830961496957,0.5008816712690609,0.8563770754856417,7.921672289601389e-5,0.8436680197859896,0.4416493369024473,0.17848452373679857,0.004653025102289043,0.08712974336149937,0.577731693824046,0.9288756927425076,0.016201589160705687,0.7485930501813653,0.6356905679180744,0.06139781292500429,0.33599638162052836,0.6954556179311939,0.691738844779987,0.03605016788272025,0.2812014707314034,0.32269696280006654,0.7450873340903661,0.3891660489387441,0.9309340456614008,0.9896360561436727,0.08486936951564061,0.591676366721755,0.8978646105850987,0.4376475895088449,0.12080318170943627,0.5328087717718896,0.8332542999374775,0.49685046011492373,0.16207629200308604,0.9999560091799535,0.8750610877443057,0.5560976779610443,0.823249003528626,0.4145230782302794,0.19995261313109625,0.009126952308525282,0.7757886313408402,0.6046829048527513,0.24944179364476943,0.023847435830727848,0.7244450047472879,0.6618595201762101,0.3024589704141238,0.9698196208126313,0.669941070024645,0.9415916172844881,0.026531400427550422,0.2568919272404836,0.34858394363520073,0.06792027088033553,0.010828337812487931,0.9163904191554578,0.9944503250516639,0.10076593406844064,0.5646019469676484,0.8806711153929289,0.9997689894453041,0.16843982753798226,0.5054173437048309,0.8531809976124779,1.9050635447381836e-5,0.1827799231732965,0.9988412143944397,0.8926178327294292,0.004056057751283815,0.8018584441419181,0.38765372527214725,0.9265263945404196,0.01507622617216492,0.7525182077333367,0.6313194855009782,0.06359353473927487,0.03292438591387259,0.6996223771802494,0.6875419945085686,0.32792780830147344,0.9597378138324184,0.6439157546380001,0.7411238099063431,0.018435669578382496,0.9332165232951237,0.3749260139760342,0.08235835867620589,0.005891719054070876,0.9005953077371431,0.43314984562764197,0.1178624191454245,0.9967238715553782,0.8623334916724029,0.9998507939871366,0.14842795691969057,0.47800963350542774,0.8720461898600843,0.0010096048652157297,0.10879047127026337,0.9962271241766487,0.9089945426527819,0.008284473890636357,0.779560632159721,0.985471496374396,0.9401840291282959,0.3708701307057677,0.728488826396406,0.9678801650190116,0.0508760778483065,0.0434051581242198,0.9613703474987942,0.7126608007886227,0.028008745483495356,0.948274238897926,0.6174578923259303,0.7647658434478175,0.011787307511333445,0.9188842712476661,0.9937560714286988,0.21884481868740147,0.0024401706292507264,0.16428186715420695,0.4604054710988048,0.13610744029549982,0.9991090117017679,0.8429068541868756,0.5197244535252067,0.12947275592511193,0.4506680165940048,0.8897931762799495,0.003499902898398577,0.09231422631240149,0.3920780840975043,0.21856197526436955,0.01399076880383987,0.7564225849147854,0.9781845400471636,0.9525186657657431,0.3445925775026056,0.7037727089922513,0.6833297109257489,0.039508488260956875,0.0552582519091922,0.6482536021441276,0.7371404430259987,0.019675778701649216,0.9354633504308035,0.9877181364751018,0.7876121082992766,0.006606296253933608,0.9032930388745817,0.9973309267272583,0.19660857906875834,0.0004840663616777485,0.865444141285242,0.4877801001619158,0.15544616107756515,0.48254186524020476,0.8224495907920537,0.547074660164024,0.11163119548096406,0.9967628554076351,0.9063686173024705,0.0074824600036657585,0.07706330396353112,0.36548499265130374,0.2416331196075865,0.021157791899380052,0.7325138451143794,0.9694603730885909,0.9634932320059869,0.31878211008138946,0.6784441412070956,0.7085470360335065,0.029524931909495566,0.26485857905038335,0.6218618464284742,0.7609073462739375,0.012786453483940863,0.21424596752480207,0.9930211853531113,0.8095939387219081,0.5735863397689568,0.8864896865049811,0.9994110258483884,0.17528419949388985,2.9285433161274632e-5,0.8461937350669096,0.5151914568238728,0.1325334849340878,0.455183631556538],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],71:[function(require,module,exports){
module.exports={"expected":[0.0,0.7446628378809379,0.7934921593871429,0.01650781736404311,0.7339765832812138,0.7778363900957881,0.029381309051883464,0.6947691320191086,0.8996156195513405,0.008200705780025519,0.531622441356563,0.6299207802694466,0.23755354864170908,0.15065815289119222,0.9455358942493982,0.005243426384484218,0.6899096532646602,0.9027575725104124,0.11498023136465729,0.7625181972093387,0.849281534618058,0.0682773851271884,0.9947443907163654,0.3100123710616423,0.39811021567783356,0.049747753280021734,0.8200080117607649,0.01020878216717297,0.521108039784614,0.9795657314392261,0.2465732365580821,0.14320322047636563,0.9262718334497437,0.6502955185163032,0.000919663473248733,0.9089071811069883,0.12178272075873448,0.27431474201660766,0.39794516822388926,0.04982109003824725,0.8201375322765833,0.7950928852157999,0.03690896216758077,0.4292449099879798,0.997367323910073,0.3298126408239467,0.08507749538035281,0.8711906010061965,0.7351045547412259,0.9088101368592105,0.49988723183143635,0.2744651946109833,0.2650945174020303,0.48933144564179754,0.9147966144972921,0.6703994113914364,0.002655840565312595,0.07927989217457798,0.9631760351938015,0.9983382754103607,0.9264479665221372,0.04099252320505492,0.0008993356529556906,0.8119577801173681,0.0453280589993747,0.40830150467149995,0.9990939586708184,0.3499196027552103,0.0736103319991025,0.8566387415062655,0.6603296596994217,0.020498135298326503,0.13588776285599902,0.2557291685049878,0.9824457294669844,0.1147826338275329,0.012440115541644536,0.7256344419515592,0.8782545231057017,0.09112559267019099,0.31981880494867265,0.12888420811766071,0.43982332749886754,0.9404323653607916,0.7864124065839333,0.5708656100485319,0.05456651353449943,0.20481699451501795,0.41847840487589966,0.9502274812305751,0.06291155924765063,0.5532478981936064,0.04518787954905823,0.9317513378160104,0.4574844669224027,0.23743333931777283,0.07378652926795415,0.5317633982608101,0.7533305152732075,0.7064940308841101,0.4790035065196552,0.10370811979865763,0.977478949075965,0.5102198253413268,0.14828362478038648,0.025831320866759322,0.643413750744436,0.09093161224156132,0.9706379210012304,0.9962021891276893,0.16393298733294004,0.03311168351937033,0.6226286128220481,0.8256343238960411,0.9629216091355915,0.03424234463465342,0.16626002873968132,0.996577971227383,0.6016154124501325,0.841690429711465,0.640408702730592,0.728726559613093,0.15051799770956648,0.9935983717392484,0.2809137119306741,0.8571110659200258,0.48213506538052464,0.7093441415155053,0.7506236524615154,0.9897007870341961,0.30049534995528626,0.24010551762409266,0.9988730636756749,0.68957238901537,0.7690444614911085,0.0005194786669434626,0.8062993855351114,0.9515817296219977,0.9998557208076884,0.20229330160382047,0.7869649065558202,1.5123679903972231e-6,0.7889755777972653,0.6671320123132656,0.4367133787443867,0.21988991629509202,0.3227456950873805,0.9842865617349346,0.8761975679332179,0.6872941743523401,0.013144413884438488,0.11678812797338362,0.3027530479016426,0.9891982229017512,0.1337471247747481,0.4326827698827508,0.008686617231383975,0.8588282369753548,0.5779847153522246,0.3469331489063582,0.14876325621818814,0.411384062264896,0.9533120647338252,0.8434819256850113,0.5992059537530062,0.9962846969488206,0.9280757449820571,0.4646619261554133,0.11262963287327665,0.07759474695701929,0.6202426907368674,0.0339975009746637,0.9165383428808396,0.48619845784394466,0.9698017851501988,0.08952225739419128,0.6410558025654229,0.9069977328815276,0.0281644943481138,0.507760657387954,0.08683434901703535,0.968158432432014,0.3739012311927203,0.9191414472714912,0.8911624252881856,0.5293084238034045,0.07507765699506014,0.0030163292502448646,0.3948792370501848,0.16093395574023545,0.9956856678228427,0.5945559934295765,0.06411122776881112,0.9512918169573523,0.41605274457844904,0.1454057214223718,0.05345461339484442,0.5732994819833969,0.2524829304319643,0.009588352575721437,0.7027846992594814,0.13053695505329993,0.9881963617018834,0.3071172459631346,0.23398228389655867,0.014245935074899463,0.458828461884659,0.11635530929255467,0.00024317416050295693,0.8005774888551576,0.21597637224036403,0.999976839615037,0.20810807942073628,0.33624892561347963,0.9770769895185052,0.3475752740546084,0.19849868252829778,0.9997194060555976,0.6421211744185638,0.3160325075460299,0.9860269915404283,0.7650373070061564,0.6939497250607972,0.9985326034916584,0.24416632535009414,0.29615822885369825,0.9906358416752524,0.7465110797679461,0.7136390309141964,0.9964186391169048,0.8537775895441366,0.5850876528369565,0.9943322162523457,0.15392335419857545,0.4043080915416639,0.9563026674183686,0.8382147765983332,0.257583231827856,0.9971092408219281,0.16980436230004525,0.38323798064437353,0.964691992479366,0.08149053785358412,0.5173825503387611,0.03143651693305749,0.1862994622045962,0.3623850216134645,0.9722170918784898,0.0936754518804726,0.6479478888387407,0.0243488800121901,0.030595488934543336,0.5149581108224925,0.08282274344241936,0.10661604086457421,0.4742688959560512,0.923023217838381,0.03845723622027242,0.5364921323154017,0.9846202668214157,0.12028823813536127,0.45276380823570045,0.15567817803384326,0.04717735228998321,0.5874769710267869,0.8520592848016305,0.0069914123278370655,0.4313465695201799,0.9444142028140902,0.056739619631422544,0.5661705378979691,0.05074870005326321,0.011042291837829898,0.6961832156073856,0.12572458040628193,0.9865907233259925,0.5447410420139566,0.8813372347848851,0.016002525943562662,0.6761719308006164,0.1117782716398732,0.9811791662130664,0.5232283375589483,0.21008096343197674,0.9999943030459311,0.6558330046616019,0.7986354949965685,0.0001734115819340687,0.7771069813245177,0.9077796876958066,0.028612484087223666,0.6352042631528907,0.8156478272275806,0.001205912086980565,0.7589053278141802,0.7005650660431799,0.01006689082534179,0.25037821563583873,0.8320731234071443,0.00316606070678227,0.7402221669141865,0.720125759994223,0.9955070689149221,0.2692891537185166,0.8478808360700741,0.9953618652056451,0.15915520091242485,0.7392770680860189,0.0032882201223792817,0.8328775087037161,0.6132753528975303,0.997830723830184,0.7015511402254271,0.7579833730663248,0.0012818232450215739,0.0854730942808925,0.6341670884479398,0.02897267563963868,0.908401963351482,0.7762098852915391,0.00020293330423670763,0.7994985854166051,0.654809302503053,0.022178985873185175,0.8955852949158498,0.522152463136168,5.355679978857886e-5,0.9629088131454573,0.6751636050510064,0.16623481843902244,0.8820329241895409,0.8110888974928473,0.06766626844920987,0.7638926900830961,0.40899780482133885,0.01126851676664331,0.993592970124278,0.5651028739358605,0.0572389560536955,0.9449066889146396,0.7148576632419497,0.007172028517293538,0.8528232150398255,0.3005263957333175,0.04763508254339788,0.9988753344193728,0.4516917512897795,0.12098980067255155,0.9848842047880435,0.6075692013793873,0.038872509026481816,0.9235963862558996,0.47319339936083615,0.10728172025417976,0.9791726814293613,0.340766717775685,0.20424566074150485,0.9999081074798456,0.49474490185709247,0.0943040101041493,0.9725700014885514,0.6492356799548734,0.1871388328481453,0.9990299620468197,0.23803631236253942,0.3027219369546853,0.9650884445089121,0.3821910456385691,0.017787551121685063,0.997223729824642,0.537837127589482,0.28309673088234705,0.9567419245531711,0.14878735358011802,0.4113507411855609,0.9944927700109383,0.2756999958539018,0.0599873999825401,0.9962888155606278,0.4244913617730284,0.3902171296165927,0.990842161594782,0.07761286378783289,0.2450922453033869,0.9375176663070073,0.18075210520872442,0.12483163302304923,0.9698133722227313,0.3150314997075724,0.5029872881377363,0.9996821709104526,0.19764023011724402,0.3486013471855599,0.9808108540129159,0.33523171729521944,0.2089831691579298,0.919159906498821,0.21509067819138705,0.6156037117425535,0.9828070187844489,0.11566552874019448,0.45990188335501514,0.9993600555339195,0.23307099540723902,0.30811131487188104,0.987962597670154,0.12981215529833878,0.43845102527667307,0.9410851517744743,0.05346984601021537,0.5732659903362007,0.9922106726483977,0.14464725043412713,0.4171146348549268,0.9953248645740246,0.06358462270359083,0.5518729750480139,0.8766637038153953,0.014253960573185509,0.39593239311814044,0.9597306343036138,0.2898522149096093,0.5303834873503176,0.9979544113664969,0.019816350286884277,0.37494369441177566,0.7928579981887203,3.604094461145957e-5,0.5088374929989876,0.903591461875138,0.1930013550716771,0.6420887133489876,0.9749577124685296,0.000759786217758629,0.48727506283993993,0.6939809309219316,0.03360823431759308,0.33370263113777177,0.8266822476024824,0.11194957748301304,0.7464816228082234,0.9275182478183992,0.007395639134803733,0.6002612951645083,0.8426984941360152,0.004989637424244908,0.4442612567375531,0.9382997698582112,0.05086805267393546,0.8381898396930361,0.8580773962829198,0.008487876757733548,0.7080877768683792,0.751819048238936,0.0018457765330714415,0.5576883672763473,0.8727903526424794,0.012900221341371976,0.6882923093822985,0.7702087948894615,0.0004583807605150758,0.805205429865275,0.6479802296515041,0.024338444269611736,0.668146659305738,0.7880960121691634,2.3347791977545995e-8,0.5146864878418941,0.6684344286157349,0.02443271749347853,0.8866162849038588,0.5365258992103454,0.0004715567396285092,0.7699516137904914,0.9126664136326768,0.012831342044146321,0.6269552590098805,0.5579919153150734,0.0018721039868535017,0.9481306922381583,0.7083656149764019,0.039501374068013406,0.8578640387150755,0.8384148669204168,0.05073383881722199,0.7326905271406057,0.4445649620014297,0.0049466642172463215,0.9865829337223605,0.6005606690945805,0.007448098280162463,0.9273596938098293,0.7467474638023439,0.11175693611932236,0.8264508343467369,0.33399086403193645,0.03349817198150323,0.9157719647415266,0.4875805659007857,0.000743038635487081,0.8098186396695377,0.6423816871252551,0.19276020011040207,0.903410990583503,0.5091430432770591,0.08605728001389479,0.96767114024642,0.375239604488443,0.019731257858408124,0.8902997600492422,0.5306885165888003,0.07435061481101202,0.9596103925766291,0.39623131961052527,0.15991913705702926,0.9955025391261518,0.26931919177460845,0.06343556454360161,0.9506948699114497,0.41741602182501003,0.009535462650683835,0.9921568484903611,0.5735682776561742,0.25128258771889955,0.9978338731042843,0.4387543122104845,0.12960680239225775,0.8467150724155692,0.30839354928513885,0.04405999727417742,0.9993754188994024,0.46020650620506653,0.3554457914688386,0.9827274788440696,0.6159010094358669,0.2148395986231681,0.918993221756111,0.20923172637465354,0.10204858857283533,0.9808946142564905,0.3488926287490568,0.467048193624995,0.9996711829942215,0.5032928817933788,0.314747614794019,0.9697087079325981,0.12503372153430048,0.1805169675976509,0.9376655128722615,0.2453551953468041,0.294896540242411,0.9909002911742253,0.39051529245732913,0.16423120863840013,0.9962515580651796,0.060132619700032974,0.27542691335103886,0.9945379101175611,0.15492255663836507,0.40295143192080257,0.956866180103662,0.2833721185432353,0.2563749433756223,0.9972557965077005,0.4329520481015164,0.3818940718985332,0.9652005468334367,0.08224865074554,0.5160007375309394,0.899320348458397,0.18737727304413898,0.3610563631195316,0.9726697421012587,0.3229998147448331,0.49443932005009367,0.9999138728293102,0.03107349748777921,0.6282265966129676,0.9792598748344854,0.10747094212894026,0.20207502242878633,0.9237586678435349,0.22215654825552794,0.6072707376728939,0.9849586888248854,0.004030725608385632,0.45138759033712306,0.9988547555660192,0.04776534816481354,0.3002462060735256,0.8530396860992375,0.1356119492654111,0.7145816774843687,0.9450460584642055,0.05738101952788954,0.5647998636790521,0.9936416437466857,0.15071238776318102,0.408697326362886,0.7641522103564082,0.06781986556913339,0.8108495927490968,0.8822300068717146,0.01635136249141006,0.6748773393177347,0.9630242343512547,0.07906247231375046,0.5218471594127138,0.8957721244197541,0.022269083595758077,0.6545186908332797,0.7997432387582617,0.00021173259341744632,0.7759550961854791,0.9085781922150251,0.029075279914030305,0.6338726713159287,0.9775595157576147,0.0013037848679230413,0.7577215455717199,0.7018307736228904,0.00979272418487609,0.8628313660637386,0.8331054759526944,0.0033233032351772662,0.739008689144851,0.9318883257706618,0.006002907304259453,0.5918725705764939,0.5935314841624607,0.0446012703526783,0.7198513287327344,0.7404901406619084,0.05469002218577762,0.8318445942518722,0.8639908514203283,0.03612461979867759,0.7002850928436077,0.48041878058574444,0.0011847933964603263,0.5491893359043228,0.6354984526567884,0.014900516943608666,0.9076027691305255,0.7773613028586785,0.09011876758323295,0.7983903362109164,0.8921697117632577,0.021773599787559828,0.6600722430874524,0.5235336029340556,7.570375626875236e-5,0.9623844681161791,0.13873278322626864,0.027141540756318916,0.8811395070285116,0.8121700984924827,0.06697338852515083,0.7627173466967128,0.4103576425614254,0.010978512515293692,0.9933704586736822,0.5664734372242018,0.0026838852060269702,0.9442740817575969,0.7161052642726173,0.13445804126404814,0.8518422180921146,0.3017949500373259,0.04704785158338298,0.9989661076622038,0.9395914552083218,0.0038196266668225065,0.9845449635197469,0.6089189971046031,0.220754592905549,0.922860220827884,0.20343249109182,0.06205447978237477,0.9788834459976185,0.34207792325521436,0.030490316435268394,0.6857907086953909,0.4961274276911499,0.3214219609245803,0.5335302292449856,0.12033229646932059,0.1860615514749246,0.934155988415788,0.7902964761774799,0.0813233998494548,0.9894890910532526,0.9017221138619442,0.017423899414998778,0.9970763338931019,0.056770954459256784,0.0005959502394954908,0.867085545666727,0.14977275944714125,0.1537028521186789,0.8707823602823932,0.27693651212779513,0.5446735986996659,0.7492201402456788,0.42585837589320596,0.3888687053901544,0.7811237663456101,0.5820121793575249,0.24390380690085828,0.8949672246254978,0.7301663315755299,0.12391910338200407,0.9702846971861847,0.00017519942020927104,0.040618170943414356,0.9997295494429133,0.028635066437941725,0.0021263686868936427,0.980429664706451,0.10307292242972838,0.7588473959677701,0.9142675968632481,0.2162279325766126,0.6142581494536389,0.8076969418624291,0.3570627043225198,0.45852390771027807,0.7201865571385351,0.5118398993093257,0.30683533669505736,0.8479294703903819,0.1307429329899773,0.17398847860170435,0.8886080951560766,0.0032804715450859834,0.07294151284016404,0.99245188411446,0.00986638315890026,0.4157514985877031,0.9951343453892803,0.06426102305599163,0.8164299148981241,0.9495202961431568,0.16115861650565066,0.14254105585728472,0.9602724811671204,0.2911075557067334,0.5290033441231912,0.654873688192356,0.020203563684508097,0.3736055333507817,0.9872988180446527,0.07886112223947367,0.23053652130776292,0.904406059051563,0.19409381205225762,0.6407625895222417,0.9753879633907245,0.0008378854836679772,0.9543019511357845,0.9999994634361199,0.03410835121617145,0.33239939540438207,0.8277276734481871,0.11282292949436701,0.7452777647398063,0.9282335759840963,0.007160605043682433,0.5989064112662065,0.9869686185493106,0.005186365894132183,0.44288750541255206,0.7341834268590792,0.051477354370251416,0.8371702015738005,0.8590409887331314,0.03884633602158882,0.16223737136977034,0.948876890220917,0.001728992329982304,0.5563147977733304,0.6285873901937451,0.01321411620764984,0.9117108362592526,0.9927033672744401,0.09426443451026173,0.8041091405496239,0.8876845944289382,0.1728791098459183,0.6668439596811893,0.5163738560656321,0.3054848993253092,0.9650635814460602,0.6697355570436747,0.17056291692415465,0.3584671871928232,0.8065408724813585,0.07060014534659109,0.2174353550878365,0.9134455061934483,0.012521995167398214,0.9944827428995553,0.9800217413089719,0.2638152317326155,0.9475157675493602,0.9997755830775272,0.04004174581759773,0.8568971041734774,0.29523705715144744,0.12295530867046356,0.7314658997021938,0.4459392322975625,0.3692223317218122,0.5834569941194722,0.6019146155344197,0.22672693721312787,0.42730750682984336,0.7479490194244973,0.1108872079292022,0.9767739270515119,0.8697979218707639,0.152647587942766,0.9999855351865025,0.9555759086341105,0.0006696004614568651,0.974427436906824,0.11570884565856704,0.017042594012204593,0.9025926262330977,0.23312825552368266,0.08052433220299299,0.7914880311269581,0.3765789317205847,0.4383838262968405,0.6519510420793637,0.5320683747252638,0.28832157939908565,0.9590642541306311,0.6844297967963706,0.029988567765140528,0.9508563925873229,0.818801524344573,0.06276323935457345,0.9955523595157258,0.41877993052087104,0.009268610748680517,0.9919110418911598,0.07454660440728633,0.0036410184827934122,0.9402876219719399,0.7237817518415444,0.12867948181233474,0.8457175634993175,0.3096713176583775,0.5087697889504578,0.9994425941008078,0.46158485479240763,0.002837609227462512,0.9823653739218454,0.6172454910359196,0.21370500538453707,0.9182371572335634,0.21035759658575565,0.10121306103562427,0.9812713142187091,0.002418657061417362,0.027619685878403244,0.9996191393731477,0.504675421329722,0.3134641385091188,0.9692329971793328,0.12594975288430504,0.1794546585620011,0.9383323514716582,0.24654601239531743,0.07671188753815211,0.9911609871770353,0.3918647402483325,0.42282297334841207,0.996080682600714,0.06079167043479644,0.2741924924648645,0.8728354752359899,0.698941895569683,0.14758778047602883,0.9574261995226345,0.2846190279089433,0.5361535722718987,0.997398550102177,0.018236581965878296,0.006499867626570788,0.7881513535970932,0.08300995782604026,0.23659987607762195,0.9326246528461047,0.18845747424324594,0.6476235986118748,0.834196595698415,0.0004745015181737977,0.4930568447052481,0.6886380885371193,0.4772684156914197,0.33916734168186985,0.8222825638730789,0.6324605760906666,0.2009658155619437,0.9244908777272988,0.008419519673343145,0.09193275204074869,0.5794169347767295,0.004207822305979492,0.02270347978921744,0.9987593248121449,0.0483568018926151,0.8424265625659237,0.9635751477471737,0.13656006830509498,0.7133320717848112,0.883172814824287,0.2602140778306057,0.5634286939908024,0.6216499190955717,0.4072573420516746,0.4073383396414751,0.7653250887725759,0.09849342937864008,0.2602864107135858,0.9457118706404027,0.02615249126820407,0.1366166809702074,0.9635442570257826,3.169806166392064e-5,0.9676471823433751,0.998753514972213,0.022678930300255806,0.89025743274533,0.9853132405088589,0.09188512634188856,0.22337573668539001,0.39629756076507827,0.20089975917028058,0.6325400558687405,0.5522442603205727,0.0014054707538150857,0.47735075744913325,0.999938917715061,0.14438472680450692,0.3243707167619689,0.8341352815245549,0.1182880782518676,0.7377933838797617,0.9325833230258151,0.005791199307161432,0.9878810397785871,0.988836220509596,0.006486626830010334,0.43440411292636305,0.741701374414647,0.055320451621163225,0.8308091424672264,0.8649373533911178,0.03561041305481971,0.6990175140523738,0.952576527396036,0.0010915775626749724,0.5478132725744431,0.6368287808244464,0.015237384500631723,0.906800458318568,0.7785105996803127,0.08932852473267427,0.7972798054686261,0.8930258722585638,0.021371870291654438,0.658761816065124,0.5249145627905377,0.00010167320778808886,0.9618565876269345,0.6777508450122246,0.1641810372372543,0.8802431756184934,0.8132489125934179,0.06628381958654822,0.7615399945346768,0.41171816572022274,0.010692247394496479,0.9931441748396579,0.5678434922468201,0.25631581303909184,0.46166703835311057,0.7173512129305021,0.1335161201937105,0.8508585309068151,0.3030650198464337,0.04646408396242424,0.9990530657364471,0.9402485534626899,0.36099131687424135,0.9842020173490615,0.6102679600190728,0.009252820109489135,0.9221208221481372,0.2045467459032052,0.0627232623196875,0.979279170853643,0.34339033623027754,0.4728206295432347,0.6845064086603191,0.4975099831354675,0.3201312501255442,0.5321506312595342,0.6518725118500392,0.1849866705214696,0.934840114851168,0.7914210563708044,0.586048675126603,0.9897692180523687,0.9025437398174979,0.01706393755648422,0.9969251372424635,0.0574125202238388,0.0006653428241973902,0.9556098680723907,0.15076084320339617,0.03297296641090558,0.86985339422381,0.2781747339780772,0.5432963753807378,0.7480205937950299,0.4272259569111968,0.3875211308900158,0.9903078528077511,0.5833757226346105,0.004743224072968066,0.895813501951983,0.7313928340533669,0.12300944931106506,0.9707524262833529,0.00021370760142214174,0.04007407274560526,0.9997731069693974,0.029098038701116713,0.0020008989163193824,0.9800448019637802,0.6255377172794243,0.7576635170018153,0.9134918542233915,0.21736735672499652,0.6129117135300304,0.9835185198437137,0.35838813364560707,0.02488711931862475,0.7214270181092,0.513222048469019,0.3055608354837918,0.9662122973492516,0.13167653407571256,0.17294145238784175,0.9423806018295868,0.0031242546387325043,0.0722240909003834,0.9926893302206503,0.40022593290512837,0.4143890064969701,0.9949400403341688,0.06494075513299602,0.26659913707392924,0.8784764350738141,0.16217659973341936,0.14157570939922604,0.9608108087192248,0.29236449372635315,0.52762297913221,0.9981966663129465,0.020594445676579975,0.3722683387205561,0.7950947219968285,0.5988256120122102,0.22937292999074033,0.9052175640795046,0.1951886080367527,0.6394353894039368,0.9758145794263068,0.0009198014168623758,0.034138279666468985,0.696526538682356,0.034612030391137805,0.3310974411699802,0.8287705934396747,0.11369924191881237,0.7440720312413572,0.9289456298125947,0.006929339275398183,0.5975507711148694,0.5878445030753711,0.3735257854905253,0.4415141907781237,0.7354040899852723,0.05209008553699074,0.8361479854013827,0.8600018359028903,0.038313790190334485,0.16121923392787102,0.47464172266328153,0.0016160179806435915,0.5549407976790484,0.9951228674498653,0.013531733110723865,0.910924743760325,0.9924661457085391,0.09345801504120721,0.8030105259705483,0.36274395618516586,0.1739259871953857,0.6655399843430715,0.5177556340275039,0.3067593121751452,0.5119223027122562,0.6710353876484649,0.16952412461129207,0.3571416930322392,0.2579098024013213,0.06989347427863413,0.21629580185785963,0.9142214374887878,0.012216375619506004,0.9942760283037502,0.9804068229613385,0.002118781727543262,0.9468974210888772,0.9997322533620112,0.04058563447595814,0.8559274407438846,0.2964991675558385,0.12386479108618659,0.7302395024413109,0.4473139159503133,0.004566237444314392,0.5820934885567428,0.9905609488561709,0.22557016760159415,0.42593989234486834,0.7491486791918107,0.11002045495298657,0.824351396790284,0.8707270567251897,0.032510218611577824,0.9999731071326953,0.9561438886856198,0.0005999802414438093,0.5392977728484046,0.11659482300265794,0.017402335802691737,0.901771183599984,0.23429845142109051,0.08451264312660428,0.790363583536146,0.8982522792494598,0.4370120180057769,0.6506332706616527,0.5334479876621956,0.00034709578264119356,0.9585146056115137,0.6857141812134923,0.15789730835577592,0.9514524083666974,0.8198653985156376,0.06209425734242441,0.7542167230767349,0.4201444602373845,0.009005511051391135,0.991661474067446,0.5763022108645804,0.248887616646483,0.9396307242629197,0.7250172733322725,0.1277550004039611,0.8447174111754912,0.3109505413128449,0.042931993274142044,0.9995059504903397,0.4629634971076253,0.35280093050725786,0.5665551313096752,0.6185890761596234,0.2125726011997386,0.9174778948079118,0.21148568144547253,0.1003805826822744,0.9816443343093451,0.8810861513012486,0.46428955534855687,0.9995632755903091,0.5060579251171028,7.714484960369417e-5,0.968753698601236,0.12686864427776962,0.021749547007665793,0.9389958385171262,0.24773876739047096,0.5776159480807787,0.7774298809989767,0.39321501485751026,0.4214572557101687,0.9959060140300473,0.5491073084066656,0.27295979813625865,0.8737552841787275,0.7002095653542333,0.6869479884995906,0.9579827213932951,0.28586758410938906,0.05472751163500117,0.9975375005138427,0.01860841896813553,0.006279547614451986,0.9885613599922904,0.0837744532740185,0.7866591178966947,0.9319298526340003,0.18954005754253922,0.6463020863961761,0.8331669422205519,0.3255886183800286,0.49167442244879384,0.6899177777523474,0.47864965513606633,0.871617898851968,0.8233383840945014,0.6337932522415302,0.19985889515466138,0.9252198418910877,0.008168743630079578,0.09113537045736447,0.985624406075172,0.004388709903823507,0.022293415411275275,0.998660080470775,0.048951708951045336,0.8414177919433792,0.9630553362666612,0.13751096626019943,0.7120808349167104,0.9462995562954212,0.26142821397088145,0.06786132159779784,0.6229904910931999,0.4086162868247815,0.40598006142481113,0.7664959384739096,0.06921699588855063,0.2590739984462581,0.8840067764801176,0.025713013986914335,0.13566839605413633,0.9640607353724266,0.30017064578973107,0.519084312542387,0.9988491731047155,0.023092426672182642,0.8893916372256057,0.8019518421859164,0.09268544222290287,0.2222250808812059,0.3976504753501112,0.20200882996089048,0.6312064270007007,0.9783713128912721,0.0015109689671512494,0.4759696811553927,0.7043575494325693,0.14341418805330303,0.32307690631049624,0.8351625322486801,0.11918254437878029,0.18744160539230753,0.4401939448928086,0.005583270103579063,0.5891530917243936,0.9891248801486976,0.3818139793714497,0.9296272929839373,0.7429107600829625,0.05595428114208273,0.2834464102615063,0.32984661637056295,0.035099757102363016,0.69774841354382,0.9531625132005049,0.27535327160501244,0.9762214092325301,0.6381580627790281,0.01557795862424266,0.3905957202683467,0.22825589751863162,0.08854142193689729,0.7961670016810163,0.8938790276199762,0.18045356646049254,0.9983077260571751,0.8418000267141177,0.0001314649557803138,0.5033753066378268,0.9996681873587452,0.16315799429750105,0.8793439368129687,0.814325331546881,0.10199869085953522,0.9947496145448117,0.9152564274509081,0.01040972359307707,0.7703227346007964,0.9827059943654972,0.35536688667538785,0.9429986813506646,0.7185954996888964,0.04402617087254068,0.9657301859155203,0.3043365954494993,0.04588378414409511,0.022935445076979033,0.9409022855115659,0.359663773056867,0.9838553688982048,0.6116160798084269,0.7698376095536171,0.4174973175309509,0.995377653805183,0.10472804376133038,0.8177988519674781,0.0018838307262136755,0.15985871780630545,0.9998113902823567,0.49889255761882195,0.8347739093185824,0.5307707874456057,0.12213738633162852,0.18391419820647897,0.8966244820245566,0.004927679412607355,0.08601105274434229,0.9900456002036742,0.9298948301882273,0.01670766829846293,0.746865244022407,0.9748363084647413,0.2793670875798148,0.334118616719142,0.69362323817956,0.03346851568874909,0.9550605758664252,0.2794146519371207,0.05803268311001719,0.7468191509422726,0.01672125805515573,0.3861744164199305,0.08883905454062008,0.5847386284086009,0.7925004232689971,0.8966567528299456,0.18395526775869203,0.9979143646236273,0.8384755398628048,0.8578064687868376,0.14028618297865542,0.9998128431568579,0.1598198716004276,0.0018792369204576609,0.8178397691290238,0.10476050494461542,0.412563926464416,0.9127129499637189,0.009509157828537507,0.6115644142667762,0.983868726145272,0.35971464575394935,0.024458175391370074,0.668512035294494,0.9655394752316928,0.304287820983109,0.30851864675231644,0.6680690310967454,0.7185478297491914,0.943023255565814,0.25515569014163864,0.07150993979841291,0.7702781447722358,0.010420485369821264,0.4130271690005435,0.9947419508943753,0.5576064902771168,0.8142841104489347,0.47196281191932915,0.16319716600882417,0.9996662539169232,0.8581349204142104,0.00013025241224695616,0.12179478833594737,0.9983120803139824,0.444179344587026,0.00500125986919453,0.7962097036653936,0.5802127237073129,0.22821140792828354,0.9275609858317793,0.01556483416160298,0.057812890006730455,0.9762375573133072,0.3336248992838816,0.9531401128258459,0.6977970934193065,0.9548434368234926,0.3297967783895006,0.9749834649360872,0.6420096830525198,0.7428644315320926,0.017904327732394643,0.23163262174228533,0.08627504755343784,0.5892052442768153,0.005591171555247132,0.4401413233348347,0.9979618529880726,0.11914820061611348,0.8351231989917982,0.49936300992683297,0.1434513441909463,0.9999163680750789,0.8767179062435644,0.0015068543488738761,0.8213280508619365,0.9953136123811811,0.4170333497336377,0.009611029476879862,0.7736893632146797,0.07361914287187682,0.2516192759764627,0.3640739492738654,0.93871961033011,0.04568711655436569,0.9671750296165271,0.3001220615066513,0.044219402648170814,0.6723339104914084,0.02572979486036331,0.9451077681008859,0.9828284415002425,0.6155235168886282,0.7664510905549498,0.9149942015858099,0.2089161466491456,0.994065534400397,0.09923793361832328,0.8790372902822243,0.4674353863012048,0.9996851026198443,0.13747446172056121,0.8549550558404873,0.8414565121091591,0.5217118588634948,0.9986639553658716,0.8941686451378418,0.004381705577519601,0.7998516231594115,0.9908264514231064,0.22441549632110946,0.9251919563859613,0.750346433931508,0.05994825930796732,0.2757736663131947,0.3379089930344409,0.03202160178885033,0.6898687465886488,0.03680827652075802,0.9587442037801774,0.056170729327910784,0.6463527682663022,0.017765767606229166,0.3822711532565259,0.2354706789117995,0.08374508705297617,0.5936645192168436,0.8990867108105528,0.1870745405105858,0.997532243860342,0.5348273448508715,0.00040051346194242,0.8640836877861741,0.1466458467059637,0.47549978246681535,0.8737200752296224,0.8209268269486009,0.10723070824431835,0.9959127799864046,0.4215096005411547,0.9075243174742138,0.6076496964558611,0.9848640838553436,0.24769300659943405,0.9389704650724208,0.7262510743076795,0.6599439359310925,0.9687721389707971,0.9642356690102374,0.04237323133885068,0.7149320886784852,0.0271855714120674,0.351480183231604,0.9816301021635323,0.06690569639055283,0.9147020008948488,0.4090788560210208,0.21261597232830065,0.09955115987803803,0.8111534231305411,0.002697916746099538,0.4629106405086053,0.9995035920728488,0.507440382584693,5.47699991533257e-5,0.844755801416807,0.9986254410416089,0.17733740140566884,0.45320288282376886,0.7994325780915097,0.09086475728176602,0.9916711107496005,0.39456610596046326,0.014587116696952007,0.7542623620956377,0.062119841594805436,0.27172883979058426,0.03220617465744041,0.7014757043068635,0.6856649694629308,0.9585357414603952,0.28711777759792756,0.972071941782729,0.7393494402416636,0.9316926789979977,0.3778678050615759,0.9882654497989465,0.08124938123616893,0.006205439862376705,0.9018027309006451,0.19062501466442683,0.5343051417932603,0.832134741299019,0.0006025788029218049,0.4902920638509357,0.9999736540395707,0.15360517611556473,0.001211640149874571,0.8243917320228621,0.995845714704299,0.19875426967061627,0.42599231052481534,0.7770383677162978,0.6032159225057135,0.9859516962318166,0.3679394989006488,0.021887003648465908,0.7302865498322884,0.049550064791356985,0.2964507548409452,0.9625319841966256,0.6760947877023072,0.7108279764472081,0.3519800939032224,0.26264417426628517,0.9803921282512893,0.6243301226873599,0.012228023045185665,0.9199855618746532,0.993433288059637,0.5660888353275991,0.0026438845903385966,0.8848907604162479,0.458388946894459,0.1347228968713436,0.5119752899896715,8.208002967691197e-6,0.12744107496174767,0.9989410169627293,0.17388580833969475,0.8885228643598857,0.80305268496457,0.0934888724912118,0.22107654898509804,0.9230671545106366,0.753811502886528,0.6298717949089326,0.06432745816217267,0.3417098071324524,0.9494609799559687,0.7056185983424367,0.038334140698630836,0.3217844486391406,0.9722441791584616,0.052066532857944436,0.7353573280458388,0.9339633894593382,0.2388839572689676,0.987268469057531,0.7859547830055207,0.006938135543049673,0.9044856856141849,0.9971180847159575,0.11366559332032633,0.0005771612017367866,0.8668219790221541,0.14949593165605618,0.15398285039840992,0.4845639764858259,0.8676323992832691,0.5450600596770213,0.9964087844913572,0.19514659517785488,0.00801480739803756,0.7808027959525746,0.07814590945440408,0.9869993183977045,0.372319583165945,0.7298217932557345,0.6561373303005538,0.9701527812274997,0.3159558654752983,0.9607902364405572,0.038794015386394376,0.028505779409690235,0.3476537793382293,0.9805370175789756,0.06491463573053974,0.759179299907772,0.9197012885598708,0.40017399703471584,0.9926802969709525,0.8080026992173868,0.003130173310676776,0.8877701047900929,0.9993087649035299,0.13164069180336962,0.8488831159296328,0.8476506934609285,0.130481422092511,0.17428277800323372,0.4571990568221032,0.003324996882051734,0.5722820238573574,0.09614644054323479,0.9932389805954431,0.01364065719223767,0.757708938284434,0.06407085270278634,0.26816645766124375,0.346018744518235,0.029080223911390035,0.7097445714965486,0.9601207652719504,0.290755078854793,0.970734561855302,0.6545046987954175,0.020094520619255707,0.9361983879611049,0.3690916219214423,0.597089315634004,0.7822222937516916,0.9041777517431193,0.4271735193191135,0.9966113464372318,0.5433491784636562,0.8252995237880214,0.4862808533005394,0.9999987444093742,0.15072291498316936,0.4890981654129849,0.8274345241136536,0.540540946124415,0.9969310035272357,0.9054929894163217,0.00722618776486228,0.59928674033426,0.08059804897393047,0.24035027686224714,0.9348139495928786,0.019311235757527023,0.7383003177401561,0.29279255564388923,0.3201807052269904,0.038996430468152155,0.7071830302973847,0.030034781417915046,0.3433400017342002,0.27066705244425954,0.6282123764490078,0.013125644840485284,0.9221492270949669,0.21965267944589417,0.09449131636633429,0.575069427488349,0.0036573507225386437,0.17258574968474172,0.9990498024652679,0.5159860329278528,1.316428310471629e-6,0.850896290809142,0.13355217785413231,0.9994489688090409,0.8859848491512262,0.8062342318186196,0.5677909796306864,0.9931529191200279,0.40293699962210394,0.9181629259200548,0.7615851661532962,0.9799130072544673,0.2641573094911728,0.9476886936402087,0.02757531481542569,0.677701303948211,0.9618768894516402,0.3133384939028298,0.6540067772020828,0.7318097741694349,0.021387203461074034,0.36959688964249326,0.986353118868756,0.07663981856172125,0.7784665797019694,0.9068312728940779,0.1973851835157786,0.11113099974611135,0.5478660318248552,0.869536648909961,0.4817474097283521,0.1560226731328419,0.48857484046758254,0.0006898257343186942,0.8308488839819386,0.11546072118273543,0.19197616948776702,0.4344566576097088,0.006478119751682998,0.5948372635204926,0.24079776009942677,0.37620294976214275,0.932556740707695,0.7378400071146825,0.05332581751542076,0.9731625684585625,0.959217884044238,0.6840690765613744,0.7030465038265195,0.9506884992354117,0.33903911608295045,0.0629515922108893,0.6325911614506629,0.014178123284636746,0.21921940018180863,0.9919804080126049,0.09185450768559883,0.8008063546405161,0.8902905643345739,0.44987699540729936,0.1289394508600113,0.5205187721004028,0.850523198683806,0.5091577529445626,0.13665308954624977,0.46119798696930203,0.8830857972619045,0.8098070921556322,0.09852501902324623,0.21402321182717127,0.4073904244473172,0.011616327829020667,0.6215985086606868,0.9811659635651035,0.34984097892571686,0.9456504817908578,0.6781904872619944,0.04168394585753599,0.963595004598299,0.2990280466947446,0.04833406437538962,0.7277814359744508,0.93814553929081,0.24621160995681252,0.07691854880584181,0.6059717379486524,0.7746879499236892,0.42320637265115024,0.9961290222650885,0.10829590112875437,0.0010607287563552115,0.872576815449847,0.4772154682086,0.9999367825445744,0.4931098420480016,0.0004721957635785978,0.5365405720172911,0.9973588697320619,0.4339377551117789,0.9001190886326078,0.005770664918933965,0.08279597258462162,0.9888646609311245,0.38060253459258475,0.018222400605095446,0.647994282618176,0.9729931198890389,0.28457119626386934,0.9574047951915018,0.6882786802437864,0.03141956897491616,0.9526340797791488,0.9781051456766823,0.06076634328370334,0.6369590351858088,0.9242857081920701,0.39181299282442833,0.09215710058770499,0.579033810405532,0.004157736854251859,0.45039784142377237,0.1794953378680637,0.9984086980170719,0.8427092069145178,0.853743265912212,0.5046224212065157,0.167845207142249,0.46572162075431367,0.002413452864563681,0.8133544576729907,0.10124503546020541,0.40687607706085555,0.9159497994934347,0.7649961212807308,0.06832085640392666,0.982379323495362,0.25619756577537883,0.026276483155228625,0.67394525140414,0.9633986686880045,0.3096223065389726,0.9677843526571037,0.6626114717774322,0.7237343530612929,0.9403127376794623,0.9854064501739677,0.07451876374450817,0.6104000506445166,0.9091506624440251,0.41872763251985445,0.9955453029412689,0.551858342283331,0.001376547437428488,0.47773839228431836,0.15894567482597766,0.14465760042018433,0.8621463428618098,0.0002956732161469855,0.8375956457747127,0.18882557886362994,0.4384364250646575,0.005850234424546075,0.5908947653822411,0.08531298586629421,0.23308343572064133,0.3850119449464728,0.7413616241349335,0.055143176260044835,0.9744441677697864,0.32818275630580884,0.035754368479617105,0.6924727899910398,0.03302134955370467,0.2737728482037163,0.9767579578417158,0.6364555253523114,0.7479029917549445,0.9266680107885298,0.22677132450732473,0.9902812987239527,0.7975917091109603,0.89278589128113,0.445886540904028,0.9984501540900503,0.5245270109857001,0.8393924268388018,0.8569342227006165,0.9996005593209316,0.1644686191284142,0.8804950275304163,0.001988813443440818,0.559312316970179,0.9944905922224241,0.2066294163616732,0.7645520846113998,0.6177027750777018,0.0706273015047949,0.2566547096352237,0.9438169167328341,0.024844942162045247,0.6696857011457231,0.9650830433129155,0.30270841847679986,0.046627570258838125,0.6668939232504859,0.94006447642146,0.36136408752769167,0.2540690619334586,0.07215399262462124,0.00917866431974318,0.9117409091033439,0.20423379849812368,0.10581485108993421,0.5563674626190762,0.0017333991203931087,0.8785649199664458,0.14502605152819453,0.4971219623718627,0.8590040992336472,0.8372093377552765,0.12098020513073021,0.9982081398380961,0.44294016124190605,0.7911056640795048,0.5864308861666543,0.9896909774850389,0.22925906314102862,0.9282062136508547,0.7453239501919591,0.639305327856148,0.32769127171548285,0.955769566917287,0.03408911316267682,0.6952056862012344,0.954324085512793,0.33096997932918887,0.9753715363724602,0.6408134474014946,0.0162702161265868,0.3878992453974291,0.23058116953787133,0.5829931039734944,0.7939346090218021,0.005406722040057987,0.18258521450521548,0.1232644558171972,0.5290562571286842,0.00020251440079088745,0.500610164382049,0.14257811759990596,0.16111964285188374,0.877536764540429,0.5598320437971529,0.10367850584010396,0.995141718883112,0.4158037436555414,0.009855908560623183,0.7726447877601961,0.9834195688689902,0.3580160381419504,0.9417097320361267,0.721079049463992,0.6654121870160516,0.3059183784671937,0.3068842251354451,0.04473360563700912,0.023770614924134126,0.9421996310244913,0.35701191465909266,0.9831509757863655,0.6143097487866206,0.7675055740928808,0.4147713284138477,0.20790303064745852,0.555847313345509,0.8156592369705669,0.0021312544390094668,0.1618906385699761,0.9997278035811357,0.5016577214171015,0.00017379924055882512,0.5280104045360744,0.12395403294535745,0.18177651227453845,0.8949347217872937,0.7947813931504573,0.08756797317477061,0.9905871215384674,0.9284762349685196,0.016006218451994902,0.7492660879123542,0.05935750230182918,0.2768890778275931,0.9538856668847456,0.696169683171695,0.03447031193411276,0.3314627086466936,0.28189953824621217,0.9739459953610916,0.7444106127905014,0.9287461205804692,0.38348360875197673,0.08727190723469191,0.5874624857683349,0.7902533203003084,0.8983341494730108,0.18610280568896476,0.5285336704643661,0.8364351332618629,0.8597324487687679,0.14221226940870507,0.999880850328614,0.15779855390849878,0.0016473399447321513,0.5553264578379205,0.1064601756747185,0.2033898203550722,0.9111456804315226,0.7722058530737858,0.6088672669344498,0.9845580369036144,0.36237087774736726,0.023611198978002124,0.7251382047648077,0.9665411331991529,0.3017462910366774,0.3110759237861628,0.6706707178217347,0.7160574669265991,0.3575135871702414,0.25757036460778787,0.07009147192487114,0.7679476661394957,0.010989561141361182,0.9168195424081558,0.9943344249481514,0.5603523493113194,0.8121286937671279,0.46920243773428766,0.16524601646924908,0.13869614283547238,0.5061933440441962,7.478427420198885e-5,0.1236092514708721,0.9985314769593214,0.44692806568870963,0.00461870770353473,0.7984328639050378,0.5774821578074187,0.22589460707585507,0.9261209175217097,0.7488121829381373,0.6354474328200326,0.9770725857327993,0.336235024920633,0.9519644154373601,0.7003336560325126,0.9559848352366533,0.3271993669605968,0.28598997290412975,0.6446587919940315,0.7404436704292585,0.9310620909556384,0.23396982692506224,0.08472863123967728,0.7906793876507431,0.006011098479286714,0.43739697200676436,0.9977048222082072,0.11736241077345522,0.5381072035465376,0.4965978682663017,0.14539534924579545,0.15818039484917823,0.8748939974980745,0.0012999625476227683,0.5508163189226698,0.10927423091012572,0.4197614387419915,0.009078971903416944,0.7759992935366697,0.07506990339709818,0.24922323302987498,0.366737043206,0.02225344448833666,0.046848823495668934,0.9681532659721119,0.31059137697196115,0.9630042283947085,0.674926993187041,0.026612650315134934,0.9463605982948091,0.9821026138663325,0.6182120860001813,0.7641072069060344,0.9165302045744897,0.21116885794642493,0.993633215137802,0.564852418727621,0.8808348383055025,0.46467660151169066,0.9995793395268573,0.1355756578000193,0.853002151373025,0.8434712343541648,0.5189489814380619,0.4464075965259145,0.8924613751553072,0.004024011938051242,0.5779992474010696,0.9913461957608813,0.2221124840523242,0.9237305334924422,0.7527361917098523,0.061267833625606005,0.2733055827147939,0.34052729253884356,0.6998539440875129,0.6873078152304029,0.03785666578443747,0.2855170073329907,0.054904157032801215,0.6489945773879252,0.018503690108848725,0.37958554335431516,0.2378211928055573,0.08221952898994517,0.7869769542621049,0.43791634247755706,0.1892359872713852,0.9972502482601022,0.5375852497984155,0.0005188084173854968,0.8659733546411659,0.14860761040845383,0.4782619891552408,0.8718773880277297,0.823042314155632,0.546301998202292,0.20016932443714014,0.4242416711536183,0.9059159760923403,0.0747942709920244,0.9855318837000255,0.24530958315440943,0.9376398824664081,0.7287134769904599,0.6573216302514819,0.9697268732129296,0.3147968460971001,0.6744365221233728,0.7124321624480432,0.02809216167157841,0.2610872784372619,0.9808800999736648,0.06553052450033103,0.011841894245136986,0.40636119421346617,0.2148831375770049,0.09790150626105171,0.8089841761806645,0.8837581557523885,0.46015367214208974,0.9993727676886609,0.8533726729583755,2.1488405410663436e-5,0.8467532599716723,0.12964240835011104,0.17523001273409777,0.455956614255232,0.8016424720443341,0.09246051649806858,0.9921661967910571,0.39727069631896206,0.9213052795915453,0.6315808157030367,0.0634614051147882,0.2692721686830421,0.031236967655334957,0.7040033510038002,0.6830946823452464,0.9596312592968292,0.28962303819018,0.971153511976125,0.7369180328084461,0.019746003208688467,0.23737561521416767,0.987662431654048,0.0797448069659506,0.00664728512756424,0.9034423018584392,0.19280201717492818,0.11479201325583038,0.8300627287138046,0.0007459299243720574,0.48752757990931284,0.9999943940715073,0.4827943107065521,0.0010268820366551301,0.8264909788031465,0.9961938399516799,0.1965519372391446,0.42872813791229575,0.7793360264538793,0.6005087491488759,0.9865951270955826,0.3706084802061707,0.021085150370231398,0.6578184130980893,0.05075710449082088,0.9712618254254333,0.9614746743215343,0.6786800814285527,0.7083174330344892,0.34934115016660316,0.2650815301189514,0.9796180132250667,0.6270065237004594,0.012843275246215757,0.21445328440618272,0.9929790663647857,0.5688287169789653,0.00293547544709849,0.8866498927570592,0.455634021828935,0.13284028460194353,0.850149259081883,9.959526814373731e-9,0.5149389742392574,0.9991132590754535,0.45543521780459384,0.8867764131842358,0.8052474105655607,0.9920736299501802,0.21878589202818272,0.40171387317456486,0.756190020665815,0.6271995618809812,0.065690900483799,0.34433515761100464,0.029678211759893103,0.6835816783428313,0.03940302875161489,0.3192036311556502,0.971328480390165,0.05084476294435125,0.6576290089448746,0.9353301833254348,0.24124608277142995,0.9866409954581046,0.7836821084627585,0.007404724322749745,0.42892570028238464,0.1963933271878312,0.11191615587363057,0.0007176212572870821,0.8686953855744194,0.15147327003317157,0.1519920752009331,0.48732804815813374,0.865752611619778,0.542305468638736,0.9967320110014751,0.4282100668714586,0.9035601722089284,0.7830864040025733,0.079636700870516,0.98761832733098,0.37499501293981685,0.7322740213072603,0.6535080691487168,0.05276678018185965,0.31852969448780166,0.9597097922001777,0.6829089366918719,0.02943330321280635,0.3450224362702501,0.9797656821018179,0.06355875875703271,0.7568106784031234,0.9211977595259067,0.3974660411618642,0.22238177824184774,0.805819761687192,0.0034466963101277837,0.4561554367534201,0.9991557803563316,0.1297765295102939,0.8468970305254224,1.96777943314852e-5,0.1323498591762684,0.17218982326492677,0.45995471527877174,0.003014229843390781,0.5695448115638373,0.09778290653171023,0.21504712397306036,0.01300661270288267,0.7600745652705236,0.06543177577509607,0.9808253940468784,0.3486518622509185,0.028158159849847875,0.7122514608767145,0.9611958743453017,0.29326965061284316,0.9697952320995424,0.6571321602868005,0.020877892447349722,0.9375433201472309,0.24513784385173143,0.5998003531452034,0.7799354238958408,0.9057994020811218,0.4244389676612076,0.9962823670060922,0.5461032573155832,0.8231946323383222,0.15109813350795454,0.9999972951745275,0.14874963068872793,0.8661093218065852,0.829519260666935,0.5377842769422041,0.9972293047009528,0.4327017407634227,0.0067653102840691814,0.5965751336315845,0.08210990530948875,0.37448824931923125,0.9334421225887202,0.01855752482661127,0.05253297001142426,0.29027919096343036,0.32276359693448553,0.037932887769393964,0.7046632671707751,0.030985897801255657,0.34071647587482623,0.9784686759062274,0.757259671244008,0.013762510225302005,0.9236245432962217,0.22194657645855292,0.09287984158557389,0.577802089914663,0.889181391623705,0.1746805975095807,0.9988717786345445,0.5187495284613416,0.8436162549232173,0.5109280050514443,0.1354390292679098,0.16877843468220188,0.0030718930011987555,0.8084153889972145,0.5650503223656363,0.9936014251678804,0.4056510349655776,0.9166405836722784,0.763937707672681,0.06769289635912479,0.3481530466556937,0.9464505020549474,0.0266769370141669,0.04097905166843396,0.9629288438952792,0.31077611141102224,0.04909638448105741,0.7293562080894415,0.022194599394240233,0.3669294288826086,0.9857040550952068,0.6042406917300398,0.7761657027254116,0.9084325389643284,0.9963458089284258,0.10939880243165107,0.5506177535233923,0.001285618858023918,0.4789843782814216,0.15803475374137643,0.4913394468407923,0.0005522604834077294,0.5383062148321915,0.11723396140076225,0.9976856801265399,0.9011783812367333,0.006041994363996495,0.5921208553727391,0.2384371427275246,0.37888390030867736,0.9311631907323936,0.7402686500186448,0.05457521081494049,0.2861703776436312,0.9581170493325863,0.0362189483892969,0.03080474669998917,0.9518790161196239,0.3364236233288489,0.06161509746522853,0.6352552902381263,0.014839372093569225,0.3935423330044725,0.9914796233258498,0.5772849678731209,0.7985929832887281,0.8920129675782453,0.17813834836271708,0.12709173722867206,0.5232812826162477,0.852489712764774,0.5063929230912756,0.1385582000162084,0.46395539500170024,0.881302951606274,0.5655692931216575,0.10017931847193773,0.21175936826287983,0.9169297473477542,0.011031217024871587,0.7677791299643973,0.9819103879327764,0.35248078692708995,0.9443899124811559,0.675604166648038,0.04279627462140667,0.31126073724227954,0.30156307246690545,0.047154879898112734,0.022040634554069793,0.9394710404498886,0.24859796539352563,0.07545140102328124,0.608672452081183,0.7723732551714879,0.42047520165463026,0.9957780218017758,0.10658332739129844,0.8201228257835034,0.8744151790867513,0.15765305576282462,0.9998851676236367,0.4958748384998397,0.8325263232755236,0.5337822536098619,0.12016798002633056,0.43667967725785295,0.8984547562099268,0.005359327514229961,0.08432635917359016,0.23458231622768977,0.9314280075650734,0.01749006296803851,0.6453507682387399,0.97388236830318,0.28207916091150453,0.33127480792251685,0.7009959221014285,0.0323914900362407,0.9538019075898374,0.9772885277967873,0.05945186298106925,0.7494390910806663,0.015956159073381437,0.2252901778462611,0.09056370936373387,0.5817629927343339,0.004521174379575221,0.44764708657584085,0.18162258603610326,0.9981806416287515,0.8406905210526379,0.8556920646366521,0.138196706231263,0.9997211786791516,0.4684807927892091,0.0021497032555152784,0.8155044212842855,0.10291936661615464,0.40959427231879836,0.9144089825487606,0.010103837113545622,0.06972273046988009,0.9830995593352403,0.35682066693262404,0.025399119767376632,0.6713501625893888,0.964430068462302,0.307068347185736,0.9668006997471942,0.6652238177026033,0.7212580558839521,0.024945861190218577,0.9847358380224865,0.07307293836127632,0.7728120759719991,0.9107337868180223,0.4160004950069118,0.9951694358310247,0.10380022761726809,0.0015892158920023935,0.4749763211339665,0.16097291124199276,0.1427177196050058,0.8602342517268373,0.00020823441860151615,0.5292555123592982,0.1866659410419626,0.44118147983528855,0.005436034574248072,0.7937731221516472,0.08686420146706686,0.23074933162932232,0.38770474060077564,0.743779579942922,0.0564123243913342,0.975309628081136,0.3307821491816777,0.03473461630616442,0.6950219155394146,0.0340167140752653,0.27624223743117166,0.975917408378126,0.639113625034631,0.7454978492029745,0.9281031302442923,0.22909128283984664,0.9897312600800324,0.004451211279095979,0.894490880294063,0.44313845669001534,0.998224982844345,0.5272884606632848,0.837356681575486,0.858865145696887,0.14134220150314575,0.16242366374072525,0.8786952780202056,0.0017500443178330438,0.10260147669800751,0.9948923871904782,0.20439475164657567,0.010208805812007782,0.7711588713152238,0.6100841600869604,0.2542428634261522,0.36117232953244727,0.9401591959595785,0.667082057686687,0.3075513697793163,0.3052522252346729,0.965156285313237,0.721727348750452,0.02478284518301449,0.9437249579886553,0.9836037203699415,0.7732505977643761,0.009713565908683108,0.9133034022792617,0.9952417511787572,0.1041197537793297,0.5591141266965816,0.8131020224710297,0.47044731895169356,0.14308410880522882,0.4998871142206208,0.857073966511549,0.5297780548834042,0.12278945802594726,0.9984344112250905,0.8960181142759888,0.004789372587902241,0.08656958016822841,0.9902420978517218,0.22693850435854895,0.01645367213538934,0.7477296371826069,0.9751469082534729,0.2784750321713385,0.3350571728653182,0.9524963956995995,0.6926569885839781,0.035680285073211304,0.2803076267193413,0.9745071244961453,0.7459537290837812,0.016977268278268842,0.9304288210273122,0.9898365340780131,0.08542453130658773,0.590698489043625,0.8972614676053605,0.9982687779942192,0.12145218086066839,0.5318162934387342,0.8585004559647229,0.49784500346467886,0.1445172116445126,0.9999418275017057,0.8757180454824114,0.5570858443700638,0.10537044212832553,0.4135433313111044,0.9121506957318476,0.009317084356106065,0.7749585022062001,0.6056552126328117,0.9427800393066788,0.36553541661709077,0.723555837639695,0.9659013862489885,0.04847307663437128,0.04568684552096658,0.6690053849021239,0.7176528780255007,0.026212667976765747,0.9457972306307187,0.982431805727763,0.7694408815988667,0.010623443463084636,0.9158390059442241,0.9945971164288637,0.21428893010909073,0.0019249078803124653,0.16020416296086282,0.46592074873528805,0.13992235478360093,0.5044228345147465,0.85388429676437,0.5252491649414128,0.12578218074921976,0.4451677944629975,0.8932328826561627,0.004183462753318989,0.08913750764596312,0.38668482178289554,0.2231501480181129,0.01531957132911027,0.05827800261087901,0.6322788678258685,0.9548431672927559,0.3393457701169548,0.6987101284057626,0.6884635685778955,0.03738206613055761,0.05781258706329789,0.6429630016673384,0.7419945994543786,0.018169045454697108,0.23247231101769722,0.37588919892790384,0.7921182143328416,0.44417869963465206,0.8999993632523011,0.997871159223476,0.19223134195268654,0.0002713334751058838,0.8616474265018963,0.4933094184978933,0.159474762397656,0.4770160825119306,0.8727098941436832,0.5525774386274569,0.20523975076631662,0.9961041943941122,0.9095658362008652,0.008465742454960956,0.07413944357988783,0.36016688742010255,0.2463836024064291,0.022778792693442962,0.7276037377666897,0.6585049514137825,0.965539238461059,0.0438113779134382,0.6732671846625933,0.7135604960873689,0.027681479944393794,0.25999245367102075,0.6164909350599698,0.7656089924526294,0.01157359306860356,0.20972536557330085,0.4026193203369121,0.8139175692819094,0.0023430164988536006,0.8829574998918915,0.9996488221413924,0.13679023247428274,0.00011972178965641289,0.8421823600834843,0.5207181971809244,0.1288056988159647,0.44967840997069763,0.8904152908945606,0.5797476878534116,0.22781610479234665,0.9919447641391452,0.9246678165025524,0.01422535611755027,0.06042132745837614,0.3340692293715404,0.2703793151957964,0.03167232933817832,0.7028640915344875,0.6842546394217193,0.32460724055828516,0.055713611691847964,0.6473034766140056,0.738015555469151,0.3813047916719524,0.2363151685163366,0.5896687483707046,0.08042181635343876,0.0064461338229822585,0.18785085693032277,0.4296421248763393,0.8347734272540741,0.00044130164052486043,0.8647646361454346,0.48877438411620755,0.1561675572374407,0.0014705285014439684,0.8216888452637072,0.9953777418500975,0.11100556768451963,0.4224919818092368,0.19353101763481545,0.6066782509013138,0.2512105228817473,0.9863067661224868,0.9384934337068351,0.021444992897061033,0.048024389853896565,0.9691171840788781,0.9638653681676886,0.0419734512368401,0.6775147258223501,0.709450539708655,0.35053080936972014,0.06895117329280348,0.979968974501004,0.7617552456616429,0.40810106058053863,0.21343040300918042,0.562577057195902,0.8103742949361585,0.002802078586069956,0.8858579440666816,0.9994582970332809,0.8546231047907685,4.103865303639598e-5,0.8454754516920109,0.5161855244668888,0.17657828981861234,0.4541931665710164,0.8002284764583308,0.5752667539365455,0.09437458128033988,0.3955385083722154,0.9222561509986134,0.6332881864435399,0.0626008263614839,0.9792071456654732,0.2663596346476258,0.030102953767563112,0.03698589046229689,0.9589313868664354,0.9733957752376546,0.292610923258265,0.651631829580041,0.734016924573826,0.37690361627197766,0.08348427647757761,0.9869258443730552,0.784708215685731,0.007192415941945418,0.19140693860425861,0.9969530444934409,0.8313906597775675,0.0006523797716088686,0.867851828372167,0.9999828745985873,0.15288864693018844,0.0011434305493941421,0.8251479212644789,0.5435480183100201,0.1979610846087233,0.4269760587991593,0.7778657540173592,0.6022425832422313,0.07896272497197665,0.98734098513389,0.9362959148491488,0.6594975168165362,0.04998262042229551,0.3126679145061202,0.2909363718589445,0.040173216738869144,0.6817476588403459,0.9473662454614868,0.9815033645792683,0.2679896331968514,0.6252931953134524,0.757879958360608,0.4036463963050186,0.21715902299167883,0.5670745352337568,0.8068054790941829,0.003302056364565764,0.13751051924085428,0.9992266702217869,0.8514110112821335,0.5180263187550752,0.8487401132401586,0.9990047254074194,0.17313255700078534,0.003745164028517378,0.8038431404031428,0.5707796261255882,0.09704329646476983,0.39997842860519683,0.7546678903655912,0.6289111166918091,0.06481631996365156,0.980481833036467,0.949024366696227,0.028572247229236014,0.038716967123460455,0.2875441411990749,0.31614146160746825,0.051625515067095507,0.6559477043741853,0.934456519549443,0.372512570788918,0.2440656633911652,0.5985779852748382,0.7809679193737515,0.4306787725336719,0.19498841519214571,0.5398202343564527,0.10985100086967414,0.0009045504981974317,0.15020589652840982,0.9999998420086054,0.8703751771531469,0.4906158654122593,0.8285802400094504,0.5390277467893307,0.19435888562483672,0.007838419433552013,0.7816251418296571,0.5977985017789246,0.08142643796973464,0.3732814188908462,0.9340624920823961,0.6551922005024062,0.2960205480535056,0.9721785656639292,0.9604032504592285,0.038410822565436264,0.02883772602197837,0.9493734998854884,0.34189914857298764,0.06442542822306957,0.629679040278396,0.9202410100403593,0.3991996612145024,0.09657316151061679,0.9916121414855763,0.8032114154429852,0.99950592164568,0.17373453693038587,0.5124462515167123,0.1275742210045004,7.104182074613163e-6,0.8519760760705613,0.9992702360424411,0.888226159519448,0.0032114724547604445,0.8074328003171761,0.5662866736777876,0.9228158836272196,0.40442657986964525,0.7585607029930664,0.6245234385138845,0.06706762594623217,0.34696526902600155,0.9470106478857903,0.6810068453929138,0.040486003947675264,0.9624561389551314,0.9703983662606008,0.7349415771274,0.020374589734718895,0.9366836628213537,0.3681320165731604,0.24797266295926657,0.603020618505933,0.9047624424506118,0.42618971274905726,0.11336670486401984,0.9958713509698842,0.8245435924851015,0.48528669804200225,0.15346126793741693,0.4850348607653769,0.14641678784364442,0.0006124147417663206,0.831985519044315,0.9970400451952158,0.19078183863161519,0.0070586860925652695,0.7853613539872241,0.5933463722262472,0.9368063218332112,0.37767426593278897,0.7347191453664125,0.6508741130243368,0.054010016614435385,0.32110907368477737,0.9586152879506784,0.7062774639907302,0.030375219078394466,0.9513437742124329,0.3376026566410386,0.7587763157145049,0.01335299469558543,0.922681348355341,0.9925997633393959,0.22468578133033512,0.5760525624484524,0.7995923997472749,0.45340160526895407,0.1313222964135956,0.998640191114103,0.8449003354376778,0.5126981201186369,0.1342295406677383,0.9994946604501014,0.8853518862197287,0.0027186628822122305,0.8109971607981161,0.39895289881183466,0.21277932696173218,0.012387462678650873,0.9148134713710137,0.620125512983049,0.9494839139787397,0.3512896088956529,0.7101721260971332,0.6767713268703954,0.042292855356367065,0.9641615016832702,0.6549526759865769,0.7309281040249902,0.021675918001155037,0.9388748702754239,0.36376231411173876,0.7818332874753394,0.6074547739062874,0.9074086412340876,0.996556371301505,0.2022263721286639,0.5488559261209346,0.8702058762328466,0.48075355189495855,0.15674515690686985,0.9999103400128624,0.8642204609605171,0.5400713772783742,0.11609715716339897,0.9975123983487972,0.9022326429719663,0.44046286726566386,0.7890740830275855,0.37226896619537075,0.2356400732399011,0.01918178627414807,0.7387143671008805,0.6465436097288139,0.28777224049588956,0.32535190933452574,0.9567895848146445,0.7021372445138014,0.03195135876168853,0.9532769063033959,0.6286676698467286,0.06004305839518065,0.014414246956469534,0.9250869031388274,0.3903314416387659,0.80404319337958,0.5805323728004227,0.8909114444410775,0.4488875476141913,0.18066193837656958,0.9982853870807822,0.8512317393155105,0.508163344807314,0.13733703060857638,0.46218962125669866,0.1629578742469583,0.5673241976514448,0.8145359285256033,0.9940348346468602,0.9179044668074383,0.41334611064664056,0.7662821767806447,0.9814354091034219,0.25929536820256416,0.35562618652453537,0.7142790266970628,0.6725212613823212,0.3129015347792202,0.05009248116789922,0.967246119320323,0.7268956272570277,0.6688169133908692,0.9410299615915756,0.6019959457611365,0.07372342526827214,0.00861203130662519,0.9100213133162813,0.41723018420935953,0.10767855147224609,0.0011264645425427822,0.8732393412326325,0.4762219895874584,0.16005729319712858,0.9998038779724499,0.8312019555766387,0.00024577908957024164,0.11901890833916967,0.43492372350241515,0.18370437598058187,0.5943746713476413,0.08334494512365792,0.9890724213583246,0.23180105148768926,0.38648979718417215,0.742689944418251,0.9733146262430117,0.2836741145252356,0.32960911722328073,0.6891996585812411,0.033352116670461895,0.33859316406254114,0.0627229475963943,0.9762983192356919,0.7509720623829884,0.015515459313535651,0.92745747643155,0.9909638069645397,0.08868499045244932,0.0042867099383255836,0.8937233812885355,0.4443776961341374,0.12525542882224733,3.7874159517614636e-5,0.8382761309985569,0.5036278977134239,0.1671024752233048,0.9998201800921088,0.810176725662053,0.001855848591371112,0.10184584624929222,0.9947130414695304,0.20540152206887713,0.6211414966411173,0.06882355521058969,0.9826400732964856,0.25532973588100005,0.025959248976574256,0.9407494555213902,0.9637712695521339,0.9692042987154671,0.3041041673397429,0.6635516402101601,0.043893384406365366,0.36476991070360304,0.25099200984395853,0.9839189776628572,0.7742941868066612,0.009470455483752416,0.9126002436937112,0.9954118581993998,0.8218816831356386,0.5578755362987559,0.8762420914104098,0.4716923840333785,0.14395862213737903,0.00045194817140264965,0.8579458566934706,0.5310229019879963,0.12197201142543385,0.9983342444428179,0.7882192420872554,0.5899166005558293,0.08586945894657189,0.9899953850315819,0.2279841005143487,0.01677248267187409,0.055598090444690995,0.9747571232465854,0.2795937905661442,0.03538595398425093,0.9530255607206959,0.9528340221280998,0.33430692030535936,0.27918799344069584,0.6374120581510101,0.7470387950263155,0.39135309901255055,0.2276047933992557,0.9900851902826869,0.08612301068667616,0.004899765893186692,0.8965029176298278,0.9983709211256333,0.8423660221538919,0.5305715684687341,0.8576299846855509,0.4990921520705327,0.16373191791423125,0.0023674420553783104,0.8765397559080188,0.5583246651792251,0.104605842297675,0.9953505370880606,0.9128554910990556,0.6167359351789433,0.07113776436500469,0.9838050198009034,0.9433579957121649,0.024536271825611744,0.04370830070696813,0.6639788896729582,0.30452028855692187,0.04620908273732499,0.963940072021394,0.9405357564855115,0.3604088000065305,0.25493548249345244,0.9827579961025932,0.7704906223410779,0.41826283171614936,0.2050362761262453,0.5523268805372115,0.1021195359737479,0.0018171280074442686,0.8105312631735688,0.9998321021125596,0.8618213607640586,0.5031757160637412,0.8379430008514792,0.5264946486958921,0.184515886396032,0.44392833354286626,0.791913700199488,0.5854511302964998,0.08842805263313247,0.990878025728739,0.9276918844768096,0.6432044133584717,0.7505808588034242,0.9761605512696769,0.955359690233481,0.03372909405700064,0.033189921431723945,0.9547384764448188,0.33003431185637977,0.2832665242063681,0.6417674699917525,0.9269134357560649,0.3869302289399968,0.23141952678885647,0.9891662432344295,0.7931294748196649,0.005553564915262321,0.183354288977712,0.5249975349328734,0.11931191345805853,0.00023180686872309453,0.8607850929704148,0.9997910094982307,0.16038903296749307,0.47577031886483157,0.81724031024955,0.5538175141588229,0.20624806019213637,0.41678426482050834,0.7692286108669146,0.00869579786686997,0.07348726569197095,0.3589699337318913,0.9412428257501366,0.6692424825889501,0.7264925824887523,0.9670849553196467,0.30035362313079184,0.0443233198198375,0.02407456620169235,0.9426629468660812,0.35605917662708003,0.2588991221301964,0.6152777395143295,0.7666647985089103,0.4137914954538135,0.2087108048593871,0.9941042736060169,0.8148873101128604,0.0022239699111433753,0.16262399839010183,0.9996940022957297,0.13764847047847184,0.5077112096718541,0.8412719463133725,0.9982477667888187,0.1810100197679923,0.00511134549059733,0.8911932265922183,0.5809786280446454,0.09102051563010738,0.38989030568823235,0.7457343397448992,0.014522239920834956,0.0598283868528342,0.9775247948205974,0.9534675868000126,0.03211060475766031,0.03483411455621721,0.9566055091668093,0.32577569031950226,0.7479484558367899,0.6461112154240369,0.9292569688097047,0.019057934348874872,0.2352563623539739,0.5884415352827141,0.7894429226971267,0.4409118664950026,0.18687756905083935,0.9975572456882938,0.11638702583621913,0.5001390624808686,0.1429077104221183,0.9999015724365836,0.15707409547766038,0.48030170282790025,0.8207330875549492,0.5493059343572453,0.2025897489628718,0.009763049105340704,0.9076706184404862,0.6078963560921772,0.2522931010564161,0.363327287458527,0.9390913447850651,0.02180781279068983,0.04749246864719453,0.9686842091611376,0.9643294254169448,0.04247505570426874,0.025484624389132904,0.7105823432701719,0.35172139850690753,0.7713705171283953,0.6196865161346181,0.9145608346995808,0.4093272535102705,0.21240930452697587,0.9933894619099273,0.8113511098404828,0.4682098302573012,0.16598544038604585,0.9995147813787271,0.13453799369164626,0.5275400299397415,0.8445728076321182,0.9986066601792014,0.8946456314044513,0.4529514003281777,0.7992302473946782,0.5764994618539399,0.22506336145773825,0.394319201905751,0.9229227332297135,0.6344897955501129,0.2764675771547702,0.3371750467823145,0.9515381663565816,0.6905864395442793,0.7058654630779909,0.958434966651163,0.6407632122818354,0.054214623700835074,0.017561316972530383,0.7351183192753025,0.378112766402268,0.08417552945463952,0.5929020922639743,0.8986187145964578,0.4364103654104033,0.19042661677134737,0.9970889724951764,0.8600594829888621,0.000590245015572255,0.14609721133718773,0.9999709971932851,0.15378737823943545,0.5548582242838397,0.8241994709125293,0.9958131574554776,0.1989559123854323,0.42574250505092903,0.7768280538326184,0.9846739979338737,0.2483633115414755,0.3676958883329721,0.9369037298678329,0.020502555438617565,0.04944048824567371,0.3115121856953896,0.9626278644772241,0.7156325225221736,0.6805852502317759,0.9468078719676654,0.9818379463345955,0.06729402481298047,0.011088006254165783,0.758947633898089,0.4048704732594319,0.21613147076999478,0.5658384459101813,0.8077892876872783,0.4636845995472906,0.1693743692961852,0.9992944541101003,0.8405060695995383,9.719164095922661e-6,0.1272726570994746,0.998924521949581,0.17407732436759144,0.0038990676248389367,0.8028517343802146,0.9915294602955577,0.22128622612883342,0.3987567948670064,0.9204858536761509,0.9772133956510309,0.27241956989869265,0.34147022223712575,0.7007652018677786,0.02898926763266213,0.038237201429025924,0.9602266983471348,0.9723271084332142,0.7400305097799489,0.6547622782209279,0.9338378710001314,0.9884320057872409,0.0816739481622561,0.5973550040939524,0.9013403697177342,0.4319140972798156,0.19400114007900282,0.00035019762643417884,0.8289209457193294,0.4910679816704487,0.8700712519146936,0.9999992780551936,0.8199292459945351,0.0009319423289579354,0.10956835593342074,0.9963785008880397,0.1953468494975435,0.4302309758579582,0.07531836662380109,0.9857684435930946,0.24445422985457704,0.37207537685186387,0.9346801610228784,0.9683185015661571,0.05142558554116655,0.3157210263382504,0.6753682458758853,0.03889162917406297,0.02842176877261121,0.261961424320552,0.9806067465992652,0.06503915864024773,0.6284741594456789,0.9195639458186988,0.9935580552717366,0.09731117407720746,0.570331958782123,0.884394936764564,0.003690124442104925,0.17279050623687403,7.56924633231737e-5,0.8490640132795686,0.5184782094789593,0.13031130339695723,0.999201325942298,0.8890108780302539,0.003354142716371744,0.09303751911568892,0.9923405862186987,0.2175320268707283,0.40320271939110014,0.06149398861316541,0.6257309086126264,0.26839029081950033,0.030891873713247142,0.9475680126054922,0.9580160497855916,0.039995815128600454,0.2905256912983083,0.9708196521263358,0.05017987795616308,0.020023691113415287,0.2382224516433729,0.9874418940554364,0.07920679199285485,0.006809895413235623,0.7782415756085755,0.9972006881569626,0.8331049919447981,0.5430975267975361,0.8662941831276745,0.001113070615317402,0.15256331900108133,0.48378831257166044,0.8681579492412537,0.0006756759784121158,0.11241789122278312,0.9969029960615376,0.9056407236365952,0.60448709052202,0.7843363751127617,0.9868229141220599,0.08323428256717119,0.3764653926158674,0.048987565175903414,0.6520626644158344,0.2930224678410468,0.31994503177016387,0.9591106732584683,0.7074128952297619,0.3483931145824223,0.2659599431191816,0.9793359965029544,0.06282008650996213,0.6328523029787602,0.21527026616660644,0.3959807642311228,0.09463914308828975,0.003044070725744641,0.8005899522686546,0.9993489563041351,0.1321659017059459,0.5157335627630594,0.8458022008177635,3.544961979123906e-5,0.13338037232480143,0.45642590452091414,0.8861453657018905,0.002850088068411749,0.09568937895774637,0.5630256682292963,0.921051393147328,0.6311262608329198,0.7613698622774063,0.9798420682731135,0.2643800714968959,0.3500993560773567,0.7090398492401986,0.677937387296341,0.31827672752055225,0.29465278539880285,0.9692734508635656,0.732033554445203,0.37473214637302876,0.9382759696071845,0.9864116694808487,0.7828625625447441,0.6062364271932479,0.19317385197948406,0.42293873945730687,0.11128982912409147,0.5476145885988807,0.8220348888571832,0.9999964029720557,0.15127864556809778,0.4883223106174495,0.8650737635531465,0.5413143945118801,0.834437415723442,0.42919446087413493,0.7797266291012417,0.006518712285652928,0.08017604508987902,0.5901135726555262,0.9351965689252182,0.019525410050560577,0.7376177875651655,0.9714190299981671,0.28890213430691697,0.3241838543868967,0.6838341954378642,0.9483629000914346,0.03151413948777193,0.2699777216739403,0.9780258006189455,0.7559568237131493,0.40144767776979173,0.9244289518093293,0.9920254047254218,0.09200047028323377,0.5793012518281576,0.17199962110231293,0.9990970226732236,0.1291088055233537,0.5202663850066993,0.8425119314065563,0.5094103066664409,0.17143949114829238,0.4609461564265507,0.8832480764816866,0.568559784427946,0.8135654788574398,0.40217582727257273,0.9185878795311742,0.011670522372936198,0.06592451581993652,0.9810972267035564,0.9480337368458899,0.027830045073512943,0.7131515391775264,0.673691286820951,0.31405866366994994,0.2987967780478952,0.6580760175826585,0.9355617179348356,0.02264405592645019,0.24599400289264844,0.9853414168432985,0.7791108002972118,0.42845941373485485,0.9093062888353904,0.9961603298384688,0.10845294221187768,0.5521277320736926,0.8724083125984652,0.9999930346732648,0.14804251634652627,0.49285726965022797,0.8302666241257922,0.5367924891706652,0.19258784388694433,0.9978292723481922,0.9002705156798343,0.5955991140413252,0.7917511032421825,0.3754512097448719,0.9329454690929433,0.018290034274195233,0.741598798979417,0.972911165785902,0.9595243140764266,0.0375538135526679,0.02959276123455795,0.6991249951869599,0.3397740502167656,0.9546551877217857,0.6318427333323208,0.921451430445055,0.015208692604490925,0.22277371347574143,0.9911983120390542,0.8014258936135938,0.004125292715932094,0.1754364949751157,0.9988040170691227,0.12608223092775517,0.524797539477574,0.8535647035094699,0.999386289380154,0.13960876534260963,0.46546962217307053,0.8091975903779662,0.5640640897715424,0.21466014121595317,0.40662791142892196,0.9160899192455663,0.010716362096966692,0.06819345308806318,0.34910093063776826,0.9460018166051273,0.026357352672701895,0.7172456883283844,0.9633037436609615,0.30985590140848496,0.04866749015289945,0.021012817240957937,0.7239602221381993,0.365971004901318,0.24991129304592208,0.605213188303683,0.7753360693065574,0.009230396926126816,0.2003866433139787,0.9955788829770469,0.8228350343895197,0.0013578803197926148,0.15508071311996868,0.47293762523307437,0.14483535060835728,0.0005065168289248301,0.8336584357433448,0.9972786104011238,0.12115691675513873,0.4381857576959075,0.8975358916072185,0.5911431421338302,0.23759004359959035,0.3798490771741053,0.9306587410683707,0.01709429964553988,0.055027917571369156,0.9743643845017254,0.9577176804781733,0.7042333485508354,0.6922396334963299,0.9523038359783249,0.33548411908279685,0.061137672091755524,0.6362124994534797,0.7481223239979782,0.3925707912973362,0.2265598124679868,0.5782674190977174,0.7977946557389863,0.45117012538620443,0.8957419007808842,0.9984699636040144,0.8432738762437197,8.916496552680009e-5,0.13576160565418888,0.5003393063246323,0.16465593769376413,0.46999592951288366,0.8127493387116824,0.9936763324843358,0.21094727577234101,0.41108767941375385,0.9135577178540585,0.980811032086961,0.0704979248236624,0.3534313633010427,0.25246706417567855,0.02492363753929311,0.043199770769611234,0.964990245655118,0.968057848021784,0.04673414324879216,0.666655791592785,0.7198957441138372,0.9855919924287531,0.07492687953340649,0.6096430189340453,0.7715386802050691,0.010118096000988508,0.20403017181092786,0.9949566536591681,0.8193582035213951,0.47851370194290554,0.8783998588531007,0.9998628646139145,0.8626809890831126,0.00032295984875801986,0.8370227897530479,0.5277399676118759,0.185484420290506,0.44268922147692236,0.790900255886049,0.5866796698235677,0.2337399792706248,0.9906393589266147,0.9283365730322102,0.9725702134972443,0.05711482811215263,0.32745416974020936,0.9558733801188557,0.03418084426117618,0.6964187952952299,0.9542185523738587,0.9769912412786459,0.058982371831914016,0.6405710562989437,0.7441742846004276,0.9913928055040706,0.23036841355409576,0.5827440001312346,0.8923052197958272,0.005369738550412451,0.18239008518166605,0.9980948897680145,0.8399619021935391,0.00019538960860859822,0.8599205147867166,0.9997533995641246,0.8809980437344183,0.0020585622857657304,0.8162753501007345,0.9943751088176633,0.10662731265420106,0.41555476422133053,0.06766659447612466,0.6135356958889276,0.25733294229309844,0.984624760789338,0.9418280384580855,0.6704154923717234,0.045062847788130744,0.3019955724134122,0.9664434133253608,0.044838096753764656,0.6709252830374997,0.24900529772982904,0.35725398088005467,0.07255610379444061,0.6140638267593628,0.7677189454896287,0.9957167097605358,0.20769805642361416,0.5555962895646616,0.8158550918481826,0.0021080202753057664,0.16170459308227114,0.4963459262783025,0.8595438261758634,0.0001805225729055726,0.8403594092935874,0.5232100963495023,0.8981699872557802,0.005290755825440863,0.7945773270281568,0.9895336116370355,0.09030432970630492,0.38867411188928386,0.7446474352701467,0.6400504840105596,0.2816552548574415,0.9771535955736936,0.9539915647706771,0.6959199163704388,0.03437820675886316,0.9560958899605478,0.9756115245197411,0.056863364043029774,0.644918045191899,0.22568392742276494,0.38372926659707074,0.08741454251864433,0.5872137719489068,0.7904589619739083,0.998550709459797,0.18590622928665335,0.5282814812110762,0.8366219518070991,0.0003427444540867741,0.8630541224078783,0.46895097178678063,0.8780451208903288,0.001667891194253035,0.10320583487442792,0.5505468558011577,0.9141452084014918,0.4200287982437939,0.7719939351686356,0.9832207935496847,0.07521271022511994,0.3621280557989315,0.7203827129434729,0.666144342495854,0.046963362750917004,0.30616862555445745,0.9647905938049528,0.7208354919997128,0.36261311079303493,0.9441824755644384,0.9833501584262103,0.26178534825299715,0.6184752479800287,0.2031870295585293,0.4105540105674715,0.1035130301280966,0.5601015912231466,0.8123259876499201,0.4694545592990756,0.14238830961496957,0.5008816712690609,0.8563770754856417,7.921672289601389e-5,0.8436680197859896,0.4416493369024473,0.17848452373679857,0.004653025102289043,0.08712974336149937,0.577731693824046,0.9288756927425076,0.016201589160705687,0.7485930501813653,0.6356905679180744,0.06139781292500429,0.33599638162052836,0.6954556179311939,0.691738844779987,0.03605016788272025,0.2812014707314034,0.32269696280006654,0.7450873340903661,0.3891660489387441,0.9309340456614008,0.9896360561436727,0.08486936951564061,0.591676366721755,0.8978646105850987,0.4376475895088449,0.12080318170943627,0.5328087717718896,0.8332542999374775,0.49685046011492373,0.16207629200308604,0.9999560091799535,0.8750610877443057,0.5560976779610443,0.823249003528626,0.4145230782302794,0.19995261313109625,0.009126952308525282,0.7757886313408402,0.6046829048527513,0.24944179364476943,0.023847435830727848,0.7244450047472879,0.6618595201762101,0.3024589704141238,0.9698196208126313,0.669941070024645,0.9415916172844881,0.026531400427550422,0.2568919272404836,0.34858394363520073,0.06792027088033553,0.010828337812487931,0.9163904191554578,0.9944503250516639,0.10076593406844064,0.5646019469676484,0.8806711153929289,0.9997689894453041,0.16843982753798226,0.5054173437048309,0.8531809976124779,1.9050635447381836e-5,0.1827799231732965,0.9988412143944397,0.8926178327294292,0.004056057751283815,0.8018584441419181,0.38765372527214725,0.9265263945404196,0.01507622617216492,0.7525182077333367,0.6313194855009782,0.06359353473927487,0.03292438591387259,0.6996223771802494,0.6875419945085686,0.32792780830147344,0.9597378138324184,0.6439157546380001,0.7411238099063431,0.018435669578382496,0.9332165232951237,0.3749260139760342,0.08235835867620589,0.005891719054070876,0.9005953077371431,0.43314984562764197,0.1178624191454245,0.9967238715553782,0.8623334916724029,0.9998507939871366,0.14842795691969057,0.47800963350542774,0.8720461898600843,0.0010096048652157297,0.10879047127026337,0.9962271241766487,0.9089945426527819,0.008284473890636357,0.779560632159721,0.985471496374396,0.9401840291282959,0.3708701307057677,0.728488826396406,0.9678801650190116,0.0508760778483065,0.0434051581242198,0.9613703474987942,0.7126608007886227,0.028008745483495356,0.948274238897926,0.6174578923259303,0.7647658434478175,0.011787307511333445,0.9188842712476661,0.9937560714286988,0.21884481868740147,0.0024401706292507264,0.16428186715420695,0.4604054710988048,0.13610744029549982,0.9991090117017679,0.8429068541868756,0.5197244535252067,0.12947275592511193,0.4506680165940048,0.8897931762799495,0.003499902898398577,0.09231422631240149,0.3920780840975043,0.21856197526436955,0.01399076880383987,0.7564225849147854,0.9781845400471636,0.9525186657657431,0.3445925775026056,0.7037727089922513,0.6833297109257489,0.039508488260956875,0.0552582519091922,0.6482536021441276,0.7371404430259987,0.019675778701649216,0.9354633504308035,0.9877181364751018,0.7876121082992766,0.006606296253933608,0.9032930388745817,0.9973309267272583,0.19660857906875834,0.0004840663616777485,0.865444141285242,0.4877801001619158,0.15544616107756515,0.48254186524020476,0.8224495907920537,0.547074660164024,0.11163119548096406,0.9967628554076351,0.9063686173024705,0.0074824600036657585,0.07706330396353112,0.36548499265130374,0.2416331196075865,0.021157791899380052,0.7325138451143794,0.9694603730885909,0.9634932320059869,0.31878211008138946,0.6784441412070956,0.7085470360335065,0.029524931909495566,0.26485857905038335,0.6218618464284742,0.7609073462739375,0.012786453483940863,0.21424596752480207,0.9930211853531113,0.8095939387219081,0.5735863397689568,0.8864896865049811,0.9994110258483884,0.17528419949388985,2.9285433161274632e-5,0.8461937350669096,0.5151914568238728,0.1325334849340878,0.455183631556538],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],72:[function(require,module,exports){
module.exports={"expected":[0.0,0.010077494941504395,0.03990375614882724,0.08827648763623802,0.15324578557619828,0.23219273888335895,0.3219349974673207,0.41885505270040835,0.5190460591173128,0.6184693192765203,0.7131170835728502,0.7991741025424678,0.8731714194921372,0.9321262040728557,0.9736619901109991,0.9961044709118496,0.9985489905284048,0.9808970104244049,0.9438600815606388,0.8889311617902416,0.818324434757667,0.7348860562010217,0.6419794254716509,0.5433496069742221,0.4429723666968525,0.34489390916398205,0.253067775014352,0.17119547385751088,0.1025772764963605,0.04997918107823518,0.015521415765113178,0.0005929723795869979,0.005795616172440343,0.030919628677653632,0.07495226145950085,0.1361185599815407,0.2119529119879195,0.2993984362837219,0.3949302055539565,0.4946973361123294,0.5946782169447761,0.6908426207678404,0.7793141624092619,0.8565265558156472,0.9193673709709822,0.9653034958880148,0.9924832463007192,0.9998110070199452,0.9869913961593577,0.9545411719733932,0.9037684023423185,0.8367197365826966,0.7560979050546116,0.6651527721556053,0.5675503343527557,0.4672249439389597,0.3682207153718139,0.27452850710160887,0.18992505014790434,0.11782070814873352,0.061122005671073454,0.02211446626455721,0.002370483053383221,0.002685935601300038,0.02304810802248375,0.06263620155866645,0.11985442096034848,0.19239630096128263,0.2773376798464666,0.37125457235164655,0.47036119044035396,0.570662548342588,0.6681155003509747,0.7587917199419105,0.8390360505383246,0.9056138447976259,0.9558413531802816,0.9876939058397193,0.9998875270227785,0.9919306921062586,0.9641441409446375,0.9176479488530385,0.8543163763939001,0.7767023179714807,0.6879343947104644,0.591590839801277,0.49155525999300137,0.39186008748353707,0.2965240326595089,0.20939008996184422,0.13397062685757943,0.07330580037849538,0.029841008452425877,0.00532831596244443,0.0007558290468324125,0.016307864560652974,0.05135752026700624,0.10449194525356681,0.17356929192429116,0.25580505383246566,0.34788430907971135,0.4460953447499961,0.5464792759827021,0.644989628541061,0.7376554521065428,0.8207413892064269,0.8908982473972297,0.9452980051448833,0.9817478093153195,0.998778369039912,0.9957031828007922,0.9726462112930134,0.9305368805715419,0.8710726169056746,0.7966504235606499,0.71027025764437,0.615414101896952,0.5159056060374076,0.41575595552027345,0.31900218073158015,0.22954442437524014,0.15098872680003117,0.08650166658557273,0.038682715824304714,0.009459455453899313,9.874508552332184e-6,0.010714885404967955,0.0411429693705167,0.09006757095626167,0.1555165404621664,0.23485163125176461,0.32487484742064665,0.4219573549464167,0.5221857599152921,0.6215198573508326,0.7159554917953932,0.8016859647353691,0.8752554825410859,0.9336984594385626,0.9746590602114857,0.9964861638715328,0.9982999203118124,0.9800272170469142,0.9424046263757231,0.8869487141669397,0.8158949071196051,0.7321073827580451,0.6389636144940118,0.540218225741514,0.4398516411231512,0.34190963563407256,0.25034024953373557,0.1688346429231335,0.1006783051554675,0.048618616827178496,0.01475410292130308,0.0004498413082044683,0.006282436484090437,0.032016776655444,0.07661551109063747,0.13828086570696851,0.21452711130770535,0.3022807632753324,0.39800447367473635,0.49783962167648255,0.5977618544846809,0.6937433089168239,0.781914974486675,0.8587226531392742,0.9210702289021745,0.9664444722579612,0.9930163483750645,0.9997147454648592,0.9862696512761779,0.9532230372837336,0.9019070118288945,0.8343901228594173,0.7533939748035249,0.6621835207504211,0.5644354522575374,0.464089991987939,0.36519206341464905,0.2717282400375188,0.1874660466855274,0.1158020906678825,0.05962514460155671,0.0211997000457832,0.0020746858931533496,0.003021031077142078,0.024000588442546433,0.06416767245646199,0.12190314877506564,0.19487970151610878,0.28015564731523496,0.3742935145227545,0.4734986076163174,0.5737719713006937,0.671071588314584,0.7614753130649751,0.8413389732364072,0.9074432663033307,0.9571235295497952,0.9883771525695095,0.9999443024509687,0.9913587076164982,0.9629664532201571,0.9159120304621408,0.852092202171779,0.7740795443360571,0.685018745613966,0.5884998449997968,0.4884135174243344,0.3887942407271122,0.2936576659359915,0.2068387464559167,0.13183715117441902,0.07167619287959986,0.02878095858314078,0.004880554311543606,0.0009384048774227494,0.017113418244668444,0.052753579951775764,0.10642223580143045,0.17595600336232226,0.2585519778709392,0.35088071726612047,0.4492204519310256,0.549607109151118,0.6479941048051332,0.7404154610889088,0.8231456750007557,0.8928498932918502,0.9467183403332728,0.982579580114773,0.9989880467863337,0.9952823153884591,0.9716117638787967,0.928930551709807,0.8689591576803164,0.7941150274702791,0.7074151264540369,0.6123543258872138,0.5127645247173624,0.41266018581432024,0.3160765130539262,0.2269067923308215,0.14874545328305433,0.08474317790621211,0.03747989662566603,0.008860791353509923,3.9497644185537695e-5,0.011371601668637765,0.04240030654292193,0.09187484580139105,0.15780090176760375,0.23752099645950953,0.327821614473187,0.42506273972354525,0.5253245844194241,0.6245655956296622,0.7187853702005851,0.8041859109256695,0.8773247237361852,0.9352535845677099,0.9756373822121743,0.9968482466037383,0.9980311682279255,0.9791384635379987,0.9409316970777137,0.8849509828300521,0.8134529022536516,0.7293195415297241,0.6359423147268282,0.5370852559678931,0.43673329129133,0.3389316063627289,0.24762258512248364,0.1664868923694015,0.0987951062365724,0.047275881253411534,0.01400595633650814,0.000326441486079021,0.006788757668953815,0.033132409050579625,0.07829548357677074,0.14045745862721515,0.21711258624541452,0.30517089978811873,0.4010827704182486,0.5009819925712757,0.6008416306236244,0.6966363445860161,0.7845046514767818,0.8609045816232759,0.9227564553870303,0.9675670249881856,0.993529977272825,0.9995987461596623,0.985528699697691,0.9518870011750667,0.9000297467785685,0.8320473013835835,0.7506800359885039,0.65920786341504,0.5613180250886215,0.4609564584116431,0.36216873610602995,0.26893698925916226,0.18501938769997406,0.11379864824919733,0.058145677473143365,0.020303845497652795,0.001798555804008839,0.003375756245306394,0.024971869903650246,0.06571635787446778,0.1239668106721099,0.1973751537228775,0.28298229820376625,0.37733742185292607,0.4766370715452405,0.5768784804108971,0.6740209192866924,0.7641485784271795,0.8436284137160893,0.9092565946009983,0.9583876504385008,0.9890411093618082,0.9999813310619965,0.9907673154236845,0.9617704792308486,0.9141596843636359,0.8498541209998518,0.7714459450975104,0.6820957886406711,0.5854053546282995,0.48527223249895257,0.3857327863795713,0.29079944932914736,0.2042989822432567,0.12971821719997906,0.07006350332909056,0.027739520939673523,0.0044523489054620335,0.00114069265996658,0.017938044999438685,0.054167304990969944,0.10836807189728831,0.1783555139011742,0.2613084386316008,0.35388301537106026,0.4523475648044385,0.5527329829362397,0.6509927355929367,0.7431659741331184,0.8255371971761588,0.8947860223879813,0.9481210310253995,0.9833922899694479,0.9991780154858136,0.9948418852982971,0.9705586887270152,0.9273072809344376,0.8668311252935649,0.791568014414492,0.7045518027739953,0.6092901121025235,0.5096229392236264,0.4095678658593356,0.31315810999245147,0.22427994693121378,0.14651605363022052,0.0830010910550481,0.03629534606189283,0.00828152628638501,8.886823684389755e-5,0.012047617793488674,0.04367571800365083,0.09369824078782257,0.16009877926477112,0.24020072907191542,0.33077518223348884,0.42817108437508766,0.5284624086521408,0.6276064138123894,0.7216066070137402,0.8066738423704541,0.8793790613464011,0.9367915180358286,0.9765969174712865,0.9971907048069086,0.9977427448919187,0.9782307850016596,0.9394413518445031,0.8829380466861121,0.8109985166141975,0.7265226426303071,0.632915645505447,0.5339508213996769,0.4336174403701901,0.3359599389762534,0.24491488912294923,0.1641523149278039,0.09692775412232957,0.045951027392398536,0.013277005561088906,0.00022277778725943165,0.007314559728339054,0.03426648179777292,0.07999211256231975,0.14264825277102128,0.21970923467991654,0.3080687316674227,0.40416497419782293,0.5041243246792928,0.6039174237163362,0.6995216135060908,0.7870830910924786,0.8630722550857273,0.9244259838229492,0.9686711097400621,0.9940241127066507,0.9994630136860959,0.9847685706899867,0.950533116418169,0.8981366813396195,0.829691364692123,0.7479561958048948,0.6562259176819157,0.558198175978253,0.4578244669784886,0.3591508528613872,0.26615486501555896,0.18258516982933232,0.11181046002467931,0.05668366272187653,0.01942693800464279,0.0015421036925553078,0.0037500970948263768,0.02596191404210496,0.06728219664262663,0.12604532514093003,0.19988255901617696,0.2858175208649071,0.3803861741138607,0.4797764582639677,0.5799819529722512,0.6769633767745775,0.766811410439797,0.8459042815488897,0.9110537580677243,0.9596336659161084,0.9896857499916397,0.9999986113933069,0.9901565388866681,0.9605562662153325,0.9123909797717179,0.8476022212778853,0.7688016242776907,0.67916563924174,0.5823074909132393,0.48213152929137854,0.382675845362343,0.2879494957327583,0.20177089763951167,0.12761390862810162,0.06846779542500575,0.0267167366567454,0.004043716657447682,0.0013626844044971054,0.01878171225378361,0.055598639545177686,0.11032937668447529,0.18076772876498454,0.2640743272397188,0.3568910848096574,0.45547655985531027,0.5558567738722541,0.6539854024646129,0.7459068825993631,0.8279158612722115,0.8967065582122598,0.9495060218176873,0.9841859067789465,0.9993482676349614,0.9943819099264215,0.9694870274320491,0.9256671323614974,0.8646886037984004,0.7890094849952509,0.7016803996998502,0.6062215815733022,0.5064809736427647,0.40647911779587875,0.31024708681828733,0.22166399193169428,0.14430061589843268,0.08127547484105468,0.03512911092040372,0.007721683132346113,0.00015798433648755994,0.01274290707821163,0.044969153376480386,0.09553768389503858,0.16241008219194125,0.24289072324486066,0.3337354340413783,0.4312822661275966,0.5315991086757237,0.6306421917925633,0.7244190908016015,0.8091496608013219,0.8814184142294736,0.9383121990976536,0.9775376280890309,0.9975135249546059,0.9974346616959469,0.9773042172894149,0.9379336495417174,0.880909985242104,0.8085318471447394,0.7237167965318023,0.6298837263772978,0.5308150458406987,0.4305042114296614,0.3329947508497737,0.2422172684839482,0.16183100280951845,0.09507632256940923,0.04464410757323811,0.012567279387154295,0.00013885430626309203,0.007859821894108499,0.03541895010344187,0.08170533103377486,0.14485316160636413,0.2223169540485615,0.3109741444544767,0.4072509632726364,0.5072664938845926,0.606989112275091,0.7023990017145978,0.7896501914903757,0.8652255879079053,0.9260787482668695,0.9697566829044133,0.9944987351591643,0.9993075534053313,0.9839892942767074,0.9491614364888015,0.8962278902844112,0.8273224058399045,0.7452225618389816,0.6532378013322043,0.5550760281542824,0.4546941413959235,0.3561385328812309,0.26338197719509693,0.1801634892205552,0.10983760452392693,0.05523915809443897,0.01856901220289081,0.0013053396881418933,0.004144038839994091,0.026970681753077486,0.06886512691341418,0.12813861008429028,0.20240181835842713,0.2886612033129357,0.38343965088572696,0.4829166437727815,0.5830822664036907,0.6798988445569533,0.7694637039261973,0.8481664868425445,0.9128346857190197,0.9608615267674563,0.9903110489969775,0.99999614276236,0.989526402129911,0.9593238621326802,0.9106059865468377,0.8453365919514506,0.7661466863221199,0.676228413152261,0.5792063762140874,0.4789915318533854,0.3796235384185329,0.28510791771438954,0.19925459249905375,0.12552430857480007,0.06688913219475695,0.025712646132362016,0.0036546737076720848,0.0016043713427769668,0.019644386684519954,0.057047527079496785,0.11230607269523696,0.18319255267600876,0.2668495344481806,0.35990480676908243,0.45860731349448736,0.5589783585754465,0.6569719872155406,0.748638078227196,0.8302815733363581,0.8986114249072967,0.9508732580057482,0.9849603991969209,0.9994987965091546,0.9939024074409466,0.9683968223224327,0.9240101707736016,0.8625316778203261,0.7864395402695308,0.6988010306463261,0.6031488555003628,0.5033387520761842,0.4033940636234265,0.307343558511232,0.2190590306572961,0.14209922759300636,0.07956639742268012,0.03398123726519425,0.007181284004117494,0.00024684321316392754,0.013457442060284874,0.04628056157325605,0.0973931024686524,0.16473471925723365,0.24559087272876606,0.3367022529728889,0.4343961620955652,0.534734560596631,0.6336728096629768,0.7272227104764861,0.8116132684283115,0.8834427018350095,0.9398155676892445,0.978459476909205,0.997816694296075,0.9971069308086907,0.9763587969988501,0.9364086497206333,0.8788668786024683,0.8060529912738283,0.7209021140596149,0.6268466770973358,0.5276780531479291,0.42739372743616694,0.33003615910233797,0.2395298297560462,0.15952304770189452,0.09324088470571901,0.043355173416670945,0.011876805847493066,7.46743578973752e-5,0.008424522629458697,0.03658976844729178,0.08343507132240563,0.14707209804367904,0.2249356413517018,0.31388702339123936,0.4103406157520196,0.5104083760777252,0.6100565749742848,0.7052683955604633,0.7922058512751008,0.867364495037279,0.9277146834377851,0.9708237016032524,0.9949538258837289,0.9991323714577414,0.983190901237726,0.947772015565675,0.8943034490064029,0.8249405183960168,0.7424792420639319,0.6502436323905738,0.551951704935524,0.4515656053057681,0.3531318951461153,0.2606184353213442,0.17775444152522213,0.1078801596708534,0.05381222064597607,0.017730101978733426,0.0010882731424776138,0.00455756592087847,0.027998133192225216,0.0704650861641391,0.13024658282155044,0.2049328322438822,0.29151323322803724,0.3864977315621945,0.48605750404058395,0.5861792982489297,0.6828272066886654,0.7721053541260499,0.850414940244351,0.914599307211776,0.9620711844944541,0.9909169816797174,0.9999739252666615,0.9888769300425764,0.9580733156604082,0.9088047751926223,0.8430573225085342,0.7634812360955798,0.6732842263868908,0.5761021330187782,0.47585236420852894,0.3765759861083756,0.2822748275108896,0.19675016621098956,0.12344949957513152,0.06532757599235228,0.024727289026106603,0.003285235422581023,0.00186574392864719,0.02052603421771959,0.05851391036577036,0.11429808185400187,0.18562988985838125,0.269633950641606,0.36292406221329676,0.4617397020635253,0.5620976137494145,0.6599523718815475,0.7513594531396108,0.8326342399276649,0.9005005472347051,0.9522226855864404,0.9857157366324579,0.9996295961627908,0.9934033967812951,0.967288116459065,0.9223364616174451,0.8603604325536394,0.7838582817450972,0.695913809342945,0.6000720552503445,0.5001963986354031,0.40031282519555406,0.30444763975494554,0.21646516599896287,0.13991197566457192,0.07787392630509232,0.03285177043499704,0.006660350246401381,0.00035544135712312075,0.014191194516943006,0.04760989079595618,0.09926442322331169,0.16707259864201146,0.2483010708730835,0.33967552184434424,0.4375126492861112,0.5378686405707325,0.6366981477201814,0.7300173553009793,0.8140645679437649,0.8854518442075544,0.9413015644305238,0.9793624275205924,0.998100200856723,0.996759565174876,0.9753945614722426,0.9348664126158008,0.8768088074659008,0.8035620469113529,0.7180787063881696,0.6238046176229826,0.5245399672265262,0.42428611124771004,0.327084280592451,0.23685267908783897,0.15722854076457987,0.09142151302751289,0.04208427583313179,0.011205612214440719,3.024047714522693e-5,0.009008639629830395,0.037778890584320324,0.08518126510677676,0.1493049744393793,0.22756519315633733,0.31680725342471894,0.4134338096008289,0.5135498471603497,0.6131196906550597,0.7081296817082706,0.794749969503162,0.8694888919912604,0.9293337247194734,0.9718721236913996,0.9953893669051546,0.9989374747626649,0.982373423107998,0.9463649085281853,0.8923634335173116,0.8225457964404604,0.7397263448354344,0.6472435291207572,0.5488253297266036,0.4484389822789912,0.35013105841248393,0.2578643485488722,0.17535812189593813,0.10593820278061167,0.05240290673768577,0.016910240467521376,0.0008909126292720448,0.004990662003980684,0.029044227777292375,0.07208201119958463,0.13236916009193123,0.20747550070237764,0.29437349796053336,0.38956029535525444,0.48919891500956875,0.5892729261812982,0.6857483475050603,0.7747362566992686,0.8526495529449414,0.9163475528469445,0.9632625913179997,0.9915035241067213,0.9999319597837594,0.9882081482775349,0.956804676192621,0.9069874168534116,0.8407645029757576,0.7608053788782112,0.6703331952352187,0.5729948839387595,0.4727141503477603,0.37353330880414126,0.2794503370237008,0.19425771769523426,0.12138956358004782,0.06378318849619302,0.02376070425764787,0.0029354163942534317,0.002146791838404327,0.021426620030006283,0.05999773148474208,0.11630532548036071,0.1880796440421184,0.27242746584117983,0.36594873188753657,0.4648736018390634,0.5652144161897665,0.662926438743298,0.7540708998477962,0.8349737681203412,0.9023738505777639,0.9535542512600512,0.9864518892512266,0.9997406614295484,0.9928848976573987,0.9661609536337079,0.92064607100131,0.8581749537582204,0.7812658113764942,0.6930188498292204,0.5969913023509201,0.4970540374373189,0.3972355242150666,0.301559444932369,0.21388250040920248,0.13773894650524093,0.07619812833766482,0.03174075504157253,0.0061589024350293675,0.00048377447895192605,0.014944135466419095,0.04895708853861702,0.10115157224545757,0.16942362800476207,0.2510212106303633,0.34265512321752234,0.44063160460411693,0.5410012248079165,0.639718086469271,0.7328029148921545,0.8165034625261698,0.8874457619899349,0.9427701306274877,0.9802464442584192,0.9983640334386026,0.9963925785147554,0.9744115487950014,0.9333069991425265,0.874735853122166,0.801059112444809,0.7152466850364678,0.6207576681096623,0.5214009120246581,0.4211814856090212,0.32413923191361793,0.23418592222146695,0.15494757262608794,0.08961827939636224,0.040831465020507496,0.010553724998850655,5.554419059139448e-6,0.009612149823750304,0.03898626954654072,0.08694384341576061,0.1515517025991558,0.23020550560024583,0.3197347192115695,0.41653042264404405,0.5166907830507044,0.6161783383304233,0.7109827471427381,0.7972824456867529,0.8715986948603842,0.930935808163045,0.972901907758263,0.9958053410204114,0.9987228710181497,0.9815368921762873,0.9449401709542178,0.890407920443901,0.8201383345600024,0.7369639788876676,0.6442376100210445,0.5456970260130262,0.4453143958110561,0.3471361412074342,0.255119825658694,0.17297462498270466,0.1040118105566823,0.051011272034671984,0.01610946005215741,0.000713265943876551,0.005443309982841205,0.03010892418954292,0.07371583815442018,0.13450625805780303,0.21002972330350694,0.2972418845356413,0.392627221299491,0.4923407526002348,0.5923630280086305,0.6886621516268185,0.7773563077304219,0.8548702366813854,0.9180793535721959,0.9644357001798868,0.992070653110706,0.9998702479712075,0.9875200832503517,0.9555179938381295,0.905153983311254,0.8384582239149854,0.7581192203610656,0.6673754362571744,0.569884751704374,0.46957701422447146,0.370495626685602,0.2766345578146451,0.19177734539860453,0.11934458195293374,0.06225603070660518,0.02281293000518403,0.002605230439847339,0.00244750397120852,0.02234610855002661,0.061498931828340986,0.11832772429202659,0.1905417184667903,0.2752299697084929,0.36897869632335,0.46800888903827764,0.5683286427887644,0.6658940703310511,0.7567723112549365,0.8373000655076652,0.9042312609447076,0.9548679024322824,0.9871688279766193,0.9998319879225668,0.9923469305489535,0.9650153783670572,0.9189390656923038,0.8559753277562645,0.7786622315612044,0.6901162664503095,0.5939067184857175,0.4939117925990216,0.39416228222941485,0.29867908812167737,0.21131113589818235,0.13558022594539348,0.07453906971103158,0.030648234967823984,0.005676960376232054,0.0006318375097471574,0.015716235169040027,0.05032210158964873,0.1030544749964471,0.17178771448432,0.25375118456033374,0.34564093940408025,0.44375290485709135,0.5441321895773203,0.6427325066286016,0.7355792792257828,0.8189298558440282,0.889424376426426,0.9442212082746854,0.981111492205762,0.9986081816208359,0.9960059853235941,0.9734097977941407,0.9317304708945771,0.872648097448885,0.7985442867351427,0.7124061618638883,0.6177059489057257,0.5182610115287781,0.41807997314671,0.32120112938941875,0.23152966448868062,0.15268023338017633,0.08783125503641859,0.03959679046238551,0.009921169948974018,6.171586889314185e-7,0.010235029373752147,0.04021185764487978,0.08872273663097985,0.15381219378170308,0.2328564743963235,0.32266930512264735,0.41963033257142507,0.519831059687996,0.6192323971898054,0.7138274791734414,0.7998031797981802,0.8736938203115081,0.9325208704893526,0.9739130131294145,0.9962017317993477,0.9984885687006106,0.9806813414839515,0.9434978591181826,0.8884369870250574,0.8177182278446543,0.7341922533285065,0.6412259938192769,0.5425669173568085,0.44219196931692956,0.34414726182425437,0.25238497505396934,0.1706040449289209,0.1021010590878409,0.049637371503820193,0.0153277923618797,0.0005553401029795291,0.005915491978762288,0.03119218037558036,0.07536650249560367,0.1366577923080362,0.2125953991606374,0.3001182796577301,0.3956983882574139,0.49548289271600304,0.5954494816778668,0.6915685039645633,0.7799654037326442,0.857076903741081,0.919794640984807,0.965590464744579,0.992618346291221,0.9997887922664995,0.9868127621382425,0.9542133194183584,0.9033045469832366,0.8361385764197065,0.7554228666420755,0.6644110662784231,0.5667718591597313,0.46644107974931553,0.36746305973523014,0.27382760110141513,0.18930914729088572,0.11731463546658011,0.06074616294329127,0.02188400370393495,0.0022946906010709034,0.002767868449527644,0.02328446345977425,0.06301745210213122,0.12036519840833149,0.19301601588520806,0.2780413515502025,0.3720138358430981,0.47114543982348706,0.5714401705407482,0.6688551494290853,0.759463580660494,0.839613040205463,0.9060727049714783,0.9561635872165664,0.9878665244909789,0.9999035720346255,0.9917895167046028,0.9638514359070629,0.9172155131137185,0.8537616414286353,0.7760476451356065,0.6872061738527081,0.5908184254896798,0.4907697882328917,0.39109322062556023,0.29580668309125,0.20875117402988508,0.13343589925020943,0.0728968159547479,0.02957425336614683,0.005214543105764136,0.0007996246013016739,0.01650746312835727,0.05170487603372009,0.1049730563153623,0.17416476470395909,0.25649088483439075,0.34863285247004017,0.44687642675981043,0.5472614112120472,0.6457412891345027,0.7383463386409314,0.8213436520594863,0.8913876093655393,0.945654740057428,0.9819575371949272,0.9988326357600509,0.9955998008710565,0.9723893480369098,0.93013689014169,0.8705456229082651,0.796017669113072,0.7095572490654611,0.6146495805482478,0.5151203897588968,0.4149816963643659,0.3182700890691804,0.22888401080639043,0.15042661258228818,0.08606051053169583,0.03838030092596195,0.009307972049491853,1.5428891046720405e-5,0.010877253677318177,0.041455606470972406,0.09051787448958498,0.1560863587020631,0.2355179948365142,0.3256108952475778,0.4227334169426795,0.5229705530373568,0.6222817466038844,0.7166637654391088,0.8023120722733559,0.8757741855913337,0.9340888490914925,0.974905399868125,0.9965785235853133,0.998234577064532,0.9798068048235461,0.9420380299885363,0.8864507111088837,0.8152855718838299,0.7314112776356615,0.6382087994683743,0.5394351273910329,0.4390718261264894,0.3411645383179127,0.24965990475592142,0.16824647536779624,0.10020602384497934,0.04828125941149952,0.01456526827105381,0.0004171413443423422,0.006407189341492425,0.03229395354891473,0.0770339390252276,0.13882367786117966,0.21517242693447736,0.30300256971489886,0.39877367492402105,0.49862521124868614,0.5985321652802106,0.6944672897229323,0.7825634416518197,0.8592694669650571,0.921493347334359,0.9667268394011672,0.9931465820154322,0.9996875958869786,0.9860862128789879,0.9528907044653111,0.9014391809184259,0.8338056521114373,0.7527164242220096,0.6614402023856978,0.5636563292577987,0.46330647078553966,0.3644357277334588,0.2710295777533849,0.18685322086114037,0.11529980429977293,0.05925364484303297,0.020973962044663452,0.00200380914363113,0.0031078726195828965,0.024241647696126467,0.06455323232757504,0.12241766735301657,0.19550243856753202,0.28086150032215085,0.37505403056473646,0.4742831303071582,0.5745488765464883,0.6718095590806512,0.7621446017646667,0.841912600855781,0.9078981099246896,0.9574412544359007,0.9885449512366647,0.9999554109382949,0.9912126781410977,0.962669172227206,0.9154754813424921,0.8515339822115509,0.7734221553706779,0.684288686979195,0.5877265453444211,0.48762814844192504,0.3880284606253475,0.2929423432954392,0.20620271591763284,0.1313060511164555,0.07127143193466834,0.028518852656684024,0.004771668888190861,0.0009871291263636173,0.017317788092435726,0.05310535725390869,0.1069072404220478,0.17655468477491176,0.2592402032398583,0.35163074424077123,0.4500020469391861,0.550388766113824,0.648744315146034,0.7411039838443426,0.8237447558323825,0.8933353832634688,0.9470706693539509,0.9827845458088157,0.9990373869907617,0.9951740412006301,0.9713502398290502,0.9285263198272597,0.8684285125439932,0.7934793593748884,0.70670005916759,0.6115886837577155,0.5119791707634004,0.41188677763794324,0.315346226723075,0.2262490656726684,0.14818679924601474,0.08430611582312014,0.037182044460226105,0.008714155520515743,4.998903109887376e-5,0.011538797367863007,0.04271746689918399,0.09232918608719148,0.1583741075351921,0.23818996179604096,0.3285593733993869,0.4258395531920185,0.526109139095028,0.6253262661293528,0.7194914939119055,0.8048090240160042,0.8778397085295219,0.9356396820374213,0.9758790287771235,0.9969357014957599,0.9979609061420793,0.9789133167375501,0.9405607412256598,0.8844491711492669,0.8128404627627455,0.7286211616523064,0.6351861461415822,0.53630177981519,0.4359540894790887,0.33818808850007015,0.24694472239956877,0.16590200941882155,0.09832677967823067,0.04694298932142277,0.013821917897867908,0.00029867512654918604,0.006918382649925114,0.033414200191692056,0.07871808188282775,0.1410038291690504,0.21776070483754195,0.30589464078320366,0.40185295983142333,0.5017675840828792,0.6016109570557195,0.6973583944056394,0.7851503188704166,0.8614478397512968,0.9231754055252893,0.9678447792651066,0.9936553394190768,0.999566662829704,0.9853404641698813,0.9515502012197496,0.8995579587950803,0.8314595431361018,0.7500000000000238,0.6584629619223895,0.5605382850560517,0.4601733111439793,0.3614137502538964,0.2682405982869758,0.18440966311358992,0.11330016803449233,0.057778535357415395,0.020082840972210136,0.001732597556778459,0.003467503051883647,0.025217623452136073,0.06610621184431692,0.12448505005763078,0.19800088830495394,0.2836903046340559,0.3780991604065498,0.47742183655657144,0.5776546380180961,0.6747571825923749,0.764815268672391,0.844198656630494,0.909707403704368,0.9587008536248953,0.989204081417154,0.9999875025860404,0.9906164376424273,0.9614686340245573,0.9137190391065222,0.849292438093292,0.7707858659680551,0.6813639210648192,0.5846312001730735,0.4844869973148313,0.38496812328093827,0.29008618186998464,0.20366586222051208,0.12919076566890725,0.06966298185023656,0.027482074525745748,0.004348355216189315,0.0011943436788739992,0.01814717805503213,0.05452348993398437,0.1088569509199282,0.1789573802999468,0.2619990311840643,0.35463449630549626,0.4531296419394222,0.5535141307584498,0.6517414660494631,0.7438521059143021,0.8261330723238809,0.8952676211869747,0.9484689402379076,0.9835924853821831,0.9992224272256858,0.9947287231289768,0.9702925142132934,0.9268988235655308,0.8662968499777295,0.7909294577789745,0.7038347050237624,0.6085233794335346,0.5088374786140938,0.40879533921059175,0.31242965783807614,0.223624933162763,0.14596088183957995,0.082568140205739,0.036002068393930775,0.00813974381663135,0.00010429621378671428,0.012219634315687344,0.0439973890885772,0.09415659988055197,0.16067534991955007,0.2408722697373647,0.3315146231188769,0.42894861863333494,0.5292466938930299,0.6283658355137294,0.7223105529021672,0.8072939364013494,0.8798903075419771,0.9371733080722862,0.9768338613999812,0.9972732514228693,0.9976675667427259,0.9780009125169864,0.9390660511795552,0.8824324462030998,0.8103829970583608,0.7258220155824873,0.6321581532277654,0.5331669983904628,0.4328388825191964,0.33521802993464345,0.24423953522922753,0.16357073968366542,0.09646340081411331,0.045622614092628744,0.01309777060320061,0.0001999461287801596,0.0074490517129568445,0.03455287605633156,0.080418864548011,0.14319816011995756,0.22036013063794196,0.30879437863173176,0.4049361213539757,0.5049098871009189,0.6046857353981706,0.7002417038197327,0.7877259332120576,0.8636119360583974,0.9248407491195453,0.9689442401799099,0.9941445984072377,0.9994259978712864,0.9845755454665179,0.9501918626288934,0.8976609549178608,0.8291003421603713,0.7472737012693873,0.6554794624835905,0.5574178497110508,0.4570417245784228,0.358397246658822,0.26546077286124303,0.18197857056396183,0.11131580565238547,0.056320892750349294,0.019210675684137923,0.0014810665528232625,0.0038467455417346974,0.026212352178705434,0.06767632931273215,0.12656726486454656,0.20051126641364347,0.2865276527537083,0.3811491050919231,0.48056143459905676,0.580757332284155,0.677697903538949,0.7674754758975744,0.8464711172349131,0.9115005148469992,0.9599423350318819,0.9898438889981059,0.999999845710304,0.990000818758914,0.9602498687180152,0.9119462557817763,0.8470370976103241,0.7681388810561065,0.6784319916320585,0.5815325122356861,0.4813464589208199,0.3819123294694754,0.2872383116277769,0.20114071313934861,0.1270901264571816,0.06807152923205473,0.026463959923964164,0.003944618809812783,0.0014212600742578574,0.01899560025687347,0.055959218060506966,0.11082211079939469,0.18137275637733535,0.2647672596986287,0.3576439900217775,0.45625908822669264,0.5566373817001364,0.6547326234632752,0.7465905963054402,0.8285085072000673,0.8971842468164744,0.9498494974803335,0.9843813240030199,0.9993877491561014,0.9942638642453054,0.9692162129677024,0.9252544656395092,0.8641507194059546,0.7883680650413617,0.7009612998098089,0.6054537886491449,0.5056954374018396,0.4057075031880521,0.3095204976128424,0.2210117169247256,0.1437489482823056,0.08084665232626753,0.03484041933381088,0.007584759625966719,0.00017834829408358566,0.012919737629081995,0.04529532248467261,0.09600004369041382,0.16298999496048244,0.24356481271464286,0.3344765276795467,0.432060490464487,0.5323830935041445,0.631400334699861,0.7251208310626053,0.8097667112803046,0.8819259016340693,0.9386896666208873,0.9777698600226434,0.9975911600340825,0.9973545704527935,0.9770696282000282,0.9375540188875273,0.8804006159271263,0.8079132718357405,0.7230139499869462,0.6291249403266638,0.5300309069345268,0.4297263282914762,0.3322544799331074,0.24154445009444875,0.16125275824292135,0.09461596085241175,0.044320185877391116,0.01239285498944015,0.00012095825063601628,0.007999175570198747,0.03570993616739504,0.08213621984323582,0.1454065840421621,0.22297060166351557,0.31170166872635485,0.40802303771285886,0.5080519961880698,0.6077563788598915,0.7031171040802106,0.7902901829448759,0.8657616704088087,0.9264893123393738,0.9700251787191022,0.9946143396551548,0.9992656065677223,0.983791486981683,0.9488157423444339,0.8957482442146233,0.8267281423680892,0.7445376357136884,0.6524898219116634,0.5542951464738294,0.45391183478024183,0.3553863360941705,0.26269021127397757,0.17956003923561104,0.10934679553190141,0.054880774595812976,0.018357500629252455,0.001249226066759923,0.004245585109806993,0.027225794585987395,0.06926352271631014,0.12866422953040946,0.20303347373853192,0.28937343261146065,0.3842037441540094,0.4837018004266633,0.5838568367943406,0.6806316057675971,0.7701251183672846,0.8487298929112909,0.9132773725282182,0.9611656496207852,0.9904643487083673,0.9999924398235573,0.9893658458062985,0.9590129244464027,0.9101572013897596,0.8447680498441824,0.7654813051854373,0.6754930144863881,0.5784306039243133,0.47820665730506895,0.37886119988883526,0.2843988450539634,0.1986273684125212,0.1250042164523792,0.06649713693940162,0.02546454906490203,0.003560475615844938,0.0016678693497672037,0.019863021186958485,0.057412484925011886,0.11280264244042454,0.1838007176045363,0.26754477944404165,0.36065910652063793,0.4593902621939644,0.559758395576583,0.6577176692426325,0.7493193468527946,0.8308709666360199,0.8990851844489887,0.9512122865519187,0.9851510305137509,0.9995333462521185,0.993779482910607,0.9681213786041094,0.9235933109980262,0.8619902055965878,0.7857952823320742,0.6980799570195088,0.602380032647487,0.5025531712309474,0.4026233915337493,0.30661886095353635,0.21840952017538984,0.14155108594129923,0.07914172018006133,0.03369714316271055,0.007049224869311865,0.0002721423470778972,0.013639079655342334,0.04661121582167549,0.09785944470438734,0.16531795123416454,0.24626748437772084,0.3374449700919887,0.435175045772739,0.5355182140466955,0.6344296438311325,0.7279222173927822,0.8122272509830564,0.8839464104038516,0.9401886977900151,0.9786869876750472,0.9978894147726374,0.9970219296350293,0.9761195005705665,0.9360247040718929,0.8783537605746117,0.8054313846441533,0.7201970757788049,0.6260866272442793,0.5268936293167448,0.42661654973564517,0.3292975555498614,0.23885957344584613,0.15894815665234135,0.09278453276332299,0.043035756119028545,0.011707198899386484,6.171461198406503e-5,0.008568732492835185,0.03688533482328271,0.0838700799363597,0.14762901370720044,0.22559201480567065,0.31461639623496074,0.4111135869809449,0.5111937872372283,0.6108227661564462,0.705984481614285,0.7928429667861638,0.8678969578922691,0.928121030069739,0.9710875521876965,0.9950645446089512,0.9990854952541508,0.9829883196841378,0.947421894720442,0.8938199022336977,0.8243430374564411,0.7417919114020886,0.6494941582915068,0.5511702986850552,0.4507837653740439,0.3523811374849085,0.2599290229568654,0.1771541646558143,0.10739321544503372,0.053458237775694584,0.017523349506268437,0.001037085255825354,0.004664006002714327,0.028257910645017315,0.07086772936398866,0.13077586122923746,0.2055674106574793,0.2922275318045514,0.3872629569405427,0.48684281000111407,0.586953029124318,0.6835581734029543,0.7727640914258285,0.8509748944424084,0.915037906565639,0.9623707490730944,0.991065436041005,0.999965285218318,0.9887115438647702,0.9577578500666205,0.9083519465945389,0.8424853844178342,0.76281324332507,0.672547105711628,0.5753255977583198,0.4750677164834565,0.375814855052666,0.2815678943019692,0.19612592731218337,0.12293311804390122,0.06493986715766342,0.024483881423305542,0.0031959408071974282,0.001934161764822917,0.020749406583849883,0.05888323312632776,0.11479846761594703,0.18624116808181035,0.2703314807136832,0.36367972671087573,0.46252304016604917,0.5628770491138487,0.6606964854841215,0.7520382497760332,0.8332203573192134,0.9009703590012523,0.9525572536251617,0.9859015745124888,0.9996592127629365,0.9932755982570101,0.9670080543662705,0.9219154252534697,0.8598153938857165,0.7832112112709249,0.6951907904603423,0.5993022328357415,0.4994108042148106,0.3995431260640868,0.30372486246907576,0.21581844569648273,0.13936738162776247,0.07745341110857334,0.03257228503781173,0.006533160699245921,0.00038567466808903106,0.014377631981872363,0.047945017124397915,0.09973472947977108,0.1676591267908158,0.24898017797638072,0.3404198331085897,0.4382921615392225,0.5386519316896415,0.6374536432556785,0.730714601243369,0.8146754583232121,0.885951754045163,0.9416703423709125,0.9795852081324281,0.99816800385805,0.9966696574280796,0.9751505671567835,0.9344781671375948,0.8762919609923188,0.8029374335133319,0.7173715042190316,0.6230433339879512,0.5237552894535003,0.42350966968184306,0.32634737357757926,0.23618501133074488,0.15665702593911635,0.09096918888468986,0.04176937555002613,0.011040829415082443,2.2217552830772203e-5,0.009157699984481904,0.03807902559806914,0.08562037634327019,0.14986536133354994,0.22822426652385974,0.31753844603146364,0.4142076470876411,0.5143351361537671,0.613884776171592,0.7088437231663098,0.7953841839059088,0.8700177141690818,0.9297358378610128,0.9721313186240391,0.9954951954864371,0.9988856710446126,0.9821660752974263,0.9460103748111466,0.8918760051407837,0.8219451216324257,0.7390366367852758,0.6464925899459719,0.5480434297701295,0.44765763991230834,0.3493817695305552,0.2571773169713921,0.17476104185184466,0.10545514255440824,0.052053338477350775,0.016708255262530947,0.0008446524991683746,0.0051019916936616005,0.02930865958922113,0.07248888589277297,0.13290207655574865,0.20811297708488985,0.2950898376017245,0.39032662261865936,0.4899843392587055,0.5900457869806044,0.6864774908512989,0.7753922908389344,0.8532060331551387,0.916782047421644,0.9635575857897287,0.9916471272542564,0.9999183829671399,0.9880379387779641,0.9564846951515941,0.9065305627001785,0.8401891914920354,0.7601348008582269,0.6695943816654372,0.5722176163792331,0.47192976043803136,0.3727734152856277,0.2787455711887582,0.19363648864040894,0.12087691303598852,0.06339978139592128,0.023521995733636447,0.0028510287822751668,0.0022201268013932185,0.021654721437074698,0.060371404572805265,0.11680950749477326,0.18869401141611664,0.27312725343835614,0.36670573128393125,0.4656572984044039,0.5659932191313057,0.6636689545302759,0.75474719768386,0.8355565864533556,0.9028396960125422,0.9538843455765315,0.9866329263542075,0.9997653437170737,0.9927522301869491,0.9658762842283342,0.9202208746789979,0.8576263701741086,0.7806159539237112,0.6922939142486046,0.5962205107810065,0.4962684604707775,0.39646682844346753,0.30083861646668564,0.21323859583032906,0.13719792159370353,0.07578179179672367,0.03146588938878875,0.0060365874992705515,0.0005189407728134476,0.015135365437313919,0.04929667371029872,0.10162582394646841,0.1700134291586885,0.25170278636458276,0.3434009992280548,0.4414117146440487,0.5417841226572107,0.6404722135315757,0.7334978723207938,0.8171112366013282,0.8879418533509081,0.9431345418415045,0.9804644859168519,0.9984269162866093,0.9962977677460099,0.9741628662296531,0.9329144691697879,0.874215298617278,0.8004315169493532,0.714537346912123,0.6199951807618355,0.5206160113030203,0.4204058108456965,0.3234040505427026,0.23352086938906685,0.15437945659842645,0.08917000091905936,0.040521094189881146,0.01039377285683113,2.468633232166617e-6,0.009766054782091471,0.03929096134328253,0.08738703993076313,0.1521155385898355,0.2308672528492431,0.3204677027006935,0.4173050958235995,0.5174759188606078,0.6169422879619804,0.7116947158017868,0.7979137339310758,0.8721238554735624,0.931333671931462,0.9731564368014167,0.9959062752777408,0.9986661418317748,0.9813247862985783,0.9445812383687964,0.8899166297160306,0.8195344896089608,0.7362719206912559,0.6434852354311623,0.5449146632341147,0.4445335818709304,0.3463883507001946,0.25443520200456,0.17238076534741326,0.10353265341002427,0.0506661321915679,0.0159122500926675,0.0006719353975025988,0.0055595248830628274,0.030377999916090415,0.07412692827018191,0.135042791528579,0.21067007247591674,0.297960236947476,0.3933946201795877,0.49312626411523597,0.5931349882053161,0.689389442805278,0.7780096127979159,0.8554232209238886,0.9185097262060664,0.964726112892992,0.9922093993724463,0.9998517349225697,0.9873450571519504,0.9551935099884741,0.904693121647729,0.8378795617619341,0.7574460835781691,0.6666349589745042,0.5691067825462922,0.46879291311191706,0.36973700071858473,0.27593198719054535,0.19115915072504164,0.11883568264473438,0.061876940484563325,0.022578929988479712,0.0025257531644221065,0.0025257531644237163,0.022578929988484375,0.061876940484570875,0.11883568264474453,0.19115915072505396,0.2759319871905339,0.36973700071859983,0.4687929131119611,0.5691067825462796,0.666634958974519,0.7574460835781827,0.8378795617619457,0.9046931216477548,0.9551935099884687,0.9873450571519539,0.9998517349225701,0.9922093993724486,0.9647261128929757,0.9185097262060579,0.8554232209238974,0.7780096127979028,0.6893894428052636,0.5931349882052728,0.4931262641152203,0.39339462017960014,0.29796023694746165,0.21067007247590397,0.1350427915285683,0.0741269282701737,0.03037799991608503,0.005559524883064715,0.0006719353975034315,0.015912250092678548,0.050666132191574786,0.10353265341003381,0.17238076534740365,0.2544352020045984,0.34638835070023655,0.44453358187091774,0.5449146632341304,0.6434852354311773,0.7362719206912447,0.8195344896089947,0.8899166297160404,0.9445812383688036,0.9813247862985826,0.9986661418317759,0.995906275277735,0.9731564368014116,0.9313336719314684,0.872123855473552,0.7979137339310404,0.7116947158017726,0.6169422879619652,0.5174759188605922,0.417305095823584,0.3204677027006524,0.2308672528492538,0.15211553858982424,0.0873870399307543,0.03929096134328752,0.009766054782082811,2.4686332322221283e-6,0.01039377285682852,0.04052109418988731,0.08917000091906829,0.1543794565984583,0.23352086938908012,0.3234040505426907,0.42040581084571194,0.5206160113030359,0.6199951807618507,0.7145373469121372,0.8004315169493658,0.8742152986172695,0.9329144691697958,0.9741628662296671,0.9962977677460118,0.9984269162866081,0.9804644859168477,0.9431345418414973,0.8879418533508803,0.817111236601338,0.7334978723207799,0.6404722135315607,0.5417841226572234,0.4414117146440049,0.3434009992280399,0.25170278636456916,0.17001342915867673,0.10162582394645892,0.049296673710279626,0.015135365437310089,0.0005189407728140583,0.006036587499272994,0.031465889388794244,0.07578179179673195,0.13719792159371436,0.21323859583034194,0.30083861646670007,0.39646682844348285,0.49626846047082157,0.5962205107810218,0.6922939142486191,0.7806159539237006,0.8576263701741196,0.9202208746790217,0.9658762842283295,0.9927522301869518,0.9997653437170733,0.986632926354204,0.9538843455765129,0.9028396960125329,0.835556586453344,0.7547471976838466,0.663668954530288,0.565993219131262,0.46565729840438824,0.36670573128394357,0.2731272534383422,0.18869401141610437,0.11680950749474495,0.06037140457279783,0.021654721437070146,0.0022201268013917197,0.002851028782276832,0.02352199573364122,0.06339978139592894,0.12087691303599873,0.1936364886403989,0.2787455711887723,0.3727734152856703,0.471929760438047,0.5722176163792486,0.6695943816654519,0.7601348008582646,0.8401891914920676,0.9065305627001712,0.9564846951516004,0.9880379387779674,0.9999183829671402,0.9916471272542484,0.9635575857897227,0.9167820474216354,0.8532060331551276,0.7753922908388976,0.6864774908512581,0.590045786980589,0.48998433925871826,0.3903266226186441,0.2950898376016843,0.20811297708490023,0.13290207655573805,0.07248888589276486,0.029308659589215857,0.005101991693655328,0.0008446524991709281,0.016708255262535,0.05205333847735777,0.10545514255440042,0.17476104185187818,0.2571773169714058,0.3493817695305431,0.44765763991232393,0.5480434297701452,0.6464925899460141,0.7390366367852895,0.8219451216324377,0.8918760051407935,0.9460103748111537,0.9821660752974304,0.9988856710446137,0.9954951954864348,0.9721313186240433,0.9297358378610048,0.8700177141690522,0.795384183905919,0.7088437231662955,0.6138847761715768,0.5143351361537515,0.4142076470875976,0.3175384460314755,0.2282242665238466,0.14986536133353873,0.0856203763432773,0.03807902559805226,0.009157699984478906,2.221755283060567e-5,0.011040829415085718,0.041769375550032406,0.09096918888471522,0.15665702593912773,0.23618501133073405,0.3263473735775939,0.42350966968185855,0.5237552894535159,0.6230433339879664,0.7173715042190458,0.8029374335133218,0.876291960992329,0.9344781671376166,0.9751505671567884,0.9966696574280814,0.9981680038580512,0.9795852081324237,0.9416703423708919,0.8859517540451711,0.8146754583232,0.7307146012433551,0.6374536432556908,0.5386519316895976,0.43829216153920697,0.3404198331085748,0.24898017797636718,0.16765912679082529,0.09973472947974465,0.047945017124391254,0.01437763198187536,0.00038567466808842044,0.006533160699248475,0.03257228503781734,0.07745341110858173,0.13936738162777335,0.2158184456964956,0.30372486246909014,0.39954312606410214,0.4994108042148263,0.5993022328357569,0.6951907904603305,0.7832112112709612,0.8598153938857471,0.9219154252534629,0.967008054366276,0.9932755982570125,0.9996592127629348,0.9859015745124784,0.9525572536251672,0.900970359001243,0.8332203573192017,0.7520382497760196,0.6606964854840798,0.5628770491138332,0.4625230401660619,0.3636797267108607,0.270331480713644,0.18624116808179814,0.11479846761593704,0.058883233126333756,0.020749406583845387,0.0019341617648190312,0.003195940807195985,0.024483881423310372,0.06493986715767114,0.12293311804389284,0.1961259273122184,0.2815678943019833,0.37581485505268114,0.4750677164834722,0.5753255977583073,0.6725471057116694,0.7628132433250833,0.842485384417825,0.908351946594548,0.9577578500666268,0.9887115438647736,0.9999652852183182,0.9910654360410021,0.9623707490730885,0.9150379065656302,0.8509748944423972,0.7727640914258154,0.6835581734029397,0.5869530291243306,0.48684281000109836,0.3872629569404997,0.29222753180456296,0.2055674106574666,0.1307758612292269,0.07086772936398061,0.028257910645002715,0.0046640060027161034,0.0010370852558263532,0.017523349506272545,0.053458237775688866,0.10739321544506103,0.17715416465582629,0.25992902295685416,0.35238113748492345,0.4507837653740595,0.551170298685099,0.6494941582915218,0.7417919114020773,0.8243430374564531,0.8938199022337072,0.947421894720449,0.9829883196841418,0.9990854952541518,0.995064544608953,0.9710875521876913,0.9281210300697162,0.8678969578922584,0.7928429667861512,0.7059844816142965,0.6108227661564308,0.5111937872371842,0.41111358698095746,0.3146163962349462,0.22559201480565755,0.1476290137072095,0.08387007993633527,0.03688533482327683,0.008568732492832298,6.171461198428707e-5,0.011707198899383764,0.043035756119046475,0.0927845327633321,0.15894815665233208,0.2388595734458595,0.32929755554987616,0.4266165497356607,0.5268936293167604,0.6260866272442945,0.720197075778819,0.8054313846441883,0.8783537605746219,0.9360247040719005,0.9761195005705713,0.997021929635028,0.9978894147726334,0.9786869876750345,0.9401886977900211,0.8839464104038415,0.8122272509830442,0.727922217392743,0.63442964383109,0.5355182140467083,0.4351750457727235,0.33744497009197383,0.2462674843777073,0.1653179512341318,0.09785944470437807,0.04661121582168082,0.01363907965533867,0.0002721423470764539,0.007049224869314474,0.033697143162716214,0.07914172018006976,0.14155108594131016,0.2184095201754263,0.3066188609535246,0.4026233915337647,0.5025531712309631,0.6023800326474744,0.6980799570195493,0.7857952823320871,0.8619902055965987,0.9235933109980345,0.968121378604115,0.993779482910614,0.9995333462521179,0.985151030513754,0.9512122865519119,0.8990851844489793,0.8308709666360081,0.7493193468527809,0.6577176692426177,0.5597583955765675,0.45939026219394874,0.36065910652059563,0.26754477944402777,0.18380071760452416,0.11280264244043259,0.057412484925004614,0.01986302118694616,0.0016678693497682584,0.00356047561584677,0.02546454906490697,0.06649713693940945,0.1250042164524084,0.19862736841253376,0.28439884505397756,0.3788611998888504,0.47820665730505624,0.5784306039243569,0.6754930144864028,0.7654813051854266,0.8447680498441937,0.9101572013897687,0.9590129244464202,0.9893658458063017,0.9999924398235573,0.9904643487083642,0.9611656496207791,0.9132773725282093,0.8487298929112796,0.7701251183672713,0.680631605767609,0.5838568367943252,0.4837018004266192,0.3842037441539941,0.28937343261144644,0.20303347373851932,0.12866422953039902,0.06926352271628777,0.027225794585991503,0.004245585109804939,0.0012492260667610333,0.018357500629249013,0.054880774595833015,0.10934679553191118,0.17956003923562303,0.2626902112739914,0.35538633609418546,0.45391183478028574,0.5542951464738449,0.6524898219116513,0.7445376357137019,0.8267281423681011,0.8957482442146328,0.9488157423444408,0.983791486981687,0.9992656065677232,0.9946143396551483,0.9700251787190872,0.9264893123393657,0.865761670408798,0.7902901829448863,0.7031171040801703,0.6077563788598485,0.5080519961880826,0.40802303771284343,0.3117016687263403,0.22297060166347882,0.14540658404213108,0.08213621984322722,0.03570993616738927,0.007999175570195971,0.00012095825063640486,0.012392854989443647,0.04432018587739761,0.09461596085240431,0.16125275824293284,0.2415444500944865,0.3322544799330954,0.4297263282914917,0.5300309069345425,0.6291249403266789,0.7230139499869858,0.8079132718357305,0.8804006159271364,0.9375540188875349,0.9770696282000243,0.9973545704527982,0.997591160034081,0.9777698600226472,0.9386896666208797,0.881925901634059,0.80976671128027,0.7251208310625913,0.6314003346998733,0.5323830935041288,0.4320604904644715,0.33447652767953195,0.24356481271462938,0.16298999496047084,0.09600004369042137,0.045295322484666056,0.012919737629072059,0.00017834829408314157,0.007584759625969439,0.034840419333806216,0.08084665232627608,0.14374894828233659,0.221011716924715,0.3095204976128568,0.4057075031880675,0.505695437401827,0.605453788649188,0.7009612998098232,0.7883680650413745,0.8641507194059654,0.9252544656395024,0.9692162129677176,0.9942638642453077,0.9993877491561021,0.9843813240030159,0.9498494974803267,0.8971842468164649,0.8285085072000555,0.7465905963054266,0.6547326234632602,0.5566373817001209,0.45625908822667705,0.3576439900217625,0.2647672596986148,0.18137275637734518,0.11082211079938487,0.055959218060486704,0.018995600256876966,0.0014212600742566917,0.003944618809814726,0.026463959923969216,0.06807152923207693,0.1270901264571731,0.20114071313936116,0.2872383116277911,0.381912329469463,0.481346458920864,0.5815325122357016,0.6784319916320466,0.7681388810561197,0.8470370976103354,0.9119462557818014,0.9602498687180214,0.9900008187589115,0.999999845710304,0.9898438889980972,0.9599423350318758,0.9115005148469904,0.8464711172349018,0.7674754758975851,0.6776979035389078,0.5807573322841115,0.4805614345990411,0.38114910509190786,0.28652765275371983,0.20051126641360817,0.12656726486451725,0.06767632931273859,0.026212352178700438,0.0038467455417327545,0.0014810665528244837,0.019210675684142198,0.05632089275035651,0.1113158056523953,0.18197857056397393,0.2654607728612569,0.35839724665883704,0.4570417245784384,0.5574178497110381,0.6554794624836053,0.7472737012694256,0.8291003421603618,0.8976609549178702,0.9501918626289002,0.9845755454665219,0.9994259978712885,0.994144598407244,0.9689442401799142,0.924840749119537,0.8636119360583866,0.7877259332120214,0.7002417038197444,0.604685735398183,0.5049098871009031,0.4049361213539324,0.308794378631691,0.2203601306379525,0.14319816011996644,0.08041886454800251,0.03455287605631546,0.007449051712959065,0.00019994612877982654,0.013097770603204162,0.045622614092635294,0.09646340081413934,0.16357073968367702,0.24423953522921654,0.33521802993465827,0.4328388825192119,0.5331669983905067,0.6321581532277805,0.7258220155824759,0.8103829970583731,0.8824324462031281,0.939066051179549,0.978000912516991,0.9976675667427274,0.9972732514228675,0.9768338613999679,0.9371733080722924,0.8798903075419668,0.807293936401337,0.7223105529021532,0.6283658355136867,0.5292466938930144,0.42894861863331946,0.33151462311886215,0.240872269737327,0.1606753499195177,0.09415659988054281,0.0439973890885591,0.012219634315683903,0.00010429621378577059,0.00813974381662902,0.036002068393936604,0.08256814020576331,0.14596088183955086,0.22362493316279974,0.3124296578380907,0.4087953392106072,0.5088374786141379,0.6085233794335222,0.7038347050238027,0.7909294577789874,0.8662968499777401,0.9268988235655538,0.9702925142132892,0.9947287231289832,0.9992224272256849,0.983592485382172,0.9484689402379132,0.8952676211869826,0.826133072323826,0.7438521059142884,0.6517414660494211,0.5535141307584625,0.4531296419394349,0.35463449630542687,0.26199903118405055,0.17895738029991298,0.10885695091991843,0.054523489933990144,0.018147178055027968,0.0011943436788710016,0.004348355216195143,0.027482074525750855,0.06966298185023007,0.12919076566891774,0.2036658622205476,0.29008618187002466,0.3849681232809259,0.48448699731484696,0.5846312001730889,0.6813639210648074,0.770785865968116,0.8492924380932829,0.9137190391065309,0.9614686340245633,0.9906164376424249,0.9999875025860399,0.9892040814171565,0.9587008536248891,0.9097074037043427,0.8441986566305031,0.7648152686723777,0.6747571825923603,0.5776546380180807,0.4774218365565274,0.37809916040656216,0.28369030463404177,0.19800088830494145,0.12448505005762045,0.066106211844295,0.025217623452131133,0.003467503051881815,0.0017325975567750174,0.020082840972222515,0.057778535357435934,0.11330016803450227,0.18440966311360207,0.2682405982869393,0.36141375025393874,0.46017331114402327,0.5605382850560674,0.6584629619224314,0.7499999999999881,0.8314595431360923,0.8995579587951239,0.9515502012197564,0.985340464169892,0.9995666628297022,0.9936553394190789,0.967844779265081,0.923175405525281,0.8614478397512664,0.7851503188704272,0.6973583944056511,0.6016109570557042,0.5017675840828351,0.4018529598313801,0.3058946407832154,0.21776070483755244,0.14100382916903947,0.07871808188280399,0.033414200191676235,0.006918382649927279,0.00029867512654974115,0.013821917897871572,0.04694298932141738,0.09832677967827386,0.16590200941881206,0.24694472239958226,0.33818808850008497,0.43595408947907605,0.5363017798152624,0.6351861461415973,0.7286211616523203,0.8128404627627577,0.8844491711492588,0.9405607412256671,0.9789133167375546,0.9979609061420808,0.9969357014957551,0.9758790287771273,0.9356396820374135,0.8778397085295115,0.8048090240159691,0.719491493911866,0.6253262661293651,0.5261091390950123,0.42583955319205924,0.3285593733993455,0.23818996179600338,0.15837410753518066,0.09232918608718244,0.04271746689920064,0.01153879736785357,4.998903109826314e-5,0.008714155520518685,0.037182044460232044,0.08430611582311309,0.1481867992460057,0.2262490656727053,0.31534622672308954,0.41188677763795867,0.5119791707633877,0.611588683757703,0.7067000591676431,0.7934793593749012,0.8684285125440134,0.9285263198272531,0.9713502398290508,0.9951740412006324,0.9990373869907607,0.9827845458088079,0.9470706693539503,0.893335383263468,0.8237447558323706,0.741103983844329,0.648744315145992,0.5503887661138226,0.45000204693918466,0.3516307442407427,0.2592402032398819,0.17655468477487812,0.10690724042202054,0.0531053572539017,0.0173177880924279,0.0009871291263653381,0.004771668888196967,0.028518852656703453,0.07127143193467639,0.1313060511164757,0.20620271591762251,0.29294234329544055,0.38802846062540436,0.4876281484419407,0.5877265453444646,0.6842886869791831,0.773422155370679,0.8515339822115923,0.9154754813425088,0.9626691722272229,0.9912126781410953,0.9999554109382947,0.9885449512366613,0.9574412544358886,0.9078981099246641,0.8419126008557799,0.7621446017646534,0.6718095590806364,0.5745488765464588,0.47428313030709995,0.375054030564735,0.28086150032213675,0.19550243856750826,0.1224176673530249,0.0645532323275464,0.024241647696126023,0.003107872619579566,0.0020038091436337946,0.02097396204465979,0.05925364484306722,0.11529980429978298,0.18685322086116368,0.27102957775341147,0.3644357277334602,0.4633064707855553,0.5636563292578143,0.661440202385726,0.7527164242220477,0.8338056521114384,0.9014391809184268,0.9528907044653238,0.9860862128789982,0.9996875958869802,0.9931465820154319,0.9667268394011616,0.9214933473343735,0.8592694669650264,0.7825634416517833,0.6944672897229178,0.5985321652801953,0.4986252112487131,0.39877367492396393,0.3030025697148453,0.21517242693446448,0.13882367786116884,0.07703393902523437,0.032293953548914234,0.006407189341483099,0.0004171413443429528,0.014565268271060972,0.048281259411494026,0.10020602384498023,0.16824647536785048,0.2496599047559473,0.341164538317941,0.4390718261264767,0.5394351273910486,0.6382087994683894,0.731411277635688,0.815285571883853,0.8864507111088847,0.9420380299885436,0.9798068048235504,0.9982345770645309,0.9965785235853082,0.9749053998681244,0.9340888490914847,0.8757741855913139,0.802312072273366,0.7166637654390691,0.6222817466038829,0.522970553037327,0.42273341694265,0.3256108952475898,0.23551799483651298,0.15608635870205173,0.09051787448957599,0.04145560647096047,0.010877253677317844,1.5428891046720405e-5,0.00930797204949485,0.03838030092596795,0.08606051053172059,0.15042661258228918,0.22888401080639165,0.3182700890691553,0.41498169636439536,0.5151203897589409,0.6146495805482493,0.7095572490654755,0.7960176691130503,0.8705456229082851,0.9301368901417125,0.972389348036915,0.9955998008710585,0.9988326357600528,0.9819575371949305,0.9456547400574016,0.8913876093655295,0.8213436520594743,0.7383463386409426,0.6457412891345149,0.5472614112119891,0.44687642675979483,0.34863285247001163,0.2564908848344019,0.17416476470396874,0.1049730563153527,0.051704876033706826,0.016507463128349664,0.0007996246013023955,0.005214543105764358,0.029574253366152103,0.07289681595476344,0.13343589925022975,0.20875117402988624,0.29580668309125135,0.3910932206255755,0.4907697882328789,0.5908184254897232,0.6872061738527094,0.7760476451356078,0.8537616414286565,0.9172155131137036,0.9638514359070793,0.9917895167046031,0.9999035720346252,0.9878665244909723,0.9561635872165775,0.9060727049714774,0.8396130402054516,0.7594635806604806,0.6688551494290572,0.5714401705407608,0.4711454398234856,0.372013835843083,0.2780413515501885,0.19301601588517325,0.12036519840833976,0.0630174521021305,0.023284463459782412,0.00276786844952448,0.0022946906010751222,0.021884003703931232,0.06074616294329871,0.11731463546656279,0.18930914729090914,0.27382760110145443,0.3674630597352315,0.4664410797493312,0.5667718591597046,0.6644110662784111,0.7554228666421257,0.8361385764197076,0.9033045469832459,0.9542133194183531,0.9868127621382397,0.9997887922665012,0.9926183462912184,0.965590464744568,0.919794640984814,0.8570769037410899,0.7799654037326313,0.6915685039645487,0.5954494816778375,0.4954828927160158,0.39569838825741244,0.30011827965771565,0.2125953991606246,0.13665779230800595,0.07536650249561039,0.03119218037557986,0.005915491978759901,0.0005553401029782523,0.015327792361890524,0.049637371503839345,0.10210105908784178,0.17060404492894338,0.2523849750539459,0.3441472618242962,0.44219196931698745,0.5425669173568242,0.6412259938193056,0.7341922533284826,0.8177182278446554,0.8884369870250941,0.9434978591181897,0.9806813414839597,0.9984885687006095,0.9962017317993475,0.9739130131293958,0.9325208704893375,0.8736938203114788,0.7998031797981904,0.71382747917344,0.6192323971897902,0.5198310596879662,0.41963033257138155,0.3226693051226593,0.23285647439631024,0.15381219378169175,0.08872273663096286,0.04021185764485685,0.01023502937375187,6.171586889314185e-7,0.009921169948977127,0.039596790462380516,0.08783125503645156,0.1526802333801774,0.23152966448869383,0.32120112938944667,0.4180799731466974,0.5182610115288364,0.6177059489057409,0.7124061618639154,0.7985442867351666,0.8726480974488766,0.9317304708945848,0.9734097977941457,0.9960059853235979,0.9986081816208336,0.9811114922057615,0.9442212082746847,0.8894243764264161,0.8189298558439944,0.735579279225744,0.6427325066286002,0.5441321895773189,0.44375290485711816,0.34564093940403834,0.2537511845602954,0.17178771448431895,0.10305447499643755,0.05032210158966055,0.015716235169029036,0.0006318375097442708,0.005676960376234441,0.030648234967829424,0.07453906971101742,0.13558022594539448,0.21131113589822992,0.29867908812169175,0.39416228222943017,0.49391179259900886,0.593906718485719,0.6901162664503635,0.7786622315612292,0.8559753277562856,0.9189390656922969,0.9650153783670579,0.9923469305489563,0.999831987922566,0.9871688279766125,0.9548679024322876,0.9042312609446984,0.8373000655076536,0.7567723112549108,0.6658940703310094,0.5683286427887629,0.468008889038262,0.36897869632333485,0.2752299697085043,0.19054171846675566,0.11832772429202565,0.06149893182834032,0.02234610855001773,0.002447503971209797,0.0026052304398518356,0.022812930005188692,0.06225603070661273,0.11934458195295311,0.19177734539859448,0.27663455781464635,0.37049562668561714,0.4695770142244871,0.5698847517044177,0.6673754362571758,0.7581192203610669,0.8384582239149969,0.9051539833112714,0.9555179938381477,0.9875200832503519,0.9998702479712075,0.9920706531107107,0.9644357001798758,0.9180793535721717,0.8548702366813743,0.7773563077304089,0.6886621516268435,0.5923630280086011,0.4923407526001765,0.3926272212994757,0.297241884535627,0.21002972330352887,0.1345062580578117,0.0737158381543897,0.030108924189537534,0.005443309982836764,0.0007132659438758848,0.01610946005215419,0.05101127203469763,0.10401181055670056,0.1729746249827273,0.2551198256586829,0.34713614120742203,0.4453143958110717,0.5456970260130559,0.644237610021073,0.736963978887669,0.8201383345600035,0.8904079204439108,0.944940170954225,0.9815368921762992,0.9987228710181499,0.9958053410204113,0.9729019077582579,0.9309358081630588,0.8715986948603547,0.7972824456867518,0.7109827471427239,0.6161783383303943,0.5166907830507314,0.4165304226440006,0.3197347192115549,0.23020550560023262,0.1515517025991343,0.08694384341577582,0.038986269546540164,0.009612149823747251,5.5544190592504705e-6,0.010553724998859648,0.040831465020502444,0.08961827939636308,0.15494757262609926,0.23418592222149226,0.32413923191365923,0.4211814856090086,0.5214009120246597,0.6207576681096361,0.7152466850364948,0.8010591124448441,0.874735853122167,0.9333069991425342,0.9744115487949928,0.9963925785147589,0.9983640334385979,0.9802464442584189,0.9427701306274805,0.8874457619899518,0.8165034625261796,0.7328029148921029,0.6397180864692695,0.5410012248078866,0.4406316046041296,0.34265512321753444,0.2510212106303127,0.1694236280047503,0.10115157224543952,0.04895708853862868,0.014944135466422204,0.0004837744789512599,0.00615890243503181,0.03174075504158297,0.07619812833765804,0.13773894650524193,0.21388250040921536,0.3015594449323834,0.39723552421510977,0.497054037437363,0.5969913023509216,0.6930188498292348,0.7812658113764719,0.8581749537582513,0.9206460710013339,0.9661609536337136,0.9928848976574037,0.9997406614295492,0.9864518892512164,0.9535542512600267,0.9023738505777545,0.834973768120319,0.7540708998478194,0.6629264387432966,0.5652144161897088,0.46487360183904775,0.3659487318874941,0.27242746584119115,0.18807964404211724,0.1163053254803233,0.05999773148472792,0.021426620029993515,0.002146791838405493,0.0029354163942535982,0.023760704257652643,0.06378318849620762,0.12138956358007663,0.19425771769523542,0.2794503370237149,0.3735333088041564,0.4727141503477902,0.5729948839388171,0.6703331952352202,0.7608053788782245,0.8407645029757691,0.9069874168534041,0.9568046761926448,0.9882081482775351,0.9999319597837599,0.9915035241067158,0.9632625913180045,0.91634755284692,0.8526495529449303,0.7747362566992436,0.6857483475050326,0.5892729261812968,0.48919891500956725,0.3895602953552391,0.29437349796050616,0.20747550070234183,0.13236916009193023,0.0720820111995839,0.0290442277772871,0.0049906620039744665,0.0008909126292747094,0.016910240467521764,0.05240290673769277,0.10593820278059507,0.17535812189597166,0.25786434854891077,0.3501310584124988,0.4484389822790068,0.5488253297265767,0.6472435291207993,0.7397263448354856,0.8225457964404724,0.8923634335173214,0.9463649085281796,0.9823734231079984,0.9989374747626688,0.9953893669051525,0.9718721236913896,0.92933372471948,0.8694888919912593,0.7947499695031149,0.7081296817082434,0.6131196906550306,0.5135498471603624,0.4134338096008135,0.3168072534247043,0.2275651931563123,0.14930497443935797,0.08518126510677593,0.037778890584314384,0.009008639629827397,3.0240477145559996e-5,0.011205612214450045,0.0420842758331324,0.09142151302751372,0.15722854076460163,0.23685267908782814,0.3270842805924924,0.4242861112477115,0.5245399672265418,0.6238046176230114,0.7180787063881582,0.8035620469113879,0.8768088074659112,0.9348664126158086,0.9753945614722519,0.9967595651748762,0.9981002008567228,0.979362427520588,0.9413015644305165,0.8854518442075263,0.8140645679437637,0.7300173553009781,0.6366981477201663,0.5378686405707026,0.4375126492860675,0.3396755218443429,0.24830107087306996,0.1670725986420316,0.09926442322329382,0.04760989079593736,0.014191194516939287,0.0003554413571225101,0.0066603502463969955,0.0328517704350077,0.07787392630512358,0.1399119756645828,0.2164651659989758,0.30444763975493383,0.40031282519554157,0.5001963986354614,0.6000720552503598,0.6959138093429724,0.7838582817450868,0.8603604325536305,0.9223364616174763,0.9672881164590756,0.9934033967812999,0.9996295961627912,0.9857157366324576,0.9522226855864337,0.9005005472346957,0.8326342399276425,0.7513594531396096,0.6599523718815461,0.5620976137493989,0.46173970206350967,0.36292406221325435,0.26963395064160467,0.18562988985838008,0.11429808185398288,0.05851391036578302,0.0205260342177071,0.0018657439286470234,0.003285235422582855,0.02472728902611593,0.06532757599233896,0.12344949957516055,0.19675016621100205,0.2822748275109037,0.3765759861084046,0.47585236420851623,0.5761021330187797,0.6732842263869054,0.7634812360955932,0.8430573225085662,0.9088047751926149,0.9580733156604089,0.9888769300425826,0.9999739252666618,0.9909169816797091,0.9620711844944589,0.9145993072117672,0.8504149402443701,0.7721053541260248,0.6828272066886243,0.5861792982489282,0.48605750404056824,0.3864977315622208,0.29151323322799716,0.20493283224383518,0.1302465828215495,0.07046508616413105,0.027998133192229435,0.004557565920880136,0.001088273142481444,0.017730101978733814,0.05381222064598956,0.1078801596708367,0.17775444152521236,0.2606184353214078,0.3531318951461303,0.45156560530579787,0.5519517049355538,0.6502436323905753,0.7424792420639457,0.8249405183960287,0.8943034490064212,0.9477720155656946,0.9831909012377265,0.9991323714577423,0.9949538258837327,0.9708237016032375,0.9277146834377623,0.8673644950372779,0.7922058512750765,0.7052683955604879,0.6100565749742417,0.5104083760776811,0.41034061575200415,0.31388702339121166,0.22493564135172434,0.147072098043678,0.08343507132237338,0.03658976844728584,0.008424522629453202,7.467435789715315e-5,0.011876805847493399,0.0433551734166947,0.09324088470572811,0.15952304770192682,0.23952982975603532,0.3300361591023393,0.4273937274361825,0.5276780531479589,0.6268466770973784,0.7209021140596162,0.8060529912738295,0.8788668786024785,0.9364086497206479,0.9763587969988634,0.9971069308086908,0.9978166942960736,0.9784594769091963,0.9398155676892572,0.8834427018349813,0.8116132684283104,0.7272227104764721,0.633672809662948,0.5347345605966438,0.4343961620955144,0.3367022529728808,0.24559087272875257,0.16473471925720617,0.09739310246865573,0.04628056157325544,0.013457442060281266,0.0002468432131632059,0.007181284004123767,0.0339812372651922,0.07956639742268479,0.1420992275930173,0.2190590306573208,0.30734355851126616,0.40339406362342795,0.5033387520761998,0.6031488555003295,0.6988010306463601,0.786439540269567,0.862531677820332,0.9240101707736099,0.9683968223224233,0.9939024074409524,0.9994987965091523,0.9849603991969171,0.9508732580057383,0.8986114249073086,0.8302815733363678,0.7486380782271455,0.6569719872155325,0.5589783585754169,0.4586073134945071,0.3599048067690878,0.266849534448129,0.1831925526759966,0.11230607269521359,0.057047527079502725,0.01964438668451951,0.0016043713427763007,0.003654673707674805,0.02571264613237373,0.06688913219475412,0.125524308574801,0.1992545924990663,0.28510791771441013,0.37962353841857577,0.47899153185338683,0.5792063762140959,0.6762284131522823,0.7661466863220971,0.8453365919514877,0.9106059865468386,0.9593238621326863,0.9895264021299157,0.99999614276236,0.9903110489969689,0.960861526767453,0.9128346857190068,0.848166486842523,0.7694637039262081,0.6798988445569585,0.5830822664036752,0.4829166437727587,0.383439650885691,0.28866120331294726,0.20240181835842597,0.1281386100842798,0.06886512691339902,0.026970681753063164,0.0041440388399948125,0.001305339688142504,0.018569012202881652,0.05523915809445584,0.10983760452395452,0.1801634892205563,0.2633819771951045,0.35613853288119823,0.45469414139596037,0.5550760281543333,0.6532378013322125,0.7452225618389953,0.827322405839884,0.8962278902844034,0.9491614364888271,0.9839892942767096,0.9993075534053324,0.9944987351591682,0.9697566829044152,0.9260787482668391,0.8652255879078945,0.7896501914903514,0.7023990017146159,0.6069891122750897,0.507266493884584,0.407250963272614,0.31097414445444904,0.2223169540485721,0.14485316160636308,0.08170533103376626,0.035418950103430824,0.007859821894101948,0.0001388543062629255,0.012567279387154628,0.04464410757324755,0.09507632256939341,0.16183100280955093,0.24221726848394337,0.33299475084978175,0.4305042114296839,0.530815045840679,0.6298837263773472,0.7237167965318035,0.8085318471447518,0.8809099852421234,0.9379336495417113,0.9773042172894131,0.9974346616959477,0.9975135249546043,0.9775376280890199,0.9383121990976597,0.8814184142294728,0.8091496608013096,0.7244190908015812,0.6306421917925208,0.5315991086757292,0.43128226612758813,0.33373543404141714,0.24289072324483502,0.162410082191914,0.09553768389503775,0.044969153376476834,0.01274290707821929,0.00015798433648661625,0.007721683132353829,0.03512911092040688,0.08127547484106323,0.14430061589841375,0.2216639919316778,0.3102470868183347,0.4064791177958872,0.5064809736427874,0.6062215815732759,0.7016803996998384,0.7890094849952984,0.8646886037984112,0.9256671323615131,0.9694870274320618,0.9943819099264207,0.9993482676349614,0.9841859067789425,0.9495060218176742,0.8967065582122329,0.8279158612722105,0.7459068825993557,0.6539854024645912,0.5558567738722172,0.45547655985525926,0.35689108480965603,0.26407432723970503,0.1807677287650108,0.11032937668444764,0.055598639545154205,0.01878171225378128,0.00136268440449544,0.004043716657444241,0.026716736656761886,0.06846779542503523,0.12761390862811206,0.20177089763952993,0.2879494957327403,0.3826758453623306,0.48213152929144387,0.5823074909132547,0.6791656392417679,0.76880162427768,0.8476022212778813,0.9123909797717589,0.9605562662153414,0.9901565388866754,0.999998611393307,0.9896857499916394,0.9596336659161023,0.9110537580677072,0.845904281548863,0.7668114104398016,0.6769633767745695,0.5799819529722287,0.4797764582639308,0.3803861741138179,0.28581752086490575,0.19988255901617014,0.12604532514091016,0.06728219664263657,0.025961914042088696,0.0037500970948261547,0.001542103692556529,0.019426938004651062,0.05668366272187064,0.11181046002471606,0.18258516982933892,0.2661548650155791,0.3591508528614159,0.457824466978483,0.5581981759782545,0.6562259176819306,0.7479561958049146,0.8296913646921509,0.8981366813396204,0.9505331164181726,0.9847685706899922,0.9994630136860974,0.9940241127066439,0.9686711097400615,0.9244259838229409,0.8630722550857508,0.7870830910924482,0.6995216135060504,0.6039174237163278,0.50412432467927,0.40416497419784936,0.308068731667382,0.21970923467987413,0.14264825277101528,0.07999211256230737,0.034266481797780135,0.007314559728341219,0.0002227777872611525,0.013277005561092459,0.045951027392411026,0.09692775412232202,0.16415231492779975,0.24491488912300546,0.3359599389762682,0.43361744037022676,0.5339508213996641,0.6329156455054483,0.7265226426303146,0.8109985166142153,0.8829380466861404,0.9394413518445004,0.9782307850016622,0.9977427448919203,0.9971907048069055,0.9765969174712752,0.9367915180358279,0.8793790613463954,0.8066738423704362,0.7216066070137644,0.6276064138123467,0.5284624086521322,0.4281710843750722,0.3307751822334607,0.24020072907193235,0.16009877926473354,0.09369824078781758,0.043675718003641506,0.01204761779348218,8.886823684417511e-5,0.008281526286384011,0.03629534606189866,0.08300109105506459,0.14651605363024667,0.22427994693120906,0.31315810999245286,0.40956786585935795,0.5096229392236563,0.6092901121025666,0.7045518027739901,0.791568014414499,0.8668311252935369,0.9273072809344569,0.9705586887270325,0.9948418852982973,0.9991780154858128,0.9833922899694567,0.9481210310253799,0.8947860223879498,0.8255371971761523,0.7431659741331046,0.6509927355929624,0.5527329829362454,0.45234756480438043,0.3538830153710453,0.2613084386315808,0.17835551390118942,0.1083680718972918,0.05416730499094036,0.01793804499943452,0.0011406926599645262,0.0044523489054594245,0.027739520939671636,0.07006350332909855,0.12971821719999438,0.20429898224328652,0.29079944932913576,0.38573278637957276,0.4852722324989682,0.5854053546283289,0.6820957886407055,0.7714459450975056,0.8498541209998529,0.9141596843636487,0.9617704792308409,0.9907673154236929,0.9999813310619965,0.9890411093618064,0.958387650438489,0.9092565946010096,0.8436284137160521,0.7641485784271722,0.6740209192866776,0.5768784804108675,0.4766370715452532,0.37733742185293156,0.28298229820375853,0.19737515372285935,0.12396681067208787,0.06571635787447411,0.02497186990364869,0.003375756245297956,0.0017985558040110594,0.02030384549766423,0.0581456774731407,0.11379864824920277,0.18501938769994486,0.26893698925918874,0.36216873610607236,0.46095645841164107,0.561318025088637,0.6592078634150111,0.7506800359885359,0.8320473013836218,0.9000297467785715,0.9518870011750735,0.9855286996976845,0.9995987461596616,0.9935299772728163,0.9675670249881826,0.92275645538702,0.8609045816232502,0.7845046514767895,0.6966363445859592,0.6008416306236091,0.5009819925712494,0.40108277041820883,0.30517089978812395,0.2171125862454104,0.14045745862720177,0.0782954835767547,0.033132409050563805,0.006788757668953593,0.0003264414860794651,0.014005956336514302,0.04727588125342724,0.09879510623660082,0.16648689236940528,0.24762258512249713,0.33893160636270336,0.43673329129137023,0.5370852559679442,0.6359423147268364,0.7293195415297444,0.8134529022536361,0.8849509828300826,0.9409316970777413,0.9791384635380032,0.9980311682279278,0.9968482466037405,0.975637382212176,0.9352535845676795,0.8773247237361727,0.804185910925643,0.7187853702005965,0.6245655956296607,0.5253245844193553,0.42506273972351927,0.3278216144731522,0.23752099645951735,0.1578009017676001,0.091874845801382,0.042400306542911326,0.011371601668629161,3.9497644185537695e-5,0.008860791353512198,0.03747989662567469,0.08474317790623076,0.14874545328308825,0.22690679233082273,0.3160765130539408,0.41266018581434616,0.5127645247173427,0.6123543258872637,0.7074151264540447,0.7941150274702946,0.8689591576803388,0.9289305517098003,0.971611763878816,0.9952823153884607,0.9989880467863324,0.9825795801147632,0.9467183403332771,0.8928498932918493,0.8231456750007438,0.7404154610888826,0.647994104805091,0.5496071091511201,0.4492204519310171,0.3508807172660987,0.2585519778709099,0.17595600336228595,0.10642223580142957,0.05275357995177038,0.01711341824467638,0.0009384048774205289,0.004880554311550767,0.028780958583143668,0.0716761928796098,0.1318371511744032,0.20683874645595246,0.29365766593604137,0.388794240727124,0.4884135174243572,0.5884998449997773,0.6850187456139575,0.7740795443361059,0.8520922021717927,0.9159120304621573,0.962966453220151,0.9913587076164978,0.9999443024509678,0.9883771525695046,0.9571235295497816,0.9074432663033382,0.841338973236406,0.7614753130649647,0.6710715883145559,0.5737719713006536,0.473498607616323,0.3742935145227462,0.2801556473152177,0.19487970151608508,0.12190314877503677,0.06416767245646299,0.024000588442542714,0.00302103107713958,0.00207468589315124,0.021199700045797965,0.0596251446015591,0.11580209066789482,0.18746604668555072,0.2717282400375043,0.3651920634147018,0.4640899919879475,0.5644354522575564,0.6621835207504527,0.7533939748035139,0.834390122859421,0.9019070118289039,0.9532230372837447,0.9862696512761875,0.9997147454648591,0.9930163483750636,0.9664444722579542,0.9210702289021584,0.8587226531392433,0.7819149744866767,0.6937433089168159,0.5977618544847108,0.4978396216764455,0.3980044736746862,0.30228076327532777,0.21452711130769248,0.1382808657069871,0.07661551109061593,0.03201677665542535,0.006282436484088771,0.0004498413082053565,0.014754102921297418,0.04861861682717378,0.10067830515550258,0.1688346429231452,0.2503402495337584,0.3419096356340554,0.4398516411231456,0.5402182257415208,0.6389636144940286,0.7321073827580731,0.8158949071195953,0.8869487141669394,0.942404626375728,0.9800272170469205,0.9982999203118155,0.9964861638715337,0.9746590602114846,0.9336984594385547,0.8752554825411049,0.8016859647353368,0.7159554917953951,0.6215198573508243,0.5221857599152712,0.42195735494643977,0.3248748474206037,0.23485163125176334,0.1555165404621563,0.09006757095624657,0.04114296937052392,0.010714885404969454,9.874508552332184e-6,0.009459455453903032,0.03868271582431693,0.08650166658556552,0.15098872680002967,0.22954442437529815,0.3190021807316031,0.4157559555203099,0.5159056060373985,0.6154141018969551,0.7102702576443327,0.796650423560674,0.8710726169057018,0.93053688057154,0.9726462112930163,0.9957031828007874,0.9987783690399097,0.9817478093153071,0.9452980051448826,0.890898247397221,0.8207413892064067,0.7376554521065602,0.644989628541012,0.5464792759826953,0.446095344749977,0.3478843090796828,0.2558050538324783,0.17356929192424836,0.10449194525355943,0.05135752026699619,0.016307864560644036,0.0007558290468329121,0.0053283159624451515,0.029841008452431816,0.07330580037851003,0.13397062685760708,0.2093900899618411,0.2965240326595183,0.39186008748355755,0.49155525999303484,0.5915908398013221,0.6879343947104658,0.7767023179714908,0.8543163763938786,0.9176479488530598,0.9641441409446565,0.9919306921062596,0.999887527022778,0.9876939058397249,0.9558413531802634,0.9056138447975934,0.8390360505383163,0.7587917199418902,0.6681155003509942,0.5706625483425971,0.4703611904402931,0.3712545723516314,0.2773376798464415,0.19239630096129545,0.11985442096035093,0.06263620155863475,0.02304810802247742,0.0026859356012966518,0.002370483053382111,0.022114466264557653,0.061122005671080115,0.11782070814875051,0.18992505014793404,0.2745285071016038,0.36822071537181955,0.467224943938978,0.5675503343527862,0.665152772155646,0.7560979050546098,0.8367197365827049,0.903768402342332,0.9545411719733845,0.9869913961593685,0.9998110070199453,0.9924832463007163,0.9653034958880045,0.9193673709709905,0.8565265558156101,0.7793141624092548,0.6908426207678211,0.5946782169447432,0.4946973361123408,0.3949302055539551,0.2993984362837096,0.21195291198789834,0.1361185599815144,0.07495226145950423,0.03091962867765158,0.005795616172437568,0.0005929723795884967,0.015521415765123836,0.04997918107823446,0.10257727649636705,0.17119547385748557,0.25306777501438266,0.34489390916402735,0.44297236669685575,0.5433496069742381,0.6419794254716238,0.7348860562010574,0.8183244347577079,0.8889311617902469,0.9438600815606484,0.9808970104243984,0.998548990528404,0.9961044709118423,0.9736619901109949,0.932126204072843,0.8731714194921498,0.7991741025424728,0.7131170835727935,0.6184693192765026,0.5190460591172823,0.4188550527004221,0.32193499746732224,0.23219273888334985,0.15324578557618163,0.08827648763621787,0.03990375614883074,0.010077494941503728,0.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],73:[function(require,module,exports){
module.exports={"expected":[0.0,0.010077494941503728,0.03990375614883074,0.08827648763621787,0.15324578557618163,0.23219273888334985,0.32193499746732224,0.4188550527004221,0.5190460591172823,0.6184693192765026,0.7131170835727935,0.7991741025424728,0.8731714194921498,0.932126204072843,0.9736619901109949,0.9961044709118423,0.998548990528404,0.9808970104243984,0.9438600815606484,0.8889311617902469,0.8183244347577079,0.7348860562010574,0.6419794254716238,0.5433496069742381,0.44297236669685575,0.34489390916402735,0.25306777501438266,0.17119547385748557,0.10257727649636705,0.04997918107823446,0.015521415765123836,0.0005929723795884967,0.005795616172437568,0.03091962867765158,0.07495226145950423,0.1361185599815144,0.21195291198789834,0.2993984362837096,0.3949302055539551,0.4946973361123408,0.5946782169447432,0.6908426207678211,0.7793141624092548,0.8565265558156101,0.9193673709709905,0.9653034958880045,0.9924832463007163,0.9998110070199453,0.9869913961593685,0.9545411719733845,0.903768402342332,0.8367197365827049,0.7560979050546098,0.665152772155646,0.5675503343527862,0.467224943938978,0.36822071537181955,0.2745285071016038,0.18992505014793404,0.11782070814875051,0.061122005671080115,0.022114466264557653,0.002370483053382111,0.0026859356012966518,0.02304810802247742,0.06263620155863475,0.11985442096035093,0.19239630096129545,0.2773376798464415,0.3712545723516314,0.4703611904402931,0.5706625483425971,0.6681155003509942,0.7587917199418902,0.8390360505383163,0.9056138447975934,0.9558413531802634,0.9876939058397249,0.999887527022778,0.9919306921062596,0.9641441409446565,0.9176479488530598,0.8543163763938786,0.7767023179714908,0.6879343947104658,0.5915908398013221,0.49155525999303484,0.39186008748355755,0.2965240326595183,0.2093900899618411,0.13397062685760708,0.07330580037851003,0.029841008452431816,0.0053283159624451515,0.0007558290468329121,0.016307864560644036,0.05135752026699619,0.10449194525355943,0.17356929192424836,0.2558050538324783,0.3478843090796828,0.446095344749977,0.5464792759826953,0.644989628541012,0.7376554521065602,0.8207413892064067,0.890898247397221,0.9452980051448826,0.9817478093153071,0.9987783690399097,0.9957031828007874,0.9726462112930163,0.93053688057154,0.8710726169057018,0.796650423560674,0.7102702576443327,0.6154141018969551,0.5159056060373985,0.4157559555203099,0.3190021807316031,0.22954442437529815,0.15098872680002967,0.08650166658556552,0.03868271582431693,0.009459455453903032,9.874508552332184e-6,0.010714885404969454,0.04114296937052392,0.09006757095624657,0.1555165404621563,0.23485163125176334,0.3248748474206037,0.42195735494643977,0.5221857599152712,0.6215198573508243,0.7159554917953951,0.8016859647353368,0.8752554825411049,0.9336984594385547,0.9746590602114846,0.9964861638715337,0.9982999203118155,0.9800272170469205,0.942404626375728,0.8869487141669394,0.8158949071195953,0.7321073827580731,0.6389636144940286,0.5402182257415208,0.4398516411231456,0.3419096356340554,0.2503402495337584,0.1688346429231452,0.10067830515550258,0.04861861682717378,0.014754102921297418,0.0004498413082053565,0.006282436484088771,0.03201677665542535,0.07661551109061593,0.1382808657069871,0.21452711130769248,0.30228076327532777,0.3980044736746862,0.4978396216764455,0.5977618544847108,0.6937433089168159,0.7819149744866767,0.8587226531392433,0.9210702289021584,0.9664444722579542,0.9930163483750636,0.9997147454648591,0.9862696512761875,0.9532230372837447,0.9019070118289039,0.834390122859421,0.7533939748035139,0.6621835207504527,0.5644354522575564,0.4640899919879475,0.3651920634147018,0.2717282400375043,0.18746604668555072,0.11580209066789482,0.0596251446015591,0.021199700045797965,0.00207468589315124,0.00302103107713958,0.024000588442542714,0.06416767245646299,0.12190314877503677,0.19487970151608508,0.2801556473152177,0.3742935145227462,0.473498607616323,0.5737719713006536,0.6710715883145559,0.7614753130649647,0.841338973236406,0.9074432663033382,0.9571235295497816,0.9883771525695046,0.9999443024509678,0.9913587076164978,0.962966453220151,0.9159120304621573,0.8520922021717927,0.7740795443361059,0.6850187456139575,0.5884998449997773,0.4884135174243572,0.388794240727124,0.29365766593604137,0.20683874645595246,0.1318371511744032,0.0716761928796098,0.028780958583143668,0.004880554311550767,0.0009384048774205289,0.01711341824467638,0.05275357995177038,0.10642223580142957,0.17595600336228595,0.2585519778709099,0.3508807172660987,0.4492204519310171,0.5496071091511201,0.647994104805091,0.7404154610888826,0.8231456750007438,0.8928498932918493,0.9467183403332771,0.9825795801147632,0.9989880467863324,0.9952823153884607,0.971611763878816,0.9289305517098003,0.8689591576803388,0.7941150274702946,0.7074151264540447,0.6123543258872637,0.5127645247173427,0.41266018581434616,0.3160765130539408,0.22690679233082273,0.14874545328308825,0.08474317790623076,0.03747989662567469,0.008860791353512198,3.9497644185537695e-5,0.011371601668629161,0.042400306542911326,0.091874845801382,0.1578009017676001,0.23752099645951735,0.3278216144731522,0.42506273972351927,0.5253245844193553,0.6245655956296607,0.7187853702005965,0.804185910925643,0.8773247237361727,0.9352535845676795,0.975637382212176,0.9968482466037405,0.9980311682279278,0.9791384635380032,0.9409316970777413,0.8849509828300826,0.8134529022536361,0.7293195415297444,0.6359423147268364,0.5370852559679442,0.43673329129137023,0.33893160636270336,0.24762258512249713,0.16648689236940528,0.09879510623660082,0.04727588125342724,0.014005956336514302,0.0003264414860794651,0.006788757668953593,0.033132409050563805,0.0782954835767547,0.14045745862720177,0.2171125862454104,0.30517089978812395,0.40108277041820883,0.5009819925712494,0.6008416306236091,0.6966363445859592,0.7845046514767895,0.8609045816232502,0.92275645538702,0.9675670249881826,0.9935299772728163,0.9995987461596616,0.9855286996976845,0.9518870011750735,0.9000297467785715,0.8320473013836218,0.7506800359885359,0.6592078634150111,0.561318025088637,0.46095645841164107,0.36216873610607236,0.26893698925918874,0.18501938769994486,0.11379864824920277,0.0581456774731407,0.02030384549766423,0.0017985558040110594,0.003375756245297956,0.02497186990364869,0.06571635787447411,0.12396681067208787,0.19737515372285935,0.28298229820375853,0.37733742185293156,0.4766370715452532,0.5768784804108675,0.6740209192866776,0.7641485784271722,0.8436284137160521,0.9092565946010096,0.958387650438489,0.9890411093618064,0.9999813310619965,0.9907673154236929,0.9617704792308409,0.9141596843636487,0.8498541209998529,0.7714459450975056,0.6820957886407055,0.5854053546283289,0.4852722324989682,0.38573278637957276,0.29079944932913576,0.20429898224328652,0.12971821719999438,0.07006350332909855,0.027739520939671636,0.0044523489054594245,0.0011406926599645262,0.01793804499943452,0.05416730499094036,0.1083680718972918,0.17835551390118942,0.2613084386315808,0.3538830153710453,0.45234756480438043,0.5527329829362454,0.6509927355929624,0.7431659741331046,0.8255371971761523,0.8947860223879498,0.9481210310253799,0.9833922899694567,0.9991780154858128,0.9948418852982973,0.9705586887270325,0.9273072809344569,0.8668311252935369,0.791568014414499,0.7045518027739901,0.6092901121025666,0.5096229392236563,0.40956786585935795,0.31315810999245286,0.22427994693120906,0.14651605363024667,0.08300109105506459,0.03629534606189866,0.008281526286384011,8.886823684417511e-5,0.01204761779348218,0.043675718003641506,0.09369824078781758,0.16009877926473354,0.24020072907193235,0.3307751822334607,0.4281710843750722,0.5284624086521322,0.6276064138123467,0.7216066070137644,0.8066738423704362,0.8793790613463954,0.9367915180358279,0.9765969174712752,0.9971907048069055,0.9977427448919203,0.9782307850016622,0.9394413518445004,0.8829380466861404,0.8109985166142153,0.7265226426303146,0.6329156455054483,0.5339508213996641,0.43361744037022676,0.3359599389762682,0.24491488912300546,0.16415231492779975,0.09692775412232202,0.045951027392411026,0.013277005561092459,0.0002227777872611525,0.007314559728341219,0.034266481797780135,0.07999211256230737,0.14264825277101528,0.21970923467987413,0.308068731667382,0.40416497419784936,0.50412432467927,0.6039174237163278,0.6995216135060504,0.7870830910924482,0.8630722550857508,0.9244259838229409,0.9686711097400615,0.9940241127066439,0.9994630136860974,0.9847685706899922,0.9505331164181726,0.8981366813396204,0.8296913646921509,0.7479561958049146,0.6562259176819306,0.5581981759782545,0.457824466978483,0.3591508528614159,0.2661548650155791,0.18258516982933892,0.11181046002471606,0.05668366272187064,0.019426938004651062,0.001542103692556529,0.0037500970948261547,0.025961914042088696,0.06728219664263657,0.12604532514091016,0.19988255901617014,0.28581752086490575,0.3803861741138179,0.4797764582639308,0.5799819529722287,0.6769633767745695,0.7668114104398016,0.845904281548863,0.9110537580677072,0.9596336659161023,0.9896857499916394,0.999998611393307,0.9901565388866754,0.9605562662153414,0.9123909797717589,0.8476022212778813,0.76880162427768,0.6791656392417679,0.5823074909132547,0.48213152929144387,0.3826758453623306,0.2879494957327403,0.20177089763952993,0.12761390862811206,0.06846779542503523,0.026716736656761886,0.004043716657444241,0.00136268440449544,0.01878171225378128,0.055598639545154205,0.11032937668444764,0.1807677287650108,0.26407432723970503,0.35689108480965603,0.45547655985525926,0.5558567738722172,0.6539854024645912,0.7459068825993557,0.8279158612722105,0.8967065582122329,0.9495060218176742,0.9841859067789425,0.9993482676349614,0.9943819099264207,0.9694870274320618,0.9256671323615131,0.8646886037984112,0.7890094849952984,0.7016803996998384,0.6062215815732759,0.5064809736427874,0.4064791177958872,0.3102470868183347,0.2216639919316778,0.14430061589841375,0.08127547484106323,0.03512911092040688,0.007721683132353829,0.00015798433648661625,0.01274290707821929,0.044969153376476834,0.09553768389503775,0.162410082191914,0.24289072324483502,0.33373543404141714,0.43128226612758813,0.5315991086757292,0.6306421917925208,0.7244190908015812,0.8091496608013096,0.8814184142294728,0.9383121990976597,0.9775376280890199,0.9975135249546043,0.9974346616959477,0.9773042172894131,0.9379336495417113,0.8809099852421234,0.8085318471447518,0.7237167965318035,0.6298837263773472,0.530815045840679,0.4305042114296839,0.33299475084978175,0.24221726848394337,0.16183100280955093,0.09507632256939341,0.04464410757324755,0.012567279387154628,0.0001388543062629255,0.007859821894101948,0.035418950103430824,0.08170533103376626,0.14485316160636308,0.2223169540485721,0.31097414445444904,0.407250963272614,0.507266493884584,0.6069891122750897,0.7023990017146159,0.7896501914903514,0.8652255879078945,0.9260787482668391,0.9697566829044152,0.9944987351591682,0.9993075534053324,0.9839892942767096,0.9491614364888271,0.8962278902844034,0.827322405839884,0.7452225618389953,0.6532378013322125,0.5550760281543333,0.45469414139596037,0.35613853288119823,0.2633819771951045,0.1801634892205563,0.10983760452395452,0.05523915809445584,0.018569012202881652,0.001305339688142504,0.0041440388399948125,0.026970681753063164,0.06886512691339902,0.1281386100842798,0.20240181835842597,0.28866120331294726,0.383439650885691,0.4829166437727587,0.5830822664036752,0.6798988445569585,0.7694637039262081,0.848166486842523,0.9128346857190068,0.960861526767453,0.9903110489969689,0.99999614276236,0.9895264021299157,0.9593238621326863,0.9106059865468386,0.8453365919514877,0.7661466863220971,0.6762284131522823,0.5792063762140959,0.47899153185338683,0.37962353841857577,0.28510791771441013,0.1992545924990663,0.125524308574801,0.06688913219475412,0.02571264613237373,0.003654673707674805,0.0016043713427763007,0.01964438668451951,0.057047527079502725,0.11230607269521359,0.1831925526759966,0.266849534448129,0.3599048067690878,0.4586073134945071,0.5589783585754169,0.6569719872155325,0.7486380782271455,0.8302815733363678,0.8986114249073086,0.9508732580057383,0.9849603991969171,0.9994987965091523,0.9939024074409524,0.9683968223224233,0.9240101707736099,0.862531677820332,0.786439540269567,0.6988010306463601,0.6031488555003295,0.5033387520761998,0.40339406362342795,0.30734355851126616,0.2190590306573208,0.1420992275930173,0.07956639742268479,0.0339812372651922,0.007181284004123767,0.0002468432131632059,0.013457442060281266,0.04628056157325544,0.09739310246865573,0.16473471925720617,0.24559087272875257,0.3367022529728808,0.4343961620955144,0.5347345605966438,0.633672809662948,0.7272227104764721,0.8116132684283104,0.8834427018349813,0.9398155676892572,0.9784594769091963,0.9978166942960736,0.9971069308086908,0.9763587969988634,0.9364086497206479,0.8788668786024785,0.8060529912738295,0.7209021140596162,0.6268466770973784,0.5276780531479589,0.4273937274361825,0.3300361591023393,0.23952982975603532,0.15952304770192682,0.09324088470572811,0.0433551734166947,0.011876805847493399,7.467435789715315e-5,0.008424522629453202,0.03658976844728584,0.08343507132237338,0.147072098043678,0.22493564135172434,0.31388702339121166,0.41034061575200415,0.5104083760776811,0.6100565749742417,0.7052683955604879,0.7922058512750765,0.8673644950372779,0.9277146834377623,0.9708237016032375,0.9949538258837327,0.9991323714577423,0.9831909012377265,0.9477720155656946,0.8943034490064212,0.8249405183960287,0.7424792420639457,0.6502436323905753,0.5519517049355538,0.45156560530579787,0.3531318951461303,0.2606184353214078,0.17775444152521236,0.1078801596708367,0.05381222064598956,0.017730101978733814,0.001088273142481444,0.004557565920880136,0.027998133192229435,0.07046508616413105,0.1302465828215495,0.20493283224383518,0.29151323322799716,0.3864977315622208,0.48605750404056824,0.5861792982489282,0.6828272066886243,0.7721053541260248,0.8504149402443701,0.9145993072117672,0.9620711844944589,0.9909169816797091,0.9999739252666618,0.9888769300425826,0.9580733156604089,0.9088047751926149,0.8430573225085662,0.7634812360955932,0.6732842263869054,0.5761021330187797,0.47585236420851623,0.3765759861084046,0.2822748275109037,0.19675016621100205,0.12344949957516055,0.06532757599233896,0.02472728902611593,0.003285235422582855,0.0018657439286470234,0.0205260342177071,0.05851391036578302,0.11429808185398288,0.18562988985838008,0.26963395064160467,0.36292406221325435,0.46173970206350967,0.5620976137493989,0.6599523718815461,0.7513594531396096,0.8326342399276425,0.9005005472346957,0.9522226855864337,0.9857157366324576,0.9996295961627912,0.9934033967812999,0.9672881164590756,0.9223364616174763,0.8603604325536305,0.7838582817450868,0.6959138093429724,0.6000720552503598,0.5001963986354614,0.40031282519554157,0.30444763975493383,0.2164651659989758,0.1399119756645828,0.07787392630512358,0.0328517704350077,0.0066603502463969955,0.0003554413571225101,0.014191194516939287,0.04760989079593736,0.09926442322329382,0.1670725986420316,0.24830107087306996,0.3396755218443429,0.4375126492860675,0.5378686405707026,0.6366981477201663,0.7300173553009781,0.8140645679437637,0.8854518442075263,0.9413015644305165,0.979362427520588,0.9981002008567228,0.9967595651748762,0.9753945614722519,0.9348664126158086,0.8768088074659112,0.8035620469113879,0.7180787063881582,0.6238046176230114,0.5245399672265418,0.4242861112477115,0.3270842805924924,0.23685267908782814,0.15722854076460163,0.09142151302751372,0.0420842758331324,0.011205612214450045,3.0240477145559996e-5,0.009008639629827397,0.037778890584314384,0.08518126510677593,0.14930497443935797,0.2275651931563123,0.3168072534247043,0.4134338096008135,0.5135498471603624,0.6131196906550306,0.7081296817082434,0.7947499695031149,0.8694888919912593,0.92933372471948,0.9718721236913896,0.9953893669051525,0.9989374747626688,0.9823734231079984,0.9463649085281796,0.8923634335173214,0.8225457964404724,0.7397263448354856,0.6472435291207993,0.5488253297265767,0.4484389822790068,0.3501310584124988,0.25786434854891077,0.17535812189597166,0.10593820278059507,0.05240290673769277,0.016910240467521764,0.0008909126292747094,0.0049906620039744665,0.0290442277772871,0.0720820111995839,0.13236916009193023,0.20747550070234183,0.29437349796050616,0.3895602953552391,0.48919891500956725,0.5892729261812968,0.6857483475050326,0.7747362566992436,0.8526495529449303,0.91634755284692,0.9632625913180045,0.9915035241067158,0.9999319597837599,0.9882081482775351,0.9568046761926448,0.9069874168534041,0.8407645029757691,0.7608053788782245,0.6703331952352202,0.5729948839388171,0.4727141503477902,0.3735333088041564,0.2794503370237149,0.19425771769523542,0.12138956358007663,0.06378318849620762,0.023760704257652643,0.0029354163942535982,0.002146791838405493,0.021426620029993515,0.05999773148472792,0.1163053254803233,0.18807964404211724,0.27242746584119115,0.3659487318874941,0.46487360183904775,0.5652144161897088,0.6629264387432966,0.7540708998478194,0.834973768120319,0.9023738505777545,0.9535542512600267,0.9864518892512164,0.9997406614295492,0.9928848976574037,0.9661609536337136,0.9206460710013339,0.8581749537582513,0.7812658113764719,0.6930188498292348,0.5969913023509216,0.497054037437363,0.39723552421510977,0.3015594449323834,0.21388250040921536,0.13773894650524193,0.07619812833765804,0.03174075504158297,0.00615890243503181,0.0004837744789512599,0.014944135466422204,0.04895708853862868,0.10115157224543952,0.1694236280047503,0.2510212106303127,0.34265512321753444,0.4406316046041296,0.5410012248078866,0.6397180864692695,0.7328029148921029,0.8165034625261796,0.8874457619899518,0.9427701306274805,0.9802464442584189,0.9983640334385979,0.9963925785147589,0.9744115487949928,0.9333069991425342,0.874735853122167,0.8010591124448441,0.7152466850364948,0.6207576681096361,0.5214009120246597,0.4211814856090086,0.32413923191365923,0.23418592222149226,0.15494757262609926,0.08961827939636308,0.040831465020502444,0.010553724998859648,5.5544190592504705e-6,0.009612149823747251,0.038986269546540164,0.08694384341577582,0.1515517025991343,0.23020550560023262,0.3197347192115549,0.4165304226440006,0.5166907830507314,0.6161783383303943,0.7109827471427239,0.7972824456867518,0.8715986948603547,0.9309358081630588,0.9729019077582579,0.9958053410204113,0.9987228710181499,0.9815368921762992,0.944940170954225,0.8904079204439108,0.8201383345600035,0.736963978887669,0.644237610021073,0.5456970260130559,0.4453143958110717,0.34713614120742203,0.2551198256586829,0.1729746249827273,0.10401181055670056,0.05101127203469763,0.01610946005215419,0.0007132659438758848,0.005443309982836764,0.030108924189537534,0.0737158381543897,0.1345062580578117,0.21002972330352887,0.297241884535627,0.3926272212994757,0.4923407526001765,0.5923630280086011,0.6886621516268435,0.7773563077304089,0.8548702366813743,0.9180793535721717,0.9644357001798758,0.9920706531107107,0.9998702479712075,0.9875200832503519,0.9555179938381477,0.9051539833112714,0.8384582239149969,0.7581192203610669,0.6673754362571758,0.5698847517044177,0.4695770142244871,0.37049562668561714,0.27663455781464635,0.19177734539859448,0.11934458195295311,0.06225603070661273,0.022812930005188692,0.0026052304398518356,0.002447503971209797,0.02234610855001773,0.06149893182834032,0.11832772429202565,0.19054171846675566,0.2752299697085043,0.36897869632333485,0.468008889038262,0.5683286427887629,0.6658940703310094,0.7567723112549108,0.8373000655076536,0.9042312609446984,0.9548679024322876,0.9871688279766125,0.999831987922566,0.9923469305489563,0.9650153783670579,0.9189390656922969,0.8559753277562856,0.7786622315612292,0.6901162664503635,0.593906718485719,0.49391179259900886,0.39416228222943017,0.29867908812169175,0.21131113589822992,0.13558022594539448,0.07453906971101742,0.030648234967829424,0.005676960376234441,0.0006318375097442708,0.015716235169029036,0.05032210158966055,0.10305447499643755,0.17178771448431895,0.2537511845602954,0.34564093940403834,0.44375290485711816,0.5441321895773189,0.6427325066286002,0.735579279225744,0.8189298558439944,0.8894243764264161,0.9442212082746847,0.9811114922057615,0.9986081816208336,0.9960059853235979,0.9734097977941457,0.9317304708945848,0.8726480974488766,0.7985442867351666,0.7124061618639154,0.6177059489057409,0.5182610115288364,0.4180799731466974,0.32120112938944667,0.23152966448869383,0.1526802333801774,0.08783125503645156,0.039596790462380516,0.009921169948977127,6.171586889314185e-7,0.01023502937375187,0.04021185764485685,0.08872273663096286,0.15381219378169175,0.23285647439631024,0.3226693051226593,0.41963033257138155,0.5198310596879662,0.6192323971897902,0.71382747917344,0.7998031797981904,0.8736938203114788,0.9325208704893375,0.9739130131293958,0.9962017317993475,0.9984885687006095,0.9806813414839597,0.9434978591181897,0.8884369870250941,0.8177182278446554,0.7341922533284826,0.6412259938193056,0.5425669173568242,0.44219196931698745,0.3441472618242962,0.2523849750539459,0.17060404492894338,0.10210105908784178,0.049637371503839345,0.015327792361890524,0.0005553401029782523,0.005915491978759901,0.03119218037557986,0.07536650249561039,0.13665779230800595,0.2125953991606246,0.30011827965771565,0.39569838825741244,0.4954828927160158,0.5954494816778375,0.6915685039645487,0.7799654037326313,0.8570769037410899,0.919794640984814,0.965590464744568,0.9926183462912184,0.9997887922665012,0.9868127621382397,0.9542133194183531,0.9033045469832459,0.8361385764197076,0.7554228666421257,0.6644110662784111,0.5667718591597046,0.4664410797493312,0.3674630597352315,0.27382760110145443,0.18930914729090914,0.11731463546656279,0.06074616294329871,0.021884003703931232,0.0022946906010751222,0.00276786844952448,0.023284463459782412,0.0630174521021305,0.12036519840833976,0.19301601588517325,0.2780413515501885,0.372013835843083,0.4711454398234856,0.5714401705407608,0.6688551494290572,0.7594635806604806,0.8396130402054516,0.9060727049714774,0.9561635872165775,0.9878665244909723,0.9999035720346252,0.9917895167046031,0.9638514359070793,0.9172155131137036,0.8537616414286565,0.7760476451356078,0.6872061738527094,0.5908184254897232,0.4907697882328789,0.3910932206255755,0.29580668309125135,0.20875117402988624,0.13343589925022975,0.07289681595476344,0.029574253366152103,0.005214543105764358,0.0007996246013023955,0.016507463128349664,0.051704876033706826,0.1049730563153527,0.17416476470396874,0.2564908848344019,0.34863285247001163,0.44687642675979483,0.5472614112119891,0.6457412891345149,0.7383463386409426,0.8213436520594743,0.8913876093655295,0.9456547400574016,0.9819575371949305,0.9988326357600528,0.9955998008710585,0.972389348036915,0.9301368901417125,0.8705456229082851,0.7960176691130503,0.7095572490654755,0.6146495805482493,0.5151203897589409,0.41498169636439536,0.3182700890691553,0.22888401080639165,0.15042661258228918,0.08606051053172059,0.03838030092596795,0.00930797204949485,1.5428891046720405e-5,0.010877253677317844,0.04145560647096047,0.09051787448957599,0.15608635870205173,0.23551799483651298,0.3256108952475898,0.42273341694265,0.522970553037327,0.6222817466038829,0.7166637654390691,0.802312072273366,0.8757741855913139,0.9340888490914847,0.9749053998681244,0.9965785235853082,0.9982345770645309,0.9798068048235504,0.9420380299885436,0.8864507111088847,0.815285571883853,0.731411277635688,0.6382087994683894,0.5394351273910486,0.4390718261264767,0.341164538317941,0.2496599047559473,0.16824647536785048,0.10020602384498023,0.048281259411494026,0.014565268271060972,0.0004171413443429528,0.006407189341483099,0.032293953548914234,0.07703393902523437,0.13882367786116884,0.21517242693446448,0.3030025697148453,0.39877367492396393,0.4986252112487131,0.5985321652801953,0.6944672897229178,0.7825634416517833,0.8592694669650264,0.9214933473343735,0.9667268394011616,0.9931465820154319,0.9996875958869802,0.9860862128789982,0.9528907044653238,0.9014391809184268,0.8338056521114384,0.7527164242220477,0.661440202385726,0.5636563292578143,0.4633064707855553,0.3644357277334602,0.27102957775341147,0.18685322086116368,0.11529980429978298,0.05925364484306722,0.02097396204465979,0.0020038091436337946,0.003107872619579566,0.024241647696126023,0.0645532323275464,0.1224176673530249,0.19550243856750826,0.28086150032213675,0.375054030564735,0.47428313030709995,0.5745488765464588,0.6718095590806364,0.7621446017646534,0.8419126008557799,0.9078981099246641,0.9574412544358886,0.9885449512366613,0.9999554109382947,0.9912126781410953,0.9626691722272229,0.9154754813425088,0.8515339822115923,0.773422155370679,0.6842886869791831,0.5877265453444646,0.4876281484419407,0.38802846062540436,0.29294234329544055,0.20620271591762251,0.1313060511164757,0.07127143193467639,0.028518852656703453,0.004771668888196967,0.0009871291263653381,0.0173177880924279,0.0531053572539017,0.10690724042202054,0.17655468477487812,0.2592402032398819,0.3516307442407427,0.45000204693918466,0.5503887661138226,0.648744315145992,0.741103983844329,0.8237447558323706,0.893335383263468,0.9470706693539503,0.9827845458088079,0.9990373869907607,0.9951740412006324,0.9713502398290508,0.9285263198272531,0.8684285125440134,0.7934793593749012,0.7067000591676431,0.611588683757703,0.5119791707633877,0.41188677763795867,0.31534622672308954,0.2262490656727053,0.1481867992460057,0.08430611582311309,0.037182044460232044,0.008714155520518685,4.998903109826314e-5,0.01153879736785357,0.04271746689920064,0.09232918608718244,0.15837410753518066,0.23818996179600338,0.3285593733993455,0.42583955319205924,0.5261091390950123,0.6253262661293651,0.719491493911866,0.8048090240159691,0.8778397085295115,0.9356396820374135,0.9758790287771273,0.9969357014957551,0.9979609061420808,0.9789133167375546,0.9405607412256671,0.8844491711492588,0.8128404627627577,0.7286211616523203,0.6351861461415973,0.5363017798152624,0.43595408947907605,0.33818808850008497,0.24694472239958226,0.16590200941881206,0.09832677967827386,0.04694298932141738,0.013821917897871572,0.00029867512654974115,0.006918382649927279,0.033414200191676235,0.07871808188280399,0.14100382916903947,0.21776070483755244,0.3058946407832154,0.4018529598313801,0.5017675840828351,0.6016109570557042,0.6973583944056511,0.7851503188704272,0.8614478397512664,0.923175405525281,0.967844779265081,0.9936553394190789,0.9995666628297022,0.985340464169892,0.9515502012197564,0.8995579587951239,0.8314595431360923,0.7499999999999881,0.6584629619224314,0.5605382850560674,0.46017331114402327,0.36141375025393874,0.2682405982869393,0.18440966311360207,0.11330016803450227,0.057778535357435934,0.020082840972222515,0.0017325975567750174,0.003467503051881815,0.025217623452131133,0.066106211844295,0.12448505005762045,0.19800088830494145,0.28369030463404177,0.37809916040656216,0.4774218365565274,0.5776546380180807,0.6747571825923603,0.7648152686723777,0.8441986566305031,0.9097074037043427,0.9587008536248891,0.9892040814171565,0.9999875025860399,0.9906164376424249,0.9614686340245633,0.9137190391065309,0.8492924380932829,0.770785865968116,0.6813639210648074,0.5846312001730889,0.48448699731484696,0.3849681232809259,0.29008618187002466,0.2036658622205476,0.12919076566891774,0.06966298185023007,0.027482074525750855,0.004348355216195143,0.0011943436788710016,0.018147178055027968,0.054523489933990144,0.10885695091991843,0.17895738029991298,0.26199903118405055,0.35463449630542687,0.4531296419394349,0.5535141307584625,0.6517414660494211,0.7438521059142884,0.826133072323826,0.8952676211869826,0.9484689402379132,0.983592485382172,0.9992224272256849,0.9947287231289832,0.9702925142132892,0.9268988235655538,0.8662968499777401,0.7909294577789874,0.7038347050238027,0.6085233794335222,0.5088374786141379,0.4087953392106072,0.3124296578380907,0.22362493316279974,0.14596088183955086,0.08256814020576331,0.036002068393936604,0.00813974381662902,0.00010429621378577059,0.012219634315683903,0.0439973890885591,0.09415659988054281,0.1606753499195177,0.240872269737327,0.33151462311886215,0.42894861863331946,0.5292466938930144,0.6283658355136867,0.7223105529021532,0.807293936401337,0.8798903075419668,0.9371733080722924,0.9768338613999679,0.9972732514228675,0.9976675667427274,0.978000912516991,0.939066051179549,0.8824324462031281,0.8103829970583731,0.7258220155824759,0.6321581532277805,0.5331669983905067,0.4328388825192119,0.33521802993465827,0.24423953522921654,0.16357073968367702,0.09646340081413934,0.045622614092635294,0.013097770603204162,0.00019994612877982654,0.007449051712959065,0.03455287605631546,0.08041886454800251,0.14319816011996644,0.2203601306379525,0.308794378631691,0.4049361213539324,0.5049098871009031,0.604685735398183,0.7002417038197444,0.7877259332120214,0.8636119360583866,0.924840749119537,0.9689442401799142,0.994144598407244,0.9994259978712885,0.9845755454665219,0.9501918626289002,0.8976609549178702,0.8291003421603618,0.7472737012694256,0.6554794624836053,0.5574178497110381,0.4570417245784384,0.35839724665883704,0.2654607728612569,0.18197857056397393,0.1113158056523953,0.05632089275035651,0.019210675684142198,0.0014810665528244837,0.0038467455417327545,0.026212352178700438,0.06767632931273859,0.12656726486451725,0.20051126641360817,0.28652765275371983,0.38114910509190786,0.4805614345990411,0.5807573322841115,0.6776979035389078,0.7674754758975851,0.8464711172349018,0.9115005148469904,0.9599423350318758,0.9898438889980972,0.999999845710304,0.9900008187589115,0.9602498687180214,0.9119462557818014,0.8470370976103354,0.7681388810561197,0.6784319916320466,0.5815325122357016,0.481346458920864,0.381912329469463,0.2872383116277911,0.20114071313936116,0.1270901264571731,0.06807152923207693,0.026463959923969216,0.003944618809814726,0.0014212600742566917,0.018995600256876966,0.055959218060486704,0.11082211079938487,0.18137275637734518,0.2647672596986148,0.3576439900217625,0.45625908822667705,0.5566373817001209,0.6547326234632602,0.7465905963054266,0.8285085072000555,0.8971842468164649,0.9498494974803267,0.9843813240030159,0.9993877491561021,0.9942638642453077,0.9692162129677176,0.9252544656395024,0.8641507194059654,0.7883680650413745,0.7009612998098232,0.605453788649188,0.505695437401827,0.4057075031880675,0.3095204976128568,0.221011716924715,0.14374894828233659,0.08084665232627608,0.034840419333806216,0.007584759625969439,0.00017834829408314157,0.012919737629072059,0.045295322484666056,0.09600004369042137,0.16298999496047084,0.24356481271462938,0.33447652767953195,0.4320604904644715,0.5323830935041288,0.6314003346998733,0.7251208310625913,0.80976671128027,0.881925901634059,0.9386896666208797,0.9777698600226472,0.997591160034081,0.9973545704527982,0.9770696282000243,0.9375540188875349,0.8804006159271364,0.8079132718357305,0.7230139499869858,0.6291249403266789,0.5300309069345425,0.4297263282914917,0.3322544799330954,0.2415444500944865,0.16125275824293284,0.09461596085240431,0.04432018587739761,0.012392854989443647,0.00012095825063640486,0.007999175570195971,0.03570993616738927,0.08213621984322722,0.14540658404213108,0.22297060166347882,0.3117016687263403,0.40802303771284343,0.5080519961880826,0.6077563788598485,0.7031171040801703,0.7902901829448863,0.865761670408798,0.9264893123393657,0.9700251787190872,0.9946143396551483,0.9992656065677232,0.983791486981687,0.9488157423444408,0.8957482442146328,0.8267281423681011,0.7445376357137019,0.6524898219116513,0.5542951464738449,0.45391183478028574,0.35538633609418546,0.2626902112739914,0.17956003923562303,0.10934679553191118,0.054880774595833015,0.018357500629249013,0.0012492260667610333,0.004245585109804939,0.027225794585991503,0.06926352271628777,0.12866422953039902,0.20303347373851932,0.28937343261144644,0.3842037441539941,0.4837018004266192,0.5838568367943252,0.680631605767609,0.7701251183672713,0.8487298929112796,0.9132773725282093,0.9611656496207791,0.9904643487083642,0.9999924398235573,0.9893658458063017,0.9590129244464202,0.9101572013897687,0.8447680498441937,0.7654813051854266,0.6754930144864028,0.5784306039243569,0.47820665730505624,0.3788611998888504,0.28439884505397756,0.19862736841253376,0.1250042164524084,0.06649713693940945,0.02546454906490697,0.00356047561584677,0.0016678693497682584,0.01986302118694616,0.057412484925004614,0.11280264244043259,0.18380071760452416,0.26754477944402777,0.36065910652059563,0.45939026219394874,0.5597583955765675,0.6577176692426177,0.7493193468527809,0.8308709666360081,0.8990851844489793,0.9512122865519119,0.985151030513754,0.9995333462521179,0.993779482910614,0.968121378604115,0.9235933109980345,0.8619902055965987,0.7857952823320871,0.6980799570195493,0.6023800326474744,0.5025531712309631,0.4026233915337647,0.3066188609535246,0.2184095201754263,0.14155108594131016,0.07914172018006976,0.033697143162716214,0.007049224869314474,0.0002721423470764539,0.01363907965533867,0.04661121582168082,0.09785944470437807,0.1653179512341318,0.2462674843777073,0.33744497009197383,0.4351750457727235,0.5355182140467083,0.63442964383109,0.727922217392743,0.8122272509830442,0.8839464104038415,0.9401886977900211,0.9786869876750345,0.9978894147726334,0.997021929635028,0.9761195005705713,0.9360247040719005,0.8783537605746219,0.8054313846441883,0.720197075778819,0.6260866272442945,0.5268936293167604,0.4266165497356607,0.32929755554987616,0.2388595734458595,0.15894815665233208,0.0927845327633321,0.043035756119046475,0.011707198899383764,6.171461198428707e-5,0.008568732492832298,0.03688533482327683,0.08387007993633527,0.1476290137072095,0.22559201480565755,0.3146163962349462,0.41111358698095746,0.5111937872371842,0.6108227661564308,0.7059844816142965,0.7928429667861512,0.8678969578922584,0.9281210300697162,0.9710875521876913,0.995064544608953,0.9990854952541518,0.9829883196841418,0.947421894720449,0.8938199022337072,0.8243430374564531,0.7417919114020773,0.6494941582915218,0.551170298685099,0.4507837653740595,0.35238113748492345,0.25992902295685416,0.17715416465582629,0.10739321544506103,0.053458237775688866,0.017523349506272545,0.0010370852558263532,0.0046640060027161034,0.028257910645002715,0.07086772936398061,0.1307758612292269,0.2055674106574666,0.29222753180456296,0.3872629569404997,0.48684281000109836,0.5869530291243306,0.6835581734029397,0.7727640914258154,0.8509748944423972,0.9150379065656302,0.9623707490730885,0.9910654360410021,0.9999652852183182,0.9887115438647736,0.9577578500666268,0.908351946594548,0.842485384417825,0.7628132433250833,0.6725471057116694,0.5753255977583073,0.4750677164834722,0.37581485505268114,0.2815678943019833,0.1961259273122184,0.12293311804389284,0.06493986715767114,0.024483881423310372,0.003195940807195985,0.0019341617648190312,0.020749406583845387,0.058883233126333756,0.11479846761593704,0.18624116808179814,0.270331480713644,0.3636797267108607,0.4625230401660619,0.5628770491138332,0.6606964854840798,0.7520382497760196,0.8332203573192017,0.900970359001243,0.9525572536251672,0.9859015745124784,0.9996592127629348,0.9932755982570125,0.967008054366276,0.9219154252534629,0.8598153938857471,0.7832112112709612,0.6951907904603305,0.5993022328357569,0.4994108042148263,0.39954312606410214,0.30372486246909014,0.2158184456964956,0.13936738162777335,0.07745341110858173,0.03257228503781734,0.006533160699248475,0.00038567466808842044,0.01437763198187536,0.047945017124391254,0.09973472947974465,0.16765912679082529,0.24898017797636718,0.3404198331085748,0.43829216153920697,0.5386519316895976,0.6374536432556908,0.7307146012433551,0.8146754583232,0.8859517540451711,0.9416703423708919,0.9795852081324237,0.9981680038580512,0.9966696574280814,0.9751505671567884,0.9344781671376166,0.876291960992329,0.8029374335133218,0.7173715042190458,0.6230433339879664,0.5237552894535159,0.42350966968185855,0.3263473735775939,0.23618501133073405,0.15665702593912773,0.09096918888471522,0.041769375550032406,0.011040829415085718,2.221755283060567e-5,0.009157699984478906,0.03807902559805226,0.0856203763432773,0.14986536133353873,0.2282242665238466,0.3175384460314755,0.4142076470875976,0.5143351361537515,0.6138847761715768,0.7088437231662955,0.795384183905919,0.8700177141690522,0.9297358378610048,0.9721313186240433,0.9954951954864348,0.9988856710446137,0.9821660752974304,0.9460103748111537,0.8918760051407935,0.8219451216324377,0.7390366367852895,0.6464925899460141,0.5480434297701452,0.44765763991232393,0.3493817695305431,0.2571773169714058,0.17476104185187818,0.10545514255440042,0.05205333847735777,0.016708255262535,0.0008446524991709281,0.005101991693655328,0.029308659589215857,0.07248888589276486,0.13290207655573805,0.20811297708490023,0.2950898376016843,0.3903266226186441,0.48998433925871826,0.590045786980589,0.6864774908512581,0.7753922908388976,0.8532060331551276,0.9167820474216354,0.9635575857897227,0.9916471272542484,0.9999183829671402,0.9880379387779674,0.9564846951516004,0.9065305627001712,0.8401891914920676,0.7601348008582646,0.6695943816654519,0.5722176163792486,0.471929760438047,0.3727734152856703,0.2787455711887723,0.1936364886403989,0.12087691303599873,0.06339978139592894,0.02352199573364122,0.002851028782276832,0.0022201268013917197,0.021654721437070146,0.06037140457279783,0.11680950749474495,0.18869401141610437,0.2731272534383422,0.36670573128394357,0.46565729840438824,0.565993219131262,0.663668954530288,0.7547471976838466,0.835556586453344,0.9028396960125329,0.9538843455765129,0.986632926354204,0.9997653437170733,0.9927522301869518,0.9658762842283295,0.9202208746790217,0.8576263701741196,0.7806159539237006,0.6922939142486191,0.5962205107810218,0.49626846047082157,0.39646682844348285,0.30083861646670007,0.21323859583034194,0.13719792159371436,0.07578179179673195,0.031465889388794244,0.006036587499272994,0.0005189407728140583,0.015135365437310089,0.049296673710279626,0.10162582394645892,0.17001342915867673,0.25170278636456916,0.3434009992280399,0.4414117146440049,0.5417841226572234,0.6404722135315607,0.7334978723207799,0.817111236601338,0.8879418533508803,0.9431345418414973,0.9804644859168477,0.9984269162866081,0.9962977677460118,0.9741628662296671,0.9329144691697958,0.8742152986172695,0.8004315169493658,0.7145373469121372,0.6199951807618507,0.5206160113030359,0.42040581084571194,0.3234040505426907,0.23352086938908012,0.1543794565984583,0.08917000091906829,0.04052109418988731,0.01039377285682852,2.4686332322221283e-6,0.009766054782082811,0.03929096134328752,0.0873870399307543,0.15211553858982424,0.2308672528492538,0.3204677027006524,0.417305095823584,0.5174759188605922,0.6169422879619652,0.7116947158017726,0.7979137339310404,0.872123855473552,0.9313336719314684,0.9731564368014116,0.995906275277735,0.9986661418317759,0.9813247862985826,0.9445812383688036,0.8899166297160404,0.8195344896089947,0.7362719206912447,0.6434852354311773,0.5449146632341304,0.44453358187091774,0.34638835070023655,0.2544352020045984,0.17238076534740365,0.10353265341003381,0.050666132191574786,0.015912250092678548,0.0006719353975034315,0.005559524883064715,0.03037799991608503,0.0741269282701737,0.1350427915285683,0.21067007247590397,0.29796023694746165,0.39339462017960014,0.4931262641152203,0.5931349882052728,0.6893894428052636,0.7780096127979028,0.8554232209238974,0.9185097262060579,0.9647261128929757,0.9922093993724486,0.9998517349225701,0.9873450571519539,0.9551935099884687,0.9046931216477548,0.8378795617619457,0.7574460835781827,0.666634958974519,0.5691067825462796,0.4687929131119611,0.36973700071859983,0.2759319871905339,0.19115915072505396,0.11883568264474453,0.061876940484570875,0.022578929988484375,0.0025257531644237163,0.0025257531644221065,0.022578929988479712,0.061876940484563325,0.11883568264473438,0.19115915072504164,0.27593198719054535,0.36973700071858473,0.46879291311191706,0.5691067825462922,0.6666349589745042,0.7574460835781691,0.8378795617619341,0.904693121647729,0.9551935099884741,0.9873450571519504,0.9998517349225697,0.9922093993724463,0.964726112892992,0.9185097262060664,0.8554232209238886,0.7780096127979159,0.689389442805278,0.5931349882053161,0.49312626411523597,0.3933946201795877,0.297960236947476,0.21067007247591674,0.135042791528579,0.07412692827018191,0.030377999916090415,0.0055595248830628274,0.0006719353975025988,0.0159122500926675,0.0506661321915679,0.10353265341002427,0.17238076534741326,0.25443520200456,0.3463883507001946,0.4445335818709304,0.5449146632341147,0.6434852354311623,0.7362719206912559,0.8195344896089608,0.8899166297160306,0.9445812383687964,0.9813247862985783,0.9986661418317748,0.9959062752777408,0.9731564368014167,0.931333671931462,0.8721238554735624,0.7979137339310758,0.7116947158017868,0.6169422879619804,0.5174759188606078,0.4173050958235995,0.3204677027006935,0.2308672528492431,0.1521155385898355,0.08738703993076313,0.03929096134328253,0.009766054782091471,2.468633232166617e-6,0.01039377285683113,0.040521094189881146,0.08917000091905936,0.15437945659842645,0.23352086938906685,0.3234040505427026,0.4204058108456965,0.5206160113030203,0.6199951807618355,0.714537346912123,0.8004315169493532,0.874215298617278,0.9329144691697879,0.9741628662296531,0.9962977677460099,0.9984269162866093,0.9804644859168519,0.9431345418415045,0.8879418533509081,0.8171112366013282,0.7334978723207938,0.6404722135315757,0.5417841226572107,0.4414117146440487,0.3434009992280548,0.25170278636458276,0.1700134291586885,0.10162582394646841,0.04929667371029872,0.015135365437313919,0.0005189407728134476,0.0060365874992705515,0.03146588938878875,0.07578179179672367,0.13719792159370353,0.21323859583032906,0.30083861646668564,0.39646682844346753,0.4962684604707775,0.5962205107810065,0.6922939142486046,0.7806159539237112,0.8576263701741086,0.9202208746789979,0.9658762842283342,0.9927522301869491,0.9997653437170737,0.9866329263542075,0.9538843455765315,0.9028396960125422,0.8355565864533556,0.75474719768386,0.6636689545302759,0.5659932191313057,0.4656572984044039,0.36670573128393125,0.27312725343835614,0.18869401141611664,0.11680950749477326,0.060371404572805265,0.021654721437074698,0.0022201268013932185,0.0028510287822751668,0.023521995733636447,0.06339978139592128,0.12087691303598852,0.19363648864040894,0.2787455711887582,0.3727734152856277,0.47192976043803136,0.5722176163792331,0.6695943816654372,0.7601348008582269,0.8401891914920354,0.9065305627001785,0.9564846951515941,0.9880379387779641,0.9999183829671399,0.9916471272542564,0.9635575857897287,0.916782047421644,0.8532060331551387,0.7753922908389344,0.6864774908512989,0.5900457869806044,0.4899843392587055,0.39032662261865936,0.2950898376017245,0.20811297708488985,0.13290207655574865,0.07248888589277297,0.02930865958922113,0.0051019916936616005,0.0008446524991683746,0.016708255262530947,0.052053338477350775,0.10545514255440824,0.17476104185184466,0.2571773169713921,0.3493817695305552,0.44765763991230834,0.5480434297701295,0.6464925899459719,0.7390366367852758,0.8219451216324257,0.8918760051407837,0.9460103748111466,0.9821660752974263,0.9988856710446126,0.9954951954864371,0.9721313186240391,0.9297358378610128,0.8700177141690818,0.7953841839059088,0.7088437231663098,0.613884776171592,0.5143351361537671,0.4142076470876411,0.31753844603146364,0.22822426652385974,0.14986536133354994,0.08562037634327019,0.03807902559806914,0.009157699984481904,2.2217552830772203e-5,0.011040829415082443,0.04176937555002613,0.09096918888468986,0.15665702593911635,0.23618501133074488,0.32634737357757926,0.42350966968184306,0.5237552894535003,0.6230433339879512,0.7173715042190316,0.8029374335133319,0.8762919609923188,0.9344781671375948,0.9751505671567835,0.9966696574280796,0.99816800385805,0.9795852081324281,0.9416703423709125,0.885951754045163,0.8146754583232121,0.730714601243369,0.6374536432556785,0.5386519316896415,0.4382921615392225,0.3404198331085897,0.24898017797638072,0.1676591267908158,0.09973472947977108,0.047945017124397915,0.014377631981872363,0.00038567466808903106,0.006533160699245921,0.03257228503781173,0.07745341110857334,0.13936738162776247,0.21581844569648273,0.30372486246907576,0.3995431260640868,0.4994108042148106,0.5993022328357415,0.6951907904603423,0.7832112112709249,0.8598153938857165,0.9219154252534697,0.9670080543662705,0.9932755982570101,0.9996592127629365,0.9859015745124888,0.9525572536251617,0.9009703590012523,0.8332203573192134,0.7520382497760332,0.6606964854841215,0.5628770491138487,0.46252304016604917,0.36367972671087573,0.2703314807136832,0.18624116808181035,0.11479846761594703,0.05888323312632776,0.020749406583849883,0.001934161764822917,0.0031959408071974282,0.024483881423305542,0.06493986715766342,0.12293311804390122,0.19612592731218337,0.2815678943019692,0.375814855052666,0.4750677164834565,0.5753255977583198,0.672547105711628,0.76281324332507,0.8424853844178342,0.9083519465945389,0.9577578500666205,0.9887115438647702,0.999965285218318,0.991065436041005,0.9623707490730944,0.915037906565639,0.8509748944424084,0.7727640914258285,0.6835581734029543,0.586953029124318,0.48684281000111407,0.3872629569405427,0.2922275318045514,0.2055674106574793,0.13077586122923746,0.07086772936398866,0.028257910645017315,0.004664006002714327,0.001037085255825354,0.017523349506268437,0.053458237775694584,0.10739321544503372,0.1771541646558143,0.2599290229568654,0.3523811374849085,0.4507837653740439,0.5511702986850552,0.6494941582915068,0.7417919114020886,0.8243430374564411,0.8938199022336977,0.947421894720442,0.9829883196841378,0.9990854952541508,0.9950645446089512,0.9710875521876965,0.928121030069739,0.8678969578922691,0.7928429667861638,0.705984481614285,0.6108227661564462,0.5111937872372283,0.4111135869809449,0.31461639623496074,0.22559201480567065,0.14762901370720044,0.0838700799363597,0.03688533482328271,0.008568732492835185,6.171461198406503e-5,0.011707198899386484,0.043035756119028545,0.09278453276332299,0.15894815665234135,0.23885957344584613,0.3292975555498614,0.42661654973564517,0.5268936293167448,0.6260866272442793,0.7201970757788049,0.8054313846441533,0.8783537605746117,0.9360247040718929,0.9761195005705665,0.9970219296350293,0.9978894147726374,0.9786869876750472,0.9401886977900151,0.8839464104038516,0.8122272509830564,0.7279222173927822,0.6344296438311325,0.5355182140466955,0.435175045772739,0.3374449700919887,0.24626748437772084,0.16531795123416454,0.09785944470438734,0.04661121582167549,0.013639079655342334,0.0002721423470778972,0.007049224869311865,0.03369714316271055,0.07914172018006133,0.14155108594129923,0.21840952017538984,0.30661886095353635,0.4026233915337493,0.5025531712309474,0.602380032647487,0.6980799570195088,0.7857952823320742,0.8619902055965878,0.9235933109980262,0.9681213786041094,0.993779482910607,0.9995333462521185,0.9851510305137509,0.9512122865519187,0.8990851844489887,0.8308709666360199,0.7493193468527946,0.6577176692426325,0.559758395576583,0.4593902621939644,0.36065910652063793,0.26754477944404165,0.1838007176045363,0.11280264244042454,0.057412484925011886,0.019863021186958485,0.0016678693497672037,0.003560475615844938,0.02546454906490203,0.06649713693940162,0.1250042164523792,0.1986273684125212,0.2843988450539634,0.37886119988883526,0.47820665730506895,0.5784306039243133,0.6754930144863881,0.7654813051854373,0.8447680498441824,0.9101572013897596,0.9590129244464027,0.9893658458062985,0.9999924398235573,0.9904643487083673,0.9611656496207852,0.9132773725282182,0.8487298929112909,0.7701251183672846,0.6806316057675971,0.5838568367943406,0.4837018004266633,0.3842037441540094,0.28937343261146065,0.20303347373853192,0.12866422953040946,0.06926352271631014,0.027225794585987395,0.004245585109806993,0.001249226066759923,0.018357500629252455,0.054880774595812976,0.10934679553190141,0.17956003923561104,0.26269021127397757,0.3553863360941705,0.45391183478024183,0.5542951464738294,0.6524898219116634,0.7445376357136884,0.8267281423680892,0.8957482442146233,0.9488157423444339,0.983791486981683,0.9992656065677223,0.9946143396551548,0.9700251787191022,0.9264893123393738,0.8657616704088087,0.7902901829448759,0.7031171040802106,0.6077563788598915,0.5080519961880698,0.40802303771285886,0.31170166872635485,0.22297060166351557,0.1454065840421621,0.08213621984323582,0.03570993616739504,0.007999175570198747,0.00012095825063601628,0.01239285498944015,0.044320185877391116,0.09461596085241175,0.16125275824292135,0.24154445009444875,0.3322544799331074,0.4297263282914762,0.5300309069345268,0.6291249403266638,0.7230139499869462,0.8079132718357405,0.8804006159271263,0.9375540188875273,0.9770696282000282,0.9973545704527935,0.9975911600340825,0.9777698600226434,0.9386896666208873,0.8819259016340693,0.8097667112803046,0.7251208310626053,0.631400334699861,0.5323830935041445,0.432060490464487,0.3344765276795467,0.24356481271464286,0.16298999496048244,0.09600004369041382,0.04529532248467261,0.012919737629081995,0.00017834829408358566,0.007584759625966719,0.03484041933381088,0.08084665232626753,0.1437489482823056,0.2210117169247256,0.3095204976128424,0.4057075031880521,0.5056954374018396,0.6054537886491449,0.7009612998098089,0.7883680650413617,0.8641507194059546,0.9252544656395092,0.9692162129677024,0.9942638642453054,0.9993877491561014,0.9843813240030199,0.9498494974803335,0.8971842468164744,0.8285085072000673,0.7465905963054402,0.6547326234632752,0.5566373817001364,0.45625908822669264,0.3576439900217775,0.2647672596986287,0.18137275637733535,0.11082211079939469,0.055959218060506966,0.01899560025687347,0.0014212600742578574,0.003944618809812783,0.026463959923964164,0.06807152923205473,0.1270901264571816,0.20114071313934861,0.2872383116277769,0.3819123294694754,0.4813464589208199,0.5815325122356861,0.6784319916320585,0.7681388810561065,0.8470370976103241,0.9119462557817763,0.9602498687180152,0.990000818758914,0.999999845710304,0.9898438889981059,0.9599423350318819,0.9115005148469992,0.8464711172349131,0.7674754758975744,0.677697903538949,0.580757332284155,0.48056143459905676,0.3811491050919231,0.2865276527537083,0.20051126641364347,0.12656726486454656,0.06767632931273215,0.026212352178705434,0.0038467455417346974,0.0014810665528232625,0.019210675684137923,0.056320892750349294,0.11131580565238547,0.18197857056396183,0.26546077286124303,0.358397246658822,0.4570417245784228,0.5574178497110508,0.6554794624835905,0.7472737012693873,0.8291003421603713,0.8976609549178608,0.9501918626288934,0.9845755454665179,0.9994259978712864,0.9941445984072377,0.9689442401799099,0.9248407491195453,0.8636119360583974,0.7877259332120576,0.7002417038197327,0.6046857353981706,0.5049098871009189,0.4049361213539757,0.30879437863173176,0.22036013063794196,0.14319816011995756,0.080418864548011,0.03455287605633156,0.0074490517129568445,0.0001999461287801596,0.01309777060320061,0.045622614092628744,0.09646340081411331,0.16357073968366542,0.24423953522922753,0.33521802993464345,0.4328388825191964,0.5331669983904628,0.6321581532277654,0.7258220155824873,0.8103829970583608,0.8824324462030998,0.9390660511795552,0.9780009125169864,0.9976675667427259,0.9972732514228693,0.9768338613999812,0.9371733080722862,0.8798903075419771,0.8072939364013494,0.7223105529021672,0.6283658355137294,0.5292466938930299,0.42894861863333494,0.3315146231188769,0.2408722697373647,0.16067534991955007,0.09415659988055197,0.0439973890885772,0.012219634315687344,0.00010429621378671428,0.00813974381663135,0.036002068393930775,0.082568140205739,0.14596088183957995,0.223624933162763,0.31242965783807614,0.40879533921059175,0.5088374786140938,0.6085233794335346,0.7038347050237624,0.7909294577789745,0.8662968499777295,0.9268988235655308,0.9702925142132934,0.9947287231289768,0.9992224272256858,0.9835924853821831,0.9484689402379076,0.8952676211869747,0.8261330723238809,0.7438521059143021,0.6517414660494631,0.5535141307584498,0.4531296419394222,0.35463449630549626,0.2619990311840643,0.1789573802999468,0.1088569509199282,0.05452348993398437,0.01814717805503213,0.0011943436788739992,0.004348355216189315,0.027482074525745748,0.06966298185023656,0.12919076566890725,0.20366586222051208,0.29008618186998464,0.38496812328093827,0.4844869973148313,0.5846312001730735,0.6813639210648192,0.7707858659680551,0.849292438093292,0.9137190391065222,0.9614686340245573,0.9906164376424273,0.9999875025860404,0.989204081417154,0.9587008536248953,0.909707403704368,0.844198656630494,0.764815268672391,0.6747571825923749,0.5776546380180961,0.47742183655657144,0.3780991604065498,0.2836903046340559,0.19800088830495394,0.12448505005763078,0.06610621184431692,0.025217623452136073,0.003467503051883647,0.001732597556778459,0.020082840972210136,0.057778535357415395,0.11330016803449233,0.18440966311358992,0.2682405982869758,0.3614137502538964,0.4601733111439793,0.5605382850560517,0.6584629619223895,0.7500000000000238,0.8314595431361018,0.8995579587950803,0.9515502012197496,0.9853404641698813,0.999566662829704,0.9936553394190768,0.9678447792651066,0.9231754055252893,0.8614478397512968,0.7851503188704166,0.6973583944056394,0.6016109570557195,0.5017675840828792,0.40185295983142333,0.30589464078320366,0.21776070483754195,0.1410038291690504,0.07871808188282775,0.033414200191692056,0.006918382649925114,0.00029867512654918604,0.013821917897867908,0.04694298932142277,0.09832677967823067,0.16590200941882155,0.24694472239956877,0.33818808850007015,0.4359540894790887,0.53630177981519,0.6351861461415822,0.7286211616523064,0.8128404627627455,0.8844491711492669,0.9405607412256598,0.9789133167375501,0.9979609061420793,0.9969357014957599,0.9758790287771235,0.9356396820374213,0.8778397085295219,0.8048090240160042,0.7194914939119055,0.6253262661293528,0.526109139095028,0.4258395531920185,0.3285593733993869,0.23818996179604096,0.1583741075351921,0.09232918608719148,0.04271746689918399,0.011538797367863007,4.998903109887376e-5,0.008714155520515743,0.037182044460226105,0.08430611582312014,0.14818679924601474,0.2262490656726684,0.315346226723075,0.41188677763794324,0.5119791707634004,0.6115886837577155,0.70670005916759,0.7934793593748884,0.8684285125439932,0.9285263198272597,0.9713502398290502,0.9951740412006301,0.9990373869907617,0.9827845458088157,0.9470706693539509,0.8933353832634688,0.8237447558323825,0.7411039838443426,0.648744315146034,0.550388766113824,0.4500020469391861,0.35163074424077123,0.2592402032398583,0.17655468477491176,0.1069072404220478,0.05310535725390869,0.017317788092435726,0.0009871291263636173,0.004771668888190861,0.028518852656684024,0.07127143193466834,0.1313060511164555,0.20620271591763284,0.2929423432954392,0.3880284606253475,0.48762814844192504,0.5877265453444211,0.684288686979195,0.7734221553706779,0.8515339822115509,0.9154754813424921,0.962669172227206,0.9912126781410977,0.9999554109382949,0.9885449512366647,0.9574412544359007,0.9078981099246896,0.841912600855781,0.7621446017646667,0.6718095590806512,0.5745488765464883,0.4742831303071582,0.37505403056473646,0.28086150032215085,0.19550243856753202,0.12241766735301657,0.06455323232757504,0.024241647696126467,0.0031078726195828965,0.00200380914363113,0.020973962044663452,0.05925364484303297,0.11529980429977293,0.18685322086114037,0.2710295777533849,0.3644357277334588,0.46330647078553966,0.5636563292577987,0.6614402023856978,0.7527164242220096,0.8338056521114373,0.9014391809184259,0.9528907044653111,0.9860862128789879,0.9996875958869786,0.9931465820154322,0.9667268394011672,0.921493347334359,0.8592694669650571,0.7825634416518197,0.6944672897229323,0.5985321652802106,0.49862521124868614,0.39877367492402105,0.30300256971489886,0.21517242693447736,0.13882367786117966,0.0770339390252276,0.03229395354891473,0.006407189341492425,0.0004171413443423422,0.01456526827105381,0.04828125941149952,0.10020602384497934,0.16824647536779624,0.24965990475592142,0.3411645383179127,0.4390718261264894,0.5394351273910329,0.6382087994683743,0.7314112776356615,0.8152855718838299,0.8864507111088837,0.9420380299885363,0.9798068048235461,0.998234577064532,0.9965785235853133,0.974905399868125,0.9340888490914925,0.8757741855913337,0.8023120722733559,0.7166637654391088,0.6222817466038844,0.5229705530373568,0.4227334169426795,0.3256108952475778,0.2355179948365142,0.1560863587020631,0.09051787448958498,0.041455606470972406,0.010877253677318177,1.5428891046720405e-5,0.009307972049491853,0.03838030092596195,0.08606051053169583,0.15042661258228818,0.22888401080639043,0.3182700890691804,0.4149816963643659,0.5151203897588968,0.6146495805482478,0.7095572490654611,0.796017669113072,0.8705456229082651,0.93013689014169,0.9723893480369098,0.9955998008710565,0.9988326357600509,0.9819575371949272,0.945654740057428,0.8913876093655393,0.8213436520594863,0.7383463386409314,0.6457412891345027,0.5472614112120472,0.44687642675981043,0.34863285247004017,0.25649088483439075,0.17416476470395909,0.1049730563153623,0.05170487603372009,0.01650746312835727,0.0007996246013016739,0.005214543105764136,0.02957425336614683,0.0728968159547479,0.13343589925020943,0.20875117402988508,0.29580668309125,0.39109322062556023,0.4907697882328917,0.5908184254896798,0.6872061738527081,0.7760476451356065,0.8537616414286353,0.9172155131137185,0.9638514359070629,0.9917895167046028,0.9999035720346255,0.9878665244909789,0.9561635872165664,0.9060727049714783,0.839613040205463,0.759463580660494,0.6688551494290853,0.5714401705407482,0.47114543982348706,0.3720138358430981,0.2780413515502025,0.19301601588520806,0.12036519840833149,0.06301745210213122,0.02328446345977425,0.002767868449527644,0.0022946906010709034,0.02188400370393495,0.06074616294329127,0.11731463546658011,0.18930914729088572,0.27382760110141513,0.36746305973523014,0.46644107974931553,0.5667718591597313,0.6644110662784231,0.7554228666420755,0.8361385764197065,0.9033045469832366,0.9542133194183584,0.9868127621382425,0.9997887922664995,0.992618346291221,0.965590464744579,0.919794640984807,0.857076903741081,0.7799654037326442,0.6915685039645633,0.5954494816778668,0.49548289271600304,0.3956983882574139,0.3001182796577301,0.2125953991606374,0.1366577923080362,0.07536650249560367,0.03119218037558036,0.005915491978762288,0.0005553401029795291,0.0153277923618797,0.049637371503820193,0.1021010590878409,0.1706040449289209,0.25238497505396934,0.34414726182425437,0.44219196931692956,0.5425669173568085,0.6412259938192769,0.7341922533285065,0.8177182278446543,0.8884369870250574,0.9434978591181826,0.9806813414839515,0.9984885687006106,0.9962017317993477,0.9739130131294145,0.9325208704893526,0.8736938203115081,0.7998031797981802,0.7138274791734414,0.6192323971898054,0.519831059687996,0.41963033257142507,0.32266930512264735,0.2328564743963235,0.15381219378170308,0.08872273663097985,0.04021185764487978,0.010235029373752147,6.171586889314185e-7,0.009921169948974018,0.03959679046238551,0.08783125503641859,0.15268023338017633,0.23152966448868062,0.32120112938941875,0.41807997314671,0.5182610115287781,0.6177059489057257,0.7124061618638883,0.7985442867351427,0.872648097448885,0.9317304708945771,0.9734097977941407,0.9960059853235941,0.9986081816208359,0.981111492205762,0.9442212082746854,0.889424376426426,0.8189298558440282,0.7355792792257828,0.6427325066286016,0.5441321895773203,0.44375290485709135,0.34564093940408025,0.25375118456033374,0.17178771448432,0.1030544749964471,0.05032210158964873,0.015716235169040027,0.0006318375097471574,0.005676960376232054,0.030648234967823984,0.07453906971103158,0.13558022594539348,0.21131113589818235,0.29867908812167737,0.39416228222941485,0.4939117925990216,0.5939067184857175,0.6901162664503095,0.7786622315612044,0.8559753277562645,0.9189390656923038,0.9650153783670572,0.9923469305489535,0.9998319879225668,0.9871688279766193,0.9548679024322824,0.9042312609447076,0.8373000655076652,0.7567723112549365,0.6658940703310511,0.5683286427887644,0.46800888903827764,0.36897869632335,0.2752299697084929,0.1905417184667903,0.11832772429202659,0.061498931828340986,0.02234610855002661,0.00244750397120852,0.002605230439847339,0.02281293000518403,0.06225603070660518,0.11934458195293374,0.19177734539860453,0.2766345578146451,0.370495626685602,0.46957701422447146,0.569884751704374,0.6673754362571744,0.7581192203610656,0.8384582239149854,0.905153983311254,0.9555179938381295,0.9875200832503517,0.9998702479712075,0.992070653110706,0.9644357001798868,0.9180793535721959,0.8548702366813854,0.7773563077304219,0.6886621516268185,0.5923630280086305,0.4923407526002348,0.392627221299491,0.2972418845356413,0.21002972330350694,0.13450625805780303,0.07371583815442018,0.03010892418954292,0.005443309982841205,0.000713265943876551,0.01610946005215741,0.051011272034671984,0.1040118105566823,0.17297462498270466,0.255119825658694,0.3471361412074342,0.4453143958110561,0.5456970260130262,0.6442376100210445,0.7369639788876676,0.8201383345600024,0.890407920443901,0.9449401709542178,0.9815368921762873,0.9987228710181497,0.9958053410204114,0.972901907758263,0.930935808163045,0.8715986948603842,0.7972824456867529,0.7109827471427381,0.6161783383304233,0.5166907830507044,0.41653042264404405,0.3197347192115695,0.23020550560024583,0.1515517025991558,0.08694384341576061,0.03898626954654072,0.009612149823750304,5.554419059139448e-6,0.010553724998850655,0.040831465020507496,0.08961827939636224,0.15494757262608794,0.23418592222146695,0.32413923191361793,0.4211814856090212,0.5214009120246581,0.6207576681096623,0.7152466850364678,0.801059112444809,0.874735853122166,0.9333069991425265,0.9744115487950014,0.9963925785147554,0.9983640334386026,0.9802464442584192,0.9427701306274877,0.8874457619899349,0.8165034625261698,0.7328029148921545,0.639718086469271,0.5410012248079165,0.44063160460411693,0.34265512321752234,0.2510212106303633,0.16942362800476207,0.10115157224545757,0.04895708853861702,0.014944135466419095,0.00048377447895192605,0.0061589024350293675,0.03174075504157253,0.07619812833766482,0.13773894650524093,0.21388250040920248,0.301559444932369,0.3972355242150666,0.4970540374373189,0.5969913023509201,0.6930188498292204,0.7812658113764942,0.8581749537582204,0.92064607100131,0.9661609536337079,0.9928848976573987,0.9997406614295484,0.9864518892512266,0.9535542512600512,0.9023738505777639,0.8349737681203412,0.7540708998477962,0.662926438743298,0.5652144161897665,0.4648736018390634,0.36594873188753657,0.27242746584117983,0.1880796440421184,0.11630532548036071,0.05999773148474208,0.021426620030006283,0.002146791838404327,0.0029354163942534317,0.02376070425764787,0.06378318849619302,0.12138956358004782,0.19425771769523426,0.2794503370237008,0.37353330880414126,0.4727141503477603,0.5729948839387595,0.6703331952352187,0.7608053788782112,0.8407645029757576,0.9069874168534116,0.956804676192621,0.9882081482775349,0.9999319597837594,0.9915035241067213,0.9632625913179997,0.9163475528469445,0.8526495529449414,0.7747362566992686,0.6857483475050603,0.5892729261812982,0.48919891500956875,0.38956029535525444,0.29437349796053336,0.20747550070237764,0.13236916009193123,0.07208201119958463,0.029044227777292375,0.004990662003980684,0.0008909126292720448,0.016910240467521376,0.05240290673768577,0.10593820278061167,0.17535812189593813,0.2578643485488722,0.35013105841248393,0.4484389822789912,0.5488253297266036,0.6472435291207572,0.7397263448354344,0.8225457964404604,0.8923634335173116,0.9463649085281853,0.982373423107998,0.9989374747626649,0.9953893669051546,0.9718721236913996,0.9293337247194734,0.8694888919912604,0.794749969503162,0.7081296817082706,0.6131196906550597,0.5135498471603497,0.4134338096008289,0.31680725342471894,0.22756519315633733,0.1493049744393793,0.08518126510677676,0.037778890584320324,0.009008639629830395,3.024047714522693e-5,0.011205612214440719,0.04208427583313179,0.09142151302751289,0.15722854076457987,0.23685267908783897,0.327084280592451,0.42428611124771004,0.5245399672265262,0.6238046176229826,0.7180787063881696,0.8035620469113529,0.8768088074659008,0.9348664126158008,0.9753945614722426,0.996759565174876,0.998100200856723,0.9793624275205924,0.9413015644305238,0.8854518442075544,0.8140645679437649,0.7300173553009793,0.6366981477201814,0.5378686405707325,0.4375126492861112,0.33967552184434424,0.2483010708730835,0.16707259864201146,0.09926442322331169,0.04760989079595618,0.014191194516943006,0.00035544135712312075,0.006660350246401381,0.03285177043499704,0.07787392630509232,0.13991197566457192,0.21646516599896287,0.30444763975494554,0.40031282519555406,0.5001963986354031,0.6000720552503445,0.695913809342945,0.7838582817450972,0.8603604325536394,0.9223364616174451,0.967288116459065,0.9934033967812951,0.9996295961627908,0.9857157366324579,0.9522226855864404,0.9005005472347051,0.8326342399276649,0.7513594531396108,0.6599523718815475,0.5620976137494145,0.4617397020635253,0.36292406221329676,0.269633950641606,0.18562988985838125,0.11429808185400187,0.05851391036577036,0.02052603421771959,0.00186574392864719,0.003285235422581023,0.024727289026106603,0.06532757599235228,0.12344949957513152,0.19675016621098956,0.2822748275108896,0.3765759861083756,0.47585236420852894,0.5761021330187782,0.6732842263868908,0.7634812360955798,0.8430573225085342,0.9088047751926223,0.9580733156604082,0.9888769300425764,0.9999739252666615,0.9909169816797174,0.9620711844944541,0.914599307211776,0.850414940244351,0.7721053541260499,0.6828272066886654,0.5861792982489297,0.48605750404058395,0.3864977315621945,0.29151323322803724,0.2049328322438822,0.13024658282155044,0.0704650861641391,0.027998133192225216,0.00455756592087847,0.0010882731424776138,0.017730101978733426,0.05381222064597607,0.1078801596708534,0.17775444152522213,0.2606184353213442,0.3531318951461153,0.4515656053057681,0.551951704935524,0.6502436323905738,0.7424792420639319,0.8249405183960168,0.8943034490064029,0.947772015565675,0.983190901237726,0.9991323714577414,0.9949538258837289,0.9708237016032524,0.9277146834377851,0.867364495037279,0.7922058512751008,0.7052683955604633,0.6100565749742848,0.5104083760777252,0.4103406157520196,0.31388702339123936,0.2249356413517018,0.14707209804367904,0.08343507132240563,0.03658976844729178,0.008424522629458697,7.46743578973752e-5,0.011876805847493066,0.043355173416670945,0.09324088470571901,0.15952304770189452,0.2395298297560462,0.33003615910233797,0.42739372743616694,0.5276780531479291,0.6268466770973358,0.7209021140596149,0.8060529912738283,0.8788668786024683,0.9364086497206333,0.9763587969988501,0.9971069308086907,0.997816694296075,0.978459476909205,0.9398155676892445,0.8834427018350095,0.8116132684283115,0.7272227104764861,0.6336728096629768,0.534734560596631,0.4343961620955652,0.3367022529728889,0.24559087272876606,0.16473471925723365,0.0973931024686524,0.04628056157325605,0.013457442060284874,0.00024684321316392754,0.007181284004117494,0.03398123726519425,0.07956639742268012,0.14209922759300636,0.2190590306572961,0.307343558511232,0.4033940636234265,0.5033387520761842,0.6031488555003628,0.6988010306463261,0.7864395402695308,0.8625316778203261,0.9240101707736016,0.9683968223224327,0.9939024074409466,0.9994987965091546,0.9849603991969209,0.9508732580057482,0.8986114249072967,0.8302815733363581,0.748638078227196,0.6569719872155406,0.5589783585754465,0.45860731349448736,0.35990480676908243,0.2668495344481806,0.18319255267600876,0.11230607269523696,0.057047527079496785,0.019644386684519954,0.0016043713427769668,0.0036546737076720848,0.025712646132362016,0.06688913219475695,0.12552430857480007,0.19925459249905375,0.28510791771438954,0.3796235384185329,0.4789915318533854,0.5792063762140874,0.676228413152261,0.7661466863221199,0.8453365919514506,0.9106059865468377,0.9593238621326802,0.989526402129911,0.99999614276236,0.9903110489969775,0.9608615267674563,0.9128346857190197,0.8481664868425445,0.7694637039261973,0.6798988445569533,0.5830822664036907,0.4829166437727815,0.38343965088572696,0.2886612033129357,0.20240181835842713,0.12813861008429028,0.06886512691341418,0.026970681753077486,0.004144038839994091,0.0013053396881418933,0.01856901220289081,0.05523915809443897,0.10983760452392693,0.1801634892205552,0.26338197719509693,0.3561385328812309,0.4546941413959235,0.5550760281542824,0.6532378013322043,0.7452225618389816,0.8273224058399045,0.8962278902844112,0.9491614364888015,0.9839892942767074,0.9993075534053313,0.9944987351591643,0.9697566829044133,0.9260787482668695,0.8652255879079053,0.7896501914903757,0.7023990017145978,0.606989112275091,0.5072664938845926,0.4072509632726364,0.3109741444544767,0.2223169540485615,0.14485316160636413,0.08170533103377486,0.03541895010344187,0.007859821894108499,0.00013885430626309203,0.012567279387154295,0.04464410757323811,0.09507632256940923,0.16183100280951845,0.2422172684839482,0.3329947508497737,0.4305042114296614,0.5308150458406987,0.6298837263772978,0.7237167965318023,0.8085318471447394,0.880909985242104,0.9379336495417174,0.9773042172894149,0.9974346616959469,0.9975135249546059,0.9775376280890309,0.9383121990976536,0.8814184142294736,0.8091496608013219,0.7244190908016015,0.6306421917925633,0.5315991086757237,0.4312822661275966,0.3337354340413783,0.24289072324486066,0.16241008219194125,0.09553768389503858,0.044969153376480386,0.01274290707821163,0.00015798433648755994,0.007721683132346113,0.03512911092040372,0.08127547484105468,0.14430061589843268,0.22166399193169428,0.31024708681828733,0.40647911779587875,0.5064809736427647,0.6062215815733022,0.7016803996998502,0.7890094849952509,0.8646886037984004,0.9256671323614974,0.9694870274320491,0.9943819099264215,0.9993482676349614,0.9841859067789465,0.9495060218176873,0.8967065582122598,0.8279158612722115,0.7459068825993631,0.6539854024646129,0.5558567738722541,0.45547655985531027,0.3568910848096574,0.2640743272397188,0.18076772876498454,0.11032937668447529,0.055598639545177686,0.01878171225378361,0.0013626844044971054,0.004043716657447682,0.0267167366567454,0.06846779542500575,0.12761390862810162,0.20177089763951167,0.2879494957327583,0.382675845362343,0.48213152929137854,0.5823074909132393,0.67916563924174,0.7688016242776907,0.8476022212778853,0.9123909797717179,0.9605562662153325,0.9901565388866681,0.9999986113933069,0.9896857499916397,0.9596336659161084,0.9110537580677243,0.8459042815488897,0.766811410439797,0.6769633767745775,0.5799819529722512,0.4797764582639677,0.3803861741138607,0.2858175208649071,0.19988255901617696,0.12604532514093003,0.06728219664262663,0.02596191404210496,0.0037500970948263768,0.0015421036925553078,0.01942693800464279,0.05668366272187653,0.11181046002467931,0.18258516982933232,0.26615486501555896,0.3591508528613872,0.4578244669784886,0.558198175978253,0.6562259176819157,0.7479561958048948,0.829691364692123,0.8981366813396195,0.950533116418169,0.9847685706899867,0.9994630136860959,0.9940241127066507,0.9686711097400621,0.9244259838229492,0.8630722550857273,0.7870830910924786,0.6995216135060908,0.6039174237163362,0.5041243246792928,0.40416497419782293,0.3080687316674227,0.21970923467991654,0.14264825277102128,0.07999211256231975,0.03426648179777292,0.007314559728339054,0.00022277778725943165,0.013277005561088906,0.045951027392398536,0.09692775412232957,0.1641523149278039,0.24491488912294923,0.3359599389762534,0.4336174403701901,0.5339508213996769,0.632915645505447,0.7265226426303071,0.8109985166141975,0.8829380466861121,0.9394413518445031,0.9782307850016596,0.9977427448919187,0.9971907048069086,0.9765969174712865,0.9367915180358286,0.8793790613464011,0.8066738423704541,0.7216066070137402,0.6276064138123894,0.5284624086521408,0.42817108437508766,0.33077518223348884,0.24020072907191542,0.16009877926477112,0.09369824078782257,0.04367571800365083,0.012047617793488674,8.886823684389755e-5,0.00828152628638501,0.03629534606189283,0.0830010910550481,0.14651605363022052,0.22427994693121378,0.31315810999245147,0.4095678658593356,0.5096229392236264,0.6092901121025235,0.7045518027739953,0.791568014414492,0.8668311252935649,0.9273072809344376,0.9705586887270152,0.9948418852982971,0.9991780154858136,0.9833922899694479,0.9481210310253995,0.8947860223879813,0.8255371971761588,0.7431659741331184,0.6509927355929367,0.5527329829362397,0.4523475648044385,0.35388301537106026,0.2613084386316008,0.1783555139011742,0.10836807189728831,0.054167304990969944,0.017938044999438685,0.00114069265996658,0.0044523489054620335,0.027739520939673523,0.07006350332909056,0.12971821719997906,0.2042989822432567,0.29079944932914736,0.3857327863795713,0.48527223249895257,0.5854053546282995,0.6820957886406711,0.7714459450975104,0.8498541209998518,0.9141596843636359,0.9617704792308486,0.9907673154236845,0.9999813310619965,0.9890411093618082,0.9583876504385008,0.9092565946009983,0.8436284137160893,0.7641485784271795,0.6740209192866924,0.5768784804108971,0.4766370715452405,0.37733742185292607,0.28298229820376625,0.1973751537228775,0.1239668106721099,0.06571635787446778,0.024971869903650246,0.003375756245306394,0.001798555804008839,0.020303845497652795,0.058145677473143365,0.11379864824919733,0.18501938769997406,0.26893698925916226,0.36216873610602995,0.4609564584116431,0.5613180250886215,0.65920786341504,0.7506800359885039,0.8320473013835835,0.9000297467785685,0.9518870011750667,0.985528699697691,0.9995987461596623,0.993529977272825,0.9675670249881856,0.9227564553870303,0.8609045816232759,0.7845046514767818,0.6966363445860161,0.6008416306236244,0.5009819925712757,0.4010827704182486,0.30517089978811873,0.21711258624541452,0.14045745862721515,0.07829548357677074,0.033132409050579625,0.006788757668953815,0.000326441486079021,0.01400595633650814,0.047275881253411534,0.0987951062365724,0.1664868923694015,0.24762258512248364,0.3389316063627289,0.43673329129133,0.5370852559678931,0.6359423147268282,0.7293195415297241,0.8134529022536516,0.8849509828300521,0.9409316970777137,0.9791384635379987,0.9980311682279255,0.9968482466037383,0.9756373822121743,0.9352535845677099,0.8773247237361852,0.8041859109256695,0.7187853702005851,0.6245655956296622,0.5253245844194241,0.42506273972354525,0.327821614473187,0.23752099645950953,0.15780090176760375,0.09187484580139105,0.04240030654292193,0.011371601668637765,3.9497644185537695e-5,0.008860791353509923,0.03747989662566603,0.08474317790621211,0.14874545328305433,0.2269067923308215,0.3160765130539262,0.41266018581432024,0.5127645247173624,0.6123543258872138,0.7074151264540369,0.7941150274702791,0.8689591576803164,0.928930551709807,0.9716117638787967,0.9952823153884591,0.9989880467863337,0.982579580114773,0.9467183403332728,0.8928498932918502,0.8231456750007557,0.7404154610889088,0.6479941048051332,0.549607109151118,0.4492204519310256,0.35088071726612047,0.2585519778709392,0.17595600336232226,0.10642223580143045,0.052753579951775764,0.017113418244668444,0.0009384048774227494,0.004880554311543606,0.02878095858314078,0.07167619287959986,0.13183715117441902,0.2068387464559167,0.2936576659359915,0.3887942407271122,0.4884135174243344,0.5884998449997968,0.685018745613966,0.7740795443360571,0.852092202171779,0.9159120304621408,0.9629664532201571,0.9913587076164982,0.9999443024509687,0.9883771525695095,0.9571235295497952,0.9074432663033307,0.8413389732364072,0.7614753130649751,0.671071588314584,0.5737719713006937,0.4734986076163174,0.3742935145227545,0.28015564731523496,0.19487970151610878,0.12190314877506564,0.06416767245646199,0.024000588442546433,0.003021031077142078,0.0020746858931533496,0.0211997000457832,0.05962514460155671,0.1158020906678825,0.1874660466855274,0.2717282400375188,0.36519206341464905,0.464089991987939,0.5644354522575374,0.6621835207504211,0.7533939748035249,0.8343901228594173,0.9019070118288945,0.9532230372837336,0.9862696512761779,0.9997147454648592,0.9930163483750645,0.9664444722579612,0.9210702289021745,0.8587226531392742,0.781914974486675,0.6937433089168239,0.5977618544846809,0.49783962167648255,0.39800447367473635,0.3022807632753324,0.21452711130770535,0.13828086570696851,0.07661551109063747,0.032016776655444,0.006282436484090437,0.0004498413082044683,0.01475410292130308,0.048618616827178496,0.1006783051554675,0.1688346429231335,0.25034024953373557,0.34190963563407256,0.4398516411231512,0.540218225741514,0.6389636144940118,0.7321073827580451,0.8158949071196051,0.8869487141669397,0.9424046263757231,0.9800272170469142,0.9982999203118124,0.9964861638715328,0.9746590602114857,0.9336984594385626,0.8752554825410859,0.8016859647353691,0.7159554917953932,0.6215198573508326,0.5221857599152921,0.4219573549464167,0.32487484742064665,0.23485163125176461,0.1555165404621664,0.09006757095626167,0.0411429693705167,0.010714885404967955,9.874508552332184e-6,0.009459455453899313,0.038682715824304714,0.08650166658557273,0.15098872680003117,0.22954442437524014,0.31900218073158015,0.41575595552027345,0.5159056060374076,0.615414101896952,0.71027025764437,0.7966504235606499,0.8710726169056746,0.9305368805715419,0.9726462112930134,0.9957031828007922,0.998778369039912,0.9817478093153195,0.9452980051448833,0.8908982473972297,0.8207413892064269,0.7376554521065428,0.644989628541061,0.5464792759827021,0.4460953447499961,0.34788430907971135,0.25580505383246566,0.17356929192429116,0.10449194525356681,0.05135752026700624,0.016307864560652974,0.0007558290468324125,0.00532831596244443,0.029841008452425877,0.07330580037849538,0.13397062685757943,0.20939008996184422,0.2965240326595089,0.39186008748353707,0.49155525999300137,0.591590839801277,0.6879343947104644,0.7767023179714807,0.8543163763939001,0.9176479488530385,0.9641441409446375,0.9919306921062586,0.9998875270227785,0.9876939058397193,0.9558413531802816,0.9056138447976259,0.8390360505383246,0.7587917199419105,0.6681155003509747,0.570662548342588,0.47036119044035396,0.37125457235164655,0.2773376798464666,0.19239630096128263,0.11985442096034848,0.06263620155866645,0.02304810802248375,0.002685935601300038,0.002370483053383221,0.02211446626455721,0.061122005671073454,0.11782070814873352,0.18992505014790434,0.27452850710160887,0.3682207153718139,0.4672249439389597,0.5675503343527557,0.6651527721556053,0.7560979050546116,0.8367197365826966,0.9037684023423185,0.9545411719733932,0.9869913961593577,0.9998110070199452,0.9924832463007192,0.9653034958880148,0.9193673709709822,0.8565265558156472,0.7793141624092619,0.6908426207678404,0.5946782169447761,0.4946973361123294,0.3949302055539565,0.2993984362837219,0.2119529119879195,0.1361185599815407,0.07495226145950085,0.030919628677653632,0.005795616172440343,0.0005929723795869979,0.015521415765113178,0.04997918107823518,0.1025772764963605,0.17119547385751088,0.253067775014352,0.34489390916398205,0.4429723666968525,0.5433496069742221,0.6419794254716509,0.7348860562010217,0.818324434757667,0.8889311617902416,0.9438600815606388,0.9808970104244049,0.9985489905284048,0.9961044709118496,0.9736619901109991,0.9321262040728557,0.8731714194921372,0.7991741025424678,0.7131170835728502,0.6184693192765203,0.5190460591173128,0.41885505270040835,0.3219349974673207,0.23219273888335895,0.15324578557619828,0.08827648763623802,0.03990375614882724,0.010077494941504395,0.0],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],74:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var EPS = require( '@stdlib/constants/float64/eps' );
var haversin = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof haversin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the half-value versed sine (for -256*pi < x < 0 )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed sine (for 0 < x < 256*pi )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed sine (for -2**60 (pi/2) < x < -2**20 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed sine (for 2**20 (pi/2) < x < 2**60 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed sine (for x <= -2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the half-value versed sine (for x >= 2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = haversin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = haversin( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = haversin( PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = haversin( NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/haversin/test/test.js")
},{"./../lib":66,"./fixtures/julia/huge_negative.json":68,"./fixtures/julia/huge_positive.json":69,"./fixtures/julia/large_negative.json":70,"./fixtures/julia/large_positive.json":71,"./fixtures/julia/medium_negative.json":72,"./fixtures/julia/medium_positive.json":73,"@stdlib/constants/float64/eps":42,"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/abs":58,"tape":217}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":76}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var polyval13 = require( './polyval_c13.js' );
var polyval46 = require( './polyval_c46.js' );


// MAIN //

/**
* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*     ```
*
*     where the Remez error is
*
*     ```tex
*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*     ```
*
* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*     ```tex
*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*     ```
*
*     Since
*
*     ```tex
*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*     ```
*
*     a correction term is necessary in \\( \cos(x) \\). Hence,
*
*     ```tex
*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*     ```
*
*     For better accuracy, rearrange to
*
*     ```tex
*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*     ```
*
*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
}


// EXPORTS //

module.exports = kernelCos;

},{"./polyval_c13.js":77,"./polyval_c46.js":78}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 0.0416666666666666;
	}
	return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return -2.7557314351390663e-7;
	}
	return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":80}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
*
*     ```tex
*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*     ```
*
*     where
*
*     ```tex
*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*     ```
*
* -   We have
*
*     ```tex
*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*     ```
*
*     For better accuracy, let
*
*     ```tex
*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*     ```
*
*     then
*
*     ```tex
*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*     ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.58
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
}


// EXPORTS //

module.exports = kernelSin;

},{}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Infinity, 11 );
* // returns Infinity
*
* x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":82}],82:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/number/float64/base/normalize' );
var floatExp = require( '@stdlib/number/float64/base/exponent' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

// Normalization workspace:
var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

// High/low words workspace:
var WORDS = [ 0, 0 ]; // WARNING: not thread safe


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Infinity, 11 );
* // returns Infinity
*
* @example
* var x = ldexp( -Infinity, -118 );
* // returns -Infinity
*/
function ldexp( frac, exp ) {
	var high;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	normalize( FRAC, frac );
	frac = FRAC[ 0 ];
	exp += FRAC[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	toWords( WORDS, frac );
	high = WORDS[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, WORDS[ 1 ] );
}


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/constants/float64/exponent-bias":43,"@stdlib/constants/float64/max-base2-exponent":46,"@stdlib/constants/float64/max-base2-exponent-subnormal":45,"@stdlib/constants/float64/min-base2-exponent-subnormal":47,"@stdlib/constants/float64/ninf":48,"@stdlib/constants/float64/pinf":49,"@stdlib/math/base/assert/is-infinite":54,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/copysign":61,"@stdlib/number/float64/base/exponent":91,"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/normalize":102,"@stdlib/number/float64/base/to-words":105}],83:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":85}],84:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

/* eslint-disable array-element-newline */

'use strict';

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ```tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zeros( 20 );
var Q = zeros( 20 );
var FQ = zeros( 20 );
var IQ = zeros( 20 );


// FUNCTIONS //

/**
* Returns an array of zeros.
*
* @private
* @param {NonNegativeInteger} len - array length
* @returns {NonNegativeIntegerArray} output array
*/
function zeros( len ) {
	var out;
	var i;

	out = [];
	for ( i = 0; i < len; i++ ) {
		out.push( 0.0 );
	}
	return out;
}

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
}


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
}


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":64,"@stdlib/math/base/special/ldexp":81}],85:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff|0; // asm type annotation

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb|0; // asm type annotation

// Arrays for storing temporary values:
var TX = [ 0.0, 0.0, 0.0 ]; // WARNING: not thread safe
var TY = [ 0.0, 0.0 ]; // WARNING: not thread safe


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = [ 0.0, 0.0 ];
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = (hx & ABS_MASK)|0; // asm type annotation

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
}


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":84,"./rempio2_medium.js":86,"@stdlib/number/float64/base/from-words":93,"@stdlib/number/float64/base/get-high-word":97,"@stdlib/number/float64/base/get-low-word":99}],86:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff|0; // asm type annotation


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = (ix >> 20)|0; // asm type annotation
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
}


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":87,"@stdlib/number/float64/base/get-high-word":97}],87:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Infinity );
* // returns Infinity
*
* v = round( -Infinity );
* // returns -Infinity
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":88}],88:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Infinity );
* // returns Infinity
*
* @example
* var v = round( -Infinity );
* // returns -Infinity
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


// EXPORTS //

module.exports = round;

},{}],89:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var Number = require( './number.js' );


// EXPORTS //

module.exports = Number;

},{"./number.js":90}],90:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],91:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/exponent
*
* @example
* var exponent = require( '@stdlib/number/float64/base/exponent' );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns -1023
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './main.js' );


// EXPORTS //

module.exports = exponent;

},{"./main.js":92}],92:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var EXP_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );
var BIAS = require( '@stdlib/constants/float64/exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* @example
* var exp = exponent( -3.14 );
* // returns 1
*
* @example
* var exp = exponent( 0.0 );
* // returns -1023
*
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return (high - BIAS)|0; // asm type annotation
}


// EXPORTS //

module.exports = exponent;

},{"@stdlib/constants/float64/exponent-bias":43,"@stdlib/constants/float64/high-word-exponent-mask":44,"@stdlib/number/float64/base/get-high-word":97}],93:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var fromWords = require( './main.js' );


// EXPORTS //

module.exports = fromWords;

},{"./main.js":95}],94:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":34}],95:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":94,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],96:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":34}],97:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './main.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./main.js":98}],98:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":96,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],99:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-low-word
*
* @example
* var getLowWord = require( '@stdlib/number/float64/base/get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './main.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./main.js":101}],100:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":34}],101:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
}


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":100,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],102:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/number/float64/base/normalize
*
* @example
* var normalize = require( '@stdlib/number/float64/base/normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var normalize = require( '@stdlib/number/float64/base/normalize' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*/

// MODULES //

var normalize = require( './main.js' );


// EXPORTS //

module.exports = normalize;

},{"./main.js":103}],103:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './normalize.js' );


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = new Float64Array( 2 );
*
* var v = normalize( out, 3.14e-319 );
* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
*
* var bool = ( v === out );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0.0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":104}],104:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( [ 0.0, 0 ], 0.0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( [ 0.0, 0 ], Infinity );
* // returns [ Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], -Infinity );
* // returns [ -Infinity, 0 ]
*
* @example
* var out = normalize( [ 0.0, 0 ], NaN );
* // returns [ NaN, 0 ]
*/
function normalize( out, x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		out[ 0 ] = x;
		out[ 1 ] = 0;
		return out;
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		out[ 0 ] = x * SCALAR;
		out[ 1 ] = -52;
		return out;
	}
	out[ 0 ] = x;
	out[ 1 ] = 0;
	return out;
}


// EXPORTS //

module.exports = normalize;

},{"@stdlib/constants/float64/smallest-normal":50,"@stdlib/math/base/assert/is-infinite":54,"@stdlib/math/base/assert/is-nan":56,"@stdlib/math/base/special/abs":58}],105:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var toWords = require( './main.js' );


// EXPORTS //

module.exports = toWords;

},{"./main.js":107}],106:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":34,"dup":94}],107:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './to_words.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {(Array|TypedArray|Object)} [out] - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	if ( arguments.length === 1 ) {
		return fcn( [ 0, 0 ], out );
	}
	return fcn( out, x );
}


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":108}],108:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
*
* @private
* @param {(Array|TypedArray|Object)} out - output array
* @param {number} x - input value
* @returns {(Array|TypedArray|Object)} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( out, 3.14e201 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( out, x ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ 0 ] = UINT32_VIEW[ HIGH ];
	out[ 1 ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":106,"@stdlib/array/float64":2,"@stdlib/array/uint32":7}],109:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './native_class.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var nativeClass;
if ( hasToStringTag() ) {
	nativeClass = polyfill;
} else {
	nativeClass = builtin;
}


// EXPORTS //

module.exports = nativeClass;

},{"./native_class.js":110,"./polyfill.js":111,"@stdlib/assert/has-tostringtag-support":20}],110:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":112}],111:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":112,"./tostringtag.js":113,"@stdlib/assert/has-own-property":16}],112:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],113:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{}],114:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],115:[function(require,module,exports){

},{}],116:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"dup":115}],117:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],118:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":209}],119:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":117,"inherits":204,"readable-stream/lib/_stream_duplex.js":121,"readable-stream/lib/_stream_passthrough.js":122,"readable-stream/lib/_stream_readable.js":123,"readable-stream/lib/_stream_transform.js":124,"readable-stream/lib/_stream_writable.js":125,"readable-stream/lib/internal/streams/end-of-stream.js":129,"readable-stream/lib/internal/streams/pipeline.js":131}],120:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],121:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":123,"./_stream_writable":125,"_process":209,"inherits":204}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":124,"inherits":204}],123:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":120,"./_stream_duplex":121,"./internal/streams/async_iterator":126,"./internal/streams/buffer_list":127,"./internal/streams/destroy":128,"./internal/streams/from":130,"./internal/streams/state":132,"./internal/streams/stream":133,"_process":209,"buffer":134,"events":117,"inherits":204,"string_decoder/":216,"util":115}],124:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":120,"./_stream_duplex":121,"inherits":204}],125:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":120,"./_stream_duplex":121,"./internal/streams/destroy":128,"./internal/streams/state":132,"./internal/streams/stream":133,"_process":209,"buffer":134,"inherits":204,"util-deprecate":225}],126:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":129,"_process":209}],127:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":134,"util":115}],128:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":209}],129:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":120}],130:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],131:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":120,"./end-of-stream":129}],132:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":120}],133:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":117}],134:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":114,"buffer":134,"ieee754":203}],135:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":136,"get-intrinsic":199}],136:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"function-bind":198,"get-intrinsic":199}],137:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":138,"./lib/keys.js":139}],138:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],139:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],140:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"object-keys":207}],141:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],142:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":172,"./ToPrimitive":174,"./Type":179}],143:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = GetIntrinsic('%TypeError%');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (Type(LeftFirst) !== 'Boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = Type(px) === 'String' && Type(py) === 'String';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/isPrefixOf":190,"./ToNumber":172,"./ToPrimitive":174,"./Type":179,"get-intrinsic":199}],144:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value, optMessage) {
	if (value == null) {
		throw new $TypeError(optMessage || ('Cannot call method on ' + value));
	}
	return value;
};

},{"get-intrinsic":199}],145:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":148,"./InLeapYear":152,"./MonthFromTime":162,"get-intrinsic":199}],146:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":194,"./floor":183}],147:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":183}],148:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":146,"./DayFromYear":147,"./YearFromTime":181}],149:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":184}],150:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else {
		throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
	}
};

},{"../helpers/assertRecord":187,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179,"get-intrinsic":199}],151:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],152:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $EvalError = GetIntrinsic('%EvalError%');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":149,"./YearFromTime":181,"get-intrinsic":199}],153:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":187,"./Type":179,"has":202}],154:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":205}],155:[function(require,module,exports){
'use strict';

var has = require('has');

var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/assertRecord":187,"./Type":179,"has":202}],156:[function(require,module,exports){
'use strict';

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var Type = require('./Type');

var assertRecord = require('../helpers/assertRecord');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"../helpers/assertRecord":187,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179}],157:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');

var Type = require('./Type');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor({
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor,
		Type: Type
	}, Desc);
};

},{"../helpers/isPropertyDescriptor":191,"./IsAccessorDescriptor":153,"./IsDataDescriptor":155,"./Type":179}],158:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":188,"../helpers/timeConstants":194}],159:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":188,"./DateFromTime":145,"./Day":146,"./MonthFromTime":162,"./ToInteger":171,"./YearFromTime":181,"./floor":183,"./modulo":184,"get-intrinsic":199}],160:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":188,"../helpers/timeConstants":194,"./ToInteger":171}],161:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],162:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":148,"./InLeapYear":152}],163:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":189}],164:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":194,"./floor":183,"./modulo":184}],165:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":179}],166:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":188,"./ToNumber":172,"./abs":182,"get-intrinsic":199}],167:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":194,"./DayFromYear":147}],168:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":194,"./modulo":184}],169:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],170:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":172}],171:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/sign":193,"./ToNumber":172,"./abs":182,"./floor":183}],172:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	// eslint-disable-next-line no-control-regex
	var trimmed = prim.replace(/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g, '');
	if ((/^0[ob]|^[+-]0x/).test(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":174}],173:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Object = GetIntrinsic('%Object%');

var CheckObjectCoercible = require('./CheckObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = function ToObject(value) {
	CheckObjectCoercible(value);
	return $Object(value);
};

},{"./CheckObjectCoercible":144,"get-intrinsic":199}],174:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":195}],175:[function(require,module,exports){
'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (has(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (has(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (has(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (has(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (has(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (has(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":154,"./ToBoolean":169,"./Type":179,"get-intrinsic":199,"has":202}],176:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":199}],177:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":188,"../helpers/isNaN":189,"../helpers/sign":193,"./ToNumber":172,"./abs":182,"./floor":183,"./modulo":184}],178:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":172}],179:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],180:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":146,"./modulo":184}],181:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":135,"get-intrinsic":199}],182:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":199}],183:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],184:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":192}],185:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":194,"./modulo":184}],186:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":142,"./5/AbstractRelationalComparison":143,"./5/CheckObjectCoercible":144,"./5/DateFromTime":145,"./5/Day":146,"./5/DayFromYear":147,"./5/DayWithinYear":148,"./5/DaysInYear":149,"./5/FromPropertyDescriptor":150,"./5/HourFromTime":151,"./5/InLeapYear":152,"./5/IsAccessorDescriptor":153,"./5/IsCallable":154,"./5/IsDataDescriptor":155,"./5/IsGenericDescriptor":156,"./5/IsPropertyDescriptor":157,"./5/MakeDate":158,"./5/MakeDay":159,"./5/MakeTime":160,"./5/MinFromTime":161,"./5/MonthFromTime":162,"./5/SameValue":163,"./5/SecFromTime":164,"./5/StrictEqualityComparison":165,"./5/TimeClip":166,"./5/TimeFromYear":167,"./5/TimeWithinDay":168,"./5/ToBoolean":169,"./5/ToInt32":170,"./5/ToInteger":171,"./5/ToNumber":172,"./5/ToObject":173,"./5/ToPrimitive":174,"./5/ToPropertyDescriptor":175,"./5/ToString":176,"./5/ToUint16":177,"./5/ToUint32":178,"./5/Type":179,"./5/WeekDay":180,"./5/YearFromTime":181,"./5/abs":182,"./5/floor":183,"./5/modulo":184,"./5/msFromTime":185}],187:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
	'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
		if (Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	}
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
	var predicate = predicates[recordType];
	if (typeof predicate !== 'function') {
		throw new $SyntaxError('unknown record type: ' + recordType);
	}
	if (!predicate(Type, value)) {
		throw new $TypeError(argumentName + ' must be a ' + recordType);
	}
};

},{"get-intrinsic":199,"has":202}],188:[function(require,module,exports){
'use strict';

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],189:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],190:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":135}],191:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var has = require('has');
var $TypeError = GetIntrinsic('%TypeError%');

module.exports = function IsPropertyDescriptor(ES, Desc) {
	if (ES.Type(Desc) !== 'Object') {
		return false;
	}
	var allowed = {
		'[[Configurable]]': true,
		'[[Enumerable]]': true,
		'[[Get]]': true,
		'[[Set]]': true,
		'[[Value]]': true,
		'[[Writable]]': true
	};

	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
		if (has(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"get-intrinsic":199,"has":202}],192:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],193:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],194:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],195:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":196,"is-callable":205}],196:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],197:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],198:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":197}],199:[function(require,module,exports){
'use strict';

var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"function-bind":198,"has":202,"has-symbols":200}],200:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":201}],201:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],202:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":198}],203:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],204:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],205:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

module.exports = reflectApply
	? function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value);
	}
	: function isCallable(value) {
		if (value === documentDotAll) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};

},{}],206:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":208}],207:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":206,"./isArguments":208}],208:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],209:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],210:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"through":223,"timers":224}],211:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":134}],212:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":186,"function-bind":198}],213:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":212,"./polyfill":214,"./shim":215,"define-properties":140,"function-bind":198}],214:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":212}],215:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":214,"define-properties":140}],216:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":211}],217:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":218,"./lib/results":220,"./lib/test":221,"_process":209,"defined":141,"through":223,"timers":224}],218:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":209,"fs":116,"through":223}],219:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"timers":224}],220:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":209,"events":117,"function-bind":198,"has":202,"inherits":204,"object-inspect":222,"resumer":210,"through":223,"timers":224}],221:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":219,"deep-equal":137,"defined":141,"events":117,"has":202,"inherits":204,"path":118,"string.prototype.trim":213}],222:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],223:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":209,"stream":119}],224:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":209,"timers":224}],225:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[74]);
