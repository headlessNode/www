// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
*
* @module @stdlib/array/float64
*
* @example
* var ctor = require( '@stdlib/array/float64' );
*
* var arr = new ctor( 10 );
* // returns <Float64Array>
*/

// MODULES //

var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasFloat64ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":2,"./polyfill.js":3,"@stdlib/assert/has-float64array-support":14}],2:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],3:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],4:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint16
*
* @example
* var ctor = require( '@stdlib/array/uint16' );
*
* var arr = new ctor( 10 );
* // returns <Uint16Array>
*/

// MODULES //

var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint16ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":5,"./polyfill.js":6,"@stdlib/assert/has-uint16array-support":22}],5:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],6:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],7:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint32
*
* @example
* var ctor = require( '@stdlib/array/uint32' );
*
* var arr = new ctor( 10 );
* // returns <Uint32Array>
*/

// MODULES //

var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint32ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":8,"./polyfill.js":9,"@stdlib/assert/has-uint32array-support":25}],8:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],9:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],10:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
*
* @module @stdlib/array/uint8
*
* @example
* var ctor = require( '@stdlib/array/uint8' );
*
* var arr = new ctor( 10 );
* // returns <Uint8Array>
*/

// MODULES //

var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var ctor;
if ( hasUint8ArraySupport() ) {
	ctor = builtin;
} else {
	ctor = polyfill;
}


// EXPORTS //

module.exports = ctor;

},{"./main.js":11,"./polyfill.js":12,"@stdlib/assert/has-uint8array-support":28}],11:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = ctor;

},{}],12:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// TODO: write polyfill

// MAIN //

/**
* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
*
* @throws {Error} not implemented
*/
function polyfill() {
	throw new Error( 'not implemented' );
}


// EXPORTS //

module.exports = polyfill;

},{}],13:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],14:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Float64Array` support.
*
* @module @stdlib/assert/has-float64array-support
*
* @example
* var hasFloat64ArraySupport = require( '@stdlib/assert/has-float64array-support' );
*
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasFloat64ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./main.js":15}],15:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFloat64Array = require( '@stdlib/assert/is-float64array' );
var GlobalFloat64Array = require( './float64array.js' );


// MAIN //

/**
* Tests for native `Float64Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Float64Array` support
*
* @example
* var bool = hasFloat64ArraySupport();
* // returns <boolean>
*/
function hasFloat64ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalFloat64Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
		bool = (
			isFloat64Array( arr ) &&
			arr[ 0 ] === 1.0 &&
			arr[ 1 ] === 3.14 &&
			arr[ 2 ] === -3.14 &&
			arr[ 3 ] !== arr[ 3 ]
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasFloat64ArraySupport;

},{"./float64array.js":13,"@stdlib/assert/is-float64array":43}],16:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test whether an object has a specified property.
*
* @module @stdlib/assert/has-own-property
*
* @example
* var hasOwnProp = require( '@stdlib/assert/has-own-property' );
*
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* bool = hasOwnProp( beep, 'bop' );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":17}],17:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

var has = Object.prototype.hasOwnProperty;


// MAIN //

/**
* Tests if an object has a specified property.
*
* @param {*} value - value to test
* @param {*} property - property to test
* @returns {boolean} boolean indicating if an object has a specified property
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'boop' );
* // returns true
*
* @example
* var beep = {
*     'boop': true
* };
*
* var bool = hasOwnProp( beep, 'bap' );
* // returns false
*/
function hasOwnProp( value, property ) {
	if (
		value === void 0 ||
		value === null
	) {
		return false;
	}
	return has.call( value, property );
}


// EXPORTS //

module.exports = hasOwnProp;

},{}],18:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Symbol` support.
*
* @module @stdlib/assert/has-symbol-support
*
* @example
* var hasSymbolSupport = require( '@stdlib/assert/has-symbol-support' );
*
* var bool = hasSymbolSupport();
* // returns <boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":19}],19:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests for native `Symbol` support.
*
* @returns {boolean} boolean indicating if an environment has `Symbol` support
*
* @example
* var bool = hasSymbolSupport();
* // returns <boolean>
*/
function hasSymbolSupport() {
	return (
		typeof Symbol === 'function' &&
		typeof Symbol( 'foo' ) === 'symbol'
	);
}


// EXPORTS //

module.exports = hasSymbolSupport;

},{}],20:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `toStringTag` support.
*
* @module @stdlib/assert/has-tostringtag-support
*
* @example
* var hasToStringTagSupport = require( '@stdlib/assert/has-tostringtag-support' );
*
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":21}],21:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasSymbols = require( '@stdlib/assert/has-symbol-support' );


// VARIABLES //

var FLG = hasSymbols();


// MAIN //

/**
* Tests for native `toStringTag` support.
*
* @returns {boolean} boolean indicating if an environment has `toStringTag` support
*
* @example
* var bool = hasToStringTagSupport();
* // returns <boolean>
*/
function hasToStringTagSupport() {
	return ( FLG && typeof Symbol.toStringTag === 'symbol' );
}


// EXPORTS //

module.exports = hasToStringTagSupport;

},{"@stdlib/assert/has-symbol-support":18}],22:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint16Array` support.
*
* @module @stdlib/assert/has-uint16array-support
*
* @example
* var hasUint16ArraySupport = require( '@stdlib/assert/has-uint16array-support' );
*
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint16ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./main.js":23}],23:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint16Array = require( '@stdlib/assert/is-uint16array' );
var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
var GlobalUint16Array = require( './uint16array.js' );


// MAIN //

/**
* Tests for native `Uint16Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
*
* @example
* var bool = hasUint16ArraySupport();
* // returns <boolean>
*/
function hasUint16ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint16Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
		arr = new GlobalUint16Array( arr );
		bool = (
			isUint16Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint16ArraySupport;

},{"./uint16array.js":24,"@stdlib/assert/is-uint16array":52,"@stdlib/constants/uint16/max":68}],24:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],25:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint32Array` support.
*
* @module @stdlib/assert/has-uint32array-support
*
* @example
* var hasUint32ArraySupport = require( '@stdlib/assert/has-uint32array-support' );
*
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint32ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./main.js":26}],26:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint32Array = require( '@stdlib/assert/is-uint32array' );
var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
var GlobalUint32Array = require( './uint32array.js' );


// MAIN //

/**
* Tests for native `Uint32Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
*
* @example
* var bool = hasUint32ArraySupport();
* // returns <boolean>
*/
function hasUint32ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint32Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
		arr = new GlobalUint32Array( arr );
		bool = (
			isUint32Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&            // truncation
			arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&            // wrap around
			arr[ 4 ] === 1               // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint32ArraySupport;

},{"./uint32array.js":27,"@stdlib/assert/is-uint32array":54,"@stdlib/constants/uint32/max":69}],27:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],28:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test for native `Uint8Array` support.
*
* @module @stdlib/assert/has-uint8array-support
*
* @example
* var hasUint8ArraySupport = require( '@stdlib/assert/has-uint8array-support' );
*
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/

// MODULES //

var hasUint8ArraySupport = require( './main.js' );


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./main.js":29}],29:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isUint8Array = require( '@stdlib/assert/is-uint8array' );
var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
var GlobalUint8Array = require( './uint8array.js' );


// MAIN //

/**
* Tests for native `Uint8Array` support.
*
* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
*
* @example
* var bool = hasUint8ArraySupport();
* // returns <boolean>
*/
function hasUint8ArraySupport() {
	var bool;
	var arr;

	if ( typeof GlobalUint8Array !== 'function' ) {
		return false;
	}
	// Test basic support...
	try {
		arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
		arr = new GlobalUint8Array( arr );
		bool = (
			isUint8Array( arr ) &&
			arr[ 0 ] === 1 &&
			arr[ 1 ] === 3 &&           // truncation
			arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
			arr[ 3 ] === 0 &&           // wrap around
			arr[ 4 ] === 1              // wrap around
		);
	} catch ( err ) { // eslint-disable-line no-unused-vars
		bool = false;
	}
	return bool;
}


// EXPORTS //

module.exports = hasUint8ArraySupport;

},{"./uint8array.js":30,"@stdlib/assert/is-uint8array":56,"@stdlib/constants/uint8/max":70}],30:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = main;

},{}],31:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an array.
*
* @module @stdlib/assert/is-array
*
* @example
* var isArray = require( '@stdlib/assert/is-array' );
*
* var bool = isArray( [] );
* // returns true
*
* bool = isArray( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":32}],32:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var f;


// FUNCTIONS //

/**
* Tests if a value is an array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is an array
*
* @example
* var bool = isArray( [] );
* // returns true
*
* @example
* var bool = isArray( {} );
* // returns false
*/
function isArray( value ) {
	return ( nativeClass( value ) === '[object Array]' );
}


// MAIN //

if ( Array.isArray ) {
	f = Array.isArray;
} else {
	f = isArray;
}


// EXPORTS //

module.exports = f;

},{"@stdlib/utils/native-class":153}],33:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a boolean.
*
* @module @stdlib/assert/is-boolean
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' );
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
*
* var bool = isBoolean( false );
* // returns true
*
* bool = isBoolean( new Boolean( true ) );
* // returns false
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
* var isBoolean = require( '@stdlib/assert/is-boolean' ).isObject;
*
* var bool = isBoolean( true );
* // returns false
*
* bool = isBoolean( new Boolean( false ) );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

setReadOnly( main, 'isPrimitive', isPrimitive );
setReadOnly( main, 'isObject', isObject );


// EXPORTS //

module.exports = main;

},{"./main.js":34,"./object.js":35,"./primitive.js":36,"@stdlib/utils/define-nonenumerable-read-only-property":135}],34:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPrimitive = require( './primitive.js' );
var isObject = require( './object.js' );


// MAIN //

/**
* Tests if a value is a boolean.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a boolean
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( true ) );
* // returns true
*/
function isBoolean( value ) {
	return ( isPrimitive( value ) || isObject( value ) );
}


// EXPORTS //

module.exports = isBoolean;

},{"./object.js":35,"./primitive.js":36}],35:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var nativeClass = require( '@stdlib/utils/native-class' );
var Boolean = require( '@stdlib/boolean/ctor' );
var test = require( './try2serialize.js' );


// VARIABLES //

var FLG = hasToStringTag();


// MAIN //

/**
* Tests if a value is a boolean object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean object
*
* @example
* var bool = isBoolean( true );
* // returns false
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( false ) );
* // returns true
*/
function isBoolean( value ) {
	if ( typeof value === 'object' ) {
		if ( value instanceof Boolean ) {
			return true;
		}
		if ( FLG ) {
			return test( value );
		}
		return ( nativeClass( value ) === '[object Boolean]' );
	}
	return false;
}


// EXPORTS //

module.exports = isBoolean;

},{"./try2serialize.js":38,"@stdlib/assert/has-tostringtag-support":20,"@stdlib/boolean/ctor":60,"@stdlib/utils/native-class":153}],36:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a boolean primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a boolean primitive
*
* @example
* var bool = isBoolean( true );
* // returns true
*
* @example
* var bool = isBoolean( false );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var bool = isBoolean( new Boolean( true ) );
* // returns false
*/
function isBoolean( value ) {
	return ( typeof value === 'boolean' );
}


// EXPORTS //

module.exports = isBoolean;

},{}],37:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// eslint-disable-next-line stdlib/no-redeclare
var toString = Boolean.prototype.toString; // non-generic


// EXPORTS //

module.exports = toString;

},{}],38:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toString = require( './tostring.js' ); // eslint-disable-line stdlib/no-redeclare


// MAIN //

/**
* Attempts to serialize a value to a string.
*
* @private
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value can be serialized
*/
function test( value ) {
	try {
		toString.call( value );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = test;

},{"./tostring.js":37}],39:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Buffer instance.
*
* @module @stdlib/assert/is-buffer
*
* @example
* var isBuffer = require( '@stdlib/assert/is-buffer' );
*
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* v = isBuffer( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":40}],40:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObjectLike = require( '@stdlib/assert/is-object-like' );


// MAIN //

/**
* Tests if a value is a Buffer instance.
*
* @param {*} value - value to validate
* @returns {boolean} boolean indicating if a value is a Buffer instance
*
* @example
* var v = isBuffer( new Buffer( 'beep' ) );
* // returns true
*
* @example
* var v = isBuffer( new Buffer( [1,2,3,4] ) );
* // returns true
*
* @example
* var v = isBuffer( {} );
* // returns false
*
* @example
* var v = isBuffer( [] );
* // returns false
*/
function isBuffer( value ) {
	return (
		isObjectLike( value ) &&
		(
			// eslint-disable-next-line no-underscore-dangle
			value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
			(
				value.constructor &&

				// WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
				typeof value.constructor.isBuffer === 'function' &&
				value.constructor.isBuffer( value )
			)
		)
	);
}


// EXPORTS //

module.exports = isBuffer;

},{"@stdlib/assert/is-object-like":50}],41:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is an `Error` object.
*
* @module @stdlib/assert/is-error
*
* @example
* var isError = require( '@stdlib/assert/is-error' );
*
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* bool = isError( {} );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":42}],42:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getPrototypeOf = require( '@stdlib/utils/get-prototype-of' );
var nativeClass = require( '@stdlib/utils/native-class' );


// MAIN //

/**
* Tests if a value is an `Error` object.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is an `Error` object
*
* @example
* var bool = isError( new Error( 'beep' ) );
* // returns true
*
* @example
* var bool = isError( {} );
* // returns false
*/
function isError( value ) {
	if ( typeof value !== 'object' || value === null ) {
		return false;
	}
	// Check for `Error` objects from the same realm (same Node.js `vm` or same `Window` object)...
	if ( value instanceof Error ) {
		return true;
	}
	// Walk the prototype tree until we find an object having the desired native class...
	while ( value ) {
		if ( nativeClass( value ) === '[object Error]' ) {
			return true;
		}
		value = getPrototypeOf( value );
	}
	return false;
}


// EXPORTS //

module.exports = isError;

},{"@stdlib/utils/get-prototype-of":143,"@stdlib/utils/native-class":153}],43:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Float64Array.
*
* @module @stdlib/assert/is-float64array
*
* @example
* var isFloat64Array = require( '@stdlib/assert/is-float64array' );
*
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* bool = isFloat64Array( [] );
* // returns false
*/

// MODULES //

var isFloat64Array = require( './main.js' );


// EXPORTS //

module.exports = isFloat64Array;

},{"./main.js":44}],44:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Float64Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Float64Array
*
* @example
* var bool = isFloat64Array( new Float64Array( 10 ) );
* // returns true
*
* @example
* var bool = isFloat64Array( [] );
* // returns false
*/
function isFloat64Array( value ) {
	return (
		( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Float64Array]'
	);
}


// EXPORTS //

module.exports = isFloat64Array;

},{"@stdlib/utils/native-class":153}],45:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a function.
*
* @module @stdlib/assert/is-function
*
* @example
* var isFunction = require( '@stdlib/assert/is-function' );
*
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":46}],46:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var typeOf = require( '@stdlib/utils/type-of' );


// MAIN //

/**
* Tests if a value is a function.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a function
*
* @example
* function beep() {
*     return 'beep';
* }
*
* var bool = isFunction( beep );
* // returns true
*/
function isFunction( value ) {
	// Note: cannot use `typeof` directly, as various browser engines incorrectly return `'function'` when operating on non-function objects, such as regular expressions and NodeLists.
	return ( typeOf( value ) === 'function' );
}


// EXPORTS //

module.exports = isFunction;

},{"@stdlib/utils/type-of":164}],47:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint8Array = require( '@stdlib/array/uint8' );
var Uint16Array = require( '@stdlib/array/uint16' );


// MAIN //

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{"@stdlib/array/uint16":4,"@stdlib/array/uint8":10}],48:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './main.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./main.js":49}],49:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// VARIABLES //

var bool;


// FUNCTIONS //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @private
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	/*
	* Set the uint16 view to a value having distinguishable lower and higher order words.
	*
	* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	*/
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
}


// MAIN //

bool = isLittleEndian();


// EXPORTS //

module.exports = bool;

},{"./ctors.js":47}],50:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is object-like.
*
* @module @stdlib/assert/is-object-like
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' );
*
* var bool = isObjectLike( {} );
* // returns true
*
* bool = isObjectLike( [] );
* // returns true
*
* bool = isObjectLike( null );
* // returns false
*
* @example
* var isObjectLike = require( '@stdlib/assert/is-object-like' ).isObjectLikeArray;
*
* var bool = isObjectLike( [ {}, [] ] );
* // returns true
*
* bool = isObjectLike( [ {}, '3.0' ] );
* // returns false
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var arrayfun = require( '@stdlib/assert/tools/array-function' );
var main = require( './main.js' );


// VARIABLES //

var isObjectLikeArray = arrayfun( main );


// MAIN //

setReadOnly( main, 'isObjectLikeArray', isObjectLikeArray );


// EXPORTS //

module.exports = main;

},{"./main.js":51,"@stdlib/assert/tools/array-function":58,"@stdlib/utils/define-nonenumerable-read-only-property":135}],51:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is object-like.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether a value is object-like
*
* @example
* var bool = isObjectLike( {} );
* // returns true
*
* @example
* var bool = isObjectLike( [] );
* // returns true
*
* @example
* var bool = isObjectLike( null );
* // returns false
*/
function isObjectLike( value ) {
	return (
		value !== null &&
		typeof value === 'object'
	);
}


// EXPORTS //

module.exports = isObjectLike;

},{}],52:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint16Array.
*
* @module @stdlib/assert/is-uint16array
*
* @example
* var isUint16Array = require( '@stdlib/assert/is-uint16array' );
*
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* bool = isUint16Array( [] );
* // returns false
*/

// MODULES //

var isUint16Array = require( './main.js' );


// EXPORTS //

module.exports = isUint16Array;

},{"./main.js":53}],53:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint16Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint16Array
*
* @example
* var bool = isUint16Array( new Uint16Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint16Array( [] );
* // returns false
*/
function isUint16Array( value ) {
	return (
		( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint16Array]'
	);
}


// EXPORTS //

module.exports = isUint16Array;

},{"@stdlib/utils/native-class":153}],54:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint32Array.
*
* @module @stdlib/assert/is-uint32array
*
* @example
* var isUint32Array = require( '@stdlib/assert/is-uint32array' );
*
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* bool = isUint32Array( [] );
* // returns false
*/

// MODULES //

var isUint32Array = require( './main.js' );


// EXPORTS //

module.exports = isUint32Array;

},{"./main.js":55}],55:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint32Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint32Array
*
* @example
* var bool = isUint32Array( new Uint32Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint32Array( [] );
* // returns false
*/
function isUint32Array( value ) {
	return (
		( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint32Array]'
	);
}


// EXPORTS //

module.exports = isUint32Array;

},{"@stdlib/utils/native-class":153}],56:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a value is a Uint8Array.
*
* @module @stdlib/assert/is-uint8array
*
* @example
* var isUint8Array = require( '@stdlib/assert/is-uint8array' );
*
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* bool = isUint8Array( [] );
* // returns false
*/

// MODULES //

var isUint8Array = require( './main.js' );


// EXPORTS //

module.exports = isUint8Array;

},{"./main.js":57}],57:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );


// VARIABLES //

var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


// MAIN //

/**
* Tests if a value is a Uint8Array.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating whether value is a Uint8Array
*
* @example
* var bool = isUint8Array( new Uint8Array( 10 ) );
* // returns true
*
* @example
* var bool = isUint8Array( [] );
* // returns false
*/
function isUint8Array( value ) {
	return (
		( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
		nativeClass( value ) === '[object Uint8Array]'
	);
}


// EXPORTS //

module.exports = isUint8Array;

},{"@stdlib/utils/native-class":153}],58:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a function which tests if every element in an array passes a test condition.
*
* @module @stdlib/assert/tools/array-function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
* var arrayfcn = require( '@stdlib/assert/tools/array-function' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":59}],59:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Returns a function which tests if every element in an array passes a test condition.
*
* @param {Function} predicate - function to apply
* @throws {TypeError} must provide a function
* @returns {Function} an array function
*
* @example
* var isOdd = require( '@stdlib/assert/is-odd' );
*
* var arr1 = [ 1, 3, 5, 7 ];
* var arr2 = [ 3, 5, 8 ];
*
* var validate = arrayfcn( isOdd );
*
* var bool = validate( arr1 );
* // returns true
*
* bool = validate( arr2 );
* // returns false
*/
function arrayfcn( predicate ) {
	if ( typeof predicate !== 'function' ) {
		throw new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', predicate ) );
	}
	return every;

	/**
	* Tests if every element in an array passes a test condition.
	*
	* @private
	* @param {*} value - value to test
	* @returns {boolean} boolean indicating whether a value is an array for which all elements pass a test condition
	*/
	function every( value ) {
		var len;
		var i;
		if ( !isArray( value ) ) {
			return false;
		}
		len = value.length;
		if ( len === 0 ) {
			return false;
		}
		for ( i = 0; i < len; i++ ) {
			if ( predicate( value[ i ] ) === false ) {
				return false;
			}
		}
		return true;
	}
}


// EXPORTS //

module.exports = arrayfcn;

},{"@stdlib/assert/is-array":31,"@stdlib/string/format":128}],60:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Boolean constructor.
*
* @module @stdlib/boolean/ctor
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var b = Boolean( null );
* // returns false
*
* b = Boolean( [] );
* // returns true
*
* b = Boolean( {} );
* // returns true
*
* @example
* var Boolean = require( '@stdlib/boolean/ctor' );
*
* var b = new Boolean( false );
* // returns <Boolean>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":61}],61:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a boolean.
*
* @name Boolean
* @constructor
* @type {Function}
* @param {*} value - input value
* @returns {(boolean|Boolean)} boolean
*
* @example
* var b = Boolean( null );
* // returns false
*
* b = Boolean( [] );
* // returns true
*
* b = Boolean( {} );
* // returns true
*
* @example
* var b = new Boolean( false );
* // returns <Boolean>
*/
var Bool = Boolean; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Bool;

},{}],62:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/constants/float64/eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* ## Notes
*
* The difference is
*
* ```tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],63:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for excluding the sign bit of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-abs-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_ABS_MASK = require( '@stdlib/constants/float64/high-word-abs-mask' );
* // returns 2147483647
*/


// MAIN //

/**
* High word mask for excluding the sign bit of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2147483647 \\), which corresponds to the bit sequence
*
* ```binarystring
* 0 11111111111 11111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7fffffff
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_ABS_MASK;

},{}],64:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* High word mask for the sign bit of a double-precision floating-point number.
*
* @module @stdlib/constants/float64/high-word-sign-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_SIGN_MASK = require( '@stdlib/constants/float64/high-word-sign-mask' );
* // returns 2147483648
*/


// MAIN //

/**
* High word mask for the sign bit of a double-precision floating-point number.
*
* ## Notes
*
* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2147483648 \\), which corresponds to the bit sequence
*
* ```binarystring
* 1 00000000000 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x80000000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_SIGN_MASK;

},{}],65:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/constants/float64/ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );
* // returns -Infinity
*/

// MODULES //

var Number = require( '@stdlib/number/ctor' );


// MAIN //

/**
* Double-precision floating-point negative infinity.
*
* ## Notes
*
* Double-precision floating-point negative infinity has the bit sequence
*
* ```binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{"@stdlib/number/ctor":98}],66:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/constants/float64/pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );
* // returns Infinity
*/


// MAIN //

/**
* Double-precision floating-point positive infinity.
*
* ## Notes
*
* Double-precision floating-point positive infinity has the bit sequence
*
* ```binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],67:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/constants/float64/smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number.
*
* ## Notes
*
* The number has the value
*
* ```tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],68:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 16-bit integer.
*
* @module @stdlib/constants/uint16/max
* @type {integer32}
*
* @example
* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );
* // returns 65535
*/


// MAIN //

/**
* Maximum unsigned 16-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{16} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 1111111111111111
* ```
*
* @constant
* @type {integer32}
* @default 65535
*/
var UINT16_MAX = 65535|0; // asm type annotation


// EXPORTS //

module.exports = UINT16_MAX;

},{}],69:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 32-bit integer.
*
* @module @stdlib/constants/uint32/max
* @type {uinteger32}
*
* @example
* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );
* // returns 4294967295
*/


// MAIN //

/**
* Maximum unsigned 32-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{32} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111111111111111111111111111
* ```
*
* @constant
* @type {uinteger32}
* @default 4294967295
*/
var UINT32_MAX = 4294967295;


// EXPORTS //

module.exports = UINT32_MAX;

},{}],70:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Maximum unsigned 8-bit integer.
*
* @module @stdlib/constants/uint8/max
* @type {integer32}
*
* @example
* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );
* // returns 255
*/


// MAIN //

/**
* Maximum unsigned 8-bit integer.
*
* ## Notes
*
* The number has the value
*
* ```tex
* 2^{8} - 1
* ```
*
* which corresponds to the bit sequence
*
* ```binarystring
* 11111111
* ```
*
* @constant
* @type {integer32}
* @default 255
*/
var UINT8_MAX = 255|0; // asm type annotation


// EXPORTS //

module.exports = UINT8_MAX;

},{}],71:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is infinite.
*
* @module @stdlib/math/base/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Infinity );
* // returns true
*
* bool = isInfinite( -Infinity );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":72}],72:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );


// MAIN //

/**
* Tests if a double-precision floating-point numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Infinity );
* // returns true
*
* @example
* var bool = isInfinite( -Infinity );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
}


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/constants/float64/ninf":65,"@stdlib/constants/float64/pinf":66}],73:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Test if a double-precision floating-point numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":74}],74:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Tests if a double-precision floating-point numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return ( x !== x );
}


// EXPORTS //

module.exports = isnan;

},{}],75:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute an absolute value of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":76}],76:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Computes the absolute value of a double-precision floating-point number `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
}


// EXPORTS //

module.exports = abs;

},{}],77:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the cube root of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/cbrt
*
* @example
* var cbrt = require( '@stdlib/math/base/special/cbrt' );
*
* var v = cbrt( 64.0 );
* // returns 4.0
*
* v = cbrt( 27.0 );
* // returns 3.0
*
* v = cbrt( 0.0 );
* // returns 0.0
*
* v = cbrt( -0.0 );
* // returns -0.0
*
* v = cbrt( -9.0 );
* // returns ~-2.08
*
* v = cbrt( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":78}],78:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
*
* Optimized by Bruce D. Evans.
* ```
*/

'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );
var SIGN_MASK = require( '@stdlib/constants/float64/high-word-sign-mask' );
var ABS_MASK = require( '@stdlib/constants/float64/high-word-abs-mask' );
var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
var isinfinite = require( '@stdlib/math/base/assert/is-infinite' );
var fromWords = require( '@stdlib/number/float64/base/from-words' );
var toWords = require( '@stdlib/number/float64/base/to-words' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var polyval = require( './polyval_p.js' );


// VARIABLES //

// 2**32 - 1 = 4294967295 => 11111111111111111111111111111111
var HIGH_WORD_MASK = 4294967295>>>0; // asm type annotation

// 2**31 + 2**30 = 3221225472 => 11000000000000000000000000000000
var LOW_WORD_MASK = 3221225472>>>0; // asm type annotation

// 2**54
var TWO_54 = 18014398509481984.0;

// 2**31 = 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000
var TWO_31 = 0x80000000>>>0; // asm type annotation

// 0x00000001 = 1 => 0 00000000000 00000000000000000001
var ONE = 0x00000001>>>0; // asm type annotation

// B1 = (1023-1023/3-0.03306235651)*2**20
var B1 = 715094163>>>0; // asm type annotation

// B2 = (1023-1023/3-54/3-0.03306235651)*2**20
var B2 = 696219795>>>0; // asm type annotation

// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000
var FLOAT64_SMALLEST_NORMAL_HIGH_WORD = getHighWord( FLOAT64_SMALLEST_NORMAL ); // eslint-disable-line id-length

// Words workspace:
var WORDS = [ 0>>>0, 0>>>0 ]; // asm type annotation


// MAIN //

/**
* Computes the cube root of a double-precision floating-point number.
*
* ## Method
*
* 1.  Rough cube root to \\( 5 \\) bits:
*
*     ```tex
*     \sqrt\[3\]{2^e (1+m)} \approx 2^(e/3) \biggl(1 + \frac{(e \mathrm{mod}\ 3) + m}{3}\biggr)
*     ```
*
*     where \\( e \\) is a nonnegative integer, \\( m \\) is real and in \\( \[0, 1) \\), and \\( / \\) and \\( \mathrm{mod} \\) are integer division and modulus with rounding toward \\( -\infty \\).
*
*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\( 1 \\) in \\( 16 \\).
*
*     Adding a bias of \\( -0.03306235651 \\) to the \\( (e \mathrm{mod} 3+ m )/ 3 \\) term reduces the error to about \\( 1 \\) in \\( 32 \\).
*
*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\( 1023 \\) for doubles) and later add it back.
*
*     We do the subtraction virtually to keep \\( e \geq 0 \\) so that ordinary integer division rounds toward \\( -\infty \\); this is also efficient.
*
* 2.  New cube root to \\( 23 \\) bits:
*
*     ```tex
*     \sqrt[3]{x} = t \cdot \sqrt\[3\]{x/t^3} \approx t \mathrm{P}(t^3/x)
*     ```
*
*     where \\( \mathrm{P}(r) \\) is a polynomial of degree \\( 4 \\) that approximates \\( 1 / \sqrt\[3\]{r} \\) to within \\( 2^{-23.5} \\) when \\( |r - 1| < 1/10 \\).
*
*     The rough approximation has produced \\( t \\) such than \\( |t/sqrt\[3\]{x} - 1| \lesssim 1/32 \\), and cubing this gives us bounds for \\( r = t^3/x \\).
*
* 3.  Round \\( t \\) away from \\( 0 \\) to \\( 23 \\) bits (sloppily except for ensuring that the result is larger in magnitude than \\( \sqrt\[3\]{x} \\) but not much more than \\( 2 \\) 23-bit ulps larger).
*
*     With rounding toward zero, the error bound would be \\( \approx 5/6 \\) instead of \\( \approx 4/6 \\).
*
*     With a maximum error of \\( 2 \\) 23-bit ulps in the rounded \\( t \\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\( 0.667 \\); the error in the rounded \\( t \\) can be up to about \\( 3 \\) 23-bit ulps before the final error is larger than \\( 0.667 \\) ulps.
*
* 4.  Perform one step of a Newton iteration to get \\( 53 \\) bits with an error of \\( < 0.667 \\) ulps.
*
* @param {number} x - input value
* @returns {number} cube root
*
* @example
* var v = cbrt( 64.0 );
* // returns 4.0
*
* @example
* var v = cbrt( 27.0 );
* // returns 3.0
*
* @example
* var v = cbrt( 0.0 );
* // returns 0.0
*
* @example
* var v = cbrt( -9.0 );
* // returns ~-2.08
*
* @example
* var v = cbrt( NaN );
* // returns NaN
*/
function cbrt( x ) {
	var sgn;
	var hx;
	var hw;
	var r;
	var s;
	var t;
	var w;
	if (
		x === 0.0 || // handles +-0
		isnan( x ) ||
		isinfinite( x )
	) {
		return x;
	}
	hx = getHighWord( x )>>>0;
	sgn = (hx & SIGN_MASK)>>>0;
	hx &= ABS_MASK;

	// Rough cbrt...
	if ( hx < FLOAT64_SMALLEST_NORMAL_HIGH_WORD ) {
		t = TWO_54 * x;
		hw = ( getHighWord( t )&ABS_MASK )>>>0;
		hw = ( ( (hw/3)>>>0 ) + B2 )>>>0;
		t = fromWords( sgn|hw, 0 );
	} else {
		t = 0.0;
		hw = ( ( (hx/3)>>>0 ) + B1 )>>>0;
		t = setHighWord( t, sgn|hw );
	}
	// New cbrt...
	r = ( t*t ) * ( t/x );
	t *= polyval( r );

	// Round `t` away from `0` to `23` bits...
	toWords.assign( t, WORDS, 1, 0 );
	if ( WORDS[ 1 ]&TWO_31 ) {
		// Perform manual addition, since we are split across two words...
		WORDS[ 0 ] += ONE;  // carry the one
		WORDS[ 1 ] &= ~TWO_31; // clear the bit
	} else {
		WORDS[ 1 ] |= TWO_31;
	}
	t = fromWords( WORDS[0]&HIGH_WORD_MASK, WORDS[1]&LOW_WORD_MASK );

	// Newton iteration...
	s = t * t; // `t*t` is exact
	r = x / s; // error `<= 0.5` ulps; `|r| < |t|`
	w = t + t; // `t+t` is exact
	r = ( r-t ) / ( w+r ); // `r-t` is exact; `w+r ~= 3*t`
	t += t * r; // error `<= 0.5 + 0.5/3 + eps`

	return t;
}


// EXPORTS //

module.exports = cbrt;

},{"./polyval_p.js":79,"@stdlib/constants/float64/high-word-abs-mask":63,"@stdlib/constants/float64/high-word-sign-mask":64,"@stdlib/constants/float64/smallest-normal":67,"@stdlib/math/base/assert/is-infinite":71,"@stdlib/math/base/assert/is-nan":73,"@stdlib/number/float64/base/from-words":100,"@stdlib/number/float64/base/get-high-word":104,"@stdlib/number/float64/base/set-high-word":107,"@stdlib/number/float64/base/to-words":110}],79:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* This is a generated file. Do not edit directly. */
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	if ( x === 0.0 ) {
		return 1.87595182427177;
	}
	return 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len
}


// EXPORTS //

module.exports = evalpoly;

},{}],80:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Compute the reciprocal cube root of a double-precision floating-point number.
*
* @module @stdlib/math/base/special/rcbrt
*
* @example
* var rcbrt = require( '@stdlib/math/base/special/rcbrt' );
*
* var v = rcbrt( 8.0 );
* // returns 0.5
*
* v = rcbrt( 1000.0 );
* // returns 0.1
*
* v = rcbrt( 0.0 );
* // returns 0.0
*
* v = rcbrt( Infinity );
* // returns 0.0
*
* v = rcbrt( -8.0 );
* // returns -0.5
*
* v = rcbrt( NaN );
* // returns NaN
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":81}],81:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var cbrt = require( '@stdlib/math/base/special/cbrt' );


// MAIN //

/**
* Compute the reciprocal cube root of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {number} reciprocal cube root
*
* @example
* var v = rcbrt( 8.0 );
* // returns 0.5
*
* @example
* var v = rcbrt( 1000.0 );
* // returns 0.1
*
* @example
* var v = rcbrt( 0.0 );
* // returns Infinity
*
* @example
* var v = rcbrt( Infinity );
* // returns 0.0
*
* @example
* var v = rcbrt( -8.0 );
* // returns -0.5
*
* @example
* var v = rcbrt( NaN );
* // returns NaN
*/
function rcbrt( x ) {
	return 1.0 / cbrt( x );
}


// EXPORTS //

module.exports = rcbrt;

},{"@stdlib/math/base/special/cbrt":77}],82:[function(require,module,exports){
module.exports={"expected":[-2.1544346900318838e-67,-3.68893084526052e-69,-2.9279088018757186e-69,-2.557764645178646e-69,-2.323883728238236e-69,-2.1573027332151248e-69,-2.030099710393294e-69,-1.928420723888075e-69,-1.8444681232294278e-69,-1.7734556133319674e-69,-1.7122526005764791e-69,-1.6587092989449677e-69,-1.6112914326248105e-69,-1.568869188420278e-69,-1.5305887258102914e-69,-1.4957905059893707e-69,-1.4639554726733668e-69,-1.4346684814127204e-69,-1.407592783964973e-69,-1.3824518115339847e-69,-1.359015903399478e-69,-1.337092463684939e-69,-1.3165185431624992e-69,-1.297155167879985e-69,-1.2788829467545164e-69,-1.261598629494986e-69,-1.2452123801899888e-69,-1.2296455964794055e-69,-1.2148291493414444e-69,-1.2007019505163887e-69,-1.1872097775856918e-69,-1.1743043034691546e-69,-1.1619422894380363e-69,-1.1500849099285642e-69,-1.1386971843518359e-69,-1.1277474963453774e-69,-1.1172071849338559e-69,-1.107050195174146e-69,-1.0972527782798074e-69,-1.0877932331181785e-69,-1.0786516824725087e-69,-1.0698098786534534e-69,-1.0612510339976927e-69,-1.0529596725585966e-69,-1.0449214999145707e-69,-1.0371232885255946e-69,-1.0295527764811781e-69,-1.0221985778219636e-69,-1.0150501028969238e-69,-1.0080974874499091e-69,-1.0013315293222129e-69,-9.947436318189866e-70,-9.88325752922518e-70,-9.820703596491537e-70,-9.759703869427648e-70,-9.700192005791016e-70,-9.642105636246467e-70,-9.585386060526449e-70,-9.529977971695227e-70,-9.475829205482659e-70,-9.422890512026209e-70,-9.371115347681594e-70,-9.320459684840758e-70,-9.270881837937045e-70,-9.222342304027181e-70,-9.174803616522294e-70,-9.128230210799654e-70,-9.082588300566355e-70,-9.037845763968521e-70,-8.993972038547078e-70,-8.950938024235793e-70,-8.90871599368077e-70,-8.86727950923429e-70,-8.826603346041285e-70,-8.786663420694594e-70,-8.747436724986584e-70,-8.708901264330575e-70,-8.671036000466249e-70,-8.633820798099693e-70,-8.597236375161277e-70,-8.561264256393736e-70,-8.525886730008996e-70,-8.491086807175701e-70,-8.456848184120612e-70,-8.42315520664597e-70,-8.389992836882092e-70,-8.357346622109958e-70,-8.325202665502496e-70,-8.293547598645942e-70,-8.262368555714139e-70,-8.231653149178998e-70,-8.201389446949822e-70,-8.17156595084276e-70,-8.142171576289483e-70,-8.113195633201291e-70,-8.08462780791133e-70,-8.05645814612356e-70,-8.028677036802516e-70,-8.001275196942826e-70,-7.974243657162037e-70,-7.947573748064424e-70,-7.921257087327266e-70,-7.89528556746459e-70,-7.869651344226587e-70,-7.84434682559586e-70,-7.819364661344394e-70,-7.794697733117638e-70,-7.770339145014387e-70,-7.746282214633327e-70,-7.722520464559014e-70,-7.699047614261926e-70,-7.675857572388883e-70,-7.6529444294217e-70,-7.630302450683366e-70,-7.60792606967239e-70,-7.585809881707185e-70,-7.563948637863511e-70,-7.542337239189082e-70,-7.520970731180389e-70,-7.499844298507778e-70,-7.478953259975626e-70,-7.458293063705266e-70,-7.437859282529084e-70,-7.417647609584887e-70,-7.397653854100256e-70,-7.377873937357262e-70,-7.358303888828454e-70,-7.338939842475526e-70,-7.31977803320263e-70,-7.300814793456691e-70,-7.282046549967569e-70,-7.263469820621276e-70,-7.245081211459841e-70,-7.226877413801799e-70,-7.20885520147757e-70,-7.19101142817432e-70,-7.173343024885229e-70,-7.155846997458266e-70,-7.138520424239968e-70,-7.121360453809804e-70,-7.104364302801093e-70,-7.087529253804517e-70,-7.07085265335058e-70,-7.054331909967467e-70,-7.037964492311035e-70,-7.021747927363719e-70,-7.005679798699387e-70,-6.989757744811309e-70,-6.973979457500492e-70,-6.95834268032186e-70,-6.942845207085775e-70,-6.92748488041263e-70,-6.912259590338254e-70,-6.897167272968044e-70,-6.882205909177802e-70,-6.867373523359381e-70,-6.852668182209298e-70,-6.838087993558598e-70,-6.823631105242284e-70,-6.809295704006765e-70,-6.79508001445379e-70,-6.780982298019444e-70,-6.767000851986821e-70,-6.753134008531077e-70,-6.739380133795594e-70,-6.72573762699807e-70,-6.712204919565387e-70,-6.698780474296163e-70,-6.685462784549943e-70,-6.672250373462028e-70,-6.659141793182989e-70,-6.646135624141939e-70,-6.633230474332702e-70,-6.620424978622026e-70,-6.607717798079044e-70,-6.595107619325204e-70,-6.582593153903951e-70,-6.570173137669415e-70,-6.557846330193463e-70,-6.545611514190461e-70,-6.533467494959089e-70,-6.52141309984065e-70,-6.50944717769328e-70,-6.497568598381503e-70,-6.485776252280621e-70,-6.4740690497954e-70,-6.462445920892598e-70,-6.450905814646843e-70,-6.439447698799416e-70,-6.428070559329508e-70,-6.416773400037535e-70,-6.405555242140105e-70,-6.394415123876256e-70,-6.383352100124602e-70,-6.372365242031006e-70,-6.361453636646472e-70,-6.350616386574897e-70,-6.339852609630375e-70,-6.32916143850375e-70,-6.318542020438126e-70,-6.307993516913034e-70,-6.297515103336996e-70,-6.287105968748234e-70,-6.276765315523229e-70,-6.266492359092935e-70,-6.256286327666378e-70,-6.246146461961424e-70,-6.236072014942491e-70,-6.226062251565008e-70,-6.216116448526392e-70,-6.206233894023375e-70,-6.196413887515451e-70,-6.186655739494316e-70,-6.176958771259062e-70,-6.167322314696991e-70,-6.157745712069883e-70,-6.148228315805541e-70,-6.138769488294466e-70,-6.129368601691522e-70,-6.120025037722428e-70,-6.110738187494962e-70,-6.101507451314713e-70,-6.092332238505273e-70,-6.083211967232743e-70,-6.074146064334405e-70,-6.06513396515149e-70,-6.056175113365859e-70,-6.047268960840568e-70,-6.038414967464142e-70,-6.029612600998483e-70,-6.02086133693032e-70,-6.012160658326092e-70,-6.003510055690162e-70,-5.994909026826288e-70,-5.986357076702258e-70,-5.977853717317602e-70,-5.969398467574288e-70,-5.960990853150343e-70,-5.952630406376301e-70,-5.944316666114427e-70,-5.936049177640604e-70,-5.927827492528867e-70,-5.919651168538453e-70,-5.911519769503369e-70,-5.903432865224342e-70,-5.895390031363153e-70,-5.887390849339246e-70,-5.879434906228579e-70,-5.871521794664663e-70,-5.863651112741698e-70,-5.85582246391981e-70,-5.848035456932281e-70,-5.840289705694749e-70,-5.832584829216339e-70,-5.824920451512639e-70,-5.817296201520521e-70,-5.809711713014724e-70,-5.802166624526178e-70,-5.7946605792620117e-70,-5.7871932250272206e-70,-5.779764214147927e-70,-5.772373203396235e-70,-5.765019853916588e-70,-5.757703831153641e-70,-5.7504248047815935e-70,-5.7431824486349276e-70,-5.735976440640558e-70,-5.7288064627513294e-70,-5.7216722008808275e-70,-5.714573344839516e-70,-5.7075095882720974e-70,-5.700480628596136e-70,-5.693486166941881e-70,-5.686525908093255e-70,-5.679599560429999e-70,-5.6727068358709524e-70,-5.665847449818412e-70,-5.659021121103569e-70,-5.6522275719330085e-70,-5.645466527836209e-70,-5.63873771761406e-70,-5.632040873288352e-70,-5.625375730052228e-70,-5.6187420262215606e-70,-5.612139503187252e-70,-5.605567905368422e-70,-5.599026980166473e-70,-5.592516477920009e-70,-5.586036151860591e-70,-5.5795857580693074e-70,-5.573165055434148e-70,-5.566773805608156e-70,-5.5604117729683447e-70,-5.5540787245753736e-70,-5.5477744301339385e-70,-5.5414986619538934e-70,-5.535251194912069e-70,-5.52903180641478e-70,-5.522840276360992e-70,-5.516676387106166e-70,-5.510539923426732e-70,-5.504430672485196e-70,-5.498348423795864e-70,-5.492292969191179e-70,-5.486264102788624e-70,-5.480261620958244e-70,-5.47428532229069e-70,-5.468335007565854e-70,-5.462410479722032e-70,-5.4565115438256226e-70,-5.450638007041343e-70,-5.444789678602966e-70,-5.4389663697845484e-70,-5.433167893872158e-70,-5.427394066136072e-70,-5.421644703803456e-70,-5.415919626031501e-70,-5.4102186538810103e-70,-5.4045416102904325e-70,-5.398888320050328e-70,-5.393258609778264e-70,-5.387652307894127e-70,-5.382069244595833e-70,-5.376509251835461e-70,-5.370972163295762e-70,-5.365457814367059e-70,-5.3599660421245275e-70,-5.3544966853058454e-70,-5.3490495842892055e-70,-5.343624581071688e-70,-5.3382215192479765e-70,-5.332840243989428e-70,-5.327480602023467e-70,-5.322142441613321e-70,-5.3168256125380715e-70,-5.3115299660730274e-70,-5.306255354970407e-70,-5.3010016334403365e-70,-5.295768657132128e-70,-5.2905562831158756e-70,-5.285364369864323e-70,-5.280192777235022e-70,-5.2750413664527764e-70,-5.2699100000923385e-70,-5.2647985420614e-70,-5.259706857583827e-70,-5.2546348131831624e-70,-5.249582276666376e-70,-5.244549117107876e-70,-5.239535204833747e-70,-5.234540411406248e-70,-5.229564609608524e-70,-5.2246076734295763e-70,-5.2196694780494374e-70,-5.214749899824577e-70,-5.20984881627353e-70,-5.2049661060627395e-70,-5.200101648992612e-70,-5.195255325983772e-70,-5.190427019063532e-70,-5.185616611352561e-70,-5.1808239870517445e-70,-5.1760490314292415e-70,-5.171291630807736e-70,-5.1665516725518666e-70,-5.16182904505585e-70,-5.1571236377312747e-70,-5.152435340995084e-70,-5.147764046257717e-70,-5.143109645911444e-70,-5.138472033318845e-70,-5.133851102801473e-70,-5.1292467496286726e-70,-5.1246588700065566e-70,-5.120087361067142e-70,-5.115532120857647e-70,-5.110993048329929e-70,-5.106470043330073e-70,-5.101963006588146e-70,-5.0974718397080626e-70,-5.092996445157625e-70,-5.088536726258685e-70,-5.0840925871774415e-70,-5.0796639329148864e-70,-5.075250669297376e-70,-5.0708527029673284e-70,-5.0664699413740576e-70,-5.062102292764726e-70,-5.057749666175436e-70,-5.053411971422422e-70,-5.049089119093382e-70,-5.044781020538921e-70,-5.040487587864106e-70,-5.0362087339201413e-70,-5.03194437229616e-70,-5.027694417311112e-70,-5.023458784005781e-70,-5.019237388134896e-70,-5.015030146159346e-70,-5.010836975238509e-70,-5.006657793222684e-70,-5.0024925186456064e-70,-4.998341070717085e-70,-4.994203369315719e-70,-4.9900793349817267e-70,-4.985968888909851e-70,-4.981871952942378e-70,-4.977788449562228e-70,-4.973718301886151e-70,-4.969661433658003e-70,-4.965617769242116e-70,-4.9615872336167474e-70,-4.9575697523676187e-70,-4.953565251681538e-70,-4.9495736583401026e-70,-4.945594899713481e-70,-4.94162890375428e-70,-4.9376755989914875e-70,-4.9337349145244884e-70,-4.929806780017168e-70,-4.9258911256920754e-70,-4.921987882324672e-70,-4.9180969812376524e-70,-4.9142183542953285e-70,-4.910351933898094e-70,-4.906497652976949e-70,-4.902655444988108e-70,-4.8988252439076525e-70,-4.895006984226276e-70,-4.891200600944075e-70,-4.8874060295654086e-70,-4.8836232060938343e-70,-4.8798520670270894e-70,-4.8760925493521423e-70,-4.872344590540305e-70,-4.868608128542406e-70,-4.86488310178402e-70,-4.861169449160755e-70,-4.8574671100335975e-70,-4.853776024224321e-70,-4.850096132010938e-70,-4.8464273741232195e-70,-4.8427696917382556e-70,-4.8391230264760826e-70,-4.8354873203953565e-70,-4.831862515989073e-70,-4.8282485561803506e-70,-4.8246453843182537e-70,-4.821052944173673e-70,-4.817471179935248e-70,-4.8139000362053413e-70,-4.810339457996064e-70,-4.806789390725342e-70,-4.803249780213032e-70,-4.7997205726770794e-70,-4.7962017147297284e-70,-4.7926931533737717e-70,-4.7891948359988407e-70,-4.785706710377748e-70,-4.782228724662861e-70,-4.7787608273825336e-70,-4.775302967437557e-70,-4.771855094097673e-70,-4.768417156998118e-70,-4.7649891061361975e-70,-4.7615708918679244e-70,-4.758162464904671e-70,-4.7547637763098697e-70,-4.751374777495753e-70,-4.7479954202201326e-70,-4.7446256565832e-70,-4.741265439024385e-70,-4.737914720319236e-70,-4.734573453576332e-70,-4.731241592234248e-70,-4.72791909005853e-70,-4.724605901138725e-70,-4.72130197988543e-70,-4.7180072810273855e-70,-4.7147217596085895e-70,-4.711445370985453e-70,-4.7081780708239786e-70,-4.704919815096984e-70,-4.701670560081339e-70,-4.6984302623552454e-70,-4.695198878795543e-70,-4.691976366575044e-70,-4.688762683159896e-70,-4.6855577863069805e-70,-4.6823616340613275e-70,-4.679174184753574e-70,-4.675995396997433e-70,-4.672825229687206e-70,-4.66966364199531e-70,-4.666510593369839e-70,-4.6633660435321466e-70,-4.6602299524744606e-70,-4.657102280457515e-70,-4.653982988008219e-70,-4.650872035917334e-70,-4.647769385237196e-70,-4.644674997279442e-70,-4.641588833612779e-70],"x":[-1.0e200,-1.9920418525896414e205,-3.9840737051792828e205,-5.9761055577689245e205,-7.9681374103585654e205,-9.960169262948207e205,-1.1952201115537848e206,-1.3944232968127489e206,-1.5936264820717132e206,-1.792829667330677e206,-1.9920328525896414e206,-2.1912360378486056e206,-2.3904392231075695e206,-2.5896424083665338e206,-2.788845593625498e206,-2.988048778884462e206,-3.1872519641434262e206,-3.3864551494023905e206,-3.5856583346613544e206,-3.784861519920318e206,-3.984064705179283e206,-4.183267890438247e206,-4.382471075697211e206,-4.5816742609561754e206,-4.780877446215139e206,-4.980080631474103e206,-5.179283816733068e206,-5.378487001992032e206,-5.577690187250996e206,-5.77689337250996e206,-5.976096557768924e206,-6.175299743027888e206,-6.374502928286853e206,-6.573706113545817e206,-6.77290929880478e206,-6.972112484063744e206,-7.171315669322708e206,-7.370518854581674e206,-7.569722039840638e206,-7.768925225099602e206,-7.968128410358565e206,-8.16733159561753e206,-8.366534780876493e206,-8.565737966135459e206,-8.764941151394423e206,-8.964144336653386e206,-9.16334752191235e206,-9.362550707171314e206,-9.561753892430278e206,-9.760957077689244e206,-9.960160262948207e206,-1.0159363448207171e207,-1.0358566633466135e207,-1.0557769818725099e207,-1.0756973003984063e207,-1.0956176189243027e207,-1.1155379374501992e207,-1.1354582559760956e207,-1.155378574501992e207,-1.1752988930278884e207,-1.1952192115537848e207,-1.2151395300796812e207,-1.2350598486055777e207,-1.2549801671314741e207,-1.2749004856573705e207,-1.294820804183267e207,-1.3147411227091633e207,-1.3346614412350597e207,-1.354581759760956e207,-1.3745020782868525e207,-1.3944223968127489e207,-1.4143427153386455e207,-1.434263033864542e207,-1.4541833523904383e207,-1.4741036709163347e207,-1.494023989442231e207,-1.5139443079681275e207,-1.533864626494024e207,-1.5537849450199203e207,-1.5737052635458167e207,-1.593625582071713e207,-1.6135459005976094e207,-1.6334662191235058e207,-1.6533865376494022e207,-1.673306856175299e207,-1.6932271747011953e207,-1.7131474932270917e207,-1.733067811752988e207,-1.7529881302788845e207,-1.7729084488047809e207,-1.7928287673306772e207,-1.8127490858565736e207,-1.83266940438247e207,-1.8525897229083664e207,-1.8725100414342628e207,-1.8924303599601592e207,-1.912350678486056e207,-1.9322709970119523e207,-1.9521913155378487e207,-1.972111634063745e207,-1.9920319525896414e207,-2.0119522711155378e207,-2.0318725896414342e207,-2.0517929081673306e207,-2.071713226693227e207,-2.0916335452191234e207,-2.1115538637450198e207,-2.1314741822709162e207,-2.1513945007968126e207,-2.1713148193227092e207,-2.1912351378486056e207,-2.211155456374502e207,-2.2310757749003984e207,-2.2509960934262948e207,-2.2709164119521912e207,-2.2908367304780876e207,-2.310757049003984e207,-2.3306773675298804e207,-2.3505976860557768e207,-2.3705180045816732e207,-2.3904383231075696e207,-2.4103586416334662e207,-2.4302789601593626e207,-2.450199278685259e207,-2.4701195972111554e207,-2.4900399157370518e207,-2.5099602342629482e207,-2.5298805527888446e207,-2.549800871314741e207,-2.5697211898406374e207,-2.589641508366534e207,-2.60956182689243e207,-2.6294821454183265e207,-2.649402463944223e207,-2.6693227824701193e207,-2.6892431009960157e207,-2.709163419521912e207,-2.7290837380478085e207,-2.749004056573705e207,-2.768924375099601e207,-2.788844693625498e207,-2.8087650121513946e207,-2.828685330677291e207,-2.8486056492031874e207,-2.868525967729084e207,-2.88844628625498e207,-2.9083666047808766e207,-2.928286923306773e207,-2.9482072418326694e207,-2.968127560358566e207,-2.988047878884462e207,-3.0079681974103585e207,-3.027888515936255e207,-3.0478088344621513e207,-3.0677291529880477e207,-3.087649471513944e207,-3.1075697900398405e207,-3.127490108565737e207,-3.147410427091633e207,-3.1673307456175297e207,-3.187251064143426e207,-3.2071713826693224e207,-3.227091701195219e207,-3.247012019721115e207,-3.2669323382470116e207,-3.2868526567729086e207,-3.306772975298805e207,-3.3266932938247014e207,-3.346613612350598e207,-3.366533930876494e207,-3.3864542494023905e207,-3.406374567928287e207,-3.4262948864541833e207,-3.4462152049800797e207,-3.466135523505976e207,-3.4860558420318725e207,-3.505976160557769e207,-3.525896479083665e207,-3.5458167976095617e207,-3.565737116135458e207,-3.5856574346613544e207,-3.605577753187251e207,-3.625498071713147e207,-3.6454183902390436e207,-3.66533870876494e207,-3.6852590272908364e207,-3.705179345816733e207,-3.725099664342629e207,-3.7450199828685256e207,-3.764940301394422e207,-3.784860619920319e207,-3.8047809384462153e207,-3.8247012569721117e207,-3.844621575498008e207,-3.8645418940239045e207,-3.884462212549801e207,-3.904382531075697e207,-3.9243028496015937e207,-3.94422316812749e207,-3.9641434866533865e207,-3.984063805179283e207,-4.003984123705179e207,-4.0239044422310756e207,-4.043824760756972e207,-4.0637450792828684e207,-4.083665397808765e207,-4.103585716334661e207,-4.1235060348605576e207,-4.143426353386454e207,-4.1633466719123504e207,-4.183266990438247e207,-4.203187308964143e207,-4.2231076274900395e207,-4.243027946015936e207,-4.2629482645418323e207,-4.282868583067729e207,-4.3027889015936257e207,-4.322709220119522e207,-4.3426295386454185e207,-4.362549857171315e207,-4.382470175697211e207,-4.4023904942231076e207,-4.422310812749004e207,-4.4422311312749004e207,-4.462151449800797e207,-4.482071768326693e207,-4.5019920868525896e207,-4.521912405378486e207,-4.5418327239043824e207,-4.561753042430279e207,-4.581673360956175e207,-4.6015936794820715e207,-4.621513998007968e207,-4.6414343165338643e207,-4.6613546350597607e207,-4.681274953585657e207,-4.7011952721115535e207,-4.72111559063745e207,-4.741035909163346e207,-4.7609562276892427e207,-4.7808765462151396e207,-4.800796864741036e207,-4.8207171832669324e207,-4.840637501792829e207,-4.860557820318725e207,-4.8804781388446216e207,-4.900398457370518e207,-4.9203187758964144e207,-4.940239094422311e207,-4.960159412948207e207,-4.9800797314741035e207,-5.00000005e207,-5.0199203685258963e207,-5.0398406870517927e207,-5.059761005577689e207,-5.0796813241035855e207,-5.099601642629482e207,-5.119521961155378e207,-5.139442279681275e207,-5.159362598207171e207,-5.179282916733067e207,-5.199203235258964e207,-5.21912355378486e207,-5.239043872310757e207,-5.258964190836653e207,-5.278884509362549e207,-5.298804827888446e207,-5.318725146414342e207,-5.338645464940239e207,-5.358565783466135e207,-5.378486101992031e207,-5.398406420517928e207,-5.418326739043824e207,-5.43824705756972e207,-5.458167376095617e207,-5.478087694621513e207,-5.49800801314741e207,-5.517928331673307e207,-5.537848650199204e207,-5.5577689687251e207,-5.577689287250996e207,-5.597609605776893e207,-5.617529924302789e207,-5.637450242828686e207,-5.657370561354582e207,-5.677290879880478e207,-5.697211198406375e207,-5.717131516932271e207,-5.737051835458168e207,-5.756972153984064e207,-5.77689247250996e207,-5.796812791035857e207,-5.816733109561753e207,-5.83665342808765e207,-5.856573746613546e207,-5.876494065139442e207,-5.896414383665339e207,-5.916334702191235e207,-5.936255020717131e207,-5.956175339243028e207,-5.976095657768924e207,-5.996015976294821e207,-6.015936294820717e207,-6.035856613346613e207,-6.05577693187251e207,-6.075697250398406e207,-6.095617568924303e207,-6.115537887450199e207,-6.135458205976095e207,-6.155378524501992e207,-6.175298843027888e207,-6.195219161553785e207,-6.215139480079681e207,-6.235059798605577e207,-6.254980117131474e207,-6.27490043565737e207,-6.294820754183266e207,-6.314741072709163e207,-6.334661391235059e207,-6.354581709760956e207,-6.374502028286852e207,-6.394422346812748e207,-6.414342665338645e207,-6.434262983864541e207,-6.454183302390438e207,-6.474103620916334e207,-6.49402393944223e207,-6.513944257968128e207,-6.533864576494024e207,-6.553784895019921e207,-6.573705213545817e207,-6.593625532071714e207,-6.61354585059761e207,-6.633466169123506e207,-6.653386487649403e207,-6.673306806175299e207,-6.693227124701195e207,-6.713147443227092e207,-6.733067761752988e207,-6.752988080278885e207,-6.772908398804781e207,-6.792828717330677e207,-6.812749035856574e207,-6.83266935438247e207,-6.852589672908367e207,-6.872509991434263e207,-6.892430309960159e207,-6.912350628486056e207,-6.932270947011952e207,-6.952191265537849e207,-6.972111584063745e207,-6.992031902589641e207,-7.011952221115538e207,-7.031872539641434e207,-7.05179285816733e207,-7.071713176693227e207,-7.091633495219123e207,-7.11155381374502e207,-7.131474132270916e207,-7.151394450796812e207,-7.171314769322709e207,-7.191235087848605e207,-7.211155406374502e207,-7.231075724900398e207,-7.250996043426294e207,-7.270916361952191e207,-7.290836680478087e207,-7.310756999003984e207,-7.33067731752988e207,-7.350597636055776e207,-7.370517954581673e207,-7.390438273107569e207,-7.410358591633466e207,-7.430278910159362e207,-7.450199228685258e207,-7.470119547211155e207,-7.490039865737051e207,-7.509960184262949e207,-7.529880502788845e207,-7.549800821314741e207,-7.569721139840638e207,-7.589641458366534e207,-7.609561776892431e207,-7.629482095418327e207,-7.649402413944223e207,-7.66932273247012e207,-7.689243050996016e207,-7.709163369521913e207,-7.729083688047809e207,-7.749004006573705e207,-7.768924325099602e207,-7.788844643625498e207,-7.808764962151395e207,-7.828685280677291e207,-7.848605599203187e207,-7.868525917729084e207,-7.88844623625498e207,-7.908366554780876e207,-7.928286873306773e207,-7.948207191832669e207,-7.968127510358566e207,-7.988047828884462e207,-8.007968147410358e207,-8.027888465936255e207,-8.047808784462151e207,-8.067729102988048e207,-8.087649421513944e207,-8.10756974003984e207,-8.127490058565737e207,-8.147410377091633e207,-8.16733069561753e207,-8.187251014143426e207,-8.207171332669322e207,-8.227091651195219e207,-8.247011969721115e207,-8.266932288247012e207,-8.286852606772908e207,-8.306772925298804e207,-8.326693243824701e207,-8.346613562350597e207,-8.366533880876493e207,-8.38645419940239e207,-8.406374517928286e207,-8.426294836454183e207,-8.446215154980079e207,-8.466135473505975e207,-8.486055792031872e207,-8.505976110557769e207,-8.525896429083666e207,-8.545816747609562e207,-8.565737066135459e207,-8.585657384661355e207,-8.605577703187251e207,-8.625498021713148e207,-8.645418340239044e207,-8.66533865876494e207,-8.685258977290837e207,-8.705179295816733e207,-8.72509961434263e207,-8.745019932868526e207,-8.764940251394422e207,-8.784860569920319e207,-8.804780888446215e207,-8.824701206972112e207,-8.844621525498008e207,-8.864541844023904e207,-8.884462162549801e207,-8.904382481075697e207,-8.924302799601594e207,-8.94422311812749e207,-8.964143436653386e207,-8.984063755179283e207,-9.003984073705179e207,-9.023904392231076e207,-9.043824710756972e207,-9.063745029282868e207,-9.083665347808765e207,-9.103585666334661e207,-9.123505984860557e207,-9.143426303386454e207,-9.16334662191235e207,-9.183266940438247e207,-9.203187258964143e207,-9.223107577490039e207,-9.243027896015936e207,-9.262948214541832e207,-9.282868533067729e207,-9.302788851593625e207,-9.322709170119521e207,-9.342629488645418e207,-9.362549807171314e207,-9.38247012569721e207,-9.402390444223107e207,-9.422310762749003e207,-9.4422310812749e207,-9.462151399800796e207,-9.482071718326693e207,-9.50199203685259e207,-9.521912355378486e207,-9.541832673904383e207,-9.561752992430279e207,-9.581673310956176e207,-9.601593629482072e207,-9.621513948007968e207,-9.641434266533865e207,-9.661354585059761e207,-9.681274903585658e207,-9.701195222111554e207,-9.72111554063745e207,-9.741035859163347e207,-9.760956177689243e207,-9.78087649621514e207,-9.800796814741036e207,-9.820717133266932e207,-9.840637451792829e207,-9.860557770318725e207,-9.880478088844621e207,-9.900398407370518e207,-9.920318725896414e207,-9.940239044422311e207,-9.960159362948207e207,-9.980079681474103e207,-1.0e208]}

},{}],83:[function(require,module,exports){
module.exports={"expected":[1.0e-100,3.684461218416194e-102,2.924383185616838e-102,2.5546911214031987e-102,2.321094147495702e-102,2.154714731648906e-102,2.0276653213630273e-102,1.92610895085225e-102,1.842257485257624e-102,1.7713304545306875e-102,1.7102010673069279e-102,1.6567221444294324e-102,1.6093612681881144e-102,1.566989992220012e-102,1.5287555080583022e-102,1.493999073498302e-102,1.4622022587758009e-102,1.4329504202549906e-102,1.4059072157332895e-102,1.3807964097469188e-102,1.3573886182650166e-102,1.335491477364988e-102,1.3149422340062062e-102,1.2956020815104494e-102,1.2773517724609323e-102,1.2600881807806103e-102,1.2437215786106194e-102,1.2281734581129787e-102,1.2133747733806077e-102,1.1992645095883747e-102,1.1857885094884377e-102,1.1728985040769666e-102,1.1605513065795096e-102,1.1487081380777887e-102,1.1373340600038635e-102,1.1263974939705283e-102,1.115869813424199e-102,1.1057249947104655e-102,1.095939317559445e-102,1.0864911068939153e-102,1.0773605093606148e-102,1.0685292991755662e-102,1.0599807088265587e-102,1.051699280942167e-102,1.0436707382566447e-102,1.035881869104298e-102,1.028320426289163e-102,1.0209750375144076e-102,1.0138351258352518e-102,1.0068908388307419e-102,1.0001329853823778e-102,9.935529791085821e-103,9.871427876389951e-103,9.808948870262362e-103,9.74802220688749e-103,9.688581623597172e-103,9.630564825862049e-103,9.573913183816786e-103,9.518571456855431e-103,9.464487543266203e-103,9.411612252247611e-103,9.359899095969082e-103,9.309304099617283e-103,9.259785627610186e-103,9.211304224370459e-103,9.163822468232066e-103,9.11730483721333e-103,9.071717585529029e-103,9.02702862983631e-103,8.983207444316529e-103,8.940224963789727e-103,8.898053494141745e-103,8.856666629417681e-103,8.816039175000674e-103,8.776147076352762e-103,8.736967352846003e-103,8.69847803625779e-103,8.660658113545012e-103,8.6234874735481e-103,8.586946857308607e-103,8.551017811712966e-103,8.515682646201301e-103,8.480924392303574e-103,8.446726765786446e-103,8.413074131213189e-103,8.379951468736184e-103,8.347344342956894e-103,8.315238873702245e-103,8.283621708578948e-103,8.2524799971787835e-103,8.221801366818172e-103,8.191573899704936e-103,8.161786111433573e-103,8.132426930718258e-103,8.103485680279909e-103,8.074952058810051e-103,8.046816123940248e-103,8.019068276151162e-103,7.991699243560347e-103,7.964700067532351e-103,7.938062089058875e-103,7.91177693586053e-103,7.885836510165259e-103,7.860232977121659e-103,7.834958753808421e-103,7.810006498803826e-103,7.785369102281712e-103,7.761039676602653e-103,7.737011547371233e-103,7.713278244932241e-103,7.689833496280425e-103,7.666671217360164e-103,7.643785505732911e-103,7.621170633591767e-103,7.598821041103812e-103,7.576731330062109e-103,7.554896257830413e-103,7.533310731564718e-103,7.511969802696695e-103,7.4908686616651e-103,7.470002632881981e-103,7.449367169921387e-103,7.428957850918984e-103,7.408770374171696e-103,7.388800553927116e-103,7.369044316353073e-103,7.349497695678221e-103,7.3301568304951685e-103,7.311017960218029e-103,7.292077421686819e-103,7.273331645911521e-103,7.254777154949047e-103,7.236410558906704e-103,7.218228553066138e-103,7.200227915122005e-103,7.182405502530048e-103,7.164758249959389e-103,7.147283166844266e-103,7.129977335030615e-103,7.112837906513171e-103,7.095862101258978e-103,7.079047205113429e-103,7.06239056778513e-103,7.045889600906099e-103,7.029541776163988e-103,7.01334462350315e-103,6.997295729391577e-103,6.981392735150871e-103,6.965633335346508e-103,6.950015276235874e-103,6.9345363542716e-103,6.91919441465787e-103,6.903987349957504e-103,6.888913098747698e-103,6.873969644322425e-103,6.859155013439577e-103,6.84446727511104e-103,6.8299045394339435e-103,6.815464956461457e-103,6.801146715111546e-103,6.78694804211217e-103,6.772867200981497e-103,6.758902491041774e-103,6.745052246465504e-103,6.731314835352729e-103,6.717688658838194e-103,6.704172150227241e-103,6.690763774159375e-103,6.677462025798417e-103,6.664265430048282e-103,6.651172540793396e-103,6.638181940162856e-103,6.625292237817458e-103,6.612502070258728e-103,6.599810100159193e-103,6.587215015713094e-103,6.57471553000681e-103,6.562310380408293e-103,6.549998327974823e-103,6.537778156878457e-103,6.525648673848518e-103,6.513608707630553e-103,6.501657108461165e-103,6.489792747558192e-103,6.478014516625674e-103,6.466321327373136e-103,6.454712111048658e-103,6.443185817985312e-103,6.431741417160455e-103,6.420377895767519e-103,6.409094258799817e-103,6.39788952864599e-103,6.386762744696726e-103,6.375712962962355e-103,6.36473925570098e-103,6.353840711056793e-103,6.34301643270825e-103,6.332265539525788e-103,6.321587165238783e-103,6.3109804581114335e-103,6.300444580627319e-103,6.289978709182335e-103,6.279582033785739e-103,6.269253757769087e-103,6.258993097502767e-103,6.248799282119938e-103,6.238671553247615e-103,6.228609164744704e-103,6.218611382446758e-103,6.208677483917257e-103,6.198806758205222e-103,6.188998505608953e-103,6.179252037445737e-103,6.169566675827312e-103,6.159941753440951e-103,6.150376613335978e-103,6.140870608715564e-103,6.131423102733652e-103,6.122033468296849e-103,6.112701087871161e-103,6.103425353293413e-103,6.094205665587225e-103,6.085041434783429e-103,6.075932079744767e-103,6.066877027994789e-103,6.057875715550794e-103,6.04892758676074e-103,6.040032094143974e-103,6.031188698235701e-103,6.022396867435078e-103,6.013656077856837e-103,6.004965813186344e-103,5.996325564537979e-103,5.987734830316779e-103,5.979193116083235e-103,5.970699934421153e-103,5.962254804808515e-103,5.953857253491246e-103,5.945506813359817e-103,5.9372030238286e-103,5.928945430717914e-103,5.920733586138679e-103,5.912567048379621e-103,5.904445381796951e-103,5.896368156706462e-103,5.888334949277979e-103,5.880345341432098e-103,5.872398920739157e-103,5.864495280320385e-103,5.856634018751171e-103,5.8488147399664e-103,5.841037053167792e-103,5.833300572733231e-103,5.825604918127979e-103,5.817949713817768e-103,5.810334589183724e-103,5.802759178439044e-103,5.795223120547423e-103,5.787726059143155e-103,5.780267642452892e-103,5.772847523219008e-103,5.765465358624521e-103,5.758120810219566e-103,5.750813543849335e-103,5.743543229583499e-103,5.736309541647035e-103,5.729112158352445e-103,5.721950762033346e-103,5.714825038979353e-103,5.707734679372291e-103,5.700679377223633e-103,5.6936588303132e-103,5.686672740129046e-103,5.679720811808525e-103,5.672802754080513e-103,5.665918279208736e-103,5.659067102936206e-103,5.652248944430735e-103,5.645463526231477e-103,5.638710574196502e-103,5.631989817451378e-103,5.625300988338716e-103,5.618643822368681e-103,5.61201805817043e-103,5.605423437444466e-103,5.598859704915885e-103,5.592326608288494e-103,5.585823898199786e-103,5.579351328176749e-103,5.572908654592482e-103,5.566495636623627e-103,5.560112036208566e-103,5.553757618006399e-103,5.547432149356645e-103,5.541135400239704e-103,5.534867143238012e-103,5.52862715349791e-103,5.522415208692187e-103,5.516231088983306e-103,5.510074576987284e-103,5.503945457738206e-103,5.497843518653375e-103,5.491768549499082e-103,5.485720342356974e-103,5.479698691591008e-103,5.473703393815002e-103,5.467734247860723e-103,5.461791054746558e-103,5.455873617646716e-103,5.449981741860953e-103,5.444115234784837e-103,5.438273905880516e-103,5.432457566647978e-103,5.426666030596807e-103,5.42089911321843e-103,5.415156631958814e-103,5.409438406191642e-103,5.403744257191928e-103,5.398074008110086e-103,5.392427483946427e-103,5.386804511526075e-103,5.381204919474315e-103,5.375628538192342e-103,5.370075199833406e-103,5.364544738279359e-103,5.359036989117579e-103,5.3535517896182825e-103,5.348088978712196e-103,5.342648396968596e-103,5.337229886573708e-103,5.331833291309455e-103,5.326458456532534e-103,5.321105229153856e-103,5.315773457618293e-103,5.310462991884753e-103,5.305173683406586e-103,5.299905385112283e-103,5.294657951386489e-103,5.289431238051321e-103,5.284225102347973e-103,5.27903940291861e-103,5.273873999788548e-103,5.268728754348716e-103,5.263603529338378e-103,5.258498188828138e-103,5.253412598203204e-103,5.248346624146898e-103,5.243300134624438e-103,5.238272998866962e-103,5.233265087355782e-103,5.228276271806908e-103,5.223306425155777e-103,5.218355421542234e-103,5.213423136295726e-103,5.208509445920738e-103,5.203614228082423e-103,5.198737361592471e-103,5.193878726395173e-103,5.189038203553702e-103,5.184215675236591e-103,5.179411024704422e-103,5.174624136296698e-103,5.169854895418924e-103,5.165103188529859e-103,5.160368903128975e-103,5.155651927744088e-103,5.150952151919167e-103,5.146269466202333e-103,5.141603762134015e-103,5.136954932235293e-103,5.132322869996399e-103,5.127707469865391e-103,5.123108627236978e-103,5.118526238441523e-103,5.113960200734181e-103,5.109410412284213e-103,5.104876772164434e-103,5.100359180340823e-103,5.095857537662272e-103,5.091371745850483e-103,5.08690170749001e-103,5.08244732601843e-103,5.07800850571666e-103,5.073585151699414e-103,5.069177169905774e-103,5.064784467089912e-103,5.060406950811927e-103,5.056044529428817e-103,5.051697112085568e-103,5.04736460870637e-103,5.043046929985951e-103,5.03874398738103e-103,5.034455693101889e-103,5.030181960104052e-103,5.025922702080089e-103,5.021677833451512e-103,5.017447269360806e-103,5.013230925663538e-103,5.009028718920602e-103,5.004840566390538e-103,5.000666386021977e-103,4.996506096446174e-103,4.992359616969642e-103,4.988226867566893e-103,4.984107768873256e-103,4.980002242177809e-103,4.975910209416393e-103,4.971831593164716e-103,4.967766316631559e-103,4.963714303652061e-103,4.95967547868109e-103,4.955649766786703e-103,4.951637093643701e-103,4.947637385527245e-103,4.943650569306575e-103,4.9396765724388e-103,4.935715322962767e-103,4.931766749493015e-103,4.927830781213801e-103,4.9239073478732e-103,4.919996379777286e-103,4.916097807784385e-103,4.912211563299396e-103,4.90833757826819e-103,4.904475785172077e-103,4.900626117022344e-103,4.896788507354853e-103,4.89296289022472e-103,4.889149200201051e-103,4.885347372361745e-103,4.881557342288368e-103,4.877779046061079e-103,4.874012420253627e-103,4.870257401928405e-103,4.866513928631576e-103,4.862781938388239e-103,4.859061369697672e-103,4.855352161528624e-103,4.851654253314669e-103,4.84796758494961e-103,4.844292096782949e-103,4.840627729615402e-103,4.836974424694469e-103,4.833332123710068e-103,4.829700768790208e-103,4.826080302496723e-103,4.822470667821048e-103,4.818871808180061e-103,4.815283667411957e-103,4.811706189772179e-103,4.808139319929403e-103,4.80458300296156e-103,4.801037184351906e-103,4.797501809985152e-103,4.79397682614362e-103,4.790462179503459e-103,4.786957817130897e-103,4.783463686478539e-103,4.779979735381712e-103,4.776505912054848e-103,4.773042165087906e-103,4.769588443442844e-103,4.766144696450126e-103,4.762710873805274e-103,4.759286925565447e-103,4.755872802146079e-103,4.752468454317539e-103,4.749073833201836e-103,4.745688890269361e-103,4.742313577335668e-103,4.738947846558286e-103,4.735591650433572e-103,4.7322449417936e-103,4.728907673803079e-103,4.725579799956313e-103,4.72226127407419e-103,4.718952050301213e-103,4.715652083102546e-103,4.712361327261119e-103,4.709079737874737e-103,4.705807270353251e-103,4.702543880415729e-103,4.699289524087688e-103,4.696044157698332e-103,4.692807737877837e-103,4.68958022155466e-103,4.686361565952875e-103,4.683151728589542e-103,4.679950667272103e-103,4.676758340095812e-103,4.673574705441176e-103,4.67039972197145e-103,4.667233348630134e-103,4.664075544638516e-103,4.660926269493228e-103,4.657785482963836e-103,4.654653145090453e-103,4.6515292161813845e-103,4.64841365681078e-103,4.645306427816337e-103,4.642207490297009e-103,4.63911680561074e-103,4.636034335372239e-103,4.632960041450754e-103,4.629893885967891e-103,4.626835831295441e-103,4.623785840053241e-103,4.620743875107051e-103,4.61770989956645e-103,4.614683876782767e-103,4.611665770347022e-103,4.608655544087887e-103,4.605653162069684e-103,4.602658588590384e-103,4.599671788179638e-103,4.59669272559683e-103,4.593721365829144e-103,4.59075767408965e-103,4.58780161581542e-103,4.584853156665652e-103,4.581912262519816e-103,4.578978899475828e-103,4.576053033848228e-103,4.573134632166387e-103,4.570223661172731e-103,4.567320087820978e-103,4.564423879274397e-103,4.561535002904086e-103,4.558653426287264e-103,4.555779117205581e-103,4.552912043643444e-103,4.550052173786366e-103,4.547199476019323e-103,4.54435391892513e-103,4.541515471282841e-103,4.538684102066152e-103,4.535859780441828e-103,4.533042475768147e-103,4.530232157593354e-103,4.527428795654133e-103,4.524632359874094e-103,4.521842820362273e-103,4.5190601474116545e-103,4.516284311497695e-103,4.513515283276876e-103,4.510753033585256e-103,4.50799753343705e-103,4.505248754023217e-103,4.502506666710059e-103,4.499771243037838e-103,4.497042454719402e-103,4.494320273638833e-103,4.491604671850093e-103,4.488895621575699e-103,4.486193095205405e-103,4.483497065294886e-103,4.480807504564453e-103,4.47812438589777e-103,4.475447682340579e-103,4.472777367099453e-103,4.470113413540539e-103,4.467455795188334e-103,4.46480448572446e-103,4.46215945898645e-103,4.4595206889665563e-103,4.4568881498105595e-103,4.454261815816592e-103,4.451641661433974e-103,4.4490276612620605e-103,4.446419790049093e-103,4.443818022691075e-103,4.4412223342306425e-103,4.4386326998559585e-103,4.436049094899605e-103,4.4334714948374995e-103,4.430899875287808e-103,4.4283342120098783e-103,4.4257744809031786e-103,4.4232206580062435e-103,4.4206727194956345e-103,4.4181306416849115e-103,4.4155944010236036e-103,4.4130639740961993e-103,4.4105393376211476e-103,4.4080204684498535e-103,4.405507343565703e-103,4.4029999400830787e-103,4.4004982352463955e-103,4.3980022064291423e-103,4.395511831132931e-103,4.3930270869865555e-103,4.3905479517450554e-103,4.388074403288797e-103,4.385606419622553e-103,4.3831439788745963e-103,4.380687059295796e-103,4.3782356392587333e-103,4.3757896972568116e-103,4.3733492119033794e-103,4.3709141619308684e-103,4.368484526189926e-103,4.3660602836485675e-103,4.3636414133913286e-103,4.3612278946184275e-103,4.3588197066449346e-103,4.356416828899952e-103,4.3540192409257926e-103,4.351626922377176e-103,4.3492398530204236e-103,4.346858012732668e-103,4.344481381501061e-103,4.3421099394219955e-103,4.3397436667003304e-103,4.3373825436486254e-103,4.3350265506863786e-103,4.332675668339272e-103,4.3303298772384255e-103,4.327989158119658e-103,4.325653491822747e-103,4.323322859290708e-103,4.3209972415690636e-103,4.3186766198051376e-103,4.316360975247337e-103,4.314050289244456e-103,4.311744543244971e-103,4.3094437187963535e-103,4.307147797544385e-103,4.3048567612324737e-103,4.302570591700986e-103,4.300289270886572e-103,4.298012780821506e-103,4.295741103633031e-103,4.2934742215427025e-103,4.29121211686575e-103,4.288954772010425e-103,4.2867021694773797e-103,4.284454291859026e-103,4.2822111218389156e-103,4.279972642191122e-103,4.277738835779621e-103,4.2755096855576885e-103,4.2732851745672903e-103,4.2710652859384887e-103,4.268850002888843e-103,4.2666393087228266e-103,4.2644331868312343e-103,4.2622316206906126e-103,4.260034593862679e-103,4.2578420899937533e-103,4.2556540928141917e-103,4.253470586137829e-103,4.251291553861422e-103,4.249116979964093e-103,4.2469468485067913e-103,4.2447811436317446e-103,4.2426198495619214e-103,4.240462950600503e-103,4.238310431130344e-103,4.23616227561346e-103,4.2340184685904945e-103,4.2318789946802124e-103,4.2297438385789803e-103,4.227612985060262e-103,4.225486418974115e-103,4.223364125246686e-103,4.2212460888797215e-103,4.2191322949500686e-103,4.217022728609191e-103,4.2149173750826866e-103,4.212816219669802e-103,4.2107192477429574e-103,4.208626444747276e-103,4.206537796200115e-103,4.204453287690597e-103,4.2023729048791505e-103,4.2002966334970517e-103,4.1982244593459723e-103,4.196156368297523e-103,4.1940923462928125e-103,4.1920323793420007e-103,4.189976453523856e-103,4.187924554985326e-103,4.1858766699410964e-103,4.183832784673164e-103,4.181792885530411e-103,4.179756958928181e-103,4.1777249913478575e-103,4.17569696933645e-103,4.1736728795061775e-103,4.1716527085340595e-103,4.16963644316151e-103,4.167624070193931e-103,4.165615576500314e-103,4.163610949012842e-103,4.161610174726491e-103,4.1596132406986437e-103,4.157620134048696e-103,4.155630841957677e-103,4.15364535166786e-103,4.1516636504823845e-103,4.149685725764883e-103,4.1477115649391005e-103,4.1457411554885313e-103,4.143774484956042e-103,4.14181154094351e-103,4.1398523111114646e-103,4.1378967831787156e-103,4.1359449449220104e-103,4.1339967841756663e-103,4.1320522888312267e-103,4.130111446837108e-103,4.128174246198254e-103,4.126240674975791e-103,4.1243107212866883e-103,4.1223843733034147e-103,4.1204616192536084e-103,4.1185424474197353e-103,4.1166268461387644e-103,4.1147148038018345e-103,4.1128063088539294e-103,4.110901349793551e-103,4.108999915172404e-103,4.1071019935950696e-103,4.1052075737186887e-103,4.103316644252654e-103,4.101429193958289e-103,4.0995452116485437e-103,4.0976646861876835e-103,4.095787606490989e-103,4.093913961524442e-103,4.092043740304437e-103,4.0901769318974733e-103,4.088313525419861e-103,4.0864535100374277e-103,4.0845968749652245e-103,4.0827436094672363e-103,4.0808937028560906e-103,4.079047144492779e-103,4.0772039237863645e-103,4.0753640301937046e-103,4.073527453219169e-103,4.0716941824143634e-103,4.069864207377851e-103,4.068037517754883e-103,4.0662141032371206e-103,4.0643939535623704e-103,4.0625770585143115e-103,4.0607634079222326e-103,4.0589529916607684e-103,4.057145799649633e-103,4.0553418218533616e-103,4.0535410482810543e-103,4.051743468986115e-103,4.049949074065997e-103,4.048157853661953e-103,4.046369797958782e-103,4.0445848971845756e-103,4.042803141610476e-103,4.041024521550427e-103,4.039249027360929e-103,4.0374766494407983e-103,4.035707378230923e-103,4.033941204214028e-103,4.0321781179144306e-103,4.030418109897813e-103,4.028661170770981e-103,4.0269072911816343e-103,4.0251564618181344e-103,4.023408673409276e-103,4.0216639167240594e-103,4.0199221825714603e-103,4.0181834618002106e-103,4.0164477452985724e-103,4.014715023994115e-103,4.0129852888534973e-103,4.0112585308822477e-103,4.0095347411245476e-103,4.007813910663015e-103,4.00609603061849e-103,4.004381092149824e-103,4.002669086453668e-103,4.00096000476426e-103,3.9992538383532187e-103,3.9975505785293387e-103,3.9958502166383804e-103,3.99415274406287e-103,3.992458152221893e-103,3.990766432570897e-103,3.9890775766014874e-103,3.9873915758412323e-103,3.9857084218534617e-103,3.9840281062370754e-103,3.9823506206263446e-103,3.980675956690721e-103,3.979004106134643e-103,3.977335060697348e-103,3.9756688121526793e-103,3.9740053523088984e-103,3.9723446730084997e-103,3.970686766128025e-103,3.969031623577877e-103,3.9673792373021355e-103,3.9657295992783794e-103,3.964082701517503e-103,3.962438536063535e-103,3.9607970949934627e-103,3.9591583704170543e-103,3.9575223544766803e-103,3.955889039347144e-103,3.9542584172355016e-103,3.9526304803808933e-103,3.9510052210543686e-103,3.949382631558722e-103,3.947762704228316e-103,3.946145431428919e-103,3.9445308055575363e-103,3.9429188190422413e-103,3.941309464342016e-103,3.9397027339465833e-103,3.938098620376246e-103,3.9364971161817236e-103,3.9348982139439923e-103,3.933301906274128e-103,3.931708185813143e-103,3.930117045231833e-103,3.9285284772306173e-103,3.926942474539385e-103,3.9253590299173405e-103,3.9237781361528495e-103,3.922199786063286e-103,3.9206239724948824e-103,3.919050688322578e-103,3.9174799264498706e-103,3.9159116798086625e-103,3.914345941359122e-103,3.91278270408953e-103,3.911221961016134e-103,3.9096637051830073e-103,3.9081079296619044e-103,3.906554627552113e-103,3.905003791980318e-103,3.9034554161004567e-103,3.9019094930935793e-103,3.900366016167711e-103,3.898824978557711e-103,3.8972863735251364e-103,3.895750194358105e-103,3.894216434371159e-103,3.89268508690513e-103,3.8911561453270064e-103,3.8896296030297983e-103,3.888105453432403e-103,3.886583689979479e-103,3.8850643061413086e-103,3.883547295413672e-103,3.882032651317718e-103,3.880520367399832e-103,3.8790104372315147e-103,3.8775028544092465e-103,3.8759976125543696e-103,3.874494705312958e-103,3.872994126355692e-103,3.871495869377743e-103,3.8699999280986377e-103,3.8685062962621454e-103,3.8670149676361536e-103,3.865525936012546e-103,3.8640391952070836e-103,3.8625547390592867e-103,3.861072561432316e-103,3.859592656212851e-103,3.858115017310978e-103,3.856639638660072e-103,3.8551665142166794e-103,3.8536956379604056e-103,3.852227003893799e-103,3.8507606060422367e-103,3.849296438453817e-103,3.8478344951992385e-103,3.8463747703716965e-103,3.844917258086769e-103,3.843461952482304e-103,3.842008847718315e-103,3.8405579379768696e-103,3.8391092174619803e-103,3.8376626803994996e-103,3.8362183210370113e-103,3.8347761336437257e-103,3.833336112510371e-103,3.8318982519490933e-103,3.8304625462933467e-103,3.829028989897795e-103,3.827597577138204e-103,3.826168302411343e-103,3.82474116013488e-103,3.82331614474728e-103,3.8218932507077097e-103,3.820472472495931e-103,3.819053804612205e-103,3.8176372415771923e-103,3.8162227779318543e-103,3.814810408237357e-103,3.813400127074973e-103,3.811991929045984e-103,3.810585808771588e-103,3.809181760892799e-103,3.807779780070356e-103,3.806379860984629e-103,3.8049819983355205e-103,3.8035861868423805e-103,3.802192421243906e-103,3.8008006962980513e-103,3.7994110067819395e-103,3.7980233474917684e-103,3.7966377132427207e-103,3.7952540988688743e-103,3.793872499223113e-103,3.792492909177037e-103,3.7911153236208756e-103,3.7897397374633975e-103,3.7883661456318243e-103,3.7869945430717476e-103,3.7856249247470333e-103,3.784257285639746e-103,3.7828916207500575e-103,3.781527925096162e-103,3.7801661937141953e-103,3.7788064216581483e-103,3.777448603999784e-103,3.776092735828555e-103,3.77473881225152e-103,3.773386828393263e-103,3.772036779395811e-103,3.770688660418554e-103,3.7693424666381634e-103,3.7679981932485125e-103,3.7666558354605955e-103,3.7653153885024507e-103,3.7639768476190784e-103,3.762640208072368e-103,3.761305465141012e-103,3.7599726141204376e-103,3.758641650322723e-103,3.757312569076524e-103,3.7559853657269967e-103,3.7546600356357226e-103,3.7533365741806317e-103,3.7520149767559307e-103,3.750695238772026e-103,3.7493773556554505e-103,3.748061322848789e-103,3.746747135810608e-103,3.745434790015379e-103,3.74412428095341e-103,3.74281560413077e-103,3.7415087550692205e-103,3.740203729306141e-103,3.738900522394462e-103,3.7375991299025916e-103,3.7362995474143487e-103,3.735001770528889e-103,3.733705794860641e-103,3.73241161603923e-103,3.7311192297094206e-103,3.729828631531037e-103,3.728539817178903e-103,3.7272527823427713e-103,3.725967522727258e-103,3.724684034051774e-103,3.7234023120504645e-103,3.722122352472134e-103,3.7208441510801886e-103,3.7195677036525684e-103,3.718293005981682e-103,3.717020053874342e-103,3.7157488431517016e-103,3.714479369649192e-103,3.7132116292164575e-103,3.7119456177172925e-103,3.7106813310295807e-103,3.709418765045228e-103,3.708157915670108e-103,3.706898778823994e-103,3.7056413504404995e-103,3.7043856264670204e-103,3.7031316028646686e-103,3.701879275608216e-103,3.7006286406860336e-103,3.6993796941000304e-103,3.698132431865597e-103,3.6968868500115434e-103,3.6956429445800406e-103,3.6944007116265654e-103,3.6931601472198385e-103,3.69192124744177e-103,3.690684008387399e-103,3.6894484261648375e-103,3.688214496895215e-103,3.68698221671262e-103,3.6857515817640456e-103,3.6845225882093317e-103,3.68329523222111e-103,3.682069509984749e-103,3.6808454176983003e-103,3.6796229515724393e-103,3.6784021078304166e-103,3.677182882708e-103,3.6759652724534223e-103,3.6747492733273256e-103,3.67353488160271e-103,3.672322093564881e-103,3.6711109055113944e-103,3.669901313752007e-103,3.6686933146086195e-103,3.6674869044152313e-103,3.6662820795178817e-103,3.665078836274605e-103,3.663877171055373e-103,3.662677080242052e-103,3.661478560228344e-103,3.6602816074197417e-103,3.6590862182334757e-103,3.6578923890984677e-103,3.656700116455278e-103,3.655509396756058e-103,3.6543202264645e-103,3.6531326020557896e-103,3.651946520016555e-103,3.650761976844822e-103,3.649578969049966e-103,3.6483974931526575e-103,3.6472175456848247e-103,3.6460391231895987e-103,3.644862222221268e-103,3.643686839345237e-103,3.6425129711379707e-103,3.6413406141869556e-103,3.640169765090648e-103,3.6390004204584345e-103,3.637832576910581e-103,3.6366662310781897e-103,3.635501379603154e-103,3.634338019138113e-103,3.6331761463464077e-103,3.6320157579020346e-103,3.6308568504896034e-103,3.6296994208042932e-103,3.6285434655518067e-103,3.62738898144833e-103,3.6262359652204847e-103,3.6250844136052897e-103,3.623934323350114e-103,3.6227856912126383e-103,3.621638513960809e-103,3.6204927883727953e-103,3.6193485112369534e-103,3.618205679351777e-103,3.6170642895258617e-103,3.615924338577859e-103,3.614785823336438e-103,3.6136487406402435e-103,3.6125130873378573e-103,3.6113788602877525e-103,3.610246056358259e-103,3.609114672427519e-103,3.6079847053834517e-103,3.606856152123706e-103,3.605729009555631e-103,3.6046032745962257e-103,3.6034789441721107e-103,3.602356015219481e-103,3.6012344846840706e-103,3.600114349521114e-103,3.598995606695307e-103,3.59787825318077e-103,3.5967622859610066e-103,3.59564770202887e-103,3.594534498386523e-103,3.593422672045401e-103,3.592312220026174e-103,3.5912031393587126e-103,3.590095427082046e-103,3.5889890802443286e-103,3.587884095902805e-103,3.5867804711237703e-103,3.5856782029825347e-103,3.584577288563389e-103,3.5834777249595677e-103,3.582379509273214e-103,3.581282638615343e-103,3.580187110105807e-103,3.5790929208732624e-103,3.5780000680551316e-103,3.5769085487975706e-103,3.575818360255433e-103,3.5747294995922366e-103,3.5736419639801273e-103,3.5725557505998475e-103,3.5714708566407005e-103,3.5703872793005184e-103,3.5693050157856245e-103,3.568224063310805e-103,3.5671444190992734e-103,3.5660660803826363e-103,3.5649890444008613e-103,3.5639133084022465e-103,3.562838869643383e-103,3.5617657253891263e-103,3.560693872912564e-103,3.5596233094949815e-103,3.55855403242583e-103,3.557486039002697e-103,3.5564193265312726e-103,3.555353892325319e-103,3.5542897337066385e-103,3.553226848005041e-103,3.5521652325583165e-103,3.5511048847122007e-103,3.550045801820345e-103,3.548987981244287e-103,3.5479314203534196e-103,3.546876116524958e-103,3.545822067143914e-103,3.5447692696030643e-103,3.543717721302916e-103,3.542667419651685e-103,3.541618362065259e-103,3.5405705459671734e-103,3.539523968788577e-103,3.5384786279682077e-103,3.537434520952359e-103,3.536391645194854e-103,3.535349998157016e-103,3.534309577307638e-103,3.5332703801229577e-103,3.5322324040866234e-103,3.5311956466896737e-103,3.530160105430501e-103,3.52912577781483e-103,3.5280926613556854e-103,3.527060753573367e-103,3.52603005199542e-103,3.5250005541566094e-103,3.5239722575988906e-103,3.522945159871384e-103,3.521919258530347e-103,3.5208945511391485e-103,3.5198710352682373e-103,3.5188487084951206e-103,3.5178275684043367e-103,3.516807612587425e-103,3.515788838642903e-103,3.5147712441762397e-103,3.5137548267998265e-103,3.5127395841329564e-103,3.511725513801792e-103,3.510712613439345e-103,3.5097008806854474e-103,3.508690313186728e-103,3.507680908596584e-103,3.5066726645751606e-103,3.50566557878932e-103,3.5046596489126204e-103,3.5036548726252907e-103,3.5026512476142023e-103,3.5016487715728494e-103,3.500647442201322e-103,3.499647257206278e-103,3.498648214300926e-103,3.497650311204995e-103,3.496653545644713e-103,3.4956579153527815e-103,3.4946634180683527e-103,3.4936700515370074e-103,3.4926778135107253e-103,3.4916867017478685e-103,3.4906967140131524e-103,3.4897078480776273e-103,3.48872010171865e-103,3.4877334727198633e-103,3.486747958871175e-103,3.4857635579687304e-103,3.4847802678148915e-103,3.4837980862182157e-103,3.4828170109934306e-103,3.481837039961413e-103,3.4808581709491666e-103,3.4798804017897977e-103,3.478903730322495e-103,3.4779281543925066e-103,3.4769536718511187e-103,3.4759802805556314e-103,3.4750079783693394e-103,3.47403676316151e-103,3.4730666328073584e-103,3.472097585188031e-103,3.4711296181905784e-103,3.470162729707938e-103,3.4691969176389134e-103,3.468232179888149e-103,3.467268514366112e-103,3.4663059189890704e-103,3.4653443916790734e-103,3.4643839303639274e-103,3.46342453297718e-103,3.4624661974580936e-103,3.461508921751632e-103,3.460552703808431e-103,3.459597541584788e-103,3.458643433042633e-103,3.457690376149513e-103,3.4567383688785707e-103,3.4557874092085275e-103,3.4548374951236567e-103,3.4538886246137693e-103,3.4529407956741944e-103,3.4519940063057564e-103,3.451048254514756e-103,3.450103538312954e-103,3.449159855717547e-103,3.4482172047511526e-103,3.4472755834417873e-103,3.446334989822848e-103,3.445395421933092e-103,3.4444568778166225e-103,3.4435193555228625e-103,3.442582853106542e-103,3.441647368627677e-103,3.4407129001515507e-103,3.4397794457486945e-103,3.4388470034948697e-103,3.437915571471052e-103,3.436985147763408e-103,3.4360557304632805e-103,3.43512731766717e-103,3.434199907476716e-103,3.4332734979986775e-103,3.4323480873449187e-103,3.4314236736323877e-103,3.4305002549831e-103,3.429577829524122e-103,3.4286563953875507e-103,3.427735950710498e-103,3.4268164936350737e-103,3.425898022308366e-103,3.424980534882426e-103,3.4240640295142497e-103,3.4231485043657613e-103,3.4222339576037944e-103,3.4213203874000785e-103,3.4204077919312174e-103,3.419496169378676e-103,3.4185855179287626e-103,3.41767583577261e-103,3.4167671211061623e-103,3.415859372130156e-103,3.4149525870501037e-103,3.4140467640762774e-103,3.413141901423694e-103,3.4122379973120963e-103,3.4113350499659387e-103,3.410433057614371e-103,3.409532018491219e-103,3.408631930834974e-103,3.4077327928887725e-103,3.4068346029003824e-103,3.4059373591221847e-103,3.4050410598111615e-103,3.404145703228876e-103,3.403251287641461e-103,3.4023578113196004e-103,3.401465272538515e-103,3.4005736695779453e-103,3.39968300072214e-103,3.3987932642598357e-103,3.397904458484245e-103,3.397016581693041e-103,3.39612963218834e-103,3.39524360827669e-103,3.3943585082690514e-103,3.3934743304807854e-103,3.392591073231638e-103,3.391708734845726e-103,3.3908273136515196e-103,3.389946807981831e-103,3.3890672161737977e-103,3.3881885365688675e-103,3.3873107675127866e-103,3.386433907355583e-103,3.3855579544515526e-103,3.3846829071592443e-103,3.383808763841447e-103,3.382935522865174e-103,3.38206318260165e-103,3.381191741426297e-103,3.380321197718718e-103,3.379451549862687e-103,3.3785827962461314e-103,3.3777149352611186e-103,3.3768479653038457e-103,3.3759818847746217e-103,3.375116692077855e-103,3.374252385622041e-103,3.373388963819747e-103,3.3725264250875977e-103,3.371664767846266e-103,3.370803990520456e-103,3.3699440915388883e-103,3.369085069334292e-103,3.368226922343385e-103,3.367369649006867e-103,3.3665132477694006e-103,3.3656577170796036e-103,3.364803055390032e-103,3.3639492611571686e-103,3.3630963328414076e-103,3.362244268907049e-103,3.361393067822275e-103,3.360542728059146e-103,3.3596932480935854e-103,3.3588446264053634e-103,3.3579968614780904e-103,3.3571499517991984e-103,3.3563038958599336e-103,3.3554586921553397e-103,3.354614339184249e-103,3.353770835449267e-103,3.3529281794567625e-103,3.3520863697168543e-103,3.351245404743399e-103,3.350405283053979e-103,3.3495660031698882e-103,3.3487275636161247e-103,3.347889962921374e-103,3.3470531996179997e-103,3.346217272242031e-103,3.3453821793331505e-103,3.344547919434682e-103,3.34371449109358e-103,3.3428818928604165e-103,3.34205012328937e-103,3.3412191809382144e-103,3.340389064368306e-103,3.3395597721445734e-103,3.338731302835504e-103,3.3379036550131357e-103,3.337076827253042e-103,3.3362508181343235e-103,3.335425626239594e-103,3.334601250154971e-103,3.333777688470064e-103,3.332954939777964e-103,3.3321330026752297e-103,3.33131187576188e-103,3.330491557641381e-103,3.3296720469206343e-103,3.3288533422099664e-103,3.3280354421231203e-103,3.3272183452772404e-103,3.326402050292865e-103,3.325586555793915e-103,3.324771860407679e-103,3.323957962764811e-103,3.3231448614993105e-103,3.3223325552485176e-103,3.321521042653101e-103,3.3207103223570466e-103,3.319900393007649e-103,3.319091253255498e-103,3.318282901754471e-103,3.317475337161721e-103,3.316668558137666e-103,3.315862563345981e-103,3.3150573514535845e-103,3.314252921130631e-103,3.313449271050499e-103,3.312646399889781e-103,3.3118443063282755e-103,3.311042989048974e-103,3.3102424467380524e-103,3.309442678084861e-103,3.3086436817819146e-103,3.3078454565248826e-103,3.307048001012577e-103,3.306251313946948e-103,3.3054553940330666e-103,3.3046602399791217e-103,3.303865850496407e-103,3.303072224299311e-103,3.302279360105308e-103,3.3014872566349496e-103,3.300695912611854e-103,3.2999053267626967e-103,3.2991154978172e-103,3.2983264245081243e-103,3.297538105571261e-103,3.296750539745419e-103,3.295963725772416e-103,3.295177662397074e-103,3.2943923483672027e-103,3.293607782433596e-103,3.2928239633500204e-103,3.2920408898732057e-103,3.2912585607628363e-103,3.290476974781542e-103,3.289696130694889e-103,3.288916027271371e-103,3.2881366632824007e-103,3.287358037502298e-103,3.286580148708284e-103,3.285802995680473e-103,3.2850265772018587e-103,3.284250892058311e-103,3.2834759390385637e-103,3.282701716934207e-103,3.281928224539678e-103,3.2811554606522524e-103,3.2803834240720363e-103,3.2796121136019566e-103,3.2788415280477535e-103,3.278071666217971e-103,3.2773025269239484e-103,3.2765341089798123e-103,3.275766411202467e-103,3.274999432411589e-103,3.274233171429613e-103,3.273467627081731e-103,3.2727027981958757e-103,3.2719386836027205e-103,3.271175282135664e-103,3.270412592630826e-103,3.269650613927038e-103,3.2688893448658346e-103,3.268128784291446e-103,3.2673689310507906e-103,3.2666097839934635e-103,3.2658513419717337e-103,3.2650936038405304e-103,3.2643365684574397e-103,3.263580234682694e-103,3.262824601379165e-103,3.2620696674123545e-103,3.261315431650388e-103,3.260561892964007e-103,3.2598090502265577e-103,3.2590569023139894e-103,3.2583054481048414e-103,3.2575546864802373e-103,3.256804616323876e-103,3.2560552365220264e-103,3.255306545963518e-103,3.254558543539732e-103,3.2538112281445977e-103,3.2530645986745806e-103,3.252318654028677e-103,3.2515733931084073e-103,3.250828814817806e-103,3.250084918063415e-103,3.2493417017542784e-103,3.248599164801933e-103,3.2478573061204003e-103,3.24711612462618e-103,3.2463756192382436e-103,3.245635788878026e-103,3.2448966324694186e-103,3.2441581489387607e-103,3.243420337214835e-103,3.242683196228858e-103,3.2419467249144727e-103,3.2412109222077446e-103,3.240475787047149e-103,3.2397413183735715e-103,3.239007515130293e-103,3.238274376262987e-103,3.2375419007197133e-103,3.2368100874509075e-103,3.236078935409378e-103,3.2353484435502957e-103,3.234618610831188e-103,3.233889436211935e-103,3.2331609186547563e-103,3.232433057124211e-103,3.2317058505871853e-103,3.2309792980128894e-103,3.2302533983728487e-103,3.229528150640898e-103,3.2288035537931746e-103,3.228079606808111e-103,3.227356308666429e-103,3.226633658351133e-103,3.2259116548475025e-103,3.2251902971430864e-103,3.2244695842276957e-103,3.2237495150933976e-103,3.223030088734509e-103,3.222311304147588e-103,3.2215931603314314e-103,3.2208756562870643e-103,3.220158791017736e-103,3.219442563528911e-103,3.218726972828267e-103,3.2180120179256846e-103,3.217297697833242e-103,3.216584011565209e-103,3.2158709581380404e-103,3.2151585365703716e-103,3.2144467458830073e-103,3.213735585098921e-103,3.2130250532432463e-103,3.2123151493432697e-103,3.2116058724284265e-103,3.2108972215302925e-103,3.2101891956825797e-103,3.2094817939211283e-103,3.2087750152839043e-103,3.2080688588109877e-103,3.207363323544572e-103,3.2066584085289544e-103,3.205954112810531e-103,3.205250435437793e-103,3.2045473754613167e-103,3.2038449319337594e-103,3.203143103909855e-103,3.2024418904464065e-103,3.2017412906022793e-103,3.201041303438397e-103,3.2003419280177353e-103,3.1996431634053147e-103,3.1989450086681976e-103,3.198247462875479e-103,3.197550525098283e-103,3.1968541944097566e-103,3.1961584698850653e-103,3.195463350601383e-103,3.194768835637891e-103,3.194074924075771e-103,3.1933816149981986e-103,3.192688907490338e-103,3.1919968006393373e-103,3.1913052935343215e-103,3.1906143852663875e-103,3.189924074928599e-103,3.189234361615981e-103,3.188545244425513e-103,3.1878567224561253e-103,3.1871687948086925e-103,3.1864814605860273e-103,3.185794718892878e-103,3.185108568835919e-103,3.184423009523748e-103,3.183738040066882e-103,3.183053659577747e-103,3.1823698671706774e-103,3.181686661961909e-103,3.1810040430695744e-103,3.1803220096136946e-103,3.179640560716178e-103,3.178959695500813e-103,3.178279413093264e-103,3.177599712621062e-103,3.176920593213607e-103,3.1762420540021545e-103,3.1755640941198176e-103,3.1748867127015555e-103,3.174209908884175e-103,3.1735336818063173e-103,3.1728580306084626e-103,3.172182954432915e-103,3.1715084524238056e-103,3.170834523727084e-103,3.1701611674905106e-103,3.1694883828636573e-103,3.1688161689979e-103,3.1681445250464106e-103,3.167473450164157e-103,3.166802943507895e-103,3.1661330042361645e-103,3.165463631509284e-103,3.164794824489347e-103,3.1641265823402147e-103,3.163458904227515e-103,3.162791789318633e-103,3.1621252367827094e-103,3.161459245790636e-103,3.1607938155150477e-103,3.1601289451303213e-103,3.1594646338125673e-103,3.15880088073963e-103,3.1581376850910774e-103,3.1574750460482e-103,3.1568129627940043e-103,3.1561514345132096e-103,3.155490460392242e-103,3.1548300396192305e-103,3.154170171384004e-103,3.153510854878081e-103,3.1528520892946725e-103,3.152193873828672e-103,3.1515362076766533e-103,3.150879090036866e-103,3.1502225201092285e-103,3.1495664970953274e-103,3.1489110201984106e-103,3.1482560886233813e-103,3.147601701576797e-103,3.146947858266864e-103,3.1462945579034307e-103,3.145641799697986e-103,3.1449895828636526e-103,3.144337906615185e-103,3.143686770168963e-103,3.1430361727429877e-103,3.1423861135568784e-103,3.141736591831868e-103,3.141087606790796e-103,3.1404391576581085e-103,3.1397912436598507e-103,3.139143864023663e-103,3.138497017978778e-103,3.137850704756016e-103,3.1372049235877796e-103,3.13655967370805e-103,3.135914954352383e-103,3.135270764757906e-103,3.1346271041633106e-103,3.133983971808852e-103,3.133341366936342e-103,3.132699288789147e-103,3.1320577366121833e-103,3.13141670965191e-103,3.130776207156331e-103,3.1301362283749854e-103,3.1294967725589447e-103,3.1288578389608123e-103,3.1282194268347135e-103,3.127581535436296e-103,3.1269441640227246e-103,3.126307311852677e-103,3.1256709781863383e-103,3.125035162285401e-103,3.124399863413056e-103,3.1237650808339936e-103,3.1231308138143957e-103,3.1224970616219325e-103,3.121863823525761e-103,3.1212310987965195e-103,3.120598886706322e-103,3.1199671865287566e-103,3.119335997538882e-103,3.1187053190132217e-103,3.118075150229761e-103,3.1174454904679436e-103,3.1168163390086673e-103,3.1161876951342798e-103,3.1155595581285766e-103,3.114931927276795e-103,3.1143048018656104e-103,3.113678181183136e-103,3.113052064518915e-103,3.112426451163918e-103,3.1118013404105406e-103,3.1111767315525975e-103,3.110552623885321e-103,3.1099290167053565e-103,3.109305909310758e-103,3.1086833010009853e-103,3.1080611910769e-103,3.1074395788407625e-103,3.106818463596227e-103,3.10619784464834e-103,3.1055777213035333e-103,3.104958092869625e-103,3.1043389586558117e-103,3.1037203179726666e-103,3.1031021701321376e-103,3.1024845144475404e-103,3.1018673502335583e-103,3.101250676806235e-103,3.100634493482974e-103,3.1000187995825363e-103,3.099403594425032e-103,3.0987888773319205e-103,3.0981746476260064e-103,3.0975609046314365e-103,3.096947647673694e-103,3.096334876079599e-103,3.0957225891772997e-103,3.0951107862962747e-103,3.094499466767327e-103,3.0938886299225776e-103,3.0932782750954696e-103,3.092668401620756e-103,3.0920590088345024e-103,3.091450096074083e-103,3.0908416626781746e-103,3.0902337079867546e-103,3.0896262313410994e-103,3.0890192320837785e-103,3.0884127095586517e-103,3.087806663110868e-103,3.0872010920868586e-103,3.086595995834338e-103,3.085991373702297e-103,3.0853872250410006e-103,3.0847835492019864e-103,3.084180345538058e-103,3.0835776134032864e-103,3.0829753521530027e-103,3.0823735611437956e-103,3.08177223973351e-103,3.0811713872812434e-103,3.0805710031473405e-103,3.0799710866933934e-103,3.0793716372822365e-103,3.078772654277941e-103,3.0781741370458184e-103,3.07757608495241e-103,3.076978497365489e-103,3.076381373654055e-103,3.0757847131883304e-103,3.0751885153397604e-103,3.0745927794810057e-103,3.0739975049859437e-103,3.0734026912296613e-103,3.0728083375884557e-103,3.0722144434398283e-103,3.071621008162483e-103,3.0710280311363244e-103,3.070435511742451e-103,3.069843449363158e-103,3.069251843381928e-103,3.068660693183433e-103,3.0680699981535284e-103,3.067479757679252e-103,3.0668899711488187e-103,3.0663006379516208e-103,3.065711757478222e-103,3.0651233291203563e-103,3.064535352270924e-103,3.06394782632399e-103,3.0633607506747803e-103,3.062774124719678e-103,3.0621879478562224e-103,3.0616022194831046e-103,3.061016939000165e-103,3.0604321058083927e-103,3.059847719309917e-103,3.0592637789080123e-103,3.058680284007087e-103,3.0580972340126884e-103,3.0575146283314937e-103,3.0569324663713115e-103,3.056350747541077e-103,3.055769471250848e-103,3.055188636911806e-103,3.0546082439362497e-103,3.054028291737593e-103,3.053448779730365e-103,3.0528697073302027e-103,3.052291073953853e-103,3.0517128790191656e-103,3.0511351219450936e-103,3.050557802151689e-103,3.0499809190601e-103,3.0494044720925703e-103,3.048828460672435e-103,3.0482528842241154e-103,3.047677742173121e-103,3.0471030339460443e-103,3.0465287589705576e-103,3.0459549166754125e-103,3.045381506490435e-103,3.0448085278465246e-103,3.0442359801756497e-103,3.0436638629108476e-103,3.04309217548622e-103,3.0425209173369315e-103,3.0419500878992045e-103,3.041379686610321e-103,3.0408097129086163e-103,3.040240166233477e-103,3.0396710460253413e-103,3.039102351725692e-103,3.038534082777057e-103,3.0379662386230077e-103,3.037398818708152e-103,3.0368318224781373e-103,3.036265249379642e-103,3.0356990988603793e-103,3.0351333703690895e-103,3.0345680633555415e-103,3.034003177270527e-103,3.03343871156586e-103,3.032874665694374e-103,3.032311039109919e-103,3.031747831267359e-103,3.0311850416225725e-103,3.030622669632443e-103,3.030060714754865e-103,3.029499176448736e-103,3.028938054173955e-103,3.028377347391423e-103,3.027817055563036e-103,3.027257178151688e-103,3.026697714621262e-103,3.0261386644366336e-103,3.0255800270636664e-103,3.025021801969208e-103,3.02446398862109e-103,3.023906586488125e-103,3.0233495950401034e-103,3.0227930137477924e-103,3.0222368420829317e-103,3.021681079518234e-103,3.0211257255273807e-103,3.0205707795850193e-103,3.0200162411667617e-103,3.019462109749183e-103,3.0189083848098173e-103,3.018355065827157e-103,3.0178021522806495e-103,3.0172496436506943e-103,3.016697539418644e-103,3.0161458390667964e-103,3.015594542078399e-103,3.0150436479376406e-103,3.014493156129654e-103,3.0139430661405096e-103,3.0133933774572167e-103,3.012844089567718e-103,3.0122952019608914e-103,3.0117467141265427e-103,3.011198625555409e-103,3.010650935739151e-103,3.0101036441703553e-103,3.0095567503425297e-103,3.0090102537501023e-103,3.0084641538884177e-103,3.0079184502537367e-103,3.007373142343233e-103,3.006828229654992e-103,3.0062837116880075e-103,3.00573958794218e-103,3.0051958579183144e-103,3.004652521118119e-103,3.0041095770442017e-103,3.0035670252000697e-103,3.0030248650901253e-103,3.002483096219666e-103,3.00194171809488e-103,3.001400730222846e-103,3.000860132111531e-103,3.0003199232697874e-103,2.999780103207351e-103,2.99924067143484e-103,2.9987016274637514e-103,2.998162970806459e-103,2.997624700976214e-103,2.99708681748714e-103,2.9965493198542314e-103,2.9960122075933525e-103,2.995475480221235e-103,2.9949391372554757e-103,2.994403178214535e-103,2.9938676026177343e-103,2.993332409985254e-103,2.9927975998381325e-103,2.992263171698263e-103,2.9917291250883916e-103,2.991195459532117e-103,2.990662174553886e-103,2.9901292696789937e-103,2.9895967444335794e-103,2.9890645983446273e-103,2.988532830939962e-103,2.988001441748249e-103,2.987470430298989e-103,2.9869397961225215e-103,2.986409538750018e-103,2.9858796577134815e-103,2.9853501525457455e-103,2.9848210227804726e-103,2.9842922679521487e-103,2.983763887596087e-103,2.9832358812484213e-103,2.982708248446106e-103,2.9821809887269144e-103,2.981654101629436e-103,2.9811275866930756e-103,2.980601443458051e-103,2.9800756714653894e-103,2.9795502702569295e-103,2.9790252393753163e-103,2.9785005783640006e-103,2.977976286767236e-103,2.9774523641300787e-103,2.9769288099983843e-103,2.976405623918807e-103,2.975882805438798e-103,2.975360354106601e-103,2.974838269471254e-103,2.974316551082586e-103,2.973795198491214e-103,2.973274211248543e-103,2.9727535889067635e-103,2.9722333310188493e-103,2.971713437138556e-103,2.9711939068204206e-103,2.9706747396197573e-103,2.970155935092657e-103,2.9696374927959857e-103,2.9691194122873825e-103,2.9686016931252574e-103,2.9680843348687914e-103,2.967567337077931e-103,2.9670506993133907e-103,2.9665344211366484e-103,2.9660185021099463e-103,2.965502941796285e-103,2.9649877397594256e-103,2.964472895563887e-103,2.963958408774944e-103,2.963444278958624e-103,2.962930505681708e-103,2.9624170885117286e-103,2.961904027016965e-103,2.961391320766445e-103,2.960878969329943e-103,2.9603669722779756e-103,2.9598553291818024e-103,2.9593440396134237e-103,2.958833103145579e-103,2.958322519351745e-103,2.9578122878061325e-103,2.957302408083689e-103,2.956792879760092e-103,2.9562837024117517e-103,2.9557748756158056e-103,2.9552663989501194e-103,2.9547582719932847e-103,2.954250494324617e-103,2.9537430655241555e-103,2.953235985172658e-103,2.952729252851604e-103,2.95222286814319e-103,2.9517168306303277e-103,2.9512111398966444e-103,2.9507057955264805e-103,2.950200797104887e-103,2.9496961442176256e-103,2.949191836451165e-103,2.948687873392682e-103,2.948184254630057e-103,2.9476809797518753e-103,2.9471780483474235e-103,2.946675460006688e-103,2.946173214320355e-103,2.9456713108798083e-103,2.9451697492771256e-103,2.944668529105081e-103,2.9441676499571397e-103,2.9436671114274586e-103,2.943166913110885e-103,2.942667054602953e-103,2.942167535499884e-103,2.9416683553985844e-103,2.9411695138966446e-103,2.9406710105923354e-103,2.94017284508461e-103,2.939675016973099e-103,2.9391775258581136e-103,2.938680371340637e-103,2.9381835530223295e-103,2.937687070505524e-103,2.937190923393225e-103,2.9366951112891074e-103,2.936199633797514e-103,2.9357044905234557e-103,2.9352096810726084e-103,2.9347152050513133e-103,2.9342210620665725e-103,2.933727251726052e-103,2.933233773638076e-103,2.932740627411628e-103,2.932247812656347e-103,2.931755328982531e-103,2.931263176001129e-103,2.9307713533237436e-103,2.9302798605626293e-103,2.9297886973306904e-103,2.9292978632414794e-103,2.928807357909196e-103,2.9283171809486854e-103,2.927827331975438e-103,2.927337810605585e-103,2.9268486164559026e-103,2.9263597491438034e-103,2.925871208287341e-103,2.925382993505205e-103,2.9248951044167226e-103,2.9244075406418534e-103,2.9239203018011914e-103,2.9234333875159633e-103,2.9229467974080246e-103,2.9224605310998604e-103,2.921974588214584e-103,2.921488968375935e-103,2.9210036712082775e-103,2.920518696336599e-103,2.9200340433865103e-103,2.9195497119842436e-103,2.919065701756649e-103,2.9185820123311956e-103,2.91809864333597e-103,2.9176155943996747e-103,2.917132865151625e-103,2.9166504552217507e-103,2.9161683642405926e-103,2.915686591839302e-103,2.9152051376496393e-103,2.9147240013039723e-103,2.9142431824352766e-103,2.9137626806771314e-103,2.9132824956637196e-103,2.9128026270298285e-103,2.912323074410845e-103,2.9118438374427567e-103,2.911364915762149e-103,2.910886309006206e-103,2.910408016812708e-103,2.9099300388200285e-103,2.909452374667137e-103,2.9089750239935924e-103,2.9084979864395474e-103,2.908021261645743e-103,2.9075448492535097e-103,2.9070687489047644e-103,2.9065929602420104e-103,2.906117482908336e-103,2.905642316547414e-103,2.905167460803496e-103,2.9046929153214195e-103,2.9042186797465983e-103,2.9037447537250267e-103,2.903271136903275e-103,2.9027978289284914e-103,2.902324829448397e-103,2.9018521381112896e-103,2.901379754566035e-103,2.900907678462076e-103,2.90043590944942e-103,2.8999644471786465e-103,2.8994932913009025e-103,2.899022441467901e-103,2.8985518973319204e-103,2.898081658545802e-103,2.8976117247629527e-103,2.897142095637339e-103,2.8966727708234885e-103,2.8962037499764876e-103,2.895735032751983e-103,2.8952666188061755e-103,2.8947985077958245e-103,2.894330699378242e-103,2.893863193211295e-103,2.893395988953401e-103,2.8929290862635315e-103,2.8924624848012053e-103,2.8919961842264915e-103,2.8915301842000076e-103,2.8910644843829153e-103,2.890599084436925e-103,2.890133984024288e-103,2.889669182807801e-103,2.889204680450803e-103,2.8887404766171725e-103,2.888276570971328e-103,2.887812963178227e-103,2.8873496529033656e-103,2.886886639812774e-103,2.8864239235730203e-103,2.8859615038512046e-103,2.885499380314961e-103,2.885037552632456e-103,2.884576020472385e-103,2.884114783503976e-103,2.8836538413969834e-103,2.8831931938216903e-103,2.8827328404489066e-103,2.8822727809499655e-103,2.881813014996727e-103,2.881353542261572e-103,2.880894362417405e-103,2.880435475137652e-103,2.879976880096257e-103,2.879518576967685e-103,2.879060565426917e-103,2.8786028451494514e-103,2.8781454158113026e-103,2.877688277088999e-103,2.8772314286595833e-103,2.87677487020061e-103,2.8763186013901456e-103,2.8758626219067655e-103,2.875406931429556e-103,2.874951529638112e-103,2.874496416212534e-103,2.8740415908334286e-103,2.87358705318191e-103,2.873132802939594e-103,2.8726788397886e-103,2.8722251634115503e-103,2.871771773491567e-103,2.8713186697122735e-103,2.870865851757791e-103,2.870413319312739e-103,2.869961072062234e-103,2.8695091096918885e-103,2.8690574318878094e-103,2.8686060383365977e-103,2.868154928725348e-103,2.8677041027416445e-103,2.867253560073565e-103,2.8668033004096754e-103,2.866353323439031e-103,2.865903628851175e-103,2.8654542163361364e-103,2.865005085584432e-103,2.864556236287062e-103,2.8641076681355105e-103,2.863659380821745e-103,2.8632113740382155e-103,2.8627636474778513e-103,2.862316200834062e-103,2.861869033800738e-103,2.8614221460722455e-103,2.8609755373434284e-103,2.8605292073096076e-103,2.860083155666578e-103,2.8596373821106093e-103,2.859191886338444e-103,2.858746668047296e-103,2.8583017269348523e-103,2.857857062699269e-103,2.857412675039172e-103,2.8569685636536544e-103,2.8565247282422794e-103,2.856081168505074e-103,2.855637884142532e-103,2.855194874855612e-103,2.8547521403457363e-103,2.8543096803147887e-103,2.8538674944651173e-103,2.853425582499528e-103,2.8529839441212897e-103,2.8525425790341274e-103,2.8521014869422275e-103,2.851660667550231e-103,2.851220120563236e-103,2.850779845686796e-103,2.85033984262692e-103,2.8499001110900684e-103,2.8494606507831565e-103,2.849021461413549e-103,2.8485825426890646e-103,2.848143894317968e-103,2.8477055160089763e-103,2.847267407471252e-103,2.8468295684144083e-103,2.8463919985485005e-103,2.845954697584033e-103,2.845517665231953e-103,2.845080901203651e-103,2.844644405210961e-103,2.844208176966159e-103,2.8437722161819626e-103,2.8433365225715277e-103,2.8429010958484516e-103,2.842465935726768e-103,2.8420310419209494e-103,2.8415964141459054e-103,2.8411620521169795e-103,2.8407279555499516e-103,2.8402941241610357e-103,2.8398605576668783e-103,2.8394272557845586e-103,2.8389942182315873e-103,2.838561444725905e-103,2.838128934985883e-103,2.8376966887303223e-103,2.8372647056784497e-103,2.836832985549921e-103,2.836401528064817e-103,2.8359703329436463e-103,2.8355393999073393e-103,2.8351087286772527e-103,2.8346783189751643e-103,2.834248170523276e-103,2.833818283044209e-103,2.833388656261007e-103,2.832959289897132e-103,2.8325301836764657e-103,2.832101337323307e-103,2.831672750562373e-103,2.8312444231187967e-103,2.8308163547181266e-103,2.8303885450863255e-103,2.8299609939497715e-103,2.8295337010352546e-103,2.829106666069978e-103,2.8286798887815557e-103,2.828253368898013e-103,2.8278271061477843e-103,2.8274011002597145e-103,2.826975350963055e-103,2.826549857987466e-103,2.826124621063015e-103,2.825699639920173e-103,2.8252749142898186e-103,2.824850443903233e-103,2.824426228492103e-103,2.8240022677885147e-103,2.8235785615249605e-103,2.8231551094343304e-103,2.822731911249916e-103,2.82230896670541e-103,2.821886275534902e-103,2.82146383747288e-103,2.82104165225423e-103,2.820619719614234e-103,2.82019803928857e-103,2.8197766110133106e-103,2.819355434524923e-103,2.818934509560268e-103,2.8185138358565987e-103,2.8180934131515594e-103,2.817673241183188e-103,2.8172533196899104e-103,2.8168336484105426e-103,2.8164142270842907e-103,2.8159950554507474e-103,2.815576133249894e-103,2.8151574602220974e-103,2.8147390361081115e-103,2.814320860649075e-103,2.8139029335865093e-103,2.813485254662323e-103,2.8130678236188047e-103,2.812650640198626e-103,2.81223370414484e-103,2.811817015200881e-103,2.811400573110562e-103,2.8109843776180775e-103,2.810568428467998e-103,2.8101527254052735e-103,2.80973726817523e-103,2.809322056523571e-103,2.808907090196375e-103,2.808492368940094e-103,2.8080778925015577e-103,2.807663660627965e-103,2.8072496730668913e-103,2.8068359295662815e-103,2.8064224298744536e-103,2.806009173740094e-103,2.8055961609122615e-103,2.805183391140383e-103,2.804770864174253e-103,2.8043585797640356e-103,2.8039465376602597e-103,2.803534737613823e-103,2.8031231793759874e-103,2.80271186269838e-103,2.8023007873329926e-103,2.8018899530321805e-103,2.8014793595486615e-103,2.801069006635516e-103,2.8006588940461857e-103,2.8002490215344726e-103,2.7998393888545405e-103,2.799429995760911e-103,2.7990208420084653e-103,2.7986119273524425e-103,2.798203251548439e-103,2.7977948143524086e-103,2.7973866155206597e-103,2.7969786548098583e-103,2.796570931977022e-103,2.7961634467795266e-103,2.795756198975097e-103,2.795349188321813e-103,2.794942414578107e-103,2.7945358775027624e-103,2.7941295768549115e-103,2.7937235123940384e-103,2.793317683879977e-103,2.7929120910729085e-103,2.792506733733363e-103,2.7921016116222174e-103,2.7916967245006963e-103,2.79129207213037e-103,2.790887654273153e-103,2.790483470691307e-103,2.790079521147436e-103,2.7896758054044875e-103,2.7892723232257537e-103,2.7888690743748675e-103,2.788466058615803e-103,2.7880632757128756e-103,2.7876607254307423e-103,2.7872584075343983e-103,2.786856321789177e-103,2.7864544679607533e-103,2.7860528458151367e-103,2.7856514551186755e-103,2.785250295638054e-103,2.784849367140292e-103,2.784448669392745e-103,2.7840482021631028e-103,2.7836479652193906e-103,2.783247958329964e-103,2.7828481812635143e-103,2.782448633789063e-103,2.7820493156759635e-103,2.7816502266939015e-103,2.78125136661289e-103,2.7808527352032746e-103,2.7804543322357284e-103,2.780056157481253e-103,2.779658210711178e-103,2.7792604916971603e-103,2.7788630002111834e-103,2.778465736025556e-103,2.778068698912913e-103,2.7776718886462147e-103,2.777275304998744e-103,2.776878947744108e-103,2.7764828166562367e-103,2.776086911509383e-103,2.7756912320781213e-103,2.7752957781373463e-103,2.7749005494622743e-103,2.774505545828441e-103,2.7741107670117026e-103,2.773716212788233e-103,2.7733218829345235e-103,2.7729277772273845e-103,2.772533895443944e-103,2.772140237361644e-103,2.771746802758245e-103,2.7713535914118207e-103,2.770960603100761e-103,2.770567837603769e-103,2.7701752946998617e-103,2.7697829741683684e-103,2.7693908757889324e-103,2.768998999341507e-103,2.7686073446063576e-103,2.768215911364061e-103,2.767824699395503e-103,2.767433708481878e-103,2.767042938404692e-103,2.7666523889457577e-103,2.766262059887196e-103,2.765871951011434e-103,2.7654820621012073e-103,2.765092392939557e-103,2.764702943309829e-103,2.764313712995675e-103,2.7639247017810503e-103,2.763535909450216e-103,2.7631473357877347e-103,2.7627589805784723e-103,2.762370843607597e-103,2.7619829246605794e-103,2.7615952235231893e-103,2.761207739981499e-103,2.7608204738218806e-103,2.7604334248310043e-103,2.7600465927958416e-103,2.7596599775036594e-103,2.7592735787420255e-103,2.7588873962988023e-103,2.7585014299621513e-103,2.758115679520529e-103,2.7577301447626876e-103,2.757344825477675e-103,2.756959721454833e-103,2.756574832483798e-103,2.7561901583545e-103,2.7558056988571617e-103,2.755421453782299e-103,2.755037422920719e-103,2.7546536060635196e-103,2.7542700030020916e-103,2.753886613528114e-103,2.7535034374335584e-103,2.7531204745106827e-103,2.752737724552035e-103,2.752355187350452e-103,2.751972862699058e-103,2.7515907503912635e-103,2.751208850220768e-103,2.750827161981555e-103,2.750445685467894e-103,2.7500644204743407e-103,2.7496833667957354e-103,2.7493025242272017e-103,2.748921892564147e-103,2.7485414716022626e-103,2.748161261137521e-103,2.7477812609661794e-103,2.747401470884773e-103,2.7470218906901213e-103,2.7466425201793224e-103,2.7462633591497565e-103,2.745884407399081e-103,2.7455056647252333e-103,2.74512713092643e-103,2.744748805801166e-103,2.7443706891482123e-103,2.743992780766618e-103,2.74361508045571e-103,2.7432375880150883e-103,2.742860303244631e-103,2.742483225944491e-103,2.742106355915094e-103,2.7417296929571423e-103,2.7413532368716103e-103,2.7409769874597467e-103,2.7406009445230713e-103,2.740225107863377e-103,2.739849477282729e-103,2.739474052583463e-103,2.7390988335681853e-103,2.738723820039773e-103,2.738349011801372e-103,2.737974408656399e-103,2.737600010408538e-103,2.737225816861742e-103,2.7368518278202328e-103,2.7364780430884973e-103,2.736104462471292e-103,2.735731085773637e-103,2.7353579128008213e-103,2.734984943358397e-103,2.734612177252183e-103,2.7342396142882607e-103,2.733867254272978e-103,2.733495097012945e-103,2.733123142315035e-103,2.732751389986384e-103,2.7323798398343905e-103,2.7320084916667145e-103,2.7316373452912783e-103,2.7312664005162635e-103,2.730895657150112e-103,2.7305251150015276e-103,2.730154773879472e-103,2.729784633593166e-103,2.7294146939520895e-103,2.7290449547659797e-103,2.7286754158448323e-103,2.7283060769988994e-103,2.7279369380386905e-103,2.727567998774971e-103,2.727199259018762e-103,2.72683071858134e-103,2.7264623772742377e-103,2.72609423490924e-103,2.725726291298387e-103,2.725358546253974e-103,2.7249909995885464e-103,2.7246236511149036e-103,2.7242565006460984e-103,2.7238895479954337e-103,2.723522792976464e-103,2.7231562354029967e-103,2.7227898750890874e-103,2.7224237118490424e-103,2.7220577454974185e-103,2.7216919758490204e-103,2.7213264027189024e-103,2.720961025922367e-103,2.720595845274964e-103,2.7202308605924913e-103,2.7198660716909936e-103,2.7195014783867624e-103,2.7191370804963353e-103,2.718772877836495e-103,2.71840887022427e-103,2.7180450574769346e-103,2.717681439412006e-103,2.717318015847245e-103,2.7169547866006587e-103,2.716591751490495e-103,2.7162289103352457e-103,2.715866262953644e-103,2.715503809164666e-103,2.715141548787528e-103,2.714779481641689e-103,2.714417607546848e-103,2.7140559263229434e-103,2.7136944377901547e-103,2.7133331417688996e-103,2.7129720380798366e-103,2.7126111265438606e-103,2.712250406982106e-103,2.7118898792159443e-103,2.7115295430669854e-103,2.711169398357075e-103,2.710809444908296e-103,2.7104496825429666e-103,2.7100901110836423e-103,2.7097307303531123e-103,2.709371540174401e-103,2.709012540370768e-103,2.708653730765707e-103,2.708295111182944e-103,2.7079366814464403e-103,2.707578441380388e-103,2.707220390809214e-103,2.7068625295575755e-103,2.7065048574503614e-103,2.706147374312693e-103,2.705790079969922e-103,2.7054329742476304e-103,2.7050760569716295e-103,2.704719327967963e-103,2.704362787062901e-103,2.7040064340829435e-103,2.7036502688548203e-103,2.703294291205487e-103,2.702938500962129e-103,2.7025828979521576e-103,2.702227482003212e-103,2.701872252943158e-103,2.701517210600087e-103,2.7011623548023165e-103,2.700807685378389e-103,2.700453202157074e-103,2.700098904967362e-103,2.699744793638471e-103,2.6993908679998426e-103,2.699037127881139e-103,2.6986835731122497e-103,2.6983302035232835e-103,2.6979770189445734e-103,2.697624019206674e-103,2.697271204140361e-103,2.696918573576632e-103,2.6965661273467057e-103,2.6962138652820203e-103,2.695861787214235e-103,2.6955098929752276e-103,2.695158182397097e-103,2.69480665531216e-103,2.6944553115529513e-103,2.6941041509522256e-103,2.6937531733429536e-103,2.6934023785583255e-103,2.693051766431747e-103,2.6927013367968415e-103,2.692351089487449e-103,2.692001024337624e-103,2.6916511411816385e-103,2.691301439853979e-103,2.6909519201893465e-103,2.6906025820226576e-103,2.690253425189043e-103,2.689904449523846e-103,2.6895556548626245e-103,2.68920704104115e-103,2.688858607895406e-103,2.688510355261588e-103,2.6881622829761045e-103,2.6878143908755754e-103,2.687466678796832e-103,2.687119146576916e-103,2.686771794053081e-103,2.68642462106279e-103,2.6860776274437147e-103,2.68573081303374e-103,2.6853841776709565e-103,2.6850377211936656e-103,2.6846914434403767e-103,2.684345344249806e-103,2.683999423460881e-103,2.6836536809127333e-103,2.683308116444703e-103,2.6829627298963365e-103,2.682617521107388e-103,2.6822724899178165e-103,2.6819276361677876e-103,2.6815829596976704e-103,2.681238460348042e-103,2.680894137959682e-103,2.6805499923735753e-103,2.680206023430911e-103,2.679862230973081e-103,2.679518614841681e-103,2.679175174878511e-103,2.678831910925572e-103,2.678488822825068e-103,2.678145910419404e-103,2.677803173551189e-103,2.677460612063232e-103,2.677118225798542e-103,2.67677601460033e-103,2.6764339783120076e-103,2.6760921167771847e-103,2.6757504298396735e-103,2.6754089173434833e-103,2.6750675791328225e-103,2.6747264150521e-103,2.674385424945921e-103,2.6740446086590907e-103,2.67370396603661e-103,2.673363496923678e-103,2.673023201165692e-103,2.6726830786082445e-103,2.672343129097125e-103,2.6720033524783183e-103,2.6716637485980065e-103,2.6713243173025656e-103,2.6709850584385677e-103,2.670645971852779e-103,2.6703070573921615e-103,2.6699683149038687e-103,2.669629744235251e-103,2.6692913452338494e-103,2.668953117747401e-103,2.668615061623833e-103,2.6682771767112676e-103,2.667939462858017e-103,2.667601919912587e-103,2.6672645477236746e-103,2.666927346140167e-103,2.6665903150111437e-103,2.666253454185874e-103,2.6659167635138187e-103,2.6655802428446267e-103,2.665243892028139e-103,2.6649077109143836e-103,2.664571699353579e-103,2.6642358571961327e-103,2.66390018429264e-103,2.6635646804938845e-103,2.6632293456508383e-103,2.662894179614659e-103,2.6625591822366943e-103,2.662224353368477e-103,2.6618896928617266e-103,2.66155520056835e-103,2.661220876340439e-103,2.660886720030272e-103,2.660552731490312e-103,2.660218910573208e-103,2.6598852571317926e-103,2.6595517710190835e-103,2.6592184520882835e-103,2.6588853001927783e-103,2.6585523151861377e-103,2.6582194969221137e-103,2.6578868452546433e-103,2.657554360037844e-103,2.657222041126018e-103,2.656889888373647e-103,2.656557901635397e-103,2.6562260807661147e-103,2.6558944256208276e-103,2.655562936054744e-103,2.655231611923253e-103,2.6549004530819253e-103,2.65456945938651e-103,2.6542386306929373e-103,2.653907966857315e-103,2.6535774677359325e-103,2.6532471331852566e-103,2.652916963061932e-103,2.6525869572227843e-103,2.6522571155248147e-103,2.651927437825203e-103,2.651597923981307e-103,2.651268573850661e-103,2.650939387290976e-103,2.6506103641601403e-103,2.650281504316218e-103,2.6499528076174493e-103,2.6496242739222505e-103,2.649295903089213e-103,2.6489676949771037e-103,2.6486396494448636e-103,2.64831176635161e-103,2.647984045556633e-103,2.647656486919397e-103,2.64732909029954e-103,2.647001855556875e-103,2.646674782551386e-103,2.646347871143232e-103,2.6460211211927426e-103,2.6456945325604223e-103,2.645368105106946e-103,2.64504183869316e-103,2.6447157331800834e-103,2.644389788428906e-103,2.6440640043009896e-103,2.6437383806578647e-103,2.643412917361234e-103,2.6430876142729696e-103,2.6427624712551136e-103,2.642437488169879e-103,2.6421126648796454e-103,2.6417880012469644e-103,2.6414634971345545e-103,2.6411391524053044e-103,2.640814966922269e-103,2.640490940548673e-103,2.6401670731479085e-103,2.639843364583535e-103,2.639519814719278e-103,2.639196423419032e-103,2.638873190546857e-103,2.63855011596698e-103,2.6382271995437933e-103,2.6379044411418556e-103,2.637581840625892e-103,2.6372593978607917e-103,2.6369371127116096e-103,2.6366149850435655e-103,2.636293014722044e-103,2.635971201612593e-103,2.635649545580926e-103,2.6353280464929185e-103,2.6350067042146115e-103,2.634685518612208e-103,2.634364489552074e-103,2.634043616900739e-103,2.633722900524895e-103,2.6334023402913955e-103,2.633081936067256e-103,2.632761687719655e-103,2.6324415951159303e-103,2.6321216581235836e-103,2.631801876610275e-103,2.6314822504438276e-103,2.6311627794922237e-103,2.630843463623606e-103,2.6305243027062763e-103,2.630205296608699e-103,2.6298864451994936e-103,2.629567748347443e-103,2.629249205921486e-103,2.6289308177907217e-103,2.628612583824408e-103,2.628294503891959e-103,2.6279765778629493e-103,2.6276588056071093e-103,2.627341186994328e-103,2.6270237218946504e-103,2.62670641017828e-103,2.626389251715576e-103,2.6260722463770533e-103,2.6257553940333856e-103,2.6254386945554005e-103,2.625122147814081e-103,2.6248057536805683e-103,2.6244895120261553e-103,2.624173422722292e-103,2.6238574856405835e-103,2.623541700652788e-103,2.623226067630819e-103,2.622910586446744e-103,2.6225952569727835e-103,2.622280079081313e-103,2.6219650526448587e-103,2.621650177536104e-103,2.6213354536278804e-103,2.6210208807931764e-103,2.6207064589051293e-103,2.620392187837031e-103,2.620078067462324e-103,2.619764097654603e-103,2.619450278287614e-103,2.6191366092352537e-103,2.61882309037157e-103,2.6185097215707626e-103,2.618196502707181e-103,2.617883433655323e-103,2.6175705142898394e-103,2.617257744485529e-103,2.6169451241173413e-103,2.6166326530603737e-103,2.616320331189874e-103,2.616008158381238e-103,2.6156961345100104e-103,2.6153842594518846e-103,2.6150725330827014e-103,2.6147609552784505e-103,2.6144495259152686e-103,2.6141382448694404e-103,2.6138271120173964e-103,2.6135161272357167e-103,2.6132052904011264e-103,2.6128946013904964e-103,2.612584060080846e-103,2.6122736663493396e-103,2.611963420073287e-103,2.611653321130145e-103,2.611343369397515e-103,2.611033564753143e-103,2.6107239070749207e-103,2.610414396240885e-103,2.610105032129216e-103,2.6097958146182394e-103,2.609486743586425e-103,2.6091778189123853e-103,2.6088690404748777e-103,2.608560408152802e-103,2.6082519218252024e-103,2.607943581371265e-103,2.6076353866703186e-103,2.607327337601836e-103,2.607019434045431e-103,2.6067116758808595e-103,2.6064040629880197e-103,2.606096595246952e-103,2.6057892725378376e-103,2.6054820947409984e-103,2.605175061736899e-103,2.604868173406143e-103,2.604561429629475e-103,2.6042548302877824e-103,2.603948375262089e-103,2.60364206443356e-103,2.6033358976835023e-103,2.6030298748933597e-103,2.602723995944716e-103,2.602418260719295e-103,2.6021126690989583e-103,2.601807220965707e-103,2.60150191620168e-103,2.601196754689155e-103,2.6008917363105477e-103,2.600586860948411e-103,2.6002821284854364e-103,2.5999775388044517e-103,2.5996730917884226e-103,2.5993687873204523e-103,2.5990646252837794e-103,2.59876060556178e-103,2.5984567280379666e-103,2.5981529925959877e-103,2.5978493991196273e-103,2.597545947492806e-103,2.59724263759958e-103,2.5969394693241394e-103,2.5966364425508107e-103,2.5963335571640556e-103,2.5960308130484686e-103,2.5957282100887815e-103,2.5954257481698586e-103,2.595123427176698e-103,2.594821246994433e-103,2.59451920750833e-103,2.594217308603789e-103,2.5939155501663435e-103,2.5936139320816586e-103,2.5933124542355346e-103,2.593011116513903e-103,2.592709918802828e-103,2.592408860988507e-103,2.5921079429572686e-103,2.591807164595573e-103,2.5915065257900136e-103,2.591206026427313e-103,2.5909056663943273e-103,2.5906054455780426e-103,2.5903053638655763e-103,2.590005421144176e-103,2.589705617301221e-103,2.5894059522242188e-103,2.589106425800809e-103,2.5888070379187603e-103,2.5885077884659716e-103,2.5882086773304703e-103,2.5879097044004153e-103,2.5876108695640913e-103,2.587312172709915e-103,2.5870136137264304e-103,2.5867151925023103e-103,2.586416908926356e-103,2.5861187628874973e-103,2.5858207542747915e-103,2.5855228829774233e-103,2.5852251488847063e-103,2.5849275518860794e-103,2.5846300918711114e-103,2.584332768729497e-103,2.5840355823510563e-103,2.5837385326257383e-103,2.5834416194436174e-103,2.5831448426948934e-103,2.5828482022698946e-103,2.582551698059072e-103,2.582255329953006e-103,2.5819590978424e-103,2.581663001618082e-103,2.581367041171008e-103,2.581071216392257e-103,2.580775527173033e-103,2.580479973404665e-103,2.5801845549786063e-103,2.5798892717864347e-103,2.5795941237198507e-103,2.5792991106706804e-103,2.579004232530873e-103,2.5787094891925003e-103,2.578414880547759e-103,2.578120406488967e-103,2.577826066908567e-103,2.577531861699123e-103,2.577237790753323e-103,2.5769438539639756e-103,2.5766500512240135e-103,2.57635638242649e-103,2.576062847464581e-103,2.5757694462315835e-103,2.575476178620917e-103,2.575183044526121e-103,2.5748900438408574e-103,2.5745971764589077e-103,2.5743044422741753e-103,2.574011841180683e-103,2.573719373072577e-103,2.573427037844119e-103,2.573134835389695e-103,2.5728427656038072e-103,2.572550828381082e-103,2.572259023616261e-103,2.571967351204208e-103,2.571675811039904e-103,2.571384403018451e-103,2.5710931270350675e-103,2.5708019829850927e-103,2.570510970763984e-103,2.570220090267315e-103,2.569929341390781e-103,2.569638724030191e-103,2.569348238081476e-103,2.569057883440682e-103,2.5687676600039727e-103,2.5684775676676305e-103,2.5681876063280524e-103,2.567897775881755e-103,2.5676080762253694e-103,2.567318507255645e-103,2.5670290688694473e-103,2.5667397609637564e-103,2.56645058343567e-103,2.566161536182402e-103,2.565872619101282e-103,2.5655838320897525e-103,2.565295175045375e-103,2.565006647865825e-103,2.5647182504488913e-103,2.5644299826924796e-103,2.56414184449461e-103,2.5638538357534167e-103,2.5635659563671483e-103,2.563278206234168e-103,2.5629905852529533e-103,2.5627030933220935e-103,2.5624157303402946e-103,2.562128496206374e-103,2.561841390819264e-103,2.5615544140780085e-103,2.5612675658817653e-103,2.5609808461298057e-103,2.560694254721513e-103,2.560407791556382e-103,2.560121456534023e-103,2.5598352495541553e-103,2.5595491705166115e-103,2.5592632193213366e-103,2.558977395868387e-103,2.55869170005793e-103,2.558406131790245e-103,2.5581206909657236e-103,2.557835377484866e-103,2.557550191248286e-103,2.557265132156706e-103,2.5569802001109604e-103,2.5566953950119936e-103,2.5564107167608607e-103,2.5561261652587263e-103,2.5558417404068644e-103,2.5555574421066607e-103,2.55527327025961e-103,2.554989224767315e-103,2.5547053055314893e-103,2.5544215124539547e-103,2.5541378454366435e-103,2.553854304381595e-103,2.553570889190959e-103,2.5532875997669926e-103,2.5530044360120616e-103,2.5527213978286405e-103,2.552438485119311e-103,2.5521556977867637e-103,2.551873035733796e-103,2.5515904988633144e-103,2.5513080870783314e-103,2.5510258002819664e-103,2.5507436383774487e-103,2.550461601268111e-103,2.5501796888573964e-103,2.549897901048852e-103,2.549616237746131e-103,2.549334698852997e-103,2.549053284273315e-103,2.54877199391106e-103,2.54849082767031e-103,2.548209785455251e-103,2.547928867170172e-103,2.5476480727194707e-103,2.5473674020076475e-103,2.5470868549393094e-103,2.5468064314191686e-103,2.5465261313520403e-103,2.546245954642847e-103,2.5459659011966137e-103,2.5456859709184703e-103,2.5454061637136525e-103,2.5451264794874975e-103,2.5448469181454497e-103,2.5445674795930535e-103,2.5442881637359604e-103,2.5440089704799235e-103,2.543729899730799e-103,2.543450951394549e-103,2.5431721253772353e-103,2.5428934215850253e-103,2.5426148399241877e-103,2.5423363803010934e-103,2.5420580426222176e-103,2.541779826794137e-103,2.54150173272353e-103,2.5412237603171774e-103,2.540945909481963e-103,2.5406681801248697e-103,2.540390572152985e-103,2.5401130854734956e-103,2.539835719993692e-103,2.539558475620963e-103,2.5392813522628014e-103,2.539004349826798e-103,2.5387274682206464e-103,2.53845070735214e-103,2.538174067129174e-103,2.537897547459742e-103,2.5376211482519384e-103,2.537344869413958e-103,2.537068710854096e-103,2.5367926724807467e-103,2.5365167542024037e-103,2.536240955927661e-103,2.5359652775652114e-103,2.535689719023847e-103,2.5354142802124585e-103,2.535138961040037e-103,2.534863761415671e-103,2.534588681248548e-103,2.534313720447954e-103,2.5340388789232733e-103,2.53376415658399e-103,2.533489553339683e-103,2.533215069100032e-103,2.5329407037748136e-103,2.5326664572739024e-103,2.5323923295072696e-103,2.5321183203849846e-103,2.531844429817215e-103,2.5315706577142227e-103,2.5312970039863693e-103,2.531023468544112e-103,2.5307500512980057e-103,2.5304767521587006e-103,2.5302035710369446e-103,2.5299305078435806e-103,2.5296575624895493e-103,2.5293847348858857e-103,2.5291120249437224e-103,2.5288394325742864e-103,2.5285669576889013e-103,2.5282946001989856e-103,2.5280223600160533e-103,2.527750237051714e-103,2.5274782312176727e-103,2.527206342425728e-103,2.5269345705877744e-103,2.526662915615802e-103,2.526391377421892e-103,2.5261199559182254e-103,2.5258486510170727e-103,2.525577462630801e-103,2.525306390671871e-103,2.525035435052837e-103,2.524764595686348e-103,2.5244938724851453e-103,2.524223265362065e-103,2.523952774230036e-103,2.52368239900208e-103,2.523412139591313e-103,2.523141995910943e-103,2.522871967874272e-103,2.522602055394693e-103,2.5223322583856933e-103,2.5220625767608516e-103,2.5217930104338406e-103,2.521523559318423e-103,2.5212542233284545e-103,2.520985002377884e-103,2.5207158963807505e-103,2.520446905251185e-103,2.5201780289034117e-103,2.5199092672517447e-103,2.5196406202105897e-103,2.519372087694444e-103,2.519103669617896e-103,2.5188353658956245e-103,2.5185671764423997e-103,2.518299101173082e-103,2.5180311400026233e-103,2.517763292846065e-103,2.517495559618539e-103,2.5172279402352686e-103,2.5169604346115656e-103,2.516693042662832e-103,2.5164257643045613e-103,2.5161585994523343e-103,2.5158915480218234e-103,2.515624609928789e-103,2.515357785089082e-103,2.515091073418642e-103,2.5148244748334976e-103,2.5145579892497664e-103,2.5142916165836547e-103,2.5140253567514585e-103,2.513759209669562e-103,2.5134931752544366e-103,2.5132272534226437e-103,2.512961444090832e-103,2.512695747175739e-103,2.5124301625941896e-103,2.5121646902630974e-103,2.5118993300994625e-103,2.5116340820203737e-103,2.511368945943007e-103,2.511103921784626e-103,2.510839009462581e-103,2.51057420889431e-103,2.510309519997338e-103,2.5100449426892766e-103,2.5097804768878243e-103,2.5095161225107676e-103,2.5092518794759764e-103,2.5089877477014106e-103,2.508723727105114e-103,2.508459817605218e-103,2.5081960191199395e-103,2.5079323315675807e-103,2.5076687548665314e-103,2.5074052889352657e-103,2.5071419336923444e-103,2.506878689056412e-103,2.5066155549462007e-103,2.506352531280526e-103,2.5060896179782903e-103,2.5058268149584794e-103,2.5055641221401653e-103,2.505301539442504e-103,2.505039066784737e-103,2.504776704086189e-103,2.5045144512662704e-103,2.5042523082444766e-103,2.503990274940385e-103,2.5037283512736584e-103,2.5034665371640444e-103,2.5032048325313734e-103,2.5029432372955597e-103,2.502681751376601e-103,2.50242037469458e-103,2.5021591071696607e-103,2.5018979487220926e-103,2.5016368992722067e-103,2.5013759587404174e-103,2.501115127047223e-103,2.500854404113204e-103,2.500593789859024e-103,2.500333284205429e-103,2.500072887073247e-103,2.499812598383389e-103,2.4995524180568495e-103,2.499292346014703e-103,2.499032382178107e-103,2.498772526468302e-103,2.498512778806608e-103,2.49825313911443e-103,2.4979936073132514e-103,2.497734183324639e-103,2.4974748670702415e-103,2.4972156584717865e-103,2.4969565574510857e-103,2.4966975639300305e-103,2.4964386778305924e-103,2.4961798990748255e-103,2.495921227584864e-103,2.4956626632829225e-103,2.495404206091296e-103,2.4951458559323607e-103,2.4948876127285725e-103,2.4946294764024685e-103,2.494371446876664e-103,2.4941135240738563e-103,2.4938557079168216e-103,2.493597998328416e-103,2.493340395231576e-103,2.493082898549316e-103,2.492825508204732e-103,2.492568224120998e-103,2.492311046221367e-103,2.492053974429173e-103,2.4917970086678267e-103,2.4915401488608194e-103,2.491283394931721e-103,2.4910267468041794e-103,2.4907702044019216e-103,2.4905137676487537e-103,2.4902574364685587e-103,2.4900012107852996e-103,2.4897450905230164e-103,2.4894890756058277e-103,2.489233165957931e-103,2.4889773615035995e-103,2.4887216621671867e-103,2.488466067873121e-103,2.4882105785459114e-103,2.4879551941101426e-103,2.4876999144904765e-103,2.4874447396116526e-103,2.487189669398489e-103,2.486934703775879e-103,2.4866798426687927e-103,2.4864250860022787e-103,2.486170433701462e-103,2.485915885691543e-103,2.4856614418977996e-103,2.4854071022455863e-103,2.485152866660333e-103,2.4848987350675477e-103,2.484644707392812e-103,2.484390783561786e-103,2.4841369635002043e-103,2.483883247133878e-103,2.4836296343886927e-103,2.4833761251906117e-103,2.4831227194656724e-103,2.482869417139988e-103,2.482616218139748e-103,2.4823631223912146e-103,2.482110129820728e-103,2.4818572403547013e-103,2.481604453919624e-103,2.48135177044206e-103,2.4810991898486483e-103,2.480846712066101e-103,2.4805943370212063e-103,2.480342064640827e-103,2.480089894851899e-103,2.479837827581434e-103,2.4795858627565165e-103,2.4793340003043055e-103,2.479082240152034e-103,2.478830582227009e-103,2.4785790264566114e-103,2.4783275727682953e-103,2.478076221089589e-103,2.4778249713480935e-103,2.4775738234714832e-103,2.4773227773875077e-103,2.4770718330239866e-103,2.4768209903088153e-103,2.4765702491699603e-103,2.476319609535463e-103,2.476069071333436e-103,2.4758186344920643e-103,2.475568298939607e-103,2.4753180646043947e-103,2.4750679314148314e-103,2.474817899299392e-103,2.4745679681866244e-103,2.474318138005149e-103,2.474068408683658e-103,2.473818780150915e-103,2.473569252335756e-103,2.4733198251670884e-103,2.473070498573892e-103,2.472821272485217e-103,2.472572146830186e-103,2.4723231215379934e-103,2.4720741965379035e-103,2.4718253717592523e-103,2.471576647131448e-103,2.4713280225839683e-103,2.4710794980463625e-103,2.4708310734482506e-103,2.4705827487193233e-103,2.4703345237893426e-103,2.4700863985881403e-103,2.4698383730456187e-103,2.469590447091751e-103,2.469342620656579e-103,2.4690948936702176e-103,2.4688472660628494e-103,2.468599737764728e-103,2.468352308706176e-103,2.4681049788175877e-103,2.4678577480294245e-103,2.46761061627222e-103,2.467363583476576e-103,2.467116649573164e-103,2.466869814492724e-103,2.466623078166066e-103,2.4663764405240704e-103,2.466129901497685e-103,2.4658834610179274e-103,2.4656371190158837e-103,2.465390875422709e-103,2.465144730169627e-103,2.4648986831879295e-103,2.4646527344089794e-103,2.4644068837642045e-103,2.4641611311851036e-103,2.4639154766032426e-103,2.4636699199502557e-103,2.4634244611578453e-103,2.4631791001577826e-103,2.462933836881905e-103,2.4626886712621197e-103,2.4624436032304006e-103,2.462198632718789e-103,2.461953759659395e-103,2.4617089839843944e-103,2.4614643056260324e-103,2.46121972451662e-103,2.460975240588536e-103,2.4607308537742266e-103,2.460486564006205e-103,2.4602423712170504e-103,2.4599982753394105e-103,2.459754276305998e-103,2.4595103740495947e-103,2.4592665685030466e-103,2.4590228595992677e-103,2.4587792472712377e-103,2.4585357314520037e-103,2.4582923120746774e-103,2.458048989072439e-103,2.4578057623785323e-103,2.457562631926269e-103,2.457319597649026e-103,2.4570766594802463e-103,2.456833817353439e-103,2.456591071202177e-103,2.456348420960102e-103,2.4561058665609184e-103,2.4558634079383977e-103,2.455621045026376e-103,2.455378777758755e-103,2.455136606069501e-103,2.454894529892647e-103,2.454652549162289e-103,2.454410663812589e-103,2.4541688737777735e-103,2.4539271789921345e-103,2.453685579390028e-103,2.4534440749058746e-103,2.45320266547416e-103,2.4529613510294335e-103,2.45272013150631e-103,2.4524790068394664e-103,2.452237976963647e-103,2.451997041813658e-103,2.4517562013243697e-103,2.451515455430717e-103,2.451274804067699e-103,2.451034247170377e-103,2.450793784673878e-103,2.4505534165133914e-103,2.4503131426241705e-103,2.4500729629415314e-103,2.4498328774008557e-103,2.4495928859375856e-103,2.449352988487228e-103,2.4491131849853525e-103,2.448873475367592e-103,2.448633859569643e-103,2.4483943375272634e-103,2.448154909176275e-103,2.447915574452562e-103,2.447676333292071e-103,2.447437185630812e-103,2.4471981314048573e-103,2.446959170550341e-103,2.44672030300346e-103,2.446481528700472e-103,2.446242847577701e-103,2.4460042595715283e-103,2.4457657646184e-103,2.445527362654823e-103,2.445289053617366e-103,2.445050837442662e-103,2.4448127140674014e-103,2.4445746834283404e-103,2.4443367454622934e-103,2.444098900106139e-103,2.443861147296815e-103,2.443623486971322e-103,2.443385919066722e-103,2.443148443520136e-103,2.442911060268749e-103,2.442673769249805e-103,2.44243657040061e-103,2.4421994636585304e-103,2.4419624489609927e-103,2.441725526245485e-103,2.441488695449557e-103,2.4412519565108165e-103,2.4410153093669337e-103,2.440778753955639e-103,2.440542290214722e-103,2.4403059180820336e-103,2.4400696374954846e-103,2.439833448393046e-103,2.439597350712748e-103,2.4393613443926825e-103,2.439125429370999e-103,2.43888960558591e-103,2.438653872975683e-103,2.43841823147865e-103,2.4381826810331996e-103,2.437947221577781e-103,2.4377118530509027e-103,2.437476575391132e-103,2.437241388537096e-103,2.437006292427481e-103,2.436771287001032e-103,2.4365363721965544e-103,2.436301547952911e-103,2.4360668142090235e-103,2.4358321709038736e-103,2.435597617976501e-103,2.435363155366004e-103,2.4351287830115403e-103,2.434894500852325e-103,2.4346603088276325e-103,2.4344262068767956e-103,2.434192194939205e-103,2.433958272954309e-103,2.433724440861616e-103,2.433490698600691e-103,2.4332570461111567e-103,2.433023483332696e-103,2.432790010205046e-103,2.432556626668006e-103,2.432323332661429e-103,2.432090128125228e-103,2.4318570129993734e-103,2.4316239872238926e-103,2.4313910507388704e-103,2.4311582034844495e-103,2.4309254454008293e-103,2.430692776428267e-103,2.430460196507076e-103,2.430227705577628e-103,2.4299953035803517e-103,2.4297629904557317e-103,2.42953076614431e-103,2.4292986305866854e-103,2.429066583723514e-103,2.4288346254955074e-103,2.428602755843435e-103,2.428370974708122e-103,2.42813928203045e-103,2.427907677751358e-103,2.42767616181184e-103,2.427444734152946e-103,2.4272133947157847e-103,2.4269821434415175e-103,2.4267509802713653e-103,2.4265199051466015e-103,2.4262889180085586e-103,2.426058018798622e-103,2.4258272074582357e-103,2.425596483928897e-103,2.4253658481521605e-103,2.4251353000696347e-103,2.424904839622986e-103,2.424674466753934e-103,2.424444181404254e-103,2.4242139835157774e-103,2.423983873030391e-103,2.4237538498900354e-103,2.4235239140367075e-103,2.423294065412459e-103,2.4230643039593953e-103,2.4228346296196794e-103,2.4226050423355253e-103,2.422375542049206e-103,2.4221461287030454e-103,2.421916802239424e-103,2.421687562600777e-103,2.421458409729593e-103,2.4212293435684165e-103,2.421000364059844e-103,2.4207714711465283e-103,2.420542664771176e-103,2.4203139448765463e-103,2.420085311405456e-103,2.419856764300772e-103,2.4196283035054173e-103,2.419399928962368e-103,2.4191716406146544e-103,2.4189434384053605e-103,2.4187153222776244e-103,2.418487292174637e-103,2.4182593480396417e-103,2.4180314898159387e-103,2.417803717446879e-103,2.417576030875867e-103,2.4173484300463617e-103,2.4171209149018737e-103,2.4168934853859685e-103,2.4166661414422635e-103,2.4164388830144295e-103,2.41621171004619e-103,2.4159846224813217e-103,2.415757620263654e-103,2.415530703337069e-103,2.415303871645502e-103,2.4150771251329396e-103,2.4148504637434225e-103,2.414623887421044e-103,2.4143973961099476e-103,2.4141709897543314e-103,2.413944668298445e-103,2.413718431686591e-103,2.4134922798631225e-103,2.4132662127724465e-103,2.413040230359021e-103,2.4128143325673567e-103,2.4125885193420155e-103,2.4123627906276115e-103,2.4121371463688105e-103,2.4119115865103306e-103,2.411686110996941e-103,2.4114607197734625e-103,2.411235412784768e-103,2.411010189975781e-103,2.410785051291478e-103,2.410559996676884e-103,2.4103350260770787e-103,2.4101101394371905e-103,2.4098853367024006e-103,2.4096606178179403e-103,2.4094359827290924e-103,2.409211431381191e-103,2.4089869637196204e-103,2.4087625796898157e-103,2.408538279237263e-103,2.408314062307501e-103,2.408089928846116e-103,2.407865878798747e-103,2.4076419121110824e-103,2.4074180287288626e-103,2.407194228597877e-103,2.406970511663965e-103,2.4067468778730185e-103,2.406523327170978e-103,2.406299859503834e-103,2.406076474817628e-103,2.4058531730584517e-103,2.405629954172446e-103,2.405406818105802e-103,2.4051837648047614e-103,2.4049607942156146e-103,2.4047379062847024e-103,2.404515100958416e-103,2.4042923781831943e-103,2.404069737905528e-103,2.403847180071956e-103,2.403624704629067e-103,2.4034023115234993e-103,2.4031800007019403e-103,2.4029577721111274e-103,2.4027356256978456e-103,2.402513561408931e-103,2.402291579191267e-103,2.4020696789917884e-103,2.4018478607574764e-103,2.401626124435363e-103,2.4014044699725286e-103,2.4011828973161017e-103,2.4009614064132606e-103,2.400739997211232e-103,2.4005186696572904e-103,2.4002974236987604e-103,2.400076259283014e-103,2.3998551763574717e-103,2.3996341748696035e-103,2.3994132547669264e-103,2.3991924159970067e-103,2.398971658507458e-103,2.398750982245943e-103,2.398530387160173e-103,2.3983098731979055e-103,2.3980894403069466e-103,2.397869088435152e-103,2.397648817530424e-103,2.3974286275407123e-103,2.3972085184140156e-103,2.396988490098379e-103,2.396768542541896e-103,2.3965486756927084e-103,2.3963288894990043e-103,2.39610918390902e-103,2.395889558871039e-103,2.395670014333392e-103,2.3954505502444583e-103,2.3952311665526623e-103,2.395011863206477e-103,2.394792640154423e-103,2.394573497345068e-103,2.394354434727024e-103,2.394135452248954e-103,2.3939165498595654e-103,2.393697727507613e-103,2.393478985141899e-103,2.3932603227112715e-103,2.393041740164626e-103,2.3928232374509047e-103,2.3926048145190956e-103,2.392386471318234e-103,2.392168207797402e-103,2.3919500239057274e-103,2.391731919592384e-103,2.3915138948065935e-103,2.3912959494976215e-103,2.391078083614783e-103,2.390860297107436e-103,2.390642589924987e-103,2.3904249620168873e-103,2.3902074133326346e-103,2.3899899438217716e-103,2.389772553433889e-103,2.3895552421186217e-103,2.38933800982565e-103,2.3891208565047015e-103,2.388903782105548e-103,2.3886867865780084e-103,2.388469869871946e-103,2.38825303193727e-103,2.388036272723935e-103,2.3878195921819406e-103,2.387602990261333e-103,2.3873864669122026e-103,2.3871700220846856e-103,2.3869536557289627e-103,2.38673736779526e-103,2.38652115823385e-103,2.386305026995048e-103,2.386088974029216e-103,2.3858729992867597e-103,2.3856571027181317e-103,2.385441284273826e-103,2.3852255439043854e-103,2.385009881560394e-103,2.384794297192483e-103,2.384578790751326e-103,2.3843633621876443e-103,2.3841480114522e-103,2.3839327384958017e-103,2.383717543269303e-103,2.3835024257236005e-103,2.3832873858096355e-103,2.3830724234783933e-103,2.3828575386809044e-103,2.3826427313682426e-103,2.382428001491526e-103,2.382213349001917e-103,2.381998773850621e-103,2.381784275988888e-103,2.3815698553680127e-103,2.381355511939333e-103,2.381141245654229e-103,2.380927056464128e-103,2.380712944320497e-103,2.3804989091748504e-103,2.380284950978743e-103,2.380071069683775e-103,2.37985726524159e-103,2.379643537603874e-103,2.3794298867223576e-103,2.3792163125488135e-103,2.3790028150350586e-103,2.378789394132953e-103,2.378576049794399e-103,2.3783627819713435e-103,2.378149590615775e-103,2.377936475679726e-103,2.3777234371152723e-103,2.3775104748745313e-103,2.377297588909664e-103,2.377084779172874e-103,2.376872045616409e-103,2.376659388192557e-103,2.376446806853651e-103,2.3762343015520654e-103,2.376021872240217e-103,2.3758095188705657e-103,2.375597241395614e-103,2.3753850397679064e-103,2.375172913940029e-103,2.3749608638646126e-103,2.374748889494328e-103,2.374536990781889e-103,2.3743251676800524e-103,2.374113420141615e-103,2.3739017481194183e-103,2.373690151566344e-103,2.373478630435316e-103,2.3732671846793014e-103,2.373055814251308e-103,2.372844519104385e-103,2.3726332991916257e-103,2.372422154466162e-103,2.3722110848811696e-103,2.3720000903898655e-103,2.3717891709455085e-103,2.3715783265013974e-103,2.371367557010875e-103,2.371156862427323e-103,2.3709462427041664e-103,2.3707356977948713e-103,2.3705252276529437e-103,2.370314832231933e-103,2.3701045114854276e-103,2.369894265367059e-103,2.369684093830499e-103,2.369473996829459e-103,2.3692639743176953e-103,2.369054026249001e-103,2.368844152577212e-103,2.3686343532562057e-103,2.368424628239899e-103,2.368214977482251e-103,2.36800540093726e-103,2.367795898558966e-103,2.3675864703014494e-103,2.367377116118831e-103,2.3671678359652734e-103,2.3669586297949776e-103,2.3667494975621864e-103,2.3665404392211827e-103,2.36633145472629e-103,2.366122544031872e-103,2.365913707092332e-103,2.3657049438621156e-103,2.365496254295706e-103,2.365287638347628e-103,2.365079095972446e-103,2.364870627124765e-103,2.3646622317592297e-103,2.3644539098305246e-103,2.3642456612933737e-103,2.364037486102542e-103,2.3638293842128337e-103,2.3636213555790923e-103,2.363413400156202e-103,2.363205517899086e-103,2.3629977087627076e-103,2.362789972702069e-103,2.362582309672212e-103,2.3623747196282196e-103,2.3621672025252117e-103,2.361959758318349e-103,2.361752386962832e-103,2.3615450884139e-103,2.3613378626268303e-103,2.361130709556942e-103,2.3609236291595916e-103,2.360716621390175e-103,2.3605096862041275e-103,2.360302823556923e-103,2.3600960334040756e-103,2.359889315701136e-103,2.359682670403697e-103,2.3594760974673875e-103,2.359269596847877e-103,2.359063168500873e-103,2.358856812382121e-103,2.3586505284474066e-103,2.3584443166525544e-103,2.3582381769534255e-103,2.3580321093059215e-103,2.357826113665982e-103,2.357620189989584e-103,2.3574143382327443e-103,2.357208558351518e-103,2.357002850301998e-103,2.3567972140403155e-103,2.3565916495226403e-103,2.35638615670518e-103,2.356180735544181e-103,2.3559753859959276e-103,2.3557701080167416e-103,2.355564901562984e-103,2.3553597665910525e-103,2.355154703057383e-103,2.354949710918451e-103,2.354744790130768e-103,2.3545399406508833e-103,2.3543351624353854e-103,2.354130455440899e-103,2.3539258196240885e-103,2.3537212549416536e-103,2.353516761350333e-103,2.353312338806903e-103,2.353107987268176e-103,2.352903706691005e-103,2.3526994970322767e-103,2.3524953582489187e-103,2.352291290297892e-103,2.3520872931361993e-103,2.3518833667208775e-103,2.3516795110090017e-103,2.351475725957684e-103,2.351272011524075e-103,2.3510683676653598e-103,2.3508647943387627e-103,2.350661291501545e-103,2.3504578591110024e-103,2.3502544971244716e-103,2.350051205499323e-103,2.3498479841929656e-103,2.349644833162844e-103,2.34944175236644e-103,2.349238741761273e-103,2.349035801304898e-103,2.3488329309549073e-103,2.3486301306689295e-103,2.34842740040463e-103,2.3482247401197096e-103,2.348022149771908e-103,2.3478196293189985e-103,2.3476171787187933e-103,2.34741479792914e-103,2.347212486907922e-103,2.347010245613059e-103,2.346808074002508e-103,2.346605972034262e-103,2.346403939666348e-103,2.346201976856833e-103,2.3460000835638163e-103,2.345798259745436e-103,2.3455965053598647e-103,2.345394820365311e-103,2.3451932047200204e-103,2.344991658382274e-103,2.344790181310387e-103,2.344588773462713e-103,2.34438743479764e-103,2.3441861652735915e-103,2.3439849648490274e-103,2.343783833482443e-103,2.3435827711323697e-103,2.3433817777573726e-103,2.3431808533160547e-103,2.342979997767053e-103,2.34277921106904e-103,2.342578493180725e-103,2.342377844060851e-103,2.3421772636681973e-103,2.3419767519615775e-103,2.3417763088998415e-103,2.3415759344418745e-103,2.3413756285465957e-103,2.3411753911729606e-103,2.3409752222799593e-103,2.3407751218266163e-103,2.340575089771993e-103,2.340375126075183e-103,2.340175230695318e-103,2.3399754035915623e-103,2.3397756447231155e-103,2.3395759540492125e-103,2.3393763315291233e-103,2.339176777122151e-103,2.3389772907876356e-103,2.33877787248495e-103,2.3385785221735025e-103,2.3383792398127366e-103,2.338180025362129e-103,2.3379808787811916e-103,2.337781800029471e-103,2.3375827890665475e-103,2.337383845852037e-103,2.337184970345588e-103,2.3369861625068854e-103,2.336787422295647e-103,2.3365887496716254e-103,2.336390144594607e-103,2.336191607024412e-103,2.3359931369208967e-103,2.3357947342439487e-103,2.335596398953492e-103,2.3353981310094834e-103,2.3351999303719137e-103,2.3350017970008086e-103,2.334803730856226e-103,2.33460573189826e-103,2.334407800087036e-103,2.3342099353827155e-103,2.334012137745492e-103,2.333814407135593e-103,2.3336167435132813e-103,2.3334191468388514e-103,2.3332216170726327e-103,2.333024154174987e-103,2.3328267581063104e-103,2.3326294288270324e-103,2.332432166297616e-103,2.3322349704785576e-103,2.332037841330387e-103,2.3318407788136673e-103,2.331643782888995e-103,2.3314468535169996e-103,2.3312499906583437e-103,2.331053194273724e-103,2.33085646432387e-103,2.3306598007695437e-103,2.3304632035715407e-103,2.33026667269069e-103,2.3300702080878525e-103,2.329873809723924e-103,2.3296774775598306e-103,2.329481211556534e-103,2.3292850116750276e-103,2.3290888778763365e-103,2.3288928101215204e-103,2.3286968083716715e-103,2.3285008725879137e-103,2.3283050027314044e-103,2.3281091987633337e-103,2.3279134606449244e-103,2.327717788337431e-103,2.327522181802142e-103,2.3273266410003764e-103,2.327131165893488e-103,2.326935756442862e-103,2.326740412609915e-103,2.326545134356098e-103,2.326349921642892e-103,2.326154774431813e-103,2.3259596926844075e-103,2.325764676362254e-103,2.325569725426965e-103,2.3253748398401826e-103,2.3251800195635835e-103,2.3249852645588754e-103,2.3247905747877975e-103,2.3245959502121215e-103,2.3244013907936523e-103,2.3242068964942247e-103,2.324012467275707e-103,2.3238181030999985e-103,2.3236238039290304e-103,2.323429569724767e-103,2.3232354004492024e-103,2.3230412960643637e-103,2.3228472565323097e-103,2.32265328181513e-103,2.322459371874947e-103,2.3222655266739145e-103,2.322071746174217e-103,2.321878030338071e-103,2.321684379127725e-103,2.321490792505459e-103,2.321297270433583e-103,2.3211038128744405e-103,2.320910419790405e-103,2.3207170911438814e-103,2.3205238268973063e-103,2.320330627013148e-103,2.3201374914539045e-103,2.319944420182107e-103,2.319751413160316e-103,2.3195584703511247e-103,2.3193655917171567e-103,2.3191727772210663e-103,2.3189800268255395e-103,2.318787340493293e-103,2.318594718187075e-103,2.318402159869663e-103,2.318209665503868e-103,2.318017235052529e-103,2.317824868478518e-103,2.317632565744738e-103,2.31744032681412e-103,2.3172481516496287e-103,2.317056040214258e-103,2.316863992471033e-103,2.31667200838301e-103,2.316480087913274e-103,2.316288231024942e-103,2.316096437681162e-103,2.3159047078451114e-103,2.3157130414799985e-103,2.315521438549062e-103,2.3153298990155713e-103,2.315138422842826e-103,2.314947009994155e-103,2.3147556604329195e-103,2.3145643741225104e-103,2.314373151026347e-103,2.3141819911078806e-103,2.313990894330593e-103,2.313799860657995e-103,2.3136088900536286e-103,2.313417982481064e-103,2.3132271379039037e-103,2.3130363562857784e-103,2.3128456375903504e-103,2.312654981781311e-103,2.312464388822381e-103,2.312273858677313e-103,2.3120833913098865e-103,2.311892986683913e-103,2.311702644763234e-103,2.3115123655117196e-103,2.3113221488932695e-103,2.3111319948718144e-103,2.310941903411313e-103,2.310751874475756e-103,2.310561908029161e-103,2.310372004035577e-103,2.3101821624590817e-103,2.3099923832637826e-103,2.309802666413817e-103,2.309613011873351e-103,2.30942341960658e-103,2.3092338895777304e-103,2.309044421751056e-103,2.3088550160908405e-103,2.308665672561397e-103,2.3084763911270686e-103,2.3082871717522266e-103,2.308098014401272e-103,2.3079089190386344e-103,2.307719885628773e-103,2.3075309141361766e-103,2.307342004525362e-103,2.307153156760876e-103,2.3069643708072936e-103,2.3067756466292195e-103,2.306586984191286e-103,2.306398383458157e-103,2.3062098443945226e-103,2.306021366965103e-103,2.3058329511346465e-103,2.305644596867931e-103,2.305456304129763e-103,2.305268072884978e-103,2.305079903098439e-103,2.304891794735039e-103,2.304703747759699e-103,2.3045157621373683e-103,2.3043278378330257e-103,2.3041399748116776e-103,2.30395217303836e-103,2.3037644324781363e-103,2.3035767530960986e-103,2.3033891348573685e-103,2.3032015777270944e-103,2.3030140816704545e-103,2.302826646652654e-103,2.3026392726389274e-103,2.3024519595945373e-103,2.302264707484774e-103,2.302077516274957e-103,2.3018903859304324e-103,2.301703316416577e-103,2.3015163076987934e-103,2.3013293597425127e-103,2.301142472513195e-103,2.300955645976328e-103,2.300768880097427e-103,2.3005821748420364e-103,2.300395530175727e-103,2.3002089460640986e-103,2.300022422472779e-103,2.2998359593674223e-103,2.299649556713713e-103,2.299463214477361e-103,2.2992769326241055e-103,2.2990907111197133e-103,2.2989045499299774e-103,2.298718449020721e-103,2.2985324083577925e-103,2.29834642790707e-103,2.2981605076344574e-103,2.2979746475058874e-103,2.2977888474873203e-103,2.2976031075447427e-103,2.29741742764417e-103,2.297231807751645e-103,2.2970462478332362e-103,2.2968607478550417e-103,2.2966753077831856e-103,2.29648992758382e-103,2.2963046072231236e-103,2.296119346667304e-103,2.295934145882594e-103,2.2957490048352545e-103,2.295563923491574e-103,2.2953789018178683e-103,2.295193939780479e-103,2.2950090373457764e-103,2.2948241944801567e-103,2.2946394111500437e-103,2.294454687321889e-103,2.294270022962169e-103,2.294085418037389e-103,2.293900872514081e-103,2.2937163863588036e-103,2.2935319595381415e-103,2.293347592018708e-103,2.293163283767142e-103,2.2929790347501095e-103,2.292794844934303e-103,2.292610714286442e-103,2.292426642773273e-103,2.2922426303615693e-103,2.29205867701813e-103,2.2918747827097813e-103,2.291690947403376e-103,2.2915071710657934e-103,2.29132345366394e-103,2.2911397951647486e-103,2.2909561955351766e-103,2.290772654742211e-103,2.2905891727528637e-103,2.290405749534172e-103,2.290222385053201e-103,2.2900390792770424e-103,2.289855832172813e-103,2.289672643707657e-103,2.2894895138487436e-103,2.2893064425632696e-103,2.2891234298184577e-103,2.288940475581556e-103,2.2887575798198396e-103,2.2885747425006096e-103,2.288391963591193e-103,2.2882092430589433e-103,2.288026580871239e-103,2.287843976995486e-103,2.2876614313991153e-103,2.287478944049584e-103,2.287296514914376e-103,2.287114143961e-103,2.286931831156991e-103,2.2867495764699105e-103,2.286567379867344e-103,2.2863852413169054e-103,2.286203160786232e-103,2.2860211382429893e-103,2.2858391736548657e-103,2.285657266989578e-103,2.2854754182148665e-103,2.285293627298499e-103,2.285111894208267e-103,2.2849302189119894e-103,2.2847486013775106e-103,2.2845670415726986e-103,2.2843855394654494e-103,2.2842040950236823e-103,2.284022708215344e-103,2.283841379008405e-103,2.2836601073708625e-103,2.283478893270738e-103,2.2832977366760795e-103,2.2831166375549603e-103,2.2829355958754773e-103,2.2827546116057544e-103,2.2825736847139406e-103,2.2823928151682093e-103,2.28221200293676e-103,2.2820312479878166e-103,2.2818505502896293e-103,2.281669909810472e-103,2.2814893265186443e-103,2.2813088003824714e-103,2.281128331370303e-103,2.2809479194505144e-103,2.280767564591505e-103,2.280587266761699e-103,2.280407025929548e-103,2.280226842063525e-103,2.280046715132131e-103,2.2798666451038894e-103,2.2796866319473506e-103,2.279506675631088e-103,2.2793267761237007e-103,2.279146933393813e-103,2.278967147410073e-103,2.2787874181411547e-103,2.278607745555755e-103,2.278428129622597e-103,2.278248570310428e-103,2.27806906758802e-103,2.2778896214241693e-103,2.277710231787697e-103,2.277530898647449e-103,2.2773516219722955e-103,2.2771724017311303e-103,2.2769932378928737e-103,2.276814130426468e-103,2.276635079300883e-103,2.2764560844851097e-103,2.2762771459481646e-103,2.27609826365909e-103,2.27591943758695e-103,2.275740667700836e-103,2.2755619539698607e-103,2.2753832963631626e-103,2.275204694849905e-103,2.275026149399273e-103,2.2748476599804785e-103,2.2746692265627566e-103,2.2744908491153665e-103,2.274312527607591e-103,2.2741342620087377e-103,2.2739560522881374e-103,2.2737778984151465e-103,2.2735998003591436e-103,2.273421758089532e-103,2.2732437715757394e-103,2.2730658407872174e-103,2.2728879656934403e-103,2.272710146263908e-103,2.2725323824681424e-103,2.2723546742756916e-103,2.272177021656125e-103,2.271999424579037e-103,2.271821883014046e-103,2.271644396930794e-103,2.271466966298947e-103,2.2712895910881925e-103,2.2711122712682454e-103,2.2709350068088406e-103,2.2707577976797387e-103,2.2705806438507244e-103,2.2704035452916037e-103,2.270226501972208e-103,2.270049513862392e-103,2.269872580932033e-103,2.2696957031510327e-103,2.269518880489315e-103,2.2693421129168294e-103,2.2691654004035473e-103,2.2689887429194633e-103,2.2688121404345953e-103,2.2686355929189853e-103,2.268459100342699e-103,2.2682826626758237e-103,2.268106279888471e-103,2.267929951950776e-103,2.267753678832897e-103,2.2675774605050147e-103,2.2674012969373336e-103,2.2672251881000806e-103,2.267049133963507e-103,2.266873134497886e-103,2.2666971896735143e-103,2.266521299460713e-103,2.266345463829823e-103,2.266169682751211e-103,2.265993956195266e-103,2.2658182841324e-103,2.265642666533047e-103,2.2654671033676644e-103,2.2652915946067335e-103,2.2651161402207573e-103,2.264940740180262e-103,2.2647653944557967e-103,2.2645901030179336e-103,2.264414865837266e-103,2.264239682884413e-103,2.264064554130013e-103,2.2638894795447297e-103,2.263714459099248e-103,2.2635394927642765e-103,2.263364580510546e-103,2.2631897223088094e-103,2.263014918129843e-103,2.262840167944445e-103,2.2626654717234366e-103,2.2624908294376614e-103,2.2623162410579854e-103,2.262141706555297e-103,2.261967225900508e-103,2.2617927990645506e-103,2.2616184260183814e-103,2.2614441067329785e-103,2.261269841179342e-103,2.261095629328496e-103,2.260921471151485e-103,2.260747366619376e-103,2.2605733157032596e-103,2.260399318374248e-103,2.260225374603475e-103,2.2600514843620973e-103,2.2598776476212933e-103,2.2597038643522644e-103,2.2595301345262333e-103,2.259356458114445e-103,2.259182835088167e-103,2.2590092654186886e-103,2.2588357490773206e-103,2.258662286035397e-103,2.258488876264273e-103,2.258315519735326e-103,2.2581422164199553e-103,2.257968966289582e-103,2.25779576931565e-103,2.2576226254696234e-103,2.2574495347229895e-103,2.257276497047258e-103,2.257103512413958e-103,2.256930580794643e-103,2.2567577021608875e-103,2.256584876484287e-103,2.256412103736459e-103,2.256239383889044e-103,2.2560667169137023e-103,2.2558941027821176e-103,2.2557215414659933e-103,2.255549032937057e-103,2.2553765771670556e-103,2.2552041741277587e-103,2.255031823790957e-103,2.254859526128464e-103,2.2546872811121123e-103,2.2545150887137593e-103,2.2543429489052804e-103,2.2541708616585753e-103,2.253998826945563e-103,2.253826844738186e-103,2.253654915008406e-103,2.2534830377282083e-103,2.2533112128695977e-103,2.253139440404601e-103,2.2529677203052667e-103,2.2527960525436646e-103,2.2526244370918856e-103,2.252452873922041e-103,2.2522813630062646e-103,2.252109904316711e-103,2.2519384978255556e-103,2.251767143504995e-103,2.2515958413272475e-103,2.251424591264553e-103,2.2512533932891703e-103,2.251082247373382e-103,2.25091115348949e-103,2.2507401116098175e-103,2.250569121706709e-103,2.250398183752531e-103,2.250227297719669e-103,2.2500564635805307e-103,2.2498856813075445e-103,2.2497149508731594e-103,2.2495442722498457e-103,2.249373645410095e-103,2.249203070326419e-103,2.24903254697135e-103,2.2488620753174424e-103,2.24869165533727e-103,2.248521287003428e-103,2.248350970288533e-103,2.248180705165221e-103,2.24801049160615e-103,2.247840329583997e-103,2.247670219071462e-103,2.2475001600412637e-103,2.2473301524661425e-103,2.2471601963188586e-103,2.246990291572194e-103,2.2468204381989504e-103,2.246650636171949e-103,2.2464808854640345e-103,2.2463111860480696e-103,2.246141537896938e-103,2.2459719409835445e-103,2.245802395280814e-103,2.2456329007616914e-103,2.2454634573991424e-103,2.2452940651661535e-103,2.2451247240357315e-103,2.244955433980902e-103,2.2447861949747137e-103,2.2446170069902333e-103,2.2444478700005483e-103,2.2442787839787676e-103,2.2441097488980185e-103,2.2439407647314506e-103,2.243771831452232e-103,2.243602949033552e-103,2.2434341174486194e-103,2.2432653366706636e-103,2.243096606672934e-103,2.242927927428701e-103,2.242759298911253e-103,2.2425907210939e-103,2.242422193949972e-103,2.242253717452819e-103,2.2420852915758103e-103,2.2419169162923365e-103,2.241748591575807e-103,2.241580317399651e-103,2.2414120937373195e-103,2.241243920562281e-103,2.2410757978480254e-103,2.240907725568062e-103,2.24073970369592e-103,2.240571732205149e-103,2.240403811069318e-103,2.240235940262015e-103,2.240068119756849e-103,2.2399003495274484e-103,2.239732629547461e-103,2.2395649597905547e-103,2.239397340230417e-103,2.2392297708407545e-103,2.2390622515952953e-103,2.2388947824677846e-103,2.2387273634319893e-103,2.238559994461695e-103,2.238392675530706e-103,2.2382254066128496e-103,2.2380581876819677e-103,2.2378910187119257e-103,2.237723899676607e-103,2.2375568305499144e-103,2.23738981130577e-103,2.237222841918117e-103,2.237055922360915e-103,2.2368890526081465e-103,2.23672223263381e-103,2.236555462411927e-103,2.2363887419165355e-103,2.236222071121694e-103,2.2360554500014795e-103,2.23588887852999e-103,2.235722356681341e-103,2.235555884429668e-103,2.235389461749126e-103,2.23522308861389e-103,2.2350567649981515e-103,2.234890490876124e-103,2.234724266222039e-103,2.234558091010147e-103,2.234391965214718e-103,2.234225888810041e-103,2.2340598617704243e-103,2.233893884070195e-103,2.2337279556837e-103,2.2335620765853033e-103,2.2333962467493904e-103,2.233230466150365e-103,2.233064734762648e-103,2.2328990525606825e-103,2.2327334195189275e-103,2.232567835611863e-103,2.232402300813987e-103,2.2322368150998164e-103,2.2320713784438877e-103,2.231905990820755e-103,2.2317406522049925e-103,2.231575362571193e-103,2.231410121893967e-103,2.2312449301479457e-103,2.2310797873077772e-103,2.2309146933481298e-103,2.2307496482436894e-103,2.230584651969161e-103,2.2304197044992692e-103,2.2302548058087562e-103,2.2300899558723827e-103,2.229925154664929e-103,2.2297604021611935e-103,2.2295956983359939e-103,2.229431043164165e-103,2.2292664366205618e-103,2.229101878680056e-103,2.2289373693175405e-103,2.2287729085079243e-103,2.2286084962261362e-103,2.2284441324471225e-103,2.228279817145849e-103,2.2281155502972997e-103,2.2279513318764771e-103,2.2277871618584014e-103,2.227623040218112e-103,2.2274589669306656e-103,2.2272949419711395e-103,2.2271309653146269e-103,2.2269670369362402e-103,2.2268031568111106e-103,2.2266393249143875e-103,2.2264755412212375e-103,2.2263118057068474e-103,2.2261481183464204e-103,2.2259844791151792e-103,2.2258208879883634e-103,2.2256573449412319e-103,2.2254938499490614e-103,2.225330402987147e-103,2.225167004030802e-103,2.225003653055357e-103,2.2248403500361613e-103,2.2246770949485825e-103,2.2245138877680055e-103,2.2243507284698346e-103,2.2241876170294907e-103,2.224024553422414e-103,2.2238615376240611e-103,2.2236985696099082e-103,2.2235356493554487e-103,2.2233727768361937e-103,2.223209952027673e-103,2.223047174905433e-103,2.2228844454450403e-103,2.222721763622077e-103,2.2225591294121443e-103,2.222396542790861e-103,2.2222340037338633e-103,2.2220715122168065e-103,2.221909068215362e-103,2.2217466717052203e-103,2.221584322662089e-103,2.2214220210616936e-103,2.2212597668797773e-103,2.2210975600921013e-103,2.220935400674444e-103,2.2207732886026023e-103,2.2206112238523893e-103,2.2204492063996369e-103,2.2202872362201951e-103,2.2201253132899299e-103,2.2199634375847261e-103,2.2198016090804862e-103,2.2196398277531293e-103,2.2194780935785925e-103,2.219316406532831e-103,2.2191547665918168e-103,2.2189931737315394e-103,2.218831627928006e-103,2.218670129157242e-103,2.2185086773952886e-103,2.2183472726182057e-103,2.21818591480207e-103,2.218024603922977e-103,2.2178633399570363e-103,2.2177021228803792e-103,2.2175409526691506e-103,2.2173798292995152e-103,2.2172187527476532e-103,2.2170577229897637e-103,2.216896740002062e-103,2.2167358037607812e-103,2.2165749142421719e-103,2.2164140714225008e-103,2.2162532752780527e-103,2.21609252578513e-103,2.2159318229200508e-103,2.2157711666591518e-103,2.215610556978787e-103,2.2154499938553253e-103,2.2152894772651557e-103,2.2151290071846826e-103,2.214968583590327e-103,2.214808206458529e-103,2.2146478757657436e-103,2.214487591488444e-103,2.2143273536031204e-103,2.2141671620862796e-103,2.2140070169144452e-103,2.2138469180641592e-103,2.213686865511979e-103,2.213526859234479e-103,2.2133668992082512e-103,2.2132069854099047e-103,2.2130471178160647e-103,2.212887296403374e-103,2.212727521148492e-103,2.2125677920280947e-103,2.2124081090188746e-103,2.2122484720975423e-103,2.2120888812408245e-103,2.211929336425464e-103,2.2117698376282218e-103,2.2116103848258742e-103,2.2114509779952146e-103,2.2112916171130545e-103,2.2111323021562203e-103,2.210973033101556e-103,2.210813809925922e-103,2.2106546326061954e-103,2.2104955011192704e-103,2.2103364154420571e-103,2.2101773755514827e-103,2.21001838142449e-103,2.2098594330380408e-103,2.2097005303691106e-103,2.2095416733946933e-103,2.2093828620917989e-103,2.209224096437453e-103,2.2090653764086996e-103,2.208906701982597e-103,2.208748073136222e-103,2.2085894898466663e-103,2.2084309520910395e-103,2.2082724598464653e-103,2.2081140130900866e-103,2.2079556117990613e-103,2.2077972559505631e-103,2.2076389455217834e-103,2.207480680489929e-103,2.2073224608322235e-103,2.2071642865259064e-103,2.2070061575482343e-103,2.206848073876479e-103,2.2066900354879296e-103,2.2065320423598903e-103,2.206374094469683e-103,2.2062161917946449e-103,2.2060583343121292e-103,2.205900521999506e-103,2.205742754834162e-103,2.205585032793498e-103,2.2054273558549326e-103,2.2052697239959008e-103,2.2051121371938532e-103,2.2049545954262562e-103,2.2047970986705926e-103,2.2046396469043612e-103,2.2044822401050765e-103,2.2043248782502702e-103,2.2041675613174897e-103,2.204010289284296e-103,2.2038530621282706e-103,2.203695879827007e-103,2.203538742358117e-103,2.203381649699227e-103,2.2032246018279797e-103,2.2030675987220349e-103,2.2029106403590663e-103,2.2027537267167653e-103,2.2025968577728383e-103,2.2024400335050073e-103,2.202283253891011e-103,2.2021265189086037e-103,2.2019698285355546e-103,2.2018131827496504e-103,2.2016565815286918e-103,2.2015000248504966e-103,2.201343512692898e-103,2.201187045033745e-103,2.2010306218509015e-103,2.2008742431222482e-103,2.2007179088256817e-103,2.200561618939113e-103,2.20040537344047e-103,2.2002491723076957e-103,2.2000930155187488e-103,2.1999369030516033e-103,2.19978083488425e-103,2.199624810994694e-103,2.1994688313609566e-103,2.1993128959610753e-103,2.1991570047731013e-103,2.199001157775103e-103,2.1988453549451642e-103,2.198689596261384e-103,2.1985338817018766e-103,2.198378211244772e-103,2.1982225848682153e-103,2.1980670025503679e-103,2.1979114642694068e-103,2.1977559700035224e-103,2.1976005197309233e-103,2.1974451134298319e-103,2.1972897510784856e-103,2.197134432655139e-103,2.1969791581380594e-103,2.1968239275055322e-103,2.1966687407358567e-103,2.196513597807348e-103,2.1963584986983352e-103,2.196203443387165e-103,2.1960484318521973e-103,2.1958934640718084e-103,2.19573854002439e-103,2.1955836596883482e-103,2.1954288230421047e-103,2.195274030064096e-103,2.1951192807327757e-103,2.19496457502661e-103,2.1948099129240817e-103,2.1946552944036882e-103,2.1945007194439425e-103,2.194346188023373e-103,2.1941917001205224e-103,2.1940372557139485e-103,2.193882854782225e-103,2.1937284973039405e-103,2.1935741832576977e-103,2.1934199126221157e-103,2.1932656853758279e-103,2.1931115014974822e-103,2.1929573609657426e-103,2.192803263759288e-103,2.1926492098568108e-103,2.1924951992370202e-103,2.1923412318786396e-103,2.192187307760407e-103,2.1920334268610759e-103,2.1918795891594145e-103,2.1917257946342058e-103,2.1915720432642478e-103,2.1914183350283528e-103,2.1912646699053494e-103,2.1911110478740795e-103,2.190957468913401e-103,2.1908039330021853e-103,2.19065044011932e-103,2.1904969902437061e-103,2.1903435833542613e-103,2.1901902194299158e-103,2.1900368984496165e-103,2.1898836203923237e-103,2.1897303852370129e-103,2.1895771929626744e-103,2.1894240435483132e-103,2.1892709369729487e-103,2.1891178732156154e-103,2.188964852255362e-103,2.188811874071252e-103,2.1886589386423641e-103,2.1885060459477905e-103,2.1883531959666387e-103,2.188200388678031e-103,2.188047624061104e-103,2.1878949020950086e-103,2.1877422227589102e-103,2.1875895860319894e-103,2.1874369918934412e-103,2.1872844403224742e-103,2.1871319312983127e-103,2.1869794648001948e-103,2.1868270408073726e-103,2.186674659299114e-103,2.1865223202547e-103,2.1863700236534273e-103,2.186217769474606e-103,2.186065557697561e-103,2.1859133883016313e-103,2.1857612612661707e-103,2.1856091765705474e-103,2.1854571341941436e-103,2.1853051341163554e-103,2.185153176316595e-103,2.1850012607742864e-103,2.1848493874688708e-103,2.1846975563798005e-103,2.1845457674865447e-103,2.1843940207685853e-103,2.1842423162054193e-103,2.1840906537765576e-103,2.1839390334615248e-103,2.1837874552398614e-103,2.1836359190911202e-103,2.1834844249948692e-103,2.1833329729306896e-103,2.1831815628781783e-103,2.1830301948169455e-103,2.1828788687266153e-103,2.1827275845868267e-103,2.1825763423772312e-103,2.1824251420774965e-103,2.182273983667303e-103,2.1821228671263456e-103,2.1819717924343332e-103,2.1818207595709881e-103,2.1816697685160487e-103,2.1815188192492646e-103,2.1813679117504019e-103,2.1812170459992386e-103,2.1810662219755683e-103,2.1809154396591978e-103,2.1807646990299484e-103,2.180614000067654e-103,2.180463342752164e-103,2.1803127270633413e-103,2.1801621529810627e-103,2.1800116204852175e-103,2.1798611295557113e-103,2.1797106801724616e-103,2.1795602723154013e-103,2.1794099059644755e-103,2.1792595810996444e-103,2.1791092977008818e-103,2.1789590557481747e-103,2.178808855221525e-103,2.1786586961009468e-103,2.1785085783664695e-103,2.1783585019981355e-103,2.1782084669760008e-103,2.1780584732801353e-103,2.1779085208906236e-103,2.177758609787562e-103,2.1776087399510623e-103,2.1774589113612496e-103,2.1773091239982617e-103,2.1771593778422514e-103,2.1770096728733842e-103,2.1768600090718388e-103,2.1767103864178095e-103,2.176560804891502e-103,2.1764112644731373e-103,2.1762617651429486e-103,2.1761123068811835e-103,2.1759628896681033e-103,2.1758135134839826e-103,2.1756641783091092e-103,2.1755148841237844e-103,2.1753656309083235e-103,2.175216418643056e-103,2.1750672473083225e-103,2.1749181168844797e-103,2.1747690273518965e-103,2.174619978690955e-103,2.1744709708820512e-103,2.1743220039055953e-103,2.1741730777420093e-103,2.1740241923717293e-103,2.1738753477752053e-103,2.1737265439328997e-103,2.17357778082529e-103,2.1734290584328648e-103,2.1732803767361277e-103,2.173131735715595e-103,2.1729831353517965e-103,2.1728345756252753e-103,2.1726860565165867e-103,2.172537578006302e-103,2.1723891400750027e-103,2.1722407427032855e-103,2.1720923858717604e-103,2.171944069561049e-103,2.171795793751788e-103,2.1716475584246256e-103,2.171499363560225e-103,2.171351209139261e-103,2.1712030951424226e-103,2.171055021550412e-103,2.1709069883439435e-103,2.1707589955037458e-103,2.1706110430105594e-103,2.1704631308451397e-103,2.170315258988254e-103,2.1701674274206821e-103,2.1700196361232187e-103,2.1698718850766704e-103,2.1697241742618568e-103,2.1695765036596105e-103,2.169428873250778e-103,2.169281283016218e-103,2.1691337329368025e-103,2.1689862229934166e-103,2.1688387531669584e-103,2.1686913234383385e-103,2.1685439337884811e-103,2.1683965841983236e-103,2.168249274648815e-103,2.1681020051209183e-103,2.1679547755956103e-103,2.167807586053878e-103,2.167660436476724e-103,2.1675133268451625e-103,2.1673662571402214e-103,2.1672192273429397e-103,2.167072237434371e-103,2.1669252873955822e-103,2.1667783772076504e-103,2.1666315068516682e-103,2.16648467630874e-103,2.1663378855599825e-103,2.1661911345865255e-103,2.166044423369513e-103,2.1658977518900988e-103,2.1657511201294528e-103,2.1656045280687553e-103,2.1654579756892e-103,2.1653114629719933e-103,2.1651649898983548e-103,2.1650185564495163e-103,2.1648721626067224e-103,2.16472580835123e-103,2.1645794936643096e-103,2.1644332185272436e-103,2.1642869829213273e-103,2.1641407868278683e-103,2.163994630228187e-103,2.1638485131036172e-103,2.1637024354355045e-103,2.1635563972052066e-103,2.1634103983940947e-103,2.1632644389835526e-103,2.1631185189549757e-103,2.1629726382897735e-103,2.1628267969693657e-103,2.1626809949751875e-103,2.1625352322886842e-103,2.1623895088913144e-103,2.1622438247645495e-103,2.1620981798898726e-103,2.1619525742487805e-103,2.1618070078227815e-103,2.1616614805933962e-103,2.1615159925421583e-103,2.1613705436506137e-103,2.161225133900321e-103,2.1610797632728505e-103,2.1609344317497851e-103,2.1607891393127208e-103,2.160643885943265e-103,2.1604986716230376e-103,2.1603534963336719e-103,2.1602083600568122e-103,2.160063262774116e-103,2.159918204467253e-103,2.1597731851179043e-103,2.159628204707765e-103,2.1594832632185404e-103,2.1593383606319498e-103,2.1591934969297245e-103,2.1590486720936071e-103,2.1589038861053533e-103,2.1587591389467307e-103,2.1586144305995198e-103,2.1584697610455114e-103,2.158325130266511e-103,2.1581805382443347e-103,2.158035984960811e-103,2.157891470397781e-103,2.1577469945370976e-103,2.1576025573606263e-103,2.1574581588502436e-103,2.1573137989878397e-103,2.1571694777553159e-103,2.1570251951345854e-103,2.1568809511075745e-103,2.156736745656221e-103,2.1565925787624748e-103,2.1564484504082972e-103,2.1563043605756627e-103,2.1561603092465575e-103,2.1560162964029795e-103,2.1558723220269394e-103,2.155728386100458e-103,2.1555844886055703e-103,2.1554406295243225e-103,2.1552968088387722e-103,2.15515302653099e-103,2.1550092825830575e-103,2.1548655769770685e-103,2.1547219096951296e-103,2.154578280719358e-103,2.1544346900318838e-103],"x":[1.0e300,1.999300299880048e304,3.998500599760096e304,5.997700899640144e304,7.996901199520192e304,9.99610149940024e304,1.1995301799280287e305,1.3994502099160336e305,1.5993702399040384e305,1.7992902698920432e305,1.999210299880048e305,2.199130329868053e305,2.3990503598560575e305,2.5989703898440625e305,2.798890419832067e305,2.998810449820072e305,3.198730479808077e305,3.3986505097960815e305,3.5985705397840865e305,3.7984905697720915e305,3.998410599760096e305,4.198330629748101e305,4.398250659736106e305,4.59817068972411e305,4.798090719712115e305,4.99801074970012e305,5.197930779688125e305,5.397850809676129e305,5.5977708396641344e305,5.7976908696521394e305,5.997610899640144e305,6.197530929628149e305,6.397450959616154e305,6.597370989604159e305,6.797291019592163e305,6.997211049580168e305,7.197131079568173e305,7.397051109556177e305,7.596971139544183e305,7.796891169532187e305,7.996811199520192e305,8.196731229508197e305,8.396651259496202e305,8.596571289484206e305,8.796491319472212e305,8.996411349460216e305,9.19633137944822e305,9.396251409436226e305,9.59617143942423e305,9.796091469412234e305,9.99601149940024e305,1.0195931529388245e306,1.039585155937625e306,1.0595771589364255e306,1.0795691619352259e306,1.0995611649340265e306,1.1195531679328269e306,1.1395451709316273e306,1.1595371739304279e306,1.1795291769292283e306,1.1995211799280287e306,1.2195131829268293e306,1.2395051859256297e306,1.2594971889244302e306,1.2794891919232307e306,1.2994811949220312e306,1.3194731979208318e306,1.3394652009196322e306,1.3594572039184326e306,1.3794492069172332e306,1.3994412099160336e306,1.419433212914834e306,1.4394252159136346e306,1.4594172189124352e306,1.4794092219112355e306,1.499401224910036e306,1.5193932279088366e306,1.539385230907637e306,1.5593772339064375e306,1.579369236905238e306,1.5993612399040383e306,1.619353242902839e306,1.6393452459016395e306,1.6593372489004397e306,1.6793292518992403e306,1.699321254898041e306,1.7193132578968412e306,1.7393052608956418e306,1.7592972638944423e306,1.7792892668932426e306,1.7992812698920432e306,1.8192732728908438e306,1.839265275889644e306,1.8592572788884446e306,1.8792492818872452e306,1.8992412848860455e306,1.919233287884846e306,1.9392252908836466e306,1.959217293882447e306,1.9792092968812475e306,1.999201299880048e306,2.0191933028788486e306,2.039185305877649e306,2.0591773088764495e306,2.07916931187525e306,2.0991613148740503e306,2.119153317872851e306,2.1391453208716515e306,2.1591373238704518e306,2.1791293268692523e306,2.199121329868053e306,2.2191133328668532e306,2.2391053358656538e306,2.2590973388644544e306,2.2790893418632546e306,2.2990813448620552e306,2.3190733478608558e306,2.339065350859656e306,2.3590573538584566e306,2.3790493568572572e306,2.3990413598560575e306,2.419033362854858e306,2.4390253658536586e306,2.459017368852459e306,2.4790093718512595e306,2.49900137485006e306,2.5189933778488603e306,2.538985380847661e306,2.5589773838464615e306,2.5789693868452618e306,2.5989613898440624e306,2.618953392842863e306,2.6389453958416635e306,2.6589373988404638e306,2.6789294018392644e306,2.698921404838065e306,2.7189134078368652e306,2.7389054108356658e306,2.7588974138344664e306,2.7788894168332666e306,2.7988814198320672e306,2.818873422830868e306,2.838865425829668e306,2.8588574288284683e306,2.878849431827269e306,2.8988414348260695e306,2.9188334378248704e306,2.9388254408236707e306,2.958817443822471e306,2.978809446821272e306,2.998801449820072e306,3.0187934528188724e306,3.038785455817673e306,3.0587774588164735e306,3.078769461815274e306,3.0987614648140747e306,3.118753467812875e306,3.138745470811675e306,3.158737473810476e306,3.1787294768092764e306,3.1987214798080766e306,3.2187134828068775e306,3.238705485805678e306,3.258697488804478e306,3.278689491803279e306,3.298681494802079e306,3.3186734978008795e306,3.3386655007996804e306,3.3586575037984807e306,3.378649506797281e306,3.398641509796082e306,3.418633512794882e306,3.4386255157936824e306,3.458617518792483e306,3.4786095217912835e306,3.498601524790084e306,3.5185935277888847e306,3.538585530787685e306,3.558577533786485e306,3.578569536785286e306,3.5985615397840864e306,3.6185535427828866e306,3.6385455457816875e306,3.658537548780488e306,3.678529551779288e306,3.698521554778089e306,3.718513557776889e306,3.7385055607756895e306,3.7584975637744904e306,3.7784895667732907e306,3.798481569772091e306,3.818473572770892e306,3.838465575769692e306,3.8584575787684924e306,3.878449581767293e306,3.8984415847660935e306,3.918433587764894e306,3.938425590763695e306,3.958417593762495e306,3.978409596761295e306,3.998401599760096e306,4.0183936027588964e306,4.0383856057576967e306,4.0583776087564975e306,4.078369611755298e306,4.098361614754099e306,4.118353617752899e306,4.138345620751699e306,4.1583376237505e306,4.1783296267493004e306,4.1983216297481007e306,4.2183136327469016e306,4.238305635745702e306,4.258297638744502e306,4.278289641743303e306,4.298281644742103e306,4.3182736477409035e306,4.3382656507397044e306,4.358257653738505e306,4.378249656737305e306,4.398241659736106e306,4.418233662734906e306,4.4382256657337064e306,4.458217668732507e306,4.4782096717313076e306,4.498201674730108e306,4.518193677728909e306,4.538185680727709e306,4.558177683726509e306,4.57816968672531e306,4.5981616897241104e306,4.6181536927229107e306,4.6381456957217116e306,4.658137698720512e306,4.678129701719312e306,4.698121704718113e306,4.718113707716913e306,4.7381057107157135e306,4.7580977137145144e306,4.778089716713315e306,4.798081719712115e306,4.818073722710916e306,4.838065725709716e306,4.8580577287085164e306,4.878049731707317e306,4.8980417347061176e306,4.918033737704918e306,4.938025740703719e306,4.958017743702519e306,4.978009746701319e306,4.99800174970012e306,5.0179937526989204e306,5.0379857556977207e306,5.0579777586965216e306,5.077969761695322e306,5.097961764694122e306,5.117953767692923e306,5.137945770691723e306,5.1579377736905235e306,5.1779297766893244e306,5.197921779688125e306,5.2179137826869256e306,5.237905785685726e306,5.257897788684526e306,5.277889791683327e306,5.297881794682127e306,5.3178737976809276e306,5.3378658006797285e306,5.357857803678529e306,5.377849806677329e306,5.39784180967613e306,5.41783381267493e306,5.4378258156737304e306,5.4578178186725313e306,5.4778098216713316e306,5.497801824670132e306,5.517793827668933e306,5.537785830667733e306,5.557777833666533e306,5.577769836665334e306,5.5977618396641344e306,5.617753842662935e306,5.637745845661736e306,5.657737848660536e306,5.677729851659336e306,5.697721854658136e306,5.717713857656937e306,5.737705860655738e306,5.757697863654538e306,5.777689866653339e306,5.797681869652139e306,5.817673872650939e306,5.837665875649741e306,5.857657878648541e306,5.877649881647341e306,5.897641884646142e306,5.917633887644942e306,5.937625890643742e306,5.957617893642544e306,5.977609896641344e306,5.997601899640144e306,6.017593902638944e306,6.037585905637745e306,6.057577908636545e306,6.077569911635347e306,6.097561914634147e306,6.117553917632947e306,6.137545920631747e306,6.157537923630548e306,6.177529926629348e306,6.197521929628149e306,6.21751393262695e306,6.23750593562575e306,6.25749793862455e306,6.27748994162335e306,6.297481944622151e306,6.317473947620952e306,6.337465950619752e306,6.357457953618553e306,6.377449956617353e306,6.397441959616153e306,6.417433962614954e306,6.437425965613755e306,6.457417968612555e306,6.477409971611356e306,6.497401974610156e306,6.517393977608956e306,6.537385980607756e306,6.557377983606558e306,6.577369986605358e306,6.597361989604158e306,6.617353992602959e306,6.637345995601759e306,6.657337998600559e306,6.677330001599361e306,6.697322004598161e306,6.717314007596961e306,6.737306010595762e306,6.757298013594562e306,6.777290016593362e306,6.797282019592164e306,6.817274022590964e306,6.837266025589764e306,6.857258028588564e306,6.877250031587365e306,6.897242034586165e306,6.917234037584967e306,6.937226040583767e306,6.957218043582567e306,6.977210046581367e306,6.997202049580168e306,7.017194052578969e306,7.037186055577769e306,7.05717805857657e306,7.07717006157537e306,7.09716206457417e306,7.11715406757297e306,7.137146070571772e306,7.157138073570572e306,7.177130076569372e306,7.197122079568173e306,7.217114082566973e306,7.237106085565773e306,7.257098088564575e306,7.277090091563375e306,7.297082094562175e306,7.317074097560976e306,7.337066100559776e306,7.357058103558576e306,7.377050106557378e306,7.397042109556178e306,7.417034112554978e306,7.437026115553778e306,7.457018118552579e306,7.477010121551379e306,7.49700212455018e306,7.516994127548981e306,7.536986130547781e306,7.556978133546581e306,7.576970136545382e306,7.596962139544182e306,7.616954142542983e306,7.636946145541784e306,7.656938148540584e306,7.676930151539384e306,7.696922154538184e306,7.716914157536985e306,7.736906160535786e306,7.756898163534587e306,7.776890166533387e306,7.796882169532187e306,7.816874172530987e306,7.836866175529788e306,7.856858178528589e306,7.87685018152739e306,7.89684218452619e306,7.91683418752499e306,7.93682619052379e306,7.95681819352259e306,7.976810196521392e306,7.996802199520192e306,8.016794202518993e306,8.036786205517793e306,8.056778208516593e306,8.076770211515393e306,8.096762214514195e306,8.116754217512995e306,8.136746220511795e306,8.156738223510596e306,8.176730226509396e306,8.196722229508197e306,8.216714232506998e306,8.236706235505798e306,8.256698238504598e306,8.276690241503398e306,8.296682244502199e306,8.316674247501e306,8.3366662504998e306,8.356658253498601e306,8.376650256497401e306,8.396642259496201e306,8.416634262495002e306,8.436626265493803e306,8.456618268492603e306,8.476610271491404e306,8.496602274490204e306,8.516594277489004e306,8.536586280487804e306,8.556578283486606e306,8.576570286485406e306,8.596562289484207e306,8.616554292483007e306,8.636546295481807e306,8.656538298480607e306,8.676530301479409e306,8.696522304478209e306,8.71651430747701e306,8.73650631047581e306,8.75649831347461e306,8.77649031647341e306,8.796482319472212e306,8.816474322471012e306,8.836466325469812e306,8.856458328468613e306,8.876450331467413e306,8.896442334466213e306,8.916434337465015e306,8.936426340463815e306,8.956418343462615e306,8.976410346461415e306,8.996402349460216e306,9.016394352459016e306,9.036386355457817e306,9.056378358456618e306,9.076370361455418e306,9.096362364454218e306,9.116354367453019e306,9.136346370451819e306,9.15633837345062e306,9.17633037644942e306,9.196322379448221e306,9.216314382447021e306,9.236306385445821e306,9.256298388444622e306,9.276290391443423e306,9.296282394442223e306,9.316274397441024e306,9.336266400439824e306,9.356258403438624e306,9.376250406437426e306,9.396242409436226e306,9.416234412435026e306,9.436226415433827e306,9.456218418432627e306,9.476210421431427e306,9.496202424430229e306,9.516194427429029e306,9.536186430427829e306,9.55617843342663e306,9.57617043642543e306,9.59616243942423e306,9.616154442423031e306,9.636146445421832e306,9.656138448420632e306,9.676130451419432e306,9.696122454418233e306,9.716114457417033e306,9.736106460415834e306,9.756098463414635e306,9.776090466413435e306,9.796082469412235e306,9.816074472411035e306,9.836066475409836e306,9.856058478408637e306,9.876050481407437e306,9.896042484406238e306,9.916034487405038e306,9.936026490403838e306,9.956018493402639e306,9.97601049640144e306,9.99600249940024e306,1.001599450239904e307,1.0035986505397841e307,1.0055978508396641e307,1.0075970511395441e307,1.0095962514394243e307,1.0115954517393043e307,1.0135946520391843e307,1.0155938523390644e307,1.0175930526389444e307,1.0195922529388244e307,1.0215914532387046e307,1.0235906535385846e307,1.0255898538384646e307,1.0275890541383447e307,1.0295882544382247e307,1.0315874547381047e307,1.0335866550379849e307,1.0355858553378649e307,1.0375850556377449e307,1.039584255937625e307,1.041583456237505e307,1.043582656537385e307,1.0455818568372651e307,1.0475810571371452e307,1.0495802574370252e307,1.0515794577369052e307,1.0535786580367853e307,1.0555778583366654e307,1.0575770586365454e307,1.0595762589364255e307,1.0615754592363055e307,1.0635746595361855e307,1.0655738598360655e307,1.0675730601359457e307,1.0695722604358257e307,1.0715714607357057e307,1.0735706610355858e307,1.0755698613354658e307,1.0775690616353458e307,1.079568261935226e307,1.081567462235106e307,1.083566662534986e307,1.085565862834866e307,1.0875650631347461e307,1.0895642634346261e307,1.0915634637345063e307,1.0935626640343863e307,1.0955618643342663e307,1.0975610646341463e307,1.0995602649340264e307,1.1015594652339064e307,1.1035586655337865e307,1.1055578658336666e307,1.1075570661335466e307,1.1095562664334266e307,1.1115554667333067e307,1.1135546670331867e307,1.1155538673330668e307,1.1175530676329469e307,1.1195522679328269e307,1.1215514682327069e307,1.123550668532587e307,1.125549868832467e307,1.127549069132347e307,1.1295482694322271e307,1.1315474697321072e307,1.1335466700319872e307,1.1355458703318672e307,1.1375450706317473e307,1.1395442709316273e307,1.1415434712315073e307,1.1435426715313873e307,1.1455418718312676e307,1.1475410721311476e307,1.1495402724310277e307,1.1515394727309077e307,1.1535386730307877e307,1.1555378733306677e307,1.1575370736305478e307,1.1595362739304278e307,1.1615354742303078e307,1.1635346745301879e307,1.165533874830068e307,1.1675330751299482e307,1.1695322754298282e307,1.1715314757297082e307,1.1735306760295882e307,1.1755298763294683e307,1.1775290766293483e307,1.1795282769292283e307,1.1815274772291083e307,1.1835266775289884e307,1.1855258778288684e307,1.1875250781287484e307,1.1895242784286285e307,1.1915234787285087e307,1.1935226790283888e307,1.1955218793282688e307,1.1975210796281488e307,1.1995202799280288e307,1.2015194802279089e307,1.203518680527789e307,1.205517880827669e307,1.207517081127549e307,1.209516281427429e307,1.211515481727309e307,1.213514682027189e307,1.2155138823270693e307,1.2175130826269493e307,1.2195122829268294e307,1.2215114832267094e307,1.2235106835265894e307,1.2255098838264694e307,1.2275090841263495e307,1.2295082844262295e307,1.2315074847261095e307,1.2335066850259895e307,1.2355058853258696e307,1.2375050856257496e307,1.2395042859256299e307,1.24150348622551e307,1.24350268652539e307,1.24550188682527e307,1.24750108712515e307,1.24950028742503e307,1.25149948772491e307,1.25349868802479e307,1.25549788832467e307,1.25749708862455e307,1.2594962889244301e307,1.2614954892243102e307,1.2634946895241904e307,1.2654938898240705e307,1.2674930901239505e307,1.2694922904238305e307,1.2714914907237106e307,1.2734906910235906e307,1.2754898913234706e307,1.2774890916233506e307,1.2794882919232307e307,1.2814874922231107e307,1.2834866925229907e307,1.285485892822871e307,1.287485093122751e307,1.289484293422631e307,1.291483493722511e307,1.293482694022391e307,1.295481894322271e307,1.2974810946221512e307,1.2994802949220312e307,1.3014794952219112e307,1.3034786955217912e307,1.3054778958216713e307,1.3074770961215513e307,1.3094762964214316e307,1.3114754967213116e307,1.3134746970211916e307,1.3154738973210716e307,1.3174730976209517e307,1.3194722979208317e307,1.3214714982207117e307,1.3234706985205917e307,1.3254698988204718e307,1.3274690991203518e307,1.3294682994202318e307,1.3314674997201119e307,1.3334667000199921e307,1.3354659003198722e307,1.3374651006197522e307,1.3394643009196322e307,1.3414635012195122e307,1.3434627015193923e307,1.3454619018192723e307,1.3474611021191523e307,1.3494603024190323e307,1.3514595027189124e307,1.3534587030187924e307,1.3554579033186724e307,1.3574571036185527e307,1.3594563039184327e307,1.3614555042183128e307,1.3634547045181928e307,1.3654539048180728e307,1.3674531051179528e307,1.3694523054178329e307,1.371451505717713e307,1.373450706017593e307,1.375449906317473e307,1.377449106617353e307,1.379448306917233e307,1.3814475072171133e307,1.3834467075169933e307,1.3854459078168733e307,1.3874451081167534e307,1.3894443084166334e307,1.3914435087165134e307,1.3934427090163934e307,1.3954419093162735e307,1.3974411096161535e307,1.3994403099160335e307,1.4014395102159135e307,1.4034387105157938e307,1.4054379108156738e307,1.4074371111155539e307,1.409436311415434e307,1.411435511715314e307,1.413434712015194e307,1.415433912315074e307,1.417433112614954e307,1.419432312914834e307,1.421431513214714e307,1.423430713514594e307,1.425429913814474e307,1.4274291141143544e307,1.4294283144142344e307,1.4314275147141144e307,1.4334267150139945e307,1.4354259153138745e307,1.4374251156137545e307,1.4394243159136346e307,1.4414235162135146e307,1.4434227165133946e307,1.4454219168132746e307,1.4474211171131547e307,1.4494203174130347e307,1.451419517712915e307,1.453418718012795e307,1.455417918312675e307,1.457417118612555e307,1.459416318912435e307,1.461415519212315e307,1.4634147195121951e307,1.4654139198120752e307,1.4674131201119552e307,1.4694123204118352e307,1.4714115207117152e307,1.4734107210115953e307,1.4754099213114755e307,1.4774091216113556e307,1.4794083219112356e307,1.4814075222111156e307,1.4834067225109956e307,1.4854059228108757e307,1.4874051231107557e307,1.4894043234106357e307,1.4914035237105158e307,1.4934027240103958e307,1.4954019243102758e307,1.4974011246101558e307,1.499400324910036e307,1.5013995252099161e307,1.5033987255097962e307,1.5053979258096762e307,1.5073971261095562e307,1.5093963264094362e307,1.5113955267093163e307,1.5133947270091963e307,1.5153939273090763e307,1.5173931276089563e307,1.5193923279088364e307,1.5213915282087167e307,1.5233907285085967e307,1.5253899288084767e307,1.5273891291083567e307,1.5293883294082368e307,1.5313875297081168e307,1.5333867300079968e307,1.5353859303078768e307,1.5373851306077569e307,1.539384330907637e307,1.541383531207517e307,1.543382731507397e307,1.5453819318072772e307,1.5473811321071573e307,1.5493803324070373e307,1.5513795327069173e307,1.5533787330067973e307,1.5553779333066774e307,1.5573771336065574e307,1.5593763339064374e307,1.5613755342063174e307,1.5633747345061975e307,1.5653739348060775e307,1.5673731351059575e307,1.5693723354058378e307,1.5713715357057178e307,1.5733707360055978e307,1.575369936305478e307,1.577369136605358e307,1.579368336905238e307,1.581367537205118e307,1.583366737504998e307,1.585365937804878e307,1.587365138104758e307,1.589364338404638e307,1.591363538704518e307,1.5933627390043984e307,1.5953619393042784e307,1.5973611396041584e307,1.5993603399040384e307,1.6013595402039185e307,1.6033587405037985e307,1.6053579408036785e307,1.6073571411035586e307,1.6093563414034386e307,1.6113555417033186e307,1.6133547420031986e307,1.6153539423030787e307,1.617353142602959e307,1.619352342902839e307,1.621351543202719e307,1.623350743502599e307,1.625349943802479e307,1.627349144102359e307,1.629348344402239e307,1.6313475447021191e307,1.6333467450019992e307,1.6353459453018792e307,1.6373451456017592e307,1.6393443459016395e307,1.6413435462015195e307,1.6433427465013995e307,1.6453419468012796e307,1.6473411471011596e307,1.6493403474010396e307,1.6513395477009196e307,1.6533387480007997e307,1.6553379483006797e307,1.6573371486005597e307,1.6593363489004398e307,1.6613355492003198e307,1.6633347495002e307,1.66533394980008e307,1.66733315009996e307,1.6693323503998401e307,1.6713315506997202e307,1.6733307509996002e307,1.6753299512994802e307,1.6773291515993602e307,1.6793283518992403e307,1.6813275521991203e307,1.6833267524990003e307,1.6853259527988804e307,1.6873251530987606e307,1.6893243533986407e307,1.6913235536985207e307,1.6933227539984007e307,1.6953219542982807e307,1.6973211545981608e307,1.6993203548980408e307,1.7013195551979208e307,1.7033187554978008e307,1.7053179557976809e307,1.707317156097561e307,1.709316356397441e307,1.7113155566973212e307,1.7133147569972012e307,1.7153139572970813e307,1.7173131575969613e307,1.7193123578968413e307,1.7213115581967213e307,1.7233107584966014e307,1.7253099587964814e307,1.7273091590963614e307,1.7293083593962414e307,1.7313075596961215e307,1.7333067599960015e307,1.7353059602958818e307,1.7373051605957618e307,1.7393043608956418e307,1.7413035611955219e307,1.743302761495402e307,1.745301961795282e307,1.747301162095162e307,1.749300362395042e307,1.751299562694922e307,1.753298762994802e307,1.755297963294682e307,1.7572971635945623e307,1.7592963638944423e307,1.7612955641943224e307,1.7632947644942024e307,1.7652939647940824e307,1.7672931650939625e307,1.7692923653938425e307,1.7712915656937225e307,1.7732907659936025e307,1.7752899662934826e307,1.7772891665933626e307,1.7792883668932426e307,1.781287567193123e307,1.783286767493003e307,1.785285967792883e307,1.787285168092763e307,1.789284368392643e307,1.791283568692523e307,1.793282768992403e307,1.795281969292283e307,1.797281169592163e307,1.7992803698920431e307,1.8012795701919232e307,1.8032787704918032e307,1.8052779707916835e307,1.8072771710915635e307,1.8092763713914435e307,1.8112755716913235e307,1.8132747719912036e307,1.8152739722910836e307,1.8172731725909636e307,1.8192723728908436e307,1.8212715731907237e307,1.8232707734906037e307,1.8252699737904837e307,1.8272691740903638e307,1.829268374390244e307,1.831267574690124e307,1.833266774990004e307,1.835265975289884e307,1.8372651755897641e307,1.8392643758896442e307,1.8412635761895242e307,1.8432627764894042e307,1.8452619767892842e307,1.8472611770891643e307,1.8492603773890443e307,1.8512595776889243e307,1.8532587779888046e307,1.8552579782886846e307,1.8572571785885647e307,1.8592563788884447e307,1.8612555791883247e307,1.8632547794882047e307,1.8652539797880848e307,1.8672531800879648e307,1.8692523803878448e307,1.8712515806877248e307,1.8732507809876049e307,1.8752499812874851e307,1.8772491815873652e307,1.8792483818872452e307,1.8812475821871252e307,1.8832467824870053e307,1.8852459827868853e307,1.8872451830867653e307,1.8892443833866453e307,1.8912435836865254e307,1.8932427839864054e307,1.8952419842862854e307,1.8972411845861654e307,1.8992403848860457e307,1.9012395851859257e307,1.9032387854858058e307,1.9052379857856858e307,1.9072371860855658e307,1.9092363863854459e307,1.911235586685326e307,1.913234786985206e307,1.915233987285086e307,1.917233187584966e307,1.919232387884846e307,1.921231588184726e307,1.9232307884846063e307,1.9252299887844863e307,1.9272291890843663e307,1.9292283893842464e307,1.9312275896841264e307,1.9332267899840064e307,1.9352259902838865e307,1.9372251905837665e307,1.9392243908836465e307,1.9412235911835265e307,1.9432227914834066e307,1.9452219917832866e307,1.9472211920831669e307,1.949220392383047e307,1.951219592682927e307,1.953218792982807e307,1.955217993282687e307,1.957217193582567e307,1.959216393882447e307,1.961215594182327e307,1.963214794482207e307,1.965213994782087e307,1.9672131950819671e307,1.9692123953818472e307,1.9712115956817274e307,1.9732107959816075e307,1.9752099962814875e307,1.9772091965813675e307,1.9792083968812475e307,1.9812075971811276e307,1.9832067974810076e307,1.9852059977808876e307,1.9872051980807677e307,1.9892043983806477e307,1.9912035986805277e307,1.993202798980408e307,1.995201999280288e307,1.997201199580168e307,1.999200399880048e307,2.001199600179928e307,2.003198800479808e307,2.0051980007796881e307,2.0071972010795682e307,2.0091964013794482e307,2.0111956016793282e307,2.0131948019792082e307,2.0151940022790883e307,2.0171932025789686e307,2.0191924028788486e307,2.0211916031787286e307,2.0231908034786086e307,2.0251900037784887e307,2.0271892040783687e307,2.0291884043782487e307,2.0311876046781287e307,2.0331868049780088e307,2.0351860052778888e307,2.0371852055777688e307,2.0391844058776488e307,2.041183606177529e307,2.0431828064774092e307,2.0451820067772892e307,2.0471812070771692e307,2.0491804073770492e307,2.0511796076769293e307,2.0531788079768093e307,2.0551780082766893e307,2.0571772085765693e307,2.0591764088764494e307,2.0611756091763294e307,2.0631748094762094e307,2.0651740097760897e307,2.0671732100759697e307,2.0691724103758497e307,2.0711716106757298e307,2.0731708109756098e307,2.0751700112754898e307,2.0771692115753699e307,2.07916841187525e307,2.08116761217513e307,2.08316681247501e307,2.08516601277489e307,2.08716521307477e307,2.0891644133746503e307,2.0911636136745303e307,2.0931628139744103e307,2.0951620142742903e307,2.0971612145741704e307,2.0991604148740504e307,2.1011596151739304e307,2.1031588154738105e307,2.1051580157736905e307,2.1071572160735705e307,2.1091564163734505e307,2.1111556166733308e307,2.1131548169732108e307,2.1151540172730909e307,2.117153217572971e307,2.119152417872851e307,2.121151618172731e307,2.123150818472611e307,2.125150018772491e307,2.127149219072371e307,2.129148419372251e307,2.131147619672131e307,2.133146819972011e307,2.1351460202718914e307,2.1371452205717714e307,2.1391444208716514e307,2.1411436211715315e307,2.1431428214714115e307,2.1451420217712915e307,2.1471412220711715e307,2.1491404223710516e307,2.1511396226709316e307,2.1531388229708116e307,2.1551380232706917e307,2.1571372235705717e307,2.159136423870452e307,2.161135624170332e307,2.163134824470212e307,2.165134024770092e307,2.167133225069972e307,2.169132425369852e307,2.171131625669732e307,2.1731308259696121e307,2.1751300262694922e307,2.1771292265693722e307,2.1791284268692522e307,2.1811276271691323e307,2.1831268274690125e307,2.1851260277688926e307,2.1871252280687726e307,2.1891244283686526e307,2.1911236286685326e307,2.1931228289684127e307,2.1951220292682927e307,2.1971212295681727e307,2.1991204298680527e307,2.2011196301679328e307,2.2031188304678128e307,2.2051180307676928e307,2.207117231067573e307,2.2091164313674531e307,2.2111156316673332e307,2.2131148319672132e307,2.2151140322670932e307,2.2171132325669732e307,2.2191124328668533e307,2.2211116331667333e307,2.2231108334666133e307,2.2251100337664933e307,2.2271092340663734e307,2.2291084343662536e307,2.2311076346661337e307,2.2331068349660137e307,2.2351060352658937e307,2.2371052355657738e307,2.2391044358656538e307,2.2411036361655338e307,2.2431028364654138e307,2.2451020367652939e307,2.247101237065174e307,2.249100437365054e307,2.251099637664934e307,2.253098837964814e307,2.255098038264694e307,2.2570972385645743e307,2.2590964388644543e307,2.2610956391643343e307,2.2630948394642143e307,2.2650940397640944e307,2.2670932400639744e307,2.2690924403638544e307,2.2710916406637345e307,2.2730908409636145e307,2.2750900412634945e307,2.2770892415633745e307,2.2790884418632546e307,2.2810876421631346e307,2.2830868424630146e307,2.2850860427628946e307,2.2870852430627747e307,2.289084443362655e307,2.291083643662535e307,2.2930828439624153e307,2.2950820442622953e307,2.2970812445621753e307,2.2990804448620553e307,2.3010796451619354e307,2.3030788454618154e307,2.3050780457616954e307,2.3070772460615754e307,2.3090764463614555e307,2.3110756466613355e307,2.3130748469612155e307,2.3150740472610955e307,2.3170732475609756e307,2.3190724478608556e307,2.3210716481607356e307,2.3230708484606157e307,2.3250700487604957e307,2.3270692490603757e307,2.3290684493602557e307,2.331067649660136e307,2.333066849960016e307,2.3350660502598963e307,2.3370652505597763e307,2.3390644508596564e307,2.3410636511595364e307,2.3430628514594164e307,2.3450620517592964e307,2.3470612520591765e307,2.3490604523590565e307,2.3510596526589365e307,2.3530588529588166e307,2.3550580532586966e307,2.3570572535585766e307,2.3590564538584566e307,2.3610556541583367e307,2.3630548544582167e307,2.3650540547580967e307,2.3670532550579767e307,2.369052455357857e307,2.371051655657737e307,2.373050855957617e307,2.375050056257497e307,2.377049256557377e307,2.379048456857257e307,2.381047657157137e307,2.3830468574570175e307,2.3850460577568975e307,2.3870452580567775e307,2.3890444583566575e307,2.3910436586565376e307,2.3930428589564176e307,2.3950420592562976e307,2.3970412595561776e307,2.3990404598560577e307,2.4010396601559377e307,2.4030388604558177e307,2.405038060755698e307,2.407037261055578e307,2.409036461355458e307,2.411035661655338e307,2.413034861955218e307,2.415034062255098e307,2.417033262554978e307,2.419032462854858e307,2.421031663154738e307,2.423030863454618e307,2.425030063754498e307,2.427029264054378e307,2.429028464354258e307,2.4310276646541386e307,2.4330268649540186e307,2.4350260652538987e307,2.4370252655537787e307,2.4390244658536587e307,2.4410236661535387e307,2.443022866453419e307,2.445022066753299e307,2.447021267053179e307,2.449020467353059e307,2.451019667652939e307,2.453018867952819e307,2.455018068252699e307,2.457017268552579e307,2.459016468852459e307,2.461015669152339e307,2.463014869452219e307,2.465014069752099e307,2.467013270051979e307,2.469012470351859e307,2.471011670651739e307,2.473010870951619e307,2.475010071251499e307,2.4770092715513797e307,2.4790084718512597e307,2.48100767215114e307,2.48300687245102e307,2.4850060727509e307,2.48700527305078e307,2.48900447335066e307,2.49100367365054e307,2.49300287395042e307,2.4950020742503e307,2.49700127455018e307,2.49900047485006e307,2.50099967514994e307,2.50299887544982e307,2.5049980757497e307,2.50699727604958e307,2.50899647634946e307,2.51099567664934e307,2.51299487694922e307,2.5149940772491e307,2.5169932775489803e307,2.5189924778488603e307,2.5209916781487403e307,2.5229908784486203e307,2.524990078748501e307,2.526989279048381e307,2.528988479348261e307,2.530987679648141e307,2.532986879948021e307,2.534986080247901e307,2.536985280547781e307,2.538984480847661e307,2.540983681147541e307,2.542982881447421e307,2.544982081747301e307,2.546981282047181e307,2.548980482347061e307,2.550979682646941e307,2.552978882946821e307,2.5549780832467013e307,2.5569772835465813e307,2.5589764838464613e307,2.5609756841463413e307,2.5629748844462214e307,2.5649740847461014e307,2.5669732850459814e307,2.5689724853458615e307,2.570971685645742e307,2.572970885945622e307,2.574970086245502e307,2.576969286545382e307,2.578968486845262e307,2.580967687145142e307,2.582966887445022e307,2.584966087744902e307,2.586965288044782e307,2.588964488344662e307,2.590963688644542e307,2.5929628889444223e307,2.5949620892443023e307,2.5969612895441823e307,2.5989604898440624e307,2.6009596901439424e307,2.6029588904438224e307,2.6049580907437024e307,2.6069572910435825e307,2.6089564913434625e307,2.6109556916433425e307,2.6129548919432225e307,2.6149540922431026e307,2.6169532925429826e307,2.618952492842863e307,2.620951693142743e307,2.622950893442623e307,2.624950093742503e307,2.626949294042383e307,2.6289484943422633e307,2.6309476946421433e307,2.6329468949420233e307,2.6349460952419033e307,2.6369452955417834e307,2.6389444958416634e307,2.6409436961415434e307,2.6429428964414234e307,2.6449420967413035e307,2.6469412970411835e307,2.6489404973410635e307,2.6509396976409436e307,2.6529388979408236e307,2.6549380982407036e307,2.6569372985405836e307,2.6589364988404637e307,2.6609356991403437e307,2.6629348994402237e307,2.6649340997401037e307,2.6669333000399843e307,2.6689325003398643e307,2.6709317006397443e307,2.6729309009396243e307,2.6749301012395044e307,2.6769293015393844e307,2.6789285018392644e307,2.6809277021391445e307,2.6829269024390245e307,2.6849261027389045e307,2.6869253030387845e307,2.6889245033386646e307,2.6909237036385446e307,2.6929229039384246e307,2.6949221042383046e307,2.6969213045381847e307,2.6989205048380647e307,2.7009197051379447e307,2.7029189054378247e307,2.704918105737705e307,2.706917306037585e307,2.708916506337465e307,2.710915706637345e307,2.7129149069372254e307,2.7149141072371054e307,2.7169133075369854e307,2.7189125078368655e307,2.7209117081367455e307,2.7229109084366255e307,2.7249101087365055e307,2.7269093090363856e307,2.7289085093362656e307,2.7309077096361456e307,2.7329069099360257e307,2.7349061102359057e307,2.7369053105357857e307,2.7389045108356657e307,2.740903711135546e307,2.742902911435426e307,2.744902111735306e307,2.746901312035186e307,2.748900512335066e307,2.750899712634946e307,2.752898912934826e307,2.754898113234706e307,2.756897313534586e307,2.758896513834466e307,2.7608957141343465e307,2.7628949144342266e307,2.7648941147341066e307,2.7668933150339866e307,2.7688925153338666e307,2.7708917156337467e307,2.7728909159336267e307,2.7748901162335067e307,2.7768893165333867e307,2.778888516833267e307,2.780887717133147e307,2.782886917433027e307,2.784886117732907e307,2.786885318032787e307,2.788884518332667e307,2.790883718632547e307,2.792882918932427e307,2.794882119232307e307,2.796881319532187e307,2.798880519832067e307,2.800879720131947e307,2.802878920431827e307,2.804878120731707e307,2.8068773210315876e307,2.8088765213314677e307,2.8108757216313477e307,2.8128749219312277e307,2.8148741222311077e307,2.816873322530988e307,2.818872522830868e307,2.820871723130748e307,2.822870923430628e307,2.824870123730508e307,2.826869324030388e307,2.828868524330268e307,2.830867724630148e307,2.832866924930028e307,2.834866125229908e307,2.836865325529788e307,2.838864525829668e307,2.840863726129548e307,2.842862926429428e307,2.844862126729308e307,2.846861327029188e307,2.848860527329068e307,2.850859727628948e307,2.8528589279288283e307,2.854858128228709e307,2.856857328528589e307,2.858856528828469e307,2.860855729128349e307,2.862854929428229e307,2.864854129728109e307,2.866853330027989e307,2.868852530327869e307,2.870851730627749e307,2.872850930927629e307,2.874850131227509e307,2.876849331527389e307,2.878848531827269e307,2.880847732127149e307,2.882846932427029e307,2.884846132726909e307,2.886845333026789e307,2.888844533326669e307,2.8908437336265493e307,2.8928429339264293e307,2.8948421342263093e307,2.8968413345261893e307,2.8988405348260694e307,2.9008397351259494e307,2.90283893542583e307,2.90483813572571e307,2.90683733602559e307,2.90883653632547e307,2.91083573662535e307,2.91283493692523e307,2.91483413722511e307,2.91683333752499e307,2.91883253782487e307,2.92083173812475e307,2.92283093842463e307,2.92483013872451e307,2.9268293390243903e307,2.9288285393242703e307,2.9308277396241503e307,2.9328269399240303e307,2.9348261402239104e307,2.9368253405237904e307,2.9388245408236704e307,2.9408237411235504e307,2.9428229414234305e307,2.9448221417233105e307,2.9468213420231905e307,2.948820542323071e307,2.950819742622951e307,2.952818942922831e307,2.954818143222711e307,2.956817343522591e307,2.958816543822471e307,2.960815744122351e307,2.962814944422231e307,2.9648141447221113e307,2.9668133450219913e307,2.9688125453218713e307,2.9708117456217513e307,2.9728109459216314e307,2.9748101462215114e307,2.9768093465213914e307,2.9788085468212714e307,2.9808077471211515e307,2.9828069474210315e307,2.9848061477209115e307,2.9868053480207916e307,2.9888045483206716e307,2.9908037486205516e307,2.9928029489204316e307,2.9948021492203117e307,2.996801349520192e307,2.998800549820072e307,3.000799750119952e307,3.0027989504198323e307,3.0047981507197123e307,3.0067973510195923e307,3.0087965513194724e307,3.0107957516193524e307,3.0127949519192324e307,3.0147941522191124e307,3.0167933525189925e307,3.0187925528188725e307,3.0207917531187525e307,3.0227909534186325e307,3.0247901537185126e307,3.0267893540183926e307,3.0287885543182726e307,3.0307877546181526e307,3.0327869549180327e307,3.0347861552179127e307,3.0367853555177927e307,3.038784555817673e307,3.040783756117553e307,3.0427829564174333e307,3.0447821567173133e307,3.0467813570171934e307,3.0487805573170734e307,3.0507797576169534e307,3.0527789579168334e307,3.0547781582167135e307,3.0567773585165935e307,3.0587765588164735e307,3.0607757591163535e307,3.0627749594162336e307,3.0647741597161136e307,3.0667733600159936e307,3.0687725603158737e307,3.0707717606157537e307,3.0727709609156337e307,3.0747701612155137e307,3.076769361515394e307,3.078768561815274e307,3.080767762115154e307,3.082766962415034e307,3.084766162714914e307,3.086765363014794e307,3.088764563314674e307,3.0907637636145544e307,3.0927629639144345e307,3.0947621642143145e307,3.0967613645141945e307,3.0987605648140746e307,3.1007597651139546e307,3.1027589654138346e307,3.1047581657137146e307,3.1067573660135947e307,3.1087565663134747e307,3.1107557666133547e307,3.1127549669132347e307,3.114754167213115e307,3.116753367512995e307,3.118752567812875e307,3.120751768112755e307,3.122750968412635e307,3.124750168712515e307,3.126749369012395e307,3.128748569312275e307,3.130747769612155e307,3.132746969912035e307,3.134746170211915e307,3.136745370511795e307,3.1387445708116756e307,3.1407437711115556e307,3.1427429714114356e307,3.1447421717113157e307,3.1467413720111957e307,3.1487405723110757e307,3.150739772610956e307,3.152738972910836e307,3.154738173210716e307,3.156737373510596e307,3.158736573810476e307,3.160735774110356e307,3.162734974410236e307,3.164734174710116e307,3.166733375009996e307,3.168732575309876e307,3.170731775609756e307,3.172730975909636e307,3.174730176209516e307,3.176729376509396e307,3.178728576809276e307,3.180727777109156e307,3.182726977409036e307,3.1847261777089167e307,3.1867253780087967e307,3.188724578308677e307,3.190723778608557e307,3.192722978908437e307,3.194722179208317e307,3.196721379508197e307,3.198720579808077e307,3.200719780107957e307,3.202718980407837e307,3.204718180707717e307,3.206717381007597e307,3.208716581307477e307,3.210715781607357e307,3.212714981907237e307,3.214714182207117e307,3.216713382506997e307,3.218712582806877e307,3.220711783106757e307,3.222710983406637e307,3.224710183706517e307,3.2267093840063973e307,3.2287085843062773e307,3.2307077846061573e307,3.232706984906038e307,3.234706185205918e307,3.236705385505798e307,3.238704585805678e307,3.240703786105558e307,3.242702986405438e307,3.244702186705318e307,3.246701387005198e307,3.248700587305078e307,3.250699787604958e307,3.252698987904838e307,3.254698188204718e307,3.256697388504598e307,3.258696588804478e307,3.260695789104358e307,3.2626949894042383e307,3.2646941897041183e307,3.2666933900039983e307,3.2686925903038783e307,3.2706917906037584e307,3.2726909909036384e307,3.2746901912035184e307,3.2766893915033984e307,3.278688591803279e307,3.280687792103159e307,3.282686992403039e307,3.284686192702919e307,3.286685393002799e307,3.288684593302679e307,3.290683793602559e307,3.292682993902439e307,3.294682194202319e307,3.296681394502199e307,3.298680594802079e307,3.3006797951019593e307,3.3026789954018393e307,3.3046781957017193e307,3.3066773960015993e307,3.3086765963014794e307,3.3106757966013594e307,3.3126749969012394e307,3.3146741972011195e307,3.3166733975009995e307,3.3186725978008795e307,3.3206717981007595e307,3.3226709984006396e307,3.3246701987005196e307,3.3266693990004e307,3.32866859930028e307,3.33066779960016e307,3.33266699990004e307,3.33466620019992e307,3.3366654004998e307,3.3386646007996803e307,3.3406638010995603e307,3.3426630013994403e307,3.3446622016993204e307,3.3466614019992004e307,3.3486606022990804e307,3.3506598025989604e307,3.3526590028988405e307,3.3546582031987205e307,3.3566574034986005e307,3.3586566037984805e307,3.3606558040983606e307,3.3626550043982406e307,3.3646542046981206e307,3.3666534049980007e307,3.3686526052978807e307,3.3706518055977607e307,3.372651005897641e307,3.3746502061975213e307,3.3766494064974013e307,3.3786486067972813e307,3.3806478070971613e307,3.3826470073970414e307,3.3846462076969214e307,3.3866454079968014e307,3.3886446082966814e307,3.3906438085965615e307,3.3926430088964415e307,3.3946422091963215e307,3.3966414094962016e307,3.3986406097960816e307,3.4006398100959616e307,3.4026390103958416e307,3.4046382106957217e307,3.4066374109956017e307,3.4086366112954817e307,3.4106358115953617e307,3.412635011895242e307,3.414634212195122e307,3.416633412495002e307,3.418632612794882e307,3.4206318130947624e307,3.4226310133946424e307,3.4246302136945224e307,3.4266294139944025e307,3.4286286142942825e307,3.4306278145941625e307,3.4326270148940425e307,3.4346262151939226e307,3.4366254154938026e307,3.4386246157936826e307,3.4406238160935626e307,3.4426230163934427e307,3.4446222166933227e307,3.4466214169932027e307,3.4486206172930827e307,3.450619817592963e307,3.452619017892843e307,3.454618218192723e307,3.456617418492603e307,3.458616618792483e307,3.460615819092363e307,3.462615019392243e307,3.464614219692123e307,3.466613419992003e307,3.4686126202918835e307,3.4706118205917635e307,3.4726110208916436e307,3.4746102211915236e307,3.4766094214914036e307,3.4786086217912837e307,3.4806078220911637e307,3.4826070223910437e307,3.4846062226909237e307,3.486605422990804e307,3.488604623290684e307,3.490603823590564e307,3.492603023890444e307,3.494602224190324e307,3.496601424490204e307,3.498600624790084e307,3.500599825089964e307,3.502599025389844e307,3.504598225689724e307,3.506597425989604e307,3.508596626289484e307,3.510595826589364e307,3.512595026889244e307,3.5145942271891246e307,3.5165934274890047e307,3.5185926277888847e307,3.5205918280887647e307,3.5225910283886447e307,3.524590228688525e307,3.526589428988405e307,3.528588629288285e307,3.530587829588165e307,3.532587029888045e307,3.534586230187925e307,3.536585430487805e307,3.538584630787685e307,3.540583831087565e307,3.542583031387445e307,3.544582231687325e307,3.546581431987205e307,3.548580632287085e307,3.550579832586965e307,3.552579032886845e307,3.554578233186725e307,3.556577433486605e307,3.558576633786485e307,3.5605758340863653e307,3.562575034386246e307,3.564574234686126e307,3.566573434986006e307,3.568572635285886e307,3.570571835585766e307,3.572571035885646e307,3.574570236185526e307,3.576569436485406e307,3.578568636785286e307,3.580567837085166e307,3.582567037385046e307,3.584566237684926e307,3.586565437984806e307,3.588564638284686e307,3.590563838584566e307,3.592563038884446e307,3.594562239184326e307,3.596561439484206e307,3.5985606397840863e307,3.6005598400839663e307,3.6025590403838463e307,3.6045582406837263e307,3.6065574409836064e307,3.608556641283487e307,3.610555841583367e307,3.612555041883247e307,3.614554242183127e307,3.616553442483007e307,3.618552642782887e307,3.620551843082767e307,3.622551043382647e307,3.624550243682527e307,3.626549443982407e307,3.628548644282287e307,3.630547844582167e307,3.632547044882047e307,3.634546245181927e307,3.6365454454818073e307,3.6385446457816873e307,3.6405438460815673e307,3.6425430463814474e307,3.6445422466813274e307,3.6465414469812074e307,3.6485406472810874e307,3.6505398475809675e307,3.6525390478808475e307,3.6545382481807275e307,3.656537448480608e307,3.658536648780488e307,3.660535849080368e307,3.662535049380248e307,3.664534249680128e307,3.666533449980008e307,3.668532650279888e307,3.670531850579768e307,3.6725310508796483e307,3.6745302511795283e307,3.6765294514794083e307,3.6785286517792883e307,3.6805278520791684e307,3.6825270523790484e307,3.6845262526789284e307,3.6865254529788084e307,3.6885246532786885e307,3.6905238535785685e307,3.6925230538784485e307,3.6945222541783285e307,3.6965214544782086e307,3.6985206547780886e307,3.7005198550779686e307,3.7025190553778487e307,3.704518255677729e307,3.706517455977609e307,3.708516656277489e307,3.7105158565773693e307,3.7125150568772493e307,3.7145142571771293e307,3.7165134574770093e307,3.7185126577768894e307,3.7205118580767694e307,3.7225110583766494e307,3.7245102586765294e307,3.7265094589764095e307,3.7285086592762895e307,3.7305078595761695e307,3.7325070598760496e307,3.7345062601759296e307,3.7365054604758096e307,3.7385046607756896e307,3.7405038610755697e307,3.7425030613754497e307,3.7445022616753297e307,3.7465014619752097e307,3.74850066227509e307,3.7504998625749703e307,3.7524990628748503e307,3.7544982631747304e307,3.7564974634746104e307,3.7584966637744904e307,3.7604958640743704e307,3.7624950643742505e307,3.7644942646741305e307,3.7664934649740105e307,3.7684926652738905e307,3.7704918655737706e307,3.7724910658736506e307,3.7744902661735306e307,3.7764894664734106e307,3.7784886667732907e307,3.7804878670731707e307,3.7824870673730507e307,3.784486267672931e307,3.786485467972811e307,3.788484668272691e307,3.790483868572571e307,3.792483068872451e307,3.794482269172331e307,3.796481469472211e307,3.7984806697720914e307,3.8004798700719715e307,3.8024790703718515e307,3.8044782706717315e307,3.8064774709716115e307,3.8084766712714916e307,3.8104758715713716e307,3.8124750718712516e307,3.8144742721711317e307,3.8164734724710117e307,3.8184726727708917e307,3.8204718730707717e307,3.822471073370652e307,3.824470273670532e307,3.826469473970412e307,3.828468674270292e307,3.830467874570172e307,3.832467074870052e307,3.834466275169932e307,3.836465475469812e307,3.838464675769692e307,3.840463876069572e307,3.842463076369452e307,3.8444622766693326e307,3.8464614769692126e307,3.8484606772690926e307,3.8504598775689726e307,3.8524590778688527e307,3.8544582781687327e307,3.8564574784686127e307,3.8584566787684927e307,3.860455879068373e307,3.862455079368253e307,3.864454279668133e307,3.866453479968013e307,3.868452680267893e307,3.870451880567773e307,3.872451080867653e307,3.874450281167533e307,3.876449481467413e307,3.878448681767293e307,3.880447882067173e307,3.882447082367053e307,3.884446282666933e307,3.886445482966813e307,3.888444683266693e307,3.890443883566573e307,3.8924430838664537e307,3.8944422841663337e307,3.896441484466214e307,3.898440684766094e307,3.900439885065974e307,3.902439085365854e307,3.904438285665734e307,3.906437485965614e307,3.908436686265494e307,3.910435886565374e307,3.912435086865254e307,3.914434287165134e307,3.916433487465014e307,3.918432687764894e307,3.920431888064774e307,3.922431088364654e307,3.924430288664534e307,3.926429488964414e307,3.928428689264294e307,3.930427889564174e307,3.932427089864054e307,3.9344262901639343e307,3.9364254904638143e307,3.9384246907636943e307,3.940423891063575e307,3.942423091363455e307,3.944422291663335e307,3.946421491963215e307,3.948420692263095e307,3.950419892562975e307,3.952419092862855e307,3.954418293162735e307,3.956417493462615e307,3.958416693762495e307,3.960415894062375e307,3.962415094362255e307,3.964414294662135e307,3.966413494962015e307,3.968412695261895e307,3.970411895561775e307,3.9724110958616553e307,3.9744102961615353e307,3.9764094964614153e307,3.9784086967612954e307,3.9804078970611754e307,3.9824070973610554e307,3.9844062976609354e307,3.986405497960816e307,3.988404698260696e307,3.990403898560576e307,3.992403098860456e307,3.994402299160336e307,3.996401499460216e307,3.998400699760096e307,4.000399900059976e307,4.002399100359856e307,4.004398300659736e307,4.006397500959616e307,4.0083967012594963e307,4.0103959015593763e307,4.0123951018592563e307,4.0143943021591363e307,4.0163935024590164e307,4.0183927027588964e307,4.0203919030587764e307,4.0223911033586564e307,4.0243903036585365e307,4.0263895039584165e307,4.0283887042582965e307,4.0303879045581766e307,4.0323871048580566e307,4.034386305157937e307,4.036385505457817e307,4.038384705757697e307,4.040383906057577e307,4.042383106357457e307,4.044382306657337e307,4.0463815069572173e307,4.0483807072570973e307,4.0503799075569773e307,4.0523791078568573e307,4.0543783081567374e307,4.0563775084566174e307,4.0583767087564974e307,4.0603759090563775e307,4.0623751093562575e307,4.0643743096561375e307,4.0663735099560175e307,4.0683727102558976e307,4.0703719105557776e307,4.0723711108556576e307,4.0743703111555376e307,4.0763695114554177e307,4.0783687117552977e307,4.080367912055178e307,4.082367112355058e307,4.0843663126549383e307,4.0863655129548183e307,4.0883647132546983e307,4.0903639135545784e307,4.0923631138544584e307,4.0943623141543384e307,4.0963615144542184e307,4.0983607147540985e307,4.1003599150539785e307,4.1023591153538585e307,4.1043583156537385e307,4.1063575159536186e307,4.1083567162534986e307,4.1103559165533786e307,4.1123551168532587e307,4.1143543171531387e307,4.1163535174530187e307,4.1183527177528987e307,4.120351918052779e307,4.122351118352659e307,4.124350318652539e307,4.126349518952419e307,4.1283487192522994e307,4.1303479195521794e307,4.1323471198520594e307,4.1343463201519394e307,4.1363455204518195e307,4.1383447207516995e307,4.1403439210515795e307,4.1423431213514596e307,4.1443423216513396e307,4.1463415219512196e307,4.1483407222510996e307,4.1503399225509797e307,4.1523391228508597e307,4.1543383231507397e307,4.1563375234506197e307,4.1583367237505e307,4.16033592405038e307,4.16233512435026e307,4.16433432465014e307,4.16633352495002e307,4.1683327252499e307,4.17033192554978e307,4.17233112584966e307,4.17433032614954e307,4.1763295264494205e307,4.1783287267493005e307,4.1803279270491806e307,4.1823271273490606e307,4.1843263276489406e307,4.1863255279488206e307,4.1883247282487007e307,4.1903239285485807e307,4.1923231288484607e307,4.1943223291483407e307,4.196321529448221e307,4.198320729748101e307,4.200319930047981e307,4.202319130347861e307,4.204318330647741e307,4.206317530947621e307,4.208316731247501e307,4.210315931547381e307,4.212315131847261e307,4.214314332147141e307,4.216313532447021e307,4.218312732746901e307,4.220311933046781e307,4.2223111333466616e307,4.2243103336465417e307,4.2263095339464217e307,4.2283087342463017e307,4.2303079345461817e307,4.232307134846062e307,4.234306335145942e307,4.236305535445822e307,4.238304735745702e307,4.240303936045582e307,4.242303136345462e307,4.244302336645342e307,4.246301536945222e307,4.248300737245102e307,4.250299937544982e307,4.252299137844862e307,4.254298338144742e307,4.256297538444622e307,4.258296738744502e307,4.260295939044382e307,4.262295139344262e307,4.264294339644142e307,4.266293539944022e307,4.268292740243902e307,4.270291940543783e307,4.272291140843663e307,4.274290341143543e307,4.276289541443423e307,4.278288741743303e307,4.280287942043183e307,4.282287142343063e307,4.284286342642943e307,4.286285542942823e307,4.288284743242703e307,4.290283943542583e307,4.292283143842463e307,4.294282344142343e307,4.296281544442223e307,4.298280744742103e307,4.300279945041983e307,4.302279145341863e307,4.304278345641743e307,4.3062775459416233e307,4.3082767462415033e307,4.3102759465413833e307,4.3122751468412633e307,4.3142743471411434e307,4.316273547441024e307,4.318272747740904e307,4.320271948040784e307,4.322271148340664e307,4.324270348640544e307,4.326269548940424e307,4.328268749240304e307,4.330267949540184e307,4.332267149840064e307,4.334266350139944e307,4.336265550439824e307,4.338264750739704e307,4.340263951039584e307,4.342263151339464e307,4.3442623516393443e307,4.3462615519392243e307,4.3482607522391043e307,4.3502599525389843e307,4.3522591528388644e307,4.3542583531387444e307,4.3562575534386244e307,4.3582567537385044e307,4.3602559540383845e307,4.3622551543382645e307,4.364254354638145e307,4.366253554938025e307,4.368252755237905e307,4.370251955537785e307,4.372251155837665e307,4.374250356137545e307,4.376249556437425e307,4.378248756737305e307,4.380247957037185e307,4.3822471573370653e307,4.3842463576369453e307,4.3862455579368253e307,4.3882447582367054e307,4.3902439585365854e307,4.3922431588364654e307,4.3942423591363454e307,4.3962415594362255e307,4.3982407597361055e307,4.4002399600359855e307,4.4022391603358655e307,4.4042383606357456e307,4.4062375609356256e307,4.4082367612355056e307,4.4102359615353856e307,4.412235161835266e307,4.414234362135146e307,4.416233562435026e307,4.4182327627349063e307,4.4202319630347863e307,4.4222311633346663e307,4.4242303636345463e307,4.4262295639344264e307,4.4282287642343064e307,4.4302279645341864e307,4.4322271648340664e307,4.4342263651339465e307,4.4362255654338265e307,4.4382247657337065e307,4.4402239660335865e307,4.4422231663334666e307,4.4442223666333466e307,4.4462215669332266e307,4.4482207672331067e307,4.4502199675329867e307,4.4522191678328667e307,4.4542183681327467e307,4.456217568432627e307,4.4582167687325073e307,4.4602159690323873e307,4.4622151693322673e307,4.4642143696321474e307,4.4662135699320274e307,4.4682127702319074e307,4.4702119705317874e307,4.4722111708316675e307,4.4742103711315475e307,4.4762095714314275e307,4.4782087717313076e307,4.4802079720311876e307,4.4822071723310676e307,4.4842063726309476e307,4.4862055729308277e307,4.4882047732307077e307,4.4902039735305877e307,4.4922031738304677e307,4.494202374130348e307,4.496201574430228e307,4.498200774730108e307,4.500199975029988e307,4.502199175329868e307,4.504198375629748e307,4.506197575929628e307,4.508196776229508e307,4.510195976529388e307,4.512195176829269e307,4.514194377129149e307,4.516193577429029e307,4.518192777728909e307,4.520191978028789e307,4.522191178328669e307,4.524190378628549e307,4.526189578928429e307,4.528188779228309e307,4.530187979528189e307,4.532187179828069e307,4.534186380127949e307,4.536185580427829e307,4.538184780727709e307,4.540183981027589e307,4.542183181327469e307,4.544182381627349e307,4.546181581927229e307,4.548180782227109e307,4.550179982526989e307,4.552179182826869e307,4.554178383126749e307,4.556177583426629e307,4.558176783726509e307,4.560175984026389e307,4.562175184326269e307,4.564174384626149e307,4.566173584926029e307,4.568172785225909e307,4.570171985525789e307,4.572171185825669e307,4.574170386125549e307,4.57616958642543e307,4.57816878672531e307,4.58016798702519e307,4.58216718732507e307,4.58416638762495e307,4.586165587924831e307,4.588164788224711e307,4.590163988524591e307,4.592163188824471e307,4.594162389124351e307,4.596161589424231e307,4.598160789724111e307,4.600159990023991e307,4.602159190323871e307,4.604158390623751e307,4.606157590923631e307,4.608156791223511e307,4.610155991523391e307,4.612155191823271e307,4.614154392123151e307,4.616153592423031e307,4.618152792722911e307,4.620151993022791e307,4.622151193322671e307,4.624150393622551e307,4.626149593922431e307,4.628148794222311e307,4.630147994522191e307,4.632147194822071e307,4.634146395121951e307,4.636145595421831e307,4.638144795721711e307,4.640143996021591e307,4.642143196321471e307,4.644142396621351e307,4.646141596921231e307,4.648140797221111e307,4.650139997520991e307,4.652139197820871e307,4.654138398120751e307,4.656137598420631e307,4.658136798720511e307,4.660135999020391e307,4.662135199320272e307,4.664134399620152e307,4.666133599920032e307,4.668132800219912e307,4.670132000519793e307,4.672131200819673e307,4.674130401119553e307,4.676129601419433e307,4.678128801719313e307,4.680128002019193e307,4.682127202319073e307,4.684126402618953e307,4.686125602918833e307,4.688124803218713e307,4.690124003518593e307,4.692123203818473e307,4.694122404118353e307,4.696121604418233e307,4.698120804718113e307,4.700120005017993e307,4.702119205317873e307,4.704118405617753e307,4.706117605917633e307,4.708116806217513e307,4.710116006517393e307,4.712115206817273e307,4.714114407117153e307,4.716113607417033e307,4.718112807716913e307,4.720112008016793e307,4.722111208316673e307,4.724110408616553e307,4.726109608916433e307,4.728108809216313e307,4.730108009516193e307,4.732107209816073e307,4.734106410115953e307,4.736105610415834e307,4.738104810715714e307,4.740104011015594e307,4.742103211315474e307,4.744102411615354e307,4.746101611915234e307,4.748100812215114e307,4.750100012514994e307,4.752099212814874e307,4.754098413114754e307,4.756097613414634e307,4.758096813714514e307,4.760096014014394e307,4.762095214314274e307,4.764094414614154e307,4.766093614914035e307,4.768092815213915e307,4.770092015513795e307,4.772091215813675e307,4.774090416113555e307,4.776089616413435e307,4.778088816713315e307,4.780088017013195e307,4.782087217313075e307,4.784086417612955e307,4.786085617912835e307,4.788084818212715e307,4.790084018512595e307,4.792083218812475e307,4.794082419112355e307,4.796081619412235e307,4.798080819712115e307,4.800080020011995e307,4.802079220311875e307,4.804078420611755e307,4.806077620911635e307,4.808076821211515e307,4.810076021511396e307,4.812075221811276e307,4.814074422111156e307,4.816073622411036e307,4.818072822710916e307,4.820072023010796e307,4.822071223310676e307,4.824070423610556e307,4.826069623910436e307,4.828068824210316e307,4.830068024510196e307,4.832067224810076e307,4.834066425109956e307,4.836065625409836e307,4.838064825709716e307,4.840064026009596e307,4.842063226309476e307,4.844062426609356e307,4.846061626909236e307,4.848060827209116e307,4.850060027508996e307,4.852059227808876e307,4.854058428108756e307,4.856057628408636e307,4.858056828708516e307,4.860056029008397e307,4.862055229308277e307,4.864054429608157e307,4.866053629908037e307,4.868052830207917e307,4.870052030507797e307,4.872051230807677e307,4.874050431107557e307,4.876049631407437e307,4.878048831707317e307,4.880048032007197e307,4.882047232307077e307,4.8840464326069575e307,4.886045632906838e307,4.888044833206718e307,4.890044033506598e307,4.892043233806478e307,4.894042434106358e307,4.896041634406238e307,4.898040834706118e307,4.900040035005998e307,4.902039235305878e307,4.904038435605758e307,4.906037635905638e307,4.908036836205518e307,4.910036036505398e307,4.912035236805278e307,4.914034437105158e307,4.916033637405038e307,4.918032837704918e307,4.920032038004798e307,4.922031238304678e307,4.924030438604558e307,4.926029638904438e307,4.928028839204318e307,4.930028039504198e307,4.932027239804078e307,4.934026440103958e307,4.936025640403838e307,4.938024840703718e307,4.940024041003598e307,4.942023241303478e307,4.944022441603358e307,4.946021641903238e307,4.948020842203118e307,4.950020042502998e307,4.952019242802878e307,4.954018443102759e307,4.956017643402639e307,4.958016843702519e307,4.9600160440024e307,4.96201524430228e307,4.96401444460216e307,4.96601364490204e307,4.96801284520192e307,4.9700120455018e307,4.97201124580168e307,4.97401044610156e307,4.97600964640144e307,4.97800884670132e307,4.9800080470012e307,4.98200724730108e307,4.98400644760096e307,4.98600564790084e307,4.98800484820072e307,4.9900040485006e307,4.99200324880048e307,4.99400244910036e307,4.99600164940024e307,4.99800084970012e307,5.00000005e307,5.00199925029988e307,5.00399845059976e307,5.00599765089964e307,5.00799685119952e307,5.0099960514994e307,5.01199525179928e307,5.01399445209916e307,5.01599365239904e307,5.01799285269892e307,5.0199920529988e307,5.02199125329868e307,5.02399045359856e307,5.02598965389844e307,5.02798885419832e307,5.0299880544982e307,5.03198725479808e307,5.033986455097961e307,5.035985655397841e307,5.037984855697721e307,5.039984055997601e307,5.041983256297481e307,5.043982456597361e307,5.045981656897241e307,5.047980857197122e307,5.049980057497002e307,5.051979257796882e307,5.053978458096762e307,5.055977658396642e307,5.057976858696522e307,5.059976058996402e307,5.061975259296282e307,5.063974459596162e307,5.065973659896042e307,5.067972860195922e307,5.069972060495802e307,5.071971260795682e307,5.073970461095562e307,5.075969661395442e307,5.077968861695322e307,5.079968061995202e307,5.081967262295082e307,5.083966462594962e307,5.085965662894842e307,5.087964863194722e307,5.089964063494602e307,5.091963263794482e307,5.093962464094362e307,5.095961664394242e307,5.097960864694122e307,5.099960064994002e307,5.101959265293882e307,5.103958465593762e307,5.105957665893642e307,5.107956866193523e307,5.109956066493403e307,5.111955266793283e307,5.113954467093163e307,5.115953667393043e307,5.117952867692923e307,5.119952067992803e307,5.121951268292683e307,5.123950468592563e307,5.125949668892443e307,5.127948869192323e307,5.129948069492203e307,5.131947269792083e307,5.133946470091963e307,5.135945670391843e307,5.137944870691723e307,5.139944070991603e307,5.141943271291484e307,5.143942471591364e307,5.145941671891244e307,5.147940872191124e307,5.149940072491004e307,5.151939272790884e307,5.153938473090764e307,5.155937673390644e307,5.157936873690524e307,5.159936073990404e307,5.161935274290284e307,5.163934474590164e307,5.165933674890044e307,5.167932875189924e307,5.169932075489804e307,5.171931275789684e307,5.173930476089564e307,5.175929676389444e307,5.177928876689324e307,5.179928076989204e307,5.181927277289084e307,5.183926477588965e307,5.185925677888845e307,5.187924878188725e307,5.189924078488605e307,5.191923278788485e307,5.193922479088365e307,5.195921679388245e307,5.197920879688125e307,5.199920079988005e307,5.201919280287885e307,5.203918480587765e307,5.205917680887645e307,5.207916881187525e307,5.209916081487405e307,5.211915281787285e307,5.213914482087165e307,5.215913682387045e307,5.217912882686925e307,5.219912082986805e307,5.221911283286685e307,5.223910483586565e307,5.225909683886445e307,5.227908884186325e307,5.229908084486205e307,5.231907284786085e307,5.233906485085965e307,5.235905685385846e307,5.237904885685726e307,5.239904085985606e307,5.241903286285486e307,5.243902486585366e307,5.245901686885246e307,5.247900887185126e307,5.249900087485006e307,5.251899287784886e307,5.253898488084766e307,5.255897688384646e307,5.257896888684527e307,5.259896088984407e307,5.261895289284287e307,5.263894489584167e307,5.265893689884047e307,5.267892890183927e307,5.269892090483807e307,5.271891290783687e307,5.273890491083567e307,5.275889691383447e307,5.277888891683327e307,5.279888091983207e307,5.281887292283087e307,5.283886492582967e307,5.285885692882847e307,5.287884893182727e307,5.289884093482607e307,5.291883293782487e307,5.293882494082367e307,5.295881694382247e307,5.297880894682127e307,5.299880094982007e307,5.301879295281887e307,5.303878495581767e307,5.305877695881647e307,5.307876896181527e307,5.309876096481407e307,5.311875296781287e307,5.313874497081167e307,5.315873697381047e307,5.317872897680927e307,5.319872097980807e307,5.321871298280687e307,5.323870498580567e307,5.325869698880447e307,5.327868899180327e307,5.329868099480207e307,5.331867299780089e307,5.333866500079969e307,5.335865700379849e307,5.337864900679729e307,5.339864100979609e307,5.341863301279489e307,5.343862501579369e307,5.345861701879249e307,5.347860902179129e307,5.349860102479009e307,5.351859302778889e307,5.353858503078769e307,5.355857703378649e307,5.357856903678529e307,5.359856103978409e307,5.361855304278289e307,5.363854504578169e307,5.365853704878049e307,5.367852905177929e307,5.369852105477809e307,5.371851305777689e307,5.373850506077569e307,5.375849706377449e307,5.377848906677329e307,5.379848106977209e307,5.381847307277089e307,5.383846507576969e307,5.385845707876849e307,5.387844908176729e307,5.389844108476609e307,5.391843308776489e307,5.393842509076369e307,5.395841709376249e307,5.397840909676129e307,5.399840109976009e307,5.401839310275889e307,5.403838510575769e307,5.405837710875649e307,5.40783691117553e307,5.40983611147541e307,5.41183531177529e307,5.41383451207517e307,5.41583371237505e307,5.41783291267493e307,5.41983211297481e307,5.42183131327469e307,5.42383051357457e307,5.425829713874451e307,5.427828914174331e307,5.429828114474211e307,5.431827314774091e307,5.433826515073971e307,5.435825715373851e307,5.437824915673731e307,5.439824115973611e307,5.441823316273491e307,5.443822516573371e307,5.445821716873251e307,5.447820917173131e307,5.449820117473011e307,5.451819317772891e307,5.453818518072771e307,5.455817718372651e307,5.457816918672531e307,5.459816118972411e307,5.461815319272291e307,5.463814519572171e307,5.465813719872051e307,5.467812920171931e307,5.469812120471811e307,5.471811320771691e307,5.473810521071571e307,5.475809721371451e307,5.477808921671331e307,5.479808121971211e307,5.481807322271092e307,5.483806522570972e307,5.485805722870852e307,5.487804923170732e307,5.489804123470612e307,5.491803323770492e307,5.493802524070372e307,5.495801724370252e307,5.497800924670132e307,5.499800124970012e307,5.501799325269892e307,5.503798525569772e307,5.505797725869652e307,5.507796926169532e307,5.509796126469412e307,5.511795326769292e307,5.513794527069172e307,5.515793727369052e307,5.517792927668932e307,5.519792127968813e307,5.521791328268693e307,5.523790528568573e307,5.525789728868453e307,5.527788929168333e307,5.529788129468213e307,5.531787329768093e307,5.533786530067973e307,5.535785730367853e307,5.537784930667733e307,5.539784130967613e307,5.541783331267493e307,5.543782531567373e307,5.545781731867253e307,5.547780932167133e307,5.549780132467013e307,5.551779332766893e307,5.553778533066773e307,5.555777733366654e307,5.557776933666534e307,5.559776133966414e307,5.561775334266294e307,5.563774534566174e307,5.565773734866054e307,5.567772935165934e307,5.569772135465814e307,5.571771335765694e307,5.573770536065574e307,5.575769736365454e307,5.577768936665334e307,5.579768136965214e307,5.581767337265094e307,5.583766537564974e307,5.585765737864854e307,5.587764938164734e307,5.589764138464614e307,5.591763338764494e307,5.593762539064374e307,5.595761739364254e307,5.597760939664134e307,5.599760139964014e307,5.601759340263894e307,5.603758540563774e307,5.605757740863654e307,5.607756941163534e307,5.609756141463414e307,5.611755341763294e307,5.613754542063175e307,5.615753742363055e307,5.617752942662935e307,5.619752142962815e307,5.621751343262695e307,5.623750543562575e307,5.625749743862455e307,5.627748944162335e307,5.6297481444622155e307,5.631747344762096e307,5.633746545061976e307,5.635745745361856e307,5.637744945661736e307,5.639744145961616e307,5.641743346261496e307,5.643742546561376e307,5.645741746861256e307,5.647740947161136e307,5.649740147461016e307,5.651739347760896e307,5.653738548060776e307,5.655737748360656e307,5.657736948660536e307,5.659736148960416e307,5.661735349260296e307,5.663734549560176e307,5.665733749860056e307,5.667732950159936e307,5.669732150459816e307,5.671731350759696e307,5.673730551059576e307,5.675729751359456e307,5.677728951659336e307,5.679728151959216e307,5.681727352259096e307,5.683726552558976e307,5.685725752858856e307,5.687724953158736e307,5.689724153458616e307,5.691723353758496e307,5.693722554058376e307,5.695721754358256e307,5.697720954658136e307,5.699720154958016e307,5.701719355257896e307,5.703718555557776e307,5.705717755857657e307,5.707716956157538e307,5.709716156457418e307,5.711715356757298e307,5.713714557057178e307,5.715713757357058e307,5.717712957656938e307,5.719712157956818e307,5.721711358256698e307,5.723710558556578e307,5.725709758856458e307,5.727708959156338e307,5.729708159456218e307,5.731707359756098e307,5.733706560055978e307,5.735705760355858e307,5.737704960655738e307,5.739704160955618e307,5.741703361255498e307,5.743702561555378e307,5.745701761855258e307,5.747700962155138e307,5.749700162455018e307,5.751699362754898e307,5.753698563054778e307,5.755697763354658e307,5.757696963654538e307,5.759696163954418e307,5.761695364254298e307,5.763694564554178e307,5.765693764854058e307,5.767692965153938e307,5.769692165453818e307,5.771691365753698e307,5.773690566053578e307,5.775689766353458e307,5.777688966653338e307,5.779688166953219e307,5.781687367253099e307,5.783686567552979e307,5.785685767852859e307,5.787684968152739e307,5.789684168452619e307,5.791683368752499e307,5.793682569052379e307,5.795681769352259e307,5.797680969652139e307,5.799680169952019e307,5.801679370251899e307,5.80367857055178e307,5.80567777085166e307,5.80767697115154e307,5.80967617145142e307,5.8116753717513e307,5.81367457205118e307,5.81567377235106e307,5.81767297265094e307,5.81967217295082e307,5.8216713732507e307,5.82367057355058e307,5.82566977385046e307,5.82766897415034e307,5.82966817445022e307,5.8316673747501e307,5.83366657504998e307,5.83566577534986e307,5.83766497564974e307,5.83966417594962e307,5.8416633762495e307,5.84366257654938e307,5.84566177684926e307,5.84766097714914e307,5.84966017744902e307,5.8516593777489e307,5.853658578048781e307,5.855657778348661e307,5.857656978648541e307,5.859656178948421e307,5.861655379248301e307,5.863654579548181e307,5.865653779848061e307,5.867652980147941e307,5.869652180447821e307,5.871651380747701e307,5.873650581047581e307,5.875649781347461e307,5.877648981647341e307,5.879648181947221e307,5.881647382247101e307,5.883646582546981e307,5.885645782846861e307,5.887644983146741e307,5.889644183446621e307,5.891643383746501e307,5.893642584046381e307,5.895641784346261e307,5.897640984646142e307,5.899640184946022e307,5.901639385245902e307,5.903638585545782e307,5.905637785845662e307,5.907636986145542e307,5.909636186445422e307,5.911635386745302e307,5.913634587045182e307,5.915633787345062e307,5.917632987644942e307,5.919632187944822e307,5.921631388244702e307,5.923630588544582e307,5.925629788844462e307,5.927628989144342e307,5.929628189444223e307,5.931627389744103e307,5.933626590043983e307,5.935625790343863e307,5.937624990643743e307,5.939624190943623e307,5.941623391243503e307,5.943622591543383e307,5.945621791843263e307,5.947620992143143e307,5.949620192443023e307,5.951619392742903e307,5.953618593042783e307,5.955617793342663e307,5.957616993642543e307,5.959616193942423e307,5.961615394242303e307,5.963614594542183e307,5.965613794842063e307,5.967612995141943e307,5.969612195441823e307,5.971611395741703e307,5.973610596041583e307,5.975609796341463e307,5.977608996641343e307,5.979608196941223e307,5.981607397241103e307,5.983606597540983e307,5.985605797840863e307,5.987604998140743e307,5.989604198440623e307,5.991603398740504e307,5.993602599040384e307,5.995601799340264e307,5.997600999640144e307,5.999600199940024e307,6.001599400239904e307,6.003598600539785e307,6.005597800839665e307,6.007597001139545e307,6.009596201439425e307,6.011595401739305e307,6.013594602039185e307,6.015593802339065e307,6.017593002638945e307,6.019592202938825e307,6.021591403238705e307,6.023590603538585e307,6.025589803838465e307,6.027589004138345e307,6.029588204438225e307,6.031587404738105e307,6.033586605037985e307,6.035585805337865e307,6.037585005637745e307,6.039584205937625e307,6.041583406237505e307,6.043582606537385e307,6.045581806837265e307,6.047581007137145e307,6.049580207437025e307,6.051579407736905e307,6.053578608036785e307,6.055577808336665e307,6.057577008636545e307,6.059576208936425e307,6.061575409236305e307,6.063574609536185e307,6.065573809836065e307,6.067573010135945e307,6.069572210435825e307,6.071571410735705e307,6.073570611035585e307,6.075569811335465e307,6.077569011635346e307,6.079568211935226e307,6.081567412235106e307,6.083566612534986e307,6.085565812834867e307,6.087565013134747e307,6.089564213434627e307,6.091563413734507e307,6.093562614034387e307,6.095561814334267e307,6.097561014634147e307,6.099560214934027e307,6.101559415233907e307,6.103558615533787e307,6.105557815833667e307,6.107557016133547e307,6.109556216433427e307,6.111555416733307e307,6.113554617033187e307,6.115553817333067e307,6.117553017632947e307,6.119552217932827e307,6.121551418232707e307,6.123550618532587e307,6.125549818832467e307,6.127549019132347e307,6.129548219432227e307,6.131547419732107e307,6.133546620031987e307,6.135545820331867e307,6.137545020631747e307,6.139544220931627e307,6.141543421231507e307,6.143542621531387e307,6.145541821831267e307,6.147541022131147e307,6.149540222431027e307,6.151539422730907e307,6.153538623030788e307,6.155537823330668e307,6.157537023630548e307,6.159536223930428e307,6.161535424230308e307,6.163534624530188e307,6.165533824830068e307,6.167533025129948e307,6.169532225429828e307,6.171531425729708e307,6.173530626029588e307,6.175529826329468e307,6.177529026629348e307,6.179528226929229e307,6.181527427229109e307,6.183526627528989e307,6.185525827828869e307,6.187525028128749e307,6.189524228428629e307,6.191523428728509e307,6.193522629028389e307,6.195521829328269e307,6.197521029628149e307,6.199520229928029e307,6.201519430227909e307,6.203518630527789e307,6.205517830827669e307,6.207517031127549e307,6.209516231427429e307,6.211515431727309e307,6.213514632027189e307,6.215513832327069e307,6.217513032626949e307,6.219512232926829e307,6.221511433226709e307,6.223510633526589e307,6.225509833826469e307,6.22750903412635e307,6.22950823442623e307,6.23150743472611e307,6.23350663502599e307,6.23550583532587e307,6.23750503562575e307,6.23950423592563e307,6.24150343622551e307,6.24350263652539e307,6.24550183682527e307,6.24750103712515e307,6.24950023742503e307,6.25149943772491e307,6.25349863802479e307,6.25549783832467e307,6.25749703862455e307,6.25949623892443e307,6.26149543922431e307,6.26349463952419e307,6.26549383982407e307,6.26749304012395e307,6.26949224042383e307,6.27149144072371e307,6.27349064102359e307,6.275489841323471e307,6.277489041623351e307,6.279488241923231e307,6.281487442223111e307,6.283486642522991e307,6.285485842822871e307,6.287485043122751e307,6.289484243422631e307,6.291483443722511e307,6.293482644022391e307,6.295481844322271e307,6.297481044622151e307,6.299480244922031e307,6.301479445221912e307,6.303478645521792e307,6.305477845821672e307,6.307477046121552e307,6.309476246421432e307,6.311475446721312e307,6.313474647021192e307,6.315473847321072e307,6.317473047620952e307,6.319472247920832e307,6.321471448220712e307,6.323470648520592e307,6.325469848820472e307,6.327469049120352e307,6.329468249420232e307,6.331467449720112e307,6.333466650019992e307,6.335465850319872e307,6.337465050619752e307,6.339464250919632e307,6.341463451219512e307,6.343462651519392e307,6.345461851819272e307,6.347461052119152e307,6.349460252419032e307,6.351459452718912e307,6.353458653018792e307,6.355457853318672e307,6.357457053618552e307,6.359456253918432e307,6.361455454218312e307,6.363454654518192e307,6.365453854818072e307,6.367453055117952e307,6.369452255417833e307,6.371451455717713e307,6.373450656017593e307,6.3754498563174735e307,6.377449056617354e307,6.379448256917234e307,6.381447457217114e307,6.383446657516994e307,6.385445857816874e307,6.387445058116754e307,6.389444258416634e307,6.391443458716514e307,6.393442659016394e307,6.395441859316274e307,6.397441059616154e307,6.399440259916034e307,6.401439460215914e307,6.403438660515794e307,6.405437860815674e307,6.407437061115554e307,6.409436261415434e307,6.411435461715314e307,6.413434662015194e307,6.415433862315074e307,6.417433062614954e307,6.419432262914834e307,6.421431463214714e307,6.423430663514594e307,6.425429863814474e307,6.427429064114354e307,6.429428264414234e307,6.431427464714114e307,6.433426665013994e307,6.435425865313874e307,6.437425065613754e307,6.439424265913634e307,6.441423466213514e307,6.443422666513394e307,6.445421866813274e307,6.447421067113154e307,6.449420267413034e307,6.451419467712915e307,6.453418668012795e307,6.455417868312675e307,6.457417068612555e307,6.459416268912435e307,6.461415469212315e307,6.463414669512196e307,6.465413869812076e307,6.467413070111956e307,6.469412270411836e307,6.471411470711716e307,6.473410671011596e307,6.475409871311476e307,6.477409071611356e307,6.479408271911236e307,6.481407472211116e307,6.483406672510996e307,6.485405872810876e307,6.487405073110756e307,6.489404273410636e307,6.491403473710516e307,6.493402674010396e307,6.495401874310276e307,6.497401074610156e307,6.499400274910036e307,6.501399475209916e307,6.503398675509796e307,6.505397875809676e307,6.507397076109556e307,6.509396276409436e307,6.511395476709316e307,6.513394677009196e307,6.515393877309076e307,6.517393077608956e307,6.519392277908836e307,6.521391478208716e307,6.523390678508596e307,6.525389878808477e307,6.527389079108357e307,6.529388279408237e307,6.531387479708117e307,6.533386680007997e307,6.535385880307877e307,6.537385080607757e307,6.539384280907637e307,6.541383481207517e307,6.543382681507397e307,6.545381881807277e307,6.547381082107157e307,6.549380282407037e307,6.551379482706917e307,6.553378683006797e307,6.555377883306677e307,6.557377083606558e307,6.559376283906438e307,6.561375484206318e307,6.563374684506198e307,6.565373884806078e307,6.567373085105958e307,6.569372285405838e307,6.571371485705718e307,6.573370686005598e307,6.575369886305478e307,6.577369086605358e307,6.579368286905238e307,6.581367487205118e307,6.583366687504998e307,6.585365887804878e307,6.587365088104758e307,6.589364288404638e307,6.591363488704518e307,6.593362689004398e307,6.595361889304278e307,6.597361089604158e307,6.599360289904039e307,6.601359490203919e307,6.603358690503799e307,6.605357890803679e307,6.607357091103559e307,6.609356291403439e307,6.611355491703319e307,6.613354692003199e307,6.615353892303079e307,6.617353092602959e307,6.619352292902839e307,6.621351493202719e307,6.623350693502599e307,6.625349893802479e307,6.627349094102359e307,6.629348294402239e307,6.631347494702119e307,6.633346695001999e307,6.635345895301879e307,6.637345095601759e307,6.639344295901639e307,6.641343496201519e307,6.643342696501399e307,6.645341896801279e307,6.647341097101159e307,6.649340297401039e307,6.65133949770092e307,6.6533386980008e307,6.65533789830068e307,6.65733709860056e307,6.65933629890044e307,6.66133549920032e307,6.6633346995002e307,6.66533389980008e307,6.66733310009996e307,6.66933230039984e307,6.67133150069972e307,6.6733307009996e307,6.675329901299481e307,6.677329101599361e307,6.679328301899241e307,6.681327502199121e307,6.683326702499001e307,6.685325902798881e307,6.687325103098761e307,6.689324303398641e307,6.691323503698521e307,6.693322703998401e307,6.695321904298281e307,6.697321104598161e307,6.699320304898041e307,6.701319505197921e307,6.703318705497801e307,6.705317905797681e307,6.707317106097561e307,6.709316306397441e307,6.711315506697321e307,6.713314706997201e307,6.715313907297081e307,6.717313107596961e307,6.719312307896841e307,6.721311508196721e307,6.723310708496601e307,6.725309908796481e307,6.727309109096361e307,6.729308309396241e307,6.731307509696121e307,6.733306709996001e307,6.735305910295881e307,6.737305110595761e307,6.739304310895641e307,6.741303511195521e307,6.743302711495401e307,6.745301911795282e307,6.747301112095162e307,6.749300312395043e307,6.751299512694923e307,6.753298712994803e307,6.755297913294683e307,6.757297113594563e307,6.759296313894443e307,6.761295514194323e307,6.763294714494203e307,6.765293914794083e307,6.767293115093963e307,6.769292315393843e307,6.771291515693723e307,6.773290715993603e307,6.775289916293483e307,6.777289116593363e307,6.779288316893243e307,6.781287517193123e307,6.783286717493003e307,6.785285917792883e307,6.787285118092763e307,6.789284318392643e307,6.791283518692523e307,6.793282718992403e307,6.795281919292283e307,6.797281119592163e307,6.799280319892043e307,6.801279520191923e307,6.803278720491803e307,6.805277920791683e307,6.807277121091563e307,6.809276321391443e307,6.811275521691323e307,6.813274721991203e307,6.815273922291083e307,6.817273122590963e307,6.819272322890843e307,6.821271523190723e307,6.823270723490604e307,6.825269923790484e307,6.827269124090364e307,6.829268324390244e307,6.831267524690124e307,6.833266724990004e307,6.835265925289884e307,6.837265125589764e307,6.839264325889644e307,6.841263526189525e307,6.843262726489405e307,6.845261926789285e307,6.847261127089165e307,6.849260327389045e307,6.851259527688925e307,6.853258727988805e307,6.855257928288685e307,6.857257128588565e307,6.859256328888445e307,6.861255529188325e307,6.863254729488205e307,6.865253929788085e307,6.867253130087965e307,6.869252330387845e307,6.871251530687725e307,6.873250730987605e307,6.875249931287485e307,6.877249131587365e307,6.879248331887245e307,6.881247532187125e307,6.883246732487005e307,6.885245932786885e307,6.887245133086765e307,6.889244333386645e307,6.891243533686525e307,6.893242733986405e307,6.895241934286285e307,6.897241134586165e307,6.899240334886046e307,6.901239535185926e307,6.903238735485806e307,6.905237935785686e307,6.907237136085566e307,6.909236336385446e307,6.911235536685326e307,6.913234736985206e307,6.915233937285086e307,6.917233137584966e307,6.919232337884846e307,6.921231538184726e307,6.923230738484606e307,6.925229938784486e307,6.927229139084366e307,6.929228339384246e307,6.931227539684126e307,6.933226739984006e307,6.935225940283887e307,6.937225140583767e307,6.939224340883647e307,6.941223541183527e307,6.943222741483407e307,6.945221941783287e307,6.947221142083167e307,6.949220342383047e307,6.951219542682927e307,6.953218742982807e307,6.955217943282687e307,6.957217143582567e307,6.959216343882447e307,6.961215544182327e307,6.963214744482207e307,6.965213944782087e307,6.967213145081967e307,6.969212345381847e307,6.971211545681727e307,6.973210745981608e307,6.975209946281488e307,6.977209146581368e307,6.979208346881248e307,6.981207547181128e307,6.983206747481008e307,6.985205947780888e307,6.987205148080768e307,6.989204348380648e307,6.991203548680528e307,6.993202748980408e307,6.995201949280288e307,6.997201149580168e307,6.999200349880048e307,7.001199550179928e307,7.003198750479808e307,7.005197950779688e307,7.007197151079568e307,7.009196351379448e307,7.011195551679328e307,7.013194751979208e307,7.015193952279088e307,7.017193152578968e307,7.019192352878848e307,7.021191553178728e307,7.023190753478608e307,7.025189953778488e307,7.027189154078368e307,7.029188354378249e307,7.031187554678129e307,7.033186754978009e307,7.035185955277889e307,7.037185155577769e307,7.039184355877649e307,7.041183556177529e307,7.043182756477409e307,7.045181956777289e307,7.04718115707717e307,7.04918035737705e307,7.05117955767693e307,7.05317875797681e307,7.05517795827669e307,7.05717715857657e307,7.05917635887645e307,7.06117555917633e307,7.06317475947621e307,7.06517395977609e307,7.06717316007597e307,7.06917236037585e307,7.07117156067573e307,7.07317076097561e307,7.07516996127549e307,7.07716916157537e307,7.07916836187525e307,7.08116756217513e307,7.08316676247501e307,7.08516596277489e307,7.08716516307477e307,7.08916436337465e307,7.09116356367453e307,7.09316276397441e307,7.09516196427429e307,7.09716116457417e307,7.09916036487405e307,7.10115956517393e307,7.10315876547381e307,7.10515796577369e307,7.10715716607357e307,7.10915636637345e307,7.11115556667333e307,7.11315476697321e307,7.11515396727309e307,7.11715316757297e307,7.11915236787285e307,7.121151568172731e307,7.123150768472612e307,7.125149968772492e307,7.127149169072372e307,7.129148369372252e307,7.131147569672132e307,7.133146769972012e307,7.135145970271892e307,7.137145170571772e307,7.139144370871652e307,7.141143571171532e307,7.143142771471412e307,7.145141971771292e307,7.147141172071172e307,7.149140372371052e307,7.151139572670932e307,7.153138772970812e307,7.155137973270692e307,7.157137173570572e307,7.159136373870452e307,7.161135574170332e307,7.163134774470212e307,7.165133974770092e307,7.167133175069972e307,7.169132375369852e307,7.171131575669732e307,7.173130775969612e307,7.175129976269492e307,7.177129176569372e307,7.179128376869252e307,7.181127577169132e307,7.183126777469012e307,7.185125977768892e307,7.187125178068772e307,7.189124378368652e307,7.191123578668532e307,7.193122778968412e307,7.195121979268292e307,7.197121179568173e307,7.199120379868053e307,7.201119580167933e307,7.203118780467813e307,7.205117980767693e307,7.207117181067573e307,7.209116381367453e307,7.211115581667333e307,7.213114781967213e307,7.215113982267093e307,7.217113182566974e307,7.219112382866854e307,7.221111583166734e307,7.223110783466614e307,7.225109983766494e307,7.227109184066374e307,7.229108384366254e307,7.231107584666134e307,7.233106784966014e307,7.235105985265894e307,7.237105185565774e307,7.239104385865654e307,7.241103586165534e307,7.243102786465414e307,7.245101986765294e307,7.247101187065174e307,7.249100387365054e307,7.251099587664934e307,7.253098787964814e307,7.255097988264694e307,7.257097188564574e307,7.259096388864454e307,7.261095589164334e307,7.263094789464214e307,7.265093989764094e307,7.267093190063974e307,7.269092390363854e307,7.271091590663735e307,7.273090790963615e307,7.275089991263495e307,7.277089191563375e307,7.279088391863255e307,7.281087592163135e307,7.283086792463015e307,7.285085992762895e307,7.287085193062775e307,7.289084393362655e307,7.291083593662535e307,7.293082793962415e307,7.295081994262295e307,7.297081194562175e307,7.299080394862055e307,7.301079595161935e307,7.303078795461815e307,7.305077995761695e307,7.307077196061575e307,7.309076396361455e307,7.311075596661335e307,7.313074796961216e307,7.315073997261096e307,7.317073197560976e307,7.319072397860856e307,7.321071598160736e307,7.323070798460616e307,7.325069998760496e307,7.327069199060376e307,7.329068399360256e307,7.331067599660136e307,7.333066799960016e307,7.335066000259896e307,7.337065200559776e307,7.339064400859656e307,7.341063601159536e307,7.343062801459416e307,7.345062001759297e307,7.347061202059177e307,7.349060402359057e307,7.351059602658937e307,7.353058802958817e307,7.355058003258697e307,7.357057203558577e307,7.359056403858457e307,7.361055604158337e307,7.363054804458217e307,7.365054004758097e307,7.367053205057977e307,7.369052405357857e307,7.371051605657737e307,7.373050805957617e307,7.375050006257497e307,7.377049206557377e307,7.379048406857257e307,7.381047607157137e307,7.383046807457017e307,7.385046007756897e307,7.387045208056777e307,7.389044408356657e307,7.391043608656537e307,7.393042808956417e307,7.395042009256297e307,7.397041209556177e307,7.399040409856057e307,7.401039610155937e307,7.403038810455817e307,7.405038010755697e307,7.407037211055578e307,7.409036411355458e307,7.411035611655338e307,7.413034811955218e307,7.415034012255098e307,7.417033212554978e307,7.419032412854858e307,7.421031613154739e307,7.423030813454619e307,7.425030013754499e307,7.427029214054379e307,7.429028414354259e307,7.431027614654139e307,7.433026814954019e307,7.435026015253899e307,7.437025215553779e307,7.439024415853659e307,7.441023616153539e307,7.443022816453419e307,7.445022016753299e307,7.447021217053179e307,7.449020417353059e307,7.451019617652939e307,7.453018817952819e307,7.455018018252699e307,7.457017218552579e307,7.459016418852459e307,7.461015619152339e307,7.463014819452219e307,7.465014019752099e307,7.467013220051979e307,7.469012420351859e307,7.471011620651739e307,7.473010820951619e307,7.475010021251499e307,7.477009221551379e307,7.479008421851259e307,7.481007622151139e307,7.483006822451019e307,7.485006022750899e307,7.487005223050779e307,7.489004423350659e307,7.491003623650539e307,7.493002823950419e307,7.4950020242503e307,7.49700122455018e307,7.49900042485006e307,7.500999625149941e307,7.502998825449821e307,7.504998025749701e307,7.506997226049581e307,7.508996426349461e307,7.510995626649341e307,7.512994826949221e307,7.514994027249101e307,7.516993227548981e307,7.518992427848861e307,7.520991628148741e307,7.522990828448621e307,7.524990028748501e307,7.526989229048381e307,7.528988429348261e307,7.530987629648141e307,7.532986829948021e307,7.534986030247901e307,7.536985230547781e307,7.538984430847661e307,7.540983631147541e307,7.542982831447421e307,7.544982031747301e307,7.546981232047181e307,7.548980432347061e307,7.550979632646941e307,7.552978832946821e307,7.554978033246701e307,7.556977233546581e307,7.558976433846461e307,7.560975634146341e307,7.562974834446221e307,7.564974034746101e307,7.566973235045981e307,7.568972435345862e307,7.570971635645742e307,7.572970835945622e307,7.574970036245502e307,7.576969236545382e307,7.578968436845262e307,7.580967637145142e307,7.582966837445022e307,7.584966037744902e307,7.586965238044782e307,7.588964438344662e307,7.590963638644542e307,7.592962838944422e307,7.594962039244303e307,7.596961239544183e307,7.598960439844063e307,7.600959640143943e307,7.602958840443823e307,7.604958040743703e307,7.606957241043583e307,7.608956441343463e307,7.610955641643343e307,7.612954841943223e307,7.614954042243103e307,7.616953242542983e307,7.618952442842863e307,7.620951643142743e307,7.622950843442623e307,7.624950043742503e307,7.626949244042383e307,7.628948444342263e307,7.630947644642143e307,7.632946844942023e307,7.634946045241903e307,7.636945245541783e307,7.638944445841663e307,7.640943646141543e307,7.6429428464414235e307,7.644942046741304e307,7.646941247041184e307,7.648940447341064e307,7.650939647640944e307,7.652938847940824e307,7.654938048240704e307,7.656937248540584e307,7.658936448840464e307,7.660935649140344e307,7.662934849440224e307,7.664934049740104e307,7.666933250039984e307,7.668932450339864e307,7.670931650639744e307,7.672930850939624e307,7.674930051239504e307,7.676929251539384e307,7.678928451839264e307,7.680927652139144e307,7.682926852439024e307,7.684926052738904e307,7.686925253038784e307,7.688924453338665e307,7.690923653638545e307,7.692922853938425e307,7.694922054238305e307,7.696921254538185e307,7.698920454838065e307,7.700919655137945e307,7.702918855437825e307,7.704918055737705e307,7.706917256037585e307,7.708916456337465e307,7.710915656637345e307,7.712914856937225e307,7.714914057237105e307,7.716913257536985e307,7.718912457836866e307,7.720911658136746e307,7.722910858436626e307,7.724910058736506e307,7.726909259036386e307,7.728908459336266e307,7.730907659636146e307,7.732906859936026e307,7.734906060235906e307,7.736905260535786e307,7.738904460835666e307,7.740903661135546e307,7.742902861435426e307,7.744902061735306e307,7.746901262035186e307,7.748900462335066e307,7.750899662634946e307,7.752898862934826e307,7.754898063234706e307,7.756897263534586e307,7.758896463834466e307,7.760895664134346e307,7.762894864434226e307,7.764894064734106e307,7.766893265033986e307,7.768892465333866e307,7.770891665633746e307,7.772890865933626e307,7.774890066233506e307,7.776889266533386e307,7.778888466833266e307,7.780887667133146e307,7.782886867433026e307,7.784886067732907e307,7.786885268032787e307,7.788884468332667e307,7.790883668632547e307,7.792882868932428e307,7.794882069232308e307,7.796881269532188e307,7.798880469832068e307,7.800879670131948e307,7.802878870431828e307,7.804878070731708e307,7.806877271031588e307,7.808876471331468e307,7.810875671631348e307,7.812874871931228e307,7.814874072231108e307,7.816873272530988e307,7.818872472830868e307,7.820871673130748e307,7.822870873430628e307,7.824870073730508e307,7.826869274030388e307,7.828868474330268e307,7.830867674630148e307,7.832866874930028e307,7.834866075229908e307,7.836865275529788e307,7.838864475829668e307,7.840863676129548e307,7.842862876429428e307,7.844862076729308e307,7.846861277029188e307,7.848860477329068e307,7.850859677628948e307,7.852858877928828e307,7.854858078228708e307,7.856857278528588e307,7.858856478828468e307,7.860855679128348e307,7.862854879428228e307,7.864854079728108e307,7.866853280027989e307,7.868852480327869e307,7.870851680627749e307,7.872850880927629e307,7.874850081227509e307,7.876849281527389e307,7.87884848182727e307,7.88084768212715e307,7.88284688242703e307,7.88484608272691e307,7.88684528302679e307,7.88884448332667e307,7.89084368362655e307,7.89284288392643e307,7.89484208422631e307,7.89684128452619e307,7.89884048482607e307,7.90083968512595e307,7.90283888542583e307,7.90483808572571e307,7.90683728602559e307,7.90883648632547e307,7.91083568662535e307,7.91283488692523e307,7.91483408722511e307,7.91683328752499e307,7.91883248782487e307,7.92083168812475e307,7.92283088842463e307,7.92483008872451e307,7.92682928902439e307,7.92882848932427e307,7.93082768962415e307,7.93282688992403e307,7.93482609022391e307,7.93682529052379e307,7.93882449082367e307,7.94082369112355e307,7.942822891423431e307,7.944822091723311e307,7.946821292023191e307,7.948820492323071e307,7.950819692622951e307,7.952818892922831e307,7.954818093222711e307,7.956817293522591e307,7.958816493822471e307,7.960815694122351e307,7.962814894422231e307,7.964814094722111e307,7.966813295021991e307,7.968812495321871e307,7.970811695621751e307,7.972810895921632e307,7.974810096221512e307,7.976809296521392e307,7.978808496821272e307,7.980807697121152e307,7.982806897421032e307,7.984806097720912e307,7.986805298020792e307,7.988804498320672e307,7.990803698620552e307,7.992802898920432e307,7.994802099220312e307,7.996801299520192e307,7.998800499820072e307,8.000799700119952e307,8.002798900419832e307,8.004798100719712e307,8.006797301019592e307,8.008796501319472e307,8.010795701619352e307,8.012794901919232e307,8.014794102219112e307,8.016793302518993e307,8.018792502818873e307,8.020791703118753e307,8.022790903418633e307,8.024790103718513e307,8.026789304018393e307,8.028788504318273e307,8.030787704618153e307,8.032786904918033e307,8.034786105217913e307,8.036785305517793e307,8.038784505817673e307,8.040783706117553e307,8.042782906417433e307,8.044782106717313e307,8.046781307017193e307,8.048780507317073e307,8.050779707616953e307,8.052778907916833e307,8.054778108216713e307,8.056777308516593e307,8.058776508816473e307,8.060775709116353e307,8.062774909416233e307,8.064774109716113e307,8.066773310015994e307,8.068772510315874e307,8.070771710615754e307,8.072770910915634e307,8.074770111215514e307,8.076769311515394e307,8.078768511815274e307,8.080767712115154e307,8.082766912415034e307,8.084766112714914e307,8.086765313014794e307,8.088764513314674e307,8.090763713614555e307,8.092762913914435e307,8.094762114214315e307,8.096761314514195e307,8.098760514814075e307,8.100759715113955e307,8.102758915413835e307,8.104758115713715e307,8.106757316013595e307,8.108756516313475e307,8.110755716613355e307,8.112754916913235e307,8.114754117213115e307,8.116753317512995e307,8.118752517812875e307,8.120751718112755e307,8.122750918412635e307,8.124750118712515e307,8.126749319012395e307,8.128748519312275e307,8.130747719612155e307,8.132746919912035e307,8.134746120211915e307,8.136745320511795e307,8.138744520811675e307,8.140743721111555e307,8.142742921411435e307,8.144742121711315e307,8.146741322011195e307,8.148740522311075e307,8.150739722610955e307,8.152738922910835e307,8.154738123210715e307,8.156737323510595e307,8.158736523810475e307,8.160735724110356e307,8.162734924410236e307,8.164734124710116e307,8.166733325009997e307,8.168732525309877e307,8.170731725609757e307,8.172730925909637e307,8.174730126209517e307,8.176729326509397e307,8.178728526809277e307,8.180727727109157e307,8.182726927409037e307,8.184726127708917e307,8.186725328008797e307,8.188724528308677e307,8.190723728608557e307,8.192722928908437e307,8.194722129208317e307,8.196721329508197e307,8.198720529808077e307,8.200719730107957e307,8.202718930407837e307,8.204718130707717e307,8.206717331007597e307,8.208716531307477e307,8.210715731607357e307,8.212714931907237e307,8.214714132207117e307,8.216713332506997e307,8.218712532806877e307,8.220711733106757e307,8.222710933406637e307,8.224710133706517e307,8.226709334006397e307,8.228708534306277e307,8.230707734606157e307,8.232706934906037e307,8.234706135205917e307,8.236705335505797e307,8.238704535805677e307,8.240703736105558e307,8.242702936405438e307,8.244702136705318e307,8.246701337005198e307,8.248700537305078e307,8.250699737604958e307,8.252698937904838e307,8.254698138204718e307,8.256697338504599e307,8.258696538804479e307,8.260695739104359e307,8.262694939404239e307,8.264694139704119e307,8.266693340003999e307,8.268692540303879e307,8.270691740603759e307,8.272690940903639e307,8.274690141203519e307,8.276689341503399e307,8.278688541803279e307,8.280687742103159e307,8.282686942403039e307,8.284686142702919e307,8.286685343002799e307,8.288684543302679e307,8.290683743602559e307,8.292682943902439e307,8.294682144202319e307,8.296681344502199e307,8.298680544802079e307,8.300679745101959e307,8.302678945401839e307,8.304678145701719e307,8.306677346001599e307,8.308676546301479e307,8.310675746601359e307,8.312674946901239e307,8.31467414720112e307,8.316673347501e307,8.31867254780088e307,8.32067174810076e307,8.32267094840064e307,8.32467014870052e307,8.3266693490004e307,8.32866854930028e307,8.33066774960016e307,8.33266694990004e307,8.33466615019992e307,8.3366653504998e307,8.33866455079968e307,8.34066375109956e307,8.34266295139944e307,8.34466215169932e307,8.3466613519992e307,8.34866055229908e307,8.350659752598961e307,8.352658952898841e307,8.354658153198721e307,8.356657353498601e307,8.358656553798481e307,8.360655754098361e307,8.362654954398241e307,8.364654154698121e307,8.366653354998001e307,8.368652555297881e307,8.370651755597761e307,8.372650955897641e307,8.374650156197521e307,8.376649356497401e307,8.378648556797281e307,8.380647757097161e307,8.382646957397041e307,8.384646157696921e307,8.386645357996801e307,8.3886445582966815e307,8.390643758596562e307,8.392642958896442e307,8.394642159196322e307,8.396641359496202e307,8.398640559796082e307,8.400639760095962e307,8.402638960395842e307,8.404638160695722e307,8.406637360995602e307,8.408636561295482e307,8.410635761595362e307,8.412634961895242e307,8.414634162195122e307,8.416633362495002e307,8.418632562794882e307,8.420631763094762e307,8.422630963394642e307,8.424630163694522e307,8.426629363994402e307,8.428628564294282e307,8.430627764594162e307,8.432626964894042e307,8.434626165193922e307,8.436625365493802e307,8.438624565793682e307,8.440623766093562e307,8.442622966393442e307,8.444622166693323e307,8.446621366993203e307,8.448620567293083e307,8.450619767592963e307,8.452618967892843e307,8.454618168192723e307,8.456617368492603e307,8.458616568792483e307,8.460615769092363e307,8.462614969392243e307,8.464614169692124e307,8.466613369992004e307,8.468612570291884e307,8.470611770591764e307,8.472610970891644e307,8.474610171191524e307,8.476609371491404e307,8.478608571791284e307,8.480607772091164e307,8.482606972391044e307,8.484606172690924e307,8.486605372990804e307,8.488604573290684e307,8.490603773590564e307,8.492602973890444e307,8.494602174190324e307,8.496601374490204e307,8.498600574790084e307,8.500599775089964e307,8.502598975389844e307,8.504598175689724e307,8.506597375989604e307,8.508596576289484e307,8.510595776589364e307,8.512594976889244e307,8.514594177189124e307,8.516593377489004e307,8.518592577788884e307,8.520591778088764e307,8.522590978388644e307,8.524590178688524e307,8.526589378988404e307,8.528588579288284e307,8.530587779588164e307,8.532586979888044e307,8.534586180187924e307,8.536585380487804e307,8.538584580787686e307,8.540583781087566e307,8.542582981387446e307,8.544582181687326e307,8.546581381987206e307,8.548580582287086e307,8.550579782586966e307,8.552578982886846e307,8.554578183186726e307,8.556577383486606e307,8.558576583786486e307,8.560575784086366e307,8.562574984386246e307,8.564574184686126e307,8.566573384986006e307,8.568572585285886e307,8.570571785585766e307,8.572570985885646e307,8.574570186185526e307,8.576569386485406e307,8.578568586785286e307,8.580567787085166e307,8.582566987385046e307,8.584566187684926e307,8.586565387984806e307,8.588564588284686e307,8.590563788584566e307,8.592562988884446e307,8.594562189184326e307,8.596561389484206e307,8.598560589784086e307,8.600559790083966e307,8.602558990383846e307,8.604558190683726e307,8.606557390983606e307,8.608556591283486e307,8.610555791583366e307,8.612554991883247e307,8.614554192183127e307,8.616553392483007e307,8.618552592782887e307,8.620551793082767e307,8.622550993382647e307,8.624550193682527e307,8.626549393982407e307,8.628548594282287e307,8.630547794582167e307,8.632546994882048e307,8.634546195181928e307,8.636545395481808e307,8.638544595781688e307,8.640543796081568e307,8.642542996381448e307,8.644542196681328e307,8.646541396981208e307,8.648540597281088e307,8.650539797580968e307,8.652538997880848e307,8.654538198180728e307,8.656537398480608e307,8.658536598780488e307,8.660535799080368e307,8.662534999380248e307,8.664534199680128e307,8.666533399980008e307,8.668532600279888e307,8.670531800579768e307,8.672531000879648e307,8.674530201179528e307,8.676529401479408e307,8.678528601779288e307,8.680527802079168e307,8.682527002379048e307,8.684526202678928e307,8.686525402978808e307,8.688524603278689e307,8.690523803578569e307,8.692523003878449e307,8.694522204178329e307,8.696521404478209e307,8.698520604778089e307,8.700519805077969e307,8.702519005377849e307,8.704518205677729e307,8.706517405977609e307,8.708516606277489e307,8.710515806577369e307,8.712515006877249e307,8.714514207177129e307,8.716513407477009e307,8.718512607776889e307,8.720511808076769e307,8.722511008376649e307,8.724510208676529e307,8.72650940897641e307,8.72850860927629e307,8.73050780957617e307,8.73250700987605e307,8.73450621017593e307,8.73650541047581e307,8.73850461077569e307,8.74050381107557e307,8.74250301137545e307,8.74450221167533e307,8.74650141197521e307,8.74850061227509e307,8.75049981257497e307,8.75249901287485e307,8.75449821317473e307,8.75649741347461e307,8.75849661377449e307,8.76049581407437e307,8.762495014374251e307,8.764494214674131e307,8.766493414974011e307,8.768492615273891e307,8.770491815573771e307,8.772491015873651e307,8.774490216173531e307,8.776489416473411e307,8.778488616773291e307,8.780487817073171e307,8.782487017373051e307,8.784486217672931e307,8.786485417972811e307,8.788484618272691e307,8.790483818572571e307,8.792483018872451e307,8.794482219172331e307,8.796481419472211e307,8.798480619772091e307,8.800479820071971e307,8.802479020371851e307,8.804478220671731e307,8.806477420971611e307,8.808476621271491e307,8.810475821571371e307,8.812475021871251e307,8.814474222171131e307,8.816473422471011e307,8.818472622770891e307,8.820471823070771e307,8.822471023370652e307,8.824470223670532e307,8.826469423970412e307,8.828468624270292e307,8.830467824570172e307,8.832467024870052e307,8.834466225169932e307,8.836465425469813e307,8.838464625769693e307,8.840463826069573e307,8.842463026369453e307,8.844462226669333e307,8.846461426969213e307,8.848460627269093e307,8.850459827568973e307,8.852459027868853e307,8.854458228168733e307,8.856457428468613e307,8.858456628768493e307,8.860455829068373e307,8.862455029368253e307,8.864454229668133e307,8.866453429968013e307,8.868452630267893e307,8.870451830567773e307,8.872451030867653e307,8.874450231167533e307,8.876449431467413e307,8.878448631767293e307,8.880447832067173e307,8.882447032367053e307,8.884446232666933e307,8.886445432966813e307,8.888444633266693e307,8.890443833566573e307,8.892443033866453e307,8.894442234166333e307,8.896441434466213e307,8.898440634766093e307,8.900439835065973e307,8.902439035365853e307,8.904438235665733e307,8.906437435965613e307,8.908436636265493e307,8.910435836565373e307,8.912435036865254e307,8.914434237165134e307,8.916433437465015e307,8.918432637764895e307,8.920431838064775e307,8.922431038364655e307,8.924430238664535e307,8.926429438964415e307,8.928428639264295e307,8.930427839564175e307,8.932427039864055e307,8.934426240163935e307,8.936425440463815e307,8.938424640763695e307,8.940423841063575e307,8.942423041363455e307,8.944422241663335e307,8.946421441963215e307,8.948420642263095e307,8.950419842562975e307,8.952419042862855e307,8.954418243162735e307,8.956417443462615e307,8.958416643762495e307,8.960415844062375e307,8.962415044362255e307,8.964414244662135e307,8.966413444962015e307,8.968412645261895e307,8.970411845561775e307,8.972411045861655e307,8.974410246161535e307,8.976409446461415e307,8.978408646761295e307,8.980407847061175e307,8.982407047361055e307,8.984406247660935e307,8.986405447960816e307,8.988404648260696e307,8.990403848560577e307,8.992403048860457e307,8.994402249160337e307,8.996401449460217e307,8.998400649760097e307,9.000399850059977e307,9.002399050359857e307,9.004398250659737e307,9.006397450959617e307,9.008396651259497e307,9.010395851559377e307,9.012395051859257e307,9.014394252159137e307,9.016393452459017e307,9.018392652758897e307,9.020391853058777e307,9.022391053358657e307,9.024390253658537e307,9.026389453958417e307,9.028388654258297e307,9.030387854558177e307,9.032387054858057e307,9.034386255157937e307,9.036385455457817e307,9.038384655757697e307,9.040383856057577e307,9.042383056357457e307,9.044382256657337e307,9.046381456957217e307,9.048380657257097e307,9.050379857556977e307,9.052379057856857e307,9.054378258156737e307,9.056377458456617e307,9.058376658756497e307,9.060375859056378e307,9.062375059356258e307,9.064374259656138e307,9.066373459956018e307,9.068372660255898e307,9.070371860555778e307,9.072371060855658e307,9.074370261155538e307,9.076369461455418e307,9.078368661755298e307,9.080367862055178e307,9.082367062355058e307,9.084366262654938e307,9.086365462954818e307,9.088364663254698e307,9.090363863554578e307,9.092363063854458e307,9.094362264154338e307,9.096361464454218e307,9.098360664754098e307,9.100359865053978e307,9.102359065353858e307,9.104358265653738e307,9.106357465953618e307,9.108356666253498e307,9.110355866553378e307,9.112355066853258e307,9.114354267153138e307,9.116353467453018e307,9.118352667752898e307,9.120351868052778e307,9.122351068352658e307,9.124350268652538e307,9.126349468952418e307,9.128348669252298e307,9.130347869552178e307,9.132347069852058e307,9.134346270151939e307,9.136345470451819e307,9.138344670751699e307,9.140343871051579e307,9.142343071351459e307,9.144342271651339e307,9.146341471951219e307,9.148340672251099e307,9.150339872550979e307,9.15233907285086e307,9.15433827315074e307,9.15633747345062e307,9.1583366737505e307,9.16033587405038e307,9.16233507435026e307,9.16433427465014e307,9.16633347495002e307,9.1683326752499e307,9.17033187554978e307,9.172331075849661e307,9.174330276149541e307,9.176329476449421e307,9.178328676749301e307,9.180327877049181e307,9.182327077349061e307,9.184326277648941e307,9.186325477948821e307,9.188324678248701e307,9.190323878548581e307,9.192323078848461e307,9.194322279148341e307,9.196321479448221e307,9.198320679748101e307,9.200319880047981e307,9.202319080347861e307,9.204318280647741e307,9.206317480947621e307,9.208316681247501e307,9.210315881547382e307,9.212315081847262e307,9.214314282147142e307,9.216313482447022e307,9.218312682746902e307,9.220311883046782e307,9.222311083346662e307,9.224310283646542e307,9.226309483946422e307,9.228308684246302e307,9.230307884546182e307,9.232307084846062e307,9.234306285145942e307,9.236305485445822e307,9.238304685745702e307,9.240303886045582e307,9.242303086345462e307,9.244302286645342e307,9.246301486945222e307,9.248300687245102e307,9.250299887544982e307,9.252299087844862e307,9.254298288144742e307,9.256297488444622e307,9.258296688744502e307,9.260295889044382e307,9.262295089344262e307,9.264294289644142e307,9.266293489944022e307,9.268292690243902e307,9.270291890543782e307,9.272291090843662e307,9.274290291143542e307,9.276289491443422e307,9.278288691743302e307,9.280287892043182e307,9.282287092343062e307,9.284286292642943e307,9.286285492942823e307,9.288284693242703e307,9.290283893542583e307,9.292283093842463e307,9.294282294142343e307,9.296281494442223e307,9.298280694742103e307,9.300279895041983e307,9.302279095341863e307,9.304278295641743e307,9.306277495941623e307,9.308276696241503e307,9.310275896541383e307,9.312275096841263e307,9.314274297141143e307,9.316273497441023e307,9.318272697740903e307,9.320271898040783e307,9.322271098340663e307,9.324270298640543e307,9.326269498940423e307,9.328268699240303e307,9.330267899540183e307,9.332267099840063e307,9.334266300139943e307,9.336265500439823e307,9.338264700739703e307,9.340263901039585e307,9.342263101339465e307,9.344262301639345e307,9.346261501939225e307,9.348260702239105e307,9.350259902538985e307,9.352259102838865e307,9.354258303138745e307,9.356257503438625e307,9.358256703738506e307,9.360255904038386e307,9.362255104338266e307,9.364254304638146e307,9.366253504938026e307,9.368252705237906e307,9.370251905537786e307,9.372251105837666e307,9.374250306137546e307,9.376249506437426e307,9.378248706737306e307,9.380247907037186e307,9.382247107337066e307,9.384246307636946e307,9.386245507936826e307,9.388244708236706e307,9.390243908536586e307,9.392243108836466e307,9.394242309136346e307,9.396241509436226e307,9.398240709736106e307,9.400239910035986e307,9.402239110335866e307,9.404238310635746e307,9.406237510935626e307,9.408236711235506e307,9.410235911535386e307,9.412235111835266e307,9.414234312135146e307,9.416233512435026e307,9.418232712734906e307,9.420231913034786e307,9.422231113334666e307,9.424230313634546e307,9.426229513934426e307,9.428228714234306e307,9.430227914534186e307,9.432227114834066e307,9.434226315133947e307,9.436225515433827e307,9.438224715733707e307,9.440223916033587e307,9.442223116333467e307,9.444222316633347e307,9.446221516933227e307,9.448220717233107e307,9.450219917532987e307,9.452219117832867e307,9.454218318132747e307,9.456217518432627e307,9.458216718732507e307,9.460215919032387e307,9.462215119332267e307,9.464214319632147e307,9.466213519932027e307,9.468212720231907e307,9.470211920531787e307,9.472211120831667e307,9.474210321131547e307,9.476209521431427e307,9.478208721731307e307,9.480207922031187e307,9.482207122331067e307,9.484206322630947e307,9.486205522930827e307,9.488204723230707e307,9.490203923530587e307,9.492203123830467e307,9.494202324130347e307,9.496201524430227e307,9.498200724730107e307,9.500199925029987e307,9.502199125329867e307,9.504198325629747e307,9.506197525929627e307,9.508196726229508e307,9.510195926529388e307,9.512195126829268e307,9.514194327129148e307,9.516193527429028e307,9.518192727728908e307,9.520191928028788e307,9.522191128328668e307,9.524190328628548e307,9.526189528928428e307,9.528188729228308e307,9.53018792952819e307,9.53218712982807e307,9.53418633012795e307,9.53618553042783e307,9.53818473072771e307,9.54018393102759e307,9.54218313132747e307,9.54418233162735e307,9.54618153192723e307,9.54818073222711e307,9.55017993252699e307,9.55217913282687e307,9.55417833312675e307,9.55617753342663e307,9.55817673372651e307,9.56017593402639e307,9.56217513432627e307,9.56417433462615e307,9.56617353492603e307,9.56817273522591e307,9.57017193552579e307,9.57217113582567e307,9.57417033612555e307,9.57616953642543e307,9.57816873672531e307,9.58016793702519e307,9.58216713732507e307,9.58416633762495e307,9.58616553792483e307,9.58816473822471e307,9.59016393852459e307,9.59216313882447e307,9.59416233912435e307,9.59616153942423e307,9.59816073972411e307,9.60015994002399e307,9.60215914032387e307,9.60415834062375e307,9.60615754092363e307,9.60815674122351e307,9.61015594152339e307,9.61215514182327e307,9.61415434212315e307,9.61615354242303e307,9.61815274272291e307,9.620151943022791e307,9.622151143322671e307,9.624150343622551e307,9.626149543922431e307,9.628148744222311e307,9.630147944522191e307,9.632147144822071e307,9.634146345121951e307,9.636145545421831e307,9.638144745721711e307,9.640143946021591e307,9.642143146321471e307,9.644142346621351e307,9.646141546921231e307,9.648140747221111e307,9.650139947520991e307,9.652139147820871e307,9.654138348120751e307,9.656137548420631e307,9.658136748720512e307,9.660135949020392e307,9.662135149320272e307,9.664134349620152e307,9.666133549920032e307,9.668132750219912e307,9.670131950519792e307,9.672131150819672e307,9.674130351119552e307,9.676129551419432e307,9.678128751719312e307,9.680127952019192e307,9.682127152319072e307,9.684126352618952e307,9.686125552918832e307,9.688124753218712e307,9.690123953518592e307,9.692123153818472e307,9.694122354118352e307,9.696121554418232e307,9.698120754718112e307,9.700119955017992e307,9.702119155317872e307,9.704118355617752e307,9.706117555917632e307,9.708116756217512e307,9.710115956517392e307,9.712115156817272e307,9.714114357117152e307,9.716113557417032e307,9.718112757716914e307,9.720111958016794e307,9.722111158316674e307,9.724110358616554e307,9.726109558916434e307,9.728108759216314e307,9.730107959516194e307,9.732107159816075e307,9.734106360115955e307,9.736105560415835e307,9.738104760715715e307,9.740103961015595e307,9.742103161315475e307,9.744102361615355e307,9.746101561915235e307,9.748100762215115e307,9.750099962514995e307,9.752099162814875e307,9.754098363114755e307,9.756097563414635e307,9.758096763714515e307,9.760095964014395e307,9.762095164314275e307,9.764094364614155e307,9.766093564914035e307,9.768092765213915e307,9.770091965513795e307,9.772091165813675e307,9.774090366113555e307,9.776089566413435e307,9.778088766713315e307,9.780087967013195e307,9.782087167313075e307,9.784086367612955e307,9.786085567912835e307,9.788084768212715e307,9.790083968512595e307,9.792083168812475e307,9.794082369112355e307,9.796081569412235e307,9.798080769712115e307,9.800079970011995e307,9.802079170311875e307,9.804078370611755e307,9.806077570911636e307,9.808076771211516e307,9.810075971511396e307,9.812075171811276e307,9.814074372111156e307,9.816073572411036e307,9.818072772710916e307,9.820071973010796e307,9.822071173310676e307,9.824070373610556e307,9.826069573910436e307,9.828068774210316e307,9.830067974510196e307,9.832067174810076e307,9.834066375109956e307,9.836065575409836e307,9.838064775709716e307,9.840063976009596e307,9.842063176309476e307,9.844062376609356e307,9.846061576909236e307,9.848060777209116e307,9.850059977508996e307,9.852059177808876e307,9.854058378108756e307,9.856057578408636e307,9.858056778708516e307,9.860055979008396e307,9.862055179308276e307,9.864054379608156e307,9.866053579908036e307,9.868052780207916e307,9.870051980507796e307,9.872051180807676e307,9.874050381107556e307,9.876049581407436e307,9.878048781707316e307,9.880047982007197e307,9.882047182307077e307,9.884046382606957e307,9.886045582906837e307,9.888044783206717e307,9.890043983506597e307,9.892043183806477e307,9.894042384106357e307,9.896041584406237e307,9.898040784706117e307,9.900039985005997e307,9.902039185305877e307,9.904038385605757e307,9.906037585905639e307,9.908036786205519e307,9.910035986505399e307,9.912035186805279e307,9.914034387105159e307,9.916033587405039e307,9.91803278770492e307,9.9200319880048e307,9.92203118830468e307,9.92403038860456e307,9.92602958890444e307,9.92802878920432e307,9.9300279895042e307,9.93202718980408e307,9.93402639010396e307,9.93602559040384e307,9.93802479070372e307,9.9400239910036e307,9.94202319130348e307,9.94402239160336e307,9.94602159190324e307,9.94802079220312e307,9.950019992503e307,9.95201919280288e307,9.95401839310276e307,9.95601759340264e307,9.95801679370252e307,9.9600159940024e307,9.96201519430228e307,9.96401439460216e307,9.96601359490204e307,9.96801279520192e307,9.9700119955018e307,9.97201119580168e307,9.97401039610156e307,9.97600959640144e307,9.97800879670132e307,9.9800079970012e307,9.98200719730108e307,9.98400639760096e307,9.98600559790084e307,9.98800479820072e307,9.9900039985006e307,9.99200319880048e307,9.99400239910036e307,9.99600159940024e307,9.99800079970012e307,1.0e308]}

},{}],84:[function(require,module,exports){
module.exports={"expected":[-0.27144176165949063,-0.2715499920384472,-0.27165839524039637,-0.27176697174885567,-0.27187572204927773,-0.27198464662906,-0.27209374597755503,-0.2722030205860806,-0.27231247094793,-0.2724220975583825,-0.2725319009147137,-0.2726418815162057,-0.27275203986415825,-0.27286237646189876,-0.2729728918147933,-0.2730835864302573,-0.2731944608177664,-0.2733055154888671,-0.2734167509571881,-0.27352816773845096,-0.2736397663504815,-0.2737515473132207,-0.2738635111487363,-0.2739756583812338,-0.27408798953706776,-0.2742005051447538,-0.27431320573497964,-0.27442609184061695,-0.27453916399673306,-0.27465242274060253,-0.27476586861171926,-0.27487950215180823,-0.27499332390483766,-0.275107334417031,-0.2752215342368791,-0.2753359239151526,-0.27545050400491394,-0.2755652750615303,-0.2756802376426854,-0.27579539230839284,-0.27591073962100815,-0.2760262801452419,-0.2761420144481723,-0.2762579430992584,-0.27637406667035286,-0.2764903857357151,-0.2766069008720246,-0.27672361265839396,-0.2768405216763825,-0.2769576285100096,-0.27707493374576825,-0.27719243797263854,-0.2773101417821017,-0.2774280457681538,-0.2775461505273195,-0.27766445665866624,-0.27778296476381825,-0.277901675446971,-0.278020589314905,-0.27813970697700074,-0.2782590290452529,-0.278378556134285,-0.2784982888613641,-0.27861822784641554,-0.278738373712038,-0.27885872708351844,-0.278979288588847,-0.27910005885873257,-0.27922103852661784,-0.27934222822869487,-0.27946362860392054,-0.27958524029403226,-0.2797070639435636,-0.27982910019986035,-0.27995134971309626,-0.2800738131362893,-0.2801964911253178,-0.2803193843389367,-0.2804424934387941,-0.2805658190894476,-0.2806893619583813,-0.280813122716022,-0.2809371020357568,-0.28106130059394957,-0.28118571906995826,-0.2813103581461523,-0.28143521850792963,-0.28156030084373457,-0.28168560584507524,-0.2818111342065413,-0.28193688662582184,-0.28206286380372364,-0.2821890664441888,-0.2823154952543135,-0.2824421509443659,-0.2825690342278054,-0.28269614582130037,-0.28282348644474775,-0.28295105682129146,-0.2830788576773417,-0.2832068897425941,-0.28333515375004925,-0.2834636504360317,-0.28359238054021013,-0.2837213448056168,-0.28385054397866744,-0.28397997880918163,-0.2841096500504026,-0.2842395584590178,-0.28436970479517953,-0.28450008982252517,-0.2846307143081984,-0.2847615790228701,-0.284892684740759,-0.2850240322396537,-0.2851556223009335,-0.2852874557095902,-0.28541953325424985,-0.2855518557271946,-0.2856844239243848,-0.2858172386454813,-0.2859503006938676,-0.2860836108766728,-0.28621717000479385,-0.28635097889291894,-0.28648503835955025,-0.2866193492270272,-0.2867539123215502,-0.28688872847320374,-0.28702379851598064,-0.28715912328780563,-0.2872947036305598,-0.2874305403901047,-0.28756663441630687,-0.28770298656306253,-0.2878395976883227,-0.28797646865411775,-0.2881136003265833,-0.2882509935759851,-0.28838864927674485,-0.28852656830746626,-0.28866475155096083,-0.2888031998942742,-0.28894191422871257,-0.28908089544986926,-0.2892201444576516,-0.2893596621563082,-0.28949944945445577,-0.28963950726510707,-0.28977983650569816,-0.2899204380981168,-0.29006131296873,-0.2902024620484127,-0.29034388627257646,-0.29048558658119783,-0.29062756391884775,-0.29076981923472045,-0.2909123534826631,-0.2910551676212057,-0.29119826261359055,-0.2913416394278026,-0.29148529903660025,-0.2916292424175453,-0.29177347055303426,-0.29191798443032957,-0.2920627850415906,-0.2922078733839056,-0.2923532504593234,-0.29249891727488575,-0.2926448748426593,-0.2927911241797687,-0.29293766630842927,-0.2930845022559802,-0.29323163305491806,-0.2933790597429304,-0.29352678336292976,-0.29367480496308807,-0.29382312559687096,-0.29397174632307266,-0.2941206682058512,-0.2942698923147636,-0.29441941972480157,-0.29456925151642777,-0.29471938877561143,-0.2948698325938657,-0.2950205840682837,-0.2951716443015762,-0.2953230144021089,-0.2954746954839402,-0.29562668866685915,-0.29577899507642397,-0.2959316158440009,-0.29608455210680273,-0.29623780500792873,-0.2963913756964039,-0.29654526532721903,-0.29669947506137134,-0.2968540060659047,-0.2970088595139509,-0.297164036584771,-0.29731953846379694,-0.29747536634267363,-0.2976315214193014,-0.2977880048978785,-0.2979448179889445,-0.29810196190942395,-0.29825943788266945,-0.29841724713850687,-0.298575390913279,-0.29873387044989125,-0.29889268699785665,-0.29905184181334166,-0.29921133615921225,-0.29937117130508045,-0.2995313485273515,-0.2996918691092707,-0.2998527343409716,-0.3000139455195239,-0.300175503948982,-0.30033741094043415,-0.3004996678120517,-0.30066227588913885,-0.30082523650418325,-0.30098855099690625,-0.30115222071431447,-0.30131624701075094,-0.30148063124794755,-0.3016453747950773,-0.30181047902880725,-0.3019759453333521,-0.3021417751005277,-0.30230796972980595,-0.30247453062836926,-0.30264145921116586,-0.3028087569009657,-0.30297642512841694,-0.3031444653321023,-0.3033128789585969,-0.30348166746252553,-0.30365083230662154,-0.3038203749617852,-0.3039902969071434,-0.30416059963010955,-0.30433128462644365,-0.3045023534003139,-0.30467380746435774,-0.3048456483397442,-0.3050178775562364,-0.30519049665225495,-0.3053635071749417,-0.305536910680224,-0.30571070873287987,-0.3058849029066033,-0.30605949478407074,-0.30623448595700753,-0.3064098780262555,-0.3065856726018409,-0.3067618713030429,-0.3069384757584631,-0.3071154876060953,-0.30729290849339574,-0.307470740077355,-0.30764898402456886,-0.3078276420113118,-0.3080067157236096,-0.30818620685731335,-0.3083661171181742,-0.3085464482219181,-0.30872720189432257,-0.3089083798712926,-0.30908998389893855,-0.30927201573365415,-0.30945447714219515,-0.3096373699017594,-0.3098206958000667,-0.3100044566354404,-0.3101886542168889,-0.31037329036418854,-0.3105583669079671,-0.31074388568978817,-0.3109298485622357,-0.31111625738900056,-0.31130311404496697,-0.3114904204162999,-0.31167817840053363,-0.3118663899066612,-0.31205505685522406,-0.3122441811784034,-0.31243376482011204,-0.31262380973608694,-0.3128143178939832,-0.3130052912734682,-0.31319673186631775,-0.3133886416765119,-0.3135810227203327,-0.3137738770264626,-0.3139672066360833,-0.3141610136029768,-0.31435529999362605,-0.31455006788731754,-0.3147453193762446,-0.31494105656561183,-0.31513728157374016,-0.31533399653217364,-0.31553120358578685,-0.31572890489289335,-0.31592710262535545,-0.3161257989686951,-0.3163249961222055,-0.3165246962990645,-0.3167249017264483,-0.3169256146456473,-0.317126837312182,-0.3173285719959214,-0.31753082098120117,-0.3177335865669443,-0.31793687106678187,-0.3181406768091763,-0.3183450061375447,-0.318549861410384,-0.3187552450013976,-0.3189611592996227,-0.3191676067095598,-0.31937458965130255,-0.31958211056066993,-0.319790171889339,-0.31999877610497957,-0.32020792569139,-0.32041762314863453,-0.3206278709931821,-0.3208386717580463,-0.3210500279929276,-0.32126194226435584,-0.32147441715583547,-0.3216874552679916,-0.32190105921871764,-0.32211523164332506,-0.3223299751946938,-0.32254529254342534,-0.3227611863779965,-0.32297765940491574,-0.3231947143488802,-0.32341235395293527,-0.32363058097863545,-0.323849398206207,-0.32406880843471236,-0.3242888144822166,-0.32450941918595516,-0.3247306254025041,-0.3249524360079512,-0.3251748538980706,-0.32539788198849734,-0.32562152321490523,-0.32584578053318647,-0.3260706569196325,-0.32629615537111795,-0.32652227890528573,-0.3267490305607347,-0.32697641339720906,-0.3272044304957903,-0.32743308495909074,-0.3276623799114498,-0.3278923184991322,-0.32812290389052806,-0.3283541392763561,-0.3285860278698683,-0.3288185729070573,-0.329051777646866,-0.3292856453713998,-0.32952017938614087,-0.32975538302016516,-0.3299912596263618,-0.3302278125816549,-0.33046504528722825,-0.33070296116875214,-0.3309415636766131,-0.33118085628614635,-0.3314208424978707,-0.33166152583772623,-0.331902909857315,-0.33214499813414433,-0.33238779427187287,-0.3326313019005598,-0.3328755246769166,-0.3331204662845623,-0.3333661304342813,-0.3336125208642842,-0.33385964134047236,-0.33410749565670456,-0.33435608763506797,-0.33460542112615144,-0.3348555000093225,-0.33510632819300795,-0.3353579096149767,-0.33561024824262764,-0.3358633480732796,-0.33611721313446546,-0.3363718474842299,-0.3366272552114302,-0.3368834404360416,-0.3371404073094653,-0.33739816001484124,-0.33765670276736415,-0.33791603981460333,-0.3381761754368272,-0.33843711394733095,-0.3386988596927683,-0.33896141705348826,-0.33922479044387527,-0.3394889843126937,-0.33975400314343673,-0.3400198514546798,-0.34028653380043805,-0.34055405477052886,-0.3408224189909384,-0.3410916311241929,-0.34136169586973514,-0.341632617964305,-0.3419044021823252,-0.3421770533362922,-0.34245057627717185,-0.34272497589479967,-0.3430002571182872,-0.34327642491643284,-0.3435534842981385,-0.34383144031283097,-0.3441102980508897,-0.34439006264407934,-0.3446707392659882,-0.3449523331324727,-0.345234849502107,-0.34551829367663933,-0.3458026710014537,-0.34608798686603803,-0.3463742467044584,-0.3466614559958395,-0.34694962026485165,-0.34723874508220404,-0.347528836065145,-0.3478198988779686,-0.3481119392325279,-0.3484049628887557,-0.3486989756551921,-0.3489939833895186,-0.34928999199910044,-0.3495870074415356,-0.34988503572521146,-0.35018408290986935,-0.35048415510717645,-0.3507852584813057,-0.3510873992495238,-0.35139058368278736,-0.3516948181063468,-0.35200010890035954,-0.35230646250051095,-0.3526138853986443,-0.3529223841433995,-0.35323196534086065,-0.3535426356552131,-0.3538544018094094,-0.3541672705858446,-0.3544812488270414,-0.3547963434363453,-0.3551125613786289,-0.35542990968100685,-0.3557483954335608,-0.3560680257900751,-0.35638880796878264,-0.35671074925312185,-0.35703385699250434,-0.357358138603094,-0.35768360156859746,-0.3580102534410658,-0.3583381018417079,-0.3586671544617167,-0.3589974190631064,-0.35932890347956276,-0.3596616156173058,-0.35999556345596534,-0.3603307550494696,-0.3606671985269469,-0.3610049020936414,-0.36134387403184154,-0.36168412270182393,-0.3620256565428102,-0.362368484073939,-0.36271261389525267,-0.36305805468869884,-0.3634048152191474,-0.3637529043354233,-0.36410233097135447,-0.36445310414683696,-0.3648052329689157,-0.36515872663288235,-0.3655135944233901,-0.36586984571558606,-0.36622748997626126,-0.3665865367650187,-0.3669469957354593,-0.36730887663638767,-0.36767218931303575,-0.36803694370830686,-0.3684031498640387],"x":[-50.0,-49.940239043824704,-49.8804780876494,-49.820717131474105,-49.7609561752988,-49.701195219123505,-49.64143426294821,-49.581673306772906,-49.52191235059761,-49.462151394422314,-49.40239043824701,-49.342629482071715,-49.28286852589641,-49.223107569721115,-49.16334661354582,-49.103585657370516,-49.04382470119522,-48.98406374501992,-48.92430278884462,-48.864541832669325,-48.80478087649402,-48.745019920318725,-48.68525896414343,-48.625498007968126,-48.56573705179283,-48.50597609561753,-48.44621513944223,-48.386454183266935,-48.32669322709163,-48.266932270916335,-48.20717131474104,-48.147410358565736,-48.08764940239044,-48.02788844621514,-47.96812749003984,-47.908366533864545,-47.84860557768924,-47.788844621513945,-47.72908366533864,-47.669322709163346,-47.60956175298805,-47.54980079681275,-47.49003984063745,-47.430278884462155,-47.37051792828685,-47.310756972111555,-47.25099601593625,-47.191235059760956,-47.13147410358566,-47.07171314741036,-47.01195219123506,-46.95219123505976,-46.89243027888446,-46.832669322709165,-46.77290836653386,-46.713147410358566,-46.65338645418327,-46.59362549800797,-46.53386454183267,-46.47410358565737,-46.41434262948207,-46.354581673306775,-46.29482071713147,-46.235059760956176,-46.17529880478088,-46.11553784860558,-46.05577689243028,-45.99601593625498,-45.93625498007968,-45.876494023904385,-45.81673306772908,-45.756972111553786,-45.69721115537848,-45.63745019920319,-45.57768924302789,-45.51792828685259,-45.45816733067729,-45.398406374501995,-45.33864541832669,-45.278884462151396,-45.21912350597609,-45.1593625498008,-45.0996015936255,-45.0398406374502,-44.9800796812749,-44.9203187250996,-44.8605577689243,-44.800796812749006,-44.7410358565737,-44.68127490039841,-44.62151394422311,-44.56175298804781,-44.50199203187251,-44.44223107569721,-44.38247011952191,-44.322709163346616,-44.26294820717131,-44.20318725099602,-44.14342629482072,-44.08366533864542,-44.02390438247012,-43.96414342629482,-43.90438247011952,-43.844621513944226,-43.78486055776892,-43.72509960159363,-43.66533864541832,-43.60557768924303,-43.54581673306773,-43.48605577689243,-43.42629482071713,-43.366533864541836,-43.30677290836653,-43.24701195219124,-43.18725099601593,-43.12749003984064,-43.06772908366534,-43.00796812749004,-42.94820717131474,-42.88844621513944,-42.82868525896414,-42.76892430278885,-42.70916334661354,-42.64940239043825,-42.58964143426295,-42.52988047808765,-42.47011952191235,-42.41035856573705,-42.35059760956175,-42.29083665338646,-42.23107569721115,-42.17131474103586,-42.11155378486056,-42.05179282868526,-41.99203187250996,-41.93227091633466,-41.87250996015936,-41.81274900398407,-41.75298804780876,-41.69322709163347,-41.633466135458164,-41.57370517928287,-41.51394422310757,-41.45418326693227,-41.39442231075697,-41.33466135458168,-41.27490039840637,-41.21513944223108,-41.155378486055774,-41.09561752988048,-41.03585657370518,-40.97609561752988,-40.91633466135458,-40.85657370517928,-40.79681274900398,-40.73705179282869,-40.677290836653384,-40.61752988047809,-40.55776892430279,-40.49800796812749,-40.43824701195219,-40.37848605577689,-40.31872509960159,-40.2589641434263,-40.199203187250994,-40.1394422310757,-40.0796812749004,-40.0199203187251,-39.9601593625498,-39.9003984063745,-39.8406374501992,-39.78087649402391,-39.721115537848604,-39.66135458167331,-39.601593625498005,-39.54183266932271,-39.48207171314741,-39.42231075697211,-39.36254980079681,-39.30278884462152,-39.243027888446214,-39.18326693227092,-39.123505976095615,-39.06374501992032,-39.00398406374502,-38.94422310756972,-38.88446215139442,-38.82470119521912,-38.764940239043824,-38.70517928286853,-38.645418326693225,-38.58565737051793,-38.52589641434263,-38.46613545816733,-38.40637450199203,-38.34661354581673,-38.286852589641434,-38.22709163346614,-38.167330677290835,-38.10756972111554,-38.04780876494024,-37.98804780876494,-37.92828685258964,-37.86852589641434,-37.808764940239044,-37.74900398406375,-37.689243027888445,-37.62948207171315,-37.569721115537845,-37.50996015936255,-37.45019920318725,-37.39043824701195,-37.330677290836654,-37.27091633466136,-37.211155378486055,-37.15139442231076,-37.091633466135455,-37.03187250996016,-36.97211155378486,-36.91235059760956,-36.852589641434264,-36.79282868525896,-36.733067729083665,-36.67330677290837,-36.613545816733065,-36.55378486055777,-36.49402390438247,-36.43426294820717,-36.374501992031874,-36.31474103585657,-36.254980079681275,-36.19521912350598,-36.135458167330675,-36.07569721115538,-36.01593625498008,-35.95617529880478,-35.896414342629484,-35.83665338645418,-35.776892430278885,-35.71713147410359,-35.657370517928285,-35.59760956175299,-35.537848605577686,-35.47808764940239,-35.418326693227094,-35.35856573705179,-35.298804780876495,-35.2390438247012,-35.179282868525895,-35.1195219123506,-35.059760956175296,-35.0,-34.940239043824704,-34.8804780876494,-34.820717131474105,-34.7609561752988,-34.701195219123505,-34.64143426294821,-34.581673306772906,-34.52191235059761,-34.462151394422314,-34.40239043824701,-34.342629482071715,-34.28286852589641,-34.223107569721115,-34.16334661354582,-34.103585657370516,-34.04382470119522,-33.98406374501992,-33.92430278884462,-33.864541832669325,-33.80478087649402,-33.745019920318725,-33.68525896414343,-33.625498007968126,-33.56573705179283,-33.50597609561753,-33.44621513944223,-33.386454183266935,-33.32669322709163,-33.266932270916335,-33.20717131474104,-33.147410358565736,-33.08764940239044,-33.02788844621514,-32.96812749003984,-32.908366533864545,-32.84860557768924,-32.788844621513945,-32.72908366533864,-32.669322709163346,-32.60956175298805,-32.54980079681275,-32.49003984063745,-32.430278884462155,-32.37051792828685,-32.310756972111555,-32.25099601593625,-32.191235059760956,-32.13147410358566,-32.07171314741036,-32.01195219123506,-31.95219123505976,-31.89243027888446,-31.83266932270916,-31.772908366533866,-31.713147410358566,-31.653386454183266,-31.593625498007967,-31.53386454183267,-31.47410358565737,-31.41434262948207,-31.35458167330677,-31.294820717131476,-31.235059760956176,-31.175298804780876,-31.115537848605577,-31.05577689243028,-30.99601593625498,-30.93625498007968,-30.87649402390438,-30.816733067729082,-30.756972111553786,-30.697211155378486,-30.637450199203187,-30.577689243027887,-30.51792828685259,-30.45816733067729,-30.39840637450199,-30.338645418326692,-30.278884462151396,-30.219123505976096,-30.159362549800797,-30.099601593625497,-30.0398406374502,-29.9800796812749,-29.9203187250996,-29.860557768924302,-29.800796812749002,-29.741035856573706,-29.681274900398407,-29.621513944223107,-29.561752988047807,-29.50199203187251,-29.44223107569721,-29.382470119521912,-29.322709163346612,-29.262948207171316,-29.203187250996017,-29.143426294820717,-29.083665338645417,-29.02390438247012,-28.96414342629482,-28.904382470119522,-28.844621513944222,-28.784860557768923,-28.725099601593627,-28.665338645418327,-28.605577689243027,-28.545816733067728,-28.48605577689243,-28.426294820717132,-28.366533864541832,-28.306772908366533,-28.247011952191237,-28.187250996015937,-28.127490039840637,-28.067729083665338,-28.00796812749004,-27.948207171314742,-27.888446215139442,-27.828685258964143,-27.768924302788843,-27.709163346613547,-27.649402390438247,-27.589641434262948,-27.529880478087648,-27.470119521912352,-27.410358565737052,-27.350597609561753,-27.290836653386453,-27.231075697211157,-27.171314741035857,-27.111553784860558,-27.051792828685258,-26.99203187250996,-26.932270916334662,-26.872509960159363,-26.812749003984063,-26.752988047808763,-26.693227091633467,-26.633466135458168,-26.573705179282868,-26.51394422310757,-26.454183266932272,-26.394422310756973,-26.334661354581673,-26.274900398406373,-26.215139442231077,-26.155378486055778,-26.095617529880478,-26.03585657370518,-25.97609561752988,-25.916334661354583,-25.856573705179283,-25.796812749003983,-25.737051792828684,-25.677290836653388,-25.617529880478088,-25.55776892430279,-25.49800796812749,-25.438247011952193,-25.378486055776893,-25.318725099601593,-25.258964143426294,-25.199203187250998,-25.139442231075698,-25.0796812749004,-25.0199203187251,-24.9601593625498,-24.900398406374503,-24.840637450199203,-24.780876494023904,-24.721115537848604,-24.661354581673308,-24.60159362549801,-24.54183266932271,-24.48207171314741,-24.422310756972113,-24.362549800796813,-24.302788844621514,-24.243027888446214,-24.183266932270918,-24.12350597609562,-24.06374501992032,-24.00398406374502,-23.94422310756972,-23.884462151394423,-23.824701195219124,-23.764940239043824,-23.705179282868524,-23.64541832669323,-23.58565737051793,-23.52589641434263,-23.46613545816733,-23.406374501992033,-23.346613545816734,-23.286852589641434,-23.227091633466134,-23.16733067729084,-23.10756972111554,-23.04780876494024,-22.98804780876494,-22.92828685258964,-22.868525896414344,-22.808764940239044,-22.749003984063744,-22.689243027888445,-22.62948207171315,-22.56972111553785,-22.50996015936255,-22.45019920318725,-22.390438247011954,-22.330677290836654,-22.270916334661354,-22.211155378486055,-22.15139442231076,-22.09163346613546,-22.03187250996016,-21.97211155378486,-21.91235059760956,-21.852589641434264,-21.792828685258964,-21.733067729083665,-21.673306772908365,-21.61354581673307,-21.55378486055777,-21.49402390438247,-21.43426294820717,-21.374501992031874,-21.314741035856574,-21.254980079681275,-21.195219123505975,-21.13545816733068,-21.07569721115538,-21.01593625498008,-20.95617529880478,-20.89641434262948,-20.836653386454184,-20.776892430278885,-20.717131474103585,-20.657370517928285,-20.59760956175299,-20.53784860557769,-20.47808764940239,-20.41832669322709,-20.358565737051794,-20.298804780876495,-20.239043824701195,-20.179282868525895,-20.1195219123506,-20.0597609561753,-20.0]}

},{}],85:[function(require,module,exports){
module.exports={"expected":[0.3684031498640387,0.36836633163974153,0.3683295281294916,0.36829273932300144,0.3682559652099939,0.3682192057802019,0.36818246102336877,0.368145730929248,0.36810901548760344,0.36807231468820883,0.36803562852084853,0.36799895697531676,0.367962300041418,0.36792565770896685,0.36788902996778816,0.3678524168077168,0.36781581821859777,0.3677792341902862,0.3677426647126473,0.3677061097755563,0.3676695693688986,0.3676330434825696,0.36759653210647464,0.3675600352305292,0.36752355284465876,0.3674870849387987,0.36745063150289464,0.3674141925269017,0.36737776800078553,0.36734135791452127,0.36730496225809417,0.3672685810214994,0.36723221419474206,0.36719586176783714,0.36715952373080935,0.36712320007369353,0.3670868907865342,0.3670505958593858,0.36701431528231254,0.3669780490453885,0.3669417971386975,0.3669055595523333,0.3668693362763991,0.36683312730100837,0.36679693261628393,0.3667607522123586,0.36672458607937464,0.3666884342074843,0.36665229658684945,0.3666161732076416,0.366580064060042,0.3665439691342416,0.3665078884204408,0.3664718219088499,0.3664357695896887,0.36639973145318666,0.36636370748958286,0.3663276976891259,0.366291702042074,0.36625572053869493,0.36621975316926614,0.3661837999240744,0.3661478607934163,0.3661119357675977,0.366076024836934,0.3660401279917503,0.36600424522238095,0.36596837651916986,0.3659325218724704,0.36589668127264546,0.36586085471006724,0.3658250421751174,0.36578924365818716,0.36575345914967683,0.36571768863999643,0.36568193211956523,0.36564618957881173,0.36561046100817407,0.3655747463980994,0.3655390457390445,0.36550335902147524,0.36546768623586695,0.36543202737270414,0.3653963824224807,0.36536075137569973,0.36532513422287355,0.3652895309545238,0.36525394156118146,0.3652183660333865,0.36518280436168815,0.365147256536645,0.36511172254882457,0.3650762023888039,0.3650406960471689,0.36500520351451476,0.36496972478144574,0.3649342598385754,0.3648988086765262,0.36486337128592977,0.364827947657427,0.36479253778166765,0.3647571416493106,0.3647217592510239,0.3646863905774846,0.3646510356193786,0.3646156943674012,0.3645803668122565,0.3645450529446574,0.36450975275532616,0.3644744662349938,0.3644391933744005,0.3644039341642952,0.3643686885954358,0.36433345665858924,0.36429823834453146,0.364263033644047,0.36422784254792967,0.36419266504698194,0.3641575011320152,0.36412235079384975,0.36408721402331473,0.3640520908112481,0.3640169811484968,0.36398188502591633,0.3639468024343713,0.36391173336473476,0.363876677807889,0.3638416357547247,0.3638066071961416,0.36377159212304794,0.3637365905263609,0.3637016023970064,0.3636666277259188,0.36363166650404155,0.36359671872232674,0.36356178437173486,0.36352686344323537,0.3634919559278063,0.3634570618164344,0.3634221811001151,0.3633873137698521,0.3633524598166583,0.36331761923155487,0.3632827920055716,0.363247978129747,0.36321317759512806,0.3631783903927704,0.36314361651373817,0.36310885594910414,0.36307410868994944,0.36303937472736403,0.3630046540524462,0.36296994665630267,0.3629352525300489,0.3629005716648086,0.36286590405171415,0.3628312496819063,0.3627966085465342,0.3627619806367557,0.36272736594373667,0.3626927644586519,0.36265817617268414,0.3626236010770248,0.3625890391628737,0.362554490421439,0.3625199548439371,0.362485432421593,0.3624509231456398,0.3624164270073192,0.3623819439978811,0.3623474741085837,0.3623130173306935,0.36227857365548544,0.3622441430742426,0.3622097255782564,0.3621753211588266,0.36214092980726115,0.3621065515148762,0.3620721862729962,0.3620378340729539,0.3620034949060902,0.3619691687637541,0.36193485563730304,0.36190055551810246,0.36186626839752606,0.36183199426695567,0.36179773311778146,0.3617634849414013,0.36172924972922177,0.3616950274726572,0.3616608181631301,0.3616266217920712,0.36159243835091925,0.36155826783112116,0.3615241102241318,0.36148996552141416,0.3614558337144394,0.36142171479468654,0.3613876087536428,0.3613535155828033,0.36131943527367144,0.3612853678177583,0.36125131320658305,0.361217271431673,0.3611832424845634,0.3611492263567973,0.3611152230399258,0.3610812325255082,0.3610472548051114,0.36101328987031034,0.36097933771268786,0.36094539832383493,0.3609114716953501,0.36087755781884007,0.3608436566859193,0.3608097682882101,0.36077589261734266,0.36074202966495517,0.36070817942269345,0.3606743418822114,0.36064051703517047,0.36060670487324026,0.36057290538809766,0.360539118571428,0.360505344414924,0.36047158291028614,0.36043783404922286,0.36040409782345023,0.3603703742246922,0.3603366632446803,0.3603029648751539,0.36026927910786005,0.36023560593455356,0.36020194534699695,0.36016829733696026,0.36013466189622145,0.36010103901656604,0.36006742868978725,0.3600338309076859,0.36000024566207056,0.35996667294475737,0.35993311274757006,0.35989956506234017,0.35986602988090655,0.3598325071951159,0.3597989969968224,0.3597654992778878,0.35973201403018157,0.3596985412455806,0.3596650809159694,0.3596316330332399,0.35959819758929185,0.3595647745760322,0.35953136398537566,0.3594979658092443,0.3594645800395678,0.35943120666828327,0.3593978456873354,0.3593644970886762,0.3593311608642652,0.3592978370060695,0.35926452550606347,0.359231226356229,0.35919793954855556,0.35916466507503964,0.35913140292768564,0.359098153098505,0.3590649155795167,0.35903169036274707,0.35899847744022984,0.3589652768040061,0.3589320884461243,0.35889891235864024,0.35886574853361697,0.35883259696312503,0.35879945763924215,0.3587663305540535,0.35873321569965144,0.35870011306813565,0.35866702265161327,0.35863394444219837,0.3586008784320126,0.35856782461318476,0.35853478297785085,0.3585017535181543,0.35846873622624553,0.35843573109428234,0.3584027381144297,0.35836975727885984,0.3583367885797521,0.3583038320092931,0.3582708875596766,0.35823795522310364,0.3582050349917822,0.3581721268579276,0.35813923081376225,0.3581063468515157,0.35807347496342473,0.3580406151417331,0.3580077673786918,0.3579749316665587,0.35794210799759907,0.35790929636408525,0.35787649675829636,0.3578437091725189,0.35781093359904625,0.35777817003017903,0.3577454184582247,0.3577126788754979,0.3576799512743203,0.3576472356470204,0.35761453198593407,0.35758184028340373,0.3575491605317794,0.3575164927234174,0.3574838368506815,0.3574511929059424,0.35741856088157764,0.3573859407699717,0.35735333256351604,0.3573207362546092,0.35728815183565643,0.35725557929907015,0.3572230186372694,0.3571904698426804,0.35715793290773606,0.3571254078248764,0.357092894586548,0.35706039318520477,0.35702790361330705,0.3569954258633222,0.3569629599277246,0.35693050579899516,0.3568980634696219,0.35686563293209944,0.3568332141789294,0.3568008072026202,0.3567684119956869,0.3567360285506514,0.35670365686004263,0.35667129691639593,0.35663894871225366,0.35660661224016493,0.3565742874926855,0.3565419744623778,0.35650967314181126,0.35647738352356184,0.35644510560021236,0.35641283936435214,0.3563805848085774,0.35634834192549114,0.3563161107077027,0.3562838911478284,0.35625168323849105,0.3562194869723204,0.3561873023419526,0.3561551293400305,0.3561229679592037,0.3560908181921283,0.35605868003146707,0.35602655346988954,0.3559944385000716,0.35596233511469605,0.3559302433064519,0.3558981630680351,0.35586609439214806,0.3558340372714997,0.3558019916988056,0.3557699576667878,0.355737935168175,0.35570592419570235,0.35567392474211157,0.35564193680015094,0.35560996036257525,0.3555779954221458,0.35554604197163026,0.355514100003803,0.3554821695114449,0.355450250487343,0.35541834292429125,0.3553864468150897,0.3553545621525451,0.3553226889294705,0.3552908271386855,0.35525897677301604,0.3552271378252947,0.35519531028836016,0.3551634941550577,0.3551316894182391,0.35509989607076226,0.35506811410549177,0.35503634351529845,0.3550045842930595,0.3549728364316585,0.3549410999239854,0.35490937476293655,0.3548776609414146,0.3548459584523285,0.35481426728859367,0.3547825874431316,0.35475091890887045,0.35471926167874446,0.35468761574569413,0.35465598110266644,0.35462435774261447,0.35459274565849774,0.354561144843282,0.3545295552899392,0.3544979769914476,0.3544664099407917,0.3544348541309623,0.35440330955495636,0.35437177620577714,0.354340254076434,0.35430874315994276,0.3542772434493251,0.35424575493760924,0.35421427761782937,0.35418281148302605,0.3541513565262458,0.3541199127405415,0.35408848011897215,0.35405705865460285,0.3540256483405048,0.35399424916975564,0.35396286113543884,0.353931484230644,0.35390011844846714,0.35386876378201015,0.35383742022438097,0.3538060877686939,0.35377476640806915,0.35374345613563307,0.3537121569445181,0.3536808688278626,0.35364959177881133,0.35361832579051483,0.3535870708561298,0.35355582696881893,0.3535245941217511,0.35349337230810096,0.3534621615210495,0.3534309617537834,0.35339977299949565,0.3533685952513851,0.3533374285026566,0.35330627274652093,0.35327512797619504,0.35324399418490177,0.35321287136586976,0.3531817595123338,0.3531506586175348,0.35311956867471916,0.3530884896771397,0.3530574216180548,0.35302636449072905,0.3529953182884327,0.35296428300444227,0.35293325863203984,0.3529022451645136,0.3528712425951575,0.35284025091727145,0.3528092701241614,0.35277830020913886,0.3527473411655215,0.3527163929866326,0.3526854556658014,0.3526545291963632,0.3526236135716588,0.35259270878503496,0.35256181482984444,0.35253093169944555,0.35250005938720264,0.35246919788648573,0.3524383471906707,0.3524075072931392,0.35237667818727875,0.3523458598664825,0.3523150523241495,0.35228425555368453,0.35225346954849823,0.35222269430200676,0.35219192980763225,0.35216117605880254,0.35213043304895114,0.35209970077151725,0.35206897921994595,0.352038268387688,0.3520075682681996,0.3519768788549431,0.3519462001413863,0.35191553212100257,0.3518848747872713,0.3518542281336773,0.35182359215371106,0.35179296684086886,0.35176235218865265,0.3517317481905698,0.35170115484013365,0.3516705721308629,0.3516400000562821,0.35160943860992133,0.3515788877853163,0.3515483475760082,0.3515178179755442,0.3514872989774767,0.3514567905753637,0.35142629276276915,0.3513958055332623,0.3513653288804179,0.3513348627978165,0.3513044072790442,0.3512739623176924,0.35124352790735835,0.3512131040416447,0.3511826907141596,0.35115228791851694,0.35112189564833585,0.3510915138972412,0.35106114265886323,0.3510307819268379,0.3510004316948064,0.3509700919564156,0.3509397627053178,0.35090944393517076,0.3508791356396378,0.3508488378123877,0.3508185504470946,0.35078827353743813,0.3507580070771035,0.35072775105978127,0.35069750547916734,0.3506672703289632,0.3506370456028759,0.3506068312946175,0.3505766273979058,0.3505464339064639,0.3505162508140204,0.3504860781143091,0.3504559158010695,0.3504257638680461,0.35039562230898913,0.35036549111765397,0.3503353702878015,0.3503052598131979,0.35027515968761463,0.3502450699048287,0.35021499045862237,0.3501849213427831,0.35015486255110384,0.3501248140773829,0.3500947759154238,0.35006474805903537,0.3500347305020318,0.35000472323823273,0.3499747262614627,0.34994473956555194,0.3499147631443358,0.34988479699165487,0.3498548411013551,0.3498248954672876,0.3497949600833089,0.34976503494328065,0.3497351200410698,0.3497052153705486,0.34967532092559445,0.3496454367000899,0.34961556268792293,0.34958569888298674,0.3495558452791795,0.3495260018704048,0.3494961686505714,0.3494663456135932,0.34943653275338943,0.34940673006388423,0.3493769375390072,0.34934715517269305,0.34931738295888154,0.34928762089151766,0.34925786896455163,0.3492281271719388,0.34919839550763954,0.3491686739656194,0.3491389625398492,0.3491092612243048,0.3490795700129672,0.34904988889982247,0.3490202178788618,0.3489905569440815,0.34896090608948305,0.3489312653090729,0.3489016345968628,0.34887201394686934,0.3488424033531142,0.3488128028096244,0.34878321231043174,0.3487536318495732,0.34872406142109086,0.3486945010190317,0.34866495063744796,0.34863541027039663,0.34860587991194014,0.3485763595561455,0.34854684919708506,0.3485173488288361,0.3484878584454808,0.3484583780411066,0.3484289076098056,0.34839944714567517,0.34836999664281754,0.34834055609534004,0.3483111254973548,0.3482817048429791,0.348252294126335,0.34822289334154977,0.34819350248275543,0.34816412154408904,0.34813475051969256,0.34810538940371294,0.34807603819030203,0.34804669687361656,0.34801736544781836,0.347988043907074,0.347958732245555,0.34792943045743796,0.347900138536904,0.34787085647813965,0.34784158427533585,0.3478123219226887,0.34778306941439907,0.3477538267446729,0.34772459390772076,0.34769537089775815,0.3476661577090055,0.347636954335688,0.3476077607720358,0.3475785770122839,0.34754940305067195,0.34752023888144457,0.34749108449885124,0.3474619398971463,0.34743280507058877,0.3474036800134424,0.347374564719976,0.3473454591844632,0.34731636340118216,0.34728727736441595,0.3472582010684525,0.3472291345075844,0.3472000776761093,0.34717103056832915,0.347141993178551,0.34711296550108656,0.3470839475302524,0.3470549392603697,0.3470259406857644,0.34699695180076734,0.34696797259971385,0.34693900307694414,0.34691004322680324,0.3468810930436406,0.34685215252181073,0.34682322165567253,0.34679430043958986,0.34676538886793107,0.3467364869350694,0.34670759463538275,0.3466787119632535,0.34664983891306894,0.3466209754792208,0.3465921216561058,0.34656327743812515,0.34653444281968454,0.34650561779519456,0.3464768023590704,0.34644799650573194,0.3464192002296035,0.3463904135251141,0.34636163638669765,0.3463328688087924,0.3463041107858412,0.3462753623122917,0.3462466233825961,0.34621789399121117,0.3461891741325982,0.3461604638012231,0.3461317629915566,0.34610307169807375,0.3460743899152543,0.34604571763758246,0.3460170548595471,0.34598840157564176,0.3459597577803643,0.34593112346821725,0.34590249863370776,0.34587388327134744,0.34584527737565235,0.3458166809411434,0.34578809396234556,0.34575951643378877,0.34573094835000734,0.3457023897055399,0.3456738404949298,0.34564530071272487,0.34561677035347743,0.34558824941174426,0.34555973788208666,0.34553123575907035,0.3455027430372657,0.34547425971124734,0.3454457857755945,0.3454173212248908,0.34538886605372454,0.34536042025668817,0.3453319838283788,0.3453035567633978,0.34527513905635127,0.3452467307018495,0.34521833169450733,0.3451899420289439,0.3451615616997829,0.34513319070165255,0.34510482902918516,0.34507647667701774,0.34504813363979153,0.34501979991215226,0.34499147548875003,0.34496316036423935,0.34493485453327904,0.3449065579905325,0.34487827073066724,0.34484999274835526,0.344821724038273,0.34479346459510124,0.344765214413525,0.34473697348823373,0.3447087418139212,0.3446805193852857,0.3446523061970296,0.3446241022438597,0.34459590752048724,0.34456772202162766,0.34453954574200074,0.3445113786763306,0.3444832208193456,0.34445507216577864,0.3444269327103666,0.344398802447851,0.3443706813729772,0.34434256948049535,0.34431446676515953,0.34428637322172834,0.34425828884496434,0.34423021362963474,0.3442021475705108,0.3441740906623681,0.34414604289998635,0.3441180042781497,0.34408997479164644,0.3440619544352692,0.3440339432038147,0.344005941092084,0.34397794809488236,0.3439499642070193,0.34392198942330854,0.34389402373856803,0.34386606714761975,0.34383811964529026,0.3438101812264101,0.3437822518858139,0.3437543316183407,0.3437264204188336,0.34369851828214,0.3436706252031113,0.34364274117660326,0.3436148661974758,0.34358700026059275,0.34355914336082255,0.34353129549303735,0.34350345665211374,0.34347562683293237,0.3434478060303781,0.34341999423933983,0.3433921914547106,0.3433643976713877,0.3433366128842725,0.3433088370882703,0.3432810702782909,0.3432533124492479,0.34322556359605916,0.3431978237136466,0.3431700927969362,0.3431423708408582,0.3431146578403467,0.34308695379034015,0.3430592586857808,0.34303157252161526,0.343003895292794,0.3429762269942717,0.3429485676210071,0.34292091716796286,0.34289327563010596,0.34286564300240713,0.34283801927984137,0.34281040445738764,0.342782798530029,0.3427552014927525,0.3427276133405493,0.34270003406841437,0.342672463671347,0.3426449021443504,0.34261734948243167,0.34258980568060204,0.34256227073387674,0.342534744637275,0.34250722738582007,0.34247971897453916,0.3424522193984635,0.34242472865262824,0.34239724673207256,0.34236977363183974,0.3423423093469769,0.3423148538725351,0.3422874072035694,0.34225996933513897,0.3422325402623067,0.3422051199801397,0.3421777084837087,0.3421503057680887,0.3421229118283585,0.3420955266596008,0.34206815025690235,0.3420407826153537,0.3420134237300494,0.3419860735960879,0.34195873220857165,0.34193139956260693,0.3419040756533039,0.34187676047577664,0.3418494540251433,0.3418221562965256,0.3417948672850496,0.3417675869858448,0.34174031539404487,0.3417130525047873,0.3416857983132134,0.3416585528144683,0.3416313160037012,0.3416040878760651,0.34157686842671675,0.3415496576508168,0.34152245554352983,0.3414952621000242,0.3414680773154722,0.34144090118504977,0.34141373370393696,0.3413865748673174,0.3413594246703787,0.3413322831083123,0.3413051501763134,0.34127802586958106,0.34125091018331805,0.34122380311273115,0.34119670465303076,0.34116961479943114,0.3411425335471504,0.3411154608914104,0.34108839682743686,0.34106134135045907,0.3410342944557105,0.3410072561384279,0.3409802263938522,0.34095320521722794,0.34092619260380347,0.34089918854883083,0.34087219304756583,0.34084520609526814,0.3408182276872011,0.34079125781863184,0.34076429648483114,0.3407373436810736,0.3407103994026377,0.34068346364480523,0.3406565364028622,0.340629617672098,0.34060270744780585,0.34057580572528284,0.34054891249982944,0.3405220277667502,0.3404951515213531,0.34046828375895005,0.3404414244748563,0.34041457366439126,0.34038773132287764,0.3403608974456421,0.34033407202801474,0.34030725506532966,0.3402804465529243,0.34025364648614004,0.34022685486032167,0.34020007167081795,0.3401732969129811,0.34014653058216693,0.3401197726737351,0.3400930231830488,0.3400662821054749,0.34003954943638387,0.34001282517114995,0.33998610930515083,0.339959401833768,0.3399327027523864,0.33990601205639476,0.33987932974118534,0.33985265580215407,0.3398259902347004,0.33979933303422744,0.339772684196142,0.3397460437158543,0.3397194115887784,0.3396927878103317,0.3396661723759354,0.339639565281014,0.33961296652099604,0.3395863760913132,0.339559793987401,0.3395332202046984,0.339506654738648,0.3394800975846959,0.3394535487382918,0.339427008194889,0.3394004759499443,0.33937395199891807,0.33934743633727416,0.3393209289604801,0.3392944298640068,0.3392679390433289,0.3392414564939244,0.33921498221127483,0.3391885161908654,0.33916205842818464,0.33913560891872485,0.3391091676579816,0.339082734641454,0.33905630986464497,0.3390298933230605,0.33900348501221034,0.3389770849276076,0.33895069306476916,0.338924309419215,0.3388979339864689,0.33887156676205793,0.3388452077415127,0.33881885692036745,0.3387925142941595,0.3387661798584301,0.3387398536087237,0.3387135355405882,0.33868722564957504,0.33866092393123914,0.3386346303811388,0.33860834499483583,0.3385820677678954,0.3385557986958862,0.33852953777438033,0.33850328499895327,0.33847704036518406,0.338450803868655,0.338424575504952,0.3383983552696642,0.3383721431583843,0.33834593916670835,0.33831974329023584,0.3382935555245697,0.3382673758653161,0.3382412043080847,0.3382150408484887,0.3381888854821445,0.3381627382046719,0.3381365990116943,0.3381104678988382,0.3380843448617336,0.338058229896014,0.338032122997316,0.33800602416127984,0.33797993338354887,0.33795385065977007,0.33792777598559365,0.3379017093566731,0.3378756507686654,0.3378496002172307,0.3378235576980327,0.3377975232067383,0.33777149673901785,0.33774547829054496,0.3377194678569966,0.33769346543405293,0.3376674710173977,0.3376414846027178,0.3376155061857035,0.3375895357620483,0.33756357332744913,0.3375376188776061,0.33751167240822283,0.33748573391500597,0.33745980339366577,0.33743388083991543,0.3374079662494718,0.3373820596180548,0.33735616094138754,0.33733027021519674,0.3373043874352122,0.3372785125971669,0.33725264569679725,0.33722678672984285,0.3372009356920467,0.3371750925791549,0.3371492573869168,0.3371234301110852,0.33709761074741595,0.33707179929166825,0.33704599573960453,0.3370202000869904,0.3369944123295949,0.33696863246319003,0.3369428604835512,0.33691709638645706,0.33689134016768946,0.33686559182303344,0.3368398513482772,0.33681411873921235,0.3367883939916336,0.3367626771013387,0.33673696806412906,0.3367112668758088,0.33668557353218553,0.33665988802907004,0.33663421036227614,0.33660854052762096,0.336582878520925,0.3365572243380115,0.33653157797470734,0.33650593942684226,0.3364803086902493,0.33645468576076476,0.33642907063422794,0.33640346330648147,0.3363778637733709,0.3363522720307453,0.33632668807445654,0.3363011119003599,0.33627554350431366,0.3362499828821792,0.33622443002982144,0.3361988849431079,0.3361733476179095,0.3361478180501004,0.33612229623555767,0.3360967821701617,0.3360712758497959,0.33604577727034673,0.336020286427704,0.3359948033177604,0.33596932793641193,0.33594386027955747,0.3359184003430993,0.3358929481229425,0.33586750361499557,0.33584206681516976,0.33581663771937975,0.33579121632354314,0.3357658026235805,0.33574039661541577,0.33571499829497575,0.33568960765819045,0.3356642247009929,0.33563884941931915,0.3356134818091085,0.33558812186630305,0.3355627695868483,0.3355374249666925,0.33551208800178706,0.3354867586880866,0.33546143702154857,0.3354361229981336,0.33541081661380534,0.33538551786453047,0.33536022674627874,0.335334943255023,0.3353096673867389,0.3352843991374053,0.33525913850300415,0.3352338854795204,0.33520864006294177,0.3351834022492594,0.3351581720344671,0.3351329494145619,0.3351077343855438,0.33508252694341584,0.3350573270841839,0.335032134803857,0.33500695009844733,0.33498177296396964,0.334956603396442,0.33493144139188546,0.334906286946324,0.3348811400557845,0.33485600071629695,0.3348308689238942,0.3348057446746122,0.3347806279644899,0.334755518789569,0.3347304171458944,0.33470532302951383,0.3346802364364781,0.33465515736284085,0.33463008580465875,0.33460502175799134,0.3345799652189012,0.334554916183454,0.33452987464771794,0.3345048406077646,0.33447981405966826,0.33445479499950614,0.33442978342335844,0.3344047793273084,0.33437978270744195,0.3343547935598482,0.3343298118806189,0.33430483766584906,0.3342798709116363,0.3342549116140813,0.3342299597692876,0.3342050153733618,0.33418007842241315,0.334155148912554,0.33413022683989946,0.33410531220056766,0.3340804049906796,0.33405550520635907,0.334030612843733,0.3340057278989308,0.33398085036808506,0.33395598024733125,0.33393111753280763,0.33390626222065534,0.33388141430701834,0.3338565737880437,0.33383174065988097,0.33380691491868286,0.33378209656060487,0.33375728558180534,0.3337324819784454,0.33370768574668924,0.3336828968827036,0.3336581153826584,0.33363334124272603,0.333608574459082,0.3335838150279046,0.3335590629453749,0.3335343182076769,0.3335095808109973,0.3334848507515258,0.3334601280254546,0.3334354126289792,0.3334107045582975,0.3333860038096104,0.3333613103791216,0.3333366242630376,0.3333119454575678,0.3332872739589242,0.3332626097633217,0.3332379528669782,0.33321330326611404,0.3331886609569526,0.33316402593572,0.3331393981986451,0.3331147777419595,0.3330901645618979,0.33306555865469734,0.3330409600165979,0.3330163686438425,0.3329917845326766,0.33296720767934845,0.3329426380801094,0.3329180757312132,0.3328935206289165,0.3328689727694787,0.332844432149162,0.3328198987642313,0.3327953726109543,0.33277085368560133,0.3327463419844457,0.3327218375037632,0.33269734023983255,0.33267285018893505,0.33264836734735503,0.3326238917113791,0.3325994232772971,0.3325749620414012,0.3325505079999865,0.33252606114935074,0.33250162148579443,0.3324771890056208,0.3324527637051358,0.33242834558064804,0.3324039346284689,0.3323795308449124,0.33235513422629537,0.3323307447689372,0.33230636246916007,0.33228198732328895,0.33225761932765135,0.33223325847857754,0.33220890477240034,0.3321845582054555,0.33216021877408136,0.3321358864746189,0.33211156130341174,0.33208724325680633,0.3320629323311516,0.33203862852279936,0.33201433182810386,0.33199004224342227,0.3319657597651142,0.3319414843895421,0.33191721611307096,0.33189295493206844,0.33186870084290493,0.3318444538419534,0.3318202139255894,0.33179598109019137,0.3317717553321401,0.3317475366478193,0.3317233250336151,0.33169912048591643,0.3316749230011146,0.3316507325756039,0.331626549205781,0.3316023728880453,0.3315782036187988,0.33155404139444605,0.33152988621139434,0.3315057380660535,0.3314815969548361,0.331457462874157,0.33143333582043416,0.3314092157900877,0.33138510277954053,0.33136099678521824,0.3313368978035489,0.3313128058309632,0.3312887208638944,0.33126464289877844,0.33124057193205375,0.33121650796016144,0.33119245097954514,0.3311684009866511,0.3311443579779281,0.33112032194982766,0.3310962928988035,0.33107227082131235,0.33104825571381324,0.3310242475727678,0.33100024639464043,0.3309762521758978,0.3309522649130094,0.33092828460244705,0.3309043112406852,0.3308803448242009,0.33085638534947387,0.33083243281298613,0.3308084872112223,0.33078454854066974,0.3307606167978181,0.3307366919791598,0.33071277408118954,0.3306888631004048,0.33066495903330545,0.3306410618763939,0.3306171716261752,0.33059328827915674,0.33056941183184857,0.33054554228076327,0.33052167962241574,0.3304978238533237,0.3304739749700072,0.33045013296898873,0.33042629784679345,0.33040246959994896,0.3303786482249854,0.3303548337184353,0.3303310260768338,0.3303072252967185,0.3302834313746295,0.3302596443071094,0.33023586409070327,0.3302120907219586,0.33018832419742555,0.33016456451365656,0.3301408116672067,0.3301170656546335,0.33009332647249684,0.33006959411735914,0.33004586858578533,0.3300221498743429,0.32999843797960154,0.32997473289813356,0.3299510346265139,0.3299273431613196,0.32990365849913045,0.32987998063652857,0.32985630957009854,0.3298326452964274,0.32980898781210466,0.32978533711372227,0.3297616931978745,0.32973805606115836,0.32971442570017295,0.32969080211152,0.3296671852918038,0.32964357523763066,0.3296199719456097,0.32959637541235237,0.32957278563447245,0.3295492026085863,0.32952562633131255,0.32950205679927225,0.32947849400908896,0.32945493795738867,0.3294313886407997,0.3294078460559528,0.3293843101994812,0.32936078106802036,0.32933725865820834,0.3293137429666855,0.32929023399009455,0.32926673172508075,0.32924323616829165,0.32921974731637715,0.3291962651659896,0.3291727897137838,0.3291493209564168,0.3291258588905482,0.3291024035128397,0.3290789548199557,0.3290555128085628,0.3290320774753301,0.3290086488169288,0.32898522683003273,0.3289618115113181,0.3289384028574633,0.32891500086514913,0.3288916055310589,0.3288682168518781,0.3288448348242947,0.3288214594449991,0.3287980907106836,0.32877472861804347,0.32875137316377595,0.3287280243445807,0.3287046821571597,0.3286813465982174,0.3286580176644604,0.32863469535259776,0.32861137965934095,0.32858807058140355,0.3285647681155016,0.3285414722583535,0.32851818300667995,0.3284949003572039,0.3284716243066507,0.3284483548517481,0.3284250919892259,0.32840183571581655,0.3283785860282546,0.3283553429232769,0.3283321063976227,0.3283088764480335,0.32828565307125324,0.3282624362640279,0.328239226023106,0.32821602234523833,0.3281928252271778,0.3281696346656798,0.3281464506575019,0.3281232731994041,0.3281001022881485,0.32807693792049963,0.3280537800932243,0.3280306288030915,0.3280074840468724,0.3279843458213409,0.32796121412327267,0.327938088949446,0.3279149702966412,0.327891858161641,0.3278687525412304,0.32784565343219657,0.327822560831329,0.3277994747354195,0.327776395141262,0.3277533220456528,0.3277302554453904,0.32770719533727566,0.3276841417181115,0.3276610945847032,0.32763805393385836,0.32761501976238666,0.32759199206710016,0.327568970844813,0.32754595609234183,0.3275229478065052,0.3274999459841242,0.32747695062202187,0.3274539617170238,0.3274309792659575,0.3274080032656529,0.3273850337129421,0.3273620706046594,0.3273391139376413,0.3273161637087266,0.32729321991475624,0.3272702825525734,0.3272473516190236,0.32722442711095423,0.3272015090252153,0.3271785973586587,0.32715569210813866,0.32713279327051165,0.32710990084263636,0.3270870148213735,0.3270641352035861,0.3270412619861394,0.3270183951659008,0.32699553473973997,0.3269726807045286,0.32694983305714065,0.3269269917944523,0.32690415691334185,0.3268813284106899,0.3268585062833791,0.32683569052829425,0.32681288114232243,0.32679007812235294,0.3267672814652771,0.3267444911679885,0.32672170722738264,0.3266989296403577,0.3266761584038136,0.3266533935146525,0.32663063496977884,0.3266078827660991,0.326585136900522,0.32656239736995823,0.3265396641713209,0.3265169373015251,0.32649421675748813,0.3264715025361294,0.3264487946343704,0.32642609304913484,0.3264033977773486,0.32638070881593967,0.3263580261618382,0.32633534981197626,0.32631267976328837,0.32629001601271107,0.32626735855718286,0.3262447073936446,0.32622206251903907,0.3261994239303113,0.32617679162440855,0.32615416559827987,0.3261315458488767,0.3261089323731525,0.3260863251680629,0.32606372423056545,0.32604112955762016,0.3260185411461887,0.3259959589932353,0.3259733830957259,0.3259508134506288,0.32592825005491427,0.32590569290555477,0.32588314199952473,0.3258605973338008,0.32583805890536166,0.3258155267111881,0.3257930007482629,0.32577048101357114,0.32574796750409973,0.3257254602168379,0.3257029591487768,0.3256804642969096,0.3256579756582318,0.32563549322974067,0.3256130170084359,0.32559054699131895,0.3255680831753934,0.32554562555766503,0.3255231741351416,0.3255007289048329,0.3254782898637508,0.3254558570089094,0.3254334303373246,0.3254110098460144,0.325388595531999,0.3253661873923006,0.3253437854239433,0.3253213896239535,0.3252989999893595,0.32527661651719164,0.3252542392044822,0.3252318680482658,0.3252095030455789,0.3251871441934599,0.3251647914889495,0.3251424449290901,0.3251201045109266,0.32509777023150543,0.32507544208787537,0.3250531200770871,0.3250308041961933,0.3250084944422489,0.32498619081231045,0.3249638933034369,0.32494160191268895,0.3249193166371296,0.3248970374738235,0.32487476441983765,0.3248524974722408,0.32483023662810395,0.32480798188449994,0.3247857332385036,0.32476349068719185,0.3247412542276436,0.32471902385693974,0.32469679957216313,0.3246745813703987,0.3246523692487332,0.3246301632042557,0.32460796323405694,0.3245857693352298,0.32456358150486914,0.32454139974007173,0.3245192240379364,0.324497054395564,0.3244748908100572,0.3244527332785208,0.32443058179806156,0.32440843636578814,0.3243862969788112,0.3243641636342434,0.3243420363291994,0.32431991506079566,0.32429779982615087,0.3242756906223854,0.3242535874466219,0.3242314902959847,0.32420939916760017,0.3241873140585967,0.32416523496610467,0.3241431618872562,0.3241210948191856,0.32409903375902904,0.32407697870392466,0.3240549296510124,0.32403288659743434,0.32401084954033443,0.3239888184768587,0.3239667934041547,0.3239447743193724,0.32392276121966346,0.32390075410218155,0.3238787529640822,0.323856757802523,0.32383476861466326,0.3238127853976644,0.32379080814868977,0.3237688368649046,0.3237468715434759,0.3237249121815729,0.32370295877636646,0.3236810113250295,0.3236590698247369,0.3236371342726653,0.3236152046659935,0.3235932810019019,0.323571363277573,0.3235494514901912,0.3235275456369428,0.32350564571501594,0.32348375172160077,0.3234618636538892,0.3234399815090752,0.3234181052843545,0.3233962349769248,0.3233743705839857,0.32335251210273863,0.32333065953038703,0.32330881286413604,0.32328697210119284,0.3232651372387665,0.32324330827406794,0.3232214852043098,0.323199668026707,0.32317785673847593,0.32315605133683506,0.32313425181900474,0.3231124581822071,0.3230906704236661,0.3230688885406079,0.3230471125302602,0.32302534238985253,0.3230035781166167,0.3229818197077858,0.32296006716059533,0.32293832047228227,0.32291657964008563,0.3228948446612464,0.32287311553300707,0.3228513922526123,0.32282967481730845,0.3228079632243439,0.3227862574709686,0.32276455755443456,0.32274286347199566,0.32272117522090743,0.3226994927984274,0.322677816201815,0.3226561454283313,0.3226344804752394,0.322612821339804,0.322591168019292,0.3225695205109718,0.3225478788121138,0.3225262429199901,0.3225046128318748,0.32248298854504376,0.32246137005677455,0.3224397573643468,0.32241815046504174,0.3223965493561425,0.32237495403493405,0.3223533644987032,0.3223317807447386,0.3223102027703305,0.32228863057277124,0.32226706414935485,0.3222455034973771,0.3222239486141357,0.32220239949693014,0.3221808561430617,0.32215931854983326,0.32213778671454996,0.32211626063451837,0.3220947403070469,0.32207322572944586,0.3220517168990273,0.3220302138131051,0.322008716468995,0.3219872248640143,0.32196573899548236,0.32194425886072014,0.32192278445705047,0.321901315781798,0.321879852832289,0.32185839560585167,0.321836944099816,0.3218154983115137,0.3217940582382783,0.321772623877445,0.32175119522635093,0.32172977228233485,0.32170835504273737,0.32168694350490096,0.3216655376661696,0.32164413752388926,0.32162274307540767,0.3216013543180742,0.32157997124924,0.3215585938662581,0.32153722216648317,0.3215158561472718,0.321494495805982,0.32147314113997394,0.32145179214660924,0.32143044882325145,0.32140911116726584,0.32138777917601935,0.3213664528468807,0.3213451321772204,0.3213238171644106,0.3213025078058254,0.3212812040988404,0.3212599060408331,0.3212386136291827,0.3212173268612701,0.32119604573447785,0.3211747702461905,0.32115350039379414,0.32113223617467657,0.3211109775862275,0.321089724625838,0.3210684772909013,0.32104723557881215,0.321025999486967,0.321004769012764,0.3209835441536032,0.3209623249068861,0.32094111127001623,0.32091990324039854,0.32089870081543986,0.3208775039925488,0.32085631276913534,0.32083512714261164,0.32081394711039124,0.3207927726698895,0.3207716038185234,0.3207504405537118,0.32072928287287517,0.3207081307734355,0.32068698425281683,0.3206658433084446,0.3206447079377462,0.32062357813815034,0.3206024539070879,0.3205813352419911,0.32056022214029395,0.3205391145994323,0.3205180126168434,0.32049691618996634,0.32047582531624197,0.32045473999311275,0.3204336602180228,0.32041258598841793,0.32039151730174564,0.3203704541554551,0.32034939654699723,0.3203283444738245,0.3203072979333912,0.32028625692315305,0.32026522144056774,0.3202441914830944,0.320223167048194,0.320202148133329,0.3201811347359637,0.3201601268535639,0.3201391244835972,0.3201181276235328,0.3200971362708416,0.32007615042299603,0.32005517007747036,0.32003419523174037,0.32001322588328357,0.3199922620295791,0.3199713036681078,0.3199503507963519,0.3199294034117958,0.319908461511925,0.319887525094227,0.31986659415619084,0.31984566869530706,0.3198247487090681,0.3198038341949679,0.31978292515050194,0.3197620215731676,0.31974112346046357,0.3197202308098905,0.3196993436189504,0.3196784618851471,0.31965758560598606,0.3196367147789741,0.31961584940162,0.3195949894714341,0.3195741349859281,0.3195532859426157,0.31953244233901196,0.31951160417263363,0.3194907714409992,0.3194699441416285,0.3194491222720432,0.31942830582976667,0.31940749481232356,0.3193866892172405,0.3193658890420454,0.31934509428426805,0.3193243049414397,0.31930352101109316,0.3192827424907631,0.3192619693779855,0.3192412016702981,0.3192204393652402,0.31919968246035263,0.31917893095317806,0.31915818484126046,0.31913744412214556,0.31911670879338067,0.3190959788525147,0.31907525429709804,0.31905453512468285,0.31903382133282276,0.31901311291907297,0.3189924098809904,0.31897171221613335,0.31895101992206193,0.31893033299633766,0.3189096514365238,0.31888897524018495,0.31886830440488745,0.3188476389281994,0.31882697880769,0.3188063240409305,0.31878567462549345,0.31876503055895306,0.3187443918388851,0.3187237584628669,0.3187031304284773,0.3186825077332969,0.31866189037490766,0.3186412783508932,0.3186206716588387,0.31860007029633075,0.31857947426095784,0.31855888355030965,0.3185382981619777,0.3185177180935549,0.3184971433426357,0.3184765739068163,0.3184560097836942,0.3184354509708686,0.3184148974659402,0.3183943492665113,0.31837380637018575,0.3183532687745688,0.31833273647726745,0.3183122094758901,0.3182916877680468,0.318271171351349,0.3182506602234098,0.3182301543818438,0.31820965382426714,0.31818915854829755,0.3181686685515542,0.31814818383165777,0.3181277043862306,0.31810723021289655,0.3180867613092809,0.3180662976730105,0.31804583930171376,0.3180253861930206,0.31800493834456245,0.3179844957539723,0.3179640584188846,0.31794362633693535,0.31792319950576203,0.3179027779230038,0.3178823615863012,0.31786195049329613,0.3178415446416324,0.3178211440289549,0.3178007486529104,0.317780358511147,0.31775997360131425,0.31773959392106327,0.3177192194680468,0.3176988502399189,0.3176784862343353,0.31765812744895305,0.3176377738814309,0.31761742552942895,0.31759708239060885,0.31757674446263373,0.31755641174316834,0.3175360842298787,0.31751576192043246,0.31749544481249886,0.31747513290374835,0.31745482619185317,0.3174345246744868,0.3174142283493244,0.3173939372140426,0.31737365126631933,0.3173533705038341,0.3173330949242681,0.3173128245253037,0.31729255930462497,0.31727229925991723,0.3172520443888676,0.31723179468916435,0.31721155015849745,0.31719131079455826,0.3171710765950395,0.3171508475576357,0.3171306236800424,0.317110404959957,0.3170901913950782,0.3170699829831061,0.3170497797217425,0.3170295816086903,0.31700938864165423,0.3169892008183403,0.316969018136456,0.31694884059371026,0.3169286681878135,0.31690850091647765,0.31688833877741596,0.3168681817683432,0.3168480298869757,0.31682788313103105,0.31680774149822855,0.3167876049862885,0.3167674735929332,0.31674734731588605,0.31672722615287197,0.3167071101016173,0.3166869991598499,0.316666893325299,0.31664679259569534,0.31662669696877105,0.31660660644225974,0.31658652101389634,0.3165664406814174,0.31654636544256076,0.3165262952950658,0.3165062302366732,0.31648617026512527,0.31646611537816544,0.31644606557353894,0.31642602084899213,0.31640598120227303,0.31638594663113084,0.3163659171333164,0.316345892706582,0.31632587334868095,0.3163058590573686,0.3162858498304011,0.3162658456655365,0.31624584656053406,0.31622585251315444,0.3162058635211598,0.31618587958231364,0.31616590069438083,0.3161459268551279,0.3161259580623224,0.31610599431373365,0.31608603560713217,0.31606608194029,0.3160461333109805,0.3160261897169785,0.3160062511560602,0.3159863176260031,0.3159663891245864,0.31594646564959034,0.3159265471987968,0.315906633769989,0.3158867253609516,0.3158668219694704,0.31584692359333305,0.3158270302303281,0.31580714187824593,0.315787258534878,0.3157673801980173,0.3157475068654582,0.3157276385349964,0.31570777520442905,0.3156879168715546,0.3156680635341731,0.3156482151900857,0.3156283718370951,0.31560853347300527,0.31558870009562173,0.3155688717027513,0.3155490482922021,0.31552922986178367,0.31550941640930696,0.3154896079325843,0.3154698044294294,0.3154500058976572,0.3154302123350842,0.3154104237395282,0.31539064010880835,0.31537086144074516,0.3153510877331605,0.31533131898387773,0.31531155519072135,0.31529179635151744,0.3152720424640933,0.31525229352627765,0.3152325495359006,0.3152128104907935,0.31519307638878924,0.3151733472277219,0.31515362300542693,0.3151339037197413,0.3151141893685031,0.31509447994955203,0.3150747754607289,0.3150550758998759,0.3150353812648368,0.3150156915534565,0.31499600676358125,0.3149763268930587,0.314956651939738,0.3149369819014692,0.31491731677610424,0.31489765656149604,0.314878001255499,0.3148583508559687,0.31483870536076225,0.3148190647677381,0.31479942907475583,0.3147797982796766,0.3147601723803627,0.31474055137467793,0.3147209352604872,0.314701324035657,0.314681717698055,0.3146621162455502,0.3146425196760129,0.31462292798731495,0.31460334117732924,0.31458375924393017,0.3145641821849933,0.31454460999839573,0.31452504268201564,0.3145054802337327,0.3144859226514278,0.31446636993298327,0.31444682207628266,0.31442727907921086,0.31440774093965396,0.3143882076554996,0.3143686792246365,0.31434915564495497,0.31432963691434623,0.3143101230307032,0.3142906139919199,0.3142711097958917,0.3142516104405152,0.3142321159236885,0.3142126262433108,0.3141931413972827,0.3141736613835061,0.3141541861998842,0.3141347158443215,0.31411525031472376,0.3140957896089981,0.3140763337250528,0.3140568826607976,0.3140374364141435,0.3140179949830028,0.3139985583652889,0.31397912655891685,0.31395969956180253,0.31394027737186364,0.31392085998701874,0.31390144740518783,0.3138820396242923,0.31386263664225456,0.31384323845699863,0.3138238450664495,0.3138044564685337,0.31378507266117894,0.3137656936423141,0.3137463194098695,0.31372694996177675,0.31370758529596854,0.313688225410379,0.31366887030294355,0.31364951997159873,0.3136301744142826,0.3136108336289342,0.3135914976134941,0.31357216636590385,0.31355283988410665,0.31353351816604663,0.3135142012096694,0.3134948890129216,0.3134755815737515,0.31345627889010824,0.3134369809599425,0.3134176877812061,0.31339839935185215,0.31337911566983495,0.31335983673311024,0.3133405625396348,0.31332129308736684,0.3133020283742657,0.313282768398292,0.3132635131574077,0.31324426264957594,0.31322501687276116,0.313205775824929,0.3131865395040462,0.3131673079080811,0.3131480810350031,0.31312885888278275,0.31310964144939196,0.31309042873280396,0.313071220730993,0.3130520174419348,0.3130328188636061,0.31301362499398516,0.31299443583105124,0.31297525137278487,0.31295607161716804,0.3129368965621836,0.31291772620581604,0.3128985605460507,0.3128793995808744,0.3128602433082752,0.3128410917262423,0.3128219448327661,0.3128028026258383,0.3127836651034519,0.3127645322636009,0.31274540410428076,0.31272628062348806,0.3127071618192206,0.31268804768947744,0.31266893823225883,0.31264983344556624,0.31263073332740243,0.31261163787577134,0.312592547088678,0.31257346096412886,0.31255437950013154,0.31253530269469476,0.3125162305458285,0.3124971630515441,0.31247810020985395,0.31245904201877167,0.31243998847631216,0.3124209395804915,0.312401895329327,0.312382855720837,0.3123638207530414,0.31234479042396096,0.3123257647316179,0.31230674367403544,0.31228772724923815,0.3122687154552517,0.31224970829010307,0.31223070575182044,0.312211707838433,0.3121927145479713,0.31217372587846715,0.3121547418279534,0.31213576239446417,0.31211678757603484,0.31209781737070175,0.3120788517765027,0.3120598907914766,0.3120409344136635,0.3120219826411047,0.3120030354718426,0.3119840929039209,0.3119651549353844,0.3119462215642791,0.3119272927886523,0.3119083686065523,0.3118894490160287,0.3118705340151323,0.31185162360191504,0.31183271777443,0.3118138165307315,0.311794919868875,0.31177602778691715,0.3117571402829158,0.31173825735493,0.3117193790010199,0.3117005052192469,0.3116816360076735,0.3116627713643635,0.3116439112873816,0.311625055774794,0.3116062048246679,0.3115873584350716,0.31156851660407475,0.31154967932974814,0.31153084661016345,0.3115120184433939,0.31149319482751375,0.31147437576059817,0.31145556124072393,0.31143675126596865,0.31141794583441124,0.3113991449441316,0.31138034859321106,0.31136155677973193,0.3113427695017777,0.31132398675743306,0.3113052085447838,0.3112864348619168,0.3112676657069203,0.3112489010778836,0.3112301409728971,0.31121138539005233,0.311192634327442,0.31117388778316,0.3111551457553015,0.3111364082419625,0.31111767524124034,0.3110989467512335,0.3110802227700417,0.31106150329576554,0.311042788326507,0.31102407786036906,0.31100537189545596,0.31098667042987294,0.3109679734617265,0.3109492809891243,0.31093059301017495,0.3109119095229884,0.31089323052567563,0.3108745560163488,0.31085588599312114,0.31083722045410705,0.31081855939742215,0.31079990282118297,0.3107812507235075,0.3107626031025144,0.31074395995632403,0.31072532128305735,0.31070668708083676,0.3106880573477857,0.31066943208202874,0.31065081128169153,0.3106321949449009,0.31061358306978476,0.31059497565447214,0.3105763726970933,0.31055777419577946,0.31053918014866305,0.31052059055387765,0.31050200540955786,0.31048342471383944,0.3104648484648592,0.3104462766607553,0.3104277092996667,0.31040914637973366,0.31039058789909757,0.31037203385590084,0.310353484248287,0.3103349390744007,0.3103163983323877,0.31029786202039494,0.31027933013657044,0.31026080267906314,0.3102422796460234,0.3102237610356024,0.3102052468459526,0.3101867370752275,0.31016823172158164,0.3101497307831708,0.31013123425815187,0.31011274214468254,0.310094254440922,0.31007577114503027,0.3100572922551686,0.3100388177694992,0.3100203476861856,0.31000188200339207,0.3099834207192844,0.30996496383202915,0.3099465113397941,0.30992806324074806,0.3099096195330611,0.30989118021490414,0.30987274528444925,0.3098543147398698,0.30983588857933986,0.309817466801035,0.3097990494031316,0.3097806363838072,0.30976222774124046,0.3097438234736111,0.3097254235790999,0.3097070280558886,0.3096886369021603,0.30967025011609906,0.3096518676958899,0.30963348963971904,0.30961511594577373,0.3095967466122423,0.30957838163731416,0.3095600210191798,0.3095416647560308,0.3095233128460598,0.3095049652874604,0.3094866220784275,0.30946828321715686,0.30944994870184545,0.30943161853069123,0.30941329270189327,0.30939497121365156,0.3093766540641674,0.309358341251643,0.30934003277428174,0.30932172863028784,0.3093034288178669,0.3092851333352252,0.30926684218057054,0.3092485553521114,0.30923027284805743,0.30921199466661936,0.3091937208060091,0.30917545126443946,0.30915718604012415,0.3091389251312784,0.3091206685361181,0.3091024162528602,0.309084168279723,0.3090659246149256,0.30904768525668824,0.30902945020323214,0.3090112194527796,0.3089929930035541,0.30897477085378,0.3089565530016827,0.30893833944548876,0.30892013018342573,0.3089019252137223,0.3088837245346079,0.3088655281443134,0.30884733604107045,0.3088291482231118,0.3088109646886714,0.30879278543598393,0.3087746104632853,0.3087564397688125,0.3087382733508035,0.30872011120749726,0.3087019533371338,0.3086837997379542,0.30866565040820054,0.30864750534611607,0.3086293645499449,0.30861122801793217,0.30859309574832416,0.30857496773936816,0.3085568439893124,0.30853872449640624,0.30852060925890007,0.3085024982750452,0.3084843915430941,0.3084662890613001,0.3084481908279177,0.30843009684120243,0.3084120070994107,0.3083939216008001,0.30837584034362914,0.30835776332615744,0.3083396905466455,0.308321622003355,0.30830355769454854,0.3082854976184897,0.30826744177344323,0.3082493901576748,0.308231342769451,0.30821329960703964,0.3081952606687094,0.30817722595272995,0.30815919545737214,0.3081411691809076,0.30812314712160926,0.30810512927775074,0.30808711564760694,0.30806910622945355,0.3080511010215675,0.3080331000222265,0.3080151032297093,0.3079971106422959,0.307979122258267,0.3079611380759045,0.30794315809349115,0.3079251823093108,0.30790721072164834,0.30788924332878964,0.3078712801290214,0.3078533211206315,0.30783536630190883,0.3078174156711432,0.30779946922662543,0.3077815269666474,0.3077635888895018,0.30774565499348255,0.30772772527688447,0.3077097997380033,0.30769187837513584,0.30767396118657997,0.3076560481706343,0.3076381393255988,0.30762023464977406,0.30760233414146193,0.3075844377989651,0.3075665456205873,0.30754865760463324,0.30753077374940857,0.3075128940532201,0.30749501851437533,0.307477147131183,0.30745927990195276,0.3074414168249952,0.3074235578986219,0.3074057031211454,0.30738785249087935,0.3073700060061382,0.30735216366523743,0.30733432546649364,0.30731649140822426,0.30729866148874774,0.3072808357063834,0.3072630140594518,0.30724519654627414,0.3072273831651729,0.30720957391447123,0.3071917687924936,0.3071739677975651,0.3071561709280121,0.3071383781821618,0.3071205895583422,0.3071028050548825,0.3070850246701129,0.3070672484023643,0.30704947624996887,0.3070317082112596,0.30701394428457035,0.3069961844682362,0.3069784287605929,0.3069606771599773,0.3069429296647273,0.30692518627318166,0.30690744698368005,0.3068897117945632,0.30687198070417276,0.30685425371085134,0.3068365308129425,0.30681881200879085,0.3068010972967417,0.30678338667514166,0.3067656801423379,0.306747977696679,0.30673027933651414,0.30671258506019355,0.3066948948660685,0.3066772087524911,0.30665952671781443,0.3066418487603926,0.30662417487858046,0.3066065050707341,0.3065888393352104,0.30657117767036723,0.30655352007456327,0.3065358665461583,0.306518217083513,0.306500571684989,0.3064829303489488,0.306465293073756,0.30644765985777495,0.3064300306993711,0.3064124055969108,0.30639478454876123,0.30637716755329064,0.3063595546088682,0.30634194571386403,0.306324340866649,0.30630674006559516,0.3062891433090754,0.3062715505954635,0.3062539619231343,0.30623637729046344,0.30621879669582747,0.30620122013760404,0.3061836476141716,0.30616607912390964,0.3061485146651984,0.3061309542364192,0.3061133978359542,0.3060958454621866,0.30607829711350043,0.3060607527882807,0.30604321248491323,0.30602567620178495,0.3060081439372836,0.3059906156897978,0.30597309145771723,0.3059555712394324,0.3059380550333347,0.30592054283781656,0.30590303465127133,0.3058855304720931,0.305868030298677,0.3058505341294191,0.30583304196271643,0.30581555379696684,0.305798069630569,0.3057805894619228,0.30576311328942885,0.30574564111148855,0.3057281729265044,0.30571070873287987,0.3056932485290191,0.3056757923133274,0.3056583400842107,0.30564089184007626,0.3056234475793318,0.30560600730038623,0.3055885710016492,0.3055711386815314,0.3055537103384444,0.3055362859708006,0.30551886557701347,0.30550144915549715,0.30548403670466695,0.30546662822293874,0.3054492237087296,0.30543182316045747,0.30541442657654105,0.30539703395539997,0.30537964529545486,0.3053622605951272,0.3053448798528394,0.3053275030670147,0.3053101302360772,0.3052927613584521,0.30527539643256524,0.3052580354568435,0.3052406784297147,0.30522332534960733,0.30520597621495116,0.30518863102417637,0.3051712897757145,0.30515395246799765,0.3051366190994589,0.3051192896685323,0.3051019641736527,0.3050846426132559,0.30506732498577854,0.3050500112896582,0.3050327015233332,0.30501539568524305,0.3049980937738278,0.30498079578752857,0.30496350172478737,0.30494621158404694,0.3049289253637512,0.3049116430623447,0.3048943646782729,0.3048770902099822,0.3048598196559199,0.30484255301453406,0.3048252902842738,0.3048080314635889,0.3047907765509303,0.30477352554474957,0.3047562784434992,0.30473903524563256,0.3047217959496041,0.3047045605538688,0.30468732905688284,0.30467010145710294,0.30465287775298705,0.30463565794299374,0.3046184420255825,0.3046012299992138,0.3045840218623488,0.30456681761344967,0.3045496172509794,0.30453242077340187,0.30451522817918175,0.3044980394667847,0.30448085463467717,0.3044636736813265,0.3044464966052008,0.30442932340476925,0.30441215407850164,0.3043949886248689,0.3043778270423425,0.3043606693293951,0.3043435154845,0.3043263655061314,0.30430921939276445,0.3042920771428751,0.30427493875494005,0.30425780422743703,0.3042406735588446,0.30422354674764207,0.30420642379230967,0.30418930469132854,0.3041721894431806,0.30415507804634867,0.30413797049931635,0.30412086680056816,0.30410376694858937,0.30408667094186637,0.3040695787788861,0.3040524904581364,0.3040354059781062,0.30401832533728496,0.3040012485341632,0.30398417556723223,0.30396710643498415,0.30395004113591195,0.30393297966850946,0.3039159220312715,0.30389886822269346,0.30388181824127175,0.3038647720855036,0.3038477297538871,0.30383069124492107,0.3038136565571053,0.30379662568894045,0.3037795986389278,0.3037625754055697,0.3037455559873693,0.3037285403828304,0.30371152859045797,0.3036945206087575,0.3036775164362355,0.30366051607139916,0.30364351951275675,0.30362652675881713,0.30360953780809014,0.3035925526590864,0.3035755713103174,0.3035585937602954,0.3035416200075336,0.30352465005054585,0.303507683887847,0.3034907215179526,0.30347376293937917,0.303456808150644,0.30343985715026517,0.30342290993676163,0.3034059665086531,0.3033890268644602,0.3033720910027043,0.3033551589219077,0.30333823062059345,0.30332130609728536,0.30330438535050824,0.3032874683787876,0.30327055518064977,0.30325364575462194,0.30323674009923207,0.3032198382130091,0.3032029400944825,0.30318604574218283,0.3031691551546414,0.30315226833039016,0.3031353852679622,0.30311850596589107,0.30310163042271143,0.30308475863695866,0.30306789060716893,0.3030510263318791,0.3030341658096271,0.3030173090389515,0.3030004560183918,0.30298360674648817,0.30296676122178173,0.3029499194428142,0.3029330814081284,0.3029162471162678,0.3028994165657767,0.3028825897552001,0.30286576668308396,0.3028489473479751,0.30283213174842094,0.30281531988296984,0.3027985117501709,0.3027817073485742,0.3027649066767303,0.3027481097331909,0.30273131651650825,0.30271452702523566,0.30269774125792687,0.30268095921313687,0.30266418088942104,0.3026474062853358,0.3026306353994384,0.3026138682302867,0.30259710477643953,0.3025803450364564,0.30256358900889774,0.3025468366923246,0.30253008808529896,0.3025133431863836,0.30249660199414213,0.3024798645071388,0.3024631307239387,0.30244640064310785,0.302429674263213,0.3024129515828215,0.3023962326005018,0.30237951731482293,0.30236280572435476,0.302346097827668,0.30232939362333416,0.3023126931099254,0.3022959962860149,0.3022793031501763,0.30226261370098434,0.30224592793701444,0.30222924585684274,0.30221256745904623,0.3021958927422027,0.30217922170489064,0.3021625543456894,0.3021458906631792,0.30212923065594083,0.30211257432255595,0.3020959216616071,0.3020792726716774,0.30206262735135103,0.3020459856992127,0.302029347713848,0.3020127133938434,0.3019960827377859,0.30197945574426344,0.3019628324118647,0.3019462127391793,0.30192959672479736,0.3019129843673099,0.3018963756653088,0.3018797706173866,0.3018631692221366,0.30184657147815297,0.3018299773840305,0.30181338693836507,0.30179680013975296,0.3017802169867914,0.3017636374780784,0.30174706161221265,0.3017304893877938,0.301713920803422,0.3016973558576984,0.3016807945492248,0.30166423687660376,0.3016476828384387,0.3016311324333337,0.30161458565989363,0.30159804251672423,0.30158150300243186,0.30156496711562375,0.3015484348549078,0.3015319062188927,0.301515381206188,0.30149885981540386,0.3014823420451514,0.3014658278940423,0.3014493173606891,0.30143281044370496,0.3014163071417041,0.3013998074533012,0.30138331137711183,0.30136681891175243,0.3013503300558399,0.30133384480799214,0.30131736316682767,0.301300885130966,0.30128441069902706,0.3012679398696317,0.30125147264140156,0.3012350090129591,0.30121854898292727,0.30120209254992997,0.3011856397125918,0.3011691904695382,0.30115274481939525,0.3011363027607898,0.30111986429234944,0.3011034294127025,0.30108699812047823,0.3010705704143063,0.3010541462928175,0.3010377257546431,0.30102130879841515,0.30100489542276654,0.3009884856263309,0.3009720794077425,0.3009556767656365,0.3009392776986486,0.30092288220541547,0.30090649028457445,0.3008901019347634,0.3008737171546213,0.30085733594278763,0.30084095829790264,0.30082458421860736,0.30080821370354355,0.3007918467513537,0.30077548336068105,0.30075912353016954,0.30074276725846394,0.3007264145442096,0.30071006538605277,0.3006937197826403,0.30067737773261993,0.30066103923464005,0.3006447042873497,0.30062837288939875,0.30061204503943784,0.30059572073611823,0.300579399978092,0.30056308276401195,0.3005467690925316,0.3005304589623052,0.3005141523719876,0.30049784932023466,0.3004815498057028,0.3004652538270492,0.3004489613829316,0.3004326724720088,0.30041638709294,0.3004001052443854,0.3003838269250057,0.3003675521334625,0.300351280868418,0.3003350131285352,0.30031874891247784,0.3003024882189103,0.30028623104649765,0.3002699773939059,0.30025372725980154,0.30023748064285194,0.3002212375417251,0.30020499795508976,0.3001887618816154,0.30017252931997224,0.3001563002688312,0.3001400747268639,0.3001238526927426,0.3001076341651405,0.30009141914273135,0.30007520762418954,0.30005899960819044,0.30004279509340986,0.3000265940785245,0.3000103965622118,0.2999942025431496,0.29997801202001695,0.29996182499149315,0.2999456414562585,0.299929461412994,0.29991328486038116,0.2998971117971024,0.2998809422218407,0.2998647761332799,0.29984861353010445,0.29983245441099954,0.29981629877465105,0.29980014661974563,0.2997839979449705,0.2997678527490138,0.2997517110305642,0.29973557278831103,0.29971943802094453,0.2997033067271555,0.29968717890563557,0.29967105455507687,0.29965493367417234,0.29963881626161576,0.29962270231610144,0.2996065918363244,0.29959048482098033,0.2995743812687659,0.29955828117837807,0.2995421845485149,0.2995260913778747,0.29951000166515696,0.2994939154090615,0.29947783260828903,0.2994617532615409,0.2994456773675192,0.2994296049249266,0.29941353593246656,0.2993974703888433,0.29938140829276155,0.29936534964292694,0.2993492944380456,0.29933324267682454,0.29931719435797133,0.2993011494801942,0.2992851080422023,0.2992690700427052,0.2992530354804133,0.29923700435403777,0.29922097666229025,0.29920495240388323,0.29918893157752985,0.2991729141819439,0.29915690021584,0.2991408896779333,0.2991248825669396,0.29910887888157567,0.29909287862055867,0.29907688178260655,0.2990608883664379,0.2990448983707722,0.2990289117943293,0.29901292863583,0.2989969488939956,0.2989809725675482,0.2989649996552105,0.298949030155706,0.29893306406775877,0.2989171013900936,0.2989011421214359,0.29888518626051186,0.2988692338060484,0.2988532847567729,0.2988373391114136,0.29882139686869935,0.29880545802735975,0.2987895225861249,0.2987735905437258,0.2987576618988941,0.2987417366503618,0.29872581479686205,0.29870989633712836,0.298693981269895,0.298678069593897,0.2986621613078699,0.29864625641055004,0.29863035490067436,0.2986144567769805,0.29859856203820684,0.2985826706830923,0.29856678271037657,0.2985508981188,0.2985350169071035,0.2985191390740288,0.2985032646183183,0.2984873935387149,0.29847152583396225,0.29845566150280484,0.29843980054398755,0.29842394295625607,0.2984080887383569,0.2983922378890368,0.29837639040704356,0.2983605462911256,0.29834470554003173,0.2983288681525118,0.2983130341273161,0.29829720346319555,0.2982813761589019,0.29826555221318735,0.298249731624805,0.2982339143925084,0.29821810051505193,0.2982022899911906,0.2981864828196798,0.2981706789992761,0.2981548785287362,0.2981390814068179,0.2981232876322793,0.2981074972038794,0.29809171012037783,0.29807592638053465,0.29806014598311087,0.29804436892686803,0.2980285952105683,0.29801282483297453,0.29799705779285024,0.2979812940889596,0.29796553372006745,0.29794977668493916,0.29793402298234095,0.29791827261103954,0.29790252556980235,0.29788678185739753,0.2978710414725937,0.2978553044141603,0.2978395706808674,0.2978238402714856,0.2978081131847863,0.2977923894195414,0.29777666897452354,0.29776095184850604,0.2977452380402628,0.2977295275485684,0.297713820372198,0.29769811650992745,0.29768241596053335,0.29766671872279277,0.29765102479548355,0.297635334177384,0.29761964686727344,0.2976039628639314,0.2975882821661383,0.2975726047726752,0.29755693068232375,0.29754125989386615,0.29752559240608545,0.2975099282177651,0.2974942673276894,0.2974786097346433,0.29746295543741214,0.29744730443478207,0.29743165672553995,0.2974160123084732,0.2974003711823697,0.29738473334601834,0.29736909879820833,0.2973534675377297,0.29733783956337295,0.2973222148739294,0.29730659346819094,0.2972909753449499,0.29727536050299963,0.2972597489411338,0.2972441406581468,0.29722853565283364,0.29721293392399006,0.2971973354704124,0.29718174029089744,0.2971661483842429,0.2971505597492468,0.29713497438470815,0.2971193922894263,0.2971038134622013,0.29708823790183403,0.2970726656071257,0.2970570965768783,0.29704153080989437,0.29702596830497724,0.2970104090609307,0.29699485307655926,0.29697930035066794,0.2969637508820626,0.2969482046695496,0.2969326617119358,0.29691712200802883,0.2969015855566369,0.296886052356569,0.29687052240663453,0.2968549957056435,0.2968394722524067,0.29682395204573553,0.2968084350844418,0.29679292136733826,0.29677741089323806,0.296761903660955,0.29674639966930355,0.2967308989170987,0.2967154014031562,0.29669990712629235,0.2966844160853241,0.29666892827906893,0.29665344370634494,0.29663796236597106,0.2966224842567665,0.29660700937755147,0.29659153772714636,0.2965760693043726,0.29656060410805185,0.2965451421370068,0.29652968339006025,0.29651422786603615,0.29649877556375864,0.2964833264820527,0.2964678806197439,0.2964524379756582,0.29643699854862254,0.29642156233746425,0.2964061293410112,0.29639069955809205,0.296375272987536,0.29635984962817286,0.29634442947883294,0.29632901253834737,0.29631359880554775,0.2962981882792663,0.2962827809583359,0.29626737684158994,0.2962519759278624,0.29623657821598814,0.29622118370480227,0.2962057923931407,0.29619040427984,0.29617501936373714,0.2961596376436698,0.2961442591184763,0.2961288837869956,0.29611351164806704,0.29609814270053086,0.2960827769432277,0.2960674143749988,0.2960520549946862,0.2960366988011323,0.29602134579318023,0.2960059959696737,0.29599064932945696,0.29597530587137494,0.2959599655942732,0.29594462849699776,0.29592929457839534,0.2959139638373132,0.2958986362725993,0.29588331188310213,0.29586799066767067,0.2958526726251547,0.2958373577544044,0.2958220460542707,0.2958067375236051,0.29579143216125964,0.2957761299660868,0.29576083093694017,0.29574553507267326,0.2957302423721407,0.2957149528341974,0.295699666457699,0.29568438324150176,0.29566910318446243,0.2956538262854384,0.2956385525432877,0.2956232819568688,0.295608014525041,0.2955927502466639,0.29557748912059795,0.295562231145704,0.29554697632084354,0.2955317246448788,0.2955164761166723,0.2955012307350875,0.29548598849898805,0.29547074940723855,0.29545551345870397,0.2954402806522499,0.29542505098674265,0.2954098244610489,0.2953946010740361,0.2953793808245721,0.2953641637115255,0.29534894973376546,0.2953337388901616,0.29531853117958423,0.29530332660090425,0.2952881251529931,0.2952729268347227,0.2952577316449658,0.29524253958259555,0.2952273506464857,0.2952121648355106,0.2951969821485452,0.29518180258446486,0.2951666261421459,0.2951514528204648,0.29513628261829883,0.2951211155345259,0.2951059515680243,0.295090790717673,0.2950756329823517,0.29506047836094024,0.29504532685231954,0.2950301784553708,0.29501503316897587,0.2949998909920171,0.2949847519233776,0.2949696159619408,0.29495448310659095,0.29493935335621274,0.2949242267096913,0.29490910316591273,0.29489398272376327,0.29487886538213004,0.2948637511399005,0.2948486399959628,0.29483353194920564,0.29481842699851835,0.29480332514279073,0.29478822638091323,0.2947731307117768,0.294758038134273,0.2947429486472939,0.29472786224973224,0.29471277894048126,0.29469769871843476,0.29468262158248715,0.2946675475315333,0.29465247656446875,0.2946374086801896,0.29462234387759256,0.29460728215557475,0.29459222351303394,0.2945771679488684,0.2945621154619772,0.29454706605125963,0.29453201971561577,0.29451697645394626,0.29450193626515214,0.2944868991481352,0.2944718651017977,0.29445683412504237,0.2944418062167727,0.2944267813758925,0.29441175960130644,0.29439674089191953,0.2943817252466373,0.2943667126643661,0.2943517031440125,0.29433669668448387,0.29432169328468805,0.29430669294353345,0.294291695659929,0.29427670143278434,0.2942617102610094,0.2942467221435149,0.2942317370792119,0.29421675506701234,0.2942017761058284,0.2941868001945729,0.2941718273321593,0.2941568575175015,0.294141890749514,0.294126927027112,0.294111966349211,0.2940970087147271,0.2940820541225771,0.2940671025716783,0.2940521540609484,0.2940372085893058,0.2940222661556695,0.2940073267589589,0.293992390398094,0.29397745707199535,0.2939625267795841,0.2939475995197819,0.2939326752915109,0.293917754093694,0.29390283592525424,0.2938879207851158,0.29387300867220273,0.2938580995854402,0.2938431935237536,0.293828290486069,0.2938133904713129,0.29379849347841247,0.2937835995062954,0.2937687085538898,0.2937538206201245,0.2937389357039288,0.29372405380423244,0.29370917491996584,0.29369429905005995,0.29367942619344617,0.2936645563490565,0.29364968951582354,0.29363482569268035,0.29361996487856046,0.2936051070723982,0.29359025227312807,0.29357540047968544,0.29356055169100603,0.2935457059060262,0.2935308631236827,0.2935160233429131,0.2935011865626551,0.29348635278184737,0.2934715219994288,0.2934566942143389,0.2934418694255178,0.2934270476319061,0.2934122288324449,0.2933974130260759,0.29338260021174134,0.29336779038838395,0.293352983554947,0.2933381797103743,0.29332337885361015,0.2933085809835995,0.2932937860992877,0.2932789941996207,0.293264205283545,0.29324941935000765,0.2932346363979561,0.2932198564263384,0.2932050794341033,0.2931903054201997,0.29317553438357735,0.2931607663231865,0.2931460012379778,0.2931312391269024,0.2931164799889123,0.29310172382295957,0.2930869706279972,0.2930722204029785,0.2930574731468572,0.29304272885858784,0.29302798753712533,0.29301324918142513,0.2929985137904432,0.2929837813631361,0.2929690518984608,0.2929543253953748,0.29293960185283635,0.29292488126980387,0.29291016364523653,0.2928954489780941,0.2928807372673366,0.2928660285119248,0.29285132271081993,0.29283661986298365,0.2928219199673782,0.2928072230229665,0.2927925290287118,0.29277783798357776,0.2927631498865289,0.29274846473653005,0.2927337825325465,0.2927191032735442,0.29270442695848964,0.29268975358634963,0.2926750831560917,0.2926604156666837,0.2926457511170943,0.29263108950629235,0.2926164308332474,0.2926017750969296,0.2925871222963093,0.29257247243035767,0.2925578254980464,0.2925431814983473,0.2925285404302333,0.29251390229267726,0.292499267084653,0.29248463480513465,0.29247000545309676,0.2924553790275146,0.29244075552736387,0.29242613495162073,0.29241151729926185,0.29239690256926454,0.2923822907606065,0.29236768187226597,0.29235307590322174,0.29233847285245307,0.29232387271893967,0.29230927550166186,0.2922946811996005,0.2922800898117368,0.29226550133705265,0.29225091577453033,0.29223633312315267,0.292221753381903,0.2922071765497652,0.2921926026257236,0.29217803160876304,0.29216346349786887,0.292148898292027,0.29213433599022376,0.2921197765914461,0.2921052200946814,0.2920906664989174,0.2920761158031427,0.2920615680063461,0.2920470231075169,0.29203248110564517,0.29201794199972125,0.29200340578873596,0.2919888724716809,0.29197434204754785,0.29195981451532926,0.291945289874018,0.2919307681226076,0.2919162492600918,0.2919017332854652,0.2918872201977226,0.29187270999585946,0.29185820267887175,0.2918436982457558,0.29182919669550855,0.2918146980271274,0.29180020223961023,0.2917857093319556,0.29177121930316224,0.2917567321522296,0.29174224787815767,0.2917277664799467,0.29171328795659773,0.29169881230711203,0.29168433953049155,0.29166986962573865,0.2916554025918562,0.29164093842784755,0.2916264771327166,0.29161201870546766,0.29159756314510565,0.2915831104506359,0.2915686606210641,0.2915542136553968,0.29153976955264066,0.29152532831180306,0.2915108899318918,0.29149645441191513,0.29148202175088184,0.29146759194780136,0.2914531650016832,0.2914387409115378,0.29142431967637594,0.2914099012952087,0.2913954857670479,0.2913810730909057,0.2913666632657949,0.29135225629072864,0.2913378521647206,0.29132345088678485,0.29130905245593613,0.29129465687118966,0.29128026413156094,0.2912658742360662,0.29125148718372185,0.2912371029735452,0.29122272160455376,0.29120834307576543,0.29119396738619896,0.2911795945348732,0.2911652245208078,0.2911508573430226,0.2911364930005383,0.29112213149237565,0.29110777281755623,0.2910934169751018,0.291079063964035,0.2910647137833785,0.2910503664321558,0.2910360219093907,0.29102168021410757,0.29100734134533124,0.29099300530208694,0.29097867208340045,0.2909643416882981,0.2909500141158065,0.290935689364953,0.29092136743476515,0.2909070483242713,0.2908927320324999,0.29087841855848023,0.29086410790124184,0.2908498000598148,0.29083549503322964,0.2908211928205175,0.29080689342070976,0.2907925968328385,0.29077830305593616,0.2907640120890357,0.29074972393117043,0.2907354385813744,0.29072115603868187,0.2907068763021277,0.2906925993707472,0.2906783252435762,0.2906640539196509,0.290649785398008,0.2906355196776848,0.290621256757719,0.2906069966371486,0.29059273931501234,0.29057848479034926,0.290564233062199,0.2905499841296015,0.29053573799159726,0.2905214946472274,0.29050725409553324,0.29049301633555674,0.29047878136634026,0.29046454918692666,0.29045031979635927,0.29043609319368197,0.29042186937793885,0.29040764834817473,0.2903934301034349,0.29037921464276484,0.2903650019652108,0.2903507920698194,0.2903365849556376,0.29032238062171295,0.29030817906709355,0.29029398029082776,0.29027978429196455,0.29026559106955335,0.29025140062264393,0.29023721295028665,0.29022302805153233,0.29020884592543217,0.2901946665710379,0.2901804899874017,0.29016631617357624,0.29015214512861454,0.2901379768515703,0.29012381134149745,0.2901096485974504,0.2900954886184843,0.29008133140365444,0.29006717695201667,0.2900530252626274,0.29003887633454334,0.2900247301668218,0.29001058675852054,0.28999644610869757,0.2899823082164117,0.2899681730807219,0.2899540407006878,0.2899399110753693,0.2899257842038271,0.2899116600851218,0.289897538718315,0.2898834201024685,0.28986930423664453,0.28985519111990593,0.28984108075131576,0.2898269731299379,0.28981286825483626,0.2897987661250756,0.28978466673972075,0.2897705700978374,0.2897564761984913,0.289742385040749,0.2897282966236773,0.2897142109463434,0.2897001280078152,0.2896860478071608,0.2896719703434489,0.2896578956157486,0.28964382362312957,0.28962975436466165,0.2896156878394154,0.2896016240464617,0.289587562984872,0.2895735046537181,0.2895594490520722,0.2895453961790071,0.2895313460335959,0.2895172986149123,0.2895032539220303,0.2894892119540245,0.2894751727099698,0.28946113618894165,0.28944710239001586,0.2894330713122688,0.28941904295477733,0.2894050173166185,0.28939099439687,0.2893769741946099,0.2893629567089169,0.2893489419388698,0.2893349298835482,0.2893209205420319,0.2893069139134013,0.2892929099967371,0.28927890879112056,0.2892649102956334,0.28925091450935764,0.2892369214313759,0.2892229310607711,0.28920894339662684,0.2891949584380269,0.2891809761840555,0.2891669966337977,0.28915301978633845,0.2891390456407635,0.28912507419615896,0.2891111054516114,0.2890971394062077,0.2890831760590354,0.28906921540918223,0.2890552574557367,0.2890413021977873,0.2890273496344234,0.28901339976473456,0.28899945258781085,0.2889855081027427,0.28897156630862114,0.28895762720453755,0.28894369078958376,0.28892975706285196,0.28891582602343485,0.2889018976704256,0.2888879720029177,0.2888740490200053,0.2888601287207827,0.28884621110434483,0.288832296169787,0.288818383916205,0.28880447434269496,0.28879056744835346,0.2887766632322777,0.28876276169356496,0.28874886283131335,0.28873496664462117,0.28872107313258716,0.28870718229431064,0.28869329412889116,0.2886794086354289,0.28866552581302435,0.28865164566077844,0.2886377681777926,0.2886238933631686,0.28861002121600876,0.28859615173541575,0.28858228492049265,0.288568420770343,0.2885545592840708,0.2885407004607805,0.28852684429957687,0.2885129907995652,0.2884991399598512,0.28848529177954096,0.28847144625774107,0.2884576033935585,0.28844376318610065,0.2884299256344754,0.28841609073779095,0.28840225849515605,0.28838842890567984,0.28837460196847187,0.288360777682642,0.28834695604730076,0.288333137061559,0.28831932072452776,0.28830550703531904,0.28829169599304466,0.2882778875968174,0.28826408184575003,0.288250278738956,0.2882364782755491,0.2882226804546436,0.28820888527535415,0.2881950927367958,0.288181302838084,0.28816751557833487,0.2881537309566645,0.28813994897218986,0.28812616962402804,0.2881123929112967,0.2880986188331139,0.288084847388598,0.288071078576868,0.28805731239704313,0.2880435488482431,0.2880297879295881,0.2880160296401987,0.2880022739791958,0.2879885209457009,0.28797477053883574,0.2879610227577226,0.2879472776014842,0.2879335350692435,0.2879197951601241,0.2879060578732499,0.28789232320774516,0.2878785911627347,0.28786486173734366,0.28785113493069764,0.28783741074192265,0.28782368917014506,0.2878099702144918,0.28779625387408997,0.2877825401480674,0.2877688290355521,0.28775512053567265,0.2877414146475578,0.287727711370337,0.2877140107031399,0.28770031264509677,0.28768661719533817,0.28767292435299496,0.2876592341171987,0.28764554648708107,0.28763186146177444,0.2876181790404113,0.2876044992221248,0.28759082200604835,0.2875771473913158,0.2875634753770615,0.28754980596242014,0.2875361391465268,0.28752247492851707,0.2875088133075268,0.28749515428269234,0.2874814978531505,0.2874678440180384,0.2874541927764936,0.28744054412765413,0.2874268980706583,0.287413254604645,0.2873996137287534,0.2873859754421231,0.28737233974389415,0.28735870663320695,0.2873450761092024,0.2873314481710217,0.2873178228178065,0.2873042000486989,0.28729057986284134,0.28727696225937677,0.28726334723744834,0.2872497347961998,0.2872361249347753,0.2872225176523192,0.28720891294797657,0.2871953108208926,0.28718171127021314,0.2871681142950841,0.2871545198946522,0.28714092806806424,0.2871273388144676,0.28711375213301005,0.2871001680228396,0.2870865864831049,0.28707300751295495,0.287059431111539,0.28704585727800674,0.28703228601150843,0.2870187173111946,0.28700515117621617,0.28699158760572446,0.28697802659887134,0.2869644681548089,0.2869509122726897,0.28693735895166667,0.2869238081908932,0.286910259989523,0.2868967143467103,0.2868831712616096,0.2868696307333759,0.2868560927611645,0.2868425573441312,0.28682902448143216,0.28681549417222385,0.28680196641566325,0.2867884412109077,0.286774918557115,0.28676139845344323,0.28674788089905096,0.28673436589309703,0.28672085343474085,0.2867073435231422,0.2866938361574611,0.28668033133685805,0.28666682906049407,0.2866533293275303,0.2866398321371286,0.286626337488451,0.28661284538066,0.2865993558129185,0.2865858687843898,0.2865723842942374,0.2865589023416256,0.2865454229257187,0.28653194604568166,0.2865184717006796,0.28650499988987826,0.28649153061244365,0.28647806386754215,0.28646459965434057,0.2864511379720062,0.28643767881970655,0.2864242221966096,0.28641076810188376,0.28639731653469785,0.28638386749422096,0.2863704209796226,0.28635697699007284,0.28634353552474184,0.28633009658280045,0.2863166601634197,0.2863032262657712,0.28628979488902667,0.2862763660323585,0.2862629396949393,0.28624951587594216,0.28623609457454047,0.28622267578990807,0.2862092595212191,0.28619584576764834,0.28618243452837056,0.2861690258025613,0.2861556195893963,0.28614221588805155,0.2861288146977038,0.28611541601752977,0.28610201984670686,0.2860886261844127,0.28607523502982546,0.2860618463821235,0.2860484602404857,0.2860350766040913,0.28602169547211986,0.2860083168437514,0.2859949407181663,0.2859815670945453,0.2859681959720695,0.28595482734992056,0.28594146122728026,0.28592809760333093,0.28591473647725524,0.28590137784823627,0.2858880217154574,0.2858746680781025,0.2858613169353557,0.2858479682864017,0.2858346221304253,0.285821278466612,0.2858079372941474,0.2857945986122176,0.2857812624200092,0.28576792871670886,0.285754597501504,0.2857412687735822,0.2857279425321314,0.28571461877633997,0.28570129750539675,0.28568797871849083,0.2856746624148117,0.28566134859354925,0.28564803725389376,0.2856347283950358,0.2856214220161665,0.28560811811647724,0.28559481669515974,0.28558151775140617,0.28556822128440906,0.2855549272933613,0.28554163577745617,0.2855283467358873,0.2855150601678488,0.28550177607253496,0.28548849444914065,0.28547521529686093,0.28546193861489144,0.285448664402428,0.28543539265866685,0.28542212338280476,0.28540885657403864,0.28539559223156596,0.28538233035458443,0.2853690709422922,0.2853558139938879,0.2853425595085702,0.2853293074855384,0.28531605792399234,0.2853028108231318,0.28528956618215723,0.28527632400026937,0.28526308427666935,0.2852498470105586,0.28523661220113905,0.28522337984761287,0.2852101499491827,0.2851969225050514,0.2851836975144224,0.28517047497649944,0.2851572548904865,0.28514403725558807,0.2851308220710089,0.28511760933595426,0.28510439904962964,0.28509119121124105,0.2850779858199946,0.28506478287509707,0.28505158237575545,0.28503838432117706,0.28502518871056975,0.2850119955431416,0.28499880481810114,0.28498561653465715,0.28497243069201883,0.2849592472893958,0.28494606632599806,0.2849328878010359,0.28491971171371994,0.2849065380632613,0.28489336684887134,0.28488019806976184,0.284867031725145,0.28485386781423316,0.28484070633623937,0.28482754729037685,0.284814390675859,0.2848012364919,0.2847880847377141,0.28477493541251586,0.2847617885155205,0.2847486440459433,0.28473550200300013,0.284722362385907,0.28470922519388053,0.28469609042613747,0.28468295808189514,0.28466982816037106,0.28465670066078314,0.2846435755823497,0.2846304529242894,0.2846173326858213,0.28460421486616466,0.28459109946453937,0.28457798648016547,0.28456487591226337,0.2845517677600539,0.2845386620227583,0.28452555869959806,0.28451245778979506,0.28449935929257153,0.28448626320715015,0.2844731695327538,0.28446007826860586,0.28444698941393004,0.2844339029679503,0.28442081892989113,0.2844077372989771,0.2843946580744336,0.28438158125548585,0.2843685068413598,0.28435543483128156,0.2843423652244777,0.2843292980201751,0.28431623321760097,0.28430317081598294,0.28429011081454897,0.2842770532125274,0.28426399800914676,0.2842509452036362,0.2842378947952251,0.2842248467831431,0.28421180116662026,0.28419875794488714,0.2841857171171744,0.2841726786827132,0.284159642640735,0.2841466089904718,0.28413357773115566,0.2841205488620191,0.2841075223822951,0.28409449829121686,0.284081476588018,0.28406845727193253,0.28405544034219465,0.28404242579803907,0.2840294136387008,0.28401640386341515,0.28400339647141787,0.283990391461945,0.28397738883423296,0.2839643885875185,0.2839513907210387,0.283938395234031,0.28392540212573325,0.28391241139538365,0.2838994230422206,0.28388643706548294,0.2838734534644099,0.28386047223824107,0.2838474933862163,0.28383451690757583,0.28382154280156024,0.2838085710674105,0.28379560170436785,0.2837826347116739,0.2837696700885706,0.28375670783430046,0.283743747948106,0.2837307904292301,0.28371783527691635,0.28370488249040837,0.28369193206895016,0.2836789840117862,0.2836660383181612,0.2836530949873201,0.28364015401850856,0.2836272154109722,0.28361427916395715,0.28360134527670994,0.2835884137484773,0.2835754845785064,0.2835625577660448,0.28354963331034017,0.28353671121064083,0.2835237914661952,0.28351087407625225,0.28349795904006103,0.2834850463568713,0.2834721360259327,0.28345922804649565,0.2834463224178106,0.2834334191391285,0.28342051820970066,0.28340761962877853,0.28339472339561417,0.28338182950945984,0.283368937969568,0.2833560487751919,0.28334316192558456,0.2833302774199997,0.28331739525769134,0.28330451543791374,0.2832916379599215,0.28327876282296977,0.2832658900263137,0.283253019569209,0.2832401514509118,0.28322728567067834,0.2832144222277652,0.2832015611214296,0.28318870235092874,0.28317584591552036,0.28316299181446253,0.28315014004701355,0.28313729061243215,0.28312444350997734,0.28311159873890857,0.28309875629848547,0.28308591618796813,0.2830730784066169,0.2830602429536925,0.28304740982845594,0.2830345790301687,0.28302175055809253,0.28300892441148934,0.2829961005896216,0.282983279091752,0.2829704599171437,0.28295764306506,0.28294482853476466,0.2829320163255217,0.2829192064365955,0.2829063988672509,0.2828935936167528,0.2828807906843667,0.2828679900693583,0.28285519177099366,0.28284239578853915,0.2828296021212615,0.28281681076842774,0.2828040217293053,0.28279123500316183,0.28277845058926543,0.2827656684868845,0.28275288869528764,0.2827401112137439,0.2827273360415228,0.28271456317789384,0.2827017926221272,0.28268902437349314,0.2826762584312624,0.2826634947947059,0.28265073346309516,0.2826379744357017,0.2826252177117976,0.28261246329065515,0.28259971117154703,0.2825869613537462,0.28257421383652603,0.2825614686191601,0.28254872570092243,0.2825359850810873,0.2825232467589293,0.2825105107337234,0.282497777004745,0.28248504557126947,0.282472316432573,0.2824595895879316,0.28244686503662203,0.2824341427779211,0.28242142281110616,0.28240870513545463,0.2823959897502445,0.28238327665475393,0.2823705658482615,0.28235785733004604,0.2823451510993867,0.2823324471555631,0.28231974549785493,0.2823070461255424,0.2822943490379061,0.28228165423422674,0.2822689617137854,0.28225627147586363,0.28224358351974316,0.2822308978447061,0.2822182144500348,0.28220553333501214,0.2821928544989211,0.28218017794104505,0.28216750366066773,0.28215483165707317,0.2821421619295457,0.28212949447737007,0.2821168292998312,0.28210416639621433,0.2820915057658053,0.2820788474078899,0.2820661913217545,0.2820535375066856,0.2820408859619702,0.28202823668689553,0.28201558968074913,0.28200294494281886,0.28199030247239293,0.28197766226875987,0.28196502433120846,0.28195238865902794,0.2819397552515077,0.2819271241079376,0.28191449522760764,0.28190186860980837,0.28188924425383044,0.281876622158965,0.2818640023245033,0.28185138474973714,0.2818387694339585,0.28182615637645975,0.2818135455765335,0.28180093703347264,0.28178833074657056,0.2817757267151208,0.28176312493841726,0.2817505254157542,0.2817379281464261,0.281725333129728,0.2817127403649548,0.2817001498514022,0.28168756158836583,0.281674975575142,0.281662391811027,0.2816498102953176,0.2816372310273109,0.28162465400630426,0.28161207923159537,0.28159950670248224,0.2815869364182631,0.2815743683782367,0.2815618025817019,0.2815492390279579,0.2815366777163044,0.28152411864604127,0.2815115618164686,0.2814990072268869,0.28148645487659707,0.2814739047649002,0.28146135689109764,0.2814488112544913,0.2814362678543831,0.2814237266900755,0.28141118776087115,0.28139865106607304,0.28138611660498447,0.28137358437690907,0.2813610543811507,0.28134852661701376,0.2813360010838026,0.2813234777808222,0.2813109567073776,0.2812984378627744,0.2812859212463183,0.28127340685731544,0.28126089469507215,0.28124838475889524,0.2812358770480916,0.2812233715619687,0.28121086829983405,0.2811983672609956,0.2811858684447617,0.2811733718504408,0.2811608774773417,0.28114838532477376,0.2811358953920463,0.28112340767846916,0.28111092218335243,0.2810984389060065,0.28108595784574214,0.2810734790018702,0.2810610023737021,0.2810485279605494,0.2810360557617241,0.28102358577653835,0.2810111180043048,0.28099865244433614,0.2809861890959456,0.28097372795844666,0.280961269031153,0.28094881231337865,0.2809363578044381,0.28092390550364593,0.2809114554103171,0.2808990075237669,0.2808865618433109,0.28087411836826504,0.2808616770979454,0.2808492380316686,0.28083680116875126,0.28082436650851056,0.28081193405026394,0.28079950379332896,0.2807870757370237,0.2807746498806665,0.280762226223576,0.2807498047650709,0.2807373855044706,0.28072496844109446,0.2807125535742624,0.2807001409032944,0.280687730427511,0.28067532214623286,0.28066291605878096,0.2806505121644766,0.2806381104626415,0.28062571095259736,0.28061331363366654,0.28060091850517155,0.2805885255664351,0.2805761348167804,0.28056374625553077,0.28055135988200997,0.2805389756955419,0.280526593695451,0.2805142138810618,0.28050183625169917,0.28048946080668835,0.2804770875453548,0.28046471646702426,0.28045234757102294,0.2804399808566771,0.2804276163233135,0.28041525397025907,0.2804028937968411,0.28039053580238715,0.2803781799862251,0.2803658263476831,0.2803534748860896,0.2803411256007734,0.2803287784910635,0.28031643355628927,0.28030409079578034,0.2802917502088666,0.28027941179487836,0.2802670755531461,0.28025474148300067,0.28024240958377317,0.2802300798547949,0.28021775229539775,0.2802054269049136,0.2801931036826748,0.2801807826280139,0.2801684637402638,0.2801561470187576,0.2801438324628288,0.2801315200718112,0.2801192098450388,0.28010690178184594,0.2800945958815673,0.28008229214353786,0.28006999056709264,0.2800576911515673,0.2800453938962976,0.2800330988006197,0.2800208058638699,0.28000851508538493,0.27999622646450173,0.27998394000055754,0.27997165569288995,0.2799593735408368,0.27994709354373615,0.2799348157009265,0.27992254001174655,0.27991026647553524,0.279897995091632,0.2798857258593762,0.2798734587781079,0.27986119384716723,0.2798489310658945,0.27983667043363053,0.27982441194971647,0.27981215561349343,0.27979990142430317,0.2797876493814874,0.27977539948438856,0.2797631517323489,0.27975090612471126,0.27973866266081865,0.2797264213400144,0.27971418216164223,0.27970194512504587,0.2796897102295697,0.279677477474558,0.27966524685935573,0.2796530183833078,0.27964079204575965,0.2796285678460568,0.2796163457835452,0.2796041258575711,0.27959190806748097,0.2795796924126215,0.2795674788923398,0.2795552675059832,0.2795430582528993,0.2795308511324361,0.2795186461439417,0.27950644328676455,0.27949424256025346,0.27948204396375753,0.279469847496626,0.2794576531582086,0.27944546094785505,0.27943327086491565,0.27942108290874085,0.27940889707868144,0.2793967133740884,0.279384531794313,0.2793723523387069,0.2793601750066219,0.2793479997974103,0.2793358267104245,0.27932365574501716,0.2793114869005413,0.2792993201763503,0.27928715557179756,0.2792749930862371,0.279262832719023,0.27925067446950963,0.27923851833705177,0.27922636432100434,0.2792142124207226,0.27920206263556213,0.2791899149648787,0.27917776940802846,0.27916562596436767,0.2791534846332532,0.2791413454140418,0.2791292083060908,0.27911707330875757,0.2791049404214,0.2790928096433761,0.2790806809740443,0.2790685544127632,0.2790564299588915,0.27904430761178856,0.2790321873708137,0.27902006923532685,0.2790079532046878,0.27899583927825694,0.27898372745539485,0.2789716177354623,0.27895951011782044,0.2789474046018307,0.27893530118685467,0.2789231998722544,0.27891110065739205,0.2788990035416301,0.27888690852433135,0.2788748156048589,0.27886272478257607,0.27885063605684635,0.2788385494270338,0.2788264648925024,0.2788143824526168,0.2788023021067415,0.27879022385424157,0.2787781476944823,0.27876607362682915,0.278754001650648,0.2787419317653049,0.2787298639701662,0.2787177982645985,0.27870573464796883,0.2786936731196442,0.27868161367899225,0.2786695563253806,0.2786575010581772,0.27864544787675044,0.2786333967804688,0.27862134776870107,0.2786093008408165,0.27859725599618423,0.27858521323417407,0.27857317255415587,0.2785611339554998,0.2785490974375764,0.2785370629997562,0.2785250306414105,0.2785130003619103,0.2785009721606273,0.27848894603693325,0.2784769219902003,0.2784649000198006,0.2784528801251071,0.2784408623054925,0.27842884656032996,0.278416832888993,0.27840482129085525,0.27839281176529074,0.2783808043116737,0.2783687989293787,0.2783567956177805,0.2783447943762541,0.2783327952041749,0.2783207981009185,0.2783088030658607,0.2782968100983777,0.27828481919784587,0.278272830363642,0.2782608435951428,0.2782488588917257,0.278236876252768,0.2782248956776476,0.27821291716574237,0.27820094071643076,0.2781889663290912,0.27817699400310253,0.27816502373784385,0.2781530555326945,0.2781410893870341,0.27812912530024253,0.2781171632717,0.2781052033007868,0.27809324538688374,0.2780812895293717,0.278069335727632,0.278057383981046,0.2780454342889955,0.27803348665086247,0.2780215410660292,0.2780095975338783,0.2779976560537926,0.27798571662515514,0.27797377924734923,0.2779618439197584,0.27794991064176666,0.2779379794127581,0.27792605023211714,0.2779141230992284,0.2779021980134769,0.2778902749742476,0.27787835398092625,0.2778664350328984,0.27785451812955003,0.27784260327026744,0.2778306904544371,0.2778187796814458,0.2778068709506806,0.2777949642615287,0.2777830596133778,0.27777115700561567,0.27775925643763033,0.27774735790881017,0.2777354614185438,0.27772356696622014,0.27771167455122825,0.27769978417295754,0.27768789583079767,0.27767600952413857,0.2776641252523704,0.2776522430148836,0.2776403628110689,0.2776284846403172,0.2776166085020198,0.2776047343955681,0.27759286232035385,0.2775809922757691,0.27756912426120617,0.2775572582760574,0.2775453943197157,0.2775335323915741,0.27752167249102583,0.2775098146174645,0.27749795877028394,0.2774861049488782,0.2774742531526417,0.2774624033809689,0.2774505556332547,0.2774387099088943,0.2774268662072829,0.27741502452781625,0.27740318486989024,0.277391347232901,0.27737951161624486,0.27736767801931855,0.27735584644151895,0.27734401688224325,0.2773321893408889,0.27732036381685354,0.27730854030953517,0.2772967188183319,0.2772848993426423,0.277273081881865,0.277261266435399,0.27724945300264353,0.2772376415829981,0.27722583217586233,0.27721402478063634,0.2772022193967203,0.2771904160235148,0.2771786146604205,0.2771668153068385,0.27715501796217,0.27714322262581653,0.27713142929717993,0.2771196379756622,0.27710784866066557,0.2770960613515927,0.27708427604784625,0.2770724927488294,0.27706071145394534,0.27704893216259774,0.27703715487419034,0.2770253795881271,0.2770136063038126,0.2770018350206512,0.27699006573804774,0.2769782984554074,0.27696653317213543,0.27695476988763745,0.27694300860131926,0.276931249312587,0.2769194920208469,0.27690773672550567,0.2768959834259701,0.2768842321216473,0.27687248281194454,0.27686073549626955,0.2768489901740301,0.27683724684463434,0.2768255055074905,0.2768137661620073,0.2768020288075935,0.27679029344365835,0.2767785600696111,0.2767668286848613,0.2767550992888189,0.276743371880894,0.2767316464604969,0.27671992302703824,0.27670820157992887,0.2766964821185799,0.27668476464240266,0.27667304915080876,0.27666133564321005,0.27664962411901867,0.27663791457764686,0.2766262070185073,0.2766145014410129,0.27660279784457664,0.2765910962286119,0.2765793965925323,0.2765676989357516,0.2765560032576839,0.2765443095577437,0.2765326178353454,0.27652092808990386,0.2765092403208342,0.2764975545275517,0.27648587070947195,0.27647418886601083,0.2764625089965843,0.27645083110060875,0.2764391551775007,0.27642748122667693,0.27641580924755454,0.2764041392395509,0.2763924712020833,0.2763808051345698,0.27636914103642835,0.2763574789070771,0.2763458187459348,0.27633416055242,0.2763225043259519,0.2763108500659496,0.27629919777183276,0.276287547443021,0.2762758990789344,0.2762642526789931,0.2762526082426177,0.2762409657692289,0.27622932525824767,0.2762176867090952,0.2762060501211929,0.27619441549396256,0.2761827828268261,0.2761711521192058,0.2761595233705239,0.2761478965802032,0.27613627174766664,0.27612464887233734,0.2761130279536387,0.2761014089909944,0.27608979198382827,0.2760781769315645,0.2760665638336275,0.27605495268944175,0.2760433434984323,0.2760317362600241,0.27602013097364253,0.27600852763871314,0.27599692625466193,0.27598532682091476,0.27597372933689807,0.2759621338020383,0.2759505402157623,0.27593894857749723,0.27592735888667014,0.2759157711427086,0.27590418534504046,0.27589260149309364,0.2758810195862964,0.2758694396240772,0.27585786160586473,0.275846285531088,0.27583471139917615,0.27582313920955864,0.2758115689616652,0.27580000065492555,0.27578843428877003,0.275776869862629,0.275765307375933,0.275753746828113,0.2757421882186,0.2757306315468254,0.2757190768122208,0.275707524014218,0.2756959731522491,0.2756844242257463,0.2756728772341422,0.2756613321768695,0.27564978905336135,0.27563824786305086,0.27562670860537153,0.27561517127975715,0.27560363588564163,0.27559210242245924,0.2755805708896443,0.27556904128663157,0.27555751361285585,0.27554598786775236,0.27553446405075643,0.27552294216130374,0.27551142219883007,0.27549990416277154,0.2754883880525645,0.2754768738676454,0.27546536160745116,0.27545385127141875,0.2754423428589854,0.27543083636958865,0.2754193318026662,0.2754078291576561,0.2753963284339964,0.2753848296311257,0.2753733327484826,0.2753618377855059,0.2753503447416349,0.2753388536163089,0.27532736440896755,0.27531587711905064,0.27530439174599824,0.27529290828925074,0.27528142674824857,0.2752699471224326,0.27525846941124377,0.27524699361412336,0.2752355197305128,0.2752240477598539,0.27521257770158847,0.27520110955515875,0.27518964332000717,0.2751781789955763,0.27516671658130903,0.27515525607664854,0.275143797481038,0.2751323407939211,0.27512088601474166,0.2751094331429436,0.27509798217797127,0.2750865331192691,0.27507508596628183,0.2750636407184544,0.27505219737523207,0.27504075593606014,0.27502931640038436,0.27501787876765055,0.2750064430373048,0.2749950092087935,0.27498357728156314,0.2749721472550606,0.2749607191287329,0.2749492929020272,0.27493786857439106,0.27492644614527223,0.27491502561411857,0.2749036069803783,0.2748921902434999,0.2748807754029318,0.2748693624581231,0.2748579514085227,0.27484654225358,0.27483513499274453,0.27482372962546614,0.2748123261511947,0.2748009245693806,0.27478952487947417,0.2747781270809261,0.2747667311731874,0.27475533715570916,0.27474394502794275,0.2747325547893397,0.27472116643935196,0.27470977997743157,0.27469839540303076,0.274687012715602,0.2746756319145981,0.27466425299947206,0.27465287596967686,0.2746415008246662,0.27463012756389354,0.2746187561868127,0.27460738669287793,0.2745960190815435,0.2745846533522639,0.27457328950449394,0.27456192753768854,0.2745505674513031,0.27453920924479286,0.27452785291761367,0.27451649846922127,0.2745051458990719,0.27449379520662187,0.2744824463913277,0.27447109945264625,0.2744597543900345,0.27444841120294977,0.2744370698908495,0.2744257304531913,0.27441439288943315,0.27440305719903324,0.27439172338144985,0.2743803914361416,0.2743690613625674,0.2743577331601861,0.27434640682845707,0.2743350823668398,0.27432375977479395,0.27431243905177954,0.2743011201972566,0.2742898032106856,0.27427848809152705,0.27426717483924185,0.274255863453291,0.27424455393313574,0.27423324627823764,0.2742219404880583,0.2742106365620598,0.2741993344997042,0.2741880343004538,0.2741767359637713,0.2741654394891195,0.2741541448759614,0.27414285212376027,0.2741315612319797,0.2741202722000832,0.27410898502753483,0.2740976997137987,0.2740864162583391,0.2740751346606208,0.2740638549201083,0.274052577036267,0.27404130100856183,0.2740300268364584,0.2740187545194224,0.2740074840569197,0.2739962154484164,0.2739849486933789,0.27397368379127374,0.2739624207415677,0.2739511595437277,0.2739399001972211,0.2739286427015153,0.2739173870560779,0.27390613326037677,0.2738948813138801,0.2738836312160562,0.27387238296637345,0.2738611365643008,0.27384989200930704,0.2738386493008615,0.2738274084384335,0.27381616942149267,0.2738049322495089,0.27379369692195216,0.2737824634382928,0.27377123179800134,0.27376000200054845,0.273748774045405,0.27373754793204214,0.2737263236599313,0.2737151012285441,0.2737038806373521,0.27369266188582764,0.2736814449734427,0.2736702298996698,0.27365901666398157,0.27364780526585103,0.273636595704751,0.27362538798015507,0.2736141820915366,0.27360297803836936,0.2735917758201273,0.27358057543628456,0.2735693768863156,0.27355818016969496,0.2735469852858975,0.27353579223439817,0.27352460101467235,0.27351341162619536,0.27350222406844293,0.27349103834089095,0.27347985444301554,0.27346867237429295,0.2734574921341998,0.27344631372221273,0.2734351371378088,0.2734239623804651,0.27341278944965913,0.27340161834486837,0.2733904490655707,0.27337928161124403,0.2733681159813668,0.2733569521754173,0.27334579019287425,0.2733346300332165,0.2733234716959232,0.2733123151804736,0.2733011604863472,0.27329000761302386,0.27327885655998335,0.2732677073267059,0.2732565599126719,0.2732454143173619,0.2732342705402567,0.2732231285808372,0.27321198843858474,0.27320085011298073,0.27318971360350675,0.27317857890964464,0.27316744603087656,0.27315631496668463,0.27314518571655144,0.2731340582799597,0.27312293265639215,0.2731118088453321,0.2731006868462627,0.27308956665866757,0.2730784482820305,0.27306733171583536,0.27305621695956633,0.2730451040127078,0.27303399287474434,0.27302288354516074,0.273011776023442,0.2730006703090734,0.2729895664015402,0.2729784643003282,0.2729673640049231,0.27295626551481106,0.2729451688294783,0.27293407394841124,0.2729229808710966,0.2729118895970213,0.27290080012567236,0.2728897124565371,0.27287862658910306,0.2728675425228579,0.2728564602572896,0.2728453797918862,0.2728343011261362,0.27282322425952804,0.27281214919155045,0.2728010759216925,0.27279000444944324,0.27277893477429216,0.27276786689572874,0.27275680081324283,0.27274573652632444,0.2727346740344637,0.27272361333715117,0.2727125544338773,0.27270149732413307,0.2726904420074094,0.27267938848319756,0.27266833675098895,0.27265728681027535,0.2726462386605485,0.2726351923013005,0.27262414773202365,0.27261310495221036,0.2726020639613534,0.2725910247589455,0.2725799873444799,0.2725689517174498,0.27255791787734884,0.2725468858236706,0.272535855555909,0.2725248270735582,0.27251380037611245,0.27250277546306634,0.2724917523339146,0.2724807309881522,0.2724697114252741,0.2724586936447758,0.27244767764615285,0.27243666342890094,0.27242565099251603,0.2724146403364944,0.2724036314603322,0.2723926243635261,0.2723816190455729,0.2723706155059695,0.27235961374421314,0.2723486137598012,0.2723376155522312,0.2723266191210009,0.2723156244656085,0.27230463158555185,0.2722936404803296,0.2722826511494403,0.27227166359238264,0.2722606778086557,0.2722496937977587,0.27223871155919105,0.2722277310924523,0.27221675239704224,0.2722057754724609,0.2721948003182085,0.2721838269337855,0.27217285531869245,0.27216188547243014,0.27215091739449965,0.2721399510844022,0.27212898654163914,0.27211802376571215,0.272107062756123,0.27209610351237373,0.27208514603396655,0.2720741903204039,0.2720632363711884,0.2720522841858229,0.27204133376381034,0.272030385104654,0.2720194382078573,0.27200849307292385,0.27199754969935747,0.27198660808666214,0.2719756682343421,0.27196473014190187,0.2719537938088459,0.27194285923467915,0.2719319264189065,0.2719209953610333,0.2719100660605649,0.2718991385170069,0.2718882127298652,0.27187728869864564,0.2718663664228546,0.2718554459019984,0.27184452713558366,0.27183361012311713,0.27182269486410593,0.27181178135805717,0.2718008696044783,0.27178995960287683,0.2717790513527607,0.2717681448536377,0.27175724010501623,0.27174633710640456,0.2717354358573112,0.2717245363572451,0.2717136386057151,0.27170274260223043,0.2716918483463005,0.27168095583743473,0.2716700650751431,0.27165917605893536,0.2716482887883218,0.2716374032628127,0.2716265194819187,0.2716156374451504,0.27160475715201887,0.2715938786020352,0.2715830017947107,0.27157212672955694,0.2715612534060856,0.27155038182380864,0.2715395119822382,0.27152864388088643,0.27151777751926603,0.2715069128968896,0.2714960500132701,0.27148518886792056,0.2714743294603542,0.2714634717900847,0.27145261585662556,0.27144176165949063],"x":[20.0,20.005997600959617,20.011995201919234,20.017992802878847,20.023990403838464,20.02998800479808,20.0359856057577,20.041983206717312,20.04798080767693,20.053978408636546,20.059976009596163,20.065973610555776,20.071971211515393,20.07796881247501,20.083966413434627,20.08996401439424,20.095961615353858,20.101959216313475,20.10795681727309,20.11395441823271,20.119952019192322,20.12594962015194,20.131947221111556,20.137944822071173,20.143942423030786,20.149940023990403,20.15593762495002,20.161935225909637,20.16793282686925,20.173930427828868,20.179928028788485,20.185925629748102,20.191923230707715,20.197920831667332,20.20391843262695,20.209916033586566,20.215913634546183,20.221911235505797,20.227908836465414,20.23390643742503,20.239904038384648,20.24590163934426,20.251899240303878,20.257896841263495,20.263894442223112,20.269892043182725,20.275889644142342,20.28188724510196,20.287884846061576,20.29388244702119,20.299880047980807,20.305877648940424,20.31187524990004,20.317872850859658,20.32387045181927,20.329868052778888,20.335865653738505,20.341863254698122,20.347860855657736,20.353858456617353,20.35985605757697,20.365853658536587,20.3718512594962,20.377848860455817,20.383846461415434,20.38984406237505,20.395841663334664,20.40183926429428,20.4078368652539,20.413834466213515,20.419832067173132,20.425829668132746,20.431827269092363,20.43782487005198,20.443822471011597,20.44982007197121,20.455817672930827,20.461815273890444,20.46781287485006,20.473810475809675,20.47980807676929,20.48580567772891,20.491803278688526,20.49780087964814,20.503798480607756,20.509796081567373,20.51579368252699,20.521791283486607,20.52778888444622,20.533786485405837,20.539784086365454,20.54578168732507,20.551779288284685,20.557776889244302,20.56377449020392,20.569772091163536,20.57576969212315,20.581767293082766,20.587764894042383,20.593762495002,20.599760095961614,20.60575769692123,20.611755297880848,20.617752898840465,20.62375049980008,20.629748100759695,20.635745701719312,20.64174330267893,20.647740903638546,20.65373850459816,20.659736105557776,20.665733706517393,20.67173130747701,20.677728908436624,20.68372650939624,20.689724110355858,20.695721711315475,20.701719312275088,20.707716913234705,20.713714514194322,20.71971211515394,20.725709716113556,20.73170731707317,20.737704918032787,20.743702518992404,20.74970011995202,20.755697720911634,20.76169532187125,20.767692922830868,20.773690523790485,20.7796881247501,20.785685725709715,20.791683326669332,20.79768092762895,20.803678528588563,20.80967612954818,20.815673730507797,20.821671331467414,20.82766893242703,20.833666533386644,20.83966413434626,20.845661735305878,20.851659336265495,20.85765693722511,20.863654538184726,20.869652139144343,20.87564974010396,20.881647341063573,20.88764494202319,20.893642542982807,20.899640143942424,20.905637744902037,20.911635345861654,20.91763294682127,20.92363054778089,20.929628148740505,20.93562574970012,20.941623350659736,20.947620951619353,20.95361855257897,20.959616153538583,20.9656137544982,20.971611355457817,20.977608956417434,20.983606557377048,20.989604158336665,20.99560175929628,21.0015993602559,21.007596961215516,21.01359456217513,21.019592163134746,21.025589764094363,21.03158736505398,21.037584966013593,21.04358256697321,21.049580167932827,21.055577768892444,21.061575369852058,21.067572970811675,21.073570571771292,21.07956817273091,21.085565773690522,21.09156337465014,21.097560975609756,21.103558576569373,21.10955617752899,21.115553778488604,21.12155137944822,21.127548980407838,21.133546581367455,21.139544182327068,21.145541783286685,21.151539384246302,21.15753698520592,21.163534586165532,21.16953218712515,21.175529788084766,21.181527389044383,21.187524990003997,21.193522590963614,21.19952019192323,21.205517792882848,21.211515393842465,21.217512994802078,21.223510595761695,21.229508196721312,21.23550579768093,21.241503398640543,21.24750099960016,21.253498600559777,21.259496201519394,21.265493802479007,21.271491403438624,21.27748900439824,21.283486605357858,21.28948420631747,21.29548180727709,21.301479408236705,21.307477009196322,21.31347461015594,21.319472211115553,21.32546981207517,21.331467413034787,21.337465013994404,21.343462614954017,21.349460215913634,21.35545781687325,21.361455417832868,21.36745301879248,21.3734506197521,21.379448220711716,21.385445821671333,21.391443422630946,21.397441023590563,21.40343862455018,21.409436225509797,21.415433826469414,21.421431427429027,21.427429028388644,21.43342662934826,21.43942423030788,21.445421831267492,21.45141943222711,21.457417033186726,21.463414634146343,21.469412235105956,21.475409836065573,21.48140743702519,21.487405037984807,21.49340263894442,21.499400239904038,21.505397840863655,21.51139544182327,21.51739304278289,21.523390643742502,21.52938824470212,21.535385845661736,21.541383446621353,21.547381047580966,21.553378648540583,21.5593762495002,21.565373850459817,21.57137145141943,21.577369052379048,21.583366653338665,21.58936425429828,21.595361855257895,21.601359456217512,21.60735705717713,21.613354658136746,21.619352259096363,21.625349860055977,21.631347461015594,21.63734506197521,21.643342662934828,21.64934026389444,21.655337864854058,21.661335465813675,21.667333066773292,21.673330667732905,21.679328268692522,21.68532586965214,21.691323470611756,21.69732107157137,21.703318672530987,21.709316273490604,21.71531387445022,21.721311475409838,21.72730907636945,21.733306677329068,21.739304278288685,21.745301879248302,21.751299480207916,21.757297081167533,21.76329468212715,21.769292283086767,21.77528988404638,21.781287485005997,21.787285085965614,21.79328268692523,21.799280287884844,21.80527788884446,21.81127548980408,21.817273090763695,21.823270691723312,21.829268292682926,21.835265893642543,21.84126349460216,21.847261095561777,21.85325869652139,21.859256297481007,21.865253898440624,21.87125149940024,21.877249100359855,21.88324670131947,21.88924430227909,21.895241903238706,21.90123950419832,21.907237105157936,21.913234706117553,21.91923230707717,21.925229908036787,21.9312275089964,21.937225109956017,21.943222710915634,21.94922031187525,21.955217912834865,21.961215513794482,21.9672131147541,21.973210715713716,21.97920831667333,21.985205917632946,21.991203518592563,21.99720111955218,22.003198720511794,22.00919632147141,22.015193922431028,22.021191523390645,22.02718912435026,22.033186725309875,22.039184326269492,22.04518192722911,22.051179528188726,22.05717712914834,22.063174730107956,22.069172331067573,22.07516993202719,22.081167532986804,22.08716513394642,22.093162734906038,22.099160335865655,22.105157936825268,22.111155537784885,22.117153138744502,22.12315073970412,22.129148340663736,22.13514594162335,22.141143542582967,22.147141143542584,22.1531387445022,22.159136345461814,22.16513394642143,22.171131547381048,22.177129148340665,22.18312674930028,22.189124350259895,22.195121951219512,22.20111955217913,22.207117153138743,22.21311475409836,22.219112355057977,22.225109956017594,22.23110755697721,22.237105157936824,22.24310275889644,22.249100359856058,22.255097960815675,22.26109556177529,22.267093162734906,22.273090763694523,22.27908836465414,22.285085965613753,22.29108356657337,22.297081167532987,22.303078768492604,22.309076369452217,22.315073970411834,22.32107157137145,22.32706917233107,22.333066773290685,22.3390643742503,22.345061975209916,22.351059576169533,22.35705717712915,22.363054778088763,22.36905237904838,22.375049980007997,22.381047580967614,22.387045181927228,22.393042782886845,22.39904038384646,22.40503798480608,22.411035585765692,22.41703318672531,22.423030787684926,22.429028388644543,22.43502598960416,22.441023590563773,22.44702119152339,22.453018792483007,22.459016393442624,22.465013994402238,22.471011595361855,22.47700919632147,22.48300679728109,22.489004398240702,22.49500199920032,22.500999600159936,22.506997201119553,22.512994802079167,22.518992403038784,22.5249900039984,22.530987604958018,22.536985205917635,22.542982806877248,22.548980407836865,22.554978008796482,22.5609756097561,22.566973210715712,22.57297081167533,22.578968412634946,22.584966013594563,22.590963614554177,22.596961215513794,22.60295881647341,22.608956417433028,22.61495401839264,22.620951619352258,22.626949220311875,22.632946821271492,22.63894442223111,22.644942023190723,22.65093962415034,22.656937225109957,22.662934826069574,22.668932427029187,22.674930027988804,22.68092762894842,22.686925229908038,22.69292283086765,22.69892043182727,22.704918032786885,22.710915633746502,22.716913234706116,22.722910835665733,22.72890843662535,22.734906037584967,22.740903638544584,22.746901239504197,22.752898840463814,22.75889644142343,22.764894042383048,22.77089164334266,22.77688924430228,22.782886845261896,22.788884446221513,22.794882047181126,22.800879648140743,22.80687724910036,22.812874850059977,22.818872451019594,22.824870051979207,22.830867652938824,22.83686525389844,22.84286285485806,22.848860455817672,22.85485805677729,22.860855657736906,22.866853258696523,22.872850859656136,22.878848460615753,22.88484606157537,22.890843662534987,22.8968412634946,22.902838864454218,22.908836465413835,22.91483406637345,22.92083166733307,22.926829268292682,22.9328268692523,22.938824470211916,22.944822071171533,22.950819672131146,22.956817273090763,22.96281487405038,22.968812475009997,22.97481007596961,22.980807676929228,22.986805277888845,22.99280287884846,22.998800479808075,23.004798080767692,23.01079568172731,23.016793282686926,23.022790883646543,23.028788484606157,23.034786085565774,23.04078368652539,23.046781287485008,23.05277888844462,23.058776489404238,23.064774090363855,23.070771691323472,23.076769292283085,23.082766893242702,23.08876449420232,23.094762095161936,23.10075969612155,23.106757297081167,23.112754898040784,23.1187524990004,23.124750099960018,23.13074770091963,23.136745301879248,23.142742902838865,23.148740503798482,23.154738104758096,23.160735705717713,23.16673330667733,23.172730907636947,23.17872850859656,23.184726109556177,23.190723710515794,23.19672131147541,23.202718912435024,23.20871651339464,23.21471411435426,23.220711715313875,23.226709316273492,23.232706917233106,23.238704518192723,23.24470211915234,23.250699720111957,23.25669732107157,23.262694922031187,23.268692522990804,23.27469012395042,23.280687724910035,23.28668532586965,23.29268292682927,23.298680527788886,23.3046781287485,23.310675729708116,23.316673330667733,23.32267093162735,23.328668532586967,23.33466613354658,23.340663734506197,23.346661335465814,23.35265893642543,23.358656537385045,23.36465413834466,23.37065173930428,23.376649340263896,23.38264694122351,23.388644542183126,23.394642143142743,23.40063974410236,23.406637345061974,23.41263494602159,23.418632546981208,23.424630147940825,23.43062774890044,23.436625349860055,23.442622950819672,23.44862055177929,23.454618152738906,23.46061575369852,23.466613354658136,23.472610955617753,23.47860855657737,23.484606157536984,23.4906037584966,23.496601359456218,23.502598960415835,23.508596561375448,23.514594162335065,23.520591763294682,23.5265893642543,23.532586965213916,23.53858456617353,23.544582167133147,23.550579768092764,23.55657736905238,23.562574970011994,23.56857257097161,23.574570171931228,23.580567772890845,23.58656537385046,23.592562974810075,23.598560575769692,23.60455817672931,23.610555777688923,23.61655337864854,23.622550979608157,23.628548580567774,23.63454618152739,23.640543782487004,23.64654138344662,23.652538984406238,23.658536585365855,23.66453418632547,23.670531787285086,23.676529388244703,23.68252698920432,23.688524590163933,23.69452219112355,23.700519792083167,23.706517393042784,23.712514994002397,23.718512594962014,23.72451019592163,23.73050779688125,23.736505397840865,23.74250299880048,23.748500599760096,23.754498200719713,23.76049580167933,23.766493402638943,23.77249100359856,23.778488604558177,23.784486205517794,23.790483806477408,23.796481407437025,23.80247900839664,23.80847660935626,23.814474210315872,23.82047181127549,23.826469412235106,23.832467013194723,23.83846461415434,23.844462215113953,23.85045981607357,23.856457417033187,23.862455017992804,23.868452618952418,23.874450219912035,23.88044782087165,23.88644542183127,23.892443022790882,23.8984406237505,23.904438224710116,23.910435825669733,23.916433426629347,23.922431027588964,23.92842862854858,23.934426229508198,23.940423830467815,23.946421431427428,23.952419032387045,23.958416633346662,23.96441423430628,23.970411835265892,23.97640943622551,23.982407037185126,23.988404638144743,23.994402239104357,24.000399840063974,24.00639744102359,24.012395041983208,24.01839264294282,24.024390243902438,24.030387844862055,24.036385445821672,24.04238304678129,24.048380647740903,24.05437824870052,24.060375849660137,24.066373450619754,24.072371051579367,24.078368652538984,24.0843662534986,24.090363854458218,24.09636145541783,24.10235905637745,24.108356657337065,24.114354258296682,24.120351859256296,24.126349460215913,24.13234706117553,24.138344662135147,24.144342263094764,24.150339864054377,24.156337465013994,24.16233506597361,24.168332666933228,24.17433026789284,24.18032786885246,24.186325469812076,24.192323070771693,24.198320671731306,24.204318272690923,24.21031587365054,24.216313474610157,24.22231107556977,24.228308676529387,24.234306277489004,24.24030387844862,24.24630147940824,24.25229908036785,24.25829668132747,24.264294282287086,24.270291883246703,24.276289484206316,24.282287085165933,24.28828468612555,24.294282287085167,24.30027988804478,24.306277489004398,24.312275089964015,24.31827269092363,24.324270291883245,24.330267892842862,24.33626549380248,24.342263094762096,24.348260695721713,24.354258296681326,24.360255897640943,24.36625349860056,24.372251099560177,24.37824870051979,24.384246301479408,24.390243902439025,24.39624150339864,24.402239104358255,24.408236705317872,24.41423430627749,24.420231907237106,24.42622950819672,24.432227109156337,24.438224710115954,24.44422231107557,24.450219912035188,24.4562175129948,24.462215113954418,24.468212714914035,24.474210315873652,24.480207916833265,24.486205517792882,24.4922031187525,24.498200719712116,24.50419832067173,24.510195921631347,24.516193522590964,24.52219112355058,24.528188724510194,24.53418632546981,24.540183926429428,24.546181527389045,24.552179128348662,24.558176729308276,24.564174330267893,24.57017193122751,24.576169532187127,24.58216713314674,24.588164734106357,24.594162335065974,24.60015993602559,24.606157536985204,24.61215513794482,24.61815273890444,24.624150339864055,24.63014794082367,24.636145541783286,24.642143142742903,24.64814074370252,24.654138344662137,24.66013594562175,24.666133546581367,24.672131147540984,24.6781287485006,24.684126349460215,24.69012395041983,24.69612155137945,24.702119152339066,24.70811675329868,24.714114354258296,24.720111955217913,24.72610955617753,24.732107157137147,24.73810475809676,24.744102359056377,24.750099960015994,24.75609756097561,24.762095161935225,24.76809276289484,24.77409036385446,24.780087964814076,24.78608556577369,24.792083166733306,24.798080767692923,24.80407836865254,24.810075969612154,24.81607357057177,24.822071171531388,24.828068772491005,24.83406637345062,24.840063974410235,24.846061575369852,24.85205917632947,24.858056777289086,24.8640543782487,24.870051979208316,24.876049580167933,24.88204718112755,24.888044782087164,24.89404238304678,24.900039984006398,24.906037584966015,24.912035185925628,24.918032786885245,24.924030387844862,24.93002798880448,24.936025589764096,24.94202319072371,24.948020791683327,24.954018392642944,24.96001599360256,24.966013594562174,24.97201119552179,24.978008796481408,24.984006397441025,24.99000399840064,24.996001599360255,25.001999200319872,25.00799680127949,25.013994402239103,25.01999200319872,25.025989604158337,25.031987205117954,25.03798480607757,25.043982407037184,25.0499800079968,25.055977608956418,25.061975209916035,25.06797281087565,25.073970411835266,25.079968012794883,25.0859656137545,25.091963214714113,25.09796081567373,25.103958416633347,25.109956017592964,25.115953618552577,25.121951219512194,25.12794882047181,25.13394642143143,25.139944022391045,25.14594162335066,25.151939224310276,25.157936825269893,25.16393442622951,25.169932027189123,25.17592962814874,25.181927229108357,25.187924830067974,25.193922431027588,25.199920031987205,25.20591763294682,25.21191523390644,25.217912834866052,25.22391043582567,25.229908036785286,25.235905637744903,25.24190323870452,25.247900839664133,25.25389844062375,25.259896041583367,25.265893642542984,25.271891243502598,25.277888844462215,25.28388644542183,25.28988404638145,25.295881647341062,25.30187924830068,25.307876849260296,25.313874450219913,25.319872051179527,25.325869652139144,25.33186725309876,25.337864854058378,25.343862455017995,25.349860055977608,25.355857656937225,25.361855257896842,25.36785285885646,25.373850459816072,25.37984806077569,25.385845661735306,25.391843262694923,25.397840863654537,25.403838464614154,25.40983606557377,25.415833666533388,25.421831267493,25.427828868452618,25.433826469412235,25.439824070371852,25.44582167133147,25.451819272291083,25.4578168732507,25.463814474210317,25.469812075169934,25.475809676129547,25.481807277089164,25.48780487804878,25.493802479008398,25.49980007996801,25.50579768092763,25.511795281887245,25.517792882846862,25.523790483806476,25.529788084766093,25.53578568572571,25.541783286685327,25.547780887644944,25.553778488604557,25.559776089564174,25.56577369052379,25.571771291483408,25.57776889244302,25.58376649340264,25.589764094362256,25.595761695321873,25.601759296281486,25.607756897241103,25.61375449820072,25.619752099160337,25.62574970011995,25.631747301079567,25.637744902039184,25.6437425029988,25.64974010395842,25.65573770491803,25.66173530587765,25.667732906837266,25.673730507796883,25.679728108756496,25.685725709716113,25.69172331067573,25.697720911635347,25.70371851259496,25.709716113554578,25.715713714514195,25.72171131547381,25.727708916433425,25.733706517393042,25.73970411835266,25.745701719312276,25.751699320271893,25.757696921231506,25.763694522191123,25.76969212315074,25.775689724110357,25.78168732506997,25.787684926029588,25.793682526989205,25.79968012794882,25.805677728908435,25.811675329868052,25.81767293082767,25.823670531787286,25.8296681327469,25.835665733706517,25.841663334666134,25.84766093562575,25.853658536585368,25.85965613754498,25.865653738504598,25.871651339464215,25.877648940423832,25.883646541383445,25.889644142343062,25.89564174330268,25.901639344262296,25.90763694522191,25.913634546181527,25.919632147141144,25.92562974810076,25.931627349060374,25.93762495001999,25.943622550979608,25.949620151939225,25.955617752898842,25.961615353858456,25.967612954818073,25.97361055577769,25.979608156737307,25.98560575769692,25.991603358656537,25.997600959616154,26.00359856057577,26.009596161535384,26.015593762495,26.02159136345462,26.027588964414235,26.03358656537385,26.039584166333466,26.045581767293083,26.0515793682527,26.057576969212317,26.06357457017193,26.069572171131547,26.075569772091164,26.08156737305078,26.087564974010395,26.09356257497001,26.09956017592963,26.105557776889246,26.11155537784886,26.117552978808476,26.123550579768093,26.12954818072771,26.135545781687323,26.14154338264694,26.147540983606557,26.153538584566174,26.15953618552579,26.165533786485405,26.17153138744502,26.17752898840464,26.183526589364256,26.18952419032387,26.195521791283486,26.201519392243103,26.20751699320272,26.213514594162334,26.21951219512195,26.225509796081568,26.231507397041185,26.237504998000798,26.243502598960415,26.249500199920032,26.25549780087965,26.261495401839266,26.26749300279888,26.273490603758496,26.279488204718113,26.28548580567773,26.291483406637344,26.29748100759696,26.303478608556578,26.309476209516195,26.315473810475808,26.321471411435425,26.327469012395042,26.33346661335466,26.339464214314273,26.34546181527389,26.351459416233507,26.357457017193124,26.36345461815274,26.369452219112354,26.37544982007197,26.381447421031588,26.387445021991205,26.39344262295082,26.399440223910435,26.405437824870052,26.41143542582967,26.417433026789283,26.4234306277489,26.429428228708517,26.435425829668134,26.441423430627747,26.447421031587364,26.45341863254698,26.459416233506598,26.465413834466215,26.47141143542583,26.477409036385446,26.483406637345063,26.48940423830468,26.495401839264293,26.50139944022391,26.507397041183527,26.513394642143144,26.519392243102757,26.525389844062374,26.53138744502199,26.53738504598161,26.54338264694122,26.54938024790084,26.555377848860456,26.561375449820073,26.56737305077969,26.573370651739303,26.57936825269892,26.585365853658537,26.591363454618154,26.597361055577768,26.603358656537385,26.609356257497,26.61535385845662,26.621351459416232,26.62734906037585,26.633346661335466,26.639344262295083,26.6453418632547,26.651339464214313,26.65733706517393,26.663334666133547,26.669332267093164,26.675329868052778,26.681327469012395,26.68732506997201,26.69332267093163,26.699320271891242,26.70531787285086,26.711315473810476,26.717313074770093,26.723310675729707,26.729308276689324,26.73530587764894,26.741303478608557,26.747301079568174,26.753298680527788,26.759296281487405,26.765293882447022,26.77129148340664,26.777289084366252,26.78328668532587,26.789284286285486,26.795281887245103,26.801279488204717,26.807277089164334,26.81327469012395,26.819272291083568,26.82526989204318,26.831267493002798,26.837265093962415,26.843262694922032,26.84926029588165,26.855257896841263,26.86125549780088,26.867253098760496,26.873250699720113,26.879248300679727,26.885245901639344,26.89124350259896,26.897241103558578,26.90323870451819,26.90923630547781,26.915233906437425,26.921231507397042,26.927229108356656,26.933226709316273,26.93922431027589,26.945221911235507,26.951219512195124,26.957217113154737,26.963214714114354,26.96921231507397,26.975209916033588,26.9812075169932,26.98720511795282,26.993202718912436,26.999200319872052,27.005197920831666,27.011195521791283,27.0171931227509,27.023190723710517,27.02918832467013,27.035185925629747,27.041183526589364,27.04718112754898,27.0531787285086,27.05917632946821,27.06517393042783,27.071171531387446,27.077169132347063,27.083166733306676,27.089164334266293,27.09516193522591,27.101159536185527,27.10715713714514,27.113154738104758,27.119152339064375,27.12514994002399,27.131147540983605,27.137145141943222,27.14314274290284,27.149140343862456,27.155137944822073,27.161135545781686,27.167133146741303,27.17313074770092,27.179128348660537,27.18512594962015,27.191123550579768,27.197121151539385,27.203118752499,27.209116353458615,27.215113954418232,27.22111155537785,27.227109156337466,27.23310675729708,27.239104358256697,27.245101959216314,27.25109956017593,27.257097161135547,27.26309476209516,27.269092363054778,27.275089964014395,27.281087564974012,27.287085165933625,27.293082766893242,27.29908036785286,27.305077968812476,27.31107556977209,27.317073170731707,27.323070771691324,27.32906837265094,27.335065973610554,27.34106357457017,27.347061175529788,27.353058776489405,27.359056377449022,27.365053978408636,27.371051579368253,27.37704918032787,27.383046781287486,27.3890443822471,27.395041983206717,27.401039584166334,27.40703718512595,27.413034786085564,27.41903238704518,27.4250299880048,27.431027588964415,27.43702518992403,27.443022790883646,27.449020391843263,27.45501799280288,27.461015593762497,27.46701319472211,27.473010795681727,27.479008396641344,27.48500599760096,27.491003598560575,27.49700119952019,27.50299880047981,27.508996401439425,27.51499400239904,27.520991603358656,27.526989204318273,27.53298680527789,27.538984406237503,27.54498200719712,27.550979608156737,27.556977209116354,27.56297481007597,27.568972411035585,27.5749700119952,27.58096761295482,27.586965213914436,27.59296281487405,27.598960415833666,27.604958016793283,27.6109556177529,27.616953218712514,27.62295081967213,27.628948420631747,27.634946021591364,27.640943622550978,27.646941223510595,27.652938824470212,27.65893642542983,27.664934026389446,27.67093162734906,27.676929228308676,27.682926829268293,27.68892443022791,27.694922031187524,27.70091963214714,27.706917233106758,27.712914834066375,27.718912435025988,27.724910035985605,27.730907636945222,27.73690523790484,27.742902838864453,27.74890043982407,27.754898040783686,27.760895641743303,27.76689324270292,27.772890843662534,27.77888844462215,27.784886045581768,27.790883646541385,27.796881247501,27.802878848460615,27.808876449420232,27.81487405037985,27.820871651339463,27.82686925229908,27.832866853258697,27.838864454218314,27.844862055177927,27.850859656137544,27.85685725709716,27.862854858056778,27.868852459016395,27.87485005997601,27.880847660935625,27.886845261895242,27.89284286285486,27.898840463814473,27.90483806477409,27.910835665733707,27.916833266693324,27.922830867652937,27.928828468612554,27.93482606957217,27.94082367053179,27.9468212714914,27.95281887245102,27.958816473410636,27.964814074370253,27.97081167532987,27.976809276289483,27.9828068772491,27.988804478208717,27.994802079168334,28.000799680127948,28.006797281087564,28.01279488204718,28.0187924830068,28.024790083966412,28.03078768492603,28.036785285885646,28.042782886845263,28.048780487804876,28.054778088764493,28.06077568972411,28.066773290683727,28.072770891643344,28.078768492602958,28.084766093562575,28.09076369452219,28.09676129548181,28.102758896441422,28.10875649740104,28.114754098360656,28.120751699320273,28.126749300279887,28.132746901239504,28.13874450219912,28.144742103158737,28.15073970411835,28.156737305077968,28.162734906037585,28.168732506997202,28.17473010795682,28.180727708916432,28.18672530987605,28.192722910835666,28.198720511795283,28.204718112754897,28.210715713714514,28.21671331467413,28.222710915633748,28.22870851659336,28.234706117552978,28.240703718512595,28.246701319472212,28.252698920431826,28.258696521391443,28.26469412235106,28.270691723310676,28.276689324270293,28.282686925229907,28.288684526189524,28.29468212714914,28.300679728108758,28.30667732906837,28.31267493002799,28.318672530987605,28.324670131947222,28.330667732906836,28.336665333866453,28.34266293482607,28.348660535785687,28.3546581367453,28.360655737704917,28.366653338664534,28.37265093962415,28.378648540583768,28.38464614154338,28.390643742503,28.396641343462615,28.402638944422232,28.408636545381846,28.414634146341463,28.42063174730108,28.426629348260697,28.43262694922031,28.438624550179927,28.444622151139544,28.45061975209916,28.45661735305878,28.46261495401839,28.46861255497801,28.474610155937626,28.480607756897243,28.486605357856856,28.492602958816473,28.49860055977609,28.504598160735707,28.51059576169532,28.516593362654937,28.522590963614554,28.52858856457417,28.534586165533785,28.540583766493402,28.54658136745302,28.552578968412636,28.558576569372253,28.564574170331866,28.570571771291483,28.5765693722511,28.582566973210717,28.58856457417033,28.594562175129948,28.600559776089565,28.60655737704918,28.612554978008795,28.618552578968412,28.62455017992803,28.630547780887646,28.63654538184726,28.642542982806876,28.648540583766493,28.65453818472611,28.660535785685727,28.66653338664534,28.672530987604958,28.678528588564575,28.684526189524192,28.690523790483805,28.696521391443422,28.70251899240304,28.708516593362656,28.71451419432227,28.720511795281887,28.726509396241504,28.73250699720112,28.738504598160734,28.74450219912035,28.750499800079968,28.756497401039585,28.762495001999202,28.768492602958815,28.774490203918432,28.78048780487805,28.786485405837666,28.79248300679728,28.798480607756897,28.804478208716514,28.81047580967613,28.816473410635744,28.82247101159536,28.82846861255498,28.834466213514595,28.84046381447421,28.846461415433826,28.852459016393443,28.85845661735306,28.864454218312677,28.87045181927229,28.876449420231907,28.882447021191524,28.88844462215114,28.894442223110754,28.90043982407037,28.90643742502999,28.912435025989605,28.91843262694922,28.924430227908836,28.930427828868453,28.93642542982807,28.942423030787683,28.9484206317473,28.954418232706917,28.960415833666534,28.96641343462615,28.972411035585765,28.97840863654538,28.984406237505,28.990403838464616,28.99640143942423,29.002399040383846,29.008396641343463,29.01439424230308,29.020391843262693,29.02638944422231,29.032387045181927,29.038384646141544,29.044382247101158,29.050379848060775,29.056377449020392,29.06237504998001,29.068372650939626,29.07437025189924,29.080367852858856,29.086365453818473,29.09236305477809,29.098360655737704,29.10435825669732,29.110355857656938,29.116353458616555,29.122351059576168,29.128348660535785,29.134346261495402,29.14034386245502,29.146341463414632,29.15233906437425,29.158336665333866,29.164334266293483,29.1703318672531,29.176329468212714,29.18232706917233,29.188324670131948,29.194322271091565,29.20031987205118,29.206317473010795,29.212315073970412,29.21831267493003,29.224310275889643,29.23030787684926,29.236305477808877,29.242303078768494,29.248300679728107,29.254298280687724,29.26029588164734,29.266293482606958,29.272291083566575,29.27828868452619,29.284286285485805,29.290283886445422,29.29628148740504,29.302279088364653,29.30827668932427,29.314274290283887,29.320271891243504,29.326269492203117,29.332267093162734,29.33826469412235,29.34426229508197,29.35025989604158,29.3562574970012,29.362255097960816,29.368252698920433,29.37425029988005,29.380247900839663,29.38624550179928,29.392243102758897,29.398240703718514,29.404238304678127,29.410235905637744,29.41623350659736,29.42223110755698,29.428228708516592,29.43422630947621,29.440223910435826,29.446221511395443,29.452219112355056,29.458216713314673,29.46421431427429,29.470211915233907,29.476209516193524,29.482207117153138,29.488204718112755,29.49420231907237,29.50019992003199,29.506197520991602,29.51219512195122,29.518192722910836,29.524190323870453,29.530187924830066,29.536185525789683,29.5421831267493,29.548180727708917,29.55417832866853,29.560175929628148,29.566173530587765,29.572171131547382,29.578168732507,29.584166333466612,29.59016393442623,29.596161535385846,29.602159136345463,29.608156737305077,29.614154338264694,29.62015193922431,29.626149540183928,29.63214714114354,29.638144742103158,29.644142343062775,29.650139944022392,29.656137544982005,29.662135145941622,29.66813274690124,29.674130347860856,29.680127948820473,29.686125549780087,29.692123150739704,29.69812075169932,29.704118352658938,29.71011595361855,29.71611355457817,29.722111155537785,29.728108756497402,29.734106357457016,29.740103958416633,29.74610155937625,29.752099160335867,29.75809676129548,29.764094362255097,29.770091963214714,29.77608956417433,29.782087165133948,29.78808476609356,29.79408236705318,29.800079968012795,29.806077568972412,29.812075169932026,29.818072770891643,29.82407037185126,29.830067972810877,29.83606557377049,29.842063174730107,29.848060775689724,29.85405837664934,29.860055977608955,29.86605357856857,29.87205117952819,29.878048780487806,29.884046381447423,29.890043982407036,29.896041583366653,29.90203918432627,29.908036785285887,29.9140343862455,29.920031987205117,29.926029588164734,29.93202718912435,29.938024790083965,29.944022391043582,29.9500199920032,29.956017592962816,29.96201519392243,29.968012794882046,29.974010395841663,29.98000799680128,29.986005597760897,29.99200319872051,29.998000799680128,30.003998400639745,30.00999600159936,30.015993602558975,30.021991203518592,30.02798880447821,30.033986405437826,30.03998400639744,30.045981607357056,30.051979208316673,30.05797680927629,30.063974410235904,30.06997201119552,30.075969612155138,30.081967213114755,30.087964814074372,30.093962415033985,30.099960015993602,30.10595761695322,30.111955217912836,30.11795281887245,30.123950419832067,30.129948020791684,30.1359456217513,30.141943222710914,30.14794082367053,30.153938424630148,30.159936025589765,30.16593362654938,30.171931227508995,30.177928828468612,30.18392642942823,30.189924030387846,30.19592163134746,30.201919232307077,30.207916833266694,30.21391443422631,30.219912035185924,30.22590963614554,30.23190723710516,30.237904838064775,30.24390243902439,30.249900039984006,30.255897640943623,30.26189524190324,30.267892842862853,30.27389044382247,30.279888044782087,30.285885645741704,30.29188324670132,30.297880847660934,30.30387844862055,30.30987604958017,30.315873650539785,30.3218712514994,30.327868852459016,30.333866453418633,30.33986405437825,30.345861655337863,30.35185925629748,30.357856857257097,30.363854458216714,30.36985205917633,30.375849660135945,30.38184726109556,30.38784486205518,30.393842463014796,30.39984006397441,30.405837664934026,30.411835265893643,30.41783286685326,30.423830467812873,30.42982806877249,30.435825669732107,30.441823270691724,30.447820871651338,30.453818472610955,30.459816073570572,30.46581367453019,30.471811275489806,30.47780887644942,30.483806477409036,30.489804078368653,30.49580167932827,30.501799280287884,30.5077968812475,30.513794482207118,30.519792083166735,30.525789684126348,30.531787285085965,30.537784886045582,30.5437824870052,30.549780087964812,30.55577768892443,30.561775289884046,30.567772890843663,30.57377049180328,30.579768092762894,30.58576569372251,30.591763294682128,30.597760895641745,30.60375849660136,30.609756097560975,30.615753698520592,30.62175129948021,30.627748900439823,30.63374650139944,30.639744102359057,30.645741703318674,30.651739304278287,30.657736905237904,30.66373450619752,30.669732107157138,30.675729708116755,30.68172730907637,30.687724910035985,30.693722510995602,30.69972011195522,30.705717712914833,30.71171531387445,30.717712914834067,30.723710515793684,30.729708116753297,30.735705717712914,30.74170331867253,30.74770091963215,30.75369852059176,30.75969612155138,30.765693722510996,30.771691323470613,30.77768892443023,30.783686525389843,30.78968412634946,30.795681727309077,30.801679328268694,30.807676929228307,30.813674530187924,30.81967213114754,30.82566973210716,30.831667333066772,30.83766493402639,30.843662534986006,30.849660135945623,30.855657736905236,30.861655337864853,30.86765293882447,30.873650539784087,30.879648140743704,30.885645741703318,30.891643342662935,30.89764094362255,30.90363854458217,30.909636145541782,30.9156337465014,30.921631347461016,30.927628948420633,30.933626549380246,30.939624150339863,30.94562175129948,30.951619352259097,30.95761695321871,30.963614554178328,30.969612155137945,30.975609756097562,30.98160735705718,30.987604958016792,30.99360255897641,30.999600159936026,31.005597760895643,31.011595361855257,31.017592962814874,31.02359056377449,31.029588164734108,31.03558576569372,31.041583366653338,31.047580967612955,31.053578568572572,31.059576169532185,31.065573770491802,31.07157137145142,31.077568972411036,31.083566573370653,31.089564174330267,31.095561775289884,31.1015593762495,31.107556977209118,31.11355457816873,31.11955217912835,31.125549780087965,31.131547381047582,31.137544982007196,31.143542582966813,31.14954018392643,31.155537784886047,31.16153538584566,31.167532986805277,31.173530587764894,31.17952818872451,31.185525789684128,31.19152339064374,31.19752099160336,31.203518592562975,31.209516193522592,31.215513794482206,31.221511395441823,31.22750899640144,31.233506597361057,31.23950419832067,31.245501799280287,31.251499400239904,31.25749700119952,31.263494602159135,31.26949220311875,31.27548980407837,31.281487405037986,31.287485005997603,31.293482606957216,31.299480207916833,31.30547780887645,31.311475409836067,31.31747301079568,31.323470611755297,31.329468212714914,31.33546581367453,31.341463414634145,31.347461015593762,31.35345861655338,31.359456217512996,31.36545381847261,31.371451419432226,31.377449020391843,31.38344662135146,31.389444222311077,31.39544182327069,31.401439424230308,31.407437025189925,31.41343462614954,31.419432227109155,31.425429828068772,31.43142742902839,31.437425029988006,31.44342263094762,31.449420231907236,31.455417832866853,31.46141543382647,31.467413034786084,31.4734106357457,31.479408236705318,31.485405837664935,31.491403438624552,31.497401039584165,31.503398640543782,31.5093962415034,31.515393842463016,31.52139144342263,31.527389044382247,31.533386645341864,31.53938424630148,31.545381847261094,31.55137944822071,31.557377049180328,31.563374650139945,31.56937225109956,31.575369852059175,31.581367453018792,31.58736505397841,31.593362654938026,31.59936025589764,31.605357856857257,31.611355457816874,31.61735305877649,31.623350659736104,31.62934826069572,31.63534586165534,31.641343462614955,31.64734106357457,31.653338664534186,31.659336265493803,31.66533386645342,31.671331467413033,31.67732906837265,31.683326669332267,31.689324270291884,31.6953218712515,31.701319472211114,31.70731707317073,31.71331467413035,31.719312275089965,31.72530987604958,31.731307477009196,31.737305077968813,31.74330267892843,31.749300279888043,31.75529788084766,31.761295481807277,31.767293082766894,31.773290683726508,31.779288284686125,31.78528588564574,31.79128348660536,31.797281087564976,31.80327868852459,31.809276289484206,31.815273890443823,31.82127149140344,31.827269092363053,31.83326669332267,31.839264294282287,31.845261895241904,31.851259496201518,31.857257097161135,31.863254698120752,31.86925229908037,31.875249900039982,31.8812475009996,31.887245101959216,31.893242702918833,31.89924030387845,31.905237904838064,31.91123550579768,31.917233106757298,31.923230707716915,31.929228308676528,31.935225909636145,31.941223510595762,31.94722111155538,31.953218712514992,31.95921631347461,31.965213914434226,31.971211515393843,31.977209116353457,31.983206717313074,31.98920431827269,31.995201919232308,32.001199520191925,32.00719712115154,32.01319472211116,32.01919232307077,32.025189924030386,32.03118752499,32.03718512594962,32.04318272690924,32.049180327868854,32.05517792882847,32.06117552978809,32.0671731307477,32.073170731707314,32.07916833266693,32.08516593362655,32.091163534586165,32.09716113554578,32.1031587365054,32.109156337465016,32.11515393842463,32.12115153938424,32.12714914034386,32.13314674130348,32.139144342263094,32.14514194322271,32.15113954418233,32.157137145141945,32.16313474610156,32.16913234706117,32.17512994802079,32.181127548980406,32.18712514994002,32.19312275089964,32.19912035185926,32.205117952818874,32.21111555377849,32.21711315473811,32.22311075569772,32.229108356657335,32.23510595761695,32.24110355857657,32.247101159536186,32.2530987604958,32.25909636145542,32.26509396241504,32.27109156337465,32.277089164334264,32.28308676529388,32.2890843662535,32.295081967213115,32.30107956817273,32.30707716913235,32.313074770091966,32.31907237105158,32.32506997201119,32.33106757297081,32.33706517393043,32.34306277489004,32.34906037584966,32.35505797680928,32.361055577768894,32.36705317872851,32.37305077968812,32.37904838064774,32.385045981607355,32.39104358256697,32.39704118352659,32.403038784486206,32.40903638544582,32.41503398640544,32.42103158736506,32.42702918832467,32.433026789284284,32.4390243902439,32.44502199120352,32.451019592163135,32.45701719312275,32.46301479408237,32.469012395041986,32.475009996001596,32.48100759696121,32.48700519792083,32.49300279888045,32.499000399840064,32.50499800079968,32.5109956017593,32.516993202718915,32.52299080367853,32.52898840463814,32.53498600559776,32.540983606557376,32.54698120751699,32.55297880847661,32.55897640943623,32.564974010395844,32.57097161135546,32.57696921231507,32.58296681327469,32.588964414234304,32.59496201519392,32.60095961615354,32.606957217113155,32.61295481807277,32.61895241903239,32.624950019992006,32.630947620951616,32.63694522191123,32.64294282287085,32.64894042383047,32.654938024790084,32.6609356257497,32.66693322670932,32.672930827668935,32.678928428628545,32.68492602958816,32.69092363054778,32.696921231507396,32.70291883246701,32.70891643342663,32.71491403438625,32.720911635345864,32.72690923630548,32.73290683726509,32.73890443822471,32.744902039184325,32.75089964014394,32.75689724110356,32.762894842063176,32.76889244302279,32.77489004398241,32.78088764494202,32.78688524590164,32.792882846861254,32.79888044782087,32.80487804878049,32.810875649740105,32.81687325069972,32.82287085165934,32.828868452618956,32.834866053578565,32.84086365453818,32.8468612554978,32.852858856457416,32.85885645741703,32.86485405837665,32.87085165933627,32.876849260295884,32.882846861255494,32.88884446221511,32.89484206317473,32.900839664134345,32.90683726509396,32.91283486605358,32.918832467013196,32.92483006797281,32.93082766893243,32.93682526989204,32.94282287085166,32.948820471811274,32.95481807277089,32.96081567373051,32.966813274690125,32.97281087564974,32.97880847660936,32.98480607756897,32.990803678528586,32.9968012794882,33.00279888044782,33.00879648140744,33.014794082367054,33.02079168332667,33.02678928428629,33.032786885245905,33.038784486205515,33.04478208716513,33.05077968812475,33.056777289084366,33.06277489004398,33.0687724910036,33.07477009196322,33.080767692922834,33.08676529388244,33.09276289484206,33.09876049580168,33.104758096761294,33.11075569772091,33.11675329868053,33.122750899640145,33.12874850059976,33.13474610155938,33.14074370251899,33.146741303478606,33.15273890443822,33.15873650539784,33.16473410635746,33.170731707317074,33.17672930827669,33.18272690923631,33.188724510195925,33.194722111155535,33.20071971211515,33.20671731307477,33.212714914034386,33.218712514994,33.22471011595362,33.23070771691324,33.236705317872854,33.242702918832464,33.24870051979208,33.2546981207517,33.260695721711315,33.26669332267093,33.27269092363055,33.278688524590166,33.28468612554978,33.2906837265094,33.29668132746901,33.30267892842863,33.308676529388244,33.31467413034786,33.32067173130748,33.326669332267095,33.33266693322671,33.33866453418633,33.34466213514594,33.350659736105555,33.35665733706517,33.36265493802479,33.368652538984406,33.37465013994402,33.38064774090364,33.38664534186326,33.392642942822874,33.398640543782484,33.4046381447421,33.41063574570172,33.416633346661335,33.42263094762095,33.42862854858057,33.434626149540186,33.4406237504998,33.44662135145941,33.45261895241903,33.45861655337865,33.464614154338264,33.47061175529788,33.4766093562575,33.482606957217115,33.48860455817673,33.49460215913635,33.50059976009596,33.506597361055576,33.51259496201519,33.51859256297481,33.52459016393443,33.530587764894044,33.53658536585366,33.54258296681328,33.54858056777289,33.554578168732505,33.56057576969212,33.56657337065174,33.572570971611356,33.57856857257097,33.58456617353059,33.59056377449021,33.596561375449824,33.60255897640943,33.60855657736905,33.61455417832867,33.620551779288284,33.6265493802479,33.63254698120752,33.638544582167135,33.64454218312675,33.65053978408636,33.65653738504598,33.662534986005596,33.66853258696521,33.67453018792483,33.68052778888445,33.686525389844064,33.69252299080368,33.6985205917633,33.70451819272291,33.710515793682525,33.71651339464214,33.72251099560176,33.728508596561376,33.73450619752099,33.74050379848061,33.74650139944023,33.75249900039984,33.758496601359454,33.76449420231907,33.77049180327869,33.776489404238305,33.78248700519792,33.78848460615754,33.794482207117156,33.80047980807677,33.80647740903638,33.812475009996,33.81847261095562,33.824470211915234,33.83046781287485,33.83646541383447,33.842463014794085,33.8484606157537,33.85445821671331,33.86045581767293,33.866453418632545,33.87245101959216,33.87844862055178,33.884446221511396,33.89044382247101,33.89644142343063,33.90243902439025,33.90843662534986,33.914434226309474,33.92043182726909,33.92642942822871,33.932427029188325,33.93842463014794,33.94442223110756,33.950419832067176,33.956417433026786,33.9624150339864,33.96841263494602,33.97441023590564,33.980407836865254,33.98640543782487,33.99240303878449,33.998400639744105,34.00439824070372,34.01039584166333,34.01639344262295,34.022391043582566,34.02838864454218,34.0343862455018,34.04038384646142,34.046381447421034,34.05237904838065,34.05837664934026,34.06437425029988,34.070371851259495,34.07636945221911,34.08236705317873,34.088364654138346,34.09436225509796,34.10035985605758,34.1063574570172,34.11235505797681,34.11835265893642,34.12435025989604,34.13034786085566,34.136345461815274,34.14234306277489,34.14834066373451,34.154338264694125,34.160335865653735,34.16633346661335,34.17233106757297,34.178328668532586,34.1843262694922,34.19032387045182,34.19632147141144,34.202319072371054,34.20831667333067,34.21431427429028,34.2203118752499,34.226309476209515,34.23230707716913,34.23830467812875,34.244302279088366,34.25029988004798,34.2562974810076,34.26229508196721,34.26829268292683,34.274290283886444,34.28028788484606,34.28628548580568,34.292283086765295,34.29828068772491,34.30427828868453,34.310275889644146,34.316273490603756,34.32227109156337,34.32826869252299,34.33426629348261,34.340263894442224,34.34626149540184,34.35225909636146,34.358256697321075,34.364254298280684,34.3702518992403,34.37624950019992,34.382247101159535,34.38824470211915,34.39424230307877,34.400239904038386,34.406237504998,34.41223510595762,34.41823270691723,34.42423030787685,34.430227908836464,34.43622550979608,34.4422231107557,34.448220711715315,34.45421831267493,34.46021591363455,34.46621351459416,34.472211115553776,34.47820871651339,34.48420631747301,34.49020391843263,34.496201519392244,34.50219912035186,34.50819672131148,34.514194322271095,34.520191923230705,34.52618952419032,34.53218712514994,34.538184726109556,34.54418232706917,34.55017992802879,34.55617752898841,34.562175129948024,34.568172730907634,34.57417033186725,34.58016793282687,34.586165533786485,34.5921631347461,34.59816073570572,34.604158336665336,34.61015593762495,34.61615353858457,34.62215113954418,34.628148740503796,34.63414634146341,34.64014394242303,34.64614154338265,34.652139144342264,34.65813674530188,34.6641343462615,34.67013194722111,34.676129548180725,34.68212714914034,34.68812475009996,34.694122351059576,34.70011995201919,34.70611755297881,34.71211515393843,34.718112754898044,34.724110355857654,34.73010795681727,34.73610555777689,34.742103158736505,34.74810075969612,34.75409836065574,34.760095961615356,34.76609356257497,34.77209116353458,34.7780887644942,34.78408636545382,34.790083966413434,34.79608156737305,34.80207916833267,34.808076769292285,34.8140743702519,34.82007197121152,34.82606957217113,34.832067173130746,34.83806477409036,34.84406237504998,34.8500599760096,34.856057576969214,34.86205517792883,34.86805277888845,34.87405037984806,34.880047980807674,34.88604558176729,34.89204318272691,34.898040783686525,34.90403838464614,34.91003598560576,34.916033586565376,34.92203118752499,34.9280287884846,34.93402638944422,34.94002399040384,34.946021591363454,34.95201919232307,34.95801679328269,34.964014394242305,34.97001199520192,34.97600959616153,34.98200719712115,34.988004798080766,34.99400239904038,35.0,35.00599760095962,35.011995201919234,35.01799280287885,35.02399040383847,35.02998800479808,35.035985605757695,35.04198320671731,35.04798080767693,35.053978408636546,35.05997600959616,35.06597361055578,35.0719712115154,35.07796881247501,35.083966413434624,35.08996401439424,35.09596161535386,35.101959216313475,35.10795681727309,35.11395441823271,35.119952019192326,35.12594962015194,35.13194722111155,35.13794482207117,35.143942423030786,35.1499400239904,35.15593762495002,35.16193522590964,35.167932826869254,35.17393042782887,35.17992802878848,35.1859256297481,35.191923230707715,35.19792083166733,35.20391843262695,35.209916033586566,35.21591363454618,35.2219112355058,35.22790883646542,35.23390643742503,35.239904038384644,35.24590163934426,35.25189924030388,35.257896841263495,35.26389444222311,35.26989204318273,35.275889644142346,35.281887245101956,35.28788484606157,35.29388244702119,35.29988004798081,35.305877648940424,35.31187524990004,35.31787285085966,35.323870451819275,35.32986805277889,35.3358656537385,35.34186325469812,35.347860855657736,35.35385845661735,35.35985605757697,35.36585365853659,35.371851259496204,35.37784886045582,35.38384646141543,35.38984406237505,35.395841663334664,35.40183926429428,35.4078368652539,35.413834466213515,35.41983206717313,35.42582966813275,35.431827269092366,35.437824870051976,35.44382247101159,35.44982007197121,35.45581767293083,35.461815273890444,35.46781287485006,35.47381047580968,35.479808076769295,35.485805677728905,35.49180327868852,35.49780087964814,35.503798480607756,35.50979608156737,35.51579368252699,35.52179128348661,35.527788884446224,35.53378648540584,35.53978408636545,35.54578168732507,35.551779288284685,35.5577768892443,35.56377449020392,35.569772091163536,35.57576969212315,35.58176729308277,35.58776489404238,35.593762495002,35.599760095961614,35.60575769692123,35.61175529788085,35.617752898840465,35.62375049980008,35.6297481007597,35.635745701719316,35.641743302678925,35.64774090363854,35.65373850459816,35.659736105557776,35.66573370651739,35.67173130747701,35.67772890843663,35.683726509396244,35.689724110355854,35.69572171131547,35.70171931227509,35.707716913234705,35.71371451419432,35.71971211515394,35.725709716113556,35.73170731707317,35.73770491803279,35.7437025189924,35.74970011995202,35.755697720911634,35.76169532187125,35.76769292283087,35.773690523790485,35.7796881247501,35.78568572570972,35.79168332666933,35.797680927628946,35.80367852858856,35.80967612954818,35.8156737305078,35.821671331467414,35.82766893242703,35.83366653338665,35.839664134346265,35.845661735305875,35.85165933626549,35.85765693722511,35.863654538184726,35.86965213914434,35.87564974010396,35.88164734106358,35.88764494202319,35.8936425429828,35.89964014394242,35.90563774490204,35.911635345861654,35.91763294682127,35.92363054778089,35.929628148740505,35.93562574970012,35.94162335065974,35.94762095161935,35.953618552578966,35.95961615353858,35.9656137544982,35.97161135545782,35.977608956417434,35.98360655737705,35.98960415833667,35.99560175929628,36.001599360255895,36.00759696121551,36.01359456217513,36.019592163134746,36.02558976409436,36.03158736505398,36.0375849660136,36.043582566973214,36.049580167932824,36.05557776889244,36.06157536985206,36.067572970811675,36.07357057177129,36.07956817273091,36.085565773690526,36.09156337465014,36.09756097560975,36.10355857656937,36.10955617752899,36.115553778488604,36.12155137944822,36.12754898040784,36.133546581367455,36.13954418232707,36.14554178328669,36.1515393842463,36.157536985205915,36.16353458616553,36.16953218712515,36.175529788084766,36.18152738904438,36.187524990004,36.19352259096362,36.19952019192323,36.205517792882844,36.21151539384246,36.21751299480208,36.223510595761695,36.22950819672131,36.23550579768093,36.241503398640546,36.24750099960016,36.25349860055977,36.25949620151939,36.26549380247901,36.271491403438624,36.27748900439824,36.28348660535786,36.289484206317475,36.29548180727709,36.3014794082367,36.30747700919632,36.313474610155936,36.31947221111555,36.32546981207517,36.33146741303479,36.337465013994404,36.34346261495402,36.34946021591364,36.35545781687325,36.361455417832865,36.36745301879248,36.3734506197521,36.379448220711716,36.38544582167133,36.39144342263095,36.39744102359057,36.403438624550176,36.40943622550979,36.41543382646941,36.42143142742903,36.427429028388644,36.43342662934826,36.43942423030788,36.445421831267495,36.45141943222711,36.45741703318672,36.46341463414634,36.469412235105956,36.47540983606557,36.48140743702519,36.48740503798481,36.493402638944424,36.49940023990404,36.50539784086365,36.51139544182327,36.517393042782885,36.5233906437425,36.52938824470212,36.535385845661736,36.54138344662135,36.54738104758097,36.55337864854059,36.5593762495002,36.565373850459814,36.57137145141943,36.57736905237905,36.583366653338665,36.58936425429828,36.5953618552579,36.601359456217516,36.607357057177126,36.61335465813674,36.61935225909636,36.62534986005598,36.631347461015594,36.63734506197521,36.64334266293483,36.649340263894445,36.65533786485406,36.66133546581367,36.66733306677329,36.673330667732905,36.67932826869252,36.68532586965214,36.691323470611756,36.69732107157137,36.70331867253099,36.7093162734906,36.71531387445022,36.721311475409834,36.72730907636945,36.73330667732907,36.739304278288685,36.7453018792483,36.75129948020792,36.757297081167536,36.763294682127146,36.76929228308676,36.77528988404638,36.781287485006,36.787285085965614,36.79328268692523,36.79928028788485,36.805277888844465,36.811275489804075,36.81727309076369,36.82327069172331,36.829268292682926,36.83526589364254,36.84126349460216,36.84726109556178,36.853258696521394,36.85925629748101,36.86525389844062,36.87125149940024,36.877249100359855,36.88324670131947,36.88924430227909,36.895241903238706,36.90123950419832,36.90723710515794,36.91323470611756,36.919232307077166,36.92522990803678,36.9312275089964,36.93722510995602,36.943222710915634,36.94922031187525,36.95521791283487,36.961215513794485,36.967213114754095,36.97321071571371,36.97920831667333,36.985205917632946,36.99120351859256,36.99720111955218,37.0031987205118,37.009196321471414,37.01519392243103,37.02119152339064,37.02718912435026,37.033186725309875,37.03918432626949,37.04518192722911,37.051179528188726,37.05717712914834,37.06317473010796,37.06917233106757,37.07516993202719,37.081167532986804,37.08716513394642,37.09316273490604,37.099160335865655,37.10515793682527,37.11115553778489,37.117153138744506,37.123150739704116,37.12914834066373,37.13514594162335,37.14114354258297,37.147141143542584,37.1531387445022,37.15913634546182,37.165133946421435,37.171131547381044,37.17712914834066,37.18312674930028,37.189124350259895,37.19512195121951,37.20111955217913,37.207117153138746,37.21311475409836,37.21911235505798,37.22510995601759,37.23110755697721,37.237105157936824,37.24310275889644,37.24910035985606,37.255097960815675,37.26109556177529,37.26709316273491,37.27309076369452,37.279088364654136,37.28508596561375,37.29108356657337,37.29708116753299,37.303078768492604,37.30907636945222,37.31507397041184,37.321071571371455,37.327069172331065,37.33306677329068,37.3390643742503,37.345061975209916,37.35105957616953,37.35705717712915,37.36305477808877,37.369052379048384,37.375049980007994,37.38104758096761,37.38704518192723,37.393042782886845,37.39904038384646,37.40503798480608,37.411035585765696,37.41703318672531,37.42303078768493,37.42902838864454,37.435025989604156,37.44102359056377,37.44702119152339,37.45301879248301,37.459016393442624,37.46501399440224,37.47101159536186,37.47700919632147,37.483006797281085,37.4890043982407,37.49500199920032,37.500999600159936,37.50699720111955,37.51299480207917,37.51899240303879,37.524990003998404,37.530987604958014,37.53698520591763,37.54298280687725,37.548980407836865,37.55497800879648,37.5609756097561,37.566973210715716,37.57297081167533,37.57896841263494,37.58496601359456,37.59096361455418,37.596961215513794,37.60295881647341,37.60895641743303,37.614954018392645,37.62095161935226,37.62694922031188,37.63294682127149,37.638944422231106,37.64494202319072,37.65093962415034,37.65693722510996,37.66293482606957,37.66893242702919,37.67493002798881,37.68092762894842,37.686925229908034,37.69292283086765,37.69892043182727,37.704918032786885,37.7109156337465,37.71691323470612,37.722910835665736,37.72890843662535,37.73490603758496,37.74090363854458,37.7469012395042,37.752898840463814,37.75889644142343,37.76489404238305,37.770891643342665,37.77688924430228,37.78288684526189,37.78888444622151,37.794882047181126,37.80087964814074,37.80687724910036,37.81287485005998,37.818872451019594,37.82487005197921,37.83086765293883,37.83686525389844,37.842862854858055,37.84886045581767,37.85485805677729,37.860855657736906,37.86685325869652,37.87285085965614,37.87884846061576,37.88484606157537,37.890843662534984,37.8968412634946,37.90283886445422,37.908836465413835,37.91483406637345,37.92083166733307,37.926829268292686,37.9328268692523,37.93882447021191,37.94482207117153,37.950819672131146,37.95681727309076,37.96281487405038,37.96881247501,37.974810075969614,37.98080767692923,37.98680527788884,37.99280287884846,37.998800479808075,38.00479808076769,38.01079568172731,38.016793282686926,38.02279088364654,38.02878848460616,38.03478608556578,38.04078368652539,38.046781287485004,38.05277888844462,38.05877648940424,38.064774090363855,38.07077169132347,38.07676929228309,38.082766893242706,38.088764494202316,38.09476209516193,38.10075969612155,38.10675729708117,38.112754898040784,38.1187524990004,38.12475009996002,38.130747700919635,38.13674530187925,38.14274290283886,38.14874050379848,38.154738104758096,38.16073570571771,38.16673330667733,38.17273090763695,38.17872850859656,38.18472610955618,38.19072371051579,38.19672131147541,38.202718912435024,38.20871651339464,38.21471411435426,38.220711715313875,38.22670931627349,38.23270691723311,38.238704518192726,38.244702119152336,38.25069972011195,38.25669732107157,38.26269492203119,38.268692522990804,38.27469012395042,38.28068772491004,38.286685325869655,38.292682926829265,38.29868052778888,38.3046781287485,38.310675729708116,38.31667333066773,38.32267093162735,38.32866853258697,38.334666133546584,38.3406637345062,38.34666133546581,38.35265893642543,38.358656537385045,38.36465413834466,38.37065173930428,38.376649340263896,38.38264694122351,38.38864454218313,38.39464214314274,38.40063974410236,38.406637345061974,38.41263494602159,38.41863254698121,38.424630147940825,38.43062774890044,38.43662534986006,38.442622950819676,38.448620551779285,38.4546181527389,38.46061575369852,38.466613354658136,38.47261095561775,38.47860855657737,38.48460615753699,38.490603758496604,38.496601359456214,38.50259896041583,38.50859656137545,38.514594162335065,38.52059176329468,38.5265893642543,38.532586965213916,38.53858456617353,38.54458216713315,38.55057976809276,38.55657736905238,38.562574970011994,38.56857257097161,38.57457017193123,38.580567772890845,38.58656537385046,38.59256297481008,38.59856057576969,38.604558176729306,38.61055577768892,38.61655337864854,38.62255097960816,38.628548580567774,38.63454618152739,38.64054378248701,38.646541383446625,38.652538984406235,38.65853658536585,38.66453418632547,38.670531787285086,38.6765293882447,38.68252698920432,38.68852459016394,38.69452219112355,38.70051979208316,38.70651739304278,38.7125149940024,38.718512594962014,38.72451019592163,38.73050779688125,38.736505397840865,38.74250299880048,38.7485005997601,38.75449820071971,38.760495801679326,38.76649340263894,38.77249100359856,38.77848860455818,38.784486205517794,38.79048380647741,38.79648140743703,38.80247900839664,38.808476609356255,38.81447421031587,38.82047181127549,38.826469412235106,38.83246701319472,38.83846461415434,38.84446221511396,38.850459816073574,38.856457417033184,38.8624550179928,38.86845261895242,38.874450219912035,38.88044782087165,38.88644542183127,38.892443022790886,38.8984406237505,38.90443822471011,38.91043582566973,38.91643342662935,38.922431027588964,38.92842862854858,38.9344262295082,38.940423830467815,38.94642143142743,38.95241903238705,38.95841663334666,38.964414234306275,38.97041183526589,38.97640943622551,38.982407037185126,38.98840463814474,38.99440223910436,39.00039984006398,39.00639744102359,39.012395041983204,39.01839264294282,39.02439024390244,39.030387844862055,39.03638544582167,39.04238304678129,39.048380647740906,39.05437824870052,39.06037584966013,39.06637345061975,39.07237105157937,39.078368652538984,39.0843662534986,39.09036385445822,39.096361455417835,39.10235905637745,39.10835665733706,39.11435425829668,39.120351859256296,39.12634946021591,39.13234706117553,39.13834466213515,39.144342263094764,39.15033986405438,39.156337465014,39.16233506597361,39.168332666933225,39.17433026789284,39.18032786885246,39.186325469812076,39.19232307077169,39.19832067173131,39.20431827269093,39.210315873650536,39.21631347461015,39.22231107556977,39.22830867652939,39.234306277489004,39.24030387844862,39.24630147940824,39.252299080367855,39.25829668132747,39.26429428228708,39.2702918832467,39.276289484206316,39.28228708516593,39.28828468612555,39.29428228708517,39.300279888044784,39.3062774890044,39.31227508996401,39.31827269092363,39.324270291883245,39.33026789284286,39.33626549380248,39.342263094762096,39.34826069572171,39.35425829668133,39.36025589764095,39.36625349860056,39.372251099560174,39.37824870051979,39.38424630147941,39.390243902439025,39.39624150339864,39.40223910435826,39.408236705317876,39.414234306277486,39.4202319072371,39.42622950819672,39.43222710915634,39.43822471011595,39.44422231107557,39.45021991203519,39.456217512994805,39.46221511395442,39.46821271491403,39.47421031587365,39.480207916833265,39.48620551779288,39.4922031187525,39.498200719712116,39.50419832067173,39.51019592163135,39.51619352259096,39.52219112355058,39.528188724510194,39.53418632546981,39.54018392642943,39.546181527389045,39.55217912834866,39.55817672930828,39.564174330267896,39.570171931227506,39.57616953218712,39.58216713314674,39.58816473410636,39.594162335065974,39.60015993602559,39.60615753698521,39.612155137944825,39.618152738904435,39.62415033986405,39.63014794082367,39.636145541783286,39.6421431427429,39.64814074370252,39.65413834466214,39.660135945621754,39.66613354658137,39.67213114754098,39.6781287485006,39.684126349460215,39.69012395041983,39.69612155137945,39.702119152339066,39.70811675329868,39.7141143542583,39.72011195521791,39.726109556177526,39.73210715713714,39.73810475809676,39.74410235905638,39.750099960015994,39.75609756097561,39.76209516193523,39.768092762894845,39.774090363854455,39.78008796481407,39.78608556577369,39.792083166733306,39.79808076769292,39.80407836865254,39.81007596961216,39.816073570571774,39.822071171531384,39.828068772491,39.83406637345062,39.840063974410235,39.84606157536985,39.85205917632947,39.858056777289086,39.8640543782487,39.87005197920832,39.87604958016793,39.88204718112755,39.888044782087164,39.89404238304678,39.9000399840064,39.906037584966015,39.91203518592563,39.91803278688525,39.92403038784486,39.930027988804476,39.93602558976409,39.94202319072371,39.94802079168333,39.95401839264294,39.96001599360256,39.96601359456218,39.972011195521794,39.978008796481404,39.98400639744102,39.99000399840064,39.996001599360255,40.00199920031987,40.00799680127949,40.013994402239106,40.01999200319872,40.02598960415833,40.03198720511795,40.03798480607757,40.043982407037184,40.0499800079968,40.05597760895642,40.061975209916035,40.06797281087565,40.07397041183527,40.07996801279488,40.085965613754496,40.09196321471411,40.09796081567373,40.10395841663335,40.109956017592964,40.11595361855258,40.1219512195122,40.12794882047181,40.133946421431425,40.13994402239104,40.14594162335066,40.151939224310276,40.15793682526989,40.16393442622951,40.16993202718913,40.175929628148744,40.181927229108354,40.18792483006797,40.19392243102759,40.199920031987205,40.20591763294682,40.21191523390644,40.217912834866056,40.22391043582567,40.22990803678528,40.2359056377449,40.241903238704516,40.24790083966413,40.25389844062375,40.25989604158337,40.265893642542984,40.2718912435026,40.27788884446222,40.28388644542183,40.289884046381445,40.29588164734106,40.30187924830068,40.307876849260296,40.31387445021991,40.31987205117953,40.32586965213915,40.33186725309876,40.337864854058374,40.34386245501799,40.34986005597761,40.355857656937225,40.36185525789684,40.36785285885646,40.373850459816076,40.37984806077569,40.3858456617353,40.39184326269492,40.39784086365454,40.403838464614154,40.40983606557377,40.41583366653339,40.421831267493005,40.42782886845262,40.43382646941223,40.43982407037185,40.445821671331466,40.45181927229108,40.4578168732507,40.46381447421032,40.46981207516993,40.47580967612955,40.48180727708917,40.48780487804878,40.493802479008394,40.49980007996801,40.50579768092763,40.511795281887245,40.51779288284686,40.52379048380648,40.529788084766096,40.535785685725706,40.54178328668532,40.54778088764494,40.55377848860456,40.559776089564174,40.56577369052379,40.57177129148341,40.577768892443025,40.58376649340264,40.58976409436225,40.59576169532187,40.601759296281486,40.6077568972411,40.61375449820072,40.61975209916034,40.625749700119954,40.63174730107957,40.63774490203919,40.6437425029988,40.649740103958415,40.65573770491803,40.66173530587765,40.667732906837266,40.67373050779688,40.6797281087565,40.68572570971612,40.69172331067573,40.697720911635344,40.70371851259496,40.70971611355458,40.715713714514195,40.72171131547381,40.72770891643343,40.733706517393045,40.73970411835266,40.74570171931227,40.75169932027189,40.757696921231506,40.76369452219112,40.76969212315074,40.77568972411036,40.781687325069974,40.78768492602959,40.7936825269892,40.79968012794882,40.805677728908435,40.81167532986805,40.81767293082767,40.823670531787286,40.8296681327469,40.83566573370652,40.84166333466614,40.84766093562575,40.853658536585364,40.85965613754498,40.8656537385046,40.871651339464215,40.87764894042383,40.88364654138345,40.889644142343066,40.895641743302676,40.90163934426229,40.90763694522191,40.91363454618153,40.919632147141144,40.92562974810076,40.93162734906038,40.937624950019995,40.94362255097961,40.94962015193922,40.95561775289884,40.961615353858456,40.96761295481807,40.97361055577769,40.97960815673731,40.98560575769692,40.99160335865654,40.99760095961615,41.00359856057577,41.009596161535384,41.015593762495,41.02159136345462,41.027588964414235,41.03358656537385,41.03958416633347,41.045581767293086,41.051579368252696,41.05757696921231,41.06357457017193,41.06957217113155,41.075569772091164,41.08156737305078,41.0875649740104,41.093562574970015,41.099560175929625,41.10555777688924,41.11155537784886,41.117552978808476,41.12355057976809,41.12954818072771,41.13554578168733,41.141543382646944,41.14754098360656,41.15353858456617,41.15953618552579,41.165533786485405,41.17153138744502,41.17752898840464,41.183526589364256,41.18952419032387,41.19552179128349,41.2015193922431,41.20751699320272,41.21351459416233,41.21951219512195,41.22550979608157,41.231507397041185,41.2375049980008,41.24350259896042,41.249500199920035,41.255497800879645,41.26149540183926,41.26749300279888,41.273490603758496,41.27948820471811,41.28548580567773,41.29148340663735,41.297481007596964,41.303478608556574,41.30947620951619,41.31547381047581,41.321471411435425,41.32746901239504,41.33346661335466,41.339464214314276,41.34546181527389,41.35145941623351,41.35745701719312,41.36345461815274,41.369452219112354,41.37544982007197,41.38144742103159,41.387445021991205,41.39344262295082,41.39944022391044,41.40543782487005,41.411435425829666,41.41743302678928,41.4234306277489,41.42942822870852,41.435425829668134,41.44142343062775,41.44742103158737,41.453418632546985,41.459416233506595,41.46541383446621,41.47141143542583,41.477409036385446,41.48340663734506,41.48940423830468,41.4954018392643,41.50139944022391,41.50739704118352,41.51339464214314,41.51939224310276,41.525389844062374,41.53138744502199,41.53738504598161,41.543382646941225,41.54938024790084,41.55537784886046,41.56137544982007,41.567373050779686,41.5733706517393,41.57936825269892,41.58536585365854,41.591363454618154,41.59736105557777,41.60335865653739,41.609356257497,41.615353858456615,41.62135145941623,41.62734906037585,41.633346661335466,41.63934426229508,41.6453418632547,41.65133946421432,41.657337065173934,41.663334666133544,41.66933226709316,41.67532986805278,41.681327469012395,41.68732506997201,41.69332267093163,41.699320271891246,41.70531787285086,41.71131547381047,41.71731307477009,41.72331067572971,41.72930827668932,41.73530587764894,41.74130347860856,41.747301079568174,41.75329868052779,41.75929628148741,41.76529388244702,41.771291483406635,41.77728908436625,41.78328668532587,41.789284286285486,41.7952818872451,41.80127948820472,41.80727708916434,41.81327469012395,41.819272291083564,41.82526989204318,41.8312674930028,41.837265093962415,41.84326269492203,41.84926029588165,41.855257896841266,41.86125549780088,41.86725309876049,41.87325069972011,41.87924830067973,41.885245901639344,41.89124350259896,41.89724110355858,41.903238704518195,41.90923630547781,41.91523390643742,41.92123150739704,41.927229108356656,41.93322670931627,41.93922431027589,41.94522191123551,41.951219512195124,41.95721711315474,41.96321471411436,41.96921231507397,41.975209916033585,41.9812075169932,41.98720511795282,41.993202718912436,41.99920031987205,42.00519792083167,42.01119552179129,42.017193122750896,42.02319072371051,42.02918832467013,42.03518592562975,42.041183526589364,42.04718112754898,42.0531787285086,42.059176329468215,42.06517393042783,42.07117153138744,42.07716913234706,42.083166733306676,42.08916433426629,42.09516193522591,42.10115953618553,42.107157137145144,42.11315473810476,42.11915233906437,42.12514994002399,42.131147540983605,42.13714514194322,42.14314274290284,42.149140343862456,42.15513794482207,42.16113554578169,42.16713314674131,42.17313074770092,42.179128348660534,42.18512594962015,42.19112355057977,42.197121151539385,42.203118752499,42.20911635345862,42.215113954418236,42.221111555377846,42.22710915633746,42.23310675729708,42.2391043582567,42.24510195921631,42.25109956017593,42.25709716113555,42.263094762095164,42.26909236305478,42.27508996401439,42.28108756497401,42.287085165933625,42.29308276689324,42.29908036785286,42.305077968812476,42.31107556977209,42.31707317073171,42.32307077169132,42.32906837265094,42.335065973610554,42.34106357457017,42.34706117552979,42.353058776489405,42.35905637744902,42.36505397840864,42.371051579368256,42.377049180327866,42.38304678128748,42.3890443822471,42.39504198320672,42.401039584166334,42.40703718512595,42.41303478608557,42.419032387045185,42.425029988004795,42.43102758896441,42.43702518992403,42.443022790883646,42.44902039184326,42.45501799280288,42.4610155937625,42.467013194722114,42.47301079568173,42.47900839664134,42.48500599760096,42.491003598560575,42.49700119952019,42.50299880047981,42.508996401439425,42.51499400239904,42.52099160335866,42.52698920431827,42.532986805277886,42.5389844062375,42.54498200719712,42.55097960815674,42.556977209116354,42.56297481007597,42.56897241103559,42.574970011995205,42.580967612954815,42.58696521391443,42.59296281487405,42.598960415833666,42.60495801679328,42.6109556177529,42.61695321871252,42.622950819672134,42.628948420631744,42.63494602159136,42.64094362255098,42.646941223510595,42.65293882447021,42.65893642542983,42.664934026389446,42.67093162734906,42.67692922830868,42.68292682926829,42.68892443022791,42.694922031187524,42.70091963214714,42.70691723310676,42.712914834066375,42.71891243502599,42.72491003598561,42.73090763694522,42.736905237904836,42.74290283886445,42.74890043982407,42.75489804078369,42.7608956417433,42.76689324270292,42.77289084366254,42.778888444622154,42.784886045581764,42.79088364654138,42.796881247501,42.802878848460615,42.80887644942023,42.81487405037985,42.820871651339466,42.82686925229908,42.83286685325869,42.83886445421831,42.84486205517793,42.850859656137544,42.85685725709716,42.86285485805678,42.868852459016395,42.87485005997601,42.88084766093563,42.88684526189524,42.892842862854856,42.89884046381447,42.90483806477409,42.91083566573371,42.916833266693324,42.92283086765294,42.92882846861256,42.93482606957217,42.940823670531785,42.9468212714914,42.95281887245102,42.958816473410636,42.96481407437025,42.97081167532987,42.97680927628949,42.982806877249104,42.98880447820871,42.99480207916833,43.00079968012795,43.006797281087564,43.01279488204718,43.0187924830068,43.024790083966415,43.03078768492603,43.03678528588564,43.04278288684526,43.048780487804876,43.05477808876449,43.06077568972411,43.06677329068373,43.072770891643344,43.07876849260296,43.08476609356258,43.09076369452219,43.096761295481805,43.10275889644142,43.10875649740104,43.114754098360656,43.12075169932027,43.12674930027989,43.13274690123951,43.13874450219912,43.144742103158734,43.15073970411835,43.15673730507797,43.162734906037585,43.1687325069972,43.17473010795682,43.180727708916436,43.18672530987605,43.19272291083566,43.19872051179528,43.2047181127549,43.210715713714514,43.21671331467413,43.22271091563375,43.228708516593365,43.23470611755298,43.24070371851259,43.24670131947221,43.252698920431826,43.25869652139144,43.26469412235106,43.27069172331068,43.27668932427029,43.28268692522991,43.28868452618953,43.29468212714914,43.300679728108754,43.30667732906837,43.31267493002799,43.318672530987605,43.32467013194722,43.33066773290684,43.336665333866456,43.342662934826066,43.34866053578568,43.3546581367453,43.36065573770492,43.366653338664534,43.37265093962415,43.37864854058377,43.384646141543385,43.390643742503,43.39664134346261,43.40263894442223,43.408636545381846,43.41463414634146,43.42063174730108,43.4266293482607,43.432626949220314,43.43862455017993,43.44462215113954,43.45061975209916,43.456617353058775,43.46261495401839,43.46861255497801,43.474610155937626,43.48060775689724,43.48660535785686,43.49260295881648,43.49860055977609,43.5045981607357,43.51059576169532,43.51659336265494,43.522590963614554,43.52858856457417,43.53458616553379,43.540583766493405,43.546581367453015,43.55257896841263,43.55857656937225,43.564574170331866,43.57057177129148,43.5765693722511,43.58256697321072,43.588564574170334,43.59456217512995,43.60055977608956,43.60655737704918,43.612554978008795,43.61855257896841,43.62455017992803,43.630547780887646,43.63654538184726,43.64254298280688,43.64854058376649,43.65453818472611,43.660535785685724,43.66653338664534,43.67253098760496,43.678528588564575,43.68452618952419,43.69052379048381,43.696521391443426,43.702518992403036,43.70851659336265,43.71451419432227,43.72051179528189,43.726509396241504,43.73250699720112,43.73850459816074,43.744502199120355,43.750499800079965,43.75649740103958,43.7624950019992,43.768492602958815,43.77449020391843,43.78048780487805,43.78648540583767,43.79248300679728,43.7984806077569,43.80447820871651,43.81047580967613,43.816473410635744,43.82247101159536,43.82846861255498,43.834466213514595,43.84046381447421,43.84646141543383,43.85245901639344,43.858456617353056,43.86445421831267,43.87045181927229,43.87644942023191,43.882447021191524,43.88844462215114,43.89444222311076,43.900439824070375,43.906437425029985,43.9124350259896,43.91843262694922,43.924430227908836,43.93042782886845,43.93642542982807,43.94242303078769,43.948420631747304,43.954418232706914,43.96041583366653,43.96641343462615,43.972411035585765,43.97840863654538,43.984406237505,43.990403838464616,43.99640143942423,44.00239904038385,44.00839664134346,44.01439424230308,44.02039184326269,44.02638944422231,44.03238704518193,44.038384646141544,44.04438224710116,44.05037984806078,44.05637744902039,44.062375049980005,44.06837265093962,44.07437025189924,44.080367852858856,44.08636545381847,44.09236305477809,44.09836065573771,44.104358256697324,44.110355857656934,44.11635345861655,44.12235105957617,44.128348660535785,44.1343462614954,44.14034386245502,44.146341463414636,44.15233906437425,44.15833666533386,44.16433426629348,44.1703318672531,44.176329468212714,44.18232706917233,44.18832467013195,44.194322271091565,44.20031987205118,44.2063174730108,44.21231507397041,44.218312674930026,44.22431027588964,44.23030787684926,44.23630547780888,44.242303078768494,44.24830067972811,44.25429828068773,44.26029588164734,44.266293482606955,44.27229108356657,44.27828868452619,44.284286285485805,44.29028388644542,44.29628148740504,44.302279088364656,44.30827668932427,44.31427429028388,44.3202718912435,44.32626949220312,44.332267093162734,44.33826469412235,44.34426229508197,44.350259896041585,44.3562574970012,44.36225509796081,44.36825269892043,44.374250299880046,44.38024790083966,44.38624550179928,44.3922431027589,44.398240703718514,44.40423830467813,44.41023590563775,44.41623350659736,44.422231107556975,44.42822870851659,44.43422630947621,44.440223910435826,44.44622151139544,44.45221911235506,44.45821671331468,44.464214314274294,44.470211915233904,44.47620951619352,44.48220711715314,44.488204718112755,44.49420231907237,44.50019992003199,44.506197520991606,44.51219512195122,44.51819272291083,44.52419032387045,44.53018792483007,44.53618552578968,44.5421831267493,44.54818072770892,44.554178328668534,44.56017592962815,44.56617353058777,44.57217113154738,44.578168732506995,44.58416633346661,44.59016393442623,44.596161535385846,44.60215913634546,44.60815673730508,44.6141543382647,44.62015193922431,44.626149540183924,44.63214714114354,44.63814474210316,44.644142343062775,44.65013994402239,44.65613754498201,44.662135145941626,44.66813274690124,44.67413034786085,44.68012794882047,44.68612554978009,44.692123150739704,44.69812075169932,44.70411835265894,44.710115953618555,44.71611355457817,44.72211115553778,44.7281087564974,44.734106357457016,44.74010395841663,44.74610155937625,44.75209916033587,44.758096761295484,44.7640943622551,44.77009196321472,44.77608956417433,44.782087165133944,44.78808476609356,44.79408236705318,44.800079968012795,44.80607756897241,44.81207516993203,44.818072770891646,44.824070371851256,44.83006797281087,44.83606557377049,44.84206317473011,44.848060775689724,44.85405837664934,44.86005597760896,44.866053578568575,44.87205117952819,44.8780487804878,44.88404638144742,44.890043982407036,44.89604158336665,44.90203918432627,44.90803678528589,44.914034386245504,44.92003198720512,44.92602958816473,44.93202718912435,44.938024790083965,44.94402239104358,44.9500199920032,44.956017592962816,44.96201519392243,44.96801279488205,44.97401039584167,44.98000799680128,44.986005597760894,44.99200319872051,44.99800079968013,45.003998400639745,45.00999600159936,45.01599360255898,45.021991203518596,45.027988804478206,45.03398640543782,45.03998400639744,45.04598160735706,45.05197920831667,45.05797680927629,45.06397441023591,45.069972011195524,45.07596961215514,45.08196721311475,45.08796481407437,45.093962415033985,45.0999600159936,45.10595761695322,45.111955217912836,45.11795281887245,45.12395041983207,45.12994802079168,45.1359456217513,45.141943222710914,45.14794082367053,45.15393842463015,45.159936025589765,45.16593362654938,45.171931227509,45.177928828468616,45.183926429428226,45.18992403038784,45.19592163134746,45.20191923230708,45.207916833266694,45.21391443422631,45.21991203518593,45.225909636145545,45.231907237105155,45.23790483806477,45.24390243902439,45.249900039984006,45.25589764094362,45.26189524190324,45.26789284286286,45.273890443822474,45.27988804478209,45.2858856457417,45.29188324670132,45.297880847660934,45.30387844862055,45.30987604958017,45.315873650539785,45.3218712514994,45.32786885245902,45.33386645341863,45.339864054378246,45.34586165533786,45.35185925629748,45.3578568572571,45.363854458216714,45.36985205917633,45.37584966013595,45.381847261095565,45.387844862055175,45.39384246301479,45.39984006397441,45.405837664934026,45.41183526589364,45.41783286685326,45.42383046781288,45.429828068772494,45.435825669732104,45.44182327069172,45.44782087165134,45.453818472610955,45.45981607357057,45.46581367453019,45.471811275489806,45.47780887644942,45.48380647740904,45.48980407836865,45.49580167932827,45.501799280287884,45.5077968812475,45.51379448220712,45.519792083166735,45.52578968412635,45.53178728508597,45.53778488604558,45.543782487005195,45.54978008796481,45.55577768892443,45.56177528988405,45.56777289084366,45.57377049180328,45.5797680927629,45.585765693722514,45.591763294682124,45.59776089564174,45.60375849660136,45.609756097560975,45.61575369852059,45.62175129948021,45.627748900439826,45.63374650139944,45.63974410235905,45.64574170331867,45.65173930427829,45.657736905237904,45.66373450619752,45.66973210715714,45.675729708116755,45.68172730907637,45.68772491003599,45.6937225109956,45.699720111955216,45.70571771291483,45.71171531387445,45.71771291483407,45.723710515793684,45.7297081167533,45.73570571771292,45.74170331867253,45.747700919632145,45.75369852059176,45.75969612155138,45.765693722510996,45.77169132347061,45.77768892443023,45.78368652538985,45.789684126349464,45.79568172730907,45.80167932826869,45.80767692922831,45.813674530187924,45.81967213114754,45.82566973210716,45.831667333066775,45.83766493402639,45.843662534986,45.84966013594562,45.855657736905236,45.86165533786485,45.86765293882447,45.87365053978409,45.879648140743704,45.88564574170332,45.89164334266294,45.89764094362255,45.903638544582165,45.90963614554178,45.9156337465014,45.921631347461016,45.92762894842063,45.93362654938025,45.93962415033987,45.94562175129948,45.951619352259094,45.95761695321871,45.96361455417833,45.969612155137945,45.97560975609756,45.98160735705718,45.987604958016796,45.99360255897641,45.99960015993602,46.00559776089564,46.01159536185526,46.017592962814874,46.02359056377449,46.02958816473411,46.035585765693725,46.04158336665334,46.04758096761295,46.05357856857257,46.059576169532185,46.0655737704918,46.07157137145142,46.077568972411036,46.08356657337065,46.08956417433027,46.09556177528989,46.1015593762495,46.107556977209114,46.11355457816873,46.11955217912835,46.125549780087965,46.13154738104758,46.1375449820072,46.143542582966816,46.149540183926426,46.15553778488604,46.16153538584566,46.16753298680528,46.173530587764894,46.17952818872451,46.18552578968413,46.191523390643745,46.19752099160336,46.20351859256297,46.20951619352259,46.215513794482206,46.22151139544182,46.22750899640144,46.23350659736106,46.239504198320674,46.24550179928029,46.2514994002399,46.25749700119952,46.263494602159135,46.26949220311875,46.27548980407837,46.281487405037986,46.2874850059976,46.29348260695722,46.29948020791684,46.30547780887645,46.31147540983606,46.31747301079568,46.3234706117553,46.329468212714914,46.33546581367453,46.34146341463415,46.347461015593765,46.353458616553375,46.35945621751299,46.36545381847261,46.371451419432226,46.37744902039184,46.38344662135146,46.38944422231108,46.395441823270694,46.40143942423031,46.40743702518992,46.41343462614954,46.419432227109155,46.42542982806877,46.43142742902839,46.437425029988006,46.44342263094762,46.44942023190724,46.45541783286685,46.46141543382647,46.467413034786084,46.4734106357457,46.47940823670532,46.485405837664935,46.49140343862455,46.49740103958417,46.503398640543786,46.509396241503396,46.51539384246301,46.52139144342263,46.52738904438225,46.533386645341864,46.53938424630148,46.5453818472611,46.551379448220715,46.557377049180324,46.56337465013994,46.56937225109956,46.575369852059175,46.58136745301879,46.58736505397841,46.593362654938026,46.59936025589764,46.60535785685726,46.61135545781687,46.61735305877649,46.623350659736104,46.62934826069572,46.63534586165534,46.641343462614955,46.64734106357457,46.65333866453419,46.6593362654938,46.665333866453416,46.67133146741303,46.67732906837265,46.68332666933227,46.689324270291884,46.6953218712515,46.70131947221112,46.707317073170735,46.713314674130345,46.71931227508996,46.72530987604958,46.731307477009196,46.73730507796881,46.74330267892843,46.74930027988805,46.755297880847664,46.761295481807274,46.76729308276689,46.77329068372651,46.779288284686125,46.78528588564574,46.79128348660536,46.797281087564976,46.80327868852459,46.80927628948421,46.81527389044382,46.82127149140344,46.82726909236305,46.83326669332267,46.83926429428229,46.845261895241904,46.85125949620152,46.85725709716114,46.86325469812075,46.869252299080365,46.87524990003998,46.8812475009996,46.887245101959216,46.89324270291883,46.89924030387845,46.90523790483807,46.911235505797684,46.917233106757294,46.92323070771691,46.92922830867653,46.935225909636145,46.94122351059576,46.94722111155538,46.953218712514996,46.95921631347461,46.96521391443422,46.97121151539384,46.97720911635346,46.983206717313074,46.98920431827269,46.99520191923231,47.001199520191925,47.00719712115154,47.01319472211116,47.01919232307077,47.025189924030386,47.03118752499,47.03718512594962,47.04318272690924,47.049180327868854,47.05517792882847,47.06117552978809,47.0671731307477,47.073170731707314,47.07916833266693,47.08516593362655,47.091163534586165,47.09716113554578,47.1031587365054,47.109156337465016,47.11515393842463,47.12115153938424,47.12714914034386,47.13314674130348,47.139144342263094,47.14514194322271,47.15113954418233,47.157137145141945,47.16313474610156,47.16913234706117,47.17512994802079,47.181127548980406,47.18712514994002,47.19312275089964,47.19912035185926,47.205117952818874,47.21111555377849,47.21711315473811,47.22311075569772,47.229108356657335,47.23510595761695,47.24110355857657,47.247101159536186,47.2530987604958,47.25909636145542,47.26509396241504,47.27109156337465,47.277089164334264,47.28308676529388,47.2890843662535,47.295081967213115,47.30107956817273,47.30707716913235,47.313074770091966,47.31907237105158,47.32506997201119,47.33106757297081,47.33706517393043,47.34306277489004,47.34906037584966,47.35505797680928,47.361055577768894,47.36705317872851,47.37305077968812,47.37904838064774,47.385045981607355,47.39104358256697,47.39704118352659,47.403038784486206,47.40903638544582,47.41503398640544,47.42103158736506,47.42702918832467,47.433026789284284,47.4390243902439,47.44502199120352,47.451019592163135,47.45701719312275,47.46301479408237,47.469012395041986,47.475009996001596,47.48100759696121,47.48700519792083,47.49300279888045,47.499000399840064,47.50499800079968,47.5109956017593,47.516993202718915,47.52299080367853,47.52898840463814,47.53498600559776,47.540983606557376,47.54698120751699,47.55297880847661,47.55897640943623,47.564974010395844,47.57097161135546,47.57696921231507,47.58296681327469,47.588964414234304,47.59496201519392,47.60095961615354,47.606957217113155,47.61295481807277,47.61895241903239,47.624950019992006,47.630947620951616,47.63694522191123,47.64294282287085,47.64894042383047,47.654938024790084,47.6609356257497,47.66693322670932,47.672930827668935,47.678928428628545,47.68492602958816,47.69092363054778,47.696921231507396,47.70291883246701,47.70891643342663,47.71491403438625,47.720911635345864,47.72690923630548,47.73290683726509,47.73890443822471,47.744902039184325,47.75089964014394,47.75689724110356,47.762894842063176,47.76889244302279,47.77489004398241,47.78088764494202,47.78688524590164,47.792882846861254,47.79888044782087,47.80487804878049,47.810875649740105,47.81687325069972,47.82287085165934,47.828868452618956,47.834866053578565,47.84086365453818,47.8468612554978,47.852858856457416,47.85885645741703,47.86485405837665,47.87085165933627,47.876849260295884,47.882846861255494,47.88884446221511,47.89484206317473,47.900839664134345,47.90683726509396,47.91283486605358,47.918832467013196,47.92483006797281,47.93082766893243,47.93682526989204,47.94282287085166,47.948820471811274,47.95481807277089,47.96081567373051,47.966813274690125,47.97281087564974,47.97880847660936,47.98480607756897,47.990803678528586,47.9968012794882,48.00279888044782,48.00879648140744,48.014794082367054,48.02079168332667,48.02678928428629,48.032786885245905,48.038784486205515,48.04478208716513,48.05077968812475,48.056777289084366,48.06277489004398,48.0687724910036,48.07477009196322,48.080767692922834,48.08676529388244,48.09276289484206,48.09876049580168,48.104758096761294,48.11075569772091,48.11675329868053,48.122750899640145,48.12874850059976,48.13474610155938,48.14074370251899,48.146741303478606,48.15273890443822,48.15873650539784,48.16473410635746,48.170731707317074,48.17672930827669,48.18272690923631,48.188724510195925,48.194722111155535,48.20071971211515,48.20671731307477,48.212714914034386,48.218712514994,48.22471011595362,48.23070771691324,48.236705317872854,48.242702918832464,48.24870051979208,48.2546981207517,48.260695721711315,48.26669332267093,48.27269092363055,48.278688524590166,48.28468612554978,48.2906837265094,48.29668132746901,48.30267892842863,48.308676529388244,48.31467413034786,48.32067173130748,48.326669332267095,48.33266693322671,48.33866453418633,48.34466213514594,48.350659736105555,48.35665733706517,48.36265493802479,48.368652538984406,48.37465013994402,48.38064774090364,48.38664534186326,48.392642942822874,48.398640543782484,48.4046381447421,48.41063574570172,48.416633346661335,48.42263094762095,48.42862854858057,48.434626149540186,48.4406237504998,48.44662135145941,48.45261895241903,48.45861655337865,48.464614154338264,48.47061175529788,48.4766093562575,48.482606957217115,48.48860455817673,48.49460215913635,48.50059976009596,48.506597361055576,48.51259496201519,48.51859256297481,48.52459016393443,48.530587764894044,48.53658536585366,48.54258296681328,48.54858056777289,48.554578168732505,48.56057576969212,48.56657337065174,48.572570971611356,48.57856857257097,48.58456617353059,48.59056377449021,48.596561375449824,48.60255897640943,48.60855657736905,48.61455417832867,48.620551779288284,48.6265493802479,48.63254698120752,48.638544582167135,48.64454218312675,48.65053978408636,48.65653738504598,48.662534986005596,48.66853258696521,48.67453018792483,48.68052778888445,48.686525389844064,48.69252299080368,48.6985205917633,48.70451819272291,48.710515793682525,48.71651339464214,48.72251099560176,48.728508596561376,48.73450619752099,48.74050379848061,48.74650139944023,48.75249900039984,48.758496601359454,48.76449420231907,48.77049180327869,48.776489404238305,48.78248700519792,48.78848460615754,48.794482207117156,48.80047980807677,48.80647740903638,48.812475009996,48.81847261095562,48.824470211915234,48.83046781287485,48.83646541383447,48.842463014794085,48.8484606157537,48.85445821671331,48.86045581767293,48.866453418632545,48.87245101959216,48.87844862055178,48.884446221511396,48.89044382247101,48.89644142343063,48.90243902439025,48.90843662534986,48.914434226309474,48.92043182726909,48.92642942822871,48.932427029188325,48.93842463014794,48.94442223110756,48.950419832067176,48.956417433026786,48.9624150339864,48.96841263494602,48.97441023590564,48.980407836865254,48.98640543782487,48.99240303878449,48.998400639744105,49.00439824070372,49.01039584166333,49.01639344262295,49.022391043582566,49.02838864454218,49.0343862455018,49.04038384646142,49.046381447421034,49.05237904838065,49.05837664934026,49.06437425029988,49.070371851259495,49.07636945221911,49.08236705317873,49.088364654138346,49.09436225509796,49.10035985605758,49.1063574570172,49.11235505797681,49.11835265893642,49.12435025989604,49.13034786085566,49.136345461815274,49.14234306277489,49.14834066373451,49.154338264694125,49.160335865653735,49.16633346661335,49.17233106757297,49.178328668532586,49.1843262694922,49.19032387045182,49.19632147141144,49.202319072371054,49.20831667333067,49.21431427429028,49.2203118752499,49.226309476209515,49.23230707716913,49.23830467812875,49.244302279088366,49.25029988004798,49.2562974810076,49.26229508196721,49.26829268292683,49.274290283886444,49.28028788484606,49.28628548580568,49.292283086765295,49.29828068772491,49.30427828868453,49.310275889644146,49.316273490603756,49.32227109156337,49.32826869252299,49.33426629348261,49.340263894442224,49.34626149540184,49.35225909636146,49.358256697321075,49.364254298280684,49.3702518992403,49.37624950019992,49.382247101159535,49.38824470211915,49.39424230307877,49.400239904038386,49.406237504998,49.41223510595762,49.41823270691723,49.42423030787685,49.430227908836464,49.43622550979608,49.4422231107557,49.448220711715315,49.45421831267493,49.46021591363455,49.46621351459416,49.472211115553776,49.47820871651339,49.48420631747301,49.49020391843263,49.496201519392244,49.50219912035186,49.50819672131148,49.514194322271095,49.520191923230705,49.52618952419032,49.53218712514994,49.538184726109556,49.54418232706917,49.55017992802879,49.55617752898841,49.562175129948024,49.568172730907634,49.57417033186725,49.58016793282687,49.586165533786485,49.5921631347461,49.59816073570572,49.604158336665336,49.61015593762495,49.61615353858457,49.62215113954418,49.628148740503796,49.63414634146341,49.64014394242303,49.64614154338265,49.652139144342264,49.65813674530188,49.6641343462615,49.67013194722111,49.676129548180725,49.68212714914034,49.68812475009996,49.694122351059576,49.70011995201919,49.70611755297881,49.71211515393843,49.718112754898044,49.724110355857654,49.73010795681727,49.73610555777689,49.742103158736505,49.74810075969612,49.75409836065574,49.760095961615356,49.76609356257497,49.77209116353458,49.7780887644942,49.78408636545382,49.790083966413434,49.79608156737305,49.80207916833267,49.808076769292285,49.8140743702519,49.82007197121152,49.82606957217113,49.832067173130746,49.83806477409036,49.84406237504998,49.8500599760096,49.856057576969214,49.86205517792883,49.86805277888845,49.87405037984806,49.880047980807674,49.88604558176729,49.89204318272691,49.898040783686525,49.90403838464614,49.91003598560576,49.916033586565376,49.92203118752499,49.9280287884846,49.93402638944422,49.94002399040384,49.946021591363454,49.95201919232307,49.95801679328269,49.964014394242305,49.97001199520192,49.97600959616153,49.98200719712115,49.988004798080766,49.99400239904038,50.0]}

},{}],86:[function(require,module,exports){
module.exports={"expected":[-0.6933612743506348,-0.690771807858779,-0.6882205961017794,-0.6857066609068805,-0.6832290594454625,-0.6807868825906269,-0.6783792533677186,-0.6760053254916093,-0.6736642819850285,-0.6713553338726681,-0.6690777189461742,-0.6668307005955014,-0.6646135667024412,-0.6624256285924301,-0.6602662200410327,-0.6581346963317426,-0.6560304333619845,-0.6539528267944181,-0.6519012912508424,-0.6498752595461837,-0.6478741819602258,-0.6458975255448894,-0.6439447734650242,-0.6420154243708001,-0.64010899179992,-0.6382250036079825,-0.6363630014254362,-0.6345225401396634,-0.6327031874008245,-0.6309045231501805,-0.629126139169687,-0.627367638651734,-0.6256286357879663,-0.6239087553761918,-0.6222076324444369,-0.6205249118912708,-0.6188602481415683,-0.6172133048169299,-0.6155837544200253,-0.6139712780321658,-0.6123755650234536,-0.610796312774891,-0.6092332264118682,-0.6076860185484808,-0.6061544090421579,-0.6046381247581113,-0.603136899343142,-0.6016504730083665,-0.6001785923204472,-0.5987210100009359,-0.5972774847333576,-0.5958477809776828,-0.5944316687918545,-0.5930289236600556,-0.5916393263274126,-0.5902626626408546,-0.5888987233958566,-0.5875473041888081,-0.5862082052747679,-0.5848812314303683,-0.5835661918216536,-0.5822628998766392,-0.5809711731623957,-0.5796908332664669,-0.5784217056824407,-0.5771636196995038,-0.5759164082958138,-0.5746799080355349,-0.573453958969388,-0.5722384045385729,-0.5710330914819302,-0.5698378697462103,-0.5686525923993309,-0.5674771155465004,-0.5663112982491022,-0.5651550024462257,-0.5640080928787471,-0.5628704370158593,-0.5617419049839597,-0.5606223694978051,-0.5595117057938485,-0.5584097915656773,-0.5573165069014734,-0.5562317342234213,-0.555155358228992,-0.5540872658340346,-0.5530273461176095,-0.5519754902685008,-0.5509315915333466,-0.5498955451663308,-0.5488672483803791,-0.5478466002998086,-0.5468335019143762,-0.5458278560346814,-0.5448295672488729,-0.5438385418806152,-0.5428546879482722,-0.5418779151252662,-0.540908134701571,-0.5399452595463026,-0.5389892040713702,-0.5380398841961496,-0.5370972173131493,-0.5361611222546322,-0.5352315192601641,-0.5343083299450582,-0.5333914772696846,-0.5324808855096193,-0.5315764802266043,-0.5306781882402923,-0.529785937600752,-0.5288996575617092,-0.5280192785545004,-0.527144732162717,-0.5262759510975178,-0.5254128691735899,-0.5245554212857358,-0.5237035433860712,-0.5228571724618096,-0.5220162465136217,-0.5211807045345461,-0.5203504864894397,-0.5195255332949478,-0.5187057867999809,-0.5178911897666818,-0.5170816858518688,-0.5162772195889396,-0.5154777363702262,-0.5146831824297821,-0.5138935048265939,-0.5131086514282026,-0.5123285708947233,-0.5115532126632515,-0.5107825269326463,-0.5100164646486772,-0.509254977489528,-0.5084980178516425,-0.5077455388359081,-0.5069974942341633,-0.5062538385160227,-0.5055145268160096,-0.5047795149209878,-0.5040487592578847,-0.5033222168816979,-0.5025998454637761,-0.5018816032803691,-0.5011674492014383,-0.50045734267972,-0.4997512437400364,-0.49904911296884746,-0.4983509115040349,-0.49765660102491505,-0.49696614374247394,-0.49627950238981694,-0.49559664021282973,-0.4949175209610432,-0.49424210887869846,-0.4935703686960059,-0.4929022656205935,-0.49223776532914004,-0.49157683395918694,-0.4909194381011268,-0.49026554479036144,-0.4896151214996274,-0.48896813613148243,-0.48832455701095207,-0.487684352878328,-0.4870474928821196,-0.4864139465721501,-0.4857836838927967,-0.48515667517637007,-0.48453289113663095,-0.48391230286243775,-0.4832948818115255,-0.48268059980441125,-0.4820694290184212,-0.48146134198184065,-0.4808563115681801,-0.48025431099055677,-0.4796553137961879,-0.4790592938609943,-0.47846622538430916,-0.4778760828836938,-0.4772888411898528,-0.47670447544165023,-0.47612296108122265,-0.47554427384918757,-0.47496838977994404,-0.4743952851970648,-0.47382493670877635,-0.4732573212035259,-0.47269241584563343,-0.4721301980710256,-0.4715706455830513,-0.4710137363483761,-0.4704594485929538,-0.4699077607980737,-0.4693586516964818,-0.4688121002685741,-0.4682680857386609,-0.4677265875713,-0.46718758546769734,-0.46665105936217427,-0.46611698941869867,-0.46558535602748086,-0.4650561398016293,-0.4645293215738691,-0.4640048823933182,-0.4634828035223225,-0.46296306643334706,-0.4624456528059236,-0.46193054452365206,-0.4614177236712553,-0.46090717253168606,-0.4603988735832853,-0.4598928094969898,-0.4593889631335893,-0.4588873175410315,-0.45838785595177384,-0.4578905617801808,-0.4573954186199675,-0.45690241024168615,-0.4564115205902562,-0.4559227337825364,-0.4554360341049396,-0.4549514060110866,-0.45446883411950045,-0.4539883032113401,-0.45350979822817167,-0.4530333042697777,-0.45255880659200276,-0.45208629060463507,-0.4516157418693237,-0.45114714609753015,-0.4506804891485136,-0.4502157570273497,-0.44975293588298226,-0.44929201200630586,-0.448832971828281,-0.4483758019180792,-0.44792048898125825,-0.4474670198579676,-0.44701538152118214,-0.44656556107496476,-0.4461175457527563,-0.44567132291569395,-0.4452268800509548,-0.44478420477012776,-0.44434328480760943,-0.4439041080190266,-0.44346666237968285,-0.4430309359830305,-0.4425969170391651,-0.442164593873345,-0.44173395492453277,-0.4413049887439599,-0.4408776839937138,-0.44045202944534634,-0.4400280139785035,-0.43960562657957714,-0.4391848563403763,-0.43876569245681946,-0.43834812422764646,-0.4379321410531498,-0.4375177324339259,-0.43710488796964386,-0.4366935973578347,-0.43628385039269635,-0.43587563696391884,-0.43546894705552575,-0.43506377074473296,-0.43466009820082463,-0.434257919684046,-0.433857225544512,-0.4334580062211325,-0.4330602522405528,-0.43266395421610976,-0.4322691028468038,-0.4318756889162852,-0.4314837032918548,-0.4310931369234804,-0.43070398084282613,-0.43031622616229637,-0.42992986407409367,-0.42954488584928935,-0.42916128283690824,-0.4287790464630259,-0.428398168229879,-0.4280186397149878,-0.42764045257029226,-0.4272635985212983,-0.42688806936623813,-0.42651385697524113,-0.4261409532895168,-0.42576935032054886,-0.4253990401493005,-0.4250300149254314,-0.42466226686652453,-0.42429578825732434,-0.4239305714489851,-0.42356660885832986,-0.4232038929671192,-0.4228424163213304,-0.4224821715304462,-0.42212315126675276,-0.4217653482646484,-0.4214087553199603,-0.4210533652892713,-0.42069917108925525,-0.42034616569602196,-0.4199943421444702,-0.41964369352764946,-0.4192942129961307,-0.41894589375738495,-0.4185987290751707,-0.4182527122689284,-0.4179078367131842,-0.4175640958369606,-0.41722148312319524,-0.4168799921081673,-0.41653961638093107,-0.4162003495827575,-0.41586218540658226,-0.4155251175964618,-0.41518913994703577,-0.4148542463029965,-0.4145204305585654,-0.4141876866569767,-0.41385600858996624,-0.4135253903972686,-0.41319582616611944,-0.4128673100307644,-0.4125398361719748,-0.41221339881656865,-0.4118879922369383,-0.41156361075058373,-0.41124024871965204,-0.41091790055048216,-0.4105965606931557,-0.4102762236410537,-0.4099568839304179,-0.4096385361399184,-0.4093211748902263,-0.4090047948435916,-0.40868939070342636,-0.4083749572138931,-0.40806148915949825,-0.4077489813646901,-0.40743742869346256,-0.4071268260489627,-0.4068171683731043,-0.4065084506461846,-0.40620066788650727,-0.4058938151500086,-0.4055878875298891,-0.4052828801562491,-0.40497878819572863,-0.4046756068511522,-0.404373331361177,-0.4040719569999462,-0.4037714790767455,-0.4034718929356641,-0.4031731939552603,-0.40287537754823005,-0.40257843916107966,-0.4022823742738033,-0.40198717839956266,-0.4016928470843721,-0.40139937590678576,-0.40110676047759,-0.40081499643949786,-0.40052407946684865,-0.40023400526530933,-0.3999447695715808,-0.3996563681531067,-0.3993687968077858,-0.399082051363688,-0.3987961276787732,-0.3985110216406132,-0.3982267291661177,-0.39794324620126204,-0.3976605687208195,-0.39737869272809556,-0.39709761425466544,-0.39681732936011505,-0.39653783413178434,-0.3962591246845134,-0.3959811971603925,-0.3957040477285131,-0.3954276725847236,-0.3951520679513865,-0.39487723007713865,-0.3946031552366542,-0.3943298397304102,-0.3940572798844548,-0.3937854720501779,-0.3935144126040842,-0.3932440979475693,-0.39297452450669756,-0.3927056887319828,-0.3924375870981714,-0.39217021610402764,-0.3919035722721212,-0.39163765214861757,-0.39137245230306983,-0.39110796932821373,-0.3908441998397641,-0.3905811404762138,-0.3903187878986348,-0.3900571387904817,-0.3897961898573968,-0.38953593782701756,-0.389276379448786,-0.3890175114937604,-0.3887593307544288,-0.3885018340445241,-0.388245018198842,-0.3879888800730599,-0.38773341654355875,-0.3874786245072454,-0.3872245008813782,-0.38697104260339366,-0.38671824663073495,-0.3864661099406826,-0.38621462953018637,-0.3859638024156995,-0.385713625633014,-0.3854640962370985,-0.3852152113019367,-0.3849669679203686,-0.3847193632039325,-0.38447239428270913,-0.38422605830516704,-0.38398035243801004,-0.3837352738660254,-0.3834908197919346,-0.3832469874362449,-0.3830037740371024,-0.3827611768501471,-0.382519193148369,-0.3822778202219658,-0.3820370553782019,-0.38179689594126914,-0.38155733925214846,-0.38131838266847357,-0.381080023564395,-0.3808422593304472,-0.38060508737341453,-0.38036850511620124,-0.38013250999770043,-0.37989709947266614,-0.3796622710115852,-0.37942802210055165,-0.3791943502411413,-0.37896125295028826,-0.37872872776016253,-0.3784967722180483,-0.37826538388622427,-0.37803456034184446,-0.3778042991768204,-0.3775745979977047,-0.37734545442557516,-0.377116866095921,-0.3768888306585289,-0.37666134577737115,-0.3764344091304946,-0.37620801840991047,-0.37598217132148537,-0.3757568655848335,-0.3755320989332096,-0.3753078691134032,-0.3750841738856336,-0.37486101102344616,-0.3746383783136092,-0.37441627355601226,-0.3741946945635653,-0.3739736391620981,-0.37375310519026206,-0.37353309049943145,-0.3733135929536064,-0.37309461042931663,-0.3728761408155261,-0.3726581820135386,-0.37244073193690397,-0.37222378851132537,-0.3720073496745676,-0.37179141337636595,-0.3715759775783359,-0.37136104025388417,-0.37114659938811967,-0.37093265297776645,-0.3707191990310762,-0.37050623556774237,-0.3702937606188153,-0.37008177222661676,-0.36987026844465726,-0.36965924733755234,-0.3694487069809405,-0.3692386454614021,-0.369029060876378,-0.36881995133408996,-0.36861131495346144,-0.3684031498640387],"x":[-3.0,-3.0338645418326693,-3.0677290836653386,-3.101593625498008,-3.135458167330677,-3.1693227091633465,-3.2031872509960158,-3.237051792828685,-3.270916334661355,-3.304780876494024,-3.3386454183266934,-3.3725099601593627,-3.406374501992032,-3.4402390438247012,-3.4741035856573705,-3.50796812749004,-3.541832669322709,-3.5756972111553784,-3.6095617529880477,-3.643426294820717,-3.6772908366533863,-3.7111553784860556,-3.745019920318725,-3.7788844621513946,-3.812749003984064,-3.846613545816733,-3.8804780876494025,-3.914342629482072,-3.948207171314741,-3.9820717131474104,-4.01593625498008,-4.049800796812749,-4.083665338645418,-4.117529880478088,-4.151394422310757,-4.185258964143427,-4.219123505976095,-4.252988047808765,-4.286852589641434,-4.320717131474104,-4.354581673306773,-4.388446215139442,-4.422310756972111,-4.456175298804781,-4.49003984063745,-4.5239043824701195,-4.557768924302789,-4.591633466135458,-4.625498007968128,-4.659362549800797,-4.693227091633466,-4.727091633466135,-4.760956175298805,-4.794820717131474,-4.828685258964144,-4.862549800796812,-4.896414342629482,-4.930278884462151,-4.964143426294821,-4.99800796812749,-5.031872509960159,-5.065737051792829,-5.099601593625498,-5.133466135458168,-5.1673306772908365,-5.201195219123506,-5.235059760956175,-5.268924302788845,-5.302788844621514,-5.336653386454183,-5.370517928286852,-5.404382470119522,-5.438247011952191,-5.472111553784861,-5.50597609561753,-5.539840637450199,-5.573705179282869,-5.607569721115538,-5.6414342629482075,-5.675298804780876,-5.709163346613546,-5.743027888446215,-5.776892430278885,-5.8107569721115535,-5.844621513944223,-5.878486055776892,-5.912350597609562,-5.946215139442231,-5.9800796812749,-6.01394422310757,-6.047808764940239,-6.081673306772909,-6.115537848605578,-6.149402390438247,-6.183266932270916,-6.217131474103586,-6.250996015936255,-6.2848605577689245,-6.318725099601593,-6.352589641434263,-6.386454183266932,-6.420318725099602,-6.4541832669322705,-6.48804780876494,-6.52191235059761,-6.555776892430279,-6.589641434262949,-6.623505976095617,-6.657370517928287,-6.691235059760956,-6.725099601593626,-6.758964143426295,-6.792828685258964,-6.826693227091633,-6.860557768924303,-6.894422310756972,-6.9282868525896415,-6.96215139442231,-6.99601593625498,-7.02988047808765,-7.063745019920319,-7.097609561752988,-7.131474103585657,-7.165338645418327,-7.199203187250996,-7.233067729083666,-7.266932270916334,-7.300796812749004,-7.334661354581673,-7.368525896414343,-7.402390438247012,-7.436254980079681,-7.47011952191235,-7.50398406374502,-7.53784860557769,-7.5717131474103585,-7.605577689243028,-7.639442231075697,-7.673306772908367,-7.707171314741036,-7.741035856573705,-7.774900398406374,-7.808764940239044,-7.842629482071713,-7.876494023904383,-7.910358565737051,-7.944223107569721,-7.97808764940239,-8.01195219123506,-8.04581673306773,-8.079681274900398,-8.113545816733067,-8.147410358565738,-8.181274900398407,-8.215139442231076,-8.249003984063744,-8.282868525896415,-8.316733067729084,-8.350597609561753,-8.384462151394422,-8.418326693227092,-8.452191235059761,-8.48605577689243,-8.5199203187251,-8.55378486055777,-8.587649402390438,-8.621513944223107,-8.655378486055778,-8.689243027888446,-8.723107569721115,-8.756972111553784,-8.790836653386455,-8.824701195219124,-8.858565737051793,-8.892430278884461,-8.926294820717132,-8.9601593625498,-8.99402390438247,-9.02788844621514,-9.06175298804781,-9.095617529880478,-9.129482071713147,-9.163346613545817,-9.197211155378486,-9.231075697211155,-9.264940239043824,-9.298804780876495,-9.332669322709163,-9.366533864541832,-9.400398406374501,-9.434262948207172,-9.46812749003984,-9.50199203187251,-9.53585657370518,-9.569721115537849,-9.603585657370518,-9.637450199203187,-9.671314741035857,-9.705179282868526,-9.739043824701195,-9.772908366533864,-9.806772908366534,-9.840637450199203,-9.874501992031872,-9.908366533864541,-9.942231075697212,-9.97609561752988,-10.00996015936255,-10.04382470119522,-10.077689243027889,-10.111553784860558,-10.145418326693227,-10.179282868525897,-10.213147410358566,-10.247011952191235,-10.280876494023904,-10.314741035856574,-10.348605577689243,-10.382470119521912,-10.41633466135458,-10.450199203187251,-10.48406374501992,-10.51792828685259,-10.55179282868526,-10.585657370517929,-10.619521912350598,-10.653386454183266,-10.687250996015937,-10.721115537848606,-10.754980079681275,-10.788844621513944,-10.822709163346614,-10.856573705179283,-10.890438247011952,-10.92430278884462,-10.958167330677291,-10.99203187250996,-11.025896414342629,-11.0597609561753,-11.093625498007968,-11.127490039840637,-11.161354581673306,-11.195219123505977,-11.229083665338646,-11.262948207171315,-11.296812749003983,-11.330677290836654,-11.364541832669323,-11.398406374501992,-11.43227091633466,-11.466135458167331,-11.5,-11.533864541832669,-11.56772908366534,-11.601593625498008,-11.635458167330677,-11.669322709163346,-11.703187250996017,-11.737051792828685,-11.770916334661354,-11.804780876494023,-11.838645418326694,-11.872509960159363,-11.906374501992032,-11.9402390438247,-11.974103585657371,-12.00796812749004,-12.041832669322709,-12.07569721115538,-12.109561752988048,-12.143426294820717,-12.177290836653386,-12.211155378486056,-12.245019920318725,-12.278884462151394,-12.312749003984063,-12.346613545816734,-12.380478087649402,-12.414342629482071,-12.44820717131474,-12.48207171314741,-12.51593625498008,-12.549800796812749,-12.58366533864542,-12.617529880478088,-12.651394422310757,-12.685258964143426,-12.719123505976096,-12.752988047808765,-12.786852589641434,-12.820717131474103,-12.854581673306773,-12.888446215139442,-12.922310756972111,-12.95617529880478,-12.99003984063745,-13.02390438247012,-13.057768924302788,-13.091633466135459,-13.125498007968128,-13.159362549800797,-13.193227091633466,-13.227091633466136,-13.260956175298805,-13.294820717131474,-13.328685258964143,-13.362549800796813,-13.396414342629482,-13.430278884462151,-13.46414342629482,-13.49800796812749,-13.53187250996016,-13.565737051792828,-13.599601593625499,-13.633466135458168,-13.667330677290837,-13.701195219123505,-13.735059760956176,-13.768924302788845,-13.802788844621514,-13.836653386454183,-13.870517928286853,-13.904382470119522,-13.93824701195219,-13.97211155378486,-14.00597609561753,-14.0398406374502,-14.073705179282868,-14.107569721115539,-14.141434262948207,-14.175298804780876,-14.209163346613545,-14.243027888446216,-14.276892430278885,-14.310756972111554,-14.344621513944222,-14.378486055776893,-14.412350597609562,-14.44621513944223,-14.4800796812749,-14.51394422310757,-14.547808764940239,-14.581673306772908,-14.615537848605578,-14.649402390438247,-14.683266932270916,-14.717131474103585,-14.750996015936256,-14.784860557768924,-14.818725099601593,-14.852589641434262,-14.886454183266933,-14.920318725099602,-14.95418326693227,-14.98804780876494,-15.02191235059761,-15.055776892430279,-15.089641434262948,-15.123505976095618,-15.157370517928287,-15.191235059760956,-15.225099601593625,-15.258964143426295,-15.292828685258964,-15.326693227091633,-15.360557768924302,-15.394422310756973,-15.428286852589641,-15.46215139442231,-15.49601593625498,-15.52988047808765,-15.563745019920319,-15.597609561752988,-15.631474103585658,-15.665338645418327,-15.699203187250996,-15.733067729083665,-15.766932270916335,-15.800796812749004,-15.834661354581673,-15.868525896414342,-15.902390438247012,-15.936254980079681,-15.97011952191235,-16.00398406374502,-16.03784860557769,-16.07171314741036,-16.105577689243027,-16.139442231075698,-16.173306772908365,-16.207171314741036,-16.241035856573706,-16.274900398406373,-16.308764940239044,-16.342629482071715,-16.37649402390438,-16.410358565737052,-16.44422310756972,-16.47808764940239,-16.51195219123506,-16.545816733067728,-16.5796812749004,-16.61354581673307,-16.647410358565736,-16.681274900398407,-16.715139442231077,-16.749003984063744,-16.782868525896415,-16.816733067729082,-16.850597609561753,-16.884462151394423,-16.91832669322709,-16.95219123505976,-16.98605577689243,-17.0199203187251,-17.05378486055777,-17.08764940239044,-17.121513944223107,-17.155378486055778,-17.189243027888445,-17.223107569721115,-17.256972111553786,-17.290836653386453,-17.324701195219124,-17.358565737051794,-17.39243027888446,-17.426294820717132,-17.4601593625498,-17.49402390438247,-17.52788844621514,-17.561752988047807,-17.595617529880478,-17.62948207171315,-17.663346613545816,-17.697211155378486,-17.731075697211157,-17.764940239043824,-17.798804780876495,-17.83266932270916,-17.866533864541832,-17.900398406374503,-17.93426294820717,-17.96812749003984,-18.00199203187251,-18.03585657370518,-18.06972111553785,-18.10358565737052,-18.137450199203187,-18.171314741035857,-18.205179282868524,-18.239043824701195,-18.272908366533866,-18.306772908366533,-18.340637450199203,-18.374501992031874,-18.40836653386454,-18.44223107569721,-18.47609561752988,-18.50996015936255,-18.54382470119522,-18.577689243027887,-18.611553784860558,-18.64541832669323,-18.679282868525895,-18.713147410358566,-18.747011952191237,-18.780876494023904,-18.814741035856574,-18.84860557768924,-18.882470119521912,-18.916334661354583,-18.95019920318725,-18.98406374501992,-19.01792828685259,-19.051792828685258,-19.08565737051793,-19.1195219123506,-19.153386454183266,-19.187250996015937,-19.221115537848604,-19.254980079681275,-19.288844621513945,-19.322709163346612,-19.356573705179283,-19.390438247011954,-19.42430278884462,-19.45816733067729,-19.49203187250996,-19.52589641434263,-19.5597609561753,-19.593625498007967,-19.627490039840637,-19.661354581673308,-19.695219123505975,-19.729083665338646,-19.762948207171316,-19.796812749003983,-19.830677290836654,-19.86454183266932,-19.89840637450199,-19.932270916334662,-19.96613545816733,-20.0]}

},{}],87:[function(require,module,exports){
module.exports={"expected":[0.6933612743506348,0.6930996401771672,0.692838400459207,0.6925775541571957,0.6923171002354845,0.6920570376623147,0.6917973654097994,0.6915380824539035,0.6912791877744261,0.6910206803549811,0.6907625591829795,0.6905048232496096,0.6902474715498205,0.689990503082302,0.6897339168494685,0.6894777118574391,0.6892218871160211,0.6889664416386913,0.6887113744425792,0.6884566845484492,0.6882023709806823,0.6879484327672597,0.6876948689397455,0.6874416785332693,0.6871888605865086,0.6869364141416732,0.6866843382444869,0.6864326319441721,0.6861812942934319,0.6859303243484344,0.6856797211687957,0.6854294838175644,0.6851796113612041,0.6849301028695782,0.6846809574159337,0.6844321740768845,0.6841837519323963,0.6839356900657706,0.683687987563629,0.6834406435158973,0.6831936570157902,0.6829470271597958,0.6827007530476608,0.682454833782374,0.6822092684701525,0.6819640562204258,0.6817191961458208,0.6814746873621472,0.6812305289883831,0.6809867201466587,0.6807432599622438,0.680500147563531,0.6802573820820236,0.6800149626523184,0.6797728884120942,0.6795311585020956,0.6792897720661196,0.6790487282510015,0.6788080262066007,0.6785676650857871,0.6783276440444266,0.6780879622413684,0.67784861883843,0.6776096130003849,0.6773709438949481,0.6771326106927632,0.6768946125673887,0.6766569486952846,0.6764196182557998,0.6761826204311584,0.6759459544064467,0.6757096193696,0.6754736145113901,0.6752379390254125,0.6750025921080728,0.674767572958575,0.674532880778908,0.6742985147738336,0.6740644741508738,0.6738307581202981,0.6735973658951115,0.6733642966910423,0.673131549726529,0.6728991242227094,0.6726670194034075,0.6724352344951219,0.6722037687270136,0.6719726213308947,0.6717417915412156,0.671511278595054,0.6712810817321029,0.6710512001946588,0.6708216332276107,0.6705923800784278,0.6703634399971485,0.6701348122363693,0.6699064960512326,0.6696784906994163,0.6694507954411224,0.6692234095390651,0.6689963322584609,0.6687695628670167,0.6685431006349191,0.6683169448348238,0.6680910947418441,0.6678655496335412,0.6676403087899115,0.6674153714933785,0.6671907370287801,0.6669664046833591,0.6667423737467523,0.6665186435109803,0.6662952132704371,0.666072082321879,0.6658492499644159,0.6656267154994996,0.6654044782309141,0.6651825374647661,0.6649608925094738,0.6647395426757581,0.6645184872766315,0.6642977256273892,0.6640772570455987,0.6638570808510897,0.6636371963659458,0.6634176029144925,0.6631982998232898,0.6629792864211212,0.6627605620389849,0.6625421260100838,0.6623239776698163,0.6621061163557671,0.6618885414076975,0.6616712521675363,0.6614542479793707,0.6612375281894366,0.66102109214611,0.6608049391998979,0.6605890687034288,0.6603734800114439,0.6601581724807885,0.6599431454704023,0.6597283983413115,0.6595139304566193,0.6592997411814973,0.659085829883177,0.6588721959309407,0.6586588386961133,0.6584457575520534,0.6582329518741449,0.6580204210397883,0.6578081644283928,0.6575961814213672,0.657384471402112,0.6571730337560107,0.6569618678704214,0.65675097313467,0.6565403489400398,0.6563299946797646,0.6561199097490208,0.6559100935449188,0.6557005454664946,0.655491264914703,0.6552822512924086,0.6550735040043781,0.6548650224572731,0.6546568060596409,0.6544488542219085,0.6542411663563732,0.6540337418771958,0.6538265802003927,0.6536196807438286,0.653413042927208,0.6532066661720687,0.6530005499017736,0.6527946935415034,0.6525890965182494,0.6523837582608056,0.6521786781997618,0.6519738557674961,0.6517692903981676,0.6515649815277088,0.6513609285938192,0.6511571310359573,0.6509535882953339,0.6507502998149048,0.6505472650393639,0.6503444834151358,0.6501419543903695,0.6499396774149302,0.6497376519403939,0.6495358774200394,0.6493343533088415,0.649133079063465,0.6489320541422566,0.6487312780052394,0.6485307501141055,0.6483304699322093,0.648130436924561,0.6479306505578197,0.6477311103002874,0.6475318156219018,0.64733276599423,0.6471339608904618,0.646935399785404,0.6467370821554731,0.6465390074786886,0.646341175234668,0.6461435849046193,0.645946235971335,0.6457491279191859,0.6455522602341147,0.64535563240363,0.6451592439167998,0.6449630942642457,0.6447671829381365,0.6445715094321819,0.6443760732416272,0.6441808738632461,0.643985910795336,0.6437911835377108,0.643596691591696,0.6434024344601216,0.6432084116473173,0.6430146226591062,0.642821067002799,0.6426277441871875,0.6424346537225402,0.6422417951205952,0.6420491678945556,0.6418567715590827,0.6416646056302913,0.641472669625743,0.641280963064442,0.6410894854668281,0.6408982363547718,0.640707215251569,0.6405164216819348,0.6403258551719982,0.6401355152492976,0.6399454014427737,0.6397555132827654,0.6395658503010039,0.6393764120306074,0.6391871980060756,0.638998207763285,0.6388094408394825,0.6386208967732814,0.6384325751046555,0.6382444753749333,0.6380565971267947,0.6378689399042635,0.6376815032527039,0.6374942867188147,0.6373072898506243,0.6371205121974862,0.6369339533100729,0.6367476127403715,0.6365614900416791,0.6363755847685968,0.6361898964770257,0.6360044247241616,0.6358191690684901,0.6356341290697815,0.6354493042890861,0.6352646942887299,0.6350802986323091,0.6348961168846854,0.6347121486119813,0.6345283933815759,0.634344850762099,0.6341615203234277,0.6339784016366806,0.6337954942742142,0.6336127978096173,0.6334303118177069,0.6332480358745236,0.6330659695573269,0.6328841124445905,0.6327024641159983,0.6325210241524392,0.6323397921360031,0.6321587676499764,0.6319779502788372,0.6317973396082512,0.6316169352250673,0.6314367367173129,0.6312567436741902,0.6310769556860705,0.6308973723444917,0.6307179932421525,0.6305388179729091,0.63035984613177,0.6301810773148925,0.6300025111195782,0.6298241471442689,0.6296459849885422,0.6294680242531074,0.6292902645398015,0.6291127054515848,0.6289353465925372,0.6287581875678535,0.6285812279838398,0.6284044674479093,0.6282279055685784,0.6280515419554621,0.6278753762192708,0.6276994079718059,0.6275236368259555,0.6273480623956913,0.6271726842960637,0.6269975021431987,0.6268225155542934,0.6266477241476123,0.626473127542484,0.6262987253592961,0.6261245172194928,0.6259505027455697,0.6257766815610716,0.625603053290587,0.6254296175597454,0.6252563739952133,0.6250833222246908,0.624910461876907,0.6247377925816172,0.6245653139695989,0.6243930256726482,0.6242209273235756,0.6240490185562032,0.6238772990053606,0.6237057683068816,0.6235344260976001,0.623363272015347,0.6231923056989469,0.6230215267882133,0.6228509349239467,0.62268052974793,0.6225103109029254,0.6223402780326708,0.6221704307818765,0.6220007687962217,0.6218312917223509,0.6216619992078704,0.6214928909013456,0.6213239664522968,0.6211552255111962,0.6209866677294644,0.6208182927594673,0.6206501002545127,0.6204820898688463,0.6203142612576499,0.6201466140770364,0.619979147984048,0.6198118626366517,0.6196447576937368,0.6194778328151122,0.6193110876615013,0.619144521894541,0.6189781351767769,0.6188119271716611,0.6186458975435485,0.6184800459576938,0.6183143720802483,0.6181488755782574,0.6179835561196562,0.6178184133732677,0.617653447008799,0.6174886566968385,0.6173240421088527,0.6171596029171833,0.616995338795044,0.6168312494165176,0.6166673344565531,0.6165035935909625,0.6163400264964181,0.6161766328504489,0.6160134123314385,0.6158503646186216,0.6156874893920815,0.6155247863327465,0.6153622551223876,0.6151998954436156,0.6150377069798779,0.6148756894154556,0.6147138424354611,0.6145521657258352,0.6143906589733432,0.614229321865574,0.6140681540909355,0.613907155338653,0.6137463252987655,0.6135856636621237,0.6134251701203871,0.6132648443660207,0.6131046860922928,0.6129446949932722,0.6127848707638253,0.6126252130996136,0.6124657216970908,0.6123063962535003,0.6121472364668724,0.6119882420360221,0.6118294126605455,0.611670748040818,0.6115122478779915,0.6113539118739916,0.6111957397315149,0.6110377311540269,0.6108798858457593,0.6107222035117063,0.6105646838576242,0.6104073265900267,0.610250131416184,0.610093098044119,0.6099362261826058,0.6097795155411663,0.6096229658300685,0.6094665767603237,0.6093103480436836,0.6091542793926387,0.6089983705204148,0.6088426211409718,0.608687030969,0.6085315997199185,0.6083763271098726,0.6082212128557309,0.6080662566750841,0.607911458286241,0.6077568174082278,0.6076023337607842,0.607448007064362,0.6072938370401226,0.6071398234099344,0.6069859658963707,0.6068322642227073,0.6066787181129202,0.6065253272916831,0.6063720914843657,0.6062190104170306,0.6060660838164318,0.6059133114100116,0.6057606929258994,0.6056082280929086,0.6054559166405344,0.6053037582989524,0.6051517527990151,0.604999899872251,0.6048481992508612,0.6046966506677183,0.6045452538563634,0.6043940085510044,0.6042429144865136,0.6040919713984254,0.6039411790229346,0.6037905370968942,0.6036400453578126,0.603489703543852,0.6033395113938268,0.6031894686472004,0.6030395750440837,0.6028898303252332,0.6027402342320486,0.6025907865065705,0.6024414868914789,0.6022923351300908,0.6021433309663583,0.6019944741448664,0.6018457644108309,0.601697201510097,0.6015487851891361,0.601400515195045,0.6012523912755435,0.6011044131789719,0.6009565806542896,0.6008088934510729,0.6006613513195131,0.6005139540104149,0.6003667012751931,0.6002195928658725,0.6000726285350848,0.5999258080360668,0.5997791311226587,0.5996325975493021,0.5994862070710383,0.5993399594435057,0.5991938544229388,0.5990478917661659,0.5989020712306071,0.5987563925742726,0.5986108555557605,0.5984654599342558,0.5983202054695278,0.5981750919219281,0.5980301190523893,0.5978852866224234,0.5977405943941188,0.5975960421301397,0.5974516295937241,0.5973073565486811,0.59716322275939,0.5970192279907984,0.5968753720084204,0.5967316545783342,0.5965880754671813,0.5964446344421638,0.5963013312710437,0.5961581657221402,0.5960151375643284,0.5958722465670376,0.5957294925002495,0.5955868751344964,0.5954443942408594,0.5953020495909671,0.5951598409569934,0.5950177681116563,0.5948758308282158,0.5947340288804724,0.5945923620427656,0.5944508300899718,0.5943094327975029,0.5941681699413048,0.5940270412978556,0.5938860466441634,0.5937451857577661,0.5936044584167282,0.5934638643996399,0.593323403485616,0.5931830754542927,0.5930428800858282,0.592902817160899,0.5927628864606995,0.5926230877669404,0.5924834208618467,0.592343885528156,0.5922044815491175,0.5920652087084901,0.591926066790541,0.5917870555800439,0.5916481748622774,0.591509424423024,0.591370804048568,0.5912323135256945,0.5910939526416871,0.5909557211843273,0.5908176189418922,0.5906796457031535,0.5905418012573757,0.590404085394315,0.5902664979042175,0.5901290385778174,0.5899917072063363,0.5898545035814811,0.589717427495443,0.5895804787408954,0.5894436571109931,0.5893069623993706,0.5891703944001406,0.5890339529078925,0.5888976377176911,0.5887614486250753,0.5886253854260564,0.5884894479171165,0.588353635895208,0.588217949157751,0.5880823875026328,0.5879469507282059,0.5878116386332873,0.5876764510171564,0.5875413876795537,0.5874064484206801,0.5872716330411947,0.587136941342214,0.5870023731253102,0.5868679281925101,0.5867336063462936,0.586599407389592,0.5864653311257877,0.5863313773587117,0.5861975458926428,0.5860638365323065,0.5859302490828732,0.5857967833499571,0.5856634391396148,0.5855302162583444,0.5853971145130834,0.5852641337112083,0.5851312736605327,0.584998534169306,0.5848659150462128,0.5847334161003703,0.5846010371413286,0.5844687779790684,0.5843366384239999,0.5842046182869618,0.5840727173792198,0.5839409355124657,0.5838092724988153,0.5836777281508082,0.5835463022814061,0.5834149947039915,0.5832838052323662,0.583152733680751,0.5830217798637836,0.5828909435965174,0.5827602246944211,0.5826296229733765,0.582499138249678,0.5823687703400311,0.5822385190615512,0.5821083842317625,0.5819783656685968,0.5818484631903923,0.5817186766158923,0.581589005764244,0.581459450454998,0.5813300105081063,0.581200685743921,0.5810714759831945,0.5809423810470769,0.580813400757115,0.5806845349352522,0.5805557834038265,0.5804271459855694,0.5802986225036052,0.5801702127814492,0.5800419166430074,0.5799137339125746,0.5797856644148338,0.5796577079748548,0.5795298644180936,0.5794021335703903,0.5792745152579689,0.5791470093074362,0.5790196155457799,0.5788923338003681,0.5787651638989486,0.5786381056696468,0.5785111589409655,0.5783843235417833,0.5782575993013538,0.5781309860493047,0.5780044836156359,0.57787809183072,0.5777518105252991,0.5776256395304858,0.577499578677761,0.5773736277989733,0.5772477867263373,0.5771220552924334,0.5769964333302068,0.5768709206729653,0.5767455171543797,0.5766202226084819,0.5764950368696641,0.5763699597726776,0.5762449911526325,0.5761201308449959,0.5759953786855911,0.5758707345105968,0.5757461981565458,0.5756217694603246,0.5754974482591715,0.5753732343906763,0.5752491276927792,0.5751251280037697,0.5750012351622853,0.5748774490073116,0.5747537693781801,0.5746301961145677,0.5745067290564959,0.5743833680443299,0.5742601129187771,0.5741369635208868,0.5740139196920488,0.5738909812739927,0.5737681481087867,0.573645420038837,0.5735227969068865,0.573400278556014,0.5732778648296337,0.5731555555714934,0.5730333506256744,0.5729112498365899,0.5727892530489846,0.5726673601079338,0.572545570858842,0.5724238851474421,0.5723023028197952,0.5721808237222885,0.5720594477016357,0.5719381746048752,0.5718170042793691,0.5716959365728034,0.5715749713331857,0.5714541084088453,0.5713333476484321,0.5712126889009155,0.5710921320155836,0.5709716768420425,0.5708513232302154,0.5707310710303414,0.5706109200929749,0.570490870268985,0.570370921409554,0.5702510733661773,0.5701313259906617,0.5700116791351252,0.5698921326519961,0.5697726863940119,0.5696533402142183,0.569534093965969,0.5694149475029243,0.5692959006790504,0.569176953348619,0.5690581053662053,0.5689393565866887,0.5688207068652511,0.5687021560573758,0.5685837040188478,0.5684653506057519,0.568347095674472,0.5682289390816909,0.5681108806843893,0.5679929203398446,0.5678750579056305,0.5677572932396161,0.5676396261999647,0.5675220566451339,0.5674045844338739,0.5672872094252271,0.5671699314785278,0.5670527504534002,0.5669356662097589,0.5668186786078072,0.5667017875080369,0.5665849927712274,0.5664682942584447,0.5663516918310407,0.5662351853506528,0.5661187746792025,0.5660024596788953,0.5658862402122194,0.5657701161419455,0.5656540873311254,0.5655381536430918,0.5654223149414571,0.5653065710901133,0.5651909219532303,0.5650753673952562,0.5649599072809158,0.5648445414752103,0.5647292698434162,0.5646140922510848,0.5644990085640418,0.5643840186483856,0.5642691223704878,0.5641543195969914,0.5640396101948107,0.5639249940311308,0.5638104709734061,0.56369604088936,0.5635817036469843,0.5634674591145387,0.5633533071605493,0.5632392476538087,0.5631252804633748,0.5630114054585704,0.5628976225089826,0.5627839314844614,0.56267033225512,0.5625568246913332,0.5624434086637375,0.5623300840432299,0.5622168507009674,0.562103708508366,0.561990657337101,0.5618776970591048,0.5617648275465676,0.5616520486719362,0.561539360307913,0.5614267623274558,0.561314254603777,0.5612018370103431,0.5610895094208735,0.5609772717093405,0.5608651237499682,0.5607530654172322,0.5606410965858585,0.5605292171308229,0.5604174269273513,0.5603057258509174,0.5601941137772437,0.5600825905822996,0.5599711561423015,0.5598598103337119,0.5597485530332389,0.559637384117835,0.5595263034646978,0.5594153109512675,0.5593044064552282,0.5591935898545055,0.5590828610272675,0.5589722198519227,0.5588616662071206,0.5587511999717505,0.5586408210249406,0.5585305292460583,0.5584203245147082,0.5583102067107334,0.5582001757142128,0.558090231405462,0.5579803736650322,0.5578706023737093,0.5577609174125141,0.5576513186627007,0.5575418060057565,0.5574323793234017,0.5573230384975884,0.5572137834105,0.5571046139445508,0.5569955299823856,0.5568865314068784,0.5567776181011325,0.5566687899484797,0.5565600468324797,0.5564513886369196,0.5563428152458131,0.5562343265434,0.5561259224141459,0.5560176027427416,0.5559093674141019,0.5558012163133658,0.5556931493258954,0.5555851663372762,0.5554772672333149,0.5553694519000407,0.5552617202237035,0.5551540720907736,0.5550465073879418,0.5549390260021176,0.55483162782043,0.5547243127302259,0.5546170806190703,0.5545099313747451,0.5544028648852489,0.5542958810387969,0.5541889797238192,0.5540821608289613,0.5539754242430833,0.5538687698552592,0.5537621975547763,0.553655707231135,0.5535492987740479,0.5534429720734394,0.5533367270194456,0.553230563502413,0.5531244814128983,0.5530184806416684,0.5529125610796989,0.5528067226181744,0.5527009651484877,0.552595288562239,0.552489692751236,0.5523841776074926,0.5522787430232291,0.5521733888908714,0.5520681151030504,0.5519629215526016,0.5518578081325647,0.5517527747361827,0.551647821256902,0.5515429475883713,0.5514381536244416,0.5513334392591653,0.551228804386796,0.5511242489017876,0.5510197726987945,0.5509153756726705,0.5508110577184681,0.5507068187314392,0.5506026586070333,0.5504985772408976,0.5503945745288763,0.5502906503670109,0.5501868046515381,0.5500830372788912,0.5499793481456983,0.5498757371487821,0.54977220418516,0.5496687491520429,0.5495653719468349,0.5494620724671333,0.5493588506107275,0.5492557062755989,0.5491526393599204,0.5490496497620557,0.5489467373805592,0.5488439021141751,0.5487411438618376,0.5486384625226693,0.5485358579959824,0.5484333301812763,0.548330878978239,0.5482285042867452,0.5481262060068568,0.5480239840388219,0.5479218382830745,0.5478197686402342,0.5477177750111054,0.5476158572966774,0.5475140153981235,0.5474122492168005,0.5473105586542487,0.5472089436121912,0.5471074039925332,0.5470059396973621,0.5469045506289466,0.5468032366897367,0.5467019977823626,0.5466008338096351,0.5464997446745444,0.5463987302802604,0.5462977905301314,0.5461969253276846,0.5460961345766248,0.5459954181808347,0.5458947760443743,0.5457942080714799,0.5456937141665645,0.5455932942342168,0.5454929481792009,0.5453926759064563,0.545292477321097,0.545192352328411,0.5450923008338605,0.5449923227430806,0.5448924179618799,0.5447925863962393,0.5446928279523118,0.5445931425364223,0.5444935300550672,0.5443939904149133,0.5442945235227985,0.5441951292857304,0.5440958076108867,0.5439965584056141,0.5438973815774284,0.5437982770340138,0.5436992446832227,0.5436002844330754,0.543501396191759,0.543402579867628,0.5433038353692033,0.5432051626051718,0.5431065614843865,0.5430080319158656,0.5429095738087917,0.542811187072513,0.542712871616541,0.5426146273505518,0.5425164541843841,0.5424183520280401,0.5423203207916849,0.5422223603856452,0.5421244707204101,0.54202665170663,0.5419289032551167,0.5418312252768424,0.5417336176829396,0.5416360803847013,0.5415386132935799,0.5414412163211868,0.5413438893792927,0.5412466323798264,0.5411494452348753,0.5410523278566841,0.540955280157655,0.5408583020503479,0.5407613934474783,0.5406645542619187,0.5405677844066975,0.5404710837949985,0.5403744523401608,0.5402778899556783,0.5401813965551995,0.5400849720525268,0.5399886163616169,0.5398923293965793,0.5397961110716771,0.5396999613013257,0.5396038800000932,0.5395078670826994,0.539411922464016,0.539316046059066,0.5392202377830232,0.5391244975512122,0.5390288252791076,0.5389332208823341,0.5388376842766661,0.538742215378027,0.5386468141024892,0.5385514803662735,0.5384562140857492,0.5383610151774331,0.5382658835579898,0.5381708191442308,0.5380758218531146,0.5379808916017464,0.5378860283073774,0.5377912318874045,0.5376965022593704,0.5376018393409624,0.5375072430500134,0.5374127133045002,0.5373182500225443,0.5372238531224105,0.5371295225225075,0.5370352581413868,0.5369410598977434,0.5368469277104143,0.5367528614983789,0.5366588611807583,0.5365649266768155,0.5364710579059546,0.5363772547877206,0.5362835172417991,0.5361898451880158,0.5360962385463369,0.5360026972368676,0.5359092211798528,0.5358158102956766,0.5357224645048612,0.5356291837280677,0.5355359678860951,0.5354428168998803,0.5353497306904974,0.5352567091791577,0.5351637522872095,0.5350708599361376,0.5349780320475627,0.5348852685432419,0.5347925693450675,0.5346999343750672,0.5346073635554037,0.5345148568083747,0.5344224140564118,0.5343300352220808,0.5342377202280815,0.5341454689972469,0.5340532814525435,0.5339611575170703,0.5338690971140594,0.5337771001668746,0.533685166599012,0.5335932963340996,0.5335014892958962,0.5334097454082924,0.5333180645953092,0.5332264467810982,0.5331348918899412,0.53304339984625,0.5329519705745661,0.5328606039995603,0.5327693000460324,0.5326780586389113,0.5325868797032538,0.5324957631642454,0.5324047089471996,0.5323137169775571,0.5322227871808864,0.5321319194828827,0.5320411138093686,0.5319503700862923,0.531859688239729,0.5317690681958794,0.5316785098810705,0.5315880132217539,0.5314975781445067,0.5314072045760311,0.5313168924431534,0.5312266416728245,0.5311364521921191,0.5310463239282359,0.5309562568084969,0.5308662507603473,0.5307763057113555,0.530686421589212,0.5305965983217302,0.5305068358368454,0.5304171340626148,0.5303274929272174,0.5302379123589529,0.5301483922862428,0.5300589326376288,0.5299695333417734,0.5298801943274595,0.5297909155235896,0.5297016968591862,0.5296125382633912,0.5295234396654657,0.5294344009947897,0.5293454221808621,0.5292565031533,0.5291676438418387,0.5290788441763314,0.5289901040867492,0.5289014235031803,0.5288128023558301,0.5287242405750209,0.5286357380911918,0.528547294834898,0.5284589107368112,0.5283705857277184,0.5282823197385229,0.5281941127002427,0.5281059645440117,0.5280178752010778,0.5279298446028042,0.5278418726806682,0.5277539593662611,0.5276661045912884,0.5275783082875689,0.5274905703870351,0.5274028908217324,0.5273152695238192,0.5272277064255667,0.527140201459358,0.5270527545576892,0.5269653656531674,0.526878034678512,0.5267907615665538,0.5267035462502346,0.5266163886626072,0.5265292887368352,0.5264422464061929,0.5263552616040642,0.5262683342639436,0.5261814643194355,0.5260946517042531,0.5260078963522197,0.5259211981972672,0.5258345571734365,0.5257479732148773,0.5256614462558471,0.5255749762307121,0.5254885630739464,0.5254022067201314,0.525315907103956,0.5252296641602169,0.5251434778238171,0.5250573480297667,0.5249712747131824,0.5248852578092869,0.5247992972534092,0.5247133929809844,0.5246275449275527,0.52454175302876,0.5244560172203576,0.5243703374382014,0.5242847136182521,0.5241991456965752,0.5241136336093399,0.5240281772928204,0.5239427766833938,0.5238574317175414,0.5237721423318478,0.5236869084630007,0.5236017300477909,0.5235166070231118,0.5234315393259596,0.5233465268934326,0.5232615696627312,0.523176667571158,0.5230918205561169,0.5230070285551134,0.5229222915057543,0.5228376093457476,0.5227529820129018,0.522668409445126,0.5225838915804303,0.5224994283569242,0.5224150197128176,0.5223306655864202,0.5222463659161412,0.522162120640489,0.5220779296980713,0.5219937930275949,0.521909710567865,0.5218256822577854,0.5217417080363583,0.5216577878426842,0.5215739216159612,0.5214901092954852,0.5214063508206496,0.5213226461309451,0.5212389951659596,0.5211553978653776,0.5210718541689806,0.5209883640166465,0.5209049273483495,0.5208215441041596,0.5207382142242432,0.5206549376488618,0.520571714318373,0.5204885441732293,0.5204054271539783,0.5203223632012627,0.5202393522558195,0.5201563942584808,0.5200734891501725,0.5199906368719148,0.5199078373648219,0.5198250905701014,0.519742396429055,0.519659754883077,0.5195771658736554,0.5194946293423711,0.5194121452308975,0.5193297134810007,0.519247334034539,0.5191650068334633,0.5190827318198163,0.5190005089357322,0.5189183381234372,0.5188362193252488,0.5187541524835757,0.5186721375409177,0.5185901744398654,0.5185082631231003,0.5184264035333941,0.5183445956136088,0.5182628393066968,0.5181811345557003,0.5180994813037512,0.518017879494071,0.5179363290699704,0.5178548299748499,0.5177733821521983,0.5176919855455936,0.5176106400987026,0.5175293457552801,0.5174481024591696,0.5173669101543027,0.5172857687846987,0.5172046782944647,0.5171236386277956,0.5170426497289735,0.516961711542368,0.5168808240124352,0.5167999870837184,0.5167192007008479,0.5166384648085399,0.5165577793515974,0.5164771442749092,0.5163965595234505,0.516316025042282,0.5162355407765502,0.5161551066714869,0.5160747226724094,0.5159943887247199,0.5159141047739058,0.5158338707655391,0.5157536866452764,0.5156735523588588,0.5155934678521118,0.5155134330709447,0.5154334479613508,0.5153535124694074,0.5152736265412753,0.5151937901231983,0.515114003161504,0.5150342656026028,0.5149545773929881,0.5148749384792362,0.5147953488080055,0.5147158083260372,0.514636316980155,0.514556874717264,0.5144774814843518,0.5143981372284875,0.5143188418968218,0.5142395954365868,0.5141603977950961,0.5140812489197442,0.5140021487580065,0.5139230972574395,0.5138440943656798,0.5137651400304448,0.5136862341995324,0.51360737682082,0.5135285678422657,0.5134498072119069,0.5133710948778608,0.5132924307883243,0.5132138148915734,0.5131352471359631,0.5130567274699281,0.5129782558419814,0.5128998322007149,0.5128214564947988,0.5127431286729822,0.5126648486840921,0.5125866164770335,0.5125084320007898,0.5124302952044216,0.5123522060370675,0.5122741644479435,0.5121961703863429,0.5121182238016361,0.5120403246432705,0.5119624728607707,0.5118846684037374,0.5118069112218484,0.5117292012648578,0.5116515384825956,0.5115739228249684,0.5114963542419584,0.5114188326836238,0.5113413581000983,0.5112639304415912,0.5111865496583873,0.5111092157008463,0.5110319285194033,0.5109546880645679,0.5108774942869249,0.5108003471371335,0.5107232465659274,0.5106461925241146,0.5105691849625772,0.5104922238322718,0.5104153090842283,0.5103384406695507,0.5102616185394163,0.5101848426450765,0.5101081129378552,0.5100314293691499,0.5099547918904312,0.5098782004532425,0.5098016550091998,0.5097251555099919,0.5096487019073799,0.5095722941531974,0.5094959321993501,0.5094196159978156,0.5093433455006436,0.5092671206599556,0.5091909414279443,0.5091148077568746,0.5090387195990819,0.5089626769069735,0.5088866796330274,0.5088107277297926,0.5087348211498891,0.5086589598460071,0.5085831437709076,0.5085073728774222,0.5084316471184522,0.5083559664469696,0.5082803308160158,0.5082047401787024,0.5081291944882107,0.5080536936977914,0.5079782377607649,0.5079028266305203,0.5078274602605166,0.5077521386042814,0.5076768616154114,0.5076016292475718,0.5075264414544967,0.5074512981899885,0.5073761994079182,0.5073011450622249,0.5072261351069156,0.5071511694960658,0.5070762481838182,0.5070013711243839,0.5069265382720409,0.5068517495811352,0.5067770050060798,0.5067023045013551,0.5066276480215083,0.5065530355211539,0.506478466954973,0.5064039422777133,0.5063294614441892,0.5062550244092816,0.5061806311279373,0.50610628155517,0.5060319756460586,0.5059577133557487,0.5058834946394511,0.5058093194524426,0.5057351877500654,0.5056610994877273,0.5055870546209011,0.5055130531051252,0.5054390948960025,0.5053651799492013,0.5052913082204545,0.5052174796655596,0.5051436942403791,0.5050699519008391,0.5049962526029309,0.5049225963027094,0.5048489829562938,0.5047754125198674,0.5047018849496767,0.5046284002020328,0.5045549582333096,0.5044815589999451,0.50440820245844,0.5043348885653587,0.5042616172773287,0.5041883885510401,0.5041152023432462,0.5040420586107631,0.5039689573104693,0.5038958983993057,0.5038228818342761,0.5037499075724462,0.5036769755709438,0.503604085786959,0.5035312381777437,0.5034584327006115,0.503385669312938,0.50331294797216,0.503240268635776,0.5031676312613458,0.5030950358064904,0.503022482228892,0.5029499704862936,0.5028775005364995,0.5028050723373741,0.5027326858468433,0.5026603410228928,0.5025880378235691,0.5025157762069791,0.5024435561312895,0.5023713775547277,0.5022992404355805,0.502227144732195,0.5021550904029777,0.502083077406395,0.5020111057009727,0.5019391752452963,0.5018672859980102,0.5017954379178183,0.5017236309634836,0.5016518650938276,0.5015801402677316,0.5015084564441347,0.5014368135820353,0.5013652116404902,0.5012936505786144,0.5012221303555815,0.501150650930623,0.5010792122630292,0.5010078143121477,0.5009364570373842,0.5008651403982023,0.5007938643541232,0.5007226288647256,0.5006514338896462,0.5005802793885782,0.5005091653212728,0.5004380916475377,0.5003670583272385,0.5002960653202969,0.5002251125866919,0.5001542000864592,0.5000833277796909,0.5000124956265359,0.49994170358719936,0.49987095162194295,0.4998002396910842,0.4997295677549971,0.4996589357741114,0.499588343708913,0.49951779151994335,0.4994472791677997,0.499376806613135,0.49930637381665766,0.49923598073913117,0.4991656273413749,0.4990953135842629,0.49902503942872445,0.49895480483574406,0.4988846097663608,0.49881445418166864,0.4987443380428164,0.49867426131100717,0.4986042239474989,0.49853422591360363,0.4984642671706877,0.4983943476801719,0.49832446740353087,0.4982546263022934,0.49818482433804206,0.49811506147241325,0.49804533766709713,0.4979756528838372,0.49790600708443106,0.497836400230729,0.49776683228463514,0.49769730320810646,0.4976278129631534,0.49755836151183924,0.49748894881628,0.49741957483864485,0.4973502395411555,0.4972809428860864,0.4972116848357645,0.4971424653525692,0.4970732843989322,0.4970041419373376,0.4969350379303214,0.4968659723404721,0.4967969451304295,0.49672795626288613,0.4966590057005856,0.4965900934063235,0.496521219342947,0.4964523834733549,0.49638358576049724,0.4963148261673754,0.49624610465704194,0.4961774211926008,0.49610877573720674,0.49604016825406544,0.49597159870643376,0.49590306705761894,0.4958345732709791,0.49576611730992287,0.4956976991379096,0.49562931871844873,0.49556097601510024,0.4954926709914742,0.4954244036112309,0.49535617383808067,0.49528798163578375,0.4952198269681503,0.4951517097990403,0.4950836300923631,0.4950155878120782,0.49494758292219426,0.49487961538676933,0.494811685169911,0.49474379223577586,0.49467593654856984,0.49460811807254806,0.49454033677201426,0.4944725926113214,0.49440488555487117,0.4943372155671138,0.49426958261254844,0.4942019866557226,0.49413442766123244,0.4940669055937222,0.49399942041788464,0.4939319720984606,0.4938645606002392,0.4937971858880576,0.4937298479268007,0.49366254668140125,0.49359528211684023,0.4935280541981457,0.4934608628903939,0.4933937081587082,0.49332658996825945,0.4932595082842661,0.4931924630719937,0.49312545429675503,0.49305848192391,0.4929915459188655,0.49292464624707527,0.49285778287404014,0.4927909557653076,0.4927241648864718,0.4926574102031736,0.49259069168110037,0.49252400928598566,0.4924573629836099,0.4923907527397994,0.49232417852042676,0.4922576402914108,0.49219113801871633,0.49212467166835405,0.4920582412063808,0.4919918465988988,0.4919254878120563,0.49185916481204717,0.4917928775651107,0.49172662603753187,0.4916604101956407,0.49159423000581304,0.49152808543446946,0.4914619764480761,0.491395903013144,0.4913298650962291,0.4912638626639326,0.4911978956829001,0.4911319641198224,0.4910660679414348,0.49100020711451725,0.490934381605894,0.49086859138243405,0.4908028364110509,0.49073711665870173,0.4906714320923888,0.4906057826791578,0.49054016838609893,0.49047458918034625,0.4904090450290776,0.49034353589951485,0.49027806175892347,0.49021262257461296,0.490147218313936,0.4900818489442891,0.49001651443311217,0.4899512147478885,0.48988594985614453,0.4898207197254504,0.4897555243234187,0.4896903636177058,0.4896252375760107,0.48956014616607557,0.48949508935568514,0.48943006711266734,0.48936507940489243,0.4893001262002734,0.489235207466766,0.48917032317236847,0.48910547328512133,0.4890406577731074,0.4889758766044518,0.48891112974732226,0.48884641716992794,0.48878173884052073,0.48871709472739394,0.4886524847988834,0.4885879090233663,0.48852336736926166,0.4884588598050304,0.4883943862991751,0.4883299468202394,0.4882655413368093,0.4882011698175113,0.48813683223101384,0.48807252854602645,0.4880082587312999,0.48794402275562593,0.4878798205878376,0.4878156521968088,0.4877515175514543,0.4876874166207299,0.48762334937363205,0.4875593157791979,0.48749531580650535,0.48743134942467287,0.4873674166028592,0.4873035173102639,0.4872396515161265,0.4871758191897272,0.4871120203003862,0.4870482548174638,0.4869845227103607,0.48692082394851716,0.4868571585014138,0.48679352633857115,0.4867299274295492,0.48666636174394806,0.48660282925140724,0.486539329921606,0.48647586372426327,0.48641243062913725,0.4863490306060256,0.48628566362476544,0.48622232965523315,0.48615902866734423,0.4860957606310535,0.4860325255163546,0.48596932329328046,0.4859061539319028,0.48584301740233227,0.4857799136747185,0.4857168427192496,0.4856538045061524,0.48559079900569263,0.4855278261881744,0.4854648860239401,0.48540197848337097,0.4853391035368865,0.48527626115494416,0.48521345130804006,0.4851506739667082,0.485087929101521,0.48502521668308846,0.484962536682059,0.48489988906911874,0.4848372738149918,0.4847746908904399,0.4847121402662626,0.48464962191329697,0.4845871358024181,0.4845246819045379,0.48446226019060656,0.4843998706316112,0.4843375131985764,0.4842751878625638,0.48421289459467276,0.4841506333660394,0.48408840414783705,0.4840262069112762,0.48396404162760387,0.4839019082681048,0.48383980680409977,0.4837777372069468,0.4837156994480406,0.48365369349881226,0.48359171933072986,0.48352977691529797,0.4834678662240573,0.48340598722858535,0.4833441399004958,0.48328232421143874,0.48322054013310034,0.48315878763720327,0.4830970666955059,0.483035377279803,0.4829737193619253,0.4829120929137392,0.48285049790714735,0.482788934314088,0.4827274021065352,0.48266590125649866,0.4826044317360239,0.48254299351719204,0.4824815865721194,0.48242021087295817,0.48235886639189557,0.4822975531011546,0.4822362709729931,0.4821750199797045,0.48211380009361743,0.48205261128709526,0.4819914535325367,0.4819303268023756,0.48186923106908025,0.48180816630515455,0.4817471324831365,0.48168612957559936,0.48162515755515095,0.48156421639443375,0.4815033060661249,0.48144242654293595,0.48138157779761315,0.48132075980293687,0.4812599725317222,0.48119921595681847,0.481138490051109,0.4810777947875116,0.4810171301389781,0.48095649607849456,0.480895892579081,0.48083531961379133,0.4807747771557135,0.4807142651779694,0.48065378365371453,0.4805933325561383,0.48053291185846375,0.4804725215339476,0.48041216155588035,0.48035183189758573,0.48029153253242113,0.4802312634337773,0.48017102457507854,0.48011081592978216,0.48005063747137905,0.47999048917339315,0.4799303710093816,0.47987028295293455,0.4798102249776755,0.4797501970572606,0.4796901991653791,0.4796302312757532,0.47957029336213786,0.4795103853983207,0.47945050735812245,0.479390659215396,0.47933084094402734,0.4792710525179349,0.4792112939110694,0.47915156509741424,0.4790918660509853,0.47903219674583053,0.4789725571560305,0.4789129472556979,0.4788533670189775,0.4787938164200466,0.4787342954331142,0.4786748040324216,0.4786153421922419,0.4785559098868803,0.4784965070906739,0.4784371337779916,0.47837778992323404,0.4783184755008336,0.4782591904852545,0.4781999348509925,0.4781407085725749,0.47808151162456053,0.4780223439815398,0.4779632056181345,0.47790409650899784,0.4778450166288144,0.4777859659522999,0.47772694445420133,0.47766795210929697,0.4776089888923962,0.47755005477833956,0.4774911497419983,0.477432273758275,0.4773734268021031,0.47731460884844684,0.47725581987230126,0.47719705984869243,0.4771383287526767,0.47707962655934166,0.47702095324380517,0.47696230878121576,0.4769036931467527,0.47684510631562527,0.4767865482630737,0.4767280189643684,0.47666951839481003,0.47661104652972985,0.476552603344489,0.47649418881447914,0.47643580291512194,0.4763774456218689,0.4763191169102022,0.4762608167556336,0.4762025451337048,0.4761443020199876,0.47608608739008346,0.47602790121962396,0.4759697434842703,0.47591161415971317,0.4758535132216733,0.47579544064590096,0.47573739640817586,0.47567938048430725,0.47562139285013405,0.4755634334815246,0.4755055023543763,0.4754475994446164,0.47538972472820124,0.4753318781811161,0.47527405977937603,0.47521626949902496,0.47515850731613574,0.47510077320681077,0.475043067147181,0.47498538911340676,0.4749277390816769,0.47487011702820964,0.47481252292925163,0.47475495676107843,0.4746974184999946,0.474639908122333,0.4745824256044555,0.4745249709227525,0.47446754405364266,0.47441014497357364,0.4743527736590214,0.4742954300864903,0.47423811423251283,0.4741808260736504,0.4741235655864924,0.47406633274765636,0.4740091275337883,0.4739519499215622,0.47389479988768035,0.47383767740887284,0.4737805824618982,0.47372351502354254,0.4736664750706202,0.47360946257997344,0.47355247752847207,0.4734955198930141,0.4734385896505251,0.4733816867779584,0.47332481125229514,0.4732679630505439,0.4732111421497411,0.47315434852695043,0.4730975821592634,0.47304084302379884,0.472984131097703,0.47292744635814954,0.47287078878233946,0.4728141583475011,0.47275755503089023,0.4727009788097894,0.4726444296615085,0.472587907563385,0.47253141249278274,0.47247494442709326,0.47241850334373464,0.4723620892201522,0.47230570203381805,0.47224934176223127,0.47219300838291767,0.4721367018734299,0.4720804222113475,0.47202416937427655,0.47196794333984987,0.47191174408572695,0.4718555715895938,0.471799425829163,0.4717433067821738,0.4716872144263916,0.4716311487396085,0.4715751096996428,0.47151909728433944,0.47146311147156933,0.4714071522392298,0.4713512195652444,0.4712953134275628,0.47123943380416083,0.47118358067304067,0.47112775401223017,0.47107195379978345,0.47101618001378065,0.47096043263232745,0.4709047116335561,0.47084901699562404,0.47079334869671513,0.47073770671503856,0.4706820910288294,0.4706265016163486,0.47057093845588255,0.47051540152574334,0.4704598908042688,0.47040440626982194,0.47034894790079157,0.4702935156755921,0.47023810957266293,0.47018272957046925,0.4701273756475014,0.4700720477822751,0.4700167459533312,0.46996147013923617,0.4699062203185813,0.4698509964699831,0.46979579857208337,0.46974062660354876,0.4696854805430712,0.46963036036936745,0.4695752660611793,0.46952019759727365,0.4694651549564419,0.4694101381175006,0.46935514705929116,0.4693001817606795,0.4692452422005564,0.4691903283578375,0.46913544021146303,0.4690805777403975,0.4690257409236307,0.4689709297401762,0.46891614416907273,0.46886138418938317,0.4688066497801949,0.4687519409206195,0.46869725758979347,0.4686425997668773,0.46858796743105546,0.46853336056153716,0.46847877913755576,0.4684242231383685,0.46836969254325717,0.4683151873315274,0.4682607074825089,0.46820625297555557,0.4681518237900451,0.4680974199053795,0.46804304130098423,0.4679886879563091,0.46793435985082726,0.4678800569640364,0.4678257792754573,0.4677715267646349,0.46771729941113765,0.46766309719455784,0.4676089200945112,0.46755476809063723,0.46750064116259904,0.467446539290083,0.46739246245279936,0.46733841063048154,0.46728438380288645,0.46723038194979455,0.4671764050510095,0.4671224530863582,0.4670685260356911,0.4670146238788819,0.46696074659582704,0.46690689416644676,0.46685306657068404,0.46679926378850534,0.46674548579989966,0.4666917325848795,0.4666380041234803,0.46658430039576043,0.46653062138180107,0.4664769670617064,0.46642333741560354,0.46636973242364255,0.46631615206599586,0.4662625963228592,0.4662090651744507,0.46615555860101127,0.46610207658280456,0.46604861910011675,0.46599518613325674,0.4659417776625559,0.46588839366836815,0.46583503413106997,0.46578169903106037,0.46572838834876046,0.4656751020646141,0.4656218401590875,0.46556860261266886,0.4655153894058693,0.46546220051922144,0.4654090359332808,0.46535589562862467,0.46530277958585287,0.4652496877855869,0.4651966202084708,0.4651435768351704,0.4650905576463738,0.46503756262279095,0.4649845917451537,0.4649316449942159,0.46487872235075356,0.4648258237955642,0.4647729493094673,0.4647200988733041,0.46466727246793804,0.4646144700742537,0.46456169167315786,0.46450893724557846,0.46445620677246563,0.4644035002347907,0.46435081761354696,0.4642981588897489,0.4642455240444328,0.46419291305865634,0.4641403259134986,0.4640877625900601,0.4640352230694629,0.4639827073328501,0.4639302153613866,0.46387774713625823,0.46382530263867217,0.463772881849857,0.4637204847510623,0.4636681113235589,0.46361576154863887,0.46356343540761513,0.46351113288182216,0.46345885395261494,0.46340659860136996,0.4633543668094843,0.46330215855837625,0.4632499738294849,0.4631978126042703,0.46314567486421343,0.4630935605908161,0.4630414697656006,0.4629894023701105,0.46293735838591,0.4628853377945835,0.46283334057773684,0.462781366716996,0.4627294161940078,0.46267748899043953,0.4626255850879793,0.4625737044683354,0.46252184711323696,0.46247001300443313,0.46241820212369417,0.46236641445281007,0.46231464997359184,0.46226290866787034,0.46221119051749693,0.4621594955043434,0.46210782361030156,0.4620561748172838,0.4620045491072223,0.46195294646206986,0.4619013668637989,0.4618498102944026,0.4617982767358938,0.4617467661703054,0.46169527857969045,0.46164381394612214,0.46159237225169336,0.46154095347851715,0.4614895576087264,0.4614381846244738,0.461386834507932,0.4613355072412936,0.46128420280677074,0.46123292118659553,0.4611816623630198,0.4611304263183149,0.46107921303477234,0.46102802249470265,0.4609768546804365,0.46092570957432394,0.4608745871587347,0.4608234874160579,0.4607724103287024,0.4607213558790964,0.46067032404968755,0.460619314822943,0.46056832818134935,0.46051736410741245,0.4604664225836576,0.46041550359262934,0.4603646071168917,0.4603137331390278,0.46026288164163986,0.46021205260734965,0.46016124601879793,0.4601104618586447,0.4600597001095691,0.46000896075426917,0.45995824377546224,0.4599075491558846,0.4598568768782917,0.4598062269254577,0.45975559928017595,0.45970499392525876,0.4596544108435372,0.4596038500178614,0.4595533114311002,0.4595027950661413,0.4594523009058911,0.45940182893327514,0.45935137913123736,0.45930095148274047,0.45925054597076614,0.4592001625783143,0.459149801288404,0.4590994620840723,0.4590491449483755,0.4589988498643881,0.45894857681520307,0.4588983257839321,0.45884809675370536,0.45879788970767127,0.458747704628997,0.4586975415008679,0.45864740030648754,0.4585972810290782,0.4585471836518804,0.4584971081581528,0.4584470545311726,0.4583970227542349,0.4583470128106533,0.45829702468375955,0.4582470583569034,0.45819711381345296,0.4581471910367945,0.458097290010332,0.4580474107174881,0.4579975531417029,0.45794771726643485,0.45789790307516043,0.45784811055137387,0.4577983396785875,0.4577485904403316,0.4576988628201541,0.4576491568016211,0.4575994723683163,0.45754980950384133,0.45750016819181577,0.45745054841587657,0.45740095015967874,0.45735137340689497,0.4573018181412156,0.45725228434634857,0.4572027720060194,0.45715328110397146,0.45710381162396563,0.45705436354978024,0.4570049368652112,0.45695553155407215,0.45690614760019393,0.4568567849874249,0.4568074436996311,0.4567581237206958,0.45670882503451954,0.45665954762502053,0.45661029147613413,0.456561056571813,0.45651184289602725,0.4564626504327642,0.45641347916602826,0.45636432907984137,0.4563152001582424,0.4562660923852875,0.4562170057450501,0.4561679402216204,0.45611889579910614,0.4560698724616319,0.45602087019333937,0.45597188897838714,0.455922928800951,0.45587398964522374,0.4558250714954149,0.4557761743357512,0.455727298150476,0.45567844292384985,0.45562960864015,0.4555807952836706,0.4555320028387225,0.45548323128963364,0.45543448062074826,0.4553857508164279,0.45533704186105034,0.45528835373901044,0.45523968643471935,0.45519103993260535,0.4551424142171131,0.4550938092727038,0.4550452250838553,0.45499666163506214,0.4549481189108352,0.454899596895702,0.45485109557420655,0.4548026149309094,0.45475415495038735,0.4547057156172339,0.4546572969160586,0.45460889883148775,0.4545605213481638,0.45451216445074555,0.4544638281239083,0.4544155123523433,0.4543672171207584,0.45431894241387755,0.45427068821644084,0.4542224545132047,0.4541742412889418,0.45412604852844074,0.45407787621650647,0.45402972433795996,0.4539815928776381,0.4539334818203944,0.4538853911510977,0.45383732085463335,0.4537892709159025,0.45374124131982246,0.45369323205132633,0.45364524309536314,0.45359727443689796,0.4535493260609117,0.45350139795240096,0.4534534900963785,0.45340560247787276,0.453357735081928,0.45330988789360427,0.4532620608979774,0.4532142540801387,0.4531664674251956,0.45311870091827117,0.45307095454450375,0.45302322828904784,0.4529755221370733,0.45292783607376574,0.45288017008432624,0.45283252415397135,0.45278489826793356,0.4527372924114603,0.4526897065698153,0.4526421407282769,0.4525945948721395,0.4525470689867127,0.4524995630573218,0.452452077069307,0.45240461100802426,0.4523571648588449,0.45230973860715534,0.45226233223835755,0.45221494573786863,0.4521675790911211,0.4521202322835626,0.4520729053006561,0.4520255981278796,0.4519783107507267,0.4519310431547057,0.4518837953253403,0.45183656724816934,0.45178935890874666,0.45174217029264135,0.45169500138543733,0.4516478521727337,0.45160072264014467,0.45155361277329925,0.45150652255784185,0.45145945197943116,0.4514124010237416,0.45136536967646185,0.45131835792329583,0.4512713657499624,0.4512243931421951,0.45117744008574234,0.45113050656636755,0.45108359256984876,0.4510366980819787,0.4509898230885652,0.4509429675754305,0.45089613152841196,0.45084931493336117,0.45080251777614455,0.45075574004264357,0.4507089817187538,0.4506622427903858,0.45061552324346454,0.45056882306392976,0.45052214223773557,0.4504754807508507,0.4504288385892586,0.4503822157389567,0.45033561218595763,0.4502890279162881,0.450242462915989,0.4501959171711163,0.45014939066773985,0.45010288339194415,0.45005639532982783,0.4500099264675043,0.44996347679110094,0.4499170462867595,0.449870634940636,0.44982424273890104,0.44977786966773914,0.44973151571334913,0.44968518086194414,0.44963886509975143,0.44959256841301243,0.44954629078798286,0.4495000322109324,0.44945379266814506,0.4494075721459188,0.4493613706305656,0.4493151881084117,0.44926902456579737,0.4492228799890768,0.44917675436461807,0.44913064767880373,0.4490845599180298,0.4490384910687064,0.4489924411172577,0.4489464100501218,0.4489003978537505,0.44885440451460973,0.44880843001917897,0.4487624743539519,0.44871653750543583,0.44867061946015185,0.4486247202046349,0.44857883972543366,0.4485329780091107,0.448487135042242,0.44844131081141775,0.4483955053032412,0.4483497185043299,0.44830395040131477,0.44825820098084035,0.44821247022956484,0.44816675813416,0.4481210646813113,0.4480753898577178,0.44802973365009185,0.4479840960451596,0.4479384770296608,0.4478928765903482,0.4478472947139886,0.44780173138736196,0.44775618659726174,0.4477106603304949,0.44766515257388173,0.44761966331425584,0.4475741925384645,0.44752874023336786,0.44748330638583994,0.4474378909827678,0.44739249401105174,0.4473471154576055,0.44730175530935606,0.44725641355324364,0.4472110901762216,0.4471657851652567,0.4471204985073287,0.4470752301894307,0.4470299801985689,0.4469847485217627,0.4469395351460444,0.44689434005845985,0.4468491632460676,0.4468040046959394,0.4467588643951602,0.4467137423308278,0.4466686384900531,0.44662355285996,0.44657848542768547,0.4465334361803793,0.4464884051052043,0.4464433921893365,0.4463983974199643,0.4463534207842895,0.4463084622695266,0.4462635218629029,0.44621859955165866,0.44617369532304707,0.44612880916433384,0.44608394106279786,0.4460390910057305,0.4459942589804361,0.44594944497423167,0.445904648974447,0.4458598709684245,0.4458151109435195,0.4457703688870998,0.445725644786546,0.4456809386292513,0.44563625040262156,0.4455915800940753,0.44554692769104365,0.4455022931809701,0.44545767655131113,0.44541307778953554,0.4453684968831246,0.44532393381957214,0.4452793885863848,0.4452348611710812,0.44519035156119285,0.44514585974426363,0.44510138570784963,0.44505692943951974,0.445012490926855,0.444968070157449,0.44492366711890746,0.4448792817988487,0.44483491418490334,0.44479056426471447,0.44474623202593716,0.4447019174562389,0.44465762054329977,0.4446133412748117,0.444569079638479,0.4445248356220185,0.4444806092131588,0.444436400399641,0.4443922091692184,0.4443480355096562,0.44430387940873206,0.44425974085423564,0.44421561983396873,0.44417151633574525,0.4441274303473913,0.4440833618567449,0.44403931085165627,0.44399527731998756,0.443951261249613,0.4439072626284189,0.44386328144430354,0.443819317685177,0.4437753713389618,0.4437314423935919,0.44368753083701346,0.4436436366571845,0.443599759842075,0.4435559003796668,0.4435120582579536,0.44346823346494113,0.4434244259886465,0.44338063581709936,0.4433368629383406,0.4432931073404231,0.4432493690114116,0.4432056479393825,0.443161944112424,0.44311825751863615,0.44307458814613043,0.4430309359830305,0.44298730101747125,0.44294368323759953,0.44290008263157377,0.44285649918756403,0.44281293289375206,0.4427693837383312,0.4427258517095064,0.44268233679549435,0.44263883898452294,0.44259535826483204,0.4425518946246729,0.44250844805230816,0.4424650185360122,0.44242160606407094,0.44237821062478144,0.44233483220645264,0.4422914707974047,0.44224812638596933,0.44220479896048953,0.4421614885093199,0.44211819502082644,0.4420749184833864,0.4420316588853885,0.44198841621523266,0.44194519046133035,0.44190198161210437,0.44185878965598857,0.4418156145814285,0.4417724563768806,0.441729315030813,0.44168619053170455,0.44164308286804593,0.4415999920283386,0.44155691800109537,0.44151386077484045,0.441470820338109,0.4414277966794474,0.4413847897874133,0.44134179965057524,0.4412988262575132,0.4412558695968182,0.4412129296570921,0.4411700064269481,0.44112709989501064,0.44108421004991477,0.44104133688030683,0.4409984803748443,0.44095564052219555,0.4409128173110399,0.4408700107300677,0.44082722076798037,0.44078444741349015,0.4407416906553205,0.44069895048220536,0.4406562268828901,0.4406135198461305,0.44057082936069364,0.4405281554153573,0.4404854979989102,0.4404428571001517,0.44040023270789236,0.4403576248109533,0.44031503339816647,0.4402724584583747,0.44022989998043166,0.4401873579532016,0.44014483236555957,0.4401023232063916,0.44005983046459424,0.44001735412907467,0.4399748941887511,0.43993245063255204,0.439890023449417,0.439847612628296,0.4398052181581497,0.43976284002794946,0.43972047822667726,0.4396781327433256,0.43963580356689763,0.43959349068640713,0.43955119409087845,0.4395089137693464,0.4394666497108565,0.43942440190446463,0.43938217033923727,0.4393399550042513,0.4392977558885944,0.43925557298136425,0.43921340627166944,0.43917125574862886,0.4391291214013716,0.4390870032190376,0.43904490119077694,0.43900281530575014,0.4389607455531281,0.4389186919220921,0.43887665440183393,0.43883463298155556,0.4387926276504693,0.4387506383977977,0.4387086652127741,0.4386667080846413,0.43862476700265324,0.43858284195607367,0.4385409329341766,0.43849903992624645,0.43845716292157766,0.43841530190947525,0.43837345687925405,0.4383316278202393,0.43828981472176637,0.4382480175731809,0.4382062363638385,0.4381644710831051,0.43812272172035654,0.4380809882649791,0.4380392707063689,0.43799756903393233,0.43795588323708573,0.4379142133052555,0.4378725592278782,0.4378309209944005,0.4377892985942789,0.43774769201697994,0.43770610125198045,0.4376645262887668,0.43762296711683585,0.437581423725694,0.4375398961048578,0.4374983842438538,0.4374568881322184,0.4374154077594978,0.4373739431152484,0.43733249418903636,0.43729106097043763,0.43724964344903805,0.43720824161443356,0.43716685545622963,0.43712548496404163,0.4370841301274951,0.4370427909362249,0.43700146737987594,0.43696015944810296,0.4369188671305703,0.43687759041695234,0.43683632929693295,0.4367950837602058,0.43675385379647436,0.43671263939545174,0.43667144054686086,0.4366302572404343,0.4365890894659141,0.4365479372130524,0.43650680047161056,0.4364656792313598,0.436424573482081,0.43638348321356474,0.4363424084156109,0.4363013490780291,0.4362603051906388,0.43621927674326855,0.43617826372575697,0.43613726612795195,0.43609628393971084,0.43605531715090085,0.43601436575139824,0.4359734297310892,0.43593250907986925,0.43589160378764336,0.43585071384432594,0.435809839239841,0.4357689799641219,0.43572813600711136,0.4356873073587617,0.43564649400903466,0.43560569594790105,0.4355649131653414,0.4355241456513456,0.4354833933959128,0.43544265638905144,0.4354019346207796,0.43536122808112426,0.435320536760122,0.4352798606478188,0.4352391997342697,0.43519855400953916,0.4351579234637008,0.43511730808683763,0.43507670786904196,0.43503612280041526,0.43499555287106806,0.4349549980711203,0.4349144583907013,0.4348739338199492,0.43483342434901157,0.434792929968045,0.43475245066721546,0.43471198643669795,0.43467153726667657,0.43463110314734454,0.43459068406890433,0.43455028002156737,0.43450989099555437,0.4344695169810949,0.4344291579684278,0.4343888139478009,0.434348484909471,0.43430817084370404,0.4342678717407751,0.434227587590968,0.43418731838457575,0.4341470641119005,0.434106824763253,0.4340666003289534,0.4340263907993305,0.4339861961647221,0.43394601641547526,0.4339058515419456,0.43386570153449777,0.4338255663835054,0.433785446079351,0.43374534061242603,0.4337052499731306,0.433665174151874,0.43362511313907404,0.4335850669251578,0.4335450355005607,0.4335050188557277,0.4334650169811116,0.43342502986717485,0.4333850575043884,0.43334509988323183,0.4333051569941937,0.43326522882777135,0.4332253153744707,0.4331854166248065,0.43314553256930227,0.4331056631984902,0.4330658085029114,0.4330259684731152,0.4329861430996601,0.43294633237311314,0.43290653628404985,0.43286675482305476,0.4328269879807206,0.43278723574764927,0.4327474981144507,0.4327077750717441,0.4326680666101568,0.4326283727203247,0.4325886933928928,0.4325490286185142,0.43250937838785064,0.4324697426915725,0.43243012152035887,0.432390514864897,0.43235092271588305,0.43231134506402136,0.43227178190002497,0.43223223321461546,0.4321926989985228,0.4321531792424855,0.4321136739372503,0.4320741830735728,0.43203470664221677,0.43199524463395433,0.43195579703956644,0.4319163638498421,0.4318769450555787,0.43183754064758245,0.4317981506166674,0.43175877495365633,0.4317194136493802,0.4316800666946785,0.43164073408039905,0.4316014157973978,0.4315621118365392,0.431522822188696,0.4314835468447492,0.4314442857955882,0.4314050390321106,0.4313658065452222,0.43132658832583737,0.43128738436487835,0.43124819465327596,0.431209019181969,0.4311698579419047,0.4311307109240384,0.4310915781193335,0.43105245951876203,0.43101335511330385,0.43097426489394713,0.4309351888516881,0.4308961269775313,0.4308570792624894,0.4308180456975831,0.43077902627384124,0.430740020982301,0.43070102981400743,0.43066205276001374,0.4306230898113813,0.43058414095917963,0.4305452061944861,0.4305062855083863,0.43046737889197384,0.43042848633635045,0.4303896078326258,0.4303507433719176,0.43031189294535155,0.4302730565440615,0.43023423415918916,0.4301954257818843,0.4301566314033047,0.4301178510146159,0.43007908460699174,0.43004033217161375,0.4300015936996715,0.42996286918236254,0.4299241586108921,0.42988546197647387,0.42984677927032877,0.429808110483686,0.4297694556077827,0.42973081463386364,0.4296921875531818,0.42965357435699764,0.42961497503657964,0.42957638958320415,0.4295378179881555,0.4294992602427255,0.42946071633821403,0.4294221862659286,0.4293836700171847,0.4293451675833055,0.4293066789556219,0.4292682041254728,0.42922974308420464,0.42919129582317156,0.4291528623337357,0.42911444260726656,0.4290760366351419,0.4290376444087467,0.42899926591947385,0.42896090115872393,0.4289225501179052,0.4288842127884336,0.42884588916173266,0.42880757922923385,0.4287692829823758,0.42873100041260537,0.4286927315113766,0.4286544762701513,0.4286162346803989,0.42857800673359653,0.42853979242122886,0.428501591734788,0.42846340466577393,0.428425231205694,0.428387071346063,0.4283489250784037,0.42831079239424596,0.4282726732851275,0.4282345677425934,0.42819647575819636,0.4281583973234965,0.4281203324300615,0.4280822810694665,0.4280442432332942,0.4280062189131347,0.42796820810058556,0.42793021078725174,0.42789222696474605,0.4278542566246882,0.4278162997587055,0.42777835635843303,0.42774042641551274,0.4277025099215945,0.42766460686833513,0.42762671724739915,0.4275888410504584,0.4275509782691921,0.4275131288952867,0.4274752929204361,0.4274374703363417,0.4273996611347119,0.4273618653072627,0.42732408284571743,0.42728631374180653,0.4272485579872681,0.427210815573847,0.42717308649329594,0.4271353707373745,0.42709766829784984,0.4270599791664962,0.42702230333509505,0.42698464079543524,0.42694699153931287,0.42690935555853105,0.4268717328449004,0.4268341233902385,0.42679652718637034,0.426758944225128,0.42672137449835085,0.4266838179978852,0.4266462747155848,0.42660874464331056,0.42657122777293033,0.42653372409631934,0.42649623360535976,0.42645875629194097,0.4264212921479596,0.4263838411653193,0.42634640333593077,0.4263089786517118,0.42627156710458747,0.4262341686864896,0.4261967833893576,0.42615941120513745,0.42612205212578247,0.42608470614325283,0.42604737324951597,0.42601005343654624,0.42597274669632496,0.4259354530208406,0.4258981724020887,0.4258609048320715,0.42582365030279856,0.42578640880628627,0.425749180334558,0.42571196487964413,0.42567476243358204,0.425637572988416,0.42560039653619713,0.42556323306898375,0.4255260825788411,0.42548894505784096,0.42545182049806235,0.4254147088915912,0.4253776102305203,0.4253405245069493,0.4253034517129847,0.4252663918407399,0.4252293448823353,0.4251923108298979,0.425155289675562,0.42511828141146807,0.42508128602976414,0.42504430352260464,0.4250073338821509,0.424970377100571,0.4249334331700401,0.42489650208274,0.424859583830859,0.4248226784065927,0.4247857858021432,0.4247489060097193,0.42471203902153687,0.4246751848298182,0.4246383434267924,0.42460151480469555,0.4245646989557701,0.42452789587226564,0.42449110554643804,0.42445432797055027,0.4244175631368716,0.42438081103767855,0.4243440716652538,0.4243073450118867,0.4242706310698739,0.42423392983151803,0.4241972412891287,0.4241605654350221,0.4241239022615212,0.4240872517609552,0.4240506139256604,0.4240139887479794,0.42397737622026155,0.423940776334863,0.423904189084146,0.42386761446047977,0.4238310524562401,0.4237945030638092,0.4237579662755758,0.42372144208393553,0.42368493048129025,0.42364843146004844,0.42361194501262517,0.423575471131442,0.423539009808927,0.4235025610375149,0.4234661248096466,0.4234297011177699,0.4233932899543389,0.42335689131181425,0.42332050518266295,0.4232841315593585,0.42324777043438105,0.42321142180021704,0.42317508564935946,0.4231387619743075,0.42310245076756725,0.42306615202165065,0.42302986572907664,0.42299359188237007,0.4229573304740626,0.42292108149669205,0.42288484494280265,0.42284862080494523,0.4228124090756767,0.42277620974756047,0.42274002281316636,0.42270384826507057,0.4226676860958555,0.42263153629811007,0.4225953988644294,0.42255927378741504,0.42252316105967475,0.42248706067382275,0.42245097262247944,0.42241489689827166,0.4223788334938323,0.4223427824018009,0.4223067436148229,0.4222707171255503,0.4222347029266413,0.4221987010107602,0.4221627113705777,0.4221267339987707,0.4220907688880225,0.42205481603102235,0.42201887542046584,0.4219829470490549,0.4219470309094977,0.4219111269945082,0.42187523529680704,0.42183935580912074,0.42180348852418226,0.4217676334347305,0.4217317905335107,0.4216959598132741,0.4216601412667783,0.4216243348867869,0.42158854066606977,0.42155275859740265,0.42151698867356774,0.42148123088735306,0.4214454852315532,0.42140975169896827,0.4213740302824049,0.42133832097467566,0.4213026237685993,0.4212669386570005,0.42123126563271013,0.42119560468856515,0.42115995581740856,0.42112431901208935,0.42108869426546264,0.4210530815703895,0.4210174809197372,0.4209818923063788,0.4209463157231936,0.4209107511630668,0.4208751986188896,0.4208396580835595,0.4208041295499794,0.4207686130110587,0.4207331084597127,0.42069761588886234,0.42066213529143504,0.42062666666036375,0.4205912099885877,0.42055576526905175,0.42052033249470705,0.42048491165851043,0.42044950275342463,0.42041410577241867,0.42037872070846705,0.4203433475545504,0.42030798630365523,0.42027263694877404,0.4202372994829049,0.42020197389905223,0.420166660190226,0.4201313583494421,0.4200960683697223,0.4200607902440945,0.42002552396559184,0.41999026952725405,0.419955026922126,0.41991979614325897,0.41988457718370975,0.41984937003654105,0.41981417469482124,0.4197789911516247,0.4197438194000317,0.41970865943312796,0.41967351124400526,0.41963837482576105,0.4196032501714986,0.41956813727432685,0.41953303612736087,0.4194979467237209,0.41946286905653346,0.4194278031189305,0.4193927489040498,0.41935770640503506,0.4193226756150354,0.4192876565272057,0.41925264913470683,0.4192176534307051,0.4191826694083727,0.4191476970608873,0.4191127363814325,0.41907778736319734,0.4190428499993768,0.41900792428317146,0.4189730102077874,0.4189381077664364,0.4189032169523362,0.41886833775870974,0.4188334701787858,0.41879861420579895,0.4187637698329892,0.41872893705360215,0.4186941158608892,0.4186593062481072,0.41862450820851876,0.4185897217353918,0.4185549468220001,0.41852018346162306,0.4184854316475455,0.4184506913730578,0.4184159626314559,0.41838124541604155,0.41834653972012187,0.41831184553700945,0.41827716286002253,0.4182424916824849,0.4182078319977258,0.4181731837990802,0.4181385470798883,0.41810392183349604,0.4180693080532547,0.41803470573252133,0.4180001148646581,0.41796553544303294,0.41793096746101926,0.4178964109119958,0.41786186578934686,0.4178273320864623,0.4177928097967373,0.4177582989135724,0.417723799430374,0.4176893113405534,0.41765483463752784,0.41762036931471963,0.4175859153655567,0.41755147278347227,0.4175170415619052,0.41748262169429945,0.41744821317410463,0.41741381599477567,0.4173794301497728,0.4173450556325617,0.4173106924366136,0.41727634055540486,0.41724199998241723,0.4172076707111381,0.41717335273505973,0.4171390460476802,0.41710475064250274,0.41707046651303586,0.41703619365279343,0.4170019320552948,0.4169676817140645,0.4169334426226324,0.41689921477453373,0.41686499816330885,0.4168307927825038,0.41679659862566937,0.41676241568636224,0.4167282439581439,0.4166940834345813,0.4166599341092467,0.41662579597571764,0.41659166902757666,0.416557553258412,0.4165234486618167,0.41648935523138936,0.41645527296073376,0.4164212018434587,0.41638714187317855,0.4163530930435126,0.4163190553480855,0.41628502878052714,0.41625101333447256,0.416217009003562,0.41618301578144073,0.41614903366175965,0.4161150626381743,0.4160811027043459,0.4160471538539405,0.41601321608062947,0.4159792893780892,0.4159453737400014,0.41591146916005295,0.4158775756319356,0.41584369314934655,0.415809821705988,0.41577596129556726,0.4157421119117968,0.41570827354839424,0.41567444619908217,0.4156406298575886,0.41560682451764613,0.415573030172993,0.4155392468173722,0.41550547444453195,0.4154717130482254,0.41543796262221094,0.415404223160252,0.415370494656117,0.41533677710357947,0.4153030704964179,0.4152693748284161,0.41523569009336253,0.41520201628505105,0.41516835339728025,0.41513470142385395,0.4151010603585809,0.415067430195275,0.41503381092775493,0.41500020254984454,0.41496660505537264,0.41493301843817304,0.4148994426920845,0.4148658778109509,0.41483232378862084,0.4147987806189482,0.41476524829579164,0.4147317268130148,0.41469821616448627,0.4146647163440797,0.41463122734567354,0.41459774916315123,0.41456428179040133,0.414530825221317,0.41449737944979664,0.4144639444697433,0.4144305202750652,0.4143971068596753,0.41436370421749147,0.41433031234243667,0.4142969312284384,0.41426356086942956,0.41423020125934734,0.41419685239213433,0.41416351426173764,0.4141301868621095,0.41409687018720687,0.41406356423099144,0.4140302689874302,0.41399698445049443,0.4139637106141607,0.41393044747241015,0.41389719501922895,0.4138639532486079,0.41383072215454275,0.4137975017310341,0.41376429197208725,0.4137310928717125,0.4136979044239246,0.4136647266227435,0.4136315594621937,0.4135984029363046,0.4135652570391104,0.4135321217646499,0.4134989971069668,0.41346588306010973,0.4134327796181318,0.41339968677509104,0.41336660452505014,0.4133335328620767,0.4133004717802429,0.41326742127362576,0.413234381336307,0.413201351962373,0.41316833314591506,0.41313532488102905,0.4131023271618155,0.41306933998237977,0.4130363633368319,0.41300339721928675,0.4129704416238635,0.4129374965446864,0.4129045619758843,0.4128716379115907,0.4128387243459436,0.412805821273086,0.41277292868716536,0.41274004658233376,0.4127071749527481,0.41267431379256997,0.4126414630959652,0.4126086228571048,0.4125757930701641,0.41254297372932314,0.41251016482876657,0.4124773663626837,0.41244457832526843,0.41241180071071926,0.4123790335132394,0.41234627672703644,0.4123135303463229,0.4122807943653156,0.412248068778236,0.4122153535793104,0.41218264876276933,0.41214995432284807,0.4121172702537865,0.41208459654982904,0.41205193320522465,0.41201928021422674,0.41198663757109355,0.4119540052700876,0.41192138330547606,0.41188877167153076,0.4118561703625277,0.4118235793727479,0.4117909986964765,0.4117584283280033,0.41172586826162283,0.4116933184916337,0.4116607790123393,0.4116282498180475,0.4115957309030708,0.4115632222617258,0.4115307238883339,0.41149823577722094,0.4114657579227173,0.41143329031915754,0.411400832960881,0.41136838584223134,0.4113359489575567,0.41130352230120976,0.41127110586754756,0.4112386996509315,0.41120630364572774,0.41117391784630636,0.41114154224704247,0.4111091768423152,0.41107682162650816,0.41104447659400944,0.4110121417392117,0.41097981705651176,0.41094750254031087,0.41091519818501476,0.4108829039850337,0.4108506199347821,0.4108183460286788,0.41078608226114716,0.4107538286266148,0.4107215851195137,0.4106893517342804,0.4106571284653555,0.4106249153071843,0.41059271225421623,0.410560519300905,0.410528336441709,0.4104961636710906,0.4104640009835167,0.41043184837345853,0.4103997058353916,0.4103675733637957,0.4103354509531552,0.41030333859795837,0.4102712362926982,0.4102391440318717,0.4102070618099803,0.41017498962152965,0.4101429274610299,0.41011087532299534,0.4100788332019444,0.41004680109240005,0.41001477898888944,0.40998276688594393,0.4099507647780994,0.40991877265989546,0.4098867905258767,0.40985481837059135,0.4098228561885921,0.40979090397443607,0.4097589617226844,0.4097270294279025,0.40969510708466006,0.4096631946875311,0.4096312922310936,0.40959939970993,0.4095675171186269,0.409535644451775,0.4095037817039693,0.4094719288698091,0.40944008594389775,0.4094082529208428,0.4093764297952561,0.40934461656175364,0.4093128132149555,0.40928101974948605,0.4092492361599738,0.4092174624410514,0.40918569858735576,0.40915394459352794,0.40912220045421294,0.40909046616406014,0.4090587417177231,0.40902702710985933,0.4089953223351307,0.4089636273882029,0.4089319422637462,0.40890026695643455,0.4088686014609464,0.40883694577196406,0.408805299884174,0.408773663792267,0.40874203749093757,0.4087104209748847,0.40867881423881136,0.4086472172774244,0.40861563008543517,0.4085840526575588,0.4085524849885145,0.4085209270730257,0.4084893789058199,0.40845784048162853,0.40842631179518724,0.4083947928412357,0.4083632836145175,0.40833178410978055,0.4083002943217765,0.40826881424526135,0.408237343874995,0.4082058832057412,0.4081744322322682,0.4081429909493478,0.40811155935175614,0.40808013743427324,0.40804872519168306,0.40801732261877377,0.40798592971033754,0.40795454646117046,0.4079231728660725,0.40789180891984783,0.4078604546173046,0.40782910995325483,0.40779777492251457,0.40776644951990393,0.4077351337402469,0.40770382757837154,0.4076725310291098,0.40764124408729757,0.4076099667477748,0.40757869900538535,0.407547440854977,0.4075161922914016,0.40748495330951473,0.4074537239041762,0.40742250407024955,0.40739129380260214,0.4073600930961057,0.40732890194563554,0.4072977203460708,0.40726654829229486,0.4072353857791949,0.40720423280166185,0.40717308935459073,0.40714195543288045,0.4071108310314337,0.40707971614515714,0.40704861076896137,0.4070175148977609,0.4069864285264739,0.40695535165002267,0.4069242842633332,0.4068932263613357,0.4068621779389637,0.40683113899115486,0.406800109512851,0.4067690894989974,0.40673807894454334,0.4067070778444418,0.40667608619364987,0.40664510398712833,0.40661413121984175,0.40658316788675875,0.40655221398285146,0.4065212695030961,0.40649033444247257,0.40645940879596465,0.40642849255856,0.4063975857252499,0.4063666882910296,0.4063358002508982,0.4063049215998584,0.4062740523329168,0.40624319244508394,0.40621234193137373,0.4061815007868045,0.4061506690063977,0.40611984658517897,0.4060890335181777,0.40605822980042683,0.40602743542696335,0.40599665039282773,0.40596587469306444,0.40593510832272156,0.4059043512768509,0.4058736035505082,0.4058428651387528,0.4058121360366478,0.4057814162392599,0.4057507057416599,0.40572000453892193,0.40568931262612423,0.4056586299983483,0.40562795665067986,0.405597292578208,0.4055666377760256,0.40553599223922926,0.4055053559629193,0.4054747289421998,0.4054441111721785,0.40541350264796666,0.40538290336467947,0.40535231331743565,0.4053217325013578,0.4052911609115719,0.4052605985432079,0.4052300453913992,0.405199501451283,0.4051689667180001,0.40513844118669506,0.4051079248525159,0.4050774177106145,0.4050469197561463,0.4050164309842703,0.4049859513901494,0.40495548096894984,0.4049250197158417,0.4048945676259986,0.4048641246945978,0.4048336909168202,0.40480326628785035,0.4047728508028764,0.40474244445708996,0.40471204724568655,0.4046816591638651,0.4046512802068281,0.4046209103697818,0.404590549647936,0.40456019803650406,0.40452985553070286,0.404499522125753,0.4044691978168786,0.4044388825993074,0.4044085764682706,0.40437827941900306,0.40434799144674327,0.4043177125467332,0.40428744271421835,0.4042571819444478,0.40422693023267436,0.4041966875741541,0.4041664539641469,0.40413622939791605,0.40410601387072825,0.40407580737785403,0.4040456099145674,0.40401542147614555,0.4039852420578697,0.4039550716550242,0.4039249102628972,0.40389475787678014,0.4038646144919681,0.4038344801037597,0.40380435470745696,0.40377423829836556,0.40374413087179445,0.4037140324230563,0.4036839429474671,0.4036538624403465,0.40362379089701755,0.4035937283128066,0.4035636746830439,0.40353363000306286,0.4035035942682003,0.4034735674737969,0.40344354961519635,0.40341354068774604,0.40338354068679694,0.40335354960770314,0.4033235674458225,0.40329359419651617,0.40326362985514874,0.40323367441708835,0.40320372787770636,0.4031737902323779,0.4031438614764813,0.4031139416053984,0.4030840306145142,0.4030541284992177,0.4030242352549007,0.4029943508769589,0.40296447536079116,0.40293460870179976,0.40290475089539046,0.40287490193697234,0.40284506182195806,0.4028152305457634,0.4027854081038077,0.4027555944915137,0.4027257897043076,0.4026959937376188,0.4026662065868801,0.4026364282475279,0.4026066587150017,0.4025768979847445,0.4025471460522027,0.4025174029128259,0.4024876685620674,0.4024579429953835,0.402428226208234,0.4023985181960821,0.4023688189543942,0.40233912847864023,0.40230944676429337,0.40227977380683005,0.40225010960173024,0.40222045414447705,0.4021908074305571,0.40216116945546004,0.4021315402146793,0.4021019197037112,0.4020723079180554,0.40204270485321547,0.4020131105046974,0.4019835248680111,0.4019539479386697,0.4019243797121893,0.40189482018408973,0.40186526934989386,0.4018357272051279,0.40180619374532134,0.40177666896600706,0.40174715286272106,0.40171764543100275,0.4016881466663947,0.40165865656444283,0.4016291751206964,0.4015997023307077,0.4015702381900325,0.4015407826942299,0.4015113358388619,0.40148189761949404,0.4014524680316951,0.401423047071037,0.401393634733095,0.4013642310134474,0.40133483590767616,0.40130544941136603,0.40127607152010525,0.4012467022294851,0.4012173415351003,0.4011879894325487,0.40115864591743133,0.4011293109853524,0.4010999846319195,0.4010706668527433,0.40104135764343757,0.40101205699961967,0.40098276491690976,0.4009534813909314,0.40092420641731125,0.40089493999167924,0.4008656821096685,0.4008364327669153,0.40080719195905895,0.4007779596817423,0.400748735930611,0.40071952070131417,0.40069031398950394,0.4006611157908356,0.40063192610096765,0.40060274491556175,0.4005735722302827,0.4005444080407986,0.40051525234278035,0.40048610513190247,0.4004569664038423,0.4004278361542803,0.4003987143789003,0.40036960107338915,0.4003404962334367,0.40031139985473624,0.4002823119329839,0.4002532324638791,0.40022416144312434,0.4001950988664253,0.4001660447294905,0.40013699902803207,0.4001079617577647,0.4000789329144067,0.4000499124936791,0.40002090049130623,0.3999918969030154,0.39996290172453725,0.3999339149516052,0.39990493657995596,0.39987596660532926,0.3998470050234679,0.3998180518301179,0.39978910702102827,0.39976017059195107,0.3997312425386413,0.39970232285685736,0.3996734115423604,0.39964450859091494,0.39961561399828815,0.39958672776025084,0.39955784987257625,0.3995289803310411,0.39950011913142497,0.39947126626951057,0.3994424217410837,0.399413585541933,0.3993847576678504,0.3993559381146307,0.3993271268780718,0.39929832395397463,0.399269529338143,0.39924074302638407,0.3992119650145077,0.3991831952983269,0.39915443387365784,0.3991256807363193,0.39909693588213363,0.3990681993069256,0.39903947100652354,0.3990107509767583,0.3989820392134641,0.39895333571247793,0.3989246404696399,0.398895953480793,0.3988672747417833,0.3988386042484598,0.3988099419966745,0.3987812879822824,0.39875264220114154,0.3987240046491128,0.39869537532206006,0.3986667542158502,0.39863814132635317,0.39860953664944165,0.39858094018099144,0.3985523519168814,0.3985237718529931,0.39849519998521116,0.3984666363094232,0.39843808082151977,0.39840953351739433,0.3983809943929433,0.39835246344406605,0.3983239406666649,0.39829542605664503,0.3982669196099146,0.39823842132238474,0.3982099311899695,0.39818144920858567,0.39815297537415323,0.3981245096825949,0.3980960521298364,0.39806760271180636,0.3980391614244362,0.39801072826366035,0.39798230322541617,0.3979538863056438,0.39792547750028656,0.3978970768052902,0.3978686842166038,0.3978402997301791,0.39781192334197074,0.3977835550479364,0.3977551948440364,0.3977268427262341,0.3976984986904958,0.39767016273279043,0.39764183484909,0.3976135150353694,0.39758520328760627,0.3975568996017812,0.39752860397387746,0.3975003163998814,0.39747203687578225,0.3974437653975718,0.3974155019612451,0.3973872465627995,0.3973589991982358,0.3973307598635573,0.39730252855477016,0.3972743052678834,0.3972460899989089,0.3972178827438615,0.3971896834987585,0.39716149225962044,0.39713330902247046,0.39710513378333445,0.3970769665382414,0.39704880728322295,0.39702065601431336,0.3969925127275501,0.39696437741897317,0.3969362500846254,0.3969081307205526,0.39688001932280315,0.39685191588742835,0.3968238204104823,0.3967957328880217,0.3967676533161066,0.3967395816907991,0.39671151800816457,0.396683462264271,0.3966554144551892,0.39662737457699265,0.39659934262575786,0.3965713185975639,0.3965433024884926,0.3965152942946286,0.39648729401205945,0.39645930163687526,0.396431317165169,0.39640334059303634,0.3963753719165757,0.39634741113188837,0.3963194582350783,0.39629151322225215,0.39626357608951945,0.3962356468329923,0.39620772544878563,0.39617981193301727,0.39615190628180746,0.3961240084912794,0.39609611855755894,0.3960682364767747,0.3960403622450579,0.39601249585854276,0.39598463731336586,0.39595678660566674,0.39592894373158766,0.39590110868727346,0.39587328146887185,0.3958454620725329,0.3958176504944099,0.3957898467306585,0.3957620507774371,0.3957342626309067,0.3957064822872314,0.3956787097425776,0.3956509449931143,0.3956231880350137,0.39559543886445014,0.395567697477601,0.3955399638706461,0.3955122380397682,0.3954845199811526,0.3954568096909871,0.39542910716546253,0.39540141240077203,0.39537372539311155,0.3953460461386799,0.39531837463367825,0.39529071087431056,0.3952630548567835,0.39523540657730616,0.3952077660320906,0.3951801332173513,0.3951525081293056,0.3951248907641732,0.3950972811181766,0.39506967918754105,0.3950420849684942,0.3950144984572665,0.3949869196500909,0.3949593485432032,0.3949317851328416,0.394904229415247,0.39487668138666304,0.3948491410433357,0.39482160838151387,0.394794083397449,0.3947665660873949,0.3947390564476083,0.3947115544743484,0.3946840601638771,0.39465657351245875,0.3946290945163604,0.3946016231718516,0.3945741594752047,0.39454670342269443,0.3945192550105982,0.3944918142351961,0.3944643810927706,0.39443695557960695,0.3944095376919929,0.3943821274262186,0.3943547247785773,0.3943273297453642,0.39429994232287746,0.3942725625074177,0.39424519029528815,0.3942178256827945,0.3941904686662452,0.394163119241951,0.39413577740622546,0.3941084431553845,0.3940811164857467,0.3940537973936332,0.3940264858753676,0.3939991819272762,0.39397188554568763,0.3939445967269333,0.393917315467347,0.39389004176326503,0.3938627756110264,0.3938355170069725,0.39380826594744744,0.39378102242879753,0.39375378644737197,0.3937265579995221,0.3936993370816022,0.39367212368996884,0.3936449178209811,0.3936177194710006,0.3935905286363915,0.3935633453135204,0.3935361694987566,0.39350900118847165,0.39348184037903977,0.3934546870668376,0.3934275412482444,0.39340040291964185,0.39337327207741407,0.39334614871794765,0.3933190328376319,0.3932919244328584,0.3932648235000212,0.393237730035517,0.39321064403574496,0.3931835654971065,0.3931564944160058,0.3931294307888494,0.39310237461204617,0.3930753258820076,0.39304828459514785,0.3930212507478831,0.3929942243366323,0.39296720535781676,0.3929401938078603,0.3929131896831892,0.3928861929802322,0.3928592036954203,0.3928322218251873,0.39280524736596906,0.39277828031420425,0.3927513206663339,0.39272436841880115,0.392697423568052,0.3926704861105346,0.3926435560426999,0.39261663336100083,0.3925897180618931,0.39256281014183453,0.3925359095972857,0.3925090164247095,0.3924821306205711,0.39245525218133814,0.39242838110348094,0.3924015173834719,0.39237466101778606,0.39234781200290064,0.3923209703352955,0.3922941360114529,0.3922673090278573,0.39224048938099565,0.39221367706735744,0.3921868720834345,0.3921600744257209,0.39213328409071324,0.3921065010749106,0.3920797253748141,0.3920529569869278,0.39202619590775767,0.39199944213381227,0.3919726956616025,0.39194595648764163,0.3919192246084453,0.3918925000205316,0.391865782720421,0.39183907270463614,0.39181236996970226,0.3917856745121469,0.3917589863284999,0.3917323054152935,0.3917056317690624,0.3916789653863435,0.3916523062636762,0.391625654397602,0.3915990097846652,0.391572372421412,0.3915457423043912,0.39151911943015383,0.39149250379525347,0.3914658953962457,0.39143929422968876,0.39141270029214303,0.3913861135801713,0.3913595340903387,0.3913329618192127,0.3913063967633631,0.39127983891936197,0.3912532882837837,0.3912267448532052,0.39120020862420535,0.39117367959336574,0.39114715775727,0.3911206431125042,0.3910941356556566,0.39106763538331796,0.3910411422920812,0.39101465637854166,0.3909881776392968,0.39096170607094666,0.3909352416700933,0.3909087844333413,0.3908823343572974,0.3908558914385707,0.39082945567377253,0.39080302705951664,0.3907766055924189,0.39075019126909755,0.3907237840861732,0.3906973840402687,0.3906709911280089,0.39064460534602147,0.39061822669093593,0.3905918551593841,0.39056549074800034,0.3905391334534211,0.39051278327228506,0.39048644020123324,0.3904601042369089,0.39043377537595764,0.3904074536150272,0.39038113895076765,0.39035483137983135,0.39032853089887276,0.39030223750454873,0.3902759511935185,0.3902496719624432,0.3902233998079865,0.39019713472681417,0.3901708767155943,0.39014462577099723,0.39011838188969544,0.39009214506836376,0.3900659153036791,0.3900396925923209,0.3900134769309705,0.3899872683163116,0.3899610667450302,0.3899348722138145,0.3899086847193548,0.3898825042583438,0.3898563308274762,0.3898301644234493,0.38980400504296214,0.3897778526827163,0.38975170733941544,0.38972556900976546,0.38969943769047455,0.38967331337825295,0.3896471960698132,0.3896210857618701,0.38959498245114044,0.3895688861343435,0.3895427968082006,0.38951671446943514,0.38949063911477283,0.38946457074094176,0.3894385093446719,0.3894124549226955,0.38938640747174713,0.3893603669885634,0.38933433346988316,0.38930830691244733,0.38928228731299924,0.38925627466828416,0.38923026897504975,0.38920427023004567,0.3891782784300237,0.38915229357173803,0.38912631565194483,0.38910034466740245,0.3890743806148716,0.3890484234911148,0.38902247329289713,0.38899653001698536,0.38897059366014886,0.38894466421915896,0.38891874169078905,0.38889282607181486,0.38886691735901413,0.38884101554916684,0.388815120639055,0.388789232625463,0.388763351505177,0.3887374772749855,0.3887116099316793,0.38868574947205103,0.3886598958928958,0.3886340491910104,0.3886082093631941,0.3885823764062482,0.3885565503169762,0.38853073109218356,0.38850491872867793,0.3884791132232691,0.388453314572769,0.38842752277399173,0.38840173782375326,0.388375959718872,0.38835018845616825,0.3883244240324644,0.3882986664445852,0.3882729156893573,0.3882471717636094,0.38822143466417236,0.3881957043878793,0.38816998093156524,0.38814426429206744,0.38811855446622506,0.38809285145087963,0.38806715524287444,0.38804146583905513,0.3880157832362694,0.38799010743136697,0.3879644384211996,0.3879387762026211,0.38791312077248774,0.3878874721276573,0.38786183026499,0.3878361951813481,0.3878105668735958,0.3877849453385995,0.38775933057322765,0.3877337225743506,0.3877081213388412,0.38768252686357374,0.38765693914542515,0.3876313581812741,0.3876057839680013,0.38758021650248975,0.3875546557816243,0.38752910180229194,0.3875035545613817,0.38747801405578464,0.38745248028239393,0.3874269532381047,0.38740143291981416,0.3873759193244216,0.3873504124488284,0.3873249122899377,0.387299418844655,0.3872739321098877,0.3872484520825453,0.3872229787595393,0.3871975121377831,0.3871720522141922,0.3871465989856844,0.3871211524491792,0.3870957126015982,0.387070279439865,0.38704485296090535,0.3870194331616469,0.38699402003901934,0.38696861358995444,0.38694321381138586,0.3869178207002494,0.38689243425348274,0.38686705446802583,0.3868416813408202,0.38681631486880974,0.3867909550489403,0.3867656018781595,0.3867402553534173,0.3867149154716654,0.3866895822298576,0.38666425562494955,0.3866389356538992,0.3866136223136662,0.3865883156012124,0.38656301551350136,0.386537722047499,0.3865124352001728,0.3864871549684927,0.38646188134943016,0.386436614339959,0.3864113539370548,0.38638610013769514,0.38636085293885963,0.3863356123375298,0.3863103783306892,0.38628515091532334,0.3862599300884196,0.3862347158469675,0.38620950818795846,0.38618430710838575,0.3861591126052448,0.38613392467553276,0.386108743316249,0.3860835685243946,0.3860584002969728,0.38603323863098876,0.38600808352344934,0.38598293497136366,0.38595779297174276,0.3859326575215994,0.38590752861794847,0.3858824062578068,0.38585729043819306,0.38583218115612794,0.38580707840863404,0.385781982192736,0.38575689250546025,0.3857318093438351,0.38570673270489103,0.3856816625856603,0.38565659898317695,0.3856315418944774,0.38560649131659946,0.3855814472465832,0.38555640968147065,0.38553137861830533,0.3855063540541333,0.38548133598600204,0.3854563244109612,0.3854313193260622,0.38540632072835856,0.3853813286149055,0.38535634298276017,0.38533136382898187,0.3853063911506315,0.385281424944772,0.3852564652084684,0.3852315119387873,0.38520656513279733,0.385181624787569,0.38515669090017485,0.38513176346768907,0.3851068424871881,0.38508192795574986,0.38505701987045454,0.3850321182283838,0.3850072230266216,0.38498233426225353,0.3849574519323672,0.38493257603405195,0.3849077065643992,0.3848828435205021,0.3848579868994557,0.384833136698357,0.38480829291430474,0.3847834555443997,0.3847586245857443,0.38473380003544316,0.3847089818906024,0.3846841701483303,0.3846593648057368,0.38463456585993394,0.3846097733080353,0.38458498714715666,0.38456020737441543,0.3845354339869309,0.38451066698182435,0.38448590635621865,0.3844611521072389,0.3844364042320117,0.3844116627276657,0.3843869275913313,0.38436219882014083,0.38433747641122834,0.38431276036172995,0.38428805066878335,0.3842633473295283,0.3842386503411062,0.38421395970066036,0.38418927540533604,0.38416459745228015,0.3841399258386416,0.384115260561571,0.3840906016182209,0.3840659490057456,0.38404130272130116,0.38401666276204566,0.3839920291251388,0.3839674018077423,0.3839427808070195,0.3839181661201357,0.38389355774425793,0.3838689556765552,0.383844359914198,0.383819770454359,0.38379518729421247,0.3837706104309346,0.3837460398617032,0.3837214755836981,0.38369691759410096,0.383672365890095,0.38364782046886536,0.38362328132759904,0.3835987484634848,0.38357422187371315,0.3835497015554766,0.3835251875059691,0.38350067972238666,0.38347617820192703,0.3834516829417897,0.383427193939176,0.383402711191289,0.3833782346953336,0.38335376444851643,0.3833293004480461,0.3833048426911326,0.38328039117498797,0.38325594589682616,0.38323150685386265,0.3832070740433147,0.38318264746240155,0.38315822710834396,0.38313381297836474,0.3831094050696881,0.3830850033795404,0.3830606079051495,0.38303621864374526,0.383011835592559,0.3829874587488241,0.3829630881097756,0.3829387236726501,0.38291436543468615,0.3828900133931241,0.38286566754520607,0.3828413278881757,0.3828169944192786,0.382792667135762,0.38276834603487503,0.38274403111386845,0.38271972236999474,0.3826954198005083,0.382671123402665,0.3826468331737228,0.38262254911094096,0.3825982712115809,0.38257399947290555,0.3825497338921796,0.3825254744666697,0.38250122119364366,0.3824769740703717,0.3824527330941253,0.38242849826217795,0.38240426957180473,0.3823800470202824,0.3823558306048896,0.38233162032290646,0.38230741617161523,0.3822832181482994,0.3822590262502445,0.3822348404747377,0.3822106608190678,0.3821864872805255,0.38216231985640303,0.3821381585439944,0.3821140033405953,0.3820898542435033,0.38206571125001737,0.38204157435743835,0.382017443563069,0.38199331886421334,0.38196920025817743,0.38194508774226893,0.3819209813137972,0.38189688097007324,0.3818727867084099,0.3818486985261215,0.3818246164205243,0.381800540388936,0.38177647042867624,0.38175240653706616,0.3817283487114287,0.3817042969490884,0.3816802512473716,0.38165621160360624,0.3816321780151218,0.38160815047924984,0.3815841289933232,0.3815601135546766,0.3815361041606465,0.38151210080857073,0.3814881034957892,0.3814641122196431,0.3814401269774756,0.3814161477666314,0.3813921745844569,0.3813682074283001,0.3813442462955107,0.38132029118344024,0.3812963420894417,0.3812723990108696,0.3812484619450806,0.38122453088943264,0.38120060584128534,0.38117668679800015,0.38115277375693996,0.38112886671546947,0.3811049656709551,0.38108107062076463,0.38105718156226775,0.3810332984928358,0.38100942140984156,0.38098555031065967,0.38096168519266627,0.3809378260532393,0.38091397288975803,0.38089012569960384,0.38086628448015936,0.380842449228809,0.3808186199429388,0.3807947966199364,0.3807709792571912,0.3807471678520941,0.38072336240203764,0.380699562904416,0.3806757693566251,0.38065198175606224,0.3806282001001267,0.3806044243862191,0.38058065461174173,0.38055689077409854,0.3805331328706951,0.38050938089893876,0.3804856348562381,0.3804618947400037,0.3804381605476475,0.3804144322765833,0.38039070992422624,0.38036699348799324,0.3803432829653028,0.38031957835357505,0.3802958796502316,0.3802721868526958,0.38024849995839266,0.38022481896474863,0.3802011438691918,0.38017747466915197,0.38015381136206045,0.38013015394535016,0.38010650241645555,0.38008285677281284,0.3800592170118597,0.38003558313103547,0.3800119551277809,0.3799883329995387,0.37996471674375276,0.3799411063578689,0.37991750183933426,0.3798939031855978,0.37987031039410973,0.37984672346232223,0.3798231423876889,0.3797995671676648,0.3797759977997068,0.37975243428127303,0.3797288766098237,0.37970532478281993,0.379681778797725,0.37965823865200354,0.3796347043431217,0.3796111758685472,0.37958765322574944,0.3795641364121993,0.3795406254253692,0.37951712026273327,0.379493620921767,0.37947012739994773,0.37944663969475395,0.37942315780366614,0.37939968172416605,0.3793762114537371,0.37935274698986426,0.37932928833003404,0.3793058354717345,0.3792823884124552,0.3792589471496875,0.3792355116809239,0.37921208200365875,0.37918865811538793,0.37916524001360874,0.37914182769582006,0.37911842115952243,0.3790950204022178,0.37907162542140976,0.37904823621460326,0.3790248527793051,0.37900147511302323,0.3789781032132675,0.3789547370775492,0.3789313767033809,0.37890802208827695,0.3788846732297532,0.3788613301253271,0.37883799277251734,0.3788146611688445,0.37879133531183046,0.3787680151989987,0.3787447008278742,0.3787213921959835,0.3786980893008546,0.37867479214001704,0.378651500711002,0.378628215011342,0.3786049350385711,0.37858166079022504,0.3785583922638409,0.3785351294569574,0.37851187236711453,0.3784886209918542,0.3784653753287195,0.37844213537525506,0.37841890112900717,0.3783956725875235,0.3783724497483533,0.37834923260904735,0.37832602116715774,0.37830281542023825,0.37827961536584415,0.37825642100153206,0.37823323232486034,0.3782100493333886,0.3781868720246781,0.3781637003962915,0.37814053444579304,0.3781173741707485,0.37809421956872485,0.3780710706372909,0.37804792737401693,0.37802478977647436,0.37800165784223644,0.3779785315688778,0.37795541095397445,0.3779322959951041,0.3779091866898457,0.37788608303577986,0.37786298503048865,0.3778398926715555,0.3778168059565654,0.3777937248831048,0.3777706494487617,0.37774757965112543,0.37772451548778685,0.37770145695633833,0.37767840405437375,0.3776553567794883,0.37763231512927875,0.37760927910134334,0.3775862486932817,0.37756322390269503,0.37754020472718597,0.37751719116435856,0.3774941832118182,0.3774711808671721,0.3774481841280285,0.37742519299199745,0.3774022074566902,0.37737922751971964,0.37735625317870003,0.377333284431247,0.3773103212749778,0.3772873637075111,0.37726441172646685,0.3772414653294666,0.37721852451413335,0.3771955892780915,0.3771726596189668,0.37714973553438674,0.37712681702197987,0.37710390407937644,0.3770809967042081,0.3770580948941078,0.3770351986467101,0.3770123079596509,0.37698942283056774,0.3769665432570991,0.37694366923688544,0.37692080076756834,0.37689793784679093,0.37687508047219764,0.37685222864143453,0.37682938235214897,0.3768065416019897,0.37678370638860686,0.37676087670965236,0.376738052562779,0.3767152339456415,0.3766924208558956,0.37666961329119863,0.37664681124920957,0.3766240147275884,0.37660122372399674,0.37657843823609755,0.3765556582615553,0.3765328837980358,0.37651011484320634,0.3764873513947355,0.3764645934502933,0.3764418410075513,0.37641909406418234,0.3763963526178607,0.376373616666262,0.3763508862070635,0.37632816123794344,0.376305441756582,0.37628272776066024,0.3762600192478609,0.37623731621586814,0.3762146186623674,0.3761919265850456,0.37616923998159085,0.3761465588496931,0.37612388318704326,0.37610121299133376,0.3760785482602585,0.37605588899151265,0.3760332351827929,0.37601058683179733,0.3759879439362252,0.37596530649377735,0.37594267450215596,0.37592004795906453,0.37589742686220806,0.37587481120929284,0.3758522009980265,0.37582959622611817,0.37580699689127833,0.37578440299121874,0.3757618145236526,0.37573923148629457,0.3757166538768606,0.3756940816930678,0.37567151493263506,0.37564895359328243,0.3756263976727313,0.37560384716870454,0.3755813020789262,0.37555876240112185,0.37553622813301835,0.37551369927234407,0.37549117581682856,0.3754686577642028,0.37544614511219915,0.3754236378585513,0.37540113600099434,0.3753786395372647,0.37535614846510007,0.3753336627822396,0.3753111824864239,0.3752887075753948,0.37526623804689524,0.37524377389867003,0.37522131512846496,0.3751988617340273,0.3751764137131055,0.37515397106344966,0.3751315337828111,0.37510910186894225,0.37508667531959716,0.3750642541325312,0.37504183830550103,0.3750194278362646,0.3749970227225811,0.37497462296221146,0.37495222855291754,0.3749298394924627,0.3749074557786116,0.37488507740913035,0.37486270438178626,0.3748403366943479,0.3748179743445854,0.37479561733027006,0.37477326564917457,0.37475091929907284,0.37472857827774037,0.37470624258295365,0.37468391221249076,0.3746615871641309,0.3746392674356548,0.37461695302484427,0.3745946439294827,0.37457234014735474,0.3745500416762461,0.3745277485139441,0.37450546065823725,0.37448317810691545,0.3744609008577699,0.3744386289085929,0.37441636225717856,0.37439410090132164,0.3743718448388188,0.37434959406746765,0.3743273485850673,0.37430510838941805,0.3742828734783216,0.37426064384958085,0.37423841950100006,0.37421620043038484,0.37419398663554204,0.3741717781142798,0.3741495748644077,0.3741273768837363,0.37410518417007793,0.37408299672124573,0.37406081453505446,0.3740386376093201,0.3740164659418599,0.3739942995304923,0.3739721383730373,0.3739499824673159,0.37392783181115063,0.37390568640236516,0.3738835462387844,0.37386141131823475,0.37383928163854374,0.3738171571975403,0.3737950379930544,0.3737729240229176,0.37375081528496273,0.3737287117770235,0.37370661349693535,0.37368452044253486,0.37366243261165977,0.3736403500021492,0.3736182726118436,0.37359620043858466,0.3735741334802152,0.3735520717345795,0.37353001519952306,0.3735079638728926,0.3734859177525361,0.37346387683630294,0.37344184112204365,0.3734198106076101,0.3733977852908554,0.3733757651696337,0.373353750241801,0.373331740505214,0.3733097359577308,0.37328773659721093,0.373265742421515,0.373243753428505,0.37322176961604414,0.37319979098199685,0.3731778175242288,0.3731558492406071,0.37313388612899984,0.3731119281872766,0.373089975413308,0.3730680278049663,0.37304608536012435,0.373024148076657,0.3730022159524397,0.37298028898534974,0.3729583671732651,0.37293645051406543,0.3729145390056313,0.3728926326458449,0.37287073143258925,0.37284883536374896,0.37282694443720965,0.3728050586508583,0.3727831780025831,0.3727613024902734,0.37273943211182,0.3727175668651147,0.3726957067480507,0.3726738517585223,0.37265200189442527,0.3726301571536562,0.3726083175341134,0.372586483033696,0.3725646536503046,0.3725428293818411,0.37252101022620826,0.37249919618131055,0.3724773872450532,0.37245558341534296,0.37243378469008775,0.37241199106719675,0.3723902025445802,0.3723684191201498,0.37234664079181823,0.37232486755749955,0.372303099415109,0.372281336362563,0.3722595783977793,0.3722378255186767,0.3722160777231753,0.37219433500919646,0.37217259737466274,0.3721508648174978,0.3721291373356267,0.37210741492697547,0.3720856975894716,0.3720639853210437,0.37204227811962143,0.3720205759831359,0.3719988789095193,0.3719771868967051,0.3719554999426279,0.37193381804522335,0.3719121412024287,0.3718904694121821,0.371868802672423,0.371847140981092,0.37182548433613094,0.3718038327354829,0.371782186177092,0.37176054465890374,0.3717389081788647,0.3717172767349228,0.3716956503250269,0.3716740289471273,0.3716524125991753,0.3716308012791237,0.371609194984926,0.37158759371453737,0.37156599746591384,0.3715444062370128,0.37152282002579284,0.3715012388302135,0.3714796626482359,0.37145809147782194,0.37143652531693494,0.3714149641635394,0.3713934080156009,0.3713718568710863,0.3713503107279635,0.3713287695842018,0.3713072334377714,0.37128570228664387,0.371264176128792,0.37124265496218956,0.37122113878481167,0.3711996275946345,0.37117812138963546,0.3711566201677931,0.3711351239270872,0.37111363266549857,0.3710921463810094,0.3710706650716029,0.37104918873526355,0.37102771736997675,0.37100625097372936,0.3709847895445093,0.3709633330803056,0.3709418815791085,0.3709204350389094,0.37089899345770094,0.3708775568334767,0.3708561251642316,0.3708346984479617,0.3708132766826642,0.3707918598663374,0.37077044799698083,0.3707490410725952,0.3707276390911822,0.37070624205074504,0.3706848499492876,0.37066346278481527,0.3706420805553344,0.3706207032588526,0.3705993308933786,0.37057796345692223,0.3705566009474946,0.3705352433631078,0.3705138907017751,0.3704925429615111,0.37047120014033125,0.3704498622362523,0.3704285292472922,0.37040720117146997,0.3703858780068058,0.3703645597513209,0.3703432464030377,0.37032193795997986,0.37030063442017214,0.3702793357816403,0.37025804204241136,0.37023675320051347,0.37021546925397575,0.3701941902008288,0.37017291603910396,0.37015164676683404,0.37013038238205265,0.3701091228827948,0.37008786826709655,0.3700666185329951,0.3700453736785286,0.3700241337017366,0.37000289860065955,0.36998166837333923,0.36996044301781833,0.36993922253214084,0.3699180069143517,0.36989679616249727,0.36987559027462463,0.36985438924878217,0.36983319308301954,0.36981200177538737,0.36979081532393726,0.3697696337267223,0.36974845698179626,0.36972728508721425,0.3697061180410327,0.36968495584130867,0.36966379848610076,0.36964264597346846,0.36962149830147245,0.3696003554681744,0.3695792174716373,0.36955808430992515,0.3695369559811029,0.3695158324832369,0.36949471381439425,0.36947359997264356,0.3694524909560542,0.3694313867626969,0.36941028739064324,0.3693891928379662,0.3693681031027395,0.3693470181830382,0.36932593807693853,0.3693048627825176,0.36928379229785374,0.3692627266210264,0.36924166575011597,0.3692206096832041,0.3691995584183735,0.36917851195370793,0.36915747028729223,0.36913643341721236,0.3691154013415555,0.36909437405840967,0.3690733515658641,0.3690523338620092,0.3690313209449363,0.36901031281273783,0.3689893094635075,0.36896831089534,0.36894731710633094,0.3689263280945772,0.3689053438581767,0.36888436439522854,0.36886338970383264,0.36884241978209015,0.3688214546281035,0.3688004942399758,0.36877953861581164,0.36875858775371634,0.3687376416517964,0.36871670030815956,0.3686957637209145,0.36867483188817096,0.36865390480803983,0.3686329824786329,0.36861206489806336,0.36859115206444504,0.3685702439758933,0.3685493406305241,0.36852844202645485,0.3685075481618038,0.3684866590346904,0.3684657746432352,0.36844489498555955,0.3684240200597862,0.3684031498640387],"x":[3.0,3.0033986405437827,3.006797281087565,3.0101959216313476,3.01359456217513,3.0169932027189126,3.020391843262695,3.0237904838064775,3.0271891243502598,3.0305877648940425,3.0339864054378247,3.0373850459816074,3.0407836865253897,3.0441823270691724,3.0475809676129546,3.0509796081567373,3.05437824870052,3.0577768892443022,3.061175529788085,3.064574170331867,3.06797281087565,3.071371451419432,3.074770091963215,3.078168732506997,3.0815673730507798,3.084966013594562,3.0883646541383447,3.091763294682127,3.0951619352259097,3.098560575769692,3.1019592163134746,3.1053578568572573,3.1087564974010395,3.1121551379448222,3.1155537784886045,3.118952419032387,3.1223510595761694,3.125749700119952,3.1291483406637344,3.132546981207517,3.1359456217512993,3.139344262295082,3.1427429028388643,3.146141543382647,3.1495401839264296,3.152938824470212,3.1563374650139946,3.159736105557777,3.1631347461015595,3.166533386645342,3.1699320271891245,3.1733306677329067,3.1767293082766894,3.1801279488204717,3.1835265893642544,3.1869252299080366,3.1903238704518193,3.1937225109956016,3.1971211515393843,3.200519792083167,3.203918432626949,3.207317073170732,3.210715713714514,3.214114354258297,3.217512994802079,3.220911635345862,3.224310275889644,3.2277089164334267,3.231107556977209,3.2345061975209917,3.237904838064774,3.2413034786085566,3.244702119152339,3.2481007596961216,3.2514994002399042,3.2548980407836865,3.258296681327469,3.2616953218712514,3.265093962415034,3.2684926029588164,3.271891243502599,3.2752898840463813,3.278688524590164,3.2820871651339463,3.285485805677729,3.288884446221511,3.292283086765294,3.295681727309076,3.299080367852859,3.3024790083966415,3.305877648940424,3.3092762894842065,3.3126749300279887,3.3160735705717714,3.3194722111155537,3.3228708516593364,3.3262694922031186,3.3296681327469013,3.3330667732906836,3.3364654138344663,3.3398640543782485,3.343262694922031,3.3466613354658135,3.350059976009596,3.353458616553379,3.356857257097161,3.360255897640944,3.363654538184726,3.3670531787285087,3.370451819272291,3.3738504598160737,3.377249100359856,3.3806477409036386,3.384046381447421,3.3874450219912036,3.390843662534986,3.3942423030787685,3.3976409436225508,3.4010395841663335,3.404438224710116,3.4078368652538984,3.411235505797681,3.4146341463414633,3.418032786885246,3.4214314274290283,3.424830067972811,3.4282287085165932,3.431627349060376,3.435025989604158,3.438424630147941,3.441823270691723,3.445221911235506,3.4486205517792885,3.4520191923230708,3.4554178328668534,3.4588164734106357,3.4622151139544184,3.4656137544982006,3.4690123950419833,3.4724110355857656,3.4758096761295483,3.4792083166733305,3.482606957217113,3.4860055977608955,3.489404238304678,3.4928028788484604,3.496201519392243,3.499600159936026,3.502998800479808,3.5063974410235907,3.509796081567373,3.5131947221111557,3.516593362654938,3.5199920031987206,3.523390643742503,3.5267892842862856,3.530187924830068,3.5335865653738505,3.5369852059176328,3.5403838464614155,3.5437824870051977,3.5471811275489804,3.550579768092763,3.5539784086365453,3.557377049180328,3.5607756897241103,3.564174330267893,3.5675729708116752,3.570971611355458,3.57437025189924,3.577768892443023,3.581167532986805,3.584566173530588,3.58796481407437,3.5913634546181528,3.594762095161935,3.5981607357057177,3.6015593762495004,3.6049580167932826,3.6083566573370653,3.6117552978808476,3.6151539384246303,3.6185525789684125,3.6219512195121952,3.6253498600559775,3.62874850059976,3.6321471411435424,3.635545781687325,3.6389444222311074,3.64234306277489,3.6457417033186723,3.649140343862455,3.6525389844062377,3.65593762495002,3.6593362654938026,3.662734906037585,3.6661335465813676,3.66953218712515,3.6729308276689325,3.676329468212715,3.6797281087564975,3.6831267493002797,3.6865253898440624,3.6899240303878447,3.6933226709316274,3.69672131147541,3.7001199520191923,3.703518592562975,3.7069172331067572,3.71031587365054,3.713714514194322,3.717113154738105,3.720511795281887,3.72391043582567,3.727309076369452,3.7307077169132348,3.734106357457017,3.7375049980007997,3.740903638544582,3.7443022790883647,3.7477009196321474,3.7510995601759296,3.7544982007197123,3.7578968412634945,3.7612954818072772,3.7646941223510595,3.768092762894842,3.7714914034386244,3.774890043982407,3.7782886845261894,3.781687325069972,3.7850859656137543,3.788484606157537,3.7918832467013193,3.795281887245102,3.7986805277888847,3.802079168332667,3.8054778088764496,3.808876449420232,3.8122750899640145,3.815673730507797,3.8190723710515795,3.8224710115953617,3.8258696521391444,3.8292682926829267,3.8326669332267094,3.8360655737704916,3.8394642143142743,3.8428628548580566,3.8462614954018393,3.849660135945622,3.853058776489404,3.856457417033187,3.859856057576969,3.863254698120752,3.866653338664534,3.870051979208317,3.873450619752099,3.8768492602958817,3.880247900839664,3.8836465413834467,3.887045181927229,3.8904438224710116,3.893842463014794,3.8972411035585766,3.9006397441023593,3.9040383846461415,3.907437025189924,3.9108356657337064,3.914234306277489,3.9176329468212714,3.921031587365054,3.9244302279088363,3.927828868452619,3.9312275089964013,3.934626149540184,3.938024790083966,3.941423430627749,3.9448220711715316,3.948220711715314,3.9516193522590966,3.955017992802879,3.9584166333466615,3.9618152738904437,3.9652139144342264,3.9686125549780087,3.9720111955217914,3.9754098360655736,3.9788084766093563,3.9822071171531386,3.9856057576969213,3.9890043982407035,3.992403038784486,3.995801679328269,3.999200319872051,4.002598960415834,4.005997600959616,4.009396241503398,4.0127948820471815,4.016193522590964,4.019592163134746,4.022990803678528,4.026389444222311,4.029788084766094,4.033186725309876,4.036585365853658,4.039984006397441,4.0433826469412235,4.046781287485006,4.050179928028789,4.053578568572571,4.056977209116353,4.060375849660136,4.063774490203919,4.067173130747701,4.070571771291483,4.0739704118352655,4.077369052379049,4.080767692922831,4.084166333466613,4.087564974010395,4.090963614554179,4.094362255097961,4.097760895641743,4.101159536185526,4.1045581767293084,4.107956817273091,4.111355457816873,4.114754098360656,4.118152738904438,4.121551379448221,4.124950019992003,4.128348660535786,4.131747301079568,4.1351459416233505,4.138544582167133,4.141943222710916,4.145341863254698,4.14874050379848,4.1521391443422635,4.155537784886046,4.158936425429828,4.16233506597361,4.165733706517393,4.169132347061176,4.172530987604958,4.17592962814874,4.179328268692523,4.1827269092363055,4.186125549780088,4.18952419032387,4.192922830867653,4.196321471411435,4.199720111955218,4.203118752499001,4.206517393042783,4.209916033586565,4.2133146741303475,4.216713314674131,4.220111955217913,4.223510595761695,4.226909236305477,4.230307876849261,4.233706517393043,4.237105157936825,4.240503798480607,4.2439024390243905,4.247301079568173,4.250699720111955,4.254098360655738,4.25749700119952,4.260895641743303,4.264294282287085,4.267692922830868,4.27109156337465,4.2744902039184325,4.277888844462215,4.281287485005998,4.28468612554978,4.288084766093562,4.291483406637345,4.294882047181128,4.29828068772491,4.301679328268692,4.305077968812475,4.308476609356258,4.31187524990004,4.315273890443822,4.318672530987605,4.3220711715313875,4.32546981207517,4.328868452618952,4.332267093162735,4.335665733706517,4.3390643742503,4.342463014794083,4.345861655337865,4.349260295881647,4.35265893642543,4.356057576969213,4.359456217512995,4.362854858056777,4.3662534986005594,4.369652139144343,4.373050779688125,4.376449420231907,4.379848060775689,4.3832467013194725,4.386645341863255,4.390043982407037,4.39344262295082,4.396841263494602,4.400239904038385,4.403638544582167,4.40703718512595,4.410435825669732,4.4138344662135145,4.417233106757297,4.42063174730108,4.424030387844862,4.427429028388644,4.430827668932427,4.43422630947621,4.437624950019992,4.441023590563774,4.444422231107557,4.44782087165134,4.451219512195122,4.454618152738904,4.458016793282687,4.4614154338264695,4.464814074370252,4.468212714914034,4.471611355457817,4.475009996001599,4.478408636545382,4.481807277089164,4.485205917632947,4.488604558176729,4.492003198720512,4.495401839264295,4.498800479808077,4.502199120351859,4.5055977608956415,4.508996401439425,4.512395041983207,4.515793682526989,4.519192323070771,4.5225909636145545,4.525989604158337,4.529388244702119,4.532786885245901,4.536185525789684,4.539584166333467,4.542982806877249,4.546381447421032,4.549780087964814,4.5531787285085965,4.556577369052379,4.559976009596162,4.563374650139944,4.566773290683726,4.570171931227509,4.573570571771292,4.576969212315074,4.580367852858856,4.5837664934026385,4.587165133946422,4.590563774490204,4.593962415033986,4.597361055577769,4.600759696121552,4.604158336665334,4.607556977209116,4.610955617752899,4.614354258296681,4.617752898840464,4.621151539384246,4.624550179928029,4.627948820471811,4.631347461015594,4.634746101559376,4.638144742103159,4.641543382646941,4.6449420231907235,4.648340663734507,4.651739304278289,4.655137944822071,4.658536585365853,4.6619352259096365,4.665333866453419,4.668732506997201,4.672131147540983,4.675529788084766,4.678928428628549,4.682327069172331,4.685725709716113,4.689124350259896,4.6925229908036785,4.695921631347461,4.699320271891244,4.702718912435026,4.706117552978808,4.709516193522591,4.712914834066374,4.716313474610156,4.719712115153938,4.7231107556977205,4.726509396241504,4.729908036785286,4.733306677329068,4.73670531787285,4.740103958416634,4.743502598960416,4.746901239504198,4.750299880047981,4.7536985205917635,4.757097161135546,4.760495801679328,4.763894442223111,4.767293082766893,4.770691723310676,4.774090363854458,4.777489004398241,4.780887644942023,4.7842862854858055,4.787684926029588,4.791083566573371,4.794482207117153,4.797880847660935,4.8012794882047185,4.804678128748501,4.808076769292283,4.811475409836065,4.814874050379848,4.818272690923631,4.821671331467413,4.825069972011195,4.828468612554978,4.8318672530987605,4.835265893642543,4.838664534186325,4.842063174730108,4.84546181527389,4.848860455817673,4.852259096361456,4.855657736905238,4.85905637744902,4.8624550179928026,4.865853658536586,4.869252299080368,4.87265093962415,4.876049580167932,4.879448220711716,4.882846861255498,4.88624550179928,4.889644142343063,4.8930427828868455,4.896441423430628,4.89984006397441,4.903238704518193,4.906637345061975,4.910035985605758,4.91343462614954,4.916833266693323,4.920231907237105,4.9236305477808875,4.92702918832467,4.930427828868453,4.933826469412235,4.937225109956017,4.9406237504998005,4.944022391043583,4.947421031587365,4.950819672131147,4.95421831267493,4.957616953218713,4.961015593762495,4.964414234306277,4.96781287485006,4.9712115153938425,4.974610155937625,4.978008796481407,4.98140743702519,4.984806077568972,4.988204718112755,4.991603358656538,4.99500199920032,4.998400639744102,5.001799280287885,5.005197920831668,5.00859656137545,5.011995201919232,5.0153938424630145,5.018792483006798,5.02219112355058,5.025589764094362,5.028988404638144,5.0323870451819275,5.03578568572571,5.039184326269492,5.042582966813275,5.045981607357057,5.04938024790084,5.052778888444622,5.056177528988405,5.059576169532187,5.0629748100759695,5.066373450619752,5.069772091163535,5.073170731707317,5.076569372251099,5.079968012794882,5.083366653338665,5.086765293882447,5.090163934426229,5.093562574970012,5.096961215513795,5.100359856057577,5.103758496601359,5.107157137145142,5.1105557776889246,5.113954418232707,5.117353058776489,5.120751699320272,5.124150339864054,5.127548980407837,5.130947620951619,5.134346261495402,5.137744902039184,5.141143542582967,5.14454218312675,5.147940823670532,5.151339464214314,5.1547381047580965,5.15813674530188,5.161535385845662,5.164934026389444,5.168332666933226,5.1717313074770095,5.175129948020792,5.178528588564574,5.181927229108356,5.185325869652139,5.188724510195922,5.192123150739704,5.195521791283487,5.198920431827269,5.2023190723710515,5.205717712914834,5.209116353458617,5.212514994002399,5.215913634546181,5.219312275089964,5.222710915633747,5.226109556177529,5.229508196721311,5.2329068372650935,5.236305477808877,5.239704118352659,5.243102758896441,5.246501399440224,5.249900039984007,5.253298680527789,5.256697321071571,5.260095961615354,5.2634946021591364,5.266893242702919,5.270291883246701,5.273690523790484,5.277089164334266,5.280487804878049,5.283886445421831,5.287285085965614,5.290683726509396,5.2940823670531785,5.297481007596962,5.300879648140744,5.304278288684526,5.307676929228308,5.3110755697720915,5.314474210315874,5.317872850859656,5.321271491403438,5.324670131947221,5.328068772491004,5.331467413034786,5.334866053578568,5.338264694122351,5.3416633346661335,5.345061975209916,5.348460615753699,5.351859256297481,5.355257896841263,5.358656537385046,5.362055177928829,5.365453818472611,5.368852459016393,5.3722510995601755,5.375649740103959,5.379048380647741,5.382447021191523,5.385845661735305,5.389244302279089,5.392642942822871,5.396041583366653,5.399440223910436,5.4028388644542185,5.406237504998001,5.409636145541783,5.413034786085566,5.416433426629348,5.419832067173131,5.423230707716913,5.426629348260696,5.430027988804478,5.4334266293482605,5.436825269892044,5.440223910435826,5.443622550979608,5.44702119152339,5.4504198320671735,5.453818472610956,5.457217113154738,5.46061575369852,5.464014394242303,5.467413034786086,5.470811675329868,5.47421031587365,5.477608956417433,5.4810075969612155,5.484406237504998,5.487804878048781,5.491203518592563,5.494602159136345,5.498000799680128,5.501399440223911,5.504798080767693,5.508196721311475,5.511595361855258,5.514994002399041,5.518392642942823,5.521791283486605,5.5251899240303874,5.528588564574171,5.531987205117953,5.535385845661735,5.538784486205518,5.5421831267493005,5.545581767293083,5.548980407836865,5.552379048380648,5.55577768892443,5.559176329468213,5.562574970011995,5.565973610555778,5.56937225109956,5.5727708916433425,5.576169532187125,5.579568172730908,5.58296681327469,5.586365453818472,5.5897640943622555,5.593162734906038,5.59656137544982,5.599960015993602,5.603358656537385,5.606757297081168,5.61015593762495,5.613554578168732,5.616953218712515,5.6203518592562975,5.62375049980008,5.627149140343862,5.630547780887645,5.633946421431427,5.63734506197521,5.640743702518993,5.644142343062775,5.647540983606557,5.65093962415034,5.654338264694123,5.657736905237905,5.661135545781687,5.6645341863254695,5.667932826869253,5.671331467413035,5.674730107956817,5.678128748500599,5.6815273890443825,5.684926029588165,5.688324670131947,5.69172331067573,5.695121951219512,5.698520591763295,5.701919232307077,5.70531787285086,5.708716513394642,5.7121151539384245,5.715513794482207,5.71891243502599,5.722311075569772,5.725709716113554,5.729108356657337,5.73250699720112,5.735905637744902,5.739304278288684,5.742702918832467,5.74610155937625,5.749500199920032,5.752898840463814,5.756297481007597,5.7596961215513796,5.763094762095162,5.766493402638944,5.769892043182727,5.773290683726509,5.776689324270292,5.780087964814074,5.783486605357857,5.786885245901639,5.790283886445422,5.793682526989205,5.797081167532987,5.800479808076769,5.8038784486205515,5.807277089164335,5.810675729708117,5.814074370251899,5.817473010795681,5.8208716513394645,5.824270291883247,5.827668932427029,5.831067572970811,5.834466213514594,5.837864854058377,5.841263494602159,5.844662135145942,5.848060775689724,5.8514594162335065,5.854858056777289,5.858256697321072,5.861655337864854,5.865053978408636,5.868452618952419,5.871851259496202,5.875249900039984,5.878648540583766,5.8820471811275485,5.885445821671332,5.888844462215114,5.892243102758896,5.895641743302679,5.899040383846462,5.902439024390244,5.905837664934026,5.909236305477809,5.9126349460215915,5.916033586565374,5.919432227109156,5.922830867652939,5.926229508196721,5.929628148740504,5.933026789284287,5.936425429828069,5.939824070371851,5.9432227109156335,5.946621351459417,5.950019992003199,5.953418632546981,5.956817273090763,5.9602159136345465,5.963614554178329,5.967013194722111,5.970411835265893,5.973810475809676,5.977209116353459,5.980607756897241,5.984006397441024,5.987405037984806,5.9908036785285885,5.994202319072371,5.997600959616154,6.000999600159936,6.004398240703718,6.007796881247501,6.011195521791284,6.014594162335066,6.017992802878848,6.0213914434226306,6.024790083966414,6.028188724510196,6.031587365053978,6.034986005597761,6.038384646141544,6.041783286685326,6.045181927229108,6.048580567772891,6.0519792083166735,6.055377848860456,6.058776489404238,6.062175129948021,6.065573770491803,6.068972411035586,6.072371051579368,6.075769692123151,6.079168332666933,6.0825669732107155,6.085965613754499,6.089364254298281,6.092762894842063,6.096161535385845,6.0995601759296285,6.102958816473411,6.106357457017193,6.109756097560975,6.113154738104758,6.116553378648541,6.119952019192323,6.123350659736105,6.126749300279888,6.1301479408236705,6.133546581367453,6.136945221911236,6.140343862455018,6.1437425029988,6.147141143542583,6.150539784086366,6.153938424630148,6.15733706517393,6.160735705717713,6.164134346261496,6.167532986805278,6.17093162734906,6.1743302678928424,6.177728908436626,6.181127548980408,6.18452618952419,6.187924830067973,6.1913234706117555,6.194722111155538,6.19812075169932,6.201519392243103,6.204918032786885,6.208316673330668,6.21171531387445,6.215113954418233,6.218512594962015,6.2219112355057975,6.22530987604958,6.228708516593363,6.232107157137145,6.235505797680927,6.2389044382247105,6.242303078768493,6.245701719312275,6.249100359856057,6.25249900039984,6.255897640943623,6.259296281487405,6.262694922031187,6.26609356257497,6.2694922031187525,6.272890843662535,6.276289484206317,6.2796881247501,6.283086765293882,6.286485405837665,6.289884046381448,6.29328268692523,6.296681327469012,6.300079968012795,6.303478608556578,6.30687724910036,6.310275889644142,6.3136745301879245,6.317073170731708,6.32047181127549,6.323870451819272,6.327269092363054,6.3306677329068375,6.33406637345062,6.337465013994402,6.340863654538185,6.344262295081967,6.34766093562575,6.351059576169532,6.354458216713315,6.357856857257097,6.3612554978008795,6.364654138344662,6.368052778888445,6.371451419432227,6.374850059976009,6.378248700519792,6.381647341063575,6.385045981607357,6.388444622151139,6.391843262694922,6.395241903238705,6.398640543782487,6.402039184326269,6.405437824870052,6.408836465413835,6.412235105957617,6.415633746501399,6.419032387045182,6.4224310275889644,6.425829668132747,6.429228308676529,6.432626949220312,6.436025589764094,6.439424230307877,6.44282287085166,6.446221511395442,6.449620151939224,6.4530187924830065,6.45641743302679,6.459816073570572,6.463214714114354,6.466613354658136,6.4700119952019195,6.473410635745702,6.476809276289484,6.480207916833267,6.483606557377049,6.487005197920832,6.490403838464614,6.493802479008397,6.497201119552179,6.5005997600959615,6.503998400639744,6.507397041183527,6.510795681727309,6.514194322271091,6.517592962814874,6.520991603358657,6.524390243902439,6.527788884446221,6.531187524990004,6.534586165533787,6.537984806077569,6.541383446621351,6.544782087165134,6.548180727708917,6.551579368252699,6.554978008796481,6.558376649340264,6.5617752898840465,6.565173930427829,6.568572570971611,6.571971211515394,6.575369852059176,6.578768492602959,6.582167133146742,6.585565773690524,6.588964414234306,6.5923630547780885,6.595761695321872,6.599160335865654,6.602558976409436,6.605957616953218,6.6093562574970015,6.612754898040784,6.616153538584566,6.619552179128348,6.622950819672131,6.626349460215914,6.629748100759696,6.633146741303479,6.636545381847261,6.6399440223910435,6.643342662934826,6.646741303478609,6.650139944022391,6.653538584566173,6.656937225109956,6.660335865653739,6.663734506197521,6.667133146741303,6.670531787285086,6.673930427828869,6.677329068372651,6.680727708916433,6.684126349460216,6.687524990003999,6.690923630547781,6.694322271091563,6.697720911635346,6.7011195521791285,6.704518192722911,6.707916833266693,6.711315473810476,6.714714114354258,6.718112754898041,6.721511395441823,6.724910035985606,6.728308676529388,6.7317073170731705,6.735105957616954,6.738504598160736,6.741903238704518,6.7453018792483,6.7487005197920835,6.752099160335866,6.755497800879648,6.75889644142343,6.762295081967213,6.765693722510996,6.769092363054778,6.77249100359856,6.775889644142343,6.7792882846861255,6.782686925229908,6.786085565773691,6.789484206317473,6.792882846861255,6.796281487405038,6.799680127948821,6.803078768492603,6.806477409036385,6.809876049580168,6.813274690123951,6.816673330667733,6.820071971211515,6.8234706117552975,6.826869252299081,6.830267892842863,6.833666533386645,6.837065173930428,6.8404638144742105,6.843862455017993,6.847261095561775,6.850659736105558,6.85405837664934,6.857457017193123,6.860855657736905,6.864254298280688,6.86765293882447,6.8710515793682525,6.874450219912035,6.877848860455818,6.8812475009996,6.884646141543382,6.8880447820871655,6.891443422630948,6.89484206317473,6.898240703718512,6.901639344262295,6.905037984806078,6.90843662534986,6.911835265893642,6.915233906437425,6.9186325469812076,6.92203118752499,6.925429828068772,6.928828468612555,6.932227109156337,6.93562574970012,6.939024390243903,6.942423030787685,6.945821671331467,6.94922031187525,6.952618952419033,6.956017592962815,6.959416233506597,6.9628148740503795,6.966213514594163,6.969612155137945,6.973010795681727,6.976409436225509,6.9798080767692925,6.983206717313075,6.986605357856857,6.99000399840064,6.993402638944422,6.996801279488205,7.000199920031987,7.00359856057577,7.006997201119552,7.0103958416633345,7.013794482207117,7.0171931227509,7.020591763294682,7.023990403838464,7.0273890443822475,7.03078768492603,7.034186325469812,7.037584966013594,7.040983606557377,7.04438224710116,7.047780887644942,7.051179528188724,7.054578168732507,7.05797680927629,7.061375449820072,7.064774090363854,7.068172730907637,7.0715713714514195,7.074970011995202,7.078368652538985,7.081767293082767,7.085165933626549,7.088564574170332,7.091963214714115,7.095361855257897,7.098760495801679,7.1021591363454615,7.105557776889245,7.108956417433027,7.112355057976809,7.115753698520591,7.1191523390643745,7.122550979608157,7.125949620151939,7.129348260695722,7.132746901239504,7.136145541783287,7.139544182327069,7.142942822870852,7.146341463414634,7.1497401039584165,7.153138744502199,7.156537385045982,7.159936025589764,7.163334666133546,7.166733306677329,7.170131947221112,7.173530587764894,7.176929228308676,7.180327868852459,7.183726509396242,7.187125149940024,7.190523790483806,7.193922431027589,7.197321071571372,7.200719712115154,7.204118352658936,7.207516993202719,7.2109156337465015,7.214314274290284,7.217712914834066,7.221111555377849,7.224510195921631,7.227908836465414,7.231307477009197,7.234706117552979,7.238104758096761,7.2415033986405435,7.244902039184327,7.248300679728109,7.251699320271891,7.255097960815673,7.2584966013594565,7.261895241903239,7.265293882447021,7.268692522990803,7.272091163534586,7.275489804078369,7.278888444622151,7.282287085165934,7.285685725709716,7.2890843662534985,7.292483006797281,7.295881647341064,7.299280287884846,7.302678928428628,7.306077568972411,7.309476209516194,7.312874850059976,7.316273490603758,7.319672131147541,7.323070771691324,7.326469412235106,7.329868052778888,7.333266693322671,7.336665333866454,7.340063974410236,7.343462614954018,7.346861255497801,7.3502598960415835,7.353658536585366,7.357057177129148,7.360455817672931,7.363854458216713,7.367253098760496,7.370651739304278,7.374050379848061,7.377449020391843,7.3808476609356255,7.384246301479409,7.387644942023191,7.391043582566973,7.394442223110755,7.3978408636545385,7.401239504198321,7.404638144742103,7.408036785285885,7.411435425829668,7.414834066373451,7.418232706917233,7.421631347461015,7.425029988004798,7.4284286285485805,7.431827269092363,7.435225909636146,7.438624550179928,7.44202319072371,7.445421831267493,7.448820471811276,7.452219112355058,7.45561775289884,7.459016393442623,7.462415033986406,7.465813674530188,7.46921231507397,7.4726109556177525,7.476009596161536,7.479408236705318,7.4828068772491,7.486205517792883,7.4896041583366655,7.493002798880448,7.49640143942423,7.499800079968013,7.503198720511795,7.506597361055578,7.50999600159936,7.513394642143143,7.516793282686925,7.5201919232307075,7.523590563774491,7.526989204318273,7.530387844862055,7.533786485405837,7.5371851259496205,7.540583766493403,7.543982407037185,7.547381047580967,7.55077968812475,7.554178328668533,7.557576969212315,7.560975609756097,7.56437425029988,7.567772890843663,7.571171531387445,7.574570171931228,7.57796881247501,7.5813674530187924,7.584766093562575,7.588164734106358,7.59156337465014,7.594962015193922,7.598360655737705,7.601759296281488,7.60515793682527,7.608556577369052,7.6119552179128345,7.615353858456618,7.6187524990004,7.622151139544182,7.625549780087965,7.6289484206317475,7.63234706117553,7.635745701719312,7.639144342263095,7.642542982806877,7.64594162335066,7.649340263894442,7.652738904438225,7.656137544982007,7.6595361855257895,7.662934826069572,7.666333466613355,7.669732107157137,7.673130747700919,7.6765293882447025,7.679928028788485,7.683326669332267,7.686725309876049,7.690123950419832,7.693522590963615,7.696921231507397,7.700319872051179,7.703718512594962,7.707117153138745,7.710515793682527,7.713914434226309,7.717313074770092,7.7207117153138745,7.724110355857657,7.72750899640144,7.730907636945222,7.734306277489004,7.737704918032787,7.74110355857657,7.744502199120352,7.747900839664134,7.7512994802079165,7.7546981207517,7.758096761295482,7.761495401839264,7.764894042383046,7.7682926829268295,7.771691323470612,7.775089964014394,7.778488604558177,7.781887245101959,7.785285885645742,7.788684526189524,7.792083166733307,7.795481807277089,7.7988804478208715,7.802279088364654,7.805677728908437,7.809076369452219,7.812475009996001,7.815873650539784,7.819272291083567,7.822670931627349,7.826069572171131,7.829468212714914,7.832866853258697,7.836265493802479,7.839664134346261,7.843062774890044,7.846461415433827,7.849860055977609,7.853258696521391,7.856657337065174,7.8600559776089565,7.863454618152739,7.866853258696521,7.870251899240304,7.873650539784086,7.877049180327869,7.880447820871652,7.883846461415434,7.887245101959216,7.8906437425029985,7.894042383046782,7.897441023590564,7.900839664134346,7.904238304678128,7.9076369452219115,7.911035585765694,7.914434226309476,7.917832866853258,7.921231507397041,7.924630147940824,7.928028788484606,7.931427429028389,7.934826069572171,7.9382247101159535,7.941623350659736,7.945021991203519,7.948420631747301,7.951819272291083,7.955217912834866,7.958616553378649,7.962015193922431,7.965413834466213,7.968812475009996,7.972211115553779,7.975609756097561,7.979008396641343,7.982407037185126,7.985805677728909,7.989204318272691,7.992602958816473,7.996001599360256,7.9994002399040385,8.002798880447822,8.006197520991604,8.009596161535386,8.012994802079168,8.01639344262295,8.019792083166733,8.023190723710515,8.0265893642543,8.029988004798081,8.033386645341864,8.036785285885646,8.040183926429428,8.04358256697321,8.046981207516993,8.050379848060775,8.053778488604559,8.057177129148341,8.060575769692123,8.063974410235906,8.067373050779688,8.07077169132347,8.074170331867252,8.077568972411036,8.080967612954819,8.084366253498601,8.087764894042383,8.091163534586165,8.094562175129948,8.09796081567373,8.101359456217512,8.104758096761296,8.108156737305078,8.11155537784886,8.114954018392643,8.118352658936425,8.121751299480207,8.12514994002399,8.128548580567774,8.131947221111556,8.135345861655338,8.13874450219912,8.142143142742903,8.145541783286685,8.148940423830467,8.15233906437425,8.155737704918034,8.159136345461816,8.162534986005598,8.16593362654938,8.169332267093163,8.172730907636945,8.176129548180727,8.179528188724511,8.182926829268293,8.186325469812076,8.189724110355858,8.19312275089964,8.196521391443422,8.199920031987205,8.203318672530987,8.20671731307477,8.210115953618553,8.213514594162335,8.216913234706118,8.2203118752499,8.223710515793682,8.227109156337464,8.230507796881248,8.23390643742503,8.237305077968813,8.240703718512595,8.244102359056377,8.24750099960016,8.250899640143942,8.254298280687724,8.257696921231508,8.26109556177529,8.264494202319073,8.267892842862855,8.271291483406637,8.27469012395042,8.278088764494202,8.281487405037986,8.284886045581768,8.28828468612555,8.291683326669332,8.295081967213115,8.298480607756897,8.30187924830068,8.305277888844461,8.308676529388245,8.312075169932028,8.31547381047581,8.318872451019592,8.322271091563374,8.325669732107157,8.329068372650939,8.332467013194723,8.335865653738505,8.339264294282287,8.34266293482607,8.346061575369852,8.349460215913634,8.352858856457416,8.356257497001199,8.359656137544983,8.363054778088765,8.366453418632547,8.36985205917633,8.373250699720112,8.376649340263894,8.380047980807676,8.38344662135146,8.386845261895242,8.390243902439025,8.393642542982807,8.39704118352659,8.400439824070371,8.403838464614154,8.407237105157936,8.41063574570172,8.414034386245502,8.417433026789285,8.420831667333067,8.424230307876849,8.427628948420631,8.431027588964414,8.434426229508198,8.43782487005198,8.441223510595762,8.444622151139544,8.448020791683327,8.451419432227109,8.454818072770891,8.458216713314673,8.461615353858457,8.46501399440224,8.468412634946022,8.471811275489804,8.475209916033586,8.478608556577369,8.48200719712115,8.485405837664935,8.488804478208717,8.4922031187525,8.495601759296282,8.499000399840064,8.502399040383846,8.505797680927628,8.50919632147141,8.512594962015195,8.515993602558977,8.519392243102759,8.522790883646541,8.526189524190324,8.529588164734106,8.532986805277888,8.536385445821672,8.539784086365454,8.543182726909237,8.546581367453019,8.549980007996801,8.553378648540583,8.556777289084366,8.560175929628148,8.563574570171932,8.566973210715714,8.570371851259496,8.573770491803279,8.577169132347061,8.580567772890843,8.583966413434625,8.58736505397841,8.590763694522192,8.594162335065974,8.597560975609756,8.600959616153538,8.60435825669732,8.607756897241103,8.611155537784885,8.61455417832867,8.617952818872451,8.621351459416234,8.624750099960016,8.628148740503798,8.63154738104758,8.634946021591363,8.638344662135147,8.641743302678929,8.645141943222711,8.648540583766493,8.651939224310276,8.655337864854058,8.65873650539784,8.662135145941622,8.665533786485407,8.668932427029189,8.672331067572971,8.675729708116753,8.679128348660536,8.682526989204318,8.6859256297481,8.689324270291884,8.692722910835666,8.696121551379449,8.69952019192323,8.702918832467013,8.706317473010795,8.709716113554578,8.71311475409836,8.716513394642144,8.719912035185926,8.723310675729708,8.72670931627349,8.730107956817273,8.733506597361055,8.736905237904837,8.740303878448621,8.743702518992404,8.747101159536186,8.750499800079968,8.75389844062375,8.757297081167533,8.760695721711315,8.764094362255097,8.767493002798881,8.770891643342663,8.774290283886446,8.777688924430228,8.78108756497401,8.784486205517792,8.787884846061575,8.791283486605359,8.79468212714914,8.798080767692923,8.801479408236705,8.804878048780488,8.80827668932427,8.811675329868052,8.815073970411834,8.818472610955618,8.8218712514994,8.825269892043183,8.828668532586965,8.832067173130747,8.83546581367453,8.838864454218312,8.842263094762096,8.845661735305878,8.84906037584966,8.852459016393443,8.855857656937225,8.859256297481007,8.86265493802479,8.866053578568573,8.869452219112356,8.872850859656138,8.87624950019992,8.879648140743702,8.883046781287485,8.886445421831267,8.88984406237505,8.893242702918833,8.896641343462615,8.900039984006398,8.90343862455018,8.906837265093962,8.910235905637744,8.913634546181527,8.91703318672531,8.920431827269093,8.923830467812875,8.927229108356658,8.93062774890044,8.934026389444222,8.937425029988004,8.940823670531787,8.94422231107557,8.947620951619353,8.951019592163135,8.954418232706917,8.9578168732507,8.961215513794482,8.964614154338264,8.968012794882048,8.97141143542583,8.974810075969613,8.978208716513395,8.981607357057177,8.98500599760096,8.988404638144742,8.991803278688524,8.995201919232308,8.99860055977609,9.001999200319872,9.005397840863655,9.008796481407437,9.012195121951219,9.015593762495001,9.018992403038785,9.022391043582568,9.02578968412635,9.029188324670132,9.032586965213914,9.035985605757697,9.039384246301479,9.042782886845261,9.046181527389045,9.049580167932827,9.05297880847661,9.056377449020392,9.059776089564174,9.063174730107956,9.066573370651739,9.069972011195523,9.073370651739305,9.076769292283087,9.08016793282687,9.083566573370652,9.086965213914434,9.090363854458216,9.093762495001998,9.097161135545782,9.100559776089565,9.103958416633347,9.10735705717713,9.110755697720911,9.114154338264694,9.117552978808476,9.12095161935226,9.124350259896042,9.127748900439824,9.131147540983607,9.134546181527389,9.137944822071171,9.141343462614953,9.144742103158736,9.14814074370252,9.151539384246302,9.154938024790084,9.158336665333866,9.161735305877649,9.165133946421431,9.168532586965213,9.171931227508997,9.17532986805278,9.178728508596562,9.182127149140344,9.185525789684126,9.188924430227909,9.19232307077169,9.195721711315473,9.199120351859257,9.20251899240304,9.205917632946822,9.209316273490604,9.212714914034386,9.216113554578168,9.21951219512195,9.222910835665735,9.226309476209517,9.229708116753299,9.233106757297081,9.236505397840864,9.239904038384646,9.243302678928428,9.24670131947221,9.250099960015994,9.253498600559777,9.256897241103559,9.260295881647341,9.263694522191123,9.267093162734906,9.270491803278688,9.273890443822472,9.277289084366254,9.280687724910036,9.284086365453819,9.2874850059976,9.290883646541383,9.294282287085165,9.297680927628948,9.301079568172732,9.304478208716514,9.307876849260296,9.311275489804078,9.31467413034786,9.318072770891643,9.321471411435425,9.32487005197921,9.328268692522991,9.331667333066774,9.335065973610556,9.338464614154338,9.34186325469812,9.345261895241903,9.348660535785685,9.352059176329469,9.355457816873251,9.358856457417033,9.362255097960816,9.365653738504598,9.36905237904838,9.372451019592162,9.375849660135946,9.379248300679729,9.382646941223511,9.386045581767293,9.389444222311075,9.392842862854858,9.39624150339864,9.399640143942422,9.403038784486206,9.406437425029988,9.40983606557377,9.413234706117553,9.416633346661335,9.420031987205117,9.4234306277489,9.426829268292684,9.430227908836466,9.433626549380248,9.43702518992403,9.440423830467813,9.443822471011595,9.447221111555377,9.45061975209916,9.454018392642944,9.457417033186726,9.460815673730508,9.46421431427429,9.467612954818073,9.471011595361855,9.474410235905637,9.477808876449421,9.481207516993203,9.484606157536986,9.488004798080768,9.49140343862455,9.494802079168332,9.498200719712115,9.501599360255897,9.50499800079968,9.508396641343463,9.511795281887245,9.515193922431028,9.51859256297481,9.521991203518592,9.525389844062374,9.528788484606158,9.53218712514994,9.535585765693723,9.538984406237505,9.542383046781287,9.54578168732507,9.549180327868852,9.552578968412634,9.555977608956418,9.5593762495002,9.562774890043983,9.566173530587765,9.569572171131547,9.57297081167533,9.576369452219112,9.579768092762896,9.583166733306678,9.58656537385046,9.589964014394242,9.593362654938025,9.596761295481807,9.60015993602559,9.603558576569371,9.606957217113155,9.610355857656938,9.61375449820072,9.617153138744502,9.620551779288284,9.623950419832067,9.627349060375849,9.630747700919633,9.634146341463415,9.637544982007197,9.64094362255098,9.644342263094762,9.647740903638544,9.651139544182326,9.654538184726109,9.657936825269893,9.661335465813675,9.664734106357457,9.66813274690124,9.671531387445022,9.674930027988804,9.678328668532586,9.68172730907637,9.685125949620152,9.688524590163935,9.691923230707717,9.6953218712515,9.698720511795281,9.702119152339064,9.705517792882846,9.70891643342663,9.712315073970412,9.715713714514195,9.719112355057977,9.722510995601759,9.725909636145541,9.729308276689324,9.732706917233108,9.73610555777689,9.739504198320672,9.742902838864454,9.746301479408237,9.749700119952019,9.753098760495801,9.756497401039583,9.759896041583367,9.76329468212715,9.766693322670932,9.770091963214714,9.773490603758496,9.776889244302279,9.78028788484606,9.783686525389845,9.787085165933627,9.79048380647741,9.793882447021192,9.797281087564974,9.800679728108756,9.804078368652538,9.80747700919632,9.810875649740105,9.814274290283887,9.81767293082767,9.821071571371451,9.824470211915234,9.827868852459016,9.831267493002798,9.834666133546582,9.838064774090364,9.841463414634147,9.844862055177929,9.848260695721711,9.851659336265493,9.855057976809276,9.858456617353058,9.861855257896842,9.865253898440624,9.868652538984406,9.872051179528189,9.875449820071971,9.878848460615753,9.882247101159535,9.88564574170332,9.889044382247102,9.892443022790884,9.895841663334666,9.899240303878448,9.90263894442223,9.906037584966013,9.909436225509797,9.91283486605358,9.916233506597361,9.919632147141144,9.923030787684926,9.926429428228708,9.92982806877249,9.933226709316273,9.936625349860057,9.940023990403839,9.943422630947621,9.946821271491403,9.950219912035186,9.953618552578968,9.95701719312275,9.960415833666534,9.963814474210317,9.967213114754099,9.970611755297881,9.974010395841663,9.977409036385446,9.980807676929228,9.98420631747301,9.987604958016794,9.991003598560576,9.994402239104359,9.99780087964814,10.001199520191923,10.004598160735705,10.007996801279488,10.011395441823272,10.014794082367054,10.018192722910836,10.021591363454618,10.0249900039984,10.028388644542183,10.031787285085965,10.035185925629747,10.038584566173531,10.041983206717314,10.045381847261096,10.048780487804878,10.05217912834866,10.055577768892443,10.058976409436225,10.062375049980009,10.065773690523791,10.069172331067573,10.072570971611356,10.075969612155138,10.07936825269892,10.082766893242702,10.086165533786485,10.089564174330269,10.092962814874051,10.096361455417833,10.099760095961615,10.103158736505398,10.10655737704918,10.109956017592962,10.113354658136746,10.116753298680528,10.12015193922431,10.123550579768093,10.126949220311875,10.130347860855657,10.13374650139944,10.137145141943222,10.140543782487006,10.143942423030788,10.14734106357457,10.150739704118353,10.154138344662135,10.157536985205917,10.1609356257497,10.164334266293483,10.167732906837266,10.171131547381048,10.17453018792483,10.177928828468612,10.181327469012395,10.184726109556177,10.18812475009996,10.191523390643743,10.194922031187525,10.198320671731308,10.20171931227509,10.205117952818872,10.208516593362654,10.211915233906437,10.21531387445022,10.218712514994003,10.222111155537785,10.225509796081568,10.22890843662535,10.232307077169132,10.235705717712914,10.239104358256697,10.24250299880048,10.245901639344263,10.249300279888045,10.252698920431827,10.25609756097561,10.259496201519392,10.262894842063174,10.266293482606958,10.26969212315074,10.273090763694523,10.276489404238305,10.279888044782087,10.28328668532587,10.286685325869652,10.290083966413434,10.293482606957218,10.296881247501,10.300279888044782,10.303678528588565,10.307077169132347,10.310475809676129,10.313874450219911,10.317273090763695,10.320671731307478,10.32407037185126,10.327469012395042,10.330867652938824,10.334266293482607,10.337664934026389,10.341063574570171,10.344462215113955,10.347860855657737,10.35125949620152,10.354658136745302,10.358056777289084,10.361455417832866,10.364854058376649,10.368252698920433,10.371651339464215,10.375049980007997,10.37844862055178,10.381847261095562,10.385245901639344,10.388644542183126,10.392043182726908,10.395441823270692,10.398840463814475,10.402239104358257,10.40563774490204,10.409036385445821,10.412435025989604,10.415833666533386,10.41923230707717,10.422630947620952,10.426029588164734,10.429428228708517,10.432826869252299,10.436225509796081,10.439624150339863,10.443022790883646,10.44642143142743,10.449820071971212,10.453218712514994,10.456617353058776,10.460015993602559,10.463414634146341,10.466813274690123,10.470211915233907,10.47361055577769,10.477009196321472,10.480407836865254,10.483806477409036,10.487205117952819,10.4906037584966,10.494002399040383,10.497401039584167,10.50079968012795,10.504198320671732,10.507596961215514,10.510995601759296,10.514394242303078,10.51779288284686,10.521191523390645,10.524590163934427,10.527988804478209,10.531387445021991,10.534786085565774,10.538184726109556,10.541583366653338,10.54498200719712,10.548380647740904,10.551779288284687,10.555177928828469,10.558576569372251,10.561975209916033,10.565373850459816,10.568772491003598,10.572171131547382,10.575569772091164,10.578968412634946,10.582367053178729,10.58576569372251,10.589164334266293,10.592562974810075,10.595961615353858,10.599360255897642,10.602758896441424,10.606157536985206,10.609556177528988,10.61295481807277,10.616353458616553,10.619752099160335,10.62315073970412,10.626549380247901,10.629948020791684,10.633346661335466,10.636745301879248,10.64014394242303,10.643542582966813,10.646941223510595,10.650339864054379,10.653738504598161,10.657137145141943,10.660535785685726,10.663934426229508,10.66733306677329,10.670731707317072,10.674130347860856,10.677528988404639,10.680927628948421,10.684326269492203,10.687724910035985,10.691123550579768,10.69452219112355,10.697920831667332,10.701319472211116,10.704718112754898,10.70811675329868,10.711515393842463,10.714914034386245,10.718312674930027,10.72171131547381,10.725109956017594,10.728508596561376,10.731907237105158,10.73530587764894,10.738704518192723,10.742103158736505,10.745501799280287,10.74890043982407,10.752299080367854,10.755697720911636,10.759096361455418,10.7624950019992,10.765893642542983,10.769292283086765,10.772690923630547,10.776089564174331,10.779488204718113,10.782886845261896,10.786285485805678,10.78968412634946,10.793082766893242,10.796481407437025,10.799880047980807,10.80327868852459,10.806677329068373,10.810075969612155,10.813474610155938,10.81687325069972,10.820271891243502,10.823670531787284,10.827069172331068,10.83046781287485,10.833866453418633,10.837265093962415,10.840663734506197,10.84406237504998,10.847461015593762,10.850859656137544,10.854258296681328,10.85765693722511,10.861055577768893,10.864454218312675,10.867852858856457,10.87125149940024,10.874650139944022,10.878048780487806,10.881447421031588,10.88484606157537,10.888244702119152,10.891643342662935,10.895041983206717,10.8984406237505,10.901839264294281,10.905237904838065,10.908636545381848,10.91203518592563,10.915433826469412,10.918832467013194,10.922231107556977,10.925629748100759,10.929028388644543,10.932427029188325,10.935825669732107,10.93922431027589,10.942622950819672,10.946021591363454,10.949420231907236,10.952818872451019,10.956217512994803,10.959616153538585,10.963014794082367,10.96641343462615,10.969812075169932,10.973210715713714,10.976609356257496,10.98000799680128,10.983406637345063,10.986805277888845,10.990203918432627,10.99360255897641,10.997001199520192,11.000399840063974,11.003798480607758,11.00719712115154,11.010595761695322,11.013994402239105,11.017393042782887,11.020791683326669,11.024190323870451,11.027588964414234,11.030987604958018,11.0343862455018,11.037784886045582,11.041183526589364,11.044582167133147,11.047980807676929,11.051379448220711,11.054778088764495,11.058176729308277,11.06157536985206,11.064974010395842,11.068372650939624,11.071771291483406,11.075169932027189,11.07856857257097,11.081967213114755,11.085365853658537,11.08876449420232,11.092163134746102,11.095561775289884,11.098960415833666,11.102359056377448,11.105757696921232,11.109156337465015,11.112554978008797,11.11595361855258,11.119352259096361,11.122750899640144,11.126149540183926,11.129548180727708,11.132946821271492,11.136345461815274,11.139744102359057,11.143142742902839,11.146541383446621,11.149940023990403,11.153338664534186,11.15673730507797,11.160135945621752,11.163534586165534,11.166933226709316,11.170331867253099,11.173730507796881,11.177129148340663,11.180527788884445,11.18392642942823,11.187325069972012,11.190723710515794,11.194122351059576,11.197520991603358,11.20091963214714,11.204318272690923,11.207716913234707,11.21111555377849,11.214514194322271,11.217912834866054,11.221311475409836,11.224710115953618,11.2281087564974,11.231507397041183,11.234906037584967,11.238304678128749,11.241703318672531,11.245101959216314,11.248500599760096,11.251899240303878,11.25529788084766,11.258696521391444,11.262095161935227,11.265493802479009,11.268892443022791,11.272291083566573,11.275689724110356,11.279088364654138,11.28248700519792,11.285885645741704,11.289284286285486,11.292682926829269,11.29608156737305,11.299480207916833,11.302878848460615,11.306277489004398,11.309676129548182,11.313074770091964,11.316473410635746,11.319872051179528,11.32327069172331,11.326669332267093,11.330067972810875,11.333466613354657,11.336865253898441,11.340263894442224,11.343662534986006,11.347061175529788,11.35045981607357,11.353858456617353,11.357257097161135,11.360655737704919,11.364054378248701,11.367453018792483,11.370851659336266,11.374250299880048,11.37764894042383,11.381047580967612,11.384446221511395,11.387844862055179,11.391243502598961,11.394642143142743,11.398040783686525,11.401439424230308,11.40483806477409,11.408236705317872,11.411635345861656,11.415033986405438,11.41843262694922,11.421831267493003,11.425229908036785,11.428628548580567,11.43202718912435,11.435425829668132,11.438824470211916,11.442223110755698,11.44562175129948,11.449020391843263,11.452419032387045,11.455817672930827,11.45921631347461,11.462614954018393,11.466013594562176,11.469412235105958,11.47281087564974,11.476209516193522,11.479608156737305,11.483006797281087,11.48640543782487,11.489804078368653,11.493202718912436,11.496601359456218,11.5,11.503398640543782,11.506797281087564,11.510195921631347,11.51359456217513,11.516993202718913,11.520391843262695,11.523790483806478,11.52718912435026,11.530587764894042,11.533986405437824,11.537385045981607,11.54078368652539,11.544182327069173,11.547580967612955,11.550979608156737,11.55437824870052,11.557776889244302,11.561175529788084,11.564574170331868,11.56797281087565,11.571371451419433,11.574770091963215,11.578168732506997,11.58156737305078,11.584966013594562,11.588364654138344,11.591763294682128,11.59516193522591,11.598560575769692,11.601959216313475,11.605357856857257,11.608756497401039,11.612155137944821,11.615553778488605,11.618952419032388,11.62235105957617,11.625749700119952,11.629148340663734,11.632546981207517,11.635945621751299,11.639344262295081,11.642742902838865,11.646141543382647,11.64954018392643,11.652938824470212,11.656337465013994,11.659736105557776,11.663134746101559,11.666533386645343,11.669932027189125,11.673330667732907,11.67672930827669,11.680127948820472,11.683526589364254,11.686925229908036,11.690323870451818,11.693722510995602,11.697121151539385,11.700519792083167,11.70391843262695,11.707317073170731,11.710715713714514,11.714114354258296,11.71751299480208,11.720911635345862,11.724310275889644,11.727708916433427,11.731107556977209,11.734506197520991,11.737904838064773,11.741303478608556,11.74470211915234,11.748100759696122,11.751499400239904,11.754898040783686,11.758296681327469,11.761695321871251,11.765093962415033,11.768492602958817,11.7718912435026,11.775289884046382,11.778688524590164,11.782087165133946,11.785485805677729,11.78888444622151,11.792283086765293,11.795681727309077,11.79908036785286,11.802479008396642,11.805877648940424,11.809276289484206,11.812674930027988,11.81607357057177,11.819472211115555,11.822870851659337,11.826269492203119,11.829668132746901,11.833066773290684,11.836465413834466,11.839864054378248,11.84326269492203,11.846661335465814,11.850059976009597,11.853458616553379,11.856857257097161,11.860255897640943,11.863654538184726,11.867053178728508,11.870451819272292,11.873850459816074,11.877249100359856,11.880647740903639,11.88404638144742,11.887445021991203,11.890843662534985,11.894242303078768,11.897640943622552,11.901039584166334,11.904438224710116,11.907836865253898,11.91123550579768,11.914634146341463,11.918032786885245,11.92143142742903,11.924830067972811,11.928228708516594,11.931627349060376,11.935025989604158,11.93842463014794,11.941823270691723,11.945221911235505,11.948620551779289,11.952019192323071,11.955417832866853,11.958816473410636,11.962215113954418,11.9656137544982,11.969012395041982,11.972411035585766,11.975809676129549,11.979208316673331,11.982606957217113,11.986005597760895,11.989404238304678,11.99280287884846,11.996201519392242,11.999600159936026,12.002998800479808,12.00639744102359,12.009796081567373,12.013194722111155,12.016593362654937,12.01999200319872,12.023390643742504,12.026789284286286,12.030187924830068,12.03358656537385,12.036985205917633,12.040383846461415,12.043782487005197,12.047181127548981,12.050579768092764,12.053978408636546,12.057377049180328,12.06077568972411,12.064174330267893,12.067572970811675,12.070971611355457,12.074370251899241,12.077768892443023,12.081167532986806,12.084566173530588,12.08796481407437,12.091363454618152,12.094762095161935,12.098160735705719,12.1015593762495,12.104958016793283,12.108356657337065,12.111755297880848,12.11515393842463,12.118552578968412,12.121951219512194,12.125349860055978,12.12874850059976,12.132147141143543,12.135545781687325,12.138944422231107,12.14234306277489,12.145741703318672,12.149140343862456,12.152538984406238,12.15593762495002,12.159336265493803,12.162734906037585,12.166133546581367,12.16953218712515,12.172930827668932,12.176329468212716,12.179728108756498,12.18312674930028,12.186525389844062,12.189924030387845,12.193322670931627,12.19672131147541,12.200119952019193,12.203518592562975,12.206917233106758,12.21031587365054,12.213714514194322,12.217113154738104,12.220511795281887,12.223910435825669,12.227309076369453,12.230707716913235,12.234106357457017,12.2375049980008,12.240903638544582,12.244302279088364,12.247700919632146,12.25109956017593,12.254498200719713,12.257896841263495,12.261295481807277,12.26469412235106,12.268092762894842,12.271491403438624,12.274890043982406,12.27828868452619,12.281687325069973,12.285085965613755,12.288484606157537,12.29188324670132,12.295281887245102,12.298680527788884,12.302079168332668,12.30547780887645,12.308876449420232,12.312275089964015,12.315673730507797,12.319072371051579,12.322471011595361,12.325869652139144,12.329268292682928,12.33266693322671,12.336065573770492,12.339464214314274,12.342862854858057,12.346261495401839,12.349660135945621,12.353058776489405,12.356457417033187,12.35985605757697,12.363254698120752,12.366653338664534,12.370051979208316,12.373450619752099,12.37684926029588,12.380247900839665,12.383646541383447,12.38704518192723,12.390443822471012,12.393842463014794,12.397241103558576,12.400639744102358,12.404038384646142,12.407437025189925,12.410835665733707,12.41423430627749,12.417632946821271,12.421031587365054,12.424430227908836,12.427828868452618,12.431227508996402,12.434626149540184,12.438024790083967,12.441423430627749,12.444822071171531,12.448220711715313,12.451619352259096,12.45501799280288,12.458416633346662,12.461815273890444,12.465213914434226,12.468612554978009,12.472011195521791,12.475409836065573,12.478808476609355,12.48220711715314,12.485605757696922,12.489004398240704,12.492403038784486,12.495801679328268,12.49920031987205,12.502598960415833,12.505997600959617,12.5093962415034,12.512794882047181,12.516193522590964,12.519592163134746,12.522990803678528,12.52638944422231,12.529788084766093,12.533186725309877,12.536585365853659,12.539984006397441,12.543382646941224,12.546781287485006,12.550179928028788,12.55357856857257,12.556977209116354,12.560375849660137,12.563774490203919,12.567173130747701,12.570571771291483,12.573970411835266,12.577369052379048,12.58076769292283,12.584166333466614,12.587564974010396,12.590963614554179,12.59436225509796,12.597760895641743,12.601159536185525,12.604558176729308,12.607956817273092,12.611355457816874,12.614754098360656,12.618152738904438,12.62155137944822,12.624950019992003,12.628348660535785,12.631747301079567,12.635145941623351,12.638544582167134,12.641943222710916,12.645341863254698,12.64874050379848,12.652139144342263,12.655537784886045,12.658936425429829,12.662335065973611,12.665733706517393,12.669132347061176,12.672530987604958,12.67592962814874,12.679328268692522,12.682726909236305,12.686125549780089,12.689524190323871,12.692922830867653,12.696321471411435,12.699720111955218,12.703118752499,12.706517393042782,12.709916033586566,12.713314674130348,12.71671331467413,12.720111955217913,12.723510595761695,12.726909236305477,12.73030787684926,12.733706517393042,12.737105157936826,12.740503798480608,12.74390243902439,12.747301079568173,12.750699720111955,12.754098360655737,12.75749700119952,12.760895641743303,12.764294282287086,12.767692922830868,12.77109156337465,12.774490203918432,12.777888844462215,12.781287485005997,12.78468612554978,12.788084766093563,12.791483406637346,12.794882047181128,12.79828068772491,12.801679328268692,12.805077968812475,12.808476609356257,12.81187524990004,12.815273890443823,12.818672530987605,12.822071171531388,12.82546981207517,12.828868452618952,12.832267093162734,12.835665733706517,12.8390643742503,12.842463014794083,12.845861655337865,12.849260295881647,12.85265893642543,12.856057576969212,12.859456217512994,12.862854858056778,12.86625349860056,12.869652139144343,12.873050779688125,12.876449420231907,12.87984806077569,12.883246701319472,12.886645341863254,12.890043982407038,12.89344262295082,12.896841263494602,12.900239904038385,12.903638544582167,12.907037185125949,12.910435825669731,12.913834466213515,12.917233106757298,12.92063174730108,12.924030387844862,12.927429028388644,12.930827668932427,12.934226309476209,12.937624950019991,12.941023590563775,12.944422231107557,12.94782087165134,12.951219512195122,12.954618152738904,12.958016793282686,12.961415433826469,12.964814074370253,12.968212714914035,12.971611355457817,12.9750099960016,12.978408636545382,12.981807277089164,12.985205917632946,12.988604558176728,12.992003198720512,12.995401839264295,12.998800479808077,13.00219912035186,13.005597760895641,13.008996401439424,13.012395041983206,13.01579368252699,13.019192323070772,13.022590963614554,13.025989604158337,13.029388244702119,13.032786885245901,13.036185525789683,13.039584166333466,13.04298280687725,13.046381447421032,13.049780087964814,13.053178728508597,13.056577369052379,13.059976009596161,13.063374650139943,13.066773290683727,13.07017193122751,13.073570571771292,13.076969212315074,13.080367852858856,13.083766493402639,13.08716513394642,13.090563774490203,13.093962415033987,13.09736105557777,13.100759696121552,13.104158336665334,13.107556977209116,13.110955617752898,13.11435425829668,13.117752898840465,13.121151539384247,13.124550179928029,13.127948820471811,13.131347461015594,13.134746101559376,13.138144742103158,13.141543382646942,13.144942023190724,13.148340663734507,13.151739304278289,13.155137944822071,13.158536585365853,13.161935225909636,13.165333866453418,13.168732506997202,13.172131147540984,13.175529788084766,13.178928428628549,13.18232706917233,13.185725709716113,13.189124350259895,13.19252299080368,13.195921631347462,13.199320271891244,13.202718912435026,13.206117552978808,13.20951619352259,13.212914834066373,13.216313474610155,13.21971211515394,13.223110755697721,13.226509396241504,13.229908036785286,13.233306677329068,13.23670531787285,13.240103958416633,13.243502598960417,13.246901239504199,13.250299880047981,13.253698520591763,13.257097161135546,13.260495801679328,13.26389444222311,13.267293082766892,13.270691723310676,13.274090363854459,13.277489004398241,13.280887644942023,13.284286285485805,13.287684926029588,13.29108356657337,13.294482207117154,13.297880847660936,13.301279488204719,13.3046781287485,13.308076769292283,13.311475409836065,13.314874050379848,13.31827269092363,13.321671331467414,13.325069972011196,13.328468612554978,13.33186725309876,13.335265893642543,13.338664534186325,13.342063174730107,13.345461815273891,13.348860455817674,13.352259096361456,13.355657736905238,13.35905637744902,13.362455017992803,13.365853658536585,13.369252299080367,13.372650939624151,13.376049580167933,13.379448220711716,13.382846861255498,13.38624550179928,13.389644142343062,13.393042782886845,13.396441423430629,13.39984006397441,13.403238704518193,13.406637345061975,13.410035985605758,13.41343462614954,13.416833266693322,13.420231907237104,13.423630547780888,13.42702918832467,13.430427828868453,13.433826469412235,13.437225109956017,13.4406237504998,13.444022391043582,13.447421031587366,13.450819672131148,13.45421831267493,13.457616953218713,13.461015593762495,13.464414234306277,13.46781287485006,13.471211515393842,13.474610155937626,13.478008796481408,13.48140743702519,13.484806077568972,13.488204718112755,13.491603358656537,13.49500199920032,13.498400639744103,13.501799280287885,13.505197920831668,13.50859656137545,13.511995201919232,13.515393842463014,13.518792483006797,13.522191123550579,13.525589764094363,13.528988404638145,13.532387045181927,13.53578568572571,13.539184326269492,13.542582966813274,13.545981607357056,13.54938024790084,13.552778888444623,13.556177528988405,13.559576169532187,13.56297481007597,13.566373450619752,13.569772091163534,13.573170731707316,13.5765693722511,13.579968012794883,13.583366653338665,13.586765293882447,13.59016393442623,13.593562574970012,13.596961215513794,13.600359856057578,13.60375849660136,13.607157137145142,13.610555777688925,13.613954418232707,13.617353058776489,13.620751699320271,13.624150339864054,13.627548980407838,13.63094762095162,13.634346261495402,13.637744902039184,13.641143542582967,13.644542183126749,13.647940823670531,13.651339464214315,13.654738104758097,13.65813674530188,13.661535385845662,13.664934026389444,13.668332666933226,13.671731307477009,13.67512994802079,13.678528588564575,13.681927229108357,13.68532586965214,13.688724510195922,13.692123150739704,13.695521791283486,13.698920431827268,13.702319072371052,13.705717712914835,13.709116353458617,13.7125149940024,13.715913634546181,13.719312275089964,13.722710915633746,13.726109556177528,13.729508196721312,13.732906837265094,13.736305477808877,13.739704118352659,13.743102758896441,13.746501399440223,13.749900039984006,13.75329868052779,13.756697321071572,13.760095961615354,13.763494602159136,13.766893242702919,13.770291883246701,13.773690523790483,13.777089164334265,13.78048780487805,13.783886445421832,13.787285085965614,13.790683726509396,13.794082367053178,13.79748100759696,13.800879648140743,13.804278288684527,13.80767692922831,13.811075569772091,13.814474210315874,13.817872850859656,13.821271491403438,13.82467013194722,13.828068772491003,13.831467413034787,13.834866053578569,13.838264694122351,13.841663334666134,13.845061975209916,13.848460615753698,13.85185925629748,13.855257896841264,13.858656537385047,13.862055177928829,13.865453818472611,13.868852459016393,13.872251099560176,13.875649740103958,13.87904838064774,13.882447021191524,13.885845661735306,13.889244302279089,13.89264294282287,13.896041583366653,13.899440223910435,13.902838864454218,13.906237504998002,13.909636145541784,13.913034786085566,13.916433426629348,13.91983206717313,13.923230707716913,13.926629348260695,13.930027988804477,13.933426629348261,13.936825269892044,13.940223910435826,13.943622550979608,13.94702119152339,13.950419832067173,13.953818472610955,13.957217113154739,13.960615753698521,13.964014394242303,13.967413034786086,13.970811675329868,13.97421031587365,13.977608956417432,13.981007596961215,13.984406237504999,13.987804878048781,13.991203518592563,13.994602159136345,13.998000799680128,14.00139944022391,14.004798080767692,14.008196721311476,14.011595361855258,14.01499400239904,14.018392642942823,14.021791283486605,14.025189924030387,14.02858856457417,14.031987205117952,14.035385845661736,14.038784486205518,14.0421831267493,14.045581767293083,14.048980407836865,14.052379048380647,14.05577768892443,14.059176329468213,14.062574970011996,14.065973610555778,14.06937225109956,14.072770891643342,14.076169532187125,14.079568172730907,14.08296681327469,14.086365453818473,14.089764094362256,14.093162734906038,14.09656137544982,14.099960015993602,14.103358656537385,14.106757297081167,14.11015593762495,14.113554578168733,14.116953218712515,14.120351859256298,14.12375049980008,14.127149140343862,14.130547780887644,14.133946421431427,14.13734506197521,14.140743702518993,14.144142343062775,14.147540983606557,14.15093962415034,14.154338264694122,14.157736905237904,14.161135545781688,14.16453418632547,14.167932826869253,14.171331467413035,14.174730107956817,14.1781287485006,14.181527389044382,14.184926029588166,14.188324670131948,14.19172331067573,14.195121951219512,14.198520591763295,14.201919232307077,14.20531787285086,14.208716513394641,14.212115153938425,14.215513794482208,14.21891243502599,14.222311075569772,14.225709716113554,14.229108356657337,14.232506997201119,14.235905637744903,14.239304278288685,14.242702918832467,14.24610155937625,14.249500199920032,14.252898840463814,14.256297481007596,14.259696121551379,14.263094762095163,14.266493402638945,14.269892043182727,14.27329068372651,14.276689324270292,14.280087964814074,14.283486605357856,14.28688524590164,14.290283886445422,14.293682526989205,14.297081167532987,14.30047980807677,14.303878448620551,14.307277089164334,14.310675729708116,14.3140743702519,14.317473010795682,14.320871651339464,14.324270291883247,14.327668932427029,14.331067572970811,14.334466213514593,14.337864854058378,14.34126349460216,14.344662135145942,14.348060775689724,14.351459416233507,14.354858056777289,14.358256697321071,14.361655337864853,14.365053978408637,14.36845261895242,14.371851259496202,14.375249900039984,14.378648540583766,14.382047181127549,14.38544582167133,14.388844462215115,14.392243102758897,14.39564174330268,14.399040383846462,14.402439024390244,14.405837664934026,14.409236305477808,14.41263494602159,14.416033586565375,14.419432227109157,14.422830867652939,14.426229508196721,14.429628148740504,14.433026789284286,14.436425429828068,14.439824070371852,14.443222710915634,14.446621351459417,14.450019992003199,14.453418632546981,14.456817273090763,14.460215913634546,14.463614554178328,14.467013194722112,14.470411835265894,14.473810475809676,14.477209116353459,14.480607756897241,14.484006397441023,14.487405037984805,14.49080367852859,14.494202319072372,14.497600959616154,14.500999600159936,14.504398240703718,14.5077968812475,14.511195521791283,14.514594162335065,14.51799280287885,14.521391443422631,14.524790083966414,14.528188724510196,14.531587365053978,14.53498600559776,14.538384646141543,14.541783286685327,14.545181927229109,14.548580567772891,14.551979208316673,14.555377848860456,14.558776489404238,14.56217512994802,14.565573770491802,14.568972411035586,14.572371051579369,14.575769692123151,14.579168332666933,14.582566973210715,14.585965613754498,14.58936425429828,14.592762894842064,14.596161535385846,14.599560175929629,14.60295881647341,14.606357457017193,14.609756097560975,14.613154738104758,14.61655337864854,14.619952019192324,14.623350659736106,14.626749300279888,14.63014794082367,14.633546581367453,14.636945221911235,14.640343862455017,14.643742502998801,14.647141143542584,14.650539784086366,14.653938424630148,14.65733706517393,14.660735705717713,14.664134346261495,14.667532986805277,14.670931627349061,14.674330267892843,14.677728908436626,14.681127548980408,14.68452618952419,14.687924830067972,14.691323470611755,14.694722111155539,14.69812075169932,14.701519392243103,14.704918032786885,14.708316673330668,14.71171531387445,14.715113954418232,14.718512594962014,14.721911235505798,14.72530987604958,14.728708516593363,14.732107157137145,14.735505797680927,14.73890443822471,14.742303078768492,14.745701719312276,14.749100359856058,14.75249900039984,14.755897640943623,14.759296281487405,14.762694922031187,14.76609356257497,14.769492203118752,14.772890843662536,14.776289484206318,14.7796881247501,14.783086765293882,14.786485405837665,14.789884046381447,14.79328268692523,14.796681327469013,14.800079968012795,14.803478608556578,14.80687724910036,14.810275889644142,14.813674530187924,14.817073170731707,14.820471811275489,14.823870451819273,14.827269092363055,14.830667732906837,14.83406637345062,14.837465013994402,14.840863654538184,14.844262295081966,14.84766093562575,14.851059576169533,14.854458216713315,14.857856857257097,14.86125549780088,14.864654138344662,14.868052778888444,14.871451419432226,14.87485005997601,14.878248700519793,14.881647341063575,14.885045981607357,14.88844462215114,14.891843262694922,14.895241903238704,14.898640543782488,14.90203918432627,14.905437824870052,14.908836465413835,14.912235105957617,14.915633746501399,14.919032387045181,14.922431027588964,14.925829668132748,14.92922830867653,14.932626949220312,14.936025589764094,14.939424230307877,14.942822870851659,14.946221511395441,14.949620151939225,14.953018792483007,14.95641743302679,14.959816073570572,14.963214714114354,14.966613354658136,14.970011995201919,14.9734106357457,14.976809276289485,14.980207916833267,14.98360655737705,14.987005197920832,14.990403838464614,14.993802479008396,14.997201119552178,15.000599760095962,15.003998400639745,15.007397041183527,15.01079568172731,15.014194322271091,15.017592962814874,15.020991603358656,15.024390243902438,15.027788884446222,15.031187524990004,15.034586165533787,15.037984806077569,15.041383446621351,15.044782087165133,15.048180727708916,15.0515793682527,15.054978008796482,15.058376649340264,15.061775289884046,15.065173930427829,15.068572570971611,15.071971211515393,15.075369852059175,15.07876849260296,15.082167133146742,15.085565773690524,15.088964414234306,15.092363054778088,15.09576169532187,15.099160335865653,15.102558976409437,15.10595761695322,15.109356257497002,15.112754898040784,15.116153538584566,15.119552179128348,15.12295081967213,15.126349460215913,15.129748100759697,15.133146741303479,15.136545381847261,15.139944022391044,15.143342662934826,15.146741303478608,15.15013994402239,15.153538584566174,15.156937225109957,15.160335865653739,15.163734506197521,15.167133146741303,15.170531787285086,15.173930427828868,15.17732906837265,15.180727708916434,15.184126349460216,15.187524990003999,15.19092363054778,15.194322271091563,15.197720911635345,15.201119552179128,15.204518192722912,15.207916833266694,15.211315473810476,15.214714114354258,15.21811275489804,15.221511395441823,15.224910035985605,15.22830867652939,15.231707317073171,15.235105957616954,15.238504598160736,15.241903238704518,15.2453018792483,15.248700519792083,15.252099160335865,15.255497800879649,15.258896441423431,15.262295081967213,15.265693722510996,15.269092363054778,15.27249100359856,15.275889644142342,15.279288284686126,15.282686925229909,15.286085565773691,15.289484206317473,15.292882846861255,15.296281487405038,15.29968012794882,15.303078768492602,15.306477409036386,15.309876049580168,15.31327469012395,15.316673330667733,15.320071971211515,15.323470611755297,15.32686925229908,15.330267892842864,15.333666533386646,15.337065173930428,15.34046381447421,15.343862455017993,15.347261095561775,15.350659736105557,15.35405837664934,15.357457017193124,15.360855657736906,15.364254298280688,15.36765293882447,15.371051579368253,15.374450219912035,15.377848860455817,15.381247500999601,15.384646141543383,15.388044782087166,15.391443422630948,15.39484206317473,15.398240703718512,15.401639344262295,15.405037984806077,15.40843662534986,15.411835265893643,15.415233906437425,15.418632546981208,15.42203118752499,15.425429828068772,15.428828468612554,15.432227109156338,15.43562574970012,15.439024390243903,15.442423030787685,15.445821671331467,15.44922031187525,15.452618952419032,15.456017592962814,15.459416233506598,15.46281487405038,15.466213514594163,15.469612155137945,15.473010795681727,15.47640943622551,15.479808076769292,15.483206717313076,15.486605357856858,15.49000399840064,15.493402638944422,15.496801279488205,15.500199920031987,15.50359856057577,15.506997201119551,15.510395841663335,15.513794482207118,15.5171931227509,15.520591763294682,15.523990403838464,15.527389044382247,15.530787684926029,15.534186325469813,15.537584966013595,15.540983606557377,15.54438224710116,15.547780887644942,15.551179528188724,15.554578168732506,15.557976809276289,15.561375449820073,15.564774090363855,15.568172730907637,15.57157137145142,15.574970011995202,15.578368652538984,15.581767293082766,15.58516593362655,15.588564574170332,15.591963214714115,15.595361855257897,15.59876049580168,15.602159136345461,15.605557776889244,15.608956417433026,15.61235505797681,15.615753698520592,15.619152339064375,15.622550979608157,15.625949620151939,15.629348260695721,15.632746901239504,15.636145541783288,15.63954418232707,15.642942822870852,15.646341463414634,15.649740103958417,15.653138744502199,15.656537385045981,15.659936025589763,15.663334666133547,15.66673330667733,15.670131947221112,15.673530587764894,15.676929228308676,15.680327868852459,15.68372650939624,15.687125149940025,15.690523790483807,15.69392243102759,15.697321071571372,15.700719712115154,15.704118352658936,15.707516993202718,15.7109156337465,15.714314274290285,15.717712914834067,15.721111555377849,15.724510195921631,15.727908836465414,15.731307477009196,15.734706117552978,15.738104758096762,15.741503398640544,15.744902039184327,15.748300679728109,15.751699320271891,15.755097960815673,15.758496601359456,15.761895241903238,15.765293882447022,15.768692522990804,15.772091163534586,15.775489804078369,15.778888444622151,15.782287085165933,15.785685725709715,15.7890843662535,15.792483006797282,15.795881647341064,15.799280287884846,15.802678928428628,15.80607756897241,15.809476209516193,15.812874850059975,15.81627349060376,15.819672131147541,15.823070771691324,15.826469412235106,15.829868052778888,15.83326669332267,15.836665333866453,15.840063974410237,15.843462614954019,15.846861255497801,15.850259896041583,15.853658536585366,15.857057177129148,15.86045581767293,15.863854458216712,15.867253098760496,15.870651739304279,15.874050379848061,15.877449020391843,15.880847660935625,15.884246301479408,15.88764494202319,15.891043582566974,15.894442223110756,15.897840863654539,15.90123950419832,15.904638144742103,15.908036785285885,15.911435425829668,15.91483406637345,15.918232706917234,15.921631347461016,15.925029988004798,15.92842862854858,15.931827269092363,15.935225909636145,15.938624550179927,15.942023190723711,15.945421831267494,15.948820471811276,15.952219112355058,15.95561775289884,15.959016393442623,15.962415033986405,15.965813674530187,15.969212315073971,15.972610955617753,15.976009596161536,15.979408236705318,15.9828068772491,15.986205517792882,15.989604158336665,15.993002798880449,15.99640143942423,15.999800079968013,16.003198720511794,16.00659736105558,16.00999600159936,16.013394642143144,16.016793282686926,16.02019192323071,16.02359056377449,16.026989204318273,16.030387844862055,16.033786485405837,16.03718512594962,16.040583766493402,16.043982407037184,16.047381047580966,16.05077968812475,16.05417832866853,16.057576969212317,16.0609756097561,16.06437425029988,16.067772890843663,16.071171531387446,16.074570171931228,16.07796881247501,16.081367453018792,16.084766093562575,16.088164734106357,16.09156337465014,16.09496201519392,16.098360655737704,16.101759296281486,16.105157936825268,16.108556577369054,16.111955217912836,16.11535385845662,16.1187524990004,16.122151139544183,16.125549780087965,16.128948420631747,16.13234706117553,16.135745701719312,16.139144342263094,16.142542982806876,16.14594162335066,16.14934026389444,16.152738904438223,16.156137544982005,16.15953618552579,16.162934826069574,16.166333466613356,16.169732107157138,16.17313074770092,16.176529388244703,16.179928028788485,16.183326669332267,16.18672530987605,16.19012395041983,16.193522590963614,16.196921231507396,16.20031987205118,16.20371851259496,16.207117153138743,16.21051579368253,16.21391443422631,16.217313074770093,16.220711715313875,16.224110355857658,16.22750899640144,16.230907636945222,16.234306277489004,16.237704918032787,16.24110355857657,16.24450219912035,16.247900839664133,16.251299480207916,16.254698120751698,16.25809676129548,16.261495401839266,16.264894042383048,16.26829268292683,16.271691323470613,16.275089964014395,16.278488604558177,16.28188724510196,16.28528588564574,16.288684526189524,16.292083166733306,16.29548180727709,16.29888044782087,16.302279088364653,16.305677728908435,16.309076369452217,16.312475009996003,16.315873650539785,16.319272291083568,16.32267093162735,16.326069572171132,16.329468212714914,16.332866853258697,16.33626549380248,16.33966413434626,16.343062774890043,16.346461415433826,16.349860055977608,16.35325869652139,16.356657337065172,16.360055977608955,16.36345461815274,16.366853258696523,16.370251899240305,16.373650539784087,16.37704918032787,16.38044782087165,16.383846461415434,16.387245101959216,16.390643742503,16.39404238304678,16.397441023590563,16.400839664134345,16.404238304678127,16.40763694522191,16.411035585765692,16.414434226309478,16.41783286685326,16.421231507397042,16.424630147940825,16.428028788484607,16.43142742902839,16.43482606957217,16.438224710115954,16.441623350659736,16.445021991203518,16.4484206317473,16.451819272291083,16.455217912834865,16.458616553378647,16.46201519392243,16.465413834466215,16.468812475009997,16.47221111555378,16.475609756097562,16.479008396641344,16.482407037185126,16.48580567772891,16.48920431827269,16.492602958816473,16.496001599360255,16.499400239904038,16.50279888044782,16.506197520991602,16.509596161535384,16.512994802079167,16.516393442622952,16.519792083166735,16.523190723710517,16.5265893642543,16.52998800479808,16.533386645341864,16.536785285885646,16.540183926429428,16.54358256697321,16.546981207516993,16.550379848060775,16.553778488604557,16.55717712914834,16.56057576969212,16.563974410235904,16.56737305077969,16.570771691323472,16.574170331867254,16.577568972411036,16.58096761295482,16.5843662534986,16.587764894042383,16.591163534586165,16.594562175129948,16.59796081567373,16.601359456217512,16.604758096761294,16.608156737305077,16.61155537784886,16.61495401839264,16.618352658936427,16.62175129948021,16.62514994002399,16.628548580567774,16.631947221111556,16.63534586165534,16.63874450219912,16.642143142742903,16.645541783286685,16.648940423830467,16.65233906437425,16.65573770491803,16.659136345461814,16.662534986005596,16.66593362654938,16.669332267093164,16.672730907636947,16.67612954818073,16.67952818872451,16.682926829268293,16.686325469812076,16.689724110355858,16.69312275089964,16.696521391443422,16.699920031987205,16.703318672530987,16.70671731307477,16.71011595361855,16.713514594162334,16.716913234706116,16.7203118752499,16.723710515793684,16.727109156337466,16.73050779688125,16.73390643742503,16.737305077968813,16.740703718512595,16.744102359056377,16.74750099960016,16.750899640143942,16.754298280687724,16.757696921231506,16.76109556177529,16.76449420231907,16.767892842862853,16.77129148340664,16.77469012395042,16.778088764494203,16.781487405037986,16.784886045581768,16.78828468612555,16.791683326669332,16.795081967213115,16.798480607756897,16.80187924830068,16.80527788884446,16.808676529388244,16.812075169932026,16.815473810475808,16.818872451019594,16.822271091563376,16.82566973210716,16.82906837265094,16.832467013194723,16.835865653738505,16.839264294282287,16.84266293482607,16.846061575369852,16.849460215913634,16.852858856457416,16.8562574970012,16.85965613754498,16.863054778088763,16.866453418632545,16.86985205917633,16.873250699720113,16.876649340263896,16.880047980807678,16.88344662135146,16.886845261895242,16.890243902439025,16.893642542982807,16.89704118352659,16.90043982407037,16.903838464614154,16.907237105157936,16.91063574570172,16.9140343862455,16.917433026789283,16.92083166733307,16.92423030787685,16.927628948420633,16.931027588964415,16.934426229508198,16.93782487005198,16.941223510595762,16.944622151139544,16.948020791683327,16.95141943222711,16.95481807277089,16.958216713314673,16.961615353858456,16.965013994402238,16.96841263494602,16.971811275489806,16.975209916033588,16.97860855657737,16.982007197121153,16.985405837664935,16.988804478208717,16.9922031187525,16.99560175929628,16.999000399840064,17.002399040383846,17.00579768092763,17.00919632147141,17.012594962015193,17.015993602558975,17.019392243102757,17.022790883646543,17.026189524190325,17.029588164734108,17.03298680527789,17.036385445821672,17.039784086365454,17.043182726909237,17.04658136745302,17.0499800079968,17.053378648540583,17.056777289084366,17.060175929628148,17.06357457017193,17.066973210715712,17.070371851259495,17.07377049180328,17.077169132347063,17.080567772890845,17.083966413434627,17.08736505397841,17.09076369452219,17.094162335065974,17.097560975609756,17.10095961615354,17.10435825669732,17.107756897241103,17.111155537784885,17.114554178328667,17.11795281887245,17.121351459416232,17.124750099960018,17.1281487405038,17.131547381047582,17.134946021591364,17.138344662135147,17.14174330267893,17.14514194322271,17.148540583766493,17.151939224310276,17.155337864854058,17.15873650539784,17.162135145941622,17.165533786485405,17.168932427029187,17.17233106757297,17.175729708116755,17.179128348660537,17.18252698920432,17.185925629748102,17.189324270291884,17.192722910835666,17.19612155137945,17.19952019192323,17.202918832467013,17.206317473010795,17.209716113554578,17.21311475409836,17.216513394642142,17.219912035185924,17.223310675729707,17.226709316273492,17.230107956817275,17.233506597361057,17.23690523790484,17.24030387844862,17.243702518992404,17.247101159536186,17.250499800079968,17.25389844062375,17.257297081167533,17.260695721711315,17.264094362255097,17.26749300279888,17.27089164334266,17.274290283886444,17.27768892443023,17.281087564974012,17.284486205517794,17.287884846061576,17.29128348660536,17.29468212714914,17.298080767692923,17.301479408236705,17.304878048780488,17.30827668932427,17.311675329868052,17.315073970411834,17.318472610955617,17.3218712514994,17.32526989204318,17.328668532586967,17.33206717313075,17.33546581367453,17.338864454218314,17.342263094762096,17.345661735305878,17.34906037584966,17.352459016393443,17.355857656937225,17.359256297481007,17.36265493802479,17.36605357856857,17.369452219112354,17.372850859656136,17.37624950019992,17.379648140743704,17.383046781287486,17.38644542183127,17.38984406237505,17.393242702918833,17.396641343462615,17.400039984006398,17.40343862455018,17.406837265093962,17.410235905637744,17.413634546181527,17.41703318672531,17.42043182726909,17.423830467812873,17.427229108356656,17.43062774890044,17.434026389444224,17.437425029988006,17.44082367053179,17.44422231107557,17.447620951619353,17.451019592163135,17.454418232706917,17.4578168732507,17.461215513794482,17.464614154338264,17.468012794882046,17.47141143542583,17.47481007596961,17.478208716513393,17.48160735705718,17.48500599760096,17.488404638144743,17.491803278688526,17.495201919232308,17.49860055977609,17.501999200319872,17.505397840863655,17.508796481407437,17.51219512195122,17.515593762495,17.518992403038784,17.522391043582566,17.525789684126348,17.52918832467013,17.532586965213916,17.5359856057577,17.53938424630148,17.542782886845263,17.546181527389045,17.549580167932827,17.55297880847661,17.556377449020392,17.559776089564174,17.563174730107956,17.56657337065174,17.56997201119552,17.573370651739303,17.576769292283085,17.580167932826868,17.583566573370653,17.586965213914436,17.590363854458218,17.593762495002,17.597161135545782,17.600559776089565,17.603958416633347,17.60735705717713,17.61075569772091,17.614154338264694,17.617552978808476,17.620951619352258,17.62435025989604,17.627748900439823,17.631147540983605,17.63454618152739,17.637944822071173,17.641343462614955,17.644742103158737,17.64814074370252,17.651539384246302,17.654938024790084,17.658336665333866,17.66173530587765,17.66513394642143,17.668532586965213,17.671931227508995,17.675329868052778,17.67872850859656,17.682127149140342,17.685525789684128,17.68892443022791,17.692323070771693,17.695721711315475,17.699120351859257,17.70251899240304,17.70591763294682,17.709316273490604,17.712714914034386,17.71611355457817,17.71951219512195,17.722910835665733,17.726309476209515,17.729708116753297,17.73310675729708,17.736505397840865,17.739904038384648,17.74330267892843,17.746701319472212,17.750099960015994,17.753498600559777,17.75689724110356,17.76029588164734,17.763694522191123,17.767093162734906,17.770491803278688,17.77389044382247,17.777289084366252,17.780687724910035,17.784086365453817,17.787485005997603,17.790883646541385,17.794282287085167,17.79768092762895,17.80107956817273,17.804478208716514,17.807876849260296,17.81127548980408,17.81467413034786,17.818072770891643,17.821471411435425,17.824870051979207,17.82826869252299,17.831667333066772,17.835065973610554,17.83846461415434,17.841863254698122,17.845261895241904,17.848660535785687,17.85205917632947,17.85545781687325,17.858856457417033,17.862255097960816,17.865653738504598,17.86905237904838,17.872451019592162,17.875849660135945,17.879248300679727,17.88264694122351,17.88604558176729,17.889444222311077,17.89284286285486,17.89624150339864,17.899640143942424,17.903038784486206,17.90643742502999,17.90983606557377,17.913234706117553,17.916633346661335,17.920031987205117,17.9234306277489,17.926829268292682,17.930227908836464,17.933626549380246,17.93702518992403,17.940423830467815,17.943822471011597,17.94722111155538,17.95061975209916,17.954018392642944,17.957417033186726,17.960815673730508,17.96421431427429,17.967612954818073,17.971011595361855,17.974410235905637,17.97780887644942,17.9812075169932,17.984606157536984,17.988004798080766,17.991403438624552,17.994802079168334,17.998200719712116,18.0015993602559,18.00499800079968,18.008396641343463,18.011795281887245,18.015193922431028,18.01859256297481,18.021991203518592,18.025389844062374,18.028788484606157,18.03218712514994,18.03558576569372,18.038984406237503,18.04238304678129,18.04578168732507,18.049180327868854,18.052578968412636,18.055977608956418,18.0593762495002,18.062774890043983,18.066173530587765,18.069572171131547,18.07297081167533,18.07636945221911,18.079768092762894,18.083166733306676,18.08656537385046,18.08996401439424,18.093362654938026,18.09676129548181,18.10015993602559,18.103558576569373,18.106957217113155,18.110355857656938,18.11375449820072,18.117153138744502,18.120551779288284,18.123950419832067,18.12734906037585,18.13074770091963,18.134146341463413,18.137544982007196,18.140943622550978,18.144342263094764,18.147740903638546,18.151139544182328,18.15453818472611,18.157936825269893,18.161335465813675,18.164734106357457,18.16813274690124,18.17153138744502,18.174930027988804,18.178328668532586,18.18172730907637,18.18512594962015,18.188524590163933,18.191923230707715,18.1953218712515,18.198720511795283,18.202119152339066,18.205517792882848,18.20891643342663,18.212315073970412,18.215713714514195,18.219112355057977,18.22251099560176,18.22590963614554,18.229308276689324,18.232706917233106,18.236105557776888,18.23950419832067,18.242902838864453,18.24630147940824,18.24970011995202,18.253098760495803,18.256497401039585,18.259896041583367,18.26329468212715,18.266693322670932,18.270091963214714,18.273490603758496,18.27688924430228,18.28028788484606,18.283686525389843,18.287085165933625,18.290483806477408,18.29388244702119,18.297281087564976,18.300679728108758,18.30407836865254,18.307477009196322,18.310875649740105,18.314274290283887,18.31767293082767,18.32107157137145,18.324470211915234,18.327868852459016,18.331267493002798,18.33466613354658,18.338064774090363,18.341463414634145,18.344862055177927,18.348260695721713,18.351659336265495,18.355057976809277,18.35845661735306,18.361855257896842,18.365253898440624,18.368652538984406,18.37205117952819,18.37544982007197,18.378848460615753,18.382247101159535,18.385645741703318,18.3890443822471,18.392443022790882,18.395841663334664,18.39924030387845,18.402638944422232,18.406037584966015,18.409436225509797,18.41283486605358,18.41623350659736,18.419632147141144,18.423030787684926,18.426429428228708,18.42982806877249,18.433226709316273,18.436625349860055,18.440023990403837,18.44342263094762,18.4468212714914,18.450219912035188,18.45361855257897,18.457017193122752,18.460415833666534,18.463814474210317,18.4672131147541,18.47061175529788,18.474010395841663,18.477409036385446,18.480807676929228,18.48420631747301,18.487604958016792,18.491003598560575,18.494402239104357,18.49780087964814,18.501199520191925,18.504598160735707,18.50799680127949,18.51139544182327,18.514794082367054,18.518192722910836,18.52159136345462,18.5249900039984,18.528388644542183,18.531787285085965,18.535185925629747,18.53858456617353,18.541983206717312,18.545381847261094,18.548780487804876,18.552179128348662,18.555577768892444,18.558976409436227,18.56237504998001,18.56577369052379,18.569172331067573,18.572570971611356,18.575969612155138,18.57936825269892,18.582766893242702,18.586165533786485,18.589564174330267,18.59296281487405,18.59636145541783,18.599760095961614,18.6031587365054,18.60655737704918,18.609956017592964,18.613354658136746,18.61675329868053,18.62015193922431,18.623550579768093,18.626949220311875,18.630347860855657,18.63374650139944,18.637145141943222,18.640543782487004,18.643942423030786,18.64734106357457,18.65073970411835,18.654138344662137,18.65753698520592,18.6609356257497,18.664334266293483,18.667732906837266,18.671131547381048,18.67453018792483,18.677928828468612,18.681327469012395,18.684726109556177,18.68812475009996,18.69152339064374,18.694922031187524,18.698320671731306,18.701719312275088,18.705117952818874,18.708516593362656,18.71191523390644,18.71531387445022,18.718712514994003,18.722111155537785,18.725509796081568,18.72890843662535,18.732307077169132,18.735705717712914,18.739104358256697,18.74250299880048,18.74590163934426,18.749300279888043,18.752698920431826,18.75609756097561,18.759496201519394,18.762894842063176,18.766293482606958,18.76969212315074,18.773090763694523,18.776489404238305,18.779888044782087,18.78328668532587,18.78668532586965,18.790083966413434,18.793482606957216,18.796881247501,18.80027988804478,18.803678528588563,18.80707716913235,18.81047580967613,18.813874450219913,18.817273090763695,18.820671731307478,18.82407037185126,18.827469012395042,18.830867652938824,18.834266293482607,18.83766493402639,18.84106357457017,18.844462215113953,18.847860855657736,18.851259496201518,18.8546581367453,18.858056777289086,18.861455417832868,18.86485405837665,18.868252698920433,18.871651339464215,18.875049980007997,18.87844862055178,18.88184726109556,18.885245901639344,18.888644542183126,18.89204318272691,18.89544182327069,18.898840463814473,18.902239104358255,18.905637744902037,18.909036385445823,18.912435025989605,18.915833666533388,18.91923230707717,18.922630947620952,18.926029588164734,18.929428228708517,18.9328268692523,18.93622550979608,18.939624150339863,18.943022790883646,18.946421431427428,18.94982007197121,18.953218712514992,18.95661735305878,18.96001599360256,18.963414634146343,18.966813274690125,18.970211915233907,18.97361055577769,18.97700919632147,18.980407836865254,18.983806477409036,18.98720511795282,18.9906037584966,18.994002399040383,18.997401039584165,19.000799680127948,19.00419832067173,19.007596961215516,19.010995601759298,19.01439424230308,19.017792882846862,19.021191523390645,19.024590163934427,19.02798880447821,19.03138744502199,19.034786085565774,19.038184726109556,19.041583366653338,19.04498200719712,19.048380647740903,19.051779288284685,19.055177928828467,19.058576569372253,19.061975209916035,19.065373850459817,19.0687724910036,19.072171131547382,19.075569772091164,19.078968412634946,19.08236705317873,19.08576569372251,19.089164334266293,19.092562974810075,19.095961615353858,19.09936025589764,19.102758896441422,19.106157536985204,19.10955617752899,19.112954818072772,19.116353458616555,19.119752099160337,19.12315073970412,19.1265493802479,19.129948020791684,19.133346661335466,19.136745301879248,19.14014394242303,19.143542582966813,19.146941223510595,19.150339864054377,19.15373850459816,19.15713714514194,19.160535785685727,19.16393442622951,19.167333066773292,19.170731707317074,19.174130347860856,19.17752898840464,19.18092762894842,19.184326269492203,19.187724910035985,19.191123550579768,19.19452219112355,19.197920831667332,19.201319472211114,19.204718112754897,19.20811675329868,19.211515393842465,19.214914034386247,19.21831267493003,19.22171131547381,19.225109956017594,19.228508596561376,19.23190723710516,19.23530587764894,19.238704518192723,19.242103158736505,19.245501799280287,19.24890043982407,19.25229908036785,19.255697720911634,19.259096361455416,19.262495001999202,19.265893642542984,19.269292283086767,19.27269092363055,19.27608956417433,19.279488204718113,19.282886845261896,19.286285485805678,19.28968412634946,19.293082766893242,19.296481407437025,19.299880047980807,19.30327868852459,19.30667732906837,19.310075969612154,19.31347461015594,19.31687325069972,19.320271891243504,19.323670531787286,19.32706917233107,19.33046781287485,19.333866453418633,19.337265093962415,19.340663734506197,19.34406237504998,19.347461015593762,19.350859656137544,19.354258296681326,19.35765693722511,19.36105557776889,19.364454218312677,19.36785285885646,19.37125149940024,19.374650139944023,19.378048780487806,19.381447421031588,19.38484606157537,19.388244702119152,19.391643342662935,19.395041983206717,19.3984406237505,19.40183926429428,19.405237904838064,19.408636545381846,19.412035185925628,19.415433826469414,19.418832467013196,19.42223110755698,19.42562974810076,19.429028388644543,19.432427029188325,19.435825669732107,19.43922431027589,19.442622950819672,19.446021591363454,19.449420231907236,19.45281887245102,19.4562175129948,19.459616153538583,19.463014794082365,19.46641343462615,19.469812075169934,19.473210715713716,19.476609356257498,19.48000799680128,19.483406637345063,19.486805277888845,19.490203918432627,19.49360255897641,19.49700119952019,19.500399840063974,19.503798480607756,19.50719712115154,19.51059576169532,19.513994402239103,19.51739304278289,19.52079168332667,19.524190323870453,19.527588964414235,19.530987604958018,19.5343862455018,19.537784886045582,19.541183526589364,19.544582167133147,19.54798080767693,19.55137944822071,19.554778088764493,19.558176729308276,19.561575369852058,19.56497401039584,19.568372650939626,19.571771291483408,19.57516993202719,19.578568572570973,19.581967213114755,19.585365853658537,19.58876449420232,19.5921631347461,19.595561775289884,19.598960415833666,19.60235905637745,19.60575769692123,19.609156337465013,19.612554978008795,19.615953618552577,19.619352259096363,19.622750899640145,19.626149540183928,19.62954818072771,19.632946821271492,19.636345461815274,19.639744102359057,19.64314274290284,19.64654138344662,19.649940023990403,19.653338664534186,19.656737305077968,19.66013594562175,19.663534586165532,19.666933226709315,19.6703318672531,19.673730507796883,19.677129148340665,19.680527788884447,19.68392642942823,19.68732506997201,19.690723710515794,19.694122351059576,19.69752099160336,19.70091963214714,19.704318272690923,19.707716913234705,19.711115553778487,19.71451419432227,19.717912834866052,19.721311475409838,19.72471011595362,19.728108756497402,19.731507397041185,19.734906037584967,19.73830467812875,19.74170331867253,19.745101959216314,19.748500599760096,19.751899240303878,19.75529788084766,19.758696521391443,19.762095161935225,19.765493802479007,19.76889244302279,19.772291083566575,19.775689724110357,19.77908836465414,19.782487005197922,19.785885645741704,19.789284286285486,19.79268292682927,19.79608156737305,19.799480207916833,19.802878848460615,19.806277489004398,19.80967612954818,19.813074770091962,19.816473410635744,19.819872051179527,19.823270691723312,19.826669332267095,19.830067972810877,19.83346661335466,19.83686525389844,19.840263894442224,19.843662534986006,19.847061175529788,19.85045981607357,19.853858456617353,19.857257097161135,19.860655737704917,19.8640543782487,19.86745301879248,19.870851659336264,19.87425029988005,19.877648940423832,19.881047580967614,19.884446221511396,19.88784486205518,19.89124350259896,19.894642143142743,19.898040783686525,19.901439424230308,19.90483806477409,19.908236705317872,19.911635345861654,19.915033986405437,19.91843262694922,19.921831267493,19.925229908036787,19.92862854858057,19.93202718912435,19.935425829668134,19.938824470211916,19.942223110755698,19.94562175129948,19.949020391843263,19.952419032387045,19.955817672930827,19.95921631347461,19.96261495401839,19.966013594562174,19.969412235105956,19.97281087564974,19.976209516193524,19.979608156737307,19.98300679728109,19.98640543782487,19.989804078368653,19.993202718912436,19.996601359456218,20.0]}

},{}],88:[function(require,module,exports){
module.exports={"expected":[-1.0772173450159417,-1.0752574679123994,-1.073311776517555,-1.0713800921165029,-1.0694622391934878,-1.0675580453578535,-1.0656673412720925,-1.063789960581921,-1.0619257398483168,-1.0600745184814506,-1.0582361386764538,-1.0564104453509546,-1.0545972860843342,-1.0527965110586397,-1.0510079730011044,-1.0492315271282215,-1.0474670310913237,-1.0457143449236193,-1.0439733309886383,-1.0422438539300478,-1.0405257806227868,-1.0388189801254877,-1.0371233236341373,-1.0354386844369443,-1.0337649378703717,-1.0321019612763043,-1.030449633960309,-1.0288078371509641,-1.027176453960215,-1.025555369344737,-1.023944470068263,-1.0223436446648586,-1.0207527834031083,-1.0191717782511915,-1.0176005228428184,-1.016038912444002,-1.0144868439206443,-1.0129442157069095,-1.0114109277743635,-1.0098868816018571,-1.008371980146133,-1.0068661278131343,-1.005369230429996,-1.0038811952176987,-1.0024019307643686,-1.0009313469992038,-0.9994693551670085,-0.9980158678033217,-0.9965707987101216,-0.9951340629320885,-0.9937055767334165,-0.9922852575751526,-0.990873024093052,-0.9894687960759374,-0.9880724944445453,-0.9866840412308481,-0.9853033595578397,-0.9839303736197716,-0.9825650086628278,-0.981207190966226,-0.9798568478237375,-0.9785139075256087,-0.9771782993408821,-0.9758499535000956,-0.9745288011783637,-0.9732147744788179,-0.9719078064164052,-0.9706078309020346,-0.9693147827270588,-0.9680285975480876,-0.9667492118721212,-0.9654765630419965,-0.9642105892221408,-0.9629512293846201,-0.9616984232954803,-0.9604521115013702,-0.9592122353164415,-0.9579787368095184,-0.9567515587915295,-0.9555306448031972,-0.9543159391029762,-0.9531073866552383,-0.951904933118694,-0.9507085248350474,-0.9495181088178793,-0.9483336327417505,-0.9471550449315237,-0.9459822943518952,-0.944815330597134,-0.9436541038810231,-0.9424985650269979,-0.9413486654584747,-0.940204357189372,-0.9390655928148105,-0.9379323255019956,-0.9368045089812751,-0.9356820975373678,-0.9345650460007586,-0.9334533097392604,-0.932346844649732,-0.9312456071499563,-0.9301495541706691,-0.9290586431477382,-0.9279728320144883,-0.9268920791941705,-0.925816343592569,-0.9247455845907477,-0.9236797620379271,-0.9226188362444958,-0.9215627679751466,-0.9205115184421404,-0.9194650492986914,-0.9184233226324722,-0.9173863009592362,-0.9163539472165568,-0.9153262247576746,-0.9143030973454601,-0.9132845291464785,-0.9122704847251655,-0.9112609290381006,-0.9102558274283863,-0.909255145620123,-0.9082588497129829,-0.9072669061768761,-0.906279281846713,-0.9052959439172544,-0.9043168599380531,-0.9033419978084813,-0.9023713257728437,-0.9014048124155759,-0.9004424266565215,-0.8994841377462937,-0.8985299152617123,-0.8975797291013203,-0.8966335494809735,-0.8956913469295075,-0.8947530922844736,-0.8938187566879506,-0.8928883115824213,-0.8919617287067207,-0.891038980092051,-0.8901200380580612,-0.8892048752089916,-0.8882934644298824,-0.887385778882843,-0.8864817920033831,-0.8855814774968027,-0.8846848093346412,-0.8837917617511833,-0.8829023092400216,-0.8820164265506742,-0.8811340886852567,-0.8802552708952062,-0.8793799486780594,-0.8785080977742797,-0.8776396941641363,-0.8767747140646311,-0.8759131339264751,-0.8750549304311103,-0.8742000804877811,-0.873348561230649,-0.8725003500159524,-0.8716554244192117,-0.8708137622324756,-0.8699753414616123,-0.8691401403236395,-0.8683081372440979,-0.8674793108544636,-0.8666536399895988,-0.8658311036852434,-0.8650116811755437,-0.8641953518906174,-0.863382095454157,-0.8625718916810678,-0.8617647205751418,-0.8609605623267665,-0.8601593973106678,-0.8593612060836857,-0.8585659693825839,-0.8577736681218913,-0.8569842833917748,-0.856197796455945,-0.8554141887495897,-0.8546334418773408,-0.8538555376112688,-0.8530804578889059,-0.8523081848113009,-0.8515387006410977,-0.8507719878006456,-0.8500080288701342,-0.8492468065857558,-0.848488303837894,-0.8477325036693387,-0.8469793892735255,-0.8462289439928004,-0.8454811513167094,-0.8447359948803123,-0.8439934584625189,-0.8432535259844509,-0.8425161815078239,-0.8417814092333541,-0.8410491934991867,-0.8403195187793459,-0.8395923696822054,-0.8388677309489824,-0.8381455874522498,-0.8374259241944708,-0.8367087263065521,-0.8359939790464178,-0.8352816677976025,-0.8345717780678635,-0.8338642954878117,-0.833159205809561,-0.8324564949053967,-0.8317561487664608,-0.8310581535014545,-0.8303624953353609,-0.8296691606081806,-0.8289781357736884,-0.8282894073982022,-0.8276029621593728,-0.8269187868449858,-0.8262368683517815,-0.8255571936842898,-0.8248797499536799,-0.8242045243766262,-0.8235315042741875,-0.8228606770707025,-0.8221920302926977,-0.8215255515678119,-0.820861228623732,-0.8201990492871447,-0.8195390014827,-0.8188810732319896,-0.8182252526525372,-0.8175715279568019,-0.8169198874511956,-0.8162703195351098,-0.8156228126999588,-0.8149773555282319,-0.8143339366925593,-0.813692544954788,-0.8130531691650718,-0.8124157982609704,-0.8117804212665616,-0.8111470272915626,-0.8105156055304648,-0.8098861452616758,-0.8092586358466769,-0.808633066729186,-0.808009427434334,-0.8073877075678505,-0.8067678968152593,-0.8061499849410838,-0.8055339617880626,-0.8049198172763735,-0.8043075414028688,-0.8036971242403179,-0.8030885559366605,-0.8024818267142683,-0.8018769268692151,-0.8012738467705566,-0.8006725768596191,-0.8000731076492947,-0.7994754297233476,-0.7988795337357262,-0.7982854104098853,-0.7976930505381162,-0.7971024449808822,-0.7965135846661662,-0.7959264605888215,-0.7953410638099345,-0.7947573854561911,-0.7941754167192533,-0.7935951488551417,-0.7930165731836253,-0.792439681087619,-0.7918644640125874,-0.7912909134659558,-0.7907190210165289,-0.7901487782939142,-0.7895801769879536,-0.7890132088481613,-0.788447865683168,-0.7878841393601715,-0.7873220218043925,-0.786761504998539,-0.786202580982275,-0.7856452418516946,-0.7850894797588045,-0.7845352869110097,-0.7839826555706073,-0.7834315780542841,-0.7828820467326207,-0.7823340540296015,-0.7817875924221296,-0.7812426544395469,-0.7806992326631603,-0.7801573197257732,-0.7796169083112203,-0.7790779911539111,-0.7785405610383741,-0.7780046107988104,-0.7774701333186487,-0.7769371215301066,-0.7764055684137579,-0.7758754669981014,-0.7753468103591387,-0.7748195916199517,-0.7742938039502903,-0.7737694405661587,-0.7732464947294103,-0.7727249597473465,-0.7722048289723169,-0.771686095801328,-0.771168753675653,-0.7706527960804462,-0.770138216544364,-0.7696250086391857,-0.7691131659794425,-0.7686026822220478,-0.7680935510659318,-0.7675857662516818,-0.7670793215611837,-0.7665742108172685,-0.7660704278833632,-0.7655679666631443,-0.7650668211001946,-0.7645669851776659,-0.7640684529179418,-0.7635712183823069,-0.7630752756706181,-0.7625806189209791,-0.7620872423094196,-0.7615951400495762,-0.7611043063923775,-0.7606147356257322,-0.7601264220742208,-0.7596393600987897,-0.7591535440964493,-0.7586689684999742,-0.7581856277776075,-0.757703516432767,-0.7572226290037559,-0.7567429600634747,-0.7562645042191373,-0.7557872561119888,-0.7553112104170282,-0.7548363618427312,-0.7543627051307774,-0.7538902350557806,-0.7534189464250205,-0.7529488340781781,-0.7524798928870732,-0.7520121177554042,-0.7515455036184923,-0.7510800454430253,-0.7506157382268064,-0.7501525769985048,-0.7496905568174078,-0.7492296727731768,-0.7487699199856046,-0.7483112936043756,-0.7478537888088284,-0.74739740080772,-0.7469421248389935,-0.746487956169547,-0.7460348900950053,-0.7455829219394937,-0.7451320470554132,-0.7446822608232203,-0.7442335586512052,-0.743785935975276,-0.7433393882587416,-0.7428939109920992,-0.7424494996928228,-0.7420061499051536,-0.741563857199892,-0.7411226171741933,-0.7406824254513635,-0.7402432776806578,-0.7398051695370809,-0.7393680967211894,-0.738932054958896,-0.7384970400012754,-0.7380630476243715,-0.7376300736290078,-0.7371981138405981,-0.7367671641089604,-0.7363372203081309,-0.735908278336181,-0.7354803341150358,-0.7350533835902936,-0.7346274227310481,-0.7342024475297112,-0.7337784540018383,-0.7333554381859548,-0.7329333961433838,-0.732512323958077,-0.7320922177364443,-0.7316730736071879,-0.7312548877211367,-0.7308376562510811,-0.7304213753916118,-0.7300060413589573,-0.7295916503908253,-0.7291781987462436,-0.728765682705404,-0.7283540985695066,-0.7279434426606058,-0.7275337113214577,-0.7271249009153691,-0.7267170078260472,-0.7263100284574514,-0.7259039592336464,-0.7254987965986555,-0.7250945370163167,-0.724691176970139,-0.7242887129631608,-0.723887141517809,-0.7234864591757589,-0.7230866624977971,-0.7226877480636831,-0.7222897124720146,-0.7218925523400919,-0.7214962643037854,-0.7211008450174023,-0.7207062911535564,-0.720312599403037,-0.7199197664746814,-0.7195277890952458,-0.7191366640092797,-0.7187463879789996,-0.7183569577841653,-0.7179683702219559,-0.717580622106848,-0.7171937102704941,-0.7168076315616021,-0.7164223828458173,-0.7160379610056028,-0.7156543629401239,-0.7152715855651299,-0.7148896258128415,-0.7145084806318346,-0.7141281469869282,-0.7137486218590714,-0.7133699022452331,-0.7129919851582909,-0.7126148676269219,-0.7122385466954947,-0.7118630194239611,-0.7114882828877497,-0.7111143341776605,-0.7107411703997599,-0.7103687886752764,-0.7099971861404977,-0.7096263599466686,-0.7092563072598894,-0.7088870252610154,-0.7085185111455572,-0.7081507621235819,-0.7077837754196147,-0.7074175482725423,-0.7070520779355155,-0.7066873616758546,-0.7063233967749537,-0.705960180528187,-0.7055977102448154,-0.7052359832478944,-0.7048749968741809,-0.7045147484740438,-0.7041552354113735,-0.7037964550634908,-0.7034384048210598,-0.7030810820879992,-0.7027244842813948,-0.7023686088314124,-0.7020134531812128,-0.7016590147868658,-0.7013052911172658,-0.7009522796540478,-0.7005999778915046,-0.7002483833365031,-0.6998974935084039,-0.6995473059389788,-0.6991978181723308,-0.698849027764814,-0.698500932284954,-0.6981535293133702,-0.6978068164426959,-0.6974607912775032,-0.6971154514342236,-0.6967707945410739,-0.6964268182379798,-0.6960835201765004,-0.6957408980197541,-0.6953989494423453,-0.69505767213029,-0.6947170637809444,-0.6943771221029317,-0.6940378448160708,-0.6936992296513058,-0.6933612743506348],"x":[-0.8,-0.8043824701195219,-0.8087649402390438,-0.8131474103585657,-0.8175298804780876,-0.8219123505976096,-0.8262948207171315,-0.8306772908366534,-0.8350597609561753,-0.8394422310756973,-0.8438247011952191,-0.848207171314741,-0.852589641434263,-0.8569721115537848,-0.8613545816733068,-0.8657370517928287,-0.8701195219123506,-0.8745019920318725,-0.8788844621513944,-0.8832669322709163,-0.8876494023904382,-0.8920318725099602,-0.896414342629482,-0.900796812749004,-0.9051792828685259,-0.9095617529880478,-0.9139442231075697,-0.9183266932270916,-0.9227091633466136,-0.9270916334661354,-0.9314741035856574,-0.9358565737051793,-0.9402390438247012,-0.9446215139442231,-0.949003984063745,-0.953386454183267,-0.9577689243027888,-0.9621513944223108,-0.9665338645418327,-0.9709163346613546,-0.9752988047808765,-0.9796812749003984,-0.9840637450199203,-0.9884462151394422,-0.9928286852589642,-0.997211155378486,-1.001593625498008,-1.0059760956175299,-1.0103585657370517,-1.0147410358565736,-1.0191235059760957,-1.0235059760956176,-1.0278884462151394,-1.0322709163346613,-1.0366533864541834,-1.0410358565737052,-1.045418326693227,-1.049800796812749,-1.0541832669322708,-1.058565737051793,-1.0629482071713148,-1.0673306772908366,-1.0717131474103585,-1.0760956175298806,-1.0804780876494025,-1.0848605577689243,-1.0892430278884462,-1.093625498007968,-1.0980079681274901,-1.102390438247012,-1.1067729083665339,-1.1111553784860557,-1.1155378486055776,-1.1199203187250997,-1.1243027888446215,-1.1286852589641434,-1.1330677290836653,-1.1374501992031874,-1.1418326693227092,-1.146215139442231,-1.150597609561753,-1.1549800796812748,-1.159362549800797,-1.1637450199203188,-1.1681274900398406,-1.1725099601593625,-1.1768924302788846,-1.1812749003984064,-1.1856573705179283,-1.1900398406374502,-1.194422310756972,-1.1988047808764941,-1.203187250996016,-1.2075697211155378,-1.2119521912350597,-1.2163346613545816,-1.2207171314741037,-1.2250996015936255,-1.2294820717131474,-1.2338645418326692,-1.2382470119521913,-1.2426294820717132,-1.247011952191235,-1.251394422310757,-1.2557768924302788,-1.2601593625498009,-1.2645418326693227,-1.2689243027888446,-1.2733067729083665,-1.2776892430278886,-1.2820717131474104,-1.2864541832669323,-1.2908366533864541,-1.295219123505976,-1.299601593625498,-1.30398406374502,-1.3083665338645418,-1.3127490039840637,-1.3171314741035856,-1.3215139442231076,-1.3258964143426295,-1.3302788844621514,-1.3346613545816732,-1.3390438247011953,-1.3434262948207172,-1.347808764940239,-1.352191235059761,-1.3565737051792828,-1.3609561752988049,-1.3653386454183267,-1.3697211155378486,-1.3741035856573705,-1.3784860557768925,-1.3828685258964144,-1.3872509960159363,-1.3916334661354581,-1.39601593625498,-1.400398406374502,-1.404780876494024,-1.4091633466135458,-1.4135458167330677,-1.4179282868525895,-1.4223107569721116,-1.4266932270916335,-1.4310756972111554,-1.4354581673306772,-1.4398406374501993,-1.4442231075697212,-1.448605577689243,-1.452988047808765,-1.4573705179282868,-1.4617529880478088,-1.4661354581673307,-1.4705179282868526,-1.4749003984063744,-1.4792828685258965,-1.4836653386454184,-1.4880478087649402,-1.4924302788844621,-1.496812749003984,-1.501195219123506,-1.505577689243028,-1.5099601593625498,-1.5143426294820717,-1.5187250996015935,-1.5231075697211156,-1.5274900398406375,-1.5318725099601593,-1.5362549800796812,-1.5406374501992033,-1.5450199203187251,-1.549402390438247,-1.5537848605577689,-1.5581673306772907,-1.5625498007968128,-1.5669322709163347,-1.5713147410358566,-1.5756972111553784,-1.5800796812749005,-1.5844621513944224,-1.5888446215139442,-1.593227091633466,-1.597609561752988,-1.60199203187251,-1.606374501992032,-1.6107569721115538,-1.6151394422310756,-1.6195219123505975,-1.6239043824701196,-1.6282868525896415,-1.6326693227091633,-1.6370517928286852,-1.6414342629482073,-1.6458167330677291,-1.650199203187251,-1.6545816733067729,-1.6589641434262947,-1.6633466135458168,-1.6677290836653387,-1.6721115537848605,-1.6764940239043824,-1.6808764940239045,-1.6852589641434264,-1.6896414342629482,-1.69402390438247,-1.698406374501992,-1.702788844621514,-1.707171314741036,-1.7115537848605578,-1.7159362549800796,-1.7203187250996015,-1.7247011952191236,-1.7290836653386454,-1.7334661354581673,-1.7378486055776892,-1.7422310756972113,-1.7466135458167331,-1.750996015936255,-1.7553784860557768,-1.7597609561752987,-1.7641434262948208,-1.7685258964143427,-1.7729083665338645,-1.7772908366533864,-1.7816733067729085,-1.7860557768924303,-1.7904382470119522,-1.794820717131474,-1.799203187250996,-1.803585657370518,-1.8079681274900399,-1.8123505976095617,-1.8167330677290836,-1.8211155378486055,-1.8254980079681276,-1.8298804780876494,-1.8342629482071713,-1.8386454183266931,-1.8430278884462152,-1.847410358565737,-1.851792828685259,-1.8561752988047808,-1.8605577689243027,-1.8649402390438248,-1.8693227091633466,-1.8737051792828685,-1.8780876494023904,-1.8824701195219125,-1.8868525896414343,-1.8912350597609562,-1.895617529880478,-1.9,-1.904382470119522,-1.9087649402390439,-1.9131474103585657,-1.9175298804780876,-1.9219123505976095,-1.9262948207171315,-1.9306772908366534,-1.9350597609561753,-1.9394422310756971,-1.9438247011952192,-1.948207171314741,-1.952589641434263,-1.9569721115537848,-1.9613545816733067,-1.9657370517928288,-1.9701195219123506,-1.9745019920318725,-1.9788844621513944,-1.9832669322709164,-1.9876494023904383,-1.9920318725099602,-1.996414342629482,-2.000796812749004,-2.005179282868526,-2.0095617529880476,-2.0139442231075697,-2.018326693227092,-2.0227091633466134,-2.0270916334661355,-2.031474103585657,-2.0358565737051793,-2.0402390438247013,-2.044621513944223,-2.049003984063745,-2.053386454183267,-2.057768924302789,-2.062151394422311,-2.0665338645418325,-2.0709163346613546,-2.0752988047808767,-2.0796812749003983,-2.0840637450199204,-2.088446215139442,-2.092828685258964,-2.0972111553784862,-2.101593625498008,-2.10597609561753,-2.1103585657370516,-2.1147410358565737,-2.119123505976096,-2.1235059760956174,-2.1278884462151395,-2.132270916334661,-2.1366533864541832,-2.1410358565737053,-2.145418326693227,-2.149800796812749,-2.154183266932271,-2.1585657370517928,-2.162948207171315,-2.1673306772908365,-2.1717131474103586,-2.1760956175298807,-2.1804780876494023,-2.1848605577689244,-2.189243027888446,-2.193625498007968,-2.19800796812749,-2.202390438247012,-2.206772908366534,-2.2111553784860556,-2.2155378486055777,-2.2199203187250998,-2.2243027888446214,-2.2286852589641435,-2.233067729083665,-2.237450199203187,-2.2418326693227093,-2.246215139442231,-2.250597609561753,-2.254980079681275,-2.2593625498007968,-2.263745019920319,-2.2681274900398405,-2.2725099601593626,-2.2768924302788847,-2.2812749003984063,-2.2856573705179284,-2.29003984063745,-2.294422310756972,-2.298804780876494,-2.303187250996016,-2.307569721115538,-2.3119521912350596,-2.3163346613545817,-2.3207171314741037,-2.3250996015936254,-2.3294820717131475,-2.333864541832669,-2.338247011952191,-2.3426294820717133,-2.347011952191235,-2.351394422310757,-2.355776892430279,-2.3601593625498007,-2.364541832669323,-2.3689243027888445,-2.3733067729083666,-2.3776892430278886,-2.3820717131474103,-2.3864541832669324,-2.390836653386454,-2.395219123505976,-2.399601593625498,-2.40398406374502,-2.408366533864542,-2.4127490039840636,-2.4171314741035856,-2.4215139442231077,-2.4258964143426294,-2.4302788844621515,-2.434661354581673,-2.439043824701195,-2.4434262948207173,-2.447808764940239,-2.452191235059761,-2.456573705179283,-2.4609561752988047,-2.465338645418327,-2.4697211155378485,-2.4741035856573705,-2.4784860557768926,-2.4828685258964143,-2.4872509960159364,-2.491633466135458,-2.49601593625498,-2.500398406374502,-2.504780876494024,-2.509163346613546,-2.5135458167330675,-2.5179282868525896,-2.5223107569721117,-2.5266932270916334,-2.5310756972111554,-2.535458167330677,-2.539840637450199,-2.5442231075697213,-2.548605577689243,-2.552988047808765,-2.557370517928287,-2.5617529880478087,-2.566135458167331,-2.5705179282868524,-2.5749003984063745,-2.5792828685258966,-2.5836653386454183,-2.5880478087649403,-2.592430278884462,-2.596812749003984,-2.601195219123506,-2.605577689243028,-2.60996015936255,-2.6143426294820715,-2.6187250996015936,-2.6231075697211157,-2.6274900398406373,-2.6318725099601594,-2.636254980079681,-2.640637450199203,-2.6450199203187252,-2.649402390438247,-2.653784860557769,-2.658167330677291,-2.6625498007968127,-2.666932270916335,-2.6713147410358564,-2.6756972111553785,-2.6800796812749006,-2.6844621513944222,-2.6888446215139443,-2.693227091633466,-2.697609561752988,-2.70199203187251,-2.706374501992032,-2.710756972111554,-2.7151394422310755,-2.7195219123505976,-2.7239043824701197,-2.7282868525896413,-2.7326693227091634,-2.737051792828685,-2.741434262948207,-2.745816733067729,-2.750199203187251,-2.754581673306773,-2.758964143426295,-2.7633466135458167,-2.7677290836653388,-2.7721115537848604,-2.7764940239043825,-2.7808764940239046,-2.785258964143426,-2.7896414342629483,-2.79402390438247,-2.798406374501992,-2.802788844621514,-2.8071713147410358,-2.811553784860558,-2.8159362549800795,-2.8203187250996016,-2.8247011952191237,-2.8290836653386453,-2.8334661354581674,-2.837848605577689,-2.842231075697211,-2.846613545816733,-2.850996015936255,-2.855378486055777,-2.859760956175299,-2.8641434262948207,-2.8685258964143427,-2.8729083665338644,-2.8772908366533865,-2.8816733067729086,-2.88605577689243,-2.8904382470119523,-2.894820717131474,-2.899203187250996,-2.903585657370518,-2.9079681274900397,-2.912350597609562,-2.9167330677290835,-2.9211155378486056,-2.9254980079681276,-2.9298804780876493,-2.9342629482071714,-2.938645418326693,-2.943027888446215,-2.947410358565737,-2.951792828685259,-2.956175298804781,-2.960557768924303,-2.9649402390438246,-2.9693227091633467,-2.9737051792828684,-2.9780876494023905,-2.9824701195219125,-2.986852589641434,-2.9912350597609563,-2.995617529880478,-3.0]}

},{}],89:[function(require,module,exports){
module.exports={"expected":[1.0772173450159417,1.0770200064578315,1.0768228124243782,1.076625762730455,1.0764288571912721,1.0762320956223785,1.0760354778396595,1.0758390036593373,1.0756426728979684,1.0754464853724452,1.075250440899993,1.0750545392981699,1.0748587803848673,1.0746631639783066,1.0744676898970411,1.0742723579599536,1.0740771679862555,1.0738821197954869,1.0736872132075153,1.0734924480425352,1.073297824121067,1.0731033412639557,1.072908999292372,1.0727147980278091,1.0725207372920837,1.0723268169073346,1.0721330366960222,1.071939396480927,1.07174589608515,1.0715525353321111,1.0713593140455484,1.071166232049518,1.0709732891683932,1.070780485226862,1.0705878200499301,1.0703952934629164,1.0702029052914535,1.0700106553614883,1.0698185434992797,1.069626569531398,1.0694347332847254,1.0692430345864534,1.0690514732640843,1.068860049145428,1.0686687620586037,1.068477611832037,1.068286598294461,1.0680957212749143,1.0679049806027412,1.0677143761075907,1.0675239076194152,1.0673335749684703,1.0671433779853146,1.0669533165008078,1.0667633903461116,1.066573599352687,1.0663839433522957,1.0661944221769977,1.0660050356591513,1.065815783631413,1.065626665926736,1.065437682378369,1.0652488328198577,1.0650601170850416,1.0648715350080544,1.064683086423324,1.0644947711655708,1.064306589069807,1.064118539971337,1.0639306237057558,1.0637428401089482,1.063555189017089,1.0633676702666415,1.0631802836943576,1.062993029137276,1.0628059064327233,1.0626189154183114,1.0624320559319385,1.0622453278117865,1.0620587308963232,1.0618722650242984,1.061685930034746,1.0614997257669823,1.061313652060604,1.0611277087554898,1.0609418956917989,1.0607562127099697,1.0605706596507198,1.0603852363550461,1.0601999426642221,1.0600147784197993,1.0598297434636057,1.059644837637745,1.0594600607845963,1.0592754127468138,1.059090893367325,1.058906502489332,1.0587222399563085,1.0585381056120018,1.0583540993004288,1.0581702208658799,1.057986470152914,1.0578028470063605,1.0576193512713181,1.0574359827931534,1.057252741417502,1.057069626990266,1.0568866393576144,1.0567037783659827,1.0565210438620716,1.0563384356928474,1.0561559537055394,1.055973597747642,1.0557913676669126,1.0556092633113707,1.0554272845292978,1.0552454311692372,1.055063703079993,1.0548821001106292,1.0547006221104698,1.0545192689290979,1.0543380404163547,1.0541569364223398,1.0539759567974096,1.053795101392178,1.0536143700575147,1.053433762644545,1.053253279004649,1.053072918989462,1.052892682450873,1.052712569241024,1.05253257921231,1.0523527122173781,1.0521729681091276,1.0519933467407085,1.0518138479655212,1.0516344716372166,1.0514552176096947,1.0512760857371048,1.0510970758738438,1.050918187874557,1.050739421594137,1.050560776887723,1.0503822536107,1.0502038516186991,1.050025570767596,1.0498474109135119,1.0496693719128105,1.0494914536221005,1.0493136558982326,1.0491359785982999,1.0489584215796377,1.0487809846998226,1.0486036678166717,1.0484264707882427,1.0482493934728327,1.0480724357289783,1.0478955974154551,1.0477188783912759,1.0475422785156918,1.0473657976481912,1.0471894356484983,1.0470131923765744,1.0468370676926158,1.0466610614570537,1.0464851735305543,1.0463094037740175,1.0461337520485767,1.0459582182155986,1.0457828021366824,1.0456075036736585,1.04543232268859,1.04525725904377,1.0450823126017228,1.0449074832252023,1.0447327707771918,1.0445581751209037,1.0443836961197788,1.0442093336374862,1.0440350875379223,1.0438609576852105,1.0436869439437002,1.043513046177968,1.043339264252815,1.0431655980332677,1.042992047384577,1.0428186121722183,1.0426452922618903,1.0424720875195144,1.0422989978112354,1.0421260230034195,1.0419531629626553,1.0417804175557521,1.0416077866497397,1.0414352701118688,1.0412628678096092,1.0410905796106504,1.0409184053829008,1.0407463449944867,1.0405743983137525,1.0404025652092599,1.0402308455497882,1.040059239204332,1.0398877460421028,1.0397163659325275,1.0395450987452477,1.0393739443501204,1.0392029026172156,1.0390319734168183,1.0388611566194257,1.0386904520957483,1.038519859716709,1.0383493793534424,1.0381790108772948,1.0380087541598229,1.0378386090727945,1.0376685754881874,1.037498653278189,1.0373288423151956,1.0371591424718125,1.0369895536208538,1.0368200756353403,1.0366507083885013,1.0364814517537726,1.0363123056047965,1.0361432698154216,1.035974344259702,1.0358055288118972,1.0356368233464717,1.0354682277380938,1.0352997418616359,1.0351313655921743,1.0349630988049878,1.0347949413755584,1.03462689317957,1.0344589540929081,1.0342911239916601,1.034123402752114,1.0339557902507581,1.0337882863642813,1.033620890969572,1.0334536039437174,1.0332864251640042,1.0331193545079171,1.032952391853139,1.03278553707755,1.032618790059228,1.0324521506764472,1.032285618807678,1.0321191943315877,1.0319528771270376,1.0317866670730853,1.0316205640489826,1.0314545679341756,1.0312886786083046,1.031122895951203,1.0309572198428978,1.030791650163608,1.0306261867937452,1.0304608296139128,1.030295578504906,1.0301304333477106,1.0299653940235034,1.0298004604136513,1.0296356323997111,1.0294709098634294,1.0293062926867413,1.029141780751771,1.0289773739408312,1.028813072136422,1.0286488752212313,1.028484783078134,1.0283207955901923,1.0281569126406538,1.027993134112953,1.0278294598907094,1.027665889857728,1.0275024238979986,1.0273390618956952,1.0271758037351761,1.0270126493009837,1.0268495984778423,1.026686651150661,1.0265238072045297,1.026361066524722,1.0261984289966921,1.0260358945060764,1.0258734629386916,1.025711134180536,1.0255489081177875,1.0253867846368043,1.0252247636241238,1.0250628449664632,1.0249010285507179,1.0247393142639618,1.0245777019934474,1.0244161916266048,1.0242547830510411,1.0240934761545406,1.0239322708250642,1.0237711669507494,1.0236101644199092,1.0234492631210321,1.0232884629427825,1.0231277637739988,1.0229671655036945,1.0228066680210568,1.0226462712154467,1.022485974976399,1.0223257791936218,1.0221656837569946,1.0220056885565707,1.0218457934825746,1.021685998425403,1.0215263032756232,1.0213667079239743,1.0212072122613656,1.0210478161788763,1.0208885195677564,1.020729322319425,1.02057022432547,1.020411225477649,1.0202523256678877,1.0200935247882803,1.0199348227310885,1.0197762193887416,1.0196177146538368,1.019459308419137,1.0193010005775727,1.0191427910222397,1.0189846796464004,1.018826666343482,1.0186687510070775,1.0185109335309446,1.0183532138090052,1.018195591735346,1.0180380672042166,1.0178806401100313,1.0177233103473666,1.0175660778109625,1.0174089423957213,1.0172519039967074,1.0170949625091474,1.0169381178284294,1.0167813698501023,1.0166247184698767,1.0164681635836232,1.0163117050873727,1.0161553428773165,1.015999076849805,1.0158429069013486,1.0156868329286157,1.0155308548284343,1.0153749724977905,1.0152191858338284,1.0150634947338495,1.0149078990953135,1.0147523988158365,1.0145969937931916,1.0144416839253083,1.0142864691102729,1.0141313492463266,1.013976324231867,1.0138213939654461,1.0136665583457718,1.0135118172717057,1.0133571706422646,1.0132026183566185,1.0130481603140917,1.0128937964141616,1.0127395265564587,1.0125853506407665,1.012431268567021,1.0122772802353097,1.0121233855458733,1.011969584399103,1.0118158766955416,1.0116622623358833,1.0115087412209722,1.0113553132518036,1.0112019783295225,1.0110487363554237,1.0108955872309515,1.0107425308576996,1.0105895671374108,1.0104366959719755,1.0102839172634341,1.0101312309139736,1.0099786368259294,1.0098261349017843,1.0096737250441685,1.0095214071558585,1.009369181139778,1.0092170468989967,1.0090650043367304,1.0089130533563406,1.0087611938613343,1.0086094257553637,1.008457748942226,1.0083061633258625,1.0081546688103595,1.0080032652999473,1.007851952698999,1.0077007309120325,1.007549599843708,1.0073985593988288,1.0072476094823413,1.0070967499993337,1.0069459808550365,1.006795301954822,1.006644713204204,1.0064942145088378,1.0063438057745195,1.0061934869071858,1.006043257812914,1.0058931183979214,1.0057430685685655,1.0055931082313434,1.005443237292891,1.0052934556599837,1.0051437632395361,1.0049941599386005,1.0048446456643685,1.0046952203241686,1.0045458838254677,1.0043966360758703,1.0042474769831173,1.0040984064550877,1.0039494243997966,1.0038005307253954,1.0036517253401716,1.0035030081525491,1.0033543790710866,1.0032058380044793,1.0030573848615567,1.002909019551283,1.002760741982758,1.0026125520652147,1.0024644497080208,1.0023164348206774,1.00216850731282,1.0020206670942167,1.0018729140747684,1.0017252481645094,1.0015776692736067,1.0014301773123586,1.0012827721911968,1.0011354538206831,1.0009882221115127,1.0008410769745106,1.0006940183206336,1.0005470460609691,1.000400160106735,1.0002533603692794,1.00010664676008,0.9999600191907457,0.9998134775730135,0.9996670218187504,0.999520651839952,0.9993743675487432,0.9992281688573772,0.9990820556782354,0.9989360279238275,0.9987900855067907,0.9986442283398901,0.998498456336018,0.9983527694081938,0.998207167469564,0.998061650433401,0.9979162182131045,0.9977708707221997,0.9976256078743381,0.9974804295832963,0.9973353357629767,0.9971903263274071,0.9970454011907397,0.996900560267252,0.9967558034713456,0.9966111307175465,0.9964665419205042,0.996322036994993,0.9961776158559096,0.9960332784182752,0.9958890245972324,0.9957448543080487,0.9956007674661126,0.9954567639869357,0.9953128437861515,0.9951690067795158,0.9950252528829056,0.9948815820123197,0.9947379940838778,0.9945944890138211,0.9944510667185112,0.9943077271144306,0.9941644701181812,0.9940212956464867,0.9938782036161887,0.9937351939442503,0.9935922665477523,0.9934494213438964,0.993306658250002,0.9931639771835078,0.9930213780619709,0.992878860803067,0.9927364253245896,0.9925940715444503,0.9924517993806778,0.9923096087514192,0.992167499574938,0.9920254717696151,0.9918835252539481,0.991741659946551,0.9915998757661544,0.9914581726316051,0.9913165504618654,0.991175009176014,0.9910335486932439,0.9908921689328651,0.9907508698143009,0.9906096512570909,0.9904685131808882,0.9903274555054611,0.9901864781506917,0.9900455810365762,0.9899047640832247,0.9897640272108611,0.989623370339822,0.9894827933905574,0.9893422962836308,0.989201878939718,0.9890615412796072,0.9889212832241993,0.9887811046945066,0.9886410056116548,0.9885009858968795,0.9883610454715289,0.9882211842570626,0.9880814021750505,0.9879416991471741,0.9878020750952251,0.9876625299411064,0.98752306360683,0.9873836760145192,0.9872443670864066,0.9871051367448342,0.9869659849122543,0.9868269115112274,0.986687916464424,0.9865489996946231,0.9864101611247124,0.9862714006776879,0.9861327182766542,0.9859941138448237,0.9858555873055169,0.9857171385821619,0.985578767598294,0.9854404742775565,0.9853022585436995,0.9851641203205793,0.9850260595321596,0.9848880761025106,0.9847501699558089,0.9846123410163369,0.984474589208483,0.9843369144567411,0.9841993166857116,0.9840617958200992,0.9839243517847143,0.9837869845044723,0.9836496939043928,0.9835124799096007,0.983375342445325,0.983238281436899,0.9831012968097598,0.9829643884894487,0.9828275564016103,0.982690800471993,0.9825541206264481,0.9824175167909301,0.9822809888914967,0.9821445368543082,0.9820081606056269,0.9818718600718183,0.9817356351793494,0.9815994858547894,0.9814634120248096,0.9813274136161821,0.9811914905557813,0.9810556427705823,0.9809198701876617,0.9807841727341967,0.9806485503374648,0.980513002924845,0.9803775304238157,0.980242132761956,0.9801068098669449,0.9799715616665607,0.9798363880886823,0.9797012890612873,0.9795662645124523,0.9794313143703541,0.9792964385632672,0.9791616370195657,0.9790269096677218,0.9788922564363058,0.9787576772539873,0.978623172049533,0.9784887407518071,0.9783543832897729,0.9782200995924898,0.9780858895891152,0.9779517532089036,0.9778176903812065,0.9776837010354719,0.9775497851012447,0.9774159425081664,0.9772821731859743,0.9771484770645026,0.9770148540736806,0.976881304143534,0.976747827204184,0.9766144231858465,0.9764810920188338,0.9763478336335527,0.9762146479605053,0.9760815349302877,0.9759484944735913,0.9758155265212018,0.975682631003999,0.9755498078529571,0.9754170569991434,0.9752843783737204,0.9751517719079429,0.9750192375331593,0.9748867751808122,0.9747543847824365,0.9746220662696597,0.9744898195742033,0.9743576446278803,0.9742255413625966,0.9740935097103505,0.973961549603232,0.9738296609734233,0.9736978437531986,0.9735660978749235,0.9734344232710549,0.9733028198741414,0.9731712876168227,0.9730398264318292,0.9729084362519824,0.972777117010194,0.9726458686394674,0.9725146910728951,0.9723835842436601,0.9722525480850358,0.9721215825303854,0.9719906875131613,0.9718598629669063,0.9717291088252522,0.9715984250219197,0.9714678114907193,0.9713372681655498,0.971206794980399,0.971076391869344,0.9709460587665492,0.9708157956062682,0.9706856023228425,0.9705554788507015,0.9704254251243625,0.9702954410784307,0.9701655266475986,0.9700356817666466,0.9699059063704417,0.9697762003939383,0.9696465637721778,0.9695169964402884,0.9693874983334849,0.9692580693870687,0.969128709536427,0.9689994187170342,0.9688701968644499,0.96874104391432,0.9686119598023759,0.9684829444644351,0.9683539978363999,0.9682251198542582,0.9680963104540831,0.9679675695720327,0.9678388971443501,0.9677102931073631,0.9675817573974834,0.967453289951208,0.9673248907051181,0.9671965595958782,0.967068296560238,0.9669401015350299,0.9668119744571707,0.9666839152636606,0.9665559238915833,0.9664280002781055,0.9663001443604773,0.9661723560760319,0.9660446353621845,0.9659169821564342,0.9657893963963616,0.9656618780196307,0.965534426963987,0.9654070431672581,0.9652797265673542,0.965152477102267,0.9650252947100701,0.9648981793289184,0.964771130897048,0.9646441493527772,0.9645172346345047,0.9643903866807102,0.9642636054299545,0.9641368908208794,0.964010242792207,0.9638836612827395,0.9637571462313602,0.9636306975770321,0.9635043152587983,0.9633779992157817,0.9632517493871855,0.963125565712292,0.9629994481304632,0.9628733965811405,0.9627474110038443,0.9626214913381745,0.9624956375238097,0.9623698495005074,0.9622441272081039,0.9621184705865141,0.961992879575731,0.9618673541158258,0.9617418941469486,0.9616164996093272,0.9614911704432668,0.961365906589151,0.9612407079874407,0.9611155745786745,0.9609905063034686,0.9608655031025156,0.9607405649165859,0.960615691686527,0.9604908833532629,0.9603661398577943,0.9602414611411988,0.9601168471446301,0.9599922978093185,0.9598678130765704,0.9597433928877683,0.9596190371843708,0.959494745907912,0.959370519000002,0.9592463564023264,0.9591222580566459,0.9589982239047972,0.9588742538886914,0.9587503479503154,0.9586265060317304,0.9585027280750732,0.9583790140225542,0.958255363816459,0.958131777399148,0.9580082547130554,0.9578847957006893,0.9577614003046325,0.9576380684675416,0.9575148001321466,0.9573915952412518,0.9572684537377344,0.9571453755645456,0.9570223606647096,0.9568994089813241,0.9567765204575595,0.9566536950366592,0.95653093266194,0.9564082332767908,0.956285596824673,0.9561630232491211,0.9560405124937413,0.9559180645022125,0.9557956792182857,0.9556733565857832,0.9555510965486,0.9554288990507028,0.955306764036129,0.955184691448989,0.955062681233463,0.9549407333338035,0.9548188476943339,0.9546970242594486,0.9545752629736132,0.9544535637813634,0.9543319266273065,0.9542103514561193,0.9540888382125503,0.9539673868414172,0.9538459972876085,0.9537246694960829,0.9536034034118689,0.9534821989800645,0.9533610561458379,0.9532399748544272,0.9531189550511392,0.9529979966813509,0.9528770996905083,0.9527562640241263,0.9526354896277892,0.9525147764471502,0.9523941244279314,0.9522735335159236,0.9521530036569859,0.9520325347970463,0.951912126882101,0.9517917798582145,0.9516714936715196,0.9515512682682169,0.9514311035945753,0.9513109995969309,0.9511909562216881,0.9510709734153189,0.9509510511243624,0.9508311892954254,0.9507113878751816,0.9505916468103726,0.9504719660478063,0.9503523455343578,0.9502327852169692,0.9501132850426492,0.9499938449584729,0.9498744649115825,0.9497551448491857,0.9496358847185575,0.9495166844670383,0.9493975440420349,0.9492784633910201,0.9491594424615323,0.9490404812011761,0.9489215795576214,0.9488027374786038,0.9486839549119238,0.9485652318054483,0.9484465681071084,0.9483279637649007,0.948209418726887,0.9480909329411937,0.9479725063560123,0.9478541389195986,0.947735830580273,0.9476175812864209,0.9474993909864918,0.9473812596289989,0.9472631871625208,0.9471451735356989,0.9470272186972393,0.9469093225959117,0.9467914851805496,0.9466737064000503,0.9465559862033743,0.9464383245395459,0.9463207213576524,0.9462031766068452,0.9460856902363373,0.945968262195406,0.9458508924333912,0.9457335808996955,0.9456163275437842,0.9454991323151857,0.9453819951634901,0.9452649160383505,0.9451478948894826,0.9450309316666636,0.9449140263197332,0.9447971787985934,0.9446803890532073,0.9445636570336008,0.944446982689861,0.9443303659721367,0.9442138068306382,0.9440973052156374,0.9439808610774671,0.9438644743665222,0.9437481450332578,0.9436318730281906,0.943515658301898,0.9433995008050183,0.9432834004882509,0.9431673573023549,0.9430513711981509,0.9429354421265198,0.9428195700384028,0.9427037548848005,0.9425879966167752,0.9424722951854482,0.9423566505420011,0.9422410626376754,0.942125531423772,0.9420100568516523,0.9418946388727365,0.9417792774385048,0.9416639725004964,0.9415487240103103,0.9414335319196043,0.9413183961800954,0.9412033167435601,0.9410882935618327,0.9409733265868075,0.9408584157704373,0.9407435610647332,0.9406287624217649,0.9405140197936608,0.9403993331326075,0.9402847023908502,0.9401701275206915,0.9400556084744932,0.9399411452046744,0.9398267376637123,0.9397123858041415,0.9395980895785554,0.9394838489396037,0.9393696638399948,0.9392555342324935,0.9391414600699233,0.9390274413051636,0.9389134778911518,0.938799569780882,0.9386857169274059,0.9385719192838313,0.9384581768033236,0.9383444894391042,0.938230857144452,0.9381172798727014,0.9380037575772444,0.9378902902115284,0.9377768777290578,0.9376635200833928,0.93755021722815,0.9374369691170016,0.9373237757036762,0.9372106369419583,0.9370975527856874,0.9369845231887595,0.936871548105126,0.9367586274887935,0.9366457612938243,0.936532949474336,0.936420191984501,0.9363074887785476,0.936194839810759,0.9360822450354727,0.9359697044070818,0.9358572178800341,0.935744785408832,0.9356324069480324,0.9355200824522472,0.9354078118761422,0.9352955951744378,0.9351834323019093,0.935071323213385,0.9349592678637486,0.9348472662079371,0.9347353182009415,0.9346234237978069,0.9345115829536319,0.9343997956235695,0.9342880617628255,0.9341763813266596,0.934064754270385,0.933953180549368,0.933841660119029,0.9337301929348406,0.933618778952329,0.9335074181270735,0.9333961104147063,0.9332848557709121,0.9331736541514294,0.9330625055120484,0.9329514098086125,0.9328403669970172,0.9327293770332109,0.9326184398731943,0.9325075554730204,0.9323967237887942,0.9322859447766734,0.9321752183928671,0.9320645445936367,0.9319539233352957,0.9318433545742093,0.9317328382667942,0.9316223743695192,0.9315119628389041,0.9314016036315209,0.9312912967039927,0.9311810420129938,0.9310708395152499,0.9309606891675383,0.9308505909266865,0.9307405447495744,0.930630550593131,0.9305206084143379,0.9304107181702269,0.9303008798178801,0.930191093314431,0.9300813586170626,0.9299716756830099,0.9298620444695568,0.9297524649340387,0.9296429370338406,0.9295334607263978,0.9294240359691959,0.9293146627197704,0.9292053409357065,0.9290960705746402,0.9289868515942559,0.9288776839522886,0.928768567606523,0.9286595025147935,0.9285504886349829,0.9284415259250249,0.9283326143429015,0.9282237538466445,0.9281149443943346,0.9280061859441019,0.9278974784541252,0.9277888218826325,0.9276802161879008,0.9275716613282555,0.9274631572620713,0.9273547039477712,0.9272463013438272,0.927137949408759,0.9270296481011358,0.9269213973795741,0.9268131972027399,0.9267050475293465,0.9265969483181555,0.9264888995279771,0.9263809011176691,0.9262729530461371,0.926165055272335,0.9260572077552641,0.9259494104539738,0.9258416633275609,0.9257339663351697,0.9256263194359922,0.9255187225892679,0.9254111757542834,0.925303678890373,0.9251962319569176,0.9250888349133457,0.924981487719133,0.9248741903338018,0.9247669427169214,0.9246597448281085,0.9245525966270258,0.9244454980733836,0.9243384491269377,0.9242314497474918,0.9241244998948953,0.9240175995290439,0.9239107486098802,0.9238039470973932,0.9236971949516174,0.9235904921326342,0.9234838386005705,0.9233772343155999,0.9232706792379413,0.9231641733278599,0.9230577165456666,0.922951308851718,0.9228449502064165,0.92273864057021,0.9226323799035921,0.9225261681671015,0.9224200053213231,0.9223138913268862,0.9222078261444658,0.9221018097347825,0.9219958420586012,0.9218899230767326,0.9217840527500321,0.9216782310394,0.9215724579057816,0.9214667333101669,0.921361057213591,0.9212554295771327,0.9211498503619167,0.9210443195291111,0.9209388370399294,0.920833402855629,0.9207280169375114,0.9206226792469231,0.920517389745254,0.9204121483939388,0.920306955154456,0.9202018099883281,0.9200967128571215,0.9199916637224467,0.9198866625459576,0.9197817092893524,0.9196768039143725,0.9195719463828033,0.9194671366564735,0.9193623746972552,0.9192576604670645,0.91915299392786,0.9190483750416445,0.9189438037704633,0.9188392800764051,0.918734803921602,0.9186303752682288,0.9185259940785034,0.9184216603146867,0.9183173739390822,0.9182131349140367,0.9181089432019388,0.9180047987652207,0.917900701566357,0.9177966515678642,0.9176926487323023,0.9175886930222726,0.9174847844004199,0.9173809228294304,0.9172771082720327,0.9171733406909978,0.9170696200491388,0.9169659463093107,0.9168623194344105,0.9167587393873772,0.9166552061311914,0.9165517196288756,0.9164482798434944,0.9163448867381538,0.9162415402760011,0.9161382404202255,0.916034987134058,0.9159317803807702,0.9158286201236755,0.915725506326129,0.9156224389515264,0.9155194179633047,0.9154164433249428,0.9153135149999593,0.9152106329519152,0.915107797144411,0.9150050075410898,0.9149022641056339,0.9147995668017674,0.9146969155932546,0.9145943104439008,0.9144917513175517,0.9143892381780933,0.9142867709894525,0.9141843497155964,0.9140819743205324,0.9139796447683083,0.9138773610230122,0.913775123048772,0.9136729308097563,0.9135707842701732,0.9134686833942711,0.9133666281463385,0.9132646184907034,0.9131626543917336,0.9130607358138373,0.9129588627214618,0.9128570350790941,0.912755252851261,0.9126535160025289,0.9125518244975034,0.9124501783008298,0.9123485773771924,0.9122470216913154,0.9121455112079617,0.9120440458919339,0.9119426257080728,0.9118412506212596,0.9117399205964135,0.9116386355984932,0.9115373955924959,0.9114362005434582,0.911335050416455,0.9112339451766001,0.9111328847890463,0.9110318692189845,0.9109308984316447,0.910829972392295,0.9107290910662422,0.9106282544188316,0.9105274624154464,0.9104267150215086,0.9103260122024783,0.9102253539238537,0.9101247401511712,0.9100241708500054,0.9099236459859685,0.9098231655247113,0.909722729431922,0.909622337673327,0.90952199021469,0.9094216870218134,0.9093214280605363,0.9092212132967362,0.9091210426963277,0.9090209162252629,0.9089208338495318,0.9088207955351616,0.9087208012482172,0.9086208509547999,0.9085209446210495,0.9084210822131421,0.9083212636972915,0.908221489039748,0.9081217582067999,0.9080220711647716,0.9079224278800251,0.9078228283189586,0.907723272448008,0.9076237602336452,0.9075242916423796,0.9074248666407566,0.9073254851953588,0.9072261472728049,0.9071268528397506,0.9070276018628874,0.9069283943089443,0.9068292301446856,0.9067301093369127,0.9066310318524625,0.9065319976582091,0.9064330067210619,0.9063340590079672,0.9062351544859063,0.9061362931218978,0.9060374748829954,0.9059386997362888,0.9058399676489041,0.9057412785880025,0.9056426325207815,0.905544029414474,0.9054454692363486,0.9053469519537098,0.9052484775338975,0.9051500459442869,0.905051657152289,0.9049533111253497,0.9048550078309512,0.9047567472366099,0.9046585293098782,0.9045603540183434,0.9044622213296284,0.9043641312113904,0.9042660836313222,0.904168078557152,0.9040701159566421,0.9039721957975902,0.903874318047829,0.9037764826752256,0.9036786896476823,0.9035809389331357,0.9034832304995575,0.9033855643149536,0.9032879403473648,0.9031903585648663,0.9030928189355677,0.9029953214276131,0.9028978660091811,0.9028004526484847,0.9027030813137706,0.9026057519733203,0.9025084645954495,0.9024112191485076,0.9023140156008789,0.9022168539209804,0.9021197340772644,0.9020226560382165,0.9019256197723566,0.901828625248238,0.9017316724344482,0.9016347612996081,0.9015378918123724,0.9014410639414299,0.9013442776555022,0.9012475329233453,0.9011508297137484,0.9010541679955338,0.9009575477375581,0.9008609689087104,0.9007644314779134,0.9006679354141237,0.9005714806863302,0.9004750672635555,0.9003786951148556,0.900282364209319,0.9001860745160674,0.9000898260042561,0.8999936186430728,0.8998974524017381,0.899801327249506,0.8997052431556626,0.8996092000895274,0.8995131980204523,0.899417236917822,0.8993213167510541,0.8992254374895983,0.8991295991029372,0.8990338015605857,0.8989380448320916,0.8988423288870346,0.898746653695027,0.8986510192257137,0.8985554254487712,0.8984598723339091,0.8983643598508686,0.8982688879694232,0.8981734566593785,0.8980780658905725,0.8979827156328747,0.897887405856187,0.8977921365304427,0.8976969076256076,0.8976017191116793,0.8975065709586867,0.897411463136691,0.8973163956157844,0.8972213683660919,0.8971263813577688,0.8970314345610033,0.896936527946014,0.8968416614830519,0.8967468351423988,0.8966520488943682,0.8965573027093051,0.8964625965575855,0.8963679304096169,0.896273304235838,0.8961787180067187,0.8960841716927599,0.895989665264494,0.8958951986924837,0.895800771947324,0.8957063849996395,0.8956120378200867,0.8955177303793527,0.8954234626481551,0.895329234597243,0.8952350461973957,0.8951408974194233,0.8950467882341672,0.8949527186124985,0.8948586885253197,0.8947646979435632,0.8946707468381927,0.8945768351802017,0.8944829629406144,0.8943891300904854,0.8942953366008994,0.894201582442972,0.8941078675878485,0.8940141920067048,0.8939205556707467,0.8938269585512105,0.893733400619362,0.8936398818464978,0.8935464022039441,0.893452961663057,0.893359560195223,0.893266197771858,0.8931728743644081,0.8930795899443491,0.8929863444831865,0.8928931379524557,0.8927999703237216,0.892706841568579,0.8926137516586523,0.8925207005655952,0.8924276882610913,0.8923347147168533,0.8922417799046238,0.8921488837961745,0.8920560263633066,0.8919632075778509,0.8918704274116668,0.8917776858366435,0.8916849828246995,0.8915923183477823,0.8914996923778683,0.8914071048869635,0.8913145558471026,0.8912220452303493,0.8911295730087968,0.8910371391545666,0.8909447436398094,0.8908523864367046,0.8907600675174608,0.8906677868543152,0.8905755444195337,0.8904833401854108,0.8903911741242698,0.8902990462084628,0.8902069564103702,0.8901149047024013,0.8900228910569936,0.8899309154466132,0.8898389778437547,0.8897470782209409,0.8896552165507235,0.8895633928056816,0.8894716069584238,0.889379858981586,0.8892881488478326,0.889196476529856,0.8891048420003774,0.8890132452321453,0.8889216861979369,0.8888301648705569,0.8887386812228383,0.8886472352276419,0.8885558268578567,0.8884644560863993,0.8883731228862143,0.8882818272302737,0.8881905690915781,0.8880993484431547,0.8880081652580598,0.887917019509376,0.887825911170214,0.8877348402137127,0.8876438066130377,0.8875528103413824,0.8874618513719676,0.8873709296780422,0.8872800452328813,0.8871891980097882,0.8870983879820935,0.8870076151231546,0.8869168794063568,0.8868261808051121,0.8867355192928599,0.8866448948430666,0.886554307429226,0.8864637570248586,0.8863732436035124,0.886282767138762,0.8861923276042091,0.8861019249734822,0.8860115592202369,0.8859212303181557,0.8858309382409477,0.8857406829623488,0.8856504644561217,0.8855602826960561,0.8854701376559682,0.8853800293097005,0.8852899576311225,0.8851999225941302,0.885109924172646,0.885019962340619,0.8849300370720244,0.8848401483408647,0.8847502961211678,0.8846604803869887,0.884570701112408,0.8844809582715332,0.8843912518384978,0.8843015817874618,0.8842119480926108,0.8841223507281577,0.8840327896683399,0.8839432648874221,0.883853776359695,0.8837643240594746,0.8836749079611036,0.8835855280389503,0.8834961842674087,0.8834068766208993,0.8833176050738681,0.8832283696007869,0.8831391701761532,0.8830500067744905,0.8829608793703477,0.8828717879382999,0.8827827324529471,0.8826937128889156,0.882604729220857,0.8825157814234481,0.8824268694713919,0.8823379933394165,0.8822491530022755,0.8821603484347476,0.8820715796116372,0.8819828465077744,0.881894149098014,0.8818054873572363,0.881716861260347,0.8816282707822767,0.8815397158979813,0.881451196582442,0.8813627128106651,0.8812742645576817,0.8811858517985482,0.8810974745083462,0.8810091326621818,0.8809208262351862,0.8808325552025158,0.8807443195393517,0.8806561192208999,0.880567954222391,0.8804798245190808,0.8803917300862494,0.8803036708992018,0.8802156469332681,0.8801276581638023,0.8800397045661839,0.8799517861158161,0.8798639027881274,0.8797760545585703,0.8796882414026221,0.8796004632957847,0.8795127202135838,0.8794250121315703,0.8793373390253192,0.8792497008704294,0.8791620976425247,0.879074529317253,0.8789869958702864,0.878899497277321,0.8788120335140776,0.8787246045563005,0.878637210379759,0.8785498509602453,0.8784625262735769,0.8783752362955947,0.8782879810021634,0.8782007603691722,0.8781135743725336,0.8780264229881849,0.8779393061920863,0.8778522239602227,0.877765176268602,0.8776781630932564,0.877591184410242,0.877504240195638,0.8774173304255481,0.8773304550760989,0.8772436141234408,0.8771568075437484,0.8770700353132191,0.8769832974080743,0.8768965938045586,0.8768099244789406,0.8767232894075117,0.8766366885665868,0.8765501219325049,0.8764635894816275,0.8763770911903401,0.876290627035051,0.8762041969921919,0.8761178010382178,0.876031439149607,0.8759451113028609,0.875858817474504,0.875772557641084,0.8756863317791714,0.8756001398653603,0.8755139818762675,0.8754278577885327,0.8753417675788188,0.8752557112238114,0.8751696887002193,0.8750836999847743,0.8749977450542303,0.8749118238853649,0.8748259364549781,0.8747400827398926,0.8746542627169539,0.8745684763630303,0.8744827236550128,0.8743970045698148,0.8743113190843727,0.8742256671756452,0.8741400488206137,0.8740544639962822,0.8739689126796768,0.8738833948478467,0.8737979104778631,0.87371245954682,0.8736270420318331,0.8735416579100411,0.8734563071586052,0.8733709897547083,0.8732857056755556,0.8732004548983753,0.8731152374004169,0.8730300531589528,0.8729449021512773,0.8728597843547065,0.8727746997465793,0.8726896483042561,0.8726046300051197,0.8725196448265748,0.872434692746048,0.8723497737409882,0.8722648877888658,0.8721800348671733,0.8720952149534255,0.8720104280251582,0.8719256740599297,0.8718409530353202,0.871756264928931,0.8716716097183858,0.8715869873813297,0.8715023978954296,0.8714178412383741,0.8713333173878732,0.8712488263216591,0.8711643680174846,0.8710799424531249,0.8709955496063767,0.8709111894550579,0.8708268619770076,0.8707425671500872,0.8706583049521788,0.870574075361186,0.8704898783550343,0.8704057139116698,0.8703215820090603,0.8702374826251951,0.8701534157380839,0.8700693813257591,0.8699853793662728,0.8699014098376993,0.8698174727181336,0.869733567985692,0.8696496956185116,0.8695658555947511,0.8694820478925898,0.8693982724902282,0.8693145293658877,0.8692308184978109,0.8691471398642613,0.8690634934435231,0.8689798792139014,0.8688962971537223,0.868812747241333,0.868729229455101,0.8686457437734147,0.8685622901746838,0.8684788686373379,0.868395479139828,0.8683121216606253,0.8682287961782224,0.8681455026711313,0.8680622411178858,0.8679790114970396,0.8678958137871672,0.8678126479668637,0.8677295140147445,0.8676464119094455,0.8675633416296233,0.8674803031539547,0.8673972964611371,0.8673143215298877,0.867231378338945,0.867148466867067,0.8670655870930325,0.8669827389956404,0.8668999225537097,0.8668171377460799,0.8667343845516107,0.8666516629491816,0.8665689729176924,0.8664863144360637,0.8664036874832352,0.8663210920381672,0.8662385280798399,0.8661559955872539,0.8660734945394291,0.8659910249154059,0.8659085866942448,0.8658261798550256,0.8657438043768484,0.8656614602388334,0.86557914742012,0.8654968658998683,0.8654146156572572,0.8653323966714864,0.8652502089217743,0.8651680523873602,0.8650859270475023,0.8650038328814784,0.8649217698685865,0.8648397379881438,0.8647577372194876,0.8646757675419742,0.8645938289349798,0.8645119213779,0.8644300448501504,0.8643481993311651,0.8642663848003987,0.8641846012373245,0.8641028486214356,0.8640211269322444,0.8639394361492827,0.8638577762521016,0.8637761472202715,0.8636945490333822,0.8636129816710427,0.8635314451128812,0.8634499393385453,0.8633684643277014,0.863287020060036,0.8632056065152535,0.8631242236730784,0.863042871513254,0.8629615500155423,0.8628802591597252,0.8627989989256031,0.8627177692929953,0.8626365702417403,0.8625554017516955,0.8624742638027377,0.8623931563747618,0.8623120794476823,0.862231033001432,0.862150017015963,0.8620690314712464,0.8619880763472715,0.8619071516240464,0.8618262572815989,0.8617453932999745,0.8616645596592378,0.8615837563394723,0.8615029833207797,0.8614222405832809,0.861341528107115,0.8612608458724398,0.8611801938594319,0.8610995720482862,0.8610189804192163,0.8609384189524543,0.8608578876282503,0.8607773864268738,0.8606969153286121,0.8606164743137711,0.860536063362675,0.8604556824556663,0.8603753315731064,0.8602950106953742,0.8602147198028677,0.8601344588760027,0.8600542278952134,0.8599740268409524,0.85989385569369,0.8598137144339155,0.8597336030421359,0.8596535214988761,0.8595734697846797,0.8594934478801084,0.8594134557657411,0.859333493422176,0.8592535608300287,0.8591736579699326,0.8590937848225396,0.8590139413685195,0.8589341275885596,0.8588543434633658,0.8587745889736615,0.8586948641001881,0.8586151688237049,0.8585355031249889,0.8584558669848353,0.8583762603840566,0.8582966833034834,0.8582171357239642,0.8581376176263648,0.8580581289915692,0.8579786698004785,0.8578992400340126,0.8578198396731077,0.8577404686987186,0.857661127091817,0.857581814833393,0.8575025319044537,0.8574232782860237,0.8573440539591456,0.8572648589048794,0.857185693104302,0.8571065565385086,0.8570274491886112,0.8569483710357396,0.8568693220610409,0.8567903022456798,0.8567113115708376,0.8566323500177139,0.8565534175675251,0.8564745142015051,0.856395639900905,0.856316794646993,0.856237978421055,0.8561591912043934,0.8560804329783286,0.8560017037241975,0.8559230034233547,0.8558443320571718,0.8557656896070371,0.8556870760543563,0.8556084913805527,0.8555299355670656,0.8554514085953521,0.8553729104468859,0.855294441103158,0.8552160005456765,0.855137588755966,0.8550592057155684,0.8549808514060421,0.8549025258089629,0.8548242289059234,0.8547459606785323,0.8546677211084163,0.8545895101772182,0.8545113278665973,0.8544331741582308,0.8543550490338117,0.8542769524750498,0.8541988844636721,0.8541208449814216,0.8540428340100589,0.8539648515313604,0.8538868975271195,0.8538089719791463,0.8537310748692674,0.8536532061793257,0.8535753658911812,0.8534975539867099,0.8534197704478049,0.8533420152563752,0.8532642883943468,0.8531865898436615,0.8531089195862781,0.853031277604172,0.8529536638793342,0.8528760783937728,0.8527985211295118,0.8527209920685922,0.8526434911930703,0.8525660184850195,0.8524885739265292,0.8524111574997054,0.8523337691866698,0.8522564089695607,0.8521790768305322,0.8521017727517555,0.8520244967154167,0.8519472487037193,0.8518700286988818,0.8517928366831397,0.851715672638744,0.8516385365479623,0.8515614283930777,0.8514843481563901,0.8514072958202142,0.8513302713668819,0.8512532747787405,0.8511763060381534,0.8510993651275,0.8510224520291754,0.8509455667255905,0.8508687091991728,0.8507918794323649,0.8507150774076256,0.8506383031074296,0.8505615565142671,0.8504848376106444,0.8504081463790834,0.8503314828021219,0.8502548468623131,0.8501782385422263,0.8501016578244465,0.8500251046915741,0.8499485791262256,0.8498720811110323,0.8497956106286422,0.849719167661718,0.8496427521929387,0.8495663642049985,0.8494900036806072,0.8494136706024901,0.8493373649533879,0.8492610867160573,0.84918483587327,0.8491086124078133,0.84903241630249,0.8489562475401184,0.848880106103532,0.8488039919755798,0.848727905139126,0.8486518455770504,0.8485758132722484,0.8484998082076298,0.8484238303661208,0.8483478797306622,0.84827195628421,0.8481960600097362,0.8481201908902269,0.8480443489086845,0.847968534048126,0.8478927462915837,0.8478169856221051,0.8477412520227526,0.8476655454766042,0.8475898659667526,0.8475142134763058,0.8474385879883868,0.8473629894861336,0.8472874179526996,0.8472118733712524,0.8471363557249754,0.8470608649970668,0.8469854011707396,0.8469099642292218,0.8468345541557564,0.8467591709336014,0.8466838145460295,0.846608484976328,0.8465331822077999,0.8464579062237627,0.8463826570075482,0.8463074345425036,0.8462322388119906,0.846157069799386,0.846081927488081,0.8460068118614816,0.8459317229030089,0.8458566605960984,0.8457816249242003,0.8457066158707793,0.8456316334193154,0.8455566775533023,0.8454817482562494,0.8454068455116799,0.8453319693031316,0.8452571196141576,0.8451822964283248,0.8451074997292151,0.8450327295004243,0.8449579857255638,0.8448832683882584,0.8448085774721481,0.8447339129608868,0.8446592748381435,0.844584663087601,0.8445100776929569,0.844435518637923,0.8443609859062254,0.8442864794816051,0.8442119993478167,0.8441375454886294,0.8440631178878272,0.8439887165292075,0.8439143413965828,0.8438399924737792,0.8437656697446376,0.8436913731930129,0.843617102802774,0.8435428585578045,0.8434686404420015,0.843394448439277,0.8433202825335566,0.8432461427087803,0.843172028948902,0.8430979412378898,0.8430238795597264,0.8429498438984073,0.8428758342379435,0.8428018505623591,0.8427278928556924,0.8426539611019961,0.8425800552853362,0.8425061753897933,0.8424323213994616,0.8423584932984496,0.842284691070879,0.8422109147008863,0.8421371641726212,0.8420634394702478,0.8419897405779434,0.8419160674799,0.8418424201603227,0.8417687986034308,0.8416952027934571,0.8416216327146487,0.8415480883512659,0.841474569687583,0.8414010767078881,0.8413276093964829,0.8412541677376829,0.841180751715817,0.8411073613152281,0.8410339965202729,0.8409606573153212,0.840887343684757,0.8408140556129774,0.8407407930843933,0.8406675560834296,0.8405943445945239,0.840521158602128,0.840447998090707,0.8403748630447399,0.8403017534487185,0.8402286692871487,0.8401556105445493,0.8400825772054534,0.8400095692544067,0.8399365866759687,0.8398636294547123,0.8397906975752237,0.8397177910221028,0.8396449097799623,0.8395720538334288,0.8394992231671421,0.8394264177657549,0.8393536376139338,0.8392808826963583,0.8392081529977213,0.8391354485027289,0.8390627691961009,0.8389901150625695,0.8389174860868808,0.8388448822537936,0.8387723035480805,0.8386997499545266,0.8386272214579307,0.8385547180431044,0.8384822396948726,0.8384097863980733,0.8383373581375574,0.8382649548981893,0.8381925766648458,0.8381202234224175,0.8380478951558077,0.8379755918499326,0.8379033134897217,0.8378310600601171,0.8377588315460742,0.8376866279325614,0.8376144492045597,0.8375422953470636,0.8374701663450801,0.8373980621836287,0.8373259828477431,0.8372539283224685,0.8371818985928637,0.8371098936440002,0.8370379134609626,0.8369659580288475,0.8368940273327653,0.8368221213578385,0.836750240089203,0.8366783835120065,0.8366065516114105,0.8365347443725887,0.8364629617807277,0.8363912038210265,0.8363194704786968,0.8362477617389639,0.8361760775870644,0.8361044180082485,0.8360327829877787,0.83596117251093,0.8358895865629906,0.8358180251292603,0.8357464881950525,0.8356749757456925,0.8356034877665186,0.835532024242881,0.8354605851601432,0.8353891705036808,0.8353177802588818,0.8352464144111469,0.8351750729458891,0.8351037558485342,0.8350324631045201,0.8349611946992972,0.8348899506183283,0.8348187308470886,0.8347475353710658,0.8346763641757599,0.8346052172466832,0.8345340945693607,0.834462996129329,0.8343919219121377,0.8343208719033484,0.8342498460885351,0.8341788444532842,0.834107866983194,0.834036913663875,0.8339659844809506,0.8338950794200559,0.8338241984668383,0.8337533416069571,0.8336825088260846,0.8336117001099046,0.8335409154441132,0.8334701548144187,0.8333994182065412,0.8333287056062136,0.8332580169991805,0.8331873523711982,0.8331167117080359,0.8330460949954743,0.8329755022193063,0.8329049333653367,0.8328343884193826,0.832763867367273,0.8326933701948488,0.832622896887963,0.8325524474324801,0.8324820218142777,0.832411620019244,0.83234124203328,0.8322708878422983,0.8322005574322234,0.8321302507889918,0.8320599678985521,0.8319897087468641,0.8319194733199,0.8318492616036437,0.831779073584091,0.8317089092472493,0.831638768579138,0.8315686515657882,0.8314985581932428,0.8314284884475562,0.8313584423147954,0.831288419781038,0.8312184208323741,0.831148445454905,0.8310784936347444,0.8310085653580169,0.8309386606108593,0.8308687793794198,0.8307989216498585,0.8307290874083467,0.8306592766410678,0.8305894893342164,0.830519725473999,0.8304499850466336,0.8303802680383496,0.8303105744353884,0.8302409042240023,0.8301712573904555,0.8301016339210239,0.8300320338019946,0.8299624570196664,0.8298929035603493,0.8298233734103649,0.8297538665560465,0.8296843829837388,0.8296149226797973,0.8295454856305898,0.829476071822495,0.829406681241903,0.8293373138752155,0.8292679697088455,0.8291986487292172,0.8291293509227662,0.8290600762759397,0.8289908247751958,0.8289215964070041,0.8288523911578459,0.8287832090142131,0.8287140499626092,0.8286449139895489,0.8285758010815584,0.8285067112251745,0.8284376444069461,0.8283686006134325,0.828299579831205,0.8282305820468449,0.828161607246946,0.8280926554181126,0.8280237265469601,0.8279548206201152,0.8278859376242157,0.8278170775459105,0.8277482403718595,0.8276794260887338,0.8276106346832157,0.8275418661419985,0.8274731204517864,0.8274043975992946,0.8273356975712498,0.8272670203543889,0.8271983659354607,0.8271297343012244,0.8270611254384502,0.82699253933392,0.8269239759744256,0.8268554353467704,0.8267869174377683,0.8267184222342451,0.8266499497230362,0.8265814998909887,0.8265130727249602,0.82644466821182,0.8263762863384468,0.8263079270917317,0.8262395904585756,0.8261712764258908,0.8261029849806,0.8260347161096367,0.8259664697999458,0.8258982460384825,0.8258300448122127,0.8257618661081132,0.8256937099131716,0.8256255762143864,0.8255574649987663,0.8254893762533311,0.8254213099651115,0.8253532661211483,0.8252852447084936,0.8252172457142096,0.8251492691253696,0.8250813149290575,0.8250133831123674,0.8249454736624047,0.8248775865662847,0.8248097218111339,0.8247418793840889,0.8246740592722976,0.8246062614629174,0.8245384859431172,0.8244707327000759,0.8244030017209832,0.8243352929930393,0.8242676065034548,0.8241999422394508,0.8241323001882589,0.8240646803371213,0.8239970826732906,0.8239295071840297,0.8238619538566123,0.823794422678322,0.8237269136364532,0.8236594267183109,0.8235919619112101,0.8235245192024762,0.8234570985794449,0.823389700029463,0.8233223235398867,0.8232549690980832,0.8231876366914296,0.8231203263073136,0.8230530379331332,0.8229857715562964,0.8229185271642221,0.8228513047443385,0.8227841042840853,0.8227169257709114,0.8226497691922765,0.8225826345356504,0.8225155217885132,0.8224484309383547,0.8223813619726758,0.8223143148789868,0.8222472896448089,0.8221802862576726,0.8221133047051193,0.8220463449747002,0.8219794070539767,0.8219124909305204,0.8218455965919128,0.8217787240257458,0.8217118732196214,0.8216450441611509,0.821578236837957,0.8215114512376716,0.8214446873479367,0.8213779451564044,0.821311224650737,0.8212445258186067,0.8211778486476957,0.8211111931256962,0.8210445592403104,0.8209779469792506,0.8209113563302389,0.8208447872810072,0.8207782398192978,0.8207117139328626,0.8206452096094634,0.8205787268368723,0.8205122656028708,0.8204458258952506,0.8203794077018132,0.8203130110103699,0.820246635808742,0.8201802820847607,0.8201139498262667,0.820047639021111,0.8199813496571541,0.8199150817222663,0.819848835204328,0.819782610091229,0.8197164063708693,0.8196502240311581,0.8195840630600149,0.8195179234453688,0.8194518051751584,0.8193857082373323,0.8193196326198487,0.8192535783106759,0.819187545297791,0.8191215335691816,0.8190555431128446,0.8189895739167867,0.8189236259690243,0.8188576992575834,0.8187917937704995,0.8187259094958179,0.8186600464215933,0.8185942045358904,0.8185283838267832,0.8184625842823553,0.8183968058906999,0.8183310486399198,0.8182653125181274,0.8181995975134445,0.8181339036140027,0.8180682308079428,0.8180025790834153,0.8179369484285804,0.8178713388316072,0.817805750280675,0.8177401827639721,0.8176746362696964,0.8176091107860554,0.8175436063012658,0.8174781228035538,0.8174126602811552,0.8173472187223151,0.817281798115288,0.8172163984483377,0.8171510197097377,0.8170856618877705,0.8170203249707282,0.8169550089469123,0.8168897138046336,0.816824439532212,0.816759186117977,0.8166939535502675,0.8166287418174314,0.816563550907826,0.8164983808098181,0.8164332315117837,0.8163681030021078,0.8163029952691851,0.8162379083014191,0.8161728420872231,0.8161077966150189,0.8160427718732383,0.8159777678503215,0.8159127845347188,0.8158478219148891,0.8157828799793007,0.8157179587164307,0.8156530581147662,0.8155881781628024,0.8155233188490444,0.8154584801620065,0.8153936620902115,0.8153288646221918,0.8152640877464887,0.8151993314516529,0.8151345957262439,0.8150698805588301,0.8150051859379897,0.814940511852309,0.8148758582903842,0.8148112252408202,0.8147466126922309,0.814682020633239,0.8146174490524769,0.8145528979385853,0.8144883672802142,0.8144238570660228,0.8143593672846787,0.8142948979248593,0.8142304489752501,0.8141660204245461,0.8141016122614512,0.8140372244746777,0.8139728570529478,0.8139085099849918,0.8138441832595489,0.813779876865368,0.813715590791206,0.813651325025829,0.8135870795580123,0.8135228543765396,0.8134586494702036,0.8133944648278059,0.8133303004381569,0.8132661562900755,0.8132020323723903,0.8131379286739379,0.8130738451835638,0.8130097818901225,0.8129457387824773,0.8128817158495003,0.8128177130800718,0.8127537304630816,0.812689767987428,0.812625825642018,0.8125619034157671,0.8124980012975995,0.8124341192764489,0.8123702573412568,0.8123064154809736,0.8122425936845588,0.81217879194098,0.812115010239214,0.8120512485682456,0.8119875069170689,0.8119237852746862,0.811860083630109,0.8117964019723567,0.8117327402904574,0.8116690985734486,0.8116054768103753,0.811541874990292,0.8114782931022609,0.811414731135354,0.8113511890786504,0.8112876669212387,0.8112241646522158,0.8111606822606873,0.811097219735767,0.8110337770665772,0.8109703542422493,0.8109069512519221,0.8108435680847443,0.8107802047298721,0.8107168611764702,0.8106535374137122,0.8105902334307798,0.8105269492168634,0.8104636847611615,0.8104004400528816,0.810337215081239,0.8102740098354576,0.81021082430477,0.8101476584784169,0.8100845123456474,0.8100213858957191,0.809958279117898,0.809895192001458,0.8098321245356821,0.8097690767098612,0.8097060485132945,0.8096430399352897,0.8095800509651627,0.8095170815922378,0.8094541318058477,0.8093912015953327,0.8093282909500424,0.8092653998593343,0.8092025283125738,0.809139676299135,0.8090768438083998,0.8090140308297591,0.8089512373526113,0.8088884633663631,0.8088257088604301,0.8087629738242353,0.8087002582472103,0.8086375621187948,0.8085748854284367,0.808512228165592,0.8084495903197252,0.8083869718803084,0.8083243728368223,0.8082617931787559,0.8081992328956054,0.8081366919768763,0.8080741704120815,0.8080116681907422,0.8079491853023879,0.8078867217365556,0.807824277482791,0.8077618525306478,0.8076994468696875,0.8076370604894798,0.8075746933796023,0.807512345529641,0.8074500169291899,0.8073877075678505,0.8073254174352328,0.8072631465209549,0.8072008948146424,0.8071386623059296,0.8070764489844579,0.8070142548398775,0.8069520798618462,0.8068899240400299,0.8068277873641022,0.8067656698237452,0.806703571408648,0.8066414921085087,0.8065794319130324,0.8065173908119329,0.8064553687949314,0.8063933658517572,0.8063313819721474,0.8062694171458473,0.8062074713626094,0.8061455446121948,0.8060836368843721,0.8060217481689177,0.8059598784556161,0.8058980277342594,0.8058361959946478,0.8057743832265889,0.8057125894198984,0.8056508145644002,0.805589058649925,0.8055273216663122,0.8054656036034086,0.8054039044510689,0.8053422241991552,0.8052805628375382,0.8052189203560952,0.8051572967447125,0.805095691993283,0.805034106091708,0.8049725390298965,0.804910990797765,0.8048494613852376,0.8047879507822465,0.8047264589787314,0.8046649859646396,0.8046035317299259,0.8045420962645534,0.8044806795584922,0.8044192816017205,0.8043579023842239,0.8042965418959958,0.8042352001270369,0.804173877067356,0.8041125727069691,0.8040512870359002,0.8039900200441806,0.8039287717218493,0.8038675420589529,0.8038063310455456,0.8037451386716888,0.8036839649274523,0.8036228098029128,0.8035616732881543,0.8035005553732693,0.8034394560483568,0.8033783753035242,0.8033173131288857,0.8032562695145634,0.8031952444506871,0.8031342379273936,0.8030732499348274,0.8030122804631407,0.8029513295024927,0.8028903970430504,0.8028294830749886,0.8027685875884887,0.8027077105737401,0.8026468520209398,0.8025860119202918,0.8025251902620075,0.8024643870363062,0.8024036022334143,0.8023428358435655,0.8022820878570011,0.8022213582639697,0.8021606470547272,0.8020999542195372,0.8020392797486701,0.8019786236324041,0.8019179858610248,0.8018573664248249,0.8017967653141044,0.8017361825191707,0.8016756180303388,0.8016150718379306,0.8015545439322755,0.8014940343037102,0.801433542942579,0.8013730698392325,0.8013126149840297,0.8012521783673364,0.8011917599795256,0.8011313598109777,0.8010709778520801,0.801010614093228,0.8009502685248231,0.8008899411372749,0.8008296319209999,0.8007693408664216,0.8007090679639712,0.8006488132040869,0.8005885765772139,0.8005283580738047,0.8004681576843189,0.8004079753992238,0.800347811208993,0.800287665104108,0.800227537075057,0.8001674271123355,0.8001073352064461,0.8000472613478987,0.79998720552721,0.7999271677349044,0.7998671479615125,0.7998071461975728,0.7997471624336305,0.7996871966602382,0.7996272488679554,0.7995673190473485,0.7995074071889909,0.7994475132834639,0.7993876373213546,0.7993277792932584,0.7992679391897768,0.7992081170015185,0.7991483127190999,0.7990885263331434,0.7990287578342794,0.7989690072131443,0.7989092744603827,0.798849559566645,0.7987898625225893,0.7987301833188806,0.7986705219461906,0.7986108783951982,0.7985512526565892,0.7984916447210565,0.7984320545792997,0.7983724822220252,0.7983129276399469,0.7982533908237851,0.7981938717642673,0.7981343704521277,0.7980748868781077,0.7980154210329553,0.7979559729074256,0.7978965424922804,0.7978371297782887,0.797777734756226,0.7977183574168748,0.7976589977510246,0.7975996557494714,0.7975403314030186,0.7974810247024758,0.7974217356386601,0.797362464202395,0.7973032103845106,0.7972439741758442,0.7971847555672401,0.7971255545495488,0.7970663711136281,0.7970072052503423,0.7969480569505626,0.796888926205167,0.7968298130050401,0.7967707173410734,0.7967116392041653,0.7966525785852204,0.7965935354751509,0.796534509864875,0.7964755017453178,0.7964165111074112,0.796357537942094,0.7962985822403114,0.7962396439930154,0.7961807231911647,0.7961218198257248,0.7960629338876678,0.7960040653679725,0.7959452142576241,0.7958863805476148,0.7958275642289436,0.7957687652926156,0.7957099837296431,0.7956512195310447,0.7955924726878455,0.7955337431910777,0.7954750310317797,0.7954163362009968,0.7953576586897808,0.7952989984891901,0.7952403555902895,0.7951817299841505,0.7951231216618516,0.7950645306144773,0.7950059568331189,0.7949474003088741,0.7948888610328478,0.7948303389961504,0.7947718341898995,0.7947133466052193,0.7946548762332404,0.7945964230650997,0.7945379870919408,0.794479568304914,0.7944211666951758,0.7943627822538893,0.7943044149722241,0.7942460648413565,0.7941877318524688,0.7941294159967501,0.7940711172653963,0.7940128356496088,0.7939545711405963,0.793896323729574,0.7938380934077628,0.7937798801663906,0.7937216839966916,0.7936635048899066,0.7936053428372823,0.7935471978300727,0.793489069859537,0.7934309589169419,0.79337286499356,0.7933147880806704,0.7932567281695584,0.7931986852515157,0.7931406593178408,0.7930826503598382,0.7930246583688185,0.7929666833360992,0.7929087252530039,0.7928507841108624,0.7927928599010112,0.7927349526147927,0.7926770622435559,0.7926191887786561,0.7925613322114549,0.7925034925333199,0.7924456697356254,0.7923878638097519,0.7923300747470862,0.7922723025390211,0.7922145471769559,0.7921568086522967,0.7920990869564545,0.792041382080848,0.7919836940169009,0.7919260227560445,0.7918683682897151,0.7918107306093559,0.7917531097064163,0.7916955055723517,0.7916379181986237,0.7915803475767004,0.7915227936980557,0.79146525655417,0.7914077361365299,0.791350232436628,0.7912927454459632,0.7912352751560406,0.7911778215583715,0.7911203846444731,0.7910629644058689,0.7910055608340886,0.7909481739206684,0.7908908036571498,0.7908334500350811,0.7907761130460166,0.7907187926815165,0.7906614889331475,0.7906042017924818,0.7905469312510984,0.7904896773005822,0.7904324399325238,0.7903752191385202,0.7903180149101745,0.7902608272390959,0.7902036561168996,0.7901465015352066,0.7900893634856445,0.7900322419598467,0.7899751369494522,0.789918048446107,0.7898609764414624,0.7898039209271756,0.7897468818949107,0.789689859336337,0.7896328532431299,0.7895758636069714,0.7895188904195487,0.7894619336725558,0.7894049933576919,0.7893480694666628,0.78929116199118,0.789234270922961,0.7891773962537292,0.7891205379752142,0.7890636960791513,0.7890068705572821,0.7889500614013535,0.7888932686031193,0.788836492154338,0.7887797320467754,0.788722988272202,0.7886662608223953,0.7886095496891375,0.788552854864218,0.7884961763394311,0.7884395141065776,0.7883828681574637,0.788326238483902,0.7882696250777107,0.7882130279307139,0.7881564470347415,0.7880998823816293,0.7880433339632191,0.7879868017713584,0.7879302857979008,0.7878737860347053,0.7878173024736369,0.7877608351065667,0.7877043839253713,0.7876479489219336,0.7875915300881415,0.7875351274158894,0.7874787408970773,0.7874223705236109,0.7873660162874018,0.7873096781803673,0.7872533561944307,0.7871970503215209,0.7871407605535724,0.7870844868825256,0.7870282293003271,0.7869719877989285,0.7869157623702878,0.7868595530063682,0.7868033596991392,0.7867471824405754,0.7866910212226577,0.7866348760373724,0.7865787468767117,0.7865226337326733,0.7864665365972607,0.7864104554624833,0.7863543903203559,0.7862983411628993,0.7862423079821395,0.7861862907701087,0.7861302895188444,0.7860743042203903,0.786018334866795,0.7859623814501131,0.7859064439624053,0.7858505223957374,0.7857946167421809,0.7857387269938131,0.7856828531427169,0.7856269951809809,0.785571153100699,0.7855153268939711,0.7854595165529025,0.7854037220696043,0.7853479434361931,0.7852921806447907,0.7852364336875253,0.7851807025565298,0.7851249872439438,0.785069287741911,0.7850136040425821,0.7849579361381125,0.7849022840206634,0.7848466476824018,0.7847910271154996,0.784735422312135,0.7846798332644913,0.7846242599647574,0.7845687024051277,0.7845131605778023,0.7844576344749868,0.7844021240888923,0.7843466294117349,0.784291150435737,0.7842356871531261,0.7841802395561353,0.784124807637003,0.7840693913879734,0.7840139908012956,0.7839586058692251,0.783903236584022,0.7838478829379523,0.7837925449232874,0.783737222532304,0.7836819157572847,0.7836266245905168,0.7835713490242938,0.7835160890509141,0.7834608446626816,0.7834056158519063,0.7833504026109025,0.7832952049319907,0.7832400228074965,0.7831848562297512,0.7831297051910912,0.7830745696838582,0.7830194497003998,0.7829643452330687,0.7829092562742226,0.7828541828162252,0.7827991248514453,0.7827440823722569,0.7826890553710395,0.7826340438401784,0.7825790477720634,0.7825240671590902,0.7824691019936598,0.7824141522681785,0.7823592179750577,0.7823042991067143,0.7822493956555708,0.7821945076140547,0.7821396349745986,0.7820847777296409,0.7820299358716251,0.7819751093929999,0.7819202982862193,0.7818655025437429,0.7818107221580349,0.7817559571215658,0.7817012074268104,0.7816464730662491,0.781591754032368,0.7815370503176576,0.7814823619146147,0.7814276888157403,0.7813730310135414,0.7813183885005299,0.781263761269223,0.781209149312143,0.7811545526218181,0.7810999711907805,0.7810454050115686,0.7809908540767259,0.7809363183788005,0.7808817979103466,0.7808272926639227,0.7807728026320933,0.7807183278074273,0.7806638681824996,0.7806094237498896,0.780554994502182,0.7805005804319671,0.7804461815318401,0.7803917977944012,0.7803374292122557,0.7802830757780146,0.7802287374842934,0.7801744143237132,0.7801201062888999,0.7800658133724849,0.7800115355671046,0.7799572728654001,0.7799030252600181,0.7798487927436103,0.7797945753088334,0.7797403729483495,0.7796861856548254,0.7796320134209331,0.7795778562393502,0.7795237141027586,0.7794695870038456,0.7794154749353037,0.7793613778898304,0.7793072958601285,0.7792532288389052,0.7791991768188734,0.7791451397927508,0.7790911177532601,0.7790371106931293,0.7789831186050912,0.7789291414818835,0.7788751793162494,0.7788212321009367,0.7787672998286985,0.7787133824922927,0.7786594800844823,0.7786055925980354,0.778551720025725,0.778497862360329,0.7784440195946307,0.7783901917214177,0.7783363787334833,0.7782825806236253,0.7782287973846468,0.7781750290093558,0.7781212754905649,0.7780675368210921,0.7780138129937603,0.7779601040013971,0.7779064098368353,0.7778527304929128,0.7777990659624716,0.7777454162383599,0.7776917813134298,0.7776381611805387,0.7775845558325493,0.7775309652623285,0.7774773894627485,0.7774238284266862,0.7773702821470239,0.7773167506166485,0.7772632338284515,0.7772097317753298,0.7771562444501848,0.777102771845923,0.7770493139554558,0.7769958707716993,0.7769424422875745,0.7768890284960075,0.7768356293899291,0.7767822449622748,0.7767288752059852,0.7766755201140056,0.7766221796792865,0.7765688538947824,0.7765155427534536,0.7764622462482647,0.7764089643721852,0.7763556971181894,0.7763024444792567,0.7762492064483709,0.7761959830185209,0.7761427741827003,0.7760895799339075,0.7760364002651458,0.775983235169423,0.7759300846397521,0.7758769486691506,0.7758238272506408,0.77577072037725,0.7757176280420098,0.7756645502379573,0.7756114869581338,0.7755584381955853,0.7755054039433629,0.7754523841945222,0.7753993789421239,0.7753463881792331,0.7752934118989194,0.775240450094258,0.7751875027583279,0.7751345698842135,0.7750816514650034,0.7750287474937912,0.7749758579636755,0.7749229828677588,0.7748701221991493,0.7748172759509588,0.7747644441163049,0.7747116266883092,0.7746588236600981,0.7746060350248027,0.7745532607755591,0.7745005009055075,0.7744477554077932,0.7743950242755662,0.7743423075019807,0.774289605080196,0.7742369170033762,0.7741842432646893,0.7741315838573087,0.7740789387744121,0.774026308009182,0.7739736915548053,0.7739210894044737,0.7738685015513834,0.7738159279887357,0.7737633687097356,0.7737108237075935,0.7736582929755241,0.773605776506747,0.773553274294486,0.7735007863319694,0.7734483126124307,0.7733958531291076,0.7733434078752424,0.7732909768440819,0.7732385600288777,0.7731861574228858,0.7731337690193669,0.7730813948115861,0.7730290347928132,0.7729766889563227,0.7729243572953931,0.7728720398033081,0.7728197364733558,0.7727674472988282,0.7727151722730228,0.772662911389241,0.7726106646407889,0.7725584320209773,0.772506213523121,0.77245400914054,0.7724018188665583,0.7723496426945047,0.7722974806177124,0.772245332629519,0.7721931987232667,0.7721410788923025,0.7720889731299772,0.7720368814296465,0.7719848037846707,0.7719327401884144,0.7718806906342467,0.7718286551155411,0.7717766336256757,0.7717246261580333,0.7716726327060002,0.7716206532629682,0.7715686878223332,0.7715167363774954,0.7714647989218598,0.7714128754488352,0.7713609659518355,0.7713090704242785,0.771257188859587,0.7712053212511879,0.7711534675925122,0.771101627876996,0.7710498020980793,0.7709979902492065,0.7709461923238269,0.7708944083153936,0.7708426382173645,0.7707908820232019,0.770739139726372,0.7706874113203459,0.770635696798599,0.7705839961546108,0.7705323093818657,0.7704806364738517,0.7704289774240619,0.7703773322259935,0.7703257008731478,0.7702740833590306,0.7702224796771525,0.7701708898210278,0.7701193137841755,0.7700677515601189,0.7700162031423854,0.7699646685245071,0.7699131477000202,0.7698616406624652,0.7698101474053871,0.7697586679223352,0.7697072022068628,0.7696557502525279,0.7696043120528924,0.7695528876015231,0.7695014768919904,0.7694500799178695,0.7693986966727399,0.7693473271501848,0.7692959713437925,0.7692446292471549,0.7691933008538684,0.7691419861575339,0.7690906851517564,0.7690393978301452,0.7689881241863135,0.7689368642138794,0.7688856179064648,0.7688343852576959,0.7687831662612034,0.7687319609106218,0.7686807691995904,0.7686295911217522,0.7685784266707548,0.76852727584025,0.7684761386238934,0.7684250150153454,0.7683739050082702,0.7683228085963366,0.7682717257732172,0.7682206565325889,0.7681696008681331,0.7681185587735351,0.7680675302424845,0.7680165152686749,0.7679655138458045,0.7679145259675754,0.7678635516276936,0.7678125908198702,0.7677616435378194,0.7677107097752602,0.7676597895259157,0.7676088827835129,0.7675579895417833,0.7675071097944623,0.7674562435352895,0.7674053907580088,0.767354551456368,0.7673037256241193,0.7672529132550189,0.7672021143428269,0.7671513288813081,0.767100556864231,0.7670497982853683,0.7669990531384968,0.7669483214173975,0.7668976031158555,0.7668468982276602,0.7667962067466044,0.7667455286664858,0.766694863981106,0.7666442126842702,0.7665935747697884,0.7665429502314742,0.7664923390631457,0.7664417412586245,0.7663911568117368,0.7663405857163126,0.7662900279661861,0.7662394835551954,0.7661889524771831,0.7661384347259953,0.7660879302954823,0.7660374391794988,0.765986961371903,0.7659364968665578,0.7658860456573297,0.765835607738089,0.7657851831027108,0.7657347717450737,0.7656843736590601,0.7656339888385572,0.7655836172774553,0.7655332589696496,0.7654829139090389,0.7654325820895258,0.7653822635050171,0.7653319581494239,0.7652816660166607,0.7652313871006466,0.7651811213953044,0.7651308688945607,0.7650806295923466,0.7650304034825967,0.7649801905592498,0.7649299908162486,0.7648798042475399,0.7648296308470746,0.7647794706088068,0.7647293235266956,0.7646791895947034,0.7646290688067968,0.7645789611569463,0.7645288666391263,0.7644787852473153,0.7644287169754955,0.7643786618176531,0.7643286197677788,0.764278590819866,0.7642285749679134,0.7641785722059227,0.7641285825278997,0.7640786059278547,0.7640286423998012,0.7639786919377569,0.7639287545357434,0.7638788301877861,0.7638289188879145,0.7637790206301618,0.7637291354085655,0.7636792632171663,0.7636294040500095,0.7635795579011437,0.7635297247646219,0.7634799046345004,0.76343009750484,0.7633803033697051,0.7633305222231639,0.7632807540592883,0.7632309988721547,0.7631812566558426,0.7631315274044359,0.763081811112022,0.7630321077726925,0.7629824173805425,0.7629327399296711,0.7628830754141814,0.7628334238281802,0.7627837851657778,0.762734159421089,0.7626845465882318,0.7626349466613286,0.7625853596345051,0.7625357855018912,0.7624862242576202,0.7624366758958296,0.7623871404106608,0.7623376177962585,0.7622881080467717,0.7622386111563528,0.7621891271191583,0.7621396559293483,0.7620901975810869,0.7620407520685416,0.761991319385884,0.7619418995272899,0.7618924924869377,0.7618430982590106,0.7617937168376953,0.761744348217182,0.7616949923916649,0.7616456493553422,0.7615963191024153,0.76154700162709,0.7614976969235748,0.7614484049860833,0.761399125808832,0.7613498593860413,0.7613006057119353,0.761251364780742,0.7612021365866929,0.7611529211240236,0.7611037183869729,0.7610545283697839,0.7610053510667031,0.7609561864719805,0.7609070345798703,0.7608578953846301,0.7608087688805213,0.760759655061809,0.7607105539227621,0.7606614654576528,0.7606123896607575,0.760563326526356,0.7605142760487321,0.7604652382221726,0.7604162130409688,0.7603672004994152,0.7603182005918101,0.7602692133124556,0.7602202386556571,0.7601712766157238,0.7601223271869693,0.7600733903637094,0.760024466140265,0.7599755545109597,0.7599266554701214,0.7598777690120809,0.7598288951311736,0.7597800338217376,0.7597311850781154,0.7596823488946527,0.7596335252656987,0.759584714185607,0.7595359156487338,0.7594871296494398,0.7594383561820884,0.7593895952410479,0.7593408468206889,0.7592921109153865,0.7592433875195191,0.7591946766274685,0.7591459782336206,0.7590972923323644,0.7590486189180927,0.758999957985202,0.7589513095280924,0.7589026735411672,0.7588540500188339,0.7588054389555031,0.7587568403455891,0.75870825418351,0.7586596804636869,0.7586111191805452,0.7585625703285135,0.7585140339020239,0.7584655098955122,0.7584169983034176,0.7583684991201831,0.758320012340255,0.7582715379580836,0.7582230759681218,0.7581746263648272,0.7581261891426604,0.7580777642960852,0.7580293518195694,0.7579809517075844,0.7579325639546046,0.7578841885551086,0.7578358255035781,0.7577874747944983,0.757739136422358,0.7576908103816496,0.7576424966668691,0.7575941952725157,0.7575459061930924,0.7574976294231054,0.7574493649570645,0.7574011127894835,0.7573528729148788,0.7573046453277711,0.757256430022684,0.7572082269941449,0.7571600362366847,0.7571118577448375,0.7570636915131412,0.7570155375361374,0.7569673958083701,0.7569192663243879,0.7568711490787424,0.7568230440659888,0.7567749512806855,0.7567268707173946,0.7566788023706817,0.7566307462351156,0.7565827023052687,0.7565346705757168,0.7564866510410393,0.7564386436958188,0.7563906485346414,0.756342665552097,0.7562946947427782,0.7562467361012817,0.7561987896222073,0.7561508553001584,0.7561029331297415,0.7560550231055668,0.7560071252222481,0.7559592394744019,0.755911365856649,0.7558635043636129,0.755815654989921,0.7557678177302036,0.755719992579095,0.7556721795312322,0.7556243785812563,0.7555765897238113,0.7555288129535447,0.7554810482651074,0.7554332956531538,0.7553855551123417,0.7553378266373318,0.7552901102227889,0.7552424058633808,0.7551947135537782,0.7551470332886562,0.7550993650626923,0.7550517088705677,0.7550040647069675,0.7549564325665792,0.7549088124440944,0.7548612043342074,0.7548136082316167,0.7547660241310232,0.754718452027132,0.7546708919146506,0.7546233437882909,0.7545758076427671,0.7545282834727977,0.7544807712731038,0.75443327103841,0.7543857827634444,0.7543383064429382,0.7542908420716261,0.7542433896442461,0.7541959491555393,0.7541485206002504,0.7541011039731271,0.7540536992689206,0.7540063064823855,0.7539589256082795,0.7539115566413636,0.753864199576402,0.7538168544081625,0.753769521131416,0.7537221997409367,0.7536748902315019,0.7536275925978925,0.7535803068348926,0.7535330329372895,0.7534857708998735,0.7534385207174386,0.753391282384782,0.7533440558967038,0.7532968412480079,0.7532496384335011,0.7532024474479935,0.7531552682862982,0.7531081009432324,0.7530609454136156,0.7530138016922708,0.7529666697740247,0.7529195496537068,0.7528724413261497,0.7528253447861896,0.752778260028666,0.7527311870484209,0.7526841258403005,0.7526370763991538,0.7525900387198327,0.7525430127971927,0.7524959986260925,0.7524489962013938,0.7524020055179615,0.7523550265706642,0.7523080593543733,0.7522611038639632,0.7522141600943116,0.7521672280403001,0.7521203076968126,0.7520733990587365,0.7520265021209626,0.7519796168783842,0.751932743325899,0.7518858814584066,0.7518390312708105,0.7517921927580173,0.7517453659149368,0.7516985507364814,0.7516517472175677,0.7516049553531143,0.7515581751380441,0.7515114065672822,0.7514646496357575,0.7514179043384016,0.7513711706701498,0.75132444862594,0.7512777382007134,0.7512310393894146,0.751184352186991,0.7511376765883935,0.7510910125885757,0.7510443601824947,0.7509977193651106,0.7509510901313865,0.7509044724762891,0.7508578663947874,0.7508112718818543,0.7507646889324654,0.7507181175415997,0.750671557704239,0.7506250094153682,0.750578472669976,0.7505319474630532,0.7504854337895943,0.750438931644597,0.7503924410230615,0.7503459619199917,0.7502994943303943,0.7502530382492794,0.7502065936716595,0.7501601605925512,0.7501137390069732,0.7500673289099479,0.7500209302965005,0.7499745431616593,0.749928167500456,0.7498818033079249,0.7498354505791035,0.7497891093090326,0.7497427794927559,0.7496964611253202,0.7496501542017753,0.7496038587171739,0.7495575746665722,0.7495113020450291,0.7494650408476066,0.7494187910693699,0.749372552705387,0.7493263257507292,0.7492801102004707,0.7492339060496885,0.7491877132934635,0.7491415319268784,0.7490953619450198,0.7490492033429772,0.7490030561158427,0.748956920258712,0.7489107957666834,0.7488646826348585,0.7488185808583419,0.7487724904322406,0.7487264113516654,0.7486803436117301,0.7486342872075508,0.7485882421342472,0.7485422083869419,0.7484961859607602,0.7484501748508309,0.7484041750522853,0.748358186560258,0.7483122093698865,0.7482662434763112,0.7482202888746757,0.7481743455601263,0.7481284135278127,0.748082492772887,0.7480365832905048,0.7479906850758242,0.7479447981240068,0.7478989224302167,0.7478530579896213,0.7478072047973908,0.7477613628486983,0.74771553213872,0.7476697126626349,0.7476239044156253,0.747578107392876,0.7475323215895749,0.7474865470009131,0.7474407836220842,0.7473950314482852,0.7473492904747157,0.7473035606965784,0.7472578421090789,0.7472121347074258,0.7471664384868303,0.7471207534425072,0.7470750795696732,0.7470294168635493,0.7469837653193581,0.7469381249323257,0.7468924956976815,0.746846877610657,0.7468012706664872,0.7467556748604097,0.7467100901876653,0.7466645166434974,0.7466189542231526,0.7465734029218801,0.7465278627349321,0.7464823336575639,0.7464368156850334,0.7463913088126014,0.7463458130355322,0.7463003283490918,0.7462548547485504,0.74620939222918,0.7461639407862563,0.7461185004150571,0.7460730711108639,0.7460276528689606,0.7459822456846337,0.7459368495531732,0.7458914644698718,0.7458460904300245,0.7458007274289299,0.7457553754618892,0.7457100345242061,0.7456647046111878,0.7456193857181439,0.7455740778403868,0.745528780973232,0.745483495111998,0.7454382202520057,0.7453929563885789,0.7453477035170446,0.7453024616327325,0.7452572307309747,0.7452120108071069,0.745166801856467,0.7451216038743957,0.7450764168562373,0.7450312407973381,0.7449860756930474,0.7449409215387176,0.7448957783297038,0.7448506460613636,0.7448055247290579,0.7447604143281503,0.7447153148540069,0.7446702263019966,0.7446251486674916,0.7445800819458668,0.7445350261324992,0.7444899812227693,0.7444449472120602,0.744399924095758,0.744354911869251,0.7443099105279308,0.7442649200671918,0.744219940482431,0.7441749717690479,0.7441300139224454,0.7440850669380289,0.7440401308112062,0.7439952055373887,0.7439502911119898,0.7439053875304258,0.7438604947881163,0.7438156128804829,0.7437707418029509,0.7437258815509471,0.7436810321199023,0.7436361935052492,0.7435913657024238,0.7435465487068644,0.7435017425140125,0.743456947119312,0.7434121625182096,0.7433673887061549,0.7433226256786002,0.7432778734310005,0.7432331319588131,0.7431884012574991,0.7431436813225212,0.7430989721493455,0.7430542737334405,0.7430095860702779,0.7429649091553314,0.742920242984078,0.7428755875519973,0.7428309428545714,0.7427863088872853,0.7427416856456266,0.7426970731250859,0.7426524713211561,0.742607880229333,0.7425632998451153,0.7425187301640038,0.7424741711815029,0.7424296228931189,0.742385085294361,0.7423405583807415,0.7422960421477749,0.7422515365909785,0.7422070417058726,0.7421625574879797,0.7421180839328253,0.7420736210359375,0.7420291687928472,0.7419847271990878,0.7419402962501952,0.7418958759417086,0.7418514662691692,0.7418070672281213,0.7417626788141116,0.7417183010226897,0.7416739338494075,0.74162957728982,0.7415852313394847,0.7415408959939617,0.7414965712488136,0.7414522570996059,0.7414079535419069,0.7413636605712869,0.7413193781833194,0.7412751063735808,0.7412308451376491,0.7411865944711061,0.7411423543695356,0.7410981248285239,0.7410539058436605,0.7410096974105371,0.7409654995247482,0.740921312181891,0.7408771353775647,0.7408329691073724,0.7407888133669184,0.7407446681518104,0.7407005334576588,0.7406564092800765,0.7406122956146786,0.7405681924570832,0.7405240998029109,0.7404800176477851,0.7404359459873316,0.7403918848171788,0.7403478341329577,0.740303793930302,0.7402597642048481,0.7402157449522345,0.7401717361681031,0.7401277378480975,0.7400837499878645,0.7400397725830533,0.7399958056293158,0.739951849122306,0.7399079030576813,0.7398639674311007,0.7398200422382268,0.7397761274747242,0.73973222313626,0.739688329218504,0.7396444457171287,0.7396005726278091,0.7395567099462226,0.7395128576680492,0.739469015788972,0.7394251843046757,0.7393813632108484,0.73933755250318,0.7392937521773639,0.7392499622290952,0.7392061826540721,0.7391624134479948,0.7391186546065667,0.7390749061254932,0.7390311680004825,0.7389874402272453,0.7389437228014948,0.7389000157189468,0.7388563189753197,0.7388126325663341,0.7387689564877136,0.7387252907351839,0.7386816353044735,0.7386379901913132,0.7385943553914368,0.7385507309005799,0.7385071167144812,0.7384635128288816,0.7384199192395247,0.7383763359421567,0.7383327629325257,0.7382892002063833,0.7382456477594826,0.7382021055875799,0.7381585736864339,0.7381150520518054,0.738071540679458,0.738028039565158,0.7379845487046738,0.7379410680937764,0.7378975977282395,0.737854137603839,0.7378106877163534,0.7377672480615639,0.7377238186352538,0.7376803994332093,0.7376369904512186,0.7375935916850728,0.7375502031305652,0.7375068247834918,0.7374634566396508,0.7374200986948433,0.7373767509448722,0.7373334133855435,0.7372900860126653,0.7372467688220486,0.7372034618095061,0.7371601649708538,0.7371168783019096,0.7370736017984939,0.7370303354564299,0.7369870792715428,0.7369438332396607,0.7369005973566137,0.7368573716182348,0.7368141560203589,0.7367709505588241,0.73672775522947,0.7366845700281395,0.7366413949506774,0.736598229992931,0.7365550751507505,0.7365119304199877,0.7364687957964977,0.7364256712761375,0.7363825568547664,0.7363394525282467,0.7362963582924429,0.7362532741432213,0.7362102000764514,0.7361671360880051,0.7361240821737561,0.736081038329581,0.7360380045513588,0.7359949808349706,0.7359519671763002,0.7359089635712338,0.7358659700156597,0.735822986505469,0.7357800130365549,0.7357370496048131,0.7356940962061419,0.7356511528364416,0.7356082194916153,0.7355652961675678,0.7355223828602074,0.7354794795654438,0.7354365862791895,0.7353937029973595,0.7353508297158707,0.7353079664306429,0.7352651131375979,0.7352222698326603,0.7351794365117567,0.7351366131708161,0.73509379980577,0.7350509964125524,0.7350082029870992,0.7349654195253494,0.7349226460232435,0.734879882476725,0.7348371288817395,0.7347943852342349,0.7347516515301618,0.7347089277654727,0.7346662139361227,0.7346235100380696,0.7345808160672725,0.7345381320196941,0.7344954578912987,0.7344527936780529,0.7344101393759263,0.7343674949808898,0.7343248604889178,0.7342822358959861,0.7342396211980732,0.7341970163911602,0.7341544214712302,0.7341118364342684,0.734069261276263,0.734026695993204,0.733984140581084,0.7339415950358976,0.733899059353642,0.7338565335303167,0.7338140175619234,0.7337715114444662,0.7337290151739516,0.7336865287463881,0.7336440521577867,0.733601585404161,0.7335591284815264,0.7335166813859009,0.7334742441133049,0.7334318166597605,0.733389399021293,0.7333469911939293,0.7333045931736989,0.7332622049566336,0.7332198265387674,0.7331774579161364,0.7331350990847796,0.7330927500407377,0.7330504107800537,0.7330080812987734,0.7329657615929442,0.7329234516586164,0.7328811514918423,0.7328388610886765,0.7327965804451757,0.7327543095573991,0.7327120484214081,0.7326697970332665,0.7326275553890402,0.7325853234847974,0.7325431013166086,0.7325008888805465,0.7324586861726863,0.732416493189105,0.7323743099258824,0.7323321363791,0.7322899725448422,0.7322478184191951,0.7322056739982472,0.7321635392780893,0.7321214142548147,0.7320792989245185,0.7320371932832983,0.7319950973272539,0.7319530110524873,0.7319109344551028,0.731868867531207,0.7318268102769084,0.7317847626883182,0.7317427247615497,0.7317006964927182,0.7316586778779414,0.7316166689133391,0.7315746695950336,0.7315326799191495,0.7314906998818129,0.7314487294791528,0.7314067687073006,0.7313648175623889,0.7313228760405538,0.7312809441379325,0.7312390218506651,0.7311971091748939,0.7311552061067629,0.7311133126424189,0.7310714287780103,0.7310295545096884,0.7309876898336063,0.7309458347459192,0.7309039892427847,0.7308621533203625,0.7308203269748149,0.7307785102023057,0.7307367029990012,0.7306949053610701,0.7306531172846832,0.7306113387660133,0.7305695698012354,0.730527810386527,0.7304860605180674,0.7304443201920384,0.7304025894046238,0.7303608681520096,0.730319156430384,0.7302774542359374,0.7302357615648623,0.7301940784133535,0.7301524047776078,0.7301107406538243,0.7300690860382042,0.7300274409269512,0.7299858053162703,0.7299441792023698,0.7299025625814591,0.7298609554497506,0.7298193578034584,0.7297777696387989,0.7297361909519906,0.729694621739254,0.7296530619968122,0.7296115117208902,0.729569970907715,0.7295284395535158,0.7294869176545241,0.7294454052069735,0.7294039022070997,0.7293624086511407,0.7293209245353363,0.7292794498559286,0.729237984609162,0.7291965287912827,0.7291550823985397,0.729113645427183,0.729072217873466,0.7290307997336434,0.7289893910039721,0.7289479916807114,0.7289066017601229,0.7288652212384695,0.7288238501120171,0.7287824883770333,0.7287411360297879,0.7286997930665526,0.7286584594836018,0.7286171352772112,0.7285758204436593,0.7285345149792264,0.728493218880195,0.7284519321428495,0.7284106547634769,0.7283693867383657,0.7283281280638068,0.7282868787360932,0.7282456387515202,0.7282044081063846,0.7281631867969859,0.7281219748196254,0.7280807721706066,0.728039578846235,0.7279983948428184,0.7279572201566662,0.7279160547840906,0.7278748987214052,0.7278337519649262,0.7277926145109714,0.7277514863558612,0.7277103674959178,0.7276692579274653,0.7276281576468304,0.7275870666503412,0.7275459849343285,0.7275049124951248,0.7274638493290648,0.7274227954324851,0.7273817508017248,0.7273407154331245,0.7272996893230271,0.7272586724677779,0.7272176648637236,0.7271766665072136,0.727135677394599,0.7270946975222329,0.7270537268864707,0.7270127654836699,0.7269718133101896,0.7269308703623912,0.7268899366366385,0.7268490121292969,0.726808096836734,0.7267671907553193,0.7267262938814246,0.7266854062114236,0.726644527741692,0.7266036584686076,0.7265627983885504,0.726521947497902,0.7264811057930465,0.7264402732703698,0.7263994499262596,0.7263586357571061,0.7263178307593015,0.7262770349292396,0.7262362482633165,0.7261954707579303,0.7261547024094812,0.7261139432143713,0.7260731931690046,0.7260324522697874,0.7259917205131281,0.7259509978954365,0.7259102844131252,0.7258695800626082,0.7258288848403016,0.725788198742624,0.7257475217659954,0.7257068539068382,0.7256661951615767,0.7256255455266368,0.7255849049984474,0.7255442735734382,0.7255036512480417,0.7254630380186924,0.7254224338818261,0.7253818388338813,0.7253412528712982,0.7253006759905192,0.7252601081879883,0.7252195494601519,0.725178999803458,0.725138459214357,0.725097927689301,0.7250574052247442,0.7250168918171426,0.7249763874629545,0.7249358921586398,0.7248954059006608,0.7248549286854814,0.7248144605095675,0.7247740013693875,0.7247335512614111,0.7246931101821102,0.7246526781279587,0.7246122550954328,0.7245718410810098,0.72453143608117,0.724491040092395,0.7244506531111683,0.7244102751339758,0.7243699061573051,0.7243295461776459,0.7242891951914897,0.72424885319533,0.7242085201856621,0.7241681961589838,0.724127881111794,0.7240875750405945,0.7240472779418881,0.7240069898121804,0.7239667106479782,0.7239264404457909,0.7238861792021294,0.7238459269135067,0.7238056835764376,0.7237654491874391,0.7237252237430299,0.7236850072397308,0.7236447996740646,0.7236046010425555,0.7235644113417303,0.7235242305681173,0.7234840587182471,0.7234438957886516,0.7234037417758654,0.7233635966764247,0.7233234604868671,0.7232833332037331,0.7232432148235641,0.7232031053429046,0.7231630047582996,0.7231229130662973,0.7230828302634471,0.7230427563463003,0.7230026913114107,0.7229626351553333,0.7229225878746254,0.7228825494658461,0.7228425199255565,0.7228024992503194,0.7227624874366997,0.7227224844812641,0.7226824903805814,0.7226425051312219,0.722602528729758,0.7225625611727643,0.7225226024568169,0.7224826525784939,0.7224427115343751,0.7224027793210427,0.7223628559350804,0.7223229413730738,0.7222830356316106,0.7222431387072801,0.7222032505966735,0.7221633712963844,0.7221235008030076,0.72208363911314,0.7220437862233807,0.7220039421303301,0.7219641068305913,0.7219242803207684,0.7218844625974676,0.7218446536572976,0.7218048534968681,0.7217650621127911,0.7217252795016806,0.7216855056601523,0.7216457405848236,0.7216059842723139,0.7215662367192445,0.7215264979222387,0.7214867678779213,0.7214470465829194,0.7214073340338614,0.721367630227378,0.721327935160102,0.7212882488286669,0.7212485712297095,0.7212089023598676,0.7211692422157808,0.7211295907940911,0.7210899480914418,0.7210503141044783,0.721010688829848,0.7209710722641997,0.7209314644041843,0.7208918652464549,0.7208522747876656,0.7208126930244729,0.7207731199535353,0.7207335555715128,0.7206939998750671,0.7206544528608622,0.7206149145255635,0.7205753848658384,0.7205358638783563,0.7204963515597881,0.7204568479068066,0.7204173529160868,0.7203778665843051,0.7203383889081397,0.7202989198842709,0.7202594595093808,0.7202200077801528,0.7201805646932731,0.7201411302454287,0.7201017044333089,0.720062287253605,0.7200228787030096,0.7199834787782176,0.7199440874759253,0.7199047047928312,0.7198653307256353,0.7198259652710394,0.7197866084257475,0.7197472601864648,0.7197079205498987,0.7196685895127586,0.719629267071755,0.7195899532236009,0.7195506479650106,0.7195113512927004,0.7194720632033885,0.7194327836937949,0.7193935127606411,0.7193542504006507,0.7193149966105488,0.7192757513870625,0.7192365147269205,0.7191972866268537,0.7191580670835942,0.7191188560938764,0.719079653654436,0.719040459762011,0.7190012744133408,0.7189620976051666,0.7189229293342316,0.7188837695972805,0.7188446183910601,0.7188054757123186,0.718766341557806,0.7187272159242747,0.7186880988084781,0.7186489902071715,0.7186098901171124,0.7185707985350597,0.7185317154577742,0.7184926408820181,0.7184535748045561,0.7184145172221539,0.7183754681315793,0.7183364275296021,0.7182973954129935,0.7182583717785264,0.7182193566229756,0.7181803499431179,0.7181413517357315,0.7181023619975963,0.7180633807254941,0.7180244079162088,0.7179854435665254,0.7179464876732309,0.7179075402331141,0.7178686012429658,0.7178296706995779,0.7177907485997448,0.7177518349402617,0.7177129297179266,0.7176740329295385,0.7176351445718983,0.7175962646418087,0.717557393136074,0.7175185300515007,0.7174796753848965,0.7174408291330708,0.7174019912928352,0.7173631618610026,0.7173243408343878,0.7172855282098074,0.7172467239840795,0.7172079281540241,0.7171691407164629,0.7171303616682192,0.7170915910061181,0.7170528287269866,0.717014074827653,0.7169753293049478,0.7169365921557027,0.7168978633767514,0.7168591429649295,0.7168204309170739,0.7167817272300234,0.7167430319006187,0.7167043449257018,0.7166656663021166,0.716626996026709,0.7165883340963257,0.7165496805078164,0.7165110352580316,0.7164723983438237,0.7164337697620466,0.7163951495095564,0.7163565375832105,0.7163179339798681,0.7162793386963899,0.7162407517296389,0.716202173076479,0.7161636027337764,0.7161250406983987,0.7160864869672149,0.7160479415370966,0.716009404404916,0.7159708755675477,0.7159323550218678,0.715893842764754,0.7158553387930856,0.7158168431037439,0.7157783556936117,0.7157398765595734,0.715701405698515,0.7156629431073244,0.7156244887828911,0.7155860427221064,0.7155476049218628,0.7155091753790549,0.7154707540905788,0.7154323410533326,0.7153939362642155,0.7153555397201289,0.7153171514179754,0.7152787713546596,0.7152403995270875,0.715202035932167,0.7151636805668075,0.7151253334279203,0.7150869945124179,0.7150486638172148,0.7150103413392271,0.7149720270753727,0.7149337210225708,0.7148954231777422,0.71485713353781,0.7148188520996984,0.7147805788603333,0.7147423138166423,0.7147040569655548,0.7146658083040016,0.7146275678289153,0.71458933553723,0.7145511114258816,0.7145128954918076,0.714474687731947,0.7144364881432408,0.7143982967226309,0.7143601134670619,0.714321938373479,0.7142837714388297,0.7142456126600627,0.7142074620341288,0.71416931955798,0.7141311852285703,0.7140930590428547,0.7140549409977908,0.7140168310903368,0.7139787293174532,0.7139406356761019,0.7139025501632464,0.7138644727758519,0.7138264035108852,0.7137883423653146,0.7137502893361102,0.7137122444202435,0.7136742076146879,0.7136361789164182,0.7135981583224107,0.7135601458296436,0.7135221414350967,0.7134841451357511,0.7134461569285897,0.7134081768105972,0.7133702047787595,0.7133322408300643,0.713294284961501,0.7132563371700608,0.7132183974527357,0.7131804658065201,0.7131425422284096,0.7131046267154016,0.713066719264495,0.7130288198726904,0.7129909285369896,0.7129530452543966,0.7129151700219165,0.7128773028365564,0.7128394436953244,0.7128015925952309,0.7127637495332872,0.7127259145065069,0.7126880875119045,0.7126502685464965,0.712612457607301,0.7125746546913372,0.7125368597956268,0.7124990729171921,0.7124612940530574,0.7124235232002487,0.7123857603557935,0.7123480055167206,0.712310258680061,0.7122725198428466,0.712234789002111,0.7121970661548898,0.7121593512982198,0.7121216444291395,0.7120839455446888,0.7120462546419094,0.7120085717178444,0.7119708967695384,0.711933229794038,0.7118955707883908,0.7118579197496463,0.7118202766748555,0.7117826415610707,0.7117450144053463,0.7117073952047378,0.7116697839563024,0.7116321806570989,0.7115945853041875,0.7115569978946302,0.7115194184254904,0.7114818468938329,0.7114442832967243,0.7114067276312327,0.7113691798944277,0.7113316400833803,0.7112941081951636,0.7112565842268515,0.7112190681755198,0.711181560038246,0.7111440598121089,0.7111065674941888,0.7110690830815678,0.7110316065713294,0.7109941379605584,0.7109566772463416,0.710919224425767,0.7108817794959242,0.7108443424539046,0.7108069132968006,0.7107694920217065,0.710732078625718,0.7106946731059326,0.7106572754594488,0.7106198856833673,0.7105825037747897,0.7105451297308194,0.7105077635485615,0.7104704052251222,0.7104330547576095,0.710395712143133,0.7103583773788036,0.7103210504617339,0.7102837313890377,0.7102464201578308,0.7102091167652301,0.7101718212083543,0.7101345334843234,0.710097253590259,0.7100599815232842,0.7100227172805237,0.7099854608591035,0.7099482122561512,0.7099109714687962,0.7098737384941689,0.7098365133294017,0.7097992959716278,0.7097620864179828,0.7097248846656032,0.7096876907116272,0.7096505045531943,0.709613326187446,0.7095761556115245,0.7095389928225744,0.7095018378177409,0.7094646905941715,0.7094275511490148,0.7093904194794207,0.7093532955825411,0.7093161794555289,0.7092790710955388,0.7092419704997268,0.7092048776652505,0.709167792589269,0.7091307152689429,0.7090936457014341,0.7090565838839062,0.7090195298135242,0.7089824834874544,0.7089454449028652,0.7089084140569255,0.7088713909468065,0.7088343755696807,0.7087973679227216,0.7087603680031049,0.7087233758080073,0.7086863913346071,0.708649414580084,0.7086124455416192,0.7085754842163954,0.7085385306015971,0.7085015846944095,0.70846464649202,0.708427715991617,0.7083907931903907,0.7083538780855325,0.7083169706742354,0.7082800709536939,0.7082431789211037,0.7082062945736624,0.7081694179085686,0.7081325489230226,0.7080956876142263,0.7080588339793827,0.7080219880156966,0.707985149720374,0.7079483190906224,0.7079114961236508,0.7078746808166698,0.7078378731668911,0.7078010731715283,0.707764280827796,0.7077274961329104,0.7076907190840895,0.7076539496785521,0.7076171879135189,0.707580433786212,0.707543687293855,0.7075069484336725,0.7074702172028909,0.7074334935987382,0.7073967776184436,0.7073600692592376,0.7073233685183522,0.7072866753930215,0.7072499898804798,0.707213311977964,0.7071766416827118,0.7071399789919623,0.7071033239029565,0.7070666764129363,0.7070300365191453,0.7069934042188287,0.7069567795092327,0.7069201623876052,0.7068835528511955,0.7068469508972545,0.7068103565230339,0.7067737697257874,0.7067371905027702,0.7067006188512385,0.70666405476845,0.7066274982516642,0.7065909492981415,0.7065544079051438,0.706517874069935,0.70648134778978,0.7064448290619446,0.706408317883697,0.7063718142523061,0.7063353181650425,0.706298829619178,0.7062623486119862,0.7062258751407418,0.7061894092027208,0.7061529507952009,0.7061164999154611,0.7060800565607818,0.7060436207284447,0.7060071924157332,0.7059707716199317,0.7059343583383262,0.7058979525682042,0.7058615543068544,0.705825163551567,0.7057887802996335,0.7057524045483473,0.7057160362950023,0.7056796755368946,0.705643322271321,0.7056069764955805,0.7055706382069726,0.7055343074027991,0.7054979840803625,0.7054616682369667,0.7054253598699176,0.7053890589765219,0.705352765554088,0.7053164795999252,0.7052802011113449,0.7052439300856596,0.7052076665201827,0.7051714104122299,0.7051351617591174,0.7050989205581633,0.7050626868066867,0.7050264605020087,0.7049902416414512,0.7049540302223376,0.7049178262419926,0.7048816296977428,0.7048454405869156,0.7048092589068398,0.7047730846548459,0.7047369178282654,0.7047007584244317,0.7046646064406789,0.7046284618743429,0.7045923247227609,0.7045561949832715,0.7045200726532144,0.7044839577299311,0.7044478502107641,0.7044117500930572,0.704375657374156,0.7043395720514071,0.7043034941221586,0.7042674235837599,0.7042313604335617,0.7041953046689163,0.7041592562871771,0.704123215285699,0.7040871816618379,0.7040511554129517,0.7040151365363992,0.7039791250295407,0.7039431208897378,0.7039071241143533,0.7038711347007515,0.7038351526462983,0.7037991779483604,0.7037632106043064,0.7037272506115058,0.7036912979673298,0.7036553526691506,0.7036194147143419,0.7035834841002789,0.7035475608243379,0.7035116448838966,0.7034757362763342,0.7034398349990312,0.7034039410493689,0.7033680544247308,0.7033321751225012,0.7032963031400659,0.7032604384748118,0.7032245811241276,0.7031887310854027,0.7031528883560285,0.7031170529333972,0.7030812248149026,0.7030454039979399,0.7030095904799052,0.7029737842581966,0.7029379853302128,0.7029021936933543,0.7028664093450229,0.7028306322826213,0.7027948625035542,0.702759100005227,0.7027233447850467,0.7026875968404219,0.7026518561687618,0.7026161227674775,0.7025803966339814,0.7025446777656869,0.7025089661600088,0.7024732618143633,0.7024375647261681,0.702401874892842,0.702366192311805,0.7023305169804784,0.7022948488962854,0.7022591880566494,0.7022235344589964,0.7021878881007528,0.7021522489793466,0.7021166170922071,0.7020809924367648,0.7020453750104516,0.7020097648107009,0.7019741618349468,0.7019385660806254,0.7019029775451738,0.7018673962260303,0.7018318221206347,0.7017962552264279,0.701760695540852,0.7017251430613509,0.7016895977853693,0.7016540597103536,0.7016185288337509,0.7015830051530101,0.7015474886655815,0.7015119793689161,0.7014764772604667,0.7014409823376871,0.7014054945980328,0.7013700140389599,0.7013345406579264,0.7012990744523915,0.7012636154198153,0.7012281635576594,0.701192718863387,0.701157281334462,0.70112185096835,0.701086427762518,0.7010510117144335,0.7010156028215664,0.7009802010813868,0.7009448064913671,0.7009094190489801,0.7008740387517001,0.7008386655970031,0.700803299582366,0.700767940705267,0.7007325889631858,0.7006972443536028,0.7006619068740003,0.7006265765218618,0.7005912532946718,0.7005559371899158,0.7005206282050814,0.7004853263376568,0.7004500315851317,0.7004147439449971,0.7003794634147451,0.7003441899918693,0.7003089236738642,0.700273664458226,0.7002384123424519,0.7002031673240401,0.7001679294004908,0.7001326985693047,0.7000974748279843,0.7000622581740331,0.7000270486049558,0.6999918461182585,0.6999566507114483,0.6999214623820341,0.6998862811275256,0.6998511069454336,0.6998159398332706,0.6997807797885504,0.6997456268087874,0.6997104808914978,0.6996753420341989,0.6996402102344093,0.6996050854896487,0.6995699677974382,0.6995348571553001,0.6994997535607579,0.6994646570113363,0.6994295675045614,0.6993944850379604,0.6993594096090618,0.6993243412153956,0.6992892798544923,0.6992542255238844,0.6992191782211051,0.6991841379436894,0.699149104689173,0.6991140784550931,0.699079059238988,0.6990440470383977,0.6990090418508625,0.6989740436739248,0.6989390525051279,0.6989040683420162,0.6988690911821357,0.6988341210230331,0.6987991578622568,0.6987642016973562,0.698729252525882,0.6986943103453861,0.6986593751534217,0.6986244469475429,0.6985895257253055,0.6985546114842663,0.6985197042219832,0.6984848039360155,0.6984499106239235,0.6984150242832691,0.6983801449116152,0.6983452725065256,0.6983104070655658,0.6982755485863024,0.6982406970663031,0.6982058525031369,0.6981710148943739,0.6981361842375855,0.6981013605303443,0.6980665437702243,0.6980317339548002,0.6979969310816485,0.6979621351483465,0.6979273461524729,0.6978925640916075,0.6978577889633313,0.697823020765227,0.6977882594948773,0.6977535051498676,0.6977187577277834,0.6976840172262118,0.6976492836427411,0.697614556974961,0.6975798372204618,0.6975451243768357,0.6975104184416756,0.6974757194125758,0.6974410272871318,0.6974063420629402,0.6973716637375991,0.6973369923087072,0.6973023277738648,0.6972676701306737,0.6972330193767361,0.6971983755096562,0.6971637385270387,0.69712910842649,0.6970944852056175,0.6970598688620295,0.6970252593933363,0.6969906567971482,0.6969560610710779,0.6969214722127384,0.6968868902197444,0.6968523150897113,0.6968177468202564,0.6967831854089974,0.6967486308535538,0.6967140831515458,0.6966795423005951,0.6966450082983248,0.6966104811423581,0.6965759608303208,0.6965414473598389,0.69650694072854,0.6964724409340528,0.6964379479740072,0.6964034618460339,0.6963689825477652,0.6963345100768347,0.6963000444308767,0.6962655856075269,0.6962311336044223,0.6961966884192008,0.6961622500495016,0.6961278184929652,0.6960933937472331,0.696058975809948,0.6960245646787537,0.6959901603512954,0.695955762825219,0.6959213720981722,0.6958869881678033,0.695852611031762,0.6958182406876993,0.6957838771332671,0.6957495203661186,0.6957151703839082,0.6956808271842911,0.6956464907649241,0.6956121611234652,0.6955778382575731,0.6955435221649082,0.6955092128431314,0.6954749102899053,0.6954406145028934,0.6954063254797604,0.6953720432181724,0.6953377677157961,0.6953034989702999,0.6952692369793532,0.6952349817406261,0.6952007332517905,0.6951664915105192,0.6951322565144858,0.6950980282613658,0.695063806748835,0.6950295919745709,0.6949953839362522,0.6949611826315581,0.6949269880581698,0.6948928002137689,0.6948586190960385,0.6948244447026629,0.6947902770313275,0.6947561160797185,0.6947219618455237,0.6946878143264318,0.6946536735201327,0.6946195394243174,0.6945854120366781,0.694551291354908,0.6945171773767014,0.6944830700997542,0.6944489695217626,0.6944148756404249,0.6943807884534399,0.6943467079585073,0.6943126341533288,0.6942785670356063,0.6942445066030437,0.6942104528533453,0.6941764057842167,0.6941423653933648,0.6941083316784978,0.6940743046373246,0.6940402842675554,0.6940062705669015,0.6939722635330753,0.6939382631637906,0.6939042694567619,0.6938702824097049,0.6938363020203367,0.6938023282863753,0.6937683612055399,0.6937344007755507,0.6937004469941291,0.6936664998589976,0.69363255936788,0.6935986255185007,0.6935646983085858,0.6935307777358621,0.693496863798058,0.6934629564929022,0.6934290558181253,0.6933951617714587,0.6933612743506348],"x":[0.8,0.8004398240703718,0.8008796481407437,0.8013194722111155,0.8017592962814875,0.8021991203518593,0.8026389444222312,0.803078768492603,0.8035185925629749,0.8039584166333467,0.8043982407037185,0.8048380647740904,0.8052778888444622,0.8057177129148341,0.8061575369852059,0.8065973610555778,0.8070371851259496,0.8074770091963215,0.8079168332666933,0.8083566573370652,0.808796481407437,0.8092363054778089,0.8096761295481807,0.8101159536185526,0.8105557776889244,0.8109956017592963,0.8114354258296681,0.81187524990004,0.8123150739704118,0.8127548980407837,0.8131947221111555,0.8136345461815274,0.8140743702518992,0.8145141943222711,0.8149540183926429,0.8153938424630148,0.8158336665333866,0.8162734906037585,0.8167133146741303,0.8171531387445022,0.817592962814874,0.8180327868852459,0.8184726109556177,0.8189124350259896,0.8193522590963614,0.8197920831667334,0.8202319072371052,0.8206717313074771,0.8211115553778489,0.8215513794482208,0.8219912035185926,0.8224310275889645,0.8228708516593363,0.8233106757297081,0.82375049980008,0.8241903238704518,0.8246301479408237,0.8250699720111955,0.8255097960815674,0.8259496201519392,0.8263894442223111,0.8268292682926829,0.8272690923630548,0.8277089164334266,0.8281487405037985,0.8285885645741703,0.8290283886445422,0.829468212714914,0.8299080367852859,0.8303478608556577,0.8307876849260296,0.8312275089964014,0.8316673330667733,0.8321071571371451,0.832546981207517,0.8329868052778888,0.8334266293482607,0.8338664534186325,0.8343062774890044,0.8347461015593762,0.8351859256297481,0.8356257497001199,0.8360655737704918,0.8365053978408636,0.8369452219112355,0.8373850459816073,0.8378248700519793,0.838264694122351,0.838704518192723,0.8391443422630948,0.8395841663334667,0.8400239904038385,0.8404638144742104,0.8409036385445822,0.841343462614954,0.8417832866853259,0.8422231107556977,0.8426629348260696,0.8431027588964414,0.8435425829668133,0.8439824070371851,0.844422231107557,0.8448620551779288,0.8453018792483007,0.8457417033186725,0.8461815273890444,0.8466213514594162,0.8470611755297881,0.8475009996001599,0.8479408236705318,0.8483806477409036,0.8488204718112755,0.8492602958816473,0.8497001199520192,0.850139944022391,0.8505797680927629,0.8510195921631347,0.8514594162335066,0.8518992403038784,0.8523390643742503,0.8527788884446221,0.853218712514994,0.8536585365853658,0.8540983606557377,0.8545381847261095,0.8549780087964814,0.8554178328668532,0.8558576569372252,0.856297481007597,0.8567373050779689,0.8571771291483407,0.8576169532187126,0.8580567772890844,0.8584966013594563,0.8589364254298281,0.8593762495002,0.8598160735705718,0.8602558976409436,0.8606957217113155,0.8611355457816873,0.8615753698520592,0.862015193922431,0.8624550179928029,0.8628948420631747,0.8633346661335466,0.8637744902039184,0.8642143142742903,0.8646541383446621,0.865093962415034,0.8655337864854058,0.8659736105557777,0.8664134346261495,0.8668532586965214,0.8672930827668932,0.8677329068372651,0.8681727309076369,0.8686125549780088,0.8690523790483806,0.8694922031187525,0.8699320271891243,0.8703718512594962,0.870811675329868,0.8712514994002399,0.8716913234706117,0.8721311475409836,0.8725709716113554,0.8730107956817273,0.8734506197520991,0.873890443822471,0.8743302678928428,0.8747700919632148,0.8752099160335866,0.8756497401039585,0.8760895641743303,0.8765293882447022,0.876969212315074,0.8774090363854459,0.8778488604558177,0.8782886845261896,0.8787285085965614,0.8791683326669332,0.8796081567373051,0.8800479808076769,0.8804878048780488,0.8809276289484206,0.8813674530187925,0.8818072770891643,0.8822471011595362,0.882686925229908,0.8831267493002799,0.8835665733706517,0.8840063974410236,0.8844462215113954,0.8848860455817673,0.8853258696521391,0.885765693722511,0.8862055177928828,0.8866453418632547,0.8870851659336265,0.8875249900039984,0.8879648140743702,0.8884046381447421,0.8888444622151139,0.8892842862854858,0.8897241103558576,0.8901639344262295,0.8906037584966013,0.8910435825669732,0.891483406637345,0.891923230707717,0.8923630547780887,0.8928028788484607,0.8932427029188325,0.8936825269892044,0.8941223510595762,0.8945621751299481,0.8950019992003199,0.8954418232706918,0.8958816473410636,0.8963214714114355,0.8967612954818073,0.8972011195521792,0.897640943622551,0.8980807676929228,0.8985205917632947,0.8989604158336665,0.8994002399040384,0.8998400639744102,0.9002798880447821,0.9007197121151539,0.9011595361855258,0.9015993602558976,0.9020391843262695,0.9024790083966413,0.9029188324670132,0.903358656537385,0.9037984806077569,0.9042383046781287,0.9046781287485006,0.9051179528188724,0.9055577768892443,0.9059976009596161,0.906437425029988,0.9068772491003598,0.9073170731707317,0.9077568972411035,0.9081967213114754,0.9086365453818472,0.9090763694522191,0.9095161935225909,0.9099560175929629,0.9103958416633346,0.9108356657337066,0.9112754898040784,0.9117153138744503,0.9121551379448221,0.912594962015194,0.9130347860855658,0.9134746101559377,0.9139144342263095,0.9143542582966814,0.9147940823670532,0.9152339064374251,0.9156737305077969,0.9161135545781688,0.9165533786485406,0.9169932027189124,0.9174330267892843,0.9178728508596561,0.918312674930028,0.9187524990003998,0.9191923230707717,0.9196321471411435,0.9200719712115154,0.9205117952818872,0.9209516193522591,0.9213914434226309,0.9218312674930028,0.9222710915633746,0.9227109156337465,0.9231507397041183,0.9235905637744902,0.924030387844862,0.9244702119152339,0.9249100359856057,0.9253498600559776,0.9257896841263494,0.9262295081967213,0.9266693322670931,0.927109156337465,0.9275489804078368,0.9279888044782088,0.9284286285485805,0.9288684526189525,0.9293082766893243,0.9297481007596962,0.930187924830068,0.9306277489004399,0.9310675729708117,0.9315073970411836,0.9319472211115554,0.9323870451819273,0.9328268692522991,0.933266693322671,0.9337065173930428,0.9341463414634147,0.9345861655337865,0.9350259896041584,0.9354658136745302,0.935905637744902,0.9363454618152739,0.9367852858856457,0.9372251099560176,0.9376649340263894,0.9381047580967613,0.9385445821671331,0.938984406237505,0.9394242303078768,0.9398640543782487,0.9403038784486205,0.9407437025189924,0.9411835265893642,0.9416233506597361,0.9420631747301079,0.9425029988004798,0.9429428228708516,0.9433826469412235,0.9438224710115953,0.9442622950819672,0.944702119152339,0.945141943222711,0.9455817672930827,0.9460215913634547,0.9464614154338264,0.9469012395041984,0.9473410635745702,0.9477808876449421,0.9482207117153139,0.9486605357856858,0.9491003598560576,0.9495401839264295,0.9499800079968013,0.9504198320671732,0.950859656137545,0.9512994802079169,0.9517393042782887,0.9521791283486606,0.9526189524190324,0.9530587764894043,0.9534986005597761,0.9539384246301479,0.9543782487005198,0.9548180727708916,0.9552578968412635,0.9556977209116353,0.9561375449820072,0.956577369052379,0.9570171931227509,0.9574570171931227,0.9578968412634946,0.9583366653338664,0.9587764894042383,0.9592163134746101,0.959656137544982,0.9600959616153538,0.9605357856857257,0.9609756097560975,0.9614154338264694,0.9618552578968412,0.9622950819672131,0.9627349060375849,0.9631747301079568,0.9636145541783286,0.9640543782487005,0.9644942023190723,0.9649340263894443,0.965373850459816,0.965813674530188,0.9662534986005598,0.9666933226709317,0.9671331467413035,0.9675729708116754,0.9680127948820472,0.9684526189524191,0.9688924430227909,0.9693322670931628,0.9697720911635346,0.9702119152339065,0.9706517393042783,0.9710915633746502,0.971531387445022,0.9719712115153939,0.9724110355857657,0.9728508596561375,0.9732906837265094,0.9737305077968812,0.9741703318672531,0.9746101559376249,0.9750499800079968,0.9754898040783686,0.9759296281487405,0.9763694522191123,0.9768092762894842,0.977249100359856,0.9776889244302279,0.9781287485005997,0.9785685725709716,0.9790083966413434,0.9794482207117153,0.9798880447820871,0.980327868852459,0.9807676929228308,0.9812075169932027,0.9816473410635745,0.9820871651339464,0.9825269892043182,0.9829668132746902,0.983406637345062,0.9838464614154339,0.9842862854858057,0.9847261095561776,0.9851659336265494,0.9856057576969213,0.9860455817672931,0.986485405837665,0.9869252299080368,0.9873650539784087,0.9878048780487805,0.9882447021191524,0.9886845261895242,0.9891243502598961,0.9895641743302679,0.9900039984006398,0.9904438224710116,0.9908836465413835,0.9913234706117553,0.9917632946821271,0.992203118752499,0.9926429428228708,0.9930827668932427,0.9935225909636145,0.9939624150339864,0.9944022391043582,0.9948420631747301,0.9952818872451019,0.9957217113154738,0.9961615353858456,0.9966013594562175,0.9970411835265893,0.9974810075969612,0.997920831667333,0.9983606557377049,0.9988004798080767,0.9992403038784486,0.9996801279488204,1.0001199520191923,1.0005597760895641,1.000999600159936,1.001439424230308,1.0018792483006798,1.0023190723710516,1.0027588964414234,1.0031987205117954,1.0036385445821672,1.004078368652539,1.0045181927229108,1.0049580167932828,1.0053978408636546,1.0058376649340264,1.0062774890043982,1.0067173130747702,1.007157137145142,1.0075969612155138,1.0080367852858856,1.0084766093562576,1.0089164334266294,1.0093562574970012,1.009796081567373,1.010235905637745,1.0106757297081168,1.0111155537784886,1.0115553778488604,1.0119952019192322,1.0124350259896042,1.012874850059976,1.0133146741303478,1.0137544982007196,1.0141943222710916,1.0146341463414634,1.0150739704118352,1.015513794482207,1.015953618552579,1.0163934426229508,1.0168332666933226,1.0172730907636944,1.0177129148340665,1.0181527389044382,1.01859256297481,1.0190323870451818,1.0194722111155539,1.0199120351859257,1.0203518592562975,1.0207916833266693,1.0212315073970413,1.021671331467413,1.0221111555377849,1.0225509796081567,1.0229908036785287,1.0234306277489005,1.0238704518192723,1.024310275889644,1.024750099960016,1.025189924030388,1.0256297481007597,1.0260695721711315,1.0265093962415035,1.0269492203118753,1.027389044382247,1.027828868452619,1.028268692522991,1.0287085165933627,1.0291483406637345,1.0295881647341063,1.030027988804478,1.0304678128748501,1.030907636945222,1.0313474610155937,1.0317872850859655,1.0322271091563375,1.0326669332267093,1.0331067572970811,1.033546581367453,1.033986405437825,1.0344262295081967,1.0348660535785685,1.0353058776489403,1.0357457017193124,1.0361855257896841,1.036625349860056,1.0370651739304277,1.0375049980007998,1.0379448220711716,1.0383846461415434,1.0388244702119152,1.0392642942822872,1.039704118352659,1.0401439424230308,1.0405837664934026,1.0410235905637746,1.0414634146341464,1.0419032387045182,1.04234306277489,1.042782886845262,1.0432227109156338,1.0436625349860056,1.0441023590563774,1.0445421831267494,1.0449820071971212,1.045421831267493,1.0458616553378648,1.0463014794082368,1.0467413034786086,1.0471811275489804,1.0476209516193522,1.048060775689724,1.048500599760096,1.0489404238304678,1.0493802479008396,1.0498200719712114,1.0502598960415834,1.0506997201119552,1.051139544182327,1.0515793682526988,1.0520191923230708,1.0524590163934426,1.0528988404638144,1.0533386645341862,1.0537784886045582,1.05421831267493,1.0546581367453018,1.0550979608156736,1.0555377848860457,1.0559776089564175,1.0564174330267893,1.056857257097161,1.057297081167533,1.0577369052379049,1.0581767293082767,1.0586165533786485,1.0590563774490205,1.0594962015193923,1.059936025589764,1.0603758496601359,1.060815673730508,1.0612554978008797,1.0616953218712515,1.0621351459416233,1.0625749700119953,1.063014794082367,1.063454618152739,1.0638944422231107,1.0643342662934827,1.0647740903638545,1.0652139144342263,1.065653738504598,1.0660935625749701,1.066533386645342,1.0669732107157137,1.0674130347860855,1.0678528588564573,1.0682926829268293,1.0687325069972011,1.069172331067573,1.0696121551379447,1.0700519792083167,1.0704918032786885,1.0709316273490603,1.0713714514194321,1.0718112754898041,1.072251099560176,1.0726909236305477,1.0731307477009195,1.0735705717712916,1.0740103958416634,1.0744502199120352,1.074890043982407,1.075329868052779,1.0757696921231508,1.0762095161935226,1.0766493402638944,1.0770891643342664,1.0775289884046382,1.07796881247501,1.0784086365453818,1.0788484606157538,1.0792882846861256,1.0797281087564974,1.0801679328268692,1.0806077568972412,1.081047580967613,1.0814874050379848,1.0819272291083566,1.0823670531787286,1.0828068772491004,1.0832467013194722,1.083686525389844,1.084126349460216,1.0845661735305878,1.0850059976009596,1.0854458216713314,1.0858856457417032,1.0863254698120752,1.086765293882447,1.0872051179528188,1.0876449420231906,1.0880847660935626,1.0885245901639344,1.0889644142343062,1.089404238304678,1.08984406237505,1.0902838864454218,1.0907237105157936,1.0911635345861654,1.0916033586565375,1.0920431827269093,1.092483006797281,1.0929228308676529,1.0933626549380249,1.0938024790083967,1.0942423030787685,1.0946821271491403,1.0951219512195123,1.095561775289884,1.0960015993602559,1.0964414234306277,1.0968812475009997,1.0973210715713715,1.0977608956417433,1.098200719712115,1.098640543782487,1.099080367852859,1.0995201919232307,1.0999600159936025,1.1003998400639745,1.1008396641343463,1.101279488204718,1.10171931227509,1.102159136345462,1.1025989604158337,1.1030387844862055,1.1034786085565773,1.1039184326269493,1.1043582566973211,1.104798080767693,1.1052379048380647,1.1056777289084365,1.1061175529788085,1.1065573770491803,1.1069972011195521,1.107437025189924,1.107876849260296,1.1083166733306677,1.1087564974010395,1.1091963214714113,1.1096361455417834,1.1100759696121552,1.110515793682527,1.1109556177528987,1.1113954418232708,1.1118352658936426,1.1122750899640144,1.1127149140343862,1.1131547381047582,1.11359456217513,1.1140343862455018,1.1144742103158736,1.1149140343862456,1.1153538584566174,1.1157936825269892,1.116233506597361,1.116673330667733,1.1171131547381048,1.1175529788084766,1.1179928028788484,1.1184326269492204,1.1188724510195922,1.119312275089964,1.1197520991603358,1.1201919232307078,1.1206317473010796,1.1210715713714514,1.1215113954418232,1.1219512195121952,1.122391043582567,1.1228308676529388,1.1232706917233106,1.1237105157936824,1.1241503398640544,1.1245901639344262,1.125029988004798,1.1254698120751698,1.1259096361455418,1.1263494602159136,1.1267892842862854,1.1272291083566572,1.1276689324270293,1.128108756497401,1.1285485805677729,1.1289884046381446,1.1294282287085167,1.1298680527788885,1.1303078768492603,1.130747700919632,1.131187524990004,1.1316273490603759,1.1320671731307477,1.1325069972011195,1.1329468212714915,1.1333866453418633,1.133826469412235,1.1342662934826069,1.134706117552979,1.1351459416233507,1.1355857656937225,1.1360255897640943,1.1364654138344663,1.136905237904838,1.13734506197521,1.1377848860455817,1.1382247101159537,1.1386645341863255,1.1391043582566973,1.139544182327069,1.1399840063974411,1.140423830467813,1.1408636545381847,1.1413034786085565,1.1417433026789283,1.1421831267493003,1.1426229508196721,1.143062774890044,1.1435025989604157,1.1439424230307877,1.1443822471011595,1.1448220711715313,1.1452618952419031,1.1457017193122752,1.146141543382647,1.1465813674530188,1.1470211915233905,1.1474610155937626,1.1479008396641344,1.1483406637345062,1.148780487804878,1.14922031187525,1.1496601359456218,1.1500999600159936,1.1505397840863654,1.1509796081567374,1.1514194322271092,1.151859256297481,1.1522990803678528,1.1527389044382248,1.1531787285085966,1.1536185525789684,1.1540583766493402,1.1544982007197122,1.154938024790084,1.1553778488604558,1.1558176729308276,1.1562574970011996,1.1566973210715714,1.1571371451419432,1.157576969212315,1.158016793282687,1.1584566173530588,1.1588964414234306,1.1593362654938024,1.1597760895641744,1.1602159136345462,1.160655737704918,1.1610955617752898,1.1615353858456616,1.1619752099160336,1.1624150339864054,1.1628548580567772,1.163294682127149,1.163734506197521,1.1641743302678929,1.1646141543382647,1.1650539784086364,1.1654938024790085,1.1659336265493803,1.166373450619752,1.1668132746901239,1.1672530987604959,1.1676929228308677,1.1681327469012395,1.1685725709716113,1.1690123950419833,1.169452219112355,1.1698920431827269,1.1703318672530987,1.1707716913234707,1.1712115153938425,1.1716513394642143,1.172091163534586,1.172530987604958,1.17297081167533,1.1734106357457017,1.1738504598160735,1.1742902838864455,1.1747301079568173,1.1751699320271891,1.175609756097561,1.176049580167933,1.1764894042383047,1.1769292283086765,1.1773690523790483,1.1778088764494203,1.1782487005197921,1.178688524590164,1.1791283486605357,1.1795681727309075,1.1800079968012795,1.1804478208716513,1.1808876449420231,1.181327469012395,1.181767293082767,1.1822071171531388,1.1826469412235106,1.1830867652938823,1.1835265893642544,1.1839664134346262,1.184406237504998,1.1848460615753698,1.1852858856457418,1.1857257097161136,1.1861655337864854,1.1866053578568572,1.1870451819272292,1.187485005997601,1.1879248300679728,1.1883646541383446,1.1888044782087166,1.1892443022790884,1.1896841263494602,1.190123950419832,1.190563774490204,1.1910035985605758,1.1914434226309476,1.1918832467013194,1.1923230707716914,1.1927628948420632,1.193202718912435,1.1936425429828068,1.1940823670531788,1.1945221911235506,1.1949620151939224,1.1954018392642942,1.1958416633346662,1.196281487405038,1.1967213114754098,1.1971611355457816,1.1976009596161536,1.1980407836865254,1.1984806077568972,1.198920431827269,1.1993602558976408,1.1998000799680129,1.2002399040383847,1.2006797281087564,1.2011195521791282,1.2015593762495003,1.201999200319872,1.2024390243902439,1.2028788484606157,1.2033186725309877,1.2037584966013595,1.2041983206717313,1.204638144742103,1.205077968812475,1.2055177928828469,1.2059576169532187,1.2063974410235905,1.2068372650939625,1.2072770891643343,1.207716913234706,1.2081567373050779,1.20859656137545,1.2090363854458217,1.2094762095161935,1.2099160335865653,1.2103558576569373,1.2107956817273091,1.211235505797681,1.2116753298680527,1.2121151539384247,1.2125549780087965,1.2129948020791683,1.2134346261495401,1.2138744502199121,1.214314274290284,1.2147540983606557,1.2151939224310275,1.2156337465013995,1.2160735705717713,1.2165133946421431,1.216953218712515,1.2173930427828867,1.2178328668532588,1.2182726909236306,1.2187125149940023,1.2191523390643741,1.2195921631347462,1.220031987205118,1.2204718112754898,1.2209116353458616,1.2213514594162336,1.2217912834866054,1.2222311075569772,1.222670931627349,1.223110755697721,1.2235505797680928,1.2239904038384646,1.2244302279088364,1.2248700519792084,1.2253098760495802,1.225749700119952,1.2261895241903238,1.2266293482606958,1.2270691723310676,1.2275089964014394,1.2279488204718112,1.2283886445421832,1.228828468612555,1.2292682926829268,1.2297081167532986,1.2301479408236706,1.2305877648940424,1.2310275889644142,1.231467413034786,1.231907237105158,1.2323470611755298,1.2327868852459016,1.2332267093162734,1.2336665333866454,1.2341063574570172,1.234546181527389,1.2349860055977608,1.2354258296681329,1.2358656537385047,1.2363054778088765,1.2367453018792482,1.23718512594962,1.237624950019992,1.2380647740903639,1.2385045981607357,1.2389444222311075,1.2393842463014795,1.2398240703718513,1.240263894442223,1.2407037185125949,1.2411435425829669,1.2415833666533387,1.2420231907237105,1.2424630147940823,1.2429028388644543,1.243342662934826,1.243782487005198,1.2442223110755697,1.2446621351459417,1.2451019592163135,1.2455417832866853,1.245981607357057,1.2464214314274291,1.246861255497801,1.2473010795681727,1.2477409036385445,1.2481807277089165,1.2486205517792883,1.2490603758496601,1.249500199920032,1.249940023990404,1.2503798480607757,1.2508196721311475,1.2512594962015193,1.2516993202718913,1.2521391443422631,1.252578968412635,1.2530187924830067,1.2534586165533788,1.2538984406237506,1.2543382646941224,1.2547780887644941,1.255217912834866,1.255657736905238,1.2560975609756098,1.2565373850459816,1.2569772091163534,1.2574170331867254,1.2578568572570972,1.258296681327469,1.2587365053978408,1.2591763294682128,1.2596161535385846,1.2600559776089564,1.2604958016793282,1.2609356257497002,1.261375449820072,1.2618152738904438,1.2622550979608156,1.2626949220311876,1.2631347461015594,1.2635745701719312,1.264014394242303,1.264454218312675,1.2648940423830468,1.2653338664534186,1.2657736905237904,1.2662135145941624,1.2666533386645342,1.267093162734906,1.2675329868052778,1.2679728108756498,1.2684126349460216,1.2688524590163934,1.2692922830867652,1.2697321071571372,1.270171931227509,1.2706117552978808,1.2710515793682526,1.2714914034386247,1.2719312275089965,1.2723710515793683,1.27281087564974,1.2732506997201118,1.2736905237904839,1.2741303478608557,1.2745701719312275,1.2750099960015993,1.2754498200719713,1.275889644142343,1.2763294682127149,1.2767692922830867,1.2772091163534587,1.2776489404238305,1.2780887644942023,1.278528588564574,1.278968412634946,1.279408236705318,1.2798480607756897,1.2802878848460615,1.2807277089164335,1.2811675329868053,1.281607357057177,1.282047181127549,1.282487005197921,1.2829268292682927,1.2833666533386645,1.2838064774090363,1.2842463014794083,1.2846861255497801,1.285125949620152,1.2855657736905237,1.2860055977608957,1.2864454218312675,1.2868852459016393,1.2873250699720111,1.2877648940423831,1.288204718112755,1.2886445421831267,1.2890843662534985,1.2895241903238706,1.2899640143942424,1.2904038384646142,1.290843662534986,1.291283486605358,1.2917233106757298,1.2921631347461016,1.2926029588164734,1.2930427828868452,1.2934826069572172,1.293922431027589,1.2943622550979608,1.2948020791683326,1.2952419032387046,1.2956817273090764,1.2961215513794482,1.29656137544982,1.297001199520192,1.2974410235905638,1.2978808476609356,1.2983206717313074,1.2987604958016794,1.2992003198720512,1.299640143942423,1.3000799680127948,1.3005197920831668,1.3009596161535386,1.3013994402239104,1.3018392642942822,1.3022790883646542,1.302718912435026,1.3031587365053978,1.3035985605757696,1.3040383846461416,1.3044782087165134,1.3049180327868852,1.305357856857257,1.305797680927629,1.3062375049980008,1.3066773290683726,1.3071171531387444,1.3075569772091165,1.3079968012794883,1.30843662534986,1.3088764494202318,1.3093162734906039,1.3097560975609757,1.3101959216313475,1.3106357457017193,1.311075569772091,1.311515393842463,1.3119552179128349,1.3123950419832067,1.3128348660535785,1.3132746901239505,1.3137145141943223,1.314154338264694,1.3145941623350659,1.315033986405438,1.3154738104758097,1.3159136345461815,1.3163534586165533,1.3167932826869253,1.317233106757297,1.317672930827669,1.3181127548980407,1.3185525789684127,1.3189924030387845,1.3194322271091563,1.319872051179528,1.3203118752499001,1.320751699320272,1.3211915233906437,1.3216313474610155,1.3220711715313875,1.3225109956017593,1.3229508196721311,1.323390643742503,1.323830467812875,1.3242702918832467,1.3247101159536185,1.3251499400239903,1.3255897640943624,1.3260295881647342,1.326469412235106,1.3269092363054777,1.3273490603758498,1.3277888844462216,1.3282287085165934,1.3286685325869652,1.3291083566573372,1.329548180727709,1.3299880047980808,1.3304278288684526,1.3308676529388244,1.3313074770091964,1.3317473010795682,1.33218712514994,1.3326269492203118,1.3330667732906838,1.3335065973610556,1.3339464214314274,1.3343862455017992,1.3348260695721712,1.335265893642543,1.3357057177129148,1.3361455417832866,1.3365853658536586,1.3370251899240304,1.3374650139944022,1.337904838064774,1.338344662135146,1.3387844862055178,1.3392243102758896,1.3396641343462614,1.3401039584166334,1.3405437824870052,1.340983606557377,1.3414234306277488,1.3418632546981208,1.3423030787684926,1.3427429028388644,1.3431827269092362,1.3436225509796083,1.34406237504998,1.3445021991203518,1.3449420231907236,1.3453818472610957,1.3458216713314675,1.3462614954018393,1.346701319472211,1.347141143542583,1.3475809676129549,1.3480207916833267,1.3484606157536985,1.3489004398240703,1.3493402638944423,1.349780087964814,1.3502199120351859,1.3506597361055577,1.3510995601759297,1.3515393842463015,1.3519792083166733,1.352419032387045,1.352858856457417,1.353298680527789,1.3537385045981607,1.3541783286685325,1.3546181527389045,1.3550579768092763,1.355497800879648,1.35593762495002,1.356377449020392,1.3568172730907637,1.3572570971611355,1.3576969212315073,1.3581367453018793,1.3585765693722511,1.359016393442623,1.3594562175129947,1.3598960415833667,1.3603358656537385,1.3607756897241103,1.3612155137944821,1.3616553378648542,1.362095161935226,1.3625349860055977,1.3629748100759695,1.3634146341463416,1.3638544582167134,1.3642942822870852,1.364734106357457,1.365173930427829,1.3656137544982008,1.3660535785685726,1.3664934026389444,1.3669332267093162,1.3673730507796882,1.36781287485006,1.3682526989204318,1.3686925229908036,1.3691323470611756,1.3695721711315474,1.3700119952019192,1.370451819272291,1.370891643342663,1.3713314674130348,1.3717712914834066,1.3722111155537784,1.3726509396241504,1.3730907636945222,1.373530587764894,1.3739704118352658,1.3744102359056378,1.3748500599760096,1.3752898840463814,1.3757297081167532,1.3761695321871252,1.376609356257497,1.3770491803278688,1.3774890043982406,1.3779288284686126,1.3783686525389844,1.3788084766093562,1.379248300679728,1.3796881247501,1.3801279488204719,1.3805677728908436,1.3810075969612154,1.3814474210315875,1.3818872451019593,1.382327069172331,1.3827668932427029,1.3832067173130749,1.3836465413834467,1.3840863654538185,1.3845261895241903,1.3849660135945623,1.385405837664934,1.3858456617353059,1.3862854858056777,1.3867253098760495,1.3871651339464215,1.3876049580167933,1.388044782087165,1.3884846061575369,1.388924430227909,1.3893642542982807,1.3898040783686525,1.3902439024390243,1.3906837265093963,1.391123550579768,1.39156337465014,1.3920031987205117,1.3924430227908837,1.3928828468612555,1.3933226709316273,1.3937624950019991,1.3942023190723711,1.394642143142743,1.3950819672131147,1.3955217912834865,1.3959616153538585,1.3964014394242303,1.3968412634946021,1.397281087564974,1.397720911635346,1.3981607357057177,1.3986005597760895,1.3990403838464613,1.3994802079168334,1.3999200319872052,1.400359856057577,1.4007996801279488,1.4012395041983208,1.4016793282686926,1.4021191523390644,1.4025589764094362,1.4029988004798082,1.40343862455018,1.4038784486205518,1.4043182726909236,1.4047580967612954,1.4051979208316674,1.4056377449020392,1.406077568972411,1.4065173930427828,1.4069572171131548,1.4073970411835266,1.4078368652538984,1.4082766893242702,1.4087165133946422,1.409156337465014,1.4095961615353858,1.4100359856057576,1.4104758096761296,1.4109156337465014,1.4113554578168732,1.411795281887245,1.412235105957617,1.4126749300279888,1.4131147540983606,1.4135545781687324,1.4139944022391044,1.4144342263094762,1.414874050379848,1.4153138744502198,1.4157536985205919,1.4161935225909636,1.4166333466613354,1.4170731707317072,1.4175129948020793,1.417952818872451,1.4183926429428229,1.4188324670131947,1.4192722910835667,1.4197121151539385,1.4201519392243103,1.420591763294682,1.421031587365054,1.4214714114354259,1.4219112355057977,1.4223510595761695,1.4227908836465415,1.4232307077169133,1.423670531787285,1.4241103558576569,1.4245501799280287,1.4249900039984007,1.4254298280687725,1.4258696521391443,1.426309476209516,1.426749300279888,1.42718912435026,1.4276289484206317,1.4280687724910035,1.4285085965613755,1.4289484206317473,1.4293882447021191,1.429828068772491,1.430267892842863,1.4307077169132347,1.4311475409836065,1.4315873650539783,1.4320271891243503,1.4324670131947221,1.432906837265094,1.4333466613354657,1.4337864854058378,1.4342263094762095,1.4346661335465813,1.4351059576169531,1.4355457816873252,1.435985605757697,1.4364254298280688,1.4368652538984406,1.4373050779688126,1.4377449020391844,1.4381847261095562,1.438624550179928,1.4390643742503,1.4395041983206718,1.4399440223910436,1.4403838464614154,1.4408236705317874,1.4412634946021592,1.441703318672531,1.4421431427429028,1.4425829668132746,1.4430227908836466,1.4434626149540184,1.4439024390243902,1.444342263094762,1.444782087165134,1.4452219112355058,1.4456617353058776,1.4461015593762494,1.4465413834466214,1.4469812075169932,1.447421031587365,1.4478608556577368,1.4483006797281088,1.4487405037984806,1.4491803278688524,1.4496201519392242,1.4500599760095962,1.450499800079968,1.4509396241503398,1.4513794482207116,1.4518192722910837,1.4522590963614554,1.4526989204318272,1.453138744502199,1.453578568572571,1.4540183926429429,1.4544582167133147,1.4548980407836865,1.4553378648540585,1.4557776889244303,1.456217512994802,1.4566573370651739,1.4570971611355459,1.4575369852059177,1.4579768092762895,1.4584166333466613,1.4588564574170333,1.459296281487405,1.4597361055577769,1.4601759296281487,1.4606157536985207,1.4610555777688925,1.4614954018392643,1.461935225909636,1.462375049980008,1.46281487405038,1.4632546981207517,1.4636945221911235,1.4641343462614953,1.4645741703318673,1.4650139944022391,1.465453818472611,1.4658936425429827,1.4663334666133547,1.4667732906837265,1.4672131147540983,1.4676529388244701,1.4680927628948421,1.468532586965214,1.4689724110355857,1.4694122351059575,1.4698520591763296,1.4702918832467013,1.4707317073170731,1.471171531387445,1.471611355457817,1.4720511795281888,1.4724910035985606,1.4729308276689324,1.4733706517393044,1.4738104758096762,1.474250299880048,1.4746901239504198,1.4751299480207918,1.4755697720911636,1.4760095961615354,1.4764494202319072,1.4768892443022792,1.477329068372651,1.4777688924430228,1.4782087165133946,1.4786485405837666,1.4790883646541384,1.4795281887245102,1.479968012794882,1.4804078368652538,1.4808476609356258,1.4812874850059976,1.4817273090763694,1.4821671331467412,1.4826069572171132,1.483046781287485,1.4834866053578568,1.4839264294282286,1.4843662534986006,1.4848060775689724,1.4852459016393442,1.485685725709716,1.486125549780088,1.4865653738504598,1.4870051979208316,1.4874450219912034,1.4878848460615755,1.4883246701319472,1.488764494202319,1.4892043182726908,1.4896441423430629,1.4900839664134347,1.4905237904838065,1.4909636145541783,1.4914034386245503,1.491843262694922,1.4922830867652939,1.4927229108356657,1.4931627349060377,1.4936025589764095,1.4940423830467813,1.494482207117153,1.494922031187525,1.4953618552578969,1.4958016793282687,1.4962415033986405,1.4966813274690125,1.4971211515393843,1.497560975609756,1.498000799680128,1.4984406237504997,1.4988804478208717,1.4993202718912435,1.4997600959616153,1.500199920031987,1.5006397441023591,1.501079568172731,1.5015193922431027,1.5019592163134745,1.5023990403838465,1.5028388644542183,1.5032786885245901,1.503718512594962,1.504158336665334,1.5045981607357057,1.5050379848060775,1.5054778088764493,1.5059176329468213,1.5063574570171931,1.506797281087565,1.5072371051579367,1.5076769292283088,1.5081167532986806,1.5085565773690524,1.5089964014394242,1.5094362255097962,1.509876049580168,1.5103158736505398,1.5107556977209116,1.5111955217912836,1.5116353458616554,1.5120751699320272,1.512514994002399,1.512954818072771,1.5133946421431428,1.5138344662135146,1.5142742902838864,1.5147141143542584,1.5151539384246302,1.515593762495002,1.5160335865653738,1.5164734106357458,1.5169132347061176,1.5173530587764894,1.5177928828468612,1.518232706917233,1.518672530987605,1.5191123550579768,1.5195521791283486,1.5199920031987204,1.5204318272690924,1.5208716513394642,1.521311475409836,1.5217512994802078,1.5221911235505798,1.5226309476209516,1.5230707716913234,1.5235105957616952,1.5239504198320672,1.524390243902439,1.5248300679728108,1.5252698920431826,1.5257097161135547,1.5261495401839265,1.5265893642542983,1.52702918832467,1.527469012395042,1.5279088364654139,1.5283486605357857,1.5287884846061575,1.5292283086765295,1.5296681327469013,1.530107956817273,1.5305477808876449,1.530987604958017,1.5314274290283887,1.5318672530987605,1.5323070771691323,1.5327469012395043,1.533186725309876,1.533626549380248,1.5340663734506197,1.5345061975209917,1.5349460215913635,1.5353858456617353,1.535825669732107,1.536265493802479,1.536705317872851,1.5371451419432227,1.5375849660135945,1.5380247900839663,1.5384646141543383,1.5389044382247101,1.539344262295082,1.5397840863654537,1.5402239104358257,1.5406637345061975,1.5411035585765693,1.5415433826469411,1.5419832067173131,1.542423030787685,1.5428628548580567,1.5433026789284285,1.5437425029988006,1.5441823270691724,1.5446221511395442,1.545061975209916,1.545501799280288,1.5459416233506598,1.5463814474210316,1.5468212714914034,1.5472610955617754,1.5477009196321472,1.548140743702519,1.5485805677728908,1.5490203918432628,1.5494602159136346,1.5499000399840064,1.5503398640543782,1.5507796881247502,1.551219512195122,1.5516593362654938,1.5520991603358656,1.5525389844062376,1.5529788084766094,1.5534186325469812,1.553858456617353,1.554298280687725,1.5547381047580968,1.5551779288284686,1.5556177528988404,1.5560575769692122,1.5564974010395842,1.556937225109956,1.5573770491803278,1.5578168732506996,1.5582566973210716,1.5586965213914434,1.5591363454618152,1.559576169532187,1.560015993602559,1.5604558176729308,1.5608956417433026,1.5613354658136744,1.5617752898840465,1.5622151139544183,1.56265493802479,1.5630947620951618,1.5635345861655339,1.5639744102359057,1.5644142343062775,1.5648540583766493,1.5652938824470213,1.565733706517393,1.5661735305877649,1.5666133546581367,1.5670531787285087,1.5674930027988805,1.5679328268692523,1.568372650939624,1.568812475009996,1.569252299080368,1.5696921231507397,1.5701319472211115,1.5705717712914835,1.5710115953618553,1.571451419432227,1.571891243502599,1.572331067572971,1.5727708916433427,1.5732107157137145,1.5736505397840863,1.574090363854458,1.5745301879248301,1.574970011995202,1.5754098360655737,1.5758496601359455,1.5762894842063175,1.5767293082766893,1.5771691323470611,1.577608956417433,1.578048780487805,1.5784886045581767,1.5789284286285485,1.5793682526989203,1.5798080767692924,1.5802479008396642,1.580687724910036,1.5811275489804077,1.5815673730507798,1.5820071971211516,1.5824470211915234,1.5828868452618952,1.5833266693322672,1.583766493402639,1.5842063174730108,1.5846461415433826,1.5850859656137546,1.5855257896841264,1.5859656137544982,1.58640543782487,1.586845261895242,1.5872850859656138,1.5877249100359856,1.5881647341063574,1.5886045581767294,1.5890443822471012,1.589484206317473,1.5899240303878448,1.5903638544582168,1.5908036785285886,1.5912435025989604,1.5916833266693322,1.5921231507397042,1.592562974810076,1.5930027988804478,1.5934426229508196,1.5938824470211914,1.5943222710915634,1.5947620951619352,1.595201919232307,1.5956417433026788,1.5960815673730508,1.5965213914434226,1.5969612155137944,1.5974010395841662,1.5978408636545383,1.59828068772491,1.5987205117952819,1.5991603358656536,1.5996001599360257,1.6000399840063975,1.6004798080767693,1.600919632147141,1.601359456217513,1.6017992802878849,1.6022391043582567,1.6026789284286285,1.6031187524990005,1.6035585765693723,1.603998400639744,1.6044382247101159,1.604878048780488,1.6053178728508597,1.6057576969212315,1.6061975209916033,1.6066373450619753,1.607077169132347,1.607516993202719,1.6079568172730907,1.6083966413434627,1.6088364654138345,1.6092762894842063,1.609716113554578,1.6101559376249501,1.610595761695322,1.6110355857656937,1.6114754098360655,1.6119152339064373,1.6123550579768093,1.6127948820471811,1.613234706117553,1.6136745301879247,1.6141143542582967,1.6145541783286685,1.6149940023990403,1.6154338264694121,1.6158736505397842,1.616313474610156,1.6167532986805278,1.6171931227508995,1.6176329468212716,1.6180727708916434,1.6185125949620152,1.618952419032387,1.619392243102759,1.6198320671731308,1.6202718912435026,1.6207117153138744,1.6211515393842464,1.6215913634546182,1.62203118752499,1.6224710115953618,1.6229108356657338,1.6233506597361056,1.6237904838064774,1.6242303078768492,1.6246701319472212,1.625109956017593,1.6255497800879648,1.6259896041583366,1.6264294282287086,1.6268692522990804,1.6273090763694522,1.627748900439824,1.628188724510196,1.6286285485805678,1.6290683726509396,1.6295081967213114,1.6299480207916832,1.6303878448620552,1.630827668932427,1.6312674930027988,1.6317073170731706,1.6321471411435426,1.6325869652139144,1.6330267892842862,1.633466613354658,1.63390643742503,1.6343462614954019,1.6347860855657737,1.6352259096361454,1.6356657337065175,1.6361055577768893,1.636545381847261,1.6369852059176329,1.6374250299880049,1.6378648540583767,1.6383046781287485,1.6387445021991203,1.6391843262694923,1.639624150339864,1.6400639744102359,1.6405037984806077,1.6409436225509797,1.6413834466213515,1.6418232706917233,1.642263094762095,1.642702918832467,1.643142742902839,1.6435825669732107,1.6440223910435825,1.6444622151139545,1.6449020391843263,1.6453418632546981,1.64578168732507,1.646221511395442,1.6466613354658137,1.6471011595361855,1.6475409836065573,1.6479808076769293,1.6484206317473011,1.648860455817673,1.6493002798880447,1.6497401039584165,1.6501799280287885,1.6506197520991603,1.6510595761695321,1.651499400239904,1.651939224310276,1.6523790483806478,1.6528188724510195,1.6532586965213913,1.6536985205917634,1.6541383446621352,1.654578168732507,1.6550179928028788,1.6554578168732508,1.6558976409436226,1.6563374650139944,1.6567772890843662,1.6572171131547382,1.65765693722511,1.6580967612954818,1.6585365853658536,1.6589764094362256,1.6594162335065974,1.6598560575769692,1.660295881647341,1.660735705717713,1.6611755297880848,1.6616153538584566,1.6620551779288284,1.6624950019992004,1.6629348260695722,1.663374650139944,1.6638144742103158,1.6642542982806878,1.6646941223510596,1.6651339464214314,1.6655737704918032,1.6660135945621752,1.666453418632547,1.6668932427029188,1.6673330667732906,1.6677728908436624,1.6682127149140344,1.6686525389844062,1.669092363054778,1.6695321871251498,1.6699720111955219,1.6704118352658937,1.6708516593362654,1.6712914834066372,1.6717313074770093,1.672171131547381,1.6726109556177529,1.6730507796881247,1.6734906037584967,1.6739304278288685,1.6743702518992403,1.674810075969612,1.675249900039984,1.6756897241103559,1.6761295481807277,1.6765693722510995,1.6770091963214715,1.6774490203918433,1.677888844462215,1.6783286685325869,1.678768492602959,1.6792083166733307,1.6796481407437025,1.6800879648140743,1.6805277888844463,1.6809676129548181,1.68140743702519,1.6818472610955617,1.6822870851659337,1.6827269092363055,1.6831667333066773,1.6836065573770491,1.6840463814474211,1.684486205517793,1.6849260295881647,1.6853658536585365,1.6858056777289085,1.6862455017992803,1.6866853258696521,1.687125149940024,1.6875649740103957,1.6880047980807678,1.6884446221511396,1.6888844462215113,1.6893242702918831,1.6897640943622552,1.690203918432627,1.6906437425029988,1.6910835665733706,1.6915233906437426,1.6919632147141144,1.6924030387844862,1.692842862854858,1.69328268692523,1.6937225109956018,1.6941623350659736,1.6946021591363454,1.6950419832067174,1.6954818072770892,1.695921631347461,1.6963614554178328,1.6968012794882048,1.6972411035585766,1.6976809276289484,1.6981207516993202,1.6985605757696922,1.699000399840064,1.6994402239104358,1.6998800479808076,1.7003198720511796,1.7007596961215514,1.7011995201919232,1.701639344262295,1.702079168332667,1.7025189924030388,1.7029588164734106,1.7033986405437824,1.7038384646141544,1.7042782886845262,1.704718112754898,1.7051579368252698,1.7055977608956416,1.7060375849660137,1.7064774090363855,1.7069172331067572,1.707357057177129,1.707796881247501,1.7082367053178729,1.7086765293882447,1.7091163534586165,1.7095561775289885,1.7099960015993603,1.710435825669732,1.7108756497401039,1.7113154738104759,1.7117552978808477,1.7121951219512195,1.7126349460215913,1.7130747700919633,1.713514594162335,1.7139544182327069,1.7143942423030787,1.7148340663734507,1.7152738904438225,1.7157137145141943,1.716153538584566,1.7165933626549381,1.71703318672531,1.7174730107956817,1.7179128348660535,1.7183526589364255,1.7187924830067973,1.7192323070771691,1.719672131147541,1.720111955217913,1.7205517792882847,1.7209916033586565,1.7214314274290283,1.7218712514994003,1.7223110755697721,1.722750899640144,1.7231907237105157,1.7236305477808875,1.7240703718512596,1.7245101959216314,1.7249500199920031,1.725389844062375,1.725829668132747,1.7262694922031188,1.7267093162734906,1.7271491403438624,1.7275889644142344,1.7280287884846062,1.728468612554978,1.7289084366253498,1.7293482606957218,1.7297880847660936,1.7302279088364654,1.7306677329068372,1.7311075569772092,1.731547381047581,1.7319872051179528,1.7324270291883246,1.7328668532586966,1.7333066773290684,1.7337465013994402,1.734186325469812,1.734626149540184,1.7350659736105558,1.7355057976809276,1.7359456217512994,1.7363854458216714,1.7368252698920432,1.737265093962415,1.7377049180327868,1.7381447421031588,1.7385845661735306,1.7390243902439024,1.7394642143142742,1.7399040383846462,1.740343862455018,1.7407836865253898,1.7412235105957616,1.7416633346661337,1.7421031587365055,1.7425429828068772,1.742982806877249,1.7434226309476208,1.7438624550179929,1.7443022790883647,1.7447421031587365,1.7451819272291083,1.7456217512994803,1.746061575369852,1.7465013994402239,1.7469412235105957,1.7473810475809677,1.7478208716513395,1.7482606957217113,1.748700519792083,1.749140343862455,1.749580167932827,1.7500199920031987,1.7504598160735705,1.7508996401439425,1.7513394642143143,1.751779288284686,1.752219112355058,1.75265893642543,1.7530987604958017,1.7535385845661735,1.7539784086365453,1.7544182327069173,1.7548580567772891,1.755297880847661,1.7557377049180327,1.7561775289884047,1.7566173530587765,1.7570571771291483,1.7574970011995201,1.7579368252698921,1.758376649340264,1.7588164734106357,1.7592562974810075,1.7596961215513796,1.7601359456217514,1.7605757696921231,1.761015593762495,1.7614554178328667,1.7618952419032388,1.7623350659736106,1.7627748900439824,1.7632147141143542,1.7636545381847262,1.764094362255098,1.7645341863254698,1.7649740103958416,1.7654138344662136,1.7658536585365854,1.7662934826069572,1.766733306677329,1.767173130747701,1.7676129548180728,1.7680527788884446,1.7684926029588164,1.7689324270291884,1.7693722510995602,1.769812075169932,1.7702518992403038,1.7706917233106758,1.7711315473810476,1.7715713714514194,1.7720111955217912,1.7724510195921632,1.772890843662535,1.7733306677329068,1.7737704918032786,1.7742103158736506,1.7746501399440224,1.7750899640143942,1.775529788084766,1.775969612155138,1.7764094362255098,1.7768492602958816,1.7772890843662534,1.7777289084366255,1.7781687325069973,1.778608556577369,1.7790483806477408,1.7794882047181129,1.7799280287884847,1.7803678528588565,1.7808076769292283,1.7812475009996,1.781687325069972,1.7821271491403439,1.7825669732107157,1.7830067972810875,1.7834466213514595,1.7838864454218313,1.784326269492203,1.7847660935625749,1.785205917632947,1.7856457417033187,1.7860855657736905,1.7865253898440623,1.7869652139144343,1.787405037984806,1.787844862055178,1.7882846861255497,1.7887245101959217,1.7891643342662935,1.7896041583366653,1.790043982407037,1.7904838064774091,1.790923630547781,1.7913634546181527,1.7918032786885245,1.7922431027588965,1.7926829268292683,1.7931227508996401,1.793562574970012,1.794002399040384,1.7944422231107557,1.7948820471811275,1.7953218712514993,1.7957616953218714,1.7962015193922432,1.796641343462615,1.7970811675329867,1.7975209916033588,1.7979608156737306,1.7984006397441024,1.7988404638144742,1.799280287884846,1.799720111955218,1.8001599360255898,1.8005997600959616,1.8010395841663334,1.8014794082367054,1.8019192323070772,1.802359056377449,1.8027988804478208,1.8032387045181928,1.8036785285885646,1.8041183526589364,1.8045581767293082,1.8049980007996802,1.805437824870052,1.8058776489404238,1.8063174730107956,1.8067572970811676,1.8071971211515394,1.8076369452219112,1.808076769292283,1.808516593362655,1.8089564174330268,1.8093962415033986,1.8098360655737704,1.8102758896441424,1.8107157137145142,1.811155537784886,1.8115953618552578,1.8120351859256298,1.8124750099960016,1.8129148340663734,1.8133546581367452,1.8137944822071173,1.814234306277489,1.8146741303478608,1.8151139544182326,1.8155537784886047,1.8159936025589765,1.8164334266293483,1.81687325069972,1.817313074770092,1.8177528988404639,1.8181927229108357,1.8186325469812075,1.8190723710515793,1.8195121951219513,1.819952019192323,1.8203918432626949,1.8208316673330667,1.8212714914034387,1.8217113154738105,1.8221511395441823,1.822590963614554,1.823030787684926,1.823470611755298,1.8239104358256697,1.8243502598960415,1.8247900839664135,1.8252299080367853,1.825669732107157,1.826109556177529,1.826549380247901,1.8269892043182727,1.8274290283886445,1.8278688524590163,1.8283086765293883,1.8287485005997601,1.829188324670132,1.8296281487405037,1.8300679728108757,1.8305077968812475,1.8309476209516193,1.8313874450219911,1.8318272690923632,1.832267093162735,1.8327069172331067,1.8331467413034785,1.8335865653738506,1.8340263894442224,1.8344662135145942,1.834906037584966,1.835345861655338,1.8357856857257098,1.8362255097960816,1.8366653338664534,1.8371051579368252,1.8375449820071972,1.837984806077569,1.8384246301479408,1.8388644542183126,1.8393042782886846,1.8397441023590564,1.8401839264294282,1.8406237504998,1.841063574570172,1.8415033986405438,1.8419432227109156,1.8423830467812874,1.8428228708516594,1.8432626949220312,1.843702518992403,1.8441423430627748,1.8445821671331468,1.8450219912035186,1.8454618152738904,1.8459016393442622,1.8463414634146342,1.846781287485006,1.8472211115553778,1.8476609356257496,1.8481007596961216,1.8485405837664934,1.8489804078368652,1.849420231907237,1.849860055977609,1.8502998800479808,1.8507397041183526,1.8511795281887244,1.8516193522590965,1.8520591763294683,1.85249900039984,1.8529388244702119,1.8533786485405839,1.8538184726109557,1.8542582966813275,1.8546981207516993,1.855137944822071,1.855577768892443,1.8560175929628149,1.8564574170331867,1.8568972411035585,1.8573370651739305,1.8577768892443023,1.858216713314674,1.8586565373850459,1.859096361455418,1.8595361855257897,1.8599760095961615,1.8604158336665333,1.8608556577369053,1.861295481807277,1.861735305877649,1.8621751299480207,1.8626149540183927,1.8630547780887645,1.8634946021591363,1.8639344262295081,1.8643742502998801,1.864814074370252,1.8652538984406237,1.8656937225109955,1.8661335465813675,1.8665733706517393,1.8670131947221111,1.867453018792483,1.867892842862855,1.8683326669332267,1.8687724910035985,1.8692123150739703,1.8696521391443424,1.8700919632147142,1.870531787285086,1.8709716113554578,1.8714114354258298,1.8718512594962016,1.8722910835665734,1.8727309076369452,1.8731707317073172,1.873610555777689,1.8740503798480608,1.8744902039184326,1.8749300279888044,1.8753698520591764,1.8758096761295482,1.87624950019992,1.8766893242702918,1.8771291483406638,1.8775689724110356,1.8780087964814074,1.8784486205517792,1.8788884446221512,1.879328268692523,1.8797680927628948,1.8802079168332666,1.8806477409036386,1.8810875649740104,1.8815273890443822,1.881967213114754,1.882407037185126,1.8828468612554978,1.8832866853258696,1.8837265093962414,1.8841663334666134,1.8846061575369852,1.885045981607357,1.8854858056777288,1.8859256297481009,1.8863654538184726,1.8868052778888444,1.8872451019592162,1.8876849260295883,1.88812475009996,1.8885645741703319,1.8890043982407037,1.8894442223110757,1.8898840463814475,1.8903238704518193,1.890763694522191,1.891203518592563,1.8916433426629349,1.8920831667333067,1.8925229908036785,1.8929628148740503,1.8934026389444223,1.893842463014794,1.8942822870851659,1.8947221111555377,1.8951619352259097,1.8956017592962815,1.8960415833666533,1.896481407437025,1.896921231507397,1.897361055577769,1.8978008796481407,1.8982407037185125,1.8986805277888845,1.8991203518592563,1.8995601759296281,1.9,1.900439824070372,1.9008796481407437,1.9013194722111155,1.9017592962814873,1.9021991203518593,1.9026389444222311,1.903078768492603,1.9035185925629747,1.9039584166333468,1.9043982407037185,1.9048380647740903,1.9052778888444621,1.9057177129148342,1.906157536985206,1.9065973610555778,1.9070371851259496,1.9074770091963216,1.9079168332666934,1.9083566573370652,1.908796481407437,1.909236305477809,1.9096761295481808,1.9101159536185526,1.9105557776889244,1.9109956017592964,1.9114354258296682,1.91187524990004,1.9123150739704118,1.9127548980407836,1.9131947221111556,1.9136345461815274,1.9140743702518992,1.914514194322271,1.914954018392643,1.9153938424630148,1.9158336665333866,1.9162734906037584,1.9167133146741304,1.9171531387445022,1.917592962814874,1.9180327868852458,1.9184726109556178,1.9189124350259896,1.9193522590963614,1.9197920831667332,1.9202319072371052,1.920671731307477,1.9211115553778488,1.9215513794482206,1.9219912035185927,1.9224310275889644,1.9228708516593362,1.923310675729708,1.92375049980008,1.9241903238704519,1.9246301479408237,1.9250699720111955,1.9255097960815675,1.9259496201519393,1.926389444222311,1.9268292682926829,1.9272690923630549,1.9277089164334267,1.9281487405037985,1.9285885645741703,1.9290283886445423,1.929468212714914,1.9299080367852859,1.9303478608556577,1.9307876849260295,1.9312275089964015,1.9316673330667733,1.932107157137145,1.932546981207517,1.932986805277889,1.9334266293482607,1.9338664534186325,1.9343062774890043,1.9347461015593763,1.9351859256297481,1.93562574970012,1.9360655737704917,1.9365053978408637,1.9369452219112355,1.9373850459816073,1.9378248700519791,1.9382646941223511,1.938704518192723,1.9391443422630947,1.9395841663334665,1.9400239904038385,1.9404638144742103,1.9409036385445821,1.941343462614954,1.941783286685326,1.9422231107556978,1.9426629348260696,1.9431027588964414,1.9435425829668134,1.9439824070371852,1.944422231107557,1.9448620551779288,1.9453018792483008,1.9457417033186726,1.9461815273890444,1.9466213514594162,1.9470611755297882,1.94750099960016,1.9479408236705318,1.9483806477409036,1.9488204718112754,1.9492602958816474,1.9497001199520192,1.950139944022391,1.9505797680927628,1.9510195921631348,1.9514594162335066,1.9518992403038784,1.9523390643742502,1.9527788884446222,1.953218712514994,1.9536585365853658,1.9540983606557376,1.9545381847261096,1.9549780087964814,1.9554178328668532,1.955857656937225,1.956297481007597,1.9567373050779688,1.9571771291483406,1.9576169532187124,1.9580567772890844,1.9584966013594562,1.958936425429828,1.9593762495001998,1.9598160735705719,1.9602558976409437,1.9606957217113155,1.9611355457816873,1.9615753698520593,1.962015193922431,1.9624550179928029,1.9628948420631747,1.9633346661335467,1.9637744902039185,1.9642143142742903,1.964654138344662,1.965093962415034,1.9655337864854059,1.9659736105557777,1.9664134346261495,1.9668532586965215,1.9672930827668933,1.967732906837265,1.968172730907637,1.9686125549780087,1.9690523790483807,1.9694922031187525,1.9699320271891243,1.970371851259496,1.9708116753298681,1.97125149940024,1.9716913234706117,1.9721311475409835,1.9725709716113555,1.9730107956817273,1.9734506197520991,1.973890443822471,1.974330267892843,1.9747700919632147,1.9752099160335865,1.9756497401039583,1.9760895641743303,1.9765293882447021,1.976969212315074,1.9774090363854457,1.9778488604558178,1.9782886845261896,1.9787285085965614,1.9791683326669331,1.9796081567373052,1.980047980807677,1.9804878048780488,1.9809276289484206,1.9813674530187926,1.9818072770891644,1.9822471011595362,1.982686925229908,1.98312674930028,1.9835665733706518,1.9840063974410236,1.9844462215113954,1.9848860455817674,1.9853258696521392,1.985765693722511,1.9862055177928828,1.9866453418632546,1.9870851659336266,1.9875249900039984,1.9879648140743702,1.988404638144742,1.988844462215114,1.9892842862854858,1.9897241103558576,1.9901639344262294,1.9906037584966014,1.9910435825669732,1.991483406637345,1.9919232307077168,1.9923630547780888,1.9928028788484606,1.9932427029188324,1.9936825269892042,1.9941223510595762,1.994562175129948,1.9950019992003198,1.9954418232706916,1.9958816473410637,1.9963214714114355,1.9967612954818073,1.997201119552179,1.997640943622551,1.9980807676929229,1.9985205917632947,1.9989604158336665,1.9994002399040385,1.9998400639744103,2.000279888044782,2.000719712115154,2.0011595361855257,2.0015993602558977,2.0020391843262697,2.0024790083966413,2.0029188324670133,2.003358656537385,2.003798480607757,2.004238304678129,2.0046781287485005,2.0051179528188725,2.005557776889244,2.005997600959616,2.006437425029988,2.0068772491003597,2.0073170731707317,2.0077568972411037,2.0081967213114753,2.0086365453818473,2.009076369452219,2.009516193522591,2.009956017592963,2.0103958416633345,2.0108356657337065,2.0112754898040786,2.01171531387445,2.012155137944822,2.0125949620151937,2.0130347860855657,2.0134746101559378,2.0139144342263093,2.0143542582966814,2.0147940823670534,2.015233906437425,2.015673730507797,2.0161135545781685,2.0165533786485406,2.0169932027189126,2.017433026789284,2.017872850859656,2.018312674930028,2.0187524990003998,2.019192323070772,2.0196321471411434,2.0200719712115154,2.0205117952818874,2.020951619352259,2.021391443422631,2.021831267493003,2.0222710915633746,2.0227109156337466,2.023150739704118,2.02359056377449,2.0240303878448622,2.024470211915234,2.024910035985606,2.0253498600559774,2.0257896841263494,2.0262295081967214,2.026669332267093,2.027109156337465,2.027548980407837,2.0279888044782086,2.0284286285485806,2.028868452618952,2.0293082766893242,2.0297481007596962,2.030187924830068,2.03062774890044,2.031067572970812,2.0315073970411834,2.0319472211115555,2.032387045181927,2.032826869252299,2.033266693322671,2.0337065173930426,2.0341463414634147,2.0345861655337867,2.0350259896041583,2.0354658136745303,2.035905637744902,2.036345461815274,2.036785285885646,2.0372251099560175,2.0376649340263895,2.0381047580967615,2.038544582167133,2.038984406237505,2.0394242303078767,2.0398640543782487,2.0403038784486207,2.0407437025189923,2.0411835265893643,2.0416233506597363,2.042063174730108,2.04250299880048,2.0429428228708515,2.0433826469412235,2.0438224710115955,2.044262295081967,2.044702119152339,2.0451419432227107,2.0455817672930827,2.0460215913634547,2.0464614154338263,2.0469012395041983,2.0473410635745704,2.047780887644942,2.048220711715314,2.0486605357856855,2.0491003598560575,2.0495401839264296,2.049980007996801,2.050419832067173,2.050859656137545,2.0512994802079167,2.0517393042782888,2.0521791283486603,2.0526189524190324,2.0530587764894044,2.053498600559776,2.053938424630148,2.05437824870052,2.0548180727708916,2.0552578968412636,2.055697720911635,2.056137544982007,2.056577369052379,2.0570171931227508,2.057457017193123,2.057896841263495,2.0583366653338664,2.0587764894042384,2.05921631347461,2.059656137544982,2.060095961615354,2.0605357856857256,2.0609756097560976,2.0614154338264696,2.061855257896841,2.0622950819672132,2.062734906037585,2.063174730107957,2.063614554178329,2.0640543782487004,2.0644942023190724,2.064934026389444,2.065373850459816,2.065813674530188,2.0662534986005596,2.0666933226709316,2.0671331467413037,2.0675729708116752,2.0680127948820473,2.068452618952419,2.068892443022791,2.069332267093163,2.0697720911635344,2.0702119152339065,2.0706517393042785,2.07109156337465,2.071531387445022,2.0719712115153937,2.0724110355857657,2.0728508596561377,2.0732906837265093,2.0737305077968813,2.0741703318672533,2.074610155937625,2.075049980007997,2.0754898040783685,2.0759296281487405,2.0763694522191125,2.076809276289484,2.077249100359856,2.077688924430228,2.0781287485005997,2.0785685725709717,2.0790083966413433,2.0794482207117153,2.0798880447820873,2.080327868852459,2.080767692922831,2.0812075169932025,2.0816473410635745,2.0820871651339465,2.082526989204318,2.08296681327469,2.083406637345062,2.0838464614154337,2.0842862854858057,2.0847261095561773,2.0851659336265493,2.0856057576969214,2.086045581767293,2.086485405837665,2.086925229908037,2.0873650539784085,2.0878048780487806,2.088244702119152,2.088684526189524,2.089124350259896,2.0895641743302678,2.0900039984006398,2.090443822471012,2.0908836465413834,2.0913234706117554,2.091763294682127,2.092203118752499,2.092642942822871,2.0930827668932426,2.0935225909636146,2.0939624150339866,2.094402239104358,2.09484206317473,2.095281887245102,2.095721711315474,2.096161535385846,2.0966013594562174,2.0970411835265894,2.0974810075969614,2.097920831667333,2.098360655737705,2.0988004798080766,2.0992403038784486,2.0996801279488206,2.100119952019192,2.1005597760895642,2.100999600159936,2.101439424230308,2.10187924830068,2.1023190723710514,2.1027588964414234,2.1031987205117955,2.103638544582167,2.104078368652539,2.1045181927229106,2.1049580167932826,2.1053978408636547,2.1058376649340262,2.1062774890043983,2.1067173130747703,2.107157137145142,2.107596961215514,2.1080367852858855,2.1084766093562575,2.1089164334266295,2.109356257497001,2.109796081567373,2.110235905637745,2.1106757297081167,2.1111155537784887,2.1115553778488603,2.1119952019192323,2.1124350259896043,2.112874850059976,2.113314674130348,2.11375449820072,2.1141943222710915,2.1146341463414635,2.115073970411835,2.115513794482207,2.115953618552579,2.1163934426229507,2.1168332666933227,2.1172730907636947,2.1177129148340663,2.1181527389044383,2.11859256297481,2.119032387045182,2.119472211115554,2.1199120351859255,2.1203518592562975,2.120791683326669,2.121231507397041,2.121671331467413,2.1221111555377847,2.1225509796081568,2.1229908036785288,2.1234306277489003,2.1238704518192724,2.124310275889644,2.124750099960016,2.125189924030388,2.1256297481007596,2.1260695721711316,2.1265093962415036,2.126949220311875,2.127389044382247,2.1278288684526188,2.128268692522991,2.128708516593363,2.1291483406637344,2.1295881647341064,2.1300279888044784,2.13046781287485,2.130907636945222,2.1313474610155936,2.1317872850859656,2.1322271091563376,2.132666933226709,2.133106757297081,2.1335465813674532,2.133986405437825,2.134426229508197,2.1348660535785684,2.1353058776489404,2.1357457017193124,2.136185525789684,2.136625349860056,2.1370651739304276,2.1375049980007996,2.1379448220711716,2.138384646141543,2.1388244702119152,2.1392642942822873,2.139704118352659,2.140143942423031,2.1405837664934024,2.1410235905637744,2.1414634146341465,2.141903238704518,2.14234306277489,2.142782886845262,2.1432227109156337,2.1436625349860057,2.1441023590563772,2.1445421831267493,2.1449820071971213,2.145421831267493,2.145861655337865,2.146301479408237,2.1467413034786085,2.1471811275489805,2.147620951619352,2.148060775689724,2.148500599760096,2.1489404238304677,2.1493802479008397,2.1498200719712117,2.1502598960415833,2.1506997201119553,2.151139544182327,2.151579368252699,2.152019192323071,2.1524590163934425,2.1528988404638145,2.1533386645341865,2.153778488604558,2.15421831267493,2.1546581367453017,2.1550979608156737,2.1555377848860457,2.1559776089564173,2.1564174330267893,2.156857257097161,2.157297081167533,2.157736905237905,2.1581767293082765,2.1586165533786486,2.1590563774490206,2.159496201519392,2.159936025589764,2.1603758496601357,2.1608156737305078,2.1612554978008798,2.1616953218712514,2.1621351459416234,2.1625749700119954,2.163014794082367,2.163454618152739,2.1638944422231106,2.1643342662934826,2.1647740903638546,2.165213914434226,2.165653738504598,2.16609356257497,2.166533386645342,2.166973210715714,2.1674130347860854,2.1678528588564574,2.1682926829268294,2.168732506997201,2.169172331067573,2.169612155137945,2.1700519792083166,2.1704918032786886,2.17093162734906,2.171371451419432,2.1718112754898042,2.172251099560176,2.172690923630548,2.17313074770092,2.1735705717712914,2.1740103958416634,2.174450219912035,2.174890043982407,2.175329868052779,2.1757696921231506,2.1762095161935227,2.1766493402638942,2.1770891643342662,2.1775289884046383,2.17796881247501,2.178408636545382,2.178848460615754,2.1792882846861255,2.1797281087564975,2.180167932826869,2.180607756897241,2.181047580967613,2.1814874050379847,2.1819272291083567,2.1823670531787287,2.1828068772491003,2.1832467013194723,2.183686525389844,2.184126349460216,2.184566173530588,2.1850059976009595,2.1854458216713315,2.1858856457417035,2.186325469812075,2.186765293882447,2.1872051179528187,2.1876449420231907,2.1880847660935627,2.1885245901639343,2.1889644142343063,2.1894042383046783,2.18984406237505,2.190283886445422,2.1907237105157935,2.1911635345861655,2.1916033586565375,2.192043182726909,2.192483006797281,2.1929228308676527,2.1933626549380247,2.1938024790083968,2.1942423030787683,2.1946821271491403,2.1951219512195124,2.195561775289884,2.196001599360256,2.1964414234306275,2.1968812475009996,2.1973210715713716,2.197760895641743,2.198200719712115,2.198640543782487,2.1990803678528588,2.199520191923231,2.1999600159936024,2.2003998400639744,2.2008396641343464,2.201279488204718,2.20171931227509,2.202159136345462,2.2025989604158336,2.2030387844862056,2.203478608556577,2.203918432626949,2.204358256697321,2.204798080767693,2.205237904838065,2.205677728908437,2.2061175529788084,2.2065573770491804,2.206997201119552,2.207437025189924,2.207876849260296,2.2083166733306676,2.2087564974010396,2.2091963214714117,2.2096361455417832,2.2100759696121552,2.210515793682527,2.210955617752899,2.211395441823271,2.2118352658936424,2.2122750899640145,2.212714914034386,2.213154738104758,2.21359456217513,2.2140343862455016,2.2144742103158737,2.2149140343862457,2.2153538584566173,2.2157936825269893,2.216233506597361,2.216673330667733,2.217113154738105,2.2175529788084765,2.2179928028788485,2.2184326269492205,2.218872451019592,2.219312275089964,2.2197520991603357,2.2201919232307077,2.2206317473010797,2.2210715713714513,2.2215113954418233,2.2219512195121953,2.222391043582567,2.222830867652939,2.2232706917233105,2.2237105157936825,2.2241503398640545,2.224590163934426,2.225029988004798,2.22546981207517,2.2259096361455417,2.2263494602159137,2.2267892842862853,2.2272291083566573,2.2276689324270293,2.228108756497401,2.228548580567773,2.228988404638145,2.2294282287085165,2.2298680527788886,2.23030787684926,2.230747700919632,2.231187524990004,2.2316273490603757,2.2320671731307478,2.2325069972011193,2.2329468212714914,2.2333866453418634,2.233826469412235,2.234266293482607,2.234706117552979,2.2351459416233506,2.2355857656937226,2.236025589764094,2.236465413834466,2.236905237904838,2.2373450619752098,2.237784886045582,2.238224710115954,2.2386645341863254,2.2391043582566974,2.239544182327069,2.239984006397441,2.240423830467813,2.2408636545381846,2.2413034786085566,2.2417433026789286,2.2421831267493,2.2426229508196722,2.243062774890044,2.243502598960416,2.243942423030788,2.2443822471011594,2.2448220711715314,2.2452618952419034,2.245701719312275,2.246141543382647,2.2465813674530186,2.2470211915233906,2.2474610155937627,2.2479008396641342,2.2483406637345063,2.2487804878048783,2.24922031187525,2.249660135945622,2.2500999600159934,2.2505397840863655,2.2509796081567375,2.251419432227109,2.251859256297481,2.2522990803678526,2.2527389044382247,2.2531787285085967,2.2536185525789683,2.2540583766493403,2.2544982007197123,2.254938024790084,2.255377848860456,2.2558176729308275,2.2562574970011995,2.2566973210715715,2.257137145141943,2.257576969212315,2.258016793282687,2.2584566173530587,2.2588964414234307,2.2593362654938023,2.2597760895641743,2.2602159136345463,2.260655737704918,2.26109556177529,2.261535385845662,2.2619752099160335,2.2624150339864055,2.262854858056777,2.263294682127149,2.263734506197521,2.2641743302678927,2.2646141543382647,2.2650539784086368,2.2654938024790083,2.2659336265493804,2.266373450619752,2.266813274690124,2.267253098760496,2.2676929228308675,2.2681327469012396,2.268572570971611,2.269012395041983,2.269452219112355,2.2698920431827267,2.2703318672530988,2.270771691323471,2.2712115153938424,2.2716513394642144,2.272091163534586,2.272530987604958,2.27297081167533,2.2734106357457016,2.2738504598160736,2.2742902838864456,2.274730107956817,2.275169932027189,2.2756097560975608,2.276049580167933,2.276489404238305,2.2769292283086764,2.2773690523790484,2.2778088764494204,2.278248700519792,2.278688524590164,2.2791283486605356,2.2795681727309076,2.2800079968012796,2.280447820871651,2.2808876449420232,2.2813274690123952,2.281767293082767,2.282207117153139,2.2826469412235104,2.2830867652938824,2.2835265893642545,2.283966413434626,2.284406237504998,2.28484606157537,2.2852858856457416,2.2857257097161137,2.2861655337864852,2.2866053578568573,2.2870451819272293,2.287485005997601,2.287924830067973,2.2883646541383444,2.2888044782087165,2.2892443022790885,2.28968412634946,2.290123950419832,2.290563774490204,2.2910035985605757,2.2914434226309477,2.2918832467013193,2.2923230707716913,2.2927628948420633,2.293202718912435,2.293642542982807,2.294082367053179,2.2945221911235505,2.2949620151939225,2.295401839264294,2.295841663334666,2.296281487405038,2.2967213114754097,2.2971611355457817,2.2976009596161537,2.2980407836865253,2.2984806077568973,2.298920431827269,2.299360255897641,2.299800079968013,2.3002399040383845,2.3006797281087565,2.3011195521791286,2.3015593762495,2.301999200319872,2.3024390243902437,2.3028788484606157,2.3033186725309878,2.3037584966013593,2.3041983206717314,2.3046381447421034,2.305077968812475,2.305517792882847,2.3059576169532185,2.3063974410235906,2.3068372650939626,2.307277089164334,2.307716913234706,2.3081567373050778,2.3085965613754498,2.309036385445822,2.3094762095161934,2.3099160335865654,2.3103558576569374,2.310795681727309,2.311235505797681,2.3116753298680526,2.3121151539384246,2.3125549780087966,2.312994802079168,2.31343462614954,2.3138744502199122,2.314314274290284,2.314754098360656,2.3151939224310274,2.3156337465013994,2.3160735705717714,2.316513394642143,2.316953218712515,2.317393042782887,2.3178328668532586,2.3182726909236306,2.318712514994002,2.3191523390643742,2.3195921631347463,2.320031987205118,2.32047181127549,2.320911635345862,2.3213514594162334,2.3217912834866055,2.322231107556977,2.322670931627349,2.323110755697721,2.3235505797680926,2.3239904038384647,2.3244302279088362,2.3248700519792083,2.3253098760495803,2.325749700119952,2.326189524190324,2.326629348260696,2.3270691723310675,2.3275089964014395,2.327948820471811,2.328388644542183,2.328828468612555,2.3292682926829267,2.3297081167532987,2.3301479408236707,2.3305877648940423,2.3310275889644143,2.331467413034786,2.331907237105158,2.33234706117553,2.3327868852459015,2.3332267093162735,2.3336665333866455,2.334106357457017,2.334546181527389,2.3349860055977607,2.3354258296681327,2.3358656537385047,2.3363054778088763,2.3367453018792483,2.3371851259496204,2.337624950019992,2.338064774090364,2.3385045981607355,2.3389444222311075,2.3393842463014796,2.339824070371851,2.340263894442223,2.340703718512595,2.3411435425829668,2.3415833666533388,2.3420231907237103,2.3424630147940824,2.3429028388644544,2.343342662934826,2.343782487005198,2.3442223110755696,2.3446621351459416,2.3451019592163136,2.345541783286685,2.345981607357057,2.346421431427429,2.346861255497801,2.347301079568173,2.3477409036385444,2.3481807277089164,2.3486205517792884,2.34906037584966,2.349500199920032,2.349940023990404,2.3503798480607756,2.3508196721311476,2.351259496201519,2.351699320271891,2.3521391443422632,2.352578968412635,2.353018792483007,2.353458616553379,2.3538984406237504,2.3543382646941224,2.354778088764494,2.355217912834866,2.355657736905238,2.3560975609756096,2.3565373850459816,2.3569772091163537,2.3574170331867252,2.3578568572570973,2.358296681327469,2.358736505397841,2.359176329468213,2.3596161535385844,2.3600559776089565,2.3604958016793285,2.3609356257497,2.361375449820072,2.3618152738904437,2.3622550979608157,2.3626949220311877,2.3631347461015593,2.3635745701719313,2.364014394242303,2.364454218312675,2.364894042383047,2.3653338664534185,2.3657736905237905,2.3662135145941625,2.366653338664534,2.367093162734906,2.3675329868052777,2.3679728108756497,2.3684126349460217,2.3688524590163933,2.3692922830867653,2.3697321071571373,2.370171931227509,2.370611755297881,2.3710515793682525,2.3714914034386245,2.3719312275089965,2.372371051579368,2.37281087564974,2.373250699720112,2.3736905237904837,2.3741303478608557,2.3745701719312273,2.3750099960015993,2.3754498200719714,2.375889644142343,2.376329468212715,2.376769292283087,2.3772091163534586,2.3776489404238306,2.378088764494202,2.378528588564574,2.378968412634946,2.3794082367053178,2.3798480607756898,2.380287884846062,2.3807277089164334,2.3811675329868054,2.381607357057177,2.382047181127549,2.382487005197921,2.3829268292682926,2.3833666533386646,2.383806477409036,2.384246301479408,2.38468612554978,2.385125949620152,2.385565773690524,2.386005597760896,2.3864454218312674,2.3868852459016394,2.387325069972011,2.387764894042383,2.388204718112755,2.3886445421831266,2.3890843662534986,2.3895241903238706,2.389964014394242,2.3904038384646142,2.390843662534986,2.391283486605358,2.39172331067573,2.3921631347461014,2.3926029588164734,2.3930427828868455,2.393482606957217,2.393922431027589,2.3943622550979606,2.3948020791683327,2.3952419032387047,2.3956817273090762,2.3961215513794483,2.3965613754498203,2.397001199520192,2.397441023590564,2.3978808476609355,2.3983206717313075,2.3987604958016795,2.399200319872051,2.399640143942423,2.4000799680127947,2.4005197920831667,2.4009596161535387,2.4013994402239103,2.4018392642942823,2.4022790883646543,2.402718912435026,2.403158736505398,2.4035985605757695,2.4040383846461415,2.4044782087165135,2.404918032786885,2.405357856857257,2.405797680927629,2.4062375049980007,2.4066773290683727,2.4071171531387443,2.4075569772091163,2.4079968012794883,2.40843662534986,2.408876449420232,2.409316273490604,2.4097560975609755,2.4101959216313475,2.410635745701719,2.411075569772091,2.411515393842463,2.4119552179128347,2.4123950419832068,2.4128348660535788,2.4132746901239504,2.4137145141943224,2.414154338264694,2.414594162335066,2.415033986405438,2.4154738104758096,2.4159136345461816,2.4163534586165536,2.416793282686925,2.417233106757297,2.4176729308276688,2.418112754898041,2.418552578968413,2.4189924030387844,2.4194322271091564,2.419872051179528,2.4203118752499,2.420751699320272,2.4211915233906436,2.4216313474610156,2.4220711715313876,2.422510995601759,2.422950819672131,2.423390643742503,2.423830467812875,2.424270291883247,2.4247101159536184,2.4251499400239904,2.4255897640943624,2.426029588164734,2.426469412235106,2.4269092363054776,2.4273490603758496,2.4277888844462217,2.4282287085165932,2.4286685325869652,2.4291083566573373,2.429548180727709,2.429988004798081,2.4304278288684524,2.4308676529388245,2.4313074770091965,2.431747301079568,2.43218712514994,2.432626949220312,2.4330667732906837,2.4335065973610557,2.4339464214314273,2.4343862455017993,2.4348260695721713,2.435265893642543,2.435705717712915,2.436145541783287,2.4365853658536585,2.4370251899240305,2.437465013994402,2.437904838064774,2.438344662135146,2.4387844862055177,2.4392243102758897,2.4396641343462613,2.4401039584166333,2.4405437824870053,2.440983606557377,2.441423430627749,2.441863254698121,2.4423030787684925,2.4427429028388645,2.443182726909236,2.443622550979608,2.44406237504998,2.4445021991203517,2.4449420231907237,2.4453818472610958,2.4458216713314673,2.4462614954018393,2.446701319472211,2.447141143542583,2.447580967612955,2.4480207916833265,2.4484606157536986,2.4489004398240706,2.449340263894442,2.449780087964814,2.4502199120351857,2.4506597361055578,2.45109956017593,2.4515393842463014,2.4519792083166734,2.4524190323870454,2.452858856457417,2.453298680527789,2.4537385045981606,2.4541783286685326,2.4546181527389046,2.455057976809276,2.455497800879648,2.4559376249500198,2.456377449020392,2.456817273090764,2.4572570971611354,2.4576969212315074,2.4581367453018794,2.458576569372251,2.459016393442623,2.4594562175129946,2.4598960415833666,2.4603358656537386,2.46077568972411,2.4612155137944822,2.4616553378648542,2.462095161935226,2.462534986005598,2.4629748100759694,2.4634146341463414,2.4638544582167135,2.464294282287085,2.464734106357457,2.465173930427829,2.4656137544982006,2.4660535785685727,2.4664934026389442,2.4669332267093163,2.4673730507796883,2.46781287485006,2.468252698920432,2.468692522990804,2.4691323470611755,2.4695721711315475,2.470011995201919,2.470451819272291,2.470891643342663,2.4713314674130347,2.4717712914834067,2.4722111155537787,2.4726509396241503,2.4730907636945223,2.473530587764894,2.473970411835266,2.474410235905638,2.4748500599760095,2.4752898840463815,2.475729708116753,2.476169532187125,2.476609356257497,2.4770491803278687,2.4774890043982407,2.4779288284686127,2.4783686525389843,2.4788084766093563,2.479248300679728,2.4796881247501,2.480127948820472,2.4805677728908435,2.4810075969612155,2.4814474210315876,2.481887245101959,2.482327069172331,2.4827668932427027,2.4832067173130747,2.4836465413834468,2.4840863654538183,2.4845261895241904,2.4849660135945624,2.485405837664934,2.485845661735306,2.4862854858056775,2.4867253098760496,2.4871651339464216,2.487604958016793,2.488044782087165,2.488484606157537,2.4889244302279088,2.489364254298281,2.4898040783686524,2.4902439024390244,2.4906837265093964,2.491123550579768,2.49156337465014,2.492003198720512,2.4924430227908836,2.4928828468612556,2.493322670931627,2.493762495001999,2.494202319072371,2.494642143142743,2.495081967213115,2.4955217912834864,2.4959616153538584,2.4964014394242304,2.496841263494602,2.497281087564974,2.497720911635346,2.4981607357057176,2.4986005597760896,2.499040383846461,2.4994802079168332,2.4999200319872052,2.500359856057577,2.500799680127949,2.501239504198321,2.5016793282686924,2.5021191523390645,2.502558976409436,2.502998800479808,2.50343862455018,2.5038784486205516,2.5043182726909237,2.5047580967612957,2.5051979208316673,2.5056377449020393,2.506077568972411,2.506517393042783,2.506957217113155,2.5073970411835265,2.5078368652538985,2.5082766893242705,2.508716513394642,2.509156337465014,2.5095961615353857,2.5100359856057577,2.5104758096761297,2.5109156337465013,2.5113554578168733,2.5117952818872453,2.512235105957617,2.512674930027989,2.5131147540983605,2.5135545781687325,2.5139944022391045,2.514434226309476,2.514874050379848,2.5153138744502197,2.5157536985205917,2.5161935225909637,2.5166333466613353,2.5170731707317073,2.5175129948020794,2.517952818872451,2.518392642942823,2.5188324670131945,2.5192722910835665,2.5197121151539386,2.52015193922431,2.520591763294682,2.521031587365054,2.5214714114354257,2.5219112355057978,2.5223510595761693,2.5227908836465414,2.5232307077169134,2.523670531787285,2.524110355857657,2.524550179928029,2.5249900039984006,2.5254298280687726,2.525869652139144,2.526309476209516,2.526749300279888,2.5271891243502598,2.527628948420632,2.528068772491004,2.5285085965613754,2.5289484206317474,2.529388244702119,2.529828068772491,2.530267892842863,2.5307077169132346,2.5311475409836066,2.531587365053978,2.53202718912435,2.5324670131947222,2.532906837265094,2.533346661335466,2.533786485405838,2.5342263094762094,2.5346661335465814,2.535105957616953,2.535545781687325,2.535985605757697,2.5364254298280686,2.5368652538984406,2.5373050779688127,2.5377449020391842,2.5381847261095563,2.538624550179928,2.5390643742503,2.539504198320672,2.5399440223910434,2.5403838464614155,2.5408236705317875,2.541263494602159,2.541703318672531,2.5421431427429027,2.5425829668132747,2.5430227908836467,2.5434626149540183,2.5439024390243903,2.5443422630947623,2.544782087165134,2.545221911235506,2.5456617353058775,2.5461015593762495,2.5465413834466215,2.546981207516993,2.547421031587365,2.547860855657737,2.5483006797281087,2.5487405037984807,2.5491803278688523,2.5496201519392243,2.5500599760095963,2.550499800079968,2.55093962415034,2.5513794482207115,2.5518192722910835,2.5522590963614555,2.552698920431827,2.553138744502199,2.553578568572571,2.5540183926429427,2.5544582167133147,2.5548980407836863,2.5553378648540583,2.5557776889244304,2.556217512994802,2.556657337065174,2.557097161135546,2.5575369852059175,2.5579768092762896,2.558416633346661,2.558856457417033,2.559296281487405,2.5597361055577768,2.5601759296281488,2.560615753698521,2.5610555777688924,2.5614954018392644,2.561935225909636,2.562375049980008,2.56281487405038,2.5632546981207516,2.5636945221911236,2.5641343462614956,2.564574170331867,2.565013994402239,2.565453818472611,2.565893642542983,2.566333466613355,2.5667732906837264,2.5672131147540984,2.5676529388244704,2.568092762894842,2.568532586965214,2.5689724110355856,2.5694122351059576,2.5698520591763296,2.570291883246701,2.5707317073170732,2.571171531387445,2.571611355457817,2.572051179528189,2.5724910035985604,2.5729308276689324,2.5733706517393045,2.573810475809676,2.574250299880048,2.5746901239504196,2.5751299480207916,2.5755697720911637,2.5760095961615352,2.5764494202319073,2.5768892443022793,2.577329068372651,2.577768892443023,2.5782087165133944,2.5786485405837665,2.5790883646541385,2.57952818872451,2.579968012794882,2.580407836865254,2.5808476609356257,2.5812874850059977,2.5817273090763693,2.5821671331467413,2.5826069572171133,2.583046781287485,2.583486605357857,2.583926429428229,2.5843662534986005,2.5848060775689725,2.585245901639344,2.585685725709716,2.586125549780088,2.5865653738504597,2.5870051979208317,2.5874450219912033,2.5878848460615753,2.5883246701319473,2.588764494202319,2.589204318272691,2.589644142343063,2.5900839664134345,2.5905237904838065,2.590963614554178,2.59140343862455,2.591843262694922,2.5922830867652937,2.5927229108356658,2.5931627349060378,2.5936025589764093,2.5940423830467814,2.594482207117153,2.594922031187525,2.595361855257897,2.5958016793282686,2.5962415033986406,2.5966813274690126,2.597121151539384,2.597560975609756,2.5980007996801278,2.5984406237505,2.598880447820872,2.5993202718912434,2.5997600959616154,2.6001999200319874,2.600639744102359,2.601079568172731,2.6015193922431026,2.6019592163134746,2.6023990403838466,2.602838864454218,2.60327868852459,2.6037185125949622,2.604158336665334,2.604598160735706,2.6050379848060774,2.6054778088764494,2.6059176329468214,2.606357457017193,2.606797281087565,2.6072371051579366,2.6076769292283086,2.6081167532986806,2.608556577369052,2.6089964014394242,2.6094362255097963,2.609876049580168,2.61031587365054,2.6107556977209114,2.6111955217912834,2.6116353458616555,2.612075169932027,2.612514994002399,2.612954818072771,2.6133946421431427,2.6138344662135147,2.6142742902838862,2.6147141143542583,2.6151539384246303,2.615593762495002,2.616033586565374,2.616473410635746,2.6169132347061175,2.6173530587764895,2.617792882846861,2.618232706917233,2.618672530987605,2.6191123550579767,2.6195521791283487,2.6199920031987207,2.6204318272690923,2.6208716513394643,2.621311475409836,2.621751299480208,2.62219112355058,2.6226309476209515,2.6230707716913235,2.6235105957616955,2.623950419832067,2.624390243902439,2.6248300679728107,2.6252698920431827,2.6257097161135547,2.6261495401839263,2.6265893642542983,2.62702918832467,2.627469012395042,2.627908836465414,2.6283486605357855,2.6287884846061575,2.6292283086765296,2.629668132746901,2.630107956817273,2.6305477808876447,2.6309876049580168,2.6314274290283888,2.6318672530987604,2.6323070771691324,2.6327469012395044,2.633186725309876,2.633626549380248,2.6340663734506196,2.6345061975209916,2.6349460215913636,2.635385845661735,2.635825669732107,2.636265493802479,2.636705317872851,2.637145141943223,2.6375849660135944,2.6380247900839664,2.6384646141543384,2.63890443822471,2.639344262295082,2.639784086365454,2.6402239104358256,2.6406637345061976,2.641103558576569,2.641543382646941,2.6419832067173132,2.642423030787685,2.642862854858057,2.643302678928429,2.6437425029988004,2.6441823270691724,2.644622151139544,2.645061975209916,2.645501799280288,2.6459416233506596,2.6463814474210317,2.6468212714914032,2.6472610955617752,2.6477009196321473,2.648140743702519,2.648580567772891,2.649020391843263,2.6494602159136345,2.6499000399840065,2.650339864054378,2.65077968812475,2.651219512195122,2.6516593362654937,2.6520991603358657,2.6525389844062377,2.6529788084766093,2.6534186325469813,2.653858456617353,2.654298280687725,2.654738104758097,2.6551779288284685,2.6556177528988405,2.6560575769692125,2.656497401039584,2.656937225109956,2.6573770491803277,2.6578168732506997,2.6582566973210717,2.6586965213914433,2.6591363454618153,2.6595761695321873,2.660015993602559,2.660455817672931,2.6608956417433025,2.6613354658136745,2.6617752898840465,2.662215113954418,2.66265493802479,2.6630947620951617,2.6635345861655337,2.6639744102359058,2.6644142343062773,2.6648540583766493,2.6652938824470214,2.665733706517393,2.666173530587765,2.6666133546581365,2.6670531787285086,2.6674930027988806,2.667932826869252,2.668372650939624,2.668812475009996,2.6692522990803678,2.66969212315074,2.6701319472211114,2.6705717712914834,2.6710115953618554,2.671451419432227,2.671891243502599,2.672331067572971,2.6727708916433426,2.6732107157137146,2.673650539784086,2.674090363854458,2.67453018792483,2.674970011995202,2.675409836065574,2.675849660135946,2.6762894842063174,2.6767293082766894,2.677169132347061,2.677608956417433,2.678048780487805,2.6784886045581766,2.6789284286285486,2.6793682526989206,2.6798080767692922,2.6802479008396642,2.680687724910036,2.681127548980408,2.68156737305078,2.6820071971211514,2.6824470211915235,2.682886845261895,2.683326669332267,2.683766493402639,2.6842063174730106,2.6846461415433827,2.6850859656137547,2.6855257896841263,2.6859656137544983,2.68640543782487,2.686845261895242,2.687285085965614,2.6877249100359855,2.6881647341063575,2.6886045581767295,2.689044382247101,2.689484206317473,2.6899240303878447,2.6903638544582167,2.6908036785285887,2.6912435025989603,2.6916833266693323,2.6921231507397043,2.692562974810076,2.693002798880448,2.6934426229508195,2.6938824470211915,2.6943222710915635,2.694762095161935,2.695201919232307,2.695641743302679,2.6960815673730507,2.6965213914434227,2.6969612155137943,2.6974010395841663,2.6978408636545383,2.69828068772491,2.698720511795282,2.699160335865654,2.6996001599360255,2.7000399840063976,2.700479808076769,2.700919632147141,2.701359456217513,2.7017992802878847,2.7022391043582568,2.7026789284286283,2.7031187524990004,2.7035585765693724,2.703998400639744,2.704438224710116,2.704878048780488,2.7053178728508596,2.7057576969212316,2.706197520991603,2.706637345061975,2.707077169132347,2.7075169932027188,2.707956817273091,2.708396641343463,2.7088364654138344,2.7092762894842064,2.709716113554578,2.71015593762495,2.710595761695322,2.7110355857656936,2.7114754098360656,2.7119152339064376,2.712355057976809,2.712794882047181,2.713234706117553,2.713674530187925,2.714114354258297,2.7145541783286684,2.7149940023990404,2.7154338264694124,2.715873650539784,2.716313474610156,2.7167532986805276,2.7171931227508996,2.7176329468212717,2.7180727708916432,2.7185125949620152,2.718952419032387,2.719392243102759,2.719832067173131,2.7202718912435024,2.7207117153138745,2.7211515393842465,2.721591363454618,2.72203118752499,2.7224710115953616,2.7229108356657337,2.7233506597361057,2.7237904838064773,2.7242303078768493,2.7246701319472213,2.725109956017593,2.725549780087965,2.7259896041583365,2.7264294282287085,2.7268692522990805,2.727309076369452,2.727748900439824,2.728188724510196,2.7286285485805677,2.7290683726509397,2.7295081967213113,2.7299480207916833,2.7303878448620553,2.730827668932427,2.731267493002799,2.731707317073171,2.7321471411435425,2.7325869652139145,2.733026789284286,2.733466613354658,2.73390643742503,2.7343462614954017,2.7347860855657737,2.7352259096361458,2.7356657337065173,2.7361055577768894,2.736545381847261,2.736985205917633,2.737425029988005,2.7378648540583765,2.7383046781287486,2.73874450219912,2.739184326269492,2.739624150339864,2.7400639744102357,2.7405037984806078,2.74094362255098,2.7413834466213514,2.7418232706917234,2.742263094762095,2.742702918832467,2.743142742902839,2.7435825669732106,2.7440223910435826,2.7444622151139546,2.744902039184326,2.745341863254698,2.7457816873250698,2.746221511395442,2.746661335465814,2.7471011595361854,2.7475409836065574,2.7479808076769294,2.748420631747301,2.748860455817673,2.7493002798880446,2.7497401039584166,2.7501799280287886,2.75061975209916,2.7510595761695322,2.7514994002399042,2.751939224310276,2.752379048380648,2.7528188724510194,2.7532586965213914,2.7536985205917635,2.754138344662135,2.754578168732507,2.755017992802879,2.7554578168732506,2.7558976409436227,2.7563374650139942,2.7567772890843663,2.7572171131547383,2.75765693722511,2.758096761295482,2.7585365853658534,2.7589764094362255,2.7594162335065975,2.759856057576969,2.760295881647341,2.760735705717713,2.7611755297880847,2.7616153538584567,2.7620551779288283,2.7624950019992003,2.7629348260695723,2.763374650139944,2.763814474210316,2.764254298280688,2.7646941223510595,2.7651339464214315,2.765573770491803,2.766013594562175,2.766453418632547,2.7668932427029187,2.7673330667732907,2.7677728908436627,2.7682127149140343,2.7686525389844063,2.769092363054778,2.76953218712515,2.769972011195522,2.7704118352658935,2.7708516593362655,2.7712914834066376,2.771731307477009,2.772171131547381,2.7726109556177527,2.7730507796881247,2.7734906037584968,2.7739304278288683,2.7743702518992404,2.774810075969612,2.775249900039984,2.775689724110356,2.7761295481807275,2.7765693722510996,2.7770091963214716,2.777449020391843,2.777888844462215,2.7783286685325868,2.7787684926029588,2.779208316673331,2.7796481407437024,2.7800879648140744,2.7805277888844464,2.780967612954818,2.78140743702519,2.7818472610955616,2.7822870851659336,2.7827269092363056,2.783166733306677,2.783606557377049,2.7840463814474212,2.784486205517793,2.784926029588165,2.7853658536585364,2.7858056777289084,2.7862455017992804,2.786685325869652,2.787125149940024,2.787564974010396,2.7880047980807676,2.7884446221511396,2.788884446221511,2.7893242702918832,2.7897640943622553,2.790203918432627,2.790643742502999,2.791083566573371,2.7915233906437424,2.7919632147141145,2.792403038784486,2.792842862854858,2.79328268692523,2.7937225109956016,2.7941623350659737,2.7946021591363452,2.7950419832067173,2.7954818072770893,2.795921631347461,2.796361455417833,2.796801279488205,2.7972411035585765,2.7976809276289485,2.79812075169932,2.798560575769692,2.799000399840064,2.7994402239104357,2.7998800479808077,2.8003198720511797,2.8007596961215513,2.8011995201919233,2.801639344262295,2.802079168332667,2.802518992403039,2.8029588164734105,2.8033986405437825,2.8038384646141545,2.804278288684526,2.804718112754898,2.8051579368252697,2.8055977608956417,2.8060375849660137,2.8064774090363853,2.8069172331067573,2.8073570571771294,2.807796881247501,2.808236705317873,2.8086765293882445,2.8091163534586165,2.8095561775289886,2.80999600159936,2.810435825669732,2.810875649740104,2.8113154738104758,2.8117552978808478,2.8121951219512193,2.8126349460215914,2.8130747700919634,2.813514594162335,2.813954418232707,2.8143942423030786,2.8148340663734506,2.8152738904438226,2.815713714514194,2.816153538584566,2.816593362654938,2.81703318672531,2.817473010795682,2.8179128348660534,2.8183526589364254,2.8187924830067974,2.819232307077169,2.819672131147541,2.820111955217913,2.8205517792882846,2.8209916033586566,2.821431427429028,2.8218712514994,2.8223110755697722,2.822750899640144,2.823190723710516,2.823630547780888,2.8240703718512594,2.8245101959216314,2.824950019992003,2.825389844062375,2.825829668132747,2.8262694922031186,2.8267093162734906,2.8271491403438627,2.8275889644142342,2.8280287884846063,2.828468612554978,2.82890843662535,2.829348260695722,2.8297880847660934,2.8302279088364655,2.8306677329068375,2.831107556977209,2.831547381047581,2.8319872051179527,2.8324270291883247,2.8328668532586967,2.8333066773290683,2.8337465013994403,2.834186325469812,2.834626149540184,2.835065973610556,2.8355057976809275,2.8359456217512995,2.8363854458216715,2.836825269892043,2.837265093962415,2.8377049180327867,2.8381447421031587,2.8385845661735307,2.8390243902439023,2.8394642143142743,2.8399040383846463,2.840343862455018,2.84078368652539,2.8412235105957615,2.8416633346661335,2.8421031587365055,2.842542982806877,2.842982806877249,2.843422630947621,2.8438624550179927,2.8443022790883647,2.8447421031587363,2.8451819272291083,2.8456217512994804,2.846061575369852,2.846501399440224,2.846941223510596,2.8473810475809676,2.8478208716513396,2.848260695721711,2.848700519792083,2.849140343862455,2.8495801679328268,2.8500199920031988,2.8504598160735704,2.8508996401439424,2.8513394642143144,2.851779288284686,2.852219112355058,2.85265893642543,2.8530987604958016,2.8535385845661736,2.853978408636545,2.854418232706917,2.854858056777289,2.855297880847661,2.855737704918033,2.856177528988405,2.8566173530587764,2.8570571771291484,2.85749700119952,2.857936825269892,2.858376649340264,2.8588164734106356,2.8592562974810076,2.8596961215513796,2.860135945621751,2.8605757696921232,2.861015593762495,2.861455417832867,2.861895241903239,2.8623350659736104,2.8627748900439824,2.8632147141143545,2.863654538184726,2.864094362255098,2.8645341863254696,2.8649740103958417,2.8654138344662137,2.8658536585365852,2.8662934826069573,2.8667333066773293,2.867173130747701,2.867612954818073,2.8680527788884445,2.8684926029588165,2.8689324270291885,2.86937225109956,2.869812075169932,2.8702518992403037,2.8706917233106757,2.8711315473810477,2.8715713714514193,2.8720111955217913,2.8724510195921633,2.872890843662535,2.873330667732907,2.8737704918032785,2.8742103158736505,2.8746501399440225,2.875089964014394,2.875529788084766,2.875969612155138,2.8764094362255097,2.8768492602958817,2.8772890843662533,2.8777289084366253,2.8781687325069973,2.878608556577369,2.879048380647741,2.879488204718113,2.8799280287884845,2.8803678528588565,2.880807676929228,2.8812475009996,2.881687325069972,2.8821271491403437,2.8825669732107158,2.8830067972810878,2.8834466213514593,2.8838864454218314,2.884326269492203,2.884766093562575,2.885205917632947,2.8856457417033186,2.8860855657736906,2.8865253898440626,2.886965213914434,2.887405037984806,2.8878448620551778,2.88828468612555,2.888724510195922,2.8891643342662934,2.8896041583366654,2.890043982407037,2.890483806477409,2.890923630547781,2.8913634546181526,2.8918032786885246,2.8922431027588966,2.892682926829268,2.89312275089964,2.893562574970012,2.894002399040384,2.894442223110756,2.8948820471811274,2.8953218712514994,2.8957616953218714,2.896201519392243,2.896641343462615,2.8970811675329866,2.8975209916033586,2.8979608156737307,2.8984006397441022,2.8988404638144742,2.8992802878848463,2.899720111955218,2.90015993602559,2.9005997600959614,2.9010395841663335,2.9014794082367055,2.901919232307077,2.902359056377449,2.902798880447821,2.9032387045181927,2.9036785285885647,2.9041183526589363,2.9045581767293083,2.9049980007996803,2.905437824870052,2.905877648940424,2.9063174730107955,2.9067572970811675,2.9071971211515395,2.907636945221911,2.908076769292283,2.908516593362655,2.9089564174330267,2.9093962415033987,2.9098360655737703,2.9102758896441423,2.9107157137145143,2.911155537784886,2.911595361855258,2.91203518592563,2.9124750099960015,2.9129148340663735,2.913354658136745,2.913794482207117,2.914234306277489,2.9146741303478607,2.9151139544182327,2.9155537784886048,2.9159936025589763,2.9164334266293483,2.91687325069972,2.917313074770092,2.917752898840464,2.9181927229108355,2.9186325469812076,2.9190723710515796,2.919512195121951,2.919952019192323,2.9203918432626947,2.9208316673330668,2.921271491403439,2.9217113154738104,2.9221511395441824,2.9225909636145544,2.923030787684926,2.923470611755298,2.9239104358256696,2.9243502598960416,2.9247900839664136,2.925229908036785,2.925669732107157,2.9261095561775288,2.926549380247901,2.926989204318273,2.9274290283886444,2.9278688524590164,2.9283086765293884,2.92874850059976,2.929188324670132,2.9296281487405036,2.9300679728108756,2.9305077968812476,2.930947620951619,2.9313874450219912,2.9318272690923632,2.932267093162735,2.932706917233107,2.9331467413034784,2.9335865653738504,2.9340263894442224,2.934466213514594,2.934906037584966,2.935345861655338,2.9357856857257096,2.9362255097960817,2.9366653338664532,2.9371051579368253,2.9375449820071973,2.937984806077569,2.938424630147941,2.938864454218313,2.9393042782886845,2.9397441023590565,2.940183926429428,2.9406237504998,2.941063574570172,2.9415033986405437,2.9419432227109157,2.9423830467812877,2.9428228708516593,2.9432626949220313,2.943702518992403,2.944142343062775,2.944582167133147,2.9450219912035185,2.9454618152738905,2.945901639344262,2.946341463414634,2.946781287485006,2.9472211115553777,2.9476609356257497,2.9481007596961217,2.9485405837664933,2.9489804078368653,2.949420231907237,2.949860055977609,2.950299880047981,2.9507397041183525,2.9511795281887245,2.9516193522590966,2.952059176329468,2.95249900039984,2.9529388244702117,2.9533786485405837,2.9538184726109558,2.9542582966813273,2.9546981207516994,2.9551379448220714,2.955577768892443,2.956017592962815,2.9564574170331865,2.9568972411035586,2.9573370651739306,2.957776889244302,2.958216713314674,2.958656537385046,2.9590963614554178,2.95953618552579,2.9599760095961614,2.9604158336665334,2.9608556577369054,2.961295481807277,2.961735305877649,2.962175129948021,2.9626149540183926,2.9630547780887646,2.963494602159136,2.963934426229508,2.96437425029988,2.964814074370252,2.965253898440624,2.9656937225109954,2.9661335465813674,2.9665733706517394,2.967013194722111,2.967453018792483,2.967892842862855,2.9683326669332266,2.9687724910035986,2.96921231507397,2.9696521391443422,2.9700919632147142,2.970531787285086,2.970971611355458,2.97141143542583,2.9718512594962014,2.9722910835665735,2.972730907636945,2.973170731707317,2.973610555777689,2.9740503798480606,2.9744902039184327,2.9749300279888047,2.9753698520591763,2.9758096761295483,2.97624950019992,2.976689324270292,2.977129148340664,2.9775689724110355,2.9780087964814075,2.9784486205517795,2.978888444622151,2.979328268692523,2.9797680927628947,2.9802079168332667,2.9806477409036387,2.9810875649740103,2.9815273890443823,2.981967213114754,2.982407037185126,2.982846861255498,2.9832866853258695,2.9837265093962415,2.9841663334666135,2.984606157536985,2.985045981607357,2.9854858056777287,2.9859256297481007,2.9863654538184727,2.9868052778888443,2.9872451019592163,2.9876849260295884,2.98812475009996,2.988564574170332,2.9890043982407035,2.9894442223110755,2.9898840463814476,2.990323870451819,2.990763694522191,2.991203518592563,2.9916433426629347,2.9920831667333068,2.9925229908036783,2.9929628148740504,2.9934026389444224,2.993842463014794,2.994282287085166,2.994722111155538,2.9951619352259096,2.9956017592962816,2.996041583366653,2.996481407437025,2.996921231507397,2.9973610555777688,2.997800879648141,2.998240703718513,2.9986805277888844,2.9991203518592564,2.999560175929628,3.0]}

},{}],90:[function(require,module,exports){
module.exports={"expected":[4.641588833612779,4.617407076145778,4.593721498952099,4.570514555058049,4.5477695707417265,4.525470689867127,4.503602822522298,4.4821515975720185,4.461103318775706,4.440444924156836,4.420163948341699,4.400248487613278,4.380687167450907,4.3614691123485,4.342583917723872,4.324021623749332,4.305772690949458,4.287827977426125,4.270178717583522,4.25281650223726,4.235733260001937,4.2189212398607525,4.202372994829049,4.186081366631238,4.170039471317275,4.154240685751093,4.1386786349088895,4.123347179930302,4.108240406870018,4.09335261610164,4.0786783123293295,4.064212195166293,4.049949150242329,4.035884240805476,4.022012699785556,4.008329922289699,3.9948314585022464,3.9815130069634015,3.9683704082028717,3.955399638706461,3.9425968051951354,3.9299581391975225,3.9174799918981513,3.9051588292449475,3.8929912273006377,3.880973867823761,3.8691035340659314,3.8573771067729195,3.845791560377895,3.834343959375988,3.8230314548699846,3.811851281277663,3.8008007531918504,3.789877262384878,3.779078274949605,3.7684013285696834,3.757844029912188,3.7474040521361385,3.737079132510872,3.7268670701385367,3.716765723775353,3.7067730097466125,3.6968868999506337,3.687105419947232,3.6774266471264734,3.667848708953737,3.6583697812873535,3.6489880867652618,3.6397018932573717,3.630509512380456,3.6214092980726114,3.6123996452244618,3.6034789883644476,3.5946458003956785,3.5858985913819645,3.577235907380779,3.568656329320994,3.5601584719233847,3.5517409826619635,3.54340254076434,3.5351418562493597,3.526957669000392,3.5188487478727137,3.5108138898334995,3.5028519191330214,3.4949616865057136,3.4871420683998458,3.4793919662345827,3.4717103056832914,3.4640960359819988,3.4565481292619564,3.449065579905325,3.4416474039230285,3.4342926383538837,3.427000340684144,3.419769588286637,3.412599477878718,3.4054891249982946,3.3984376634972127,3.3914442450513165,3.3845080386865503,3.3776282303204628,3.370804022318545,3.3640346330648145,3.3573192965461183,3.350657261949636,3.3440477932730843,3.337490168947149,3.3309836814697036,3.324527637051358,3.318121355271949,3.311764168747548,3.3054554228076327,3.2991944751820257,3.2929806956972847,3.286813465982174,3.2806921791819263,3.2746162396809635,3.2685850628337905,3.2625980747037775,3.256654711809554,3.2507544208787538,3.2448966586088632,3.239080891434926,3.23330659530387,3.227573255455243,3.2218803662081354,3.216227430754077,3.210613960955727,3.205039477151154,3.1995035079635197,3.194005590116002,3.188545268251777,3.1831220947589016,3.177735629599931,3.17238544014614,3.167071101016173,3.1617921939190046,3.1565483075010667,3.1513390371974133,3.1461639850867895,3.1410227597505,3.1359149761349405,3.130840255417695,3.125798224877078,3.120788517765027,3.1158107731832363,3.110864635962435,3.105949756544722,3.1010657908688564,3.096212400258423,3.091389251312784,3.086596015800737,3.0818323705567976,3.077097997380033,3.0723925829353695,3.067715818657304,3.0630674006559517,3.0584470296253565,3.053854410754012,3.0492892536375122,3.0447512721932966,3.040240184577398,3.0357557131031743,3.031297584161934,3.0268655281454286,3.0224592793701444,3.018078576003355,3.0137231599908763,3.0093927769864863,3.005087176282958,3.000806110744667,2.9965493367417237,2.9923166140856017,2.9881077059662084,2.9839223788903677,2.979760402621678,2.975621550121703,2.971505597492468,2.967412323920219,2.96334151162042,2.9592929457839534,2.9552664145244854,2.9512617088269804,2.9472786224973224,2.943316952113022,2.939376496974976,2.935457059060262,2.9315584429759296,2.9276804559137743,2.9238229076060653,2.9199856102821964,2.916168378626252,2.912371029735452,2.908593383079461,2.904835260460537,2.9010964859745045,2.897376885972522,2.8936762890236394,2.8899945258781083,2.886331429431443,2.8826868346892054,2.879060578732499,2.875452500684153,2.8718624416755847,2.8682902448143213,2.8647357551521613,2.86119881965397,2.857679287167089,2.854177008391339,2.85069183584962,2.84722362385907,2.843772228502796,2.840337507602144,2.836919320689502,2.8335175289816306,2.8301319953535002,2.826762584312624,2.823409161973882,2.820071596034822,2.81674975575142,2.8134435119143038,2.8101527368254153,2.80687730427511,2.803617089519686,2.8003719692593205,2.797141821616422,2.7939265261143773,2.790725963656686,2.78754001650648,2.7843685682664123,2.781211503858914,2.7780687095068055,2.774940072714259,2.771825482248099,2.7687248281194456,2.7656380015656765,2.762564895032713,2.7595054021576235,2.7564594177515276,2.753426837782805,2.750407559360602,2.7474014807186173,2.7444085011991812,2.741428521237603,2.7384614423467935,2.7355071671021536,2.732565599126719,2.7296366430765637,2.7267202046264507,2.723816190455729,2.720924508234468,2.7180450666098275,2.7151777751926605,2.712322544544335,2.7094792861637833,2.7066479124747667,2.703828336813347,2.7010204734155736,2.6982242374053693,2.6954395447826203,2.692666312411457,2.6899044580087326,2.687153900132686,2.6844145581717926,2.6816863523337946,2.678969203634909,2.6762630338892124,2.6735677656981935,2.670883322440476,2.668209628261704,2.6655466080645924,2.662894187499131,2.6602522929529484,2.6576208515418243,2.654999791100357,2.6523890401727703,2.6497885280038727,2.647198184530153,2.6446179403710133,2.6420477268201448,2.63948747583703,2.636937120038583,2.634396592690912,2.6318658277012137,2.62934475960979,2.626833323582186,2.6243314554014487,2.6218390914605036,2.6193561687546456,2.6168826248741444,2.6144183979969613,2.6119634268815757,2.6095176508599165,2.607081009830403,2.6046534442510865,2.6022348951328964,2.5998253040329824,2.5974246130481604,2.5950327648084492,2.592649702470708,2.5902753697123617,2.587909710725221,2.585552670209393,2.5832041933672785,2.5808642258976566,2.578532713989856,2.576209604318009,2.573894844035389,2.571588380768828,2.5692901626132163,2.5670001381260783,2.5647182563222257,2.5624444666684876,2.560178719078515,2.557920963907658,2.555671151947915,2.553429234422953,2.5511951629831993,2.5489688897009986,2.5467503670658393,2.5445395479796464,2.542336385752139,2.540140834096252,2.5379528471236217,2.5357723793401306,2.533599385641519,2.531433821309049,2.529275642005235,2.527124803769627,2.5249812630146544,2.5228449765215233,2.5207159014361724,2.51859399526528,2.516479215872328,2.5143715214737137,2.512270870634922,2.510177222266739,2.508090535621522,2.5060107702895174,2.5039378861952266,2.501871843593823,2.4998126030676104,2.4977601255225332,2.495714372184731,2.4936753045971356,2.4916428846161165,2.4896170744081676,2.4875978364466365,2.4855851335084966,2.483578928671163,2.4815791853093474,2.4795858670919504,2.477598937979001,2.4756183622186305,2.473644104344083,2.4716761291707683,2.4697144017933517,2.4677588875828786,2.465809552183935,2.463866361511847,2.4619292817499123,2.4599982793466695,2.4580733210131984,2.456154373720456,2.454241404696646,2.4523343814246186,2.450433271639306,2.448538043325186,2.4466486647137806,2.444765104281183,2.442887330745614,2.441015313065012,2.439149020434649,2.437288422284778,2.4354334882783077,2.433584188308506,2.4317404924967305,2.429902371190188,2.428069794959722,2.4262427345976194,2.4244211611154554,2.4226050457419555,2.4207943599208837,2.418989075308962,2.4171891637738057,2.4153945973918924,2.413605348446547,2.411821389425958,2.4100426930212078,2.4082692321243377,2.4065009798264274,2.4047379094156973,2.4029799943756385,2.4012272083831574,2.39947952530675,2.3977369192046893,2.3959993643232393,2.3942668350948875,2.392539306136599,2.390816752248087,2.3890991484101103,2.387386469782782,2.385678691703904,2.383975789687318,2.3822777394212755,2.3805845167668234,2.3788960977562166,2.3772124585913366,2.3755335756421383,2.3738594254451075,2.372189984701742,2.3705252302770408,2.368865139198021,2.367209688652243,2.3655588559863547,2.363912618704654,2.3622709544676646,2.3606338410907277,2.359001256542611,2.3573731789441332,2.3557495865668003,2.3541304578314612,2.3525157713069746,2.350905505708893,2.349299639898159,2.3476981528798193,2.3461010238017455,2.3445082319533794,2.3429197567644815,2.3413355778039,2.3397556747783494,2.338180027531205,2.336608616041307,2.335041420421781,2.333478420918869,2.3319195979107725,2.33036493190651,2.3288144035447855,2.3272679935928675,2.325725682945483,2.324187452623721,2.3226532837739473,2.3211231576667344,2.3195970556957954,2.318074959376938,2.3165568503470224,2.3150427103629334,2.313532521300562,2.3120262651538,2.3105239240335416,2.309025480166696,2.3075309158952133,2.3060402136751175,2.304553356075551,2.303070325777827,2.301591105574493,2.3001156783684054,2.29864402717181,2.297176135105436,2.2957119853975954,2.2942515613832932,2.292794846503348,2.29134182430352,2.2898924784336474,2.2884467926467917,2.2870047507983937,2.2855663368454366,2.284131534845614,2.282700328956514,2.281272703434804,2.279848642635428,2.278428131010809,2.2770111531100636,2.275597693578219,2.2741877371554424,2.2727812686762747,2.2713782730688736,2.2699787353542646,2.268582640645598,2.2671899741474117,2.265800721154907,2.264414867053224,2.263032397316731,2.2616532975083143,2.260277553278682,2.2589051503656665,2.2575360745935424,2.2561703118723435,2.2548078481971907,2.253448669647625,2.252092762386947,2.2507401126615654,2.249390706800343,2.2480445312139636,2.246701572394289,2.2453618169137344,2.2440252514246435,2.2426918626586705,2.2413616374261705,2.2400345626155906,2.2387106251928732,2.2373898122008598,2.2360721107587023,2.2347575080612803,2.233445991378623,2.232137548055337,2.230832165510039,2.2295298312347955,2.2282305327945635,2.2269342578266427,2.225640994040127,2.2243507292153635,2.2230634512034175,2.2217791479255418,2.220497807372647,2.219219417604786,2.217943966750632,2.216671443006969,2.215401834638185,2.21413512997577,2.2128713174178136,2.2116103854285187,2.2103523225377075,2.2090971173403386,2.207844758496027,2.206595234728569,2.2053485348254687,2.204104647637474,2.20286356207811,2.201625267123224,2.200389751810528,2.19915700523915,2.1979270165691855,2.1966997750212567,2.1954752698760736,2.194253490473998,2.1930344262146146,2.1918180665563023,2.190604401015812,2.189393419167847,2.1881851106446466,2.186979465135574,2.1857764723867095,2.1845761222004425,2.183378404435074,2.1821833090044147,2.180990825877394,2.1798009450776674,2.1786136566832286,2.177428950826027,2.1762468176915863,2.175067247518625,2.173890230598686,2.1727157572757614,2.1715438179459285,2.170374403056982,2.1692075031080753,2.16804310864936,2.1668812102816317,2.1657217986559774,2.1645648644734257,2.1634103984846016,2.1622583914893827,2.161108834336559,2.159961717923494,2.1588170331957923,2.1576747711469664,2.1565349228181083,2.1553974792975614,2.154262431720601,2.1531297712691084,2.1519994891712573,2.150871576701196,2.1497460251787355,2.148622825969039,2.1475019704823137,2.146383450173507,2.145267256542004,2.1441533811313267,2.1430418155288367,2.1419325513654406,2.1408255803152976,2.139720894095529,2.1386184844659297,2.137518343228685,2.136420462228085,2.1353248333502446,2.134231448522828,2.1331402997147673,2.132051378935993,2.1309646782371607,2.129880189709381,2.1287979054839536,2.1277178177321017,2.1266399186647087,2.125564200532058,2.124490655623573,2.123419276267563,2.1223500548309664,2.121282983719099,2.1202180553754033,2.1191552622812004,2.1180945969554443,2.1170360519544746,2.1159796198717777,2.1149252933377443,2.1138730650194284,2.1128229276203156,2.111774873880085,2.1107288965743742,2.1096849885145543,2.1086431425474945,2.107603351555336,2.1065656084552686,2.1055299061993047,2.1044962377740566,2.1034645962005176,2.102434974533842,2.10140736586313,2.100381763311208,2.09935816003442,2.098336549222412,2.0973169240979246,2.0962992779165806,2.0952836039666805,2.094269895568997,2.0932581460765705,2.0922483488745054,2.091240497379771,2.0902345850410033,2.0892306053383036,2.088228551783046,2.08722841791768,2.086230197315539,2.0852338835806488,2.0842394703475353,2.0832469512810374,2.082256320076119,2.081267570457684,2.08028069618039,2.079295691028466,2.078312548815531,2.0773312633844143,2.0763518286069735,2.07537423838392,2.074398486644642,2.0734245673470273,2.0724524744772923,2.071482202049809,2.0705137441069317,2.0695470947188306,2.0685822479833202,2.067619198025694,2.066657938998557,2.0656984650816623,2.0647407704817464,2.0637848494323667,2.0628306961937413,2.0618783050525877,2.060927670321966,2.0599787863411176,2.059031647475314,2.0580862481156954,2.0571425826791216,2.0562006456080164,2.0552604313702147,2.0543219344588155,2.053385149392027,2.0524500707130238,2.051516692989792,2.0505850108149906,2.0496550188058,2.048726711603781,2.04780008387473,2.046875130308536,2.045951845619043,2.0450302245439036,2.0441102618444456,2.0431919523055315,2.0422752907354194,2.04136027196563,2.040446890850809,2.039535142268593,2.0386250211194774,2.0377165223266838,2.0368096408360263,2.035904371615784,2.0350007096565683,2.034098649971198,2.0331981875945675,2.0322993175835222,2.0314020350167334,2.03050633499457,2.029612212638977,2.028719663093351,2.0278286815224194,2.0269392631121157,2.026051403069461,2.0251650966224437,2.0242803390199007,2.023397125531397,2.0225154514471124,2.021635312077721,2.0207567027542765,2.019879618828099,2.0190040556706577,2.018130008673461,2.01725747324794,2.0163864448253404,2.0155169188566093,2.014648890812285,2.0137823561823875,2.012917310476311,2.0120537492227144,2.011191667969414,2.010331062283278,2.0094719277501194,2.0086142599745918,2.007758054580085,2.0069033072086206,2.00605001352075,2.0051981691954506,2.0043477699300256,2.003498811440003,2.0026512894590347,2.0018051997387976,2.000960538048893,2.0001173001767523,1.9992754819275351,1.998435079124034,1.99759608760658,1.996758503232944,1.9959223218782443,1.9950875394348506,1.9942541518122914,1.9934221549371602,1.992591544753024,1.9917623172203305,1.9909344683163162,1.990107994034919,1.9892828903866842,1.9884591533986777,1.9876367791143967,1.986815763593681,1.9859961029126243,1.9851777931634904,1.9843608304546232,1.9835452109103633,1.9827309306709597,1.9819179858924896,1.9811063727467688,1.980296087421273,1.9794871261190496,1.9786794850586402,1.9778731604739948,1.9770681486143924,1.9762644457443574,1.9754620481435834,1.9746609521068488,1.97386115394394,1.9730626499795716,1.9722654365533083,1.9714695100194866,1.9706748667471379,1.9698815031199113,1.9690894155359968,1.9682986004080512,1.9675090541631186,1.9667207732425607,1.965933754101978,1.9651479932111398,1.964363487053905,1.9635802321281561,1.9627982249457205,1.962017462032302,1.961237939927407,1.9604596551842763,1.9596826043698097,1.9589067840645007,1.9581321908623621,1.957358821370861,1.956586672210846,1.9558157400164802,1.9550460214351737,1.9542775131275154,1.9535102117672052,1.952744114040987,1.9519792166485843,1.9512155163026317,1.9504530097286108,1.9496916936647835,1.94893156486213,1.9481726200842817,1.9474148561074585,1.9466582697204045,1.9459028577243258,1.945148616932827,1.9443955441718486,1.943643636279606,1.9428928901065268,1.94214330251519,1.9413948703802653,1.9406475905884524,1.9399014600384203,1.9391564756407493,1.9384126343178687,1.9376699330040015,1.9369283686451018,1.9361879381987994,1.9354486386343408,1.934710466932532,1.9339734200856802,1.933237495097538,1.9325026889832462,1.9317689987692788,1.9310364214933844,1.930304954204534,1.9295745939628641,1.9288453378396218,1.9281171829171098,1.9273901262886337,1.9266641650584473,1.9259392963416988,1.9252155172643777,1.9244928249632625,1.9237712165858674,1.9230506892903902,1.92233124024566,1.9216128666310874,1.9208955656366096,1.9201793344626439,1.9194641703200321,1.9187500704299945,1.918037032024077,1.9173250523441019,1.9166141286421186,1.9159042581803545,1.915195438231166,1.914487666076989,1.9137809390102922,1.913075254333527,1.912370609359081,1.9116670014092307,1.9109644278160935,1.9102628859215804,1.9095623730773508,1.9088628866447641,1.908164423994836,1.9074669825081896,1.9067705595750133,1.9060751525950115,1.9053807589773635,1.9046873761406757,1.9039950015129385,1.9033036325314818,1.9026132666429307,1.901923901303161,1.9012355339772584,1.900548162139471,1.8998617832731706,1.8991763948708067,1.898491994433866,1.8978085794728288,1.8971261475071268,1.8964446960651036,1.8957642226839702,1.8950847249097653,1.8944062002973137,1.8937286464101868,1.8930520608206582,1.8923764411096688,1.8917017848667823,1.8910280896901468,1.890355353186455,1.8896835729709047,1.8890127466671605,1.8883428719073132,1.8876739463318408,1.8870059675895725,1.8863389333376472,1.885672841241478,1.885007688974712,1.8843434742191938,1.883680194664928,1.883017848010042,1.8823564319607478,1.8816959442313064,1.8810363825439909,1.8803777446290495,1.8797200282246698,1.879063231076941,1.8784073509398225,1.8777523855751017,1.8770983327523643,1.8764451902489565,1.87579295584995,1.875141627348107,1.8744912025438467,1.8738416792452088,1.873193055267822,1.872545328434867,1.871898496577044,1.8712525575325394,1.8706075091469918,1.8699633492734573,1.8693200757723791,1.868677686511552,1.8680361793660911,1.8673955522183976,1.8667558029581284,1.866116929482163,1.8654789296945702,1.8648418015065773,1.864205542836539,1.8635701516099046,1.8629356257591867,1.8623019632239306,1.861669161950683,1.861037219892961,1.860406135011221,1.8597759052728293,1.8591465286520303,1.8585180031299169,1.857890326694401,1.8572634973401827,1.856637513068721,1.8560123718882038,1.8553880718135187,1.8547646108662252,1.8541419870745217,1.8535201984732221,1.852899243103721,1.85227911901397,1.8516598242584463,1.8510413568981259,1.8504237150004543,1.849806896639319,1.8491908998950217,1.8485757228542508,1.8479613636100525,1.8473478202618054,1.8467350909151912,1.8461231736821688,1.845512066680947,1.8449017680359574,1.8442922758778284,1.8436835883433567,1.8430757035754837,1.8424686197232667,1.8418623349418546,1.8412568473924595,1.840652155242335,1.8400482566647445,1.839445149838941,1.838842832950139,1.8382413041894887,1.8376405617540534,1.8370406038467813,1.836441428676482,1.8358430344578023,1.8352454194112002,1.8346485817629212,1.8340525197449735,1.8334572315951037,1.832862715556773,1.8322689698791323,1.831675992816999,1.831083782630833,1.8304923375867135,1.8299016559563135,1.8293117360168794,1.8287225760512045,1.828134174347608,1.8275465291999118,1.826959638907416,1.8263735017748775,1.8257881161124865,1.8252034802358446,1.824619592465941,1.8240364511291316,1.8234540545571165,1.8228724010869164,1.822291489060852,1.8217113168265215,1.8211318827367797,1.8205531851497143,1.8199752224286265,1.819397992942008,1.8188214950635204,1.8182457271719732,1.8176706876513034,1.817096374890554,1.8165227872838539,1.8159499232303953,1.815377781134414,1.8148063594051695,1.814235656456924,1.8136656707089198,1.813096400585363,1.8125278445153998,1.811960000933098,1.811392868277427,1.8108264449922373,1.8102607295262414,1.809695720332992,1.8091314158708665,1.8085678146030422,1.8080049149974817,1.8074427155269113,1.8068812146688003,1.806320410905345,1.8057603027234481,1.805200888614699,1.8046421670753565,1.8040841366063287,1.8035267957131549,1.8029701429059872,1.8024141766995725,1.801858895613232,1.8013042981708454,1.800750382900831,1.8001971483361285,1.7996445930141804,1.7990927154769147,1.7985415142707264,1.797990987946459,1.7974411350593893,1.796891954169207,1.7963434438399992,1.7957956026402317,1.7952484291427326,1.7947019219246738,1.7941560795675557,1.793610900657188,1.7930663837836747,1.7925225275413943,1.791979330528988,1.7914367913493356,1.7908949086095474,1.7903536809209397,1.7898131068990233,1.7892731851634853,1.7887339143381733,1.7881952930510776,1.7876573199343175,1.787119993624123,1.7865833127608195,1.7860472759888126,1.785511881956571,1.784977129316611,1.7844430167254814,1.783909542843747,1.7833767063359738,1.782844505870712,1.7823129401204831,1.7817820077617623,1.7812517074749632,1.7807220379444244,1.7801929978583928,1.7796645859090088,1.7791368007922919,1.778609641208125,1.7780831058602393,1.7775571934562011,1.7770319027073955,1.776507232329012,1.7759831810400308,1.7754597475632068,1.774936930625057,1.774414728955844,1.7738931412895633,1.773372166363929,1.7728518029203582,1.7723320497039587,1.7718129054635132,1.7712943689514673,1.7707764389239136,1.7702591141405788,1.7697423933648102,1.7692262753635617,1.7687107589073794,1.768195842770389,1.7676815257302823,1.7671678065683025,1.7666546840692325,1.7661421570213802,1.7656302242165658,1.7651188844501084,1.764608136520813,1.7640979792309577,1.7635884113862794,1.7630794317959626,1.762571039272625,1.762063232632305,1.7615560106944501,1.7610493722819023,1.7605433162208866,1.7600378413409983,1.759532946475189,1.7590286304597573,1.7585248921343328,1.7580217303418655,1.7575191439286133,1.7570171317441299,1.756515692641252,1.756014825476088,1.7555145291080034,1.755014802399613,1.7545156442167655,1.7540170534285329,1.7535190289071971,1.753021569528241,1.7525246741703338,1.7520283417153204,1.7515325710482106,1.7510373610571661,1.7505427106334888,1.7500486186716109,1.7495550840690821,1.7490621057265583,1.7485696825477912,1.7480778134396147,1.7475864973119368,1.7470957330777255,1.7466055196530001,1.7461158559568177,1.7456267409112638,1.7451381734414406,1.7446501524754567,1.7441626769444152,1.7436757457824033,1.7431893579264817,1.7427035123166739,1.7422182078959547,1.7417334436102403,1.741249218408377,1.740765531242132,1.7402823810661803,1.7397997668380971,1.7393176875183458,1.7388361420702676,1.7383551294600712,1.7378746486568235,1.7373946986324373,1.736915278361664,1.7364363868220798,1.7359580229940792,1.7354801858608622,1.735002874408426,1.7345260876255535,1.7340498245038054,1.733574084037508,1.7330988652237445,1.7326241670623463,1.7321499885558804,1.731676328709642,1.7312031865316444,1.7307305610326085,1.730258451225955,1.7297868561277914,1.7293157747569063,1.728845206134759,1.7283751492854669,1.727905603235801,1.7274365670151721,1.7269680396556253,1.7265000201918277,1.726032507661061,1.7255655011032116,1.725098999560761,1.7246330020787783,1.7241675077049088,1.723702515489367,1.723238024484927,1.7227740337469124,1.7223105423331893,1.7218475493041556,1.7213850537227344,1.7209230546543621,1.7204615511669823,1.7200005423310365,1.7195400272194534,1.7190800049076438,1.7186204744734885,1.7181614349973326,1.7177028855619743,1.7172448252526586,1.7167872531570676,1.7163301683653123,1.7158735699699246,1.7154174570658487,1.7149618287504322,1.7145066841234184,1.714052022286938,1.7135978423455018,1.7131441434059902,1.7126909245776463,1.7122381849720691,1.7117859237032031,1.7113341398873323,1.7108828326430698,1.710432001091353,1.7099816443554323,1.7095317615608656,1.709082351835509,1.7086334143095103,1.7081849481152998,1.7077369523875834,1.7072894262633345,1.7068423688817866,1.7063957793844244,1.7059496569149786,1.7055040006194155,1.7050588096459316,1.7046140831449443,1.7041698202690863,1.7037260201731956,1.703282682014311,1.7028398049516615,1.702397388146662,1.7019554307629041,1.7015139319661483,1.701072890924318,1.7006323068074918,1.700192178787896,1.699752506039898,1.6993132877399975,1.698874523066822,1.6984362112011169,1.6979983513257404,1.6975609426256557,1.697123984287923,1.6966874755016945,1.6962514154582058,1.6958158033507698,1.695380638374769,1.6949459197276493,1.6945116466089127,1.694077818220111,1.6936444337648389,1.6932114924487258,1.692778993479431,1.6923469360666359,1.6919153194220378,1.6914841427593423,1.6910534052942583,1.690623106244489,1.6901932448297285,1.6897638202716518,1.6893348317939105,1.6889062786221256,1.6884781599838818,1.6880504751087186,1.687623223228127,1.6871964035755413,1.6867700153863328,1.686344057897804,1.6859185303491817,1.6854934319816115,1.68506876203815,1.6846445197637605,1.6842207044053055,1.6837973152115402,1.6833743514331079,1.682951812322532,1.6825296971342112,1.6821080051244124,1.681686735551266,1.6812658876747584,1.6808454607567256,1.6804254540608499,1.6800058668526512,1.6795866983994818,1.6791679479705206,1.6787496148367678,1.678331698271038,1.6779141975479548,1.6774971119439446,1.6770804407372317,1.6766641832078313,1.6762483386375446,1.6758329063099529,1.6754178855104112,1.6750032755260431,1.6745890756457353,1.6741752851601321,1.6737619033616289,1.6733489295443658,1.6729363630042253,1.672524203038823,1.672112448947505,1.6717011000313393,1.6712901555931146,1.6708796149373295,1.6704694773701916,1.6700597421996095,1.669650408735188,1.669241476288224,1.6688329441716987,1.6684248117002733,1.6680170781902852,1.6676097429597403,1.6672028053283086,1.6667962646173198,1.6663901201497568,1.6659843712502511,1.6655790172450777,1.665174057462149,1.6647694912310107,1.6643653178828366,1.6639615367504226,1.663558147168182,1.6631551484721407,1.6627525399999323,1.662350321090792,1.6619484910855524,1.6615470493266382,1.6611459951580623,1.6607453279254185,1.6603450469758785,1.6599451516581862,1.6595456413226533,1.6591465153211535,1.6587477730071185,1.6583494137355328,1.6579514368629285,1.6575538417473807,1.6571566277485035,1.656759794227444,1.656363340546878,1.6559672660710054,1.6555715701655456,1.6551762521977322,1.654781311536309,1.6543867475515244,1.6539925596151277,1.6535987471003641,1.6532053093819694,1.6528122458361674,1.6524195558406625,1.652027238774637,1.6516352940187464,1.6512437209551143,1.6508525189673282,1.6504616874404348,1.6500712257609358,1.6496811333167833,1.6492914094973752,1.6489020536935504,1.6485130652975861,1.6481244437031912,1.6477361883055028,1.6473482985010828,1.646960773687911,1.6465736132653843,1.6461868166343092,1.645800383196899,1.64541431235677,1.6450286035189352,1.6446432560898026,1.6442582694771692,1.6438736430902174,1.6434893763395104,1.6431054686369884,1.6427219193959646,1.6423387280311201,1.6419558939585013,1.6415734165955143,1.641191295360921,1.640809529674836,1.6404281189587218,1.6400470626353845,1.63966636012897,1.6392860108649605,1.638906014270169,1.6385263697727377,1.6381470768021311,1.6377681347891344,1.637389543165848,1.637011301365685,1.6366334088233656,1.6362558649749142,1.6358786692576557,1.6355018211102108,1.635125319972493,1.6347491652857034,1.634373356492328,1.6339978930361345,1.6336227743621665,1.6332479999167413,1.6328735691474452,1.63249948150313,1.63212573643391,1.6317523333911563,1.6313792718274955,1.6310065511968046,1.6306341709542065,1.6302621305560685,1.6298904294599972,1.629519067124834,1.6291480430106533,1.628777356578758,1.6284070072916759,1.6280369946131559,1.627667318008164,1.6272979769428815,1.6269289708846988,1.6265602993022148,1.6261919616652307,1.6258239574447473,1.6254562861129627,1.6250889471432666,1.6247219400102393,1.624355264189646,1.623988919158434,1.6236229043947306,1.6232572193778372,1.6228918635882281,1.6225268365075458,1.6221621376185977,1.6217977664053536,1.6214337223529405,1.6210700049476416,1.620706613676891,1.6203435480292712,1.619980807494509,1.6196183915634739,1.619256299728173,1.6188945314817482,1.6185330863184735,1.6181719637337508,1.6178111632241072,1.617450684287192,1.6170905264217725,1.616730689127732,1.6163711719060654,1.6160119742588763,1.6156530956893749,1.615294535701874,1.6149362938017837,1.614578369495613,1.6142207622909621,1.6138634716965217,1.6135064972220692,1.613149838378466,1.612793494677653,1.612437465632649,1.612081750757548,1.6117263495675138,1.6113712615787792,1.6110164863086418,1.6106620232754618,1.6103078719986577,1.6099540319987045,1.6096005027971299,1.6092472839165115,1.6088943748804743,1.608541775213687,1.6081894844418596,1.6078375020917397,1.6074858276911108,1.6071344607687874,1.6067834008546145,1.606432647479463,1.6060822001752264,1.6057320584748205,1.6053822219121763,1.6050326900222416,1.6046834623409754,1.6043345384053458,1.6039859177533264,1.603637599923895,1.6032895844570298,1.6029418708937058,1.6025944587758942,1.6022473476465569,1.6019005370496462,1.6015540265301003,1.601207815633841,1.6008619039077714,1.600516290899773,1.6001709761587017,1.599825959234388,1.5994812396776301,1.5991368170401952,1.5987926908748142,1.5984488607351808,1.5981053261759464,1.597762086752721,1.5974191420220658,1.5970764915414957,1.5967341348694724,1.5963920715654047,1.5960503011896439,1.5957088233034817,1.595367637469149,1.595026743249811,1.594686140209566,1.594345827913443,1.5940058059273978,1.593666073818312,1.5933266311539898,1.5929874775031547,1.5926486124354478,1.5923100355214255,1.5919717463325567,1.591633744441219,1.5912960294206986,1.5909586008451861,1.5906214582897742,1.5902846013304555,1.5899480295441206,1.5896117425085539,1.589275739802433,1.588940021005326,1.5886045856976874,1.5882694334608571,1.5879345638770586,1.5875999765293944,1.587265671001846,1.58693164687927,1.5865979037473954,1.586264441192823,1.5859312588030212,1.5855983561663243,1.5852657328719304,1.584933388509899,1.5846013226711486,1.5842695349474536,1.5839380249314428,1.5836067922165973,1.5832758363972474,1.582945157068571,1.5826147538265907,1.5822846262681718,1.5819547739910202,1.58162519659368,1.5812958936755304,1.580966864836785,1.5806381096784885,1.5803096278025148,1.5799814188115644,1.579653482309162,1.579325817899656,1.578998425188214,1.578671303780822,1.5783444532842812,1.578017873306207,1.5776915634550257,1.5773655233399733,1.5770397525710924,1.5767142507592309,1.5763890175160389,1.5760640524539675,1.5757393551862664,1.5754149253269807,1.5750907624909505,1.5747668662938072,1.5744432363519736,1.5741198722826582,1.5737967737038565,1.5734739402343476,1.5731513714936918,1.5728290671022291,1.5725070266810766,1.5721852498521265,1.5718637362380445,1.5715424854622682,1.5712214971490024,1.5709007709232214,1.5705803064106627,1.570260103237828,1.569940161031979,1.5696204794211372,1.5693010580340807,1.5689818965003426,1.5686629944502093,1.5683443515147177,1.5680259673256542,1.567707841515552,1.567389973717689,1.5670723635660873,1.566755010695509,1.566437914741456,1.566121075340167,1.5658044921286174,1.5654881647445138,1.565172092826296,1.5648562760131322,1.5645407139449194,1.5642254062622798,1.5639103526065588,1.5635955526198249,1.5632810059448656,1.5629667122251873,1.5626526711050122,1.5623388822292767,1.5620253452436312,1.5617120597944352,1.561399025528758,1.5610862420943747,1.5607737091397669,1.5604614263141194,1.5601493932673174,1.5598376096499467,1.559526075113291,1.55921478930933,1.5589037518907365,1.5585929625108776,1.5582824208238095,1.5579721264842787,1.557662079147717,1.557352278470243,1.5570427241086582,1.556733415720446,1.55642435296377,1.5561155354974714,1.5558069629810685,1.5554986350747546,1.555190551439395,1.5548827117365276,1.5545751156283585,1.554267762777763,1.5539606528482812,1.553653785504119,1.5533471604101436,1.5530407772318846,1.5527346356355296,1.5524287352879251,1.5521230758565725,1.551817657009628,1.5515124784159002,1.5512075397448493,1.5509028406665837,1.5505983808518597,1.5502941599720803,1.549990177699292,1.5496864337061844,1.5493829276660878,1.5490796592529728,1.5487766281414461,1.5484738340067523,1.5481712765247695,1.547868955372009,1.5475668702256136,1.5472650207633556,1.5469634066636355,1.5466620276054808,1.5463608832685427,1.546059973333097,1.545759297480041,1.545458855390892,1.545158646747786,1.5448586712334762,1.5445589285313313,1.544259418325334,1.5439601403000793,1.5436610941407736,1.543362279533232,1.5430636961638777,1.5427653437197402,1.542467221888454,1.542169330358257,1.5418716688179879,1.5415742369570864,1.541277034465591,1.540980061034137,1.540683316353956,1.540386800116873,1.5400905120153068,1.5397944517422666,1.539498618991352,1.5392030134567505,1.538907634833237,1.5386124828161711,1.5383175571014969,1.5380228573857408,1.5377283833660098,1.5374341347399916,1.5371401112059513,1.5368463124627303,1.5365527382097461,1.5362593881469897,1.535966261975025,1.5356733593949856,1.535380680108576,1.535088223818069,1.5347959902263029,1.5345039790366823,1.5342121899531758,1.5339206226803146,1.5336292769231903,1.5333381523874552,1.5330472487793199,1.532756565805552,1.5324661031734745,1.5321758605909646,1.5318858377664533,1.5315960344089228,1.5313064502279046,1.5310170849334803,1.530727938236279,1.5304390098474752,1.530150299478789,1.5298618068424832,1.5295735316513634,1.5292854736187766,1.5289976324586076,1.5287100078852816,1.5284225996137588,1.5281354073595363,1.5278484308386444,1.5275616697676475,1.5272751238636413,1.5269887928442512,1.5267026764276321,1.5264167743324673,1.526131086277966,1.5258456119838628,1.525560351170416,1.5252753035584075,1.5249904688691387,1.524705846824434,1.5244214371466338,1.5241372395585981,1.5238532537837028,1.5235694795458383,1.5232859165694093,1.5230025645793337,1.5227194233010397,1.5224364924604668,1.5221537717840627,1.5218712609987832,1.52158895983209,1.5213068680119508,1.521024985266837,1.520743311325723,1.5204618459180843,1.5201805887738973,1.5198995396236377,1.519618698198279,1.5193380642292917,1.5190576374486415,1.518777417588789,1.5184974043826878,1.5182175975637837,1.5179379968660134,1.5176586020238032,1.5173794127720683,1.5171004288462109,1.516821649982119,1.516543075916167,1.516264706385212,1.5159865411265943,1.5157085798781356,1.515430822378138,1.5151532683653839,1.5148759175791322,1.5145987697591201,1.51432182464556,1.51404508197914,1.5137685415010202,1.5134922029528348,1.5132160660766885,1.5129401306151566,1.5126643963112838,1.5123888629085824,1.5121135301510313,1.5118383977830765,1.5115634655496273,1.5112887331960574,1.5110142004682032,1.5107398671123622,1.5104657328752922,1.5101917975042105,1.509918060746793,1.5096445223511714,1.5093711820659343,1.5090980396401257,1.5088250948232431,1.5085523473652365,1.5082797970165076,1.5080074435279096,1.5077352866507445,1.5074633261367636,1.5071915617381655,1.5069199932075947,1.506648620298142,1.506377442763342,1.5061064603571732,1.505835672834056,1.5055650799488525,1.5052946814568642,1.505024477113833,1.504754466675938,1.5044846498997966,1.504215026542461,1.50394559636142,1.5036763591145954,1.5034073145603424,1.5031384624574489,1.5028698025651335,1.5026013346430447,1.5023330584512606,1.5020649737502871,1.5017970803010574,1.5015293778649308,1.5012618662036916,1.5009945450795488,1.5007274142551337,1.500460473493501,1.5001937225581252,1.4999271612129024,1.4996607892221474,1.4993946063505932,1.4991286123633905,1.4988628070261063,1.4985971901047228,1.4983317613656368,1.498066520575659,1.4978014675020122,1.4975366019123313,1.4972719235746614,1.4970074322574574,1.4967431277295837,1.4964790097603116,1.49621507811932,1.495951332576693,1.4956877729029212,1.495424398868898,1.4951612102459206,1.4948982068056882,1.4946353883203018,1.4943727545622627,1.494110305304471,1.4938480403202274,1.493585959383228,1.493324062267567,1.4930623487477341,1.4928008185986146,1.4925394715954872,1.4922783075140242,1.4920173261302898,1.4917565272207405,1.4914959105622225,1.491235475931972,1.4909752231076134,1.4907151518671604,1.4904552619890126,1.4901955532519555,1.4899360254351606,1.4896766783181838,1.4894175116809638,1.4891585253038222,1.4888997189674629,1.4886410924529705,1.4883826455418094,1.4881243780158233,1.4878662896572343,1.4876083802486422,1.487350649573023,1.4870930974137289,1.486835723554487,1.4865785277793981,1.486321509872937,1.4860646696199502,1.4858080068056567,1.485551521215645,1.4852952126358747,1.4850390808526737,1.4847831256527388,1.484527346823134,1.4842717441512894,1.4840163174250018,1.4837610664324328,1.4835059909621073,1.4832510908029148,1.4829963657441068,1.482741815575296,1.4824874400864572,1.482233239067924,1.4819792123103903,1.4817253596049085,1.481471680742888,1.4812181755160962,1.4809648437166556,1.4807116851370443,1.4804586995700957,1.4802058868089958,1.4799532466472847,1.479700778878854,1.479448483297947,1.4791963596991575,1.4789444078774294,1.4786926276280556,1.4784410187466768,1.4781895810292822,1.477938314272207,1.477687218272133,1.4774362928260865,1.4771855377314393,1.4769349527859061,1.476684537787545,1.476434292534756,1.4761842168262809,1.4759343104612024,1.4756845732389423,1.4754350049592622,1.4751856054222623,1.4749363744283803,1.4746873117783912,1.4744384172734055,1.4741896907148702,1.4739411319045663,1.4736927406446092,1.4734445167374473,1.473196459985862,1.4729485701929665,1.4727008471622052,1.4724532906973518,1.4722059006025114,1.4719586766821169,1.47171161874093,1.4714647265840397,1.4712180000168615,1.4709714388451374,1.4707250428749352,1.4704788119126464,1.4702327457649873,1.469986844238997,1.4697411071420374,1.4694955342817921,1.469250125466266,1.469004880503785,1.4687597992029933,1.4685148813728557,1.468270126822655,1.4680255353619909,1.4677811068007809,1.4675368409492593,1.4672927376179747,1.4670487966177919,1.466805017759889,1.4665614008557584,1.4663179457172055,1.4660746521563472,1.4658315199856127,1.4655885490177418,1.465345739065785,1.4651030899431012,1.4648606014633596,1.4646182734405366,1.464376105688917,1.4641340980230921,1.4638922502579592,1.4636505622087217,1.4634090336908878,1.4631676645202698,1.4629264545129836,1.4626854034854486,1.4624445112543862,1.4622037776368195,1.4619632024500724,1.4617227855117696,1.4614825266398355,1.4612424256524934,1.4610024823682655,1.4607626966059712,1.460523068184728,1.4602835969239492,1.4600442826433444,1.4598051251629183,1.4595661243029705,1.4593272798840946,1.4590885917271779,1.4588500596534,1.458611683484233,1.4583734630414407,1.458135398147077,1.457897488623488,1.4576597342933073,1.4574221349794587,1.4571846905051549,1.456947400693896,1.456710265369469,1.4564732843559483,1.4562364574776938,1.4559997845593513,1.455763265425851,1.4555268999024076,1.4552906878145195,1.455054628987968,1.4548187232488172,1.4545829704234128,1.4543473703383814,1.4541119228206307,1.4538766276973487,1.4536414847960026,1.4534064939443385,1.453171654970381,1.452936967702432,1.4527024319690711,1.452468047599154,1.452233814421813,1.4519997322664553,1.4517658009627632,1.4515320203406932,1.4512983902304752,1.4510649104626125,1.450831580867881,1.450598401277329,1.450365371522275,1.4501324914343094,1.4498997608452924,1.4496671795873546,1.4494347474928941,1.44920246439458,1.4489703301253474,1.4487383445184,1.4485065074072072,1.4482748186255068,1.4480432780073003,1.4478118853868556,1.4475806405987053,1.447349543477646,1.4471185938587376,1.4468877915773033,1.446657136468929,1.4464266283694622,1.4461962671150124,1.4459660525419493,1.4457359844869033,1.4455060627867649,1.4452762872786833,1.445046657800067,1.4448171741885816,1.4445878362821523,1.44435864391896,1.444129596937442,1.443900695176293,1.4436719384744618,1.4434433266711537,1.4432148596058267,1.442986537118195,1.4427583590482242,1.4425303252361346,1.4423024355223968,1.4420746897477354,1.4418470877531253,1.4416196293797925,1.4413923144692136,1.4411651428631143,1.4409381144034703,1.4407112289325061,1.440484486292694,1.440257886326755,1.4400314288776566,1.4398051137886132,1.4395789409030857,1.4393529100647808,1.4391270211176503,1.438901273905891,1.4386756682739437,1.4384502040664935,1.4382248811284677,1.437999699305038,1.4377746584416171,1.4375497583838601,1.437324998977663,1.4371003800691633,1.436875901504738,1.4366515631310046,1.4364273647948198,1.436203306343279,1.4359793876237161,1.435755608483703,1.4355319687710493,1.4353084683338004,1.4350851070202397,1.4348618846788852,1.4346388011584918,1.4344158563080482,1.434193049976778,1.43397038201414,1.433747852269825,1.4335254605937575,1.4333032068360951,1.4330810908472273,1.4328591124777754,1.4326372715785916,1.4324155680007595,1.4321940015955927,1.431972572214635,1.431751279709659,1.431530123932667,1.4313091047358895,1.4310882219717844,1.4308674754930384,1.4306468651525643,1.4304263908035024,1.4302060522992184,1.4299858494933042,1.429765782239577,1.429545850392079,1.4293260538050763,1.4291063923330598,1.4288868658307432,1.4286674741530632,1.42844821715518,1.4282290946924747,1.428010106620552,1.4277912527952357,1.4275725330725717,1.4273539473088264,1.4271354953604858,1.4269171770842555,1.4266989923370603,1.4264809409760437,1.4262630228585673,1.4260452378422106,1.4258275857847704,1.4256100665442608,1.4253926799789118,1.4251754259471694,1.4249583043076965,1.4247413149193695,1.424524457641281,1.4243077323327376,1.4240911388532589,1.4238746770625794,1.4236583468206458,1.4234421479876183,1.4232260804238686,1.4230101439899803,1.422794338546749,1.4225786639551805,1.422363120076492,1.4221477067721107,1.4219324239036732,1.4217172713330255,1.4215022489222233,1.4212873565335298,1.4210725940294167,1.4208579612725636,1.4206434581258574,1.4204290844523917,1.4202148401154668,1.420000724978589,1.4197867389054704,1.4195728817600282,1.4193591534063843,1.4191455537088653,1.4189320825320024,1.4187187397405296,1.4185055251993848,1.4182924387737086,1.418079480328844,1.417866649730336,1.4176539468439318,1.4174413715355794,1.4172289236714277,1.4170166031178268,1.4168044097413262,1.4165923434086753,1.4163804039868233,1.4161685913429178,1.4159569053443053,1.4157453458585303,1.4155339127533355,1.4153226058966606,1.4151114251566426,1.4149003704016152,1.4146894415001077,1.4144786383208467,1.4142679607327528,1.414057408604943,1.413846981806728,1.413636680207614,1.4134265036773,1.4132164520856798,1.4130065253028394,1.4127967231990586,1.4125870456448093,1.4123774925107557,1.4121680636677536,1.4119587589868499,1.4117495783392835,1.4115405215964834,1.4113315886300681,1.4111227793118477,1.410914093513821,1.410705531108176,1.410497091967289,1.4102887759637257,1.41008058297024,1.409872512859773,1.4096645655054532,1.4094567407805962,1.4092490385587049,1.4090414587134674,1.408834001118759,1.4086266656486397,1.4084194521773552,1.408212360579336,1.4080053907291967,1.407798542501737,1.4075918157719403,1.4073852104149724,1.4071787263061837,1.4069723633211064,1.4067661213354559,1.4065600002251284,1.4063539998662038,1.406148120134942,1.405942360907784,1.4057367220613521,1.4055312034724488,1.4053258050180566,1.4051205265753375,1.4049153680216329,1.4047103292344638,1.404505410091529,1.4043006104707063,1.4040959302500509,1.4038913693077963,1.403686927522353,1.4034826047723081,1.4032784009364263,1.4030743158936478,1.402870349523089,1.4026665017040423,1.4024627723159748,1.402259161238529,1.4020556683515222,1.4018522935349456,1.4016490366689647,1.4014458976339186,1.4012428763103197,1.4010399725788534,1.4008371863203781,1.400634517415924,1.400431965746694,1.400229531194062,1.4000272136395744,1.399825012964947,1.3996229290520683,1.3994209617829956,1.399219111039957,1.399017376705351,1.3988157586617445,1.398614256791874,1.3984128709786452,1.3982116011051315,1.3980104470545756,1.3978094087103872,1.397608485956144,1.397407678675591,1.3972069867526398,1.397006410071369,1.3968059485160238,1.396605601971015,1.3964053703209185,1.396205253450477,1.3960052512445973,1.3958053635883516,1.395605590366976,1.395405931465871,1.3952063867706017,1.3950069561668954,1.394807639540644,1.3946084367779013,1.3944093477648845,1.3942103723879729,1.3940115105337074,1.393812762088792,1.3936141269400903,1.393415604974629,1.3932171960795938,1.3930189001423328,1.3928207170503528,1.3926226466913214,1.3924246889530656,1.3922268437235723,1.3920291108909866,1.3918314903436129,1.3916339819699144,1.3914365856585118,1.3912393012981845,1.3910421287778685,1.3908450679866586,1.3906481188138053,1.3904512811487164,1.3902545548809562,1.3900579399002448,1.3898614360964592,1.3896650433596307,1.389468761579947,1.38927259064775,1.389076530453537,1.3888805808879594,1.3886847418418231,1.3884890132060874,1.3882933948718654,1.3880978867304241,1.3879024886731828,1.3877072005917144,1.3875120223777433,1.3873169539231465,1.3871219951199536,1.386927145860345,1.3867324060366528,1.3865377755413606,1.386343254267102,1.3861488421066621,1.3859545389529757,1.3857603446991276,1.3855662592383524,1.3853722824640344,1.385178414269707,1.3849846545490525,1.3847910031959019,1.3845974601042343,1.3844040251681775,1.3842106982820066,1.3840174793401443,1.383824368237161,1.3836313648677736,1.3834384691268464,1.3832456809093903,1.383053000110561,1.3828604266256623,1.382667960350142,1.3824756011795944,1.3822833490097581,1.3820912037365176,1.3818991652559014,1.381707233464083,1.381515408257379,1.381323689532251,1.3811320771853035,1.380940571113285,1.3807491712130862,1.3805578773817413,1.3803666895164273,1.3801756075144629,1.3799846312733095,1.37979376069057,1.3796029956639886,1.379412336091451,1.3792217818709847,1.3790313329007569,1.3788409890790758,1.37865075030439,1.3784606164752886,1.378270587490499,1.37808066324889,1.3778908436494686,1.3777011285913812,1.3775115179739124,1.3773220116964864,1.377132609658665,1.376943311760148,1.3767541179007734,1.3765650279805168,1.3763760418994908,1.376187159557945,1.3759983808562661,1.3758097056949776,1.3756211339747388,1.3754326655963456,1.375244300460729,1.375056038468957,1.3748678795222313,1.3746798235218902,1.3744918703694058,1.3743040199663856,1.3741162722145712,1.3739286270158382,1.3737410842721964,1.3735536438857896,1.3733663057588945,1.373179069793921,1.3729919358934128,1.3728049039600452,1.3726179738966269,1.3724311456060985,1.3722444189915333,1.3720577939561351,1.3718712704032405,1.371684848236317,1.3714985273589633,1.371312307674909,1.371126189088014,1.3709401715022689,1.370754254821795,1.3705684389508428,1.370382723793793,1.3701971092551557,1.37001159523957,1.3698261816518045,1.3696408683967563,1.3694556553794515,1.3692705425050442,1.3690855296788167,1.3689006168061792,1.36871580379267,1.3685310905439547,1.3683464769658256,1.3681619629642026,1.3679775484451326,1.3677932333147886,1.36760901747947,1.3674249008456025,1.3672408833197383,1.3670569648085538,1.3668731452188525,1.3666894244575623,1.3665058024317362,1.3663222790485523,1.366138854215313,1.3659555278394455,1.3657722998285007,1.3655891700901537,1.3654061385322034,1.365223205062572,1.365040369589306,1.3648576320205732,1.3646749922646655,1.3644924502299973,1.3643100058251059,1.3641276589586493,1.3639454095394095,1.3637632574762888,1.363581202678312,1.3633992450546248,1.3632173845144948,1.3630356209673093,1.362853954322578,1.3626723844899293,1.3624909113791137,1.3623095349000007,1.3621282549625804,1.3619470714769624,1.3617659843533751,1.3615849935021678,1.3614040988338072,1.3612233002588803,1.3610425976880918,1.3608619910322657,1.360681480202343,1.3605010651093845,1.360320745664568,1.3601405217791886,1.3599603933646596,1.359780360332511,1.3596004225943898,1.3594205800620611,1.3592408326474055,1.3590611802624195,1.3588816228192178,1.3587021602300293,1.3585227924072,1.3583435192631907,1.3581643407105788,1.3579852566620554,1.3578062670304283,1.3576273717286185,1.3574485706696633,1.3572698637667138,1.3570912509330346,1.3569127320820062,1.3567343071271216,1.3565559759819872,1.3563777385603246,1.3561995947759673,1.356021544542862,1.355843587775069,1.355665724386761,1.3554879542922231,1.355310277405853,1.3551326936421604,1.3549552029157668,1.354777805141406,1.3546005002339234,1.3544232881082752,1.3542461686795289,1.3540691418628632,1.3538922075735682,1.3537153657270438,1.3535386162388006,1.3533619590244597,1.353185393999752,1.3530089210805187,1.3528325401827102,1.352656251222387,1.352480054115718,1.3523039487789823,1.3521279351285675,1.3519520130809701,1.351776182552795,1.3516004434607556,1.3514247957216736,1.3512492392524789,1.3510737739702088,1.3508983997920088,1.350723116635132,1.3505479244169376,1.3503728230548937,1.3501978124665743,1.3500228925696602,1.3498480632819396,1.349673324521306,1.3494986762057595,1.349324118253407,1.3491496505824607,1.3489752731112383,1.3488009857581633,1.3486267884417646,1.3484526810806765,1.3482786635936375,1.3481047358994918,1.3479308979171876,1.3477571495657783,1.347583490764421,1.347409921432377,1.3472364414890117,1.347063050853794,1.346889749446297,1.346716537186197,1.346543413993273,1.346370379787408,1.3461974344885868,1.3460245780168978,1.345851810292532,1.3456791312357823,1.3455065407670441,1.345334038806815,1.345161625275694,1.344989300094382,1.3448170631836822,1.3446449144644979,1.3444728538578348,1.344300881284799,1.344128996666597,1.3439571999245374,1.343785490980028,1.3436138697545776,1.3434423361697954,1.34327089014739,1.3430995316091703,1.3429282604770452,1.3427570766730224,1.342585980119209,1.3424149707378128,1.3422440484511382,1.3420732131815907,1.3419024648516735,1.3417318033839882,1.3415612287012353,1.3413907407262133,1.3412203393818187,1.3410500245910462,1.3408797962769874,1.3407096543628332,1.34053959877187,1.3403696294274827,1.340199746253153,1.340029949172459,1.3398602381090767,1.3396906129867774,1.3395210737294305,1.3393516202609999,1.3391822525055468,1.3390129703872282,1.3388437738302967,1.3386746627591009,1.3385056370980846,1.338336696771787,1.3381678417048428,1.3379990718219819,1.337830387048028,1.3376617873079006,1.3374932725266138,1.3373248426292754,1.3371564975410881,1.3369882371873485,1.3368200614934471,1.3366519703848683,1.3364839637871901,1.3363160416260844,1.3361482038273156,1.335980450316742,1.335812781020315,1.3356451958640785,1.335477694774169,1.3353102776768166,1.3351429444983425,1.334975695165161,1.3348085296037786,1.3346414477407935,1.3344744495028957,1.3343075348168671,1.334140703609581,1.3339739558080024,1.333807291339187,1.333640710130282,1.333474212108526,1.3333077972012468,1.3331414653358649,1.3329752164398898,1.3328090504409222,1.3326429672666527,1.3324769668448617,1.3323110491034202,1.3321452139702883,1.3319794613735163,1.3318137912412433,1.331648203501699,1.3314826980832009,1.3313172749141557,1.3311519339230604,1.3309866750384993,1.3308214981891457,1.330656403303762,1.3304913903111981,1.3303264591403927,1.3301616097203723,1.329996841980251,1.3298321558492316,1.3296675512566034,1.329503028131744,1.329338586404118,1.3291742260032775,1.3290099468588614,1.3288457489005954,1.3286816320582924,1.3285175962618516,1.328353641441259,1.3281897675265868,1.3280259744479932,1.3278622621357234,1.3276986305201073,1.3275350795315615,1.3273716091005878,1.3272082191577743,1.3270449096337935,1.326881680459404,1.3267185315654486,1.3265554628828564,1.3263924743426405,1.3262295658758987,1.3260667374138133,1.325903988887652,1.325741320228766,1.3255787313685905,1.3254162222386456,1.3252537927705346,1.3250914428959446,1.3249291725466468,1.3247669816544958,1.3246048701514297,1.3244428379694693,1.3242808850407186,1.3241190112973658,1.32395721667168,1.3237955010960147,1.3236338645028052,1.3234723068245695,1.3233108279939079,1.3231494279435025,1.3229881066061182,1.3228268639146015,1.3226656998018806,1.3225046142009653,1.3223436070449475,1.3221826782669999,1.322021827800377,1.321861055578414,1.3217003615345277,1.321539745602215,1.3213792077150548,1.3212187478067052,1.3210583658109059,1.3208980616614767,1.3207378352923178,1.320577686637409,1.320417615630811,1.3202576222066635,1.3200977062991868,1.31993786784268,1.3197781067715226,1.3196184230201728,1.3194588165231684,1.3192992872151263,1.3191398350307426,1.3189804599047918,1.3188211617721275,1.318661940567682,1.3185027962264664,1.3183437286835693,1.3181847378741585,1.3180258237334794,1.3178669861968557,1.3177082251996894,1.317549540677459,1.3173909325657223,1.3172324008001133,1.3170739453163447,1.3169155660502048,1.316757262937561,1.3165990359143565,1.3164408849166116,1.316282809880424,1.3161248107419674,1.3159668874374928,1.3158090399033269,1.3156512680758734,1.3154935718916116,1.315335951287098,1.3151784061989633,1.315020936563916,1.3148635423187391,1.3147062234002918,1.3145489797455086,1.3143918112913993,1.3142347179750493,1.3140776997336188,1.3139207565043434,1.3137638882245333,1.313607094831574,1.3134503762629253,1.3132937324561214,1.3131371633487714,1.312980668878559,1.3128242489832411,1.3126679036006499,1.312511632668691,1.3123554361253436,1.3121993139086614,1.3120432659567711,1.311887292207874,1.3117313926002434,1.3115755670722273,1.3114198155622456,1.3112641380087922,1.3111085343504338,1.31095300452581,1.310797548473633,1.3106421661326877,1.3104868574418318,1.310331622339995,1.3101764607661794,1.3100213726594596,1.3098663579589822,1.3097114166039656,1.3095565485337004,1.3094017536875484,1.3092470320049434,1.309092383425391,1.3089378078884675,1.3087833053338216,1.308628875701172,1.3084745189303095,1.3083202349610954,1.3081660237334618,1.308011885187412,1.3078578192630195,1.3077038259004286,1.307549905039854,1.3073960566215812,1.307242280585965,1.307088576873431,1.3069349454244747,1.3067813861796616,1.3066278990796265,1.3064744840650748,1.3063211410767805,1.3061678700555879,1.3060146709424105,1.3058615436782304,1.3057084882040997,1.3055555044611393,1.305402592390539,1.3052497519335577,1.3050969830315224,1.3049442856258295,1.3047916596579436,1.304639105069398,1.3044866218017934,1.3043342097968,1.3041818689961557,1.304029599341666,1.3038774007752045,1.303725273238713,1.3035732166742007,1.3034212310237443,1.3032693162294882,1.3031174722336443,1.3029656989784917,1.3028139964063765,1.3026623644597122,1.3025108030809793,1.3023593122127248,1.302207891797563,1.3020565417781749,1.301905262097307,1.3017540526977742,1.3016029135224563,1.3014518445143,1.3013008456163175,1.3011499167715885,1.3009990579232575,1.300848269014535,1.300697549988698,1.3005469007890884,1.300396321359114,1.3002458116422486,1.3000953715820305,1.299945001122064,1.299794700206018,1.2996444687776272,1.2994943067806908,1.2993442141590734,1.2991941908567035,1.2990442368175754,1.2988943519857474,1.2987445363053427,1.298594789720548,1.2984451121756158,1.2982955036148618,1.2981459639826658,1.2979964932234722,1.297847091281789,1.297697758102188,1.2975484936293054,1.29739929780784,1.2972501705825545,1.297101111898276,1.2969521216998936,1.2968031999323608,1.296654346540694,1.2965055614699714,1.2963568446653364,1.296208196071994,1.296059615635212,1.295911103300321,1.2957626590127145,1.2956142827178487,1.2954659743612416,1.2953177338884738,1.2951695612451883,1.2950214563770903,1.294873419229947,1.294725449749587,1.2945775478819017,1.294429713572844,1.2942819467684281,1.2941342474147304,1.2939866154578883,1.2938390508441007,1.293691553519628,1.293544123430792,1.2933967605239753,1.293249464745622,1.2931022360422366,1.2929550743603848,1.292807979646693,1.2926609518478482,1.292513990910599,1.2923670967817524,1.2922202694081781,1.292073508736805,1.2919268147146221,1.2917801872886794,1.291633626406086,1.2914871320140113,1.2913407040596852,1.2911943424903969,1.291048047253495,1.2909018182963885,1.2907556555665454,1.2906095590114934,1.290463528578819,1.2903175642161693,1.2901716658712494,1.2900258334918235,1.289880067025716,1.2897343664208087,1.2895887316250434,1.2894431625864198,1.2892976592529972,1.289152221572893,1.2890068494942832,1.2888615429654018,1.2887163019345416,1.2885711263500534,1.2884260161603467,1.2882809713138883,1.2881359917592035,1.2879910774448755,1.287846228319545,1.2877014443319106,1.2875567254307292,1.2874120715648139,1.2872674826830364,1.2871229587343251,1.2869784996676668,1.2868341054321042,1.286689775976738,1.2865455112507256,1.2864013112032817,1.2862571757836778,1.2861131049412415,1.2859690986253587,1.2858251567854704,1.2856812793710752,1.2855374663317274,1.2853937176170382,1.2852500331766754,1.2851064129603624,1.2849628569178788,1.284819364999061,1.2846759371538004,1.2845325733320452,1.2843892734837992,1.2842460375591211,1.2841028655081272,1.283959757280987,1.2838167128279274,1.28367373209923,1.2835308150452316,1.2833879616163244,1.283245171762956,1.2831024454356292,1.2829597825849015,1.282817183161385,1.2826746471157477,1.2825321743987117,1.2823897649610543,1.2822474187536064,1.2821051357272544,1.281962915832939,1.2818207590216555,1.2816786652444527,1.2815366344524346,1.281394666596759,1.2812527616286378,1.2811109194993366,1.2809691401601753,1.2808274235625277,1.280685769657821,1.2805441783975366,1.2804026497332095,1.2802611836164273,1.2801197799988322,1.2799784388321194,1.2798371600680372,1.2796959436583877,1.2795547895550254,1.2794136977098585,1.2792726680748479,1.2791317006020078,1.2789907952434048,1.2788499519511582,1.278709170677441,1.2785684513744773,1.278427793994545,1.2782871984899742,1.2781466648131472,1.2780061929164983,1.2778657827525148,1.277725434273736,1.277585147432753,1.277444922182209,1.2773047584747994,1.277164656263271,1.2770246155004232,1.2768846361391064,1.2767447181322231,1.2766048614327272,1.276465065993624,1.276325331767971,1.2761856587088758,1.276046046769498,1.275906495903049,1.2757670060627901,1.2756275772020347,1.275488209274147,1.2753489022325415,1.2752096560306845,1.2750704706220921,1.2749313459603324,1.2747922819990227,1.274653278691832,1.2745143359924793,1.2743754538547338,1.274236632232416,1.2740978710793953,1.2739591703495925,1.2738205299969783,1.2736819499755727,1.2735434302394468,1.2734049707427213,1.2732665714395661,1.2731282322842017,1.2729899532308977,1.272851734233974,1.2727135752477998,1.2725754762267936,1.2724374371254235,1.272299457898207,1.272161538499711,1.2720236788845511,1.271885879007393,1.271748138822951,1.271610458285988,1.2714728373513164,1.2713352759737977,1.2711977741083416,1.2710603317099065,1.2709229487335003,1.270785625134179,1.270648360867047,1.2705111558872573,1.2703740101500114,1.2702369236105593,1.270099896224199,1.2699629279462763,1.2698260187321864,1.2696891685373712,1.2695523773173218,1.269415645027576,1.2692789716237203,1.2691423570613891,1.269005801296264,1.2688693042840744,1.2687328659805979,1.2685964863416586,1.2684601653231287,1.268323902880928,1.2681876989710232,1.2680515535494286,1.2679154665722052,1.2677794379954619,1.267643467775354,1.2675075558680842,1.2673717022299018,1.2672359068171033,1.267100169586032,1.2669644904930777,1.2668288694946772,1.2666933065473136,1.2665578016075167,1.266422354631863,1.2662869655769748,1.2661516343995214,1.2660163610562183,1.2658811455038266,1.2657459876991546,1.265610887599056,1.2654758451604307,1.2653408603402243,1.2652059330954288,1.265071063383082,1.2649362511602669,1.2648014963841128,1.2646667990117946,1.2645321590005327,1.2643975763075925,1.2642630508902861,1.2641285827059698,1.2639941717120462,1.263859817865962,1.26372552112521,1.2635912814473285,1.2634570987898999,1.263322973110552,1.263188904366958,1.2630548925168352,1.2629209375179467,1.2627870393280998,1.262653197905146,1.2625194132069828,1.2623856851915514,1.2622520138168374,1.2621183990408713,1.2619848408217278,1.2618513391175263,1.26171789388643,1.2615845050866465,1.261451172676428,1.2613178966140697,1.2611846768579122,1.2610515133663394,1.2609184060977787,1.2607853550107027,1.2606523600636261,1.2605194212151085,1.2603865384237531,1.2602537116482064,1.2601209408471588,1.2599882259793433,1.2598555670035378,1.2597229638785625,1.2595904165632812,1.2594579250166011,1.2593254891974726,1.2591931090648891,1.2590607845778872,1.2589285156955465,1.25879630237699,1.2586641445813824,1.2585320422679325,1.2583999953958915,1.2582680039245533,1.2581360678132545,1.2580041870213743,1.2578723615083343,1.2577405912335988,1.2576088761566748,1.2574772162371113,1.2573456114344996,1.2572140617084735,1.2570825670187094,1.2569511273249245,1.2568197425868801,1.2566884127643778,1.256557137817262,1.256425917705419,1.2562947523887766,1.256163641827305,1.2560325859810157,1.2559015848099624,1.2557706382742395,1.2556397463339841,1.2555089089493743,1.2553781260806296,1.2552473976880112,1.255116723731821,1.2549861041724035,1.2548555389701435,1.2547250280854667,1.254594571478841,1.2544641691107747,1.254333820941817,1.2542035269325587,1.2540732870436309,1.2539431012357058,1.253812969469497,1.2536828917057579,1.2535528679052828,1.2534228980289073,1.2532929820375067,1.2531631198919977,1.253033311553337,1.2529035569825218,1.2527738561405897,1.2526442089886183,1.252514615487726,1.2523850755990715,1.252255589283853,1.2521261565033093,1.2519967772187188,1.2518674513914003,1.2517381789827131,1.2516089599540547,1.2514797942668643,1.2513506818826197,1.2512216227628388,1.2510926168690792,1.250963664162938,1.250834764606052,1.2507059181600977,1.2505771247867905,1.2504483844478858,1.2503196971051778,1.2501910627205006,1.2500624812557273,1.2499339526727702,1.2498054769335802,1.2496770540001485,1.2495486838345045,1.249420366398716,1.2492921016548915,1.2491638895651769,1.2490357300917576,1.2489076231968574,1.2487795688427392,1.2486515669917044,1.2485236176060928,1.2483957206482834,1.248267876080693,1.2481400838657775,1.2480123439660307,1.2478846563439854,1.247757020962212,1.2476294377833197,1.2475019067699555,1.247374427884805,1.2472470010905918,1.2471196263500774,1.2469923036260613,1.2468650328813815,1.246737814078913,1.2466106471815692,1.2464835321523018,1.2463564689540991,1.2462294575499882,1.2461024979030333,1.2459755899763363,1.2458487337330368,1.2457219291363115,1.2455951761493755,1.2454684747354805,1.2453418248579156,1.2452152264800072,1.2450886795651197,1.244962184076654,1.2448357399780483,1.2447093472327782,1.2445830058043559,1.2444567156563309,1.2443304767522898,1.2442042890558558,1.2440781525306897,1.2439520671404878,1.2438260328489845,1.2437000496199506,1.2435741174171928,1.2434482362045554,1.2433224059459187,1.2431966266052001,1.243070898146353,1.2429452205333675,1.2428195937302697,1.2426940177011225,1.242568492410025,1.2424430178211123,1.2423175938985562,1.2421922206065643,1.2420668979093803,1.2419416257712839,1.241816404156591,1.2416912330296535,1.241566112354859,1.2414410420966313,1.2413160222194297,1.2411910526877497,1.241066133466122,1.2409412645191131,1.2408164458113256,1.240691677307397,1.2405669589720014,1.2404422907698467,1.2403176726656784,1.2401931046242753,1.240068586610453,1.2399441185890623,1.2398197005249882,1.2396953323831523,1.2395710141285103,1.2394467457260534,1.2393225271408084,1.2391983583378365,1.239074239282234,1.2389501699391323,1.2388261502736977,1.238702180251131,1.2385782598366686,1.2384543889955806,1.2383305676931728,1.2382067958947853,1.2380830735657928,1.2379594006716041,1.2378357771776638,1.2377122030494498,1.2375886782524748,1.2374652027522863,1.2373417765144656,1.2372183995046289,1.237095071688426,1.2369717930315416,1.236848563499694,1.236725383058636,1.2366022516741544,1.2364791693120702,1.236356135938238,1.2362331515185472,1.23611021601892,1.2359873294053132,1.2358644916437174,1.2357417027001567,1.2356189625406888,1.2354962711314061,1.2353736284384338,1.2352510344279306,1.2351284890660892,1.2350059923191354,1.2348835441533295,1.2347611445349638,1.234638793430365,1.234516490805893,1.2343942366279408,1.2342720308629347,1.2341498734773342,1.2340277644376318,1.2339057037103542,1.2337836912620601,1.2336617270593413,1.2335398110688232,1.2334179432571637,1.2332961235910538,1.2331743520372171,1.233052628562411,1.2329309531334247,1.2328093257170802,1.2326877462802328,1.2325662147897705,1.232444731212613,1.2323232955157135,1.2322019076660575,1.232080567630663,1.2319592753765802,1.2318380308708925,1.2317168340807148,1.2315956849731946,1.2314745835155119,1.2313535296748792,1.2312325234185406,1.2311115647137727,1.2309906535278843,1.230869789828216,1.230748973582141,1.230628204757064,1.2305074833204217,1.2303868092396832,1.230266182482349,1.2301456030159519,1.2300250708080558,1.2299045858262572,1.229784148038184,1.2296637574114953,1.229543413913883,1.229423117513069,1.2293028681768086,1.2291826658728868,1.2290625105691217,1.2289424022333622,1.2288223408334882,1.2287023263374113,1.2285823587130744,1.2284624379284521,1.22834256395155,1.228222736750404,1.2281029562930827,1.227983222547685,1.227863535482341,1.227743895065212,1.2276243012644896,1.2275047540483977,1.2273852533851897,1.227265799243151,1.2271463915905974,1.2270270303958757,1.226907715627363,1.2267884472534676,1.2266692252426283,1.2265500495633148,1.2264309201840273,1.2263118370732964,1.2261928001996834,1.2260738095317802,1.225954865038209,1.2258359666876228,1.2257171144487045,1.2255983082901671,1.225479548180755,1.2253608340892421,1.2252421659844326,1.225123543835161,1.2250049676102923,1.2248864372787207,1.2247679528093713,1.224649514171199,1.224531121333189,1.224412774264356,1.2242944729337448,1.2241762173104302,1.224058007363517,1.2239398430621393,1.2238217243754617,1.2237036512726778,1.2235856237230114,1.223467641695716,1.2233497051600741,1.2232318140853993,1.2231139684410328,1.222996168196347,1.2228784133207427,1.2227607037836503,1.2226430395545302,1.222525420602872,1.222407846898194,1.2222903184100447,1.2221728351080015,1.2220553969616703,1.2219380039406877,1.221820656014718,1.2217033531534558,1.2215860953266238,1.2214688825039743,1.221351714655289,1.2212345917503775,1.221117513759079,1.221000480651262,1.2208834923968228,1.2207665489656878,1.220649650327811,1.220532796453176,1.2204159873117946,1.2202992228737077,1.220182503108985,1.220065827987724,1.2199491974800514,1.2198326115561222,1.2197160701861205,1.219599573340258,1.219483120988776,1.2193667131019423,1.2192503496500553,1.21913403060344,1.2190177559324507,1.2189015256074698,1.2187853395989074,1.2186691978772026,1.218553100412822,1.2184370471762604,1.2183210381380414,1.2182050732687155,1.2180891525388624,1.217973275919089,1.2178574433800304,1.2177416548923494,1.2176259104267373,1.2175102099539126,1.2173945534446216,1.2172789408696392,1.217163372199767,1.217047847405835,1.2169323664587008,1.2168169293292495,1.2167015359883935,1.2165861864070735,1.2164708805562567,1.2163556184069395,1.2162403999301439,1.2161252250969206,1.2160100938783471,1.2158950062455285,1.215779962169597,1.2156649616217126,1.215550004573062,1.2154350909948597,1.2153202208583467,1.2152053941347922,1.2150906107954915,1.214975870811767,1.2148611741549697,1.2147465207964758,1.2146319107076893,1.214517343860041,1.2144028202249892,1.2142883397740185,1.2141739024786402,1.2140595083103933,1.2139451572408426,1.2138308492415806,1.2137165842842257,1.2136023623404237,1.2134881833818467,1.2133740473801935,1.2132599543071896,1.213145904134587,1.213031896834164,1.212917932377726,1.2128040107371048,1.2126901318841579,1.21257629579077,1.2124625024288518,1.2123487517703406,1.2122350437872,1.2121213784514195,1.2120077557350148,1.2118941756100292,1.2117806380485303,1.2116671430226131,1.211553690504398,1.2114402804660322,1.2113269128796884,1.2112135877175656,1.2111003049518887,1.2109870645549086,1.2108738664989023,1.2107607107561722,1.2106475972990474,1.2105345260998819,1.2104214971310563,1.2103085103649767,1.2101955657740746,1.210082663330808,1.2099698030076598,1.209856984777139,1.20974420861178,1.2096314744841428,1.2095187823668134,1.209406132232403,1.2092935240535478,1.2091809578029107,1.2090684334531787,1.208955950977065,1.2088435103473083,1.208731111536672,1.208618754517945,1.2085064392639422,1.2083941657475028,1.2082819339414919,1.2081697438187995,1.2080575953523405,1.2079454885150553,1.2078334232799097,1.2077213996198939,1.2076094175080232,1.2074974769173388,1.207385577820906,1.2072737201918151,1.2071619040031816,1.207050129228146,1.2069383958398732,1.2068267038115532,1.2067150531164013,1.206603443727657,1.2064918756185838,1.2063803487624718,1.206268863132634,1.2061574187024093,1.2060460154451604,1.205934653334275,1.2058233323431653,1.205712052445268,1.2056008136140444,1.20548961582298,1.2053784590455852,1.2052673432553942,1.2051562684259662,1.2050452345308846,1.2049342415437572,1.2048232894382154,1.2047123781879157,1.2046015077665388,1.2044906781477889,1.2043798893053954,1.2042691412131108,1.2041584338447129,1.2040477671740022,1.2039371411748048,1.2038265558209693,1.2037160110863696,1.203605506944903,1.203495043370491,1.203384620337078,1.203274237818634,1.203163895789152,1.2030535942226486,1.2029433330931643,1.202833112374764,1.2027229320415354,1.202612792067591,1.202502692427066,1.2023926330941201,1.2022826140429361,1.2021726352477207,1.2020626966827037,1.2019527983221392,1.2018429401403043,1.2017331221114995,1.2016233442100497,1.2015136064103022,1.2014039086866282,1.201294251013422,1.2011846333651015,1.2010750557161083,1.2009655180409065,1.200856020313984,1.200746562509852,1.2006371446030444,1.2005277665681193,1.2004184283796566,1.200309130012261,1.2001998714405586,1.2000906526391997,1.1999814735828573,1.1998723342462276,1.1997632346040297,1.1996541746310057,1.1995451543019207,1.1994361735915622,1.1993272324747417,1.1992183309262925,1.1991094689210715,1.199000646433958,1.198891863439854,1.1987831199136847,1.1986744158303977,1.1985657511649632,1.1984571258923746,1.1983485399876477,1.1982399934258205,1.1981314861819543,1.1980230182311327,1.1979145895484615,1.1978062001090697,1.197697849888108,1.1975895388607505,1.1974812670021926,1.1973730342876534,1.1972648406923736,1.1971566861916163,1.197048570760667,1.196940494374834,1.196832457009447,1.1967244586398584,1.1966164992414434,1.1965085787895984,1.1964006972597427,1.1962928546273173,1.1961850508677858,1.1960772859566333,1.1959695598693678,1.1958618725815182,1.195754224068637,1.195646614306297,1.1955390432700943,1.1954315109356464,1.1953240172785922,1.195216562274594,1.1951091458993344,1.1950017681285183,1.1948944289378731,1.1947871283031475,1.1946798662001117,1.1945726426045582,1.1944654574923006,1.1943583108391747,1.194251202621038,1.194144132813769,1.1940371013932685,1.193930108335459,1.1938231536162838,1.1937162372117085,1.1936093590977197,1.1935025192503257,1.193395717645556,1.1932889542594627,1.1931822290681173,1.1930755420476147,1.1929688931740698,1.1928622824236195,1.192755709772422,1.1926491751966564,1.1925426786725233,1.1924362201762446,1.1923297996840638,1.1922234171722446,1.192117072617073,1.1920107659948551,1.1919044972819188,1.1917982664546132,1.1916920734893077,1.1915859183623936,1.191479801050283,1.1913737215294085,1.1912676797762245,1.1911616757672052,1.1910557094788472,1.1909497808876666,1.1908438899702016,1.1907380367030103,1.190632221062672,1.190526443025787,1.1904207025689761,1.1903149996688809,1.1902093343021638,1.190103706445508,1.1899981160756172,1.1898925631692159,1.189787047703049,1.1896815696538825,1.1895761289985025,1.1894707257137163,1.1893653597763507,1.1892600311632537,1.189154739851294,1.1890494858173606,1.1889442690383627,1.18883908949123,1.1887339471529126,1.1886288420003814,1.188523774010627,1.1884187431606608,1.1883137494275147,1.1882087927882399,1.188103873219909,1.1879989906996142,1.187894145204468,1.1877893367116032,1.187684565198173,1.1875798306413499,1.1874751330183277,1.1873704723063196,1.187265848482559,1.187161261524299,1.1870567114088133,1.1869521981133955,1.1868477216153588,1.186743281892037,1.1866388789207831,1.1865345126789708,1.186430183143993,1.1863258902932627,1.186221634104213,1.1861174145542968,1.186013231620986,1.1859090852817737,1.1858049755141715,1.1857009022957115,1.185596865603945,1.1854928654164434,1.1853889017107975,1.185284974464618,1.1851810836555348,1.185077229261198,1.1849734112592765,1.1848696296274597,1.1847658843434556,1.1846621753849926,1.184558502729818,1.1844548663556984,1.1843512662404203,1.18424770236179,1.184144174697632,1.184040683225791,1.1839372279241314,1.183833808770536,1.1837304257429075,1.183627078819168,1.1835237679772581,1.1834204931951389,1.1833172544507893,1.1832140517222085,1.1831108849874148,1.1830077542244448,1.182904659411355,1.182801600526221,1.182698577547137,1.182595590452217,1.1824926392195934,1.1823897238274177,1.182286844253861,1.1821840004771127,1.1820811924753816,1.1819784202268953,1.1818756837099,1.1817729829026615,1.181670317783464,1.1815676883306108,1.1814650945224234,1.181362536337243,1.1812600137534293,1.1811575267493606,1.1810550753034337,1.1809526593940651,1.1808502789996889,1.1807479340987586,1.180645624669746,1.180543350691142,1.1804411121414555,1.1803389089992145,1.1802367412429655,1.1801346088512732,1.1800325118027213,1.179930450075912,1.1798284236494656,1.1797264325020211,1.1796244766122364,1.179522555958787,1.1794206705203676,1.1793188202756908,1.1792170052034874,1.1791152252825075,1.1790134804915187,1.1789117708093066,1.1788100962146768,1.178708456686451,1.1786068522034705,1.1785052827445945,1.1784037482887004,1.1783022488146841,1.1782007843014588,1.178099354727957,1.1779979600731285,1.1778966003159415,1.1777952754353822,1.1776939854104553,1.1775927302201827,1.1774915098436052,1.1773903242597812,1.1772891734477868,1.1771880573867166,1.1770869760556835,1.1769859294338167,1.1768849175002654,1.176783940234195,1.17668299761479,1.1765820896212515,1.1764812162328,1.1763803774286723,1.176279573188124,1.1761788034904277,1.1760780683148748,1.1759773676407732,1.1758767014474494,1.1757760697142472,1.1756754724205285,1.175574909545672,1.1754743810690749,1.1753738869701515,1.175273427228334,1.1751730018230722,1.1750726107338332,1.1749722539401013,1.1748719314213794,1.1747716431571869,1.174671389127061,1.1745711693105567,1.1744709836872456,1.1743708322367177,1.1742707149385798,1.1741706317724563,1.1740705827179887,1.1739705677548362,1.173870586862675,1.1737706400211991,1.1736707272101192,1.1735708484091634,1.1734710035980773,1.1733711927566235,1.173271415864582,1.1731716729017498,1.1730719638479414,1.172972288682988,1.172872647386738,1.172773039939057,1.1726734663198282,1.172573926508951,1.1724744204863426,1.1723749482319368,1.1722755097256843,1.1721761049475534,1.1720767338775286,1.1719773964956124,1.1718780927818229,1.1717788227161965,1.1716795862787854,1.1715803834496596,1.171481214208905,1.1713820785366253,1.1712829764129407,1.1711839078179873,1.1710848727319196,1.170985871134908,1.1708869030071396,1.1707879683288185,1.1706890670801653,1.1705901992414174,1.170491364792829,1.1703925637146708,1.1702937959872304,1.1701950615908117,1.1700963605057355,1.1699976927123388,1.1698990581909758,1.1698004569220166,1.1697018888858481,1.169603354062874,1.1695048524335145,1.1694063839782054,1.1693079486774,1.1692095465115677,1.169111177461194,1.1690128415067815,1.1689145386288484,1.1688162688079302,1.1687180320245778,1.168619828259359,1.1685216574928579,1.1684235197056747,1.1683254148784261,1.168227342991745,1.1681293040262803,1.168031297962698,1.167933324781679,1.167835384463921,1.1677374769901387,1.1676396023410618,1.1675417604974365,1.1674439514400252,1.1673461751496066,1.1672484316069753,1.167150720792942,1.1670530426883332,1.166955397273992,1.166857784530777,1.166760204439563,1.166662656981241,1.166565142136718,1.1664676598869161,1.1663702102127746,1.1662727930952477,1.166175408515306,1.166078056453936,1.1659807368921398,1.1658834498109356,1.1657861951913573,1.1656889730144546,1.1655917832612934,1.1654946259129546,1.1653975009505355,1.165300408355149,1.1652033481079236,1.1651063201900038,1.1650093245825492,1.164912361266736,1.164815430223755,1.1647185314348136,1.164621664881134,1.164524830543955,1.1644280284045299,1.1643312584441283,1.1642345206440354,1.1641378149855515,1.1640411414499925,1.1639445000186903,1.1638478906729917,1.1637513133942592,1.163654768163871,1.1635582549632202,1.163461773773716,1.1633653245767825,1.1632689073538596,1.163172522086402,1.1630761687558804,1.1629798473437805,1.1628835578316032,1.162787300200865,1.1626910744330976,1.162594880509848,1.1624987184126787,1.1624025881231665,1.1623064896229047,1.162210422893501,1.1621143879165787,1.162018384673776,1.1619224131467463,1.1618264733171582,1.1617305651666956,1.1616346886770572,1.1615388438299572,1.1614430306071244,1.1613472489903032,1.1612514989612523,1.1611557805017465,1.1610600935935746,1.1609644382185411,1.160868814358465,1.1607732219951805,1.1606776611105367,1.1605821316863982,1.1604866337046433,1.1603911671471663,1.160295731995876,1.1602003282326958,1.1601049558395646,1.1600096147984356,1.159914305091277,1.1598190267000719,1.159723779606818,1.159628563793528,1.1595333792422293,1.1594382259349638,1.1593431038537885,1.1592480129807747,1.1591529532980094,1.1590579247875927,1.1589629274316406,1.1588679612122834,1.1587730261116658,1.1586781221119475,1.158583249195303,1.1584884073439201,1.158393596540003,1.158298816765769,1.158204068003451,1.1581093502352957,1.1580146634435644,1.1579200076105334,1.1578253827184928,1.1577307887497479,1.1576362256866177,1.1575416935114362,1.1574471922065517,1.1573527217543267,1.1572582821371382,1.1571638733373777,1.157069495337451,1.1569751481197779,1.1568808316667933,1.1567865459609457,1.1566922909846984,1.1565980667205285,1.1565038731509274,1.1564097102584014,1.1563155780254706,1.156221476434669,1.1561274054685455,1.1560333651096628,1.1559393553405977,1.1558453761439411,1.1557514275022984,1.1556575093982893,1.1555636218145469,1.1554697647337189,1.1553759381384672,1.155282142011467,1.1551883763354087,1.155094641092996,1.1550009362669469,1.1549072618399927,1.1548136177948805,1.154720004114369,1.154626420781233,1.1545328677782596,1.154439345088251,1.1543458526940231,1.154252390578405,1.1541589587242407,1.1540655571143872,1.153972185731716,1.1538788445591124,1.1537855335794749,1.1536922527757165,1.153599002130764,1.1535057816275576,1.1534125912490516,1.153319430978214,1.1532263007980263,1.153133200691484,1.1530401306415965,1.1529470906313866,1.1528540806438905,1.1527611006621588,1.1526681506692555,1.152575230648258,1.1524823405822575,1.1523894804543588,1.1522966502476806,1.1522038499453549,1.1521110795305272,1.1520183389863563,1.1519256282960157,1.1518329474426914,1.151740296409583,1.151647675179904,1.1515550837368813,1.151462522063755,1.151369990143779,1.1512774879602206,1.1511850154963599,1.151092572735492,1.1510001596609234,1.1509077762559756,1.1508154225039826,1.1507230983882923,1.1506308038922652,1.1505385389992764,1.150446303692713,1.1503540979559763,1.1502619217724805,1.150169775125653,1.150077657998935,1.1499855703757802,1.1498935122396563,1.1498014835740435,1.1497094843624363,1.149617514588341,1.1495255742352781,1.149433663286781,1.1493417817263962,1.1492499295376832,1.1491581067042151,1.149066313209578,1.1489745490373704,1.1488828141712049,1.1487911085947065,1.1486994322915134,1.1486077852452774,1.1485161674396624,1.1484245788583463,1.1483330194850192,1.1482414893033845,1.1481499882971589,1.1480585164500712,1.1479670737458645,1.1478756601682938,1.147784275701127,1.1476929203281456,1.1476015940331437,1.1475102967999282,1.1474190286123187,1.147327789454148,1.147236579309262,1.1471453981615185,1.147054245994789,1.1469631227929575,1.146872028539921,1.146780963219589,1.1466899268158834,1.1465989193127402,1.1465079406941068,1.146416990943944,1.1463260700462246,1.1462351779849351,1.1461443147440746,1.1460534803076539,1.1459626746596976,1.145871897784242,1.1457811496653365,1.1456904302870436,1.1455997396334374,1.1455090776886059,1.145418444436648,1.1453278398616766,1.1452372639478166,1.1451467166792055,1.1450561980399936,1.144965708014343,1.1448752465864294,1.1447848137404397,1.1446944094605747,1.1446040337310464,1.1445136865360803,1.1444233678599134,1.144333077686796,1.14424281600099,1.144152582786771,1.1440623780284251,1.1439722017102525,1.1438820538165648,1.1437919343316865,1.143701843239954,1.143611780525716,1.1435217461733342,1.143431740167182,1.1433417624916455,1.1432518131311227,1.1431618920700237,1.1430719992927716,1.142982134783801,1.1428922985275594,1.142802490508506,1.1427127107111124,1.1426229591198622,1.142533235719252,1.1424435404937892,1.1423538734279945,1.1422642345064002,1.1421746237135508,1.1420850410340035,1.1419954864523267,1.1419059599531014,1.1418164615209205,1.1417269911403891,1.1416375487961246,1.1415481344727558,1.141458748154924,1.1413693898272825,1.141280059474497,1.1411907570812438,1.1411014826322128,1.1410122361121051,1.140923017505634,1.1408338267975242,1.1407446639725132,1.1406555290153497,1.1405664219107947,1.140477342643621,1.1403882911986134,1.1402992675605683,1.1402102717142941,1.1401213036446114,1.140032363336352,1.13994345077436,1.139854565943491,1.139765708828613,1.1396768794146053,1.1395880776863585,1.139499303628776,1.1394105572267725,1.1393218384652744,1.1392331473292197,1.1391444838035583,1.139055847873252,1.138967239523274,1.1388786587386093,1.1387901055042544,1.1387015798052178,1.1386130816265194,1.138524610953191,1.1384361677702757,1.1383477520628282,1.1382593638159153,1.1381710030146148,1.1380826696440163,1.1379943636892211,1.137906085135342,1.1378178339675034,1.137729610170841,1.1376414137305022,1.1375532446316456,1.137465102859442,1.1373769883990732,1.1372889012357323,1.1372008413546244,1.1371128087409654,1.1370248033799832,1.1369368252569172,1.1368488743570175,1.1367609506655463,1.1366730541677768,1.136585184848994,1.1364973426944938,1.1364095276895836,1.1363217398195822,1.1362339790698202,1.1361462454256386,1.1360585388723903,1.1359708593954394,1.1358832069801617,1.1357955816119434,1.1357079832761825,1.1356204119582884,1.1355328676436813,1.1354453503177933,1.135357859966067,1.1352703965739568,1.1351829601269277,1.1350955506104565,1.1350081680100306,1.1349208123111492,1.1348334834993223,1.1347461815600708,1.1346589064789276,1.1345716582414356,1.1344844368331495,1.134397242239635,1.1343100744464687,1.1342229334392389,1.134135819203544,1.134048731724994,1.1339616709892102,1.1338746369818244,1.1337876296884801,1.1337006490948307,1.1336136951865419,1.1335267679492895,1.1334398673687605,1.133352993430653,1.1332661461206759,1.1331793254245495,1.1330925313280042,1.133005763816782,1.132919022876636,1.132832308493329,1.1327456206526363,1.1326589593403429,1.132572324542245,1.1324857162441502,1.1323991344318758,1.1323125790912512,1.1322260502081158,1.1321395477683203,1.1320530717577257,1.1319666221622042,1.1318801989676388,1.131793802159923,1.1317074317249611,1.1316210876486683,1.1315347699169704,1.1314484785158045,1.1313622134311176,1.1312759746488679,1.1311897621550242,1.1311035759355657,1.1310174159764828,1.1309312822637763,1.1308451747834574,1.1307590935215486,1.1306730384640824,1.1305870095971022,1.130501006906662,1.1304150303788267,1.1303290799996712,1.1302431557552812,1.1301572576317533,1.1300713856151945,1.129985539691722,1.129899719847464,1.129813926068559,1.129728158341156,1.1296424166514147,1.1295567009855052,1.129471011329608,1.1293853476699143,1.1292997099926256,1.1292140982839538,1.1291285125301214,1.1290429527173613,1.128957418831917,1.1288719108600418,1.128786428788,1.1287009726020665,1.1286155422885258,1.1285301378336736,1.1284447592238152,1.1283594064452669,1.128274079484355,1.1281887783274163,1.1281035029607973,1.1280182533708563,1.1279330295439605,1.127847831466488,1.1277626591248264,1.1276775125053753,1.127592391594543,1.1275072963787482,1.1274222268444207,1.127337182978,1.1272521647659357,1.1271671721946879,1.1270822052507268,1.1269972639205326,1.1269123481905963,1.1268274580474182,1.1267425934775093,1.126657754467391,1.126572941003594,1.1264881530726603,1.126403390661141,1.1263186537555976,1.1262339423426022,1.126149256408736,1.1260645959405917,1.1259799609247707,1.125895351347885,1.1258107671965571,1.1257262084574189,1.1256416751171128,1.1255571671622906,1.1254726845796148,1.1253882273557576,1.1253037954774014,1.1252193889312383,1.1251350077039703,1.12505065178231,1.1249663211529792,1.1248820158027102,1.1247977357182448,1.1247134808863353,1.1246292512937432,1.1245450469272404,1.124460867773609,1.12437671381964,1.1242925850521353,1.124208481457906,1.1241244030237736,1.1240403497365687,1.1239563215831327,1.123872318550316,1.1237883406249793,1.1237043877939932,1.1236204600442374,1.1235365573626022,1.1234526797359874,1.1233688271513025,1.1232849995954668,1.1232011970554092,1.1231174195180689,1.1230336669703942,1.1229499393993434,1.122866236791885,1.122782559134996,1.122698906415664,1.1226152786208867,1.1225316757376704,1.1224480977530316,1.1223645446539967,1.1222810164276011,1.1221975130608908,1.1221140345409204,1.1220305808547548,1.1219471519894684,1.1218637479321452,1.1217803686698784,1.1216970141897715,1.121613684478937,1.1215303795244973,1.121447099313584,1.121363843833339,1.121280613070913,1.1211974070134663,1.121114225648169,1.1210310689622005,1.1209479369427502,1.1208648295770163,1.120781746852207,1.1206986887555397,1.1206156552742412,1.1205326463955483,1.1204496621067066,1.1203667023949715,1.1202837672476078,1.1202008566518897,1.1201179705951005,1.120035109064534,1.1199522720474917,1.1198694595312857,1.1197866715032374,1.119703907950677,1.1196211688609448,1.1195384542213895,1.1194557640193703,1.119373098242255,1.1192904568774205,1.1192078399122536,1.1191252473341502,1.1190426791305155,1.118960135288764,1.1188776157963194,1.1187951206406148,1.1187126498090927,1.1186302032892042,1.1185477810684101,1.1184653831341809,1.1183830094739955,1.1183006600753425,1.1182183349257195,1.1181360340126336,1.1180537573236007,1.117971504846146,1.1178892765678043,1.1178070724761189,1.1177248925586425,1.1176427368029374,1.1175606051965743,1.1174784977271335,1.1173964143822044,1.1173143551493852,1.1172323200162837,1.1171503089705164,1.1170683219997088,1.1169863590914964,1.1169044202335223,1.1168225054134397,1.116740614618911,1.1166587478376064,1.1165769050572067,1.1164950862654006,1.1164132914498863,1.1163315205983708,1.1162497736985706,1.1161680507382106,1.1160863517050248,1.1160046765867564,1.1159230253711572,1.1158413980459885,1.11575979459902,1.115678215018031,1.115596659290809,1.115515127405151,1.1154336193488623,1.115352135109758,1.1152706746756609,1.115189238034404,1.1151078251738282,1.1150264360817836,1.1149450707461297,1.1148637291547336,1.1147824112954725,1.114701117156232,1.114619846724906,1.1145385999893982,1.1144573769376205,1.1143761775574934,1.114295001836947,1.1142138497639194,1.1141327213263577,1.114051616512218,1.113970535309465,1.1138894777060726,1.1138084436900226,1.1137274332493061,1.1136464463719227,1.1135654830458808,1.1134845432591978,1.1134036269998993,1.1133227342560201,1.1132418650156035,1.113161019266701,1.1130801969973736,1.1129993981956907,1.1129186228497296,1.1128378709475777,1.1127571424773295,1.1126764374270894,1.1125957557849697,1.1125150975390914,1.1124344626775844,1.1123538511885869,1.1122732630602457,1.1121926982807164,1.1121121568381631,1.1120316387207587,1.111951143916684,1.111870672414129,1.1117902242012918,1.1117097992663794,1.1116293975976073,1.111549019183199,1.1114686640113873,1.1113883320704128,1.111308023348525,1.111227737833982,1.1111474755150499,1.111067236380004,1.1109870204171268,1.110906827614711,1.1108266579610562,1.110746511444471,1.1106663880532732,1.1105862877757877,1.1105062106003485,1.110426156515298,1.110346125508987,1.1102661175697748,1.1101861326860287,1.1101061708461248,1.1100262320384473,1.1099463162513887,1.1098664234733502,1.1097865536927412,1.1097067068979791,1.10962688307749,1.1095470822197084,1.1094673043130767,1.109387549346046,1.109307817307076,1.1092281081846336,1.109148421967195,1.109068758643244,1.1089891182012734,1.1089095006297836,1.1088299059172835,1.1087503340522904,1.1086707850233295,1.1085912588189346,1.1085117554276476,1.1084322748380182,1.1083528170386048,1.1082733820179742,1.1081939697647005,1.108114580267367,1.1080352135145648,1.1079558694948926,1.1078765481969581,1.1077972496093769,1.107717973720772,1.1076387205197762,1.1075594899950287,1.1074802821351777,1.1074010969288794,1.1073219343647982,1.1072427944316061,1.1071636771179842,1.1070845824126205,1.107005510304212,1.106926460781463,1.1068474338330867,1.1067684294478037,1.1066894476143432,1.1066104883214414,1.106531551557844,1.1064526373123034,1.1063737455735811,1.1062948763304459,1.1062160295716748,1.1061372052860527,1.1060584034623728,1.105979624089436,1.1059008671560513,1.1058221326510356,1.105743420563214,1.105664730881419,1.1055860635944912,1.1055074186912799,1.1054287961606415,1.1053501959914407,1.1052716181725495,1.105193062692849,1.105114529541227,1.10503601870658,1.1049575301778118,1.1048790639438348,1.1048006199935683,1.1047221983159403,1.1046437988998865,1.1045654217343501,1.104487066808282,1.104408734110642,1.1043304236303968,1.104252135356521,1.1041738692779968,1.1040956253838152,1.1040174036629742,1.1039392041044795,1.1038610266973452,1.1037828714305926,1.1037047382932508,1.1036266272743571,1.1035485383629564,1.103470471548101,1.1033924268188515,1.1033144041642755,1.1032364035734494,1.103158425035456,1.1030804685393871,1.1030025340743412,1.102924621629425,1.102846731193753,1.102768862756447,1.1026910163066368,1.1026131918334596,1.1025353893260603,1.102457608773592,1.1023798501652147,1.102302113490096,1.1022243987374123,1.1021467058963463,1.102069034956089,1.101991385905839,1.1019137587348018,1.1018361534321917,1.1017585699872297,1.1016810083891448,1.1016034686271734,1.101525950690559,1.1014484545685541,1.1013709802504172,1.1012935277254152,1.1012160969828222,1.1011386880119203,1.1010613008019985,1.1009839353423538,1.1009065916222902,1.1008292696311202,1.1007519693581627,1.1006746907927447,1.1005974339242004,1.1005201987418722,1.1004429852351088,1.1003657933932671,1.1002886232057119,1.1002114746618141,1.1001343477509538,1.1000572424625166,1.0999801587858973,1.099903096710497,1.099826056225725,1.099749037320997,1.0996720399857376,1.099595064209377,1.0995181099813542,1.0994411772911152,1.099364266128113,1.099287376481809,1.0992105083416703,1.0991336616971727,1.099056836537799,1.0989800328530395,1.0989032506323912,1.0988264898653595,1.0987497505414558,1.0986730326502003,1.0985963361811193,1.098519661123747,1.0984430074676248,1.0983663752023012,1.0982897643173326,1.0982131748022816,1.0981366066467193,1.0980600598402235,1.097983534372379,1.0979070302327778,1.09783054741102,1.0977540858967123,1.0976776456794688,1.0976012267489104,1.097524829094666,1.097448452706371,1.0973720975736687,1.097295763686209,1.0972194510336493,1.0971431596056542,1.0970668893918951,1.096990640382051,1.0969144125658083,1.09683820593286,1.0967620204729063,1.096685856175655,1.0966097130308206,1.096533591028125,1.0964574901572972,1.0963814104080734,1.0963053517701964,1.0962293142334167,1.096153297787492,1.0960773024221864,1.0960013281272718,1.0959253748925268,1.0958494427077372,1.095773531562696,1.095697641447203,1.095621772351065,1.0955459242640966,1.0954700971761184,1.0953942910769587,1.0953185059564527,1.0952427418044426,1.0951669986107777,1.095091276365314,1.0950155750579151,1.0949398946784514,1.0948642352167997,1.0947885966628446,1.0947129790064771,1.0946373822375957,1.0945618063461056,1.0944862513219187,1.0944107171549544,1.0943352038351388,1.094259711352405,1.0941842396966928,1.094108788857949,1.0940333588261277,1.0939579495911897,1.0938825611431027,1.0938071934718412,1.0937318465673866,1.093656520419728,1.0935812150188595,1.0935059303547845,1.0934306664175113,1.0933554231970564,1.0932802006834421,1.0932049988666985,1.0931298177368618,1.0930546572839759,1.0929795174980905,1.092904398369263,1.092829299887557,1.092754222043044,1.0926791648258005,1.0926041282259118,1.0925291122334682,1.0924541168385684,1.092379142031317,1.0923041878018251,1.0922292541402119,1.092154341036602,1.0920794484811271,1.0920045764639263,1.0919297249751447,1.0918548940049346,1.0917800835434552,1.0917052935808718,1.091630524107357,1.0915557751130895,1.0914810465882558,1.0914063385230481,1.0913316509076658,1.091256983732315,1.091182336987208,1.0911077106625644,1.0910331047486104,1.0909585192355784,1.0908839541137083,1.0908094093732459,1.090734885004444,1.090660380997562,1.0905858973428662,1.0905114340306288,1.0904369910511298,1.0903625683946545,1.0902881660514963,1.0902137840119537,1.090139422266333,1.0900650808049464,1.0899907596181135,1.0899164586961594,1.0898421780294165,1.0897679176082238,1.0896936774229267,1.0896194574638771,1.0895452577214337,1.0894710781859616,1.0893969188478325,1.0893227796974245,1.0892486607251228,1.0891745619213185,1.0891004832764095,1.0890264247808001,1.0889523864249013,1.0888783681991308,1.0888043700939123,1.088730392099676,1.0886564342068596,1.0885824964059059,1.0885085786872652,1.088434681041394,1.0883608034587549,1.0882869459298175,1.0882131084450575,1.0881392909949574,1.0880654935700058,1.0879917161606982,1.0879179587575358,1.087844221351027,1.0877705039316867,1.0876968064900352,1.0876231290166,1.0875494715019152,1.0874758339365207,1.0874022163109633,1.087328618615796,1.087255040841578,1.0871814829788753,1.0871079450182601,1.0870344269503107,1.0869609287656123,1.086887450454756,1.0868139920083395,1.0867405534169665,1.0866671346712478,1.0865937357617999,1.0865203566792458,1.0864469974142148,1.0863736579573424,1.086300338299271,1.0862270384306487,1.0861537583421303,1.0860804980243763,1.0860072574680542,1.0859340366638375,1.0858608356024062,1.0857876542744458,1.0857144926706492,1.0856413507817146,1.0855682285983475,1.0854951261112584,1.0854220433111652,1.085348980188791,1.0852759367348663,1.0852029129401268,1.085129908795315,1.0850569242911796,1.0849839594184751,1.084911014167963,1.08483808853041,1.0847651824965903,1.0846922960572827,1.0846194292032734,1.0845465819253544,1.0844737542143241,1.0844009460609865,1.0843281574561525,1.0842553883906387,1.084182638855268,1.0841099088408692,1.084037198338278,1.0839645073383355,1.0838918358318888,1.083819183809792,1.0837465512629048,1.0836739381820928,1.0836013445582282,1.083528770382189,1.0834562156448597,1.08338368033713,1.0833111644498967,1.0832386679740627,1.0831661909005357,1.0830937332202308,1.0830212949240692,1.0829488760029768,1.0828764764478873,1.0828040962497394,1.0827317353994776,1.0826593938880535,1.0825870717064243,1.0825147688455528,1.082442485296408,1.0823702210499655,1.0822979760972065,1.082225750429118,1.0821535440366934,1.0820813569109318,1.0820091890428385,1.081937040423425,1.0818649110437084,1.081792800894712,1.0817207099674648,1.081648638253002,1.0815765857423651,1.0815045524266012,1.0814325382967631,1.08136054334391,1.0812885675591069,1.0812166109334247,1.0811446734579406,1.081072755123737,1.0810008559219029,1.080928975843533,1.0808571148797277,1.0807852730215937,1.0807134502602433,1.0806416465867952,1.0805698619923731,1.0804980964681075,1.0804263500051343,1.0803546225945955,1.0802829142276384,1.0802112248954174,1.0801395545890917,1.0800679032998266,1.0799962710187934,1.0799246577371693,1.0798530634461372,1.079781488136886,1.07970993180061,1.07963839442851,1.079566876011792,1.0794953765416684,1.0794238960093572,1.0793524344060819,1.0792809917230723,1.0792095679515636,1.079138163082797,1.0790667771080196,1.078995410018484,1.078924061805449,1.0788527324601782,1.0787814219739427,1.0787101303380175,1.0786388575436847,1.0785676035822316,1.0784963684449513,1.0784251521231427,1.0783539546081102,1.0782827758911646,1.078211615963622,1.0781404748168038,1.0780693524420377,1.0779982488306572,1.0779271639740011,1.0778560978634144,1.077785050490247,1.0777140218458554,1.0776430119216014,1.0775720207088522,1.0775010481989813,1.0774300943833675,1.0773591592533953,1.0772882428004549,1.0772173450159417],"x":[0.01,0.010157936825269892,0.010315873650539785,0.010473810475809676,0.010631747301079568,0.01078968412634946,0.010947620951619353,0.011105557776889244,0.011263494602159136,0.011421431427429029,0.01157936825269892,0.011737305077968812,0.011895241903238705,0.012053178728508597,0.012211115553778488,0.012369052379048381,0.012526989204318273,0.012684926029588164,0.012842862854858058,0.01300079968012795,0.01315873650539784,0.013316673330667732,0.013474610155937625,0.013632546981207517,0.013790483806477408,0.013948420631747302,0.014106357457017193,0.014264294282287085,0.014422231107556978,0.01458016793282687,0.01473810475809676,0.014896041583366654,0.015053978408636546,0.015211915233906437,0.01536985205917633,0.015527788884446222,0.015685725709716113,0.015843662534986005,0.016001599360255896,0.01615953618552579,0.016317473010795683,0.016475409836065574,0.016633346661335466,0.016791283486605357,0.01694922031187525,0.01710715713714514,0.017265093962415035,0.017423030787684927,0.01758096761295482,0.01773890443822471,0.0178968412634946,0.018054778088764493,0.018212714914034388,0.01837065173930428,0.01852858856457417,0.018686525389844062,0.018844462215113954,0.019002399040383845,0.01916033586565374,0.01931827269092363,0.019476209516193523,0.019634146341463415,0.019792083166733306,0.019950019992003198,0.02010795681727309,0.020265893642542984,0.020423830467812876,0.020581767293082767,0.02073970411835266,0.02089764094362255,0.02105557776889244,0.021213514594162337,0.021371451419432228,0.02152938824470212,0.02168732506997201,0.021845261895241903,0.022003198720511794,0.022161135545781686,0.02231907237105158,0.022477009196321472,0.022634946021591364,0.022792882846861255,0.022950819672131147,0.023108756497401038,0.023266693322670933,0.023424630147940825,0.023582566973210716,0.023740503798480608,0.0238984406237505,0.02405637744902039,0.024214314274290286,0.024372251099560177,0.02453018792483007,0.02468812475009996,0.02484606157536985,0.025003998400639743,0.025161935225909635,0.02531987205117953,0.02547780887644942,0.025635745701719313,0.025793682526989204,0.025951619352259096,0.026109556177528987,0.026267493002798882,0.026425429828068774,0.026583366653338665,0.026741303478608557,0.026899240303878448,0.02705717712914834,0.02721511395441823,0.027373050779688126,0.027530987604958018,0.02768892443022791,0.0278468612554978,0.028004798080767692,0.028162734906037584,0.02832067173130748,0.02847860855657737,0.02863654538184726,0.028794482207117153,0.028952419032387045,0.029110355857656936,0.02926829268292683,0.029426229508196722,0.029584166333466614,0.029742103158736505,0.029900039984006397,0.03005797680927629,0.03021591363454618,0.030373850459816075,0.030531787285085966,0.030689724110355858,0.03084766093562575,0.03100559776089564,0.031163534586165532,0.031321471411435424,0.031479408236705315,0.03163734506197521,0.031795281887245105,0.031953218712515,0.03211115553778489,0.03226909236305478,0.03242702918832467,0.03258496601359456,0.032742902838864454,0.032900839664134346,0.03305877648940424,0.03321671331467413,0.03337465013994402,0.03353258696521391,0.0336905237904838,0.0338484606157537,0.03400639744102359,0.034164334266293485,0.034322271091563376,0.03448020791683327,0.03463814474210316,0.03479608156737305,0.03495401839264294,0.035111955217912834,0.035269892043182725,0.03542782886845262,0.03558576569372251,0.0357437025189924,0.0359016393442623,0.03605957616953219,0.03621751299480208,0.03637544982007197,0.036533386645341864,0.036691323470611756,0.03684926029588165,0.03700719712115154,0.03716513394642143,0.03732307077169132,0.03748100759696121,0.037638944422231105,0.037796881247500996,0.037954818072770895,0.038112754898040786,0.03827069172331068,0.03842862854858057,0.03858656537385046,0.03874450219912035,0.038902439024390244,0.039060375849660135,0.03921831267493003,0.03937624950019992,0.03953418632546981,0.0396921231507397,0.03985005997600959,0.04000799680127949,0.04016593362654938,0.040323870451819274,0.040481807277089166,0.04063974410235906,0.04079768092762895,0.04095561775289884,0.04111355457816873,0.04127149140343862,0.041429428228708515,0.041587365053978406,0.0417453018792483,0.041903238704518196,0.04206117552978809,0.04221911235505798,0.04237704918032787,0.04253498600559776,0.042692922830867654,0.042850859656137545,0.04300879648140744,0.04316673330667733,0.04332467013194722,0.04348260695721711,0.043640543782487,0.043798480607756894,0.04395641743302679,0.044114354258296684,0.044272291083566576,0.04443022790883647,0.04458816473410636,0.04474610155937625,0.04490403838464614,0.04506197520991603,0.045219912035185925,0.045377848860455816,0.04553578568572571,0.0456937225109956,0.04585165933626549,0.04600959616153539,0.04616753298680528,0.04632546981207517,0.046483406637345064,0.046641343462614955,0.04679928028788485,0.04695721711315474,0.04711515393842463,0.04727309076369452,0.04743102758896441,0.047588964414234304,0.047746901239504196,0.04790483806477409,0.048062774890043986,0.04822071171531388,0.04837864854058377,0.04853658536585366,0.04869452219112355,0.04885245901639344,0.049010395841663335,0.049168332666933226,0.04932626949220312,0.04948420631747301,0.0496421431427429,0.04980007996801279,0.049958016793282684,0.05011595361855258,0.05027389044382247,0.050431827269092365,0.050589764094362256,0.05074770091963215,0.05090563774490204,0.05106357457017193,0.05122151139544182,0.051379448220711714,0.051537385045981605,0.0516953218712515,0.05185325869652139,0.05201119552179129,0.05216913234706118,0.05232706917233107,0.05248500599760096,0.05264294282287085,0.052800879648140744,0.052958816473410636,0.05311675329868053,0.05327469012395042,0.05343262694922031,0.0535905637744902,0.05374850059976009,0.053906437425029985,0.05406437425029988,0.054222311075569775,0.054380247900839666,0.05453818472610956,0.05469612155137945,0.05485405837664934,0.05501199520191923,0.055169932027189124,0.055327868852459015,0.05548580567772891,0.0556437425029988,0.05580167932826869,0.05595961615353858,0.05611755297880848,0.05627548980407837,0.05643342662934826,0.056591363454618154,0.056749300279888046,0.05690723710515794,0.05706517393042783,0.05722311075569772,0.05738104758096761,0.0575389844062375,0.057696921231507395,0.057854858056777286,0.05801279488204718,0.058170731707317076,0.05832866853258697,0.05848660535785686,0.05864454218312675,0.05880247900839664,0.058960415833666534,0.059118352658936425,0.05927628948420632,0.05943422630947621,0.0595921631347461,0.05975009996001599,0.05990803678528588,0.060065973610555774,0.06022391043582567,0.060381847261095564,0.060539784086365456,0.06069772091163535,0.06085565773690524,0.06101359456217513,0.06117153138744502,0.06132946821271491,0.061487405037984805,0.061645341863254696,0.06180327868852459,0.06196121551379448,0.06211915233906438,0.06227708916433427,0.06243502598960416,0.06259296281487405,0.06275089964014394,0.06290883646541383,0.06306677329068372,0.06322471011595363,0.06338264694122352,0.06354058376649341,0.0636985205917633,0.06385645741703319,0.06401439424230308,0.06417233106757297,0.06433026789284287,0.06448820471811276,0.06464614154338265,0.06480407836865254,0.06496201519392243,0.06511995201919232,0.06527788884446221,0.0654358256697321,0.065593762495002,0.06575169932027189,0.06590963614554178,0.06606757297081167,0.06622550979608156,0.06638344662135146,0.06654138344662135,0.06669932027189124,0.06685725709716113,0.06701519392243102,0.06717313074770093,0.06733106757297082,0.06748900439824071,0.0676469412235106,0.06780487804878049,0.06796281487405038,0.06812075169932028,0.06827868852459017,0.06843662534986006,0.06859456217512995,0.06875249900039984,0.06891043582566973,0.06906837265093962,0.06922630947620952,0.06938424630147941,0.0695421831267493,0.06970011995201919,0.06985805677728908,0.07001599360255897,0.07017393042782887,0.07033186725309876,0.07048980407836865,0.07064774090363854,0.07080567772890843,0.07096361455417832,0.07112155137944821,0.07127948820471812,0.07143742502998801,0.0715953618552579,0.0717532986805278,0.07191123550579769,0.07206917233106758,0.07222710915633747,0.07238504598160736,0.07254298280687725,0.07270091963214714,0.07285885645741703,0.07301679328268693,0.07317473010795682,0.07333266693322671,0.0734906037584966,0.07364854058376649,0.07380647740903638,0.07396441423430627,0.07412235105957617,0.07428028788484606,0.07443822471011595,0.07459616153538584,0.07475409836065573,0.07491203518592562,0.07506997201119552,0.0752279088364654,0.07538584566173531,0.0755437824870052,0.0757017193122751,0.07585965613754499,0.07601759296281488,0.07617552978808477,0.07633346661335466,0.07649140343862455,0.07664934026389444,0.07680727708916434,0.07696521391443423,0.07712315073970412,0.07728108756497401,0.0774390243902439,0.0775969612155138,0.07775489804078368,0.07791283486605358,0.07807077169132347,0.07822870851659336,0.07838664534186325,0.07854458216713314,0.07870251899240303,0.07886045581767293,0.07901839264294282,0.07917632946821271,0.07933426629348261,0.0794922031187525,0.0796501399440224,0.07980807676929229,0.07996601359456218,0.08012395041983207,0.08028188724510196,0.08043982407037185,0.08059776089564175,0.08075569772091164,0.08091363454618153,0.08107157137145142,0.08122950819672131,0.0813874450219912,0.0815453818472611,0.08170331867253099,0.08186125549780088,0.08201919232307077,0.08217712914834066,0.08233506597361055,0.08249300279888044,0.08265093962415034,0.08280887644942023,0.08296681327469012,0.08312475009996001,0.0832826869252299,0.0834406237504998,0.0835985605757697,0.08375649740103959,0.08391443422630948,0.08407237105157937,0.08423030787684926,0.08438824470211916,0.08454618152738905,0.08470411835265894,0.08486205517792883,0.08501999200319872,0.08517792882846861,0.0853358656537385,0.0854938024790084,0.08565173930427829,0.08580967612954818,0.08596761295481807,0.08612554978008796,0.08628348660535785,0.08644142343062775,0.08659936025589764,0.08675729708116753,0.08691523390643742,0.08707317073170731,0.0872311075569772,0.08738904438224711,0.087546981207517,0.08770491803278689,0.08786285485805678,0.08802079168332667,0.08817872850859657,0.08833666533386646,0.08849460215913635,0.08865253898440624,0.08881047580967613,0.08896841263494602,0.08912634946021591,0.0892842862854858,0.0894422231107557,0.08960015993602559,0.08975809676129548,0.08991603358656537,0.09007397041183526,0.09023190723710516,0.09038984406237505,0.09054778088764494,0.09070571771291483,0.09086365453818472,0.09102159136345461,0.0911795281887245,0.0913374650139944,0.0914954018392643,0.09165333866453419,0.09181127548980408,0.09196921231507398,0.09212714914034387,0.09228508596561376,0.09244302279088365,0.09260095961615354,0.09275889644142343,0.09291683326669332,0.09307477009196322,0.09323270691723311,0.093390643742503,0.09354858056777289,0.09370651739304278,0.09386445421831267,0.09402239104358256,0.09418032786885246,0.09433826469412235,0.09449620151939224,0.09465413834466213,0.09481207516993202,0.09497001199520191,0.0951279488204718,0.0952858856457417,0.09544382247101159,0.0956017592962815,0.09575969612155139,0.09591763294682128,0.09607556977209117,0.09623350659736106,0.09639144342263095,0.09654938024790084,0.09670731707317073,0.09686525389844063,0.09702319072371052,0.09718112754898041,0.0973390643742503,0.09749700119952019,0.09765493802479008,0.09781287485005997,0.09797081167532987,0.09812874850059976,0.09828668532586965,0.09844462215113954,0.09860255897640943,0.09876049580167932,0.09891843262694922,0.0990763694522191,0.099234306277489,0.09939224310275889,0.0995501799280288,0.09970811675329869,0.09986605357856858,0.10002399040383847,0.10018192722910836,0.10033986405437825,0.10049780087964814,0.10065573770491804,0.10081367453018793,0.10097161135545782,0.10112954818072771,0.1012874850059976,0.1014454218312675,0.10160335865653738,0.10176129548180728,0.10191923230707717,0.10207716913234706,0.10223510595761695,0.10239304278288684,0.10255097960815673,0.10270891643342663,0.10286685325869652,0.10302479008396641,0.1031827269092363,0.10334066373450619,0.10349860055977608,0.10365653738504599,0.10381447421031588,0.10397241103558577,0.10413034786085566,0.10428828468612555,0.10444622151139545,0.10460415833666534,0.10476209516193523,0.10492003198720512,0.10507796881247501,0.1052359056377449,0.1053938424630148,0.10555177928828469,0.10570971611355458,0.10586765293882447,0.10602558976409436,0.10618352658936425,0.10634146341463414,0.10649940023990404,0.10665733706517393,0.10681527389044382,0.10697321071571371,0.1071311475409836,0.10728908436625349,0.10744702119152338,0.10760495801679329,0.10776289484206318,0.10792083166733307,0.10807876849260296,0.10823670531787286,0.10839464214314275,0.10855257896841264,0.10871051579368253,0.10886845261895242,0.10902638944422231,0.1091843262694922,0.1093422630947621,0.10950019992003199,0.10965813674530188,0.10981607357057177,0.10997401039584166,0.11013194722111155,0.11028988404638145,0.11044782087165134,0.11060575769692123,0.11076369452219112,0.11092163134746101,0.1110795681727309,0.1112375049980008,0.11139544182327069,0.11155337864854058,0.11171131547381048,0.11186925229908037,0.11202718912435027,0.11218512594962016,0.11234306277489005,0.11250099960015994,0.11265893642542983,0.11281687325069972,0.11297481007596961,0.1131327469012395,0.1132906837265094,0.11344862055177929,0.11360655737704918,0.11376449420231907,0.11392243102758896,0.11408036785285885,0.11423830467812875,0.11439624150339864,0.11455417832866853,0.11471211515393842,0.11487005197920831,0.1150279888044782,0.1151859256297481,0.11534386245501799,0.11550179928028788,0.11565973610555777,0.11581767293082768,0.11597560975609757,0.11613354658136746,0.11629148340663735,0.11644942023190724,0.11660735705717713,0.11676529388244702,0.11692323070771692,0.11708116753298681,0.1172391043582567,0.11739704118352659,0.11755497800879648,0.11771291483406637,0.11787085165933626,0.11802878848460616,0.11818672530987605,0.11834466213514594,0.11850259896041583,0.11866053578568572,0.11881847261095561,0.1189764094362255,0.1191343462614954,0.11929228308676529,0.11945021991203518,0.11960815673730507,0.11976609356257498,0.11992403038784487,0.12008196721311476,0.12023990403838465,0.12039784086365454,0.12055577768892443,0.12071371451419433,0.12087165133946422,0.12102958816473411,0.121187524990004,0.12134546181527389,0.12150339864054378,0.12166133546581367,0.12181927229108357,0.12197720911635346,0.12213514594162335,0.12229308276689324,0.12245101959216313,0.12260895641743302,0.12276689324270292,0.1229248300679728,0.1230827668932427,0.12324070371851259,0.12339864054378248,0.12355657736905237,0.12371451419432226,0.12387245101959217,0.12403038784486206,0.12418832467013195,0.12434626149540184,0.12450419832067174,0.12466213514594163,0.12482007197121152,0.12497800879648141,0.1251359456217513,0.1252938824470212,0.12545181927229107,0.12560975609756098,0.12576769292283088,0.12592562974810076,0.12608356657337066,0.12624150339864054,0.12639944022391045,0.12655737704918033,0.12671531387445023,0.1268732506997201,0.12703118752499,0.1271891243502599,0.1273470611755298,0.12750499800079967,0.12766293482606958,0.12782087165133946,0.12797880847660936,0.12813674530187924,0.12829468212714915,0.12845261895241902,0.12861055577768893,0.1287684926029588,0.1289264294282287,0.1290843662534986,0.1292423030787685,0.12940023990403837,0.12955817672930828,0.12971611355457816,0.12987405037984806,0.13003198720511797,0.13018992403038784,0.13034786085565775,0.13050579768092763,0.13066373450619753,0.1308216713314674,0.13097960815673731,0.1311375449820072,0.1312954818072771,0.13145341863254698,0.13161135545781688,0.13176929228308676,0.13192722910835666,0.13208516593362654,0.13224310275889645,0.13240103958416632,0.13255897640943623,0.1327169132347061,0.132874850059976,0.1330327868852459,0.1331907237105158,0.13334866053578567,0.13350659736105558,0.13366453418632546,0.13382247101159536,0.13398040783686527,0.13413834466213514,0.13429628148740505,0.13445421831267493,0.13461215513794483,0.1347700919632147,0.13492802878848462,0.1350859656137545,0.1352439024390244,0.13540183926429428,0.13555977608956418,0.13571771291483406,0.13587564974010397,0.13603358656537384,0.13619152339064375,0.13634946021591363,0.13650739704118353,0.1366653338664534,0.13682327069172331,0.1369812075169932,0.1371391443422631,0.13729708116753297,0.13745501799280288,0.13761295481807276,0.13777089164334266,0.13792882846861257,0.13808676529388245,0.13824470211915235,0.13840263894442223,0.13856057576969213,0.138718512594962,0.13887644942023192,0.1390343862455018,0.1391923230707717,0.13935025989604158,0.13950819672131148,0.13966613354658136,0.13982407037185127,0.13998200719712114,0.14013994402239105,0.14029788084766093,0.14045581767293083,0.1406137544982007,0.14077169132347062,0.1409296281487405,0.1410875649740104,0.14124550179928028,0.14140343862455018,0.14156137544982006,0.14171931227508996,0.14187724910035984,0.14203518592562975,0.14219312275089965,0.14235105957616953,0.14250899640143944,0.1426669332267093,0.14282487005197922,0.1429828068772491,0.143140743702519,0.14329868052778888,0.14345661735305879,0.14361455417832866,0.14377249100359857,0.14393042782886845,0.14408836465413835,0.14424630147940823,0.14440423830467813,0.144562175129948,0.14472011195521792,0.1448780487804878,0.1450359856057577,0.14519392243102758,0.14535185925629748,0.14550979608156736,0.14566773290683727,0.14582566973210714,0.14598360655737705,0.14614154338264695,0.14629948020791683,0.14645741703318674,0.14661535385845662,0.14677329068372652,0.1469312275089964,0.1470891643342663,0.14724710115953618,0.1474050379848061,0.14756297481007596,0.14772091163534587,0.14787884846061575,0.14803678528588565,0.14819472211115553,0.14835265893642544,0.1485105957616953,0.14866853258696522,0.1488264694122351,0.148984406237505,0.14914234306277488,0.14930027988804478,0.14945821671331466,0.14961615353858457,0.14977409036385445,0.14993202718912435,0.15008996401439426,0.15024790083966413,0.15040583766493404,0.15056377449020392,0.15072171131547382,0.1508796481407437,0.1510375849660136,0.15119552179128348,0.1513534586165534,0.15151139544182327,0.15166933226709317,0.15182726909236305,0.15198520591763295,0.15214314274290283,0.15230107956817274,0.15245901639344261,0.15261695321871252,0.1527748900439824,0.1529328268692523,0.15309076369452218,0.15324870051979209,0.15340663734506196,0.15356457417033187,0.15372251099560175,0.15388044782087165,0.15403838464614153,0.15419632147141143,0.15435425829668134,0.15451219512195122,0.15467013194722112,0.154828068772491,0.1549860055977609,0.15514394242303078,0.1553018792483007,0.15545981607357057,0.15561775289884047,0.15577568972411035,0.15593362654938026,0.15609156337465013,0.15624950019992004,0.15640743702518992,0.15656537385045982,0.1567233106757297,0.1568812475009996,0.15703918432626948,0.1571971211515394,0.15735505797680926,0.15751299480207917,0.15767093162734905,0.15782886845261895,0.15798680527788883,0.15814474210315874,0.15830267892842864,0.15846061575369852,0.15861855257896842,0.1587764894042383,0.1589344262295082,0.15909236305477809,0.159250299880048,0.15940823670531787,0.15956617353058777,0.15972411035585765,0.15988204718112756,0.16003998400639743,0.16019792083166734,0.16035585765693722,0.16051379448220712,0.160671731307477,0.1608296681327469,0.16098760495801678,0.1611455417832867,0.16130347860855657,0.16146141543382647,0.16161935225909635,0.16177728908436625,0.16193522590963613,0.16209316273490604,0.16225109956017594,0.16240903638544582,0.16256697321071573,0.1627249100359856,0.1628828468612555,0.1630407836865254,0.1631987205117953,0.16335665733706517,0.16351459416233508,0.16367253098760495,0.16383046781287486,0.16398840463814474,0.16414634146341464,0.16430427828868452,0.16446221511395442,0.1646201519392243,0.1647780887644942,0.16493602558976408,0.165093962415034,0.16525189924030387,0.16540983606557377,0.16556777289084365,0.16572570971611356,0.16588364654138343,0.16604158336665334,0.16619952019192324,0.16635745701719312,0.16651539384246303,0.1666733306677329,0.1668312674930028,0.1669892043182727,0.1671471411435426,0.16730507796881247,0.16746301479408238,0.16762095161935225,0.16777888844462216,0.16793682526989204,0.16809476209516194,0.16825269892043182,0.16841063574570173,0.1685685725709716,0.1687265093962415,0.1688844462215114,0.1690423830467813,0.16920031987205117,0.16935825669732107,0.16951619352259095,0.16967413034786086,0.16983206717313074,0.16999000399840064,0.17014794082367052,0.17030587764894042,0.17046381447421033,0.1706217512994802,0.1707796881247501,0.17093762495002,0.1710955617752899,0.17125349860055977,0.17141143542582968,0.17156937225109956,0.17172730907636946,0.17188524590163934,0.17204318272690924,0.17220111955217912,0.17235905637744903,0.1725169932027189,0.1726749300279888,0.1728328668532587,0.1729908036785286,0.17314874050379847,0.17330667732906838,0.17346461415433825,0.17362255097960816,0.17378048780487804,0.17393842463014794,0.17409636145541782,0.17425429828068772,0.17441223510595763,0.1745701719312275,0.1747281087564974,0.1748860455817673,0.1750439824070372,0.17520191923230707,0.17535985605757698,0.17551779288284686,0.17567572970811676,0.17583366653338664,0.17599160335865655,0.17614954018392642,0.17630747700919633,0.1764654138344662,0.1766233506597361,0.176781287485006,0.1769392243102759,0.17709716113554577,0.17725509796081568,0.17741303478608555,0.17757097161135546,0.17772890843662534,0.17788684526189524,0.17804478208716512,0.17820271891243503,0.17836065573770493,0.1785185925629748,0.17867652938824471,0.1788344662135146,0.1789924030387845,0.17915033986405438,0.17930827668932428,0.17946621351459416,0.17962415033986406,0.17978208716513394,0.17994002399040385,0.18009796081567372,0.18025589764094363,0.1804138344662135,0.1805717712914834,0.1807297081167533,0.1808876449420232,0.18104558176729307,0.18120351859256298,0.18136145541783286,0.18151939224310276,0.18167732906837264,0.18183526589364254,0.18199320271891242,0.18215113954418233,0.1823090763694522,0.1824670131947221,0.18262495001999202,0.1827828868452619,0.1829408236705318,0.18309876049580168,0.18325669732107158,0.18341463414634146,0.18357257097161137,0.18373050779688124,0.18388844462215115,0.18404638144742103,0.18420431827269093,0.1843622550979608,0.18452019192323071,0.1846781287485006,0.1848360655737705,0.18499400239904037,0.18515193922431028,0.18530987604958016,0.18546781287485006,0.18562574970011994,0.18578368652538985,0.18594162335065972,0.18609956017592963,0.1862574970011995,0.1864154338264694,0.18657337065173932,0.1867313074770092,0.1868892443022791,0.18704718112754898,0.18720511795281888,0.18736305477808876,0.18752099160335867,0.18767892842862854,0.18783686525389845,0.18799480207916833,0.18815273890443823,0.1883106757297081,0.18846861255497802,0.1886265493802479,0.1887844862055178,0.18894242303078768,0.18910035985605758,0.18925829668132746,0.18941623350659736,0.18957417033186724,0.18973210715713715,0.18989004398240703,0.19004798080767693,0.1902059176329468,0.1903638544582167,0.19052179128348662,0.1906797281087565,0.1908376649340264,0.19099560175929628,0.19115353858456618,0.19131147540983606,0.19146941223510597,0.19162734906037585,0.19178528588564575,0.19194322271091563,0.19210115953618553,0.1922590963614554,0.19241703318672532,0.1925749700119952,0.1927329068372651,0.19289084366253498,0.19304878048780488,0.19320671731307476,0.19336465413834467,0.19352259096361454,0.19368052778888445,0.19383846461415433,0.19399640143942423,0.1941543382646941,0.19431227508996401,0.1944702119152339,0.1946281487405038,0.1947860855657737,0.19494402239104358,0.1951019592163135,0.19525989604158336,0.19541783286685327,0.19557576969212315,0.19573370651739305,0.19589164334266293,0.19604958016793284,0.1962075169932027,0.19636545381847262,0.1965233906437425,0.1966813274690124,0.19683926429428228,0.19699720111955218,0.19715513794482206,0.19731307477009197,0.19747101159536185,0.19762894842063175,0.19778688524590163,0.19794482207117153,0.1981027588964414,0.19826069572171132,0.1984186325469812,0.1985765693722511,0.198734506197521,0.19889244302279088,0.1990503798480608,0.19920831667333067,0.19936625349860057,0.19952419032387045,0.19968212714914035,0.19984006397441023,0.19999800079968014,0.20015593762495001,0.20031387445021992,0.2004718112754898,0.2006297481007597,0.20078768492602958,0.20094562175129949,0.20110355857656936,0.20126149540183927,0.20141943222710915,0.20157736905237905,0.20173530587764893,0.20189324270291883,0.2020511795281887,0.20220911635345862,0.2023670531787285,0.2025249900039984,0.2026829268292683,0.20284086365453818,0.2029988004798081,0.20315673730507797,0.20331467413034787,0.20347261095561775,0.20363054778088766,0.20378848460615753,0.20394642143142744,0.20410435825669732,0.20426229508196722,0.2044202319072371,0.204578168732507,0.20473610555777688,0.2048940423830468,0.20505197920831666,0.20520991603358657,0.20536785285885645,0.20552578968412635,0.20568372650939623,0.20584166333466614,0.205999600159936,0.20615753698520592,0.2063154738104758,0.2064734106357457,0.2066313474610156,0.20678928428628549,0.2069472211115554,0.20710515793682527,0.20726309476209517,0.20742103158736505,0.20757896841263496,0.20773690523790483,0.20789484206317474,0.20805277888844462,0.20821071571371452,0.2083686525389844,0.2085265893642543,0.20868452618952418,0.2088424630147941,0.20900039984006397,0.20915833666533387,0.20931627349060375,0.20947421031587365,0.20963214714114353,0.20979008396641344,0.20994802079168332,0.21010595761695322,0.2102638944422231,0.210421831267493,0.21057976809276288,0.2107377049180328,0.2108956417433027,0.21105357856857257,0.21121151539384247,0.21136945221911235,0.21152738904438226,0.21168532586965214,0.21184326269492204,0.21200119952019192,0.21215913634546182,0.2123170731707317,0.2124750099960016,0.21263294682127148,0.2127908836465414,0.21294882047181127,0.21310675729708117,0.21326469412235105,0.21342263094762096,0.21358056777289083,0.21373850459816074,0.21389644142343062,0.21405437824870052,0.2142123150739704,0.2143702518992403,0.21452818872451018,0.2146861255497801,0.21484406237505,0.21500199920031987,0.21515993602558978,0.21531787285085965,0.21547580967612956,0.21563374650139944,0.21579168332666934,0.21594962015193922,0.21610755697720913,0.216265493802479,0.2164234306277489,0.21658136745301879,0.2167393042782887,0.21689724110355857,0.21705517792882847,0.21721311475409835,0.21737105157936826,0.21752898840463814,0.21768692522990804,0.21784486205517792,0.21800279888044782,0.2181607357057177,0.2183186725309876,0.21847660935625748,0.2186345461815274,0.2187924830067973,0.21895041983206717,0.21910835665733708,0.21926629348260696,0.21942423030787686,0.21958216713314674,0.21974010395841664,0.21989804078368652,0.22005597760895643,0.2202139144342263,0.2203718512594962,0.2205297880847661,0.220687724910036,0.22084566173530587,0.22100359856057578,0.22116153538584565,0.22131947221111556,0.22147740903638544,0.22163534586165534,0.22179328268692522,0.22195121951219512,0.222109156337465,0.2222670931627349,0.22242502998800479,0.2225829668132747,0.22274090363854457,0.22289884046381447,0.22305677728908438,0.22321471411435426,0.22337265093962416,0.22353058776489404,0.22368852459016395,0.22384646141543382,0.22400439824070373,0.2241623350659736,0.2243202718912435,0.2244782087165134,0.2246361455417833,0.22479408236705317,0.22495201919232308,0.22510995601759295,0.22526789284286286,0.22542582966813274,0.22558376649340264,0.22574170331867252,0.22589964014394243,0.2260575769692123,0.2262155137944822,0.2263734506197521,0.226531387445022,0.22668932427029187,0.22684726109556178,0.22700519792083168,0.22716313474610156,0.22732107157137146,0.22747900839664134,0.22763694522191125,0.22779488204718112,0.22795281887245103,0.2281107556977209,0.2282686925229908,0.2284266293482607,0.2285845661735306,0.22874250299880047,0.22890043982407038,0.22905837664934026,0.22921631347461016,0.22937425029988004,0.22953218712514994,0.22969012395041982,0.22984806077568973,0.2300059976009596,0.2301639344262295,0.2303218712514994,0.2304798080767693,0.23063774490203917,0.23079568172730908,0.23095361855257898,0.23111155537784886,0.23126949220311876,0.23142742902838864,0.23158536585365855,0.23174330267892843,0.23190123950419833,0.2320591763294682,0.23221711315473811,0.232375049980008,0.2325329868052779,0.23269092363054777,0.23284886045581768,0.23300679728108756,0.23316473410635746,0.23332267093162734,0.23348060775689725,0.23363854458216712,0.23379648140743703,0.2339544182327069,0.2341123550579768,0.2342702918832467,0.2344282287085166,0.23458616553378647,0.23474410235905638,0.23490203918432626,0.23505997600959616,0.23521791283486607,0.23537584966013594,0.23553378648540585,0.23569172331067573,0.23584966013594563,0.2360075969612155,0.23616553378648542,0.2363234706117553,0.2364814074370252,0.23663934426229508,0.23679728108756498,0.23695521791283486,0.23711315473810476,0.23727109156337464,0.23742902838864455,0.23758696521391443,0.23774490203918433,0.2379028388644542,0.2380607756897241,0.238218712514994,0.2383766493402639,0.23853458616553377,0.23869252299080368,0.23885045981607356,0.23900839664134346,0.23916633346661337,0.23932427029188325,0.23948220711715315,0.23964014394242303,0.23979808076769293,0.2399560175929628,0.24011395441823272,0.2402718912435026,0.2404298280687725,0.24058776489404238,0.24074570171931228,0.24090363854458216,0.24106157536985207,0.24121951219512194,0.24137744902039185,0.24153538584566173,0.24169332267093163,0.2418512594962015,0.24200919632147141,0.2421671331467413,0.2423250699720112,0.24248300679728108,0.24264094362255098,0.24279888044782086,0.24295681727309076,0.24311475409836067,0.24327269092363055,0.24343062774890045,0.24358856457417033,0.24374650139944024,0.2439044382247101,0.24406237504998002,0.2442203118752499,0.2443782487005198,0.24453618552578968,0.24469412235105958,0.24485205917632946,0.24500999600159937,0.24516793282686924,0.24532586965213915,0.24548380647740903,0.24564174330267893,0.2457996801279488,0.24595761695321872,0.2461155537784886,0.2462734906037585,0.24643142742902838,0.24658936425429828,0.24674730107956816,0.24690523790483807,0.24706317473010797,0.24722111155537785,0.24737904838064775,0.24753698520591763,0.24769492203118754,0.24785285885645741,0.24801079568172732,0.2481687325069972,0.2483266693322671,0.24848460615753698,0.24864254298280689,0.24880047980807676,0.24895841663334667,0.24911635345861655,0.24927429028388645,0.24943222710915633,0.24959016393442623,0.2497481007596961,0.24990603758496602,0.2500639744102359,0.2502219112355058,0.2503798480607757,0.25053778488604556,0.2506957217113155,0.25085365853658537,0.25101159536185524,0.2511695321871252,0.25132746901239505,0.25148540583766493,0.2516433426629348,0.25180127948820474,0.2519592163134746,0.2521171531387445,0.2522750899640144,0.2524330267892843,0.2525909636145542,0.25274890043982406,0.25290683726509394,0.2530647740903639,0.25322271091563375,0.25338064774090363,0.2535385845661735,0.25369652139144344,0.2538544582167133,0.2540123950419832,0.2541703318672531,0.254328268692523,0.2544862055177929,0.25464414234306276,0.25480207916833264,0.2549600159936026,0.25511795281887245,0.25527588964414233,0.25543382646941226,0.25559176329468214,0.255749700119952,0.2559076369452219,0.25606557377049183,0.2562235105957617,0.2563814474210316,0.25653938424630146,0.2566973210715714,0.25685525789684127,0.25701319472211115,0.257171131547381,0.25732906837265096,0.25748700519792084,0.2576449420231907,0.2578028788484606,0.2579608156737305,0.2581187524990004,0.2582766893242703,0.25843462614954016,0.2585925629748101,0.25875049980007997,0.25890843662534985,0.2590663734506197,0.25922431027588966,0.25938224710115954,0.2595401839264294,0.25969812075169935,0.2598560575769692,0.2600139944022391,0.260171931227509,0.2603298680527789,0.2604878048780488,0.26064574170331867,0.26080367852858855,0.2609616153538585,0.26111955217912836,0.26127748900439823,0.2614354258296681,0.26159336265493804,0.2617512994802079,0.2619092363054778,0.2620671731307477,0.2622251099560176,0.2623830467812875,0.26254098360655737,0.26269892043182724,0.2628568572570972,0.26301479408236705,0.26317273090763693,0.26333066773290686,0.26348860455817674,0.2636465413834466,0.2638044782087165,0.26396241503398643,0.2641203518592563,0.2642782886845262,0.26443622550979606,0.264594162335066,0.2647520991603359,0.26491003598560575,0.26506797281087563,0.26522590963614556,0.26538384646141544,0.2655417832866853,0.2656997201119552,0.26585765693722513,0.266015593762495,0.2661735305877649,0.26633146741303476,0.2664894042383047,0.26664734106357457,0.26680527788884445,0.2669632147141143,0.26712115153938426,0.26727908836465414,0.267437025189924,0.26759496201519395,0.2677528988404638,0.2679108356657337,0.2680687724910036,0.2682267093162735,0.2683846461415434,0.26854258296681327,0.26870051979208315,0.2688584566173531,0.26901639344262296,0.26917433026789284,0.2693322670931627,0.26949020391843265,0.2696481407437025,0.2698060775689724,0.2699640143942423,0.2701219512195122,0.2702798880447821,0.27043782487005197,0.27059576169532185,0.2707536985205918,0.27091163534586166,0.27106957217113153,0.2712275089964014,0.27138544582167135,0.2715433826469412,0.2717013194722111,0.27185925629748103,0.2720171931227509,0.2721751299480208,0.27233306677329067,0.2724910035985606,0.2726489404238305,0.27280687724910035,0.27296481407437023,0.27312275089964017,0.27328068772491004,0.2734386245501799,0.2735965613754498,0.27375449820071973,0.2739124350259896,0.2740703718512595,0.27422830867652936,0.2743862455017993,0.2745441823270692,0.27470211915233905,0.27486005597760893,0.27501799280287886,0.27517592962814874,0.2753338664534186,0.27549180327868855,0.27564974010395843,0.2758076769292283,0.2759656137544982,0.2761235505797681,0.276281487405038,0.2764394242303079,0.27659736105557775,0.2767552978808477,0.27691323470611756,0.27707117153138744,0.2772291083566573,0.27738704518192725,0.2775449820071971,0.277702918832467,0.2778608556577369,0.2780187924830068,0.2781767293082767,0.27833466613354657,0.27849260295881645,0.2786505397840864,0.27880847660935626,0.27896641343462614,0.279124350259896,0.27928228708516595,0.2794402239104358,0.2795981607357057,0.27975609756097564,0.2799140343862455,0.2800719712115154,0.28022990803678527,0.2803878448620552,0.2805457816873251,0.28070371851259496,0.28086165533786484,0.28101959216313477,0.28117752898840465,0.2813354658136745,0.2814934026389444,0.28165133946421433,0.2818092762894842,0.2819672131147541,0.28212514994002397,0.2822830867652939,0.2824410235905638,0.28259896041583366,0.28275689724110353,0.28291483406637347,0.28307277089164334,0.2832307077169132,0.2833886445421831,0.28354658136745303,0.2837045181927229,0.2838624550179928,0.2840203918432627,0.2841783286685326,0.2843362654938025,0.28449420231907235,0.2846521391443423,0.28481007596961216,0.28496801279488204,0.2851259496201519,0.28528388644542185,0.28544182327069173,0.2855997600959616,0.2857576969212315,0.2859156337465014,0.2860735705717713,0.2862315073970412,0.28638944422231105,0.286547381047581,0.28670531787285086,0.28686325469812074,0.2870211915233906,0.28717912834866055,0.28733706517393043,0.2874950019992003,0.28765293882447024,0.2878108756497401,0.28796881247501,0.28812674930027987,0.2882846861255498,0.2884426229508197,0.28860055977608956,0.28875849660135944,0.28891643342662937,0.28907437025189925,0.2892323070771691,0.289390243902439,0.28954818072770894,0.2897061175529788,0.2898640543782487,0.29002199120351857,0.2901799280287885,0.2903378648540584,0.29049580167932826,0.29065373850459814,0.29081167532986807,0.29096961215513795,0.2911275489804078,0.2912854858056777,0.29144342263094764,0.2916013594562175,0.2917592962814874,0.2919172331067573,0.2920751699320272,0.2922331067572971,0.29239104358256696,0.2925489804078369,0.29270691723310677,0.29286485405837664,0.2930227908836465,0.29318072770891646,0.29333866453418633,0.2934966013594562,0.2936545381847261,0.293812475009996,0.2939704118352659,0.2941283486605358,0.29428628548580565,0.2944442223110756,0.29460215913634547,0.29476009596161534,0.2949180327868852,0.29507596961215515,0.29523390643742503,0.2953918432626949,0.29554978008796484,0.2957077169132347,0.2958656537385046,0.2960235905637745,0.2961815273890444,0.2963394642143143,0.29649740103958416,0.29665533786485404,0.296813274690124,0.29697121151539385,0.29712914834066373,0.2972870851659336,0.29744502199120354,0.2976029588164734,0.2977608956417433,0.2979188324670132,0.2980767692922831,0.298234706117553,0.29839264294282286,0.29855057976809274,0.29870851659336267,0.29886645341863255,0.2990243902439024,0.2991823270691723,0.29934026389444224,0.2994982007197121,0.299656137544982,0.2998140743702519,0.2999720111955218,0.3001299480207917,0.30028788484606156,0.3004458216713315,0.30060375849660137,0.30076169532187125,0.3009196321471411,0.30107756897241106,0.30123550579768094,0.3013934426229508,0.3015513794482207,0.3017093162734906,0.3018672530987605,0.3020251899240304,0.30218312674930026,0.3023410635745702,0.30249900039984007,0.30265693722510995,0.3028148740503798,0.30297281087564976,0.30313074770091963,0.3032886845261895,0.3034466213514594,0.3036045581767293,0.3037624950019992,0.3039204318272691,0.304078368652539,0.3042363054778089,0.30439424230307877,0.30455217912834864,0.3047101159536186,0.30486805277888845,0.30502598960415833,0.3051839264294282,0.30534186325469814,0.305499800079968,0.3056577369052379,0.3058156737305078,0.3059736105557777,0.3061315473810476,0.30628948420631746,0.30644742103158734,0.3066053578568573,0.30676329468212715,0.30692123150739703,0.3070791683326669,0.30723710515793684,0.3073950419832067,0.3075529788084766,0.30771091563374653,0.3078688524590164,0.3080267892842863,0.30818472610955616,0.3083426629348261,0.308500599760096,0.30865853658536585,0.30881647341063573,0.30897441023590566,0.30913234706117554,0.3092902838864454,0.3094482207117153,0.3096061575369852,0.3097640943622551,0.309922031187525,0.31007996801279486,0.3102379048380648,0.31039584166333467,0.31055377848860455,0.3107117153138744,0.31086965213914436,0.31102758896441424,0.3111855257896841,0.311343462614954,0.3115013994402239,0.3116593362654938,0.3118172730907637,0.3119752099160336,0.3121331467413035,0.31229108356657337,0.31244902039184325,0.3126069572171132,0.31276489404238306,0.31292283086765293,0.3130807676929228,0.31323870451819275,0.3133966413434626,0.3135545781687325,0.3137125149940024,0.3138704518192723,0.3140283886445422,0.31418632546981207,0.31434426229508194,0.3145021991203519,0.31466013594562176,0.31481807277089163,0.3149760095961615,0.31513394642143144,0.3152918832467013,0.3154498200719712,0.3156077568972411,0.315765693722511,0.3159236305477809,0.31608156737305076,0.3162395041983207,0.3163974410235906,0.31655537784886045,0.31671331467413033,0.31687125149940026,0.31702918832467014,0.31718712514994,0.3173450619752099,0.31750299880047983,0.3176609356257497,0.3178188724510196,0.31797680927628946,0.3181347461015594,0.3182926829268293,0.31845061975209915,0.31860855657736903,0.31876649340263896,0.31892443022790884,0.3190823670531787,0.3192403038784486,0.31939824070371853,0.3195561775289884,0.3197141143542583,0.3198720511795282,0.3200299880047981,0.32018792483006797,0.32034586165533785,0.3205037984806078,0.32066173530587766,0.32081967213114754,0.3209776089564174,0.32113554578168735,0.3212934826069572,0.3214514194322271,0.321609356257497,0.3217672930827669,0.3219252299080368,0.32208316673330667,0.32224110355857655,0.3223990403838465,0.32255697720911636,0.32271491403438624,0.3228728508596561,0.32303078768492605,0.3231887245101959,0.3233466613354658,0.3235045981607357,0.3236625349860056,0.3238204718112755,0.32397840863654537,0.3241363454618153,0.3242942822870852,0.32445221911235506,0.32461015593762493,0.32476809276289487,0.32492602958816474,0.3250839664134346,0.3252419032387045,0.32539984006397443,0.3255577768892443,0.3257157137145142,0.32587365053978407,0.326031587365054,0.3261895241903239,0.32634746101559375,0.32650539784086363,0.32666333466613356,0.32682127149140344,0.3269792083166733,0.3271371451419432,0.32729508196721313,0.327453018792483,0.3276109556177529,0.32776889244302276,0.3279268292682927,0.3280847660935626,0.32824270291883245,0.3284006397441024,0.32855857656937226,0.32871651339464214,0.328874450219912,0.32903238704518195,0.32919032387045183,0.3293482606957217,0.3295061975209916,0.3296641343462615,0.3298220711715314,0.3299800079968013,0.33013794482207115,0.3302958816473411,0.33045381847261096,0.33061175529788084,0.3307696921231507,0.33092762894842065,0.3310855657736905,0.3312435025989604,0.3314014394242303,0.3315593762495002,0.3317173130747701,0.33187524990003997,0.3320331867253099,0.3321911235505798,0.33234906037584966,0.33250699720111954,0.33266493402638947,0.33282287085165935,0.3329808076769292,0.3331387445021991,0.33329668132746904,0.3334546181527389,0.3336125549780088,0.33377049180327867,0.3339284286285486,0.3340863654538185,0.33424430227908836,0.33440223910435823,0.33456017592962817,0.33471811275489805,0.3348760495801679,0.3350339864054378,0.33519192323070773,0.3353498600559776,0.3355077968812475,0.33566573370651737,0.3358236705317873,0.3359816073570572,0.33613954418232705,0.336297481007597,0.33645541783286687,0.33661335465813674,0.3367712914834066,0.33692922830867655,0.33708716513394643,0.3372451019592163,0.3374030387844862,0.3375609756097561,0.337718912435026,0.3378768492602959,0.33803478608556575,0.3381927229108357,0.33835065973610556,0.33850859656137544,0.3386665333866453,0.33882447021191525,0.33898240703718513,0.339140343862455,0.3392982806877249,0.3394562175129948,0.3396141543382647,0.3397720911635346,0.33993002798880445,0.3400879648140744,0.34024590163934426,0.34040383846461414,0.34056177528988407,0.34071971211515395,0.3408776489404238,0.3410355857656937,0.34119352259096364,0.3413514594162335,0.3415093962415034,0.34166733306677327,0.3418252698920432,0.3419832067173131,0.34214114354258296,0.34229908036785284,0.34245701719312277,0.34261495401839265,0.3427728908436625,0.3429308276689324,0.34308876449420234,0.3432467013194722,0.3434046381447421,0.34356257497001197,0.3437205117952819,0.3438784486205518,0.34403638544582166,0.3441943222710916,0.34435225909636147,0.34451019592163135,0.3446681327469012,0.34482606957217116,0.34498400639744103,0.3451419432227109,0.3452998800479808,0.3454578168732507,0.3456157536985206,0.3457736905237905,0.34593162734906036,0.3460895641743303,0.34624750099960017,0.34640543782487004,0.3465633746501399,0.34672131147540985,0.34687924830067973,0.3470371851259496,0.3471951219512195,0.3473530587764894,0.3475109956017593,0.3476689324270292,0.34782686925229905,0.347984806077569,0.34814274290283886,0.34830067972810874,0.3484586165533787,0.34861655337864855,0.34877449020391843,0.3489324270291883,0.34909036385445824,0.3492483006797281,0.349406237504998,0.3495641743302679,0.3497221111555378,0.3498800479808077,0.35003798480607756,0.35019592163134744,0.3503538584566174,0.35051179528188725,0.35066973210715713,0.350827668932427,0.35098560575769694,0.3511435425829668,0.3513014794082367,0.35145941623350657,0.3516173530587765,0.3517752898840464,0.35193322670931626,0.35209116353458614,0.35224910035985607,0.35240703718512595,0.3525649740103958,0.35272291083566576,0.35288084766093564,0.3530387844862055,0.3531967213114754,0.3533546581367453,0.3535125949620152,0.3536705317872851,0.35382846861255496,0.3539864054378249,0.35414434226309477,0.35430227908836465,0.3544602159136345,0.35461815273890446,0.35477608956417434,0.3549340263894442,0.3550919632147141,0.355249900039984,0.3554078368652539,0.3555657736905238,0.35572371051579366,0.3558816473410636,0.35603958416633347,0.35619752099160334,0.3563554578168733,0.35651339464214316,0.35667133146741303,0.3568292682926829,0.35698720511795284,0.3571451419432227,0.3573030787684926,0.3574610155937625,0.3576189524190324,0.3577768892443023,0.35793482606957217,0.35809276289484204,0.358250699720112,0.35840863654538185,0.35856657337065173,0.3587245101959216,0.35888244702119154,0.3590403838464614,0.3591983206717313,0.3593562574970012,0.3595141943222711,0.359672131147541,0.35983006797281086,0.35998800479808074,0.3601459416233507,0.36030387844862055,0.36046181527389043,0.36061975209916036,0.36077768892443024,0.3609356257497001,0.36109356257497,0.36125149940023993,0.3614094362255098,0.3615673730507797,0.36172530987604956,0.3618832467013195,0.36204118352658937,0.36219912035185925,0.3623570571771291,0.36251499400239906,0.36267293082766894,0.3628308676529388,0.3629888044782087,0.3631467413034786,0.3633046781287485,0.3634626149540184,0.36362055177928826,0.3637784886045582,0.36393642542982807,0.36409436225509795,0.3642522990803678,0.36441023590563776,0.36456817273090764,0.3647261095561775,0.36488404638144745,0.3650419832067173,0.3651999200319872,0.3653578568572571,0.365515793682527,0.3656737305077969,0.36583166733306677,0.36598960415833665,0.3661475409836066,0.36630547780887646,0.36646341463414633,0.3666213514594162,0.36677928828468614,0.366937225109956,0.3670951619352259,0.3672530987604958,0.3674110355857657,0.3675689724110356,0.36772690923630547,0.36788484606157534,0.3680427828868453,0.36820071971211515,0.36835865653738503,0.36851659336265497,0.36867453018792484,0.3688324670131947,0.3689904038384646,0.36914834066373453,0.3693062774890044,0.3694642143142743,0.36962215113954416,0.3697800879648141,0.369938024790084,0.37009596161535385,0.37025389844062373,0.37041183526589366,0.37056977209116354,0.3707277089164334,0.3708856457417033,0.37104358256697323,0.3712015193922431,0.371359456217513,0.37151739304278286,0.3716753298680528,0.3718332666933227,0.37199120351859255,0.37214914034386243,0.37230707716913236,0.37246501399440224,0.3726229508196721,0.37278088764494205,0.3729388244702119,0.3730967612954818,0.3732546981207517,0.3734126349460216,0.3735705717712915,0.37372850859656137,0.37388644542183125,0.3740443822471012,0.37420231907237106,0.37436025589764094,0.3745181927229108,0.37467612954818075,0.3748340663734506,0.3749920031987205,0.3751499400239904,0.3753078768492603,0.3754658136745302,0.37562375049980007,0.37578168732506995,0.3759396241503399,0.37609756097560976,0.37625549780087963,0.37641343462614957,0.37657137145141945,0.3767293082766893,0.3768872451019592,0.37704518192722913,0.377203118752499,0.3773610555777689,0.37751899240303877,0.3776769292283087,0.3778348660535786,0.37799280287884846,0.37815073970411833,0.37830867652938827,0.37846661335465814,0.378624550179928,0.3787824870051979,0.37894042383046783,0.3790983606557377,0.3792562974810076,0.37941423430627746,0.3795721711315474,0.3797301079568173,0.37988804478208715,0.38004598160735703,0.38020391843262696,0.38036185525789684,0.3805197920831667,0.38067772890843665,0.38083566573370653,0.3809936025589764,0.3811515393842463,0.3813094762095162,0.3814674130347861,0.381625349860056,0.38178328668532585,0.3819412235105958,0.38209916033586566,0.38225709716113554,0.3824150339864054,0.38257297081167535,0.38273090763694523,0.3828888444622151,0.383046781287485,0.3832047181127549,0.3833626549380248,0.38352059176329467,0.38367852858856455,0.3838364654138345,0.38399440223910436,0.38415233906437424,0.3843102758896441,0.38446821271491405,0.3846261495401839,0.3847840863654538,0.38494202319072374,0.3850999600159936,0.3852578968412635,0.38541583366653337,0.3855737704918033,0.3857317073170732,0.38588964414234306,0.38604758096761294,0.38620551779288287,0.38636345461815275,0.3865213914434226,0.3866793282686925,0.38683726509396243,0.3869952019192323,0.3871531387445022,0.38731107556977207,0.387469012395042,0.3876269492203119,0.38778488604558176,0.38794282287085163,0.38810075969612157,0.38825869652139144,0.3884166333466613,0.38857457017193126,0.38873250699720113,0.388890443822471,0.3890483806477409,0.3892063174730108,0.3893642542982807,0.3895221911235506,0.38968012794882045,0.3898380647740904,0.38999600159936026,0.39015393842463014,0.3903118752499,0.39046981207516995,0.39062774890043983,0.3907856857257097,0.3909436225509796,0.3911015593762495,0.3912594962015194,0.3914174330267893,0.39157536985205915,0.3917333066773291,0.39189124350259896,0.39204918032786884,0.3922071171531387,0.39236505397840865,0.39252299080367853,0.3926809276289484,0.39283886445421834,0.3929968012794882,0.3931547381047581,0.393312674930028,0.3934706117552979,0.3936285485805678,0.39378648540583766,0.39394442223110754,0.39410235905637747,0.39426029588164735,0.3944182327069172,0.3945761695321871,0.39473410635745704,0.3948920431827269,0.3950499800079968,0.39520791683326667,0.3953658536585366,0.3955237904838065,0.39568172730907636,0.39583966413434624,0.39599760095961617,0.39615553778488605,0.3963134746101559,0.3964714114354258,0.39662934826069574,0.3967872850859656,0.3969452219112355,0.3971031587365054,0.3972610955617753,0.3974190323870452,0.39757696921231506,0.397734906037585,0.39789284286285487,0.39805077968812475,0.3982087165133946,0.39836665333866456,0.39852459016393443,0.3986825269892043,0.3988404638144742,0.3989984006397441,0.399156337465014,0.3993142742902839,0.39947221111555375,0.3996301479408237,0.39978808476609357,0.39994602159136344,0.4001039584166333,0.40026189524190325,0.40041983206717313,0.400577768892443,0.40073570571771294,0.4008936425429828,0.4010515793682527,0.4012095161935226,0.4013674530187925,0.4015253898440624,0.40168332666933226,0.40184126349460214,0.4019992003198721,0.40215713714514195,0.40231507397041183,0.4024730107956817,0.40263094762095164,0.4027888844462215,0.4029468212714914,0.4031047580967613,0.4032626949220312,0.4034206317473011,0.40357856857257096,0.40373650539784084,0.4038944422231108,0.40405237904838065,0.4042103158736505,0.4043682526989204,0.40452618952419034,0.4046841263494602,0.4048420631747301,0.405,0.4051579368252699,0.4053158736505398,0.40547381047580966,0.4056317473010796,0.40578968412634947,0.40594762095161935,0.4061055577768892,0.40626349460215916,0.40642143142742904,0.4065793682526989,0.4067373050779688,0.4068952419032387,0.4070531787285086,0.4072111155537785,0.40736905237904836,0.4075269892043183,0.40768492602958817,0.40784286285485805,0.4080007996801279,0.40815873650539786,0.40831667333066773,0.4084746101559376,0.4086325469812075,0.4087904838064774,0.4089484206317473,0.4091063574570172,0.4092642942822871,0.409422231107557,0.40958016793282687,0.40973810475809674,0.4098960415833667,0.41005397840863655,0.41021191523390643,0.4103698520591763,0.41052778888444624,0.4106857257097161,0.410843662534986,0.4110015993602559,0.4111595361855258,0.4113174730107957,0.41147540983606556,0.41163334666133544,0.4117912834866054,0.41194922031187525,0.41210715713714513,0.412265093962415,0.41242303078768494,0.4125809676129548,0.4127389044382247,0.41289684126349463,0.4130547780887645,0.4132127149140344,0.41337065173930426,0.4135285885645742,0.4136865253898441,0.41384446221511395,0.41400239904038383,0.41416033586565376,0.41431827269092364,0.4144762095161935,0.4146341463414634,0.4147920831667333,0.4149500199920032,0.4151079568172731,0.41526589364254296,0.4154238304678129,0.41558176729308277,0.41573970411835265,0.4158976409436225,0.41605557776889246,0.41621351459416234,0.4163714514194322,0.4165293882447021,0.416687325069972,0.4168452618952419,0.4170031987205118,0.4171611355457817,0.4173190723710516,0.41747700919632147,0.41763494602159135,0.4177928828468613,0.41795081967213116,0.41810875649740104,0.4182666933226709,0.41842463014794085,0.4185825669732107,0.4187405037984806,0.4188984406237505,0.4190563774490204,0.4192143142742903,0.41937225109956017,0.41953018792483004,0.4196881247501,0.41984606157536986,0.42000399840063973,0.4201619352259096,0.42031987205117954,0.4204778088764494,0.4206357457017193,0.4207936825269892,0.4209516193522591,0.421109556177529,0.42126749300279887,0.4214254298280688,0.4215833666533387,0.42174130347860855,0.42189924030387843,0.42205717712914836,0.42221511395441824,0.4223730507796881,0.422530987604958,0.42268892443022793,0.4228468612554978,0.4230047980807677,0.42316273490603756,0.4233206717313075,0.4234786085565774,0.42363654538184725,0.42379448220711713,0.42395241903238706,0.42411035585765694,0.4242682926829268,0.4244262295081967,0.42458416633346663,0.4247421031587365,0.4249000399840064,0.4250579768092763,0.4252159136345462,0.42537385045981607,0.42553178728508595,0.4256897241103559,0.42584766093562576,0.42600559776089564,0.4261635345861655,0.42632147141143545,0.4264794082367053,0.4266373450619752,0.4267952818872451,0.426953218712515,0.4271111555377849,0.42726909236305477,0.42742702918832465,0.4275849660135946,0.42774290283886446,0.42790083966413434,0.4280587764894042,0.42821671331467415,0.428374650139944,0.4285325869652139,0.4286905237904838,0.4288484606157537,0.4290063974410236,0.42916433426629347,0.4293222710915634,0.4294802079168333,0.42963814474210316,0.42979608156737303,0.42995401839264297,0.43011195521791284,0.4302698920431827,0.4304278288684526,0.43058576569372253,0.4307437025189924,0.4309016393442623,0.43105957616953217,0.4312175129948021,0.431375449820072,0.43153338664534185,0.43169132347061173,0.43184926029588167,0.43200719712115154,0.4321651339464214,0.4323230707716913,0.43248100759696123,0.4326389444222311,0.432796881247501,0.43295481807277086,0.4331127548980408,0.4332706917233107,0.43342862854858055,0.4335865653738505,0.43374450219912036,0.43390243902439024,0.4340603758496601,0.43421831267493005,0.43437624950019993,0.4345341863254698,0.4346921231507397,0.4348500599760096,0.4350079968012795,0.4351659336265494,0.43532387045181925,0.4354818072770892,0.43563974410235906,0.43579768092762894,0.4359556177528988,0.43611355457816875,0.4362714914034386,0.4364294282287085,0.4365873650539784,0.4367453018792483,0.4369032387045182,0.43706117552978807,0.437219112355058,0.4373770491803279,0.43753498600559776,0.43769292283086764,0.43785085965613757,0.43800879648140745,0.4381667333066773,0.4383246701319472,0.43848260695721714,0.438640543782487,0.4387984806077569,0.43895641743302677,0.4391143542582967,0.4392722910835666,0.43943022790883646,0.43958816473410633,0.43974610155937627,0.43990403838464615,0.440061975209916,0.4402199120351859,0.44037784886045583,0.4405357856857257,0.4406937225109956,0.44085165933626547,0.4410095961615354,0.4411675329868053,0.44132546981207516,0.4414834066373451,0.44164134346261497,0.44179928028788484,0.4419572171131547,0.44211515393842465,0.44227309076369453,0.4424310275889644,0.4425889644142343,0.4427469012395042,0.4429048380647741,0.443062774890044,0.44322071171531385,0.4433786485405838,0.44353658536585366,0.44369452219112354,0.4438524590163934,0.44401039584166335,0.44416833266693323,0.4443262694922031,0.444484206317473,0.4446421431427429,0.4448000799680128,0.4449580167932827,0.4451159536185526,0.4452738904438225,0.44543182726909236,0.44558976409436224,0.4457477009196322,0.44590563774490205,0.44606357457017193,0.4462215113954418,0.44637944822071174,0.4465373850459816,0.4466953218712515,0.44685325869652137,0.4470111955217913,0.4471691323470612,0.44732706917233106,0.44748500599760094,0.44764294282287087,0.44780087964814075,0.4479588164734106,0.4481167532986805,0.44827469012395044,0.4484326269492203,0.4485905637744902,0.44874850059976007,0.44890643742503,0.4490643742502999,0.44922231107556976,0.4493802479008397,0.44953818472610957,0.44969612155137945,0.4498540583766493,0.45001199520191926,0.45016993202718913,0.450327868852459,0.4504858056777289,0.4506437425029988,0.4508016793282687,0.4509596161535386,0.45111755297880846,0.4512754898040784,0.45143342662934827,0.45159136345461814,0.451749300279888,0.45190723710515796,0.45206517393042783,0.4522231107556977,0.4523810475809676,0.4525389844062375,0.4526969212315074,0.4528548580567773,0.45301279488204715,0.4531707317073171,0.45332866853258696,0.45348660535785684,0.4536445421831268,0.45380247900839665,0.45396041583366653,0.4541183526589364,0.45427628948420634,0.4544342263094762,0.4545921631347461,0.454750099960016,0.4549080367852859,0.4550659736105558,0.45522391043582566,0.45538184726109554,0.4555397840863655,0.45569772091163535,0.45585565773690523,0.4560135945621751,0.45617153138744504,0.4563294682127149,0.4564874050379848,0.4566453418632547,0.4568032786885246,0.4569612155137945,0.45711915233906436,0.4572770891643343,0.45743502598960417,0.45759296281487405,0.4577508996401439,0.45790883646541386,0.45806677329068374,0.4582247101159536,0.4583826469412235,0.4585405837664934,0.4586985205917633,0.4588564574170332,0.45901439424230306,0.459172331067573,0.45933026789284287,0.45948820471811275,0.4596461415433826,0.45980407836865256,0.45996201519392244,0.4601199520191923,0.4602778888444622,0.4604358256697321,0.460593762495002,0.4607516993202719,0.46090963614554176,0.4610675729708117,0.46122550979608157,0.46138344662135145,0.4615413834466214,0.46169932027189126,0.46185725709716113,0.462015193922431,0.46217313074770094,0.4623310675729708,0.4624890043982407,0.4626469412235106,0.4628048780487805,0.4629628148740504,0.46312075169932027,0.46327868852459014,0.4634366253498601,0.46359456217512995,0.46375249900039983,0.4639104358256697,0.46406837265093964,0.4642263094762095,0.4643842463014794,0.4645421831267493,0.4647001199520192,0.4648580567772891,0.46501599360255896,0.46517393042782884,0.4653318672530988,0.46548980407836865,0.46564774090363853,0.46580567772890846,0.46596361455417834,0.4661215513794482,0.4662794882047181,0.46643742502998803,0.4665953618552579,0.4667532986805278,0.46691123550579766,0.4670691723310676,0.4672271091563375,0.46738504598160735,0.4675429828068772,0.46770091963214716,0.46785885645741704,0.4680167932826869,0.4681747301079568,0.4683326669332267,0.4684906037584966,0.4686485405837665,0.46880647740903636,0.4689644142343063,0.46912235105957617,0.46928028788484605,0.469438224710116,0.46959616153538586,0.46975409836065574,0.4699120351859256,0.47006997201119555,0.4702279088364654,0.4703858456617353,0.4705437824870052,0.4707017193122751,0.470859656137545,0.47101759296281487,0.47117552978808475,0.4713334666133547,0.47149140343862456,0.47164934026389443,0.4718072770891643,0.47196521391443425,0.4721231507397041,0.472281087564974,0.4724390243902439,0.4725969612155138,0.4727548980407837,0.47291283486605357,0.47307077169132344,0.4732287085165934,0.47338664534186325,0.47354458216713313,0.47370251899240307,0.47386045581767294,0.4740183926429428,0.4741763294682127,0.47433426629348263,0.4744922031187525,0.4746501399440224,0.47480807676929226,0.4749660135945622,0.4751239504198321,0.47528188724510195,0.47543982407037183,0.47559776089564176,0.47575569772091164,0.4759136345461815,0.4760715713714514,0.47622950819672133,0.4763874450219912,0.4765453818472611,0.47670331867253096,0.4768612554978009,0.4770191923230708,0.47717712914834065,0.47733506597361053,0.47749300279888046,0.47765093962415034,0.4778088764494202,0.47796681327469015,0.47812475009996,0.4782826869252299,0.4784406237504998,0.4785985605757697,0.4787564974010396,0.47891443422630947,0.47907237105157935,0.4792303078768493,0.47938824470211916,0.47954618152738904,0.4797041183526589,0.47986205517792885,0.4800199920031987,0.4801779288284686,0.4803358656537385,0.4804938024790084,0.4806517393042783,0.48080967612954817,0.48096761295481805,0.481125549780088,0.48128348660535786,0.48144142343062774,0.48159936025589767,0.48175729708116755,0.4819152339064374,0.4820731707317073,0.48223110755697723,0.4823890443822471,0.482546981207517,0.48270491803278687,0.4828628548580568,0.4830207916833267,0.48317872850859656,0.48333666533386643,0.48349460215913637,0.48365253898440624,0.4838104758096761,0.483968412634946,0.48412634946021593,0.4842842862854858,0.4844422231107557,0.48460015993602557,0.4847580967612955,0.4849160335865654,0.48507397041183525,0.48523190723710513,0.48538984406237506,0.48554778088764494,0.4857057177129148,0.48586365453818475,0.48602159136345463,0.4861795281887245,0.4863374650139944,0.4864954018392643,0.4866533386645342,0.4868112754898041,0.48696921231507395,0.4871271491403439,0.48728508596561376,0.48744302279088364,0.4876009596161535,0.48775889644142345,0.48791683326669333,0.4880747700919632,0.4882327069172331,0.488390643742503,0.4885485805677729,0.48870651739304277,0.48886445421831265,0.4890223910435826,0.48918032786885246,0.48933826469412234,0.4894962015193922,0.48965413834466215,0.489812075169932,0.4899700119952019,0.49012794882047184,0.4902858856457417,0.4904438224710116,0.49060175929628147,0.4907596961215514,0.4909176329468213,0.49107556977209116,0.49123350659736104,0.49139144342263097,0.49154938024790085,0.4917073170731707,0.4918652538984406,0.49202319072371054,0.4921811275489804,0.4923390643742503,0.49249700119952017,0.4926549380247901,0.49281287485006,0.49297081167532986,0.49312874850059973,0.49328668532586967,0.49344462215113954,0.4936025589764094,0.49376049580167936,0.49391843262694923,0.4940763694522191,0.494234306277489,0.4943922431027589,0.4945501799280288,0.4947081167532987,0.49486605357856855,0.4950239904038385,0.49518192722910837,0.49533986405437824,0.4954978008796481,0.49565573770491805,0.49581367453018793,0.4959716113554578,0.4961295481807277,0.4962874850059976,0.4964454218312675,0.4966033586565374,0.49676129548180725,0.4969192323070772,0.49707716913234706,0.49723510595761694,0.4973930427828868,0.49755097960815675,0.49770891643342663,0.4978668532586965,0.49802479008396644,0.4981827269092363,0.4983406637345062,0.4984986005597761,0.498656537385046,0.4988144742103159,0.49897241103558576,0.49913034786085564,0.49928828468612557,0.49944622151139545,0.4996041583366653,0.4997620951619352,0.49992003198720514,0.500077968812475,0.5002359056377449,0.5003938424630148,0.5005517792882846,0.5007097161135545,0.5008676529388245,0.5010255897640944,0.5011835265893643,0.5013414634146341,0.501499400239904,0.5016573370651739,0.5018152738904438,0.5019732107157138,0.5021311475409836,0.5022890843662535,0.5024470211915234,0.5026049580167933,0.5027628948420632,0.502920831667333,0.5030787684926029,0.5032367053178729,0.5033946421431428,0.5035525789684127,0.5037105157936825,0.5038684526189524,0.5040263894442223,0.5041843262694922,0.504342263094762,0.504500199920032,0.5046581367453019,0.5048160735705718,0.5049740103958417,0.5051319472211115,0.5052898840463814,0.5054478208716513,0.5056057576969212,0.5057636945221912,0.505921631347461,0.5060795681727309,0.5062375049980008,0.5063954418232707,0.5065533786485406,0.5067113154738104,0.5068692522990804,0.5070271891243503,0.5071851259496202,0.50734306277489,0.5075009996001599,0.5076589364254298,0.5078168732506997,0.5079748100759696,0.5081327469012396,0.5082906837265094,0.5084486205517793,0.5086065573770492,0.5087644942023191,0.5089224310275889,0.5090803678528588,0.5092383046781287,0.5093962415033987,0.5095541783286686,0.5097121151539384,0.5098700519792083,0.5100279888044782,0.5101859256297481,0.510343862455018,0.5105017992802879,0.5106597361055578,0.5108176729308277,0.5109756097560976,0.5111335465813674,0.5112914834066373,0.5114494202319072,0.5116073570571771,0.5117652938824471,0.511923230707717,0.5120811675329868,0.5122391043582567,0.5123970411835266,0.5125549780087965,0.5127129148340663,0.5128708516593362,0.5130287884846062,0.5131867253098761,0.513344662135146,0.5135025989604158,0.5136605357856857,0.5138184726109556,0.5139764094362255,0.5141343462614955,0.5142922830867653,0.5144502199120352,0.5146081567373051,0.514766093562575,0.5149240303878448,0.5150819672131147,0.5152399040383846,0.5153978408636546,0.5155557776889245,0.5157137145141943,0.5158716513394642,0.5160295881647341,0.516187524990004,0.5163454618152739,0.5165033986405437,0.5166613354658137,0.5168192722910836,0.5169772091163535,0.5171351459416234,0.5172930827668932,0.5174510195921631,0.517608956417433,0.5177668932427029,0.5179248300679729,0.5180827668932427,0.5182407037185126,0.5183986405437825,0.5185565773690524,0.5187145141943222,0.5188724510195921,0.5190303878448621,0.519188324670132,0.5193462614954019,0.5195041983206717,0.5196621351459416,0.5198200719712115,0.5199780087964814,0.5201359456217513,0.5202938824470212,0.5204518192722911,0.520609756097561,0.5207676929228309,0.5209256297481007,0.5210835665733706,0.5212415033986405,0.5213994402239104,0.5215573770491804,0.5217153138744502,0.5218732506997201,0.52203118752499,0.5221891243502599,0.5223470611755298,0.5225049980007996,0.5226629348260696,0.5228208716513395,0.5229788084766094,0.5231367453018793,0.5232946821271491,0.523452618952419,0.5236105557776889,0.5237684926029588,0.5239264294282288,0.5240843662534986,0.5242423030787685,0.5244002399040384,0.5245581767293083,0.5247161135545781,0.524874050379848,0.5250319872051179,0.5251899240303879,0.5253478608556578,0.5255057976809276,0.5256637345061975,0.5258216713314674,0.5259796081567373,0.5261375449820072,0.5262954818072771,0.526453418632547,0.5266113554578169,0.5267692922830868,0.5269272291083567,0.5270851659336265,0.5272431027588964,0.5274010395841663,0.5275589764094363,0.5277169132347062,0.527874850059976,0.5280327868852459,0.5281907237105158,0.5283486605357857,0.5285065973610555,0.5286645341863254,0.5288224710115954,0.5289804078368653,0.5291383446621352,0.529296281487405,0.5294542183126749,0.5296121551379448,0.5297700919632147,0.5299280287884846,0.5300859656137545,0.5302439024390244,0.5304018392642943,0.5305597760895642,0.530717712914834,0.5308756497401039,0.5310335865653738,0.5311915233906438,0.5313494602159137,0.5315073970411835,0.5316653338664534,0.5318232706917233,0.5319812075169932,0.5321391443422631,0.5322970811675329,0.5324550179928029,0.5326129548180728,0.5327708916433427,0.5329288284686126,0.5330867652938824,0.5332447021191523,0.5334026389444222,0.5335605757696921,0.5337185125949621,0.5338764494202319,0.5340343862455018,0.5341923230707717,0.5343502598960416,0.5345081967213114,0.5346661335465813,0.5348240703718513,0.5349820071971212,0.5351399440223911,0.535297880847661,0.5354558176729308,0.5356137544982007,0.5357716913234706,0.5359296281487405,0.5360875649740104,0.5362455017992803,0.5364034386245502,0.5365613754498201,0.53671931227509,0.5368772491003598,0.5370351859256297,0.5371931227508996,0.5373510595761696,0.5375089964014395,0.5376669332267093,0.5378248700519792,0.5379828068772491,0.538140743702519,0.5382986805277888,0.5384566173530588,0.5386145541783287,0.5387724910035986,0.5389304278288685,0.5390883646541383,0.5392463014794082,0.5394042383046781,0.539562175129948,0.539720111955218,0.5398780487804878,0.5400359856057577,0.5401939224310276,0.5403518592562975,0.5405097960815674,0.5406677329068372,0.5408256697321071,0.5409836065573771,0.541141543382647,0.5412994802079168,0.5414574170331867,0.5416153538584566,0.5417732906837265,0.5419312275089964,0.5420891643342662,0.5422471011595362,0.5424050379848061,0.542562974810076,0.5427209116353459,0.5428788484606157,0.5430367852858856,0.5431947221111555,0.5433526589364255,0.5435105957616954,0.5436685325869652,0.5438264694122351,0.543984406237505,0.5441423430627749,0.5443002798880447,0.5444582167133146,0.5446161535385846,0.5447740903638545,0.5449320271891244,0.5450899640143942,0.5452479008396641,0.545405837664934,0.5455637744902039,0.5457217113154738,0.5458796481407437,0.5460375849660136,0.5461955217912835,0.5463534586165534,0.5465113954418233,0.5466693322670931,0.546827269092363,0.546985205917633,0.5471431427429029,0.5473010795681728,0.5474590163934426,0.5476169532187125,0.5477748900439824,0.5479328268692523,0.5480907636945221,0.5482487005197921,0.548406637345062,0.5485645741703319,0.5487225109956018,0.5488804478208716,0.5490383846461415,0.5491963214714114,0.5493542582966813,0.5495121951219513,0.5496701319472211,0.549828068772491,0.5499860055977609,0.5501439424230308,0.5503018792483007,0.5504598160735705,0.5506177528988405,0.5507756897241104,0.5509336265493803,0.5510915633746502,0.55124950019992,0.5514074370251899,0.5515653738504598,0.5517233106757297,0.5518812475009996,0.5520391843262695,0.5521971211515394,0.5523550579768093,0.5525129948020792,0.552670931627349,0.5528288684526189,0.5529868052778888,0.5531447421031588,0.5533026789284287,0.5534606157536985,0.5536185525789684,0.5537764894042383,0.5539344262295082,0.554092363054778,0.554250299880048,0.5544082367053179,0.5545661735305878,0.5547241103558577,0.5548820471811275,0.5550399840063974,0.5551979208316673,0.5553558576569372,0.5555137944822072,0.555671731307477,0.5558296681327469,0.5559876049580168,0.5561455417832867,0.5563034786085566,0.5564614154338264,0.5566193522590963,0.5567772890843663,0.5569352259096362,0.5570931627349061,0.5572510995601759,0.5574090363854458,0.5575669732107157,0.5577249100359856,0.5578828468612554,0.5580407836865254,0.5581987205117953,0.5583566573370652,0.5585145941623351,0.5586725309876049,0.5588304678128748,0.5589884046381447,0.5591463414634147,0.5593042782886846,0.5594622151139544,0.5596201519392243,0.5597780887644942,0.5599360255897641,0.560093962415034,0.5602518992403038,0.5604098360655738,0.5605677728908437,0.5607257097161136,0.5608836465413835,0.5610415833666533,0.5611995201919232,0.5613574570171931,0.561515393842463,0.561673330667733,0.5618312674930028,0.5619892043182727,0.5621471411435426,0.5623050779688125,0.5624630147940823,0.5626209516193522,0.5627788884446222,0.5629368252698921,0.563094762095162,0.5632526989204318,0.5634106357457017,0.5635685725709716,0.5637265093962415,0.5638844462215113,0.5640423830467813,0.5642003198720512,0.5643582566973211,0.564516193522591,0.5646741303478608,0.5648320671731307,0.5649900039984006,0.5651479408236705,0.5653058776489405,0.5654638144742103,0.5656217512994802,0.5657796881247501,0.56593762495002,0.5660955617752899,0.5662534986005597,0.5664114354258297,0.5665693722510996,0.5667273090763695,0.5668852459016394,0.5670431827269092,0.5672011195521791,0.567359056377449,0.5675169932027189,0.5676749300279889,0.5678328668532587,0.5679908036785286,0.5681487405037985,0.5683066773290684,0.5684646141543382,0.5686225509796081,0.568780487804878,0.568938424630148,0.5690963614554179,0.5692542982806877,0.5694122351059576,0.5695701719312275,0.5697281087564974,0.5698860455817673,0.5700439824070371,0.5702019192323071,0.570359856057577,0.5705177928828469,0.5706757297081168,0.5708336665333866,0.5709916033586565,0.5711495401839264,0.5713074770091964,0.5714654138344663,0.5716233506597361,0.571781287485006,0.5719392243102759,0.5720971611355458,0.5722550979608156,0.5724130347860855,0.5725709716113555,0.5727289084366254,0.5728868452618953,0.5730447820871651,0.573202718912435,0.5733606557377049,0.5735185925629748,0.5736765293882446,0.5738344662135146,0.5739924030387845,0.5741503398640544,0.5743082766893243,0.5744662135145941,0.574624150339864,0.5747820871651339,0.5749400239904039,0.5750979608156738,0.5752558976409436,0.5754138344662135,0.5755717712914834,0.5757297081167533,0.5758876449420232,0.576045581767293,0.576203518592563,0.5763614554178329,0.5765193922431028,0.5766773290683727,0.5768352658936425,0.5769932027189124,0.5771511395441823,0.5773090763694522,0.5774670131947222,0.577624950019992,0.5777828868452619,0.5779408236705318,0.5780987604958017,0.5782566973210715,0.5784146341463414,0.5785725709716114,0.5787305077968813,0.5788884446221512,0.579046381447421,0.5792043182726909,0.5793622550979608,0.5795201919232307,0.5796781287485006,0.5798360655737705,0.5799940023990404,0.5801519392243103,0.5803098760495802,0.58046781287485,0.5806257497001199,0.5807836865253898,0.5809416233506597,0.5810995601759297,0.5812574970011996,0.5814154338264694,0.5815733706517393,0.5817313074770092,0.5818892443022791,0.5820471811275489,0.5822051179528188,0.5823630547780888,0.5825209916033587,0.5826789284286286,0.5828368652538984,0.5829948020791683,0.5831527389044382,0.5833106757297081,0.5834686125549781,0.5836265493802479,0.5837844862055178,0.5839424230307877,0.5841003598560576,0.5842582966813274,0.5844162335065973,0.5845741703318672,0.5847321071571372,0.5848900439824071,0.585047980807677,0.5852059176329468,0.5853638544582167,0.5855217912834866,0.5856797281087565,0.5858376649340263,0.5859956017592963,0.5861535385845662,0.5863114754098361,0.586469412235106,0.5866273490603758,0.5867852858856457,0.5869432227109156,0.5871011595361856,0.5872590963614555,0.5874170331867253,0.5875749700119952,0.5877329068372651,0.587890843662535,0.5880487804878048,0.5882067173130747,0.5883646541383447,0.5885225909636146,0.5886805277888845,0.5888384646141543,0.5889964014394242,0.5891543382646941,0.589312275089964,0.5894702119152339,0.5896281487405038,0.5897860855657737,0.5899440223910436,0.5901019592163135,0.5902598960415834,0.5904178328668532,0.5905757696921231,0.5907337065173931,0.590891643342663,0.5910495801679329,0.5912075169932027,0.5913654538184726,0.5915233906437425,0.5916813274690124,0.5918392642942822,0.5919972011195522,0.5921551379448221,0.592313074770092,0.5924710115953619,0.5926289484206317,0.5927868852459016,0.5929448220711715,0.5931027588964414,0.5932606957217114,0.5934186325469812,0.5935765693722511,0.593734506197521,0.5938924430227909,0.5940503798480608,0.5942083166733306,0.5943662534986005,0.5945241903238705,0.5946821271491404,0.5948400639744102,0.5949980007996801,0.59515593762495,0.5953138744502199,0.5954718112754898,0.5956297481007597,0.5957876849260296,0.5959456217512995,0.5961035585765694,0.5962614954018393,0.5964194322271091,0.596577369052379,0.5967353058776489,0.5968932427029189,0.5970511795281888,0.5972091163534586,0.5973670531787285,0.5975249900039984,0.5976829268292683,0.5978408636545381,0.597998800479808,0.598156737305078,0.5983146741303479,0.5984726109556178,0.5986305477808876,0.5987884846061575,0.5989464214314274,0.5991043582566973,0.5992622950819673,0.5994202319072371,0.599578168732507,0.5997361055577769,0.5998940423830468,0.6000519792083167,0.6002099160335865,0.6003678528588564,0.6005257896841264,0.6006837265093963,0.6008416633346662,0.600999600159936,0.6011575369852059,0.6013154738104758,0.6014734106357457,0.6016313474610155,0.6017892842862855,0.6019472211115554,0.6021051579368253,0.6022630947620952,0.602421031587365,0.6025789684126349,0.6027369052379048,0.6028948420631748,0.6030527788884447,0.6032107157137145,0.6033686525389844,0.6035265893642543,0.6036845261895242,0.603842463014794,0.6040003998400639,0.6041583366653339,0.6043162734906038,0.6044742103158737,0.6046321471411435,0.6047900839664134,0.6049480207916833,0.6051059576169532,0.6052638944422231,0.605421831267493,0.6055797680927629,0.6057377049180328,0.6058956417433027,0.6060535785685726,0.6062115153938424,0.6063694522191123,0.6065273890443822,0.6066853258696522,0.6068432626949221,0.6070011995201919,0.6071591363454618,0.6073170731707317,0.6074750099960016,0.6076329468212714,0.6077908836465414,0.6079488204718113,0.6081067572970812,0.6082646941223511,0.608422630947621,0.6085805677728908,0.6087385045981607,0.6088964414234306,0.6090543782487006,0.6092123150739704,0.6093702518992403,0.6095281887245102,0.6096861255497801,0.60984406237505,0.6100019992003198,0.6101599360255897,0.6103178728508597,0.6104758096761296,0.6106337465013995,0.6107916833266693,0.6109496201519392,0.6111075569772091,0.611265493802479,0.611423430627749,0.6115813674530188,0.6117393042782887,0.6118972411035586,0.6120551779288285,0.6122131147540983,0.6123710515793682,0.6125289884046381,0.6126869252299081,0.612844862055178,0.6130027988804478,0.6131607357057177,0.6133186725309876,0.6134766093562575,0.6136345461815274,0.6137924830067972,0.6139504198320672,0.6141083566573371,0.614266293482607,0.6144242303078769,0.6145821671331467,0.6147401039584166,0.6148980407836865,0.6150559776089565,0.6152139144342263,0.6153718512594962,0.6155297880847661,0.615687724910036,0.6158456617353059,0.6160035985605757,0.6161615353858456,0.6163194722111156,0.6164774090363855,0.6166353458616554,0.6167932826869252,0.6169512195121951,0.617109156337465,0.6172670931627349,0.6174250299880047,0.6175829668132747,0.6177409036385446,0.6178988404638145,0.6180567772890844,0.6182147141143542,0.6183726509396241,0.618530587764894,0.6186885245901639,0.6188464614154339,0.6190043982407037,0.6191623350659736,0.6193202718912435,0.6194782087165134,0.6196361455417833,0.6197940823670531,0.6199520191923231,0.620109956017593,0.6202678928428629,0.6204258296681328,0.6205837664934026,0.6207417033186725,0.6208996401439424,0.6210575769692123,0.6212155137944823,0.6213734506197521,0.621531387445022,0.6216893242702919,0.6218472610955618,0.6220051979208316,0.6221631347461015,0.6223210715713714,0.6224790083966414,0.6226369452219113,0.6227948820471811,0.622952818872451,0.6231107556977209,0.6232686925229908,0.6234266293482607,0.6235845661735306,0.6237425029988005,0.6239004398240704,0.6240583766493403,0.6242163134746102,0.62437425029988,0.6245321871251499,0.6246901239504198,0.6248480607756898,0.6250059976009597,0.6251639344262295,0.6253218712514994,0.6254798080767693,0.6256377449020392,0.625795681727309,0.6259536185525789,0.6261115553778489,0.6262694922031188,0.6264274290283887,0.6265853658536585,0.6267433026789284,0.6269012395041983,0.6270591763294682,0.6272171131547382,0.627375049980008,0.6275329868052779,0.6276909236305478,0.6278488604558177,0.6280067972810875,0.6281647341063574,0.6283226709316273,0.6284806077568973,0.6286385445821672,0.628796481407437,0.6289544182327069,0.6291123550579768,0.6292702918832467,0.6294282287085166,0.6295861655337864,0.6297441023590564,0.6299020391843263,0.6300599760095962,0.6302179128348661,0.6303758496601359,0.6305337864854058,0.6306917233106757,0.6308496601359456,0.6310075969612156,0.6311655337864854,0.6313234706117553,0.6314814074370252,0.6316393442622951,0.6317972810875649,0.6319552179128348,0.6321131547381048,0.6322710915633747,0.6324290283886446,0.6325869652139144,0.6327449020391843,0.6329028388644542,0.6330607756897241,0.633218712514994,0.6333766493402639,0.6335345861655338,0.6336925229908037,0.6338504598160736,0.6340083966413435,0.6341663334666133,0.6343242702918832,0.6344822071171531,0.6346401439424231,0.634798080767693,0.6349560175929628,0.6351139544182327,0.6352718912435026,0.6354298280687725,0.6355877648940423,0.6357457017193123,0.6359036385445822,0.6360615753698521,0.636219512195122,0.6363774490203918,0.6365353858456617,0.6366933226709316,0.6368512594962015,0.6370091963214715,0.6371671331467413,0.6373250699720112,0.6374830067972811,0.637640943622551,0.6377988804478208,0.6379568172730907,0.6381147540983606,0.6382726909236306,0.6384306277489005,0.6385885645741703,0.6387465013994402,0.6389044382247101,0.63906237504998,0.6392203118752499,0.6393782487005198,0.6395361855257897,0.6396941223510596,0.6398520591763295,0.6400099960015994,0.6401679328268692,0.6403258696521391,0.640483806477409,0.640641743302679,0.6407996801279489,0.6409576169532187,0.6411155537784886,0.6412734906037585,0.6414314274290284,0.6415893642542982,0.6417473010795681,0.6419052379048381,0.642063174730108,0.6422211115553779,0.6423790483806477,0.6425369852059176,0.6426949220311875,0.6428528588564574,0.6430107956817273,0.6431687325069972,0.6433266693322671,0.643484606157537,0.6436425429828069,0.6438004798080768,0.6439584166333466,0.6441163534586165,0.6442742902838865,0.6444322271091564,0.6445901639344263,0.6447481007596961,0.644906037584966,0.6450639744102359,0.6452219112355058,0.6453798480607756,0.6455377848860456,0.6456957217113155,0.6458536585365854,0.6460115953618553,0.6461695321871251,0.646327469012395,0.6464854058376649,0.6466433426629348,0.6468012794882048,0.6469592163134746,0.6471171531387445,0.6472750899640144,0.6474330267892843,0.6475909636145541,0.647748900439824,0.647906837265094,0.6480647740903639,0.6482227109156338,0.6483806477409036,0.6485385845661735,0.6486965213914434,0.6488544582167133,0.6490123950419832,0.6491703318672531,0.649328268692523,0.6494862055177929,0.6496441423430628,0.6498020791683327,0.6499600159936025,0.6501179528188724,0.6502758896441423,0.6504338264694123,0.6505917632946822,0.650749700119952,0.6509076369452219,0.6510655737704918,0.6512235105957617,0.6513814474210315,0.6515393842463015,0.6516973210715714,0.6518552578968413,0.6520131947221112,0.652171131547381,0.6523290683726509,0.6524870051979208,0.6526449420231907,0.6528028788484607,0.6529608156737305,0.6531187524990004,0.6532766893242703,0.6534346261495402,0.65359256297481,0.6537504998000799,0.6539084366253498,0.6540663734506198,0.6542243102758897,0.6543822471011596,0.6545401839264294,0.6546981207516993,0.6548560575769692,0.6550139944022391,0.6551719312275089,0.6553298680527789,0.6554878048780488,0.6556457417033187,0.6558036785285886,0.6559616153538584,0.6561195521791283,0.6562774890043982,0.6564354258296682,0.6565933626549381,0.6567512994802079,0.6569092363054778,0.6570671731307477,0.6572251099560176,0.6573830467812875,0.6575409836065573,0.6576989204318273,0.6578568572570972,0.6580147940823671,0.658172730907637,0.6583306677329068,0.6584886045581767,0.6586465413834466,0.6588044782087165,0.6589624150339864,0.6591203518592563,0.6592782886845262,0.6594362255097961,0.659594162335066,0.6597520991603358,0.6599100359856057,0.6600679728108757,0.6602259096361456,0.6603838464614155,0.6605417832866853,0.6606997201119552,0.6608576569372251,0.661015593762495,0.6611735305877648,0.6613314674130348,0.6614894042383047,0.6616473410635746,0.6618052778888445,0.6619632147141143,0.6621211515393842,0.6622790883646541,0.662437025189924,0.662594962015194,0.6627528988404638,0.6629108356657337,0.6630687724910036,0.6632267093162735,0.6633846461415434,0.6635425829668132,0.6637005197920832,0.6638584566173531,0.664016393442623,0.6641743302678929,0.6643322670931627,0.6644902039184326,0.6646481407437025,0.6648060775689724,0.6649640143942424,0.6651219512195122,0.6652798880447821,0.665437824870052,0.6655957616953219,0.6657536985205917,0.6659116353458616,0.6660695721711315,0.6662275089964015,0.6663854458216714,0.6665433826469412,0.6667013194722111,0.666859256297481,0.6670171931227509,0.6671751299480208,0.6673330667732906,0.6674910035985606,0.6676489404238305,0.6678068772491004,0.6679648140743703,0.6681227508996401,0.66828068772491,0.6684386245501799,0.6685965613754499,0.6687544982007197,0.6689124350259896,0.6690703718512595,0.6692283086765294,0.6693862455017993,0.6695441823270691,0.669702119152339,0.669860055977609,0.6700179928028789,0.6701759296281488,0.6703338664534186,0.6704918032786885,0.6706497401039584,0.6708076769292283,0.6709656137544981,0.6711235505797681,0.671281487405038,0.6714394242303079,0.6715973610555778,0.6717552978808476,0.6719132347061175,0.6720711715313874,0.6722291083566574,0.6723870451819273,0.6725449820071971,0.672702918832467,0.6728608556577369,0.6730187924830068,0.6731767293082767,0.6733346661335465,0.6734926029588165,0.6736505397840864,0.6738084766093563,0.6739664134346262,0.674124350259896,0.6742822870851659,0.6744402239104358,0.6745981607357057,0.6747560975609757,0.6749140343862455,0.6750719712115154,0.6752299080367853,0.6753878448620552,0.675545781687325,0.6757037185125949,0.6758616553378649,0.6760195921631348,0.6761775289884047,0.6763354658136745,0.6764934026389444,0.6766513394642143,0.6768092762894842,0.676967213114754,0.677125149940024,0.6772830867652939,0.6774410235905638,0.6775989604158337,0.6777568972411036,0.6779148340663734,0.6780727708916433,0.6782307077169132,0.6783886445421832,0.678546581367453,0.6787045181927229,0.6788624550179928,0.6790203918432627,0.6791783286685326,0.6793362654938024,0.6794942023190723,0.6796521391443423,0.6798100759696122,0.6799680127948821,0.6801259496201519,0.6802838864454218,0.6804418232706917,0.6805997600959616,0.6807576969212316,0.6809156337465014,0.6810735705717713,0.6812315073970412,0.6813894442223111,0.681547381047581,0.6817053178728508,0.6818632546981207,0.6820211915233907,0.6821791283486606,0.6823370651739304,0.6824950019992003,0.6826529388244702,0.6828108756497401,0.68296881247501,0.6831267493002798,0.6832846861255498,0.6834426229508197,0.6836005597760896,0.6837584966013595,0.6839164334266293,0.6840743702518992,0.6842323070771691,0.6843902439024391,0.684548180727709,0.6847061175529788,0.6848640543782487,0.6850219912035186,0.6851799280287885,0.6853378648540583,0.6854958016793282,0.6856537385045982,0.6858116753298681,0.685969612155138,0.6861275489804078,0.6862854858056777,0.6864434226309476,0.6866013594562175,0.6867592962814874,0.6869172331067573,0.6870751699320272,0.6872331067572971,0.687391043582567,0.6875489804078369,0.6877069172331067,0.6878648540583766,0.6880227908836466,0.6881807277089165,0.6883386645341864,0.6884966013594562,0.6886545381847261,0.688812475009996,0.6889704118352659,0.6891283486605357,0.6892862854858057,0.6894442223110756,0.6896021591363455,0.6897600959616154,0.6899180327868852,0.6900759696121551,0.690233906437425,0.6903918432626949,0.6905497800879649,0.6907077169132347,0.6908656537385046,0.6910235905637745,0.6911815273890444,0.6913394642143142,0.6914974010395841,0.691655337864854,0.691813274690124,0.6919712115153939,0.6921291483406637,0.6922870851659336,0.6924450219912035,0.6926029588164734,0.6927608956417433,0.6929188324670132,0.6930767692922831,0.693234706117553,0.6933926429428229,0.6935505797680928,0.6937085165933626,0.6938664534186325,0.6940243902439024,0.6941823270691724,0.6943402638944423,0.6944982007197121,0.694656137544982,0.6948140743702519,0.6949720111955218,0.6951299480207916,0.6952878848460615,0.6954458216713315,0.6956037584966014,0.6957616953218713,0.6959196321471411,0.696077568972411,0.6962355057976809,0.6963934426229508,0.6965513794482208,0.6967093162734906,0.6968672530987605,0.6970251899240304,0.6971831267493003,0.6973410635745702,0.69749900039984,0.6976569372251099,0.6978148740503799,0.6979728108756498,0.6981307477009197,0.6982886845261895,0.6984466213514594,0.6986045581767293,0.6987624950019992,0.698920431827269,0.699078368652539,0.6992363054778089,0.6993942423030788,0.6995521791283487,0.6997101159536185,0.6998680527788884,0.7000259896041583,0.7001839264294283,0.7003418632546982,0.700499800079968,0.7006577369052379,0.7008156737305078,0.7009736105557777,0.7011315473810475,0.7012894842063174,0.7014474210315874,0.7016053578568573,0.7017632946821272,0.701921231507397,0.7020791683326669,0.7022371051579368,0.7023950419832067,0.7025529788084766,0.7027109156337465,0.7028688524590164,0.7030267892842863,0.7031847261095562,0.7033426629348261,0.7035005997600959,0.7036585365853658,0.7038164734106358,0.7039744102359057,0.7041323470611756,0.7042902838864454,0.7044482207117153,0.7046061575369852,0.7047640943622551,0.704922031187525,0.7050799680127949,0.7052379048380648,0.7053958416633347,0.7055537784886046,0.7057117153138744,0.7058696521391443,0.7060275889644142,0.7061855257896841,0.7063434626149541,0.7065013994402239,0.7066593362654938,0.7068172730907637,0.7069752099160336,0.7071331467413035,0.7072910835665733,0.7074490203918432,0.7076069572171132,0.7077648940423831,0.707922830867653,0.7080807676929228,0.7082387045181927,0.7083966413434626,0.7085545781687325,0.7087125149940025,0.7088704518192723,0.7090283886445422,0.7091863254698121,0.709344262295082,0.7095021991203518,0.7096601359456217,0.7098180727708916,0.7099760095961616,0.7101339464214315,0.7102918832467013,0.7104498200719712,0.7106077568972411,0.710765693722511,0.7109236305477808,0.7110815673730507,0.7112395041983207,0.7113974410235906,0.7115553778488605,0.7117133146741303,0.7118712514994002,0.7120291883246701,0.71218712514994,0.71234506197521,0.7125029988004798,0.7126609356257497,0.7128188724510196,0.7129768092762895,0.7131347461015594,0.7132926829268292,0.7134506197520991,0.7136085565773691,0.713766493402639,0.7139244302279089,0.7140823670531787,0.7142403038784486,0.7143982407037185,0.7145561775289884,0.7147141143542582,0.7148720511795282,0.7150299880047981,0.715187924830068,0.7153458616553379,0.7155037984806077,0.7156617353058776,0.7158196721311475,0.7159776089564175,0.7161355457816874,0.7162934826069572,0.7164514194322271,0.716609356257497,0.7167672930827669,0.7169252299080368,0.7170831667333066,0.7172411035585766,0.7173990403838465,0.7175569772091164,0.7177149140343863,0.7178728508596561,0.718030787684926,0.7181887245101959,0.7183466613354658,0.7185045981607358,0.7186625349860056,0.7188204718112755,0.7189784086365454,0.7191363454618153,0.7192942822870851,0.719452219112355,0.7196101559376249,0.7197680927628949,0.7199260295881648,0.7200839664134346,0.7202419032387045,0.7203998400639744,0.7205577768892443,0.7207157137145142,0.7208736505397841,0.721031587365054,0.7211895241903239,0.7213474610155938,0.7215053978408636,0.7216633346661335,0.7218212714914034,0.7219792083166733,0.7221371451419433,0.7222950819672131,0.722453018792483,0.7226109556177529,0.7227688924430228,0.7229268292682927,0.7230847660935625,0.7232427029188324,0.7234006397441024,0.7235585765693723,0.7237165133946422,0.723874450219912,0.7240323870451819,0.7241903238704518,0.7243482606957217,0.7245061975209917,0.7246641343462615,0.7248220711715314,0.7249800079968013,0.7251379448220712,0.725295881647341,0.7254538184726109,0.7256117552978808,0.7257696921231508,0.7259276289484207,0.7260855657736905,0.7262435025989604,0.7264014394242303,0.7265593762495002,0.72671731307477,0.7268752499000399,0.7270331867253099,0.7271911235505798,0.7273490603758497,0.7275069972011196,0.7276649340263894,0.7278228708516593,0.7279808076769292,0.7281387445021992,0.728296681327469,0.7284546181527389,0.7286125549780088,0.7287704918032787,0.7289284286285486,0.7290863654538184,0.7292443022790883,0.7294022391043583,0.7295601759296282,0.7297181127548981,0.7298760495801679,0.7300339864054378,0.7301919232307077,0.7303498600559776,0.7305077968812475,0.7306657337065174,0.7308236705317873,0.7309816073570572,0.7311395441823271,0.731297481007597,0.7314554178328668,0.7316133546581367,0.7317712914834066,0.7319292283086766,0.7320871651339464,0.7322451019592163,0.7324030387844862,0.7325609756097561,0.732718912435026,0.7328768492602958,0.7330347860855658,0.7331927229108357,0.7333506597361056,0.7335085965613755,0.7336665333866453,0.7338244702119152,0.7339824070371851,0.734140343862455,0.734298280687725,0.7344562175129948,0.7346141543382647,0.7347720911635346,0.7349300279888045,0.7350879648140743,0.7352459016393442,0.7354038384646141,0.7355617752898841,0.735719712115154,0.7358776489404238,0.7360355857656937,0.7361935225909636,0.7363514594162335,0.7365093962415034,0.7366673330667733,0.7368252698920432,0.7369832067173131,0.737141143542583,0.7372990803678529,0.7374570171931227,0.7376149540183926,0.7377728908436625,0.7379308276689325,0.7380887644942024,0.7382467013194722,0.7384046381447421,0.738562574970012,0.7387205117952819,0.7388784486205517,0.7390363854458216,0.7391943222710916,0.7393522590963615,0.7395101959216314,0.7396681327469012,0.7398260695721711,0.739984006397441,0.7401419432227109,0.7402998800479809,0.7404578168732507,0.7406157536985206,0.7407736905237905,0.7409316273490604,0.7410895641743303,0.7412475009996001,0.74140543782487,0.74156337465014,0.7417213114754099,0.7418792483006798,0.7420371851259496,0.7421951219512195,0.7423530587764894,0.7425109956017593,0.7426689324270291,0.7428268692522991,0.742984806077569,0.7431427429028389,0.7433006797281088,0.7434586165533786,0.7436165533786485,0.7437744902039184,0.7439324270291883,0.7440903638544583,0.7442483006797281,0.744406237504998,0.7445641743302679,0.7447221111555378,0.7448800479808076,0.7450379848060775,0.7451959216313475,0.7453538584566174,0.7455117952818873,0.7456697321071571,0.745827668932427,0.7459856057576969,0.7461435425829668,0.7463014794082367,0.7464594162335066,0.7466173530587765,0.7467752898840464,0.7469332267093163,0.7470911635345862,0.747249100359856,0.7474070371851259,0.7475649740103958,0.7477229108356658,0.7478808476609357,0.7480387844862055,0.7481967213114754,0.7483546581367453,0.7485125949620152,0.748670531787285,0.748828468612555,0.7489864054378249,0.7491443422630948,0.7493022790883647,0.7494602159136345,0.7496181527389044,0.7497760895641743,0.7499340263894442,0.7500919632147142,0.750249900039984,0.7504078368652539,0.7505657736905238,0.7507237105157937,0.7508816473410636,0.7510395841663334,0.7511975209916033,0.7513554578168733,0.7515133946421432,0.751671331467413,0.7518292682926829,0.7519872051179528,0.7521451419432227,0.7523030787684926,0.7524610155937625,0.7526189524190324,0.7527768892443023,0.7529348260695722,0.7530927628948421,0.7532506997201119,0.7534086365453818,0.7535665733706517,0.7537245101959217,0.7538824470211916,0.7540403838464614,0.7541983206717313,0.7543562574970012,0.7545141943222711,0.754672131147541,0.7548300679728108,0.7549880047980808,0.7551459416233507,0.7553038784486206,0.7554618152738904,0.7556197520991603,0.7557776889244302,0.7559356257497001,0.75609356257497,0.75625149940024,0.7564094362255098,0.7565673730507797,0.7567253098760496,0.7568832467013195,0.7570411835265893,0.7571991203518592,0.7573570571771292,0.7575149940023991,0.757672930827669,0.7578308676529388,0.7579888044782087,0.7581467413034786,0.7583046781287485,0.7584626149540183,0.7586205517792883,0.7587784886045582,0.7589364254298281,0.759094362255098,0.7592522990803678,0.7594102359056377,0.7595681727309076,0.7597261095561775,0.7598840463814475,0.7600419832067173,0.7601999200319872,0.7603578568572571,0.760515793682527,0.7606737305077969,0.7608316673330667,0.7609896041583367,0.7611475409836066,0.7613054778088765,0.7614634146341464,0.7616213514594162,0.7617792882846861,0.761937225109956,0.7620951619352259,0.7622530987604959,0.7624110355857657,0.7625689724110356,0.7627269092363055,0.7628848460615754,0.7630427828868452,0.7632007197121151,0.763358656537385,0.763516593362655,0.7636745301879249,0.7638324670131947,0.7639904038384646,0.7641483406637345,0.7643062774890044,0.7644642143142742,0.7646221511395442,0.7647800879648141,0.764938024790084,0.7650959616153539,0.7652538984406237,0.7654118352658936,0.7655697720911635,0.7657277089164334,0.7658856457417034,0.7660435825669732,0.7662015193922431,0.766359456217513,0.7665173930427829,0.7666753298680528,0.7668332666933226,0.7669912035185925,0.7671491403438625,0.7673070771691324,0.7674650139944023,0.7676229508196721,0.767780887644942,0.7679388244702119,0.7680967612954818,0.7682546981207516,0.7684126349460216,0.7685705717712915,0.7687285085965614,0.7688864454218313,0.7690443822471011,0.769202319072371,0.7693602558976409,0.7695181927229109,0.7696761295481808,0.7698340663734506,0.7699920031987205,0.7701499400239904,0.7703078768492603,0.7704658136745302,0.7706237504998,0.77078168732507,0.7709396241503399,0.7710975609756098,0.7712554978008797,0.7714134346261495,0.7715713714514194,0.7717293082766893,0.7718872451019592,0.7720451819272292,0.772203118752499,0.7723610555777689,0.7725189924030388,0.7726769292283087,0.7728348660535785,0.7729928028788484,0.7731507397041184,0.7733086765293883,0.7734666133546582,0.773624550179928,0.7737824870051979,0.7739404238304678,0.7740983606557377,0.7742562974810075,0.7744142343062775,0.7745721711315474,0.7747301079568173,0.7748880447820872,0.775045981607357,0.7752039184326269,0.7753618552578968,0.7755197920831667,0.7756777289084367,0.7758356657337065,0.7759936025589764,0.7761515393842463,0.7763094762095162,0.7764674130347861,0.7766253498600559,0.7767832866853259,0.7769412235105958,0.7770991603358657,0.7772570971611356,0.7774150339864054,0.7775729708116753,0.7777309076369452,0.7778888444622151,0.7780467812874851,0.7782047181127549,0.7783626549380248,0.7785205917632947,0.7786785285885646,0.7788364654138344,0.7789944022391043,0.7791523390643742,0.7793102758896442,0.7794682127149141,0.7796261495401839,0.7797840863654538,0.7799420231907237,0.7800999600159936,0.7802578968412635,0.7804158336665333,0.7805737704918033,0.7807317073170732,0.7808896441423431,0.781047580967613,0.7812055177928828,0.7813634546181527,0.7815213914434226,0.7816793282686926,0.7818372650939625,0.7819952019192323,0.7821531387445022,0.7823110755697721,0.782469012395042,0.7826269492203118,0.7827848860455817,0.7829428228708517,0.7831007596961216,0.7832586965213915,0.7834166333466613,0.7835745701719312,0.7837325069972011,0.783890443822471,0.7840483806477409,0.7842063174730108,0.7843642542982807,0.7845221911235506,0.7846801279488205,0.7848380647740903,0.7849960015993602,0.7851539384246301,0.7853118752499001,0.78546981207517,0.7856277489004398,0.7857856857257097,0.7859436225509796,0.7861015593762495,0.7862594962015194,0.7864174330267892,0.7865753698520592,0.7867333066773291,0.786891243502599,0.7870491803278689,0.7872071171531387,0.7873650539784086,0.7875229908036785,0.7876809276289484,0.7878388644542184,0.7879968012794882,0.7881547381047581,0.788312674930028,0.7884706117552979,0.7886285485805677,0.7887864854058376,0.7889444222311076,0.7891023590563775,0.7892602958816474,0.7894182327069172,0.7895761695321871,0.789734106357457,0.7898920431827269,0.7900499800079968,0.7902079168332667,0.7903658536585366,0.7905237904838065,0.7906817273090764,0.7908396641343463,0.7909976009596161,0.791155537784886,0.7913134746101559,0.7914714114354259,0.7916293482606958,0.7917872850859656,0.7919452219112355,0.7921031587365054,0.7922610955617753,0.7924190323870451,0.792576969212315,0.792734906037585,0.7928928428628549,0.7930507796881248,0.7932087165133946,0.7933666533386645,0.7935245901639344,0.7936825269892043,0.7938404638144743,0.7939984006397441,0.794156337465014,0.7943142742902839,0.7944722111155538,0.7946301479408237,0.7947880847660935,0.7949460215913634,0.7951039584166334,0.7952618952419033,0.7954198320671731,0.795577768892443,0.7957357057177129,0.7958936425429828,0.7960515793682527,0.7962095161935225,0.7963674530187925,0.7965253898440624,0.7966833266693323,0.7968412634946022,0.796999200319872,0.7971571371451419,0.7973150739704118,0.7974730107956818,0.7976309476209517,0.7977888844462215,0.7979468212714914,0.7981047580967613,0.7982626949220312,0.798420631747301,0.7985785685725709,0.7987365053978409,0.7988944422231108,0.7990523790483807,0.7992103158736505,0.7993682526989204,0.7995261895241903,0.7996841263494602,0.7998420631747301,0.8]}

},{}],91:[function(require,module,exports){
module.exports={"expected":[9.999999999999994e102,1.0000665822360565e103,1.000133182208433e103,1.0001997999253985e103,1.0002664353952288e103,1.0003330886262043e103,1.0003997596266113e103,1.0004664484047417e103,1.0005331549688931e103,1.0005998793273682e103,1.0006666214884753e103,1.0007333814605285e103,1.0008001592518476e103,1.0008669548707572e103,1.0009337683255882e103,1.001000599624677e103,1.0010674487763649e103,1.0011343157889995e103,1.0012012006709336e103,1.0012681034305259e103,1.0013350240761403e103,1.0014019626161467e103,1.0014689190589202e103,1.0015358934128415e103,1.0016028856862976e103,1.00166989588768e103,1.0017369240253866e103,1.0018039701078212e103,1.001871034143392e103,1.0019381161405139e103,1.0020052161076074e103,1.002072334053098e103,1.0021394699854172e103,1.0022066239130023e103,1.0022737958442961e103,1.0023409857877471e103,1.0024081937518093e103,1.0024754197449426e103,1.0025426637756125e103,1.0026099258522899e103,1.002677205983452e103,1.002744504177581e103,1.0028118204431654e103,1.0028791547886993e103,1.0029465072226817e103,1.0030138777536184e103,1.0030812663900202e103,1.0031486731404043e103,1.0032160980132926e103,1.0032835410172137e103,1.0033510021607016e103,1.0034184814522957e103,1.0034859789005418e103,1.0035534945139908e103,1.0036210283011998e103,1.0036885802707316e103,1.0037561504311545e103,1.0038237387910427e103,1.0038913453589764e103,1.0039589701435414e103,1.004026613153329e103,1.0040942743969367e103,1.004161953882968e103,1.0042296516200314e103,1.0042973676167418e103,1.00436510188172e103,1.0044328544235922e103,1.0045006252509905e103,1.0045684143725534e103,1.0046362217969241e103,1.004704047532753e103,1.004771891588695e103,1.0048397539734122e103,1.0049076346955711e103,1.0049755337638453e103,1.0050434511869136e103,1.005111386973461e103,1.005179341132178e103,1.005247313671761e103,1.005315304600913e103,1.005383313928342e103,1.005451341662762e103,1.0055193878128938e103,1.0055874523874629e103,1.0056555353952013e103,1.0057236368448471e103,1.005791756745144e103,1.0058598951048418e103,1.0059280519326957e103,1.0059962272374676e103,1.006064421027925e103,1.0061326333128414e103,1.0062008641009961e103,1.0062691134011745e103,1.0063373812221679e103,1.0064056675727733e103,1.0064739724617945e103,1.0065422958980402e103,1.0066106378903261e103,1.006678998447473e103,1.0067473775783082e103,1.0068157752916651e103,1.0068841915963826e103,1.006952626501306e103,1.0070210800152864e103,1.0070895521471813e103,1.0071580429058535e103,1.007226552300173e103,1.0072950803390143e103,1.0073636270312591e103,1.007432192385795e103,1.0075007764115152e103,1.0075693791173193e103,1.0076380005121129e103,1.0077066406048074e103,1.0077752994043208e103,1.0078439769195766e103,1.007912673159505e103,1.0079813881330417e103,1.0080501218491287e103,1.0081188743167143e103,1.0081876455447528e103,1.0082564355422042e103,1.0083252443180354e103,1.0083940718812189e103,1.0084629182407333e103,1.0085317834055632e103,1.0086006673847001e103,1.0086695701871408e103,1.0087384918218887e103,1.0088074322979533e103,1.00887639162435e103,1.0089453698101004e103,1.009014366864233e103,1.0090833827957814e103,1.0091524176137862e103,1.0092214713272935e103,1.0092905439453561e103,1.0093596354770331e103,1.009428745931389e103,1.0094978753174958e103,1.0095670236444305e103,1.0096361909212768e103,1.0097053771571248e103,1.0097745823610704e103,1.0098438065422163e103,1.009913049709671e103,1.0099823118725491e103,1.010051593039972e103,1.0101208932210671e103,1.010190212424968e103,1.0102595506608147e103,1.0103289079377533e103,1.010398284264936e103,1.0104676796515221e103,1.0105370941066764e103,1.01060652763957e103,1.010675980259381e103,1.0107454519752931e103,1.0108149427964965e103,1.010884452732188e103,1.0109539817915705e103,1.011023529983853e103,1.0110930973182514e103,1.0111626838039873e103,1.0112322894502894e103,1.0113019142663918e103,1.0113715582615359e103,1.011441221444969e103,1.0115109038259448e103,1.0115806054137232e103,1.011650326217571e103,1.011720066246761e103,1.0117898255105722e103,1.0118596040182904e103,1.011929401779208e103,1.011999218802623e103,1.0120690550978405e103,1.012138910674172e103,1.0122087855409348e103,1.0122786797074535e103,1.0123485931830586e103,1.0124185259770872e103,1.0124884780988826e103,1.0125584495577952e103,1.012628440363181e103,1.0126984505244031e103,1.0127684800508311e103,1.0128385289518405e103,1.0129085972368137e103,1.0129786849151397e103,1.0130487919962138e103,1.0131189184894378e103,1.01318906440422e103,1.0132592297499756e103,1.0133294145361257e103,1.013399618772098e103,1.0134698424673273e103,1.0135400856312545e103,1.0136103482733274e103,1.0136806304029994e103,1.0137509320297317e103,1.0138212531629915e103,1.0138915938122525e103,1.0139619539869946e103,1.0140323336967053e103,1.0141027329508782e103,1.0141731517590128e103,1.0142435901306163e103,1.0143140480752018e103,1.0143845256022891e103,1.0144550227214053e103,1.0145255394420827e103,1.0145960757738617e103,1.0146666317262887e103,1.0147372073089166e103,1.014807802531305e103,1.0148784174030204e103,1.014949051933636e103,1.015019706132731e103,1.0150903800098923e103,1.0151610735747126e103,1.0152317868367914e103,1.0153025198057356e103,1.015373272491158e103,1.0154440449026785e103,1.0155148370499233e103,1.0155856489425262e103,1.0156564805901265e103,1.0157273320023714e103,1.0157982031889138e103,1.015869094159414e103,1.0159400049235392e103,1.0160109354909625e103,1.0160818858713645e103,1.0161528560744324e103,1.01622384610986e103,1.0162948559873479e103,1.0163658857166037e103,1.0164369353073416e103,1.0165080047692825e103,1.0165790941121544e103,1.016650203345692e103,1.0167213324796364e103,1.0167924815237363e103,1.0168636504877463e103,1.0169348393814287e103,1.017006048214552e103,1.0170772769968922e103,1.0171485257382313e103,1.0172197944483588e103,1.0172910831370707e103,1.01736239181417e103,1.017433720489467e103,1.0175050691727782e103,1.0175764378739268e103,1.017647826602744e103,1.0177192353690672e103,1.0177906641827405e103,1.0178621130536153e103,1.0179335819915497e103,1.0180050710064088e103,1.0180765801080648e103,1.0181481093063963e103,1.0182196586112897e103,1.0182912280326374e103,1.0183628175803397e103,1.0184344272643028e103,1.0185060570944408e103,1.0185777070806746e103,1.0186493772329314e103,1.0187210675611463e103,1.018792778075261e103,1.0188645087852238e103,1.0189362597009906e103,1.019008030832524e103,1.019079822189794e103,1.0191516337827772e103,1.019223465621457e103,1.019295317715825e103,1.019367190075878e103,1.019439082711622e103,1.0195109956330683e103,1.0195829288502362e103,1.0196548823731517e103,1.0197268562118479e103,1.0197988503763651e103,1.0198708648767506e103,1.0199428997230592e103,1.0200149549253519e103,1.020087030493698e103,1.0201591264381727e103,1.020231242768859e103,1.0203033794958472e103,1.0203755366292343e103,1.0204477141791247e103,1.0205199121556298e103,1.0205921305688682e103,1.0206643694289655e103,1.0207366287460548e103,1.0208089085302762e103,1.0208812087917771e103,1.020953529540712e103,1.0210258707872425e103,1.0210982325415374e103,1.0211706148137727e103,1.021243017614132e103,1.021315440952806e103,1.0213878848399918e103,1.0214603492858947e103,1.0215328343007273e103,1.0216053398947086e103,1.0216778660780655e103,1.021750412861032e103,1.0218229802538494e103,1.0218955682667662e103,1.0219681769100383e103,1.0220408061939287e103,1.0221134561287079e103,1.0221861267246535e103,1.0222588179920509e103,1.0223315299411916e103,1.0224042625823761e103,1.0224770159259111e103,1.0225497899821109e103,1.0226225847612972e103,1.022695400273799e103,1.0227682365299525e103,1.0228410935401016e103,1.0229139713145974e103,1.0229868698637985e103,1.0230597891980706e103,1.023132729327787e103,1.0232056902633282e103,1.0232786720150825e103,1.0233516745934453e103,1.0234246980088194e103,1.0234977422716153e103,1.0235708073922506e103,1.0236438933811504e103,1.0237170002487475e103,1.0237901280054817e103,1.023863276661801e103,1.02393644622816e103,1.0240096367150212e103,1.024082848132855e103,1.0241560804921381e103,1.024229333803356e103,1.0243026080770013e103,1.0243759033235734e103,1.0244492195535799e103,1.0245225567775361e103,1.0245959150059641e103,1.0246692942493944e103,1.0247426945183643e103,1.024816115823419e103,1.024889558175111e103,1.024963021584001e103,1.0250365060606563e103,1.0251100116156528e103,1.0251835382595733e103,1.0252570860030084e103,1.0253306548565562e103,1.0254042448308225e103,1.025477855936421e103,1.0255514881839725e103,1.0256251415841057e103,1.0256988161474567e103,1.0257725118846697e103,1.0258462288063962e103,1.0259199669232956e103,1.0259937262460344e103,1.0260675067852875e103,1.026141308551737e103,1.0262151315560731e103,1.026288975808993e103,1.0263628413212026e103,1.0264367281034144e103,1.0265106361663494e103,1.026584565520736e103,1.0266585161773104e103,1.0267324881468166e103,1.0268064814400063e103,1.026880496067639e103,1.0269545320404817e103,1.0270285893693093e103,1.0271026680649046e103,1.0271767681380584e103,1.0272508895995686e103,1.0273250324602414e103,1.0273991967308905e103,1.027473382422338e103,1.0275475895454132e103,1.0276218181109535e103,1.0276960681298037e103,1.0277703396128173e103,1.027844632570855e103,1.0279189470147852e103,1.0279932829554849e103,1.0280676404038382e103,1.0281420193707374e103,1.0282164198670831e103,1.028290841903783e103,1.0283652854917528e103,1.028439750641917e103,1.0285142373652069e103,1.0285887456725623e103,1.0286632755749312e103,1.0287378270832686e103,1.0288124002085385e103,1.028886994961712e103,1.0289616113537687e103,1.029036249395696e103,1.029110909098489e103,1.0291855904731513e103,1.0292602935306939e103,1.0293350182821365e103,1.0294097647385062e103,1.0294845329108383e103,1.0295593228101763e103,1.0296341344475712e103,1.0297089678340828e103,1.0297838229807784e103,1.0298586998987332e103,1.029933598599031e103,1.0300085190927636e103,1.0300834613910303e103,1.030158425504939e103,1.0302334114456055e103,1.0303084192241537e103,1.0303834488517157e103,1.0304585003394314e103,1.0305335736984493e103,1.0306086689399256e103,1.030683786075025e103,1.0307589251149203e103,1.0308340860707918e103,1.0309092689538287e103,1.030984473775228e103,1.0310597005461951e103,1.0311349492779435e103,1.0312102199816946e103,1.0312855126686785e103,1.0313608273501328e103,1.0314361640373044e103,1.0315115227414474e103,1.0315869034738243e103,1.0316623062457064e103,1.0317377310683725e103,1.0318131779531104e103,1.0318886469112154e103,1.0319641379539914e103,1.0320396510927511e103,1.0321151863388146e103,1.0321907437035103e103,1.032266323198176e103,1.0323419248341565e103,1.0324175486228058e103,1.0324931945754858e103,1.0325688627035668e103,1.0326445530184274e103,1.0327202655314545e103,1.0327960002540439e103,1.0328717571975986e103,1.0329475363735312e103,1.0330233377932621e103,1.03309916146822e103,1.0331750074098419e103,1.033250875629574e103,1.0333267661388698e103,1.033402678949192e103,1.0334786140720114e103,1.033554571518807e103,1.0336305513010672e103,1.0337065534302875e103,1.033782577917973e103,1.0338586247756365e103,1.0339346940147998e103,1.0340107856469926e103,1.0340868996837539e103,1.0341630361366304e103,1.0342391950171776e103,1.0343153763369597e103,1.0343915801075493e103,1.0344678063405274e103,1.0345440550474835e103,1.0346203262400162e103,1.0346966199297317e103,1.0347729361282456e103,1.0348492748471817e103,1.0349256360981724e103,1.0350020198928586e103,1.0350784262428902e103,1.035154855159925e103,1.0352313066556302e103,1.0353077807416813e103,1.035384277429762e103,1.0354607967315652e103,1.0355373386587924e103,1.035613903223153e103,1.0356904904363666e103,1.0357671003101596e103,1.0358437328562687e103,1.0359203880864381e103,1.0359970660124216e103,1.036073766645981e103,1.036150489998887e103,1.0362272360829195e103,1.036304004909866e103,1.0363807964915245e103,1.0364576108397e103,1.0365344479662073e103,1.0366113078828695e103,1.0366881906015183e103,1.036765096133995e103,1.0368420244921491e103,1.0369189756878384e103,1.0369959497329307e103,1.0370729466393017e103,1.0371499664188363e103,1.037227009083428e103,1.037304074644979e103,1.037381163115401e103,1.0374582745066142e103,1.0375354088305473e103,1.0376125660991385e103,1.0376897463243343e103,1.0377669495180903e103,1.0378441756923717e103,1.0379214248591512e103,1.0379986970304113e103,1.0380759922181437e103,1.0381533104343482e103,1.0382306516910344e103,1.0383080160002199e103,1.0383854033739322e103,1.0384628138242073e103,1.0385402473630897e103,1.038617704002634e103,1.038695183754903e103,1.0387726866319687e103,1.0388502126459122e103,1.0389277618088232e103,1.039005334132801e103,1.0390829296299535e103,1.039160548312398e103,1.0392381901922607e103,1.0393158552816767e103,1.0393935435927903e103,1.0394712551377552e103,1.0395489899287336e103,1.039626747977897e103,1.0397045292974261e103,1.0397823338995112e103,1.0398601617963506e103,1.0399380130001525e103,1.0400158875231345e103,1.0400937853775224e103,1.040171706575552e103,1.040249651129468e103,1.0403276190515242e103,1.0404056103539837e103,1.0404836250491186e103,1.0405616631492104e103,1.0406397246665498e103,1.0407178096134366e103,1.0407959180021801e103,1.0408740498450984e103,1.0409522051545192e103,1.0410303839427794e103,1.041108586222225e103,1.0411868120052117e103,1.0412650613041038e103,1.0413433341312757e103,1.04142163049911e103,1.0414999504200003e103,1.0415782939063477e103,1.0416566609705636e103,1.0417350516250688e103,1.0418134658822932e103,1.0418919037546761e103,1.041970365254666e103,1.042048850394721e103,1.042127359187309e103,1.042205891644906e103,1.0422844477799987e103,1.042363027605083e103,1.0424416311326632e103,1.0425202583752546e103,1.0425989093453807e103,1.042677584055575e103,1.0427562825183801e103,1.0428350047463488e103,1.0429137507520426e103,1.0429925205480329e103,1.0430713141469001e103,1.0431501315612352e103,1.0432289728036375e103,1.0433078378867164e103,1.0433867268230908e103,1.043465639625389e103,1.0435445763062494e103,1.0436235368783188e103,1.0437025213542549e103,1.043781529746724e103,1.0438605620684027e103,1.0439396183319766e103,1.0440186985501413e103,1.044097802735602e103,1.0441769309010731e103,1.0442560830592793e103,1.0443352592229545e103,1.0444144594048422e103,1.044493683617696e103,1.0445729318742788e103,1.0446522041873634e103,1.0447315005697318e103,1.0448108210341765e103,1.0448901655934992e103,1.0449695342605114e103,1.0450489270480344e103,1.0451283439688993e103,1.0452077850359466e103,1.0452872502620273e103,1.0453667396600013e103,1.0454462532427387e103,1.0455257910231194e103,1.0456053530140334e103,1.0456849392283799e103,1.045764549679068e103,1.0458441843790172e103,1.0459238433411565e103,1.0460035265784243e103,1.0460832341037698e103,1.0461629659301512e103,1.0462427220705371e103,1.0463225025379057e103,1.0464023073452455e103,1.0464821365055544e103,1.0465619900318406e103,1.0466418679371218e103,1.046721770234426e103,1.0468016969367916e103,1.0468816480572656e103,1.0469616236089062e103,1.0470416236047814e103,1.0471216480579685e103,1.0472016969815554e103,1.04728177038864e103,1.04736186829233e103,1.0474419907057432e103,1.0475221376420076e103,1.0476023091142607e103,1.0476825051356507e103,1.047762725719336e103,1.0478429708784838e103,1.047923240626273e103,1.0480035349758917e103,1.0480838539405382e103,1.0481641975334208e103,1.0482445657677587e103,1.0483249586567802e103,1.0484053762137244e103,1.0484858184518403e103,1.0485662853843871e103,1.0486467770246343e103,1.0487272933858617e103,1.0488078344813588e103,1.0488884003244256e103,1.0489689909283727e103,1.0490496063065202e103,1.0491302464721988e103,1.0492109114387497e103,1.049291601219524e103,1.0493723158278833e103,1.0494530552771992e103,1.0495338195808537e103,1.0496146087522392e103,1.0496954228047584e103,1.0497762617518244e103,1.0498571256068605e103,1.0499380143833002e103,1.0500189280945876e103,1.0500998667541771e103,1.0501808303755335e103,1.0502618189721318e103,1.0503428325574576e103,1.050423871145007e103,1.050504934748286e103,1.0505860233808117e103,1.050667137056111e103,1.0507482757877218e103,1.0508294395891922e103,1.0509106284740808e103,1.0509918424559565e103,1.051073081548399e103,1.0511543457649982e103,1.0512356351193547e103,1.0513169496250797e103,1.0513982892957949e103,1.051479654145132e103,1.051561044186734e103,1.0516424594342543e103,1.0517238999013565e103,1.0518053656017153e103,1.0518868565490153e103,1.0519683727569524e103,1.0520499142392328e103,1.0521314810095733e103,1.0522130730817016e103,1.0522946904693556e103,1.0523763331862843e103,1.052458001246247e103,1.052539694663014e103,1.052621413450366e103,1.0527031576220948e103,1.0527849271920025e103,1.052866722173902e103,1.0529485425816171e103,1.0530303884289823e103,1.053112259729843e103,1.0531941564980547e103,1.0532760787474848e103,1.0533580264920102e103,1.05343999974552e103,1.0535219985219124e103,1.0536040228350983e103,1.0536860726989981e103,1.0537681481275435e103,1.0538502491346772e103,1.0539323757343522e103,1.0540145279405331e103,1.054096705767195e103,1.0541789092283237e103,1.0542611383379164e103,1.054343393109981e103,1.0544256735585363e103,1.0545079796976117e103,1.0545903115412483e103,1.0546726691034979e103,1.0547550523984226e103,1.0548374614400963e103,1.0549198962426038e103,1.0550023568200406e103,1.0550848431865135e103,1.05516735535614e103,1.0552498933430485e103,1.0553324571613796e103,1.0554150468252835e103,1.0554976623489226e103,1.0555803037464696e103,1.0556629710321089e103,1.0557456642200354e103,1.0558283833244554e103,1.055911128359587e103,1.0559938993396581e103,1.056076696278909e103,1.0561595191915905e103,1.0562423680919646e103,1.056325242994305e103,1.0564081439128957e103,1.056491070862033e103,1.0565740238560234e103,1.0566570029091853e103,1.0567400080358482e103,1.0568230392503527e103,1.0569060965670507e103,1.0569891800003057e103,1.0570722895644923e103,1.057155425273996e103,1.0572385871432141e103,1.0573217751865555e103,1.0574049894184396e103,1.0574882298532975e103,1.0575714965055723e103,1.0576547893897175e103,1.0577381085201987e103,1.0578214539114922e103,1.0579048255780867e103,1.0579882235344812e103,1.058071647795187e103,1.0581550983747267e103,1.0582385752876337e103,1.0583220785484535e103,1.0584056081717431e103,1.0584891641720708e103,1.0585727465640167e103,1.0586563553621715e103,1.0587399905811384e103,1.058823652235532e103,1.058907340339978e103,1.058991054909114e103,1.0590747959575891e103,1.059158563500064e103,1.0592423575512108e103,1.0593261781257137e103,1.0594100252382682e103,1.0594938989035815e103,1.0595777991363719e103,1.0596617259513703e103,1.0597456793633187e103,1.059829659386971e103,1.0599136660370928e103,1.059997699328461e103,1.0600817592758649e103,1.0601658458941049e103,1.0602499591979932e103,1.0603340992023543e103,1.0604182659220243e103,1.0605024593718504e103,1.0605866795666925e103,1.0606709265214216e103,1.060755200250921e103,1.0608395007700858e103,1.0609238280938224e103,1.0610081822370497e103,1.0610925632146983e103,1.0611769710417101e103,1.0612614057330398e103,1.0613458673036535e103,1.0614303557685292e103,1.061514871142657e103,1.0615994134410385e103,1.0616839826786882e103,1.0617685788706316e103,1.0618532020319065e103,1.0619378521775628e103,1.0620225293226625e103,1.062107233482279e103,1.0621919646714986e103,1.0622767229054192e103,1.0623615081991502e103,1.0624463205678142e103,1.062531160026545e103,1.062616026590489e103,1.0627009202748045e103,1.0627858410946615e103,1.0628707890652427e103,1.0629557642017429e103,1.063040766519369e103,1.0631257960333396e103,1.0632108527588862e103,1.063295936711252e103,1.0633810479056922e103,1.063466186357475e103,1.0635513520818804e103,1.0636365450942002e103,1.0637217654097392e103,1.0638070130438141e103,1.063892288011754e103,1.0639775903289e103,1.0640629200106056e103,1.0641482770722372e103,1.0642336615291725e103,1.0643190733968027e103,1.06440451269053e103,1.0644899794257704e103,1.0645754736179511e103,1.0646609952825125e103,1.064746544434907e103,1.0648321210905995e103,1.0649177252650676e103,1.0650033569738006e103,1.065089016232301e103,1.0651747030560836e103,1.0652604174606757e103,1.0653461594616168e103,1.0654319290744592e103,1.0655177263147675e103,1.0656035511981194e103,1.0656894037401042e103,1.0657752839563246e103,1.0658611918623956e103,1.0659471274739445e103,1.0660330908066118e103,1.06611908187605e103,1.0662051006979248e103,1.0662911472879138e103,1.0663772216617082e103,1.066463323835011e103,1.0665494538235385e103,1.0666356116430193e103,1.066721797309195e103,1.0668080108378197e103,1.0668942522446602e103,1.0669805215454965e103,1.0670668187561208e103,1.0671531438923382e103,1.067239496969967e103,1.0673258780048377e103,1.067412287012794e103,1.0674987240096927e103,1.0675851890114028e103,1.0676716820338061e103,1.0677582030927982e103,1.0678447522042868e103,1.0679313293841925e103,1.0680179346484494e103,1.0681045680130038e103,1.0681912294938155e103,1.0682779191068566e103,1.0683646368681133e103,1.0684513827935833e103,1.0685381568992786e103,1.0686249592012236e103,1.0687117897154558e103,1.0687986484580255e103,1.0688855354449961e103,1.068972450692445e103,1.0690593942164614e103,1.0691463660331481e103,1.0692333661586209e103,1.069320394609009e103,1.0694074514004546e103,1.069494536549113e103,1.0695816500711525e103,1.0696687919827549e103,1.069755962300115e103,1.0698431610394407e103,1.0699303882169532e103,1.0700176438488873e103,1.0701049279514901e103,1.0701922405410232e103,1.0702795816337602e103,1.0703669512459894e103,1.070454349394011e103,1.0705417760941393e103,1.0706292313627018e103,1.0707167152160393e103,1.0708042276705058e103,1.0708917687424691e103,1.0709793384483097e103,1.0710669368044224e103,1.0711545638272146e103,1.0712422195331075e103,1.071329903938536e103,1.0714176170599476e103,1.0715053589138041e103,1.0715931295165806e103,1.0716809288847654e103,1.0717687570348605e103,1.0718566139833817e103,1.0719444997468577e103,1.0720324143418314e103,1.072120357784859e103,1.0722083300925102e103,1.0722963312813684e103,1.0723843613680305e103,1.0724724203691074e103,1.0725605083012231e103,1.0726486251810158e103,1.0727367710251369e103,1.0728249458502518e103,1.0729131496730393e103,1.0730013825101924e103,1.0730896443784174e103,1.0731779352944344e103,1.0732662552749776e103,1.0733546043367944e103,1.0734429824966467e103,1.0735313897713093e103,1.0736198261775717e103,1.0737082917322369e103,1.0737967864521216e103,1.0738853103540564e103,1.0739738634548862e103,1.074062445771469e103,1.0741510573206774e103,1.0742396981193977e103,1.07432836818453e103,1.0744170675329887e103,1.074505796181702e103,1.0745945541476115e103,1.074683341447674e103,1.0747721580988588e103,1.074861004118151e103,1.0749498795225484e103,1.0750387843290632e103,1.0751277185547217e103,1.0752166822165646e103,1.0753056753316463e103,1.0753946979170353e103,1.0754837499898148e103,1.0755728315670812e103,1.0756619426659458e103,1.0757510833035344e103,1.0758402534969858e103,1.0759294532634542e103,1.0760186826201068e103,1.0761079415841267e103,1.0761972301727095e103,1.0762865484030663e103,1.0763758962924222e103,1.076465273858016e103,1.0765546811171017e103,1.0766441180869472e103,1.0767335847848346e103,1.0768230812280609e103,1.0769126074339366e103,1.0770021634197875e103,1.0770917492029532e103,1.077181364800788e103,1.0772710102306607e103,1.0773606855099547e103,1.0774503906560673e103,1.0775401256864106e103,1.0776298906184113e103,1.0777196854695106e103,1.0778095102571641e103,1.0778993649988421e103,1.0779892497120296e103,1.0780791644142257e103,1.0781691091229443e103,1.0782590838557144e103,1.078349088630079e103,1.0784391234635961e103,1.0785291883738379e103,1.0786192833783923e103,1.0787094084948606e103,1.0787995637408596e103,1.0788897491340207e103,1.07897996469199e103,1.0790702104324285e103,1.0791604863730116e103,1.07925079253143e103,1.0793411289253888e103,1.0794314955726078e103,1.0795218924908224e103,1.079612319697782e103,1.0797027772112514e103,1.07979326504901e103,1.0798837832288524e103,1.0799743317685878e103,1.0800649106860405e103,1.0801555199990495e103,1.0802461597254693e103,1.0803368298831692e103,1.0804275304900331e103,1.0805182615639605e103,1.0806090231228653e103,1.0806998151846768e103,1.0807906377673397e103,1.0808814908888132e103,1.080972374567072e103,1.0810632888201057e103,1.081154233665919e103,1.081245209122532e103,1.0813362152079796e103,1.0814272519403123e103,1.0815183193375957e103,1.0816094174179102e103,1.081700546199352e103,1.0817917057000322e103,1.0818828959380774e103,1.081974116931629e103,1.0820653686988443e103,1.0821566512578959e103,1.082247964626971e103,1.082339308824273e103,1.0824306838680204e103,1.0825220897764467e103,1.082613526567801e103,1.0827049942603485e103,1.082796492872369e103,1.0828880224221578e103,1.082979582928026e103,1.0830711744083003e103,1.0831627968813223e103,1.0832544503654496e103,1.0833461348790554e103,1.0834378504405282e103,1.0835295970682723e103,1.0836213747807072e103,1.083713183596268e103,1.0838050235334064e103,1.0838968946105886e103,1.0839887968462966e103,1.0840807302590289e103,1.084172694867299e103,1.0842646906896358e103,1.084356717744585e103,1.084448776050707e103,1.0845408656265785e103,1.0846329864907919e103,1.0847251386619553e103,1.0848173221586928e103,1.084909536999644e103,1.0850017832034648e103,1.0850940607888264e103,1.0851863697744164e103,1.0852787101789382e103,1.0853710820211108e103,1.0854634853196694e103,1.0855559200933653e103,1.0856483863609654e103,1.0857408841412527e103,1.0858334134530265e103,1.085925974315102e103,1.08601856674631e103,1.0861111907654978e103,1.0862038463915287e103,1.0862965336432822e103,1.086389252539654e103,1.0864820030995551e103,1.0865747853419137e103,1.086667599285674e103,1.0867604449497955e103,1.086853322353255e103,1.086946231515045e103,1.0870391724541743e103,1.0871321451896678e103,1.0872251497405668e103,1.0873181861259291e103,1.0874112543648286e103,1.0875043544763557e103,1.087597486479617e103,1.087690650393735e103,1.0877838462378496e103,1.0878770740311163e103,1.0879703337927076e103,1.088063625541812e103,1.0881569492976345e103,1.0882503050793967e103,1.0883436929063365e103,1.0884371127977088e103,1.0885305647727845e103,1.0886240488508513e103,1.0887175650512137e103,1.088811113393192e103,1.088904693896124e103,1.0889983065793636e103,1.0890919514622815e103,1.0891856285642652e103,1.0892793379047187e103,1.0893730795030626e103,1.089466853378734e103,1.089560659551188e103,1.0896544980398946e103,1.0897483688643422e103,1.089842272044035e103,1.0899362075984944e103,1.0900301755472582e103,1.090124175909882e103,1.0902182087059372e103,1.0903122739550126e103,1.0904063716767143e103,1.0905005018906644e103,1.0905946646165024e103,1.0906888598738849e103,1.0907830876824856e103,1.0908773480619948e103,1.09097164103212e103,1.0910659666125857e103,1.0911603248231334e103,1.0912547156835217e103,1.091349139213527e103,1.0914435954329412e103,1.0915380843615749e103,1.0916326060192555e103,1.0917271604258267e103,1.0918217476011504e103,1.0919163675651052e103,1.0920110203375873e103,1.09210570593851e103,1.0922004243878034e103,1.0922951757054153e103,1.0923899599113113e103,1.0924847770254736e103,1.0925796270679016e103,1.092674510058613e103,1.0927694260176417e103,1.0928643749650405e103,1.092959356920878e103,1.0930543719052415e103,1.093149419938235e103,1.0932445010399803e103,1.0933396152306169e103,1.0934347625303012e103,1.093529942959208e103,1.093625156537529e103,1.0937204032854736e103,1.093815683223269e103,1.09391099637116e103,1.094006342749409e103,1.0941017223782958e103,1.0941971352781184e103,1.094292581469192e103,1.09438806097185e103,1.0944835738064434e103,1.0945791199933402e103,1.0946746995529277e103,1.0947703125056094e103,1.094865958871808e103,1.0949616386719631e103,1.0950573519265329e103,1.0951530986559925e103,1.0952488788808358e103,1.0953446926215743e103,1.0954405398987376e103,1.0955364207328731e103,1.095632335144546e103,1.0957282831543401e103,1.0958242647828566e103,1.095920280050715e103,1.0960163289785534e103,1.0961124115870266e103,1.0962085278968091e103,1.0963046779285927e103,1.0964008617030872e103,1.0964970792410214e103,1.0965933305631411e103,1.0966896156902115e103,1.0967859346430154e103,1.0968822874423537e103,1.0969786741090461e103,1.0970750946639303e103,1.0971715491278622e103,1.0972680375217167e103,1.0973645598663859e103,1.0974611161827814e103,1.0975577064918327e103,1.0976543308144877e103,1.0977509891717128e103,1.097847681584493e103,1.0979444080738315e103,1.0980411686607503e103,1.09813796336629e103,1.0982347922115095e103,1.0983316552174863e103,1.0984285524053166e103,1.0985254837961149e103,1.098622449411015e103,1.0987194492711687e103,1.098816483397747e103,1.098913551811939e103,1.099010654534953e103,1.0991077915880162e103,1.099204962992374e103,1.0993021687692907e103,1.09939940894005e103,1.0994966835259538e103,1.0995939925483228e103,1.0996913360284973e103,1.0997887139878358e103,1.0998861264477161e103,1.0999835734295345e103,1.1000810549547068e103,1.1001785710446675e103,1.1002761217208702e103,1.1003737070047873e103,1.1004713269179107e103,1.1005689814817506e103,1.1006666707178373e103,1.1007643946477195e103,1.100862153292965e103,1.1009599466751614e103,1.1010577748159149e103,1.1011556377368511e103,1.1012535354596149e103,1.10135146800587e103,1.1014494353973004e103,1.101547437655608e103,1.101645474802515e103,1.101743546859763e103,1.1018416538491123e103,1.1019397957923428e103,1.1020379727112542e103,1.1021361846276654e103,1.1022344315634143e103,1.1023327135403591e103,1.1024310305803767e103,1.1025293827053644e103,1.1026277699372378e103,1.1027261922979335e103,1.1028246498094065e103,1.1029231424936322e103,1.103021670372605e103,1.1031202334683395e103,1.1032188318028695e103,1.1033174653982492e103,1.1034161342765515e103,1.1035148384598701e103,1.1036135779703175e103,1.1037123528300269e103,1.1038111630611506e103,1.1039100086858614e103,1.104008889726351e103,1.104107806204832e103,1.1042067581435365e103,1.104305745564716e103,1.1044047684906433e103,1.1045038269436094e103,1.104602920945927e103,1.1047020505199277e103,1.1048012156879635e103,1.1049004164724064e103,1.104999652895649e103,1.1050989249801028e103,1.105198232748201e103,1.1052975762223959e103,1.1053969554251602e103,1.105496370378987e103,1.1055958211063892e103,1.1056953076299008e103,1.1057948299720752e103,1.1058943881554867e103,1.1059939822027293e103,1.1060936121364183e103,1.1061932779791884e103,1.1062929797536954e103,1.1063927174826149e103,1.1064924911886437e103,1.1065923008944985e103,1.1066921466229165e103,1.106792028396656e103,1.1068919462384952e103,1.1069919001712332e103,1.1070918902176893e103,1.1071919164007043e103,1.1072919787431383e103,1.1073920772678734e103,1.1074922119978117e103,1.1075923829558761e103,1.1076925901650103e103,1.1077928336481786e103,1.1078931134283663e103,1.1079934295285794e103,1.108093781971845e103,1.1081941707812105e103,1.1082945959797448e103,1.1083950575905373e103,1.1084955556366986e103,1.1085960901413598e103,1.1086966611276734e103,1.1087972686188132e103,1.1088979126379734e103,1.108998593208369e103,1.1090993103532376e103,1.1092000640958363e103,1.109300854459444e103,1.1094016814673607e103,1.1095025451429077e103,1.1096034455094272e103,1.1097043825902831e103,1.1098053564088599e103,1.1099063669885643e103,1.110007414352823e103,1.1101084985250856e103,1.110209619528822e103,1.1103107773875235e103,1.1104119721247033e103,1.1105132037638958e103,1.1106144723286567e103,1.1107157778425637e103,1.1108171203292153e103,1.1109184998122323e103,1.111019916315256e103,1.1111213698619506e103,1.111222860476001e103,1.111324388181114e103,1.111425953001018e103,1.1115275549594634e103,1.1116291940802219e103,1.1117308703870873e103,1.1118325839038747e103,1.1119343346544214e103,1.1120361226625866e103,1.1121379479522508e103,1.1122398105473172e103,1.1123417104717103e103,1.1124436477493762e103,1.1125456224042837e103,1.1126476344604235e103,1.112749683941808e103,1.1128517708724715e103,1.1129538952764706e103,1.1130560571778842e103,1.1131582566008128e103,1.1132604935693793e103,1.113362768107729e103,1.1134650802400288e103,1.1135674299904686e103,1.1136698173832597e103,1.1137722424426364e103,1.1138747051928545e103,1.1139772056581932e103,1.114079743862953e103,1.1141823198314574e103,1.114284933588052e103,1.1143875851571049e103,1.1144902745630068e103,1.1145930018301708e103,1.1146957669830322e103,1.1147985700460495e103,1.114901411043703e103,1.1150042900004966e103,1.1151072069409555e103,1.1152101618896285e103,1.1153131548710867e103,1.1154161859099245e103,1.1155192550307578e103,1.1156223622582264e103,1.1157255076169924e103,1.1158286911317408e103,1.1159319128271792e103,1.1160351727280386e103,1.1161384708590721e103,1.1162418072450566e103,1.1163451819107917e103,1.116448594881099e103,1.1165520461808245e103,1.1166555358348365e103,1.1167590638680265e103,1.1168626303053089e103,1.1169662351716215e103,1.1170698784919253e103,1.1171735602912038e103,1.1172772805944648e103,1.1173810394267382e103,1.1174848368130777e103,1.1175886727785604e103,1.1176925473482866e103,1.1177964605473796e103,1.1179004124009867e103,1.1180044029342779e103,1.1181084321724472e103,1.1182125001407117e103,1.118316606864312e103,1.1184207523685122e103,1.1185249366786004e103,1.1186291598198877e103,1.1187334218177088e103,1.1188377226974223e103,1.1189420624844104e103,1.1190464412040789e103,1.1191508588818573e103,1.1192553155431988e103,1.1193598112135808e103,1.1194643459185037e103,1.119568919683492e103,1.1196735325340948e103,1.1197781844958838e103,1.1198828755944559e103,1.1199876058554307e103,1.120092375304453e103,1.1201971839671905e103,1.1203020318693355e103,1.1204069190366043e103,1.1205118454947374e103,1.1206168112694992e103,1.120721816386678e103,1.1208268608720868e103,1.1209319447515622e103,1.1210370680509661e103,1.1211422307961838e103,1.1212474330131243e103,1.1213526747277224e103,1.1214579559659365e103,1.121563276753749e103,1.1216686371171673e103,1.1217740370822231e103,1.1218794766749722e103,1.1219849559214957e103,1.1220904748478985e103,1.1221960334803102e103,1.122301631844885e103,1.1224072699678021e103,1.122512947875265e103,1.1226186655935014e103,1.1227244231487652e103,1.122830220567333e103,1.1229360578755081e103,1.1230419350996173e103,1.1231478522660126e103,1.1232538094010713e103,1.1233598065311949e103,1.1234658436828104e103,1.123571920882369e103,1.123678038156348e103,1.1237841955312487e103,1.1238903930335979e103,1.1239966306899477e103,1.1241029085268746e103,1.124209226570981e103,1.1243155848488935e103,1.1244219833872654e103,1.1245284222127737e103,1.1246349013521215e103,1.124741420832037e103,1.1248479806792737e103,1.1249545809206109e103,1.125061221582852e103,1.1251679026928272e103,1.1252746242773917e103,1.125381386363426e103,1.1254881889778361e103,1.1255950321475536e103,1.1257019158995362e103,1.125808840260766e103,1.125915805258252e103,1.1260228109190285e103,1.126129857270155e103,1.1262369443387168e103,1.1263440721518259e103,1.126451240736619e103,1.1265584501202591e103,1.126665700329935e103,1.1267729913928617e103,1.1268803233362795e103,1.1269876961874553e103,1.127095109973681e103,1.1272025647222764e103,1.1273100604605851e103,1.127417597215978e103,1.1275251750158523e103,1.1276327938876308e103,1.127740453858763e103,1.1278481549567238e103,1.127955897209015e103,1.1280636806431645e103,1.128171505286727e103,1.1282793711672824e103,1.128387278312438e103,1.1284952267498272e103,1.12860321650711e103,1.1287112476119721e103,1.1288193200921267e103,1.1289274339753133e103,1.1290355892892973e103,1.1291437860618718e103,1.1292520243208555e103,1.1293603040940947e103,1.1294686254094616e103,1.1295769882948553e103,1.1296853927782025e103,1.1297938388874556e103,1.1299023266505943e103,1.1300108560956254e103,1.1301194272505824e103,1.1302280401435258e103,1.1303366948025428e103,1.1304453912557478e103,1.1305541295312824e103,1.1306629096573153e103,1.1307717316620417e103,1.1308805955736848e103,1.1309895014204945e103,1.131098449230748e103,1.13120743903275e103,1.1313164708548316e103,1.1314255447253523e103,1.1315346606726983e103,1.1316438187252835e103,1.1317530189115491e103,1.1318622612599636e103,1.1319715457990232e103,1.1320808725572517e103,1.1321902415632e103,1.1322996528454473e103,1.1324091064325997e103,1.1325186023532914e103,1.1326281406361842e103,1.1327377213099675e103,1.1328473444033589e103,1.1329570099451033e103,1.1330667179639732e103,1.1331764684887702e103,1.1332862615483224e103,1.1333960971714864e103,1.133505975387147e103,1.1336158962242169e103,1.1337258597116366e103,1.1338358658783749e103,1.1339459147534286e103,1.1340560063658228e103,1.1341661407446106e103,1.1342763179188736e103,1.1343865379177214e103,1.1344968007702916e103,1.134607106505751e103,1.1347174551532942e103,1.1348278467421442e103,1.1349382813015522e103,1.1350487588607987e103,1.1351592794491918e103,1.135269843096069e103,1.1353804498307955e103,1.135491099682766e103,1.1356017926814024e103,1.1357125288561575e103,1.135823308236511e103,1.135934130851972e103,1.1360449967320784e103,1.136155905906397e103,1.1362668584045235e103,1.1363778542560821e103,1.1364888934907265e103,1.136599976138139e103,1.136711102228031e103,1.1368222717901432e103,1.1369334848542453e103,1.1370447414501358e103,1.1371560416076427e103,1.1372673853566229e103,1.137378772726963e103,1.1374902037485787e103,1.1376016784514147e103,1.1377131968654455e103,1.1378247590206747e103,1.1379363649471355e103,1.1380480146748904e103,1.1381597082340316e103,1.1382714456546806e103,1.1383832269669888e103,1.1384950522011372e103,1.138606921387336e103,1.1387188345558252e103,1.1388307917368752e103,1.1389427929607855e103,1.1390548382578856e103,1.1391669276585347e103,1.1392790611931223e103,1.1393912388920675e103,1.1395034607858193e103,1.1396157269048567e103,1.139728037279689e103,1.1398403919408557e103,1.1399527909189257e103,1.1400652342444986e103,1.1401777219482044e103,1.1402902540607027e103,1.1404028306126837e103,1.1405154516348677e103,1.1406281171580064e103,1.1407408272128798e103,1.1408535818303006e103,1.1409663810411105e103,1.141079224876182e103,1.1411921133664184e103,1.1413050465427537e103,1.1414180244361516e103,1.1415310470776079e103,1.1416441144981476e103,1.1417572267288278e103,1.1418703838007352e103,1.1419835857449885e103,1.1420968325927361e103,1.1422101243751581e103,1.1423234611234652e103,1.1424368428688989e103,1.1425502696427324e103,1.142663741476269e103,1.142777258400844e103,1.1428908204478236e103,1.1430044276486044e103,1.1431180800346154e103,1.1432317776373162e103,1.1433455204881979e103,1.1434593086187824e103,1.1435731420606242e103,1.1436870208453076e103,1.1438009450044498e103,1.1439149145696987e103,1.144028929572734e103,1.1441429900452672e103,1.1442570960190407e103,1.1443712475258294e103,1.1444854445974393e103,1.1445996872657087e103,1.1447139755625072e103,1.1448283095197363e103,1.1449426891693299e103,1.1450571145432529e103,1.1451715856735031e103,1.1452861025921095e103,1.1454006653311338e103,1.1455152739226694e103,1.145629928398842e103,1.145744628791809e103,1.1458593751337606e103,1.1459741674569192e103,1.146089005793539e103,1.1462038901759072e103,1.1463188206363428e103,1.146433797207197e103,1.1465488199208546e103,1.1466638888097322e103,1.1467790039062784e103,1.1468941652429753e103,1.147009372852337e103,1.1471246267669108e103,1.1472399270192762e103,1.147355273642046e103,1.147470666667865e103,1.1475861061294117e103,1.1477015920593972e103,1.1478171244905652e103,1.1479327034556928e103,1.1480483289875897e103,1.1481640011190992e103,1.148279719883097e103,1.148395485312493e103,1.1485112974402287e103,1.1486271562992806e103,1.1487430619226572e103,1.1488590143434008e103,1.1489750135945872e103,1.1490910597093252e103,1.1492071527207573e103,1.1493232926620594e103,1.1494394795664413e103,1.1495557134671459e103,1.1496719943974498e103,1.1497883223906636e103,1.1499046974801312e103,1.1500211196992305e103,1.1501375890813733e103,1.150254105660005e103,1.1503706694686049e103,1.1504872805406867e103,1.1506039389097972e103,1.1507206446095182e103,1.150837397673465e103,1.1509541981352867e103,1.1510710460286676e103,1.1511879413873256e103,1.1513048842450122e103,1.1514218746355145e103,1.1515389125926534e103,1.151655998150283e103,1.1517731313422945e103,1.1518903122026108e103,1.1520075407651908e103,1.152124817064028e103,1.15224214113315e103,1.1523595130066192e103,1.152476932718533e103,1.152594400303023e103,1.1527119157942562e103,1.1528294792264342e103,1.1529470906337932e103,1.1530647500506051e103,1.1531824575111757e103,1.1533002130498468e103,1.1534180167009948e103,1.1535358684990314e103,1.1536537684784033e103,1.1537717166735927e103,1.1538897131191167e103,1.1540077578495278e103,1.1541258508994141e103,1.1542439923033992e103,1.1543621820961416e103,1.1544804203123357e103,1.154598706986711e103,1.1547170421540339e103,1.1548354258491045e103,1.1549538581067601e103,1.1550723389618733e103,1.155190868449352e103,1.1553094466041406e103,1.155428073461219e103,1.1555467490556032e103,1.1556654734223455e103,1.1557842465965333e103,1.1559030686132908e103,1.1560219395077782e103,1.1561408593151918e103,1.1562598280707643e103,1.1563788458097643e103,1.1564979125674967e103,1.1566170283793035e103,1.1567361932805621e103,1.1568554073066871e103,1.1569746704931295e103,1.1570939828753765e103,1.157213344488952e103,1.157332755369417e103,1.1574522155523685e103,1.1575717250734411e103,1.1576912839683053e103,1.1578108922726693e103,1.1579305500222775e103,1.158050257252912e103,1.1581700140003908e103,1.1582898203005698e103,1.1584096761893423e103,1.158529581702638e103,1.1586495368764237e103,1.1587695417467043e103,1.1588895963495211e103,1.1590097007209536e103,1.1591298548971183e103,1.1592500589141686e103,1.1593703128082963e103,1.1594906166157304e103,1.1596109703727375e103,1.1597313741156218e103,1.159851827880725e103,1.1599723317044275e103,1.1600928856231462e103,1.1602134896733367e103,1.1603341438914923e103,1.1604548483141441e103,1.1605756029778618e103,1.1606964079192524e103,1.1608172631749612e103,1.1609381687816723e103,1.161059124776107e103,1.161180131195026e103,1.1613011880752272e103,1.1614222954535475e103,1.1615434533668627e103,1.161664661852086e103,1.1617859209461694e103,1.1619072306861044e103,1.1620285911089202e103,1.1621500022516849e103,1.1622714641515052e103,1.1623929768455273e103,1.1625145403709355e103,1.1626361547649532e103,1.1627578200648428e103,1.1628795363079058e103,1.1630013035314825e103,1.1631231217729527e103,1.163244991069735e103,1.1633669114592872e103,1.163488882979107e103,1.1636109056667303e103,1.1637329795597335e103,1.1638551046957323e103,1.1639772811123809e103,1.1640995088473738e103,1.1642217879384453e103,1.1643441184233686e103,1.1644665003399577e103,1.164588933726065e103,1.164711418619584e103,1.1648339550584473e103,1.1649565430806274e103,1.165079182724137e103,1.165201874027029e103,1.165324617027396e103,1.1654474117633713e103,1.1655702582731274e103,1.1656931565948785e103,1.1658161067668775e103,1.1659391088274188e103,1.166062162814837e103,1.1661852687675067e103,1.1663084267238435e103,1.1664316367223036e103,1.1665548988013836e103,1.1666782129996205e103,1.1668015793555928e103,1.1669249979079193e103,1.1670484686952602e103,1.1671719917563156e103,1.1672955671298275e103,1.1674191948545786e103,1.1675428749693924e103,1.1676666075131343e103,1.1677903925247101e103,1.1679142300430677e103,1.168038120107195e103,1.168162062756123e103,1.1682860580289226e103,1.1684101059647067e103,1.1685342066026305e103,1.1686583599818896e103,1.168782566141722e103,1.1689068251214073e103,1.1690311369602669e103,1.1691555016976633e103,1.1692799193730023e103,1.1694043900257304e103,1.1695289136953367e103,1.1696534904213521e103,1.16977812024335e103,1.1699028032009455e103,1.1700275393337963e103,1.1701523286816023e103,1.1702771712841056e103,1.170402067181091e103,1.1705270164123855e103,1.1706520190178587e103,1.1707770750374229e103,1.170902184511033e103,1.1710273474786864e103,1.1711525639804237e103,1.171277834056328e103,1.1714031577465256e103,1.1715285350911853e103,1.171653966130519e103,1.1717794509047821e103,1.1719049894542725e103,1.172030581819332e103,1.1721562280403448e103,1.1722819281577396e103,1.1724076822119867e103,1.1725334902436019e103,1.1726593522931429e103,1.1727852684012114e103,1.1729112386084533e103,1.1730372629555571e103,1.1731633414832563e103,1.173289474232327e103,1.17341566124359e103,1.1735419025579093e103,1.1736681982161934e103,1.1737945482593952e103,1.1739209527285105e103,1.1740474116645803e103,1.1741739251086895e103,1.1743004931019673e103,1.1744271156855868e103,1.1745537929007668e103,1.1746805247887692e103,1.1748073113909008e103,1.1749341527485133e103,1.175061048903003e103,1.1751879998958108e103,1.1753150057684224e103,1.1754420665623686e103,1.1755691823192244e103,1.1756963530806103e103,1.1758235788881923e103,1.1759508597836806e103,1.176078195808831e103,1.1762055870054448e103,1.1763330334153678e103,1.176460535080492e103,1.1765880920427543e103,1.1767157043441372e103,1.1768433720266689e103,1.1769710951324232e103,1.1770988737035193e103,1.1772267077821227e103,1.1773545974104437e103,1.1774825426307397e103,1.177610543485313e103,1.1777386000165126e103,1.1778667122667335e103,1.1779948802784159e103,1.178123104094048e103,1.1782513837561622e103,1.1783797193073388e103,1.178508110790204e103,1.17863655824743e103,1.1787650617217362e103,1.178893621255888e103,1.1790222368926979e103,1.1791509086750252e103,1.1792796366457755e103,1.1794084208479016e103,1.179537261324403e103,1.1796661581183268e103,1.179795111272766e103,1.1799241208308619e103,1.1800531868358026e103,1.180182309330823e103,1.1803114883592056e103,1.1804407239642806e103,1.1805700161894256e103,1.1806993650780651e103,1.1808287706736722e103,1.1809582330197665e103,1.1810877521599165e103,1.1812173281377378e103,1.1813469609968936e103,1.1814766507810962e103,1.1816063975341043e103,1.1817362012997263e103,1.1818660621218173e103,1.1819959800442815e103,1.1821259551110713e103,1.1822559873661872e103,1.1823860768536782e103,1.1825162236176417e103,1.1826464277022239e103,1.1827766891516192e103,1.1829070080100712e103,1.183037384321872e103,1.1831678181313626e103,1.1832983094829329e103,1.1834288584210216e103,1.1835594649901166e103,1.183690129234755e103,1.1838208511995226e103,1.1839516309290553e103,1.1840824684680378e103,1.1842133638612042e103,1.1843443171533379e103,1.1844753283892723e103,1.1846063976138904e103,1.1847375248721243e103,1.184868710208956e103,1.184999953669418e103,1.1851312552985923e103,1.1852626151416104e103,1.1853940332436544e103,1.1855255096499565e103,1.1856570444057989e103,1.185788637556514e103,1.1859202891474848e103,1.186051999224144e103,1.186183767831976e103,1.186315595016515e103,1.1864474808233455e103,1.186579425298103e103,1.1867114284864742e103,1.1868434904341964e103,1.1869756111870571e103,1.187107790790896e103,1.1872400292916027e103,1.1873723267351191e103,1.1875046831674373e103,1.1876370986346012e103,1.187769573182706e103,1.187902106857898e103,1.1880346997063755e103,1.1881673517743883e103,1.1883000631082374e103,1.188432833754276e103,1.1885656637589092e103,1.1886985531685933e103,1.1888315020298376e103,1.1889645103892023e103,1.1890975782933005e103,1.1892307057887974e103,1.1893638929224098e103,1.1894971397409077e103,1.1896304462911132e103,1.189763812619901e103,1.1898972387741975e103,1.1900307248009833e103,1.1901642707472904e103,1.1902978766602045e103,1.1904315425868629e103,1.1905652685744576e103,1.1906990546702324e103,1.1908329009214846e103,1.1909668073755645e103,1.1911007740798758e103,1.1912348010818758e103,1.1913688884290746e103,1.1915030361690362e103,1.1916372443493784e103,1.1917715130177719e103,1.1919058422219423e103,1.1920402320096675e103,1.1921746824287809e103,1.1923091935271684e103,1.192443765352771e103,1.1925783979535832e103,1.1927130913776543e103,1.1928478456730873e103,1.19298266088804e103,1.1931175370707243e103,1.1932524742694067e103,1.1933874725324085e103,1.1935225319081056e103,1.1936576524449287e103,1.1937928341913632e103,1.1939280771959493e103,1.194063381507283e103,1.1941987471740143e103,1.1943341742448488e103,1.1944696627685482e103,1.1946052127939279e103,1.1947408243698599e103,1.1948764975452719e103,1.1950122323691457e103,1.1951480288905208e103,1.1952838871584906e103,1.1954198072222053e103,1.1955557891308708e103,1.1956918329337491e103,1.1958279386801584e103,1.1959641064194724e103,1.1961003362011216e103,1.1962366280745928e103,1.1963729820894292e103,1.19650939829523e103,1.196645876741652e103,1.1967824174784077e103,1.1969190205552665e103,1.1970556860220552e103,1.1971924139286567e103,1.1973292043250116e103,1.1974660572611172e103,1.197602972787028e103,1.1977399509528563e103,1.1978769918087705e103,1.1980140954049977e103,1.1981512617918216e103,1.1982884910195841e103,1.1984257831386848e103,1.1985631381995802e103,1.1987005562527858e103,1.1988380373488744e103,1.1989755815384766e103,1.1991131888722818e103,1.199250859401037e103,1.199388593175548e103,1.1995263902466782e103,1.1996642506653506e103,1.1998021744825453e103,1.1999401617493023e103,1.2000782125167199e103,1.2002163268359549e103,1.2003545047582234e103,1.2004927463348005e103,1.2006310516170194e103,1.2007694206562744e103,1.200907853504017e103,1.2010463502117593e103,1.2011849108310724e103,1.2013235354135872e103,1.2014622240109939e103,1.2016009766750422e103,1.2017397934575422e103,1.2018786744103635e103,1.2020176195854353e103,1.2021566290347481e103,1.2022957028103509e103,1.2024348409643545e103,1.2025740435489284e103,1.2027133106163042e103,1.2028526422187727e103,1.202992038408686e103,1.2031314992384569e103,1.203271024760558e103,1.2034106150275246e103,1.2035502700919513e103,1.2036899900064943e103,1.2038297748238713e103,1.2039696245968608e103,1.204109539378303e103,1.204249519221099e103,1.204389564178212e103,1.2045296743026665e103,1.2046698496475488e103,1.2048100902660066e103,1.2049503962112506e103,1.205090767536552e103,1.2052312042952454e103,1.2053717065407267e103,1.2055122743264543e103,1.2056529077059495e103,1.205793606732795e103,1.2059343714606367e103,1.2060752019431837e103,1.2062160982342067e103,1.20635706038754e103,1.2064980884570803e103,1.206639182496788e103,1.2067803425606863e103,1.2069215687028611e103,1.2070628609774628e103,1.207204219438704e103,1.2073456441408616e103,1.2074871351382756e103,1.2076286924853503e103,1.207770316236553e103,1.2079120064464157e103,1.208053763169534e103,1.2081955864605674e103,1.2083374763742403e103,1.2084794329653404e103,1.2086214562887206e103,1.2087635463992977e103,1.2089057033520537e103,1.2090479272020352e103,1.2091902180043528e103,1.2093325758141826e103,1.209475000686766e103,1.2096174926774088e103,1.2097600518414821e103,1.209902678234423e103,1.210045371911733e103,1.2101881329289795e103,1.210330961341796e103,1.2104738572058805e103,1.210616820576998e103,1.2107598515109784e103,1.2109029500637186e103,1.2110461162911805e103,1.2111893502493925e103,1.2113326519944504e103,1.2114760215825149e103,1.2116194590698139e103,1.2117629645126416e103,1.2119065379673594e103,1.2120501794903947e103,1.2121938891382429e103,1.2123376669674655e103,1.2124815130346913e103,1.2126254273966167e103,1.2127694101100048e103,1.2129134612316866e103,1.2130575808185606e103,1.2132017689275927e103,1.2133460256158168e103,1.2134903509403347e103,1.2136347449583155e103,1.2137792077269968e103,1.2139237393036846e103,1.2140683397457526e103,1.2142130091106437e103,1.2143577474558684e103,1.214502554839006e103,1.214647431317705e103,1.2147923769496823e103,1.2149373917927235e103,1.2150824759046833e103,1.215227629343486e103,1.2153728521671243e103,1.215518144433661e103,1.215663506201228e103,1.2158089375280266e103,1.2159544384723281e103,1.2161000090924732e103,1.2162456494468728e103,1.2163913595940076e103,1.2165371395924283e103,1.2166829895007558e103,1.2168289093776817e103,1.2169748992819675e103,1.2171209592724457e103,1.217267089408019e103,1.2174132897476608e103,1.217559560350416e103,1.2177059012753998e103,1.217852312581799e103,1.217998794328871e103,1.2181453465759451e103,1.2182919693824215e103,1.2184386628077722e103,1.2185854269115408e103,1.2187322617533426e103,1.218879167392865e103,1.219026143889867e103,1.2191731913041799e103,1.219320309695707e103,1.2194674991244244e103,1.21961475965038e103,1.2197620913336946e103,1.2199094942345616e103,1.2200569684132472e103,1.2202045139300905e103,1.2203521308455033e103,1.2204998192199708e103,1.2206475791140516e103,1.2207954105883774e103,1.2209433137036531e103,1.2210912885206574e103,1.221239335100243e103,1.2213874535033362e103,1.2215356437909367e103,1.2216839060241192e103,1.2218322402640314e103,1.2219806465718969e103,1.2221291250090119e103,1.222277675636748e103,1.2224262985165518e103,1.2225749937099437e103,1.2227237612785197e103,1.2228726012839505e103,1.2230215137879819e103,1.2231704988524348e103,1.2233195565392059e103,1.2234686869102668e103,1.223617890027665e103,1.2237671659535232e103,1.223916514750041e103,1.2240659364794927e103,1.2242154312042296e103,1.2243649989866784e103,1.224514639889343e103,1.2246643539748029e103,1.2248141413057142e103,1.2249640019448103e103,1.2251139359549006e103,1.2252639433988722e103,1.2254140243396887e103,1.2255641788403908e103,1.225714406964097e103,1.2258647087740024e103,1.2260150843333805e103,1.2261655337055818e103,1.2263160569540347e103,1.2264666541422458e103,1.2266173253337994e103,1.2267680705923578e103,1.2269188899816622e103,1.2270697835655318e103,1.2272207514078639e103,1.227371793572635e103,1.2275229101239005e103,1.2276741011257944e103,1.2278253666425291e103,1.2279767067383977e103,1.2281281214777713e103,1.2282796109251005e103,1.228431175144916e103,1.2285828142018277e103,1.2287345281605256e103,1.2288863170857793e103,1.2290381810424389e103,1.2291901200954337e103,1.2293421343097746e103,1.2294942237505522e103,1.2296463884829375e103,1.2297986285721826e103,1.2299509440836201e103,1.2301033350826641e103,1.2302558016348087e103,1.2304083438056308e103,1.2305609616607869e103,1.2307136552660162e103,1.2308664246871389e103,1.2310192699900574e103,1.2311721912407556e103,1.2313251885052992e103,1.2314782618498368e103,1.2316314113405986e103,1.231784637043897e103,1.2319379390261281e103,1.2320913173537693e103,1.2322447720933815e103,1.2323983033116084e103,1.232551911075177e103,1.2327055954508968e103,1.2328593565056616e103,1.233013194306448e103,1.2331671089203163e103,1.2333211004144107e103,1.2334751688559591e103,1.2336293143122738e103,1.2337835368507508e103,1.2339378365388704e103,1.2340922134441976e103,1.2342466676343822e103,1.2344011991771576e103,1.2345558081403435e103,1.2347104945918435e103,1.2348652585996465e103,1.2350201002318272e103,1.2351750195565451e103,1.2353300166420454e103,1.2354850915566593e103,1.2356402443688033e103,1.23579547514698e103,1.2359507839597783e103,1.2361061708758733e103,1.2362616359640259e103,1.2364171792930846e103,1.2365728009319837e103,1.2367285009497443e103,1.2368842794154749e103,1.2370401363983707e103,1.2371960719677146e103,1.2373520861928762e103,1.2375081791433133e103,1.2376643508885708e103,1.2378206014982814e103,1.2379769310421663e103,1.2381333395900343e103,1.2382898272117826e103,1.2384463939773969e103,1.2386030399569509e103,1.2387597652206077e103,1.2389165698386188e103,1.2390734538813244e103,1.2392304174191544e103,1.2393874605226278e103,1.2395445832623523e103,1.2397017857090265e103,1.2398590679334373e103,1.2400164300064621e103,1.2401738719990687e103,1.2403313939823141e103,1.2404889960273465e103,1.2406466782054037e103,1.2408044405878146e103,1.2409622832459992e103,1.2411202062514671e103,1.2412782096758204e103,1.2414362935907517e103,1.2415944580680446e103,1.241752703179575e103,1.2419110289973098e103,1.242069435593308e103,1.2422279230397205e103,1.24238649140879e103,1.2425451407728523e103,1.2427038712043344e103,1.2428626827757568e103,1.2430215755597325e103,1.2431805496289668e103,1.243339605056259e103,1.2434987419145008e103,1.2436579602766773e103,1.243817260215868e103,1.2439766418052446e103,1.2441361051180734e103,1.2442956502277149e103,1.244455277207623e103,1.2446149861313467e103,1.2447747770725288e103,1.2449346501049067e103,1.2450946053023129e103,1.2452546427386745e103,1.2454147624880136e103,1.2455749646244481e103,1.2457352492221906e103,1.2458956163555493e103,1.2460560660989287e103,1.2462165985268287e103,1.246377213713845e103,1.2465379117346698e103,1.2466986926640918e103,1.2468595565769957e103,1.2470205035483633e103,1.247181533653273e103,1.2473426469669004e103,1.2475038435645183e103,1.247665123521496e103,1.2478264869133012e103,1.247987933815499e103,1.2481494643037527e103,1.2483110784538222e103,1.248472776341567e103,1.2486345580429444e103,1.24879642363401e103,1.248958373190918e103,1.2491204067899217e103,1.2492825245073735e103,1.2494447264197241e103,1.2496070126035245e103,1.2497693831354245e103,1.2499318380921738e103,1.2500943775506218e103,1.250257001587718e103,1.250419710280512e103,1.2505825037061539e103,1.2507453819418934e103,1.2509083450650822e103,1.251071393153172e103,1.2512345262837153e103,1.2513977445343664e103,1.2515610479828804e103,1.2517244367071146e103,1.2518879107850271e103,1.2520514702946785e103,1.2522151153142309e103,1.2523788459219493e103,1.2525426621962004e103,1.252706564215454e103,1.2528705520582819e103,1.2530346258033596e103,1.253198785529465e103,1.2533630313154801e103,1.2535273632403894e103,1.2536917813832814e103,1.2538562858233484e103,1.2540208766398866e103,1.2541855539122963e103,1.2543503177200823e103,1.2545151681428537e103,1.2546801052603244e103,1.2548451291523127e103,1.2550102398987426e103,1.255175437579643e103,1.2553407222751479e103,1.2555060940654974e103,1.255671553031037e103,1.2558370992522182e103,1.2560027328095985e103,1.2561684537838418e103,1.2563342622557188e103,1.2565001583061063e103,1.256666142015988e103,1.256832213466455e103,1.2569983727387055e103,1.2571646199140447e103,1.257330955073886e103,1.2574973782997497e103,1.2576638896732652e103,1.2578304892761689e103,1.2579971771903063e103,1.2581639534976312e103,1.2583308182802057e103,1.2584977716202012e103,1.258664813599898e103,1.258831944301686e103,1.2589991638080642e103,1.259166472201641e103,1.2593338695651352e103,1.2595013559813753e103,1.2596689315332996e103,1.2598365963039577e103,1.2600043503765094e103,1.2601721938342248e103,1.2603401267604856e103,1.2605081492387843e103,1.2606762613527247e103,1.2608444631860227e103,1.2610127548225055e103,1.2611811363461119e103,1.2613496078408937e103,1.2615181693910138e103,1.2616868210807494e103,1.2618555629944883e103,1.2620243952167332e103,1.2621933178320984e103,1.2623623309253121e103,1.2625314345812165e103,1.2627006288847663e103,1.262869913921031e103,1.2630392897751942e103,1.2632087565325535e103,1.263378314278521e103,1.2635479630986236e103,1.2637177030785027e103,1.2638875343039156e103,1.2640574568607345e103,1.2642274708349463e103,1.2643975763126552e103,1.26456777338008e103,1.2647380621235561e103,1.2649084426295351e103,1.2650789149845855e103,1.2652494792753915e103,1.2654201355887553e103,1.2655908840115959e103,1.2657617246309495e103,1.2659326575339698e103,1.266103682807928e103,1.2662748005402146e103,1.2664460108183362e103,1.266617313729919e103,1.2667887093627077e103,1.2669601978045658e103,1.2671317791434758e103,1.2673034534675388e103,1.2674752208649761e103,1.2676470814241278e103,1.267819035233455e103,1.2679910823815375e103,1.2681632229570765e103,1.268335457048893e103,1.2685077847459288e103,1.2686802061372467e103,1.2688527213120304e103,1.2690253303595856e103,1.2691980333693385e103,1.2693708304308378e103,1.2695437216337538e103,1.2697167070678792e103,1.269889786823129e103,1.2700629609895409e103,1.2702362296572754e103,1.2704095929166159e103,1.2705830508579693e103,1.2707566035718658e103,1.2709302511489595e103,1.2711039936800283e103,1.2712778312559739e103,1.2714517639678233e103,1.2716257919067274e103,1.2717999151639617e103,1.2719741338309274e103,1.2721484479991505e103,1.2723228577602829e103,1.2724973632061014e103,1.2726719644285098e103,1.2728466615195371e103,1.2730214545713392e103,1.2731963436761986e103,1.2733713289265242e103,1.2735464104148529e103,1.2737215882338476e103,1.2738968624762997e103,1.274072233235128e103,1.2742477006033793e103,1.2744232646742284e103,1.274598925540979e103,1.2747746832970628e103,1.274950538036041e103,1.2751264898516038e103,1.2753025388375704e103,1.2754786850878899e103,1.2756549286966412e103,1.2758312697580333e103,1.2760077083664048e103,1.2761842446162257e103,1.2763608786020969e103,1.276537610418749e103,1.2767144401610453e103,1.2768913679239799e103,1.2770683938026782e103,1.2772455178923983e103,1.2774227402885298e103,1.2776000610865954e103,1.2777774803822496e103,1.2779549982712809e103,1.27813261484961e103,1.2783103302132911e103,1.2784881444585123e103,1.2786660576815955e103,1.278844069978997e103,1.2790221814473065e103,1.2792003921832489e103,1.2793787022836844e103,1.279557111845607e103,1.2797356209661478e103,1.2799142297425713e103,1.28009293827228e103,1.2802717466528106e103,1.2804506549818373e103,1.2806296633571703e103,1.2808087718767568e103,1.2809879806386811e103,1.2811672897411645e103,1.2813466992825661e103,1.2815262093613828e103,1.2817058200762497e103,1.281885531525939e103,1.2820653438093637e103,1.2822452570255738e103,1.2824252712737584e103,1.2826053866532475e103,1.2827856032635085e103,1.28296592120415e103,1.2831463405749207e103,1.283326861475709e103,1.2835074840065443e103,1.2836882082675965e103,1.283869034359177e103,1.2840499623817386e103,1.2842309924358753e103,1.284412124622323e103,1.2845933590419602e103,1.2847746957958075e103,1.2849561349850282e103,1.2851376767109287e103,1.285319321074958e103,1.2855010681787092e103,1.285682918123919e103,1.285864871012468e103,1.2860469269463807e103,1.2862290860278267e103,1.2864113483591199e103,1.2865937140427197e103,1.2867761831812304e103,1.2869587558774018e103,1.2871414322341303e103,1.2873242123544574e103,1.2875070963415718e103,1.2876900842988084e103,1.2878731763296494e103,1.2880563725377236e103,1.2882396730268081e103,1.2884230779008266e103,1.2886065872638523e103,1.2887902012201056e103,1.2889739198739554e103,1.2891577433299202e103,1.289341671692667e103,1.289525705067013e103,1.2897098435579237e103,1.289894087270516e103,1.290078436310056e103,1.2902628907819608e103,1.290447450791798e103,1.290632116445287e103,1.2908168878482975e103,1.2910017651068515e103,1.2911867483271227e103,1.2913718376154369e103,1.2915570330782727e103,1.2917423348222616e103,1.2919277429541876e103,1.2921132575809879e103,1.292298878809754e103,1.2924846067477315e103,1.2926704415023188e103,1.2928563831810702e103,1.2930424318916947e103,1.2932285877420551e103,1.2934148508401709e103,1.2936012212942167e103,1.2937876992125228e103,1.2939742847035764e103,1.294160977876021e103,1.294347778838656e103,1.2945346877004391e103,1.2947217045704852e103,1.2949088295580663e103,1.295096062772613e103,1.2952834043237139e103,1.2954708543211163e103,1.2956584128747261e103,1.295846080094609e103,1.2960338560909899e103,1.2962217409742528e103,1.2964097348549432e103,1.2965978378437656e103,1.2967860500515864e103,1.2969743715894321e103,1.2971628025684907e103,1.297351343100112e103,1.297539993295808e103,1.2977287532672522e103,1.297917623126281e103,1.2981066029848938e103,1.298295692955253e103,1.298484893149684e103,1.2986742036806772e103,1.2988636246608857e103,1.2990531562031277e103,1.2992427984203858e103,1.299432551425808e103,1.2996224153327075e103,1.2998123902545626e103,1.3000024763050183e103,1.3001926735978854e103,1.3003829822471418e103,1.3005734023669315e103,1.300763934071566e103,1.3009545774755252e103,1.3011453326934556e103,1.3013361998401726e103,1.3015271790306597e103,1.3017182703800696e103,1.3019094740037244e103,1.3021007900171144e103,1.3022922185359015e103,1.302483759675916e103,1.30267541355316e103,1.302867180283805e103,1.303059059984195e103,1.303251052770845e103,1.3034431587604406e103,1.303635378069841e103,1.3038277108160773e103,1.3040201571163528e103,1.3042127170880448e103,1.3044053908487037e103,1.3045981785160526e103,1.30479108020799e103,1.3049840960425885e103,1.3051772261380953e103,1.3053704706129322e103,1.3055638295856972e103,1.3057573031751637e103,1.3059508915002814e103,1.3061445946801757e103,1.3063384128341498e103,1.3065323460816833e103,1.3067263945424335e103,1.3069205583362355e103,1.3071148375831026e103,1.3073092324032264e103,1.3075037429169773e103,1.3076983692449053e103,1.3078931115077393e103,1.3080879698263886e103,1.3082829443219425e103,1.3084780351156707e103,1.3086732423290241e103,1.308868566083635e103,1.309064006501317e103,1.3092595637040653e103,1.3094552378140585e103,1.309651028953657e103,1.3098469372454042e103,1.3100429628120277e103,1.3102391057764382e103,1.310435366261731e103,1.3106317443911846e103,1.310828240288264e103,1.3110248540766185e103,1.311221585880083e103,1.3114184358226785e103,1.311615404028612e103,1.3118124906222775e103,1.3120096957282556e103,1.3122070194713147e103,1.3124044619764105e103,1.3126020233686874e103,1.3127997037734774e103,1.3129975033163018e103,1.3131954221228718e103,1.3133934603190865e103,1.313591618031037e103,1.3137898953850028e103,1.3139882925074557e103,1.3141868095250573e103,1.3143854465646613e103,1.3145842037533134e103,1.314783081218251e103,1.3149820790869044e103,1.3151811974868969e103,1.3153804365460446e103,1.3155797963923578e103,1.3157792771540413e103,1.3159788789594932e103,1.3161786019373077e103,1.3163784462162737e103,1.3165784119253754e103,1.316778499193794e103,1.3169787081509058e103,1.317179038926285e103,1.3173794916497024e103,1.317580066451127e103,1.3177807634607245e103,1.3179815828088607e103,1.3181825246260987e103,1.3183835890432016e103,1.3185847761911316e103,1.3187860862010512e103,1.3189875192043227e103,1.3191890753325097e103,1.319390754717377e103,1.3195925574908899e103,1.319794483785217e103,1.3199965337327284e103,1.3201987074659973e103,1.3204010051177996e103,1.3206034268211156e103,1.3208059727091283e103,1.3210086429152264e103,1.3212114375730024e103,1.3214143568162547e103,1.3216174007789864e103,1.3218205695954075e103,1.322023863399934e103,1.3222272823271883e103,1.3224308265120015e103,1.3226344960894102e103,1.3228382911946608e103,1.3230422119632078e103,1.3232462585307138e103,1.3234504310330519e103,1.323654729606304e103,1.3238591543867629e103,1.3240637055109311e103,1.3242683831155233e103,1.3244731873374647e103,1.3246781183138925e103,1.3248831761821562e103,1.3250883610798184e103,1.3252936731446547e103,1.3254991125146538e103,1.3257046793280191e103,1.3259103737231677e103,1.3261161958387322e103,1.3263221458135604e103,1.3265282237867153e103,1.3267344298974768e103,1.3269407642853407e103,1.3271472270900206e103,1.3273538184514468e103,1.3275605385097683e103,1.327767387405352e103,1.3279743652787838e103,1.3281814722708684e103,1.3283887085226306e103,1.3285960741753157e103,1.3288035693703888e103,1.3290111942495366e103,1.3292189489546669e103,1.3294268336279102e103,1.3296348484116183e103,1.3298429934483666e103,1.3300512688809533e103,1.3302596748524012e103,1.3304682115059564e103,1.33067687898509e103,1.3308856774334982e103,1.3310946069951029e103,1.3313036678140519e103,1.3315128600347195e103,1.3317221838017074e103,1.3319316392598438e103,1.3321412265541856e103,1.332350945830018e103,1.3325607972328546e103,1.3327707809084389e103,1.332980897002743e103,1.3331911456619709e103,1.3334015270325561e103,1.333612041261164e103,1.3338226884946906e103,1.3340334688802653e103,1.3342443825652498e103,1.3344554296972379e103,1.3346666104240584e103,1.334877924893773e103,1.3350893732546789e103,1.3353009556553075e103,1.3355126722444262e103,1.3357245231710378e103,1.3359365085843828e103,1.3361486286339372e103,1.3363608834694153e103,1.3365732732407691e103,1.3367857980981895e103,1.3369984581921051e103,1.3372112536731858e103,1.3374241846923395e103,1.3376372514007157e103,1.3378504539497048e103,1.3380637924909374e103,1.3382772671762878e103,1.3384908781578716e103,1.3387046255880472e103,1.3389185096194173e103,1.3391325304048276e103,1.3393466880973688e103,1.3395609828503763e103,1.339775414817431e103,1.3399899841523599e103,1.3402046910092365e103,1.3404195355423809e103,1.340634517906361e103,1.340849638255993e103,1.3410648967463408e103,1.3412802935327183e103,1.3414958287706883e103,1.3417115026160644e103,1.34192731522491e103,1.3421432667535402e103,1.3423593573585213e103,1.3425755871966728e103,1.3427919564250657e103,1.343008465201025e103,1.343225113682129e103,1.3434419020262109e103,1.3436588303913584e103,1.343875898935915e103,1.3440931078184789e103,1.3443104571979064e103,1.3445279472333103e103,1.3447455780840598e103,1.3449633499097839e103,1.3451812628703689e103,1.3453993171259613e103,1.345617512836966e103,1.3458358501640502e103,1.3460543292681398e103,1.3462729503104232e103,1.3464917134523505e103,1.3467106188556344e103,1.3469296666822506e103,1.3471488570944382e103,1.3473681902547005e103,1.3475876663258057e103,1.347807285470787e103,1.3480270478529435e103,1.3482469536358409e103,1.3484670029833119e103,1.348687196059456e103,1.348907533028642e103,1.349128014055506e103,1.3493486393049543e103,1.349569408942163e103,1.3497903231325781e103,1.3500113820419166e103,1.3502325858361676e103,1.3504539346815913e103,1.3506754287447218e103,1.3508970681923656e103,1.3511188531916033e103,1.35134078390979e103,1.351562860514556e103,1.3517850831738068e103,1.352007452055724e103,1.3522299673287672e103,1.3524526291616719e103,1.352675437723452e103,1.352898393183401e103,1.3531214957110897e103,1.3533447454763705e103,1.353568142649375e103,1.3537916874005162e103,1.3540153799004888e103,1.3542392203202695e103,1.3544632088311178e103,1.3546873456045765e103,1.3549116308124729e103,1.3551360646269183e103,1.3553606472203094e103,1.3555853787653289e103,1.355810259434946e103,1.356035289402417e103,1.3562604688412855e103,1.3564857979253842e103,1.3567112768288336e103,1.356936905726045e103,1.3571626847917195e103,1.3573886142008482e103,1.357614694128715e103,1.3578409247508945e103,1.3580673062432555e103,1.3582938387819588e103,1.3585205225434604e103,1.3587473577045096e103,1.3589743444421523e103,1.3592014829337296e103,1.359428773356879e103,1.3596562158895358e103,1.3598838107099324e103,1.3601115579966007e103,1.3603394579283707e103,1.3605675106843727e103,1.3607957164440377e103,1.3610240753870973e103,1.3612525876935851e103,1.361481253543837e103,1.3617100731184921e103,1.3619390465984937e103,1.3621681741650886e103,1.362397455999829e103,1.3626268922845736e103,1.3628564832014862e103,1.3630862289330389e103,1.3633161296620107e103,1.3635461855714894e103,1.363776396844872e103,1.3640067636658653e103,1.3642372862184862e103,1.364467964687063e103,1.364698799256236e103,1.3649297901109578e103,1.3651609374364943e103,1.3653922414184252e103,1.365623702242645e103,1.365855320095363e103,1.3660870951631055e103,1.3663190276327144e103,1.3665511176913495e103,1.3667833655264883e103,1.3670157713259277e103,1.367248335277784e103,1.3674810575704926e103,1.3677139383928116e103,1.3679469779338193e103,1.3681801763829168e103,1.3684135339298282e103,1.3686470507646018e103,1.3688807270776097e103,1.3691145630595494e103,1.3693485589014443e103,1.3695827147946451e103,1.3698170309308292e103,1.3700515075020016e103,1.3702861447004976e103,1.3705209427189807e103,1.3707559017504453e103,1.3709910219882168e103,1.3712263036259525e103,1.371461746857642e103,1.371697351877608e103,1.3719331188805074e103,1.3721690480613323e103,1.3724051396154092e103,1.3726413937384021e103,1.3728778106263112e103,1.3731143904754745e103,1.373351133482569e103,1.37358803984461e103,1.3738251097589543e103,1.374062343423298e103,1.37429974103568e103,1.3745373027944805e103,1.3747750288984233e103,1.3750129195465766e103,1.375250974938352e103,1.3754891952735076e103,1.3757275807521471e103,1.3759661315747215e103,1.3762048479420293e103,1.376443730055218e103,1.3766827781157838e103,1.3769219923255735e103,1.3771613728867844e103,1.3774009200019663e103,1.3776406338740204e103,1.3778805147062024e103,1.3781205627021206e103,1.3783607780657401e103,1.3786011610013802e103,1.3788417117137167e103,1.3790824304077841e103,1.3793233172889736e103,1.3795643725630363e103,1.3798055964360825e103,1.380046989114583e103,1.3802885508053708e103,1.38053028171564e103,1.380772182052949e103,1.3810142520252188e103,1.381256491840736e103,1.3814989017081529e103,1.381741481836487e103,1.3819842324351242e103,1.382227153713818e103,1.3824702458826908e103,1.3827135091522346e103,1.3829569437333123e103,1.383200549837158e103,1.3834443276753783e103,1.3836882774599524e103,1.3839323994032343e103,1.384176693717952e103,1.38442116061721e103,1.384665800314489e103,1.384910613023647e103,1.3851555989589207e103,1.3854007583349254e103,1.385646091366657e103,1.385891598269492e103,1.386137279259189e103,1.3863831345518888e103,1.3866291643641162e103,1.3868753689127805e103,1.3871217484151763e103,1.3873683030889836e103,1.3876150331522709e103,1.387861938823494e103,1.3881090203214972e103,1.3883562778655155e103,1.3886037116751737e103,1.3888513219704894e103,1.3890991089718717e103,1.3893470729001237e103,1.3895952139764425e103,1.3898435324224204e103,1.3900920284600465e103,1.3903407023117068e103,1.3905895542001849e103,1.3908385843486635e103,1.3910877929807253e103,1.3913371803203547e103,1.3915867465919362e103,1.3918364920202581e103,1.3920864168305124e103,1.392336521248295e103,1.3925868054996078e103,1.392837269810859e103,1.3930879144088646e103,1.3933387395208483e103,1.393589745374444e103,1.3938409321976948e103,1.394092300219056e103,1.394343849667395e103,1.3945955807719919e103,1.3948474937625412e103,1.395099588869153e103,1.3953518663223526e103,1.3956043263530834e103,1.395856969192706e103,1.3961097950730002e103,1.3963628042261667e103,1.396615996884826e103,1.3968693732820214e103,1.3971229336512191e103,1.3973766782263095e103,1.3976306072416072e103,1.3978847209318536e103,1.3981390195322172e103,1.398393503278294e103,1.3986481724061094e103,1.398903027152119e103,1.3991580677532092e103,1.3994132944466983e103,1.3996687074703384e103,1.3999243070623154e103,1.4001800934612503e103,1.4004360669062007e103,1.4006922276366604e103,1.4009485758925635e103,1.4012051119142817e103,1.401461835942628e103,1.4017187482188562e103,1.4019758489846629e103,1.4022331384821888e103,1.4024906169540182e103,1.4027482846431819e103,1.403006141793157e103,1.4032641886478687e103,1.4035224254516912e103,1.403780852449448e103,1.4040394698864143e103,1.404298278008317e103,1.4045572770613368e103,1.4048164672921077e103,1.4050758489477197e103,1.4053354222757196e103,1.4055951875241112e103,1.405855144941357e103,1.4061152947763797e103,1.4063756372785626e103,1.4066361726977506e103,1.4068969012842527e103,1.407157823288841e103,1.4074189389627536e103,1.4076802485576954e103,1.407941752325838e103,1.4082034505198218e103,1.4084653433927583e103,1.408727431198228e103,1.4089897141902855e103,1.4092521926234574e103,1.4095148667527452e103,1.4097777368336259e103,1.4100408031220529e103,1.4103040658744582e103,1.4105675253477519e103,1.4108311817993255e103,1.4110950354870505e103,1.411359086669282e103,1.4116233356048586e103,1.4118877825531033e103,1.4121524277738257e103,1.4124172715273227e103,1.412682314074379e103,1.4129475556762694e103,1.41321299659476e103,1.4134786370921083e103,1.413744477431065e103,1.4140105178748753e103,1.4142767586872808e103,1.4145432001325191e103,1.4148098424753257e103,1.4150766859809368e103,1.4153437309150872e103,1.4156109775440154e103,1.4158784261344617e103,1.4161460769536705e103,1.4164139302693927e103,1.416681986349885e103,1.416950245463912e103,1.4172187078807487e103,1.4174873738701793e103,1.4177562437025003e103,1.4180253176485207e103,1.4182945959795647e103,1.4185640789674714e103,1.4188337668845963e103,1.4191036600038137e103,1.4193737585985172e103,1.4196440629426206e103,1.41991457331056e103,1.4201852899772947e103,1.4204562132183086e103,1.420727343309611e103,1.4209986805277385e103,1.4212702251497568e103,1.4215419774532604e103,1.4218139377163752e103,1.4220861062177601e103,1.4223584832366068e103,1.4226310690526426e103,1.4229038639461314e103,1.4231768681978743e103,1.423450082089211e103,1.4237235059020233e103,1.4239971399187333e103,1.4242709844223065e103,1.4245450396962532e103,1.4248193060246294e103,1.4250937836920381e103,1.4253684729836313e103,1.4256433741851108e103,1.4259184875827293e103,1.4261938134632926e103,1.426469352114161e103,1.4267451038232492e103,1.42702106887903e103,1.4272972475705337e103,1.4275736401873506e103,1.4278502470196322e103,1.4281270683580923e103,1.4284041044940085e103,1.4286813557192244e103,1.4289588223261496e103,1.4292365046077626e103,1.429514402857611e103,1.4297925173698142e103,1.4300708484390634e103,1.4303493963606244e103,1.4306281614303376e103,1.4309071439446215e103,1.4311863442004722e103,1.4314657624954659e103,1.4317453991277594e103,1.4320252543960936e103,1.432305328599793e103,1.4325856220387673e103,1.4328661350135143e103,1.4331468678251206e103,1.433427820775262e103,1.4337089941662072e103,1.4339903883008176e103,1.4342720034825494e103,1.4345538400154553e103,1.4348358982041856e103,1.43511817835399e103,1.4354006807707191e103,1.4356834057608262e103,1.4359663536313685e103,1.436249524690008e103,1.4365329192450143e103,1.4368165376052657e103,1.437100380080251e103,1.43738444698007e103,1.4376687386154362e103,1.437953255297678e103,1.4382379973387405e103,1.4385229650511862e103,1.4388081587481986e103,1.4390935787435807e103,1.4393792253517596e103,1.4396650988877868e103,1.4399511996673392e103,1.4402375280067222e103,1.44052408422287e103,1.440810868633348e103,1.4410978815563544e103,1.4413851233107209e103,1.4416725942159161e103,1.441960294592045e103,1.442248224759853e103,1.4425363850407255e103,1.4428247757566905e103,1.4431133972304204e103,1.4434022497852335e103,1.4436913337450956e103,1.4439806494346214e103,1.4442701971790767e103,1.4445599773043807e103,1.4448499901371052e103,1.4451402360044796e103,1.4454307152343905e103,1.445721428155384e103,1.4460123750966673e103,1.4463035563881101e103,1.4465949723602479e103,1.4468866233442815e103,1.4471785096720802e103,1.4474706316761837e103,1.4477629896898025e103,1.448055584046821e103,1.448348415081799e103,1.4486414831299725e103,1.4489347885272573e103,1.4492283316102486e103,1.4495221127162251e103,1.4498161321831488e103,1.450110390349668e103,1.4504048875551184e103,1.4506996241395257e103,1.4509946004436064e103,1.4512898168087714e103,1.4515852735771252e103,1.45188097109147e103,1.4521769096953066e103,1.4524730897328364e103,1.4527695115489632e103,1.4530661754892951e103,1.4533630819001465e103,1.4536602311285397e103,1.4539576235222069e103,1.4542552594295926e103,1.4545531391998544e103,1.454851263182866e103,1.4551496317292183e103,1.4554482451902218e103,1.4557471039179085e103,1.4560462082650338e103,1.4563455585850776e103,1.4566451552322481e103,1.4569449985614812e103,1.4572450889284454e103,1.4575454266895413e103,1.4578460122019048e103,1.4581468458234086e103,1.458447927912664e103,1.4587492588290242e103,1.4590508389325847e103,1.4593526685841859e103,1.4596547481454149e103,1.4599570779786087e103,1.4602596584468543e103,1.4605624899139918e103,1.4608655727446165e103,1.4611689073040812e103,1.461472493958497e103,1.4617763330747362e103,1.462080425020435e103,1.4623847701639944e103,1.4626893688745827e103,1.4629942215221376e103,1.4632993284773682e103,1.463604690111758e103,1.4639103067975651e103,1.4642161789078263e103,1.4645223068163575e103,1.4648286908977575e103,1.4651353315274082e103,1.465442229081479e103,1.465749383936927e103,1.4660567964714998e103,1.4663644670637385e103,1.4666723960929783e103,1.4669805839393519e103,1.4672890309837913e103,1.4675977376080298e103,1.4679067041946041e103,1.4682159311268575e103,1.4685254187889404e103,1.4688351675658145e103,1.469145177843253e103,1.4694554500078443e103,1.4697659844469942e103,1.4700767815489266e103,1.470387841702688e103,1.4706991652981477e103,1.471010752726002e103,1.4713226043777744e103,1.4716347206458199e103,1.4719471019233254e103,1.4722597486043138e103,1.4725726610836448e103,1.4728858397570184e103,1.4731992850209761e103,1.4735129972729046e103,1.4738269769110365e103,1.4741412243344543e103,1.4744557399430913e103,1.474770524137735e103,1.4750855773200292e103,1.4754008998924758e103,1.475716492258438e103,1.4760323548221424e103,1.4763484879886814e103,1.4766648921640153e103,1.4769815677549753e103,1.4772985151692649e103,1.4776157348154641e103,1.4779332271030306e103,1.4782509924423018e103,1.4785690312444986e103,1.4788873439217261e103,1.479205930886979e103,1.479524792554141e103,1.4798439293379885e103,1.4801633416541935e103,1.480483029919326e103,1.4808029945508558e103,1.481123235967156e103,1.4814437545875043e103,1.4817645508320878e103,1.4820856251220022e103,1.4824069778792575e103,1.4827286095267793e103,1.4830505204884108e103,1.4833727111889162e103,1.4836951820539832e103,1.4840179335102258e103,1.484340965985186e103,1.4846642799073373e103,1.4849878757060874e103,1.4853117538117805e103,1.4856359146556993e103,1.4859603586700693e103,1.4862850862880597e103,1.4866100979437878e103,1.4869353940723202e103,1.4872609751096762e103,1.4875868414928308e103,1.4879129936597166e103,1.4882394320492271e103,1.4885661571012196e103,1.488893169256518e103,1.489220468956914e103,1.4895480566451723e103,1.4898759327650315e103,1.4902040977612084e103,1.4905325520793991e103,1.4908612961662834e103,1.4911903304695266e103,1.4915196554377822e103,1.4918492715206963e103,1.4921791791689085e103,1.4925093788340557e103,1.492839870968775e103,1.493170656026707e103,1.493501734462497e103,1.4938331067317998e103,1.4941647732912819e103,1.494496734598624e103,1.4948289911125248e103,1.4951615432927027e103,1.4954943915999009e103,1.4958275364958872e103,1.4961609784434602e103,1.4964947179064498e103,1.4968287553497218e103,1.4971630912391807e103,1.4974977260417714e103,1.4978326602254838e103,1.4981678942593552e103,1.4985034286134732e103,1.4988392637589788e103,1.4991754001680702e103,1.4995118383140043e103,1.499848578671102e103,1.500185621714749e103,1.5005229679214004e103,1.500860617768584e103,1.5011985717349018e103,1.5015368303000349e103,1.5018753939447456e103,1.502214263150882e103,1.5025534384013784e103,1.5028929201802613e103,1.5032327089726514e103,1.5035728052647676e103,1.5039132095439278e103,1.5042539222985556e103,1.5045949440181815e103,1.5049362751934457e103,1.5052779163161036e103,1.5056198678790265e103,1.5059621303762068e103,1.5063047043027602e103,1.50664759015493e103,1.5069907884300894e103,1.5073342996267452e103,1.5076781242445422e103,1.5080222627842647e103,1.5083667157478411e103,1.5087114836383475e103,1.5090565669600103e103,1.5094019662182098e103,1.5097476819194845e103,1.5100937145715333e103,1.5104400646832196e103,1.5107867327645749e103,1.5111337193268019e103,1.5114810248822786e103,1.511828649944561e103,1.5121765950283872e103,1.5125248606496807e103,1.5128734473255546e103,1.5132223555743134e103,1.5135715859154588e103,1.5139211388696918e103,1.5142710149589174e103,1.5146212147062464e103,1.5149717386360015e103,1.5153225872737186e103,1.5156737611461527e103,1.516025260781279e103,1.5163770867082989e103,1.516729239457643e103,1.5170817195609735e103,1.5174345275511901e103,1.5177876639624322e103,1.518141129330083e103,1.5184949241907738e103,1.5188490490823868e103,1.5192035045440599e103,1.51955829111619e103,1.5199134093404367e103,1.5202688597597266e103,1.5206246429182566e103,1.5209807593614987e103,1.5213372096362021e103,1.5216939942903994e103,1.5220511138734088e103,1.5224085689358385e103,1.5227663600295907e103,1.523124487707866e103,1.5234829525251667e103,1.523841755037301e103,1.5242008958013873e103,1.5245603753758568e103,1.524920194320461e103,1.5252803531962708e103,1.5256408525656847e103,1.5260016929924315e103,1.5263628750415735e103,1.526724399279512e103,1.52708626627399e103,1.527448476594098e103,1.527811030810277e103,1.5281739294943228e103,1.5285371732193902e103,1.528900762559998e103,1.529264698092032e103,1.5296289803927498e103,1.5299936100407855e103,1.5303585876161528e103,1.5307239137002506e103,1.531089588875867e103,1.5314556137271825e103,1.5318219888397755e103,1.5321887148006265e103,1.5325557921981218e103,1.532923221622059e103,1.5332910036636502e103,1.5336591389155271e103,1.5340276279717455e103,1.5343964714277896e103,1.534765669880576e103,1.535135223928459e103,1.5355051341712347e103,1.5358754012101453e103,1.5362460256478836e103,1.5366170080885986e103,1.5369883491378992e103,1.5373600494028578e103,1.5377321094920174e103,1.538104530015394e103,1.538477311584482e103,1.5388504548122592e103,1.5392239603131917e103,1.5395978287032373e103,1.5399720605998507e103,1.5403466566219901e103,1.5407216173901188e103,1.5410969435262123e103,1.5414726356537628e103,1.5418486943977823e103,1.5422251203848098e103,1.542601914242915e103,1.5429790766017025e103,1.543356608092318e103,1.5437345093474526e103,1.544112781001347e103,1.5444914236897982e103,1.5448704380501632e103,1.5452498247213634e103,1.5456295843438912e103,1.5460097175598138e103,1.5463902250127795e103,1.5467711073480204e103,1.5471523652123606e103,1.5475339992542186e103,1.5479160101236145e103,1.5482983984721727e103,1.5486811649531306e103,1.54906431022134e103,1.5494478349332747e103,1.5498317397470345e103,1.550216025322352e103,1.5506006923205959e103,1.5509857414047777e103,1.5513711732395561e103,1.5517569884912438e103,1.5521431878278104e103,1.5525297719188905e103,1.5529167414357864e103,1.5533040970514759e103,1.5536918394406167e103,1.5540799692795513e103,1.5544684872463133e103,1.5548573940206328e103,1.5552466902839419e103,1.5556363767193797e103,1.5560264540117982e103,1.5564169228477683e103,1.5568077839155855e103,1.5571990379052742e103,1.5575906855085945e103,1.5579827274190483e103,1.5583751643318835e103,1.5587679969441008e103,1.5591612259544598e103,1.5595548520634834e103,1.559948875973465e103,1.5603432983884731e103,1.5607381200143588e103,1.5611333415587587e103,1.5615289637311048e103,1.5619249872426267e103,1.5623214128063607e103,1.5627182411371525e103,1.5631154729516659e103,1.5635131089683878e103,1.5639111499076338e103,1.5643095964915551e103,1.5647084494441445e103,1.5651077094912408e103,1.5655073773605374e103,1.5659074537815878e103,1.56630793948581e103,1.5667088352064947e103,1.567110141678812e103,1.5675118596398146e103,1.5679139898284471e103,1.5683165329855516e103,1.5687194898538726e103,1.5691228611780656e103,1.5695266477047014e103,1.5699308501822742e103,1.5703354693612067e103,1.5707405059938576e103,1.5711459608345276e103,1.5715518346394656e103,1.5719581281668758e103,1.5723648421769246e103,1.5727719774317463e103,1.5731795346954502e103,1.5735875147341267e103,1.5739959183158554e103,1.5744047462107101e103,1.5748139991907672e103,1.575223678030111e103,1.5756337835048409e103,1.5760443163930788e103,1.5764552774749757e103,1.5768666675327185e103,1.5772784873505364e103,1.5776907377147088e103,1.5781034194135713e103,1.5785165332375239e103,1.578930079979037e103,1.5793440604326582e103,1.5797584753950211e103,1.5801733256648505e103,1.5805886120429704e103,1.5810043353323112e103,1.5814204963379168e103,1.5818370958669524e103,1.5822541347287103e103,1.5826716137346185e103,1.5830895336982483e103,1.5835078954353195e103,1.583926699763711e103,1.5843459475034657e103,1.5847656394767984e103,1.5851857765081044e103,1.5856063594239662e103,1.586027389053161e103,1.5864488662266682e103,1.5868707917776771e103,1.587293166541596e103,1.5877159913560565e103,1.588139267060925e103,1.5885629944983079e103,1.5889871745125609e103,1.5894118079502945e103,1.589836895660386e103,1.5902624384939821e103,1.5906884373045116e103,1.5911148929476904e103,1.5915418062815305e103,1.591969178166348e103,1.5923970094647712e103,1.5928253010417477e103,1.593254053764555e103,1.5936832685028048e103,1.594112946128455e103,1.594543087515816e103,1.594973693541559e103,1.5954047650847249e103,1.5958363030267317e103,1.5962683082513843e103,1.5967007816448811e103,1.5971337240958248e103,1.5975671364952278e103,1.5980010197365235e103,1.5984353747155738e103,1.5988702023306774e103,1.5993055034825777e103,1.5997412790744743e103,1.6001775300120285e103,1.6006142572033738e103,1.6010514615591241e103,1.601489143992383e103,1.601927305418752e103,1.6023659467563392e103,1.60280506892577e103,1.603244672850194e103,1.6036847594552945e103,1.6041253296692994e103,1.6045663844229866e103,1.6050079246496966e103,1.6054499512853406e103,1.6058924652684086e103,1.6063354675399798e103,1.6067789590437323e103,1.607222940725951e103,1.6076674135355378e103,1.6081123784240214e103,1.6085578363455654e103,1.6090037882569795e103,1.6094502351177286e103,1.6098971778899408e103,1.6103446175384185e103,1.610792555030649e103,1.611240991336812e103,1.6116899274297908e103,1.612139364285181e103,1.6125893028813018e103,1.613039744199205e103,1.6134906892226847e103,1.613942138938288e103,1.6143940943353243e103,1.6148465564058765e103,1.6152995261448088e103,1.6157530045497797e103,1.6162069926212507e103,1.6166614913624963e103,1.617116501779615e103,1.6175720248815393e103,1.6180280616800461e103,1.6184846131897672e103,1.6189416804281997e103,1.6193992644157172e103,1.6198573661755787e103,1.6203159867339414e103,1.620775127119869e103,1.621234788365345e103,1.6216949715052816e103,1.6221556775775307e103,1.6226169076228955e103,1.6230786626851414e103,1.6235409438110056e103,1.6240037520502109e103,1.6244670884554728e103,1.6249309540825144e103,1.6253953499900757e103,1.6258602772399246e103,1.6263257368968695e103,1.626791730028769e103,1.6272582577065446e103,1.6277253210041916e103,1.62819292099879e103,1.6286610587705172e103,1.629129735402659e103,1.6295989519816207e103,1.6300687095969402e103,1.6305390093412984e103,1.6310098523105312e103,1.6314812396036422e103,1.6319531723228139e103,1.632425651573419e103,1.6328986784640348e103,1.6333722541064525e103,1.6338463796156906e103,1.6343210561100076e103,1.6347962847109134e103,1.6352720665431816e103,1.6357484027348627e103,1.636225294417296e103,1.636702742725121e103,1.6371807487962919e103,1.637659313772089e103,1.6381384387971322e103,1.6386181250193918e103,1.6390983735902035e103,1.6395791856642803e103,1.6400605623997253e103,1.6405425049580447e103,1.641025014504161e103,1.6415080922064257e103,1.641991739236633e103,1.6424759567700324e103,1.6429607459853422e103,1.6434461080647633e103,1.6439320441939922e103,1.6444185555622333e103,1.6449056433622145e103,1.6453933087901998e103,1.6458815530460022e103,1.6463703773329996e103,1.6468597828581452e103,1.647349770831984e103,1.6478403424686667e103,1.648331498985962e103,1.648823241605272e103,1.6493155715516453e103,1.6498084900537921e103,1.6503019983440986e103,1.6507960976586393e103,1.6512907892371944e103,1.6517860743232614e103,1.6522819541640721e103,1.6527784300106052e103,1.6532755031176015e103,1.653773174743579e103,1.6542714461508482e103,1.654770318605526e103,1.6552697933775503e103,1.655769871740696e103,1.6562705549725906e103,1.6567718443547269e103,1.6572737411724809e103,1.657776246715126e103,1.6582793622758481e103,1.658783089151761e103,1.659287428643923e103,1.6597923820573516e103,1.660297950701039e103,1.6608041358879679e103,1.6613109389351292e103,1.6618183611635345e103,1.6623264038982347e103,1.6628350684683355e103,1.6633443562070131e103,1.6638542684515307e103,1.6643648065432552e103,1.6648759718276724e103,1.6653877656544042e103,1.6659001893772262e103,1.666413244354082e103,1.666926931947102e103,1.6674412535226191e103,1.667956210451186e103,1.6684718041075919e103,1.66898803587088e103,1.6695049071243632e103,1.6700224192556438e103,1.6705405736566286e103,1.6710593717235473e103,1.671578814856969e103,1.672098904461822e103,1.6726196419474084e103,1.6731410287274241e103,1.673663066219976e103,1.6741857558475996e103,1.6747090990372769e103,1.6752330972204555e103,1.6757577518330649e103,1.676283064315537e103,1.6768090361128233e103,1.6773356686744126e103,1.6778629634543509e103,1.6783909219112599e103,1.6789195455083546e103,1.6794488357134633e103,1.6799787939990463e103,1.6805094218422145e103,1.6810407207247483e103,1.6815726921331181e103,1.6821053375585021e103,1.6826386584968065e103,1.6831726564486852e103,1.6837073329195587e103,1.6842426894196348e103,1.6847787274639266e103,1.6853154485722742e103,1.6858528542693647e103,1.6863909460847513e103,1.6869297255528733e103,1.6874691942130782e103,1.6880093536096397e103,1.6885502052917804e103,1.6890917508136907e103,1.6896339917345518e103,1.6901769296185532e103,1.6907205660349172e103,1.691264902557917e103,1.6918099407668998e103,1.692355682246308e103,1.692902128585698e103,1.693449281379767e103,1.6939971422283676e103,1.6945457127365355e103,1.6950949945145093e103,1.6956449891777513e103,1.6961956983469705e103,1.696747123648145e103,1.697299266712544e103,1.6978521291767502e103,1.6984057126826827e103,1.6989600188776188e103,1.6995150494142178e103,1.7000708059505422e103,1.7006272901500837e103,1.701184503681783e103,1.7017424482200545e103,1.702301125444811e103,1.702860537041484e103,1.703420684701051e103,1.7039815701200558e103,1.7045431950006349e103,1.7051055610505398e103,1.7056686699831626e103,1.7062325235175593e103,1.7067971233784739e103,1.7073624712963636e103,1.7079285690074226e103,1.7084954182536089e103,1.7090630207826663e103,1.7096313783481509e103,1.7102004927094571e103,1.7107703656318405e103,1.7113409988864468e103,1.7119123942503334e103,1.7124845535064977e103,1.7130574784439024e103,1.7136311708575021e103,1.714205632548267e103,1.714780865323211e103,1.7153568709954198e103,1.7159336513840733e103,1.716511208314476e103,1.717089543618081e103,1.7176686591325194e103,1.7182485567016256e103,1.7188292381754654e103,1.7194107054103635e103,1.71999296026893e103,1.7205760046200904e103,1.7211598403391102e103,1.7217444693076259e103,1.722329893413671e103,1.7229161145517063e103,1.723503134622646e103,1.7240909555338887e103,1.7246795791993444e103,1.7252690075394642e103,1.7258592424812698e103,1.7264502859583812e103,1.7270421399110482e103,1.7276348062861786e103,1.728228287037368e103,1.72882258412493e103,1.7294176995159268e103,1.7300136351841979e103,1.730610393110392e103,1.7312079752819975e103,1.7318063836933712e103,1.732405620345773e103,1.7330056872473924e103,1.7336065864133834e103,1.7342083198658947e103,1.7348108896341004e103,1.7354142977542331e103,1.7360185462696148e103,1.7366236372306904e103,1.7372295726950583e103,1.7378363547275037e103,1.7384439854000318e103,1.7390524667919002e103,1.739661800989651e103,1.7402719900871458e103,1.7408830361855978e103,1.741494941393606e103,1.742107707827188e103,1.7427213376098156e103,1.7433358328724476e103,1.7439511957535656e103,1.7445674283992064e103,1.7451845329629982e103,1.745802511606196e103,1.7464213664977156e103,1.7470410998141692e103,1.7476617137399012e103,1.7482832104670242e103,1.748905592195455e103,1.7495288611329495e103,1.7501530194951397e103,1.7507780695055717e103,1.751404013395741e103,1.7520308534051289e103,1.752658591781241e103,1.7532872307796453e103,1.753916772664007e103,1.7545472197061296e103,1.7551785741859896e103,1.7558108383917788e103,1.7564440146199392e103,1.7570781051752032e103,1.7577131123706331e103,1.7583490385276593e103,1.7589858859761198e103,1.759623657054301e103,1.7602623541089754e103,1.7609019794954441e103,1.7615425355775754e103,1.762184024727846e103,1.7628264493273822e103,1.7634698117659995e103,1.764114114442246e103,1.7647593597634418e103,1.7654055501457225e103,1.7660526880140795e103,1.7667007758024043e103,1.7673498159535289e103,1.7679998109192704e103,1.7686507631604728e103,1.7693026751470497e103,1.7699555493580303e103,1.7706093882816008e103,1.771264194415149e103,1.7719199702653089e103,1.7725767183480056e103,1.7732344411884986e103,1.773893141321429e103,1.7745528212908638e103,1.775213483650341e103,1.7758751309629157e103,1.7765377658012072e103,1.7772013907474451e103,1.7778660083935146e103,1.7785316213410056e103,1.7791982322012582e103,1.7798658435954124e103,1.7805344581544531e103,1.7812040785192611e103,1.781874707340659e103,1.7825463472794617e103,1.7832190010065252e103,1.7838926712027945e103,1.7845673605593557e103,1.7852430717774836e103,1.785919807568692e103,1.786597570654787e103,1.7872763637679135e103,1.787956189650611e103,1.7886370510558607e103,1.7893189507471407e103,1.7900018914984755e103,1.7906858760944908e103,1.7913709073304639e103,1.7920569880123777e103,1.792744120956975e103,1.7934323089918112e103,1.7941215549553076e103,1.794811861696808e103,1.7955032320766305e103,1.796195668966125e103,1.796889175247728e103,1.797583753815017e103,1.7982794075727674e103,1.7989761394370093e103,1.7996739523350845e103,1.800372849205702e103,1.801072832998997e103,1.8017739066765892e103,1.8024760732116374e103,1.803179335588903e103,1.8038836968048063e103,1.8045891598674844e103,1.805295727796854e103,1.8060034036246693e103,1.8067121903945825e103,1.8074220911622063e103,1.808133108995173e103,1.8088452469731964e103,1.8095585081881352e103,1.8102728957440533e103,1.810988412757285e103,1.8117050623564947e103,1.812422847682744e103,1.8131417718895534e103,1.8138618381429663e103,1.8145830496216165e103,1.8153054095167902e103,1.816028921032493e103,1.8167535873855157e103,1.8174794118055015e103,1.8182063975350113e103,1.8189345478295917e103,1.819663865957843e103,1.820394355201487e103,1.8211260188554355e103,1.8218588602278596e103,1.8225928826402585e103,1.823328089427531e103,1.824064483938042e103,1.8248020695337e103,1.8255408495900205e103,1.826280827496204e103,1.8270220066552047e103,1.8277643904838043e103,1.8285079824126857e103,1.829252785886505e103,1.8299988043639673e103,1.8307460413179004e103,1.8314945002353293e103,1.8322441846175535e103,1.832995097980221e103,1.833747243853406e103,1.8345006257816864e103,1.83525524732422e103,1.836011112054824e103,1.836768223562052e103,1.8375265854492743e103,1.8382862013347576e103,1.839047074851744e103,1.8398092096485336e103,1.8405726093885633e103,1.8413372777504904e103,1.842103218428274e103,1.8428704351312588e103,1.843638931584257e103,1.8444087115276336e103,1.845179778717391e103,1.845952136925252e103,1.8467257899387488e103,1.847500741561306e103,1.84827699561233e103,1.8490545559272935e103,1.8498334263578274e103,1.8506136107718062e103,1.8513951130534374e103,1.8521779371033537e103,1.8529620868387e103,1.8537475661932284e103,1.854534379117385e103,1.8553225295784062e103,1.8561120215604104e103,1.8569028590644906e103,1.8576950461088094e103,1.858488586728693e103,1.8592834849767286e103,1.860079744922857e103,1.860877370654473e103,1.8616763662765212e103,1.8624767359115934e103,1.8632784837000284e103,1.864081613800011e103,1.8648861303876727e103,1.8656920376571917e103,1.8664993398208952e103,1.8673080411093603e103,1.868118145771519e103,1.8689296580747602e103,1.8697425823050348e103,1.8705569227669595e103,1.871372683783925e103,1.872189869698201e103,1.873008484871043e103,1.8738285336828028e103,1.8746500205330333e103,1.875472949840603e103,1.8762973260438013e103,1.8771231536004547e103,1.877950436988034e103,1.8787791807037706e103,1.879609389264768e103,1.880441067208117e103,1.88127421909101e103,1.8821088494908577e103,1.8829449630054063e103,1.8837825642528536e103,1.8846216578719684e103,1.8854622485222097e103,1.8863043408838475e103,1.887147939658081e103,1.887993049567165e103,1.888839675354529e103,1.889687821784901e103,1.890537493644435e103,1.8913886957408324e103,1.8922414329034716e103,1.8930957099835335e103,1.8939515318541288e103,1.8948089034104305e103,1.8956678295697998e103,1.89652831527192e103,1.8973903654789264e103,1.8982539851755405e103,1.8991191793692042e103,1.8999859530902125e103,1.9008543113918507e103,1.9017242593505316e103,1.902595802065933e103,1.9034689446611356e103,1.9043436922827633e103,1.905220050101125e103,1.906098023310355e103,1.9069776171285564e103,1.9078588367979468e103,1.908741687585e103,1.909626174780595e103,1.9105123037001625e103,1.911400079683832e103,1.9122895080965823e103,1.9131805943283928e103,1.9140733437943933e103,1.914967761935018e103,1.9158638542161593e103,1.9167616261293227e103,1.9176610831917824e103,1.91856223094674e103,1.9194650749634834e103,1.9203696208375435e103,1.9212758741908595e103,1.922183840671938e103,1.9230935259560178e103,1.9240049357452347e103,1.9249180757687856e103,1.925832951783099e103,1.9267495695720005e103,1.9276679349468847e103,1.9285880537468838e103,1.929509931839043e103,1.9304335751184917e103,1.9313589895086197e103,1.932286180961253e103,1.9332151554568335e103,1.934145919004594e103,1.935078477642743e103,1.936012837438644e103,1.9369490044889996e103,1.937886984920036e103,1.93882678488769e103,1.939768410577794e103,1.940711868206269e103,1.9416571640193116e103,1.942604304293588e103,1.9435532953364258e103,1.9445041434860114e103,1.9454568551115845e103,1.9464114366136374e103,1.9473678944241133e103,1.9483262350066093e103,1.9492864648565774e103,1.9502485905015303e103,1.9512126185012466e103,1.9521785554479794e103,1.953146407966664e103,1.9541161827151304e103,1.955087886384314e103,1.9560615256984744e103,1.9570371074154052e103,1.958014638326656e103,1.95899412525775e103,1.9599755750684086e103,1.9609589946527692e103,1.9619443909396137e103,1.9629317708925943e103,1.963921141510462e103,1.9649125098272964e103,1.965905882912739e103,1.966901267872226e103,1.967898671847225e103,1.968898102015473e103,1.9698995655912154e103,1.9709030698254493e103,1.9719086220061653e103,1.9729162294585948e103,1.973925899545457e103,1.974937639667209e103,1.9759514572622976e103,1.9769673598074134e103,1.9779853548177457e103,1.979005449847242e103,1.980027652488868e103,1.98105197037487e103,1.9820784111770374e103,1.983106982606973e103,1.9841376924163602e103,1.9851705483972343e103,1.986205558382254e103,1.987242730244983e103,1.9882820719001606e103,1.9893235913039878e103,1.9903672964544075e103,1.991413195391391e103,1.992461296197223e103,1.993511606996796e103,1.994564135957897e103,1.9956188912915084e103,1.9966758812521004e103,1.9977351141379344e103,1.9987965982913634e103,1.999860342099138e103,2.000926353992714e103,2.001994642448562e103,2.0030652159884812e103,2.0041380831799146e103,2.005213252636267e103,2.0062907330172276e103,2.007370533029091e103,2.0084526614250868e103,2.0095371270057076e103,2.0106239386190407e103,2.011713105161105e103,2.0128046355761873e103,2.013898538857185e103,2.014994824045948e103,2.016093500233628e103,2.0171945765610266e103,2.0182980622189503e103,2.0194039664485644e103,2.020512298541755e103,2.0216230678414887e103,2.0227362837421804e103,2.0238519556900604e103,2.0249700931835495e103,2.02609070577363e103,2.0272138030642286e103,2.0283393947125967e103,2.029467490429696e103,2.0305980999805883e103,2.0317312331848262e103,2.0328668999168507e103,2.03400511010639e103,2.035145873738864e103,2.0362892008557876e103,2.037435101555186e103,2.0385835859920036e103,2.0397346643785263e103,2.0408883469847997e103,2.042044644139057e103,2.0432035662281467e103,2.0443651236979665e103,2.0455293270539007e103,2.0466961868612597e103,2.0478657137457288e103,2.0490379183938123e103,2.0502128115532917e103,2.0513904040336795e103,2.052570706706685e103,2.053753730506675e103,2.05493948643115e103,2.0561279855412125e103,2.057319238962053e103,2.0585132578834283e103,2.05971005356015e103,2.0609096373125806e103,2.0621120205271264e103,2.063317214656742e103,2.0645252312214365e103,2.065736081808783e103,2.066949778074437e103,2.0681663317426556e103,2.0693857546068244e103,2.0706080585299877e103,2.0718332554453842e103,2.073061357356988e103,2.0742923763400568e103,2.0755263245416786e103,2.076763214181332e103,2.0780030575514478e103,2.0792458670179733e103,2.0804916550209486e103,2.0817404340750823e103,2.082992216770335e103,2.0842470157725117e103,2.085504843823853e103,2.0867657137436373e103,2.0880296384287897e103,2.0892966308544897e103,2.090566704074794e103,2.0918398712232593e103,2.093116145513572e103,2.0943955402401864e103,2.0956780687789665e103,2.096963744587837e103,2.0982525812074365e103,2.0995445922617817e103,2.1008397914589345e103,2.102138192591679e103,2.103439809538202e103,2.104744656262782e103,2.1060527468164856e103,2.107364095337868e103,2.108678716053686e103,2.1099966232796114e103,2.1113178314209555e103,2.1126423549734014e103,2.1139702085237413e103,2.1153014067506227e103,2.116635964425301e103,2.117973896412402e103,2.1193152176706903e103,2.1206599432538445e103,2.122008088311242e103,2.123359668088753e103,2.124714697929539e103,2.1260731932748627e103,2.1274351696649045e103,2.1288006427395884e103,2.130169628239415e103,2.131542142006303e103,2.1329181999844454e103,2.1342978182211615e103,2.135681012867773e103,2.137067800180478e103,2.1384581965212385e103,2.1398522183586787e103,2.141249882268987e103,2.1426512049368354e103,2.144056203156301e103,2.1454648938318022e103,2.146877293979042e103,2.1482934207259633e103,2.1497132913137118e103,2.1511369230976123e103,2.152564333548153e103,2.1539955402519797e103,2.1554305609129037e103,2.1568694133529178e103,2.1583121155132234e103,2.15975868545527e103,2.1612091413618046e103,2.1626635015379328e103,2.1641217844121917e103,2.1655840085376337e103,2.167050192592923e103,2.168520355383443e103,2.169994515842415e103,2.171472693032034e103,2.1729549061446082e103,2.1744411745037192e103,2.175931517565391e103,2.1774259549192734e103,2.1789245062898334e103,2.180427191537571e103,2.1819340306602337e103,2.1834450437940577e103,2.1849602512150152e103,2.186479673340077e103,2.1880033307284904e103,2.1895312440830716e103,2.191063434251511e103,2.1925999222276927e103,2.194140729153033e103,2.1956858763178295e103,2.1972353851626245e103,2.1987892772795914e103,2.2003475744139272e103,2.201910298465268e103,2.203477471489116e103,2.205049115698287e103,2.2066252534643705e103,2.208205907319208e103,2.2097910999563906e103,2.2113808542327684e103,2.2129751931699855e103,2.2145741399560218e103,2.2161777179467643e103,2.2177859506675878e103,2.219398861814959e103,2.2210164752580555e103,2.222638815040409e103,2.224265905381562e103,2.225897770678748e103,2.227534435508587e103,2.22917592462881e103,2.2308222629799917e103,2.2324734756873127e103,2.2341295880623407e103,2.235790625604829e103,2.237456614004543e103,2.2391275791431013e103,2.2408035470958463e103,2.2424845441337303e103,2.244170596725229e103,2.245861731538276e103,2.2475579754422214e103,2.2492593555098148e103,2.2509658990192093e103,2.2526776334559945e103,2.254394586515249e103,2.256116786103625e103,2.2578442603414505e103,2.2595770375648615e103,2.2613151463279633e103,2.263058615405011e103,2.2648074737926247e103,2.2665617507120252e103,2.268321475611304e103,2.2700866781677177e103,2.2718573882900096e103,2.2736336361207654e103,2.275415452038794e103,2.27720286666154e103,2.278995910847527e103,2.2807946156988307e103,2.2825990125635836e103,2.2844091330385117e103,2.2862250089715035e103,2.2880466724642117e103,2.289874155874688e103,2.2917074918200516e103,2.2935467131791932e103,2.2953918530955107e103,2.2972429449796834e103,2.299100022512481e103,2.30096311964761e103,2.302832270614592e103,2.304707509921689e103,2.306588872358857e103,2.3084763930007445e103,2.310370107209729e103,2.312270050638993e103,2.314176259235638e103,2.3160887692438463e103,2.318007617208077e103,2.3199328399763114e103,2.3218644747033353e103,2.3238025588540703e103,2.325747130206947e103,2.327698226857324e103,2.3296558872209522e103,2.331620150037489e103,2.3335910543740544e103,2.335568639628842e103,2.337552945534773e103,2.3395440121632038e103,2.3415418799276824e103,2.3435465895877582e103,2.345558182252843e103,2.347576699386122e103,2.3496021828085264e103,2.351634674702753e103,2.3536742176173445e103,2.3557208544708244e103,2.3577746285558912e103,2.3598355835436695e103,2.3619037634880217e103,2.3639792128299207e103,2.3660619764018823e103,2.368152099432463e103,2.37024962755082e103,2.3723546067913363e103,2.3744670835983107e103,2.376587104830715e103,2.3787147177670235e103,2.3808499701101047e103,2.382992909992188e103,2.385143585979903e103,2.3873020470793883e103,2.3894683427414757e103,2.3916425228669523e103,2.393824637811897e103,2.396014738393093e103,2.398212875893526e103,2.400419102067957e103,2.4026334691485823e103,2.4048560298507733e103,2.407086837378903e103,2.40932594543226e103,2.411573408211052e103,2.413829280422493e103,2.41609361728699e103,2.418366474544419e103,2.4206479084604914e103,2.422937975833227e103,2.4252367339995157e103,2.427544240841783e103,2.4298605547947575e103,2.432185734852343e103,2.434519840574592e103,2.436862932094791e103,2.439215070126654e103,2.4415763159716235e103,2.4439467315262935e103,2.446326379289938e103,2.448715322372165e103,2.4511136245006876e103,2.4535213500292137e103,2.4559385639454694e103,2.458365331879337e103,2.460801720111133e103,2.4632477955800124e103,2.4657036258925046e103,2.468169279331194e103,2.4706448248635308e103,2.4731303321507908e103,2.4756258715571745e103,2.4781315141590583e103,2.480647331754391e103,2.4831733968722484e103,2.4857097827825408e103,2.48825656350588e103,2.490813813823608e103,2.493381609287996e103,2.4959600262326044e103,2.4985491417828197e103,2.5011490338665677e103,2.503759781225201e103,2.506381463424572e103,2.5090141608662946e103,2.511657954799189e103,2.514312927330926e103,2.5169791614398645e103,2.5196567409870976e103,2.522345750728693e103,2.525046276328155e103,2.5277584043690906e103,2.5304822223681036e103,2.5332178187879022e103,2.535965283050642e103,2.5387247055514956e103,2.5414961776724616e103,2.5442797917964183e103,2.547075641321418e103,2.5498838206752392e103,2.552704425330194e103,2.5555375518181988e103,2.5583832977461134e103,2.561241761811354e103,2.5641130438177872e103,2.5669972446919103e103,2.56989446649932e103,2.5728048124614858e103,2.5757283869728233e103,2.578665295618081e103,2.5816156451900462e103,2.584579543707572e103,2.587557100433944e103,2.590548425895579e103,2.593553631901075e103,2.5965728315606167e103,2.599606139305739e103,2.6026536709094675e103,2.6057155435068345e103,2.6087918756157803e103,2.6118827871584573e103,2.614988399482933e103,2.6181088353853106e103,2.621244219132272e103,2.6243946764840578e103,2.6275603347178854e103,2.6307413226518233e103,2.6339377706691315e103,2.637149810743075e103,2.6403775764622203e103,2.6436212030562357e103,2.646880827422194e103,2.650156588151401e103,2.6534486255567547e103,2.6567570817006492e103,2.6600821004234416e103,2.663423827372486e103,2.6667824100317585e103,2.6701579977520748e103,2.673550741781933e103,2.6769607952989736e103,2.680388313442095e103,2.6838334533442195e103,2.6872963741657464e103,2.690777237128686e103,2.6942762055515164e103,2.697793444884759e103,2.701329122747306e103,2.7048834089635062e103,2.7084564756010424e103,2.712048497009607e103,2.7156596498604033e103,2.7192901131864917e103,2.722940068424002e103,2.726609699454237e103,2.7302991926466814e103,2.734008736902952e103,2.737738523701706e103,2.74148874714453e103,2.7452596040028407e103,2.749051293765828e103,2.75286401868945e103,2.75669798384653e103,2.7605533971779713e103,2.764430469545121e103,2.768329414783317e103,2.7722504497566517e103,2.776193794413973e103,2.780159671846178e103,2.7841483083448084e103,2.78815993346201e103,2.792194780071868e103,2.7962530844331794e103,2.800335086253683e103,2.804441028755803e103,2.808571158743936e103,2.812725726673337e103,2.8169049867206356e103,2.821109196856042e103,2.825338618917283e103,2.8295935186853183e103,2.833874165961892e103,2.838180834648968e103,2.8425138028301067e103,2.846873352853837e103,2.851259771419086e103,2.8556733496627237e103,2.8601143832492844e103,2.864583172462934e103,2.8690800223017446e103,2.8736052425743487e103,2.8781591479990486e103,2.8827420583054406e103,2.8873542983386534e103,2.8919961981662567e103,2.896668093187941e103,2.9013703242480427e103,2.9061032377510045e103,2.9108671857798676e103,2.915662526217887e103,2.9204896228733636e103,2.925348845607808e103,2.930240570467525e103,2.9351651798187385e103,2.9401230624863736e103,2.9451146138966013e103,2.950140236223281e103,2.955200338538417e103,2.9602953369667677e103,2.9654256548447452e103,2.9705917228837366e103,2.9757939793380072e103,2.981032870177335e103,2.9863088492645244e103,2.9916223785379854e103,2.996973928199531e103,3.0023639769075783e103,3.0077930119759452e103,3.013261529578426e103,3.0187700349593485e103,3.024319042650329e103,3.0299090766934358e103,3.0355406708709876e103,3.0412143689422242e103,3.046930724887098e103,3.0526903031574375e103,3.0584936789357483e103,3.0643414384019333e103,3.070234179008219e103,3.0761725097625927e103,3.0821570515210564e103,3.0881884372890366e103,3.094267312532284e103,3.100394335497626e103,3.1065701775439364e103,3.1127955234837275e103,3.1190710719357483e103,3.1253975356890355e103,3.1317756420788454e103,3.138206133374942e103,3.144689767182714e103,3.1512273168576413e103,3.157819571933628e103,3.164467338565766e103,3.1711714399881115e103,3.177932716987066e103,3.184752028391024e103,3.1916302515769323e103,3.1985682829944717e103,3.205567038708588e103,3.2126274549611444e103,3.219750488752499e103,3.226937118443851e103,3.2341883443812438e103,3.2415051895421544e103,3.2488887002056545e103,3.256339946647153e103,3.2638600238588187e103,3.2714500522968052e103,3.279111178656474e103,3.286844576676868e103,3.2946514479757644e103,3.3025330229166828e103,3.310490561509322e103,3.318525354344969e103,3.3266387235684886e103,3.33483202388863e103,3.3431066436284314e103,3.351464005817648e103,3.359905569329203e103,3.368432830061784e103,3.377047322170837e103,3.385750619350317e103,3.3945443361677033e103,3.403430129454934e103,3.4124096997580568e103,3.4214847928485613e103,3.4306572012995454e103,3.439928766130034e103,3.4493013785209773e103,3.4587769816066874e103,3.468357572345659e103,3.4780452034750045e103,3.4878419855529752e103,3.4977500890943144e103,3.507771746803511e103,3.5179092559113176e103,3.528164980620255e103,3.538541354665195e103,3.5490408839955182e103,3.559666149585743e103,3.5704198103820135e103,3.581304606392321e103,3.592323361928844e103,3.603478989011398e103,3.614774490941586e103,3.626212966057909e103,3.637797611682824e103,3.649531728273518e103,3.661418723788998e103,3.673462118287021e103,3.685665548765366e103,3.698032774263038e103,3.710567681238137e103,3.723274289240381e103,3.736156756897689e103,3.749219388237647e103,3.762466639366369e103,3.775903125528989e103,3.7895336285779674e103,3.803363104877485e103,3.817396693674504e103,3.83163972596957e103,3.846097733923194e103,3.8607764608366535e103,3.875681871749341e103,3.890820164698422e103,3.906197782690549e103,3.921821426439729e103,3.937698067930296e103,3.953834964869219e103,3.970239676097877e103,3.986920078039875e103,4.003884382268676e103,4.0211411542867544e103,4.038699333616788e103,4.056568255315181e103,4.0747576730291145e103,4.093277783730419e103,4.112139254273074e103,4.131353249936273e103,4.1509314651317994e103,4.170886156473454e103,4.1912301784274295e103,4.211977021786387e103,4.233140855236848e103,4.254736570319737e103,4.276779830118134e103,4.2992871220449185e103,4.32227581514692e103,4.345764222391883e103,4.369771668461355e103,4.394318563637169e103,4.4194264844431265e103,4.445118261788077e103,4.471418077453752e103,4.4983515698824775e103,4.5259459503487915e103,4.554230130748074e103,4.583234864408065e103,4.612992901530014e103,4.643539161100299e103,4.6749109213869974e103,4.707148031456711e103,4.7402931465243166e103,4.77439199039341e103,4.809493648772348e103,4.845650897876806e103,4.882920573476333e103,4.921363986435868e103,4.9610473918768115e103,5.002042520377745e103,5.0444271812049035e103,5.088285949473835e103,5.133710951481757e103,5.180802765324483e103,5.2296714574642695e103,5.2804377803297094e103,5.333234561547629e103,5.388208322348369e103,5.445521171473865e103,5.50535303212096e103,5.56790427383892e103,5.633398839919406e103,5.70208798511502e103,5.77425477051255e103,5.850219504904478e103,5.930346379087404e103,6.015051616998983e103,6.104813574016084e103,6.2001853607410674e103,6.301810779307623e103,6.410444657972241e103,6.526979104401197e103,6.652477841880419e103,6.788221765346461e103,6.9357703561233725e103,7.0970459707966445e103,7.274451884131538e103,7.471041446877227e103,7.690766977122093e103,7.938857366817753e103,8.222411993140942e103,8.551375908491885e103,8.94022708847716e103,9.411092057574154e103,1.0000000039168053e104],"x":[1.0e-309,9.99800279888044e-310,9.99600559776087e-310,9.9940083966413e-310,9.9920111955217e-310,9.99001399440214e-310,9.98801679328256e-310,9.986019592163e-310,9.9840223910434e-310,9.98202518992384e-310,9.98002798880426e-310,9.9780307876847e-310,9.9760335865651e-310,9.97403638544554e-310,9.97203918432596e-310,9.9700419832064e-310,9.9680447820868e-310,9.96604758096723e-310,9.96405037984766e-310,9.9620531787281e-310,9.9600559776085e-310,9.95805877648893e-310,9.95606157536935e-310,9.9540643742498e-310,9.9520671731302e-310,9.95006997201063e-310,9.94807277089105e-310,9.9460755697715e-310,9.9440783686519e-310,9.9420811675323e-310,9.94008396641275e-310,9.93808676529317e-310,9.9360895641736e-310,9.934092363054e-310,9.93209516193445e-310,9.93009796081487e-310,9.9281007596953e-310,9.9261035585757e-310,9.92410635745614e-310,9.92210915633657e-310,9.920111955217e-310,9.9181147540974e-310,9.91611755297784e-310,9.91412035185826e-310,9.9121231507387e-310,9.9101259496191e-310,9.90812874849954e-310,9.90613154737996e-310,9.9041343462604e-310,9.9021371451408e-310,9.90013994402124e-310,9.89814274290166e-310,9.8961455417821e-310,9.8941483406625e-310,9.89215113954293e-310,9.89015393842336e-310,9.8881567373038e-310,9.8861595361842e-310,9.88416233506463e-310,9.88216513394505e-310,9.8801679328255e-310,9.8781707317059e-310,9.87617353058633e-310,9.87417632946675e-310,9.8721791283472e-310,9.8701819272276e-310,9.868184726108e-310,9.86618752498845e-310,9.86419032386887e-310,9.8621931227493e-310,9.8601959216297e-310,9.85819872051015e-310,9.85620151939057e-310,9.854204318271e-310,9.8522071171514e-310,9.85020991603184e-310,9.84821271491227e-310,9.8462155137927e-310,9.8442183126731e-310,9.84222111155354e-310,9.84022391043396e-310,9.8382267093144e-310,9.8362295081948e-310,9.83423230707524e-310,9.83223510595566e-310,9.8302379048361e-310,9.8282407037165e-310,9.82624350259694e-310,9.82424630147736e-310,9.8222491003578e-310,9.8202518992382e-310,9.81825469811863e-310,9.81625749699906e-310,9.8142602958795e-310,9.8122630947599e-310,9.81026589364033e-310,9.80826869252075e-310,9.8062714914012e-310,9.8042742902816e-310,9.80227708916203e-310,9.80027988804245e-310,9.7982826869229e-310,9.7962854858033e-310,9.7942882846837e-310,9.79229108356415e-310,9.79029388244457e-310,9.788296681325e-310,9.7862994802054e-310,9.78430227908585e-310,9.78230507796627e-310,9.7803078768467e-310,9.7783106757271e-310,9.77631347460754e-310,9.77431627348797e-310,9.7723190723684e-310,9.7703218712488e-310,9.76832467012924e-310,9.76632746900966e-310,9.7643302678901e-310,9.7623330667705e-310,9.76033586565094e-310,9.75833866453136e-310,9.7563414634118e-310,9.7543442622922e-310,9.75234706117264e-310,9.75034986005306e-310,9.7483526589335e-310,9.7463554578139e-310,9.74435825669433e-310,9.74236105557476e-310,9.7403638544552e-310,9.7383666533356e-310,9.73636945221603e-310,9.73437225109645e-310,9.7323750499769e-310,9.7303778488573e-310,9.72838064773773e-310,9.72638344661815e-310,9.7243862454986e-310,9.722389044379e-310,9.7203918432594e-310,9.71839464213985e-310,9.71639744102027e-310,9.7144002399007e-310,9.7124030387811e-310,9.71040583766155e-310,9.70840863654197e-310,9.7064114354224e-310,9.7044142343028e-310,9.70241703318324e-310,9.70041983206367e-310,9.6984226309441e-310,9.6964254298245e-310,9.69442822870494e-310,9.69243102758537e-310,9.6904338264658e-310,9.6884366253462e-310,9.68643942422664e-310,9.68444222310706e-310,9.6824450219875e-310,9.6804478208679e-310,9.67845061974834e-310,9.67645341862876e-310,9.6744562175092e-310,9.6724590163896e-310,9.67046181527003e-310,9.66846461415046e-310,9.6664674130309e-310,9.6644702119113e-310,9.66247301079173e-310,9.66047580967215e-310,9.6584786085526e-310,9.656481407433e-310,9.65448420631343e-310,9.65248700519385e-310,9.6504898040743e-310,9.6484926029547e-310,9.6464954018351e-310,9.64449820071555e-310,9.64250099959597e-310,9.6405037984764e-310,9.6385065973568e-310,9.63650939623725e-310,9.63451219511767e-310,9.6325149939981e-310,9.6305177928785e-310,9.62852059175894e-310,9.62652339063937e-310,9.6245261895198e-310,9.6225289884002e-310,9.62053178728064e-310,9.61853458616107e-310,9.6165373850415e-310,9.6145401839219e-310,9.61254298280234e-310,9.61054578168276e-310,9.6085485805632e-310,9.6065513794436e-310,9.60455417832404e-310,9.60255697720446e-310,9.6005597760849e-310,9.5985625749653e-310,9.59656537384573e-310,9.59456817272616e-310,9.5925709716066e-310,9.590573770487e-310,9.58857656936743e-310,9.58657936824785e-310,9.5845821671283e-310,9.5825849660087e-310,9.58058776488913e-310,9.57859056376955e-310,9.57659336265e-310,9.5745961615304e-310,9.5725989604108e-310,9.57060175929125e-310,9.56860455817167e-310,9.5666073570521e-310,9.5646101559325e-310,9.56261295481295e-310,9.56061575369337e-310,9.5586185525738e-310,9.5566213514542e-310,9.55462415033464e-310,9.55262694921507e-310,9.5506297480955e-310,9.5486325469759e-310,9.54663534585634e-310,9.54463814473677e-310,9.5426409436172e-310,9.5406437424976e-310,9.53864654137804e-310,9.53664934025846e-310,9.5346521391389e-310,9.5326549380193e-310,9.53065773689974e-310,9.52866053578016e-310,9.5266633346606e-310,9.524666133541e-310,9.52266893242143e-310,9.52067173130186e-310,9.5186745301823e-310,9.5166773290627e-310,9.51468012794313e-310,9.51268292682355e-310,9.510685725704e-310,9.5086885245844e-310,9.50669132346483e-310,9.50469412234525e-310,9.5026969212257e-310,9.5006997201061e-310,9.4987025189865e-310,9.49670531786695e-310,9.49470811674737e-310,9.4927109156278e-310,9.4907137145082e-310,9.48871651338865e-310,9.48671931226907e-310,9.4847221111495e-310,9.4827249100299e-310,9.48072770891034e-310,9.47873050779077e-310,9.4767333066712e-310,9.4747361055516e-310,9.47273890443204e-310,9.47074170331247e-310,9.4687445021929e-310,9.4667473010733e-310,9.46475009995374e-310,9.46275289883416e-310,9.4607556977146e-310,9.458758496595e-310,9.45676129547544e-310,9.45476409435586e-310,9.4527668932363e-310,9.4507696921167e-310,9.44877249099713e-310,9.44677528987756e-310,9.444778088758e-310,9.4427808876384e-310,9.44078368651883e-310,9.43878648539925e-310,9.4367892842797e-310,9.4347920831601e-310,9.43279488204053e-310,9.43079768092095e-310,9.4288004798014e-310,9.4268032786818e-310,9.4248060775622e-310,9.42280887644265e-310,9.42081167532307e-310,9.4188144742035e-310,9.4168172730839e-310,9.41482007196435e-310,9.41282287084477e-310,9.4108256697252e-310,9.4088284686056e-310,9.40683126748604e-310,9.40483406636647e-310,9.4028368652469e-310,9.4008396641273e-310,9.39884246300774e-310,9.39684526188817e-310,9.3948480607686e-310,9.392850859649e-310,9.39085365852944e-310,9.38885645740986e-310,9.3868592562903e-310,9.3848620551707e-310,9.38286485405114e-310,9.38086765293156e-310,9.378870451812e-310,9.3768732506924e-310,9.37487604957283e-310,9.37287884845326e-310,9.3708816473337e-310,9.3688844462141e-310,9.36688724509453e-310,9.36489004397495e-310,9.3628928428554e-310,9.3608956417358e-310,9.35889844061623e-310,9.35690123949665e-310,9.3549040383771e-310,9.3529068372575e-310,9.3509096361379e-310,9.34891243501835e-310,9.34691523389877e-310,9.3449180327792e-310,9.3429208316596e-310,9.34092363054005e-310,9.33892642942047e-310,9.3369292283009e-310,9.3349320271813e-310,9.33293482606174e-310,9.33093762494217e-310,9.3289404238226e-310,9.326943222703e-310,9.32494602158344e-310,9.32294882046387e-310,9.3209516193443e-310,9.3189544182247e-310,9.31695721710514e-310,9.31496001598556e-310,9.312962814866e-310,9.3109656137464e-310,9.30896841262684e-310,9.30697121150726e-310,9.3049740103877e-310,9.3029768092681e-310,9.30097960814853e-310,9.29898240702896e-310,9.2969852059094e-310,9.2949880047898e-310,9.29299080367023e-310,9.29099360255065e-310,9.2889964014311e-310,9.2869992003115e-310,9.28500199919193e-310,9.28300479807235e-310,9.2810075969528e-310,9.2790103958332e-310,9.27701319471362e-310,9.27501599359405e-310,9.27301879247447e-310,9.2710215913549e-310,9.2690243902353e-310,9.26702718911575e-310,9.26502998799617e-310,9.2630327868766e-310,9.261035585757e-310,9.25903838463744e-310,9.25704118351787e-310,9.2550439823983e-310,9.2530467812787e-310,9.25104958015914e-310,9.24905237903957e-310,9.24705517792e-310,9.2450579768004e-310,9.24306077568084e-310,9.24106357456126e-310,9.2390663734417e-310,9.2370691723221e-310,9.23507197120254e-310,9.23307477008296e-310,9.2310775689634e-310,9.2290803678438e-310,9.22708316672423e-310,9.22508596560466e-310,9.2230887644851e-310,9.2210915633655e-310,9.21909436224593e-310,9.21709716112635e-310,9.2150999600068e-310,9.2131027588872e-310,9.21110555776763e-310,9.20910835664805e-310,9.2071111555285e-310,9.2051139544089e-310,9.20311675328932e-310,9.20111955216975e-310,9.19912235105017e-310,9.1971251499306e-310,9.195127948811e-310,9.19313074769145e-310,9.19113354657187e-310,9.1891363454523e-310,9.1871391443327e-310,9.18514194321314e-310,9.18314474209357e-310,9.181147540974e-310,9.1791503398544e-310,9.17715313873484e-310,9.17515593761527e-310,9.1731587364957e-310,9.1711615353761e-310,9.16916433425654e-310,9.16716713313696e-310,9.1651699320174e-310,9.1631727308978e-310,9.16117552977824e-310,9.15917832865866e-310,9.1571811275391e-310,9.1551839264195e-310,9.15318672529993e-310,9.15118952418036e-310,9.1491923230608e-310,9.1471951219412e-310,9.14519792082163e-310,9.14320071970205e-310,9.1412035185825e-310,9.1392063174629e-310,9.13720911634333e-310,9.13521191522375e-310,9.1332147141042e-310,9.1312175129846e-310,9.12922031186502e-310,9.12722311074545e-310,9.12522590962587e-310,9.1232287085063e-310,9.1212315073867e-310,9.11923430626715e-310,9.11723710514757e-310,9.115239904028e-310,9.1132427029084e-310,9.11124550178884e-310,9.10924830066927e-310,9.1072510995497e-310,9.1052538984301e-310,9.10325669731054e-310,9.10125949619097e-310,9.0992622950714e-310,9.0972650939518e-310,9.09526789283224e-310,9.09327069171266e-310,9.0912734905931e-310,9.0892762894735e-310,9.08727908835394e-310,9.08528188723436e-310,9.0832846861148e-310,9.0812874849952e-310,9.07929028387563e-310,9.07729308275606e-310,9.0752958816365e-310,9.0732986805169e-310,9.07130147939733e-310,9.06930427827775e-310,9.0673070771582e-310,9.0653098760386e-310,9.06331267491903e-310,9.06131547379945e-310,9.0593182726799e-310,9.0573210715603e-310,9.05532387044072e-310,9.05332666932115e-310,9.05132946820157e-310,9.049332267082e-310,9.0473350659624e-310,9.04533786484285e-310,9.04334066372327e-310,9.0413434626037e-310,9.0393462614841e-310,9.03734906036454e-310,9.03535185924497e-310,9.0333546581254e-310,9.0313574570058e-310,9.02936025588624e-310,9.02736305476667e-310,9.0253658536471e-310,9.0233686525275e-310,9.02137145140794e-310,9.01937425028836e-310,9.0173770491688e-310,9.0153798480492e-310,9.01338264692964e-310,9.01138544581006e-310,9.0093882446905e-310,9.0073910435709e-310,9.00539384245133e-310,9.00339664133176e-310,9.0013994402122e-310,8.9994022390926e-310,8.99740503797303e-310,8.99540783685345e-310,8.9934106357339e-310,8.9914134346143e-310,8.98941623349473e-310,8.98741903237515e-310,8.9854218312556e-310,8.983424630136e-310,8.98142742901642e-310,8.97943022789685e-310,8.97743302677727e-310,8.9754358256577e-310,8.9734386245381e-310,8.97144142341855e-310,8.96944422229897e-310,8.9674470211794e-310,8.9654498200598e-310,8.96345261894024e-310,8.96145541782067e-310,8.9594582167011e-310,8.9574610155815e-310,8.95546381446194e-310,8.95346661334237e-310,8.9514694122228e-310,8.9494722111032e-310,8.94747500998364e-310,8.94547780886406e-310,8.9434806077445e-310,8.9414834066249e-310,8.93948620550534e-310,8.93748900438576e-310,8.9354918032662e-310,8.9334946021466e-310,8.93149740102703e-310,8.92950019990746e-310,8.9275029987879e-310,8.9255057976683e-310,8.92350859654873e-310,8.92151139542915e-310,8.9195141943096e-310,8.91751699319e-310,8.91551979207043e-310,8.91352259095085e-310,8.9115253898313e-310,8.9095281887117e-310,8.90753098759212e-310,8.90553378647255e-310,8.90353658535297e-310,8.9015393842334e-310,8.8995421831138e-310,8.89754498199425e-310,8.89554778087467e-310,8.8935505797551e-310,8.8915533786355e-310,8.88955617751594e-310,8.88755897639637e-310,8.8855617752768e-310,8.8835645741572e-310,8.88156737303764e-310,8.87957017191807e-310,8.8775729707985e-310,8.8755757696789e-310,8.87357856855934e-310,8.87158136743976e-310,8.8695841663202e-310,8.8675869652006e-310,8.86558976408104e-310,8.86359256296146e-310,8.8615953618419e-310,8.8595981607223e-310,8.85760095960273e-310,8.85560375848316e-310,8.8536065573636e-310,8.851609356244e-310,8.84961215512443e-310,8.84761495400485e-310,8.8456177528853e-310,8.8436205517657e-310,8.84162335064613e-310,8.83962614952655e-310,8.837628948407e-310,8.8356317472874e-310,8.83363454616783e-310,8.83163734504825e-310,8.82964014392867e-310,8.8276429428091e-310,8.8256457416895e-310,8.82364854056995e-310,8.82165133945037e-310,8.8196541383308e-310,8.8176569372112e-310,8.81565973609164e-310,8.81366253497207e-310,8.8116653338525e-310,8.8096681327329e-310,8.80767093161334e-310,8.80567373049377e-310,8.8036765293742e-310,8.8016793282546e-310,8.79968212713504e-310,8.79768492601546e-310,8.7956877248959e-310,8.7936905237763e-310,8.79169332265674e-310,8.78969612153716e-310,8.7876989204176e-310,8.785701719298e-310,8.78370451817843e-310,8.78170731705886e-310,8.7797101159393e-310,8.7777129148197e-310,8.77571571370013e-310,8.77371851258055e-310,8.771721311461e-310,8.7697241103414e-310,8.76772690922183e-310,8.76572970810225e-310,8.7637325069827e-310,8.7617353058631e-310,8.75973810474353e-310,8.75774090362395e-310,8.75574370250437e-310,8.7537465013848e-310,8.7517493002652e-310,8.74975209914565e-310,8.74775489802607e-310,8.7457576969065e-310,8.7437604957869e-310,8.74176329466734e-310,8.73976609354777e-310,8.7377688924282e-310,8.7357716913086e-310,8.73377449018904e-310,8.73177728906947e-310,8.7297800879499e-310,8.7277828868303e-310,8.72578568571074e-310,8.72378848459116e-310,8.7217912834716e-310,8.719794082352e-310,8.71779688123244e-310,8.71579968011286e-310,8.7138024789933e-310,8.7118052778737e-310,8.70980807675413e-310,8.70781087563456e-310,8.705813674515e-310,8.7038164733954e-310,8.70181927227583e-310,8.69982207115625e-310,8.6978248700367e-310,8.6958276689171e-310,8.69383046779753e-310,8.69183326667795e-310,8.6898360655584e-310,8.6878388644388e-310,8.68584166331923e-310,8.68384446219965e-310,8.68184726108007e-310,8.6798500599605e-310,8.6778528588409e-310,8.67585565772135e-310,8.67385845660177e-310,8.6718612554822e-310,8.6698640543626e-310,8.66786685324304e-310,8.66586965212347e-310,8.6638724510039e-310,8.6618752498843e-310,8.65987804876474e-310,8.65788084764517e-310,8.6558836465256e-310,8.653886445406e-310,8.65188924428644e-310,8.64989204316686e-310,8.6478948420473e-310,8.6458976409277e-310,8.64390043980814e-310,8.64190323868856e-310,8.639906037569e-310,8.6379088364494e-310,8.63591163532983e-310,8.63391443421026e-310,8.6319172330907e-310,8.6299200319711e-310,8.62792283085153e-310,8.62592562973195e-310,8.6239284286124e-310,8.6219312274928e-310,8.61993402637323e-310,8.61793682525365e-310,8.6159396241341e-310,8.6139424230145e-310,8.61194522189493e-310,8.60994802077535e-310,8.60795081965577e-310,8.6059536185362e-310,8.6039564174166e-310,8.60195921629705e-310,8.59996201517747e-310,8.5979648140579e-310,8.5959676129383e-310,8.59397041181874e-310,8.59197321069917e-310,8.5899760095796e-310,8.58797880846e-310,8.58598160734044e-310,8.58398440622087e-310,8.5819872051013e-310,8.5799900039817e-310,8.57799280286214e-310,8.57599560174256e-310,8.573998400623e-310,8.5720011995034e-310,8.57000399838384e-310,8.56800679726426e-310,8.5660095961447e-310,8.5640123950251e-310,8.56201519390553e-310,8.56001799278596e-310,8.5580207916664e-310,8.5560235905468e-310,8.55402638942723e-310,8.55202918830765e-310,8.5500319871881e-310,8.5480347860685e-310,8.54603758494893e-310,8.54404038382935e-310,8.5420431827098e-310,8.5400459815902e-310,8.53804878047063e-310,8.53605157935105e-310,8.53405437823147e-310,8.5320571771119e-310,8.5300599759923e-310,8.52806277487275e-310,8.52606557375317e-310,8.5240683726336e-310,8.522071171514e-310,8.52007397039444e-310,8.51807676927487e-310,8.5160795681553e-310,8.5140823670357e-310,8.51208516591614e-310,8.51008796479657e-310,8.508090763677e-310,8.5060935625574e-310,8.50409636143784e-310,8.50209916031826e-310,8.5001019591987e-310,8.4981047580791e-310,8.49610755695954e-310,8.49411035583996e-310,8.4921131547204e-310,8.4901159536008e-310,8.48811875248123e-310,8.48612155136166e-310,8.4841243502421e-310,8.4821271491225e-310,8.48012994800293e-310,8.47813274688336e-310,8.4761355457638e-310,8.4741383446442e-310,8.47214114352463e-310,8.47014394240505e-310,8.4681467412855e-310,8.4661495401659e-310,8.46415233904633e-310,8.46215513792675e-310,8.46015793680717e-310,8.4581607356876e-310,8.456163534568e-310,8.45416633344845e-310,8.45216913232887e-310,8.4501719312093e-310,8.4481747300897e-310,8.44617752897014e-310,8.44418032785057e-310,8.442183126731e-310,8.4401859256114e-310,8.43818872449184e-310,8.43619152337227e-310,8.4341943222527e-310,8.4321971211331e-310,8.43019992001354e-310,8.42820271889396e-310,8.4262055177744e-310,8.4242083166548e-310,8.42221111553524e-310,8.42021391441566e-310,8.4182167132961e-310,8.4162195121765e-310,8.41422231105693e-310,8.41222510993736e-310,8.4102279088178e-310,8.4082307076982e-310,8.40623350657863e-310,8.40423630545906e-310,8.4022391043395e-310,8.4002419032199e-310,8.39824470210033e-310,8.39624750098075e-310,8.3942502998612e-310,8.3922530987416e-310,8.39025589762203e-310,8.38825869650245e-310,8.38626149538287e-310,8.3842642942633e-310,8.3822670931437e-310,8.38026989202415e-310,8.37827269090457e-310,8.376275489785e-310,8.3742782886654e-310,8.37228108754584e-310,8.37028388642627e-310,8.3682866853067e-310,8.3662894841871e-310,8.36429228306754e-310,8.36229508194797e-310,8.3602978808284e-310,8.3583006797088e-310,8.35630347858924e-310,8.35430627746966e-310,8.3523090763501e-310,8.3503118752305e-310,8.34831467411094e-310,8.34631747299136e-310,8.3443202718718e-310,8.3423230707522e-310,8.34032586963263e-310,8.33832866851306e-310,8.3363314673935e-310,8.3343342662739e-310,8.33233706515433e-310,8.33033986403476e-310,8.3283426629152e-310,8.3263454617956e-310,8.32434826067603e-310,8.32235105955645e-310,8.3203538584369e-310,8.3183566573173e-310,8.31635945619773e-310,8.31436225507815e-310,8.31236505395857e-310,8.310367852839e-310,8.3083706517194e-310,8.30637345059985e-310,8.30437624948027e-310,8.3023790483607e-310,8.3003818472411e-310,8.29838464612154e-310,8.29638744500197e-310,8.2943902438824e-310,8.2923930427628e-310,8.29039584164324e-310,8.28839864052367e-310,8.2864014394041e-310,8.2844042382845e-310,8.28240703716494e-310,8.28040983604536e-310,8.2784126349258e-310,8.2764154338062e-310,8.27441823268664e-310,8.27242103156706e-310,8.2704238304475e-310,8.2684266293279e-310,8.26642942820833e-310,8.26443222708876e-310,8.2624350259692e-310,8.2604378248496e-310,8.25844062373003e-310,8.25644342261046e-310,8.2544462214909e-310,8.2524490203713e-310,8.25045181925173e-310,8.24845461813215e-310,8.2464574170126e-310,8.244460215893e-310,8.24246301477343e-310,8.24046581365385e-310,8.23846861253427e-310,8.2364714114147e-310,8.2344742102951e-310,8.23247700917555e-310,8.23047980805597e-310,8.2284826069364e-310,8.2264854058168e-310,8.22448820469724e-310,8.22249100357767e-310,8.2204938024581e-310,8.2184966013385e-310,8.21649940021894e-310,8.21450219909937e-310,8.2125049979798e-310,8.2105077968602e-310,8.20851059574064e-310,8.20651339462106e-310,8.2045161935015e-310,8.2025189923819e-310,8.20052179126234e-310,8.19852459014276e-310,8.1965273890232e-310,8.1945301879036e-310,8.19253298678403e-310,8.19053578566446e-310,8.1885385845449e-310,8.1865413834253e-310,8.18454418230573e-310,8.18254698118616e-310,8.1805497800666e-310,8.178552578947e-310,8.17655537782743e-310,8.17455817670785e-310,8.1725609755883e-310,8.1705637744687e-310,8.16856657334913e-310,8.16656937222955e-310,8.16457217110997e-310,8.1625749699904e-310,8.1605777688708e-310,8.15858056775125e-310,8.15658336663167e-310,8.1545861655121e-310,8.1525889643925e-310,8.15059176327294e-310,8.14859456215337e-310,8.1465973610338e-310,8.1446001599142e-310,8.14260295879464e-310,8.14060575767507e-310,8.1386085565555e-310,8.1366113554359e-310,8.13461415431634e-310,8.13261695319676e-310,8.1306197520772e-310,8.1286225509576e-310,8.12662534983804e-310,8.12462814871846e-310,8.1226309475989e-310,8.1206337464793e-310,8.11863654535973e-310,8.11663934424016e-310,8.1146421431206e-310,8.112644942001e-310,8.11064774088143e-310,8.10865053976186e-310,8.1066533386423e-310,8.1046561375227e-310,8.10265893640313e-310,8.10066173528355e-310,8.098664534164e-310,8.0966673330444e-310,8.09467013192483e-310,8.09267293080525e-310,8.09067572968567e-310,8.0886785285661e-310,8.0866813274465e-310,8.08468412632695e-310,8.08268692520737e-310,8.0806897240878e-310,8.0786925229682e-310,8.07669532184864e-310,8.07469812072907e-310,8.0727009196095e-310,8.0707037184899e-310,8.06870651737034e-310,8.06670931625077e-310,8.0647121151312e-310,8.0627149140116e-310,8.06071771289204e-310,8.05872051177246e-310,8.0567233106529e-310,8.0547261095333e-310,8.05272890841374e-310,8.05073170729416e-310,8.0487345061746e-310,8.046737305055e-310,8.04474010393543e-310,8.04274290281586e-310,8.0407457016963e-310,8.0387485005767e-310,8.03675129945713e-310,8.03475409833756e-310,8.032756897218e-310,8.0307596960984e-310,8.02876249497883e-310,8.02676529385925e-310,8.0247680927397e-310,8.0227708916201e-310,8.02077369050053e-310,8.01877648938095e-310,8.01677928826137e-310,8.0147820871418e-310,8.0127848860222e-310,8.01078768490265e-310,8.00879048378307e-310,8.0067932826635e-310,8.0047960815439e-310,8.00279888042434e-310,8.00080167930477e-310,7.9988044781852e-310,7.9968072770656e-310,7.99481007594604e-310,7.99281287482647e-310,7.9908156737069e-310,7.9888184725873e-310,7.98682127146774e-310,7.98482407034816e-310,7.9828268692286e-310,7.980829668109e-310,7.97883246698944e-310,7.97683526586986e-310,7.9748380647503e-310,7.9728408636307e-310,7.97084366251113e-310,7.96884646139156e-310,7.966849260272e-310,7.9648520591524e-310,7.96285485803283e-310,7.96085765691326e-310,7.9588604557937e-310,7.9568632546741e-310,7.95486605355453e-310,7.95286885243495e-310,7.9508716513154e-310,7.9488744501958e-310,7.94687724907623e-310,7.94488004795665e-310,7.94288284683707e-310,7.9408856457175e-310,7.9388884445979e-310,7.93689124347835e-310,7.93489404235877e-310,7.9328968412392e-310,7.9308996401196e-310,7.92890243900004e-310,7.92690523788047e-310,7.9249080367609e-310,7.9229108356413e-310,7.92091363452174e-310,7.91891643340217e-310,7.9169192322826e-310,7.914922031163e-310,7.91292483004344e-310,7.91092762892386e-310,7.9089304278043e-310,7.9069332266847e-310,7.90493602556514e-310,7.90293882444556e-310,7.900941623326e-310,7.8989444222064e-310,7.89694722108683e-310,7.89495001996726e-310,7.8929528188477e-310,7.8909556177281e-310,7.88895841660853e-310,7.88696121548896e-310,7.8849640143694e-310,7.8829668132498e-310,7.88096961213023e-310,7.87897241101065e-310,7.8769752098911e-310,7.8749780087715e-310,7.87298080765193e-310,7.87098360653235e-310,7.86898640541277e-310,7.8669892042932e-310,7.8649920031736e-310,7.86299480205405e-310,7.86099760093447e-310,7.8590003998149e-310,7.8570031986953e-310,7.85500599757574e-310,7.85300879645617e-310,7.8510115953366e-310,7.849014394217e-310,7.84701719309744e-310,7.84501999197787e-310,7.8430227908583e-310,7.8410255897387e-310,7.83902838861914e-310,7.83703118749956e-310,7.83503398638e-310,7.8330367852604e-310,7.83103958414084e-310,7.82904238302126e-310,7.8270451819017e-310,7.8250479807821e-310,7.82305077966253e-310,7.82105357854296e-310,7.8190563774234e-310,7.8170591763038e-310,7.81506197518423e-310,7.81306477406466e-310,7.8110675729451e-310,7.8090703718255e-310,7.80707317070593e-310,7.80507596958635e-310,7.8030787684668e-310,7.8010815673472e-310,7.79908436622763e-310,7.79708716510805e-310,7.79508996398847e-310,7.7930927628689e-310,7.7910955617493e-310,7.78909836062975e-310,7.78710115951017e-310,7.7851039583906e-310,7.783106757271e-310,7.78110955615144e-310,7.77911235503187e-310,7.7771151539123e-310,7.7751179527927e-310,7.77312075167314e-310,7.77112355055357e-310,7.769126349434e-310,7.7671291483144e-310,7.76513194719484e-310,7.76313474607526e-310,7.7611375449557e-310,7.7591403438361e-310,7.75714314271654e-310,7.75514594159696e-310,7.7531487404774e-310,7.7511515393578e-310,7.74915433823823e-310,7.74715713711866e-310,7.7451599359991e-310,7.7431627348795e-310,7.74116553375993e-310,7.73916833264036e-310,7.7371711315208e-310,7.7351739304012e-310,7.73317672928163e-310,7.73117952816205e-310,7.7291823270425e-310,7.7271851259229e-310,7.72518792480333e-310,7.72319072368375e-310,7.72119352256417e-310,7.7191963214446e-310,7.717199120325e-310,7.71520191920545e-310,7.71320471808587e-310,7.7112075169663e-310,7.7092103158467e-310,7.70721311472714e-310,7.70521591360757e-310,7.703218712488e-310,7.7012215113684e-310,7.69922431024884e-310,7.69722710912927e-310,7.6952299080097e-310,7.6932327068901e-310,7.69123550577054e-310,7.68923830465096e-310,7.6872411035314e-310,7.6852439024118e-310,7.68324670129224e-310,7.68124950017266e-310,7.6792522990531e-310,7.6772550979335e-310,7.67525789681393e-310,7.67326069569436e-310,7.6712634945748e-310,7.6692662934552e-310,7.66726909233563e-310,7.66527189121606e-310,7.6632746900965e-310,7.6612774889769e-310,7.65928028785733e-310,7.65728308673775e-310,7.6552858856182e-310,7.6532886844986e-310,7.65129148337903e-310,7.64929428225945e-310,7.64729708113987e-310,7.6452998800203e-310,7.6433026789007e-310,7.64130547778115e-310,7.63930827666157e-310,7.637311075542e-310,7.6353138744224e-310,7.63331667330284e-310,7.63131947218327e-310,7.6293222710637e-310,7.6273250699441e-310,7.62532786882454e-310,7.62333066770497e-310,7.6213334665854e-310,7.6193362654658e-310,7.61733906434624e-310,7.61534186322666e-310,7.6133446621071e-310,7.6113474609875e-310,7.60935025986794e-310,7.60735305874836e-310,7.6053558576288e-310,7.6033586565092e-310,7.60136145538963e-310,7.59936425427006e-310,7.5973670531505e-310,7.5953698520309e-310,7.59337265091133e-310,7.59137544979176e-310,7.5893782486722e-310,7.5873810475526e-310,7.58538384643303e-310,7.58338664531345e-310,7.5813894441939e-310,7.5793922430743e-310,7.57739504195473e-310,7.57539784083515e-310,7.57340063971557e-310,7.571403438596e-310,7.5694062374764e-310,7.56740903635685e-310,7.56541183523727e-310,7.5634146341177e-310,7.5614174329981e-310,7.55942023187854e-310,7.55742303075897e-310,7.5554258296394e-310,7.5534286285198e-310,7.55143142740024e-310,7.54943422628067e-310,7.5474370251611e-310,7.5454398240415e-310,7.54344262292194e-310,7.54144542180236e-310,7.5394482206828e-310,7.5374510195632e-310,7.53545381844364e-310,7.53345661732406e-310,7.5314594162045e-310,7.5294622150849e-310,7.52746501396533e-310,7.52546781284576e-310,7.5234706117262e-310,7.5214734106066e-310,7.51947620948703e-310,7.51747900836746e-310,7.5154818072479e-310,7.5134846061283e-310,7.51148740500873e-310,7.50949020388915e-310,7.5074930027696e-310,7.50549580165e-310,7.50349860053043e-310,7.50150139941085e-310,7.49950419829127e-310,7.4975069971717e-310,7.4955097960521e-310,7.49351259493255e-310,7.49151539381297e-310,7.4895181926934e-310,7.4875209915738e-310,7.48552379045424e-310,7.48352658933467e-310,7.4815293882151e-310,7.4795321870955e-310,7.47753498597594e-310,7.47553778485637e-310,7.4735405837368e-310,7.4715433826172e-310,7.46954618149764e-310,7.46754898037806e-310,7.4655517792585e-310,7.4635545781389e-310,7.46155737701934e-310,7.45956017589976e-310,7.4575629747802e-310,7.4555657736606e-310,7.45356857254103e-310,7.45157137142146e-310,7.4495741703019e-310,7.4475769691823e-310,7.44557976806273e-310,7.44358256694316e-310,7.4415853658236e-310,7.439588164704e-310,7.43759096358443e-310,7.43559376246485e-310,7.4335965613453e-310,7.4315993602257e-310,7.42960215910613e-310,7.42760495798655e-310,7.42560775686697e-310,7.4236105557474e-310,7.4216133546278e-310,7.41961615350825e-310,7.41761895238867e-310,7.4156217512691e-310,7.4136245501495e-310,7.41162734902994e-310,7.40963014791037e-310,7.4076329467908e-310,7.4056357456712e-310,7.40363854455164e-310,7.40164134343207e-310,7.3996441423125e-310,7.3976469411929e-310,7.39564974007334e-310,7.39365253895376e-310,7.3916553378342e-310,7.3896581367146e-310,7.38766093559504e-310,7.38566373447546e-310,7.3836665333559e-310,7.3816693322363e-310,7.37967213111673e-310,7.37767492999716e-310,7.3756777288776e-310,7.373680527758e-310,7.37168332663843e-310,7.36968612551886e-310,7.3676889243993e-310,7.3656917232797e-310,7.36369452216013e-310,7.36169732104055e-310,7.359700119921e-310,7.3577029188014e-310,7.35570571768183e-310,7.35370851656225e-310,7.35171131544267e-310,7.3497141143231e-310,7.3477169132035e-310,7.34571971208395e-310,7.34372251096437e-310,7.3417253098448e-310,7.3397281087252e-310,7.33773090760564e-310,7.33573370648607e-310,7.3337365053665e-310,7.3317393042469e-310,7.32974210312734e-310,7.32774490200777e-310,7.3257477008882e-310,7.3237504997686e-310,7.32175329864904e-310,7.31975609752946e-310,7.3177588964099e-310,7.3157616952903e-310,7.31376449417074e-310,7.31176729305116e-310,7.3097700919316e-310,7.307772890812e-310,7.30577568969243e-310,7.30377848857286e-310,7.3017812874533e-310,7.2997840863337e-310,7.29778688521413e-310,7.29578968409456e-310,7.293792482975e-310,7.2917952818554e-310,7.28979808073583e-310,7.28780087961625e-310,7.2858036784967e-310,7.2838064773771e-310,7.28180927625753e-310,7.27981207513795e-310,7.27781487401837e-310,7.2758176728988e-310,7.2738204717792e-310,7.27182327065965e-310,7.26982606954007e-310,7.2678288684205e-310,7.2658316673009e-310,7.26383446618135e-310,7.26183726506177e-310,7.2598400639422e-310,7.2578428628226e-310,7.25584566170304e-310,7.25384846058347e-310,7.2518512594639e-310,7.2498540583443e-310,7.24785685722474e-310,7.24585965610516e-310,7.2438624549856e-310,7.241865253866e-310,7.23986805274644e-310,7.23787085162686e-310,7.2358736505073e-310,7.2338764493877e-310,7.23187924826813e-310,7.22988204714856e-310,7.227884846029e-310,7.2258876449094e-310,7.22389044378983e-310,7.22189324267026e-310,7.2198960415507e-310,7.2178988404311e-310,7.21590163931153e-310,7.21390443819195e-310,7.2119072370724e-310,7.2099100359528e-310,7.20791283483323e-310,7.20591563371365e-310,7.20391843259407e-310,7.2019212314745e-310,7.1999240303549e-310,7.19792682923535e-310,7.19592962811577e-310,7.1939324269962e-310,7.1919352258766e-310,7.18993802475705e-310,7.18794082363747e-310,7.1859436225179e-310,7.1839464213983e-310,7.18194922027874e-310,7.17995201915917e-310,7.1779548180396e-310,7.17595761692e-310,7.17396041580044e-310,7.17196321468086e-310,7.1699660135613e-310,7.1679688124417e-310,7.16597161132214e-310,7.16397441020256e-310,7.161977209083e-310,7.1599800079634e-310,7.15798280684383e-310,7.15598560572426e-310,7.1539884046047e-310,7.1519912034851e-310,7.14999400236553e-310,7.14799680124596e-310,7.1459996001264e-310,7.1440023990068e-310,7.14200519788723e-310,7.14000799676765e-310,7.1380107956481e-310,7.1360135945285e-310,7.13401639340893e-310,7.13201919228935e-310,7.13002199116977e-310,7.1280247900502e-310,7.1260275889306e-310,7.12403038781105e-310,7.12203318669147e-310,7.1200359855719e-310,7.1180387844523e-310,7.11604158333275e-310,7.11404438221317e-310,7.1120471810936e-310,7.110049979974e-310,7.10805277885444e-310,7.10605557773487e-310,7.1040583766153e-310,7.1020611754957e-310,7.10006397437614e-310,7.09806677325656e-310,7.096069572137e-310,7.0940723710174e-310,7.09207516989784e-310,7.09007796877826e-310,7.0880807676587e-310,7.0860835665391e-310,7.08408636541953e-310,7.08208916429996e-310,7.0800919631804e-310,7.0780947620608e-310,7.07609756094123e-310,7.07410035982166e-310,7.0721031587021e-310,7.0701059575825e-310,7.06810875646293e-310,7.06611155534335e-310,7.0641143542238e-310,7.0621171531042e-310,7.06011995198463e-310,7.05812275086505e-310,7.05612554974547e-310,7.0541283486259e-310,7.0521311475063e-310,7.05013394638675e-310,7.04813674526717e-310,7.0461395441476e-310,7.044142343028e-310,7.04214514190845e-310,7.04014794078887e-310,7.0381507396693e-310,7.0361535385497e-310,7.03415633743014e-310,7.03215913631057e-310,7.030161935191e-310,7.0281647340714e-310,7.02616753295184e-310,7.02417033183226e-310,7.0221731307127e-310,7.0201759295931e-310,7.01817872847354e-310,7.01618152735396e-310,7.0141843262344e-310,7.0121871251148e-310,7.01018992399523e-310,7.00819272287566e-310,7.0061955217561e-310,7.0041983206365e-310,7.00220111951693e-310,7.00020391839736e-310,6.9982067172778e-310,6.9962095161582e-310,6.99421231503863e-310,6.99221511391905e-310,6.9902179127995e-310,6.9882207116799e-310,6.98622351056033e-310,6.98422630944075e-310,6.98222910832117e-310,6.9802319072016e-310,6.978234706082e-310,6.97623750496245e-310,6.97424030384287e-310,6.9722431027233e-310,6.9702459016037e-310,6.96824870048415e-310,6.96625149936457e-310,6.964254298245e-310,6.9622570971254e-310,6.96025989600584e-310,6.95826269488627e-310,6.9562654937667e-310,6.9542682926471e-310,6.95227109152754e-310,6.95027389040796e-310,6.9482766892884e-310,6.9462794881688e-310,6.94428228704924e-310,6.94228508592966e-310,6.9402878848101e-310,6.9382906836905e-310,6.93629348257093e-310,6.93429628145136e-310,6.9322990803318e-310,6.9303018792122e-310,6.92830467809263e-310,6.92630747697306e-310,6.9243102758535e-310,6.9223130747339e-310,6.92031587361433e-310,6.91831867249475e-310,6.9163214713752e-310,6.9143242702556e-310,6.91232706913603e-310,6.91032986801645e-310,6.90833266689687e-310,6.9063354657773e-310,6.9043382646577e-310,6.90234106353815e-310,6.90034386241857e-310,6.898346661299e-310,6.8963494601794e-310,6.89435225905985e-310,6.89235505794027e-310,6.8903578568207e-310,6.8883606557011e-310,6.88636345458154e-310,6.88436625346197e-310,6.8823690523424e-310,6.8803718512228e-310,6.87837465010324e-310,6.87637744898366e-310,6.8743802478641e-310,6.8723830467445e-310,6.87038584562494e-310,6.86838864450536e-310,6.8663914433858e-310,6.8643942422662e-310,6.86239704114663e-310,6.86039984002706e-310,6.8584026389075e-310,6.8564054377879e-310,6.85440823666833e-310,6.85241103554876e-310,6.8504138344292e-310,6.8484166333096e-310,6.84641943219003e-310,6.84442223107045e-310,6.8424250299509e-310,6.8404278288313e-310,6.83843062771173e-310,6.83643342659215e-310,6.83443622547258e-310,6.832439024353e-310,6.8304418232334e-310,6.82844462211385e-310,6.82644742099427e-310,6.8244502198747e-310,6.8224530187551e-310,6.82045581763555e-310,6.81845861651597e-310,6.8164614153964e-310,6.8144642142768e-310,6.81246701315724e-310,6.81046981203767e-310,6.8084726109181e-310,6.8064754097985e-310,6.80447820867894e-310,6.80248100755936e-310,6.8004838064398e-310,6.7984866053202e-310,6.79648940420064e-310,6.79449220308106e-310,6.7924950019615e-310,6.7904978008419e-310,6.78850059972233e-310,6.78650339860276e-310,6.7845061974832e-310,6.7825089963636e-310,6.78051179524403e-310,6.77851459412446e-310,6.7765173930049e-310,6.7745201918853e-310,6.77252299076573e-310,6.77052578964615e-310,6.7685285885266e-310,6.766531387407e-310,6.76453418628743e-310,6.76253698516785e-310,6.76053978404828e-310,6.7585425829287e-310,6.7565453818091e-310,6.75454818068955e-310,6.75255097956997e-310,6.7505537784504e-310,6.7485565773308e-310,6.74655937621125e-310,6.74456217509167e-310,6.7425649739721e-310,6.7405677728525e-310,6.73857057173294e-310,6.73657337061337e-310,6.7345761694938e-310,6.7325789683742e-310,6.73058176725464e-310,6.72858456613506e-310,6.7265873650155e-310,6.7245901638959e-310,6.72259296277634e-310,6.72059576165676e-310,6.7185985605372e-310,6.7166013594176e-310,6.71460415829803e-310,6.71260695717846e-310,6.7106097560589e-310,6.7086125549393e-310,6.70661535381973e-310,6.70461815270016e-310,6.7026209515806e-310,6.700623750461e-310,6.69862654934143e-310,6.69662934822185e-310,6.6946321471023e-310,6.6926349459827e-310,6.69063774486313e-310,6.68864054374355e-310,6.68664334262398e-310,6.6846461415044e-310,6.6826489403848e-310,6.68065173926525e-310,6.67865453814567e-310,6.6766573370261e-310,6.6746601359065e-310,6.67266293478695e-310,6.67066573366737e-310,6.6686685325478e-310,6.6666713314282e-310,6.66467413030864e-310,6.66267692918907e-310,6.6606797280695e-310,6.6586825269499e-310,6.65668532583034e-310,6.65468812471076e-310,6.6526909235912e-310,6.6506937224716e-310,6.64869652135204e-310,6.64669932023246e-310,6.6447021191129e-310,6.6427049179933e-310,6.64070771687373e-310,6.63871051575416e-310,6.6367133146346e-310,6.634716113515e-310,6.63271891239543e-310,6.63072171127586e-310,6.6287245101563e-310,6.6267273090367e-310,6.62473010791713e-310,6.62273290679755e-310,6.620735705678e-310,6.6187385045584e-310,6.61674130343883e-310,6.61474410231925e-310,6.61274690119968e-310,6.6107497000801e-310,6.6087524989605e-310,6.60675529784095e-310,6.60475809672137e-310,6.6027608956018e-310,6.6007636944822e-310,6.59876649336265e-310,6.59676929224307e-310,6.5947720911235e-310,6.5927748900039e-310,6.59077768888434e-310,6.58878048776477e-310,6.5867832866452e-310,6.5847860855256e-310,6.58278888440604e-310,6.58079168328646e-310,6.5787944821669e-310,6.5767972810473e-310,6.57480007992774e-310,6.57280287880816e-310,6.5708056776886e-310,6.568808476569e-310,6.56681127544943e-310,6.56481407432986e-310,6.5628168732103e-310,6.5608196720907e-310,6.55882247097113e-310,6.55682526985156e-310,6.554828068732e-310,6.5528308676124e-310,6.55083366649283e-310,6.54883646537325e-310,6.5468392642537e-310,6.5448420631341e-310,6.54284486201453e-310,6.54084766089495e-310,6.53885045977538e-310,6.5368532586558e-310,6.5348560575362e-310,6.53285885641665e-310,6.53086165529707e-310,6.5288644541775e-310,6.5268672530579e-310,6.52487005193835e-310,6.52287285081877e-310,6.5208756496992e-310,6.5188784485796e-310,6.51688124746004e-310,6.51488404634047e-310,6.5128868452209e-310,6.5108896441013e-310,6.50889244298174e-310,6.50689524186216e-310,6.5048980407426e-310,6.502900839623e-310,6.50090363850344e-310,6.49890643738386e-310,6.4969092362643e-310,6.4949120351447e-310,6.49291483402513e-310,6.49091763290556e-310,6.488920431786e-310,6.4869232306664e-310,6.48492602954683e-310,6.48292882842726e-310,6.4809316273077e-310,6.4789344261881e-310,6.47693722506853e-310,6.47494002394895e-310,6.4729428228294e-310,6.4709456217098e-310,6.46894842059023e-310,6.46695121947065e-310,6.46495401835108e-310,6.4629568172315e-310,6.4609596161119e-310,6.45896241499235e-310,6.45696521387277e-310,6.4549680127532e-310,6.4529708116336e-310,6.45097361051405e-310,6.44897640939447e-310,6.4469792082749e-310,6.4449820071553e-310,6.44298480603574e-310,6.44098760491617e-310,6.4389904037966e-310,6.436993202677e-310,6.43499600155744e-310,6.43299880043786e-310,6.4310015993183e-310,6.4290043981987e-310,6.42700719707914e-310,6.42500999595956e-310,6.42301279484e-310,6.4210155937204e-310,6.41901839260083e-310,6.41702119148126e-310,6.4150239903617e-310,6.4130267892421e-310,6.41102958812253e-310,6.40903238700296e-310,6.4070351858834e-310,6.4050379847638e-310,6.40304078364423e-310,6.40104358252465e-310,6.3990463814051e-310,6.3970491802855e-310,6.39505197916593e-310,6.39305477804635e-310,6.3910575769268e-310,6.3890603758072e-310,6.3870631746876e-310,6.38506597356805e-310,6.38306877244847e-310,6.3810715713289e-310,6.3790743702093e-310,6.37707716908975e-310,6.37507996797017e-310,6.3730827668506e-310,6.371085565731e-310,6.36908836461144e-310,6.36709116349187e-310,6.3650939623723e-310,6.3630967612527e-310,6.36109956013314e-310,6.35910235901356e-310,6.357105157894e-310,6.3551079567744e-310,6.35311075565484e-310,6.35111355453526e-310,6.3491163534157e-310,6.3471191522961e-310,6.34512195117653e-310,6.34312475005696e-310,6.3411275489374e-310,6.3391303478178e-310,6.33713314669823e-310,6.33513594557866e-310,6.3331387444591e-310,6.3311415433395e-310,6.32914434221993e-310,6.32714714110035e-310,6.3251499399808e-310,6.3231527388612e-310,6.32115553774163e-310,6.31915833662205e-310,6.3171611355025e-310,6.3151639343829e-310,6.3131667332633e-310,6.31116953214375e-310,6.30917233102417e-310,6.3071751299046e-310,6.305177928785e-310,6.30318072766545e-310,6.30118352654587e-310,6.2991863254263e-310,6.2971891243067e-310,6.29519192318714e-310,6.29319472206757e-310,6.291197520948e-310,6.2892003198284e-310,6.28720311870884e-310,6.28520591758926e-310,6.2832087164697e-310,6.2812115153501e-310,6.27921431423054e-310,6.27721711311096e-310,6.2752199119914e-310,6.2732227108718e-310,6.27122550975223e-310,6.26922830863266e-310,6.2672311075131e-310,6.2652339063935e-310,6.26323670527393e-310,6.26123950415436e-310,6.2592423030348e-310,6.2572451019152e-310,6.25524790079563e-310,6.25325069967605e-310,6.2512534985565e-310,6.2492562974369e-310,6.24725909631733e-310,6.24526189519775e-310,6.2432646940782e-310,6.2412674929586e-310,6.239270291839e-310,6.23727309071945e-310,6.23527588959987e-310,6.2332786884803e-310,6.2312814873607e-310,6.22928428624115e-310,6.22728708512157e-310,6.225289884002e-310,6.2232926828824e-310,6.22129548176284e-310,6.21929828064327e-310,6.2173010795237e-310,6.2153038784041e-310,6.21330667728454e-310,6.21130947616496e-310,6.2093122750454e-310,6.2073150739258e-310,6.20531787280624e-310,6.20332067168666e-310,6.2013234705671e-310,6.1993262694475e-310,6.19732906832793e-310,6.19533186720836e-310,6.1933346660888e-310,6.1913374649692e-310,6.18934026384963e-310,6.18734306273006e-310,6.1853458616105e-310,6.1833486604909e-310,6.18135145937133e-310,6.17935425825175e-310,6.1773570571322e-310,6.1753598560126e-310,6.17336265489303e-310,6.17136545377345e-310,6.1693682526539e-310,6.1673710515343e-310,6.1653738504147e-310,6.16337664929515e-310,6.16137944817557e-310,6.159382247056e-310,6.1573850459364e-310,6.15538784481685e-310,6.15339064369727e-310,6.1513934425777e-310,6.1493962414581e-310,6.14739904033854e-310,6.14540183921897e-310,6.1434046380994e-310,6.1414074369798e-310,6.13941023586024e-310,6.13741303474066e-310,6.1354158336211e-310,6.1334186325015e-310,6.13142143138194e-310,6.12942423026236e-310,6.1274270291428e-310,6.1254298280232e-310,6.12343262690363e-310,6.12143542578406e-310,6.1194382246645e-310,6.1174410235449e-310,6.11544382242533e-310,6.11344662130576e-310,6.1114494201862e-310,6.1094522190666e-310,6.10745501794703e-310,6.10545781682745e-310,6.1034606157079e-310,6.1014634145883e-310,6.09946621346873e-310,6.09746901234915e-310,6.0954718112296e-310,6.09347461011e-310,6.0914774089904e-310,6.08948020787085e-310,6.08748300675127e-310,6.0854858056317e-310,6.0834886045121e-310,6.08149140339255e-310,6.07949420227297e-310,6.0774970011534e-310,6.0754998000338e-310,6.07350259891424e-310,6.07150539779467e-310,6.0695081966751e-310,6.0675109955555e-310,6.06551379443594e-310,6.06351659331636e-310,6.0615193921968e-310,6.0595221910772e-310,6.05752498995764e-310,6.05552778883806e-310,6.0535305877185e-310,6.0515333865989e-310,6.04953618547934e-310,6.04753898435976e-310,6.0455417832402e-310,6.0435445821206e-310,6.04154738100103e-310,6.03955017988146e-310,6.0375529787619e-310,6.0355557776423e-310,6.03355857652273e-310,6.03156137540315e-310,6.0295641742836e-310,6.027566973164e-310,6.02556977204443e-310,6.02357257092485e-310,6.0215753698053e-310,6.0195781686857e-310,6.0175809675661e-310,6.01558376644655e-310,6.01358656532697e-310,6.0115893642074e-310,6.0095921630878e-310,6.00759496196825e-310,6.00559776084867e-310,6.0036005597291e-310,6.0016033586095e-310,5.99960615748994e-310,5.99760895637037e-310,5.9956117552508e-310,5.9936145541312e-310,5.99161735301164e-310,5.98962015189206e-310,5.9876229507725e-310,5.9856257496529e-310,5.98362854853334e-310,5.98163134741376e-310,5.9796341462942e-310,5.9776369451746e-310,5.97563974405504e-310,5.97364254293546e-310,5.9716453418159e-310,5.9696481406963e-310,5.96765093957673e-310,5.96565373845716e-310,5.9636565373376e-310,5.961659336218e-310,5.95966213509843e-310,5.95766493397885e-310,5.9556677328593e-310,5.9536705317397e-310,5.95167333062013e-310,5.94967612950055e-310,5.947678928381e-310,5.9456817272614e-310,5.9436845261418e-310,5.94168732502225e-310,5.93969012390267e-310,5.9376929227831e-310,5.9356957216635e-310,5.93369852054395e-310,5.93170131942437e-310,5.9297041183048e-310,5.9277069171852e-310,5.92570971606564e-310,5.92371251494607e-310,5.9217153138265e-310,5.9197181127069e-310,5.91772091158734e-310,5.91572371046776e-310,5.9137265093482e-310,5.9117293082286e-310,5.90973210710904e-310,5.90773490598946e-310,5.9057377048699e-310,5.9037405037503e-310,5.90174330263074e-310,5.89974610151116e-310,5.8977489003916e-310,5.895751699272e-310,5.89375449815243e-310,5.89175729703286e-310,5.8897600959133e-310,5.8877628947937e-310,5.88576569367413e-310,5.88376849255455e-310,5.881771291435e-310,5.8797740903154e-310,5.87777688919583e-310,5.87577968807625e-310,5.8737824869567e-310,5.8717852858371e-310,5.8697880847175e-310,5.86779088359795e-310,5.86579368247837e-310,5.8637964813588e-310,5.8617992802392e-310,5.85980207911965e-310,5.85780487800007e-310,5.8558076768805e-310,5.8538104757609e-310,5.85181327464134e-310,5.84981607352177e-310,5.8478188724022e-310,5.8458216712826e-310,5.84382447016304e-310,5.84182726904346e-310,5.8398300679239e-310,5.8378328668043e-310,5.83583566568474e-310,5.83383846456516e-310,5.8318412634456e-310,5.829844062326e-310,5.82784686120644e-310,5.82584966008686e-310,5.8238524589673e-310,5.8218552578477e-310,5.81985805672813e-310,5.81786085560856e-310,5.815863654489e-310,5.8138664533694e-310,5.81186925224983e-310,5.80987205113025e-310,5.8078748500107e-310,5.8058776488911e-310,5.80388044777153e-310,5.80188324665195e-310,5.7998860455324e-310,5.7978888444128e-310,5.7958916432932e-310,5.79389444217365e-310,5.79189724105407e-310,5.7899000399345e-310,5.7879028388149e-310,5.78590563769535e-310,5.78390843657577e-310,5.7819112354562e-310,5.7799140343366e-310,5.77791683321704e-310,5.77591963209747e-310,5.7739224309779e-310,5.7719252298583e-310,5.76992802873874e-310,5.76793082761916e-310,5.7659336264996e-310,5.76393642538e-310,5.76193922426044e-310,5.75994202314086e-310,5.7579448220213e-310,5.7559476209017e-310,5.75395041978214e-310,5.75195321866256e-310,5.749956017543e-310,5.7479588164234e-310,5.74596161530383e-310,5.74396441418426e-310,5.7419672130647e-310,5.7399700119451e-310,5.73797281082553e-310,5.73597560970595e-310,5.7339784085864e-310,5.7319812074668e-310,5.72998400634723e-310,5.72798680522765e-310,5.7259896041081e-310,5.7239924029885e-310,5.7219952018689e-310,5.71999800074935e-310,5.71800079962977e-310,5.7160035985102e-310,5.7140063973906e-310,5.71200919627105e-310,5.71001199515147e-310,5.7080147940319e-310,5.7060175929123e-310,5.70402039179274e-310,5.70202319067317e-310,5.7000259895536e-310,5.698028788434e-310,5.69603158731444e-310,5.69403438619486e-310,5.6920371850753e-310,5.6900399839557e-310,5.68804278283614e-310,5.68604558171656e-310,5.684048380597e-310,5.6820511794774e-310,5.68005397835784e-310,5.67805677723826e-310,5.6760595761187e-310,5.6740623749991e-310,5.67206517387953e-310,5.67006797275996e-310,5.6680707716404e-310,5.6660735705208e-310,5.66407636940123e-310,5.66207916828165e-310,5.6600819671621e-310,5.6580847660425e-310,5.65608756492293e-310,5.65409036380335e-310,5.6520931626838e-310,5.6500959615642e-310,5.6480987604446e-310,5.64610155932505e-310,5.64410435820547e-310,5.6421071570859e-310,5.6401099559663e-310,5.63811275484675e-310,5.63611555372717e-310,5.6341183526076e-310,5.632121151488e-310,5.63012395036844e-310,5.62812674924887e-310,5.6261295481293e-310,5.6241323470097e-310,5.62213514589014e-310,5.62013794477057e-310,5.618140743651e-310,5.6161435425314e-310,5.61414634141184e-310,5.61214914029226e-310,5.6101519391727e-310,5.6081547380531e-310,5.60615753693354e-310,5.60416033581396e-310,5.6021631346944e-310,5.6001659335748e-310,5.59816873245523e-310,5.59617153133566e-310,5.5941743302161e-310,5.5921771290965e-310,5.59017992797693e-310,5.58818272685735e-310,5.5861855257378e-310,5.5841883246182e-310,5.58219112349863e-310,5.58019392237905e-310,5.5781967212595e-310,5.5761995201399e-310,5.5742023190203e-310,5.57220511790075e-310,5.57020791678117e-310,5.5682107156616e-310,5.566213514542e-310,5.56421631342245e-310,5.56221911230287e-310,5.5602219111833e-310,5.5582247100637e-310,5.55622750894414e-310,5.55423030782457e-310,5.552233106705e-310,5.5502359055854e-310,5.54823870446584e-310,5.54624150334627e-310,5.5442443022267e-310,5.5422471011071e-310,5.54024989998754e-310,5.53825269886796e-310,5.5362554977484e-310,5.5342582966288e-310,5.53226109550924e-310,5.53026389438966e-310,5.5282666932701e-310,5.5262694921505e-310,5.52427229103093e-310,5.52227508991136e-310,5.5202778887918e-310,5.5182806876722e-310,5.51628348655263e-310,5.51428628543305e-310,5.5122890843135e-310,5.5102918831939e-310,5.50829468207433e-310,5.50629748095475e-310,5.5043002798352e-310,5.5023030787156e-310,5.500305877596e-310,5.49830867647645e-310,5.49631147535687e-310,5.4943142742373e-310,5.4923170731177e-310,5.49031987199815e-310,5.48832267087857e-310,5.486325469759e-310,5.4843282686394e-310,5.48233106751984e-310,5.48033386640027e-310,5.4783366652807e-310,5.4763394641611e-310,5.47434226304154e-310,5.47234506192197e-310,5.4703478608024e-310,5.4683506596828e-310,5.46635345856324e-310,5.46435625744366e-310,5.4623590563241e-310,5.4603618552045e-310,5.45836465408494e-310,5.45636745296536e-310,5.4543702518458e-310,5.4523730507262e-310,5.45037584960663e-310,5.44837864848706e-310,5.4463814473675e-310,5.4443842462479e-310,5.44238704512833e-310,5.44038984400875e-310,5.4383926428892e-310,5.4363954417696e-310,5.43439824065003e-310,5.43240103953045e-310,5.4304038384109e-310,5.4284066372913e-310,5.4264094361717e-310,5.42441223505215e-310,5.42241503393257e-310,5.420417832813e-310,5.4184206316934e-310,5.41642343057385e-310,5.41442622945427e-310,5.4124290283347e-310,5.4104318272151e-310,5.40843462609554e-310,5.40643742497597e-310,5.4044402238564e-310,5.4024430227368e-310,5.40044582161724e-310,5.39844862049767e-310,5.3964514193781e-310,5.3944542182585e-310,5.39245701713894e-310,5.39045981601936e-310,5.3884626148998e-310,5.3864654137802e-310,5.38446821266064e-310,5.38247101154106e-310,5.3804738104215e-310,5.3784766093019e-310,5.37647940818233e-310,5.37448220706276e-310,5.3724850059432e-310,5.3704878048236e-310,5.36849060370403e-310,5.36649340258445e-310,5.3644962014649e-310,5.3624990003453e-310,5.36050179922573e-310,5.35850459810615e-310,5.3565073969866e-310,5.354510195867e-310,5.3525129947474e-310,5.35051579362785e-310,5.34851859250827e-310,5.3465213913887e-310,5.3445241902691e-310,5.34252698914955e-310,5.34052978802997e-310,5.3385325869104e-310,5.3365353857908e-310,5.33453818467124e-310,5.33254098355167e-310,5.3305437824321e-310,5.3285465813125e-310,5.32654938019294e-310,5.32455217907337e-310,5.3225549779538e-310,5.3205577768342e-310,5.31856057571464e-310,5.31656337459506e-310,5.3145661734755e-310,5.3125689723559e-310,5.31057177123634e-310,5.30857457011676e-310,5.3065773689972e-310,5.3045801678776e-310,5.30258296675803e-310,5.30058576563846e-310,5.2985885645189e-310,5.2965913633993e-310,5.29459416227973e-310,5.29259696116015e-310,5.2905997600406e-310,5.288602558921e-310,5.28660535780143e-310,5.28460815668185e-310,5.2826109555623e-310,5.2806137544427e-310,5.27861655332312e-310,5.27661935220355e-310,5.27462215108397e-310,5.2726249499644e-310,5.2706277488448e-310,5.26863054772525e-310,5.26663334660567e-310,5.2646361454861e-310,5.2626389443665e-310,5.26064174324694e-310,5.25864454212737e-310,5.2566473410078e-310,5.2546501398882e-310,5.25265293876864e-310,5.25065573764907e-310,5.2486585365295e-310,5.2466613354099e-310,5.24466413429034e-310,5.24266693317076e-310,5.2406697320512e-310,5.2386725309316e-310,5.23667532981204e-310,5.23467812869246e-310,5.2326809275729e-310,5.2306837264533e-310,5.22868652533373e-310,5.22668932421416e-310,5.2246921230946e-310,5.222694921975e-310,5.22069772085543e-310,5.21870051973585e-310,5.2167033186163e-310,5.2147061174967e-310,5.21270891637713e-310,5.21071171525755e-310,5.208714514138e-310,5.2067173130184e-310,5.20472011189882e-310,5.20272291077925e-310,5.20072570965967e-310,5.1987285085401e-310,5.1967313074205e-310,5.19473410630095e-310,5.19273690518137e-310,5.1907397040618e-310,5.1887425029422e-310,5.18674530182264e-310,5.18474810070307e-310,5.1827508995835e-310,5.1807536984639e-310,5.17875649734434e-310,5.17675929622477e-310,5.1747620951052e-310,5.1727648939856e-310,5.17076769286604e-310,5.16877049174646e-310,5.1667732906269e-310,5.1647760895073e-310,5.16277888838774e-310,5.16078168726816e-310,5.1587844861486e-310,5.156787285029e-310,5.15479008390943e-310,5.15279288278986e-310,5.1507956816703e-310,5.1487984805507e-310,5.14680127943113e-310,5.14480407831155e-310,5.142806877192e-310,5.1408096760724e-310,5.13881247495283e-310,5.13681527383325e-310,5.1348180727137e-310,5.1328208715941e-310,5.13082367047452e-310,5.12882646935495e-310,5.12682926823537e-310,5.1248320671158e-310,5.1228348659962e-310,5.12083766487665e-310,5.11884046375707e-310,5.1168432626375e-310,5.1148460615179e-310,5.11284886039834e-310,5.11085165927877e-310,5.1088544581592e-310,5.1068572570396e-310,5.10486005592004e-310,5.10286285480047e-310,5.1008656536809e-310,5.0988684525613e-310,5.09687125144174e-310,5.09487405032216e-310,5.0928768492026e-310,5.090879648083e-310,5.08888244696344e-310,5.08688524584386e-310,5.0848880447243e-310,5.0828908436047e-310,5.08089364248513e-310,5.07889644136556e-310,5.076899240246e-310,5.0749020391264e-310,5.07290483800683e-310,5.07090763688725e-310,5.0689104357677e-310,5.0669132346481e-310,5.06491603352853e-310,5.06291883240895e-310,5.0609216312894e-310,5.0589244301698e-310,5.05692722905022e-310,5.05493002793065e-310,5.05293282681107e-310,5.0509356256915e-310,5.0489384245719e-310,5.04694122345235e-310,5.04494402233277e-310,5.0429468212132e-310,5.0409496200936e-310,5.03895241897404e-310,5.03695521785447e-310,5.0349580167349e-310,5.0329608156153e-310,5.03096361449574e-310,5.02896641337617e-310,5.0269692122566e-310,5.024972011137e-310,5.02297481001744e-310,5.02097760889786e-310,5.0189804077783e-310,5.0169832066587e-310,5.01498600553914e-310,5.01298880441956e-310,5.0109916033e-310,5.0089944021804e-310,5.00699720106083e-310,5.00499999994126e-310,5.0030027988217e-310,5.0010055977021e-310,4.99900839658253e-310,4.99701119546295e-310,4.9950139943434e-310,4.9930167932238e-310,4.99101959210423e-310,4.98902239098465e-310,4.9870251898651e-310,4.9850279887455e-310,4.98303078762592e-310,4.98103358650635e-310,4.97903638538677e-310,4.9770391842672e-310,4.9750419831476e-310,4.97304478202805e-310,4.97104758090847e-310,4.9690503797889e-310,4.9670531786693e-310,4.96505597754974e-310,4.96305877643017e-310,4.9610615753106e-310,4.959064374191e-310,4.95706717307144e-310,4.95506997195187e-310,4.9530727708323e-310,4.9510755697127e-310,4.94907836859314e-310,4.94708116747356e-310,4.945083966354e-310,4.9430867652344e-310,4.94108956411484e-310,4.93909236299526e-310,4.9370951618757e-310,4.9350979607561e-310,4.93310075963653e-310,4.93110355851696e-310,4.9291063573974e-310,4.9271091562778e-310,4.92511195515823e-310,4.92311475403865e-310,4.9211175529191e-310,4.9191203517995e-310,4.91712315067993e-310,4.91512594956035e-310,4.9131287484408e-310,4.9111315473212e-310,4.90913434620162e-310,4.90713714508205e-310,4.90513994396247e-310,4.9031427428429e-310,4.9011455417233e-310,4.89914834060375e-310,4.89715113948417e-310,4.8951539383646e-310,4.893156737245e-310,4.89115953612544e-310,4.88916233500587e-310,4.8871651338863e-310,4.8851679327667e-310,4.88317073164714e-310,4.88117353052757e-310,4.879176329408e-310,4.8771791282884e-310,4.87518192716884e-310,4.87318472604926e-310,4.8711875249297e-310,4.8691903238101e-310,4.86719312269054e-310,4.86519592157096e-310,4.8631987204514e-310,4.8612015193318e-310,4.85920431821223e-310,4.85720711709266e-310,4.8552099159731e-310,4.8532127148535e-310,4.85121551373393e-310,4.84921831261435e-310,4.8472211114948e-310,4.8452239103752e-310,4.84322670925563e-310,4.84122950813605e-310,4.8392323070165e-310,4.8372351058969e-310,4.83523790477733e-310,4.83324070365775e-310,4.83124350253817e-310,4.8292463014186e-310,4.827249100299e-310,4.82525189917945e-310,4.82325469805987e-310,4.8212574969403e-310,4.8192602958207e-310,4.81726309470114e-310,4.81526589358157e-310,4.813268692462e-310,4.8112714913424e-310,4.80927429022284e-310,4.80727708910327e-310,4.8052798879837e-310,4.8032826868641e-310,4.80128548574454e-310,4.79928828462496e-310,4.7972910835054e-310,4.7952938823858e-310,4.79329668126624e-310,4.79129948014666e-310,4.7893022790271e-310,4.7873050779075e-310,4.78530787678793e-310,4.78331067566836e-310,4.7813134745488e-310,4.7793162734292e-310,4.77731907230963e-310,4.77532187119005e-310,4.7733246700705e-310,4.7713274689509e-310,4.76933026783133e-310,4.76733306671175e-310,4.7653358655922e-310,4.7633386644726e-310,4.76134146335303e-310,4.75934426223345e-310,4.75734706111387e-310,4.7553498599943e-310,4.7533526588747e-310,4.75135545775515e-310,4.74935825663557e-310,4.747361055516e-310,4.7453638543964e-310,4.74336665327684e-310,4.74136945215727e-310,4.7393722510377e-310,4.7373750499181e-310,4.73537784879854e-310,4.73338064767897e-310,4.7313834465594e-310,4.7293862454398e-310,4.72738904432024e-310,4.72539184320066e-310,4.7233946420811e-310,4.7213974409615e-310,4.71940023984194e-310,4.71740303872236e-310,4.7154058376028e-310,4.7134086364832e-310,4.71141143536363e-310,4.70941423424406e-310,4.7074170331245e-310,4.7054198320049e-310,4.70342263088533e-310,4.70142542976575e-310,4.6994282286462e-310,4.6974310275266e-310,4.69543382640703e-310,4.69343662528745e-310,4.6914394241679e-310,4.6894422230483e-310,4.68744502192873e-310,4.68544782080915e-310,4.68345061968957e-310,4.68145341857e-310,4.6794562174504e-310,4.67745901633085e-310,4.67546181521127e-310,4.6734646140917e-310,4.6714674129721e-310,4.66947021185254e-310,4.66747301073297e-310,4.6654758096134e-310,4.6634786084938e-310,4.66148140737424e-310,4.65948420625467e-310,4.6574870051351e-310,4.6554898040155e-310,4.65349260289594e-310,4.65149540177636e-310,4.6494982006568e-310,4.6475009995372e-310,4.64550379841764e-310,4.64350659729806e-310,4.6415093961785e-310,4.6395121950589e-310,4.63751499393933e-310,4.63551779281976e-310,4.6335205917002e-310,4.6315233905806e-310,4.62952618946103e-310,4.62752898834145e-310,4.6255317872219e-310,4.6235345861023e-310,4.62153738498273e-310,4.61954018386315e-310,4.6175429827436e-310,4.615545781624e-310,4.61354858050443e-310,4.61155137938485e-310,4.60955417826527e-310,4.6075569771457e-310,4.6055597760261e-310,4.60356257490655e-310,4.60156537378697e-310,4.5995681726674e-310,4.5975709715478e-310,4.59557377042824e-310,4.59357656930867e-310,4.5915793681891e-310,4.5895821670695e-310,4.58758496594994e-310,4.58558776483037e-310,4.5835905637108e-310,4.5815933625912e-310,4.57959616147164e-310,4.57759896035206e-310,4.5756017592325e-310,4.5736045581129e-310,4.57160735699334e-310,4.56961015587376e-310,4.5676129547542e-310,4.5656157536346e-310,4.56361855251503e-310,4.56162135139546e-310,4.5596241502759e-310,4.5576269491563e-310,4.55562974803673e-310,4.55363254691715e-310,4.5516353457976e-310,4.549638144678e-310,4.54764094355843e-310,4.54564374243885e-310,4.5436465413193e-310,4.5416493401997e-310,4.53965213908013e-310,4.53765493796055e-310,4.53565773684097e-310,4.5336605357214e-310,4.5316633346018e-310,4.52966613348225e-310,4.52766893236267e-310,4.5256717312431e-310,4.5236745301235e-310,4.52167732900394e-310,4.51968012788437e-310,4.5176829267648e-310,4.5156857256452e-310,4.51368852452564e-310,4.51169132340607e-310,4.5096941222865e-310,4.5076969211669e-310,4.50569972004734e-310,4.50370251892776e-310,4.5017053178082e-310,4.4997081166886e-310,4.49771091556904e-310,4.49571371444946e-310,4.4937165133299e-310,4.4917193122103e-310,4.48972211109073e-310,4.48772490997116e-310,4.4857277088516e-310,4.483730507732e-310,4.48173330661243e-310,4.47973610549285e-310,4.4777389043733e-310,4.4757417032537e-310,4.47374450213413e-310,4.47174730101455e-310,4.469750099895e-310,4.4677528987754e-310,4.46575569765583e-310,4.46375849653625e-310,4.46176129541667e-310,4.4597640942971e-310,4.4577668931775e-310,4.45576969205795e-310,4.45377249093837e-310,4.4517752898188e-310,4.4497780886992e-310,4.44778088757964e-310,4.44578368646007e-310,4.4437864853405e-310,4.4417892842209e-310,4.43979208310134e-310,4.43779488198177e-310,4.4357976808622e-310,4.4338004797426e-310,4.43180327862304e-310,4.42980607750346e-310,4.4278088763839e-310,4.4258116752643e-310,4.42381447414474e-310,4.42181727302516e-310,4.4198200719056e-310,4.417822870786e-310,4.41582566966643e-310,4.41382846854686e-310,4.4118312674273e-310,4.4098340663077e-310,4.40783686518813e-310,4.40583966406856e-310,4.403842462949e-310,4.4018452618294e-310,4.39984806070983e-310,4.39785085959025e-310,4.3958536584707e-310,4.3938564573511e-310,4.39185925623153e-310,4.38986205511195e-310,4.38786485399237e-310,4.3858676528728e-310,4.3838704517532e-310,4.38187325063365e-310,4.37987604951407e-310,4.3778788483945e-310,4.3758816472749e-310,4.37388444615534e-310,4.37188724503577e-310,4.3698900439162e-310,4.3678928427966e-310,4.36589564167704e-310,4.36389844055747e-310,4.3619012394379e-310,4.3599040383183e-310,4.35790683719874e-310,4.35590963607916e-310,4.3539124349596e-310,4.35191523384e-310,4.34991803272044e-310,4.34792083160086e-310,4.3459236304813e-310,4.3439264293617e-310,4.34192922824213e-310,4.33993202712256e-310,4.337934826003e-310,4.3359376248834e-310,4.33394042376383e-310,4.33194322264426e-310,4.3299460215247e-310,4.3279488204051e-310,4.32595161928553e-310,4.32395441816595e-310,4.3219572170464e-310,4.3199600159268e-310,4.31796281480723e-310,4.31596561368765e-310,4.31396841256807e-310,4.3119712114485e-310,4.3099740103289e-310,4.30797680920935e-310,4.30597960808977e-310,4.3039824069702e-310,4.3019852058506e-310,4.29998800473104e-310,4.29799080361147e-310,4.2959936024919e-310,4.2939964013723e-310,4.29199920025274e-310,4.29000199913317e-310,4.2880047980136e-310,4.286007596894e-310,4.28401039577444e-310,4.28201319465486e-310,4.2800159935353e-310,4.2780187924157e-310,4.27602159129614e-310,4.27402439017656e-310,4.272027189057e-310,4.2700299879374e-310,4.26803278681783e-310,4.26603558569826e-310,4.2640383845787e-310,4.2620411834591e-310,4.26004398233953e-310,4.25804678121996e-310,4.2560495801004e-310,4.2540523789808e-310,4.25205517786123e-310,4.25005797674165e-310,4.2480607756221e-310,4.2460635745025e-310,4.24406637338293e-310,4.24206917226335e-310,4.24007197114377e-310,4.2380747700242e-310,4.2360775689046e-310,4.23408036778505e-310,4.23208316666547e-310,4.2300859655459e-310,4.2280887644263e-310,4.22609156330674e-310,4.22409436218717e-310,4.2220971610676e-310,4.220099959948e-310,4.21810275882844e-310,4.21610555770887e-310,4.2141083565893e-310,4.2121111554697e-310,4.21011395435014e-310,4.20811675323056e-310,4.206119552111e-310,4.2041223509914e-310,4.20212514987184e-310,4.20012794875226e-310,4.1981307476327e-310,4.1961335465131e-310,4.19413634539353e-310,4.19213914427396e-310,4.1901419431544e-310,4.1881447420348e-310,4.18614754091523e-310,4.18415033979566e-310,4.1821531386761e-310,4.1801559375565e-310,4.17815873643693e-310,4.17616153531735e-310,4.1741643341978e-310,4.1721671330782e-310,4.17016993195863e-310,4.16817273083905e-310,4.16617552971947e-310,4.1641783285999e-310,4.1621811274803e-310,4.16018392636075e-310,4.15818672524117e-310,4.1561895241216e-310,4.154192323002e-310,4.15219512188244e-310,4.15019792076287e-310,4.1482007196433e-310,4.1462035185237e-310,4.14420631740414e-310,4.14220911628457e-310,4.140211915165e-310,4.1382147140454e-310,4.13621751292584e-310,4.13422031180626e-310,4.1322231106867e-310,4.1302259095671e-310,4.12822870844754e-310,4.12623150732796e-310,4.1242343062084e-310,4.1222371050888e-310,4.12023990396923e-310,4.11824270284966e-310,4.1162455017301e-310,4.1142483006105e-310,4.11225109949093e-310,4.11025389837136e-310,4.1082566972518e-310,4.1062594961322e-310,4.10426229501263e-310,4.10226509389305e-310,4.1002678927735e-310,4.0982706916539e-310,4.09627349053433e-310,4.09427628941475e-310,4.09227908829517e-310,4.0902818871756e-310,4.088284686056e-310,4.08628748493645e-310,4.08429028381687e-310,4.0822930826973e-310,4.0802958815777e-310,4.07829868045814e-310,4.07630147933857e-310,4.074304278219e-310,4.0723070770994e-310,4.07030987597984e-310,4.06831267486027e-310,4.0663154737407e-310,4.0643182726211e-310,4.06232107150154e-310,4.06032387038196e-310,4.0583266692624e-310,4.0563294681428e-310,4.05433226702324e-310,4.05233506590366e-310,4.0503378647841e-310,4.0483406636645e-310,4.04634346254493e-310,4.04434626142536e-310,4.0423490603058e-310,4.0403518591862e-310,4.03835465806663e-310,4.03635745694706e-310,4.0343602558275e-310,4.0323630547079e-310,4.03036585358833e-310,4.02836865246875e-310,4.0263714513492e-310,4.0243742502296e-310,4.02237704911003e-310,4.02037984799045e-310,4.01838264687087e-310,4.0163854457513e-310,4.0143882446317e-310,4.01239104351215e-310,4.01039384239257e-310,4.008396641273e-310,4.0063994401534e-310,4.00440223903384e-310,4.00240503791427e-310,4.0004078367947e-310,3.9984106356751e-310,3.99641343455554e-310,3.99441623343597e-310,3.9924190323164e-310,3.9904218311968e-310,3.98842463007724e-310,3.98642742895766e-310,3.9844302278381e-310,3.9824330267185e-310,3.98043582559894e-310,3.97843862447936e-310,3.9764414233598e-310,3.9744442222402e-310,3.97244702112063e-310,3.97044982000106e-310,3.9684526188815e-310,3.9664554177619e-310,3.96445821664233e-310,3.96246101552276e-310,3.9604638144032e-310,3.9584666132836e-310,3.95646941216403e-310,3.95447221104445e-310,3.9524750099249e-310,3.9504778088053e-310,3.94848060768573e-310,3.94648340656615e-310,3.94448620544657e-310,3.942489004327e-310,3.9404918032074e-310,3.93849460208785e-310,3.93649740096827e-310,3.9345001998487e-310,3.9325029987291e-310,3.93050579760954e-310,3.92850859648997e-310,3.9265113953704e-310,3.9245141942508e-310,3.92251699313124e-310,3.92051979201167e-310,3.9185225908921e-310,3.9165253897725e-310,3.91452818865294e-310,3.91253098753336e-310,3.9105337864138e-310,3.9085365852942e-310,3.90653938417464e-310,3.90454218305506e-310,3.9025449819355e-310,3.9005477808159e-310,3.89855057969633e-310,3.89655337857676e-310,3.8945561774572e-310,3.8925589763376e-310,3.89056177521803e-310,3.88856457409846e-310,3.8865673729789e-310,3.8845701718593e-310,3.88257297073973e-310,3.88057576962015e-310,3.8785785685006e-310,3.876581367381e-310,3.87458416626143e-310,3.87258696514185e-310,3.87058976402227e-310,3.8685925629027e-310,3.8665953617831e-310,3.86459816066355e-310,3.86260095954397e-310,3.8606037584244e-310,3.8586065573048e-310,3.85660935618524e-310,3.85461215506567e-310,3.8526149539461e-310,3.8506177528265e-310,3.84862055170694e-310,3.84662335058737e-310,3.8446261494678e-310,3.8426289483482e-310,3.84063174722864e-310,3.83863454610906e-310,3.8366373449895e-310,3.8346401438699e-310,3.83264294275034e-310,3.83064574163076e-310,3.8286485405112e-310,3.8266513393916e-310,3.82465413827203e-310,3.82265693715246e-310,3.8206597360329e-310,3.8186625349133e-310,3.81666533379373e-310,3.81466813267416e-310,3.8126709315546e-310,3.810673730435e-310,3.80867652931543e-310,3.80667932819585e-310,3.8046821270763e-310,3.8026849259567e-310,3.80068772483713e-310,3.79869052371755e-310,3.79669332259797e-310,3.7946961214784e-310,3.7926989203588e-310,3.79070171923925e-310,3.78870451811967e-310,3.7867073170001e-310,3.7847101158805e-310,3.78271291476094e-310,3.78071571364137e-310,3.7787185125218e-310,3.7767213114022e-310,3.77472411028264e-310,3.77272690916307e-310,3.7707297080435e-310,3.7687325069239e-310,3.76673530580434e-310,3.76473810468476e-310,3.7627409035652e-310,3.7607437024456e-310,3.75874650132604e-310,3.75674930020646e-310,3.7547520990869e-310,3.7527548979673e-310,3.75075769684773e-310,3.74876049572816e-310,3.7467632946086e-310,3.744766093489e-310,3.74276889236943e-310,3.74077169124986e-310,3.7387744901303e-310,3.7367772890107e-310,3.73478008789113e-310,3.73278288677155e-310,3.730785685652e-310,3.7287884845324e-310,3.72679128341283e-310,3.72479408229325e-310,3.72279688117367e-310,3.7207996800541e-310,3.7188024789345e-310,3.71680527781495e-310,3.71480807669537e-310,3.7128108755758e-310,3.7108136744562e-310,3.70881647333664e-310,3.70681927221707e-310,3.7048220710975e-310,3.7028248699779e-310,3.70082766885834e-310,3.69883046773877e-310,3.6968332666192e-310,3.6948360654996e-310,3.69283886438004e-310,3.69084166326046e-310,3.6888444621409e-310,3.6868472610213e-310,3.68485005990174e-310,3.68285285878216e-310,3.6808556576626e-310,3.678858456543e-310,3.67686125542343e-310,3.67486405430386e-310,3.6728668531843e-310,3.6708696520647e-310,3.66887245094513e-310,3.66687524982556e-310,3.664878048706e-310,3.6628808475864e-310,3.66088364646683e-310,3.65888644534725e-310,3.6568892442277e-310,3.6548920431081e-310,3.65289484198853e-310,3.65089764086895e-310,3.64890043974937e-310,3.6469032386298e-310,3.6449060375102e-310,3.64290883639065e-310,3.64091163527107e-310,3.6389144341515e-310,3.6369172330319e-310,3.63492003191234e-310,3.63292283079277e-310,3.6309256296732e-310,3.6289284285536e-310,3.62693122743404e-310,3.62493402631447e-310,3.6229368251949e-310,3.6209396240753e-310,3.61894242295574e-310,3.61694522183616e-310,3.6149480207166e-310,3.612950819597e-310,3.61095361847744e-310,3.60895641735786e-310,3.6069592162383e-310,3.6049620151187e-310,3.60296481399913e-310,3.60096761287956e-310,3.59897041176e-310,3.5969732106404e-310,3.59497600952083e-310,3.59297880840126e-310,3.5909816072817e-310,3.5889844061621e-310,3.58698720504253e-310,3.58499000392295e-310,3.5829928028034e-310,3.5809956016838e-310,3.57899840056423e-310,3.57700119944465e-310,3.57500399832507e-310,3.5730067972055e-310,3.5710095960859e-310,3.56901239496635e-310,3.56701519384677e-310,3.5650179927272e-310,3.5630207916076e-310,3.56102359048804e-310,3.55902638936847e-310,3.5570291882489e-310,3.5550319871293e-310,3.55303478600974e-310,3.55103758489017e-310,3.5490403837706e-310,3.547043182651e-310,3.54504598153144e-310,3.54304878041186e-310,3.5410515792923e-310,3.5390543781727e-310,3.53705717705314e-310,3.53505997593356e-310,3.533062774814e-310,3.5310655736944e-310,3.52906837257483e-310,3.52707117145526e-310,3.5250739703357e-310,3.5230767692161e-310,3.52107956809653e-310,3.51908236697696e-310,3.5170851658574e-310,3.5150879647378e-310,3.51309076361823e-310,3.51109356249865e-310,3.5090963613791e-310,3.5070991602595e-310,3.50510195913993e-310,3.50310475802035e-310,3.50110755690077e-310,3.4991103557812e-310,3.4971131546616e-310,3.49511595354205e-310,3.49311875242247e-310,3.4911215513029e-310,3.4891243501833e-310,3.48712714906374e-310,3.48512994794417e-310,3.4831327468246e-310,3.481135545705e-310,3.47913834458544e-310,3.47714114346587e-310,3.4751439423463e-310,3.4731467412267e-310,3.47114954010714e-310,3.46915233898756e-310,3.467155137868e-310,3.4651579367484e-310,3.46316073562884e-310,3.46116353450926e-310,3.4591663333897e-310,3.4571691322701e-310,3.45517193115053e-310,3.45317473003096e-310,3.4511775289114e-310,3.4491803277918e-310,3.44718312667223e-310,3.44518592555266e-310,3.4431887244331e-310,3.4411915233135e-310,3.43919432219393e-310,3.43719712107435e-310,3.4351999199548e-310,3.4332027188352e-310,3.43120551771563e-310,3.42920831659605e-310,3.42721111547647e-310,3.4252139143569e-310,3.4232167132373e-310,3.42121951211775e-310,3.41922231099817e-310,3.4172251098786e-310,3.415227908759e-310,3.41323070763944e-310,3.41123350651987e-310,3.4092363054003e-310,3.4072391042807e-310,3.40524190316114e-310,3.40324470204157e-310,3.401247500922e-310,3.3992502998024e-310,3.39725309868284e-310,3.39525589756326e-310,3.3932586964437e-310,3.3912614953241e-310,3.38926429420454e-310,3.38726709308496e-310,3.3852698919654e-310,3.3832726908458e-310,3.38127548972623e-310,3.37927828860666e-310,3.3772810874871e-310,3.3752838863675e-310,3.37328668524793e-310,3.37128948412836e-310,3.3692922830088e-310,3.3672950818892e-310,3.36529788076963e-310,3.36330067965005e-310,3.3613034785305e-310,3.3593062774109e-310,3.35730907629133e-310,3.35531187517175e-310,3.35331467405217e-310,3.3513174729326e-310,3.349320271813e-310,3.34732307069345e-310,3.34532586957387e-310,3.3433286684543e-310,3.3413314673347e-310,3.33933426621514e-310,3.33733706509557e-310,3.335339863976e-310,3.3333426628564e-310,3.33134546173684e-310,3.32934826061727e-310,3.3273510594977e-310,3.3253538583781e-310,3.32335665725854e-310,3.32135945613896e-310,3.3193622550194e-310,3.3173650538998e-310,3.31536785278024e-310,3.31337065166066e-310,3.3113734505411e-310,3.3093762494215e-310,3.30737904830193e-310,3.30538184718236e-310,3.3033846460628e-310,3.3013874449432e-310,3.29939024382363e-310,3.29739304270406e-310,3.2953958415845e-310,3.2933986404649e-310,3.29140143934533e-310,3.28940423822575e-310,3.2874070371062e-310,3.2854098359866e-310,3.28341263486703e-310,3.28141543374745e-310,3.27941823262787e-310,3.2774210315083e-310,3.2754238303887e-310,3.27342662926915e-310,3.27142942814957e-310,3.26943222703e-310,3.2674350259104e-310,3.26543782479085e-310,3.26344062367127e-310,3.2614434225517e-310,3.2594462214321e-310,3.25744902031254e-310,3.25545181919297e-310,3.2534546180734e-310,3.2514574169538e-310,3.24946021583424e-310,3.24746301471466e-310,3.2454658135951e-310,3.2434686124755e-310,3.24147141135594e-310,3.23947421023636e-310,3.2374770091168e-310,3.2354798079972e-310,3.23348260687763e-310,3.23148540575806e-310,3.2294882046385e-310,3.2274910035189e-310,3.22549380239933e-310,3.22349660127976e-310,3.2214994001602e-310,3.2195021990406e-310,3.21750499792103e-310,3.21550779680145e-310,3.2135105956819e-310,3.2115133945623e-310,3.20951619344273e-310,3.20751899232315e-310,3.20552179120357e-310,3.203524590084e-310,3.2015273889644e-310,3.19953018784485e-310,3.19753298672527e-310,3.1955357856057e-310,3.1935385844861e-310,3.19154138336655e-310,3.18954418224697e-310,3.1875469811274e-310,3.1855497800078e-310,3.18355257888824e-310,3.18155537776867e-310,3.1795581766491e-310,3.1775609755295e-310,3.17556377440994e-310,3.17356657329036e-310,3.1715693721708e-310,3.1695721710512e-310,3.16757496993164e-310,3.16557776881206e-310,3.1635805676925e-310,3.1615833665729e-310,3.15958616545333e-310,3.15758896433376e-310,3.1555917632142e-310,3.1535945620946e-310,3.15159736097503e-310,3.14960015985546e-310,3.1476029587359e-310,3.1456057576163e-310,3.14360855649673e-310,3.14161135537715e-310,3.1396141542576e-310,3.137616953138e-310,3.13561975201843e-310,3.13362255089885e-310,3.13162534977927e-310,3.1296281486597e-310,3.1276309475401e-310,3.12563374642055e-310,3.12363654530097e-310,3.1216393441814e-310,3.1196421430618e-310,3.11764494194225e-310,3.11564774082267e-310,3.1136505397031e-310,3.1116533385835e-310,3.10965613746394e-310,3.10765893634437e-310,3.1056617352248e-310,3.1036645341052e-310,3.10166733298564e-310,3.09967013186606e-310,3.0976729307465e-310,3.0956757296269e-310,3.09367852850734e-310,3.09168132738776e-310,3.0896841262682e-310,3.0876869251486e-310,3.08568972402903e-310,3.08369252290946e-310,3.0816953217899e-310,3.0796981206703e-310,3.07770091955073e-310,3.07570371843116e-310,3.0737065173116e-310,3.071709316192e-310,3.06971211507243e-310,3.06771491395285e-310,3.0657177128333e-310,3.0637205117137e-310,3.06172331059413e-310,3.05972610947455e-310,3.05772890835497e-310,3.0557317072354e-310,3.0537345061158e-310,3.05173730499625e-310,3.04974010387667e-310,3.0477429027571e-310,3.0457457016375e-310,3.04374850051795e-310,3.04175129939837e-310,3.0397540982788e-310,3.0377568971592e-310,3.03575969603964e-310,3.03376249492007e-310,3.0317652938005e-310,3.0297680926809e-310,3.02777089156134e-310,3.02577369044176e-310,3.0237764893222e-310,3.0217792882026e-310,3.01978208708304e-310,3.01778488596346e-310,3.0157876848439e-310,3.0137904837243e-310,3.01179328260473e-310,3.00979608148516e-310,3.0077988803656e-310,3.005801679246e-310,3.00380447812643e-310,3.00180727700686e-310,2.9998100758873e-310,2.9978128747677e-310,2.99581567364813e-310,2.99381847252855e-310,2.991821271409e-310,2.9898240702894e-310,2.98782686916983e-310,2.98582966805025e-310,2.98383246693067e-310,2.9818352658111e-310,2.9798380646915e-310,2.97784086357195e-310,2.97584366245237e-310,2.9738464613328e-310,2.9718492602132e-310,2.96985205909365e-310,2.96785485797407e-310,2.9658576568545e-310,2.9638604557349e-310,2.96186325461534e-310,2.95986605349577e-310,2.9578688523762e-310,2.9558716512566e-310,2.95387445013704e-310,2.95187724901746e-310,2.9498800478979e-310,2.9478828467783e-310,2.94588564565874e-310,2.94388844453916e-310,2.9418912434196e-310,2.9398940423e-310,2.93789684118043e-310,2.93589964006086e-310,2.9339024389413e-310,2.9319052378217e-310,2.92990803670213e-310,2.92791083558256e-310,2.925913634463e-310,2.9239164333434e-310,2.92191923222383e-310,2.91992203110425e-310,2.9179248299847e-310,2.9159276288651e-310,2.91393042774553e-310,2.91193322662595e-310,2.90993602550637e-310,2.9079388243868e-310,2.9059416232672e-310,2.90394442214765e-310,2.90194722102807e-310,2.8999500199085e-310,2.8979528187889e-310,2.89595561766935e-310,2.89395841654977e-310,2.8919612154302e-310,2.8899640143106e-310,2.88796681319104e-310,2.88596961207147e-310,2.8839724109519e-310,2.8819752098323e-310,2.87997800871274e-310,2.87798080759316e-310,2.8759836064736e-310,2.873986405354e-310,2.87198920423444e-310,2.86999200311486e-310,2.8679948019953e-310,2.8659976008757e-310,2.86400039975613e-310,2.86200319863656e-310,2.860005997517e-310,2.8580087963974e-310,2.85601159527783e-310,2.85401439415826e-310,2.8520171930387e-310,2.8500199919191e-310,2.84802279079953e-310,2.84602558967995e-310,2.8440283885604e-310,2.8420311874408e-310,2.84003398632123e-310,2.83803678520165e-310,2.83603958408208e-310,2.8340423829625e-310,2.8320451818429e-310,2.83004798072335e-310,2.82805077960377e-310,2.8260535784842e-310,2.8240563773646e-310,2.82205917624505e-310,2.82006197512547e-310,2.8180647740059e-310,2.8160675728863e-310,2.81407037176674e-310,2.81207317064717e-310,2.8100759695276e-310,2.808078768408e-310,2.80608156728844e-310,2.80408436616886e-310,2.8020871650493e-310,2.8000899639297e-310,2.79809276281014e-310,2.79609556169056e-310,2.794098360571e-310,2.7921011594514e-310,2.79010395833183e-310,2.78810675721226e-310,2.7861095560927e-310,2.7841123549731e-310,2.78211515385353e-310,2.78011795273396e-310,2.7781207516144e-310,2.7761235504948e-310,2.77412634937523e-310,2.77212914825565e-310,2.7701319471361e-310,2.7681347460165e-310,2.76613754489693e-310,2.76414034377735e-310,2.76214314265778e-310,2.7601459415382e-310,2.7581487404186e-310,2.75615153929905e-310,2.75415433817947e-310,2.7521571370599e-310,2.7501599359403e-310,2.74816273482075e-310,2.74616553370117e-310,2.7441683325816e-310,2.742171131462e-310,2.74017393034244e-310,2.73817672922287e-310,2.7361795281033e-310,2.7341823269837e-310,2.73218512586414e-310,2.73018792474456e-310,2.728190723625e-310,2.7261935225054e-310,2.72419632138584e-310,2.72219912026626e-310,2.7202019191467e-310,2.7182047180271e-310,2.71620751690753e-310,2.71421031578796e-310,2.7122131146684e-310,2.7102159135488e-310,2.70821871242923e-310,2.70622151130966e-310,2.7042243101901e-310,2.7022271090705e-310,2.70022990795093e-310,2.69823270683135e-310,2.6962355057118e-310,2.6942383045922e-310,2.69224110347263e-310,2.69024390235305e-310,2.68824670123348e-310,2.6862495001139e-310,2.6842522989943e-310,2.68225509787475e-310,2.68025789675517e-310,2.6782606956356e-310,2.676263494516e-310,2.67426629339645e-310,2.67226909227687e-310,2.6702718911573e-310,2.6682746900377e-310,2.66627748891814e-310,2.66428028779857e-310,2.662283086679e-310,2.6602858855594e-310,2.65828868443984e-310,2.65629148332026e-310,2.6542942822007e-310,2.6522970810811e-310,2.65029987996154e-310,2.64830267884196e-310,2.6463054777224e-310,2.6443082766028e-310,2.64231107548323e-310,2.64031387436366e-310,2.6383166732441e-310,2.6363194721245e-310,2.63432227100493e-310,2.63232506988536e-310,2.6303278687658e-310,2.6283306676462e-310,2.62633346652663e-310,2.62433626540705e-310,2.6223390642875e-310,2.6203418631679e-310,2.61834466204833e-310,2.61634746092875e-310,2.61435025980918e-310,2.6123530586896e-310,2.61035585757e-310,2.60835865645045e-310,2.60636145533087e-310,2.6043642542113e-310,2.6023670530917e-310,2.60036985197215e-310,2.59837265085257e-310,2.596375449733e-310,2.5943782486134e-310,2.59238104749384e-310,2.59038384637427e-310,2.5883866452547e-310,2.5863894441351e-310,2.58439224301554e-310,2.58239504189596e-310,2.5803978407764e-310,2.5784006396568e-310,2.57640343853724e-310,2.57440623741766e-310,2.5724090362981e-310,2.5704118351785e-310,2.56841463405893e-310,2.56641743293936e-310,2.5644202318198e-310,2.5624230307002e-310,2.56042582958063e-310,2.55842862846106e-310,2.5564314273415e-310,2.5544342262219e-310,2.55243702510233e-310,2.55043982398275e-310,2.5484426228632e-310,2.5464454217436e-310,2.54444822062403e-310,2.54245101950445e-310,2.54045381838488e-310,2.5384566172653e-310,2.5364594161457e-310,2.53446221502615e-310,2.53246501390657e-310,2.530467812787e-310,2.5284706116674e-310,2.52647341054785e-310,2.52447620942827e-310,2.5224790083087e-310,2.5204818071891e-310,2.51848460606954e-310,2.51648740494997e-310,2.5144902038304e-310,2.5124930027108e-310,2.51049580159124e-310,2.50849860047166e-310,2.5065013993521e-310,2.5045041982325e-310,2.50250699711294e-310,2.50050979599336e-310,2.4985125948738e-310,2.4965153937542e-310,2.49451819263463e-310,2.49252099151506e-310,2.4905237903955e-310,2.4885265892759e-310,2.48652938815633e-310,2.48453218703676e-310,2.4825349859172e-310,2.4805377847976e-310,2.47854058367803e-310,2.47654338255845e-310,2.4745461814389e-310,2.4725489803193e-310,2.47055177919973e-310,2.46855457808015e-310,2.46655737696058e-310,2.464560175841e-310,2.4625629747214e-310,2.46056577360185e-310,2.45856857248227e-310,2.4565713713627e-310,2.4545741702431e-310,2.45257696912355e-310,2.45057976800397e-310,2.4485825668844e-310,2.4465853657648e-310,2.44458816464524e-310,2.44259096352567e-310,2.4405937624061e-310,2.4385965612865e-310,2.43659936016694e-310,2.43460215904736e-310,2.4326049579278e-310,2.4306077568082e-310,2.42861055568864e-310,2.42661335456906e-310,2.4246161534495e-310,2.4226189523299e-310,2.42062175121033e-310,2.41862455009076e-310,2.4166273489712e-310,2.4146301478516e-310,2.41263294673203e-310,2.41063574561246e-310,2.4086385444929e-310,2.4066413433733e-310,2.40464414225373e-310,2.40264694113415e-310,2.4006497400146e-310,2.398652538895e-310,2.39665533777543e-310,2.39465813665585e-310,2.3926609355363e-310,2.3906637344167e-310,2.3886665332971e-310,2.38666933217755e-310,2.38467213105797e-310,2.3826749299384e-310,2.3806777288188e-310,2.37868052769925e-310,2.37668332657967e-310,2.3746861254601e-310,2.3726889243405e-310,2.37069172322094e-310,2.36869452210137e-310,2.3666973209818e-310,2.3647001198622e-310,2.36270291874264e-310,2.36070571762306e-310,2.3587085165035e-310,2.3567113153839e-310,2.35471411426434e-310,2.35271691314476e-310,2.3507197120252e-310,2.3487225109056e-310,2.34672530978603e-310,2.34472810866646e-310,2.3427309075469e-310,2.3407337064273e-310,2.33873650530773e-310,2.33673930418816e-310,2.3347421030686e-310,2.332744901949e-310,2.33074770082943e-310,2.32875049970985e-310,2.3267532985903e-310,2.3247560974707e-310,2.32275889635113e-310,2.32076169523155e-310,2.318764494112e-310,2.3167672929924e-310,2.3147700918728e-310,2.31277289075325e-310,2.31077568963367e-310,2.3087784885141e-310,2.3067812873945e-310,2.30478408627495e-310,2.30278688515537e-310,2.3007896840358e-310,2.2987924829162e-310,2.29679528179664e-310,2.29479808067707e-310,2.2928008795575e-310,2.2908036784379e-310,2.28880647731834e-310,2.28680927619876e-310,2.2848120750792e-310,2.2828148739596e-310,2.28081767284004e-310,2.27882047172046e-310,2.2768232706009e-310,2.2748260694813e-310,2.27282886836173e-310,2.27083166724216e-310,2.2688344661226e-310,2.266837265003e-310,2.26484006388343e-310,2.26284286276386e-310,2.2608456616443e-310,2.2588484605247e-310,2.25685125940513e-310,2.25485405828555e-310,2.252856857166e-310,2.2508596560464e-310,2.24886245492683e-310,2.24686525380725e-310,2.2448680526877e-310,2.2428708515681e-310,2.2408736504485e-310,2.23887644932895e-310,2.23687924820937e-310,2.2348820470898e-310,2.2328848459702e-310,2.23088764485065e-310,2.22889044373107e-310,2.2268932426115e-310,2.2248960414919e-310,2.22289884037234e-310,2.22090163925277e-310,2.2189044381332e-310,2.2169072370136e-310,2.21491003589404e-310,2.21291283477446e-310,2.2109156336549e-310,2.2089184325353e-310,2.20692123141574e-310,2.20492403029616e-310,2.2029268291766e-310,2.200929628057e-310,2.19893242693743e-310,2.19693522581786e-310,2.1949380246983e-310,2.1929408235787e-310,2.19094362245913e-310,2.18894642133956e-310,2.18694922022e-310,2.1849520191004e-310,2.18295481798083e-310,2.18095761686125e-310,2.1789604157417e-310,2.1769632146221e-310,2.17496601350253e-310,2.17296881238295e-310,2.1709716112634e-310,2.1689744101438e-310,2.1669772090242e-310,2.16498000790465e-310,2.16298280678507e-310,2.1609856056655e-310,2.1589884045459e-310,2.15699120342635e-310,2.15499400230677e-310,2.1529968011872e-310,2.1509996000676e-310,2.14900239894804e-310,2.14700519782847e-310,2.1450079967089e-310,2.1430107955893e-310,2.14101359446974e-310,2.13901639335016e-310,2.1370191922306e-310,2.135021991111e-310,2.13302478999144e-310,2.13102758887186e-310,2.1290303877523e-310,2.1270331866327e-310,2.12503598551313e-310,2.12303878439356e-310,2.121041583274e-310,2.1190443821544e-310,2.11704718103483e-310,2.11504997991526e-310,2.1130527787957e-310,2.1110555776761e-310,2.10905837655653e-310,2.10706117543695e-310,2.1050639743174e-310,2.1030667731978e-310,2.10106957207823e-310,2.09907237095865e-310,2.0970751698391e-310,2.0950779687195e-310,2.0930807675999e-310,2.09108356648035e-310,2.08908636536077e-310,2.0870891642412e-310,2.0850919631216e-310,2.08309476200205e-310,2.08109756088247e-310,2.0791003597629e-310,2.0771031586433e-310,2.07510595752374e-310,2.07310875640417e-310,2.0711115552846e-310,2.069114354165e-310,2.06711715304544e-310,2.06511995192586e-310,2.0631227508063e-310,2.0611255496867e-310,2.05912834856714e-310,2.05713114744756e-310,2.055133946328e-310,2.0531367452084e-310,2.05113954408884e-310,2.04914234296926e-310,2.0471451418497e-310,2.0451479407301e-310,2.04315073961053e-310,2.04115353849096e-310,2.0391563373714e-310,2.0371591362518e-310,2.03516193513223e-310,2.03316473401265e-310,2.0311675328931e-310,2.0291703317735e-310,2.02717313065393e-310,2.02517592953435e-310,2.0231787284148e-310,2.0211815272952e-310,2.0191843261756e-310,2.01718712505605e-310,2.01518992393647e-310,2.0131927228169e-310,2.0111955216973e-310,2.00919832057775e-310,2.00720111945817e-310,2.0052039183386e-310,2.003206717219e-310,2.00120951609944e-310,1.99921231497987e-310,1.9972151138603e-310,1.9952179127407e-310,1.99322071162114e-310,1.99122351050156e-310,1.989226309382e-310,1.9872291082624e-310,1.98523190714284e-310,1.98323470602326e-310,1.9812375049037e-310,1.9792403037841e-310,1.97724310266454e-310,1.97524590154496e-310,1.9732487004254e-310,1.9712514993058e-310,1.96925429818623e-310,1.96725709706666e-310,1.9652598959471e-310,1.9632626948275e-310,1.96126549370793e-310,1.95926829258835e-310,1.9572710914688e-310,1.9552738903492e-310,1.95327668922963e-310,1.95127948811005e-310,1.9492822869905e-310,1.9472850858709e-310,1.9452878847513e-310,1.94329068363175e-310,1.94129348251217e-310,1.9392962813926e-310,1.937299080273e-310,1.93530187915345e-310,1.93330467803387e-310,1.9313074769143e-310,1.9293102757947e-310,1.92731307467514e-310,1.92531587355557e-310,1.923318672436e-310,1.9213214713164e-310,1.91932427019684e-310,1.91732706907726e-310,1.9153298679577e-310,1.9133326668381e-310,1.91133546571854e-310,1.90933826459896e-310,1.9073410634794e-310,1.9053438623598e-310,1.90334666124024e-310,1.90134946012066e-310,1.8993522590011e-310,1.8973550578815e-310,1.89535785676193e-310,1.89336065564236e-310,1.8913634545228e-310,1.8893662534032e-310,1.88736905228363e-310,1.88537185116405e-310,1.8833746500445e-310,1.8813774489249e-310,1.87938024780533e-310,1.87738304668575e-310,1.8753858455662e-310,1.8733886444466e-310,1.871391443327e-310,1.86939424220745e-310,1.86739704108787e-310,1.8653998399683e-310,1.8634026388487e-310,1.86140543772915e-310,1.85940823660957e-310,1.85741103549e-310,1.8554138343704e-310,1.85341663325084e-310,1.85141943213127e-310,1.8494222310117e-310,1.8474250298921e-310,1.84542782877254e-310,1.84343062765296e-310,1.8414334265334e-310,1.8394362254138e-310,1.83743902429424e-310,1.83544182317466e-310,1.8334446220551e-310,1.8314474209355e-310,1.82945021981594e-310,1.82745301869636e-310,1.8254558175768e-310,1.8234586164572e-310,1.82146141533763e-310,1.81946421421806e-310,1.8174670130985e-310,1.8154698119789e-310,1.81347261085933e-310,1.81147540973975e-310,1.8094782086202e-310,1.8074810075006e-310,1.80548380638103e-310,1.80348660526145e-310,1.8014894041419e-310,1.7994922030223e-310,1.7974950019027e-310,1.79549780078315e-310,1.79350059966357e-310,1.791503398544e-310,1.7895061974244e-310,1.78750899630485e-310,1.78551179518527e-310,1.7835145940657e-310,1.7815173929461e-310,1.77952019182654e-310,1.77752299070697e-310,1.7755257895874e-310,1.7735285884678e-310,1.77153138734824e-310,1.76953418622866e-310,1.7675369851091e-310,1.7655397839895e-310,1.76354258286994e-310,1.76154538175036e-310,1.7595481806308e-310,1.7575509795112e-310,1.75555377839164e-310,1.75355657727206e-310,1.7515593761525e-310,1.7495621750329e-310,1.74756497391333e-310,1.74556777279376e-310,1.7435705716742e-310,1.7415733705546e-310,1.73957616943503e-310,1.73757896831545e-310,1.7355817671959e-310,1.7335845660763e-310,1.73158736495673e-310,1.72959016383715e-310,1.7275929627176e-310,1.725595761598e-310,1.7235985604784e-310,1.72160135935885e-310,1.71960415823927e-310,1.7176069571197e-310,1.7156097560001e-310,1.71361255488055e-310,1.71161535376097e-310,1.7096181526414e-310,1.7076209515218e-310,1.70562375040224e-310,1.70362654928267e-310,1.7016293481631e-310,1.6996321470435e-310,1.69763494592394e-310,1.69563774480436e-310,1.6936405436848e-310,1.6916433425652e-310,1.68964614144564e-310,1.68764894032606e-310,1.6856517392065e-310,1.6836545380869e-310,1.68165733696734e-310,1.67966013584776e-310,1.6776629347282e-310,1.6756657336086e-310,1.67366853248903e-310,1.67167133136946e-310,1.6696741302499e-310,1.6676769291303e-310,1.66567972801073e-310,1.66368252689115e-310,1.6616853257716e-310,1.659688124652e-310,1.65769092353243e-310,1.65569372241285e-310,1.6536965212933e-310,1.6516993201737e-310,1.6497021190541e-310,1.64770491793455e-310,1.64570771681497e-310,1.6437105156954e-310,1.6417133145758e-310,1.63971611345625e-310,1.63771891233667e-310,1.6357217112171e-310,1.6337245100975e-310,1.63172730897794e-310,1.62973010785837e-310,1.6277329067388e-310,1.6257357056192e-310,1.62373850449964e-310,1.62174130338007e-310,1.6197441022605e-310,1.6177469011409e-310,1.61574970002134e-310,1.61375249890176e-310,1.6117552977822e-310,1.6097580966626e-310,1.60776089554304e-310,1.60576369442346e-310,1.6037664933039e-310,1.6017692921843e-310,1.59977209106473e-310,1.59777488994516e-310,1.5957776888256e-310,1.593780487706e-310,1.59178328658643e-310,1.58978608546685e-310,1.5877888843473e-310,1.5857916832277e-310,1.58379448210813e-310,1.58179728098855e-310,1.579800079869e-310,1.5778028787494e-310,1.5758056776298e-310,1.57380847651025e-310,1.57181127539067e-310,1.5698140742711e-310,1.5678168731515e-310,1.56581967203195e-310,1.56382247091237e-310,1.5618252697928e-310,1.5598280686732e-310,1.55783086755364e-310,1.55583366643407e-310,1.5538364653145e-310,1.5518392641949e-310,1.54984206307534e-310,1.54784486195577e-310,1.5458476608362e-310,1.5438504597166e-310,1.54185325859704e-310,1.53985605747746e-310,1.5378588563579e-310,1.5358616552383e-310,1.53386445411874e-310,1.53186725299916e-310,1.5298700518796e-310,1.52787285076e-310,1.52587564964043e-310,1.52387844852086e-310,1.5218812474013e-310,1.5198840462817e-310,1.51788684516213e-310,1.51588964404255e-310,1.513892442923e-310,1.5118952418034e-310,1.50989804068383e-310,1.50790083956425e-310,1.5059036384447e-310,1.5039064373251e-310,1.5019092362055e-310,1.49991203508595e-310,1.49791483396637e-310,1.4959176328468e-310,1.4939204317272e-310,1.49192323060765e-310,1.48992602948807e-310,1.4879288283685e-310,1.4859316272489e-310,1.48393442612934e-310,1.48193722500977e-310,1.4799400238902e-310,1.4779428227706e-310,1.47594562165104e-310,1.47394842053147e-310,1.4719512194119e-310,1.4699540182923e-310,1.46795681717274e-310,1.46595961605316e-310,1.4639624149336e-310,1.461965213814e-310,1.45996801269444e-310,1.45797081157486e-310,1.4559736104553e-310,1.4539764093357e-310,1.45197920821613e-310,1.44998200709656e-310,1.447984805977e-310,1.4459876048574e-310,1.44399040373783e-310,1.44199320261825e-310,1.4399960014987e-310,1.4379988003791e-310,1.43600159925953e-310,1.43400439813995e-310,1.4320071970204e-310,1.4300099959008e-310,1.4280127947812e-310,1.42601559366165e-310,1.42401839254207e-310,1.4220211914225e-310,1.4200239903029e-310,1.41802678918335e-310,1.41602958806377e-310,1.4140323869442e-310,1.4120351858246e-310,1.41003798470504e-310,1.40804078358547e-310,1.4060435824659e-310,1.4040463813463e-310,1.40204918022674e-310,1.40005197910717e-310,1.3980547779876e-310,1.396057576868e-310,1.39406037574844e-310,1.39206317462886e-310,1.3900659735093e-310,1.3880687723897e-310,1.38607157127014e-310,1.38407437015056e-310,1.382077169031e-310,1.3800799679114e-310,1.37808276679183e-310,1.37608556567226e-310,1.3740883645527e-310,1.3720911634331e-310,1.37009396231353e-310,1.36809676119395e-310,1.3660995600744e-310,1.3641023589548e-310,1.36210515783523e-310,1.36010795671565e-310,1.3581107555961e-310,1.3561135544765e-310,1.3541163533569e-310,1.35211915223735e-310,1.35012195111777e-310,1.3481247499982e-310,1.3461275488786e-310,1.34413034775905e-310,1.34213314663947e-310,1.3401359455199e-310,1.3381387444003e-310,1.33614154328074e-310,1.33414434216117e-310,1.3321471410416e-310,1.330149939922e-310,1.32815273880244e-310,1.32615553768287e-310,1.3241583365633e-310,1.3221611354437e-310,1.32016393432414e-310,1.31816673320456e-310,1.316169532085e-310,1.3141723309654e-310,1.31217512984584e-310,1.31017792872626e-310,1.3081807276067e-310,1.3061835264871e-310,1.30418632536753e-310,1.30218912424796e-310,1.3001919231284e-310,1.2981947220088e-310,1.29619752088923e-310,1.29420031976965e-310,1.2922031186501e-310,1.2902059175305e-310,1.28820871641093e-310,1.28621151529135e-310,1.2842143141718e-310,1.2822171130522e-310,1.28021991193262e-310,1.27822271081305e-310,1.27622550969347e-310,1.2742283085739e-310,1.2722311074543e-310,1.27023390633475e-310,1.26823670521517e-310,1.2662395040956e-310,1.264242302976e-310,1.26224510185644e-310,1.26024790073687e-310,1.2582506996173e-310,1.2562534984977e-310,1.25425629737814e-310,1.25225909625857e-310,1.250261895139e-310,1.2482646940194e-310,1.24626749289984e-310,1.24427029178026e-310,1.2422730906607e-310,1.2402758895411e-310,1.23827868842154e-310,1.23628148730196e-310,1.2342842861824e-310,1.2322870850628e-310,1.23028988394323e-310,1.22829268282366e-310,1.2262954817041e-310,1.2242982805845e-310,1.22230107946493e-310,1.22030387834535e-310,1.2183066772258e-310,1.2163094761062e-310,1.21431227498663e-310,1.21231507386705e-310,1.2103178727475e-310,1.2083206716279e-310,1.20632347050832e-310,1.20432626938875e-310,1.20232906826917e-310,1.2003318671496e-310,1.19833466603e-310,1.19633746491045e-310,1.19434026379087e-310,1.1923430626713e-310,1.1903458615517e-310,1.18834866043214e-310,1.18635145931257e-310,1.184354258193e-310,1.1823570570734e-310,1.18035985595384e-310,1.17836265483427e-310,1.1763654537147e-310,1.1743682525951e-310,1.17237105147554e-310,1.17037385035596e-310,1.1683766492364e-310,1.1663794481168e-310,1.16438224699724e-310,1.16238504587766e-310,1.1603878447581e-310,1.1583906436385e-310,1.15639344251893e-310,1.15439624139936e-310,1.1523990402798e-310,1.1504018391602e-310,1.14840463804063e-310,1.14640743692105e-310,1.1444102358015e-310,1.1424130346819e-310,1.14041583356233e-310,1.13841863244275e-310,1.1364214313232e-310,1.1344242302036e-310,1.13242702908402e-310,1.13042982796445e-310,1.12843262684487e-310,1.1264354257253e-310,1.1244382246057e-310,1.12244102348615e-310,1.12044382236657e-310,1.118446621247e-310,1.1164494201274e-310,1.11445221900784e-310,1.11245501788827e-310,1.1104578167687e-310,1.1084606156491e-310,1.10646341452954e-310,1.10446621340997e-310,1.1024690122904e-310,1.1004718111708e-310,1.09847461005124e-310,1.09647740893166e-310,1.0944802078121e-310,1.0924830066925e-310,1.09048580557294e-310,1.08848860445336e-310,1.0864914033338e-310,1.0844942022142e-310,1.08249700109463e-310,1.08049979997506e-310,1.0785025988555e-310,1.0765053977359e-310,1.07450819661633e-310,1.07251099549675e-310,1.0705137943772e-310,1.0685165932576e-310,1.06651939213803e-310,1.06452219101845e-310,1.0625249898989e-310,1.0605277887793e-310,1.05853058765972e-310,1.05653338654015e-310,1.05453618542057e-310,1.052538984301e-310,1.0505417831814e-310,1.04854458206185e-310,1.04654738094227e-310,1.0445501798227e-310,1.0425529787031e-310,1.04055577758354e-310,1.03855857646397e-310,1.0365613753444e-310,1.0345641742248e-310,1.03256697310524e-310,1.03056977198567e-310,1.0285725708661e-310,1.0265753697465e-310,1.02457816862694e-310,1.02258096750736e-310,1.0205837663878e-310,1.0185865652682e-310,1.01658936414864e-310,1.01459216302906e-310,1.0125949619095e-310,1.0105977607899e-310,1.00860055967033e-310,1.00660335855076e-310,1.0046061574312e-310,1.0026089563116e-310,1.00061175519203e-310,9.9861455407245e-311,9.966173529529e-311,9.946201518333e-311,9.9262295071373e-311,9.9062574959415e-311,9.886285484746e-311,9.86631347355e-311,9.8463414623542e-311,9.8263694511585e-311,9.8063974399627e-311,9.786425428767e-311,9.766453417571e-311,9.7464814063755e-311,9.7265093951797e-311,9.706537383984e-311,9.686565372788e-311,9.6665933615924e-311,9.6466213503967e-311,9.626649339201e-311,9.606677328005e-311,9.5867053168094e-311,9.5667333056137e-311,9.546761294418e-311,9.526789283222e-311,9.5068172720264e-311,9.4868452608306e-311,9.466873249635e-311,9.446901238439e-311,9.4269292272434e-311,9.4069572160476e-311,9.386985204852e-311,9.367013193656e-311,9.3470411824603e-311,9.3270691712646e-311,9.307097160069e-311,9.287125148873e-311,9.2671531376773e-311,9.2471811264815e-311,9.227209115286e-311,9.20723710409e-311,9.1872650928943e-311,9.1672930816985e-311,9.147321070503e-311,9.127349059307e-311,9.1073770481112e-311,9.0874050369155e-311,9.0674330257197e-311,9.047461014524e-311,9.027489003328e-311,9.0075169921325e-311,8.9875449809367e-311,8.967572969741e-311,8.947600958545e-311,8.9276289473494e-311,8.9076569361537e-311,8.887684924958e-311,8.867712913762e-311,8.8477409025664e-311,8.8277688913707e-311,8.807796880175e-311,8.787824868979e-311,8.7678528577834e-311,8.7478808465876e-311,8.727908835392e-311,8.707936824196e-311,8.6879648130004e-311,8.6679928018046e-311,8.648020790609e-311,8.628048779413e-311,8.6080767682173e-311,8.5881047570216e-311,8.568132745826e-311,8.54816073463e-311,8.5281887234343e-311,8.5082167122385e-311,8.488244701043e-311,8.468272689847e-311,8.4483006786513e-311,8.4283286674555e-311,8.40835665626e-311,8.388384645064e-311,8.3684126338683e-311,8.3484406226725e-311,8.3284686114767e-311,8.308496600281e-311,8.288524589085e-311,8.2685525778895e-311,8.2485805666937e-311,8.228608555498e-311,8.208636544302e-311,8.1886645331064e-311,8.1686925219107e-311,8.148720510715e-311,8.128748499519e-311,8.1087764883234e-311,8.0888044771277e-311,8.068832465932e-311,8.048860454736e-311,8.0288884435404e-311,8.0089164323446e-311,7.988944421149e-311,7.968972409953e-311,7.9490003987574e-311,7.9290283875616e-311,7.909056376366e-311,7.88908436517e-311,7.8691123539743e-311,7.8491403427786e-311,7.829168331583e-311,7.809196320387e-311,7.7892243091913e-311,7.7692522979955e-311,7.7492802868e-311,7.729308275604e-311,7.7093362644083e-311,7.6893642532125e-311,7.669392242017e-311,7.649420230821e-311,7.6294482196253e-311,7.6094762084295e-311,7.5895041972337e-311,7.569532186038e-311,7.549560174842e-311,7.5295881636465e-311,7.5096161524507e-311,7.489644141255e-311,7.469672130059e-311,7.4497001188634e-311,7.4297281076677e-311,7.409756096472e-311,7.389784085276e-311,7.3698120740804e-311,7.3498400628847e-311,7.329868051689e-311,7.309896040493e-311,7.2899240292974e-311,7.2699520181016e-311,7.249980006906e-311,7.23000799571e-311,7.2100359845144e-311,7.1900639733186e-311,7.170091962123e-311,7.150119950927e-311,7.1301479397313e-311,7.1101759285356e-311,7.09020391734e-311,7.070231906144e-311,7.0502598949483e-311,7.0302878837525e-311,7.010315872557e-311,6.990343861361e-311,6.9703718501653e-311,6.9503998389695e-311,6.930427827774e-311,6.910455816578e-311,6.8904838053823e-311,6.8705117941865e-311,6.8505397829907e-311,6.830567771795e-311,6.810595760599e-311,6.7906237494035e-311,6.7706517382077e-311,6.750679727012e-311,6.730707715816e-311,6.7107357046204e-311,6.6907636934247e-311,6.670791682229e-311,6.650819671033e-311,6.6308476598374e-311,6.6108756486417e-311,6.590903637446e-311,6.57093162625e-311,6.5509596150544e-311,6.5309876038586e-311,6.511015592663e-311,6.491043581467e-311,6.4710715702714e-311,6.4510995590756e-311,6.43112754788e-311,6.411155536684e-311,6.3911835254883e-311,6.3712115142926e-311,6.351239503097e-311,6.331267491901e-311,6.3112954807053e-311,6.2913234695095e-311,6.271351458314e-311,6.251379447118e-311,6.2314074359223e-311,6.2114354247265e-311,6.191463413531e-311,6.171491402335e-311,6.1515193911393e-311,6.1315473799435e-311,6.1115753687477e-311,6.091603357552e-311,6.071631346356e-311,6.0516593351605e-311,6.0316873239647e-311,6.011715312769e-311,5.991743301573e-311,5.9717712903774e-311,5.9517992791817e-311,5.931827267986e-311,5.91185525679e-311,5.8918832455944e-311,5.8719112343987e-311,5.851939223203e-311,5.831967212007e-311,5.8119952008114e-311,5.7920231896156e-311,5.77205117842e-311,5.752079167224e-311,5.7321071560284e-311,5.7121351448326e-311,5.692163133637e-311,5.672191122441e-311,5.6522191112453e-311,5.6322471000496e-311,5.612275088854e-311,5.592303077658e-311,5.5723310664623e-311,5.5523590552665e-311,5.532387044071e-311,5.512415032875e-311,5.4924430216793e-311,5.4724710104835e-311,5.452498999288e-311,5.432526988092e-311,5.4125549768963e-311,5.3925829657005e-311,5.3726109545047e-311,5.352638943309e-311,5.332666932113e-311,5.3126949209175e-311,5.2927229097217e-311,5.272750898526e-311,5.25277888733e-311,5.2328068761344e-311,5.2128348649387e-311,5.192862853743e-311,5.172890842547e-311,5.1529188313514e-311,5.1329468201557e-311,5.11297480896e-311,5.093002797764e-311,5.0730307865684e-311,5.0530587753726e-311,5.033086764177e-311,5.013114752981e-311,4.9931427417854e-311,4.9731707305896e-311,4.953198719394e-311,4.933226708198e-311,4.9132546970023e-311,4.8932826858066e-311,4.873310674611e-311,4.853338663415e-311,4.8333666522193e-311,4.8133946410235e-311,4.793422629828e-311,4.773450618632e-311,4.7534786074363e-311,4.7335065962405e-311,4.713534585045e-311,4.693562573849e-311,4.6735905626533e-311,4.6536185514575e-311,4.6336465402617e-311,4.613674529066e-311,4.59370251787e-311,4.5737305066745e-311,4.5537584954787e-311,4.533786484283e-311,4.513814473087e-311,4.4938424618914e-311,4.4738704506957e-311,4.4538984395e-311,4.433926428304e-311,4.4139544171084e-311,4.3939824059127e-311,4.374010394717e-311,4.354038383521e-311,4.3340663723254e-311,4.3140943611296e-311,4.294122349934e-311,4.274150338738e-311,4.2541783275424e-311,4.2342063163466e-311,4.214234305151e-311,4.194262293955e-311,4.1742902827593e-311,4.1543182715636e-311,4.134346260368e-311,4.114374249172e-311,4.0944022379763e-311,4.0744302267806e-311,4.054458215585e-311,4.034486204389e-311,4.0145141931933e-311,3.9945421819975e-311,3.974570170802e-311,3.954598159606e-311,3.9346261484103e-311,3.9146541372145e-311,3.8946821260187e-311,3.874710114823e-311,3.854738103627e-311,3.8347660924315e-311,3.8147940812357e-311,3.79482207004e-311,3.774850058844e-311,3.7548780476484e-311,3.7349060364527e-311,3.714934025257e-311,3.694962014061e-311,3.6749900028654e-311,3.6550179916697e-311,3.635045980474e-311,3.615073969278e-311,3.5951019580824e-311,3.5751299468866e-311,3.555157935691e-311,3.535185924495e-311,3.5152139132994e-311,3.4952419021036e-311,3.475269890908e-311,3.455297879712e-311,3.4353258685163e-311,3.4153538573206e-311,3.395381846125e-311,3.375409834929e-311,3.3554378237333e-311,3.3354658125376e-311,3.315493801342e-311,3.295521790146e-311,3.2755497789503e-311,3.2555777677545e-311,3.235605756559e-311,3.215633745363e-311,3.1956617341673e-311,3.1756897229715e-311,3.1557177117757e-311,3.13574570058e-311,3.115773689384e-311,3.0958016781885e-311,3.0758296669927e-311,3.055857655797e-311,3.035885644601e-311,3.0159136334054e-311,2.9959416222097e-311,2.975969611014e-311,2.955997599818e-311,2.9360255886224e-311,2.9160535774267e-311,2.896081566231e-311,2.876109555035e-311,2.8561375438394e-311,2.8361655326436e-311,2.816193521448e-311,2.796221510252e-311,2.7762494990564e-311,2.7562774878606e-311,2.736305476665e-311,2.716333465469e-311,2.6963614542733e-311,2.6763894430776e-311,2.656417431882e-311,2.636445420686e-311,2.6164734094903e-311,2.5965013982946e-311,2.576529387099e-311,2.556557375903e-311,2.5365853647073e-311,2.5166133535115e-311,2.496641342316e-311,2.47666933112e-311,2.4566973199243e-311,2.4367253087285e-311,2.4167532975327e-311,2.396781286337e-311,2.376809275141e-311,2.3568372639455e-311,2.3368652527497e-311,2.316893241554e-311,2.296921230358e-311,2.2769492191624e-311,2.2569772079667e-311,2.237005196771e-311,2.217033185575e-311,2.1970611743794e-311,2.1770891631837e-311,2.157117151988e-311,2.137145140792e-311,2.1171731295964e-311,2.0972011184006e-311,2.077229107205e-311,2.057257096009e-311,2.0372850848134e-311,2.0173130736176e-311,1.997341062422e-311,1.977369051226e-311,1.9573970400303e-311,1.9374250288346e-311,1.917453017639e-311,1.897481006443e-311,1.8775089952473e-311,1.8575369840516e-311,1.837564972856e-311,1.81759296166e-311,1.7976209504643e-311,1.7776489392685e-311,1.757676928073e-311,1.737704916877e-311,1.7177329056813e-311,1.6977608944855e-311,1.6777888832897e-311,1.657816872094e-311,1.637844860898e-311,1.6178728497025e-311,1.5979008385067e-311,1.577928827311e-311,1.557956816115e-311,1.5379848049194e-311,1.5180127937237e-311,1.498040782528e-311,1.478068771332e-311,1.4580967601364e-311,1.4381247489407e-311,1.418152737745e-311,1.398180726549e-311,1.3782087153534e-311,1.3582367041576e-311,1.338264692962e-311,1.318292681766e-311,1.2983206705704e-311,1.2783486593746e-311,1.258376648179e-311,1.238404636983e-311,1.2184326257873e-311,1.1984606145916e-311,1.178488603396e-311,1.1585165922e-311,1.1385445810043e-311,1.1185725698086e-311,1.098600558613e-311,1.078628547417e-311,1.0586565362213e-311,1.0386845250255e-311,1.01871251383e-311,9.98740502634e-312,9.787684914383e-312,9.587964802425e-312,9.388244690467e-312,9.18852457851e-312,8.98880446655e-312,8.789084354595e-312,8.589364242637e-312,8.38964413068e-312,8.18992401872e-312,7.990203906764e-312,7.790483794807e-312,7.59076368285e-312,7.39104357089e-312,7.191323458934e-312,6.991603346977e-312,6.79188323502e-312,6.59216312306e-312,6.392443011104e-312,6.192722899146e-312,5.99300278719e-312,5.79328267523e-312,5.593562563274e-312,5.393842451316e-312,5.19412233936e-312,4.9944022274e-312,4.794682115443e-312,4.594962003486e-312,4.39524189153e-312,4.19552177957e-312,3.995801667613e-312,3.796081555656e-312,3.5963614437e-312,3.39664133174e-312,3.196921219783e-312,2.997201107825e-312,2.79748099587e-312,2.59776088391e-312,2.398040771953e-312,2.198320659995e-312,1.998600548037e-312,1.79888043608e-312,1.59916032412e-312,1.399440212165e-312,1.199720100207e-312,9.9999998825e-313]}

},{}],92:[function(require,module,exports){
module.exports={"expected":[-1.0e100,-1.0006648938062575e100,-1.0013315594823174e100,-1.0020000053079517e100,-1.0026702396183147e100,-1.0033422708044265e100,-1.0040161073136615e100,-1.0046917576502391e100,-1.0053692303757251e100,-1.0060485341095325e100,-1.0067296775294322e100,-1.007412669372068e100,-1.0080975184334759e100,-1.00878423356961e100,-1.0094728236968757e100,-1.0101632977926655e100,-1.0108556648959028e100,-1.0115499341075924e100,-1.0122461145913745e100,-1.0129442155740872e100,-1.0136442463463338e100,-1.014346216263057e100,-1.0150501347441197e100,-1.015756011274891e100,-1.0164638554068407e100,-1.0171736767581386e100,-1.0178854850142616e100,-1.0185992899286074e100,-1.0193151013231147e100,-1.0200329290888913e100,-1.020752783186847e100,-1.0214746736483385e100,-1.0221986105758149e100,-1.0229246041434764e100,-1.0236526645979375e100,-1.024382802258898e100,-1.0251150275198237e100,-1.0258493508486313e100,-1.0265857827883841e100,-1.0273243339579954e100,-1.0280650150529385e100,-1.0288078368459668e100,-1.0295528101878397e100,-1.0302999460080603e100,-1.0310492553156188e100,-1.031800749199746e100,-1.0325544388306752e100,-1.0333103354604132e100,-1.0340684504235199e100,-1.0348287951378976e100,-1.03559138110559e100,-1.036356219913589e100,-1.0371233232346528e100,-1.0378927028281329e100,-1.0386643705408109e100,-1.0394383383077457e100,-1.0402146181531304e100,-1.0409932221911595e100,-1.0417741626269072e100,-1.042557451757215e100,-1.0433431019715908e100,-1.0441311257531195e100,-1.0449215356793825e100,-1.0457143444233914e100,-1.0465095647545303e100,-1.0473072095395114e100,-1.0481072917433405e100,-1.0489098244302968e100,-1.0497148207649226e100,-1.050522294013026e100,-1.0513322575426954e100,-1.0521447248253284e100,-1.052959709436671e100,-1.0537772250578712e100,-1.0545972854765445e100,-1.055419904587855e100,-1.056245096395608e100,-1.0570728750133558e100,-1.05790325466552e100,-1.058736249688525e100,-1.0595718745319486e100,-1.0604101437596842e100,-1.0612510720511212e100,-1.0620946742023367e100,-1.062940965127305e100,-1.063789959859122e100,-1.064641673551245e100,-1.0654961214787478e100,-1.0663533190395935e100,-1.0672132817559225e100,-1.0680760252753573e100,-1.0689415653723249e100,-1.0698099179493953e100,-1.0706810990386387e100,-1.0715551248029997e100,-1.072432011537689e100,-1.073311775671595e100,-1.0741944337687111e100,-1.0750800025295864e100,-1.07596849879279e100,-1.0768599395363997e100,-1.0777543418795064e100,-1.0786517230837428e100,-1.0795521005548279e100,-1.080455491844136e100,-1.0813619146502845e100,-1.0822713868207439e100,-1.0831839263534696e100,-1.0840995513985557e100,-1.0850182802599107e100,-1.0859401313969561e100,-1.08686512342635e100,-1.0877932751237308e100,-1.0887246054254874e100,-1.0896591334305538e100,-1.0905968784022263e100,-1.0915378597700075e100,-1.0924820971314759e100,-1.0934296102541804e100,-1.0943804190775623e100,-1.0953345437149027e100,-1.0962920044552985e100,-1.0972528217656657e100,-1.0982170162927696e100,-1.099184608865287e100,-1.1001556204958927e100,-1.1011300723833802e100,-1.102107985914809e100,-1.1030893826676854e100,-1.1040742844121718e100,-1.1050627131133296e100,-1.1060546909333935e100,-1.1070502402340788e100,-1.1080493835789212e100,-1.109052143735652e100,-1.1100585436786064e100,-1.1110686065911681e100,-1.1120823558682473e100,-1.1130998151187993e100,-1.114121008168374e100,-1.115145959061709e100,-1.1161746920653573e100,-1.1172072316703544e100,-1.1182436025949255e100,-1.119283829787234e100,-1.1203279384281686e100,-1.121375953934174e100,-1.1224279019601238e100,-1.1234838084022358e100,-1.1245436994010324e100,-1.1256076013443453e100,-1.126675540870365e100,-1.1277475448707386e100,-1.1288236404937137e100,-1.1299038551473296e100,-1.1309882165026595e100,-1.1320767524971009e100,-1.1331694913377186e100,-1.1342664615046366e100,-1.1353676917544862e100,-1.136473211123905e100,-1.1375830489330926e100,-1.1386972347894204e100,-1.1398157985910986e100,-1.1409387705309021e100,-1.142066181099954e100,-1.1431980610915693e100,-1.1443344416051603e100,-1.145475354050204e100,-1.146620830150273e100,-1.1477709019471302e100,-1.148925601804892e100,-1.1500849624142546e100,-1.1512490167967936e100,-1.152417798309329e100,-1.1535913406483649e100,-1.1547696778545978e100,-1.1559528443175043e100,-1.157140874779998e100,-1.1583338043431687e100,-1.1595316684710957e100,-1.1607345029957445e100,-1.1619423441219424e100,-1.1631552284324386e100,-1.1643731928930485e100,-1.1655962748578849e100,-1.1668245120746773e100,-1.1680579426901802e100,-1.1692966052556752e100,-1.1705405387325646e100,-1.1717897824980614e100,-1.1730443763509783e100,-1.174304360517612e100,-1.175569775657735e100,-1.1768406628706849e100,-1.1781170637015638e100,-1.179399020147543e100,-1.1806865746642802e100,-1.1819797701724462e100,-1.1832786500643689e100,-1.184583258210794e100,-1.1858936389677636e100,-1.187209837183619e100,-1.1885318982061284e100,-1.1898598678897395e100,-1.1911937926029653e100,-1.1925337192358999e100,-1.1938796952078734e100,-1.195231768475242e100,-1.1965899875393226e100,-1.1979544014544694e100,-1.1993250598363016e100,-1.2007020128700794e100,-1.202085311319236e100,-1.203475006534067e100,-1.2048711504605796e100,-1.2062737956495107e100,-1.2076829952655093e100,-1.2090988030964917e100,-1.2105212735631768e100,-1.2119504617287955e100,-1.213386423308989e100,-1.2148292146818938e100,-1.2162788928984177e100,-1.217735515692716e100,-1.2191991414928653e100,-1.2206698294317467e100,-1.2221476393581384e100,-1.2236326318480227e100,-1.2251248682161166e100,-1.226624410527625e100,-1.2281313216102275e100,-1.2296456650662997e100,-1.2311675052853788e100,-1.2326969074568732e100,-1.234233937583031e100,-1.235778662492163e100,-1.2373311498521345e100,-1.2388914681841287e100,-1.2404596868766884e100,-1.2420358762000439e100,-1.2436201073207319e100,-1.2452124523165164e100,-1.2468129841916134e100,-1.2484217768922327e100,-1.2500389053224396e100,-1.2516644453603483e100,-1.2532984738746518e100,-1.254941068741501e100,-1.2565923088617368e100,-1.258252274178487e100,-1.2599210456951363e100,-1.2615987054936817e100,-1.263285336753477e100,-1.2649810237703812e100,-1.266685851976321e100,-1.2683999079592747e100,-1.2701232794836933e100,-1.2718560555113641e100,-1.2735983262227344e100,-1.2753501830387021e100,-1.2771117186428907e100,-1.2788830270044155e100,-1.2806642034011595e100,-1.2824553444435692e100,-1.284256548098985e100,-1.2860679137165212e100,-1.287889542052509e100,-1.28972153529652e100,-1.2915639970979835e100,-1.293417032593413e100,-1.295280748434266e100,-1.2971552528154427e100,-1.2990406555044506e100,-1.3009370678712496e100,-1.3028446029187984e100,-1.304763375314318e100,-1.3066935014212997e100,-1.308635099332268e100,-1.3105882889023318e100,-1.312553191783536e100,-1.3145299314600441e100,-1.3165186332841704e100,-1.3185194245132887e100,-1.3205324343476433e100,-1.3225577939690873e100,-1.3245956365807759e100,-1.3266460974478439e100,-1.328709313939093e100,-1.3307854255697243e100,-1.3328745740451412e100,-1.334976903305861e100,-1.3370925595735619e100,-1.3392216913983053e100,-1.3413644497069668e100,-1.343520987852913e100,-1.3456914616669608e100,-1.3478760295096627e100,-1.3500748523249555e100,-1.3522880936952166e100,-1.3545159198977708e100,-1.3567584999628949e100,-1.3590160057333663e100,-1.361288611925605e100,-1.363576496192458e100,-1.3658798391876847e100,-1.368198824632189e100,-1.3705336393820642e100,-1.372884473498502e100,-1.375251520319632e100,-1.3776349765343533e100,-1.3800350422582223e100,-1.3824519211114705e100,-1.3848858202992144e100,-1.3873369506939446e100,-1.3898055269203547e100,-1.3922917674426055e100,-1.3947958946540965e100,-1.3973181349698354e100,-1.3998587189214956e100,-1.402417881255254e100,-1.4049958610325055e100,-1.4075929017335572e100,-1.4102092513644055e100,-1.412845162566708e100,-1.4155008927310613e100,-1.418176704113706e100,-1.4208728639567814e100,-1.4235896446122584e100,-1.4263273236696885e100,-1.4290861840879019e100,-1.4318665143308098e100,-1.4346686085074557e100,-1.4374927665164787e100,-1.440339294195155e100,-1.443208503473189e100,-1.4461007125314341e100,-1.4490162459657365e100,-1.4519554349560945e100,-1.4549186174413424e100,-1.457906138299572e100,-1.4609183495345208e100,-1.46395561046816e100,-1.4670182879397253e100,-1.4701067565114581e100,-1.4732213986813164e100,-1.4763626051029442e100,-1.4795307748131932e100,-1.4827263154675075e100,-1.4859496435834961e100,-1.4892011847930313e100,-1.4924813741032346e100,-1.495790656166719e100,-1.4991294855614852e100,-1.5024983270808799e100,-1.505897656034051e100,-1.5093279585573543e100,-1.5127897319371874e100,-1.516283484944753e100,-1.5198097381832785e100,-1.5233690244482476e100,-1.5269618891012243e100,-1.5305888904578853e100,-1.534250600190904e100,-1.5379476037483704e100,-1.5416805007884587e100,-1.5454499056310983e100,-1.5492564477274475e100,-1.553100772148006e100,-1.5569835400902501e100,-1.5609054294067305e100,-1.564867135154614e100,-1.568869370167713e100,-1.5729128656521057e100,-1.57699837180651e100,-1.5811266584686404e100,-1.5852985157888536e100,-1.5895147549324607e100,-1.5937762088121654e100,-1.598083732852176e100,-1.6024382057856318e100,-1.6068405304870801e100,-1.6112916348418533e100,-1.6157924726542993e100,-1.6203440245969487e100,-1.6249472992028262e100,-1.6296033339032564e100,-1.6343131961136618e100,-1.639077984370012e100,-1.6438988295187539e100,-1.6487768959632371e100,-1.653713382969853e100,-1.6587095260373107e100,-1.6637665983327079e100,-1.6688859121983043e100,-1.6740688207331682e100,-1.6793167194541524e100,-1.6846310480409774e100,-1.6900132921705205e100,-1.6954649854457802e100,-1.7009877114253778e100,-1.706583105759878e100,-1.7122528584416714e100,-1.717998716175661e100,-1.7238224848785316e100,-1.7297260323149731e100,-1.7357112908798557e100,-1.7417802605360591e100,-1.747935011918406e100,-1.7541776896149647e100,-1.7605105156379017e100,-1.7669357930970103e100,-1.7734559100901434e100,-1.780073343825917e100,-1.786790664995344e100,-1.793610542410448e100,-1.800535747929448e100,-1.8075691616897793e100,-1.8147137776720756e100,-1.8219727096202587e100,-1.8293491973451395e100,-1.836846613441388e100,-1.8444684704504685e100,-1.8522184285051417e100,-1.860100303494474e100,-1.8681180757919806e100,-1.8762758995936324e100,-1.884578112916999e100,-1.893029248317865e100,-1.9016340443862842e100,-1.910397458090325e100,-1.9193246780427716e100,-1.9284211387739043e100,-1.93769253610226e100,-1.9471448437051493e100,-1.9567843310017885e100,-1.9666175824743827e100,-1.976651518566561e100,-1.986893418314473e100,-1.9973509438838117e100,-2.0080321672064567e100,-2.018945598933542e100,-2.030100219948156e100,-2.04150551571091e100,-2.0531715137459888e100,-2.0651088246146235e100,-2.0773286867681336e100,-2.089843015724612e100,-2.1026644580733327e100,-2.115806450880225e100,-2.129283287148153e100,-2.1431101880791287e100,-2.1573033829944537e100,-2.1718801978960658e100,-2.1868591538015655e100,-2.2022600761608945e100,-2.2181042168696924e100,-2.2344143906394873e100,-2.251215127776099e100,-2.2685328457648537e100,-2.2863960424768354e100,-2.3048355143098e100,-2.3238846031800288e100,-2.3435794770117434e100,-2.3639594492598798e100,-2.3850673440897474e100,-2.406949915174365e100,-2.429658327723086e100,-2.453248715409226e100,-2.477782826432293e100,-2.503328776180373e100,-2.529961928047675e100,-2.557765929175651e100,-2.5868339345814544e100,-2.6172700618031314e100,-2.6491911295001786e100,-2.6827287483384826e100,-2.7180318522806787e100,-2.7552697849781286e100,-2.7946360920347713e100,-2.8363532194595262e100,-2.8806783875430292e100,-2.9279110065888553e100,-2.9784021400662363e100,-3.0325667232126928e100,-3.090899545050927e100,-3.1539964549895246e100,-3.2225829551238445e100,-3.297553447057391e100,-3.380026203654814e100,-3.4714221581980634e100,-3.573580854325504e100,-3.688936400779273e100,-3.8207942945941615e100,-3.973786109343483e100,-4.154656504520866e100,-4.3737172402949934e100,-4.647767845339263e100,-5.0066557197170816e100,-5.510536880509967e100,-6.307988292010739e100,-7.947560582157904e100,-4.641588833612863e102],"x":[-1.0e-300,-9.980079681474104e-301,-9.960159362948208e-301,-9.94023904442231e-301,-9.920318725896415e-301,-9.900398407370519e-301,-9.880478088844623e-301,-9.860557770318725e-301,-9.840637451792829e-301,-9.820717133266933e-301,-9.800796814741037e-301,-9.78087649621514e-301,-9.760956177689243e-301,-9.741035859163347e-301,-9.721115540637451e-301,-9.701195222111553e-301,-9.681274903585657e-301,-9.661354585059761e-301,-9.641434266533865e-301,-9.621513948007968e-301,-9.601593629482072e-301,-9.581673310956176e-301,-9.56175299243028e-301,-9.541832673904382e-301,-9.521912355378486e-301,-9.50199203685259e-301,-9.482071718326694e-301,-9.462151399800796e-301,-9.4422310812749e-301,-9.422310762749004e-301,-9.402390444223108e-301,-9.38247012569721e-301,-9.362549807171315e-301,-9.342629488645419e-301,-9.322709170119523e-301,-9.302788851593625e-301,-9.282868533067729e-301,-9.262948214541833e-301,-9.243027896015937e-301,-9.22310757749004e-301,-9.203187258964143e-301,-9.183266940438247e-301,-9.163346621912351e-301,-9.143426303386454e-301,-9.123505984860558e-301,-9.103585666334662e-301,-9.083665347808766e-301,-9.063745029282868e-301,-9.043824710756972e-301,-9.023904392231076e-301,-9.00398407370518e-301,-8.984063755179284e-301,-8.964143436653386e-301,-8.94422311812749e-301,-8.924302799601594e-301,-8.904382481075698e-301,-8.8844621625498e-301,-8.864541844023905e-301,-8.844621525498009e-301,-8.824701206972113e-301,-8.804780888446215e-301,-8.784860569920319e-301,-8.764940251394423e-301,-8.745019932868527e-301,-8.725099614342629e-301,-8.705179295816733e-301,-8.685258977290837e-301,-8.665338658764941e-301,-8.645418340239043e-301,-8.625498021713147e-301,-8.605577703187251e-301,-8.585657384661355e-301,-8.565737066135458e-301,-8.545816747609562e-301,-8.525896429083666e-301,-8.50597611055777e-301,-8.486055792031872e-301,-8.466135473505976e-301,-8.44621515498008e-301,-8.426294836454184e-301,-8.406374517928286e-301,-8.38645419940239e-301,-8.366533880876494e-301,-8.346613562350598e-301,-8.3266932438247e-301,-8.306772925298805e-301,-8.286852606772909e-301,-8.266932288247013e-301,-8.247011969721115e-301,-8.227091651195219e-301,-8.207171332669323e-301,-8.187251014143427e-301,-8.16733069561753e-301,-8.147410377091633e-301,-8.127490058565737e-301,-8.107569740039841e-301,-8.087649421513944e-301,-8.067729102988048e-301,-8.047808784462152e-301,-8.027888465936256e-301,-8.00796814741036e-301,-7.988047828884462e-301,-7.968127510358566e-301,-7.94820719183267e-301,-7.928286873306774e-301,-7.908366554780876e-301,-7.88844623625498e-301,-7.868525917729084e-301,-7.848605599203188e-301,-7.82868528067729e-301,-7.808764962151395e-301,-7.788844643625499e-301,-7.768924325099603e-301,-7.749004006573705e-301,-7.729083688047809e-301,-7.709163369521913e-301,-7.689243050996017e-301,-7.669322732470119e-301,-7.649402413944223e-301,-7.629482095418327e-301,-7.609561776892431e-301,-7.589641458366533e-301,-7.569721139840637e-301,-7.549800821314741e-301,-7.529880502788845e-301,-7.509960184262948e-301,-7.490039865737052e-301,-7.470119547211156e-301,-7.450199228685259e-301,-7.430278910159363e-301,-7.410358591633466e-301,-7.39043827310757e-301,-7.370517954581673e-301,-7.350597636055777e-301,-7.33067731752988e-301,-7.310756999003984e-301,-7.2908366804780875e-301,-7.2709163619521915e-301,-7.250996043426295e-301,-7.231075724900399e-301,-7.211155406374502e-301,-7.191235087848606e-301,-7.171314769322709e-301,-7.151394450796813e-301,-7.131474132270916e-301,-7.11155381374502e-301,-7.091633495219123e-301,-7.071713176693227e-301,-7.051792858167331e-301,-7.0318725396414344e-301,-7.0119522211155384e-301,-6.9920319025896416e-301,-6.9721115840637456e-301,-6.952191265537849e-301,-6.932270947011953e-301,-6.912350628486056e-301,-6.89243030996016e-301,-6.872509991434263e-301,-6.852589672908367e-301,-6.83266935438247e-301,-6.812749035856574e-301,-6.792828717330677e-301,-6.772908398804781e-301,-6.7529880802788845e-301,-6.7330677617529885e-301,-6.713147443227092e-301,-6.693227124701196e-301,-6.673306806175299e-301,-6.653386487649403e-301,-6.633466169123506e-301,-6.61354585059761e-301,-6.593625532071713e-301,-6.573705213545817e-301,-6.55378489501992e-301,-6.533864576494024e-301,-6.5139442579681274e-301,-6.494023939442231e-301,-6.4741036209163346e-301,-6.4541833023904386e-301,-6.434262983864542e-301,-6.414342665338646e-301,-6.394422346812749e-301,-6.374502028286853e-301,-6.354581709760956e-301,-6.33466139123506e-301,-6.314741072709163e-301,-6.294820754183267e-301,-6.27490043565737e-301,-6.254980117131474e-301,-6.2350597986055775e-301,-6.2151394800796815e-301,-6.195219161553785e-301,-6.175298843027889e-301,-6.155378524501992e-301,-6.135458205976096e-301,-6.115537887450199e-301,-6.095617568924303e-301,-6.075697250398407e-301,-6.05577693187251e-301,-6.035856613346614e-301,-6.015936294820717e-301,-5.996015976294821e-301,-5.976095657768924e-301,-5.956175339243028e-301,-5.9362550207171316e-301,-5.9163347021912356e-301,-5.896414383665339e-301,-5.876494065139443e-301,-5.856573746613546e-301,-5.83665342808765e-301,-5.816733109561753e-301,-5.796812791035857e-301,-5.77689247250996e-301,-5.756972153984064e-301,-5.737051835458167e-301,-5.717131516932271e-301,-5.6972111984063745e-301,-5.6772908798804785e-301,-5.657370561354582e-301,-5.637450242828686e-301,-5.617529924302789e-301,-5.597609605776893e-301,-5.577689287250996e-301,-5.5577689687251e-301,-5.537848650199203e-301,-5.517928331673307e-301,-5.49800801314741e-301,-5.478087694621514e-301,-5.458167376095617e-301,-5.438247057569721e-301,-5.4183267390438246e-301,-5.3984064205179285e-301,-5.378486101992032e-301,-5.358565783466136e-301,-5.338645464940239e-301,-5.318725146414343e-301,-5.298804827888446e-301,-5.27888450936255e-301,-5.258964190836653e-301,-5.239043872310757e-301,-5.21912355378486e-301,-5.199203235258964e-301,-5.1792829167330675e-301,-5.1593625982071715e-301,-5.139442279681275e-301,-5.119521961155379e-301,-5.099601642629482e-301,-5.079681324103586e-301,-5.05976100557769e-301,-5.039840687051793e-301,-5.019920368525897e-301,-5.00000005e-301,-4.980079731474104e-301,-4.960159412948207e-301,-4.940239094422311e-301,-4.920318775896414e-301,-4.900398457370518e-301,-4.8804781388446215e-301,-4.8605578203187255e-301,-4.840637501792829e-301,-4.820717183266933e-301,-4.800796864741036e-301,-4.78087654621514e-301,-4.760956227689243e-301,-4.741035909163347e-301,-4.72111559063745e-301,-4.701195272111554e-301,-4.681274953585657e-301,-4.661354635059761e-301,-4.6414343165338645e-301,-4.6215139980079685e-301,-4.601593679482072e-301,-4.581673360956176e-301,-4.561753042430279e-301,-4.541832723904383e-301,-4.521912405378486e-301,-4.50199208685259e-301,-4.482071768326693e-301,-4.462151449800797e-301,-4.4422311312749e-301,-4.422310812749004e-301,-4.402390494223107e-301,-4.382470175697211e-301,-4.3625498571713145e-301,-4.3426295386454185e-301,-4.322709220119522e-301,-4.302788901593626e-301,-4.282868583067729e-301,-4.262948264541833e-301,-4.243027946015936e-301,-4.22310762749004e-301,-4.203187308964143e-301,-4.183266990438247e-301,-4.16334667191235e-301,-4.143426353386454e-301,-4.1235060348605575e-301,-4.1035857163346615e-301,-4.0836653978087654e-301,-4.063745079282869e-301,-4.043824760756973e-301,-4.023904442231076e-301,-4.00398412370518e-301,-3.984063805179283e-301,-3.964143486653387e-301,-3.94422316812749e-301,-3.924302849601594e-301,-3.904382531075697e-301,-3.884462212549801e-301,-3.864541894023904e-301,-3.844621575498008e-301,-3.8247012569721115e-301,-3.8047809384462155e-301,-3.784860619920319e-301,-3.764940301394423e-301,-3.745019982868526e-301,-3.7250996643426294e-301,-3.705179345816733e-301,-3.6852590272908366e-301,-3.66533870876494e-301,-3.6454183902390437e-301,-3.6254980717131477e-301,-3.6055777531872513e-301,-3.585657434661355e-301,-3.5657371161354584e-301,-3.545816797609562e-301,-3.5258964790836656e-301,-3.505976160557769e-301,-3.4860558420318727e-301,-3.4661355235059763e-301,-3.44621520498008e-301,-3.4262948864541835e-301,-3.406374567928287e-301,-3.3864542494023906e-301,-3.366533930876494e-301,-3.3466136123505978e-301,-3.3266932938247014e-301,-3.306772975298805e-301,-3.2868526567729085e-301,-3.266932338247012e-301,-3.2470120197211157e-301,-3.2270917011952192e-301,-3.207171382669323e-301,-3.1872510641434264e-301,-3.16733074561753e-301,-3.1474104270916335e-301,-3.127490108565737e-301,-3.1075697900398407e-301,-3.0876494715139443e-301,-3.067729152988048e-301,-3.0478088344621514e-301,-3.027888515936255e-301,-3.0079681974103586e-301,-2.988047878884462e-301,-2.9681275603585657e-301,-2.9482072418326693e-301,-2.928286923306773e-301,-2.9083666047808765e-301,-2.88844628625498e-301,-2.8685259677290836e-301,-2.848605649203187e-301,-2.8286853306772908e-301,-2.8087650121513944e-301,-2.788844693625498e-301,-2.7689243750996015e-301,-2.749004056573705e-301,-2.7290837380478087e-301,-2.7091634195219122e-301,-2.689243100996016e-301,-2.6693227824701194e-301,-2.649402463944223e-301,-2.629482145418327e-301,-2.6095618268924305e-301,-2.589641508366534e-301,-2.5697211898406377e-301,-2.5498008713147413e-301,-2.529880552788845e-301,-2.5099602342629484e-301,-2.490039915737052e-301,-2.4701195972111556e-301,-2.450199278685259e-301,-2.4302789601593627e-301,-2.4103586416334663e-301,-2.39043832310757e-301,-2.3705180045816735e-301,-2.350597686055777e-301,-2.3306773675298806e-301,-2.310757049003984e-301,-2.2908367304780878e-301,-2.2709164119521913e-301,-2.250996093426295e-301,-2.2310757749003985e-301,-2.211155456374502e-301,-2.1912351378486056e-301,-2.1713148193227092e-301,-2.151394500796813e-301,-2.1314741822709164e-301,-2.11155386374502e-301,-2.0916335452191235e-301,-2.071713226693227e-301,-2.0517929081673307e-301,-2.0318725896414343e-301,-2.011952271115538e-301,-1.9920319525896414e-301,-1.972111634063745e-301,-1.9521913155378486e-301,-1.932270997011952e-301,-1.9123506784860557e-301,-1.8924303599601593e-301,-1.872510041434263e-301,-1.8525897229083667e-301,-1.8326694043824702e-301,-1.8127490858565738e-301,-1.7928287673306774e-301,-1.772908448804781e-301,-1.7529881302788845e-301,-1.7330678117529881e-301,-1.7131474932270917e-301,-1.6932271747011953e-301,-1.6733068561752988e-301,-1.6533865376494024e-301,-1.633466219123506e-301,-1.6135459005976096e-301,-1.5936255820717132e-301,-1.5737052635458167e-301,-1.5537849450199203e-301,-1.5338646264940239e-301,-1.5139443079681275e-301,-1.494023989442231e-301,-1.4741036709163346e-301,-1.4541833523904382e-301,-1.4342630338645418e-301,-1.4143427153386456e-301,-1.3944223968127491e-301,-1.3745020782868527e-301,-1.3545817597609563e-301,-1.3346614412350599e-301,-1.3147411227091634e-301,-1.294820804183267e-301,-1.2749004856573706e-301,-1.2549801671314742e-301,-1.2350598486055777e-301,-1.2151395300796813e-301,-1.195219211553785e-301,-1.1752988930278885e-301,-1.155378574501992e-301,-1.1354582559760956e-301,-1.1155379374501992e-301,-1.0956176189243028e-301,-1.0756973003984064e-301,-1.05577698187251e-301,-1.0358566633466135e-301,-1.015936344820717e-301,-9.960160262948207e-302,-9.760957077689242e-302,-9.561753892430278e-302,-9.362550707171314e-302,-9.163347521912351e-302,-8.964144336653387e-302,-8.764941151394422e-302,-8.565737966135458e-302,-8.366534780876494e-302,-8.16733159561753e-302,-7.968128410358566e-302,-7.768925225099602e-302,-7.569722039840638e-302,-7.370518854581674e-302,-7.171315669322709e-302,-6.972112484063745e-302,-6.772909298804781e-302,-6.573706113545817e-302,-6.374502928286853e-302,-6.175299743027888e-302,-5.976096557768924e-302,-5.77689337250996e-302,-5.577690187250997e-302,-5.378487001992032e-302,-5.179283816733068e-302,-4.980080631474104e-302,-4.78087744621514e-302,-4.5816742609561755e-302,-4.382471075697211e-302,-4.183267890438247e-302,-3.984064705179283e-302,-3.784861519920319e-302,-3.585658334661355e-302,-3.3864551494023906e-302,-3.1872519641434264e-302,-2.988048778884462e-302,-2.788845593625498e-302,-2.589642408366534e-302,-2.39043922310757e-302,-2.1912360378486057e-302,-1.9920328525896415e-302,-1.7928296673306773e-302,-1.5936264820717133e-302,-1.394423296812749e-302,-1.1952201115537848e-302,-9.960169262948207e-303,-7.968137410358566e-303,-5.976105557768925e-303,-3.984073705179283e-303,-1.9920418525896414e-303,-9.999999999999456e-309]}

},{}],93:[function(require,module,exports){
module.exports={"expected":[1.0e100,1.0000666488931592e100,1.0001333155581715e100,1.000200000003332e100,1.0002667022369405e100,1.0003334222673028e100,1.0004001601027302e100,1.0004669157515395e100,1.0005336892220528e100,1.0006004805225984e100,1.0006672896615094e100,1.000734116647125e100,1.0008009614877898e100,1.000867824191854e100,1.0009347047676734e100,1.001001603223609e100,1.0010685195680279e100,1.0011354538093028e100,1.0012024059558117e100,1.0012693760159383e100,1.001336363998072e100,1.0014033699106076e100,1.0014703937619457e100,1.0015374355604927e100,1.00160449531466e100,1.0016715730328655e100,1.001738668723532e100,1.0018057823950884e100,1.001872914055969e100,1.0019400637146137e100,1.0020072313794682e100,1.0020744170589842e100,1.0021416207616186e100,1.0022088424958337e100,1.0022760822700983e100,1.0023433400928864e100,1.0024106159726773e100,1.002477909917957e100,1.0025452219372165e100,1.0026125520389523e100,1.0026799002316675e100,1.0027472665238697e100,1.0028146509240734e100,1.0028820534407982e100,1.0029494740825692e100,1.003016912857918e100,1.0030843697753812e100,1.0031518448435014e100,1.003219338070827e100,1.0032868494659125e100,1.0033543790373173e100,1.0034219267936075e100,1.0034894927433541e100,1.0035570768951345e100,1.0036246792575318e100,1.0036922998391344e100,1.0037599386485372e100,1.0038275956943404e100,1.0038952709851501e100,1.0039629645295784e100,1.0040306763362427e100,1.0040984064137669e100,1.0041661547707804e100,1.004233921415918e100,1.004301706357821e100,1.0043695096051364e100,1.0044373311665167e100,1.0045051710506205e100,1.0045730292661122e100,1.004640905821662e100,1.0047088007259462e100,1.0047767139876465e100,1.004844645615451e100,1.0049125956180532e100,1.0049805640041528e100,1.0050485507824556e100,1.0051165559616723e100,1.0051845795505206e100,1.0052526215577237e100,1.0053206819920104e100,1.0053887608621161e100,1.0054568581767815e100,1.0055249739447533e100,1.0055931081747842e100,1.0056612608756334e100,1.0057294320560649e100,1.0057976217248496e100,1.0058658298907639e100,1.0059340565625903e100,1.0060023017491173e100,1.0060705654591393e100,1.0061388477014566e100,1.0062071484848753e100,1.0062754678182082e100,1.0063438057102731e100,1.0064121621698947e100,1.006480537205903e100,1.0065489308271343e100,1.0066173430424312e100,1.0066857738606415e100,1.0067542232906199e100,1.0068226913412265e100,1.006891178021328e100,1.0069596833397964e100,1.0070282073055103e100,1.007096749927354e100,1.0071653112142186e100,1.0072338911749998e100,1.007302489818601e100,1.0073711071539305e100,1.0074397431899034e100,1.00750839793544e100,1.0075770713994679e100,1.0076457635909195e100,1.0077144745187342e100,1.0077832041918572e100,1.00785195261924e100,1.0079207198098397e100,1.0079895057726197e100,1.00805831051655e100,1.0081271340506062e100,1.0081959763837702e100,1.0082648375250301e100,1.00833371748338e100,1.0084026162678203e100,1.0084715338873572e100,1.0085404703510038e100,1.0086094256677785e100,1.0086783998467063e100,1.0087473928968186e100,1.0088164048271522e100,1.008885435646751e100,1.0089544853646647e100,1.009023553989949e100,1.0090926415316657e100,1.0091617479988837e100,1.0092308734006773e100,1.0093000177461267e100,1.0093691810443195e100,1.0094383633043486e100,1.0095075645353133e100,1.0095767847463194e100,1.0096460239464788e100,1.0097152821449093e100,1.0097845593507355e100,1.0098538555730882e100,1.0099231708211039e100,1.0099925051039263e100,1.0100618584307046e100,1.0101312308105945e100,1.010200622252758e100,1.0102700327663638e100,1.0103394623605861e100,1.010408911044606e100,1.0104783788276106e100,1.0105478657187939e100,1.0106173717273555e100,1.0106868968625014e100,1.0107564411334445e100,1.0108260045494036e100,1.010895587119604e100,1.0109651888532774e100,1.0110348097596614e100,1.0111044498480005e100,1.0111741091275454e100,1.011243787607553e100,1.011313485297287e100,1.0113832022060172e100,1.0114529383430196e100,1.0115226937175772e100,1.0115924683389786e100,1.0116622622165193e100,1.0117320753595014e100,1.011801907777233e100,1.0118717594790285e100,1.0119416304742094e100,1.0120115207721033e100,1.0120814303820438e100,1.0121513593133718e100,1.012221307575434e100,1.0122912751775837e100,1.012361262129181e100,1.0124312684395916e100,1.012501294118189e100,1.0125713391743521e100,1.0126414036174667e100,1.012711487456925e100,1.012781590702126e100,1.0128517133624747e100,1.012921855447383e100,1.0129920169662691e100,1.0130621979285578e100,1.0131323983436805e100,1.0132026182210753e100,1.0132728575701864e100,1.0133431164004648e100,1.0134133947213682e100,1.0134836925423603e100,1.013554009872912e100,1.0136243467225006e100,1.01369470310061e100,1.0137650790167303e100,1.0138354744803586e100,1.0139058895009986e100,1.0139763240881604e100,1.0140467782513607e100,1.014117252000123e100,1.0141877453439773e100,1.0142582582924602e100,1.0143287908551152e100,1.014399343041492e100,1.0144699148611473e100,1.0145405063236443e100,1.0146111174385526e100,1.014681748215449e100,1.0147523986639166e100,1.0148230687935455e100,1.0148937586139321e100,1.0149644681346795e100,1.0150351973653978e100,1.0151059463157035e100,1.01517671499522e100,1.0152475034135774e100,1.0153183115804124e100,1.0153891395053685e100,1.0154599871980959e100,1.0155308546682515e100,1.0156017419254992e100,1.0156726489795092e100,1.015743575839959e100,1.015814522516532e100,1.0158854890189193e100,1.0159564753568182e100,1.0160274815399334e100,1.0160985075779754e100,1.0161695534806624e100,1.0162406192577188e100,1.016311704918876e100,1.0163828104738726e100,1.0164539359324534e100,1.0165250813043704e100,1.0165962465993819e100,1.016667431827254e100,1.0167386369977587e100,1.0168098621206755e100,1.0168811072057903e100,1.0169523722628959e100,1.0170236573017922e100,1.0170949623322862e100,1.0171662873641911e100,1.0172376324073274e100,1.0173089974715224e100,1.0173803825666104e100,1.0174517877024325e100,1.0175232128888367e100,1.0175946581356777e100,1.0176661234528177e100,1.0177376088501256e100,1.0178091143374767e100,1.017880639924754e100,1.017952185621847e100,1.0180237514386521e100,1.018095337385073e100,1.0181669434710203e100,1.018238569706411e100,1.0183102161011703e100,1.018381882665229e100,1.0184535694085254e100,1.0185252763410056e100,1.0185970034726215e100,1.0186687508133323e100,1.018740518373105e100,1.0188123061619131e100,1.0188841141897365e100,1.0189559424665633e100,1.0190277910023879e100,1.0190996598072115e100,1.0191715488910434e100,1.0192434582638991e100,1.0193153879358013e100,1.0193873379167798e100,1.019459308216872e100,1.0195312988461215e100,1.0196033098145797e100,1.0196753411323046e100,1.019747392809362e100,1.019819464855824e100,1.0198915572817702e100,1.0199636700972873e100,1.0200358033124695e100,1.0201079569374172e100,1.020180130982239e100,1.02025232545705e100,1.0203245403719728e100,1.0203967757371368e100,1.0204690315626788e100,1.0205413078587429e100,1.0206136046354803e100,1.0206859219030492e100,1.0207582596716152e100,1.0208306179513509e100,1.0209029967524365e100,1.020975396085059e100,1.021047815959413e100,1.0211202563857e100,1.0211927173741289e100,1.0212651989349158e100,1.0213377010782842e100,1.0214102238144647e100,1.021482767153695e100,1.0215553311062204e100,1.0216279156822936e100,1.0217005208921739e100,1.0217731467461287e100,1.021845793254432e100,1.021918460427366e100,1.021991148275219e100,1.0220638568082877e100,1.0221365860368756e100,1.0222093359712933e100,1.0222821066218596e100,1.0223548979989e100,1.0224277101127473e100,1.0225005429737418e100,1.0225733965922315e100,1.022646270978571e100,1.0227191661431234e100,1.0227920820962582e100,1.0228650188483524e100,1.0229379764097912e100,1.0230109547909659e100,1.0230839540022769e100,1.0231569740541304e100,1.023230014956941e100,1.0233030767211303e100,1.0233761593571276e100,1.0234492628753693e100,1.0235223872863e100,1.0235955326003708e100,1.0236686988280413e100,1.0237418859797773e100,1.0238150940660534e100,1.023888323097351e100,1.0239615730841587e100,1.0240348440369733e100,1.0241081359662987e100,1.0241814488826465e100,1.024254782796536e100,1.0243281377184934e100,1.0244015136590528e100,1.0244749106287563e100,1.0245483286381529e100,1.0246217676977992e100,1.02469522781826e100,1.0247687090101067e100,1.0248422112839195e100,1.0249157346502848e100,1.0249892791197978e100,1.0250628447030604e100,1.025136431410683e100,1.025210039253283e100,1.0252836682414854e100,1.025357318385923e100,1.0254309896972363e100,1.0255046821860734e100,1.0255783958630903e100,1.02565213073895e100,1.0257258868243237e100,1.0257996641298901e100,1.025873462666336e100,1.0259472824443548e100,1.0260211234746488e100,1.0260949857679276e100,1.0261688693349084e100,1.0262427741863159e100,1.0263167003328829e100,1.0263906477853498e100,1.0264646165544647e100,1.0265386066509837e100,1.0266126180856703e100,1.0266866508692958e100,1.0267607050126396e100,1.0268347805264884e100,1.0269088774216371e100,1.0269829957088885e100,1.0270571353990524e100,1.0271312965029474e100,1.0272054790313992e100,1.0272796829952415e100,1.027353908405316e100,1.0274281552724723e100,1.0275024236075674e100,1.0275767134214668e100,1.027651024725043e100,1.027725357529177e100,1.027799711844758e100,1.027874087682682e100,1.0279484850538536e100,1.0280229039691854e100,1.0280973444395976e100,1.0281718064760184e100,1.0282462900893838e100,1.0283207952906378e100,1.0283953220907327e100,1.0284698705006279e100,1.0285444405312918e100,1.0286190321936998e100,1.0286936454988357e100,1.0287682804576916e100,1.0288429370812667e100,1.0289176153805691e100,1.0289923153666143e100,1.029067037050426e100,1.029141780443036e100,1.0292165455554838e100,1.0292913323988174e100,1.0293661409840922e100,1.0294409713223725e100,1.0295158234247296e100,1.0295906973022436e100,1.0296655929660028e100,1.0297405104271026e100,1.0298154496966475e100,1.0298904107857497e100,1.0299653937055295e100,1.0300403984671151e100,1.0301154250816428e100,1.0301904735602574e100,1.0302655439141116e100,1.0303406361543663e100,1.0304157502921904e100,1.030490886338761e100,1.0305660443052635e100,1.0306412242028912e100,1.0307164260428456e100,1.0307916498363367e100,1.0308668955945824e100,1.0309421633288086e100,1.0310174530502499e100,1.0310927647701489e100,1.0311680984997562e100,1.0312434542503307e100,1.03131883203314e100,1.031394231859459e100,1.031469653740572e100,1.0315450976877704e100,1.031620563712355e100,1.0316960518256336e100,1.0317715620389233e100,1.0318470943635494e100,1.0319226488108449e100,1.0319982253921513e100,1.032073824118819e100,1.032149445002206e100,1.0322250880536789e100,1.0323007532846124e100,1.0323764407063901e100,1.0324521503304035e100,1.0325278821680526e100,1.0326036362307456e100,1.0326794125298992e100,1.0327552110769385e100,1.0328310318832972e100,1.0329068749604166e100,1.0329827403197476e100,1.0330586279727486e100,1.0331345379308867e100,1.0332104702056373e100,1.0332864248084845e100,1.0333624017509207e100,1.0334384010444467e100,1.0335144227005716e100,1.0335904667308136e100,1.033666533146699e100,1.033742621959762e100,1.0338187331815463e100,1.0338948668236035e100,1.033971022897494e100,1.0340472014147862e100,1.0341234023870575e100,1.034199625825894e100,1.0342758717428898e100,1.034352140149648e100,1.03442843105778e100,1.0345047444789055e100,1.0345810804246538e100,1.0346574389066615e100,1.0347338199365747e100,1.0348102235260478e100,1.0348866496867433e100,1.0349630984303335e100,1.0350395697684983e100,1.0351160637129266e100,1.0351925802753159e100,1.0352691194673723e100,1.0353456813008107e100,1.0354222657873544e100,1.0354988729387357e100,1.0355755027666953e100,1.035652155282983e100,1.035728830499357e100,1.0358055284275838e100,1.0358822490794395e100,1.0359589924667081e100,1.0360357586011831e100,1.036112547494666e100,1.0361893591589676e100,1.0362661936059073e100,1.036343050847313e100,1.0364199308950217e100,1.0364968337608789e100,1.0365737594567394e100,1.0366507079944662e100,1.0367276793859315e100,1.036804673643016e100,1.0368816907776098e100,1.036958730801611e100,1.0370357937269273e100,1.0371128795654747e100,1.0371899883291787e100,1.0372671200299727e100,1.0373442746798e100,1.0374214522906121e100,1.0374986528743697e100,1.0375758764430424e100,1.0376531230086087e100,1.0377303925830558e100,1.0378076851783798e100,1.0378850008065866e100,1.0379623394796894e100,1.0380397012097122e100,1.0381170860086867e100,1.038194493888654e100,1.0382719248616639e100,1.038349378939776e100,1.0384268561350576e100,1.0385043564595866e100,1.0385818799254484e100,1.0386594265447382e100,1.0387369963295603e100,1.0388145892920274e100,1.0388922054442623e100,1.038969844798396e100,1.0390475073665686e100,1.0391251931609299e100,1.039202902193638e100,1.0392806344768608e100,1.0393583900227748e100,1.0394361688435659e100,1.0395139709514291e100,1.0395917963585681e100,1.0396696450771965e100,1.0397475171195364e100,1.0398254124978194e100,1.039903331224286e100,1.0399812733111862e100,1.040059238770779e100,1.0401372276153326e100,1.0402152398571242e100,1.0402932755084409e100,1.040371334581578e100,1.040449417088841e100,1.040527523042544e100,1.0406056524550104e100,1.0406838053385735e100,1.0407619817055747e100,1.040840181568366e100,1.0409184049393076e100,1.0409966518307695e100,1.041074922255131e100,1.0411532162247808e100,1.0412315337521164e100,1.041309874849545e100,1.0413882395294836e100,1.0414666278043574e100,1.041545039686602e100,1.0416234751886622e100,1.0417019343229913e100,1.041780417102053e100,1.0418589235383204e100,1.041937453644275e100,1.0420160074324086e100,1.0420945849152221e100,1.0421731861052263e100,1.0422518110149404e100,1.042330459656894e100,1.0424091320436257e100,1.042487828187684e100,1.0425665481016264e100,1.0426452917980197e100,1.0427240592894412e100,1.0428028505884767e100,1.0428816657077218e100,1.0429605046597817e100,1.0430393674572715e100,1.043118254112815e100,1.0431971646390464e100,1.0432760990486085e100,1.043355057354155e100,1.043434039568348e100,1.0435130457038593e100,1.0435920757733712e100,1.0436711297895746e100,1.0437502077651708e100,1.0438293097128703e100,1.0439084356453926e100,1.0439875855754685e100,1.0440667595158368e100,1.0441459574792469e100,1.0442251794784578e100,1.0443044255262377e100,1.0443836956353648e100,1.0444629898186274e100,1.0445423080888226e100,1.0446216504587582e100,1.044701016941251e100,1.0447804075491276e100,1.0448598222952247e100,1.0449392611923892e100,1.0450187242534762e100,1.0450982114913524e100,1.045177722918893e100,1.0452572585489834e100,1.045336818394519e100,1.0454164024684049e100,1.0454960107835558e100,1.0455756433528968e100,1.0456553001893623e100,1.0457349813058965e100,1.0458146867154541e100,1.0458944164309992e100,1.0459741704655056e100,1.0460539488319573e100,1.0461337515433485e100,1.0462135786126829e100,1.0462934300529739e100,1.0463733058772452e100,1.0464532060985307e100,1.0465331307298738e100,1.046613079784328e100,1.0466930532749566e100,1.0467730512148333e100,1.0468530736170415e100,1.0469331204946745e100,1.047013191860836e100,1.0470932877286394e100,1.0471734081112083e100,1.0472535530216762e100,1.0473337224731868e100,1.0474139164788938e100,1.047494135051961e100,1.0475743782055618e100,1.0476546459528811e100,1.047734938307112e100,1.0478152552814593e100,1.0478955968891367e100,1.0479759631433695e100,1.0480563540573915e100,1.0481367696444475e100,1.048217209917793e100,1.0482976748906922e100,1.0483781645764212e100,1.0484586789882647e100,1.048539218139519e100,1.0486197820434896e100,1.0487003707134925e100,1.0487809841628542e100,1.0488616224049115e100,1.0489422854530107e100,1.0490229733205094e100,1.049103686020775e100,1.0491844235671846e100,1.0492651859731267e100,1.0493459732519992e100,1.0494267854172108e100,1.0495076224821807e100,1.0495884844603378e100,1.0496693713651219e100,1.0497502832099829e100,1.049831220008381e100,1.0499121817737872e100,1.0499931685196824e100,1.050074180259558e100,1.0501552170069163e100,1.0502362787752695e100,1.0503173655781402e100,1.0503984774290616e100,1.0504796143415776e100,1.0505607763292422e100,1.05064196340562e100,1.050723175584286e100,1.0508044128788262e100,1.0508856753028362e100,1.0509669628699227e100,1.0510482755937033e100,1.0511296134878051e100,1.0512109765658666e100,1.0512923648415367e100,1.0513737783284745e100,1.05145521704035e100,1.0515366809908439e100,1.051618170193647e100,1.0516996846624614e100,1.0517812244109992e100,1.0518627894529836e100,1.051944379802148e100,1.0520259954722368e100,1.0521076364770052e100,1.0521893028302186e100,1.0522709945456534e100,1.0523527116370965e100,1.0524344541183458e100,1.05251622200321e100,1.0525980153055076e100,1.0526798340390689e100,1.0527616782177347e100,1.0528435478553563e100,1.052925442965796e100,1.0530073635629268e100,1.0530893096606325e100,1.0531712812728074e100,1.0532532784133576e100,1.0533353010961987e100,1.0534173493352582e100,1.0534994231444737e100,1.0535815225377943e100,1.0536636475291797e100,1.0537457981326e100,1.0538279743620374e100,1.0539101762314835e100,1.0539924037549423e100,1.0540746569464273e100,1.0541569358199643e100,1.0542392403895889e100,1.0543215706693486e100,1.0544039266733009e100,1.0544863084155154e100,1.0545687159100716e100,1.054651149171061e100,1.0547336082125853e100,1.0548160930487575e100,1.054898603693702e100,1.0549811401615537e100,1.0550637024664591e100,1.0551462906225751e100,1.0552289046440703e100,1.0553115445451242e100,1.0553942103399275e100,1.0554769020426816e100,1.0555596196675995e100,1.0556423632289049e100,1.0557251327408334e100,1.055807928217631e100,1.0558907496735549e100,1.0559735971228742e100,1.0560564705798686e100,1.0561393700588293e100,1.0562222955740582e100,1.056305247139869e100,1.0563882247705866e100,1.0564712284805467e100,1.0565542582840967e100,1.0566373141955953e100,1.0567203962294121e100,1.0568035043999284e100,1.0568866387215367e100,1.0569697992086407e100,1.0570529858756558e100,1.0571361987370078e100,1.0572194378071349e100,1.0573027031004864e100,1.0573859946315227e100,1.0574693124147161e100,1.0575526564645495e100,1.057636026795518e100,1.0577194234221277e100,1.0578028463588965e100,1.0578862956203532e100,1.0579697712210385e100,1.0580532731755043e100,1.0581368014983147e100,1.0582203562040443e100,1.0583039373072794e100,1.0583875448226188e100,1.0584711787646716e100,1.058554839148059e100,1.058638525987414e100,1.0587222392973806e100,1.058805979092615e100,1.0588897453877843e100,1.0589735381975678e100,1.0590573575366561e100,1.0591412034197516e100,1.0592250758615684e100,1.059308974876832e100,1.0593929004802797e100,1.0594768526866603e100,1.0595608315107345e100,1.059644836967275e100,1.0597288690710656e100,1.0598129278369023e100,1.0598970132795924e100,1.0599811254139555e100,1.060065264254822e100,1.0601494298170358e100,1.0602336221154506e100,1.0603178411649332e100,1.060402086980362e100,1.0604863595766267e100,1.0605706589686294e100,1.0606549851712837e100,1.0607393381995154e100,1.060823718068262e100,1.0609081247924728e100,1.0609925583871087e100,1.0610770188671434e100,1.0611615062475616e100,1.0612460205433607e100,1.0613305617695495e100,1.0614151299411487e100,1.0614997250731915e100,1.0615843471807229e100,1.0616689962787993e100,1.06175367238249e100,1.061838375506876e100,1.0619231056670498e100,1.0620078628781166e100,1.062092647155194e100,1.0621774585134104e100,1.062262296967907e100,1.0623471625338375e100,1.0624320552263673e100,1.0625169750606736e100,1.0626019220519467e100,1.0626868962153878e100,1.0627718975662112e100,1.0628569261196427e100,1.0629419818909209e100,1.0630270648952964e100,1.0631121751480319e100,1.0631973126644025e100,1.063282477459695e100,1.063367669549209e100,1.0634528889482566e100,1.0635381356721613e100,1.0636234097362596e100,1.0637087111559e100,1.0637940399464434e100,1.063879396123263e100,1.0639647797017444e100,1.0640501906972856e100,1.0641356291252968e100,1.0642210950012003e100,1.0643065883404316e100,1.064392109158438e100,1.064477657470679e100,1.0645632332926274e100,1.0646488366397677e100,1.0647344675275969e100,1.0648201259716248e100,1.0649058119873738e100,1.064991525590378e100,1.0650772667961847e100,1.0651630356203537e100,1.065248832078457e100,1.0653346561860794e100,1.065420507958818e100,1.0655063874122831e100,1.0655922945620966e100,1.065678229423894e100,1.0657641920133225e100,1.065850182346043e100,1.0659362004377276e100,1.0660222463040624e100,1.0661083199607457e100,1.066194421423488e100,1.0662805507080132e100,1.0663667078300576e100,1.0664528928053699e100,1.0665391056497122e100,1.066625346378859e100,1.0667116150085975e100,1.0667979115547274e100,1.0668842360330618e100,1.0669705884594263e100,1.0670569688496595e100,1.0671433772196123e100,1.0672298135851491e100,1.0673162779621466e100,1.0674027703664946e100,1.067489290814096e100,1.0675758393208662e100,1.0676624159027339e100,1.0677490205756403e100,1.0678356533555398e100,1.0679223142583997e100,1.0680090033002003e100,1.0680957204969347e100,1.0681824658646092e100,1.0682692394192432e100,1.0683560411768684e100,1.0684428711535306e100,1.068529729365288e100,1.0686166158282119e100,1.0687035305583865e100,1.0687904735719098e100,1.0688774448848919e100,1.0689644445134571e100,1.0690514724737418e100,1.0691385287818961e100,1.0692256134540834e100,1.0693127265064798e100,1.0693998679552748e100,1.0694870378166713e100,1.069574236106885e100,1.069661462842145e100,1.069748718038694e100,1.0698360017127874e100,1.0699233138806941e100,1.0700106545586964e100,1.0700980237630896e100,1.0701854215101826e100,1.0702728478162975e100,1.0703603026977697e100,1.070447786170948e100,1.0705352982521946e100,1.070622838957885e100,1.0707104083044081e100,1.0707980063081663e100,1.0708856329855756e100,1.0709732883530647e100,1.0710609724270765e100,1.0711486852240672e100,1.0712364267605064e100,1.071324197052877e100,1.0714119961176757e100,1.0714998239714126e100,1.0715876806306118e100,1.0716755661118098e100,1.0717634804315575e100,1.07185142360642e100,1.071939395652974e100,1.0720273965878124e100,1.0721154264275395e100,1.0722034851887742e100,1.0722915728881495e100,1.072379689542311e100,1.0724678351679191e100,1.0725560097816467e100,1.0726442134001814e100,1.072732446040224e100,1.0728207077184894e100,1.0729089984517058e100,1.0729973182566157e100,1.073085667149975e100,1.0731740451485534e100,1.0732624522691348e100,1.0733508885285166e100,1.0734393539435099e100,1.0735278485309398e100,1.0736163723076458e100,1.0737049252904807e100,1.073793507496311e100,1.0738821189420177e100,1.0739707596444955e100,1.0740594296206529e100,1.0741481288874127e100,1.0742368574617113e100,1.0743256153604992e100,1.0744144026007413e100,1.074503219199416e100,1.074592065173516e100,1.0746809405400479e100,1.0747698453160326e100,1.0748587795185046e100,1.0749477431645133e100,1.0750367362711216e100,1.0751257588554068e100,1.07521481093446e100,1.0753038925253869e100,1.075393003645307e100,1.0754821443113542e100,1.0755713145406767e100,1.0756605143504367e100,1.075749743757811e100,1.07583900277999e100,1.0759282914341787e100,1.0760176097375968e100,1.0761069577074777e100,1.0761963353610694e100,1.0762857427156342e100,1.0763751797884487e100,1.0764646465968038e100,1.0765541431580049e100,1.0766436694893718e100,1.0767332256082386e100,1.0768228115319539e100,1.0769124272778806e100,1.0770020728633966e100,1.0770917483058931e100,1.077181453622777e100,1.077271188831469e100,1.0773609539494047e100,1.0774507489940342e100,1.077540573982822e100,1.0776304289332466e100,1.0777203138628025e100,1.0778102287889972e100,1.077900173729354e100,1.0779901487014104e100,1.0780801537227181e100,1.0781701888108444e100,1.0782602539833708e100,1.078350349257893e100,1.0784404746520221e100,1.0785306301833837e100,1.078620815869618e100,1.0787110317283805e100,1.0788012777773406e100,1.0788915540341829e100,1.078981860516607e100,1.0790721972423273e100,1.0791625642290726e100,1.0792529614945873e100,1.0793433890566296e100,1.0794338469329736e100,1.0795243351414077e100,1.0796148536997357e100,1.0797054026257756e100,1.0797959819373611e100,1.0798865916523404e100,1.079977231788577e100,1.0800679023639492e100,1.0801586033963502e100,1.0802493349036885e100,1.0803400969038873e100,1.0804308894148854e100,1.0805217124546362e100,1.0806125660411084e100,1.0807034501922858e100,1.0807943649261673e100,1.0808853102607667e100,1.0809762862141135e100,1.0810672928042521e100,1.0811583300492419e100,1.0812493979671577e100,1.0813404965760898e100,1.081431625894143e100,1.081522785939438e100,1.0816139767301112e100,1.081705198284313e100,1.0817964506202099e100,1.0818877337559837e100,1.0819790477098318e100,1.0820703924999664e100,1.0821617681446153e100,1.0822531746620217e100,1.0823446120704445e100,1.0824360803881574e100,1.08252757963345e100,1.082619109824628e100,1.0827106709800107e100,1.0828022631179348e100,1.0828938862567516e100,1.0829855404148283e100,1.0830772256105472e100,1.0831689418623063e100,1.0832606891885197e100,1.0833524676076166e100,1.0834442771380419e100,1.0835361177982558e100,1.0836279896067352e100,1.0837198925819716e100,1.0838118267424725e100,1.0839037921067613e100,1.083995788693377e100,1.0840878165208746e100,1.0841798756078242e100,1.084271965972812e100,1.0843640876344405e100,1.0844562406113272e100,1.084548424922106e100,1.0846406405854265e100,1.0847328876199539e100,1.0848251660443695e100,1.0849174758773706e100,1.0850098171376703e100,1.0851021898439974e100,1.085194594015097e100,1.08528702966973e100,1.0853794968266738e100,1.0854719955047207e100,1.0855645257226797e100,1.0856570874993758e100,1.0857496808536505e100,1.0858423058043605e100,1.085934962370379e100,1.0860276505705952e100,1.086120370423915e100,1.0862131219492598e100,1.0863059051655671e100,1.0863987200917909e100,1.0864915667469014e100,1.086584445149885e100,1.0866773553197444e100,1.086770297275498e100,1.0868632710361812e100,1.0869562766208454e100,1.087049314048558e100,1.0871423833384037e100,1.0872354845094823e100,1.0873286175809101e100,1.0874217825718212e100,1.0875149795013646e100,1.0876082083887062e100,1.0877014692530284e100,1.08779476211353e100,1.087888086989426e100,1.0879814438999488e100,1.0880748328643461e100,1.0881682539018832e100,1.0882617070318409e100,1.0883551922735175e100,1.0884487096462272e100,1.0885422591693015e100,1.0886358408620877e100,1.0887294547439504e100,1.0888231008342705e100,1.0889167791524456e100,1.0890104897178903e100,1.0891042325500354e100,1.089198007668329e100,1.0892918150922354e100,1.0893856548412362e100,1.089479526934829e100,1.0895734313925295e100,1.0896673682338687e100,1.0897613374783958e100,1.089855339145676e100,1.0899493732552913e100,1.0900434398268416e100,1.0901375388799426e100,1.0902316704342274e100,1.0903258345093462e100,1.090420031124966e100,1.0905142603007707e100,1.0906085220564618e100,1.0907028164117566e100,1.0907971433863909e100,1.0908915030001166e100,1.0909858952727027e100,1.0910803202239362e100,1.0911747778736201e100,1.0912692682415757e100,1.0913637913476405e100,1.091458347211669e100,1.0915529358535343e100,1.0916475572931255e100,1.0917422115503491e100,1.0918368986451292e100,1.0919316185974073e100,1.0920263714271417e100,1.0921211571543086e100,1.0922159757989008e100,1.0923108273809292e100,1.0924057119204215e100,1.0925006294374235e100,1.0925955799519976e100,1.0926905634842243e100,1.0927855800542013e100,1.0928806296820436e100,1.0929757123878838e100,1.0930708281918723e100,1.093165977114177e100,1.0932611591749829e100,1.093356374394493e100,1.0934516227929278e100,1.0935469043905254e100,1.0936422192075415e100,1.0937375672642494e100,1.0938329485809406e100,1.0939283631779234e100,1.0940238110755247e100,1.0941192922940883e100,1.0942148068539767e100,1.0943103547755691e100,1.0944059360792636e100,1.0945015507854754e100,1.0945971989146377e100,1.0946928804872017e100,1.0947885955236363e100,1.0948843440444286e100,1.0949801260700832e100,1.0950759416211228e100,1.0951717907180883e100,1.0952676733815384e100,1.0953635896320495e100,1.0954595394902167e100,1.0955555229766527e100,1.0956515401119881e100,1.0957475909168721e100,1.0958436754119717e100,1.0959397936179722e100,1.0960359455555763e100,1.096132131245506e100,1.0962283507085007e100,1.0963246039653188e100,1.0964208910367358e100,1.0965172119435461e100,1.0966135667065628e100,1.0967099553466165e100,1.0968063778845564e100,1.09690283434125e100,1.0969993247375837e100,1.0970958490944614e100,1.097192407432806e100,1.0972889997735582e100,1.0973856261376783e100,1.0974822865461439e100,1.0975789810199513e100,1.097675709580116e100,1.0977724722476712e100,1.097869269043669e100,1.0979660999891803e100,1.0980629651052943e100,1.0981598644131184e100,1.0982567979337797e100,1.098353765688423e100,1.0984507676982122e100,1.09854780398433e100,1.098644874567977e100,1.098741979470374e100,1.0988391187127592e100,1.09893629231639e100,1.0990335003025433e100,1.0991307426925139e100,1.0992280195076154e100,1.0993253307691814e100,1.099422676498563e100,1.0995200567171313e100,1.0996174714462757e100,1.0997149207074048e100,1.099812404521946e100,1.0999099229113459e100,1.1000074758970703e100,1.100105063500603e100,1.1002026857434489e100,1.1003003426471295e100,1.1003980342331875e100,1.1004957605231834e100,1.1005935215386973e100,1.1006913173013291e100,1.1007891478326967e100,1.1008870131544382e100,1.1009849132882102e100,1.1010828482556894e100,1.1011808180785708e100,1.1012788227785697e100,1.1013768623774198e100,1.1014749368968752e100,1.1015730463587082e100,1.1016711907847114e100,1.1017693701966966e100,1.1018675846164945e100,1.1019658340659563e100,1.102064118566952e100,1.1021624381413708e100,1.1022607928111219e100,1.1023591825981345e100,1.1024576075243565e100,1.1025560676117558e100,1.1026545628823203e100,1.1027530933580568e100,1.102851659060992e100,1.1029502600131727e100,1.1030488962366651e100,1.1031475677535553e100,1.1032462745859487e100,1.1033450167559712e100,1.1034437942857677e100,1.1035426071975039e100,1.1036414555133644e100,1.1037403392555542e100,1.1038392584462983e100,1.1039382131078412e100,1.1040372032624476e100,1.1041362289324022e100,1.1042352901400095e100,1.1043343869075946e100,1.1044335192575014e100,1.1045326872120954e100,1.104631890793761e100,1.1047311300249033e100,1.1048304049279474e100,1.1049297155253386e100,1.1050290618395421e100,1.1051284438930437e100,1.1052278617083494e100,1.105327315307985e100,1.1054268047144969e100,1.105526329950452e100,1.1056258910384371e100,1.1057254880010597e100,1.1058251208609476e100,1.1059247896407486e100,1.1060244943631317e100,1.1061242350507853e100,1.1062240117264194e100,1.1063238244127635e100,1.1064236731325682e100,1.1065235579086049e100,1.1066234787636642e100,1.1067234357205592e100,1.1068234288021219e100,1.1069234580312063e100,1.1070235234306862e100,1.1071236250234562e100,1.1072237628324318e100,1.1073239368805493e100,1.1074241471907654e100,1.107524393786058e100,1.1076246766894255e100,1.1077249959238872e100,1.1078253515124836e100,1.1079257434782754e100,1.1080261718443447e100,1.1081266366337944e100,1.1082271378697484e100,1.1083276755753515e100,1.1084282497737697e100,1.1085288604881894e100,1.1086295077418193e100,1.1087301915578876e100,1.1088309119596447e100,1.1089316689703618e100,1.1090324626133316e100,1.1091332929118675e100,1.1092341598893038e100,1.109335063568997e100,1.109436003974324e100,1.1095369811286835e100,1.1096379950554953e100,1.1097390457782006e100,1.1098401333202619e100,1.1099412577051628e100,1.1100424189564087e100,1.1101436170975267e100,1.1102448521520642e100,1.1103461241435916e100,1.1104474330956996e100,1.1105487790320009e100,1.1106501619761299e100,1.1107515819517422e100,1.1108530389825153e100,1.1109545330921484e100,1.1110560643043622e100,1.1111576326428988e100,1.1112592381315224e100,1.1113608807940192e100,1.1114625606541966e100,1.1115642777358839e100,1.1116660320629322e100,1.1117678236592147e100,1.1118696525486264e100,1.1119715187550837e100,1.112073422302526e100,1.1121753632149136e100,1.112277341516229e100,1.1123793572304767e100,1.112481410381684e100,1.112583500993899e100,1.1126856290911927e100,1.1127877946976581e100,1.11288999783741e100,1.1129922385345856e100,1.1130945168133443e100,1.1131968326978676e100,1.1132991862123594e100,1.1134015773810456e100,1.1135040062281745e100,1.1136064727780171e100,1.113708977054866e100,1.1138115190830365e100,1.1139140988868667e100,1.1140167164907167e100,1.1141193719189687e100,1.1142220651960282e100,1.1143247963463229e100,1.1144275653943023e100,1.1145303723644397e100,1.1146332172812302e100,1.1147361001691918e100,1.1148390210528644e100,1.1149419799568117e100,1.1150449769056194e100,1.1151480119238962e100,1.1152510850362732e100,1.1153541962674048e100,1.1154573456419677e100,1.1155605331846616e100,1.1156637589202092e100,1.1157670228733557e100,1.11587032506887e100,1.1159736655315426e100,1.1160770442861887e100,1.116180461357645e100,1.1162839167707716e100,1.1163874105504523e100,1.1164909427215935e100,1.1165945133091245e100,1.1166981223379982e100,1.1168017698331902e100,1.1169054558196994e100,1.1170091803225484e100,1.1171129433667822e100,1.1172167449774698e100,1.1173205851797031e100,1.1174244639985977e100,1.1175283814592922e100,1.1176323375869485e100,1.1177363324067524e100,1.1178403659439126e100,1.117944438223662e100,1.118048549271256e100,1.1181526991119742e100,1.1182568877711195e100,1.118361115274019e100,1.1184653816460222e100,1.1185696869125034e100,1.1186740310988603e100,1.1187784142305135e100,1.1188828363329082e100,1.1189872974315133e100,1.1190917975518212e100,1.1191963367193481e100,1.119300914959634e100,1.119405532298243e100,1.1195101887607633e100,1.1196148843728064e100,1.1197196191600084e100,1.1198243931480285e100,1.1199292063625512e100,1.120034058829284e100,1.1201389505739588e100,1.1202438816223318e100,1.120348852000183e100,1.1204538617333165e100,1.1205589108475616e100,1.1206639993687701e100,1.1207691273228197e100,1.1208742947356112e100,1.1209795016330704e100,1.1210847480411473e100,1.1211900339858163e100,1.1212953594930756e100,1.1214007245889487e100,1.1215061292994831e100,1.1216115736507513e100,1.1217170576688491e100,1.1218225813798981e100,1.121928144810044e100,1.1220337479854574e100,1.1221393909323326e100,1.12224507367689e100,1.1223507962453734e100,1.122456558664052e100,1.12256236095922e100,1.1226682031571954e100,1.1227740852843223e100,1.1228800073669687e100,1.1229859694315278e100,1.1230919715044176e100,1.1231980136120814e100,1.123304095780987e100,1.1234102180376274e100,1.123516380408521e100,1.1236225829202105e100,1.1237288255992643e100,1.1238351084722758e100,1.1239414315658637e100,1.1240477949066714e100,1.124154198521368e100,1.1242606424366475e100,1.1243671266792296e100,1.1244736512758589e100,1.1245802162533055e100,1.124686821638365e100,1.1247934674578583e100,1.1249001537386317e100,1.125006880507557e100,1.1251136477915317e100,1.1252204556174785e100,1.1253273040123459e100,1.1254341930031076e100,1.1255411226167638e100,1.1256480928803394e100,1.1257551038208853e100,1.1258621554654787e100,1.1259692478412215e100,1.1260763809752427e100,1.1261835548946956e100,1.1262907696267606e100,1.1263980251986434e100,1.1265053216375757e100,1.1266126589708152e100,1.1267200372256456e100,1.1268274564293764e100,1.1269349166093436e100,1.1270424177929088e100,1.12714996000746e100,1.127257543280411e100,1.1273651676392022e100,1.1274728331113003e100,1.1275805397241975e100,1.1276882875054127e100,1.1277960764824917e100,1.1279039066830056e100,1.1280117781345523e100,1.1281196908647565e100,1.1282276449012685e100,1.128335640271766e100,1.1284436770039524e100,1.1285517551255583e100,1.1286598746643403e100,1.1287680356480818e100,1.1288762381045931e100,1.128984482061711e100,1.1290927675472984e100,1.129201094589246e100,1.1293094632154707e100,1.1294178734539162e100,1.1295263253325528e100,1.1296348188793781e100,1.1297433541224165e100,1.1298519310897193e100,1.1299605498093647e100,1.1300692103094579e100,1.1301779126181314e100,1.130286656763544e100,1.1303954427738827e100,1.130504270677361e100,1.1306131405022193e100,1.130722052276726e100,1.1308310060291758e100,1.1309400017878917e100,1.1310490395812231e100,1.1311581194375474e100,1.1312672413852688e100,1.1313764054528193e100,1.1314856116686583e100,1.1315948600612728e100,1.1317041506591768e100,1.1318134834909122e100,1.1319228585850485e100,1.132032275970183e100,1.1321417356749407e100,1.132251237727973e100,1.1323607821579609e100,1.132470368993612e100,1.1325799982636621e100,1.1326896699968748e100,1.1327993842220412e100,1.1329091409679805e100,1.1330189402635405e100,1.1331287821375956e100,1.1332386666190494e100,1.1333485937368331e100,1.133458563519906e100,1.1335685759972552e100,1.1336786311978964e100,1.1337887291508734e100,1.133898869885258e100,1.1340090534301506e100,1.1341192798146794e100,1.134229549068001e100,1.1343398612193013e100,1.134450216297793e100,1.1345606143327184e100,1.1346710553533477e100,1.1347815393889802e100,1.1348920664689433e100,1.1350026366225926e100,1.1351132498793132e100,1.1352239062685184e100,1.1353346058196497e100,1.1354453485621784e100,1.1355561345256034e100,1.1356669637394534e100,1.135777836233285e100,1.1358887520366844e100,1.1359997111792663e100,1.1361107136906746e100,1.1362217596005822e100,1.1363328489386902e100,1.1364439817347301e100,1.1365551580184616e100,1.1366663778196734e100,1.136777641168184e100,1.1368889480938406e100,1.1370002986265197e100,1.1371116927961275e100,1.1372231306325989e100,1.1373346121658985e100,1.13744613742602e100,1.1375577064429872e100,1.1376693192468524e100,1.1377809758676982e100,1.1378926763356363e100,1.1380044206808079e100,1.138116208933384e100,1.1382280411235654e100,1.1383399172815826e100,1.1384518374376955e100,1.1385638016221934e100,1.1386758098653967e100,1.1387878621976542e100,1.1388999586493456e100,1.13901209925088e100,1.1391242840326964e100,1.139236513025264e100,1.1393487862590823e100,1.1394611037646802e100,1.1395734655726173e100,1.139685871713483e100,1.139798322217897e100,1.1399108171165092e100,1.1400233564399996e100,1.140135940219079e100,1.140248568484488e100,1.1403612412669977e100,1.14047395859741e100,1.1405867205065566e100,1.1406995270253002e100,1.1408123781845338e100,1.1409252740151811e100,1.1410382145481963e100,1.1411511998145644e100,1.1412642298453012e100,1.1413773046714525e100,1.1414904243240958e100,1.1416035888343388e100,1.1417167982333203e100,1.14183005255221e100,1.1419433518222085e100,1.1420566960745473e100,1.1421700853404891e100,1.1422835196513273e100,1.1423969990383863e100,1.1425105235330225e100,1.1426240931666225e100,1.1427377079706046e100,1.1428513679764185e100,1.1429650732155444e100,1.1430788237194949e100,1.1431926195198128e100,1.1433064606480735e100,1.143420347135883e100,1.1435342790148794e100,1.1436482563167317e100,1.143762279073141e100,1.1438763473158398e100,1.143990461076592e100,1.1441046203871939e100,1.1442188252794727e100,1.144333075785288e100,1.1444473719365308e100,1.1445617137651244e100,1.144676101303024e100,1.144790534582216e100,1.1449050136347194e100,1.1450195384925852e100,1.1451341091878967e100,1.1452487257527685e100,1.1453633882193485e100,1.1454780966198158e100,1.145592850986382e100,1.1457076513512911e100,1.1458224977468195e100,1.1459373902052759e100,1.1460523287590014e100,1.1461673134403693e100,1.146282344281786e100,1.1463974213156897e100,1.1465125445745516e100,1.1466277140908756e100,1.146742929897198e100,1.1468581920260875e100,1.1469735005101467e100,1.1470888553820096e100,1.147204256674344e100,1.1473197044198503e100,1.1474351986512616e100,1.1475507394013439e100,1.1476663267028968e100,1.1477819605887525e100,1.1478976410917764e100,1.1480133682448668e100,1.1481291420809554e100,1.1482449626330073e100,1.1483608299340204e100,1.1484767440170264e100,1.1485927049150899e100,1.1487087126613093e100,1.148824767288816e100,1.1489408688307754e100,1.1490570173203861e100,1.1491732127908803e100,1.149289455275524e100,1.1494057448076163e100,1.1495220814204906e100,1.1496384651475142e100,1.1497548960220875e100,1.1498713740776451e100,1.1499878993476557e100,1.1501044718656213e100,1.1502210916650787e100,1.1503377587795981e100,1.150454473242784e100,1.1505712350882749e100,1.1506880443497435e100,1.1508049010608965e100,1.1509218052554756e100,1.1510387569672557e100,1.1511557562300467e100,1.1512728030776928e100,1.1513898975440728e100,1.151507039663099e100,1.1516242294687197e100,1.1517414669949165e100,1.1518587522757065e100,1.1519760853451407e100,1.1520934662373054e100,1.1522108949863212e100,1.1523283716263441e100,1.152445896191564e100,1.1525634687162063e100,1.1526810892345313e100,1.1527987577808344e100,1.1529164743894456e100,1.1530342390947303e100,1.1531520519310887e100,1.1532699129329567e100,1.1533878221348049e100,1.1535057795711388e100,1.1536237852765005e100,1.1537418392854665e100,1.1538599416326488e100,1.1539780923526946e100,1.1540962914802872e100,1.154214539050145e100,1.1543328350970223e100,1.1544511796557086e100,1.1545695727610295e100,1.154688014447846e100,1.154806504751055e100,1.1549250437055895e100,1.1550436313464178e100,1.1551622677085448e100,1.1552809528270105e100,1.1553996867368919e100,1.1555184694733011e100,1.155637301071387e100,1.1557561815663344e100,1.1558751109933646e100,1.1559940893877344e100,1.156113116784738e100,1.1562321932197046e100,1.156351318728001e100,1.15647049334503e100,1.1565897171062308e100,1.1567089900470795e100,1.1568283122030878e100,1.1569476836098059e100,1.1570671043028183e100,1.1571865743177486e100,1.1573060936902554e100,1.1574256624560352e100,1.1575452806508212e100,1.1576649483103827e100,1.1577846654705273e100,1.157904432167099e100,1.1580242484359786e100,1.1581441143130844e100,1.1582640298343722e100,1.158383995035834e100,1.1585040099535004e100,1.1586240746234384e100,1.1587441890817525e100,1.1588643533645855e100,1.1589845675081165e100,1.1591048315485627e100,1.159225145522179e100,1.1593455094652577e100,1.1594659234141292e100,1.159586387405161e100,1.1597069014747587e100,1.1598274656593662e100,1.1599480799954644e100,1.160068744519573e100,1.1601894592682494e100,1.1603102242780886e100,1.1604310395857243e100,1.1605519052278285e100,1.1606728212411105e100,1.1607937876623188e100,1.1609148045282396e100,1.1610358718756981e100,1.1611569897415568e100,1.1612781581627182e100,1.1613993771761219e100,1.1615206468187468e100,1.1616419671276107e100,1.161763338139769e100,1.161884759892317e100,1.162006232422388e100,1.1621277557671549e100,1.1622493299638282e100,1.1623709550496588e100,1.1624926310619358e100,1.1626143580379875e100,1.1627361360151811e100,1.1628579650309233e100,1.1629798451226595e100,1.1631017763278754e100,1.1632237586840948e100,1.1633457922288814e100,1.1634678769998385e100,1.1635900130346086e100,1.1637122003708736e100,1.1638344390463554e100,1.1639567290988154e100,1.1640790705660545e100,1.1642014634859134e100,1.1643239078962727e100,1.164446403835053e100,1.1645689513402143e100,1.1646915504497571e100,1.1648142012017215e100,1.1649369036341881e100,1.1650596577852774e100,1.1651824636931497e100,1.1653053213960067e100,1.1654282309320887e100,1.1655511923396776e100,1.1656742056570955e100,1.165797270922705e100,1.1659203881749086e100,1.1660435574521497e100,1.166166778792913e100,1.1662900522357228e100,1.166413377819145e100,1.1665367555817857e100,1.1666601855622922e100,1.1667836677993522e100,1.1669072023316953e100,1.1670307891980914e100,1.1671544284373517e100,1.1672781200883282e100,1.1674018641899146e100,1.1675256607810457e100,1.167649509900697e100,1.1677734115878864e100,1.1678973658816724e100,1.1680213728211555e100,1.168145432445477e100,1.1682695447938209e100,1.1683937099054116e100,1.1685179278195164e100,1.1686421985754436e100,1.1687665222125431e100,1.1688908987702075e100,1.1690153282878707e100,1.1691398108050089e100,1.1692643463611401e100,1.1693889349958247e100,1.169513576748665e100,1.1696382716593059e100,1.169763019767434e100,1.1698878211127787e100,1.1700126757351115e100,1.170137583674247e100,1.1702625449700416e100,1.170387559662394e100,1.1705126277912469e100,1.1706377493965843e100,1.1707629245184336e100,1.170888153196865e100,1.1710134354719917e100,1.1711387713839695e100,1.1712641609729968e100,1.1713896042793164e100,1.171515101343213e100,1.1716406522050148e100,1.1717662569050935e100,1.1718919154838634e100,1.1720176279817834e100,1.1721433944393548e100,1.1722692148971222e100,1.1723950893956746e100,1.1725210179756441e100,1.1726470006777065e100,1.1727730375425811e100,1.1728991286110319e100,1.1730252739238652e100,1.1731514735219327e100,1.1732777274461292e100,1.1734040357373939e100,1.1735303984367095e100,1.173656815585104e100,1.1737832872236485e100,1.1739098133934585e100,1.1740363941356946e100,1.1741630294915612e100,1.1742897195023071e100,1.174416464209226e100,1.1745432636536556e100,1.174670117876979e100,1.1747970269206235e100,1.1749239908260612e100,1.1750510096348092e100,1.1751780833884296e100,1.175305212128529e100,1.1754323958967595e100,1.1755596347348181e100,1.175686928684447e100,1.1758142777874332e100,1.1759416820856098e100,1.1760691416208548e100,1.1761966564350913e100,1.1763242265702882e100,1.17645185206846e100,1.1765795329716665e100,1.1767072693220138e100,1.1768350611616528e100,1.1769629085327813e100,1.1770908114776414e100,1.1772187700385231e100,1.1773467842577607e100,1.1774748541777353e100,1.1776029798408742e100,1.1777311612896504e100,1.1778593985665833e100,1.1779876917142394e100,1.1781160407752306e100,1.1782444457922154e100,1.1783729068078994e100,1.178501423865034e100,1.1786299970064174e100,1.1787586262748953e100,1.1788873117133594e100,1.179016053364748e100,1.1791448512720472e100,1.1792737054782895e100,1.1794026160265545e100,1.179531582959969e100,1.1796606063217065e100,1.179789686154989e100,1.1799188225030846e100,1.1800480154093086e100,1.1801772649170253e100,1.1803065710696447e100,1.1804359339106255e100,1.1805653534834736e100,1.180694829831743e100,1.1808243629990353e100,1.1809539530289994e100,1.181083599965333e100,1.1812133038517812e100,1.1813430647321374e100,1.181472882650243e100,1.1816027576499877e100,1.1817326897753097e100,1.1818626790701949e100,1.181992725578678e100,1.1821228293448422e100,1.1822529904128191e100,1.1823832088267892e100,1.182513484630981e100,1.1826438178696727e100,1.1827742085871907e100,1.18290465682791e100,1.1830351626362553e100,1.1831657260567002e100,1.1832963471337667e100,1.1834270259120267e100,1.1835577624361012e100,1.18368855675066e100,1.1838194089004233e100,1.18395031893016e100,1.184081286884688e100,1.1842123128088762e100,1.1843433967476421e100,1.1844745387459533e100,1.1846057388488271e100,1.1847369971013313e100,1.1848683135485823e100,1.1849996882357477e100,1.1851311212080447e100,1.1852626125107411e100,1.1853941621891543e100,1.1855257702886526e100,1.1856574368546543e100,1.185789161932628e100,1.1859209455680937e100,1.1860527878066213e100,1.1861846886938314e100,1.1863166482753954e100,1.1864486665970355e100,1.186580743704525e100,1.1867128796436882e100,1.1868450744604002e100,1.1869773282005874e100,1.1871096409102269e100,1.1872420126353482e100,1.1873744434220307e100,1.1875069333164065e100,1.1876394823646585e100,1.1877720906130213e100,1.1879047581077808e100,1.1880374848952755e100,1.188170271021895e100,1.1883031165340806e100,1.188436021478326e100,1.1885689859011771e100,1.1887020098492313e100,1.1888350933691386e100,1.1889682365076008e100,1.1891014393113724e100,1.1892347018272607e100,1.1893680241021244e100,1.1895014061828758e100,1.189634848116479e100,1.189768349949951e100,1.189901911730362e100,1.1900355335048352e100,1.1901692153205456e100,1.1903029572247225e100,1.1904367592646475e100,1.1905706214876557e100,1.1907045439411353e100,1.190838526672528e100,1.1909725697293285e100,1.1911066731590856e100,1.191240837009401e100,1.1913750613279305e100,1.1915093461623833e100,1.1916436915605232e100,1.1917780975701664e100,1.1919125642391844e100,1.1920470916155018e100,1.1921816797470983e100,1.1923163286820068e100,1.192451038468315e100,1.1925858091541647e100,1.1927206407877523e100,1.1928555334173288e100,1.1929904870911998e100,1.193125501857725e100,1.1932605777653196e100,1.1933957148624529e100,1.1935309131976503e100,1.1936661728194905e100,1.1938014937766087e100,1.1939368761176947e100,1.1940723198914934e100,1.1942078251468052e100,1.1943433919324862e100,1.1944790202974474e100,1.1946147102906554e100,1.194750461961133e100,1.1948862753579582e100,1.1950221505302656e100,1.195158087527244e100,1.1952940863981403e100,1.195430147192256e100,1.195566269958949e100,1.1957024547476338e100,1.195838701607781e100,1.1959750105889176e100,1.1961113817406271e100,1.1962478151125492e100,1.1963843107543809e100,1.1965208687158753e100,1.196657489046843e100,1.1967941717971505e100,1.1969309170167222e100,1.1970677247555395e100,1.1972045950636403e100,1.19734152799112e100,1.197478523588132e100,1.1976155819048857e100,1.1977527029916492e100,1.1978898868987482e100,1.1980271336765652e100,1.198164443375541e100,1.1983018160461738e100,1.1984392517390208e100,1.1985767505046954e100,1.1987143123938711e100,1.198851937457278e100,1.1989896257457057e100,1.1991273773100007e100,1.1992651922010694e100,1.1994030704698757e100,1.1995410121674427e100,1.1996790173448524e100,1.1998170860532443e100,1.1999552183438184e100,1.2000934142678328e100,1.2002316738766046e100,1.2003699972215103e100,1.2005083843539856e100,1.2006468353255252e100,1.200785350187684e100,1.2009239289920758e100,1.201062571790374e100,1.2012012786343114e100,1.2013400495756812e100,1.2014788846663361e100,1.2016177839581892e100,1.2017567475032127e100,1.2018957753534398e100,1.2020348675609634e100,1.202174024177937e100,1.2023132452565746e100,1.20245253084915e100,1.2025918810079984e100,1.2027312957855155e100,1.2028707752341573e100,1.203010319406441e100,1.203149928354945e100,1.2032896021323078e100,1.2034293407912302e100,1.2035691443844736e100,1.2037090129648608e100,1.203848946585276e100,1.2039889452986647e100,1.2041290091580345e100,1.2042691382164543e100,1.2044093325270546e100,1.2045495921430287e100,1.2046899171176308e100,1.2048303075041773e100,1.2049707633560476e100,1.2051112847266825e100,1.2052518716695854e100,1.2053925242383221e100,1.2055332424865212e100,1.2056740264678736e100,1.205814876236133e100,1.2059557918451161e100,1.2060967733487024e100,1.206237820800834e100,1.206378934255517e100,1.2065201137668202e100,1.2066613593888753e100,1.2068026711758778e100,1.206944049182087e100,1.2070854934618254e100,1.2072270040694789e100,1.2073685810594982e100,1.2075102244863964e100,1.2076519344047521e100,1.2077937108692069e100,1.2079355539344668e100,1.2080774636553025e100,1.2082194400865487e100,1.2083614832831044e100,1.2085035932999337e100,1.208645770192065e100,1.2087880140145914e100,1.2089303248226709e100,1.2090727026715267e100,1.209215147616447e100,1.2093576597127851e100,1.2095002390159592e100,1.2096428855814534e100,1.209785599464817e100,1.2099283807216651e100,1.210071229407678e100,1.2102141455786019e100,1.2103571292902493e100,1.2105001805984984e100,1.210643299559293e100,1.210786486228644e100,1.2109297406626278e100,1.2110730629173874e100,1.2112164530491324e100,1.2113599111141386e100,1.2115034371687491e100,1.2116470312693734e100,1.2117906934724877e100,1.2119344238346357e100,1.2120782224124276e100,1.2122220892625413e100,1.2123660244417214e100,1.2125100280067808e100,1.2126541000145993e100,1.212798240522124e100,1.2129424495863706e100,1.2130867272644217e100,1.2132310736134287e100,1.2133754886906102e100,1.2135199725532533e100,1.2136645252587139e100,1.213809146864415e100,1.2139538374278494e100,1.2140985970065773e100,1.2142434256582282e100,1.2143883234405007e100,1.2145332904111611e100,1.2146783266280459e100,1.21482343214906e100,1.2149686070321776e100,1.2151138513354426e100,1.215259165116968e100,1.215404548434936e100,1.2155500013475992e100,1.2156955239132788e100,1.2158411161903675e100,1.2159867782373263e100,1.2161325101126871e100,1.2162783118750524e100,1.2164241835830935e100,1.2165701252955536e100,1.2167161370712458e100,1.2168622189690537e100,1.217008371047932e100,1.2171545933669055e100,1.2173008859850708e100,1.2174472489615951e100,1.217593682355717e100,1.217740186226746e100,1.2178867606340633e100,1.2180334056371219e100,1.2181801212954454e100,1.2183269076686298e100,1.2184737648163435e100,1.218620692798326e100,1.2187676916743887e100,1.2189147615044158e100,1.219061902348364e100,1.2192091142662612e100,1.2193563973182092e100,1.2195037515643816e100,1.219651177065025e100,1.2197986738804588e100,1.2199462420710757e100,1.2200938816973406e100,1.2202415928197925e100,1.2203893754990434e100,1.2205372297957788e100,1.2206851557707575e100,1.2208331534848122e100,1.2209812229988494e100,1.2211293643738495e100,1.2212775776708669e100,1.2214258629510296e100,1.221574220275541e100,1.2217226497056776e100,1.2218711513027914e100,1.2220197251283081e100,1.222168371243729e100,1.22231708971063e100,1.2224658805906612e100,1.2226147439455489e100,1.2227636798370936e100,1.2229126883271717e100,1.223061769477735e100,1.2232109233508109e100,1.223360150008502e100,1.2235094495129871e100,1.2236588219265207e100,1.2238082673114337e100,1.223957785730133e100,1.2241073772451013e100,1.2242570419188982e100,1.2244067798141596e100,1.2245565909935983e100,1.2247064755200037e100,1.224856433456242e100,1.2250064648652564e100,1.2251565698100673e100,1.2253067483537723e100,1.2254570005595467e100,1.2256073264906425e100,1.2257577262103903e100,1.2259081997821978e100,1.226058747269551e100,1.2262093687360133e100,1.2263600642452265e100,1.226510833860911e100,1.2266616776468649e100,1.2268125956669654e100,1.2269635879851683e100,1.2271146546655074e100,1.2272657957720962e100,1.2274170113691269e100,1.227568301520871e100,1.2277196662916782e100,1.2278711057459794e100,1.2280226199482836e100,1.22817420896318e100,1.2283258728553372e100,1.2284776116895041e100,1.2286294255305094e100,1.228781314443262e100,1.228933278492751e100,1.2290853177440458e100,1.2292374322622968e100,1.2293896221127346e100,1.2295418873606707e100,1.2296942280714973e100,1.2298466443106885e100,1.2299991361437984e100,1.2301517036364635e100,1.2303043468544008e100,1.2304570658634095e100,1.2306098607293707e100,1.2307627315182461e100,1.2309156782960811e100,1.2310687011290016e100,1.2312218000832174e100,1.2313749752250189e100,1.2315282266207802e100,1.2316815543369579e100,1.2318349584400907e100,1.231988438996801e100,1.2321419960737939e100,1.2322956297378574e100,1.2324493400558632e100,1.2326031270947666e100,1.2327569909216058e100,1.2329109316035034e100,1.2330649492076655e100,1.2332190438013823e100,1.233373215452028e100,1.2335274642270611e100,1.2336817901940246e100,1.2338361934205461e100,1.2339906739743379e100,1.2341452319231961e100,1.2342998673350036e100,1.2344545802777268e100,1.2346093708194182e100,1.2347642390282153e100,1.2349191849723409e100,1.2350742087201042e100,1.2352293103398997e100,1.2353844899002074e100,1.2355397474695941e100,1.2356950831167123e100,1.235850496910301e100,1.2360059889191863e100,1.2361615592122798e100,1.2363172078585804e100,1.2364729349271742e100,1.236628740487234e100,1.23678462460802e100,1.2369405873588794e100,1.2370966288092473e100,1.2372527490286458e100,1.237408948086686e100,1.2375652260530655e100,1.2377215829975707e100,1.2378780189900763e100,1.2380345341005447e100,1.2381911283990276e100,1.2383478019556648e100,1.238504554840685e100,1.2386613871244063e100,1.238818298877235e100,1.2389752901696669e100,1.239132361072288e100,1.2392895116557725e100,1.2394467419908852e100,1.2396040521484807e100,1.2397614421995032e100,1.2399189122149868e100,1.2400764622660563e100,1.2402340924239271e100,1.2403918027599047e100,1.2405495933453855e100,1.2407074642518563e100,1.2408654155508956e100,1.2410234473141729e100,1.2411815596134488e100,1.2413397525205755e100,1.2414980261074966e100,1.2416563804462478e100,1.2418148156089563e100,1.241973331667842e100,1.2421319286952165e100,1.2422906067634839e100,1.242449365945141e100,1.2426082063127765e100,1.2427671279390734e100,1.2429261308968061e100,1.2430852152588436e100,1.243244381098147e100,1.2434036284877716e100,1.243562957500866e100,1.2437223682106728e100,1.2438818606905282e100,1.2440414350138626e100,1.2442010912542006e100,1.2443608294851617e100,1.244520649780459e100,1.2446805522139013e100,1.2448405368593918e100,1.2450006037909284e100,1.2451607530826047e100,1.2453209848086093e100,1.2454812990432272e100,1.2456416958608374e100,1.2458021753359161e100,1.2459627375430353e100,1.2461233825568626e100,1.246284110452162e100,1.2464449213037948e100,1.2466058151867178e100,1.2467667921759853e100,1.2469278523467485e100,1.2470889957742554e100,1.2472502225338514e100,1.2474115327009796e100,1.2475729263511804e100,1.2477344035600924e100,1.2478959644034513e100,1.248057608957092e100,1.2482193372969466e100,1.2483811494990463e100,1.2485430456395212e100,1.2487050257945994e100,1.248867090040608e100,1.2490292384539736e100,1.2491914711112222e100,1.2493537880889785e100,1.2495161894639678e100,1.2496786753130142e100,1.2498412457130422e100,1.2500039007410767e100,1.2501666404742422e100,1.2503294649897642e100,1.2504923743649685e100,1.2506553686772819e100,1.250818448004232e100,1.2509816124234478e100,1.2511448620126593e100,1.2513081968496981e100,1.2514716170124975e100,1.2516351225790924e100,1.25179871362762e100,1.2519623902363192e100,1.252126152483532e100,1.2522900004477024e100,1.2524539342073768e100,1.2526179538412052e100,1.25278205942794e100,1.2529462510464376e100,1.2531105287756566e100,1.25327489269466e100,1.2534393428826146e100,1.2536038794187907e100,1.253768502382563e100,1.2539332118534107e100,1.2540980079109164e100,1.2542628906347687e100,1.2544278601047598e100,1.254592916400788e100,1.2547580596028558e100,1.2549232897910721e100,1.25508860704565e100,1.2552540114469095e100,1.2554195030752757e100,1.2555850820112802e100,1.255750748335561e100,1.2559165021288617e100,1.2560823434720336e100,1.2562482724460343e100,1.2564142891319281e100,1.256580393610887e100,1.2567465859641902e100,1.256912866273224e100,1.257079234619483e100,1.25724569108457e100,1.2574122357501945e100,1.2575788686981757e100,1.2577455900104405e100,1.257912399769025e100,1.2580792980560736e100,1.2582462849538401e100,1.2584133605446875e100,1.258580524911088e100,1.2587477781356236e100,1.2589151203009856e100,1.2590825514899763e100,1.2592500717855072e100,1.2594176812706006e100,1.259585380028389e100,1.2597531681421162e100,1.2599210456951363e100,1.2600890127709153e100,1.2602570694530297e100,1.260425215825168e100,1.26059345197113e100,1.2607617779748282e100,1.2609301939202863e100,1.2610986998916409e100,1.2612672959731405e100,1.261435982249147e100,1.2616047588041344e100,1.2617736257226904e100,1.2619425830895155e100,1.2621116309894242e100,1.2622807695073441e100,1.2624499987283169e100,1.2626193187374988e100,1.2627887296201592e100,1.2629582314616828e100,1.263127824347569e100,1.2632975083634314e100,1.2634672835949993e100,1.2636371501281169e100,1.2638071080487441e100,1.2639771574429562e100,1.2641472983969446e100,1.264317530997016e100,1.2644878553295952e100,1.2646582714812216e100,1.264828779538552e100,1.26499937958836e100,1.2651700717175368e100,1.26534085601309e100,1.2655117325621454e100,1.2656827014519458e100,1.2658537627698529e100,1.2660249166033458e100,1.2661961630400218e100,1.2663675021675977e100,1.2665389340739077e100,1.2667104588469061e100,1.2668820765746659e100,1.267053787345379e100,1.267225591247358e100,1.2673974883690338e100,1.2675694787989592e100,1.2677415626258056e100,1.2679137399383651e100,1.2680860108255514e100,1.268258375376398e100,1.26843083368006e100,1.2686033858258136e100,1.2687760319030566e100,1.2689487720013083e100,1.2691216062102103e100,1.2692945346195262e100,1.2694675573191413e100,1.2696406743990649e100,1.2698138859494278e100,1.2699871920604843e100,1.2701605928226118e100,1.2703340883263115e100,1.270507678662208e100,1.2706813639210497e100,1.2708551441937092e100,1.2710290195711838e100,1.2712029901445944e100,1.2713770560051879e100,1.271551217244335e100,1.2717254739535324e100,1.2718998262244023e100,1.272074274148692e100,1.2722488178182754e100,1.2724234573251513e100,1.2725981927614462e100,1.2727730242194129e100,1.27294795179143e100,1.2731229755700042e100,1.2732980956477687e100,1.2734733121174848e100,1.2736486250720414e100,1.273824034604455e100,1.2739995408078702e100,1.2741751437755602e100,1.2743508436009272e100,1.2745266403775013e100,1.2747025341989429e100,1.2748785251590406e100,1.2750546133517131e100,1.2752307988710086e100,1.2754070818111058e100,1.275583462266313e100,1.2757599403310694e100,1.275936516099945e100,1.2761131896676405e100,1.2762899611289875e100,1.2764668305789499e100,1.2766437981126221e100,1.2768208638252315e100,1.2769980278121368e100,1.2771752901688296e100,1.2773526509909339e100,1.2775301103742064e100,1.2777076684145375e100,1.2778853252079497e100,1.2780630808506006e100,1.2782409354387806e100,1.2784188890689143e100,1.2785969418375608e100,1.2787750938414135e100,1.278953345177301e100,1.2791316959421863e100,1.2793101462331686e100,1.2794886961474815e100,1.279667345782495e100,1.2798460952357151e100,1.2800249446047844e100,1.2802038939874809e100,1.2803829434817204e100,1.2805620931855552e100,1.2807413431971753e100,1.2809206936149077e100,1.2811001445372174e100,1.281279696062707e100,1.2814593482901182e100,1.2816391013183303e100,1.2818189552463621e100,1.2819989101733709e100,1.2821789661986535e100,1.282359123421646e100,1.282539381941925e100,1.282719741859206e100,1.2829002032733454e100,1.2830807662843403e100,1.2832614309923285e100,1.2834421974975886e100,1.2836230659005405e100,1.2838040363017463e100,1.283985108801909e100,1.2841662835018748e100,1.2843475605026313e100,1.2845289399053088e100,1.284710421811181e100,1.2848920063216648e100,1.2850736935383198e100,1.2852554835628496e100,1.2854373764971023e100,1.2856193724430691e100,1.2858014715028865e100,1.2859836737788356e100,1.2861659793733424e100,1.286348388388978e100,1.286530900928459e100,1.2867135170946486e100,1.2868962369905549e100,1.2870790607193333e100,1.287261988384285e100,1.2874450200888586e100,1.2876281559366501e100,1.287811396031402e100,1.2879947404770057e100,1.2881781893774992e100,1.2883617428370705e100,1.288545400960054e100,1.2887291638509345e100,1.2889130316143454e100,1.2890970043550694e100,1.289281082178039e100,1.289465265188336e100,1.2896495534911931e100,1.2898339471919933e100,1.29001844639627e100,1.2902030512097081e100,1.2903877617381433e100,1.2905725780875633e100,1.2907575003641074e100,1.2909425286740672e100,1.2911276631238868e100,1.2913129038201628e100,1.2914982508696447e100,1.2916837043792358e100,1.2918692644559928e100,1.2920549312071255e100,1.2922407047399992e100,1.2924265851621323e100,1.2926125725811991e100,1.292798667105028e100,1.2929848688416033e100,1.2931711778990643e100,1.2933575943857069e100,1.2935441184099827e100,1.2937307500804999e100,1.2939174895060233e100,1.294104336795475e100,1.294291292057935e100,1.2944783554026392e100,1.2946655269389832e100,1.2948528067765206e100,1.2950401950249627e100,1.2952276917941803e100,1.2954152971942028e100,1.2956030113352197e100,1.2957908343275802e100,1.295978766281793e100,1.2961668073085271e100,1.2963549575186129e100,1.2965432170230413e100,1.2967315859329641e100,1.2969200643596955e100,1.297108652414711e100,1.297297350209648e100,1.2974861578563072e100,1.2976750754666515e100,1.297864103152807e100,1.2980532410270629e100,1.2982424892018728e100,1.298431847789854e100,1.2986213169037878e100,1.2988108966566204e100,1.2990005871614636e100,1.299190388531593e100,1.2993803008804513e100,1.299570324321646e100,1.2997604589689517e100,1.2999507049363089e100,1.300141062337825e100,1.3003315312877748e100,1.3005221119006003e100,1.3007128042909118e100,1.3009036085734874e100,1.3010945248632734e100,1.3012855532753854e100,1.3014766939251073e100,1.3016679469278938e100,1.3018593123993677e100,1.302050790455323e100,1.3022423812117236e100,1.3024340847847043e100,1.3026259012905706e100,1.3028178308457997e100,1.3030098735670407e100,1.3032020295711143e100,1.3033942989750133e100,1.3035866818959042e100,1.3037791784511256e100,1.3039717887581895e100,1.3041645129347823e100,1.3043573510987634e100,1.3045503033681677e100,1.3047433698612036e100,1.3049365506962553e100,1.3051298459918822e100,1.3053232558668192e100,1.3055167804399776e100,1.3057104198304445e100,1.3059041741574843e100,1.3060980435405383e100,1.306292028099225e100,1.3064861279533407e100,1.3066803432228598e100,1.3068746740279352e100,1.3070691204888989e100,1.3072636827262608e100,1.307458360860712e100,1.3076531550131222e100,1.3078480653045411e100,1.3080430918562003e100,1.308238234789511e100,1.3084334942260653e100,1.3086288702876384e100,1.3088243630961867e100,1.3090199727738478e100,1.3092156994429434e100,1.3094115432259778e100,1.3096075042456378e100,1.3098035826247954e100,1.309999778486505e100,1.310196091954007e100,1.310392523150725e100,1.3105890722002688e100,1.3107857392264334e100,1.3109825243531999e100,1.311179427704735e100,1.3113764494053923e100,1.3115735895797125e100,1.3117708483524236e100,1.3119682258484409e100,1.3121657221928682e100,1.3123633375109974e100,1.3125610719283095e100,1.312758925570474e100,1.3129568985633505e100,1.3131549910329886e100,1.3133532031056278e100,1.313551534907698e100,1.3137499865658208e100,1.3139485582068088e100,1.3141472499576661e100,1.3143460619455896e100,1.314544994297968e100,1.3147440471423839e100,1.3149432206066116e100,1.3151425148186206e100,1.3153419299065738e100,1.3155414659988284e100,1.3157411232239366e100,1.315940901710646e100,1.3161408015878987e100,1.3163408229848343e100,1.316540966030788e100,1.3167412308552916e100,1.316941617588074e100,1.3171421263590622e100,1.3173427572983807e100,1.3175435105363519e100,1.3177443862034975e100,1.3179453844305382e100,1.3181465053483941e100,1.3183477490881851e100,1.3185491157812315e100,1.3187506055590541e100,1.3189522185533746e100,1.319153954896117e100,1.3193558147194066e100,1.3195577981555704e100,1.3197599053371393e100,1.3199621363968464e100,1.3201644914676283e100,1.320366970682626e100,1.3205695741751849e100,1.3207723020788538e100,1.320975154527388e100,1.321178131654748e100,1.3213812335951003e100,1.321584460482817e100,1.3217878124524779e100,1.3219912896388693e100,1.3221948921769857e100,1.3223986202020292e100,1.32260247384941e100,1.322806453254748e100,1.3230105585538718e100,1.3232147898828196e100,1.3234191473778398e100,1.3236236311753914e100,1.3238282414121444e100,1.3240329782249803e100,1.324237841750992e100,1.3244428321274848e100,1.324647949491977e100,1.3248531939821986e100,1.325058565736095e100,1.3252640648918246e100,1.32546969158776e100,1.325675445962489e100,1.3258813281548142e100,1.3260873383037545e100,1.3262934765485438e100,1.3264997430286342e100,1.3267061378836932e100,1.3269126612536065e100,1.3271193132784778e100,1.3273260940986285e100,1.327533003854599e100,1.327740042687149e100,1.3279472107372577e100,1.3281545081461248e100,1.3283619350551696e100,1.3285694916060332e100,1.328777177940578e100,1.3289849942008881e100,1.3291929405292696e100,1.329401017068252e100,1.3296092239605876e100,1.3298175613492523e100,1.3300260293774466e100,1.3302346281885952e100,1.3304433579263482e100,1.330652218734581e100,1.3308612107573945e100,1.331070334139117e100,1.331279589024303e100,1.3314889755577343e100,1.3316984938844212e100,1.3319081441496018e100,1.3321179264987427e100,1.3323278410775402e100,1.3325378880319203e100,1.332748067508039e100,1.3329583796522825e100,1.3331688246112691e100,1.3333794025318478e100,1.3335901135611004e100,1.3338009578463404e100,1.334011935535115e100,1.3342230467752047e100,1.334434291714624e100,1.3346456705016215e100,1.3348571832846811e100,1.3350688302125226e100,1.3352806114341003e100,1.3354925270986065e100,1.3357045773554693e100,1.335916762354355e100,1.3361290822451669e100,1.3363415371780472e100,1.3365541273033765e100,1.3367668527717757e100,1.3369797137341044e100,1.3371927103414635e100,1.3374058427451937e100,1.3376191110968782e100,1.3378325155483409e100,1.3380460562516492e100,1.3382597333591124e100,1.3384735470232834e100,1.3386874973969589e100,1.3389015846331807e100,1.3391158088852344e100,1.3393301703066516e100,1.3395446690512092e100,1.3397593052729316e100,1.339974079126089e100,1.3401889907651995e100,1.340404040345029e100,1.3406192280205921e100,1.3408345539471523e100,1.3410500182802223e100,1.3412656211755654e100,1.3414813627891948e100,1.3416972432773752e100,1.341913262796623e100,1.3421294215037056e100,1.342345719555645e100,1.3425621571097147e100,1.3427787343234428e100,1.342995451354611e100,1.3432123083612565e100,1.3434293055016714e100,1.3436464429344034e100,1.343863720818257e100,1.3440811393122938e100,1.3442986985758322e100,1.3445163987684491e100,1.3447342400499798e100,1.3449522225805188e100,1.3451703465204197e100,1.3453886120302974e100,1.3456070192710264e100,1.3458255684037434e100,1.346044259589846e100,1.346263092990995e100,1.346482068769114e100,1.3467011870863895e100,1.346920448105273e100,1.3471398519884795e100,1.3473593988989903e100,1.347579089000052e100,1.3477989224551772e100,1.3480188994281457e100,1.348239020083005e100,1.34845928458407e100,1.3486796930959243e100,1.348900245783421e100,1.3491209428116827e100,1.3493417843461026e100,1.3495627705523441e100,1.3497839015963427e100,1.3500051776443054e100,1.3502265988627122e100,1.3504481654183165e100,1.3506698774781444e100,1.3508917352094975e100,1.3511137387799524e100,1.35133588835736e100,1.3515581841098483e100,1.3517806262058217e100,1.3520032148139622e100,1.3522259501032293e100,1.3524488322428612e100,1.352671861402375e100,1.352895037751568e100,1.353118361460517e100,1.3533418326995805e100,1.3535654516393977e100,1.3537892184508907e100,1.3540131333052635e100,1.354237196374004e100,1.3544614078288838e100,1.3546857678419591e100,1.3549102765855712e100,1.355134934232347e100,1.3553597409552e100,1.3555846969273309e100,1.3558098023222273e100,1.3560350573136656e100,1.356260462075711e100,1.3564860167827182e100,1.3567117216093319e100,1.3569375767304875e100,1.3571635823214117e100,1.3573897385576234e100,1.3576160456149341e100,1.3578425036694484e100,1.3580691128975652e100,1.3582958734759772e100,1.3585227855816729e100,1.3587498493919367e100,1.3589770650843486e100,1.3592044328367869e100,1.3594319528274271e100,1.3596596252347424e100,1.3598874502375063e100,1.3601154280147912e100,1.3603435587459701e100,1.360571842610717e100,1.3608002797890075e100,1.3610288704611198e100,1.3612576148076344e100,1.3614865130094367e100,1.3617155652477148e100,1.3619447717039632e100,1.3621741325599812e100,1.3624036479978745e100,1.3626333182000564e100,1.3628631433492473e100,1.3630931236284758e100,1.36332325922108e100,1.3635535503107077e100,1.3637839970813165e100,1.3640145997171754e100,1.3642453584028654e100,1.3644762733232797e100,1.364707344663624e100,1.364938572609419e100,1.365169957346499e100,1.3654014990610137e100,1.3656331979394292e100,1.3658650541685273e100,1.3660970679354076e100,1.3663292394274875e100,1.3665615688325036e100,1.3667940563385108e100,1.3670267021338855e100,1.3672595064073235e100,1.367492469347843e100,1.3677255911447842e100,1.3679588719878104e100,1.3681923120669082e100,1.3684259115723886e100,1.3686596706948884e100,1.3688935896253693e100,1.3691276685551198e100,1.3693619076757562e100,1.3695963071792224e100,1.3698308672577906e100,1.3700655881040632e100,1.3703004699109721e100,1.370535512871781e100,1.3707707171800845e100,1.3710060830298098e100,1.3712416106152176e100,1.371477300130902e100,1.3717131517717924e100,1.3719491657331525e100,1.372185342210583e100,1.3724216814000217e100,1.3726581834977431e100,1.372894848700361e100,1.3731316772048282e100,1.3733686692084369e100,1.3736058249088202e100,1.373843144503953e100,1.3740806281921522e100,1.3743182761720777e100,1.3745560886427332e100,1.3747940658034667e100,1.3750322078539718e100,1.3752705149942882e100,1.3755089874248024e100,1.375747625346248e100,1.375986428959708e100,1.3762253984666142e100,1.3764645340687482e100,1.3767038359682427e100,1.3769433043675818e100,1.377182939469602e100,1.3774227414774934e100,1.3776627105947991e100,1.3779028470254184e100,1.3781431509736052e100,1.37838362264397e100,1.3786242622414799e100,1.3788650699714614e100,1.3791060460395994e100,1.3793471906519375e100,1.3795885040148806e100,1.3798299863351947e100,1.380071637820008e100,1.3803134586768118e100,1.3805554491134603e100,1.3807976093381738e100,1.3810399395595363e100,1.3812824399864994e100,1.3815251108283811e100,1.3817679522948678e100,1.3820109645960141e100,1.3822541479422448e100,1.3824975025443548e100,1.3827410286135105e100,1.38298472636125e100,1.3832285959994852e100,1.3834726377405018e100,1.3837168517969592e100,1.3839612383818931e100,1.3842057977087162e100,1.3844505299912176e100,1.384695435443565e100,1.3849405142803054e100,1.385185766716365e100,1.3854311929670515e100,1.3856767932480538e100,1.3859225677754441e100,1.3861685167656771e100,1.3864146404355928e100,1.3866609390024152e100,1.3869074126837556e100,1.3871540616976114e100,1.3874008862623688e100,1.3876478865968018e100,1.3878950629200749e100,1.3881424154517427e100,1.3883899444117518e100,1.3886376500204407e100,1.3888855324985415e100,1.38913359206718e100,1.3893818289478782e100,1.3896302433625534e100,1.3898788355335202e100,1.3901276056834905e100,1.390376554035576e100,1.3906256808132875e100,1.3908749862405367e100,1.391124470541637e100,1.3913741339413043e100,1.3916239766646577e100,1.3918739989372215e100,1.392124200984925e100,1.392374583034103e100,1.3926251453114995e100,1.392875888044265e100,1.3931268114599602e100,1.3933779157865555e100,1.3936292012524321e100,1.3938806680863847e100,1.3941323165176196e100,1.3943841467757574e100,1.3946361590908344e100,1.3948883536933022e100,1.3951407308140297e100,1.3953932906843033e100,1.3956460335358292e100,1.3958989596007325e100,1.3961520691115599e100,1.3964053623012797e100,1.3966588394032827e100,1.3969125006513849e100,1.3971663462798255e100,1.3974203765232708e100,1.3976745916168133e100,1.397928991795974e100,1.3981835772967024e100,1.398438348355378e100,1.3986933052088115e100,1.398948448094245e100,1.3992037772493545e100,1.399459292912249e100,1.3997149953214738e100,1.3999708847160088e100,1.4002269613352723e100,1.4004832254191199e100,1.4007396772078472e100,1.4009963169421898e100,1.4012531448633238e100,1.4015101612128693e100,1.4017673662328879e100,1.402024760165887e100,1.4022823432548195e100,1.4025401157430844e100,1.4027980778745283e100,1.403056229893447e100,1.403314572044586e100,1.4035731045731415e100,1.4038318277247616e100,1.4040907417455482e100,1.4043498468820564e100,1.4046091433812968e100,1.4048686314907367e100,1.4051283114583007e100,1.4053881835323711e100,1.4056482479617916e100,1.4059085049958646e100,1.4061689548843562e100,1.4064295978774936e100,1.4066904342259698e100,1.4069514641809417e100,1.4072126879940334e100,1.4074741059173363e100,1.4077357182034095e100,1.407997525105283e100,1.408259526876457e100,1.4085217237709037e100,1.4087841160430684e100,1.409046703947871e100,1.4093094877407065e100,1.4095724676774466e100,1.4098356440144406e100,1.4100990170085168e100,1.4103625869169839e100,1.4106263539976306e100,1.4108903185087299e100,1.4111544807090367e100,1.4114188408577914e100,1.41168339921472e100,1.4119481560400358e100,1.412213111594441e100,1.412478266139126e100,1.4127436199357724e100,1.4130091732465546e100,1.413274926334139e100,1.4135408794616864e100,1.4138070328928536e100,1.4140733868917939e100,1.4143399417231579e100,1.4146066976520964e100,1.41487365494426e100,1.4151408138658012e100,1.4154081746833747e100,1.41567573766414e100,1.415943503075762e100,1.4162114711864109e100,1.4164796422647666e100,1.4167480165800161e100,1.4170165944018582e100,1.417285376000503e100,1.4175543616466723e100,1.4178235516116035e100,1.4180929461670486e100,1.4183625455852763e100,1.4186323501390733e100,1.4189023601017453e100,1.4191725757471189e100,1.419442997349542e100,1.4197136251838858e100,1.4199844595255461e100,1.4202555006504442e100,1.4205267488350276e100,1.4207982043562735e100,1.4210698674916877e100,1.4213417385193071e100,1.421613817717701e100,1.4218861053659719e100,1.422158601743758e100,1.4224313071312326e100,1.4227042218091072e100,1.4229773460586322e100,1.4232506801615982e100,1.4235242244003373e100,1.4237979790577248e100,1.4240719444171796e100,1.4243461207626674e100,1.4246205083786996e100,1.424895107550337e100,1.42516991856319e100,1.42544494170342e100,1.425720177257741e100,1.4259956255134205e100,1.4262712867582824e100,1.4265471612807061e100,1.4268232493696298e100,1.4270995513145514e100,1.427376067405529e100,1.4276527979331839e100,1.4279297431887002e100,1.428206903463828e100,1.4284842790508839e100,1.4287618702427522e100,1.4290396773328869e100,1.429317700615313e100,1.4295959403846273e100,1.4298743969360014e100,1.4301530705651812e100,1.4304319615684903e100,1.4307110702428295e100,1.43099039688568e100,1.4312699417951037e100,1.4315497052697454e100,1.4318296876088335e100,1.4321098891121826e100,1.4323903100801942e100,1.432670950813858e100,1.4329518116147542e100,1.433232892785054e100,1.4335141946275224e100,1.4337957174455188e100,1.4340774615429979e100,1.4343594272245134e100,1.434641614795217e100,1.4349240245608615e100,1.4352066568278024e100,1.4354895119029982e100,1.4357725900940128e100,1.4360558917090175e100,1.4363394170567922e100,1.4366231664467257e100,1.4369071401888193e100,1.4371913385936872e100,1.437475761972558e100,1.4377604106372772e100,1.4380452849003075e100,1.4383303850747321e100,1.4386157114742537e100,1.438901264413199e100,1.4391870442065187e100,1.439473051169789e100,1.439759285619214e100,1.440045747871627e100,1.4403324382444912e100,1.4406193570559033e100,1.4409065046245937e100,1.4411938812699281e100,1.44148148731191e100,1.4417693230711815e100,1.442057388869026e100,1.4423456850273681e100,1.4426342118687775e100,1.4429229697164686e100,1.443211958894304e100,1.443501179726795e100,1.4437906325391036e100,1.4440803176570436e100,1.444370235407084e100,1.444660386116349e100,1.4449507701126203e100,1.4452413877243391e100,1.4455322392806075e100,1.4458233251111903e100,1.4461146455465164e100,1.4464062009176815e100,1.4466979915564491e100,1.446990017795252e100,1.4472822799671948e100,1.4475747784060549e100,1.4478675134462854e100,1.4481604854230154e100,1.4484536946720533e100,1.448747141529887e100,1.4490408263336869e100,1.4493347494213074e100,1.4496289111312889e100,1.4499233118028584e100,1.4502179517759332e100,1.4505128313911213e100,1.450807950989724e100,1.4511033109137367e100,1.4513989115058523e100,1.451694753109462e100,1.4519908360686572e100,1.4522871607282315e100,1.4525837274336829e100,1.452880536531215e100,1.4531775883677394e100,1.4534748832908777e100,1.4537724216489622e100,1.4540702037910401e100,1.4543682300668727e100,1.4546665008269395e100,1.4549650164224384e100,1.4552637772052896e100,1.455562783528135e100,1.4558620357443427e100,1.4561615342080068e100,1.4564612792739512e100,1.4567612712977303e100,1.4570615106356307e100,1.4573619976446743e100,1.4576627326826198e100,1.4579637161079648e100,1.4582649482799464e100,1.4585664295585467e100,1.4588681603044895e100,1.4591701408792478e100,1.4594723716450423e100,1.4597748529648442e100,1.4600775852023775e100,1.460380568722122e100,1.4606838038893128e100,1.4609872910699443e100,1.461291030630773e100,1.4615950229393166e100,1.4618992683638588e100,1.4622037672734504e100,1.4625085200379109e100,1.4628135270278318e100,1.463118788614577e100,1.463424305170287e100,1.463730077067879e100,1.4640361046810495e100,1.4643423883842783e100,1.4646489285528275e100,1.4649557255627466e100,1.4652627797908723e100,1.465570091614832e100,1.4658776614130457e100,1.4661854895647278e100,1.4664935764498901e100,1.4668019224493429e100,1.4671105279446976e100,1.4674193933183696e100,1.4677285189535791e100,1.4680379052343548e100,1.4683475525455352e100,1.4686574612727706e100,1.4689676318025264e100,1.4692780645220848e100,1.4695887598195463e100,1.4698997180838327e100,1.4702109397046895e100,1.470522425072688e100,1.4708341745792278e100,1.4711461886165377e100,1.4714584675776803e100,1.4717710118565525e100,1.4720838218478883e100,1.4723968979472612e100,1.472710240551087e100,1.4730238500566254e100,1.473337726861982e100,1.4736518713661125e100,1.4739662839688225e100,1.4742809650707717e100,1.4745959150734763e100,1.4749111343793098e100,1.4752266233915071e100,1.4755423825141655e100,1.4758584121522487e100,1.4761747127115876e100,1.4764912845988838e100,1.4768081282217115e100,1.4771252439885198e100,1.4774426323086363e100,1.4777602935922673e100,1.4780782282505031e100,1.4783964366953179e100,1.4787149193395745e100,1.4790336765970244e100,1.4793527088823123e100,1.4796720166109784e100,1.479991600199459e100,1.4803114600650917e100,1.4806315966261159e100,1.4809520103016766e100,1.4812727015118258e100,1.4815936706775263e100,1.4819149182206536e100,1.482236444563998e100,1.4825582501312682e100,1.4828803353470931e100,1.4832027006370252e100,1.4835253464275423e100,1.4838482731460505e100,1.4841714812208868e100,1.4844949710813224e100,1.484818743157564e100,1.4851427978807579e100,1.4854671356829909e100,1.485791756997296e100,1.4861166622576506e100,1.4864418518989838e100,1.486767326357176e100,1.4870930860690632e100,1.4874191314724384e100,1.4877454630060558e100,1.4880720811096325e100,1.4883989862238519e100,1.4887261787903656e100,1.489053659251797e100,1.4893814280517444e100,1.489709485634782e100,1.4900378324464648e100,1.4903664689333302e100,1.4906953955429011e100,1.4910246127236888e100,1.4913541209251958e100,1.4916839205979183e100,1.4920140121933502e100,1.4923443961639839e100,1.4926750729633158e100,1.4930060430458473e100,1.4933373068670877e100,1.4936688648835584e100,1.4940007175527946e100,1.4943328653333493e100,1.4946653086847947e100,1.4949980480677268e100,1.4953310839437674e100,1.4956644167755674e100,1.49599804702681e100,1.4963319751622125e100,1.4966662016475313e100,1.4970007269495631e100,1.497335551536149e100,1.497670675876177e100,1.4980061004395855e100,1.4983418256973656e100,1.4986778521215657e100,1.499014180185292e100,1.4993508103627146e100,1.499687743129068e100,1.5000249789606567e100,1.5003625183348557e100,1.5007003617301152e100,1.501038509625964e100,1.501376962503012e100,1.5017157208429535e100,1.5020547851285696e100,1.5023941558437333e100,1.5027338334734112e100,1.5030738185036667e100,1.503414111421664e100,1.5037547127156712e100,1.504095622875063e100,1.5044368423903244e100,1.5047783717530536e100,1.5051202114559663e100,1.5054623619928972e100,1.5058048238588056e100,1.5061475975497764e100,1.5064906835630248e100,1.5068340823969e100,1.5071777945508878e100,1.5075218205256128e100,1.5078661608228453e100,1.5082108159455006e100,1.5085557863976452e100,1.5089010726844992e100,1.50924667531244e100,1.509592594789005e100,1.5099388316228969e100,1.5102853863239846e100,1.510632259403309e100,1.5109794513730848e100,1.5113269627467053e100,1.5116747940387455e100,1.5120229457649645e100,1.5123714184423114e100,1.5127202125889265e100,1.5130693287241467e100,1.5134187673685075e100,1.5137685290437481e100,1.5141186142728137e100,1.5144690235798599e100,1.5148197574902567e100,1.5151708165305908e100,1.5155222012286712e100,1.5158739121135305e100,1.5162259497154312e100,1.5165783145658671e100,1.5169310071975685e100,1.5172840281445052e100,1.5176373779418907e100,1.517991057126186e100,1.5183450662351029e100,1.5186994058076085e100,1.5190540763839273e100,1.519409078505548e100,1.5197644127152248e100,1.5201200795569819e100,1.520476079576118e100,1.520832413319209e100,1.5211890813341143e100,1.5215460841699771e100,1.5219034223772315e100,1.5222610965076045e100,1.5226191071141215e100,1.5229774547511089e100,1.5233361399741983e100,1.5236951633403312e100,1.5240545254077631e100,1.5244142267360665e100,1.5247742678861356e100,1.5251346494201899e100,1.5254953719017798e100,1.5258564358957885e100,1.5262178419684373e100,1.52657959068729e100,1.5269416826212563e100,1.527304118340596e100,1.5276668984169245e100,1.5280300234232145e100,1.528393493933803e100,1.5287573105243927e100,1.529121473772059e100,1.5294859842552519e100,1.5298508425538018e100,1.5302160492489236e100,1.5305816049232203e100,1.5309475101606876e100,1.531313765546718e100,1.5316803716681061e100,1.5320473291130524e100,1.5324146384711667e100,1.532782300333475e100,1.5331503152924204e100,1.5335186839418709e100,1.533887406877122e100,1.5342564846949011e100,1.534625917993373e100,1.5349957073721443e100,1.5353658534322662e100,1.5357363567762408e100,1.5361072180080263e100,1.5364784377330388e100,1.5368500165581595e100,1.5372219550917385e100,1.5375942539435979e100,1.5379669137250396e100,1.538339935048847e100,1.5387133185292909e100,1.539087064782135e100,1.5394611744246387e100,1.5398356480755632e100,1.5402104863551763e100,1.5405856898852564e100,1.5409612592890979e100,1.5413371951915162e100,1.5417134982188508e100,1.5420901689989728e100,1.5424672081612886e100,1.5428446163367429e100,1.543222394157827e100,1.5436005422585815e100,1.5439790612746015e100,1.5443579518430425e100,1.5447372146026241e100,1.5451168501936357e100,1.5454968592579421e100,1.5458772424389865e100,1.5462580003817987e100,1.5466391337329965e100,1.547020643140795e100,1.547402529255007e100,1.5477847927270525e100,1.5481674342099608e100,1.5485504543583774e100,1.548933853828568e100,1.549317633278425e100,1.5497017933674723e100,1.5500863347568687e100,1.5504712581094169e100,1.5508565640895652e100,1.5512422533634152e100,1.551628326598726e100,1.5520147844649196e100,1.5524016276330874e100,1.5527888567759936e100,1.5531764725680823e100,1.553564475685483e100,1.5539528668060149e100,1.5543416466091931e100,1.5547308157762338e100,1.5551203749900609e100,1.5555103249353099e100,1.555900666298335e100,1.5562913997672131e100,1.5566825260317515e100,1.5570740457834917e100,1.5574659597157161e100,1.5578582685234532e100,1.558250972903484e100,1.5586440735543463e100,1.5590375711763425e100,1.5594314664715433e100,1.559825760143796e100,1.5602204528987273e100,1.5606155454437516e100,1.5610110384880766e100,1.5614069327427069e100,1.5618032289204534e100,1.5621999277359368e100,1.562597029905594e100,1.5629945361476857e100,1.5633924471822992e100,1.5637907637313586e100,1.5641894865186265e100,1.5645886162697142e100,1.5649881537120851e100,1.5653880995750616e100,1.5657884545898316e100,1.5661892194894547e100,1.5665903950088673e100,1.5669919818848907e100,1.5673939808562364e100,1.567796392663512e100,1.5681992180492282e100,1.5686024577578047e100,1.5690061125355777e100,1.5694101831308045e100,1.5698146702936716e100,1.5702195747763e100,1.5706248973327521e100,1.5710306387190384e100,1.5714367996931245e100,1.5718433810149367e100,1.5722503834463682e100,1.5726578077512876e100,1.5730656546955443e100,1.573473925046975e100,1.573882619575411e100,1.5742917390526847e100,1.5747012842526367e100,1.5751112559511212e100,1.5755216549260157e100,1.5759324819572244e100,1.5763437378266873e100,1.5767554233183873e100,1.577167539218355e100,1.577580086314678e100,1.5779930653975068e100,1.5784064772590623e100,1.5788203226936417e100,1.5792346024976273e100,1.5796493174694915e100,1.5800644684098073e100,1.5804800561212506e100,1.580896081408613e100,1.581312545078804e100,1.5817294479408615e100,1.5821467908059582e100,1.582564574487408e100,1.582982799800675e100,1.5834014675633793e100,1.5838205785953058e100,1.5842401337184107e100,1.584660133756829e100,1.5850805795368832e100,1.5855014718870889e100,1.5859228116381645e100,1.5863445996230368e100,1.5867668366768503e100,1.5871895236369736e100,1.5876126613430077e100,1.588036250636795e100,1.5884602923624242e100,1.5888847873662402e100,1.5893097364968517e100,1.5897351406051391e100,1.5901610005442615e100,1.5905873171696654e100,1.5910140913390932e100,1.5914413239125895e100,1.5918690157525117e100,1.5922971677235347e100,1.5927257806926632e100,1.5931548555292352e100,1.5935843931049346e100,1.594014394293796e100,1.5944448599722154e100,1.5948757910189564e100,1.59530718831516e100,1.595739052744353e100,1.5961713851924553e100,1.5966041865477892e100,1.5970374577010877e100,1.5974711995455032e100,1.5979054129766147e100,1.5983400988924391e100,1.598775258193437e100,1.5992108917825228e100,1.5996470005650738e100,1.6000835854489376e100,1.600520647344442e100,1.600958187164403e100,1.6013962058241344e100,1.6018347042414563e100,1.6022736833367038e100,1.6027131440327365e100,1.6031530872549469e100,1.6035935139312705e100,1.6040344249921936e100,1.6044758213707629e100,1.6049177040025947e100,1.605360073825885e100,1.6058029317814175e100,1.6062462788125727e100,1.6066901158653385e100,1.6071344438883189e100,1.607579263832743e100,1.6080245766524756e100,1.6084703833040253e100,1.6089166847465551e100,1.6093634819418916e100,1.609810775854534e100,1.6102585674516652e100,1.6107068577031604e100,1.6111556475815977e100,1.6116049380622658e100,1.612054730123177e100,1.6125050247450749e100,1.6129558229114445e100,1.6134071256085232e100,1.6138589338253102e100,1.614311248553576e100,1.6147640707878736e100,1.6152174015255474e100,1.6156712417667452e100,1.6161255925144268e100,1.6165804547743743e100,1.617035829555204e100,1.6174917178683747e100,1.6179481207282008e100,1.6184050391518593e100,1.6188624741594036e100,1.619320426773772e100,1.6197788980207993e100,1.6202378889292269e100,1.6206974005307139e100,1.6211574338598477e100,1.6216179899541553e100,1.6220790698541135e100,1.6225406746031597e100,1.6230028052477032e100,1.6234654628371365e100,1.6239286484238466e100,1.6243923630632249e100,1.6248566078136792e100,1.6253213837366445e100,1.6257866918965949e100,1.6262525333610553e100,1.6267189092006103e100,1.6271858204889187e100,1.6276532683027236e100,1.6281212537218632e100,1.6285897778292838e100,1.6290588417110508e100,1.6295284464563597e100,1.6299985931575495e100,1.6304692829101126e100,1.6309405168127081e100,1.6314122959671729e100,1.631884621478534e100,1.6323574944550206e100,1.6328309160080763e100,1.6333048872523703e100,1.6337794093058101e100,1.6342544832895548e100,1.6347301103280261e100,1.6352062915489203e100,1.6356830280832225e100,1.6361603210652173e100,1.6366381716325025e100,1.6371165809260012e100,1.637595550089974e100,1.6380750802720328e100,1.6385551726231523e100,1.6390358282976843e100,1.6395170484533693e100,1.6399988342513497e100,1.6404811868561833e100,1.6409641074358565e100,1.641447597161796e100,1.641931657208884e100,1.64241628875547e100,1.6429014929833848e100,1.6433872710779532e100,1.6438736242280087e100,1.6443605536259058e100,1.6448480604675338e100,1.6453361459523306e100,1.6458248112832974e100,1.64631405766701e100,1.6468038863136358e100,1.6472942984369441e100,1.6477852952543237e100,1.6482768779867944e100,1.6487690478590221e100,1.6492618060993327e100,1.649755153939727e100,1.6502490926158934e100,1.6507436233672235e100,1.651238747436827e100,1.651734466071546e100,1.652230780521967e100,1.6527276920424398e100,1.6532252018910889e100,1.65372331132983e100,1.6542220216243843e100,1.6547213340442928e100,1.6552212498629335e100,1.6557217703575328e100,1.6562228968091851e100,1.6567246305028637e100,1.6572269727274392e100,1.6577299247756943e100,1.6582334879443372e100,1.6587376635340201e100,1.6592424528493524e100,1.6597478571989177e100,1.6602538778952894e100,1.6607605162550462e100,1.661267773598788e100,1.6617756512511516e100,1.6622841505408285e100,1.6627932728005774e100,1.6633030193672456e100,1.66381339158178e100,1.6643243907892466e100,1.6648360183388473e100,1.6653482755839342e100,1.6658611638820272e100,1.6663746845948323e100,1.6668888390882556e100,1.6674036287324223e100,1.6679190549016925e100,1.6684351189746796e100,1.6689518223342652e100,1.669469166367618e100,1.6699871524662112e100,1.6705057820258385e100,1.6710250564466334e100,1.671544977133085e100,1.6720655454940566e100,1.6725867629428037e100,1.67310863089699e100,1.673631150778708e100,1.674154324014495e100,1.674678152035352e100,1.6752026362767618e100,1.6757277781787064e100,1.6762535791856876e100,1.6767800407467425e100,1.6773071643154638e100,1.6778349513500183e100,1.6783634033131664e100,1.6788925216722778e100,1.6794223078993549e100,1.6799527634710477e100,1.6804838898686761e100,1.6810156885782464e100,1.6815481610904734e100,1.6820813089007973e100,1.682615133509404e100,1.6831496364212457e100,1.6836848191460598e100,1.684220683198388e100,1.6847572300975976e100,1.6852944613679005e100,1.6858323785383736e100,1.6863709831429794e100,1.6869102767205852e100,1.6874502608149854e100,1.6879909369749197e100,1.6885323067540953e100,1.6890743717112076e100,1.6896171334099602e100,1.690160593419087e100,1.6907047533123712e100,1.691249614668669e100,1.69179517907193e100,1.6923414481112165e100,1.6928884233807287e100,1.6934361064798228e100,1.693984499013036e100,1.6945336025901045e100,1.695083418825989e100,1.6956339493408945e100,1.6961851957602944e100,1.6967371597149506e100,1.697289842840937e100,1.6978432467796617e100,1.6983973731778914e100,1.6989522236877704e100,1.6995077999668478e100,1.7000641036780968e100,1.7006211364899397e100,1.7011789000762723e100,1.7017373961164839e100,1.702296626295483e100,1.702856592303722e100,1.7034172958372184e100,1.7039787385975787e100,1.7045409222920252e100,1.7051038486334178e100,1.7056675193402784e100,1.706231936136816e100,1.7067971007529502e100,1.7073630149243371e100,1.7079296803923927e100,1.7084970989043192e100,1.7090652722131286e100,1.7096342020776692e100,1.7102038902626492e100,1.7107743385386634e100,1.7113455486822187e100,1.71191752247576e100,1.7124902617076951e100,1.7130637681724203e100,1.7136380436703481e100,1.7142130900079328e100,1.714788908997697e100,1.7153655024582567e100,1.7159428722143497e100,1.7165210200968626e100,1.717099947942856e100,1.717679657595593e100,1.7182601509045655e100,1.7188414297255235e100,1.7194234959205e100,1.7200063513578401e100,1.7205899979122293e100,1.721174437464721e100,1.7217596719027634e100,1.7223457031202303e100,1.7229325330174475e100,1.7235201635012225e100,1.7241085964848723e100,1.7246978338882535e100,1.7252878776377914e100,1.7258787296665069e100,1.7264703919140488e100,1.7270628663267222e100,1.7276561548575184e100,1.7282502594661439e100,1.7288451821190515e100,1.7294409247894708e100,1.7300374894574368e100,1.7306348781098229e100,1.7312330927403693e100,1.7318321353497161e100,1.7324320079454318e100,1.7330327125420472e100,1.733634251161085e100,1.7342366258310922e100,1.7348398385876706e100,1.7354438914735118e100,1.7360487865384254e100,1.7366545258393742e100,1.737261111440505e100,1.7378685454131826e100,1.738476829836021e100,1.739085966794918e100,1.7396959583830878e100,1.7403068067010945e100,1.7409185138568851e100,1.7415310819658238e100,1.7421445131507262e100,1.7427588095418927e100,1.7433739732771438e100,1.743990006501854e100,1.744606911368986e100,1.7452246900391273e100,1.745843344680524e100,1.7464628774691161e100,1.7470832905885744e100,1.7477045862303336e100,1.7483267665936313e100,1.7489498338855422e100,1.749573790321015e100,1.750198638122909e100,1.7508243795220307e100,1.7514510167571707e100,1.752078552075142e100,1.752706987730815e100,1.7533363259871578e100,1.7539665691152723e100,1.754597719394433e100,1.7552297791121244e100,1.755862750564081e100,1.756496636054325e100,1.7571314378952044e100,1.7577671584074348e100,1.758403799920136e100,1.759041364770873e100,1.759679855305695e100,1.760319273879178e100,1.760959622854461e100,1.76160090460329e100,1.7622431215060567e100,1.762886275951842e100,1.7635303703384535e100,1.7641754070724707e100,1.7648213885692846e100,1.7654683172531403e100,1.766116195557179e100,1.766765025923481e100,1.7674148108031086e100,1.7680655526561477e100,1.7687172539517524e100,1.7693699171681876e100,1.7700235447928747e100,1.7706781393224322e100,1.771333703262723e100,1.7719902391288983e100,1.7726477494454412e100,1.773306236746212e100,1.773965703574495e100,1.7746261524830435e100,1.775287586034124e100,1.7759500067995653e100,1.7766134173608018e100,1.777277820308922e100,1.777943218244717e100,1.7786096137787235e100,1.7792770095312756e100,1.7799454081325504e100,1.7806148122226156e100,1.7812852244514805e100,1.781956647479142e100,1.7826290839756357e100,1.783302536621083e100,1.7839770081057432e100,1.784652501130061e100,1.7853290184047187e100,1.786006562650685e100,1.7866851365992676e100,1.7873647429921623e100,1.7880453845815064e100,1.788727064129929e100,1.789409784410604e100,1.790093548207301e100,1.790778358314441e100,1.7914642175371453e100,1.7921511286912927e100,1.7928390946035707e100,1.7935281181115305e100,1.7942182020636416e100,1.794909349319345e100,1.7956015627491103e100,1.7962948452344893e100,1.7969891996681728e100,1.797684628954046e100,1.7983811360072455e100,1.7990787237542152e100,1.7997773951327634e100,1.8004771530921222e100,1.801178000593002e100,1.8018799406076527e100,1.8025829761199206e100,1.8032871101253075e100,1.80399234563103e100,1.8046986856560794e100,1.8054061332312818e100,1.806114691399358e100,1.806824363214984e100,1.8075351517448543e100,1.8082470600677393e100,1.8089600912745515e100,1.8096742484684055e100,1.8103895347646807e100,1.8111059532910858e100,1.81182350718772e100,1.8125421996071403e100,1.8132620337144216e100,1.8139830126872252e100,1.8147051397158614e100,1.8154284180033563e100,1.8161528507655175e100,1.8168784412310003e100,1.817605192641375e100,1.8183331082511927e100,1.8190621913280555e100,1.819792445152682e100,1.820523873018978e100,1.821256478234103e100,1.8219902641185417e100,1.8227252340061744e100,1.823461391244345e100,1.8241987391939327e100,1.8249372812294244e100,1.825677020738985e100,1.8264179611245304e100,1.827160105801799e100,1.8279034582004274e100,1.82864802176402e100,1.8293937999502266e100,1.830140796230815e100,1.830889014091748e100,1.8316384570332554e100,1.832389128569914e100,1.8331410322307213e100,1.833894171559175e100,1.834648550113347e100,1.8354041714659647e100,1.836161039204489e100,1.8369191569311915e100,1.8376785282632364e100,1.838439156832759e100,1.8392010462869467e100,1.839964200288122e100,1.8407286225138207e100,1.8414943166568776e100,1.842261286425507e100,1.8430295355433878e100,1.843799067749746e100,1.8445698867994403e100,1.8453419964630458e100,1.8461154005269416e100,1.8468901027933957e100,1.8476661070806516e100,1.848443417223016e100,1.8492220370709478e100,1.850001970491144e100,1.8507832213666325e100,1.851565793596859e100,1.852349691097778e100,1.8531349178019446e100,1.8539214776586056e100,1.854709374633791e100,1.855498612710408e100,1.8562891958883347e100,1.857081128184512e100,1.857874413633041e100,1.8586690562852773e100,1.859465060209926e100,1.8602624294931414e100,1.8610611682386207e100,1.8618612805677044e100,1.8626627706194745e100,1.8634656425508545e100,1.8642699005367075e100,1.86507554876994e100,1.8658825914616e100,1.8666910328409827e100,1.86750087715573e100,1.8683121286719374e100,1.869124791674256e100,1.869938870465997e100,1.8707543693692412e100,1.871571292724941e100,1.8723896448930315e100,1.8732094302525356e100,1.8740306532016746e100,1.8748533181579767e100,1.8756774295583883e100,1.8765029918593846e100,1.8773300095370813e100,1.8781584870873478e100,1.8789884290259197e100,1.8798198398885145e100,1.8806527242309452e100,1.881487086629238e100,1.8823229316797467e100,1.883160263999272e100,1.8839990882251804e100,1.884839409015521e100,1.8856812310491473e100,1.886524559025839e100,1.887369397666422e100,1.888215751712891e100,1.8890636259285358e100,1.8899130250980623e100,1.8907639540277197e100,1.8916164175454273e100,1.8924704205009e100,1.8933259677657778e100,1.8941830642337537e100,1.8950417148207054e100,1.895901924464824e100,1.8967636981267474e100,1.897627040789692e100,1.8984919574595887e100,1.8993584531652146e100,1.9002265329583305e100,1.9010962019138184e100,1.9019674651298166e100,1.9028403277278613e100,1.9037147948530253e100,1.9045908716740576e100,1.9054685633835277e100,1.906347875197966e100,1.907228812358009e100,1.9081113801285452e100,1.9089955837988588e100,1.909881428682779e100,1.9107689201188282e100,1.9116580634703692e100,1.9125488641257577e100,1.9134413274984946e100,1.914335459027376e100,1.9152312641766488e100,1.9161287484361664e100,1.917027917321544e100,1.9179287763743144e100,1.918831331162091e100,1.919735587278722e100,1.9206415503444564e100,1.921549226006103e100,1.9224586199371936e100,1.9233697378381507e100,1.9242825854364506e100,1.9251971684867913e100,1.9261134927712618e100,1.92703156409951e100,1.927951388308916e100,1.9288729712647626e100,1.9297963188604096e100,1.9307214370174687e100,1.9316483316859806e100,1.9325770088445913e100,1.933507474500732e100,1.9344397346907993e100,1.9353737954803367e100,1.9363096629642193e100,1.9372473432668365e100,1.9381868425422786e100,1.939128166974526e100,1.940071322777635e100,1.9410163161959318e100,1.9419631535042016e100,1.9429118410078837e100,1.9438623850432657e100,1.9448147919776803e100,1.945769068209704e100,1.946725220169354e100,1.9476832543182933e100,1.9486431771500312e100,1.9496049951901266e100,1.9505687149963962e100,1.9515343431591214e100,1.9525018863012562e100,1.953471351078641e100,1.954442744180211e100,1.955416072328215e100,1.9563913422784287e100,1.9573685608203714e100,1.958347734777529e100,1.9593288710075728e100,1.960311976402582e100,1.96129705788927e100,1.9622841224292102e100,1.9632731770190648e100,1.9642642286908145e100,1.965257284511992e100,1.966252351585913e100,1.967249437051917e100,1.9682485480855987e100,1.969249691899054e100,1.9702528757411185e100,1.9712581068976105e100,1.972265392691579e100,1.9732747404835494e100,1.9742861576717752e100,1.975299651692487e100,1.9763152300201503e100,1.9773329001677162e100,1.9783526696868847e100,1.9793745461683614e100,1.9803985372421216e100,1.9814246505776734e100,1.9824528938843258e100,1.9834832749114567e100,1.9845158014487844e100,1.9855504813266416e100,1.9865873224162493e100,1.9876263326299962e100,1.98866751992172e100,1.989710892286988e100,1.9907564577633834e100,1.991804224430792e100,1.992854200411693e100,1.993906393871451e100,1.9949608130186113e100,1.996017466105195e100,1.9970763614270023e100,1.9981375073239123e100,1.9992009121801886e100,2.000266584424788e100,2.0013345325316685e100,2.002404765020105e100,2.003477290455001e100,2.0045521174472105e100,2.0056292546538586e100,2.0067087107786617e100,2.0077904945722588e100,2.008874614832538e100,2.0099610804049676e100,2.0110499001829348e100,2.0121410831080817e100,2.0132346381706452e100,2.0143305744098035e100,2.0154289009140193e100,2.0165296268213942e100,2.0176327613200186e100,2.0187383136483282e100,2.0198462930954643e100,2.0209567090016348e100,2.022069570758481e100,2.023184887809446e100,2.0243026696501458e100,2.025422925828747e100,2.0265456659463432e100,2.027670899657337e100,2.0287986366698278e100,2.0299288867459974e100,2.031061659702506e100,2.0321969654108845e100,2.033334813797937e100,2.034475214846141e100,2.0356181785940563e100,2.0367637151367337e100,2.0379118346261308e100,2.039062547271527e100,2.040215863339947e100,2.0413717931565873e100,2.042530347105241e100,2.043691535628735e100,2.0448553692293665e100,2.0460218584693415e100,2.0471910139712217e100,2.0483628464183756e100,2.0495373665554263e100,2.050714585188715e100,2.0518945131867575e100,2.0530771614807145e100,2.0542625410648583e100,2.0554506629970495e100,2.0566415383992143e100,2.057835178457829e100,2.059031594424408e100,2.0602307976159954e100,2.061432799415663e100,2.0626376112730114e100,2.0638452447046748e100,2.0650557112948353e100,2.0662690226957374e100,2.067485190628207e100,2.0687042268821814e100,2.0699261433172335e100,2.0711509518631143e100,2.0723786645202894e100,2.073609293360487e100,2.0748428505272467e100,2.0760793482364785e100,2.0773187987770222e100,2.078561214511217e100,2.0798066078754707e100,2.0810549913808403e100,2.082306377613616e100,2.0835607792359063e100,2.084818208986238e100,2.0860786796801532e100,2.087342204210818e100,2.088608795549632e100,2.0898784667468505e100,2.0911512309322053e100,2.092427101315536e100,2.093706091187429e100,2.0949882139198565e100,2.0962734829668283e100,2.0975619118650456e100,2.0988535142345645e100,2.100148303779463e100,2.101446294288518e100,2.102747499635884e100,2.1040519337817858e100,2.10535961077321e100,2.106670544744609e100,2.107984749918611e100,2.1093022406067356e100,2.1106230312101166e100,2.1119471362202347e100,2.1132745702196546e100,2.1146053478827707e100,2.11593948397656e100,2.117276993361344e100,2.118617890991556e100,2.1199621919165187e100,2.1213099112812264e100,2.1226610643271386e100,2.1240156663929817e100,2.1253737329155533e100,2.126735279430544e100,2.1281003215733588e100,2.129468875079952e100,2.1308409557876693e100,2.1322165796360995e100,2.1335957626679338e100,2.1349785210298333e100,2.1363648709733076e100,2.137754828855603e100,2.1391484111405963e100,2.140545634399701e100,2.141946515312782e100,2.143351070669082e100,2.1447593173681524e100,2.146171272420801e100,2.1475869529500417e100,2.1490063761920638e100,2.1504295594972015e100,2.1518565203309225e100,2.1532872762748196e100,2.1547218450276197e100,2.1561602444061975e100,2.157602492346606e100,2.1590486069051116e100,2.160498606259245e100,2.1619525087088644e100,2.1634103326772233e100,2.164872096712058e100,2.1663378194866807e100,2.1678075198010905e100,2.1692812165830896e100,2.170758928889415e100,2.172240675906887e100,2.17372647695356e100,2.1752163514798964e100,2.1767103190699454e100,2.1782083994425414e100,2.1797106124525105e100,2.181216978091892e100,2.1827275164911758e100,2.1842422479205482e100,2.1857611927911574e100,2.18728437165639e100,2.188811805213162e100,2.190343514303224e100,2.1918795199144817e100,2.193419843182333e100,2.194964505391015e100,2.1965135279749726e100,2.198066932520238e100,2.1996247407658265e100,2.201186974605151e100,2.202753656087449e100,2.2043248074192275e100,2.205900450965727e100,2.207480609252396e100,2.209065304966387e100,2.210654560958072e100,2.2122484002425675e100,2.2138468460012855e100,2.2154499215834986e100,2.2170576505079207e100,2.218670056464312e100,2.2202871633151008e100,2.221908995097017e100,2.2235355760227593e100,2.2251669304826658e100,2.226803083046418e100,2.2284440584647543e100,2.2300898816712128e100,2.231740577783886e100,2.233396172107204e100,2.235056690133733e100,2.2367221575459995e100,2.238392600218334e100,2.2400680442187366e100,2.2417485158107687e100,2.243434041455459e100,2.245124647813244e100,2.2468203617459226e100,2.2485212103186374e100,2.250227220801882e100,2.2519384206735307e100,2.2536548376208926e100,2.255376499542793e100,2.2571034345516756e100,2.258835670975738e100,2.260573237361087e100,2.262316162473923e100,2.2640644753027497e100,2.2658182050606163e100,2.267577381187381e100,2.2693420333520042e100,2.2711121914548768e100,2.272887885630167e100,2.2746691462482063e100,2.2764560039178982e100,2.278248489489162e100,2.2800466340554043e100,2.2818504689560263e100,2.283660025778955e100,2.285475336363216e100,2.2872964328015317e100,2.2891233474429572e100,2.2909561128955467e100,2.2927947620290575e100,2.2946393279776854e100,2.2964898441428387e100,2.298346344195944e100,2.3002088620812937e100,2.3020774320189262e100,2.303952088507544e100,2.3058328663274733e100,2.3077198005436575e100,2.309612926508695e100,2.3115122798659124e100,2.313417896552481e100,2.3153298128025743e100,2.317248065150566e100,2.319172690434273e100,2.321103725798238e100,2.323041208697058e100,2.3249851768987593e100,2.3269356684882137e100,2.328892721870604e100,2.3308563757749353e100,2.3328266692575906e100,2.334803641705941e100,2.336787332842001e100,2.338777782726132e100,2.3407750317607995e100,2.342779120694382e100,2.3447900906250295e100,2.3468079830045775e100,2.3488328396425135e100,2.3508647027099984e100,2.352903614743947e100,2.3549496186511598e100,2.3570027577125165e100,2.359063075587227e100,2.3611306163171407e100,2.3632054243311203e100,2.365287544449471e100,2.3673770218884386e100,2.369473902264768e100,2.3715782316003274e100,2.373690056326794e100,2.3758094232904195e100,2.377936379756845e100,2.380070973416003e100,2.3822132523870775e100,2.3843632652235423e100,2.3865210609182694e100,2.3886866889087145e100,2.3908601990821726e100,2.393041641781116e100,2.3952310678086078e100,2.397428528433795e100,2.3996340753974838e100,2.4018477609177928e100,2.4040696376958964e100,2.406299758921849e100,2.4085381782804972e100,2.41078494995748e100,2.4130401286453173e100,2.415303769549596e100,2.4175759283952377e100,2.4198566614328753e100,2.4221460254453137e100,2.424444077754094e100,2.4267508762261598e100,2.4290664792806204e100,2.4313909458956207e100,2.433724335615317e100,2.436066708556956e100,2.4384181254180688e100,2.440778647483771e100,2.4431483366341827e100,2.445527255351957e100,2.447915466729929e100,2.450313034478889e100,2.4527200229354695e100,2.455136497070163e100,2.4575625224954638e100,2.45999816547414e100,2.462443492927639e100,2.464898572444618e100,2.467363472289626e100,2.469838261411911e100,2.4723230094543767e100,2.4748177867626836e100,2.4773226643944924e100,2.4798377141288644e100,2.48236300847581e100,2.4848986206859926e100,2.4874446247606e100,2.490001095461366e100,2.4925681083207654e100,2.4951457396523763e100,2.4977340665614133e100,2.5003331669554366e100,2.5029431195552385e100,2.5055640039059156e100,2.5081959003881232e100,2.510838890229523e100,2.5134930555164213e100,2.5161584792056078e100,2.5188352451363924e100,2.52152343804285e100,2.524223143566276e100,2.5269344482678512e100,2.5296574396415315e100,2.5323922061271546e100,2.5351388371237786e100,2.5378974230032496e100,2.540668055124008e100,2.543450825845138e100,2.5462458285406596e100,2.5490531576140786e100,2.551872908513189e100,2.554705177745143e100,2.5575500628917837e100,2.5604076626252577e100,2.5632780767239035e100,2.5661614060884303e100,2.5690577527583823e100,2.571967219928909e100,2.5748899119678342e100,2.5778259344330407e100,2.5807753940901696e100,2.583738398930648e100,2.586715058190048e100,2.5897054823667825e100,2.5927097832411535e100,2.5957280738947494e100,2.598760468730211e100,2.601807083491359e100,2.604868035283714e100,2.6079434425953895e100,2.6110334253183915e100,2.614138104770319e100,2.617257603716478e100,2.620392046392424e100,2.6235415585269317e100,2.6267062673654112e100,2.6298863016937793e100,2.633081791862793e100,2.636292869812856e100,2.6395196690993163e100,2.642762324918254e100,2.646020974132786e100,2.649295755299884e100,2.6525868086977283e100,2.6558942763536104e100,2.6592183020723914e100,2.6625590314655313e100,2.6659166119807045e100,2.6692911929320207e100,2.67268292553085e100,2.676091962917287e100,2.679518460192253e100,2.682962574450261e100,2.6864244648128563e100,2.689904292462752e100,2.693402220678673e100,2.6969184148709265e100,2.7004530426177213e100,2.704006273702251e100,2.7075782801505592e100,2.7111692362702113e100,2.7147793186897866e100,2.7184087063992177e100,2.7220575807909945e100,2.7257261257022606e100,2.729414527457815e100,2.7331229749140536e100,2.7368516595038677e100,2.7406007752825266e100,2.7443705189745717e100,2.7481610900217437e100,2.751972690631978e100,2.7558055258294854e100,2.7596598035059624e100,2.7635357344729412e100,2.7674335325153335e100,2.7713534144461774e100,2.775295600162634e100,2.7792603127032667e100,2.7832477783066325e100,2.7872582264712214e100,2.791291890016792e100,2.7953490051471235e100,2.799429811514242e100,2.803534552284148e100,2.8076634742040945e100,2.8118168276714583e100,2.815994866804249e100,2.820197849513298e100,2.824426037576185e100,2.82867969671294e100,2.832959096663583e100,2.8372645112675467e100,2.841596218545037e100,2.8459545007803935e100,2.8503396446075072e100,2.8547519410973454e100,2.859191685847664e100,2.8636591790749566e100,2.8681547257087145e100,2.8726786354880692e100,2.8772312230608784e100,2.8818128080853423e100,2.8864237153342197e100,2.8910642748017233e100,2.8957348218131817e100,2.9004356971375448e100,2.9051672471028306e100,2.909929823714595e100,2.914723784777531e100,2.9195494940202843e100,2.924407321223592e100,2.9292976423518486e100,2.9342208396882197e100,2.93917730197339e100,2.9441674245480976e100,2.949191609499549e100,2.9542502658118577e100,2.9593438095206308e100,2.964472663871842e100,2.9696372594851348e100,2.9748380345216998e100,2.980075434856883e100,2.9853499142576796e100,2.9906619345652837e100,2.996011965882862e100,3.0014004867687307e100,3.006827984435121e100,3.0122949549527297e100,3.017801903461249e100,3.023349344386094e100,3.0289378016615323e100,3.034567808960458e100,3.0402399099310308e100,3.0459546584404352e100,3.0517126188260135e100,3.057514366154032e100,3.0633604864863744e100,3.0692515771554294e100,3.075188247047493e100,3.0811711168949925e100,3.0872008195778557e100,3.0932780004343766e100,3.09940331758193e100,3.1055774422479045e100,3.111801059111254e100,3.118074866655056e100,3.1243995775305267e100,3.1307759189329066e100,3.1372046329897096e100,3.1436864771617955e100,3.1502222246577956e100,3.156812664862398e100,3.1634586037790704e100,3.170160864487782e100,3.176920287618349e100,3.1837377318400256e100,3.1906140743680174e100,3.197550211487612e100,3.204547059096663e100,3.211605553267188e100,3.2187266508268927e100,3.225911329961466e100,3.233160590838529e100,3.240475456254166e100,3.2478569723030335e100,3.2553062090730437e100,3.262824261365731e100,3.2704122494434147e100,3.278071319804367e100,3.2858026459872248e100,3.293607429405978e100,3.3014869002169224e100,3.3094423182190293e100,3.3174749737892923e100,3.3255861888546532e100,3.333777317902245e100,3.3420497490297323e100,3.3504049050376714e100,3.3588442445658967e100,3.3673692632760577e100,3.375981495082537e100,3.3846825134341406e100,3.393473932649048e100,3.402357409305681e100,3.411334643692288e100,3.420407381318214e100,3.4295774144900017e100,3.438846583955651e100,3.448216780620554e100,3.457689947338874e100,3.4672680807843066e100,3.4769532334044633e100,3.486747515463337e100,3.496653097176611e100,3.506672210944862e100,3.516807153690038e100,3.5270602893009285e100,3.5374340511937174e100,3.547930944994109e100,3.5585535513479424e100,3.5693045288676735e100,3.580186617222586e100,3.591202640381144e100,3.6023555100144605e100,3.613648229070474e100,3.625083895529107e100,3.636665706349386e100,3.648396961620281e100,3.660281068927903e100,3.672321547952537e100,3.684522035310061e100,3.6968862896533104e100,3.70941819705014e100,3.722121776656171e100,3.735001186701632e100,3.748060730813126e100,3.761304864692827e100,3.7747382031793714e100,3.788365527716593e100,3.802191794258432e100,3.8162221416405515e100,3.830461900451786e100,3.844916602441246e100,3.859591990499924e100,3.8744940292589525e100,3.8896289163502884e100,3.905003094379567e100,3.920623263665255e100,3.9364963958030516e100,3.952629748119808e100,3.969030879087088e100,3.985707664770998e100,4.0026683164020535e100,4.019921399156844e100,4.037475852252018e100,4.0553410104609406e100,4.0735266271742406e100,4.0920428991375944e100,4.1109004930136034e100,4.130110573929749e100,4.149684836191261e100,4.1696355363566785e100,4.189975528895107e100,4.210718304668022e100,4.2318780325053165e100,4.2534696041755855e100,4.275508683084814e100,4.298011757076354e100,4.320996195748924e100,4.344480312759244e100,4.3684834336325735e100,4.393025969669165e100,4.4181294986085494e100,4.443816852798216e100,4.470112215710528e100,4.4970412277634605e100,4.5246311025298374e100,4.5529107545688465e100,4.581910940286551e100,4.611664413433105e100,4.642206097078657e100,4.673573274183776e100,4.705805799201311e100,4.738946333524262e100,4.7730406080397114e100,4.808137716576443e100,4.844290444660447e100,4.881555638739751e100,4.919994621934313e100,4.959673663441397e100,5.000664510023606e100,5.043044989578386e100,5.086899698701129e100,5.132320788494646e100,5.179408865755338e100,5.228274030223022e100,5.279037073001419e100,5.331830866781992e100,5.3868019854541724e100,5.44411259948478e100,5.503942704667874e100,5.566492756253505e100,5.631986799110864e100,5.700676208916794e100,5.772844191402309e100,5.848811229278722e100,5.928941723650154e100,6.013652154344376e100,6.103421190209049e100,6.1988023287223624e100,6.300439853411979e100,6.409089196973914e100,6.525643233643268e100,6.651166669776302e100,6.786941676817139e100,6.934529416977556e100,7.095854495527446e100,7.273323250271383e100,7.469993291670852e100,7.689823005982671e100,7.938050177244493e100,8.221787658387887e100,8.551001772211346e100,8.940205798597428e100,9.411588713942495e100,1.0001299838042514e101,1.0773564676780025e101,1.1857825782434795e101,1.3573784339564082e101,1.710175404927994e101,4.641588833612709e102],"x":[1.0e-300,9.99800079970012e-301,9.99600159940024e-301,9.99400239910036e-301,9.99200319880048e-301,9.9900039985006e-301,9.98800479820072e-301,9.98600559790084e-301,9.98400639760096e-301,9.98200719730108e-301,9.9800079970012e-301,9.97800879670132e-301,9.976009596401439e-301,9.974010396101559e-301,9.972011195801679e-301,9.970011995501799e-301,9.968012795201919e-301,9.966013594902039e-301,9.964014394602159e-301,9.962015194302279e-301,9.960015994002399e-301,9.958016793702519e-301,9.956017593402639e-301,9.954018393102759e-301,9.95201919280288e-301,9.950019992503e-301,9.94802079220312e-301,9.94602159190324e-301,9.94402239160336e-301,9.94202319130348e-301,9.9400239910036e-301,9.93802479070372e-301,9.93602559040384e-301,9.93402639010396e-301,9.93202718980408e-301,9.930027989504198e-301,9.928028789204318e-301,9.926029588904438e-301,9.924030388604558e-301,9.922031188304678e-301,9.920031988004798e-301,9.918032787704918e-301,9.916033587405038e-301,9.914034387105158e-301,9.912035186805278e-301,9.910035986505398e-301,9.908036786205518e-301,9.906037585905638e-301,9.904038385605758e-301,9.902039185305878e-301,9.900039985005998e-301,9.898040784706118e-301,9.896041584406238e-301,9.894042384106358e-301,9.892043183806478e-301,9.890043983506598e-301,9.888044783206718e-301,9.886045582906838e-301,9.884046382606957e-301,9.882047182307077e-301,9.880047982007197e-301,9.878048781707317e-301,9.876049581407437e-301,9.874050381107557e-301,9.872051180807677e-301,9.870051980507797e-301,9.868052780207917e-301,9.866053579908037e-301,9.864054379608157e-301,9.862055179308277e-301,9.860055979008397e-301,9.858056778708517e-301,9.856057578408637e-301,9.854058378108757e-301,9.852059177808877e-301,9.850059977508997e-301,9.848060777209117e-301,9.846061576909237e-301,9.844062376609357e-301,9.842063176309477e-301,9.840063976009596e-301,9.838064775709716e-301,9.836065575409836e-301,9.834066375109956e-301,9.832067174810076e-301,9.830067974510196e-301,9.828068774210316e-301,9.826069573910436e-301,9.824070373610556e-301,9.822071173310676e-301,9.820071973010796e-301,9.818072772710916e-301,9.816073572411036e-301,9.814074372111156e-301,9.812075171811276e-301,9.810075971511396e-301,9.808076771211516e-301,9.806077570911636e-301,9.804078370611756e-301,9.802079170311876e-301,9.800079970011996e-301,9.798080769712116e-301,9.796081569412236e-301,9.794082369112354e-301,9.792083168812475e-301,9.790083968512595e-301,9.788084768212715e-301,9.786085567912835e-301,9.784086367612955e-301,9.782087167313075e-301,9.780087967013195e-301,9.778088766713315e-301,9.776089566413435e-301,9.774090366113555e-301,9.772091165813675e-301,9.770091965513795e-301,9.768092765213915e-301,9.766093564914035e-301,9.764094364614155e-301,9.762095164314275e-301,9.760095964014395e-301,9.758096763714515e-301,9.756097563414635e-301,9.754098363114755e-301,9.752099162814875e-301,9.750099962514995e-301,9.748100762215113e-301,9.746101561915233e-301,9.744102361615353e-301,9.742103161315473e-301,9.740103961015593e-301,9.738104760715714e-301,9.736105560415834e-301,9.734106360115954e-301,9.732107159816074e-301,9.730107959516194e-301,9.728108759216314e-301,9.726109558916434e-301,9.724110358616554e-301,9.722111158316674e-301,9.720111958016794e-301,9.718112757716914e-301,9.716113557417034e-301,9.714114357117154e-301,9.712115156817274e-301,9.710115956517394e-301,9.708116756217514e-301,9.706117555917634e-301,9.704118355617754e-301,9.702119155317872e-301,9.700119955017992e-301,9.698120754718112e-301,9.696121554418232e-301,9.694122354118352e-301,9.692123153818472e-301,9.690123953518592e-301,9.688124753218712e-301,9.686125552918832e-301,9.684126352618953e-301,9.682127152319073e-301,9.680127952019193e-301,9.678128751719313e-301,9.676129551419433e-301,9.674130351119553e-301,9.672131150819673e-301,9.670131950519793e-301,9.668132750219913e-301,9.666133549920033e-301,9.664134349620153e-301,9.662135149320273e-301,9.660135949020393e-301,9.658136748720513e-301,9.656137548420631e-301,9.654138348120751e-301,9.652139147820871e-301,9.650139947520991e-301,9.648140747221111e-301,9.646141546921231e-301,9.644142346621351e-301,9.642143146321471e-301,9.640143946021591e-301,9.638144745721711e-301,9.636145545421831e-301,9.634146345121951e-301,9.632147144822072e-301,9.630147944522192e-301,9.628148744222312e-301,9.626149543922432e-301,9.624150343622552e-301,9.622151143322672e-301,9.620151943022792e-301,9.618152742722912e-301,9.616153542423032e-301,9.614154342123152e-301,9.612155141823272e-301,9.61015594152339e-301,9.60815674122351e-301,9.60615754092363e-301,9.60415834062375e-301,9.60215914032387e-301,9.60015994002399e-301,9.59816073972411e-301,9.59616153942423e-301,9.59416233912435e-301,9.59216313882447e-301,9.59016393852459e-301,9.58816473822471e-301,9.58616553792483e-301,9.58416633762495e-301,9.58216713732507e-301,9.58016793702519e-301,9.57816873672531e-301,9.57616953642543e-301,9.57417033612555e-301,9.57217113582567e-301,9.57017193552579e-301,9.56817273522591e-301,9.56617353492603e-301,9.564174334626149e-301,9.562175134326269e-301,9.560175934026389e-301,9.558176733726509e-301,9.556177533426629e-301,9.554178333126749e-301,9.552179132826869e-301,9.55017993252699e-301,9.54818073222711e-301,9.54618153192723e-301,9.54418233162735e-301,9.54218313132747e-301,9.54018393102759e-301,9.53818473072771e-301,9.53618553042783e-301,9.53418633012795e-301,9.53218712982807e-301,9.53018792952819e-301,9.52818872922831e-301,9.52618952892843e-301,9.52419032862855e-301,9.52219112832867e-301,9.520191928028788e-301,9.518192727728908e-301,9.516193527429028e-301,9.514194327129148e-301,9.512195126829268e-301,9.510195926529388e-301,9.508196726229508e-301,9.506197525929628e-301,9.504198325629748e-301,9.502199125329868e-301,9.500199925029988e-301,9.498200724730108e-301,9.496201524430228e-301,9.494202324130348e-301,9.492203123830468e-301,9.490203923530588e-301,9.488204723230708e-301,9.486205522930828e-301,9.484206322630948e-301,9.482207122331068e-301,9.480207922031188e-301,9.478208721731308e-301,9.476209521431428e-301,9.474210321131547e-301,9.472211120831667e-301,9.470211920531787e-301,9.468212720231907e-301,9.466213519932027e-301,9.464214319632147e-301,9.462215119332267e-301,9.460215919032387e-301,9.458216718732507e-301,9.456217518432627e-301,9.454218318132747e-301,9.452219117832867e-301,9.450219917532987e-301,9.448220717233107e-301,9.446221516933227e-301,9.444222316633347e-301,9.442223116333467e-301,9.440223916033587e-301,9.438224715733707e-301,9.436225515433827e-301,9.434226315133947e-301,9.432227114834067e-301,9.430227914534187e-301,9.428228714234306e-301,9.426229513934426e-301,9.424230313634546e-301,9.422231113334666e-301,9.420231913034786e-301,9.418232712734906e-301,9.416233512435026e-301,9.414234312135146e-301,9.412235111835266e-301,9.410235911535386e-301,9.408236711235506e-301,9.406237510935626e-301,9.404238310635746e-301,9.402239110335866e-301,9.400239910035986e-301,9.398240709736106e-301,9.396241509436226e-301,9.394242309136346e-301,9.392243108836466e-301,9.390243908536586e-301,9.388244708236706e-301,9.386245507936826e-301,9.384246307636946e-301,9.382247107337065e-301,9.380247907037185e-301,9.378248706737305e-301,9.376249506437425e-301,9.374250306137545e-301,9.372251105837665e-301,9.370251905537785e-301,9.368252705237905e-301,9.366253504938025e-301,9.364254304638145e-301,9.362255104338265e-301,9.360255904038385e-301,9.358256703738505e-301,9.356257503438625e-301,9.354258303138745e-301,9.352259102838865e-301,9.350259902538985e-301,9.348260702239105e-301,9.346261501939225e-301,9.344262301639345e-301,9.342263101339465e-301,9.340263901039585e-301,9.338264700739705e-301,9.336265500439824e-301,9.334266300139944e-301,9.332267099840064e-301,9.330267899540184e-301,9.328268699240304e-301,9.326269498940424e-301,9.324270298640544e-301,9.322271098340664e-301,9.320271898040784e-301,9.318272697740904e-301,9.316273497441024e-301,9.314274297141144e-301,9.312275096841264e-301,9.310275896541384e-301,9.308276696241504e-301,9.306277495941624e-301,9.304278295641744e-301,9.302279095341864e-301,9.300279895041984e-301,9.298280694742104e-301,9.296281494442224e-301,9.294282294142344e-301,9.292283093842464e-301,9.290283893542582e-301,9.288284693242702e-301,9.286285492942822e-301,9.284286292642943e-301,9.282287092343063e-301,9.280287892043183e-301,9.278288691743303e-301,9.276289491443423e-301,9.274290291143543e-301,9.272291090843663e-301,9.270291890543783e-301,9.268292690243903e-301,9.266293489944023e-301,9.264294289644143e-301,9.262295089344263e-301,9.260295889044383e-301,9.258296688744503e-301,9.256297488444623e-301,9.254298288144743e-301,9.252299087844863e-301,9.250299887544983e-301,9.248300687245103e-301,9.246301486945221e-301,9.244302286645341e-301,9.242303086345461e-301,9.240303886045581e-301,9.238304685745701e-301,9.236305485445821e-301,9.234306285145941e-301,9.232307084846061e-301,9.230307884546182e-301,9.228308684246302e-301,9.226309483946422e-301,9.224310283646542e-301,9.222311083346662e-301,9.220311883046782e-301,9.218312682746902e-301,9.216313482447022e-301,9.214314282147142e-301,9.212315081847262e-301,9.210315881547382e-301,9.208316681247502e-301,9.206317480947622e-301,9.204318280647742e-301,9.202319080347862e-301,9.20031988004798e-301,9.1983206797481e-301,9.19632147944822e-301,9.19432227914834e-301,9.19232307884846e-301,9.19032387854858e-301,9.1883246782487e-301,9.18632547794882e-301,9.18432627764894e-301,9.18232707734906e-301,9.18032787704918e-301,9.1783286767493e-301,9.17632947644942e-301,9.17433027614954e-301,9.17233107584966e-301,9.17033187554978e-301,9.1683326752499e-301,9.16633347495002e-301,9.16433427465014e-301,9.16233507435026e-301,9.16033587405038e-301,9.1583366737505e-301,9.15633747345062e-301,9.154338273150739e-301,9.152339072850859e-301,9.15033987255098e-301,9.1483406722511e-301,9.14634147195122e-301,9.14434227165134e-301,9.14234307135146e-301,9.14034387105158e-301,9.1383446707517e-301,9.13634547045182e-301,9.13434627015194e-301,9.13234706985206e-301,9.13034786955218e-301,9.1283486692523e-301,9.12634946895242e-301,9.12435026865254e-301,9.12235106835266e-301,9.12035186805278e-301,9.1183526677529e-301,9.11635346745302e-301,9.11435426715314e-301,9.11235506685326e-301,9.11035586655338e-301,9.108356666253498e-301,9.106357465953618e-301,9.104358265653738e-301,9.102359065353858e-301,9.100359865053978e-301,9.098360664754098e-301,9.096361464454218e-301,9.094362264154338e-301,9.092363063854458e-301,9.090363863554578e-301,9.088364663254698e-301,9.086365462954818e-301,9.084366262654938e-301,9.082367062355058e-301,9.080367862055178e-301,9.078368661755298e-301,9.076369461455418e-301,9.074370261155538e-301,9.072371060855658e-301,9.070371860555779e-301,9.068372660255899e-301,9.066373459956019e-301,9.064374259656139e-301,9.062375059356257e-301,9.060375859056377e-301,9.058376658756497e-301,9.056377458456617e-301,9.054378258156737e-301,9.052379057856857e-301,9.050379857556977e-301,9.048380657257097e-301,9.046381456957217e-301,9.044382256657337e-301,9.042383056357457e-301,9.040383856057577e-301,9.038384655757697e-301,9.036385455457817e-301,9.034386255157937e-301,9.032387054858057e-301,9.030387854558177e-301,9.028388654258297e-301,9.026389453958417e-301,9.024390253658537e-301,9.022391053358657e-301,9.020391853058777e-301,9.018392652758897e-301,9.016393452459016e-301,9.014394252159136e-301,9.012395051859256e-301,9.010395851559376e-301,9.008396651259496e-301,9.006397450959616e-301,9.004398250659736e-301,9.002399050359856e-301,9.000399850059976e-301,8.998400649760096e-301,8.996401449460216e-301,8.994402249160336e-301,8.992403048860456e-301,8.990403848560576e-301,8.988404648260696e-301,8.986405447960816e-301,8.984406247660936e-301,8.982407047361056e-301,8.980407847061176e-301,8.978408646761296e-301,8.976409446461416e-301,8.974410246161536e-301,8.972411045861656e-301,8.970411845561775e-301,8.968412645261895e-301,8.966413444962015e-301,8.964414244662135e-301,8.962415044362255e-301,8.960415844062375e-301,8.958416643762495e-301,8.956417443462615e-301,8.954418243162735e-301,8.952419042862855e-301,8.950419842562975e-301,8.948420642263095e-301,8.946421441963215e-301,8.944422241663335e-301,8.942423041363455e-301,8.940423841063575e-301,8.938424640763695e-301,8.936425440463815e-301,8.934426240163935e-301,8.932427039864055e-301,8.930427839564175e-301,8.928428639264295e-301,8.926429438964414e-301,8.924430238664534e-301,8.922431038364654e-301,8.920431838064774e-301,8.918432637764894e-301,8.916433437465014e-301,8.914434237165134e-301,8.912435036865254e-301,8.910435836565374e-301,8.908436636265494e-301,8.906437435965614e-301,8.904438235665734e-301,8.902439035365854e-301,8.900439835065974e-301,8.898440634766094e-301,8.896441434466214e-301,8.894442234166334e-301,8.892443033866454e-301,8.890443833566574e-301,8.888444633266694e-301,8.886445432966814e-301,8.884446232666934e-301,8.882447032367054e-301,8.880447832067173e-301,8.878448631767293e-301,8.876449431467413e-301,8.874450231167533e-301,8.872451030867653e-301,8.870451830567773e-301,8.868452630267893e-301,8.866453429968013e-301,8.864454229668133e-301,8.862455029368253e-301,8.860455829068373e-301,8.858456628768493e-301,8.856457428468613e-301,8.854458228168733e-301,8.852459027868853e-301,8.850459827568973e-301,8.848460627269093e-301,8.846461426969213e-301,8.844462226669333e-301,8.842463026369453e-301,8.840463826069573e-301,8.838464625769693e-301,8.836465425469813e-301,8.834466225169931e-301,8.832467024870051e-301,8.830467824570172e-301,8.828468624270292e-301,8.826469423970412e-301,8.824470223670532e-301,8.822471023370652e-301,8.820471823070772e-301,8.818472622770892e-301,8.816473422471012e-301,8.814474222171132e-301,8.812475021871252e-301,8.810475821571372e-301,8.808476621271492e-301,8.806477420971612e-301,8.804478220671732e-301,8.802479020371852e-301,8.800479820071972e-301,8.798480619772092e-301,8.796481419472212e-301,8.794482219172332e-301,8.792483018872452e-301,8.790483818572572e-301,8.78848461827269e-301,8.78648541797281e-301,8.78448621767293e-301,8.78248701737305e-301,8.78048781707317e-301,8.77848861677329e-301,8.77648941647341e-301,8.77449021617353e-301,8.77249101587365e-301,8.77049181557377e-301,8.76849261527389e-301,8.76649341497401e-301,8.76449421467413e-301,8.76249501437425e-301,8.76049581407437e-301,8.75849661377449e-301,8.75649741347461e-301,8.75449821317473e-301,8.75249901287485e-301,8.75049981257497e-301,8.748500612275091e-301,8.746501411975211e-301,8.744502211675331e-301,8.74250301137545e-301,8.74050381107557e-301,8.73850461077569e-301,8.73650541047581e-301,8.73450621017593e-301,8.73250700987605e-301,8.73050780957617e-301,8.72850860927629e-301,8.72650940897641e-301,8.72451020867653e-301,8.72251100837665e-301,8.72051180807677e-301,8.71851260777689e-301,8.71651340747701e-301,8.71451420717713e-301,8.71251500687725e-301,8.71051580657737e-301,8.70851660627749e-301,8.70651740597761e-301,8.70451820567773e-301,8.70251900537785e-301,8.70051980507797e-301,8.69852060477809e-301,8.696521404478208e-301,8.694522204178328e-301,8.692523003878448e-301,8.690523803578568e-301,8.688524603278688e-301,8.686525402978808e-301,8.684526202678928e-301,8.682527002379048e-301,8.680527802079168e-301,8.678528601779288e-301,8.676529401479408e-301,8.674530201179528e-301,8.672531000879648e-301,8.670531800579768e-301,8.668532600279889e-301,8.666533399980009e-301,8.664534199680129e-301,8.662534999380249e-301,8.660535799080369e-301,8.658536598780489e-301,8.656537398480609e-301,8.654538198180729e-301,8.652538997880847e-301,8.650539797580967e-301,8.648540597281087e-301,8.646541396981207e-301,8.644542196681327e-301,8.642542996381447e-301,8.640543796081567e-301,8.638544595781687e-301,8.636545395481807e-301,8.634546195181927e-301,8.632546994882047e-301,8.630547794582167e-301,8.628548594282287e-301,8.626549393982407e-301,8.624550193682527e-301,8.622550993382647e-301,8.620551793082767e-301,8.618552592782887e-301,8.616553392483007e-301,8.614554192183128e-301,8.612554991883248e-301,8.610555791583368e-301,8.608556591283488e-301,8.606557390983606e-301,8.604558190683726e-301,8.602558990383846e-301,8.600559790083966e-301,8.598560589784086e-301,8.596561389484206e-301,8.594562189184326e-301,8.592562988884446e-301,8.590563788584566e-301,8.588564588284686e-301,8.586565387984806e-301,8.584566187684926e-301,8.582566987385046e-301,8.580567787085166e-301,8.578568586785286e-301,8.576569386485406e-301,8.574570186185526e-301,8.572570985885646e-301,8.570571785585766e-301,8.568572585285886e-301,8.566573384986006e-301,8.564574184686126e-301,8.562574984386246e-301,8.560575784086365e-301,8.558576583786485e-301,8.556577383486605e-301,8.554578183186725e-301,8.552578982886845e-301,8.550579782586965e-301,8.548580582287085e-301,8.546581381987205e-301,8.544582181687325e-301,8.542582981387445e-301,8.540583781087565e-301,8.538584580787685e-301,8.536585380487805e-301,8.534586180187925e-301,8.532586979888045e-301,8.530587779588165e-301,8.528588579288285e-301,8.526589378988405e-301,8.524590178688525e-301,8.522590978388645e-301,8.520591778088765e-301,8.518592577788885e-301,8.516593377489005e-301,8.514594177189124e-301,8.512594976889244e-301,8.510595776589364e-301,8.508596576289484e-301,8.506597375989604e-301,8.504598175689724e-301,8.502598975389844e-301,8.500599775089964e-301,8.498600574790084e-301,8.496601374490204e-301,8.494602174190324e-301,8.492602973890444e-301,8.490603773590564e-301,8.488604573290684e-301,8.486605372990804e-301,8.484606172690924e-301,8.482606972391044e-301,8.480607772091164e-301,8.478608571791284e-301,8.476609371491404e-301,8.474610171191524e-301,8.472610970891644e-301,8.470611770591764e-301,8.468612570291883e-301,8.466613369992003e-301,8.464614169692123e-301,8.462614969392243e-301,8.460615769092363e-301,8.458616568792483e-301,8.456617368492603e-301,8.454618168192723e-301,8.452618967892843e-301,8.450619767592963e-301,8.448620567293083e-301,8.446621366993203e-301,8.444622166693323e-301,8.442622966393443e-301,8.440623766093563e-301,8.438624565793683e-301,8.436625365493803e-301,8.434626165193923e-301,8.432626964894043e-301,8.430627764594163e-301,8.428628564294283e-301,8.426629363994403e-301,8.424630163694523e-301,8.422630963394642e-301,8.420631763094762e-301,8.418632562794882e-301,8.416633362495002e-301,8.414634162195122e-301,8.412634961895242e-301,8.410635761595362e-301,8.408636561295482e-301,8.406637360995602e-301,8.404638160695722e-301,8.402638960395842e-301,8.400639760095962e-301,8.398640559796082e-301,8.396641359496202e-301,8.394642159196322e-301,8.392642958896442e-301,8.390643758596562e-301,8.388644558296682e-301,8.386645357996802e-301,8.384646157696922e-301,8.382646957397042e-301,8.380647757097162e-301,8.378648556797282e-301,8.3766493564974e-301,8.37465015619752e-301,8.37265095589764e-301,8.37065175559776e-301,8.36865255529788e-301,8.366653354998e-301,8.36465415469812e-301,8.36265495439824e-301,8.36065575409836e-301,8.35865655379848e-301,8.3566573534986e-301,8.35465815319872e-301,8.35265895289884e-301,8.35065975259896e-301,8.348660552299081e-301,8.346661351999201e-301,8.344662151699321e-301,8.342662951399441e-301,8.340663751099561e-301,8.338664550799681e-301,8.336665350499801e-301,8.334666150199921e-301,8.33266694990004e-301,8.33066774960016e-301,8.32866854930028e-301,8.3266693490004e-301,8.32467014870052e-301,8.32267094840064e-301,8.32067174810076e-301,8.31867254780088e-301,8.316673347501e-301,8.31467414720112e-301,8.31267494690124e-301,8.31067574660136e-301,8.30867654630148e-301,8.3066773460016e-301,8.30467814570172e-301,8.30267894540184e-301,8.30067974510196e-301,8.29868054480208e-301,8.2966813445022e-301,8.29468214420232e-301,8.29268294390244e-301,8.29068374360256e-301,8.28868454330268e-301,8.286685343002798e-301,8.284686142702918e-301,8.282686942403038e-301,8.280687742103158e-301,8.278688541803278e-301,8.276689341503398e-301,8.274690141203518e-301,8.272690940903638e-301,8.270691740603758e-301,8.268692540303879e-301,8.266693340003999e-301,8.264694139704119e-301,8.262694939404239e-301,8.260695739104359e-301,8.258696538804479e-301,8.256697338504599e-301,8.254698138204719e-301,8.252698937904839e-301,8.250699737604959e-301,8.248700537305079e-301,8.246701337005199e-301,8.244702136705319e-301,8.242702936405439e-301,8.240703736105557e-301,8.238704535805677e-301,8.236705335505797e-301,8.234706135205917e-301,8.232706934906037e-301,8.230707734606157e-301,8.228708534306277e-301,8.226709334006397e-301,8.224710133706517e-301,8.222710933406637e-301,8.220711733106757e-301,8.218712532806877e-301,8.216713332506997e-301,8.214714132207118e-301,8.212714931907238e-301,8.210715731607358e-301,8.208716531307478e-301,8.206717331007598e-301,8.204718130707718e-301,8.202718930407838e-301,8.200719730107958e-301,8.198720529808078e-301,8.196721329508198e-301,8.194722129208316e-301,8.192722928908436e-301,8.190723728608556e-301,8.188724528308676e-301,8.186725328008796e-301,8.184726127708916e-301,8.182726927409036e-301,8.180727727109156e-301,8.178728526809276e-301,8.176729326509396e-301,8.174730126209516e-301,8.172730925909636e-301,8.170731725609756e-301,8.168732525309876e-301,8.166733325009996e-301,8.164734124710116e-301,8.162734924410236e-301,8.160735724110357e-301,8.158736523810477e-301,8.156737323510597e-301,8.154738123210717e-301,8.152738922910837e-301,8.150739722610957e-301,8.148740522311075e-301,8.146741322011195e-301,8.144742121711315e-301,8.142742921411435e-301,8.140743721111555e-301,8.138744520811675e-301,8.136745320511795e-301,8.134746120211915e-301,8.132746919912035e-301,8.130747719612155e-301,8.128748519312275e-301,8.126749319012395e-301,8.124750118712515e-301,8.122750918412635e-301,8.120751718112755e-301,8.118752517812875e-301,8.116753317512995e-301,8.114754117213115e-301,8.112754916913235e-301,8.110755716613355e-301,8.108756516313475e-301,8.106757316013596e-301,8.104758115713716e-301,8.102758915413834e-301,8.100759715113954e-301,8.098760514814074e-301,8.096761314514194e-301,8.094762114214314e-301,8.092762913914434e-301,8.090763713614554e-301,8.088764513314674e-301,8.086765313014794e-301,8.084766112714914e-301,8.082766912415034e-301,8.080767712115154e-301,8.078768511815274e-301,8.076769311515394e-301,8.074770111215514e-301,8.072770910915634e-301,8.070771710615754e-301,8.068772510315874e-301,8.066773310015994e-301,8.064774109716114e-301,8.062774909416234e-301,8.060775709116354e-301,8.058776508816473e-301,8.056777308516593e-301,8.054778108216713e-301,8.052778907916833e-301,8.050779707616953e-301,8.048780507317073e-301,8.046781307017193e-301,8.044782106717313e-301,8.042782906417433e-301,8.040783706117553e-301,8.038784505817673e-301,8.036785305517793e-301,8.034786105217913e-301,8.032786904918033e-301,8.030787704618153e-301,8.028788504318273e-301,8.026789304018393e-301,8.024790103718513e-301,8.022790903418633e-301,8.020791703118753e-301,8.018792502818873e-301,8.016793302518993e-301,8.014794102219113e-301,8.012794901919232e-301,8.010795701619352e-301,8.008796501319472e-301,8.006797301019592e-301,8.004798100719712e-301,8.002798900419832e-301,8.000799700119952e-301,7.998800499820072e-301,7.996801299520192e-301,7.994802099220312e-301,7.992802898920432e-301,7.990803698620552e-301,7.988804498320672e-301,7.986805298020792e-301,7.984806097720912e-301,7.982806897421032e-301,7.980807697121152e-301,7.978808496821272e-301,7.976809296521392e-301,7.974810096221512e-301,7.972810895921632e-301,7.970811695621752e-301,7.968812495321872e-301,7.96681329502199e-301,7.96481409472211e-301,7.96281489442223e-301,7.96081569412235e-301,7.95881649382247e-301,7.95681729352259e-301,7.95481809322271e-301,7.95281889292283e-301,7.95081969262295e-301,7.94882049232307e-301,7.946821292023191e-301,7.944822091723311e-301,7.942822891423431e-301,7.940823691123551e-301,7.938824490823671e-301,7.936825290523791e-301,7.934826090223911e-301,7.932826889924031e-301,7.930827689624151e-301,7.928828489324271e-301,7.926829289024391e-301,7.924830088724511e-301,7.922830888424631e-301,7.92083168812475e-301,7.91883248782487e-301,7.91683328752499e-301,7.91483408722511e-301,7.91283488692523e-301,7.91083568662535e-301,7.90883648632547e-301,7.90683728602559e-301,7.90483808572571e-301,7.90283888542583e-301,7.90083968512595e-301,7.89884048482607e-301,7.89684128452619e-301,7.89484208422631e-301,7.89284288392643e-301,7.89084368362655e-301,7.88884448332667e-301,7.88684528302679e-301,7.88484608272691e-301,7.88284688242703e-301,7.88084768212715e-301,7.87884848182727e-301,7.87684928152739e-301,7.874850081227508e-301,7.872850880927628e-301,7.870851680627748e-301,7.868852480327868e-301,7.866853280027989e-301,7.864854079728109e-301,7.862854879428229e-301,7.860855679128349e-301,7.858856478828469e-301,7.856857278528589e-301,7.854858078228709e-301,7.852858877928829e-301,7.850859677628949e-301,7.848860477329069e-301,7.846861277029189e-301,7.844862076729309e-301,7.842862876429429e-301,7.840863676129549e-301,7.838864475829669e-301,7.836865275529789e-301,7.834866075229909e-301,7.832866874930029e-301,7.830867674630149e-301,7.828868474330267e-301,7.826869274030387e-301,7.824870073730507e-301,7.822870873430627e-301,7.820871673130747e-301,7.818872472830867e-301,7.816873272530987e-301,7.814874072231107e-301,7.812874871931228e-301,7.810875671631348e-301,7.808876471331468e-301,7.806877271031588e-301,7.804878070731708e-301,7.802878870431828e-301,7.800879670131948e-301,7.798880469832068e-301,7.796881269532188e-301,7.794882069232308e-301,7.792882868932428e-301,7.790883668632548e-301,7.788884468332668e-301,7.786885268032788e-301,7.784886067732908e-301,7.782886867433026e-301,7.780887667133146e-301,7.778888466833266e-301,7.776889266533386e-301,7.774890066233506e-301,7.772890865933626e-301,7.770891665633746e-301,7.768892465333866e-301,7.766893265033986e-301,7.764894064734106e-301,7.762894864434226e-301,7.760895664134346e-301,7.758896463834467e-301,7.756897263534587e-301,7.754898063234707e-301,7.752898862934827e-301,7.750899662634947e-301,7.748900462335067e-301,7.746901262035187e-301,7.744902061735307e-301,7.742902861435427e-301,7.740903661135547e-301,7.738904460835665e-301,7.736905260535785e-301,7.734906060235905e-301,7.732906859936025e-301,7.730907659636145e-301,7.728908459336265e-301,7.726909259036385e-301,7.724910058736505e-301,7.722910858436625e-301,7.720911658136745e-301,7.718912457836865e-301,7.716913257536985e-301,7.714914057237105e-301,7.712914856937225e-301,7.710915656637345e-301,7.708916456337465e-301,7.706917256037586e-301,7.704918055737706e-301,7.702918855437826e-301,7.700919655137946e-301,7.698920454838066e-301,7.696921254538186e-301,7.694922054238306e-301,7.692922853938424e-301,7.690923653638544e-301,7.688924453338664e-301,7.686925253038784e-301,7.684926052738904e-301,7.682926852439024e-301,7.680927652139144e-301,7.678928451839264e-301,7.676929251539384e-301,7.674930051239504e-301,7.672930850939624e-301,7.670931650639744e-301,7.668932450339864e-301,7.666933250039984e-301,7.664934049740104e-301,7.662934849440224e-301,7.660935649140344e-301,7.658936448840464e-301,7.656937248540584e-301,7.654938048240704e-301,7.652938847940825e-301,7.650939647640945e-301,7.648940447341065e-301,7.646941247041183e-301,7.644942046741303e-301,7.642942846441423e-301,7.640943646141543e-301,7.638944445841663e-301,7.636945245541783e-301,7.634946045241903e-301,7.632946844942023e-301,7.630947644642143e-301,7.628948444342263e-301,7.626949244042383e-301,7.624950043742503e-301,7.622950843442623e-301,7.620951643142743e-301,7.618952442842863e-301,7.616953242542983e-301,7.614954042243103e-301,7.612954841943223e-301,7.610955641643343e-301,7.608956441343463e-301,7.606957241043583e-301,7.604958040743703e-301,7.602958840443823e-301,7.600959640143942e-301,7.598960439844062e-301,7.596961239544182e-301,7.594962039244302e-301,7.592962838944422e-301,7.590963638644542e-301,7.588964438344662e-301,7.586965238044782e-301,7.584966037744902e-301,7.582966837445022e-301,7.580967637145142e-301,7.578968436845262e-301,7.576969236545382e-301,7.574970036245502e-301,7.572970835945622e-301,7.570971635645742e-301,7.568972435345862e-301,7.566973235045982e-301,7.564974034746102e-301,7.562974834446222e-301,7.560975634146342e-301,7.558976433846462e-301,7.556977233546582e-301,7.5549780332467e-301,7.55297883294682e-301,7.55097963264694e-301,7.54898043234706e-301,7.546981232047181e-301,7.544982031747301e-301,7.542982831447421e-301,7.540983631147541e-301,7.538984430847661e-301,7.536985230547781e-301,7.534986030247901e-301,7.532986829948021e-301,7.530987629648141e-301,7.528988429348261e-301,7.526989229048381e-301,7.524990028748501e-301,7.522990828448621e-301,7.520991628148741e-301,7.518992427848861e-301,7.516993227548981e-301,7.514994027249101e-301,7.512994826949221e-301,7.510995626649341e-301,7.50899642634946e-301,7.50699722604958e-301,7.5049980257497e-301,7.50299882544982e-301,7.50099962514994e-301,7.49900042485006e-301,7.49700122455018e-301,7.4950020242503e-301,7.49300282395042e-301,7.49100362365054e-301,7.48900442335066e-301,7.48700522305078e-301,7.4850060227509e-301,7.48300682245102e-301,7.48100762215114e-301,7.47900842185126e-301,7.47700922155138e-301,7.4750100212515e-301,7.47301082095162e-301,7.47101162065174e-301,7.46901242035186e-301,7.46701322005198e-301,7.465014019752099e-301,7.463014819452219e-301,7.461015619152339e-301,7.4590164188524594e-301,7.4570172185525795e-301,7.4550180182526995e-301,7.453018817952819e-301,7.451019617652939e-301,7.449020417353059e-301,7.447021217053179e-301,7.445022016753299e-301,7.443022816453419e-301,7.441023616153539e-301,7.439024415853659e-301,7.437025215553779e-301,7.435026015253899e-301,7.433026814954019e-301,7.431027614654139e-301,7.429028414354258e-301,7.427029214054378e-301,7.425030013754498e-301,7.423030813454618e-301,7.421031613154738e-301,7.419032412854858e-301,7.417033212554978e-301,7.415034012255098e-301,7.413034811955218e-301,7.411035611655338e-301,7.409036411355458e-301,7.4070372110555776e-301,7.405038010755698e-301,7.403038810455818e-301,7.401039610155938e-301,7.399040409856058e-301,7.397041209556178e-301,7.395042009256298e-301,7.393042808956418e-301,7.391043608656538e-301,7.389044408356658e-301,7.387045208056778e-301,7.385046007756897e-301,7.383046807457017e-301,7.381047607157137e-301,7.379048406857257e-301,7.377049206557377e-301,7.375050006257497e-301,7.373050805957617e-301,7.371051605657737e-301,7.369052405357857e-301,7.367053205057977e-301,7.365054004758097e-301,7.363054804458217e-301,7.3610556041583365e-301,7.3590564038584565e-301,7.3570572035585765e-301,7.3550580032586966e-301,7.3530588029588166e-301,7.351059602658937e-301,7.349060402359057e-301,7.347061202059177e-301,7.345062001759297e-301,7.343062801459417e-301,7.341063601159537e-301,7.339064400859656e-301,7.337065200559776e-301,7.335066000259896e-301,7.333066799960016e-301,7.331067599660136e-301,7.329068399360256e-301,7.327069199060376e-301,7.325069998760496e-301,7.323070798460616e-301,7.321071598160736e-301,7.319072397860856e-301,7.317073197560976e-301,7.315073997261095e-301,7.3130747969612154e-301,7.3110755966613354e-301,7.3090763963614555e-301,7.3070771960615755e-301,7.3050779957616955e-301,7.3030787954618155e-301,7.3010795951619356e-301,7.299080394862056e-301,7.297081194562176e-301,7.295081994262296e-301,7.293082793962415e-301,7.291083593662535e-301,7.289084393362655e-301,7.287085193062775e-301,7.285085992762895e-301,7.283086792463015e-301,7.281087592163135e-301,7.279088391863255e-301,7.277089191563375e-301,7.275089991263495e-301,7.273090790963615e-301,7.271091590663735e-301,7.269092390363854e-301,7.267093190063974e-301,7.265093989764094e-301,7.263094789464214e-301,7.261095589164334e-301,7.2590963888644544e-301,7.2570971885645744e-301,7.2550979882646945e-301,7.2530987879648145e-301,7.2510995876649345e-301,7.2491003873650545e-301,7.247101187065174e-301,7.245101986765294e-301,7.243102786465414e-301,7.241103586165534e-301,7.239104385865654e-301,7.237105185565774e-301,7.235105985265894e-301,7.233106784966014e-301,7.231107584666134e-301,7.229108384366254e-301,7.227109184066374e-301,7.225109983766493e-301,7.223110783466613e-301,7.221111583166733e-301,7.219112382866853e-301,7.217113182566973e-301,7.215113982267093e-301,7.213114781967213e-301,7.211115581667333e-301,7.209116381367453e-301,7.207117181067573e-301,7.2051179807676934e-301,7.2031187804678134e-301,7.201119580167933e-301,7.199120379868053e-301,7.197121179568173e-301,7.195121979268293e-301,7.193122778968413e-301,7.191123578668533e-301,7.189124378368653e-301,7.187125178068773e-301,7.185125977768893e-301,7.183126777469013e-301,7.181127577169133e-301,7.179128376869252e-301,7.177129176569372e-301,7.175129976269492e-301,7.173130775969612e-301,7.171131575669732e-301,7.169132375369852e-301,7.167133175069972e-301,7.165133974770092e-301,7.163134774470212e-301,7.161135574170332e-301,7.159136373870452e-301,7.157137173570572e-301,7.1551379732706916e-301,7.1531387729708116e-301,7.151139572670932e-301,7.149140372371052e-301,7.147141172071172e-301,7.145141971771292e-301,7.143142771471412e-301,7.141143571171532e-301,7.139144370871652e-301,7.137145170571772e-301,7.135145970271892e-301,7.133146769972011e-301,7.131147569672131e-301,7.129148369372251e-301,7.127149169072371e-301,7.125149968772491e-301,7.123150768472611e-301,7.121151568172731e-301,7.119152367872851e-301,7.117153167572971e-301,7.115153967273091e-301,7.113154766973211e-301,7.1111555666733304e-301,7.1091563663734505e-301,7.1071571660735705e-301,7.1051579657736905e-301,7.1031587654738105e-301,7.1011595651739306e-301,7.0991603648740506e-301,7.097161164574171e-301,7.095161964274291e-301,7.093162763974411e-301,7.091163563674531e-301,7.089164363374651e-301,7.08716516307477e-301,7.08516596277489e-301,7.08316676247501e-301,7.08116756217513e-301,7.07916836187525e-301,7.07716916157537e-301,7.07516996127549e-301,7.07317076097561e-301,7.07117156067573e-301,7.06917236037585e-301,7.06717316007597e-301,7.065173959776089e-301,7.063174759476209e-301,7.061175559176329e-301,7.059176358876449e-301,7.0571771585765694e-301,7.0551779582766895e-301,7.0531787579768095e-301,7.0511795576769295e-301,7.0491803573770495e-301,7.0471811570771696e-301,7.0451819567772896e-301,7.04318275647741e-301,7.041183556177529e-301,7.039184355877649e-301,7.037185155577769e-301,7.035185955277889e-301,7.033186754978009e-301,7.031187554678129e-301,7.029188354378249e-301,7.027189154078369e-301,7.025189953778489e-301,7.023190753478609e-301,7.021191553178729e-301,7.019192352878848e-301,7.017193152578968e-301,7.015193952279088e-301,7.013194751979208e-301,7.011195551679328e-301,7.009196351379448e-301,7.007197151079568e-301,7.0051979507796884e-301,7.0031987504798084e-301,7.0011995501799285e-301,6.9992003498800485e-301,6.9972011495801685e-301,6.995201949280288e-301,6.993202748980408e-301,6.991203548680528e-301,6.989204348380648e-301,6.987205148080768e-301,6.985205947780888e-301,6.983206747481008e-301,6.981207547181128e-301,6.979208346881248e-301,6.977209146581368e-301,6.975209946281488e-301,6.973210745981607e-301,6.971211545681727e-301,6.969212345381847e-301,6.967213145081967e-301,6.965213944782087e-301,6.963214744482207e-301,6.961215544182327e-301,6.959216343882447e-301,6.957217143582567e-301,6.955217943282687e-301,6.953218742982807e-301,6.951219542682927e-301,6.949220342383047e-301,6.947221142083167e-301,6.945221941783287e-301,6.943222741483407e-301,6.941223541183527e-301,6.939224340883647e-301,6.937225140583767e-301,6.935225940283887e-301,6.933226739984007e-301,6.931227539684127e-301,6.929228339384247e-301,6.927229139084366e-301,6.925229938784486e-301,6.923230738484606e-301,6.921231538184726e-301,6.919232337884846e-301,6.917233137584966e-301,6.915233937285086e-301,6.913234736985206e-301,6.911235536685326e-301,6.909236336385446e-301,6.907237136085566e-301,6.9052379357856855e-301,6.9032387354858055e-301,6.9012395351859255e-301,6.8992403348860456e-301,6.897241134586166e-301,6.895241934286286e-301,6.893242733986406e-301,6.891243533686526e-301,6.889244333386646e-301,6.887245133086766e-301,6.885245932786886e-301,6.883246732487006e-301,6.881247532187125e-301,6.879248331887245e-301,6.877249131587365e-301,6.875249931287485e-301,6.873250730987605e-301,6.871251530687725e-301,6.869252330387845e-301,6.867253130087965e-301,6.865253929788085e-301,6.863254729488205e-301,6.861255529188325e-301,6.859256328888444e-301,6.8572571285885644e-301,6.8552579282886845e-301,6.8532587279888045e-301,6.8512595276889245e-301,6.8492603273890445e-301,6.8472611270891646e-301,6.8452619267892846e-301,6.843262726489405e-301,6.841263526189525e-301,6.839264325889645e-301,6.837265125589765e-301,6.835265925289884e-301,6.833266724990004e-301,6.831267524690124e-301,6.829268324390244e-301,6.827269124090364e-301,6.825269923790484e-301,6.823270723490604e-301,6.821271523190724e-301,6.819272322890844e-301,6.817273122590964e-301,6.815273922291084e-301,6.813274721991203e-301,6.811275521691323e-301,6.809276321391443e-301,6.807277121091563e-301,6.805277920791683e-301,6.8032787204918034e-301,6.8012795201919235e-301,6.7992803198920435e-301,6.7972811195921635e-301,6.7952819192922835e-301,6.7932827189924036e-301,6.791283518692523e-301,6.789284318392643e-301,6.787285118092763e-301,6.785285917792883e-301,6.783286717493003e-301,6.781287517193123e-301,6.779288316893243e-301,6.777289116593363e-301,6.775289916293483e-301,6.773290715993603e-301,6.771291515693723e-301,6.769292315393843e-301,6.767293115093962e-301,6.765293914794082e-301,6.763294714494202e-301,6.761295514194322e-301,6.759296313894442e-301,6.757297113594562e-301,6.755297913294682e-301,6.753298712994802e-301,6.7512995126949224e-301,6.7493003123950424e-301,6.7473011120951625e-301,6.745301911795282e-301,6.743302711495402e-301,6.741303511195522e-301,6.739304310895642e-301,6.737305110595762e-301,6.735305910295882e-301,6.733306709996002e-301,6.731307509696122e-301,6.729308309396242e-301,6.727309109096362e-301,6.725309908796482e-301,6.723310708496602e-301,6.721311508196721e-301,6.719312307896841e-301,6.717313107596961e-301,6.715313907297081e-301,6.713314706997201e-301,6.711315506697321e-301,6.709316306397441e-301,6.707317106097561e-301,6.705317905797681e-301,6.703318705497801e-301,6.701319505197921e-301,6.6993203048980406e-301,6.697321104598161e-301,6.695321904298281e-301,6.693322703998401e-301,6.691323503698521e-301,6.689324303398641e-301,6.687325103098761e-301,6.685325902798881e-301,6.683326702499001e-301,6.681327502199121e-301,6.679328301899241e-301,6.677329101599361e-301,6.67532990129948e-301,6.6733307009996e-301,6.67133150069972e-301,6.66933230039984e-301,6.66733310009996e-301,6.66533389980008e-301,6.6633346995002e-301,6.66133549920032e-301,6.65933629890044e-301,6.65733709860056e-301,6.65533789830068e-301,6.6533386980007995e-301,6.6513394977009195e-301,6.6493402974010395e-301,6.6473410971011595e-301,6.6453418968012796e-301,6.6433426965014e-301,6.64134349620152e-301,6.63934429590164e-301,6.63734509560176e-301,6.63534589530188e-301,6.633346695002e-301,6.631347494702119e-301,6.629348294402239e-301,6.627349094102359e-301,6.625349893802479e-301,6.623350693502599e-301,6.621351493202719e-301,6.619352292902839e-301,6.617353092602959e-301,6.615353892303079e-301,6.613354692003199e-301,6.611355491703319e-301,6.609356291403439e-301,6.607357091103558e-301,6.605357890803678e-301,6.6033586905037984e-301,6.6013594902039185e-301,6.5993602899040385e-301,6.5973610896041585e-301,6.5953618893042785e-301,6.5933626890043986e-301,6.5913634887045186e-301,6.589364288404639e-301,6.587365088104759e-301,6.585365887804878e-301,6.583366687504998e-301,6.581367487205118e-301,6.579368286905238e-301,6.577369086605358e-301,6.575369886305478e-301,6.573370686005598e-301,6.571371485705718e-301,6.569372285405838e-301,6.567373085105958e-301,6.565373884806078e-301,6.563374684506198e-301,6.561375484206317e-301,6.559376283906437e-301,6.557377083606557e-301,6.555377883306677e-301,6.553378683006797e-301,6.551379482706917e-301,6.5493802824070374e-301,6.5473810821071575e-301,6.5453818818072775e-301,6.5433826815073975e-301,6.5413834812075175e-301,6.539384280907637e-301,6.537385080607757e-301,6.535385880307877e-301,6.533386680007997e-301,6.531387479708117e-301,6.529388279408237e-301,6.527389079108357e-301,6.525389878808477e-301,6.523390678508597e-301,6.521391478208717e-301,6.519392277908837e-301,6.517393077608956e-301,6.515393877309076e-301,6.513394677009196e-301,6.511395476709316e-301,6.509396276409436e-301,6.507397076109556e-301,6.505397875809676e-301,6.503398675509796e-301,6.501399475209916e-301,6.499400274910036e-301,6.497401074610156e-301,6.4954018743102764e-301,6.493402674010396e-301,6.491403473710516e-301,6.489404273410636e-301,6.487405073110756e-301,6.485405872810876e-301,6.483406672510996e-301,6.481407472211116e-301,6.479408271911236e-301,6.477409071611356e-301,6.475409871311476e-301,6.473410671011596e-301,6.471411470711715e-301,6.469412270411835e-301,6.467413070111955e-301,6.465413869812075e-301,6.463414669512195e-301,6.461415469212315e-301,6.459416268912435e-301,6.457417068612555e-301,6.455417868312675e-301,6.453418668012795e-301,6.451419467712915e-301,6.449420267413035e-301,6.4474210671131545e-301,6.4454218668132746e-301,6.443422666513395e-301,6.441423466213515e-301,6.439424265913635e-301,6.437425065613755e-301,6.435425865313875e-301,6.433426665013995e-301,6.431427464714115e-301,6.429428264414235e-301,6.427429064114355e-301,6.425429863814474e-301,6.423430663514594e-301,6.421431463214714e-301,6.419432262914834e-301,6.417433062614954e-301,6.415433862315074e-301,6.413434662015194e-301,6.411435461715314e-301,6.409436261415434e-301,6.407437061115554e-301,6.405437860815674e-301,6.403438660515794e-301,6.4014394602159134e-301,6.3994402599160335e-301,6.3974410596161535e-301,6.3954418593162735e-301,6.3934426590163935e-301,6.3914434587165136e-301,6.389444258416634e-301,6.387445058116754e-301,6.385445857816874e-301,6.383446657516994e-301,6.381447457217114e-301,6.379448256917233e-301,6.377449056617353e-301,6.375449856317473e-301,6.373450656017593e-301,6.371451455717713e-301,6.369452255417833e-301,6.367453055117953e-301,6.365453854818073e-301,6.363454654518193e-301,6.361455454218313e-301,6.359456253918433e-301,6.357457053618552e-301,6.355457853318672e-301,6.353458653018792e-301,6.351459452718912e-301,6.3494602524190324e-301,6.3474610521191525e-301,6.3454618518192725e-301,6.3434626515193925e-301,6.3414634512195125e-301,6.3394642509196326e-301,6.3374650506197526e-301,6.335465850319873e-301,6.333466650019992e-301,6.331467449720112e-301,6.329468249420232e-301,6.327469049120352e-301,6.325469848820472e-301,6.323470648520592e-301,6.321471448220712e-301,6.319472247920832e-301,6.317473047620952e-301,6.315473847321072e-301,6.313474647021192e-301,6.311475446721311e-301,6.309476246421431e-301,6.307477046121551e-301,6.305477845821671e-301,6.303478645521791e-301,6.301479445221911e-301,6.299480244922031e-301,6.297481044622151e-301,6.2954818443222714e-301,6.2934826440223915e-301,6.2914834437225115e-301,6.2894842434226315e-301,6.287485043122751e-301,6.285485842822871e-301,6.283486642522991e-301,6.281487442223111e-301,6.279488241923231e-301,6.277489041623351e-301,6.275489841323471e-301,6.273490641023591e-301,6.271491440723711e-301,6.269492240423831e-301,6.267493040123951e-301,6.26549383982407e-301,6.26349463952419e-301,6.26149543922431e-301,6.25949623892443e-301,6.25749703862455e-301,6.25549783832467e-301,6.25349863802479e-301,6.25149943772491e-301,6.24950023742503e-301,6.24750103712515e-301,6.24550183682527e-301,6.24350263652539e-301,6.24150343622551e-301,6.23950423592563e-301,6.23750503562575e-301,6.23550583532587e-301,6.23350663502599e-301,6.23150743472611e-301,6.22950823442623e-301,6.22750903412635e-301,6.22550983382647e-301,6.22351063352659e-301,6.22151143322671e-301,6.219512232926829e-301,6.217513032626949e-301,6.215513832327069e-301,6.213514632027189e-301,6.211515431727309e-301,6.209516231427429e-301,6.207517031127549e-301,6.205517830827669e-301,6.203518630527789e-301,6.201519430227909e-301,6.199520229928029e-301,6.1975210296281485e-301,6.1955218293282685e-301,6.1935226290283885e-301,6.1915234287285086e-301,6.189524228428629e-301,6.187525028128749e-301,6.185525827828869e-301,6.183526627528989e-301,6.181527427229109e-301,6.179528226929229e-301,6.177529026629349e-301,6.175529826329469e-301,6.173530626029588e-301,6.171531425729708e-301,6.169532225429828e-301,6.167533025129948e-301,6.165533824830068e-301,6.163534624530188e-301,6.161535424230308e-301,6.159536223930428e-301,6.157537023630548e-301,6.155537823330668e-301,6.153538623030788e-301,6.151539422730907e-301,6.1495402224310274e-301,6.1475410221311474e-301,6.1455418218312675e-301,6.1435426215313875e-301,6.1415434212315075e-301,6.1395442209316275e-301,6.1375450206317476e-301,6.135545820331868e-301,6.133546620031988e-301,6.131547419732108e-301,6.129548219432228e-301,6.127549019132347e-301,6.125549818832467e-301,6.123550618532587e-301,6.121551418232707e-301,6.119552217932827e-301,6.117553017632947e-301,6.115553817333067e-301,6.113554617033187e-301,6.111555416733307e-301,6.109556216433427e-301,6.107557016133547e-301,6.105557815833666e-301,6.103558615533786e-301,6.101559415233906e-301,6.099560214934026e-301,6.097561014634146e-301,6.0955618143342664e-301,6.0935626140343864e-301,6.0915634137345065e-301,6.0895642134346265e-301,6.0875650131347465e-301,6.0855658128348665e-301,6.083566612534986e-301,6.081567412235106e-301,6.079568211935226e-301,6.077569011635346e-301,6.075569811335466e-301,6.073570611035586e-301,6.071571410735706e-301,6.069572210435826e-301,6.067573010135946e-301,6.065573809836066e-301,6.063574609536186e-301,6.061575409236306e-301,6.059576208936425e-301,6.057577008636545e-301,6.055577808336665e-301,6.053578608036785e-301,6.051579407736905e-301,6.049580207437025e-301,6.047581007137145e-301,6.045581806837265e-301,6.043582606537385e-301,6.0415834062375054e-301,6.0395842059376255e-301,6.037585005637745e-301,6.035585805337865e-301,6.033586605037985e-301,6.031587404738105e-301,6.029588204438225e-301,6.027589004138345e-301,6.025589803838465e-301,6.023590603538585e-301,6.021591403238705e-301,6.019592202938825e-301,6.017593002638945e-301,6.015593802339065e-301,6.013594602039184e-301,6.011595401739304e-301,6.009596201439424e-301,6.007597001139544e-301,6.005597800839664e-301,6.003598600539784e-301,6.001599400239904e-301,5.999600199940024e-301,5.997600999640144e-301,5.995601799340264e-301,5.993602599040384e-301,5.9916033987405036e-301,5.9896041984406236e-301,5.987604998140744e-301,5.985605797840864e-301,5.983606597540984e-301,5.981607397241104e-301,5.979608196941224e-301,5.977608996641344e-301,5.975609796341464e-301,5.973610596041584e-301,5.971611395741704e-301,5.969612195441824e-301,5.967612995141943e-301,5.965613794842063e-301,5.963614594542183e-301,5.961615394242303e-301,5.959616193942423e-301,5.957616993642543e-301,5.955617793342663e-301,5.953618593042783e-301,5.951619392742903e-301,5.949620192443023e-301,5.947620992143143e-301,5.9456217918432625e-301,5.9436225915433825e-301,5.9416233912435025e-301,5.9396241909436225e-301,5.9376249906437426e-301,5.935625790343863e-301,5.933626590043983e-301,5.931627389744103e-301,5.929628189444223e-301,5.927628989144343e-301,5.925629788844463e-301,5.923630588544582e-301,5.921631388244702e-301,5.919632187944822e-301,5.917632987644942e-301,5.915633787345062e-301,5.913634587045182e-301,5.911635386745302e-301,5.909636186445422e-301,5.907636986145542e-301,5.905637785845662e-301,5.903638585545782e-301,5.901639385245902e-301,5.899640184946021e-301,5.897640984646141e-301,5.8956417843462614e-301,5.8936425840463814e-301,5.8916433837465015e-301,5.8896441834466215e-301,5.8876449831467415e-301,5.8856457828468615e-301,5.8836465825469816e-301,5.881647382247102e-301,5.879648181947222e-301,5.877648981647341e-301,5.875649781347461e-301,5.873650581047581e-301,5.871651380747701e-301,5.869652180447821e-301,5.867652980147941e-301,5.865653779848061e-301,5.863654579548181e-301,5.861655379248301e-301,5.859656178948421e-301,5.857656978648541e-301,5.855657778348661e-301,5.85365857804878e-301,5.8516593777489e-301,5.84966017744902e-301,5.84766097714914e-301,5.84566177684926e-301,5.84366257654938e-301,5.8416633762495004e-301,5.8396641759496204e-301,5.8376649756497405e-301,5.8356657753498605e-301,5.8336665750499805e-301,5.8316673747501e-301,5.82966817445022e-301,5.82766897415034e-301,5.82566977385046e-301,5.82367057355058e-301,5.8216713732507e-301,5.81967217295082e-301,5.81767297265094e-301,5.81567377235106e-301,5.81367457205118e-301,5.8116753717513e-301,5.80967617145142e-301,5.807676971151539e-301,5.805677770851659e-301,5.803678570551779e-301,5.801679370251899e-301,5.799680169952019e-301,5.797680969652139e-301,5.795681769352259e-301,5.793682569052379e-301,5.791683368752499e-301,5.789684168452619e-301,5.7876849681527394e-301,5.785685767852859e-301,5.783686567552979e-301,5.781687367253099e-301,5.779688166953219e-301,5.777688966653339e-301,5.775689766353459e-301,5.773690566053579e-301,5.771691365753699e-301,5.769692165453819e-301,5.767692965153939e-301,5.765693764854059e-301,5.763694564554178e-301,5.761695364254298e-301,5.759696163954418e-301,5.757696963654538e-301,5.755697763354658e-301,5.753698563054778e-301,5.751699362754898e-301,5.749700162455018e-301,5.747700962155138e-301,5.745701761855258e-301,5.743702561555378e-301,5.741703361255498e-301,5.7397041609556175e-301,5.7377049606557376e-301,5.7357057603558576e-301,5.733706560055978e-301,5.731707359756098e-301,5.729708159456218e-301,5.727708959156338e-301,5.725709758856458e-301,5.723710558556578e-301,5.721711358256698e-301,5.719712157956818e-301,5.717712957656937e-301,5.715713757357057e-301,5.713714557057177e-301,5.711715356757297e-301,5.709716156457417e-301,5.707716956157537e-301,5.705717755857657e-301,5.703718555557777e-301,5.701719355257897e-301,5.699720154958017e-301,5.697720954658137e-301,5.695721754358257e-301,5.6937225540583764e-301,5.6917233537584965e-301,5.6897241534586165e-301,5.6877249531587365e-301,5.6857257528588565e-301,5.6837265525589766e-301,5.6817273522590966e-301,5.679728151959217e-301,5.677728951659337e-301,5.675729751359457e-301,5.673730551059577e-301,5.671731350759696e-301,5.669732150459816e-301,5.667732950159936e-301,5.665733749860056e-301,5.663734549560176e-301,5.661735349260296e-301,5.659736148960416e-301,5.657736948660536e-301,5.655737748360656e-301,5.653738548060776e-301,5.651739347760896e-301,5.649740147461016e-301,5.647740947161135e-301,5.645741746861255e-301,5.643742546561375e-301,5.6417433462614954e-301,5.6397441459616154e-301,5.6377449456617355e-301,5.6357457453618555e-301,5.6337465450619755e-301,5.6317473447620955e-301,5.6297481444622156e-301,5.627748944162336e-301,5.625749743862455e-301,5.623750543562575e-301,5.621751343262695e-301,5.619752142962815e-301,5.617752942662935e-301,5.615753742363055e-301,5.613754542063175e-301,5.611755341763295e-301,5.609756141463415e-301,5.607756941163535e-301,5.605757740863655e-301,5.603758540563774e-301,5.601759340263894e-301,5.599760139964014e-301,5.597760939664134e-301,5.595761739364254e-301,5.593762539064374e-301,5.591763338764494e-301,5.589764138464614e-301,5.5877649381647344e-301,5.5857657378648544e-301,5.5837665375649745e-301,5.5817673372650945e-301,5.579768136965214e-301,5.577768936665334e-301,5.575769736365454e-301,5.573770536065574e-301,5.571771335765694e-301,5.569772135465814e-301,5.567772935165934e-301,5.565773734866054e-301,5.563774534566174e-301,5.561775334266294e-301,5.559776133966414e-301,5.557776933666533e-301,5.555777733366653e-301,5.553778533066773e-301,5.551779332766893e-301,5.549780132467013e-301,5.547780932167133e-301,5.545781731867253e-301,5.543782531567373e-301,5.541783331267493e-301,5.539784130967613e-301,5.537784930667733e-301,5.535785730367853e-301,5.533786530067973e-301,5.531787329768093e-301,5.529788129468213e-301,5.527788929168333e-301,5.525789728868453e-301,5.523790528568573e-301,5.521791328268693e-301,5.519792127968813e-301,5.517792927668933e-301,5.515793727369053e-301,5.513794527069173e-301,5.511795326769292e-301,5.509796126469412e-301,5.507796926169532e-301,5.505797725869652e-301,5.503798525569772e-301,5.501799325269892e-301,5.499800124970012e-301,5.497800924670132e-301,5.495801724370252e-301,5.493802524070372e-301,5.491803323770492e-301,5.4898041234706115e-301,5.4878049231707315e-301,5.4858057228708515e-301,5.4838065225709716e-301,5.4818073222710916e-301,5.479808121971212e-301,5.477808921671332e-301,5.475809721371452e-301,5.473810521071572e-301,5.471811320771692e-301,5.469812120471812e-301,5.467812920171932e-301,5.465813719872051e-301,5.463814519572171e-301,5.461815319272291e-301,5.459816118972411e-301,5.457816918672531e-301,5.455817718372651e-301,5.453818518072771e-301,5.451819317772891e-301,5.449820117473011e-301,5.447820917173131e-301,5.445821716873251e-301,5.44382251657337e-301,5.44182331627349e-301,5.4398241159736104e-301,5.4378249156737305e-301,5.4358257153738505e-301,5.4338265150739705e-301,5.4318273147740905e-301,5.4298281144742106e-301,5.4278289141743306e-301,5.425829713874451e-301,5.423830513574571e-301,5.421831313274691e-301,5.41983211297481e-301,5.41783291267493e-301,5.41583371237505e-301,5.41383451207517e-301,5.41183531177529e-301,5.40983611147541e-301,5.40783691117553e-301,5.40583771087565e-301,5.40383851057577e-301,5.40183931027589e-301,5.39984010997601e-301,5.397840909676129e-301,5.395841709376249e-301,5.393842509076369e-301,5.391843308776489e-301,5.389844108476609e-301,5.3878449081767294e-301,5.3858457078768494e-301,5.3838465075769695e-301,5.3818473072770895e-301,5.3798481069772095e-301,5.3778489066773295e-301,5.3758497063774496e-301,5.373850506077569e-301,5.371851305777689e-301,5.369852105477809e-301,5.367852905177929e-301,5.365853704878049e-301,5.363854504578169e-301,5.361855304278289e-301,5.359856103978409e-301,5.357856903678529e-301,5.355857703378649e-301,5.353858503078769e-301,5.351859302778888e-301,5.349860102479008e-301,5.347860902179128e-301,5.345861701879248e-301,5.343862501579368e-301,5.341863301279488e-301,5.339864100979608e-301,5.337864900679728e-301,5.335865700379848e-301,5.3338665000799684e-301,5.3318672997800884e-301,5.329868099480208e-301,5.327868899180328e-301,5.325869698880448e-301,5.323870498580568e-301,5.321871298280688e-301,5.319872097980808e-301,5.317872897680928e-301,5.315873697381048e-301,5.313874497081168e-301,5.311875296781288e-301,5.309876096481408e-301,5.307876896181528e-301,5.305877695881647e-301,5.303878495581767e-301,5.301879295281887e-301,5.299880094982007e-301,5.297880894682127e-301,5.295881694382247e-301,5.293882494082367e-301,5.291883293782487e-301,5.289884093482607e-301,5.287884893182727e-301,5.285885692882847e-301,5.2838864925829665e-301,5.2818872922830866e-301,5.279888091983207e-301,5.277888891683327e-301,5.275889691383447e-301,5.273890491083567e-301,5.271891290783687e-301,5.269892090483807e-301,5.267892890183927e-301,5.265893689884047e-301,5.263894489584167e-301,5.261895289284287e-301,5.259896088984406e-301,5.257896888684526e-301,5.255897688384646e-301,5.253898488084766e-301,5.251899287784886e-301,5.249900087485006e-301,5.247900887185126e-301,5.245901686885246e-301,5.243902486585366e-301,5.241903286285486e-301,5.239904085985606e-301,5.2379048856857255e-301,5.2359056853858455e-301,5.2339064850859655e-301,5.2319072847860855e-301,5.2299080844862056e-301,5.2279088841863256e-301,5.225909683886446e-301,5.223910483586566e-301,5.221911283286686e-301,5.219912082986806e-301,5.217912882686926e-301,5.215913682387046e-301,5.213914482087165e-301,5.211915281787285e-301,5.209916081487405e-301,5.207916881187525e-301,5.205917680887645e-301,5.203918480587765e-301,5.201919280287885e-301,5.199920079988005e-301,5.197920879688125e-301,5.195921679388245e-301,5.193922479088365e-301,5.191923278788484e-301,5.189924078488604e-301,5.187924878188724e-301,5.1859256778888444e-301,5.1839264775889645e-301,5.1819272772890845e-301,5.1799280769892045e-301,5.1779288766893245e-301,5.1759296763894446e-301,5.1739304760895646e-301,5.171931275789685e-301,5.169932075489804e-301,5.167932875189924e-301,5.165933674890044e-301,5.163934474590164e-301,5.161935274290284e-301,5.159936073990404e-301,5.157936873690524e-301,5.155937673390644e-301,5.153938473090764e-301,5.151939272790884e-301,5.149940072491004e-301,5.147940872191124e-301,5.145941671891243e-301,5.143942471591363e-301,5.141943271291483e-301,5.139944070991603e-301,5.137944870691723e-301,5.135945670391843e-301,5.133946470091963e-301,5.1319472697920834e-301,5.1299480694922035e-301,5.1279488691923235e-301,5.1259496688924435e-301,5.123950468592563e-301,5.121951268292683e-301,5.119952067992803e-301,5.117952867692923e-301,5.115953667393043e-301,5.113954467093163e-301,5.111955266793283e-301,5.109956066493403e-301,5.107956866193523e-301,5.105957665893643e-301,5.103958465593763e-301,5.101959265293883e-301,5.099960064994002e-301,5.097960864694122e-301,5.095961664394242e-301,5.093962464094362e-301,5.091963263794482e-301,5.089964063494602e-301,5.087964863194722e-301,5.085965662894842e-301,5.083966462594962e-301,5.081967262295082e-301,5.0799680619952024e-301,5.077968861695322e-301,5.075969661395442e-301,5.073970461095562e-301,5.071971260795682e-301,5.069972060495802e-301,5.067972860195922e-301,5.065973659896042e-301,5.063974459596162e-301,5.061975259296282e-301,5.059976058996402e-301,5.057976858696522e-301,5.055977658396642e-301,5.053978458096761e-301,5.051979257796881e-301,5.049980057497001e-301,5.047980857197121e-301,5.045981656897241e-301,5.043982456597361e-301,5.041983256297481e-301,5.039984055997601e-301,5.037984855697721e-301,5.035985655397841e-301,5.033986455097961e-301,5.0319872547980805e-301,5.0299880544982005e-301,5.0279888541983206e-301,5.025989653898441e-301,5.023990453598561e-301,5.021991253298681e-301,5.019992052998801e-301,5.017992852698921e-301,5.015993652399041e-301,5.013994452099161e-301,5.011995251799281e-301,5.0099960514994e-301,5.00799685119952e-301,5.00599765089964e-301,5.00399845059976e-301,5.00199925029988e-301,5.00000005e-301,4.99800084970012e-301,4.99600164940024e-301,4.99400244910036e-301,4.99200324880048e-301,4.9900040485006e-301,4.98800484820072e-301,4.9860056479008394e-301,4.9840064476009595e-301,4.9820072473010795e-301,4.9800080470011995e-301,4.9780088467013195e-301,4.9760096464014395e-301,4.9740104461015596e-301,4.97201124580168e-301,4.9700120455018e-301,4.96801284520192e-301,4.96601364490204e-301,4.964014444602159e-301,4.962015244302279e-301,4.960016044002399e-301,4.958016843702519e-301,4.956017643402639e-301,4.954018443102759e-301,4.952019242802879e-301,4.950020042502999e-301,4.948020842203119e-301,4.946021641903239e-301,4.944022441603359e-301,4.942023241303479e-301,4.940024041003598e-301,4.938024840703718e-301,4.936025640403838e-301,4.934026440103958e-301,4.9320272398040784e-301,4.9300280395041985e-301,4.9280288392043185e-301,4.9260296389044385e-301,4.9240304386045585e-301,4.9220312383046786e-301,4.9200320380047986e-301,4.918032837704918e-301,4.916033637405038e-301,4.914034437105158e-301,4.912035236805278e-301,4.910036036505398e-301,4.908036836205518e-301,4.906037635905638e-301,4.904038435605758e-301,4.902039235305878e-301,4.900040035005998e-301,4.898040834706118e-301,4.896041634406237e-301,4.894042434106357e-301,4.892043233806477e-301,4.890044033506597e-301,4.888044833206717e-301,4.886045632906837e-301,4.884046432606957e-301,4.882047232307077e-301,4.880048032007197e-301,4.8780488317073174e-301,4.8760496314074375e-301,4.8740504311075575e-301,4.872051230807677e-301,4.870052030507797e-301,4.868052830207917e-301,4.866053629908037e-301,4.864054429608157e-301,4.862055229308277e-301,4.860056029008397e-301,4.858056828708517e-301,4.856057628408637e-301,4.854058428108757e-301,4.852059227808877e-301,4.850060027508996e-301,4.848060827209116e-301,4.846061626909236e-301,4.844062426609356e-301,4.842063226309476e-301,4.840064026009596e-301,4.838064825709716e-301,4.836065625409836e-301,4.834066425109956e-301,4.832067224810076e-301,4.830068024510196e-301,4.828068824210316e-301,4.826069623910436e-301,4.824070423610556e-301,4.822071223310676e-301,4.820072023010796e-301,4.818072822710916e-301,4.816073622411036e-301,4.814074422111156e-301,4.812075221811276e-301,4.810076021511396e-301,4.808076821211516e-301,4.806077620911636e-301,4.804078420611755e-301,4.802079220311875e-301,4.800080020011995e-301,4.798080819712115e-301,4.796081619412235e-301,4.794082419112355e-301,4.792083218812475e-301,4.790084018512595e-301,4.788084818212715e-301,4.786085617912835e-301,4.784086417612955e-301,4.782087217313075e-301,4.7800880170131945e-301,4.7780888167133145e-301,4.7760896164134345e-301,4.7740904161135546e-301,4.772091215813675e-301,4.770092015513795e-301,4.768092815213915e-301,4.766093614914035e-301,4.764094414614155e-301,4.762095214314275e-301,4.760096014014395e-301,4.758096813714514e-301,4.756097613414634e-301,4.754098413114754e-301,4.752099212814874e-301,4.750100012514994e-301,4.748100812215114e-301,4.746101611915234e-301,4.744102411615354e-301,4.742103211315474e-301,4.740104011015594e-301,4.738104810715714e-301,4.736105610415833e-301,4.734106410115953e-301,4.7321072098160734e-301,4.7301080095161934e-301,4.7281088092163135e-301,4.7261096089164335e-301,4.7241104086165535e-301,4.7221112083166735e-301,4.7201120080167936e-301,4.718112807716914e-301,4.716113607417034e-301,4.714114407117154e-301,4.712115206817273e-301,4.710116006517393e-301,4.708116806217513e-301,4.706117605917633e-301,4.704118405617753e-301,4.702119205317873e-301,4.700120005017993e-301,4.698120804718113e-301,4.696121604418233e-301,4.694122404118353e-301,4.692123203818473e-301,4.690124003518592e-301,4.688124803218712e-301,4.686125602918832e-301,4.684126402618952e-301,4.682127202319072e-301,4.680128002019192e-301,4.6781288017193124e-301,4.6761296014194325e-301,4.6741304011195525e-301,4.6721312008196725e-301,4.6701320005197925e-301,4.6681328002199126e-301,4.666133599920032e-301,4.664134399620152e-301,4.662135199320272e-301,4.660135999020392e-301,4.658136798720512e-301,4.656137598420632e-301,4.654138398120752e-301,4.652139197820872e-301,4.650139997520992e-301,4.648140797221112e-301,4.646141596921232e-301,4.644142396621351e-301,4.642143196321471e-301,4.640143996021591e-301,4.638144795721711e-301,4.636145595421831e-301,4.634146395121951e-301,4.632147194822071e-301,4.630147994522191e-301,4.628148794222311e-301,4.626149593922431e-301,4.6241503936225514e-301,4.6221511933226715e-301,4.620151993022791e-301,4.618152792722911e-301,4.616153592423031e-301,4.614154392123151e-301,4.612155191823271e-301,4.610155991523391e-301,4.608156791223511e-301,4.606157590923631e-301,4.604158390623751e-301,4.602159190323871e-301,4.600159990023991e-301,4.59816078972411e-301,4.59616158942423e-301,4.59416238912435e-301,4.59216318882447e-301,4.59016398852459e-301,4.58816478822471e-301,4.58616558792483e-301,4.58416638762495e-301,4.58216718732507e-301,4.58016798702519e-301,4.57816878672531e-301,4.5761695864254295e-301,4.5741703861255496e-301,4.5721711858256696e-301,4.57017198552579e-301,4.56817278522591e-301,4.56617358492603e-301,4.56417438462615e-301,4.56217518432627e-301,4.56017598402639e-301,4.55817678372651e-301,4.55617758342663e-301,4.55417838312675e-301,4.552179182826869e-301,4.550179982526989e-301,4.548180782227109e-301,4.546181581927229e-301,4.544182381627349e-301,4.542183181327469e-301,4.540183981027589e-301,4.538184780727709e-301,4.536185580427829e-301,4.534186380127949e-301,4.532187179828069e-301,4.5301879795281884e-301,4.5281887792283085e-301,4.5261895789284285e-301,4.5241903786285485e-301,4.5221911783286685e-301,4.5201919780287886e-301,4.518192777728909e-301,4.516193577429029e-301,4.514194377129149e-301,4.512195176829269e-301,4.510195976529389e-301,4.508196776229509e-301,4.506197575929628e-301,4.504198375629748e-301,4.502199175329868e-301,4.500199975029988e-301,4.498200774730108e-301,4.496201574430228e-301,4.494202374130348e-301,4.492203173830468e-301,4.490203973530588e-301,4.488204773230708e-301,4.486205572930828e-301,4.484206372630947e-301,4.482207172331067e-301,4.480207972031187e-301,4.4782087717313074e-301,4.4762095714314274e-301,4.4742103711315475e-301,4.4722111708316675e-301,4.4702119705317875e-301,4.4682127702319075e-301,4.4662135699320276e-301,4.464214369632148e-301,4.462215169332268e-301,4.460215969032387e-301,4.458216768732507e-301,4.456217568432627e-301,4.454218368132747e-301,4.452219167832867e-301,4.450219967532987e-301,4.448220767233107e-301,4.446221566933227e-301,4.444222366633347e-301,4.442223166333467e-301,4.440223966033587e-301,4.438224765733706e-301,4.436225565433826e-301,4.434226365133946e-301,4.432227164834066e-301,4.430227964534186e-301,4.428228764234306e-301,4.426229563934426e-301,4.4242303636345464e-301,4.4222311633346665e-301,4.4202319630347865e-301,4.4182327627349065e-301,4.416233562435026e-301,4.414234362135146e-301,4.412235161835266e-301,4.410235961535386e-301,4.408236761235506e-301,4.406237560935626e-301,4.404238360635746e-301,4.402239160335866e-301,4.400239960035986e-301,4.398240759736106e-301,4.396241559436226e-301,4.394242359136346e-301,4.392243158836465e-301,4.390243958536585e-301,4.388244758236705e-301,4.386245557936825e-301,4.384246357636945e-301,4.382247157337065e-301,4.380247957037185e-301,4.378248756737305e-301,4.376249556437425e-301,4.374250356137545e-301,4.372251155837665e-301,4.370251955537785e-301,4.368252755237905e-301,4.366253554938025e-301,4.364254354638145e-301,4.362255154338265e-301,4.360255954038385e-301,4.358256753738505e-301,4.356257553438625e-301,4.354258353138745e-301,4.352259152838865e-301,4.350259952538985e-301,4.348260752239105e-301,4.346261551939224e-301,4.344262351639344e-301,4.342263151339464e-301,4.340263951039584e-301,4.338264750739704e-301,4.336265550439824e-301,4.334266350139944e-301,4.332267149840064e-301,4.330267949540184e-301,4.328268749240304e-301,4.326269548940424e-301,4.3242703486405435e-301,4.3222711483406635e-301,4.3202719480407836e-301,4.3182727477409036e-301,4.316273547441024e-301,4.314274347141144e-301,4.312275146841264e-301,4.310275946541384e-301,4.308276746241504e-301,4.306277545941624e-301,4.304278345641744e-301,4.302279145341863e-301,4.300279945041983e-301,4.298280744742103e-301,4.296281544442223e-301,4.294282344142343e-301,4.292283143842463e-301,4.290283943542583e-301,4.288284743242703e-301,4.286285542942823e-301,4.284286342642943e-301,4.282287142343063e-301,4.280287942043183e-301,4.2782887417433024e-301,4.2762895414434224e-301,4.2742903411435425e-301,4.2722911408436625e-301,4.2702919405437825e-301,4.2682927402439025e-301,4.2662935399440226e-301,4.264294339644143e-301,4.262295139344263e-301,4.260295939044383e-301,4.258296738744503e-301,4.256297538444622e-301,4.254298338144742e-301,4.252299137844862e-301,4.250299937544982e-301,4.248300737245102e-301,4.246301536945222e-301,4.244302336645342e-301,4.242303136345462e-301,4.240303936045582e-301,4.238304735745702e-301,4.236305535445822e-301,4.234306335145942e-301,4.232307134846061e-301,4.230307934546181e-301,4.228308734246301e-301,4.226309533946421e-301,4.2243103336465414e-301,4.2223111333466614e-301,4.2203119330467815e-301,4.2183127327469015e-301,4.2163135324470215e-301,4.2143143321471415e-301,4.2123151318472616e-301,4.210315931547381e-301,4.208316731247501e-301,4.206317530947621e-301,4.204318330647741e-301,4.202319130347861e-301,4.200319930047981e-301,4.198320729748101e-301,4.196321529448221e-301,4.194322329148341e-301,4.192323128848461e-301,4.190323928548581e-301,4.188324728248701e-301,4.18632552794882e-301,4.18432632764894e-301,4.18232712734906e-301,4.18032792704918e-301,4.1783287267493e-301,4.17632952644942e-301,4.17433032614954e-301,4.17233112584966e-301,4.1703319255497804e-301,4.1683327252499004e-301,4.1663335249500205e-301,4.16433432465014e-301,4.16233512435026e-301,4.16033592405038e-301,4.1583367237505e-301,4.15633752345062e-301,4.15433832315074e-301,4.15233912285086e-301,4.15033992255098e-301,4.1483407222511e-301,4.14634152195122e-301,4.14434232165134e-301,4.142343121351459e-301,4.140343921051579e-301,4.138344720751699e-301,4.136345520451819e-301,4.134346320151939e-301,4.132347119852059e-301,4.130347919552179e-301,4.128348719252299e-301,4.126349518952419e-301,4.124350318652539e-301,4.122351118352659e-301,4.120351918052779e-301,4.1183527177528986e-301,4.116353517453019e-301,4.114354317153139e-301,4.112355116853259e-301,4.110355916553379e-301,4.108356716253499e-301,4.106357515953619e-301,4.104358315653739e-301,4.102359115353859e-301,4.100359915053979e-301,4.098360714754099e-301,4.096361514454218e-301,4.094362314154338e-301,4.092363113854458e-301,4.090363913554578e-301,4.088364713254698e-301,4.086365512954818e-301,4.084366312654938e-301,4.082367112355058e-301,4.080367912055178e-301,4.078368711755298e-301,4.076369511455418e-301,4.074370311155538e-301,4.0723711108556575e-301,4.0703719105557775e-301,4.0683727102558975e-301,4.0663735099560176e-301,4.0643743096561376e-301,4.062375109356258e-301,4.060375909056378e-301,4.058376708756498e-301,4.056377508456618e-301,4.054378308156738e-301,4.052379107856858e-301,4.050379907556977e-301,4.048380707257097e-301,4.046381506957217e-301,4.044382306657337e-301,4.042383106357457e-301,4.040383906057577e-301,4.038384705757697e-301,4.036385505457817e-301,4.034386305157937e-301,4.032387104858057e-301,4.030387904558177e-301,4.028388704258297e-301,4.026389503958416e-301,4.024390303658536e-301,4.0223911033586564e-301,4.0203919030587765e-301,4.0183927027588965e-301,4.0163935024590165e-301,4.0143943021591365e-301,4.0123951018592566e-301,4.0103959015593766e-301,4.008396701259497e-301,4.006397500959617e-301,4.004398300659736e-301,4.002399100359856e-301,4.000399900059976e-301,3.998400699760096e-301,3.996401499460216e-301,3.994402299160336e-301,3.992403098860456e-301,3.990403898560576e-301,3.988404698260696e-301,3.986405497960816e-301,3.984406297660936e-301,3.982407097361055e-301,3.980407897061175e-301,3.978408696761295e-301,3.976409496461415e-301,3.974410296161535e-301,3.972411095861655e-301,3.9704118955617754e-301,3.9684126952618954e-301,3.9664134949620155e-301,3.9644142946621355e-301,3.9624150943622555e-301,3.9604158940623755e-301,3.958416693762495e-301,3.956417493462615e-301,3.954418293162735e-301,3.952419092862855e-301,3.950419892562975e-301,3.948420692263095e-301,3.946421491963215e-301,3.944422291663335e-301,3.942423091363455e-301,3.940423891063575e-301,3.938424690763695e-301,3.936425490463814e-301,3.934426290163934e-301,3.932427089864054e-301,3.930427889564174e-301,3.928428689264294e-301,3.926429488964414e-301,3.924430288664534e-301,3.922431088364654e-301,3.920431888064774e-301,3.918432687764894e-301,3.9164334874650144e-301,3.9144342871651344e-301,3.912435086865254e-301,3.910435886565374e-301,3.908436686265494e-301,3.906437485965614e-301,3.904438285665734e-301,3.902439085365854e-301,3.900439885065974e-301,3.898440684766094e-301,3.896441484466214e-301,3.894442284166334e-301,3.892443083866454e-301,3.890443883566573e-301,3.888444683266693e-301,3.886445482966813e-301,3.884446282666933e-301,3.882447082367053e-301,3.880447882067173e-301,3.878448681767293e-301,3.876449481467413e-301,3.874450281167533e-301,3.872451080867653e-301,3.870451880567773e-301,3.868452680267893e-301,3.8664534799680125e-301,3.8644542796681326e-301,3.862455079368253e-301,3.860455879068373e-301,3.858456678768493e-301,3.856457478468613e-301,3.854458278168733e-301,3.852459077868853e-301,3.850459877568973e-301,3.848460677269093e-301,3.846461476969213e-301,3.844462276669332e-301,3.842463076369452e-301,3.840463876069572e-301,3.838464675769692e-301,3.836465475469812e-301,3.834466275169932e-301,3.832467074870052e-301,3.830467874570172e-301,3.828468674270292e-301,3.826469473970412e-301,3.824470273670532e-301,3.8224710733706514e-301,3.8204718730707715e-301,3.8184726727708915e-301,3.8164734724710115e-301,3.8144742721711315e-301,3.8124750718712516e-301,3.8104758715713716e-301,3.808476671271492e-301,3.806477470971612e-301,3.804478270671732e-301,3.802479070371852e-301,3.800479870071972e-301,3.798480669772091e-301,3.796481469472211e-301,3.794482269172331e-301,3.792483068872451e-301,3.790483868572571e-301,3.788484668272691e-301,3.786485467972811e-301,3.784486267672931e-301,3.782487067373051e-301,3.780487867073171e-301,3.778488666773291e-301,3.77648946647341e-301,3.77449026617353e-301,3.77249106587365e-301,3.77049186557377e-301,3.7684926652738904e-301,3.7664934649740105e-301,3.7644942646741305e-301,3.7624950643742505e-301,3.7604958640743705e-301,3.7584966637744906e-301,3.7564974634746106e-301,3.754498263174731e-301,3.75249906287485e-301,3.75049986257497e-301,3.74850066227509e-301,3.74650146197521e-301,3.74450226167533e-301,3.74250306137545e-301,3.74050386107557e-301,3.73850466077569e-301,3.73650546047581e-301,3.73450626017593e-301,3.7325070598760496e-301,3.7305078595761697e-301,3.7285086592762897e-301,3.7265094589764097e-301,3.7245102586765293e-301,3.7225110583766493e-301,3.7205118580767694e-301,3.7185126577768894e-301,3.7165134574770094e-301,3.7145142571771294e-301,3.712515056877249e-301,3.710515856577369e-301,3.708516656277489e-301,3.706517455977609e-301,3.704518255677729e-301,3.7025190553778488e-301,3.7005198550779688e-301,3.698520654778089e-301,3.696521454478209e-301,3.694522254178329e-301,3.692523053878449e-301,3.6905238535785685e-301,3.6885246532786885e-301,3.6865254529788085e-301,3.6845262526789286e-301,3.6825270523790486e-301,3.6805278520791686e-301,3.6785286517792882e-301,3.6765294514794082e-301,3.6745302511795283e-301,3.6725310508796483e-301,3.6705318505797683e-301,3.668532650279888e-301,3.666533449980008e-301,3.664534249680128e-301,3.662535049380248e-301,3.660535849080368e-301,3.658536648780488e-301,3.6565374484806077e-301,3.6545382481807277e-301,3.6525390478808477e-301,3.6505398475809677e-301,3.6485406472810878e-301,3.6465414469812078e-301,3.6445422466813274e-301,3.6425430463814474e-301,3.6405438460815674e-301,3.6385446457816875e-301,3.6365454454818075e-301,3.6345462451819275e-301,3.632547044882047e-301,3.630547844582167e-301,3.628548644282287e-301,3.626549443982407e-301,3.6245502436825272e-301,3.622551043382647e-301,3.620551843082767e-301,3.618552642782887e-301,3.616553442483007e-301,3.614554242183127e-301,3.612555041883247e-301,3.6105558415833666e-301,3.6085566412834866e-301,3.6065574409836066e-301,3.6045582406837266e-301,3.6025590403838467e-301,3.6005598400839667e-301,3.5985606397840863e-301,3.5965614394842063e-301,3.5945622391843264e-301,3.5925630388844464e-301,3.5905638385845664e-301,3.588564638284686e-301,3.586565437984806e-301,3.584566237684926e-301,3.582567037385046e-301,3.580567837085166e-301,3.578568636785286e-301,3.5765694364854057e-301,3.5745702361855258e-301,3.572571035885646e-301,3.570571835585766e-301,3.568572635285886e-301,3.566573434986006e-301,3.5645742346861255e-301,3.5625750343862455e-301,3.5605758340863655e-301,3.5585766337864856e-301,3.5565774334866056e-301,3.5545782331867256e-301,3.5525790328868452e-301,3.5505798325869652e-301,3.5485806322870853e-301,3.5465814319872053e-301,3.5445822316873253e-301,3.542583031387445e-301,3.540583831087565e-301,3.538584630787685e-301,3.536585430487805e-301,3.534586230187925e-301,3.532587029888045e-301,3.5305878295881647e-301,3.5285886292882847e-301,3.5265894289884047e-301,3.5245902286885247e-301,3.5225910283886448e-301,3.5205918280887648e-301,3.5185926277888844e-301,3.5165934274890044e-301,3.5145942271891244e-301,3.5125950268892445e-301,3.5105958265893645e-301,3.508596626289484e-301,3.506597425989604e-301,3.504598225689724e-301,3.502599025389844e-301,3.500599825089964e-301,3.4986006247900842e-301,3.496601424490204e-301,3.494602224190324e-301,3.492603023890444e-301,3.490603823590564e-301,3.488604623290684e-301,3.486605422990804e-301,3.4846062226909236e-301,3.4826070223910436e-301,3.4806078220911636e-301,3.4786086217912836e-301,3.4766094214914037e-301,3.4746102211915237e-301,3.4726110208916433e-301,3.4706118205917633e-301,3.4686126202918833e-301,3.4666134199920034e-301,3.4646142196921234e-301,3.462615019392243e-301,3.460615819092363e-301,3.458616618792483e-301,3.456617418492603e-301,3.454618218192723e-301,3.452619017892843e-301,3.4506198175929627e-301,3.4486206172930828e-301,3.4466214169932028e-301,3.444622216693323e-301,3.442623016393443e-301,3.440623816093563e-301,3.4386246157936825e-301,3.4366254154938025e-301,3.4346262151939225e-301,3.4326270148940425e-301,3.4306278145941626e-301,3.428628614294282e-301,3.426629413994402e-301,3.4246302136945222e-301,3.4226310133946422e-301,3.4206318130947623e-301,3.4186326127948823e-301,3.416633412495002e-301,3.414634212195122e-301,3.412635011895242e-301,3.410635811595362e-301,3.408636611295482e-301,3.406637410995602e-301,3.4046382106957216e-301,3.4026390103958417e-301,3.4006398100959617e-301,3.3986406097960817e-301,3.3966414094962017e-301,3.3946422091963218e-301,3.3926430088964414e-301,3.3906438085965614e-301,3.3886446082966814e-301,3.3866454079968014e-301,3.3846462076969215e-301,3.382647007397041e-301,3.380647807097161e-301,3.378648606797281e-301,3.376649406497401e-301,3.374650206197521e-301,3.372651005897641e-301,3.370651805597761e-301,3.368652605297881e-301,3.366653404998001e-301,3.364654204698121e-301,3.362655004398241e-301,3.360655804098361e-301,3.3586566037984805e-301,3.3566574034986006e-301,3.3546582031987206e-301,3.3526590028988406e-301,3.3506598025989606e-301,3.3486606022990803e-301,3.3466614019992003e-301,3.3446622016993203e-301,3.3426630013994403e-301,3.3406638010995604e-301,3.3386646007996804e-301,3.3366654004998e-301,3.33466620019992e-301,3.33266699990004e-301,3.33066779960016e-301,3.32866859930028e-301,3.3266693990004e-301,3.3246701987005197e-301,3.3226709984006397e-301,3.3206717981007598e-301,3.31867259780088e-301,3.316673397501e-301,3.31467419720112e-301,3.3126749969012395e-301,3.3106757966013595e-301,3.3086765963014795e-301,3.3066773960015995e-301,3.3046781957017196e-301,3.302678995401839e-301,3.300679795101959e-301,3.2986805948020792e-301,3.2966813945021992e-301,3.2946821942023193e-301,3.2926829939024393e-301,3.290683793602559e-301,3.288684593302679e-301,3.286685393002799e-301,3.284686192702919e-301,3.282686992403039e-301,3.280687792103159e-301,3.2786885918032786e-301,3.2766893915033987e-301,3.2746901912035187e-301,3.2726909909036387e-301,3.2706917906037587e-301,3.2686925903038783e-301,3.2666933900039984e-301,3.2646941897041184e-301,3.2626949894042384e-301,3.2606957891043584e-301,3.2586965888044785e-301,3.256697388504598e-301,3.254698188204718e-301,3.252698987904838e-301,3.250699787604958e-301,3.248700587305078e-301,3.246701387005198e-301,3.244702186705318e-301,3.242702986405438e-301,3.240703786105558e-301,3.238704585805678e-301,3.236705385505798e-301,3.2347061852059175e-301,3.2327069849060375e-301,3.2307077846061576e-301,3.2287085843062776e-301,3.2267093840063976e-301,3.2247101837065176e-301,3.2227109834066372e-301,3.2207117831067573e-301,3.2187125828068773e-301,3.2167133825069973e-301,3.2147141822071173e-301,3.2127149819072374e-301,3.210715781607357e-301,3.208716581307477e-301,3.206717381007597e-301,3.204718180707717e-301,3.202718980407837e-301,3.200719780107957e-301,3.1987205798080767e-301,3.1967213795081967e-301,3.1947221792083168e-301,3.1927229789084368e-301,3.190723778608557e-301,3.1887245783086764e-301,3.1867253780087964e-301,3.1847261777089165e-301,3.1827269774090365e-301,3.1807277771091565e-301,3.1787285768092765e-301,3.176729376509396e-301,3.174730176209516e-301,3.172730975909636e-301,3.1707317756097562e-301,3.1687325753098762e-301,3.1667333750099963e-301,3.164734174710116e-301,3.162734974410236e-301,3.160735774110356e-301,3.158736573810476e-301,3.156737373510596e-301,3.1547381732107156e-301,3.1527389729108356e-301,3.1507397726109556e-301,3.1487405723110757e-301,3.1467413720111957e-301,3.1447421717113157e-301,3.1427429714114353e-301,3.1407437711115553e-301,3.1387445708116754e-301,3.1367453705117954e-301,3.1347461702119154e-301,3.1327469699120354e-301,3.130747769612155e-301,3.128748569312275e-301,3.126749369012395e-301,3.124750168712515e-301,3.122750968412635e-301,3.120751768112755e-301,3.1187525678128748e-301,3.116753367512995e-301,3.114754167213115e-301,3.112754966913235e-301,3.110755766613355e-301,3.1087565663134745e-301,3.1067573660135945e-301,3.1047581657137145e-301,3.1027589654138346e-301,3.1007597651139546e-301,3.0987605648140746e-301,3.0967613645141942e-301,3.0947621642143143e-301,3.0927629639144343e-301,3.0907637636145543e-301,3.0887645633146743e-301,3.0867653630147944e-301,3.084766162714914e-301,3.082766962415034e-301,3.080767762115154e-301,3.078768561815274e-301,3.076769361515394e-301,3.0747701612155137e-301,3.0727709609156337e-301,3.0707717606157537e-301,3.0687725603158737e-301,3.0667733600159938e-301,3.0647741597161138e-301,3.0627749594162334e-301,3.0607757591163534e-301,3.0587765588164735e-301,3.0567773585165935e-301,3.0547781582167135e-301,3.0527789579168335e-301,3.050779757616953e-301,3.048780557317073e-301,3.046781357017193e-301,3.0447821567173132e-301,3.0427829564174332e-301,3.0407837561175533e-301,3.038784555817673e-301,3.036785355517793e-301,3.034786155217913e-301,3.032786954918033e-301,3.030787754618153e-301,3.0287885543182726e-301,3.0267893540183926e-301,3.0247901537185126e-301,3.0227909534186326e-301,3.0207917531187527e-301,3.0187925528188727e-301,3.0167933525189923e-301,3.0147941522191123e-301,3.0127949519192324e-301,3.0107957516193524e-301,3.0087965513194724e-301,3.0067973510195924e-301,3.004798150719712e-301,3.002798950419832e-301,3.000799750119952e-301,2.998800549820072e-301,2.996801349520192e-301,2.9948021492203117e-301,2.9928029489204318e-301,2.990803748620552e-301,2.988804548320672e-301,2.986805348020792e-301,2.984806147720912e-301,2.9828069474210315e-301,2.9808077471211515e-301,2.9788085468212715e-301,2.9768093465213916e-301,2.9748101462215116e-301,2.9728109459216316e-301,2.9708117456217512e-301,2.9688125453218712e-301,2.9668133450219913e-301,2.9648141447221113e-301,2.9628149444222313e-301,2.9608157441223513e-301,2.958816543822471e-301,2.956817343522591e-301,2.954818143222711e-301,2.952818942922831e-301,2.950819742622951e-301,2.9488205423230707e-301,2.9468213420231907e-301,2.9448221417233107e-301,2.9428229414234307e-301,2.9408237411235508e-301,2.9388245408236708e-301,2.9368253405237904e-301,2.9348261402239104e-301,2.9328269399240304e-301,2.9308277396241505e-301,2.9288285393242705e-301,2.9268293390243905e-301,2.92483013872451e-301,2.92283093842463e-301,2.92083173812475e-301,2.91883253782487e-301,2.9168333375249902e-301,2.91483413722511e-301,2.91283493692523e-301,2.91083573662535e-301,2.90883653632547e-301,2.90683733602559e-301,2.90483813572571e-301,2.9028389354258296e-301,2.9008397351259496e-301,2.8988405348260696e-301,2.8968413345261896e-301,2.8948421342263097e-301,2.8928429339264297e-301,2.8908437336265493e-301,2.8888445333266693e-301,2.8868453330267893e-301,2.8848461327269094e-301,2.8828469324270294e-301,2.8808477321271494e-301,2.878848531827269e-301,2.876849331527389e-301,2.874850131227509e-301,2.872850930927629e-301,2.870851730627749e-301,2.8688525303278687e-301,2.8668533300279888e-301,2.8648541297281088e-301,2.862854929428229e-301,2.860855729128349e-301,2.858856528828469e-301,2.8568573285285885e-301,2.8548581282287085e-301,2.8528589279288285e-301,2.8508597276289485e-301,2.8488605273290686e-301,2.8468613270291886e-301,2.844862126729308e-301,2.8428629264294282e-301,2.8408637261295483e-301,2.8388645258296683e-301,2.8368653255297883e-301,2.834866125229908e-301,2.832866924930028e-301,2.830867724630148e-301,2.828868524330268e-301,2.826869324030388e-301,2.824870123730508e-301,2.8228709234306276e-301,2.8208717231307477e-301,2.8188725228308677e-301,2.8168733225309877e-301,2.8148741222311077e-301,2.8128749219312278e-301,2.8108757216313474e-301,2.8088765213314674e-301,2.8068773210315874e-301,2.8048781207317074e-301,2.8028789204318275e-301,2.8008797201319475e-301,2.798880519832067e-301,2.796881319532187e-301,2.794882119232307e-301,2.792882918932427e-301,2.790883718632547e-301,2.788884518332667e-301,2.786885318032787e-301,2.784886117732907e-301,2.782886917433027e-301,2.780887717133147e-301,2.778888516833267e-301,2.7768893165333865e-301,2.7748901162335066e-301,2.7728909159336266e-301,2.7708917156337466e-301,2.7688925153338666e-301,2.7668933150339867e-301,2.7648941147341063e-301,2.7628949144342263e-301,2.7608957141343463e-301,2.7588965138344664e-301,2.7568973135345864e-301,2.754898113234706e-301,2.752898912934826e-301,2.750899712634946e-301,2.748900512335066e-301,2.746901312035186e-301,2.744902111735306e-301,2.7429029114354257e-301,2.7409037111355457e-301,2.7389045108356658e-301,2.736905310535786e-301,2.734906110235906e-301,2.732906909936026e-301,2.7309077096361455e-301,2.7289085093362655e-301,2.7269093090363855e-301,2.7249101087365055e-301,2.7229109084366256e-301,2.720911708136745e-301,2.718912507836865e-301,2.7169133075369852e-301,2.7149141072371052e-301,2.7129149069372253e-301,2.7109157066373453e-301,2.708916506337465e-301,2.706917306037585e-301,2.704918105737705e-301,2.702918905437825e-301,2.700919705137945e-301,2.698920504838065e-301,2.6969213045381846e-301,2.6949221042383047e-301,2.6929229039384247e-301,2.6909237036385447e-301,2.6889245033386647e-301,2.6869253030387848e-301,2.6849261027389044e-301,2.6829269024390244e-301,2.6809277021391444e-301,2.6789285018392644e-301,2.6769293015393845e-301,2.674930101239504e-301,2.672930900939624e-301,2.670931700639744e-301,2.668932500339864e-301,2.666933300039984e-301,2.664934099740104e-301,2.662934899440224e-301,2.660935699140344e-301,2.658936498840464e-301,2.656937298540584e-301,2.654938098240704e-301,2.652938897940824e-301,2.6509396976409435e-301,2.6489404973410636e-301,2.6469412970411836e-301,2.6449420967413036e-301,2.6429428964414236e-301,2.6409436961415432e-301,2.6389444958416633e-301,2.6369452955417833e-301,2.6349460952419033e-301,2.6329468949420233e-301,2.6309476946421434e-301,2.628948494342263e-301,2.626949294042383e-301,2.624950093742503e-301,2.622950893442623e-301,2.620951693142743e-301,2.618952492842863e-301,2.6169532925429827e-301,2.6149540922431027e-301,2.6129548919432228e-301,2.6109556916433428e-301,2.608956491343463e-301,2.606957291043583e-301,2.6049580907437024e-301,2.6029588904438225e-301,2.6009596901439425e-301,2.5989604898440625e-301,2.5969612895441825e-301,2.594962089244302e-301,2.592962888944422e-301,2.590963688644542e-301,2.5889644883446622e-301,2.5869652880447822e-301,2.5849660877449023e-301,2.582966887445022e-301,2.580967687145142e-301,2.578968486845262e-301,2.576969286545382e-301,2.574970086245502e-301,2.572970885945622e-301,2.5709716856457416e-301,2.5689724853458616e-301,2.5669732850459817e-301,2.5649740847461017e-301,2.5629748844462217e-301,2.5609756841463413e-301,2.5589764838464613e-301,2.5569772835465814e-301,2.5549780832467014e-301,2.5529788829468214e-301,2.5509796826469414e-301,2.548980482347061e-301,2.546981282047181e-301,2.544982081747301e-301,2.542982881447421e-301,2.540983681147541e-301,2.538984480847661e-301,2.5369852805477808e-301,2.534986080247901e-301,2.532986879948021e-301,2.530987679648141e-301,2.528988479348261e-301,2.526989279048381e-301,2.5249900787485005e-301,2.5229908784486205e-301,2.5209916781487406e-301,2.5189924778488606e-301,2.5169932775489806e-301,2.5149940772491002e-301,2.5129948769492203e-301,2.5109956766493403e-301,2.5089964763494603e-301,2.5069972760495803e-301,2.5049980757497004e-301,2.50299887544982e-301,2.50099967514994e-301,2.49900047485006e-301,2.49700127455018e-301,2.4950020742503e-301,2.49300287395042e-301,2.4910036736505397e-301,2.4890044733506597e-301,2.4870052730507797e-301,2.4850060727508998e-301,2.48300687245102e-301,2.4810076721511394e-301,2.4790084718512594e-301,2.4770092715513795e-301,2.4750100712514995e-301,2.4730108709516195e-301,2.4710116706517395e-301,2.469012470351859e-301,2.467013270051979e-301,2.465014069752099e-301,2.4630148694522192e-301,2.4610156691523392e-301,2.4590164688524593e-301,2.457017268552579e-301,2.455018068252699e-301,2.453018867952819e-301,2.451019667652939e-301,2.449020467353059e-301,2.447021267053179e-301,2.4450220667532986e-301,2.4430228664534186e-301,2.4410236661535387e-301,2.4390244658536587e-301,2.4370252655537787e-301,2.4350260652538983e-301,2.4330268649540183e-301,2.4310276646541384e-301,2.4290284643542584e-301,2.4270292640543784e-301,2.4250300637544984e-301,2.423030863454618e-301,2.421031663154738e-301,2.419032462854858e-301,2.417033262554978e-301,2.415034062255098e-301,2.413034861955218e-301,2.4110356616553378e-301,2.409036461355458e-301,2.407037261055578e-301,2.405038060755698e-301,2.403038860455818e-301,2.4010396601559375e-301,2.3990404598560575e-301,2.3970412595561775e-301,2.3950420592562976e-301,2.3930428589564176e-301,2.3910436586565376e-301,2.3890444583566572e-301,2.3870452580567772e-301,2.3850460577568973e-301,2.3830468574570173e-301,2.3810476571571373e-301,2.3790484568572573e-301,2.377049256557377e-301,2.375050056257497e-301,2.373050855957617e-301,2.371051655657737e-301,2.369052455357857e-301,2.367053255057977e-301,2.3650540547580967e-301,2.3630548544582167e-301,2.3610556541583367e-301,2.3590564538584568e-301,2.3570572535585768e-301,2.3550580532586964e-301,2.3530588529588164e-301,2.3510596526589364e-301,2.3490604523590565e-301,2.3470612520591765e-301,2.3450620517592965e-301,2.343062851459416e-301,2.341063651159536e-301,2.339064450859656e-301,2.337065250559776e-301,2.3350660502598962e-301,2.3330668499600162e-301,2.331067649660136e-301,2.329068449360256e-301,2.327069249060376e-301,2.325070048760496e-301,2.323070848460616e-301,2.3210716481607356e-301,2.3190724478608556e-301,2.3170732475609756e-301,2.3150740472610956e-301,2.3130748469612157e-301,2.3110756466613357e-301,2.3090764463614553e-301,2.3070772460615753e-301,2.3050780457616953e-301,2.3030788454618154e-301,2.3010796451619354e-301,2.2990804448620554e-301,2.297081244562175e-301,2.295082044262295e-301,2.293082843962415e-301,2.291083643662535e-301,2.289084443362655e-301,2.287085243062775e-301,2.2850860427628948e-301,2.2830868424630148e-301,2.281087642163135e-301,2.279088441863255e-301,2.277089241563375e-301,2.2750900412634945e-301,2.2730908409636145e-301,2.2710916406637345e-301,2.2690924403638545e-301,2.2670932400639746e-301,2.2650940397640946e-301,2.263094839464214e-301,2.2610956391643342e-301,2.2590964388644543e-301,2.2570972385645743e-301,2.2550980382646943e-301,2.2530988379648143e-301,2.251099637664934e-301,2.249100437365054e-301,2.247101237065174e-301,2.245102036765294e-301,2.243102836465414e-301,2.2411036361655336e-301,2.2391044358656537e-301,2.2371052355657737e-301,2.2351060352658937e-301,2.2331068349660137e-301,2.2311076346661338e-301,2.2291084343662534e-301,2.2271092340663734e-301,2.2251100337664934e-301,2.2231108334666135e-301,2.2211116331667335e-301,2.2191124328668535e-301,2.217113232566973e-301,2.215114032267093e-301,2.213114831967213e-301,2.211115631667333e-301,2.2091164313674532e-301,2.2071172310675732e-301,2.205118030767693e-301,2.203118830467813e-301,2.201119630167933e-301,2.199120429868053e-301,2.197121229568173e-301,2.1951220292682926e-301,2.1931228289684126e-301,2.1911236286685326e-301,2.1891244283686526e-301,2.1871252280687726e-301,2.1851260277688927e-301,2.1831268274690123e-301,2.1811276271691323e-301,2.1791284268692523e-301,2.1771292265693724e-301,2.1751300262694924e-301,2.1731308259696124e-301,2.171131625669732e-301,2.169132425369852e-301,2.167133225069972e-301,2.165134024770092e-301,2.163134824470212e-301,2.1611356241703317e-301,2.1591364238704517e-301,2.1571372235705718e-301,2.155138023270692e-301,2.153138822970812e-301,2.151139622670932e-301,2.1491404223710515e-301,2.1471412220711715e-301,2.1451420217712915e-301,2.1431428214714115e-301,2.1411436211715316e-301,2.1391444208716516e-301,2.137145220571771e-301,2.1351460202718912e-301,2.1331468199720112e-301,2.1311476196721313e-301,2.1291484193722513e-301,2.127149219072371e-301,2.125150018772491e-301,2.123150818472611e-301,2.121151618172731e-301,2.119152417872851e-301,2.117153217572971e-301,2.1151540172730906e-301,2.1131548169732107e-301,2.1111556166733307e-301,2.1091564163734507e-301,2.1071572160735707e-301,2.1051580157736908e-301,2.1031588154738104e-301,2.1011596151739304e-301,2.0991604148740504e-301,2.0971612145741704e-301,2.0951620142742905e-301,2.0931628139744105e-301,2.09116361367453e-301,2.08916441337465e-301,2.08716521307477e-301,2.08516601277489e-301,2.08316681247501e-301,2.08116761217513e-301,2.07916841187525e-301,2.07716921157537e-301,2.07517001127549e-301,2.07317081097561e-301,2.07117161067573e-301,2.0691724103758495e-301,2.0671732100759696e-301,2.0651740097760896e-301,2.0631748094762096e-301,2.0611756091763296e-301,2.0591764088764497e-301,2.0571772085765693e-301,2.0551780082766893e-301,2.0531788079768093e-301,2.0511796076769293e-301,2.0491804073770494e-301,2.047181207077169e-301,2.045182006777289e-301,2.043182806477409e-301,2.041183606177529e-301,2.039184405877649e-301,2.037185205577769e-301,2.0351860052778887e-301,2.0331868049780087e-301,2.0311876046781288e-301,2.0291884043782488e-301,2.027189204078369e-301,2.025190003778489e-301,2.0231908034786084e-301,2.0211916031787285e-301,2.0191924028788485e-301,2.0171932025789685e-301,2.0151940022790885e-301,2.0131948019792086e-301,2.011195601679328e-301,2.009196401379448e-301,2.0071972010795682e-301,2.0051980007796883e-301,2.0031988004798083e-301,2.001199600179928e-301,1.999200399880048e-301,1.997201199580168e-301,1.995201999280288e-301,1.993202798980408e-301,1.991203598680528e-301,1.9892043983806476e-301,1.9872051980807676e-301,1.9852059977808877e-301,1.9832067974810077e-301,1.9812075971811277e-301,1.9792083968812477e-301,1.9772091965813674e-301,1.9752099962814874e-301,1.9732107959816074e-301,1.9712115956817274e-301,1.9692123953818474e-301,1.967213195081967e-301,1.965213994782087e-301,1.963214794482207e-301,1.961215594182327e-301,1.959216393882447e-301,1.957217193582567e-301,1.9552179932826868e-301,1.953218792982807e-301,1.951219592682927e-301,1.949220392383047e-301,1.947221192083167e-301,1.945221991783287e-301,1.9432227914834065e-301,1.9412235911835265e-301,1.9392243908836466e-301,1.9372251905837666e-301,1.9352259902838866e-301,1.9332267899840066e-301,1.9312275896841263e-301,1.9292283893842463e-301,1.9272291890843663e-301,1.9252299887844863e-301,1.9232307884846064e-301,1.921231588184726e-301,1.919232387884846e-301,1.917233187584966e-301,1.915233987285086e-301,1.913234786985206e-301,1.911235586685326e-301,1.9092363863854457e-301,1.9072371860855657e-301,1.9052379857856857e-301,1.9032387854858058e-301,1.901239585185926e-301,1.899240384886046e-301,1.8972411845861654e-301,1.8952419842862855e-301,1.8932427839864055e-301,1.8912435836865255e-301,1.8892443833866455e-301,1.887245183086765e-301,1.885245982786885e-301,1.883246782487005e-301,1.8812475821871252e-301,1.8792483818872452e-301,1.8772491815873653e-301,1.875249981287485e-301,1.873250780987605e-301,1.871251580687725e-301,1.869252380387845e-301,1.867253180087965e-301,1.8652539797880848e-301,1.8632547794882048e-301,1.8612555791883246e-301,1.8592563788884447e-301,1.8572571785885647e-301,1.8552579782886845e-301,1.8532587779888045e-301,1.8512595776889245e-301,1.8492603773890444e-301,1.8472611770891644e-301,1.8452619767892844e-301,1.8432627764894042e-301,1.8412635761895243e-301,1.8392643758896443e-301,1.837265175589764e-301,1.8352659752898841e-301,1.8332667749900041e-301,1.831267574690124e-301,1.829268374390244e-301,1.8272691740903638e-301,1.8252699737904838e-301,1.8232707734906039e-301,1.8212715731907237e-301,1.8192723728908437e-301,1.8172731725909637e-301,1.8152739722910835e-301,1.8132747719912036e-301,1.8112755716913236e-301,1.8092763713914434e-301,1.8072771710915634e-301,1.8052779707916835e-301,1.8032787704918033e-301,1.8012795701919233e-301,1.7992803698920433e-301,1.7972811695921631e-301,1.7952819692922832e-301,1.7932827689924032e-301,1.791283568692523e-301,1.789284368392643e-301,1.7872851680927628e-301,1.7852859677928829e-301,1.7832867674930029e-301,1.7812875671931227e-301,1.7792883668932427e-301,1.7772891665933628e-301,1.7752899662934826e-301,1.7732907659936026e-301,1.7712915656937226e-301,1.7692923653938424e-301,1.7672931650939625e-301,1.7652939647940825e-301,1.7632947644942023e-301,1.7612955641943223e-301,1.7592963638944424e-301,1.7572971635945622e-301,1.7552979632946822e-301,1.7532987629948022e-301,1.751299562694922e-301,1.749300362395042e-301,1.7473011620951619e-301,1.745301961795282e-301,1.743302761495402e-301,1.7413035611955217e-301,1.7393043608956418e-301,1.7373051605957618e-301,1.7353059602958816e-301,1.7333067599960016e-301,1.7313075596961217e-301,1.7293083593962415e-301,1.7273091590963615e-301,1.7253099587964815e-301,1.7233107584966013e-301,1.7213115581967214e-301,1.7193123578968414e-301,1.7173131575969612e-301,1.7153139572970812e-301,1.7133147569972013e-301,1.711315556697321e-301,1.7093163563974411e-301,1.707317156097561e-301,1.705317955797681e-301,1.703318755497801e-301,1.7013195551979208e-301,1.6993203548980408e-301,1.6973211545981608e-301,1.6953219542982807e-301,1.6933227539984007e-301,1.6913235536985207e-301,1.6893243533986405e-301,1.6873251530987605e-301,1.6853259527988806e-301,1.6833267524990004e-301,1.6813275521991204e-301,1.6793283518992404e-301,1.6773291515993603e-301,1.6753299512994803e-301,1.6733307509996003e-301,1.6713315506997201e-301,1.6693323503998401e-301,1.66733315009996e-301,1.66533394980008e-301,1.6633347495002e-301,1.6613355492003198e-301,1.6593363489004399e-301,1.6573371486005599e-301,1.6553379483006797e-301,1.6533387480007997e-301,1.6513395477009197e-301,1.6493403474010396e-301,1.6473411471011596e-301,1.6453419468012796e-301,1.6433427465013994e-301,1.6413435462015195e-301,1.6393443459016395e-301,1.6373451456017593e-301,1.6353459453018793e-301,1.6333467450019993e-301,1.6313475447021192e-301,1.6293483444022392e-301,1.627349144102359e-301,1.625349943802479e-301,1.623350743502599e-301,1.6213515432027189e-301,1.6193523429028389e-301,1.617353142602959e-301,1.6153539423030787e-301,1.6133547420031988e-301,1.6113555417033188e-301,1.6093563414034386e-301,1.6073571411035586e-301,1.6053579408036787e-301,1.6033587405037985e-301,1.6013595402039185e-301,1.5993603399040385e-301,1.5973611396041583e-301,1.5953619393042784e-301,1.5933627390043982e-301,1.5913635387045182e-301,1.5893643384046382e-301,1.587365138104758e-301,1.585365937804878e-301,1.583366737504998e-301,1.581367537205118e-301,1.579368336905238e-301,1.577369136605358e-301,1.5753699363054778e-301,1.5733707360055978e-301,1.5713715357057178e-301,1.5693723354058376e-301,1.5673731351059577e-301,1.5653739348060777e-301,1.5633747345061975e-301,1.5613755342063175e-301,1.5593763339064376e-301,1.5573771336065574e-301,1.5553779333066774e-301,1.5533787330067972e-301,1.5513795327069172e-301,1.5493803324070373e-301,1.547381132107157e-301,1.5453819318072771e-301,1.5433827315073971e-301,1.541383531207517e-301,1.539384330907637e-301,1.537385130607757e-301,1.5353859303078768e-301,1.5333867300079968e-301,1.5313875297081169e-301,1.5293883294082367e-301,1.5273891291083567e-301,1.5253899288084767e-301,1.5233907285085965e-301,1.5213915282087166e-301,1.5193923279088366e-301,1.5173931276089564e-301,1.5153939273090764e-301,1.5133947270091963e-301,1.5113955267093163e-301,1.5093963264094363e-301,1.5073971261095561e-301,1.5053979258096761e-301,1.5033987255097962e-301,1.501399525209916e-301,1.499400324910036e-301,1.497401124610156e-301,1.4954019243102759e-301,1.4934027240103959e-301,1.491403523710516e-301,1.4894043234106357e-301,1.4874051231107557e-301,1.4854059228108758e-301,1.4834067225109956e-301,1.4814075222111156e-301,1.4794083219112356e-301,1.4774091216113555e-301,1.4754099213114755e-301,1.4734107210115953e-301,1.4714115207117153e-301,1.4694123204118353e-301,1.4674131201119552e-301,1.4654139198120752e-301,1.4634147195121952e-301,1.461415519212315e-301,1.459416318912435e-301,1.457417118612555e-301,1.455417918312675e-301,1.453418718012795e-301,1.451419517712915e-301,1.4494203174130348e-301,1.4474211171131548e-301,1.4454219168132748e-301,1.4434227165133946e-301,1.4414235162135147e-301,1.4394243159136347e-301,1.4374251156137545e-301,1.4354259153138745e-301,1.4334267150139943e-301,1.4314275147141144e-301,1.4294283144142344e-301,1.4274291141143542e-301,1.4254299138144742e-301,1.4234307135145943e-301,1.421431513214714e-301,1.419432312914834e-301,1.4174331126149541e-301,1.415433912315074e-301,1.413434712015194e-301,1.411435511715314e-301,1.4094363114154338e-301,1.4074371111155538e-301,1.4054379108156739e-301,1.4034387105157937e-301,1.4014395102159137e-301,1.3994403099160337e-301,1.3974411096161535e-301,1.3954419093162736e-301,1.3934427090163934e-301,1.3914435087165134e-301,1.3894443084166334e-301,1.3874451081167532e-301,1.3854459078168733e-301,1.3834467075169933e-301,1.3814475072171131e-301,1.3794483069172331e-301,1.3774491066173532e-301,1.375449906317473e-301,1.373450706017593e-301,1.371451505717713e-301,1.3694523054178328e-301,1.3674531051179529e-301,1.3654539048180729e-301,1.3634547045181927e-301,1.3614555042183127e-301,1.3594563039184328e-301,1.3574571036185526e-301,1.3554579033186726e-301,1.3534587030187924e-301,1.3514595027189124e-301,1.3494603024190325e-301,1.3474611021191523e-301,1.3454619018192723e-301,1.3434627015193923e-301,1.3414635012195122e-301,1.3394643009196322e-301,1.3374651006197522e-301,1.335465900319872e-301,1.333466700019992e-301,1.331467499720112e-301,1.3294682994202319e-301,1.327469099120352e-301,1.325469898820472e-301,1.3234706985205918e-301,1.3214714982207118e-301,1.3194722979208318e-301,1.3174730976209516e-301,1.3154738973210716e-301,1.3134746970211915e-301,1.3114754967213115e-301,1.3094762964214315e-301,1.3074770961215513e-301,1.3054778958216713e-301,1.3034786955217914e-301,1.3014794952219112e-301,1.2994802949220312e-301,1.2974810946221512e-301,1.295481894322271e-301,1.293482694022391e-301,1.2914834937225111e-301,1.289484293422631e-301,1.287485093122751e-301,1.285485892822871e-301,1.2834866925229908e-301,1.2814874922231108e-301,1.2794882919232308e-301,1.2774890916233507e-301,1.2754898913234707e-301,1.2734906910235905e-301,1.2714914907237105e-301,1.2694922904238305e-301,1.2674930901239504e-301,1.2654938898240704e-301,1.2634946895241904e-301,1.2614954892243102e-301,1.2594962889244303e-301,1.2574970886245503e-301,1.25549788832467e-301,1.2534986880247901e-301,1.2514994877249101e-301,1.24950028742503e-301,1.24750108712515e-301,1.24550188682527e-301,1.2435026865253898e-301,1.2415034862255099e-301,1.2395042859256299e-301,1.2375050856257497e-301,1.2355058853258697e-301,1.2335066850259895e-301,1.2315074847261096e-301,1.2295082844262296e-301,1.2275090841263494e-301,1.2255098838264694e-301,1.2235106835265895e-301,1.2215114832267093e-301,1.2195122829268293e-301,1.2175130826269493e-301,1.2155138823270691e-301,1.2135146820271892e-301,1.2115154817273092e-301,1.209516281427429e-301,1.207517081127549e-301,1.205517880827669e-301,1.2035186805277889e-301,1.2015194802279089e-301,1.199520279928029e-301,1.1975210796281487e-301,1.1955218793282688e-301,1.1935226790283886e-301,1.1915234787285086e-301,1.1895242784286286e-301,1.1875250781287484e-301,1.1855258778288685e-301,1.1835266775289885e-301,1.1815274772291083e-301,1.1795282769292283e-301,1.1775290766293484e-301,1.1755298763294682e-301,1.1735306760295882e-301,1.1715314757297082e-301,1.169532275429828e-301,1.167533075129948e-301,1.165533874830068e-301,1.163534674530188e-301,1.161535474230308e-301,1.159536273930428e-301,1.1575370736305478e-301,1.1555378733306678e-301,1.1535386730307876e-301,1.1515394727309076e-301,1.1495402724310277e-301,1.1475410721311475e-301,1.1455418718312675e-301,1.1435426715313875e-301,1.1415434712315074e-301,1.1395442709316274e-301,1.1375450706317474e-301,1.1355458703318672e-301,1.1335466700319872e-301,1.1315474697321073e-301,1.129548269432227e-301,1.1275490691323471e-301,1.1255498688324671e-301,1.123550668532587e-301,1.121551468232707e-301,1.119552267932827e-301,1.1175530676329468e-301,1.1155538673330668e-301,1.1135546670331867e-301,1.1115554667333067e-301,1.1095562664334267e-301,1.1075570661335465e-301,1.1055578658336665e-301,1.1035586655337866e-301,1.1015594652339064e-301,1.0995602649340264e-301,1.0975610646341464e-301,1.0955618643342663e-301,1.0935626640343863e-301,1.0915634637345063e-301,1.0895642634346261e-301,1.0875650631347461e-301,1.0855658628348662e-301,1.083566662534986e-301,1.081567462235106e-301,1.079568261935226e-301,1.0775690616353459e-301,1.0755698613354659e-301,1.0735706610355857e-301,1.0715714607357057e-301,1.0695722604358257e-301,1.0675730601359456e-301,1.0655738598360656e-301,1.0635746595361856e-301,1.0615754592363054e-301,1.0595762589364255e-301,1.0575770586365455e-301,1.0555778583366653e-301,1.0535786580367853e-301,1.0515794577369053e-301,1.0495802574370252e-301,1.0475810571371452e-301,1.0455818568372652e-301,1.043582656537385e-301,1.041583456237505e-301,1.0395842559376249e-301,1.037585055637745e-301,1.035585855337865e-301,1.0335866550379847e-301,1.0315874547381048e-301,1.0295882544382248e-301,1.0275890541383446e-301,1.0255898538384646e-301,1.0235906535385847e-301,1.0215914532387045e-301,1.0195922529388245e-301,1.0175930526389445e-301,1.0155938523390643e-301,1.0135946520391844e-301,1.0115954517393044e-301,1.0095962514394242e-301,1.0075970511395442e-301,1.0055978508396643e-301,1.003598650539784e-301,1.001599450239904e-301,9.99600249940024e-302,9.97601049640144e-302,9.95601849340264e-302,9.936026490403838e-302,9.916034487405038e-302,9.896042484406238e-302,9.876050481407436e-302,9.856058478408637e-302,9.836066475409837e-302,9.816074472411035e-302,9.796082469412235e-302,9.776090466413436e-302,9.756098463414634e-302,9.736106460415834e-302,9.716114457417034e-302,9.696122454418232e-302,9.676130451419433e-302,9.656138448420633e-302,9.636146445421831e-302,9.616154442423031e-302,9.59616243942423e-302,9.57617043642543e-302,9.55617843342663e-302,9.536186430427828e-302,9.516194427429028e-302,9.496202424430229e-302,9.476210421431427e-302,9.456218418432627e-302,9.436226415433827e-302,9.416234412435026e-302,9.396242409436226e-302,9.376250406437426e-302,9.356258403438624e-302,9.336266400439824e-302,9.316274397441024e-302,9.296282394442223e-302,9.276290391443423e-302,9.256298388444622e-302,9.236306385445822e-302,9.216314382447022e-302,9.196322379448221e-302,9.17633037644942e-302,9.15633837345062e-302,9.13634637045182e-302,9.116354367453019e-302,9.096362364454218e-302,9.076370361455418e-302,9.056378358456618e-302,9.036386355457817e-302,9.016394352459017e-302,8.996402349460216e-302,8.976410346461415e-302,8.956418343462616e-302,8.936426340463815e-302,8.916434337465014e-302,8.896442334466213e-302,8.876450331467413e-302,8.856458328468613e-302,8.836466325469812e-302,8.816474322471012e-302,8.796482319472211e-302,8.776490316473411e-302,8.756498313474611e-302,8.73650631047581e-302,8.716514307477009e-302,8.696522304478208e-302,8.676530301479409e-302,8.656538298480608e-302,8.636546295481807e-302,8.616554292483007e-302,8.596562289484207e-302,8.576570286485406e-302,8.556578283486606e-302,8.536586280487805e-302,8.516594277489004e-302,8.496602274490204e-302,8.476610271491404e-302,8.456618268492603e-302,8.436626265493802e-302,8.416634262495003e-302,8.396642259496202e-302,8.376650256497401e-302,8.356658253498601e-302,8.3366662504998e-302,8.316674247501e-302,8.296682244502199e-302,8.276690241503399e-302,8.256698238504598e-302,8.236706235505798e-302,8.216714232506998e-302,8.196722229508197e-302,8.176730226509396e-302,8.156738223510596e-302,8.136746220511796e-302,8.116754217512995e-302,8.096762214514194e-302,8.076770211515394e-302,8.056778208516594e-302,8.036786205517793e-302,8.016794202518993e-302,7.996802199520192e-302,7.976810196521391e-302,7.956818193522592e-302,7.936826190523791e-302,7.91683418752499e-302,7.896842184526189e-302,7.87685018152739e-302,7.856858178528589e-302,7.836866175529788e-302,7.816874172530988e-302,7.796882169532187e-302,7.776890166533387e-302,7.756898163534587e-302,7.736906160535786e-302,7.716914157536985e-302,7.696922154538184e-302,7.676930151539385e-302,7.656938148540584e-302,7.636946145541783e-302,7.616954142542983e-302,7.596962139544183e-302,7.576970136545382e-302,7.556978133546582e-302,7.536986130547781e-302,7.51699412754898e-302,7.49700212455018e-302,7.47701012155138e-302,7.457018118552579e-302,7.437026115553778e-302,7.417034112554979e-302,7.397042109556178e-302,7.377050106557377e-302,7.357058103558577e-302,7.337066100559776e-302,7.317074097560976e-302,7.297082094562175e-302,7.277090091563375e-302,7.257098088564574e-302,7.237106085565774e-302,7.217114082566974e-302,7.197122079568173e-302,7.177130076569372e-302,7.157138073570572e-302,7.137146070571772e-302,7.117154067572971e-302,7.09716206457417e-302,7.07717006157537e-302,7.05717805857657e-302,7.037186055577769e-302,7.017194052578969e-302,6.997202049580168e-302,6.977210046581367e-302,6.957218043582568e-302,6.937226040583767e-302,6.917234037584966e-302,6.897242034586165e-302,6.877250031587366e-302,6.857258028588565e-302,6.837266025589764e-302,6.817274022590964e-302,6.797282019592163e-302,6.777290016593363e-302,6.757298013594563e-302,6.737306010595762e-302,6.717314007596961e-302,6.69732200459816e-302,6.677330001599361e-302,6.65733799860056e-302,6.637345995601759e-302,6.617353992602959e-302,6.597361989604159e-302,6.577369986605358e-302,6.557377983606558e-302,6.537385980607757e-302,6.517393977608956e-302,6.497401974610156e-302,6.477409971611356e-302,6.457417968612555e-302,6.437425965613754e-302,6.417433962614955e-302,6.397441959616154e-302,6.377449956617353e-302,6.357457953618553e-302,6.337465950619752e-302,6.317473947620952e-302,6.297481944622151e-302,6.277489941623351e-302,6.25749793862455e-302,6.23750593562575e-302,6.21751393262695e-302,6.197521929628149e-302,6.177529926629348e-302,6.157537923630548e-302,6.137545920631748e-302,6.117553917632947e-302,6.097561914634146e-302,6.077569911635346e-302,6.057577908636546e-302,6.037585905637745e-302,6.017593902638945e-302,5.997601899640144e-302,5.977609896641343e-302,5.957617893642544e-302,5.937625890643743e-302,5.917633887644942e-302,5.897641884646141e-302,5.877649881647342e-302,5.857657878648541e-302,5.83766587564974e-302,5.81767387265094e-302,5.797681869652139e-302,5.777689866653339e-302,5.757697863654539e-302,5.737705860655738e-302,5.717713857656937e-302,5.697721854658136e-302,5.677729851659337e-302,5.657737848660536e-302,5.637745845661735e-302,5.617753842662935e-302,5.597761839664135e-302,5.577769836665334e-302,5.557777833666534e-302,5.537785830667733e-302,5.517793827668932e-302,5.497801824670132e-302,5.477809821671332e-302,5.457817818672531e-302,5.43782581567373e-302,5.417833812674931e-302,5.39784180967613e-302,5.377849806677329e-302,5.357857803678529e-302,5.337865800679728e-302,5.317873797680928e-302,5.297881794682127e-302,5.277889791683327e-302,5.257897788684526e-302,5.237905785685726e-302,5.217913782686926e-302,5.197921779688125e-302,5.177929776689324e-302,5.157937773690524e-302,5.137945770691724e-302,5.117953767692923e-302,5.097961764694122e-302,5.077969761695322e-302,5.057977758696522e-302,5.037985755697721e-302,5.017993752698921e-302,4.99800174970012e-302,4.978009746701319e-302,4.958017743702519e-302,4.938025740703719e-302,4.918033737704918e-302,4.898041734706117e-302,4.878049731707318e-302,4.858057728708517e-302,4.838065725709716e-302,4.818073722710916e-302,4.798081719712115e-302,4.778089716713315e-302,4.758097713714514e-302,4.738105710715714e-302,4.718113707716913e-302,4.698121704718112e-302,4.678129701719313e-302,4.658137698720512e-302,4.6381456957217116e-302,4.618153692722911e-302,4.5981616897241106e-302,4.57816968672531e-302,4.5581776837265095e-302,4.538185680727709e-302,4.5181936777289085e-302,4.498201674730108e-302,4.4782096717313074e-302,4.458217668732507e-302,4.438225665733707e-302,4.418233662734906e-302,4.398241659736106e-302,4.378249656737305e-302,4.3582576537385047e-302,4.3382656507397044e-302,4.3182736477409037e-302,4.2982816447421034e-302,4.2782896417433026e-302,4.2582976387445023e-302,4.238305635745702e-302,4.218313632746901e-302,4.198321629748101e-302,4.1783296267493e-302,4.1583376237505e-302,4.1383456207516996e-302,4.118353617752899e-302,4.0983616147540986e-302,4.078369611755298e-302,4.0583776087564975e-302,4.038385605757697e-302,4.0183936027588965e-302,3.998401599760096e-302,3.9784095967612954e-302,3.958417593762495e-302,3.938425590763695e-302,3.918433587764894e-302,3.898441584766094e-302,3.878449581767293e-302,3.8584575787684927e-302,3.8384655757696924e-302,3.8184735727708917e-302,3.7984815697720914e-302,3.7784895667732906e-302,3.7584975637744903e-302,3.73850556077569e-302,3.718513557776889e-302,3.698521554778089e-302,3.678529551779288e-302,3.658537548780488e-302,3.6385455457816876e-302,3.618553542782887e-302,3.5985615397840866e-302,3.578569536785286e-302,3.5585775337864855e-302,3.538585530787685e-302,3.5185935277888845e-302,3.498601524790084e-302,3.4786095217912834e-302,3.458617518792483e-302,3.438625515793683e-302,3.418633512794882e-302,3.398641509796082e-302,3.378649506797281e-302,3.3586575037984807e-302,3.3386655007996805e-302,3.3186734978008797e-302,3.2986814948020794e-302,3.2786894918032786e-302,3.2586974888044783e-302,3.238705485805678e-302,3.2187134828068773e-302,3.198721479808077e-302,3.178729476809276e-302,3.158737473810476e-302,3.1387454708116757e-302,3.118753467812875e-302,3.0987614648140746e-302,3.078769461815274e-302,3.0587774588164735e-302,3.038785455817673e-302,3.0187934528188725e-302,2.998801449820072e-302,2.9788094468212714e-302,2.958817443822471e-302,2.938825440823671e-302,2.91883343782487e-302,2.89884143482607e-302,2.878849431827269e-302,2.8588574288284687e-302,2.8388654258296685e-302,2.8188734228308677e-302,2.7988814198320674e-302,2.7788894168332666e-302,2.7588974138344663e-302,2.738905410835666e-302,2.7189134078368653e-302,2.698921404838065e-302,2.678929401839264e-302,2.658937398840464e-302,2.6389453958416637e-302,2.618953392842863e-302,2.5989613898440626e-302,2.578969386845262e-302,2.5589773838464615e-302,2.538985380847661e-302,2.5189933778488605e-302,2.49900137485006e-302,2.4790093718512594e-302,2.459017368852459e-302,2.439025365853659e-302,2.419033362854858e-302,2.399041359856058e-302,2.379049356857257e-302,2.3590573538584567e-302,2.3390653508596565e-302,2.3190733478608557e-302,2.2990813448620551e-302,2.2790893418632549e-302,2.2590973388644543e-302,2.2391053358656538e-302,2.2191133328668533e-302,2.1991213298680527e-302,2.1791293268692525e-302,2.159137323870452e-302,2.1391453208716514e-302,2.1191533178728509e-302,2.0991613148740503e-302,2.07916931187525e-302,2.0591773088764495e-302,2.039185305877649e-302,2.0191933028788485e-302,1.999201299880048e-302,1.9792092968812477e-302,1.959217293882447e-302,1.9392252908836466e-302,1.919233287884846e-302,1.8992412848860455e-302,1.8792492818872453e-302,1.8592572788884447e-302,1.8392652758896442e-302,1.8192732728908437e-302,1.7992812698920431e-302,1.7792892668932429e-302,1.7592972638944423e-302,1.7393052608956418e-302,1.7193132578968413e-302,1.6993212548980407e-302,1.6793292518992405e-302,1.65933724890044e-302,1.6393452459016394e-302,1.6193532429028389e-302,1.5993612399040383e-302,1.579369236905238e-302,1.5593772339064375e-302,1.539385230907637e-302,1.5193932279088365e-302,1.499401224910036e-302,1.4794092219112357e-302,1.459417218912435e-302,1.4394252159136346e-302,1.419433212914834e-302,1.3994412099160335e-302,1.3794492069172333e-302,1.3594572039184327e-302,1.3394652009196322e-302,1.3194731979208317e-302,1.2994811949220311e-302,1.2794891919232309e-302,1.2594971889244303e-302,1.2395051859256298e-302,1.2195131829268293e-302,1.1995211799280287e-302,1.1795291769292285e-302,1.1595371739304278e-302,1.1395451709316274e-302,1.1195531679328269e-302,1.0995611649340265e-302,1.0795691619352259e-302,1.0595771589364254e-302,1.039585155937625e-302,1.0195931529388245e-302,9.99601149940024e-303,9.796091469412235e-303,9.59617143942423e-303,9.396251409436226e-303,9.196331379448221e-303,8.996411349460217e-303,8.796491319472211e-303,8.596571289484206e-303,8.396651259496202e-303,8.196731229508197e-303,7.996811199520193e-303,7.796891169532187e-303,7.596971139544182e-303,7.397051109556178e-303,7.197131079568173e-303,6.997211049580169e-303,6.797291019592163e-303,6.597370989604158e-303,6.397450959616154e-303,6.197530929628149e-303,5.997610899640145e-303,5.7976908696521393e-303,5.5977708396641347e-303,5.39785080967613e-303,5.197930779688125e-303,4.99801074970012e-303,4.7980907197121153e-303,4.5981706897241107e-303,4.3982506597361054e-303,4.198330629748101e-303,3.998410599760096e-303,3.7984905697720913e-303,3.598570539784087e-303,3.3986505097960814e-303,3.198730479808077e-303,2.998810449820072e-303,2.7988904198320674e-303,2.5989703898440624e-303,2.3990503598560577e-303,2.1991303298680527e-303,1.999210299880048e-303,1.7992902698920434e-303,1.5993702399040384e-303,1.3994502099160337e-303,1.1995301799280289e-303,9.99610149940024e-304,7.996901199520192e-304,5.9977008996401444e-304,3.998500599760096e-304,1.9993002998800482e-304,1.0000000000000454e-308]}

},{}],94:[function(require,module,exports){
module.exports={"expected":[-0.27144176165949063,-0.26983872174811063,-0.2682728912053714,-0.2667427844039358,-0.2652469990285141,-0.2637842101026228,-0.26235316453386687,-0.26095267612514883,-0.2595816210052901,-0.2582389334378402,-0.256923601971473,-0.25563466589940687,-0.2543712119988271,-0.2531323715243995,-0.2519173174326994,-0.25072526181679405,-0.24955545353234782,-0.24840717599850395,-0.24727974515847193,-0.24617250758623113,-0.24508483872708442,-0.24401614126097165,-0.24296584357850276,-0.2419333983606097,-0.24091828125355574,-0.23991998963179456,-0.2389380414418469,-0.23797197412097126,-0.2370213435849503,-0.23608572327981095,-0.235164703292737,-0.23425788951783835,-0.23336490287280331,-0.23248537856279022,-0.2316189653882133,-0.23076532509334838,-0.22992413175293241,-0.22909507119415232,-0.22827784045162544,-0.22747214725315887,-0.22667770953424493,-0.22589425497940613,-0.2251215205886439,-0.22435925226737663,-0.22360720443837026,-0.22286513967427576,-0.22213282834948522,-0.2214100483101142,-0.22069658456099894,-0.2199922289686773,-0.21929677997939342,-0.218610042351232,-0.21793182689954918,-0.2172619502549238,-0.21660023463290418,-0.2159465076148741,-0.215300601939406,-0.21466235530351097,-0.2140316101732324,-0.21340821360306708,-0.21279201706372847,-0.21218287627779914,-0.21158065106284685,-0.21098520518160438,-0.21039640619884004,-0.20981412534456537,-0.20923823738325092,-0.20866862048873838,-0.20810515612455735,-0.20754772892937154,-0.20699622660729528,-0.20645053982283645,-0.20591056210023637,-0.2053761897269887,-0.20484732166133457,-0.20432385944353887,-0.2038057071107675,-0.20329277111539204,-0.20278496024655923,-0.20228218555487268,-0.2017843602800395,-0.20129139978134564,-0.20080322147082919,-0.20031974474902756,-0.1998408909431828,-0.1993665832477931,-0.19889674666740634,-0.19843130796155514,-0.19797019559173973,-0.1975133396703679,-0.19706067191156795,-0.19661212558379232,-0.1961676354641363,-0.19572713779429735,-0.1952905702381069,-0.1948578718405669,-0.19442898298832983,-0.19400384537156054,-0.1935824019471242,-0.19316459690304535,-0.1927503756241864,-0.19233968465909607,-0.19193247168798103,-0.19152868549175556,-0.19112827592212647,-0.1907311938726724,-0.19033739125087876,-0.18994682095109044,-0.18955943682834753,-0.1891751936730694,-0.18879404718655463,-0.18841595395726676,-0.18804087143787443,-0.18766875792301926,-0.1872995725277831,-0.1869332751668291,-0.18656982653419177,-0.18620918808369225,-0.18585132200995533,-0.18549619123000735,-0.18514375936543312,-0.18479399072507258,-0.18444685028823718,-0.18410230368842811,-0.1837603171975383,-0.1834208577105215,-0.18308389273051198,-0.18274939035437918,-0.18241731925870214,-0.18208764868615007,-0.1817603484322539,-0.18143538883255672,-0.18111274075012979,-0.1807923755634416,-0.18047426515456877,-0.18015838189773684,-0.17984469864818048,-0.1795331887313124,-0.1792238259321908,-0.1789165844852758,-0.1786114390644652,-0.1783083647734012,-0.17800733713603847,-0.17770833208746603,-0.17741132596497441,-0.17711629549936053,-0.17682321780646293,-0.17653207037891955,-0.1762428310781424,-0.17595547812650061,-0.17566999009970724,-0.17538634591940222,-0.17510452484592628,-0.17482450647127973,-0.17454627071226037,-0.17426979780377547,-0.17399506829232245,-0.17372206302963317,-0.17345076316647698,-0.17318115014661806,-0.17291320570092208,-0.17264691184160846,-0.17238225085664322,-0.17211920530426883,-0.17185775800766742,-0.1715978920497523,-0.1713395907680857,-0.17108283774991795,-0.1708276168273452,-0.1705739120725821,-0.17032170779334638,-0.1700709885283523,-0.16982173904290945,-0.16957394432462447,-0.16932758957920277,-0.1690826602263473,-0.16883914189575183,-0.16859702042318614,-0.1683562818466708,-0.16811691240273882,-0.167878898522782,-0.16764222682947974,-0.167406884133308,-0.16717285742912655,-0.1669401338928418,-0.16670870087814424,-0.1664785459133174,-0.16624965669811737,-0.16602202110072045,-0.16579562715473767,-0.1655704630562938,-0.1653465171611701,-0.16512377798200792,-0.16490223418557312,-0.1646818745900785,-0.1644626881625633,-0.16424466401632842,-0.16402779140842574,-0.16381205973720028,-0.16359745853988386,-0.1633839774902391,-0.1631716063962523,-0.16296033519787415,-0.16275015396480708,-0.16254105289433812,-0.1623330223092161,-0.16212605265557214,-0.16192013450088247,-0.16171525853197233,-0.1615114155530604,-0.16130859648384233,-0.1611067923576125,-0.16090599431942362,-0.1607061936242826,-0.16050738163538208,-0.16030954982236725,-0.16011268975963608,-0.15991679312467347,-0.15972185169641748,-0.15952785735365743,-0.15933480207346304,-0.15914267792964382,-0.15895147709123822,-0.15876119182103143,-0.15857181447410185,-0.15838333749639477,-0.15819575342332357,-0.15800905487839687,-0.15782323457187172,-0.1576382852994323,-0.15745419994089266,-0.1572709714589242,-0.1570885928978067,-0.15690705738220195,-0.15672635811595062,-0.1565464883808909,-0.15636744153569865,-0.15618921101474892,-0.15601179032699813,-0.15583517305488648,-0.15565935285325994,-0.1554843234483121,-0.15531007863654459,-0.1551366122837462,-0.15496391832399034,-0.1547919907586501,-0.15462082365543067,-0.15445041114741914,-0.15428074743215067,-0.15411182677069135,-0.15394364348673661,-0.15377619196572584,-0.15360946665397196,-0.1534434620578064,-0.15327817274273828,-0.15311359333262886,-0.15294971850887912,-0.15278654300963224,-0.15262406162898867,-0.15246226921623532,-0.15230116067508742,-0.15214073096294292,-0.15198097509015,-0.15182188811928632,-0.15166346516445067,-0.15150570139056613,-0.15134859201269493,-0.15119213229536477,-0.1510363175519058,-0.15088114314379916,-0.1507266044800357,-0.15057269701648512,-0.15041941625527597,-0.15026675774418496,-0.15011471707603682,-0.1499632898881133,-0.14981247186157215,-0.14966225872087513,-0.14951264623322513,-0.14936363020801255,-0.1492152064962702,-0.1490673709901371,-0.14892011962233034,-0.1487734483656258,-0.14862735323234663,-0.1484818302738599,-0.14833687558008102,-0.1481924852789861,-0.14804865553613156,-0.14790538255418145,-0.14776266257244192,-0.14762049186640286,-0.14747886674728675,-0.14733778356160412,-0.14719723869071602,-0.14705722855040318,-0.14691774959044138,-0.14677879829418372,-0.14664037117814882,-0.14650246479161538,-0.14636507571622281,-0.1462282005655777,-0.1460918359848665,-0.14595597865047352,-0.14582062526960496,-0.14568577257991827,-0.14555141734915716,-0.14541755637479184,-0.14528418648366453,-0.14515130453164043,-0.14501890740326331,-0.14488699201141653,-0.14475555529698877,-0.14462459422854473,-0.1444941058020004,-0.14436408704030324,-0.14423453499311661,-0.1441054467365093,-0.1439768193726487,-0.143848650029499,-0.1437209358605236,-0.1435936740443912,-0.14346686178468668,-0.14334049630962584,-0.14321457487177386,-0.14308909474776824,-0.1429640532380452,-0.1428394476665699,-0.1427152753805708,-0.14259153375027722,-0.1424682201686609,-0.1423453320511809,-0.14222286683553212,-0.14210082198139717,-0.1419791949702019,-0.1418579833048739,-0.1417371845096045,-0.14161679612961411,-0.14149681573092046,-0.14137724090011014,-0.14125806924411333,-0.14113929838998127,-0.14102092598466698,-0.1409029496948088,-0.14078536720651677,-0.14066817622516206,-0.1405513744751689,-0.14043495969980954,-0.14031892966100173,-0.14020328213910904,-0.14008801493274356,-0.13997312585857152,-0.13985861275112116,-0.13974447346259322,-0.139630705862674,-0.1395173078383507,-0.13940427729372917,-0.13929161214985403,-0.1391793103445313,-0.13906736983215293,-0.138955788583524,-0.13884456458569175,-0.13873369584177708,-0.13862318037080815,-0.13851301620755582,-0.1384032014023717,-0.13829373402102768,-0.13818461214455788,-0.13807583386910247,-0.1379673973057534,-0.1378593005804021,-0.1377515418335892,-0.13764411922035588,-0.13753703091009728,-0.13743027508641767,-0.13732384994698735,-0.13721775370340147,-0.1371119845810404,-0.1370065408189319,-0.1369014206696152,-0.13679662239900614,-0.13669214428626486,-0.13658798462366414,-0.13648414171646014,-0.13638061388276412,-0.1362773994534162,-0.1361744967718602,-0.13607190419402032,-0.13596962008817917,-0.1358676428348572,-0.13576597082669375,-0.1356646024683294,-0.13556353617628963,-0.13546277037887014,-0.13536230351602324,-0.13526213403924578,-0.13516226041146834,-0.13506268110694564,-0.13496339461114845,-0.13486439942065653,-0.13476569404305294,-0.13466727699681968,-0.13456914681123439,-0.13447130202626814,-0.1343737411924849,-0.13427646287094158,-0.13417946563308963,-0.13408274806067755,-0.1339863087456547,-0.13389014629007603,-0.1337942593060081,-0.13369864641543597,-0.1336033062501713,-0.13350823745176146,-0.13341343867139968,-0.13331890856983605,-0.13322464581728996,-0.133130649093363,-0.13303691708695312,-0.13294344849616982,-0.13285024202825016,-0.1327572963994757,-0.13266461033509047,-0.13257218256921974,-0.13248001184478972,-0.13238809691344833,-0.13229643653548653,-0.1322050294797608,-0.13211387452361628,-0.13202297045281094,-0.1319323160614404,-0.1318419101518636,-0.1317517515346296,-0.13166183902840453,-0.1315721714599001,-0.13148274766380227,-0.13139356648270104,-0.13130462676702084,-0.13121592737495177,-0.1311274671723816,-0.1310392450328283,-0.1309512598373735,-0.13086351047459668,-0.1307759958405099,-0.13068871483849331,-0.1306016663792314,-0.1305148493806498,-0.130428262767853,-0.1303419054730623,-0.13025577643555483,-0.13016987460160317,-0.13008419892441525,-0.12999874836407527,-0.129913521887485,-0.12982851846830604,-0.12974373708690204,-0.12965917673028224,-0.12957483639204515,-0.12949071507232293,-0.12940681177772634,-0.12932312552129036,-0.12923965532242018,-0.129156400206838,-0.12907335920653,-0.1289905313596943,-0.12890791571068916,-0.12882551130998177,-0.12874331721409757,-0.12866133248557018,-0.12857955619289163,-0.12849798741046337,-0.12841662521854744,-0.12833546870321852,-0.12825451695631615,-0.12817376907539751,-0.12809322416369087,-0.1280128813300492,-0.1279327396889044,-0.12785279836022206,-0.1277730564694566,-0.12769351314750677,-0.12761416753067162,-0.1275350187606072,-0.12745606598428316,-0.12737730835394026,-0.12729874502704805,-0.12722037516626297,-0.12714219793938702,-0.1270642125193266,-0.12698641808405195,-0.12690881381655703,-0.12683139890481945,-0.12675417254176125,-0.12667713392520963,-0.12660028225785844,-0.12652361674722973,-0.12644713660563595,-0.12637084105014218,-0.12629472930252914,-0.12621880058925616,-0.1261430541414248,-0.1260674891947426,-0.12599210498948732],"x":[-50.0,-50.896414342629484,-51.79282868525896,-52.689243027888445,-53.58565737051793,-54.48207171314741,-55.37848605577689,-56.27490039840637,-57.17131474103586,-58.06772908366534,-58.96414342629482,-59.8605577689243,-60.756972111553786,-61.65338645418327,-62.54980079681275,-63.44621513944223,-64.34262948207171,-65.2390438247012,-66.13545816733068,-67.03187250996017,-67.92828685258964,-68.82470119521912,-69.7211155378486,-70.61752988047809,-71.51394422310757,-72.41035856573706,-73.30677290836654,-74.20318725099601,-75.0996015936255,-75.99601593625498,-76.89243027888446,-77.78884462151395,-78.68525896414343,-79.58167330677291,-80.4780876494024,-81.37450199203187,-82.27091633466135,-83.16733067729083,-84.06374501992032,-84.9601593625498,-85.85657370517929,-86.75298804780877,-87.64940239043824,-88.54581673306772,-89.44223107569721,-90.33864541832669,-91.23505976095618,-92.13147410358566,-93.02788844621514,-93.92430278884463,-94.8207171314741,-95.71713147410358,-96.61354581673307,-97.50996015936255,-98.40637450199203,-99.30278884462152,-100.199203187251,-101.09561752988049,-101.99203187250995,-102.88844621513944,-103.78486055776892,-104.6812749003984,-105.57768924302789,-106.47410358565737,-107.37051792828686,-108.26693227091633,-109.16334661354581,-110.0597609561753,-110.95617529880478,-111.85258964143426,-112.74900398406375,-113.64541832669323,-114.54183266932272,-115.43824701195219,-116.33466135458167,-117.23107569721115,-118.12749003984064,-119.02390438247012,-119.9203187250996,-120.81673306772909,-121.71314741035856,-122.60956175298804,-123.50597609561753,-124.40239043824701,-125.2988047808765,-126.19521912350598,-127.09163346613546,-127.98804780876495,-128.88446215139442,-129.78087649402391,-130.67729083665338,-131.57370517928288,-132.47011952191235,-133.36653386454182,-134.26294820717132,-135.1593625498008,-136.0557768924303,-136.95219123505976,-137.84860557768926,-138.74501992031873,-139.6414342629482,-140.5378486055777,-141.43426294820716,-142.33067729083666,-143.22709163346613,-144.12350597609563,-145.0199203187251,-145.91633466135457,-146.81274900398407,-147.70916334661354,-148.60557768924303,-149.5019920318725,-150.398406374502,-151.29482071713147,-152.19123505976097,-153.08764940239044,-153.9840637450199,-154.8804780876494,-155.77689243027888,-156.67330677290838,-157.56972111553785,-158.46613545816734,-159.3625498007968,-160.25896414342628,-161.15537848605578,-162.05179282868525,-162.94820717131475,-163.84462151394422,-164.74103585657372,-165.6374501992032,-166.53386454183266,-167.43027888446215,-168.32669322709162,-169.22310756972112,-170.1195219123506,-171.0159362549801,-171.91235059760956,-172.80876494023903,-173.70517928286853,-174.601593625498,-175.4980079681275,-176.39442231075697,-177.29083665338646,-178.18725099601593,-179.08366533864543,-179.9800796812749,-180.87649402390437,-181.77290836653387,-182.66932270916334,-183.56573705179284,-184.4621513944223,-185.3585657370518,-186.25498007968127,-187.15139442231074,-188.04780876494024,-188.9442231075697,-189.8406374501992,-190.73705179282868,-191.63346613545818,-192.52988047808765,-193.42629482071712,-194.32270916334662,-195.21912350597609,-196.11553784860558,-197.01195219123505,-197.90836653386455,-198.80478087649402,-199.70119521912352,-200.597609561753,-201.49402390438246,-202.39043824701196,-203.28685258964143,-204.18326693227093,-205.0796812749004,-205.9760956175299,-206.87250996015936,-207.76892430278883,-208.66533864541833,-209.5617529880478,-210.4581673306773,-211.35458167330677,-212.25099601593627,-213.14741035856574,-214.0438247011952,-214.9402390438247,-215.83665338645417,-216.73306772908367,-217.62948207171314,-218.52589641434264,-219.4223107569721,-220.3187250996016,-221.21513944223108,-222.11155378486055,-223.00796812749005,-223.90438247011951,-224.800796812749,-225.69721115537848,-226.59362549800798,-227.49003984063745,-228.38645418326692,-229.28286852589642,-230.1792828685259,-231.0756972111554,-231.97211155378486,-232.86852589641435,-233.76494023904382,-234.6613545816733,-235.5577689243028,-236.45418326693226,-237.35059760956176,-238.24701195219123,-239.14342629482073,-240.0398406374502,-240.93625498007967,-241.83266932270917,-242.72908366533864,-243.62549800796813,-244.5219123505976,-245.4183266932271,-246.31474103585657,-247.21115537848607,-248.10756972111554,-249.003984063745,-249.9003984063745,-250.79681274900398,-251.69322709163347,-252.58964143426294,-253.48605577689244,-254.3824701195219,-255.27888446215138,-256.1752988047809,-257.0717131474104,-257.9681274900398,-258.8645418326693,-259.7609561752988,-260.6573705179283,-261.55378486055776,-262.45019920318725,-263.34661354581675,-264.2430278884462,-265.1394422310757,-266.0358565737052,-266.9322709163347,-267.82868525896413,-268.7250996015936,-269.6215139442231,-270.51792828685257,-271.41434262948206,-272.31075697211156,-273.20717131474106,-274.1035856573705,-275.0,-275.8964143426295,-276.79282868525894,-277.68924302788844,-278.58565737051794,-279.48207171314743,-280.3784860557769,-281.2749003984064,-282.17131474103587,-283.0677290836653,-283.9641434262948,-284.8605577689243,-285.7569721115538,-286.65338645418325,-287.54980079681275,-288.44621513944224,-289.3426294820717,-290.2390438247012,-291.1354581673307,-292.0318725099602,-292.9282868525896,-293.8247011952191,-294.7211155378486,-295.61752988047806,-296.51394422310756,-297.41035856573706,-298.30677290836655,-299.203187250996,-300.0996015936255,-300.996015936255,-301.8924302788845,-302.78884462151393,-303.68525896414343,-304.5816733067729,-305.47808764940237,-306.37450199203187,-307.27091633466136,-308.16733067729086,-309.0637450199203,-309.9601593625498,-310.8565737051793,-311.75298804780874,-312.64940239043824,-313.54581673306774,-314.44223107569724,-315.3386454183267,-316.2350597609562,-317.1314741035857,-318.0278884462151,-318.9243027888446,-319.8207171314741,-320.7171314741036,-321.61354581673305,-322.50996015936255,-323.40637450199205,-324.3027888446215,-325.199203187251,-326.0956175298805,-326.99203187251,-327.8884462151394,-328.7848605577689,-329.6812749003984,-330.57768924302786,-331.47410358565736,-332.37051792828686,-333.26693227091636,-334.1633466135458,-335.0597609561753,-335.9561752988048,-336.85258964143424,-337.74900398406373,-338.64541832669323,-339.54183266932273,-340.43824701195217,-341.33466135458167,-342.23107569721117,-343.12749003984067,-344.0239043824701,-344.9203187250996,-345.8167330677291,-346.71314741035854,-347.60956175298804,-348.50597609561754,-349.40239043824704,-350.2988047808765,-351.195219123506,-352.0916334661355,-352.9880478087649,-353.8844621513944,-354.7808764940239,-355.6772908366534,-356.57370517928285,-357.47011952191235,-358.36653386454185,-359.2629482071713,-360.1593625498008,-361.0557768924303,-361.9521912350598,-362.8486055776892,-363.7450199203187,-364.6414342629482,-365.53784860557766,-366.43426294820716,-367.33067729083666,-368.22709163346616,-369.1235059760956,-370.0199203187251,-370.9163346613546,-371.81274900398404,-372.70916334661354,-373.60557768924303,-374.50199203187253,-375.398406374502,-376.2948207171315,-377.19123505976097,-378.0876494023904,-378.9840637450199,-379.8804780876494,-380.7768924302789,-381.67330677290835,-382.56972111553785,-383.46613545816734,-384.3625498007968,-385.2589641434263,-386.1553784860558,-387.0517928286853,-387.9482071713147,-388.8446215139442,-389.7410358565737,-390.6374501992032,-391.53386454183266,-392.43027888446215,-393.32669322709165,-394.2231075697211,-395.1195219123506,-396.0159362549801,-396.9123505976096,-397.80876494023903,-398.7051792828685,-399.601593625498,-400.49800796812747,-401.39442231075697,-402.29083665338646,-403.18725099601596,-404.0836653386454,-404.9800796812749,-405.8764940239044,-406.77290836653384,-407.66932270916334,-408.56573705179284,-409.46215139442234,-410.3585657370518,-411.2549800796813,-412.1513944223108,-413.0478087649402,-413.9442231075697,-414.8406374501992,-415.7370517928287,-416.63346613545815,-417.52988047808765,-418.42629482071715,-419.3227091633466,-420.2191235059761,-421.1155378486056,-422.0119521912351,-422.9083665338645,-423.804780876494,-424.7011952191235,-425.59760956175296,-426.49402390438246,-427.39043824701196,-428.28685258964146,-429.1832669322709,-430.0796812749004,-430.9760956175299,-431.87250996015933,-432.76892430278883,-433.66533864541833,-434.56175298804783,-435.45816733067727,-436.35458167330677,-437.25099601593627,-438.14741035856576,-439.0438247011952,-439.9402390438247,-440.8366533864542,-441.73306772908364,-442.62948207171314,-443.52589641434264,-444.42231075697214,-445.3187250996016,-446.2151394422311,-447.1115537848606,-448.00796812749,-448.9043824701195,-449.800796812749,-450.6972111553785,-451.59362549800795,-452.49003984063745,-453.38645418326695,-454.2828685258964,-455.1792828685259,-456.0756972111554,-456.9721115537849,-457.8685258964143,-458.7649402390438,-459.6613545816733,-460.55776892430276,-461.45418326693226,-462.35059760956176,-463.24701195219126,-464.1434262948207,-465.0398406374502,-465.9362549800797,-466.83266932270914,-467.72908366533864,-468.62549800796813,-469.52191235059763,-470.4183266932271,-471.31474103585657,-472.21115537848607,-473.1075697211155,-474.003984063745,-474.9003984063745,-475.796812749004,-476.69322709163345,-477.58964143426294,-478.48605577689244,-479.38247011952194,-480.2788844621514,-481.1752988047809,-482.0717131474104,-482.9681274900398,-483.8645418326693,-484.7609561752988,-485.6573705179283,-486.55378486055776,-487.45019920318725,-488.34661354581675,-489.2430278884462,-490.1394422310757,-491.0358565737052,-491.9322709163347,-492.82868525896413,-493.7250996015936,-494.6215139442231,-495.51792828685257,-496.41434262948206,-497.31075697211156,-498.20717131474106,-499.1035856573705,-500.0]}

},{}],95:[function(require,module,exports){
module.exports={"expected":[0.27144176165949063,0.2712791567314054,0.27111694073294973,0.27095511203906864,0.2707936690343895,0.27063261011314743,0.27047193367911115,0.2703116381455093,0.2701517219349581,0.26999218347938886,0.2698330212199768,0.2696742336070703,0.26951581910012096,0.26935777616761386,0.26920010328699934,0.26904279894462435,0.26888586163566547,0.2687292898640616,0.2685730821424482,0.26841723699209136,0.26826175294282306,0.2681066285329765,0.26795186230932244,0.2677974528270061,0.26764339864948444,0.267489698348464,0.2673363505038395,0.2671833537036331,0.26703070654393374,0.2668784076288374,0.2667264555703882,0.266574848988519,0.26642358651099374,0.26627266677334965,0.26612208841884,0.26597185009837754,0.2658219504704784,0.26567238820120637,0.26552316196411796,0.2653742704402076,0.2652257123178537,0.26507748629276473,0.2649295910679265,0.26478202535354894,0.26463478786701417,0.26448787733282475,0.2643412924825524,0.26419503205478684,0.2640490947950859,0.2639034794559251,0.2637581847966484,0.26361320958341916,0.2634685525891711,0.26332421259356065,0.26318018838291873,0.2630364787502036,0.2628930824949537,0.2627499984232412,0.2626072253476259,0.26246476208710945,0.2623226074670898,0.2621807603193165,0.26203921948184594,0.2618979837989974,0.26175705212130895,0.2616164233054941,0.26147609621439893,0.26133606971695905,0.2611963426881576,0.2610569140089831,0.26091778256638803,0.2607789472532472,0.2606404069683172,0.26050216061619585,0.2603642071072817,0.2602265453577344,0.260089174289435,0.2599520928299471,0.2598152999124773,0.25967879447583747,0.25954257546440596,0.25940664182808976,0.2592709925222872,0.25913562650785044,0.25900054275104856,0.2588657402235309,0.2587312179022909,0.2585969747696296,0.2584630098131204,0.25832932202557335,0.258195910405,0.2580627739545786,0.25792991168261953,0.25779732260253074,0.2576650057327843,0.257532960096882,0.2574011847233224,0.2572696786455675,0.25713844090200955,0.25700747053593886,0.25687676659551106,0.25674632813371523,0.25661615420834183,0.2564862438819512,0.2563565962218422,0.2562272103000213,0.25609808519317145,0.2559692199826215,0.25584061375431616,0.2557122655987856,0.25558417461111577,0.2554563398909186,0.25532876054230275,0.2552014356738445,0.2550743643985587,0.2549475458338701,0.25482097910158497,0.25469466332786284,0.25456859764318845,0.254442781182344,0.25431721308438154,0.2541918924925956,0.25406681855449614,0.25394199042178167,0.2538174072503122,0.25369306820008325,0.2535689724351991,0.25344511912384693,0.25332150743827087,0.2531981365547465,0.25307500565355484,0.2529521139189578,0.25282946053917243,0.2527070447063465,0.25258486561653337,0.252462922469668,0.252341214469542,0.25221974082378007,0.2520985007438157,0.2519774934448675,0.25185671814591554,0.2517361740696783,0.25161586044258877,0.2514957764947721,0.25137592146002236,0.25125629457577975,0.25113689508310844,0.2510177222266739,0.2508987752547208,0.25078005341905113,0.2506615559750021,0.25054328218142463,0.25042523130066185,0.2503074025985275,0.2501897953442852,0.25007240881062676,0.24995524227365196,0.2498382950128473,0.24972156631106573,0.2496050554545062,0.2494887617326932,0.24937268443845692,0.2492568228679131,0.2491411763204431,0.24902574409867473,0.2489105255084621,0.24879551985886664,0.24868072646213765,0.2485661446336935,0.2484517736921023,0.24833761295906334,0.24822366175938826,0.2481099194209827,0.24799638527482767,0.24788305865496144,0.24776993889846138,0.2476570253454259,0.2475443173389566,0.24743181422514046,0.24731951535303248,0.24720742007463778,0.24709552774489463,0.24698383772165705,0.24687234936567762,0.24676106204059065,0.2466499751128952,0.24653908795193838,0.24642839992989873,0.24631791042176981,0.24620761880534356,0.24609752446119423,0.24598762677266223,0.24587792512583814,0.2457684189095465,0.24565910751533038,0.24554999033743533,0.24544106677279412,0.24533233622101097,0.24522379808434658,0.24511545176770225,0.24500729667860546,0.24489933222719423,0.24479155782620257,0.24468397289094537,0.2445765768393039,0.244469369091711,0.24436234907113685,0.24425551620307412,0.24414886991552398,0.24404240963898183,0.24393613480642304,0.24383004485328905,0.24372413921747343,0.24361841733930806,0.24351287866154936,0.2434075226293646,0.24330234869031847,0.24319735629435973,0.2430925448938075,0.24298791394333827,0.24288346289997267,0.2427791912230625,0.24267509837427748,0.24257118381759243,0.24246744701927475,0.24236388744787113,0.24226050457419554,0.24215729787131615,0.24205426681454315,0.2419514108814164,0.24184872955169276,0.2417462223073344,0.24164388863249625,0.2415417280135141,0.2414397399388926,0.24133792389929365,0.24123627938752398,0.241134805898524,0.24103350292935577,0.24093236997919176,0.24083140654930307,0.24073061214304803,0.2406299862658611,0.24052952842524145,0.24042923813074157,0.24032911489395659,0.2402291582285128,0.24012936765005688,0.24002974267624522,0.23993028282673265,0.23983098762316196,0.23973185658915316,0.23963288925029305,0.23953408513412425,0.23943544377013506,0.23933696468974905,0.23923864742631465,0.23914049151509487,0.23904249649325704,0.2389446618998629,0.23884698727585832,0.2387494721640633,0.23865211610916223,0.23855491865769385,0.23845787935804147,0.23836099776042327,0.23826427341688253,0.23816770588127817,0.2380712947092751,0.23797503945833465,0.23787893968770535,0.2377829949584133,0.23768720483325304,0.2375915688767783,0.23749608665529276,0.23740075773684083,0.23730558169119875,0.23721055808986546,0.23711568650605375,0.2370209665146811,0.23692639769236126,0.23683197961739505,0.23673771186976186,0.23664359403111102,0.2365496256847529,0.23645580641565067,0.23636213581041154,0.23626861345727854,0.23617523894612183,0.2360820118684306,0.23598893181730468,0.2358959983874463,0.2358032111751517,0.23571056977830354,0.23561807379636204,0.23552572283035766,0.23543351648288263,0.23534145435808318,0.23524953606165175,0.23515776120081885,0.23506612938434565,0.23497464022251602,0.23488329332712868,0.23479208831148995,0.23470102479040583,0.23461010238017457,0.23451932069857911,0.23442867936487968,0.23433817799980644,0.23424781622555185,0.2341575936657637,0.23406750994553752,0.23397756469140962,0.23388775753134972,0.23379808809475375,0.233708556012437,0.23361916091662688,0.2335299024409559,0.23344078022045472,0.2333517938915454,0.23326294309203416,0.23317422746110486,0.23308564663931197,0.23299720026857404,0.23290888799216675,0.23282070945471628,0.2327326643021929,0.23264475218190395,0.23255697274248768,0.2324693256339066,0.2323818105074408,0.23229442701568184,0.2322071748125261,0.2321200535531685,0.23203306289409614,0.23194620249308215,0.2318594720091793,0.23177287110271372,0.2316863994352789,0.23160005666972952,0.23151384247017517,0.23142775650197453,0.2313417984317292,0.2312559679272776,0.2311702646576894,0.23108468829325907,0.2309992385055004,0.23091391496714045,0.2308287173521138,0.2307436453355567,0.23065869859380148,0.2305738768043706,0.2304891796459711,0.23040460679848904,0.23032015794298363,0.2302358327616818,0.23015163093797286,0.23006755215640243,0.22998359610266753,0.22989976246361074,0.22981605092721502,0.2297324611825981,0.2296489929200074,0.2295656458308144,0.2294824196075094,0.22939931394369653,0.22931632853408818,0.22923346307449993,0.22915071726184544,0.2290680907941312,0.22898558337045136,0.22890319469098286,0.22882092445698007,0.2287387723707701,0.2286567381357475,0.2285748214563695,0.22849302203815092,0.22841133958765938,0.22832977381251027,0.228248324421362,0.22816699112391114,0.2280857736308877,0.2280046716540501,0.22792368490618067,0.22784281310108093,0.2277620559535666,0.22768141317946344,0.22760088449560198,0.22752046961981343,0.22744016827092486,0.2273599801687547,0.227279905034108,0.2271999425887723,0.2271200925555128,0.227040354658068,0.22696072862114544,0.2268812141704169,0.22680181103251454,0.2267225189350259,0.22664333760649016,0.22656426677639355,0.22648530617516485,0.2264064555341716,0.22632771458571554,0.22624908306302843,0.2261705607002678,0.226092147232513,0.2260138423957609,0.22593564592692156,0.22585755756381462,0.22577957704516477,0.22570170411059792,0.22562393850063703,0.22554627995669824,0.2254687282210868,0.22539128303699305,0.22531394414848852,0.2252367113005221,0.22515958423891597,0.2250825627103618,0.2250056464624169,0.2249288352435003,0.22485212880288905,0.2247755268907143,0.2246990292579577,0.22462263565644733,0.22454634583885422,0.22447015955868868,0.22439407657029634,0.22431809662885466,0.2242422194903692,0.22416644491167018,0.2240907726504084,0.2240152024650522,0.22393973411488347,0.22386436735999424,0.2237891019612832,0.2237139376804521,0.22363887428000223,0.22356391152323096,0.22348904917422835,0.2234142869978735,0.22333962475983132,0.22326506222654915,0.22319059916525313,0.22311623534394506,0.22304197053139893,0.22296780449715753,0.2228937370115293,0.2228197678455849,0.22274589677115395,0.2226721235608218,0.22259844798792616,0.2225248698265541,0.22245138885153848,0.22237800483845518,0.22230471756361955,0.22223152680408348,0.22215843233763208,0.22208543394278063,0.22201253139877158,0.22193972448557123,0.22186701298386677,0.2217943966750632,0.22172187534128027,0.22164944876534945,0.22157711673081096,0.22150487902191054,0.22143273542359687,0.22136068572151818,0.22128872970201957,0.22121686715213995,0.2211450978596092,0.22107342161284504,0.22100183820095046,0.2209303474137106,0.22085894904158987,0.22078764287572936,0.22071642870794372,0.22064530633071847,0.22057427553720707,0.22050333612122844,0.22043248787726372,0.22036173060045394,0.22029106408659696,0.22022048813214495,0.22015000253420147,0.220079607090519,0.2200093015994959,0.2199390858601742,0.21986895967223646,0.2197989228360034,0.21972897515243128,0.219659116423109,0.21958934645025582,0.21951966503671858,0.21945007198596905,0.2193805671021016,0.2193111501898304,0.21924182105448692,0.2191725795020176,0.21910342533898092,0.21903435837254537,0.21896537841048658,0.21889648526118508,0.21882767873362358,0.21875895863738484,0.21869032478264883,0.21862177698019072,0.21855331504137804,0.21848493877816863,0.21841664800310798,0.21834844252932706,0.21828032217053972,0.2182122867410405,0.21814433605570224,0.21807646992997365,0.2180086881798771,0.21794099062200628,0.21787337707352386,0.21780584735215916,0.21773840127620608,0.21767103866452042,0.21760375933651813,0.21753656311217265,0.21746944981201285,0.21740241925712084,0.21733547126912964,0.21726860567022108,0.21720182228312346,0.21713512093110965,0.21706850143799464,0.21700196362813343,0.21693550732641897,0.21686913235828,0.21680283854967894,0.21673662572710956,0.21667049371759523,0.2166044423486866,0.21653847144845945,0.21647258084551274,0.21640677036896663,0.21634103984846018,0.21627538911414942,0.2162098179967054,0.216144326327312,0.21607891393766407,0.21601358065996534,0.21594832632692634,0.2158831507717625,0.21581805382819233,0.2157530353304352,0.2156880951132093,0.21562323301173011,0.21555844886170808,0.21549374249934683,0.21542911376134127,0.21536456248487565,0.21530008850762147,0.21523569166773607,0.21517137180386006,0.21510712875511617,0.2150429623611067,0.21497887246191233,0.2149148588980896,0.21485092151066967,0.21478706014115603,0.21472327463152288,0.2146595648242134,0.21459593056213766,0.21453237168867123,0.21446888804765293,0.21440547948338345,0.2143421458406233,0.2142788869645912,0.21421570270096219,0.21415259289586602,0.2140895573958855,0.21402659604805432,0.21396370869985593,0.21390089519922129,0.21383815539452752,0.21377548913459604,0.213712896268691,0.2136503766465174,0.21358793011821955,0.2135255565343794,0.21346325574601493,0.2134010276045783,0.21333887196195442,0.21327678867045916,0.2132147775828378,0.21315283855226358,0.21309097143233557,0.21302917607707772,0.21296745234093664,0.21290580007878054,0.2128442191458973,0.21278270939799307,0.2127212706911905,0.21265990288202746,0.21259860582745524,0.21253737938483713,0.21247622341194686,0.21241513776696705,0.21235412230848766,0.21229317689550445,0.2122323013874177,0.21217149564403026,0.21211075952554653,0.2120500928925706,0.21198949560610497,0.21192896752754897,0.21186850851869743,0.21180811844173897,0.21174779715925482,0.21168754453421715,0.2116273604299877,0.21156724471031643,0.21150719723933994,0.21144721788158014,0.21138730650194282,0.21132746296571614,0.21126768713856944,0.21120797888655155,0.21114833807608968,0.21108876457398779,0.21102925824742547,0.2109698189639562,0.21091044659150646,0.2108511409983739,0.2107919020532263,0.2107327296251,0.21067362358339878,0.2106145837978924,0.21055561013871524,0.2104967024763649,0.21043786068170126,0.21037908462594457,0.2103203741806747,0.21026172921782954,0.2102031496097037,0.21014463522894739,0.21008618594856487,0.21002780164191356,0.20996948218270237,0.20991122744499058,0.2098530373031867,0.20979491163204705,0.20973685030667455,0.20967885320251753,0.20962092019536843,0.20956305116136256,0.20950524597697692,0.20944750451902897,0.20938982666467537,0.20933221229141077,0.20927466127706662,0.20921717349981,0.20915974883814242,0.2091023871708985,0.20904508837724492,0.20898785233667924,0.2089306789290286,0.20887356803444876,0.20881651953342273,0.2087595333067596,0.20870260923559358,0.20864574720138274,0.20858894708590778,0.20853220877127104,0.20847553213989523,0.20841891707452245,0.20836236345821282,0.20830587117434374,0.20824944010660829,0.20819307013901459,0.2081367611558844,0.20808051304185202,0.20802432568186335,0.20796819896117477,0.20791213276535184,0.20785612698026848,0.20780018149210586,0.20774429618735105,0.20768847095279633,0.2076327056755379,0.20757700024297474,0.2075213545428079,0.2074657684630391,0.20741024189196983,0.20735477471820027,0.20729936683062836,0.2072440181184486,0.2071887284711511,0.20713349777852064,0.2070783259306355,0.2070232128178665,0.20696815833087606,0.20691316236061708,0.20685822479833205,0.2068033455355519,0.20674852446409522,0.20669376147606705,0.20663905646385802,0.20658440932014338,0.20652981993788191,0.20647528821031505,0.20642081403096596,0.20636639729363843,0.206312037892416,0.20625773572166095,0.20620349067601343,0.20614930265039044,0.20609517153998497,0.2060410972402649,0.20598707964697224,0.20593311865612204,0.20587921416400165,0.20582536606716959,0.20577157426245474,0.20571783864695542,0.20566415911803843,0.20561053557333822,0.2055569679107559,0.20550345602845835,0.20544999982487738,0.20539659919870876,0.2053432540489114,0.20528996427470647,0.2052367297755763,0.20518355045126388,0.2051304262017717,0.20507735692736087,0.2050243425285504,0.20497138290611636,0.2049184779610908,0.204865627594761,0.20481283170866876,0.20476009020460934,0.20470740298463064,0.20465476995103254,0.20460219100636579,0.20454966605343147,0.20449719499527982,0.2044447777352097,0.20439241417676762,0.20434010422374688,0.2042878477801869,0.2042356447503723,0.20418349503883204,0.20413139855033874,0.20407935518990777,0.20402736486279643,0.20397542747450337,0.20392354293076737,0.203871711137567,0.2038199320011195,0.20376820542788018,0.20371653132454162,0.20366490959803274,0.20361334015551816,0.20356182290439737,0.20351035775230403,0.2034589446071051,0.2034075833769001,0.20335627397002048,0.2033050162950286,0.20325381026071723,0.20320265577610866,0.20315155275045393,0.20310050109323224,0.20304950071414993,0.20299855152314003,0.20294765343036145,0.202896806346198,0.202846010181258,0.2027952648463734,0.2027445702525989,0.20269392631121155,0.2026433329337098,0.20259279003181285,0.20254229751745984,0.20249185530280928,0.20244146330023835,0.20239112142234206,0.20234082958193256,0.20229058769203853,0.20224039566590454,0.20219025341699007,0.2021401608589692,0.20209011790572956,0.20204012447137193,0.2019901804702093,0.20194028581676648,0.20189044042577914,0.20184064421219328,0.20179089709116457,0.20174119897805756,0.20169154978844517,0.20164194943810793,0.20159239784303332,0.2015428949194151,0.20149344058365268,0.20144403475235048,0.20139467734231722,0.2013453682705654,0.2012961074543104,0.2012468948109701,0.2011977302581641,0.2011486137137131,0.20109954509563832,0.20105052432216072,0.20100155131170055,0.20095262598287658,0.2009037482545055,0.2008549180456014,0.20080613527537505,0.20075739986323327,0.20070871172877824,0.20066007079180714,0.20061147697231135,0.20056293019047572,0.20051443036667835,0.2004659774214895,0.20041757127567136,0.20036921185017734,0.2003208990661513,0.20027263284492733,0.20022441310802866,0.20017623977716748,0.20012811277424425,0.200080032021347,0.20003199744075073,0.19998400895491705,0.19993606648649334,0.19988816995831238,0.1998403192933916,0.1997925144149326,0.19974475524632063,0.19969704171112382,0.19964937373309283,0.1996017512361603,0.19955417414443996,0.19950664238222643,0.19945915587399454,0.19941171454439868,0.1993643183182724,0.19931696712062769,0.19926966087665457,0.19922239951172052,0.19917518295136985,0.19912801112132322,0.19908088394747708,0.19903380135590318,0.1989867632728479,0.1989397696247319,0.19889282033814942,0.1988459153398678,0.198799054556827,0.19875223791613908,0.19870546534508757,0.19865873677112694,0.19861205212188224,0.19856541132514846,0.19851881430889007,0.1984722610012403,0.19842575133050105,0.19837928522514187,0.19833286261379984,0.19828648342527894,0.19824014758854935,0.19819385503274736,0.1981476056871744,0.19810139948129693,0.19805523634474567,0.19800911620731523,0.19796303899896364,0.19791700464981168,0.19787101309014268,0.19782506425040178,0.19777915806119545,0.19773329445329124,0.197687473357617,0.1976416947052606,0.19759595842746933,0.19755026445564955,0.19750461272136602,0.19745900315634163,0.19741343569245684,0.19736791026174907,0.19732242679641254,0.1972769852287975,0.1972315854914099,0.19718622751691095,0.19714091123811658,0.197095636587997,0.1970504034996763,0.19700521190643192,0.19696006174169417,0.19691495293904593,0.19686988543222195,0.19682485915510867,0.19677987404174355,0.19673493002631467,0.1966900270431605,0.19664516502676907,0.1966003439117778,0.19655556363297308,0.1965108241252896,0.19646612532381014,0.19642146716376496,0.1963768495805316,0.19633227250963406,0.1962877358867428,0.19624323964767404,0.19619878372838936,0.19615436806499537,0.19610999259374318,0.1960656572510281,0.19602136197338896,0.19597710669750806,0.1959328913602105,0.1958887158984637,0.19584458024937726,0.19580048435020225,0.19575642813833108,0.19571241155129676,0.1956684345267728,0.19562449700257256,0.19558059891664906,0.19553674020709438,0.19549292081213934,0.19544914067015312,0.19540539971964277,0.195361697899253,0.1953180351477655,0.1952744114040987,0.19523082660730748,0.19518728069658262,0.19514377361125032,0.1951003052907721,0.19505687567474406,0.19501348470289687,0.19497013231509502,0.19492681845133672,0.1948835430517533,0.19484030605660885,0.19479710740630016,0.1947539470413558,0.19471082490243616,0.1946677409303329,0.1946246950659686,0.19458168725039646,0.19453871742479972,0.19449578553049154,0.19445289150891445,0.19441003530164006,0.1943672168503686,0.19432443609692873,0.19428169298327697,0.1942389874514975,0.19419631944380167,0.19415368890252768,0.19411109577014027,0.19406853998923032,0.19402602150251444,0.1939835402528347,0.19394109618315825,0.19389868923657685,0.1938563193563067,0.193813986485688,0.19377169056818458,0.19372943154738353,0.19368720936699502,0.19364502397085162,0.19360287530290832,0.19356076330724192,0.19351868792805085,0.1934766491096547,0.19343464679649403,0.19339268093312978,0.19335075146424327,0.19330885833463554,0.1932670014892272,0.1932251808730581,0.19318339643128685,0.1931416481091906,0.19309993585216473,0.1930582596057224,0.19301661931549438,0.19297501492722854,0.19293344638678966,0.19289191364015906,0.19285041663343433,0.19280895531282877,0.1927675296246714,0.19272613951540643,0.192684784931593,0.19264346581990482,0.1926021821271299,0.19256093380017025,0.19251972078604143,0.1924785430318724,0.1924374004849051,0.19239629309249417,0.19235522080210668,0.1923141835613217,0.19227318131783017,0.19223221401943436,0.19219128161404778,0.1921503840496947,0.19210952127451,0.19206869323673872,0.19202789988473584,0.19198714116696605,0.1919464170320032,0.1919057274285303,0.19186507230533892,0.1918244516113292,0.19178386529550928,0.19174331330699523,0.19170279559501055,0.19166231210888598,0.1916218627980593,0.19158144761207477,0.19154106650058306,0.19150071941334101,0.1914604063002111,0.1914201271111613,0.19137988179626483,0.19133967030569973,0.1912994925897487,0.19125934859879884,0.19121923828334117,0.19117916159397058,0.19113911848138537,0.19109910889638707,0.1910591327898801,0.19101919011287158,0.19097928081647095,0.19093940485188973,0.1908995621704412,0.19085975272354033,0.19081997646270313,0.19078023333954672,0.19074052330578892,0.19070084631324793,0.19066120231384218,0.19062159125958997,0.1905820131026092,0.1905424677951171,0.19050295528943006,0.19046347553796325,0.1904240284932304,0.19038461410784352,0.19034523233451262,0.19030588312604554,0.19026656643534756,0.19022728221542123,0.19018803041936602,0.1901488110003782,0.19010962391175043,0.19007046910687156,0.19003134653922643,0.18999225616239554,0.18995319793005488,0.18991417179597544,0.18987517771402332,0.1898362156381592,0.18979728552243816,0.18975838732100944,0.18971952098811634,0.18968068647809555,0.1896418837453774,0.1896031127444853,0.18956437343003557,0.18952566575673724,0.18948698967939168,0.18944834515289252,0.18940973213222537,0.18937115057246737,0.18933260042878722,0.18929408165644482,0.18925559421079105,0.18921713804726745,0.18917871312140613,0.18914031938882936,0.18910195680524947,0.1890636253264686,0.1890253249083783,0.1889870555069596,0.18894881707828243,0.18891060957850567,0.18887243296387668,0.18883428719073128,0.18879617221549344,0.18875808799467492,0.1887200344848753,0.18868201164278142,0.18864401942516748,0.18860605778889467,0.1885681266909108,0.18853022608825037,0.1884923559380341,0.18845451619746875,0.18841670682384706,0.18837892777454732,0.18834117900703315,0.18830346047885357,0.1882657721476424,0.18822811397111822,0.18819048590708415,0.18815288791342766,0.18811531994812028,0.18807778196921732,0.18804027393485784,0.18800279580326432,0.18796534753274247,0.1879279290816809,0.18789054040855113,0.1878531814719072,0.18781585223038552,0.18777855264270463,0.187741282667665,0.1877040422641488,0.1876668313911198,0.18762965000762308,0.18759249807278466,0.18755537554581153,0.18751828238599147,0.18748121855269254,0.1874441840053632,0.18740717870353188,0.18737020260680692,0.18733325567487627,0.18729633786750735,0.18725944914454684,0.1872225894659204,0.18718575879163254,0.1871489570817664,0.1871121842964836,0.18707544039602397,0.18703872534070534,0.18700203909092336,0.18696538160715143,0.18692875284994023,0.1868921527799178,0.1868555813577892,0.18681903854433626,0.18678252430041756,0.18674603858696814,0.18670958136499916,0.18667315259559805,0.18663675223992798,0.18660038025922787,0.18656403661481208,0.18652772126807035,0.18649143418046746,0.18645517531354316,0.18641894462891187,0.18638274208826267,0.18634656765335886,0.186310421286038,0.18627430294821162,0.18623821260186502,0.1862021502090571,0.18616611573192024,0.18613010913266,0.18609413037355507,0.18605817941695696,0.1860222562252898,0.1859863607610504,0.18595049298680774,0.18591465286520303,0.1858788403589494,0.1858430554308318,0.18580729804370674,0.18577156816050222,0.18573586574421744,0.18570019075792263,0.185664543164759,0.18562892292793842,0.18559333001074332,0.1855577643765265,0.18552222598871088,0.1854867148107895,0.18545123080632514,0.1854157739389503,0.18538034417236698,0.18534494147034647,0.18530956579672922,0.1852742171154246,0.1852388953904109,0.18520360058573498,0.1851683326655122,0.18513309159392605,0.18509787733522842,0.18506268985373892,0.18502752911384515,0.18499239508000212,0.18495728771673248,0.18492220698862608,0.18488715286033994,0.18485212529659792,0.18481712426219085,0.18478214972197607,0.18474720164087743,0.18471227998388504,0.18467738471605522,0.1846425158025102,0.1846076732084381,0.18457285689909259,0.18453806683979293,0.1845033029959236,0.18446856533293446,0.18443385381634012,0.18439916841172024,0.1843645090847191,0.18432987580104548,0.18429526852647266,0.18426068722683805,0.18422613186804312,0.1841916024160533,0.18415709883689776,0.18412262109666924,0.18408816916152396,0.18405374299768143,0.1840193425714243,0.18398496784909815,0.18395061879711147,0.18391629538193535,0.1838819975701035,0.18384772532821192,0.18381347862291886,0.18377925742094467,0.18374506168907162,0.1837108913941437,0.18367674650306653,0.1836426269828073,0.1836085328003945,0.18357446392291765,0.18354042031752751,0.18350640195143553,0.18347240879191412,0.1834384408062961,0.1834044979619748,0.18337058022640382,0.18333668756709698,0.1833028199516281,0.18326897734763076,0.18323515972279839,0.183201367044884,0.18316759928169993,0.18313385640111787,0.18310013837106875,0.18306644515954237,0.1830327767345875,0.18299913306431162,0.1829655141168807,0.18293191986051932,0.1828983502635103,0.18286480529419466,0.18283128492097134,0.18279778911229733,0.18276431783668723,0.1827308710627134,0.1826974487590056,0.18266405089425092,0.18263067743719377,0.18259732835663547,0.18256400362143443,0.18253070320050577,0.1824974270628213,0.18246417517740943,0.18243094751335484,0.1823977440397986,0.18236456472593782,0.18233140954102575,0.18229827845437133,0.18226517143533932,0.18223208845335015,0.18219902947787966,0.18216599447845902,0.18213298342467463,0.182099996286168,0.18206703303263552,0.18203409363382853,0.18200117805955293,0.1819682862796693,0.18193541826409257,0.18190257398279208,0.18186975340579123,0.18183695650316756,0.18180418324505257,0.18177143360163145,0.1817387075431432,0.18170600503988024,0.18167332606218858,0.18164067058046734,0.181608038565169,0.18157542998679896,0.18154284481591562,0.1815102830231302,0.18147774457910648,0.181445229454561,0.18141273762026258,0.18138026904703242,0.18134782370574387,0.18131540156732245,0.18128300260274555,0.1812506267830424,0.181218274079294,0.1811859444626328,0.1811536379042429,0.1811213543753597,0.18108909384726973,0.18105685629131074,0.18102464167887147,0.1809924499813915,0.18096028117036123,0.18092813521732162,0.18089601209386422,0.18086391177163097,0.18083183422231414,0.18079977941765615,0.18076774732944942,0.18073573792953646,0.18070375118980947,0.18067178708221052,0.18063984557873114,0.18060792665141243,0.1805760302723448,0.18054415641366806,0.18051230504757101,0.18048047614629156,0.1804486696821166,0.18041688562738176,0.18038512395447134,0.18035338463581835,0.18032166764390414,0.18028997295125862,0.18025830053045971,0.18022665035413366,0.1801950223949547,0.18016341662564503,0.18013183301897456,0.18010027154776104,0.18006873218486974,0.18003721490321348,0.1800057196757524,0.17997424647549395,0.17994279527549284,0.17991136604885063,0.17987995876871601,0.17984857340828453,0.17981720994079833,0.17978586833954638,0.17975454857786402,0.17972325062913314,0.17969197446678184,0.17966072006428452,0.17962948739516169,0.1795982764329798,0.17956708715135125,0.1795359195239343,0.17950477352443284,0.17947364912659633,0.17944254630421974,0.17941146503114347,0.1793804052812532,0.17934936702847976,0.17931835024679912,0.17928735491023212,0.17925638099284463,0.1792254284687472,0.1791944973120951,0.17916358749708816,0.1791326989979707,0.17910183178903144,0.17907098584460335,0.1790401611390636,0.17900935764683343,0.17897857534237807,0.17894781420020667,0.17891707419487213,0.178886355300971,0.17885565749314355,0.17882498074607345,0.17879432503448775,0.17876369033315687,0.17873307661689442,0.1787024838605571,0.17867191203904462,0.1786413611272996,0.17861083110030757,0.17858032193309673,0.17854983360073784,0.1785193660783443,0.17848891934107186,0.1784584933641188,0.17842808812272545,0.17839770359217444,0.1783673397477904,0.17833699656493993,0.17830667401903155,0.17827637208551558,0.17824609073988404,0.17821582995767055,0.17818558971445014,0.17815536998583945,0.17812517074749631,0.17809499197511988,0.17806483364445042,0.17803469573126926,0.1780045782113987,0.17797448106070193,0.17794440425508296,0.17791434777048637,0.1778843115828975,0.17785429566834218,0.17782430000288663,0.1777943245626374,0.17776436932374137,0.17773443426238555,0.177704519354797,0.17767462457724284,0.17764474990603005,0.17761489531750538,0.17758506078805542,0.17755524629410635,0.1775254518121239,0.17749567731861327,0.17746592279011905,0.17743618820322513,0.17740647353455466,0.17737677876076985,0.17734710385857197,0.1773174488047013,0.1772878135759369,0.1772581981490967,0.1772286025010373,0.177199026608654,0.17716947044888046,0.177139933998689,0.17711041723509013,0.1770809201351328,0.17705144267590409,0.1770219848345292,0.17699254658817132,0.17696312791403176,0.17693372878934957,0.1769043491914016,0.1768749890975025,0.17684564848500442,0.1768163273312972,0.17678702561380805,0.17675774331000157,0.17672848039737976,0.17669923685348174,0.17667001265588386,0.17664080778219948,0.17661162221007898,0.17658245591720964,0.1765533088813156,0.17652418108015766,0.1764950724915334,0.17646598309327693,0.1764369128632589,0.17640786177938636,0.1763788298196028,0.17634981696188792,0.17632082318425762,0.17629184846476395,0.176262892781495,0.1762339561125749,0.17620503843616356,0.1761761397304568,0.1761472599736861,0.17611839914411867,0.17608955722005734,0.17606073417984036,0.1760319300018415,0.17600314466446984,0.17597437814616976,0.17594563042542094,0.17591690148073805,0.1758881912906709,0.1758594998338043,0.175830827088758,0.17580217303418655,0.17577353764877923,0.17574492091126012,0.1757163228003878,0.17568774329495554,0.1756591823737909,0.17563064001575604,0.17560211619974733,0.1755736109046954,0.17554512410956513,0.17551665579335543,0.17548820593509937,0.1754597745138638,0.1754313615087497,0.17540296689889162,0.17537459066345815,0.17534623278165132,0.1753178932327069,0.1752895719958942,0.17526126905051592,0.17523298437590826,0.1752047179514407,0.175176469756516,0.17514823977057012,0.17512002797307208,0.17509183434352404,0.1750636588614611,0.1750355015064513,0.17500736225809552,0.17497924109602736,0.17495113799991321,0.1749230529494521,0.17489498592437558,0.17486693690444768,0.17483890586946502,0.1748108927992564,0.1747828976736831,0.1747549204726385,0.17472696117604816,0.1746990197638698,0.17467109621609325,0.17464319051274008,0.17461530263386396,0.17458743255955037,0.17455958026991641,0.1745317457451111,0.17450392896531497,0.1744761299107401,0.1744483485616302,0.17442058489826026,0.17439283890093685,0.17436511054999762,0.17433739982581165,0.17430970670877916,0.1742820311793314,0.17425437321793077,0.17422673280507067,0.17419910992127535,0.17417150454709998,0.17414391666313053,0.17411634624998368,0.17408879328830676,0.1740612577587778,0.17403373964210525,0.17400623891902817,0.173978755570316,0.17395128957676845,0.17392384091921567,0.17389640957851796,0.1738689955355658,0.17384159877127978,0.1738142192666106,0.17378685700253882,0.17375951196007508,0.17373218412025979,0.17370487346416316,0.17367757997288522,0.17365030362755554,0.17362304440933352,0.1735958022994079,0.1735685772789971,0.17354136932934888,0.1735141784317404,0.1734870045674782,0.17345984771789796,0.17343270786436468,0.17340558498827247,0.17337847907104448,0.17335139009413292,0.173324318039019,0.17329726288721273,0.17327022462025313,0.17324320321970785,0.17321619866717336,0.1731892109442748,0.17316224003266592,0.17313528591402896,0.17310834857007476,0.17308142798254256,0.17305452413319997,0.1730276370038429,0.17300076657629568,0.17297391283241062,0.17294707575406837,0.17292025532317765,0.17289345152167512,0.17286666433152556,0.17283989373472158,0.17281313971328371,0.17278640224926028,0.1727596813247274,0.1727329769217889,0.1727062890225762,0.1726796176092484,0.17265296266399205,0.17262632416902124,0.17259970210657744,0.1725730964589296,0.17254650720837383,0.17251993433723367,0.17249337782785978,0.17246683766262993,0.17244031382394912,0.1724138062942493,0.1723873150559894,0.17236084009165537,0.17233438138376003,0.17230793891484297,0.1722815126674706,0.17225510262423605,0.17222870876775911,0.17220233108068625,0.1721759695456904,0.17214962414547105,0.1721232948627542,0.17209698168029225,0.1720706845808638,0.172044403547274,0.17201813856235404,0.17199188960896145,0.17196565666997982,0.17193943972831885,0.17191323876691433,0.171887053768728,0.17186088471674754,0.17183473159398652,0.17180859438348436,0.1717824730683063,0.17175636763154323,0.17173027805631175,0.1717042043257542,0.17167814642303833,0.17165210433135755,0.17162607803393076,0.17160006751400217,0.1715740727548415,0.1715480937397437,0.1715221304520291,0.1714961828750432,0.1714702509921567,0.17144433478676546,0.17141843424229036,0.17139254934217735,0.17136668006989741,0.17134082640894638,0.17131498834284503,0.17128916585513895,0.17126335892939862,0.17123756754921904,0.17121179169822015,0.17118603136004637,0.1711602865183668,0.171134557156875,0.1711088432592892,0.1710831448093519,0.17105746179083012,0.1710317941875151,0.17100614198322264,0.17098050516179258,0.17095488370708906,0.17092927760300036,0.1709036868334389,0.17087811138234124,0.1708525512336678,0.17082700637140316,0.1708014767795557,0.1707759624421578,0.17075046334326563,0.17072497946695914,0.170699510797342,0.17067405731854168,0.17064861901470926,0.1706231958700194,0.17059778786867033,0.1705723949948839,0.1705470172329053,0.1705216545670032,0.1704963069814697,0.17047097446062018,0.17044565698879333,0.1704203545503511,0.1703950671296786,0.1703697947111842,0.17034453727929932,0.1703192948184784,0.170294067313199,0.17026885474796158,0.17024365710728956,0.17021847437572937,0.1701933065378501,0.17016815357824377,0.17014301548152513,0.17011789223233162,0.1700927838153234,0.1700676902151832,0.17004261141661645,0.17001754740435096,0.1699924981631372,0.16996746367774798,0.16994244393297864,0.16991743891364675,0.1698924486045923,0.1698674729906776,0.1698425120567871,0.16981756578782753,0.16979263416872778,0.16976771718443878,0.1697428148199336,0.16971792706020739,0.16969305389027717,0.16966819529518196,0.16964335125998273,0.16961852176976228,0.1695937068096252,0.16956890636469796,0.16954412042012865,0.1695193489610871,0.16949459197276492,0.16946984944037513,0.16944512134915246,0.16942040768435315,0.16939570843125493,0.169371023575157,0.16934635310137985,0.1693216969952656,0.1692970552421775,0.1692724278275001,0.16924781473663927,0.16922321595502204,0.1691986314680967,0.16917406126133253,0.16914950532022002,0.16912496363027066,0.169100436177017,0.16907592294601248,0.16905142392283154,0.16902693909306946,0.16900246844234246,0.16897801195628748,0.16895356962056227,0.16892914142084536,0.16890472734283596,0.1688803273722538,0.1688559414948395,0.16883156969635407,0.16880721196257903,0.16878286827931654,0.16875853863238915,0.16873422300763988,0.1687099213909321,0.16868563376814952,0.16866136012519617,0.16863710044799643,0.16861285472249485,0.16858862293465615,0.1685644050704653,0.16854020111592724,0.16851601105706723,0.16849183487993039,0.16846767257058193,0.16844352411510696,0.16841938949961066,0.16839526871021798,0.1683711617330738,0.1683470685543428,0.16832298916020952,0.16829892353687811,0.1682748716705726,0.16825083354753656,0.1682268091540333,0.16820279847634564,0.16817880150077605,0.16815481821364658,0.16813084860129862,0.16810689265009315,0.16808295034641055,0.16805902167665054,0.16803510662723223,0.16801120518459406,0.16798731733519373,0.1679634430655082,0.1679395823620336,0.1679157352112853,0.1678919015997978,0.16786808151412463,0.1678442749408385,0.16782048186653103,0.16779670227781296,0.16777293616131392,0.1677491835036825,0.16772544429158612,0.16770171851171123,0.16767800615076286,0.167654307195465,0.1676306216325604,0.16760694944881044,0.16758329063099528,0.16755964516591362,0.1675360130403829,0.16751239424123904,0.1674887887553366,0.16746519656954859,0.16744161767076657,0.16741805204590046,0.16739449968187867,0.16737096056564796,0.1673474346841734,0.16732392202443847,0.16730042257344485,0.16727693631821253,0.16725346324577964,0.16723000334320254,0.16720655659755573,0.16718312299593183,0.1671597025254415,0.16713629517321352,0.16711290092639464,0.1670895197721496,0.16706615169766106,0.1670427966901297,0.167019454736774,0.1669961258248302,0.16697280994155264,0.16694950707421313,0.1669262172101015,0.1669029403365251,0.16687967644080912,0.1668564255102963,0.16683318753234708,0.1668099624943395,0.16678675038366908,0.16676355118774894,0.1667403648940097,0.16671719148989947,0.1666940309628837,0.16667088330044538,0.16664774849008476,0.16662462651931947,0.1666015173756845,0.16657842104673204,0.16655533752003157,0.16653226678316982,0.16650920882375064,0.16648616362939508,0.16646313118774136,0.1664401114864447,0.16641710451317737,0.1663941102556288,0.16637112870150536,0.16634815983853035,0.16632520365444403,0.16630226013700367,0.16627932927398326,0.16625641105317374,0.16623350546238286,0.16621061248943514,0.16618773212217186,0.1661648643484511,0.16614200915614755,0.16611916653315256,0.16609633646737423,0.16607351894673722,0.1660507139591827,0.16602792149266846,0.1660051415351688,0.1659823740746746,0.165959619099193,0.16593687659674777,0.16591414655537898,0.1658914289631431,0.165868723808113,0.16584603107837778,0.16582335076204285,0.16580068284722996,0.165778027322077,0.16575538417473806,0.16573275339338348,0.16571013496619968,0.1656875288813892,0.16566493512717073,0.16564235369177896,0.16561978456346457,0.16559722773049435,0.16557468318115098,0.16555215090373313,0.16552963088655537,0.16550712311794816,0.1654846275862578,0.16546214427984646,0.16543967318709213,0.1654172142963885,0.16539476759614508,0.16537233307478708,0.1653499107207554,0.16532750052250658,0.16530510246851288,0.1652827165472621,0.1652603427472576,0.16523798105701837,0.1652156314650789,0.16519329395998916,0.16517096853031465,0.16514865516463628,0.16512635385155033,0.16510406457966856,0.16508178733761802,0.1650595221140412,0.16503726889759585,0.1650150276769549,0.1649927984408067,0.16497058117785476,0.1649483758768178,0.16492618252642974,0.16490400111543957,0.16488183163261153,0.1648596740667249,0.164837528406574,0.16481539464096823,0.16479327275873198,0.16477116274870474,0.1647490645997408,0.16472697830070956,0.16470490384049521,0.1646828412079969,0.16466079039212855,0.1646387513818191,0.1646167241660121,0.16459470873366602,0.16457270507375407,0.16455071317526415,0.16452873302719886,0.16450676461857555,0.16448480793842618,0.16446286297579737,0.16444092971975036,0.1644190081593609,0.16439709828371937,0.16437520008193066,0.16435331354311414,0.16433143865640373,0.16430957541094773,0.16428772379590895,0.1642658838004645,0.16424405541380593,0.16422223862513924,0.1642004334236846,0.16417863979867656,0.16415685773936398,0.16413508723500994,0.16411332827489175,0.16409158084830097,0.1640698449445433,0.16404812055293863,0.16402640766282095,0.16400470626353844,0.16398301634445325,0.16396133789494174,0.16393967090439412,0.16391801536221481,0.16389637125782205,0.16387473858064822,0.1638531173201395,0.163831507465756,0.16380990900697184,0.1637883219332749,0.16376674623416693,0.16374518189916357,0.16372362891779416,0.16370208727960187,0.16368055697414363,0.16365903799099007,0.16363753031972555,0.16361603394994811,0.16359454887126945,0.1635730750733149,0.16355161254572337,0.1635301612781474,0.16350872126025315,0.1634872924817202,0.1634658749322417,0.1634444686015244,0.16342307347928833,0.1634016895552671,0.16338031681920773,0.1633589552608707,0.16333760487002968,0.16331626563647197,0.163294937549998,0.16327362060042158,0.1632523147775698,0.16323102007128307,0.16320973647141498,0.16318846396783243,0.16316720255041542,0.1631459522090572,0.16312471293366412,0.16310348471415576,0.16308226754046473,0.16306106140253673,0.16303986629033057,0.16301868219381813,0.1629975091029842,0.1629763470078267,0.16295519589835647,0.16293405576459732,0.162912926596586,0.16289180838437214,0.16287070111801832,0.16284960478759997,0.16282851938320536,0.16280744489493557,0.16278638131290452,0.16276532862723894,0.1627442868280783,0.1627232559055747,0.16270223584989318,0.16268122665121135,0.16266022829971943,0.16263924078562048,0.16261826409913,0.16259729823047625,0.16257634316990005,0.16255539890765475,0.1625344654340063,0.16251354273923307,0.16249263081362617,0.16247172964748896,0.16245083923113737,0.16242995955489978,0.16240909060911704,0.1623882323841423,0.1623673848703411,0.16234654805809148,0.16232572193778372,0.16230490649982038,0.16228410173461644,0.16226330763259905,0.16224252418420768,0.16222175137989406,0.16220098921012213,0.16218023766536793,0.16215949673611987,0.16213876641287836,0.16211804668615595,0.16209733754647745,0.16207663898437966,0.16205595099041145,0.1620352735551338,0.16201460666911968,0.16199395032295416,0.1619733045072342,0.16195266921256884,0.16193204442957904,0.16191143014889764,0.1618908263611695,0.16187023305705134,0.16184965022721173,0.16182907786233114,0.16180851595310186,0.161787964490228,0.16176742346442555,0.1617468928664221,0.16172637268695722,0.16170586291678207,0.1616853635466596,0.16166487456736447,0.161644395969683,0.16162392774441317,0.1616034698823646,0.16158302237435862,0.16156258521122807,0.16154215838381747,0.16152174188298282,0.16150133569959169,0.16148093982452327,0.16146055424866812,0.1614401789629285,0.16141981395821792,0.16139945922546145,0.1613791147555957,0.1613587805395685,0.16133845656833923,0.1613181428328786,0.16129783932416866,0.16127754603320288,0.161257262950986,0.16123699006853404,0.16121672737687442,0.16119647486704572,0.1611762325300978,0.16115600035709182,0.1611357783391001,0.16111556646720612,0.1610953647325046,0.16107517312610145,0.16105499163911366,0.16103482026266935,0.1610146589879078,0.16099450780597932,0.1609743667080453,0.1609542356852782,0.16093411472886154,0.16091400382998983,0.16089390297986858,0.16087381216971428,0.16085373139075437,0.16083366063422724,0.16081359989138228,0.16079354915347968,0.16077350841179058,0.160753477657597,0.16073345688219182,0.16071344607687876,0.1606934452329723,0.16067345434179778,0.16065347339469138,0.16063350238299992,0.1606135412980811,0.16059359013130328,0.16057364887404557,0.16055371751769773,0.1605337960536603,0.1605138844733444,0.16049398276817184,0.16047409092957504,0.16045420894899703,0.1604343368178915,0.16041447452772262,0.16039462206996521,0.16037477943610462,0.16035494661763666,0.16033512360606775,0.16031531039291477,0.16029550696970501,0.16027571332797635,0.16025592945927705,0.16023615535516575,0.16021639100721158,0.16019663640699403,0.16017689154610296,0.16015715641613862,0.16013743100871156,0.16011771531544275,0.16009800932796342,0.16007831303791498,0.16005862643694932,0.16003894951672848,0.16001928226892478,0.15999962468522072,0.15997997675730907,0.15996033847689278,0.15994070983568498,0.15992109082540898,0.1599014814377982,0.15988188166459621,0.15986229149755674,0.15984271092844352,0.1598231399490305,0.15980357855110158,0.15978402672645078,0.1597644844668821,0.15974495176420964,0.1597254286102574,0.15970591499685952,0.15968641091585992,0.15966691635911262,0.15964743131848158,0.15962795578584058,0.1596084897530734,0.15958903321207368,0.15956958615474495,0.1595501485730006,0.15953072045876385,0.15951130180396778,0.15949189260055527,0.15947249284047899,0.1594531025157014,0.15943372161819477,0.15941435013994107,0.15939498807293204,0.15937563540916908,0.1593562921406634,0.15933695825943586,0.15931763375751698,0.1592983186269469,0.15927901285977553,0.15925971644806228,0.15924042938387625,0.15922115165929615,0.15920188326641024,0.15918262419731638,0.1591633744441219,0.15914413399894384,0.1591249028539086,0.15910568100115216,0.15908646843282,0.15906726514106712,0.15904807111805788,0.15902888635596618,0.15900971084697532,0.15899054458327805,0.15897138755707646,0.15895223976058215,0.15893310118601597,0.15891397182560824,0.15889485167159853,0.1588757407162358,0.15885663895177837,0.15883754637049374,0.15881846296465887,0.15879938872655983,0.15878032364849204,0.15876126772276017,0.15874222094167809,0.15872318329756888,0.15870415478276487,0.15868513538960755,0.1586661251104476,0.1586471239376448,0.15862813186356817,0.1586091488805958,0.1585901749811149,0.15857121015752185,0.158552254402222,0.15853330770762988,0.15851437006616903,0.15849544147027206,0.15847652191238062,0.15845761138494535,0.15843870988042588,0.1584198173912909,0.15840093391001803,0.15838205942909384,0.15836319394101386,0.1583443374382826,0.15832548991341347,0.15830665135892874,0.15828782176735962,0.15826900113124617,0.1582501894431374,0.15823138669559103,0.15821259288117376,0.15819380799246105,0.15817503202203712,0.15815626496249513,0.15813750680643687,0.158118757546473,0.15810001717522293,0.15808128568531477,0.1580625630693854,0.1580438493200804,0.15802514443005405,0.1580064483919693,0.1579877611984979,0.15796908284232006,0.1579504133161248,0.15793175261260975,0.15791310072448111,0.15789445764445373,0.15787582336525108,0.15785719787960514,0.1578385811802565,0.15781997325995437,0.1578013741114564,0.15778278372752885,0.1577642021009465,0.15774562922449253,0.15772706509095874,0.15770850969314537,0.15768996302386112,0.15767142507592308,0.1576528958421569,0.1576343753153966,0.15761586348848458,0.15759736035427171,0.1575788659056172,0.15756038013538864,0.15754190303646207,0.15752343460172175,0.15750497482406034,0.15748652369637883,0.15746808121158654,0.15744964736260106,0.15743122214234828,0.15741280554376236,0.1573943975597857,0.15737599818336903,0.1573576074074712,0.15733922522505941,0.157320851629109,0.15730248661260346,0.1572841301685346,0.15726578228990232,0.15724744296971468,0.15722911220098792,0.1572107899767464,0.15719247629002264,0.1571741711338572,0.15715587450129884,0.15713758638540434,0.15711930677923855,0.15710103567587444,0.157082773068393,0.15706451894988324,0.15704627331344223,0.15702803615217506,0.1570098074591948,0.15699158722762252,0.15697337545058726,0.15695517212122606,0.15693697723268393,0.15691879077811371,0.15690061275067632,0.15688244314354052,0.15686428194988294,0.15684612916288823,0.1568279847757488,0.156809848781665,0.15679172117384502,0.15677360194550488,0.1567554910898685,0.1567373886001676,0.1567192944696416,0.15670120869153792,0.15668313125911162,0.1566650621656256,0.15664700140435053,0.1566289489685648,0.15661090485155457,0.15659286904661374,0.15657484154704387,0.15655682234615434,0.1565388114372621,0.15652080881369188,0.15650281446877604,0.15648482839585462,0.1564668505882753,0.15644888103939344,0.15643091974257195,0.15641296669118138,0.15639502187859997,0.15637708529821345,0.1563591569434152,0.15634123680760614,0.15632332488419476,0.15630542116659707,0.15628752564823667,0.15626963832254462,0.1562517591829596,0.1562338882229277,0.15621602543590252,0.15619817081534518,0.15618032435472423,0.15616248604751568,0.15614465588720305,0.15612683386727724,0.15610901998123658,0.15609121422258682,0.15607341658484114,0.1560556270615201,0.1560378456461516,0.156020072332271,0.15600230711342092,0.15598454998315142,0.15596680093501986,0.15594905996259087,0.15593132705943655,0.15591360221913617,0.1558958854352763,0.15587817670145088,0.15586047601126107,0.1558427833583153,0.15582509873622927,0.15580742213862586,0.15578975355913527,0.15577209299139488,0.1557544404290493,0.15573679586575026,0.15571915929515676,0.15570153071093498,0.15568391010675825,0.155666297476307,0.15564869281326893,0.1556310961113388,0.15561350736421845,0.15559592656561688,0.15557835370925027,0.15556078878884178,0.15554323179812174,0.15552568273082745,0.15550814158070342,0.15549060834150105,0.15547308300697896,0.15545556557090262,0.15543805602704464,0.1554205543691846,0.15540306059110912,0.15538557468661177,0.1553680966494931,0.15535062647356065,0.15533316415262896,0.1553157096805194,0.1552982630510604,0.15528082425808729,0.15526339329544228,0.15524597015697453,0.15522855483654008,0.15521114732800187,0.15519374762522972,0.1551763557221003,0.15515897161249723,0.1551415952903108,0.1551242267494383,0.15510686598378381,0.1550895129872582,0.15507216775377916,0.15505483027727118,0.15503750055166557,0.15502017857090042,0.1550028643289205,0.15498555781967743,0.15496825903712957,0.15495096797524205,0.15493368462798665,0.1549164089893419,0.15489914105329308,0.15488188081383214,0.15486462826495775,0.15484738340067522,0.15483014621499655,0.15481291670194045,0.1547956948555322,0.1547784806698038,0.15476127413879381,0.1547440752565475,0.1547268840171167,0.15470970041455984,0.154692524442942,0.15467535609633476,0.1546581953688164,0.15464104225447162,0.1546238967473918,0.15460675884167482,0.15458962853142508,0.1545725058107536,0.1545553906737778,0.15453828311462164,0.15452118312741567,0.15450409070629684,0.15448700584540861,0.15446992853890093,0.1544528587809302,0.15443579656565926,0.15441874188725746,0.15440169473990048,0.15438465511777053,0.15436762301505616,0.1543505984259524,0.15433358134466063,0.15431657176538863,0.1542995696823506,0.15428257508976703,0.15426558798186488,0.15424860835287738,0.1542316361970441,0.15421467150861104,0.15419771428183043,0.15418076451096088,0.15416382219026725,0.15414688731402076,0.15412995987649888,0.15411303987198544,0.15409612729477035,0.15407922213915004,0.15406232439942696,0.15404543406991,0.15402855114491418,0.15401167561876078,0.15399480748577726,0.15397794674029733,0.15396109337666092,0.1539442473892141,0.1539274087723092,0.1539105775203046,0.15389375362756497,0.1538769370884611,0.15386012789736986,0.1538433260486744,0.1538265315367639,0.15380974435603365,0.15379296450088512,0.15377619196572584,0.15375942674496948,0.15374266883303572,0.15372591822435044,0.1537091749133455,0.15369243889445883,0.1536757101621344,0.15365898871082234,0.15364227453497864,0.15362556762906548,0.15360886798755094,0.1535921756049092,0.15357549047562039,0.15355881259417062,0.15354214195505206,0.15352547855276277,0.15350882238180688,0.15349217343669438,0.15347553171194125,0.15345889720206946,0.1534422699016068,0.15342564980508713,0.15340903690705013,0.15339243120204143,0.15337583268461252,0.15335924134932089,0.15334265719072976,0.15332608020340835,0.1533095103819317,0.1532929477208807,0.15327639221484216,0.15325984385840866,0.15324330264617864,0.15322676857275636,0.1532102416327519,0.1531937218207812,0.15317720913146593,0.15316070355943362,0.15314420509931753,0.15312771374575676,0.15311122949339612,0.1530947523368862,0.15307828227088338,0.15306181929004975,0.15304536338905317,0.15302891456256718,0.1530124728052711,0.15299603811184995,0.15297961047699443,0.15296318989540095,0.15294677636177162,0.1529303698708142,0.15291397041724222,0.15289757799577477,0.15288119260113667,0.15286481422805834,0.15284844287127583,0.15283207852553093,0.15281572118557096,0.15279937084614886,0.15278302750202327,0.15276669114795835,0.15275036177872386,0.1527340393890952,0.1527177239738533,0.15270141552778474,0.15268511404568155,0.15266881952234138,0.15265253195256748,0.15263625133116854,0.15261997765295887,0.15260371091275823,0.152587451105392,0.152571198225691,0.15255495226849158,0.15253871322863552,0.15252248110097022,0.1525062558803484,0.15249003756162843,0.15247382613967403,0.15245762160935436,0.15244142396554408,0.15242523320312337,0.15240904931697768,0.15239287230199802,0.15237670215308075,0.1523605388651277,0.15234438243304604,0.15232823285174837,0.15231209011615277,0.1522959542211825,0.1522798251617664,0.15226370293283856,0.15224758752933848,0.15223147894621097,0.15221537717840627,0.15219928222087986,0.15218319406859265,0.15216711271651076,0.15215103815960573,0.15213497039285437,0.1521189094112388,0.1521028552097464,0.15208680778336992,0.1520707671271073,0.1520547332359618,0.15203870610494197,0.15202268572906158,0.1520066721033396,0.15199066522280041,0.15197466508247348,0.15195867167739352,0.15194268500260055,0.15192670505313977,0.15191073182406153,0.15189476531042145,0.15187880550728033,0.15186285240970415,0.15184690601276407,0.15183096631153642,0.15181503330110271,0.1517991069765496,0.15178318733296894,0.15176727436545764,0.15175136806911782,0.15173546843905672,0.15171957547038672,0.15170368915822524,0.15168780949769492,0.1516719364839234,0.15165607011204352,0.15164021037719314,0.15162435727451518,0.15160851079915771,0.15159267094627382,0.15157683771102173,0.1515610110885646,0.15154519107407072,0.1515293776627134,0.15151357084967104,0.15149777063012693,0.15148197699926952,0.15146618995229222,0.15145040948439345,0.1514346355907766,0.15141886826665016,0.15140310750722746,0.1513873533077269,0.15137160566337185,0.15135586456939065,0.15134013002101654,0.15132440201348782,0.1513086805420476,0.15129296560194405,0.15127725718843024,0.15126155529676413,0.15124585992220868,0.15123017106003167,0.1512144887055058,0.15119881285390877,0.15118314350052306,0.1511674806406361,0.15115182426954016,0.1511361743825324,0.15112053097491487,0.15110489404199448,0.15108926357908295,0.15107363958149694,0.1510580220445578,0.15104241096359183,0.1510268063339302,0.15101120815090874,0.15099561640986825,0.15098003110615427,0.15096445223511715,0.150948879792112,0.1509333137724988,0.15091775417164227,0.15090220098491192,0.150886654207682,0.15087111383533153,0.15085557986324433,0.1508400522868089,0.1508245311014186,0.15080901630247137,0.15079350788537005,0.15077800584552206,0.15076251017833966,0.15074702087923975,0.1507315379436439,0.15071606136697854,0.1507005911446746,0.15068512727216782,0.15066966974489862,0.15065421855831204,0.15063877370785783,0.15062333518899038,0.15060790299716872,0.15059247712785662,0.1505770575765224,0.15056164433863903,0.1505462374096842,0.1505308367851401,0.15051544246049364,0.15050005443123626,0.1504846726928641,0.15046929724087785,0.15045392807078276,0.15043856517808876,0.1504232085583103,0.1504078582069664,0.15039251411958068,0.15037717629168132,0.15036184471880107,0.1503465193964772,0.15033120032025157,0.15031588748567054,0.15030058088828502,0.15028528052365048,0.15026998638732686,0.15025469847487866,0.15023941678187483,0.15022414130388895,0.15020887203649894,0.15019360897528733,0.1501783521158411,0.1501631014537517,0.15014785698461505,0.1501326187040316,0.15011738660760618,0.15010216069094817,0.15008694094967126,0.15007172737939375,0.15005651997573827,0.1500413187343319,0.15002612365080625,0.1500109347207972,0.14999575193994516,0.14998057530389486,0.1499654048082955,0.14995024044880073,0.1499350822210684,0.14991993012076102,0.14990478414354524,0.1498896442850922,0.1498745105410774,0.14985938290718073,0.14984426137908635,0.14982914595248292,0.14981403662306328,0.1497989333865247,0.14978383623856883,0.14976874517490155,0.14975366019123312,0.14973858128327816,0.1497235084467555,0.14970844167738837,0.14969338097090426,0.14967832632303496,0.1496632777295166,0.1496482351860895,0.14963319868849828,0.14961816823249194,0.14960314381382367,0.1495881254282509,0.1495731130715353,0.14955810673944295,0.14954310642774402,0.1495281121322129,0.1495131238486284,0.14949814157277333,0.1494831653004349,0.14946819502740447,0.14945323074947758,0.14943827246245406,0.1494233201621379,0.14940837384433728,0.14939343350486456,0.1493784991395363,0.14936357074417328,0.1493486483146004,0.14933373184664675,0.1493188213361456,0.14930391677893437,0.14928901817085458,0.14927412550775201,0.14925923878547648,0.14924435799988198,0.14922948314682666,0.14921461422217278,0.14919975122178672,0.14918489414153893,0.1491700429773041,0.14915519772496086,0.14914035838039205,0.14912552493948458,0.14911069739812943,0.14909587575222172,0.14908105999766058,0.14906625013034921,0.14905144614619495,0.1490366480411092,0.14902185581100727,0.14900706945180875,0.1489922889594371,0.14897751432981993,0.1489627455588888,0.14894798264257936,0.14893322557683128,0.14891847435758823,0.14890372898079793,0.14888898944241205,0.14887425573838636,0.1488595278646805,0.14884480581725829,0.14883008959208732,0.14881537918513937,0.14880067459239008,0.1487859758098191,0.14877128283340998,0.14875659565915042,0.14874191428303185,0.14872723870104984,0.14871256890920379,0.14869790490349713,0.14868324667993718,0.14866859423453516,0.1486539475633063,0.14863930666226974,0.1486246715274485,0.14861004215486948,0.14859541854056363,0.14858080068056567,0.14856618857091428,0.148551582207652,0.1485369815868253,0.14852238670448453,0.14850779755668386,0.14849321413948144,0.1484786364489392,0.14846406448112293,0.14844949823210238,0.14843493769795102,0.1484203828747463,0.14840583375856944,0.14839129034550552,0.1483767526316434,0.1483622206130759,0.14834769428589953,0.14833317364621468,0.1483186586901256,0.14830414941374026,0.1482896458131705,0.14827514788453192,0.14826065562394397,0.14824616902752982,0.14823168809141654,0.14821721281173483,0.1482027431846193,0.14818827920620825,0.14817382087264377,0.14815936818007175,0.1481449211246418,0.1481304797025073,0.14811604390982533,0.14810161374275682,0.1480871891974663,0.14807277027012217,0.14805835695689645,0.14804394925396497,0.1480295471575072,0.14801515066370644,0.14800075976874955,0.1479863744688272,0.14797199476013378,0.14795762063886728,0.14794325210122947,0.14792888914342575,0.14791453176166522,0.14790017995216073,0.14788583371112865,0.14787149303478916,0.14785715791936604,0.14784282836108675,0.14782850435618236,0.14781418590088768,0.14779987299144107,0.1477855656240846,0.14777126379506395,0.1477569675006284,0.14774267673703093,0.14772839150052808,0.14771411178738006,0.14769983759385064,0.1476855689162072,0.14767130575072082,0.1476570480936661,0.14764279594132115,0.14762854928996788,0.1476143081358916,0.14760007247538134,0.1475858423047296,0.14757161762023252,0.14755739841818977,0.1475431846949046,0.14752897644668383,0.14751477366983784,0.14750057636068054,0.1474863845155294,0.1474721981307054,0.14745801720253307,0.14744384172734057,0.1474296717014594,0.14741550712122478,0.14740134798297533,0.1473871942830532,0.14737304601780407,0.14735890318357714,0.1473447657767251,0.14733063379360412,0.14731650723057388,0.14730238608399757,0.1472882703502418,0.14727416002567675,0.14726005510667603,0.14724595558961667,0.1472318614708793,0.14721777274684789,0.1472036894139099,0.14718961146845627,0.14717553890688143,0.1471614717255831,0.14714740992096265,0.14713335348942472,0.14711930242737747,0.14710525673123245,0.14709121639740472,0.14707718142231263,0.147063151802378,0.14704912753402613,0.1470351086136856,0.14702109503778854,0.14700708680277033,0.14699308390506988,0.14697908634112938,0.14696509410739447,0.1469511072003142,0.14693712561634092,0.1469231493519304,0.14690917840354176,0.14689521276763753,0.14688125244068356,0.14686729741914903,0.14685334769950656,0.14683940327823206,0.14682546415180478,0.14681153031670735,0.14679760176942566,0.14678367850644908,0.14676976052427015,0.14675584781938483,0.14674194038829239,0.14672803822749536,0.1467141413334996,0.14670024970281437,0.14668636333195212,0.14667248221742862,0.14665860635576303,0.14664473574347767,0.14663087037709827,0.14661701025315374,0.1466031553681763,0.14658930571870152,0.14657546130126814,0.14656162211241824,0.1465477881486971,0.1465339594066533,0.1465201358828387,0.14650631757380836,0.1464925044761206,0.14647869658633705,0.14646489390102246,0.14645109641674492,0.1464373041300757,0.14642351703758932,0.14640973513586347,0.14639595842147918,0.14638218689102056,0.14636842054107502,0.14635465936823316,0.14634090336908878,0.14632715254023887,0.1463134068782836,0.14629966637982636,0.14628593104147378,0.14627220085983555,0.1462584758315247,0.14624475595315728,0.14623104122135258,0.1462173316327331,0.14620362718392443,0.14618992787155544,0.14617623369225796,0.14616254464266717,0.14614886071942132,0.1461351819191618,0.14612150823853312,0.14610783967418298,0.14609417622276225,0.14608051788092477,0.1460668646453277,0.14605321651263117,0.14603957347949859,0.1460259355425963,0.1460123026985939,0.145998674944164,0.1459850522759824,0.14597143469072796,0.14595782218508258,0.14594421475573138,0.14593061239936247,0.14591701511266705,0.14590342289233948,0.14588983573507708,0.14587625363758033,0.14586267659655283,0.1458491046087011,0.14583553767073484,0.14582197577936673,0.1458084189313126,0.14579486712329126,0.14578132035202457,0.14576777861423748,0.14575424190665792,0.14574071022601695,0.14572718356904857,0.14571366193248986,0.1457001453130809,0.1456866337075648,0.14567312711268773,0.14565962552519882,0.14564612894185025,0.1456326373593972,0.1456191507745978,0.14560566918421328,0.14559219258500777,0.14557872097374852,0.1455652543472056,0.1455517927021522,0.1455383360353645,0.14552488434362154,0.14551143762370547,0.14549799587240125,0.14548455908649702,0.14547112726278372,0.14545770039805533,0.14544427848910876,0.14543086153274387,0.14541744952576346,0.14540404246497335,0.14539064034718222,0.14537724316920173,0.14536385092784648,0.145350463619934,0.14533708124228473,0.14532370379172202,0.14531033126507223,0.14529696365916456,0.14528360097083118,0.1452702431969071,0.14525689033423028,0.14524354237964163,0.14523019932998488,0.14521686118210672,0.14520352793285674,0.1451901995790873,0.14517687611765387,0.14516355754541457,0.1451502438592306,0.14513693505596587,0.14512363113248727,0.14511033208566457,0.14509703791237033,0.14508374860948003,0.14507046417387204,0.14505718460242745,0.1450439098920304,0.1450306400395677,0.1450173750419291,0.14500411489600723,0.14499085959869745,0.1449776091468981,0.1449643635375102,0.14495112276743768,0.14493788683358733,0.1449246557328687,0.14491142946219415,0.14489820801847897,0.14488499139864114,0.14487177959960149,0.14485857261828367,0.1448453704516141,0.14483217309652208,0.14481898054993964,0.1448057928088016,0.14479260987004558,0.14477943173061203,0.1447662583874441,0.14475308983748783,0.14473992607769193,0.14472676710500795,0.1447136129163902,0.14470046350879573,0.14468731887918437,0.14467417902451876,0.1446610439417642,0.14464791362788884,0.1446347880798635,0.14462166729466178,0.1446085512692601,0.14459544000063745,0.14458233348577576,0.14456923172165953,0.14455613470527606,0.14454304243361543,0.14452995490367032,0.14451687211243622,0.14450379405691138,0.14449072073409666,0.14447765214099567,0.14446458827461478,0.144451529131963,0.14443847471005203,0.1444254250058964,0.14441238001651316,0.1443993397389222,0.144386304170146,0.1443732733072098,0.14436024714714146,0.14434722568697156,0.14433420892373336,0.14432119685446276,0.1443081894761984,0.1442951867859815,0.14428218878085597,0.14426919545786845,0.1442562068140682,0.1442432228465071,0.14423024355223968,0.1442172689283232,0.14420429897181747,0.144191333679785,0.14417837304929096,0.14416541707740307,0.1441524657611918,0.14413951909773018,0.14412657708409385,0.1441136397173611,0.14410070699461286,0.14408777891293267,0.14407485546940668,0.14406193666112369,0.14404902248517498,0.14403611293865462,0.14402320801865912,0.14401030772228773,0.1439974120466422,0.14398452098882691,0.14397163454594886,0.14395875271511752,0.14394587549344512,0.14393300287804633,0.1439201348660385,0.14390727145454146,0.14389441264067773,0.14388155842157224,0.14386870879435268,0.14385586375614917,0.1438430233040944,0.14383018743532366,0.1438173561469748,0.14380452943618818,0.1437917073001068,0.14377888973587605,0.143766076740644,0.1437532683115612,0.1437404644457808,0.14372766514045843,0.14371487039275221,0.14370208019982286,0.14368929455883364,0.1436765134669503,0.14366373692134102,0.14365096491917673,0.14363819745763062,0.14362543453387855,0.14361267614509884,0.1435999222884723,0.14358717296118229,0.14357442816041463,0.14356168788335766,0.14354895212720217,0.1435362208891415,0.14352349416637147,0.14351077195609033,0.14349805425549889,0.14348534106180036,0.1434726323722005,0.14345992818390751,0.14344722849413208,0.1434345333000873,0.14342184259898882,0.14340915638805474,0.1433964746645055,0.14338379742556417,0.14337112466845617,0.1433584563904094,0.14334579258865418,0.14333313326042332,0.14332047840295206,0.14330782801347808,0.14329518208924147,0.14328254062748474,0.14326990362545294,0.14325727108039346,0.1432446429895561,0.14323201935019314,0.14321940015955928,0.14320678541491155,0.14319417511350954,0.1431815692526151,0.14316896782949262,0.14315637084140884,0.14314377828563285,0.14313119015943623,0.14311860646009297,0.14310602718487933,0.1430934523310741,0.14308088189595838,0.14306831587681568,0.14305575427093192,0.14304319707559535,0.14303064428809667,0.1430180959057289,0.14300555192578743,0.14299301234557008,0.14298047716237697,0.14296794637351062,0.14295541997627595,0.14294289796798015,0.14293038034593283,0.142917867107446,0.1429053582498339,0.14289285377041322,0.14288035366650298,0.1428678579354245,0.14285536657450146,0.14284287958105996,0.1428303969524283,0.1428179186859372,0.14280544477891968,0.14279297522871115,0.14278051003264927,0.14276804918807406,0.14275559269232785,0.14274314054275528,0.14273069273670333,0.14271824927152127,0.14270581014456069,0.1426933753531755,0.14268094489472188,0.14266851876655837,0.14265609696604575,0.14264367949054713,0.1426312663374279,0.14261885750405576,0.14260645298780067,0.14259405278603496,0.14258165689613309,0.14256926531547193,0.1425568780414306,0.14254449507139047,0.14253211640273522,0.14251974203285078,0.14250737195912533,0.1424950061789494,0.14248264468971564,0.1424702874888191,0.142457934573657,0.14244558594162884,0.14243324159013643,0.14242090151658374,0.14240856571837707,0.14239623419292488,0.14238390693763794,0.14237158394992924,0.14235926522721404,0.14234695076690979,0.14233464056643616,0.1423223346232151,0.1423100329346708,0.14229773549822958,0.1422854423113201,0.14227315337137317,0.14226086867582183,0.14224858822210135,0.1422363120076492,0.1422240400299051,0.14221177228631088,0.14219950877431073,0.14218724949135086,0.14217499443487985,0.14216274360234837,0.14215049699120935,0.14213825459891782,0.14212601642293113,0.14211378246070874,0.14210155270971228,0.14208932716740566,0.1420771058312548,0.14206488869872802,0.14205267576729563,0.1420404670344302,0.14202826249760647,0.14201606215430132,0.14200386600199383,0.1419916740381652,0.14197948626029885,0.14196730266588034,0.1419551232523973,0.14194294801733967,0.14193077695819944,0.14191861007247075,0.14190644735764996,0.1418942888112355,0.14188213443072795,0.14186998421363003,0.1418578381574467,0.14184569625968488,0.1418335585178538,0.14182142492946467,0.14180929549203095,0.14179717020306812,0.14178504906009384,0.14177293206062794,0.14176081920219227,0.14174871048231086,0.1417366058985098,0.14172450544831738,0.14171240912926392,0.1417003169388819,0.14168822887470586,0.14167614493427247,0.14166406511512045,0.14165198941479074,0.14163991783082625,0.14162785036077205,0.14161578700217525,0.14160372775258512,0.14159167260955294,0.14157962157063217,0.14156757463337824,0.1415555317953487,0.14154349305410324,0.14153145840720355,0.1415194278522134,0.14150740138669868,0.14149537900822728,0.14148336071436923,0.14147134650269658,0.1414593363707834,0.14144733031620593,0.14143532833654235,0.14142333042937297,0.1414113365922801,0.1413993468228482,0.1413873611186636,0.14137537947731485,0.1413634018963925,0.14135142837348902,0.1413394589061991,0.14132749349211932,0.1413155321288484,0.14130357481398703,0.14129162154513794,0.14127967231990587,0.14126772713589766,0.14125578599072208,0.14124384888198996,0.1412319158073142,0.14121998676430958,0.14120806175059306,0.1411961407637835,0.1411842238015018,0.14117231086137086,0.14116040194101565,0.14114849703806298,0.14113659615014187,0.1411246992748832,0.14111280640991988,0.14110091755288684,0.14108903270142092,0.14107715185316108,0.14106527500574817,0.14105340215682505,0.14104153330403654,0.14102966844502954,0.14101780757745278,0.1410059506989571,0.1409940978071952,0.1409822488998219,0.14097040397449379,0.14095856302886964,0.14094672606061,0.14093489306737755,0.14092306404683683,0.1409112389966543,0.14089941791449853,0.14088760079803986,0.14087578764495076,0.14086397845290552,0.14085217321958046,0.14084037194265378,0.1408285746198057,0.1408167812487183,0.14080499182707568,0.14079320635256382,0.14078142482287065,0.14076964723568605,0.14075787358870187,0.14074610387961176,0.14073433810611144,0.14072257626589846,0.14071081835667237,0.1406990643761346,0.1406873143219885,0.1406755681919393,0.1406638259836942,0.14065208769496235,0.14064035332345473,0.14062862286688424,0.14061689632296573,0.1406051736894159,0.14059345496395345,0.14058174014429886,0.14057002922817458,0.14055832221330491,0.14054661909741611,0.14053491987823633,0.1405232245534955,0.1405115331209256,0.14049984557826037,0.1404881619232355,0.14047648215358846,0.14046480626705882,0.14045313426138778,0.14044146613431857,0.14042980188359627,0.1404181415069678,0.14040648500218192,0.14039483236698935,0.14038318359914265,0.14037153869639615,0.14035989765650617,0.1403482604772308,0.14033662715633008,0.1403249976915658,0.1403133720807017,0.14030175032150322,0.14029013241173788,0.14027851834917487,0.1402669081315853,0.14025530175674208,0.14024369922242,0.1402321005263957,0.14022050566644761,0.14020891464035604,0.14019732744590307,0.14018574408087273,0.1401741645430508,0.14016258883022484,0.14015101694018434,0.14013944887072055,0.1401278846196266,0.14011632418469738,0.1401047675637296,0.14009321475452186,0.1400816657548745,0.14007012056258966,0.14005857917547135,0.14004704159132542,0.1400355078079594,0.14002397782318274,0.14001245163480663,0.14000092924064408,0.13998941063850995,0.13997789582622078,0.13996638480159504,0.1399548775624529,0.13994337410661634,0.13993187443190916,0.1399203785361569,0.13990888641718696,0.13989739807282844,0.13988591350091228,0.1398744326992712,0.1398629556657396,0.13985148239815381,0.13984001289435186,0.13982854715217352,0.13981708516946037,0.13980562694405577,0.13979417247380482,0.13978272175655435,0.13977127479015308,0.13975983157245137,0.13974839210130136,0.13973695637455696,0.1397255243900739,0.13971409614570954,0.13970267163932312,0.1396912508687755,0.13967983383192942,0.13966842052664927,0.1396570109508012,0.13964560510225316,0.13963420297887477,0.13962280457853743,0.13961140989911427,0.13960001893848015,0.13958863169451166,0.13957724816508713,0.1395658683480866,0.13955449224139188,0.13954311984288648,0.13953175115045563,0.1395203861619863,0.13950902487536712,0.13949766728848856,0.1394863133992427,0.13947496320552333,0.13946361670522606,0.1394522738962481,0.13944093477648845,0.13942959934384774,0.13941826759622838,0.13940693953153444,0.1393956151476717,0.13938429444254768,0.1393729774140715,0.13936166406015413,0.13935035437870807,0.13933904836764763,0.1393277460248888,0.13931644734834914,0.13930515233594806,0.1392938609856066,0.13928257329524743,0.139271289262795,0.13926000888617535,0.13924873216331624,0.13923745909214708,0.139226189670599,0.13921492389660478,0.1392036617680989,0.13919240328301746,0.13918114843929827,0.1391698972348808,0.13915864966770616,0.13914740573571713,0.1391361654368582,0.13912492876907548,0.13911369573031668,0.1391024663185313,0.13909124053167038,0.1390800183676867,0.1390687998245346,0.13905758490017012,0.13904637359255098,0.1390351658996365,0.13902396181938761,0.139012761349767,0.1390015644887389,0.13899037123426916,0.13897918158432543,0.13896799553687675,0.13895681308989402,0.13894563424134965,0.13893445898921772,0.13892328733147385,0.1389121192660955,0.13890095479106154,0.13888979390435255,0.13887863660395072,0.13886748288783993,0.13885633275400552,0.13884518620043462,0.1388340432251159,0.13882290382603957,0.13881176800119763,0.13880063574858348,0.1387895070661923,0.13877838195202083,0.13876726040406734,0.1387561424203318,0.13874502799881572,0.13873391713752226,0.13872280983445612,0.13871170608762365,0.13870060589503275,0.13868950925469298,0.13867841616461543,0.1386673266228128,0.1386562406272994,0.13864515817609105,0.13863407926720528,0.13862300389866108,0.13861193206847913,0.1386008637746816,0.13858979901529228,0.13857873778833657,0.13856768009184137,0.13855662592383522,0.1385455752823482,0.13853452816541198,0.13852348457105976,0.13851244449732633,0.1385014079422481,0.13849037490386296,0.1384793453802104,0.13846831936933146,0.13845729686926878,0.1384462778780665,0.1384352623937703,0.13842425041442752,0.138413241938087,0.13840223696279905,0.13839123548661564,0.13838023750759026,0.13836924302377793,0.1383582520332352,0.13834726453402021,0.1383362805241926,0.1383253000018136,0.13831432296494584,0.1383033494116537,0.1382923793400029,0.13828141274806088,0.13827044963389645,0.13825948999558,0.13824853383118346,0.13823758113878035,0.1382266319164456,0.13821568616225574,0.1382047438742888,0.1381938050506243,0.1381828696893434,0.1381719377885286,0.13816100934626407,0.1381500843606354,0.1381391628297297,0.13812824475163565,0.13811733012444344,0.1381064189462447,0.1380955112151326,0.13808460692920183,0.1380737060865486,0.13806280868527052,0.13805191472346687,0.1380410241992383,0.13803013711068696,0.13801925345591662,0.13800837323303236,0.13799749644014087,0.13798662307535037,0.13797575313677046,0.1379648866225123,0.1379540235306885,0.1379431638594132,0.13793230760680197,0.13792145477097192,0.1379106053500416,0.13789975934213103,0.13788891674536177,0.13787807755785678,0.13786724177774057,0.13785640940313904,0.13784558043217962,0.1378347548629912,0.1378239326937042,0.13781311392245033,0.13780229854736295,0.13779148656657683,0.13778067797822813,0.13776987278045458,0.1377590709713953,0.1377482725491909,0.1377374775119834,0.13772668585791636,0.13771589758513472,0.1377051126917849,0.1376943311760148,0.13768355303597368,0.13767277826981236,0.13766200687568303,0.13765123885173935,0.13764047419613645,0.13762971290703085,0.13761895498258053,0.13760820042094493,0.13759744922028494,0.13758670137876283,0.13757595689454233,0.13756521576578862,0.13755447799066833,0.13754374356734944,0.13753301249400146,0.13752228476879527,0.13751156038990317,0.1375008393554989,0.13749012166375765,0.137479407312856,0.13746869630097194,0.1374579886262849,0.13744728428697575,0.1374365832812267,0.1374258856072215,0.13741519126314516,0.13740450024718426,0.13739381255752667,0.13738312819236168,0.13737244714988006,0.13736176942827397,0.13735109502573686,0.13734042394046378,0.137329756170651,0.1373190917144963,0.13730843057019881,0.13729777273595908,0.13728711820997908,0.13727646699046211,0.13726581907561286,0.13725517446363755,0.1372445331527436,0.13723389514113996,0.1372232604270369,0.1372126290086461,0.13720200088418064,0.1371913760518549,0.1371807545098848,0.13717013625648747,0.13715952128988151,0.13714890960828693,0.13713830120992504,0.13712769609301856,0.13711709425579158,0.13710649569646957,0.13709590041327938,0.13708530840444919,0.13707471966820856,0.13706413420278846,0.13705355200642122,0.13704297307734045,0.13703239741378126,0.13702182501397997,0.13701125587617438,0.13700068999860363,0.13699012737950814,0.13697956801712974,0.13696901190971167,0.13695845905549842,0.1369479094527359,0.13693736309967136,0.13692681999455336,0.13691628013563187,0.13690574352115814,0.13689521014938485,0.13688468001856596,0.13687415312695675,0.1368636294728139,0.13685310905439546,0.1368425918699607,0.1368320779177703,0.13682156719608632,0.13681105970317206,0.13680055543729225,0.13679005439671285,0.13677955657970123,0.13676906198452604,0.13675857060945731,0.13674808245276635,0.1367375975127258,0.13672711578760968,0.13671663727569325,0.13670616197525312,0.13669568988456726,0.1366852210019149,0.13667475532557669,0.13666429285383444,0.13665383358497138,0.13664337751727207,0.1366329246490223,0.13662247497850924,0.13661202850402132,0.13660158522384833,0.13659114513628132,0.1365807082396127,0.1365702745321361,0.13655984401214658,0.13654941667794032,0.13653899252781498,0.13652857156006945,0.13651815377300386,0.13650773916491976,0.13649732773411985,0.13648691947890826,0.13647651439759031,0.1364661124884727,0.13645571374986334,0.1364453181800715,0.13643492577740765,0.13642453654018366,0.13641415046671254,0.13640376755530875,0.13639338780428792,0.13638301121196697,0.13637263777666414,0.13636226749669894,0.13635190037039213,0.13634153639606578,0.13633117557204322,0.13632081789664902,0.13631046336820912,0.1363001119850506,0.13628976374550192,0.13627941864789275,0.13626907669055408,0.13625873787181805,0.13624840219001821,0.1362380696434893,0.13622774023056733,0.13621741394958956,0.13620709079889454,0.13619677077682205,0.1361864538817131,0.13617614011191007,0.1361658294657565,0.1361555219415972,0.1361452175377782,0.13613491625264687,0.13612461808455176,0.13611432303184268,0.1361040310928707,0.13609374226598814,0.13608345654954856,0.13607317394190677,0.13606289444141878,0.1360526180464419,0.13604234475533464,0.1360320745664568,0.13602180747816936,0.13601154348883457,0.13600128259681588,0.13599102480047803,0.13598077009818696,0.13597051848830985,0.13596026996921506,0.1359500245392723,0.13593978219685238,0.1359295429403274,0.13591930676807068,0.13590907367845678,0.13589884366986146,0.1358886167406617,0.1358783928892357,0.13586817211396288,0.13585795441322393,0.13584773978540066,0.13583752822887618,0.13582731974203482,0.13581711432326202,0.13580691197094458,0.13579671268347035,0.13578651645922854,0.1357763232966095,0.13576613319400474,0.1357559461498071,0.13574576216241047,0.13573558123021012,0.13572540335160238,0.13571522852498485,0.13570505674875633,0.13569488802131677,0.13568472234106735,0.13567455970641049,0.13566440011574976,0.13565424356748995,0.13564409006003697,0.135633939591798,0.13562379216118145,0.13561364776659682,0.1356035064064548,0.1355933680791674,0.1355832327831476,0.13557310051680985,0.1355629712785695,0.13555284506684329,0.135542721880049,0.13553260171660572,0.1355224845749336,0.13551237045345407,0.13550225935058968,0.13549215126476413,0.13548204619440238,0.13547194413793048,0.13546184509377573,0.13545174906036656,0.13544165603613256,0.1354315660195045,0.13542147900891432,0.13541139500279517,0.1354013139995813,0.13539123599770816,0.13538116099561234,0.13537108899173164,0.13536101998450498,0.13535095397237243,0.1353408909537753,0.13533083092715595,0.13532077389095795,0.13531071984362608,0.13530066878360617,0.13529062070934528,0.13528057561929158,0.13527053351189441,0.13526049438560428,0.13525045823887283,0.13524042507015283,0.13523039487789826,0.1352203676605641,0.13521034341660673,0.1352003221444834,0.1351903038426527,0.13518028850957425,0.13517027614370886,0.13516026674351844,0.13515026030746613,0.1351402568340161,0.13513025632163372,0.13512025876878545,0.13511026417393893,0.13510027253556292,0.1350902838521273,0.1350802981221031,0.1350703153439624,0.1350603355161786,0.135050358637226,0.1350403847055802,0.1350304137197178,0.1350204456781166,0.13501048057925552,0.13500051842161456,0.13499055920367492,0.1349806029239188,0.13497064958082963,0.1349606991728919,0.13495075169859125,0.1349408071564144,0.13493086554484923,0.13492092686238466,0.13491099110751084,0.1349010582787189,0.13489112837450115,0.13488120139335102,0.13487127733376306,0.13486135619423284,0.1348514379732571,0.13484152266933375,0.13483161028096163,0.13482170080664088,0.13481179424487255,0.134801890594159,0.13479198985300353,0.13478209201991057,0.1347721970933857,0.13476230507193554,0.13475241595406784,0.13474252973829143,0.13473264642311625,0.13472276600705332,0.13471288848861473,0.13470301386631373,0.1346931421386646,0.13468327330418264,0.13467340736138445,0.1346635443087875,0.13465368414491044,0.13464382686827303,0.13463397247739606,0.1346241209708014,0.13461427234701207,0.13460442660455207,0.13459458374194658,0.13458474375772178,0.13457490665040495,0.1345650724185245,0.13455524106060981,0.13454541257519145,0.13453558696080098,0.13452576421597107,0.13451594433923542,0.13450612732912884,0.13449631318418723,0.1344865019029475,0.13447669348394764,0.13446688792572678,0.13445708522682498,0.13444728538578346,0.13443748840114453,0.1344276942714515,0.1344179029952487,0.1344081145710816,0.13439832899749674,0.13438854627304164,0.13437876639626495,0.1343689893657163,0.13435921517994648,0.13434944383750724,0.13433967533695143,0.13432990967683292,0.13432014685570667,0.13431038687212862,0.1343006297246559,0.13429087541184653,0.1342811239322597,0.13427137528445549,0.1342616294669952,0.1342518864784411,0.13424214631735648,0.1342324089823057,0.1342226744718542,0.13421294278456833,0.13420321391901563,0.1341934878737646,0.13418376464738477,0.13417404423844673,0.13416432664552214,0.1341546118671836,0.13414489990200487,0.1341351907485606,0.13412548440542657,0.13411578087117956,0.1341060801443974,0.1340963822236589,0.13408668710754398,0.1340769947946335,0.13406730528350938,0.13405761857275456,0.13404793466095305,0.1340382535466898,0.13402857522855083,0.13401889970512318,0.1340092269749949,0.1339995570367551,0.1339898898889938,0.13398022553030217,0.13397056395927232,0.13396090517449735,0.13395124917457146,0.1339415959580898,0.13393194552364857,0.1339222978698449,0.13391265299527702,0.13390301089854417,0.13389337157824655,0.13388373503298537,0.13387410126136284,0.13386447026198225,0.13385484203344783,0.13384521657436482,0.13383559388333943,0.13382597395897897,0.13381635679989165,0.13380674240468673,0.13379713077197447,0.1337875219003661,0.1337779157884739,0.13376831243491105,0.13375871183829185,0.1337491139972315,0.13373951891034622,0.13372992657625327,0.13372033699357078,0.133710750160918,0.13370116607691512,0.1336915847401833,0.13368200614934472,0.13367243030302253,0.13366285719984083,0.1336532868384248,0.13364371921740056,0.1336341543353951,0.13362459219103662,0.13361503278295409,0.13360547610977755,0.13359592217013808,0.1335863709626676,0.1335768224859991,0.13356727673876656,0.13355773371960486,0.13354819342714996,0.13353865586003866,0.13352912101690886,0.13351958889639937,0.13351005949714997,0.13350053281780142,0.13349100885699544,0.13348148761337478,0.13347196908558304,0.1334624532722649,0.13345294017206596,0.1334434297836328,0.1334339221056129,0.1334244171366548,0.1334149148754079,0.1334054153205227,0.1333959184706505,0.13338642432444367,0.13337693288055552,0.13336744413764032,0.13335795809435325,0.13334847474935047,0.13333899410128913,0.1333295161488273,0.13332004089062402,0.13331056832533927,0.133301098451634,0.13329163126817006,0.13328216677361035,0.13327270496661858,0.13326324584585955,0.13325378940999894,0.13324433565770336,0.13323488458764035,0.1332254361984785,0.13321599048888724,0.133206547457537,0.1331971071030991,0.13318766942424584,0.13317823441965046,0.13316880208798712,0.133159372427931,0.13314994543815803,0.13314052111734528,0.13313109946417062,0.13312168047731296,0.13311226415545208,0.1331028504972687,0.13309343950144445,0.13308403116666195,0.1330746254916047,0.1330652224749572,0.1330558221154048,0.13304642441163375,0.1330370293623314,0.13302763696618583,0.13301824722188615,0.13300886012812244,0.13299947568358553,0.13299009388696736,0.1329807147369607,0.1329713382322592,0.13296196437155758,0.13295259315355135,0.13294322457693694,0.1329338586404118,0.1329244953426742,0.13291513468242333,0.1329057766583594,0.13289642126918338,0.13288706851359727,0.132877718390304,0.13286837089800727,0.13285902603541183,0.13284968380122328,0.13284034419414814,0.13283100721289387,0.1328216728561688,0.13281234112268214,0.13280301201114408,0.1327936855202657,0.1327843616487589,0.1327750403953366,0.1327657217587126,0.1327564057376015,0.13274709233071894,0.13273778153678134,0.13272847335450613,0.13271916778261156,0.13270986481981684,0.132700564464842,0.13269126671640802,0.13268197157323677,0.13267267903405103,0.13266338909757444,0.13265410176253153,0.13264481702764777,0.1326355348916495,0.13262625535326392,0.13261697841121917,0.13260770406424424,0.13259843231106902,0.1325891631504243,0.13257989658104172,0.13257063260165386,0.13256137121099418,0.132552112407797,0.13254285619079745,0.13253360255873173,0.13252435151033676,0.13251510304435038,0.13250585715951138,0.13249661385455933,0.13248737312823472,0.13247813497927896,0.13246889940643425,0.13245966640844378,0.13245043598405148,0.1324412081320023,0.13243198285104196,0.13242276013991708,0.13241353999737515,0.13240432242216457,0.13239510741303454,0.13238589496873523,0.13237668508801756,0.13236747776963342,0.13235827301233552,0.13234907081487743,0.13233987117601362,0.13233067409449936,0.1323214795690909,0.13231228759854524,0.13230309818162034,0.1322939113170749,0.1322847270036686,0.1322755452401619,0.13226636602531622,0.1322571893578937,0.13224801523665747,0.1322388436603714,0.13222967462780033,0.13222050813770989,0.13221134418886657,0.1322021827800377,0.13219302390999155,0.13218386757749712,0.13217471378132437,0.132165562520244,0.1321564137930277,0.13214726759844792,0.13213812393527793,0.13212898280229193,0.13211984419826495,0.1321107081219728,0.1321015745721922,0.13209244354770075,0.13208331504727677,0.13207418906969956,0.13206506561374914,0.13205594467820653,0.1320468262618534,0.13203771036347242,0.132028596981847,0.13201948611576145,0.1320103777640009,0.1320012719253513,0.13199216859859947,0.13198306778253302,0.13197396947594045,0.13196487367761106,0.131955780386335,0.13194668960090322,0.1319376013201076,0.13192851554274068,0.131919432267596,0.13191035149346786,0.13190127321915138,0.1318921974434425,0.13188312416513806,0.13187405338303562,0.1318649850959337,0.1318559193026315,0.13184685600192916,0.1318377951926276,0.1318287368735285,0.13181968104343453,0.13181062770114899,0.13180157684547616,0.13179252847522102,0.13178348258918945,0.13177443918618814,0.13176539826502454,0.131756359824507,0.13174732386344462,0.13173829038064733,0.13172925937492594,0.131720230845092,0.13171120478995785,0.13170218120833674,0.1316931600990427,0.1316841414608905,0.13167512529269584,0.13166611159327515,0.13165710036144568,0.13164809159602547,0.13163908529583346,0.1316300814596893,0.13162108008641346,0.1316120811748273,0.13160308472375287,0.1315940907320131,0.1315850991984317,0.1315761101218332,0.1315671235010429,0.13155813933488694,0.13154915762219221,0.13154017836178647,0.13153120155249826,0.13152222719315687,0.13151325528259242,0.1315042858196358,0.13149531880311882,0.1314863542318739,0.13147739210473444,0.13146843242053446,0.1314594751781089,0.13145052037629346,0.1314415680139246,0.13143261808983958,0.13142367060287655,0.13141472555187428,0.13140578293567248,0.1313968427531116,0.13138790500303277,0.13137896968427812,0.13137003679569037,0.1313611063361132,0.1313521783043909,0.13134325269936867,0.13133432951989246,0.131325408764809,0.13131649043296578,0.13130757452321112,0.13129866103439408,0.13128974996536455,0.13128084131497314,0.13127193508207127,0.13126303126551114,0.13125412986414575,0.13124523087682882,0.1312363343024149,0.13122744013975932,0.1312185483877181,0.13120965904514814,0.1312007721109071,0.13119188758385333,0.13118300546284603,0.13117412574674517,0.13116524843441144,0.13115637352470635,0.13114750101649214,0.13113863090863193,0.1311297631999894,0.13112089788942918,0.1311120349758166,0.13110317445801778,0.1310943163348996,0.13108546060532966,0.13107660726817635,0.13106775632230888,0.13105890776659718,0.1310500615999119,0.1310412178211245,0.13103237642910723,0.131023537422733,0.13101470080087563,0.13100586656240956,0.13099703470621005,0.13098820523115312,0.13097937813611554,0.13097055341997482,0.13096173108160927,0.1309529111198979,0.13094409353372052,0.13093527832195767,0.13092646548349063,0.13091765501720148,0.13090884692197302,0.13090004119668883,0.13089123784023315,0.13088243685149112,0.13087363822934847,0.1308648419726918,0.1308560480804084,0.13084725655138632,0.13083846738451438,0.1308296805786821,0.13082089613277978,0.13081211404569845,0.1308033343163299,0.13079455694356665,0.13078578192630194,0.1307770092634298,0.130768238953845,0.13075947099644303,0.13075070539012007,0.13074194213377313,0.13073318122629993,0.1307244226665989,0.13071566645356922,0.13070691258611083,0.1306981610631244,0.13068941188351132,0.13068066504617368,0.13067192055001442,0.13066317839393707,0.13065443857684603,0.1306457010976463,0.13063696595524374,0.13062823314854483,0.13061950267645686,0.13061077453788783,0.1306020487317464,0.13059332525694212,0.13058460411238507,0.13057588529698622,0.13056716880965719,0.1305584546493103,0.13054974281485868,0.1305410333052161,0.13053232611929716,0.13052362125601705,0.13051491871429177,0.13050621849303803,0.13049752059117325,0.13048882500761563,0.13048013174128395,0.13047144079109788,0.13046275215597766,0.13045406583484434,0.1304453818266197,0.13043670013022612,0.1304280207445869,0.13041934366862581,0.13041066890126754,0.1304019964414374,0.13039332628806144,0.1303846584400664,0.13037599289637972,0.13036732965592965,0.130358668717645,0.13035001008045546,0.1303413537432913,0.13033269970508354,0.13032404796476393,0.13031539852126492,0.13030675137351966,0.130298106520462,0.1302894639610265,0.13028082369414848,0.13027218571876384,0.13026355003380932,0.13025491663822233,0.13024628553094092,0.1302376567109039,0.13022903017705076,0.13022040592832176,0.13021178396365773,0.13020316428200032,0.13019454688229182,0.13018593176347526,0.1301773189244943,0.13016870836429337,0.13016010008181758,0.13015149407601276,0.13014289034582532,0.13013428889020254,0.13012568970809224,0.13011709279844305,0.13010849816020423,0.13009990579232575,0.13009131569375829,0.13008272786345318,0.13007414230036252,0.13006555900343897,0.13005697797163607,0.13004839920390784,0.1300398226992092,0.13003124845649552,0.1300226764747231,0.13001410675284877,0.1300055392898301,0.12999697408462535,0.12998841113619347,0.12997985044349405,0.12997129200548743,0.1299627358211346,0.12995418188939722,0.1299456302092377,0.129937080779619,0.1299285335995049,0.1299199886678598,0.12991144598364882,0.12990290554583767,0.12989436735339283,0.12988583140528143,0.12987729770047124,0.1298687662379308,0.12986023701662922,0.1298517100355364,0.12984318529362276,0.1298346627898596,0.12982614252321872,0.12981762449267267,0.12980910869719467,0.12980059513575862,0.12979208380733906,0.1297835747109112,0.129775067845451,0.12976656320993502,0.12975806080334049,0.12974956062464532,0.12974106267282812,0.12973256694686813,0.12972407344574527,0.12971558216844012,0.129707093113934,0.12969860628120874,0.12969012166924698,0.129681639277032,0.12967315910354768,0.1296646811477786,0.12965620540871006,0.1296477318853279,0.12963926057661876,0.12963079148156983,0.12962232459916906,0.12961385992840493,0.12960539746826674,0.12959693721774432,0.12958847917582822,0.12958002334150964,0.12957156971378045,0.1295631182916331,0.12955466907406085,0.12954622206005748,0.12953777724861745,0.12952933463873595,0.1295208942294087,0.1295124560196322,0.12950402000840355,0.1294955861947205,0.12948715457758145,0.12947872515598544,0.1294702979289322,0.12946187289542208,0.1294534500544561,0.1294450294050359,0.12943661094616385,0.12942819467684283,0.12941978059607648,0.12941136870286907,0.12940295899622548,0.12939455147515125,0.1293861461386526,0.12937774298573634,0.12936934201540998,0.12936094322668162,0.12935254661856008,0.1293441521900547,0.12933575994017563,0.12932736986793353,0.1293189819723397,0.12931059625240618,0.12930221270714556,0.12929383133557112,0.1292854521366968,0.12927707510953704,0.1292687002531071,0.12926032756642278,0.12925195704850057,0.1292435886983575,0.12923522251501132,0.12922685849748042,0.12921849664478377,0.12921013695594102,0.12920177942997244,0.1291934240658989,0.129185070862742,0.12917671981952383,0.12916837093526726,0.12916002420899567,0.12915167963973315,0.1291433372265044,0.1291349969683347,0.12912665886425,0.12911832291327696,0.1291099891144427,0.12910165746677513,0.12909332796930265,0.12908500062105438,0.12907667542106002,0.12906835236834996,0.1290600314619551,0.12905171270090707,0.1290433960842381,0.12903508161098098,0.1290267692801692,0.1290184590908369,0.12901015104201868,0.12900184513274993,0.12899354136206662,0.12898523972900525,0.12897694023260306,0.12896864287189788,0.1289603476459281,0.12895205455373276,0.12894376359435153,0.12893547476682474,0.12892718807019324,0.12891890350349852,0.12891062106578277,0.12890234075608872,0.1288940625734597,0.12888578651693972,0.12887751258557337,0.1288692407784058,0.12886097109448288,0.128852703532851,0.12884443809255725,0.12883617477264922,0.1288279135721752,0.12881965449018407,0.12881139752572526,0.12880314267784893,0.12879488994560573,0.12878663932804696,0.12877839082422457,0.12877014443319107,0.12876190015399958,0.12875365798570382,0.12874541792735814,0.1287371799780175,0.12872894413673744,0.12872071040257407,0.12871247877458422,0.1287042492518252,0.12869602183335496,0.12868779651823212,0.1286795733055158,0.1286713521942658,0.12866313318354242,0.12865491627240672,0.12864670145992022,0.12863848874514505,0.12863027812714406,0.12862206960498054,0.12861386317771847,0.12860565884442243,0.12859745660415753,0.12858925645598956,0.12858105839898487,0.12857286243221036,0.1285646685547336,0.1285564767656227,0.12854828706394641,0.12854009944877404,0.12853191391917546,0.1285237304742212,0.12851554911298235,0.1285073698345306,0.12849919263793821,0.12849101752227807,0.12848284448662362,0.1284746735300489,0.12846650465162854,0.12845833785043778,0.12845017312555243,0.12844201047604886,0.12843384990100407,0.1284256913994956,0.12841753497060165,0.12840938061340096,0.12840122832697282,0.12839307811039716,0.12838492996275444,0.12837678388312582,0.12836863987059288,0.12836049792423787,0.12835235804314366,0.12834422022639363,0.12833608447307177,0.12832795078226264,0.12831981915305138,0.12831168958452374,0.12830356207576601,0.1282954366258651,0.12828731323390843,0.1282791918989841,0.12827107262018067,0.12826295539658736,0.12825484022729394,0.12824672711139076,0.12823861604796874,0.12823050703611938,0.12822240007493474,0.12821429516350746,0.1282061923009308,0.12819809148629852,0.12818999271870496,0.1281818959972451,0.1281738013210144,0.12816570868910904,0.12815761810062556,0.12814952955466122,0.1281414430503138,0.12813335858668168,0.12812527616286376,0.12811719577795957,0.12810911743106915,0.12810104112129314,0.12809296684773272,0.12808489460948966,0.12807682440566628,0.1280687562353655,0.1280606900976908,0.12805262599174616,0.12804456391663618,0.12803650387146603,0.1280284458553414,0.12802038986736858,0.12801233590665442,0.12800428397230632,0.12799623406343225,0.1279881861791407,0.12798014031854077,0.12797209648074215,0.127964054664855,0.12795601486999006,0.12794797709525874,0.12793994133977282,0.1279319076026448,0.12792387588298765,0.12791584617991494,0.12790781849254076,0.12789979281997982,0.12789176916134729,0.12788374751575893,0.12787572788233112,0.1278677102601807,0.12785969464842517,0.12785168104618244,0.1278436694525711,0.12783565986671025,0.1278276522877195,0.1278196467147191,0.12781164314682975,0.12780364158317278,0.12779564202287003,0.12778764446504387,0.1277796489088173,0.12777165535331378,0.12776366379765738,0.12775567424097267,0.1277476866823848,0.12773970112101946,0.12773171755600288,0.1277237359864618,0.12771575641152363,0.1277077788303162,0.1276998032419679,0.1276918296456077,0.1276838580403651,0.1276758884253702,0.12766792079975353,0.12765995516264622,0.12765199151317996,0.12764402985048698,0.12763607017370002,0.12762811248195235,0.12762015677437788,0.12761220305011092,0.1276042513082864,0.12759630154803978,0.12758835376850708,0.12758040796882478,0.12757246414812998,0.12756452230556029,0.12755658244025386,0.12754864455134934,0.12754070863798597,0.1275327746993035,0.1275248427344422,0.12751691274254293,0.12750898472274697,0.12750105867419628,0.12749313459603323,0.12748521248740083,0.12747729234744254,0.12746937417530235,0.12746145797012487,0.12745354373105514,0.12744563145723878,0.12743772114782193,0.1274298128019513,0.12742190641877402,0.12741400199743788,0.12740609953709112,0.12739819903688254,0.12739030049596145,0.12738240391347766,0.1273745092885816,0.12736661662042414,0.1273587259081567,0.1273508371509312,0.12734295034790016,0.12733506549821655,0.12732718260103393,0.12731930165550628,0.12731142266078824,0.12730354561603485,0.12729567052040178,0.1272877973730451,0.1272799261731215,0.1272720569197882,0.12726418961220287,0.12725632424952368,0.1272484608309095,0.12724059935551946,0.1272327398225134,0.12722488223105166,0.127217026580295,0.12720917286940475,0.1272013210975428,0.12719347126387157,0.12718562336755385,0.12717777740775307,0.1271699333836332,0.12716209129435863,0.12715425113909434,0.1271464129170058,0.12713857662725894,0.12713074226902032,0.12712290984145694,0.12711507934373628,0.1271072507750264,0.12709942413449585,0.12709159942131368,0.12708377663464945,0.1270759557736733,0.12706813683755575,0.12706031982546792,0.12705250473658145,0.12704469157006845,0.12703688032510155,0.12702907100085384,0.12702126359649904,0.12701345811121129,0.1270056545441652,0.126997852894536,0.12699005316149933,0.1269822553442314,0.12697445944190888,0.12696666545370897,0.12695887337880937,0.12695108321638826,0.12694329496562437,0.12693550862569694,0.1269277241957856,0.12691994167507065,0.12691216106273276,0.12690438235795318,0.12689660555991358,0.12688883066779627,0.12688105768078392,0.12687328659805977,0.12686551741880756,0.12685775014221148,0.1268499847674563,0.1268422212937272,0.12683445972020993,0.1268267000460907,0.12681894227055626,0.1268111863927938,0.126803432411991,0.12679568032733612,0.12678793013801787,0.12678018184322543,0.12677243544214847,0.12676469093397724,0.12675694831790243,0.12674920759311514,0.12674146875880715,0.12673373181417052,0.12672599675839802,0.12671826359068272,0.1267105323102183,0.12670280291619893,0.12669507540781919,0.1266873497842742,0.12667962604475963,0.12667190418847152,0.12666418421460646,0.1266564661223616,0.12664874991093444,0.12664103557952308,0.12663332312732603,0.12662561255354238,0.12661790385737162,0.12661019703801374,0.12660249209466928,0.1265947890265392,0.126587087832825,0.1265793885127286,0.12657169106545244,0.12656399549019948,0.12655630178617308,0.1265486099525772,0.12654091998861616,0.12653323189349486,0.1265255456664186,0.12651786130659326,0.12651017881322513,0.12650249818552098,0.12649481942268812,0.12648714252393428,0.1264794674884677,0.1264717943154971,0.12646412300423165,0.12645645355388108,0.12644878596365547,0.12644112023276552,0.1264334563604223,0.12642579434583742,0.12641813418822292,0.1264104758867914,0.12640281944075582,0.12639516484932972,0.12638751211172705,0.12637986122716227,0.1263722121948503,0.12636456501400653,0.12635691968384688,0.12634927620358763,0.12634163457244568,0.12633399478963825,0.12632635685438318,0.12631872076589865,0.12631108652340345,0.12630345412611668,0.12629582357325808,0.12628819486404771,0.12628056799770623,0.12627294297345468,0.1262653197905146,0.12625769844810802,0.12625007894545745,0.12624246128178576,0.12623484545631644,0.12622723146827333,0.12621961931688083,0.12621200900136373,0.12620440052094736,0.12619679387485744,0.1261891890623202,0.12618158608256233,0.12617398493481102,0.12616638561829385,0.12615878813223894,0.12615119247587483,0.12614359864843053,0.1261360066491355,0.12612841647721973,0.1261208281319136,0.126113241612448,0.12610565691805423,0.1260980740479641,0.1260904930014099,0.1260829137776243,0.12607533637584048,0.12606776079529214,0.1260601870352133,0.1260526150948386,0.126045044973403,0.126037476670142,0.12602991018429155,0.12602234551508804,0.1260147826617683,0.1260072216235697,0.12599966239972996,0.12599210498948732],"x":[50.0,50.08996401439424,50.17992802878848,50.26989204318273,50.35985605757697,50.44982007197121,50.53978408636545,50.6297481007597,50.71971211515394,50.80967612954818,50.89964014394242,50.98960415833667,51.07956817273091,51.16953218712515,51.25949620151939,51.34946021591364,51.43942423030788,51.52938824470212,51.61935225909636,51.7093162734906,51.79928028788485,51.88924430227909,51.97920831667333,52.06917233106757,52.15913634546182,52.24910035985606,52.3390643742503,52.42902838864454,52.51899240303879,52.60895641743303,52.69892043182727,52.78888444622151,52.87884846061576,52.96881247501,53.05877648940424,53.14874050379848,53.238704518192726,53.32866853258697,53.41863254698121,53.50859656137545,53.59856057576969,53.68852459016394,53.77848860455818,53.86845261895242,53.95841663334666,54.048380647740906,54.13834466213515,54.22830867652939,54.31827269092363,54.408236705317876,54.498200719712116,54.58816473410636,54.6781287485006,54.768092762894845,54.858056777289086,54.94802079168333,55.03798480607757,55.12794882047181,55.217912834866056,55.307876849260296,55.39784086365454,55.48780487804878,55.577768892443025,55.667732906837266,55.757696921231506,55.84766093562575,55.937624950019995,56.027588964414235,56.117552978808476,56.20751699320272,56.297481007596964,56.387445021991205,56.477409036385446,56.567373050779686,56.657337065173934,56.747301079568174,56.837265093962415,56.927229108356656,57.017193122750896,57.107157137145144,57.197121151539385,57.287085165933625,57.377049180327866,57.467013194722114,57.556977209116354,57.646941223510595,57.736905237904836,57.82686925229908,57.916833266693324,58.006797281087564,58.096761295481805,58.18672530987605,58.27668932427029,58.366653338664534,58.456617353058775,58.546581367453015,58.63654538184726,58.726509396241504,58.816473410635744,58.906437425029985,58.99640143942423,59.08636545381847,59.176329468212714,59.266293482606955,59.3562574970012,59.44622151139544,59.53618552578968,59.626149540183924,59.71611355457817,59.80607756897241,59.89604158336665,59.986005597760894,60.07596961215514,60.16593362654938,60.25589764094362,60.34586165533786,60.435825669732104,60.52578968412635,60.61575369852059,60.70571771291483,60.79568172730907,60.88564574170332,60.97560975609756,61.0655737704918,61.15553778488604,61.24550179928029,61.33546581367453,61.42542982806877,61.51539384246301,61.60535785685726,61.6953218712515,61.78528588564574,61.87524990003998,61.96521391443422,62.05517792882847,62.14514194322271,62.23510595761695,62.32506997201119,62.41503398640544,62.50499800079968,62.59496201519392,62.68492602958816,62.77489004398241,62.86485405837665,62.95481807277089,63.04478208716513,63.13474610155938,63.22471011595362,63.31467413034786,63.4046381447421,63.49460215913635,63.58456617353059,63.67453018792483,63.76449420231907,63.85445821671331,63.94442223110756,64.03438624550179,64.12435025989605,64.21431427429029,64.30427828868453,64.39424230307877,64.48420631747301,64.57417033186725,64.66413434626149,64.75409836065573,64.84406237504999,64.93402638944423,65.02399040383847,65.11395441823271,65.20391843262695,65.29388244702119,65.38384646141543,65.47381047580967,65.56377449020391,65.65373850459817,65.74370251899241,65.83366653338665,65.92363054778089,66.01359456217513,66.10355857656937,66.19352259096361,66.28348660535785,66.3734506197521,66.46341463414635,66.55337864854059,66.64334266293483,66.73330667732907,66.82327069172331,66.91323470611755,67.00319872051179,67.09316273490603,67.18312674930029,67.27309076369453,67.36305477808877,67.45301879248301,67.54298280687725,67.63294682127149,67.72291083566573,67.81287485005997,67.90283886445422,67.99280287884847,68.0827668932427,68.17273090763695,68.26269492203119,68.35265893642543,68.44262295081967,68.53258696521391,68.62255097960815,68.7125149940024,68.80247900839665,68.89244302279089,68.98240703718513,69.07237105157937,69.16233506597361,69.25229908036785,69.34226309476209,69.43222710915634,69.52219112355058,69.61215513794482,69.70211915233907,69.7920831667333,69.88204718112755,69.97201119552179,70.06197520991603,70.15193922431028,70.24190323870452,70.33186725309876,70.421831267493,70.51179528188725,70.60175929628149,70.69172331067573,70.78168732506997,70.87165133946421,70.96161535385846,71.0515793682527,71.14154338264694,71.23150739704118,71.32147141143543,71.41143542582967,71.5013994402239,71.59136345461815,71.6813274690124,71.77129148340664,71.86125549780088,71.95121951219512,72.04118352658936,72.1311475409836,72.22111155537785,72.31107556977209,72.40103958416633,72.49100359856058,72.58096761295482,72.67093162734906,72.7608956417433,72.85085965613754,72.94082367053178,73.03078768492603,73.12075169932027,73.21071571371452,73.30067972810876,73.390643742503,73.48060775689724,73.57057177129148,73.66053578568572,73.75049980007996,73.8404638144742,73.93042782886845,74.0203918432627,74.11035585765694,74.20031987205118,74.29028388644542,74.38024790083966,74.4702119152339,74.56017592962814,74.65013994402238,74.74010395841664,74.83006797281088,74.92003198720512,75.00999600159936,75.0999600159936,75.18992403038784,75.27988804478208,75.36985205917632,75.45981607357056,75.54978008796482,75.63974410235906,75.7297081167533,75.81967213114754,75.90963614554178,75.99960015993602,76.08956417433026,76.1795281887245,76.26949220311876,76.359456217513,76.44942023190724,76.53938424630148,76.62934826069572,76.71931227508996,76.8092762894842,76.89924030387844,76.9892043182727,77.07916833266694,77.16913234706118,77.25909636145542,77.34906037584966,77.4390243902439,77.52898840463814,77.61895241903238,77.70891643342662,77.79888044782088,77.88884446221512,77.97880847660936,78.0687724910036,78.15873650539784,78.24870051979208,78.33866453418632,78.42862854858056,78.51859256297482,78.60855657736906,78.6985205917633,78.78848460615754,78.87844862055178,78.96841263494602,79.05837664934026,79.1483406637345,79.23830467812874,79.328268692523,79.41823270691724,79.50819672131148,79.59816073570572,79.68812475009996,79.7780887644942,79.86805277888844,79.95801679328268,80.04798080767694,80.13794482207118,80.22790883646542,80.31787285085966,80.4078368652539,80.49780087964814,80.58776489404238,80.67772890843662,80.76769292283086,80.85765693722512,80.94762095161936,81.0375849660136,81.12754898040784,81.21751299480208,81.30747700919632,81.39744102359056,81.4874050379848,81.57736905237905,81.6673330667733,81.75729708116754,81.84726109556178,81.93722510995602,82.02718912435026,82.1171531387445,82.20711715313874,82.29708116753298,82.38704518192723,82.47700919632148,82.56697321071572,82.65693722510996,82.7469012395042,82.83686525389844,82.92682926829268,83.01679328268692,83.10675729708117,83.19672131147541,83.28668532586966,83.3766493402639,83.46661335465814,83.55657736905238,83.64654138344662,83.73650539784086,83.82646941223511,83.91643342662935,84.0063974410236,84.09636145541783,84.18632546981208,84.27628948420632,84.36625349860056,84.4562175129948,84.54618152738904,84.63614554178329,84.72610955617753,84.81607357057177,84.90603758496601,84.99600159936026,85.0859656137545,85.17592962814874,85.26589364254298,85.35585765693723,85.44582167133147,85.53578568572571,85.62574970011995,85.7157137145142,85.80567772890844,85.89564174330268,85.98560575769692,86.07556977209116,86.16553378648541,86.25549780087965,86.3454618152739,86.43542582966813,86.52538984406237,86.61535385845661,86.70531787285086,86.7952818872451,86.88524590163935,86.97520991603359,87.06517393042783,87.15513794482207,87.24510195921631,87.33506597361055,87.4250299880048,87.51499400239904,87.60495801679328,87.69492203118753,87.78488604558177,87.87485005997601,87.96481407437025,88.0547780887645,88.14474210315873,88.23470611755297,88.32467013194722,88.41463414634147,88.50459816073571,88.59456217512995,88.68452618952419,88.77449020391843,88.86445421831267,88.95441823270691,89.04438224710115,89.1343462614954,89.22431027588965,89.31427429028389,89.40423830467813,89.49420231907237,89.58416633346661,89.67413034786085,89.7640943622551,89.85405837664933,89.94402239104359,90.03398640543783,90.12395041983207,90.21391443422631,90.30387844862055,90.39384246301479,90.48380647740903,90.57377049180327,90.66373450619751,90.75369852059177,90.84366253498601,90.93362654938025,91.02359056377449,91.11355457816873,91.20351859256297,91.29348260695721,91.38344662135145,91.47341063574571,91.56337465013995,91.65333866453419,91.74330267892843,91.83326669332267,91.92323070771691,92.01319472211115,92.10315873650539,92.19312275089965,92.28308676529389,92.37305077968813,92.46301479408237,92.55297880847661,92.64294282287085,92.73290683726509,92.82287085165933,92.91283486605357,93.00279888044783,93.09276289484207,93.18272690923631,93.27269092363055,93.36265493802479,93.45261895241903,93.54258296681327,93.63254698120751,93.72251099560177,93.812475009996,93.90243902439025,93.99240303878449,94.08236705317873,94.17233106757297,94.26229508196721,94.35225909636145,94.44222311075569,94.53218712514995,94.62215113954419,94.71211515393843,94.80207916833267,94.89204318272691,94.98200719712115,95.07197121151539,95.16193522590963,95.25189924030389,95.34186325469813,95.43182726909237,95.5217912834866,95.61175529788085,95.70171931227509,95.79168332666933,95.88164734106357,95.97161135545781,96.06157536985206,96.1515393842463,96.24150339864055,96.33146741303479,96.42143142742903,96.51139544182327,96.60135945621751,96.69132347061175,96.781287485006,96.87125149940024,96.96121551379449,97.05117952818873,97.14114354258297,97.23110755697721,97.32107157137145,97.41103558576569,97.50099960015993,97.59096361455418,97.68092762894842,97.77089164334267,97.8608556577369,97.95081967213115,98.04078368652539,98.13074770091963,98.22071171531387,98.31067572970812,98.40063974410236,98.4906037584966,98.58056777289084,98.67053178728509,98.76049580167933,98.85045981607357,98.94042383046781,99.03038784486206,99.1203518592563,99.21031587365054,99.30027988804478,99.39024390243902,99.48020791683327,99.5701719312275,99.66013594562175,99.75009996001599,99.84006397441024,99.93002798880448,100.01999200319872,100.10995601759296,100.1999200319872,100.28988404638145,100.37984806077569,100.46981207516993,100.55977608956418,100.64974010395842,100.73970411835266,100.8296681327469,100.91963214714114,101.00959616153538,101.09956017592962,101.18952419032387,101.2794882047181,101.36945221911236,101.4594162335066,101.54938024790084,101.63934426229508,101.72930827668932,101.81927229108356,101.9092363054778,101.99920031987205,102.0891643342663,102.17912834866054,102.26909236305478,102.35905637744902,102.44902039184326,102.5389844062375,102.62894842063174,102.71891243502598,102.80887644942023,102.89884046381448,102.98880447820872,103.07876849260296,103.1687325069972,103.25869652139144,103.34866053578568,103.43862455017992,103.52858856457416,103.61855257896842,103.70851659336266,103.7984806077569,103.88844462215114,103.97840863654538,104.06837265093962,104.15833666533386,104.2483006797281,104.33826469412234,104.4282287085166,104.51819272291084,104.60815673730508,104.69812075169932,104.78808476609356,104.8780487804878,104.96801279488204,105.05797680927628,105.14794082367054,105.23790483806478,105.32786885245902,105.41783286685326,105.5077968812475,105.59776089564174,105.68772491003598,105.77768892443022,105.86765293882446,105.95761695321872,106.04758096761296,106.1375449820072,106.22750899640144,106.31747301079568,106.40743702518992,106.49740103958416,106.5873650539784,106.67732906837266,106.7672930827669,106.85725709716114,106.94722111155538,107.03718512594962,107.12714914034386,107.2171131547381,107.30707716913234,107.3970411835266,107.48700519792084,107.57696921231508,107.66693322670932,107.75689724110356,107.8468612554978,107.93682526989204,108.02678928428628,108.11675329868052,108.20671731307478,108.29668132746902,108.38664534186326,108.4766093562575,108.56657337065174,108.65653738504598,108.74650139944022,108.83646541383446,108.92642942822872,109.01639344262296,109.1063574570172,109.19632147141144,109.28628548580568,109.37624950019992,109.46621351459416,109.5561775289884,109.64614154338264,109.7361055577769,109.82606957217114,109.91603358656538,110.00599760095962,110.09596161535386,110.1859256297481,110.27588964414234,110.36585365853658,110.45581767293083,110.54578168732507,110.63574570171932,110.72570971611356,110.8156737305078,110.90563774490204,110.99560175929628,111.08556577369052,111.17552978808476,111.26549380247901,111.35545781687325,111.4454218312675,111.53538584566174,111.62534986005598,111.71531387445022,111.80527788884446,111.8952419032387,111.98520591763295,112.0751699320272,112.16513394642143,112.25509796081568,112.34506197520992,112.43502598960416,112.5249900039984,112.61495401839264,112.70491803278688,112.79488204718113,112.88484606157537,112.97481007596961,113.06477409036385,113.1547381047581,113.24470211915234,113.33466613354658,113.42463014794082,113.51459416233507,113.60455817672931,113.69452219112355,113.7844862055178,113.87445021991203,113.96441423430628,114.05437824870052,114.14434226309476,114.23430627748901,114.32427029188325,114.41423430627749,114.50419832067173,114.59416233506597,114.68412634946021,114.77409036385446,114.8640543782487,114.95401839264294,115.04398240703719,115.13394642143143,115.22391043582567,115.31387445021991,115.40383846461415,115.4938024790084,115.58376649340263,115.67373050779688,115.76369452219113,115.85365853658537,115.94362255097961,116.03358656537385,116.1235505797681,116.21351459416233,116.30347860855657,116.39344262295081,116.48340663734506,116.57337065173931,116.66333466613355,116.75329868052779,116.84326269492203,116.93322670931627,117.02319072371051,117.11315473810475,117.203118752499,117.29308276689325,117.38304678128749,117.47301079568173,117.56297481007597,117.65293882447021,117.74290283886445,117.8328668532587,117.92283086765293,118.01279488204717,118.10275889644143,118.19272291083567,118.28268692522991,118.37265093962415,118.46261495401839,118.55257896841263,118.64254298280687,118.73250699720111,118.82247101159537,118.91243502598961,119.00239904038385,119.09236305477809,119.18232706917233,119.27229108356657,119.36225509796081,119.45221911235505,119.5421831267493,119.63214714114355,119.72211115553779,119.81207516993203,119.90203918432627,119.99200319872051,120.08196721311475,120.17193122750899,120.26189524190323,120.35185925629749,120.44182327069173,120.53178728508597,120.62175129948021,120.71171531387445,120.80167932826869,120.89164334266293,120.98160735705717,121.07157137145141,121.16153538584567,121.25149940023991,121.34146341463415,121.43142742902839,121.52139144342263,121.61135545781687,121.70131947221111,121.79128348660535,121.8812475009996,121.97121151539385,122.06117552978809,122.15113954418233,122.24110355857657,122.33106757297081,122.42103158736505,122.51099560175929,122.60095961615355,122.69092363054779,122.78088764494203,122.87085165933627,122.96081567373051,123.05077968812475,123.14074370251899,123.23070771691323,123.32067173130747,123.41063574570173,123.50059976009597,123.5905637744902,123.68052778888445,123.77049180327869,123.86045581767293,123.95041983206717,124.04038384646141,124.13034786085566,124.2203118752499,124.31027588964415,124.40023990403839,124.49020391843263,124.58016793282687,124.67013194722111,124.76009596161535,124.85005997600959,124.94002399040384,125.02998800479808,125.11995201919233,125.20991603358657,125.2998800479808,125.38984406237505,125.47980807676929,125.56977209116353,125.65973610555778,125.74970011995202,125.83966413434626,125.9296281487405,126.01959216313475,126.10955617752899,126.19952019192323,126.28948420631747,126.37944822071171,126.46941223510596,126.5593762495002,126.64934026389444,126.73930427828869,126.82926829268293,126.91923230707717,127.0091963214714,127.09916033586565,127.1891243502599,127.27908836465414,127.36905237904838,127.45901639344262,127.54898040783686,127.6389444222311,127.72890843662535,127.81887245101959,127.90883646541383,127.99880047980808,128.0887644942023,128.17872850859655,128.2686925229908,128.35865653738506,128.4486205517793,128.53858456617354,128.62854858056778,128.71851259496202,128.80847660935626,128.8984406237505,128.98840463814474,129.07836865253898,129.16833266693322,129.25829668132747,129.3482606957217,129.43822471011595,129.5281887245102,129.61815273890443,129.70811675329867,129.7980807676929,129.88804478208718,129.97800879648142,130.06797281087566,130.1579368252699,130.24790083966414,130.33786485405838,130.42782886845262,130.51779288284686,130.6077568972411,130.69772091163534,130.78768492602958,130.87764894042382,130.96761295481807,131.0575769692123,131.14754098360655,131.2375049980008,131.32746901239503,131.4174330267893,131.50739704118354,131.59736105557778,131.68732506997202,131.77728908436626,131.8672530987605,131.95721711315474,132.04718112754898,132.13714514194322,132.22710915633746,132.3170731707317,132.40703718512594,132.49700119952018,132.58696521391443,132.67692922830867,132.7668932427029,132.85685725709718,132.94682127149142,133.03678528588566,133.1267493002799,133.21671331467414,133.30667732906838,133.39664134346262,133.48660535785686,133.5765693722511,133.66653338664534,133.75649740103958,133.84646141543382,133.93642542982806,134.0263894442223,134.11635345861654,134.20631747301078,134.29628148740503,134.3862455017993,134.47620951619353,134.56617353058778,134.65613754498202,134.74610155937626,134.8360655737705,134.92602958816474,135.01599360255898,135.10595761695322,135.19592163134746,135.2858856457417,135.37584966013594,135.46581367453018,135.55577768892442,135.64574170331866,135.7357057177129,135.82566973210714,135.9156337465014,136.00559776089565,136.0955617752899,136.18552578968414,136.27548980407838,136.36545381847262,136.45541783286686,136.5453818472611,136.63534586165534,136.72530987604958,136.81527389044382,136.90523790483806,136.9952019192323,137.08516593362654,137.17512994802078,137.26509396241502,137.35505797680926,137.44502199120353,137.53498600559777,137.624950019992,137.71491403438625,137.8048780487805,137.89484206317474,137.98480607756898,138.07477009196322,138.16473410635746,138.2546981207517,138.34466213514594,138.43462614954018,138.52459016393442,138.61455417832866,138.7045181927229,138.79448220711714,138.88444622151138,138.97441023590565,139.0643742502999,139.15433826469413,139.24430227908837,139.3342662934826,139.42423030787685,139.5141943222711,139.60415833666534,139.69412235105958,139.78408636545382,139.87405037984806,139.9640143942423,140.05397840863654,140.14394242303078,140.23390643742502,140.32387045181926,140.4138344662135,140.50379848060777,140.593762495002,140.68372650939625,140.7736905237905,140.86365453818473,140.95361855257897,141.0435825669732,141.13354658136745,141.2235105957617,141.31347461015594,141.40343862455018,141.49340263894442,141.58336665333866,141.6733306677329,141.76329468212714,141.85325869652138,141.94322271091562,142.0331867253099,142.12315073970413,142.21311475409837,142.3030787684926,142.39304278288685,142.4830067972811,142.57297081167533,142.66293482606957,142.7528988404638,142.84286285485805,142.9328268692523,143.02279088364654,143.11275489804078,143.20271891243502,143.29268292682926,143.3826469412235,143.47261095561774,143.562574970012,143.65253898440625,143.7425029988005,143.83246701319473,143.92243102758897,144.0123950419832,144.10235905637745,144.1923230707717,144.28228708516593,144.37225109956017,144.46221511395441,144.55217912834866,144.6421431427429,144.73210715713714,144.82207117153138,144.91203518592562,145.00199920031986,145.09196321471413,145.18192722910837,145.2718912435026,145.36185525789685,145.4518192722911,145.54178328668533,145.63174730107957,145.7217113154738,145.81167532986805,145.9016393442623,145.99160335865653,146.08156737305077,146.17153138744501,146.26149540183926,146.3514594162335,146.44142343062774,146.53138744502198,146.62135145941625,146.7113154738105,146.80127948820473,146.89124350259897,146.9812075169932,147.07117153138745,147.1611355457817,147.25109956017593,147.34106357457017,147.4310275889644,147.52099160335865,147.6109556177529,147.70091963214713,147.79088364654137,147.88084766093561,147.97081167532986,148.06077568972412,148.15073970411837,148.2407037185126,148.33066773290685,148.4206317473011,148.51059576169533,148.60055977608957,148.6905237904838,148.78048780487805,148.8704518192723,148.96041583366653,149.05037984806077,149.140343862455,149.23030787684925,149.3202718912435,149.41023590563773,149.50019992003197,149.59016393442624,149.68012794882048,149.77009196321472,149.86005597760897,149.9500199920032,150.03998400639745,150.1299480207917,150.21991203518593,150.30987604958017,150.3998400639744,150.48980407836865,150.5797680927629,150.66973210715713,150.75969612155137,150.8496601359456,150.93962415033985,151.0295881647341,151.11955217912836,151.2095161935226,151.29948020791684,151.38944422231108,151.47940823670532,151.56937225109957,151.6593362654938,151.74930027988805,151.8392642942823,151.92922830867653,152.01919232307077,152.109156337465,152.19912035185925,152.2890843662535,152.37904838064773,152.46901239504197,152.5589764094362,152.64894042383048,152.73890443822472,152.82886845261896,152.9188324670132,153.00879648140744,153.09876049580168,153.18872451019593,153.27868852459017,153.3686525389844,153.45861655337865,153.5485805677729,153.63854458216713,153.72850859656137,153.8184726109556,153.90843662534985,153.9984006397441,154.08836465413833,154.1783286685326,154.26829268292684,154.35825669732108,154.44822071171532,154.53818472610956,154.6281487405038,154.71811275489804,154.80807676929228,154.89804078368653,154.98800479808077,155.077968812475,155.16793282686925,155.2578968412635,155.34786085565773,155.43782487005197,155.5277888844462,155.61775289884045,155.70771691323472,155.79768092762896,155.8876449420232,155.97760895641744,156.06757297081168,156.15753698520592,156.24750099960016,156.3374650139944,156.42742902838864,156.51739304278289,156.60735705717713,156.69732107157137,156.7872850859656,156.87724910035985,156.9672131147541,157.05717712914833,157.14714114354257,157.23710515793684,157.32706917233108,157.41703318672532,157.50699720111956,157.5969612155138,157.68692522990804,157.77688924430228,157.86685325869652,157.95681727309076,158.046781287485,158.13674530187924,158.22670931627349,158.31667333066773,158.40663734506197,158.4966013594562,158.58656537385045,158.6765293882447,158.76649340263896,158.8564574170332,158.94642143142744,159.03638544582168,159.12634946021592,159.21631347461016,159.3062774890044,159.39624150339864,159.48620551779288,159.57616953218712,159.66613354658136,159.7560975609756,159.84606157536984,159.93602558976409,160.02598960415833,160.11595361855257,160.2059176329468,160.29588164734108,160.38584566173532,160.47580967612956,160.5657736905238,160.65573770491804,160.74570171931228,160.83566573370652,160.92562974810076,161.015593762495,161.10555777688924,161.19552179128348,161.28548580567772,161.37544982007196,161.4654138344662,161.55537784886045,161.64534186325469,161.73530587764893,161.8252698920432,161.91523390643744,162.00519792083168,162.09516193522592,162.18512594962016,162.2750899640144,162.36505397840864,162.45501799280288,162.54498200719712,162.63494602159136,162.7249100359856,162.81487405037984,162.90483806477408,162.99480207916832,163.08476609356256,163.1747301079568,163.26469412235107,163.35465813674531,163.44462215113955,163.5345861655338,163.62455017992804,163.71451419432228,163.80447820871652,163.89444222311076,163.984406237505,164.07437025189924,164.16433426629348,164.25429828068772,164.34426229508196,164.4342263094762,164.52419032387044,164.61415433826468,164.70411835265892,164.7940823670532,164.88404638144743,164.97401039584167,165.06397441023591,165.15393842463016,165.2439024390244,165.33386645341864,165.42383046781288,165.51379448220712,165.60375849660136,165.6937225109956,165.78368652538984,165.87365053978408,165.96361455417832,166.05357856857256,166.1435425829668,166.23350659736104,166.3234706117553,166.41343462614955,166.5033986405438,166.59336265493803,166.68332666933227,166.77329068372651,166.86325469812076,166.953218712515,167.04318272690924,167.13314674130348,167.22311075569772,167.31307477009196,167.4030387844862,167.49300279888044,167.58296681327468,167.67293082766892,167.76289484206316,167.85285885645743,167.94282287085167,168.0327868852459,168.12275089964015,168.2127149140344,168.30267892842863,168.39264294282287,168.48260695721711,168.57257097161136,168.6625349860056,168.75249900039984,168.84246301479408,168.93242702918832,169.02239104358256,169.1123550579768,169.20231907237104,169.29228308676528,169.38224710115955,169.4722111155538,169.56217512994803,169.65213914434227,169.7421031587365,169.83206717313075,169.922031187525,170.01199520191923,170.10195921631347,170.19192323070772,170.28188724510196,170.3718512594962,170.46181527389044,170.55177928828468,170.64174330267892,170.73170731707316,170.8216713314674,170.91163534586167,171.0015993602559,171.09156337465015,171.1815273890444,171.27149140343863,171.36145541783287,171.4514194322271,171.54138344662135,171.6313474610156,171.72131147540983,171.81127548980407,171.90123950419832,171.99120351859256,172.0811675329868,172.17113154738104,172.26109556177528,172.35105957616952,172.4410235905638,172.53098760495803,172.62095161935227,172.7109156337465,172.80087964814075,172.890843662535,172.98080767692923,173.07077169132347,173.1607357057177,173.25069972011195,173.3406637345062,173.43062774890043,173.52059176329468,173.61055577768892,173.70051979208316,173.7904838064774,173.88044782087164,173.9704118352659,174.06037584966015,174.1503398640544,174.24030387844863,174.33026789284287,174.4202319072371,174.51019592163135,174.6001599360256,174.69012395041983,174.78008796481407,174.8700519792083,174.96001599360255,175.0499800079968,175.13994402239103,175.22990803678528,175.31987205117952,175.40983606557376,175.49980007996803,175.58976409436227,175.6797281087565,175.76969212315075,175.859656137545,175.94962015193923,176.03958416633347,176.1295481807277,176.21951219512195,176.3094762095162,176.39944022391043,176.48940423830467,176.5793682526989,176.66933226709315,176.7592962814874,176.84926029588163,176.93922431027588,177.02918832467014,177.11915233906439,177.20911635345863,177.29908036785287,177.3890443822471,177.47900839664135,177.5689724110356,177.65893642542983,177.74890043982407,177.8388644542183,177.92882846861255,178.0187924830068,178.10875649740103,178.19872051179527,178.2886845261895,178.37864854058375,178.46861255497802,178.55857656937226,178.6485405837665,178.73850459816074,178.82846861255499,178.91843262694923,179.00839664134347,179.0983606557377,179.18832467013195,179.2782886845262,179.36825269892043,179.45821671331467,179.5481807277089,179.63814474210315,179.7281087564974,179.81807277089163,179.90803678528587,179.99800079968014,180.08796481407438,180.17792882846862,180.26789284286286,180.3578568572571,180.44782087165134,180.53778488604559,180.62774890043983,180.71771291483407,180.8076769292283,180.89764094362255,180.9876049580168,181.07756897241103,181.16753298680527,181.2574970011995,181.34746101559375,181.437425029988,181.52738904438226,181.6173530587765,181.70731707317074,181.79728108756498,181.88724510195922,181.97720911635346,182.0671731307477,182.15713714514195,182.2471011595362,182.33706517393043,182.42702918832467,182.5169932027189,182.60695721711315,182.6969212315074,182.78688524590163,182.87684926029587,182.9668132746901,183.05677728908438,183.14674130347862,183.23670531787286,183.3266693322671,183.41663334666134,183.50659736105558,183.59656137544982,183.68652538984406,183.7764894042383,183.86645341863255,183.9564174330268,184.04638144742103,184.13634546181527,184.2263094762095,184.31627349060375,184.406237504998,184.49620151939223,184.5861655337865,184.67612954818074,184.76609356257498,184.85605757696922,184.94602159136346,185.0359856057577,185.12594962015194,185.21591363454618,185.30587764894042,185.39584166333466,185.4858056777289,185.57576969212315,185.6657337065174,185.75569772091163,185.84566173530587,185.9356257497001,186.02558976409435,186.11555377848862,186.20551779288286,186.2954818072771,186.38544582167134,186.47540983606558,186.56537385045982,186.65533786485406,186.7453018792483,186.83526589364254,186.92522990803678,187.01519392243102,187.10515793682526,187.1951219512195,187.28508596561375,187.375049980008,187.46501399440223,187.55497800879647,187.64494202319074,187.73490603758498,187.82487005197922,187.91483406637346,188.0047980807677,188.09476209516194,188.18472610955618,188.27469012395042,188.36465413834466,188.4546181527389,188.54458216713314,188.63454618152738,188.72451019592162,188.81447421031586,188.9044382247101,188.99440223910435,189.0843662534986,189.17433026789286,189.2642942822871,189.35425829668134,189.44422231107558,189.53418632546982,189.62415033986406,189.7141143542583,189.80407836865254,189.89404238304678,189.98400639744102,190.07397041183526,190.1639344262295,190.25389844062374,190.34386245501798,190.43382646941222,190.52379048380647,190.6137544982007,190.70371851259497,190.79368252698922,190.88364654138346,190.9736105557777,191.06357457017194,191.15353858456618,191.24350259896042,191.33346661335466,191.4234306277489,191.51339464214314,191.60335865653738,191.69332267093162,191.78328668532586,191.8732506997201,191.96321471411434,192.05317872850858,192.14314274290282,192.2331067572971,192.32307077169133,192.41303478608557,192.50299880047982,192.59296281487406,192.6829268292683,192.77289084366254,192.86285485805678,192.95281887245102,193.04278288684526,193.1327469012395,193.22271091563374,193.31267493002798,193.40263894442222,193.49260295881646,193.5825669732107,193.67253098760497,193.7624950019992,193.85245901639345,193.9424230307877,194.03238704518193,194.12235105957618,194.21231507397042,194.30227908836466,194.3922431027589,194.48220711715314,194.57217113154738,194.66213514594162,194.75209916033586,194.8420631747301,194.93202718912434,195.02199120351858,195.11195521791282,195.2019192323071,195.29188324670133,195.38184726109557,195.4718112754898,195.56177528988405,195.6517393042783,195.74170331867253,195.83166733306678,195.92163134746102,196.01159536185526,196.1015593762495,196.19152339064374,196.28148740503798,196.37145141943222,196.46141543382646,196.5513794482207,196.64134346261494,196.7313074770092,196.82127149140345,196.9112355057977,197.00119952019193,197.09116353458617,197.1811275489804,197.27109156337465,197.3610555777689,197.45101959216314,197.54098360655738,197.63094762095162,197.72091163534586,197.8108756497401,197.90083966413434,197.99080367852858,198.08076769292282,198.17073170731706,198.26069572171133,198.35065973610557,198.4406237504998,198.53058776489405,198.6205517792883,198.71051579368253,198.80047980807677,198.890443822471,198.98040783686525,199.0703718512595,199.16033586565374,199.25029988004798,199.34026389444222,199.43022790883646,199.5201919232307,199.61015593762494,199.70011995201918,199.79008396641345,199.8800479808077,199.97001199520193,200.05997600959617,200.1499400239904,200.23990403838465,200.3298680527789,200.41983206717313,200.50979608156737,200.5997600959616,200.68972411035585,200.7796881247501,200.86965213914434,200.95961615353858,201.04958016793282,201.13954418232706,201.2295081967213,201.31947221111557,201.4094362255098,201.49940023990405,201.5893642542983,201.67932826869253,201.76929228308677,201.859256297481,201.94922031187525,202.0391843262695,202.12914834066373,202.21911235505797,202.3090763694522,202.39904038384645,202.4890043982407,202.57896841263494,202.66893242702918,202.75889644142342,202.8488604558177,202.93882447021193,203.02878848460617,203.1187524990004,203.20871651339465,203.2986805277889,203.38864454218313,203.47860855657737,203.5685725709716,203.65853658536585,203.7485005997601,203.83846461415433,203.92842862854857,204.0183926429428,204.10835665733705,204.1983206717313,204.28828468612554,204.3782487005198,204.46821271491405,204.5581767293083,204.64814074370253,204.73810475809677,204.828068772491,204.91803278688525,205.0079968012795,205.09796081567373,205.18792483006797,205.2778888444622,205.36785285885645,205.4578168732507,205.54778088764493,205.63774490203917,205.72770891643341,205.81767293082765,205.90763694522192,205.99760095961616,206.0875649740104,206.17752898840465,206.2674930027989,206.35745701719313,206.44742103158737,206.5373850459816,206.62734906037585,206.7173130747701,206.80727708916433,206.89724110355857,206.9872051179528,207.07716913234705,207.1671331467413,207.25709716113553,207.34706117552977,207.43702518992404,207.52698920431828,207.61695321871252,207.70691723310676,207.796881247501,207.88684526189525,207.9768092762895,208.06677329068373,208.15673730507797,208.2467013194722,208.33666533386645,208.4266293482607,208.51659336265493,208.60655737704917,208.6965213914434,208.78648540583765,208.87644942023192,208.96641343462616,209.0563774490204,209.14634146341464,209.23630547780888,209.32626949220312,209.41623350659737,209.5061975209916,209.59616153538585,209.6861255497801,209.77608956417433,209.86605357856857,209.9560175929628,210.04598160735705,210.1359456217513,210.22590963614553,210.31587365053977,210.40583766493404,210.49580167932828,210.58576569372252,210.67572970811676,210.765693722511,210.85565773690524,210.94562175129948,211.03558576569372,211.12554978008797,211.2155137944822,211.30547780887645,211.3954418232707,211.48540583766493,211.57536985205917,211.6653338664534,211.75529788084765,211.8452618952419,211.93522590963616,212.0251899240304,212.11515393842464,212.20511795281888,212.29508196721312,212.38504598160736,212.4750099960016,212.56497401039584,212.65493802479008,212.74490203918432,212.83486605357857,212.9248300679728,213.01479408236705,213.1047580967613,213.19472211115553,213.28468612554977,213.374650139944,213.46461415433828,213.55457816873252,213.64454218312676,213.734506197521,213.82447021191524,213.91443422630948,214.00439824070372,214.09436225509796,214.1843262694922,214.27429028388644,214.36425429828068,214.45421831267493,214.54418232706917,214.6341463414634,214.72411035585765,214.8140743702519,214.90403838464613,214.9940023990404,215.08396641343464,215.17393042782888,215.26389444222312,215.35385845661736,215.4438224710116,215.53378648540584,215.62375049980008,215.71371451419432,215.80367852858856,215.8936425429828,215.98360655737704,216.07357057177128,216.16353458616553,216.25349860055977,216.343462614954,216.43342662934825,216.52339064374252,216.61335465813676,216.703318672531,216.79328268692524,216.88324670131948,216.97321071571372,217.06317473010796,217.1531387445022,217.24310275889644,217.33306677329068,217.42303078768492,217.51299480207916,217.6029588164734,217.69292283086764,217.78288684526188,217.87285085965613,217.96281487405037,218.05277888844464,218.14274290283888,218.23270691723312,218.32267093162736,218.4126349460216,218.50259896041584,218.59256297481008,218.68252698920432,218.77249100359856,218.8624550179928,218.95241903238704,219.04238304678128,219.13234706117552,219.22231107556976,219.312275089964,219.40223910435824,219.49220311875249,219.58216713314675,219.672131147541,219.76209516193524,219.85205917632948,219.94202319072372,220.03198720511796,220.1219512195122,220.21191523390644,220.30187924830068,220.39184326269492,220.48180727708916,220.5717712914834,220.66173530587764,220.75169932027188,220.84166333466612,220.93162734906036,221.0215913634546,221.11155537784887,221.2015193922431,221.29148340663735,221.3814474210316,221.47141143542584,221.56137544982008,221.65133946421432,221.74130347860856,221.8312674930028,221.92123150739704,222.01119552179128,222.10115953618552,222.19112355057976,222.281087564974,222.37105157936824,222.46101559376248,222.55097960815675,222.640943622551,222.73090763694523,222.82087165133947,222.9108356657337,223.00079968012795,223.0907636945222,223.18072770891644,223.27069172331068,223.36065573770492,223.45061975209916,223.5405837664934,223.63054778088764,223.72051179528188,223.81047580967612,223.90043982407036,223.9904038384646,224.08036785285887,224.1703318672531,224.26029588164735,224.3502598960416,224.44022391043583,224.53018792483007,224.62015193922431,224.71011595361855,224.8000799680128,224.89004398240704,224.98000799680128,225.06997201119552,225.15993602558976,225.249900039984,225.33986405437824,225.42982806877248,225.51979208316672,225.609756097561,225.69972011195523,225.78968412634947,225.8796481407437,225.96961215513795,226.0595761695322,226.14954018392643,226.23950419832067,226.32946821271491,226.41943222710916,226.5093962415034,226.59936025589764,226.68932427029188,226.77928828468612,226.86925229908036,226.9592163134746,227.04918032786884,227.1391443422631,227.22910835665735,227.3190723710516,227.40903638544583,227.49900039984007,227.5889644142343,227.67892842862855,227.7688924430228,227.85885645741703,227.94882047181127,228.03878448620551,228.12874850059976,228.218712514994,228.30867652938824,228.39864054378248,228.48860455817672,228.57856857257096,228.66853258696523,228.75849660135947,228.8484606157537,228.93842463014795,229.0283886445422,229.11835265893643,229.20831667333067,229.2982806877249,229.38824470211915,229.4782087165134,229.56817273090763,229.65813674530187,229.74810075969611,229.83806477409036,229.9280287884846,230.01799280287884,230.10795681727308,230.19792083166735,230.2878848460616,230.37784886045583,230.46781287485007,230.5577768892443,230.64774090363855,230.7377049180328,230.82766893242703,230.91763294682127,231.0075969612155,231.09756097560975,231.187524990004,231.27748900439823,231.36745301879247,231.45741703318672,231.54738104758096,231.6373450619752,231.72730907636947,231.8172730907637,231.90723710515795,231.9972011195522,232.08716513394643,232.17712914834067,232.2670931627349,232.35705717712915,232.4470211915234,232.53698520591763,232.62694922031187,232.7169132347061,232.80687724910035,232.8968412634946,232.98680527788883,233.07676929228307,233.16673330667732,233.25669732107158,233.34666133546583,233.43662534986007,233.5265893642543,233.61655337864855,233.7065173930428,233.79648140743703,233.88644542183127,233.9764094362255,234.06637345061975,234.156337465014,234.24630147940823,234.33626549380247,234.4262295081967,234.51619352259095,234.6061575369852,234.69612155137943,234.7860855657737,234.87604958016794,234.96601359456218,235.05597760895643,235.14594162335067,235.2359056377449,235.32586965213915,235.4158336665334,235.50579768092763,235.59576169532187,235.6857257097161,235.77568972411035,235.8656537385046,235.95561775289883,236.04558176729307,236.1355457816873,236.22550979608155,236.31547381047582,236.40543782487006,236.4954018392643,236.58536585365854,236.67532986805278,236.76529388244703,236.85525789684127,236.9452219112355,237.03518592562975,237.125149940024,237.21511395441823,237.30507796881247,237.3950419832067,237.48500599760095,237.5749700119952,237.66493402638943,237.7548980407837,237.84486205517794,237.93482606957218,238.02479008396642,238.11475409836066,238.2047181127549,238.29468212714914,238.38464614154339,238.47461015593763,238.56457417033187,238.6545381847261,238.74450219912035,238.8344662135146,238.92443022790883,239.01439424230307,239.1043582566973,239.19432227109155,239.28428628548582,239.37425029988006,239.4642143142743,239.55417832866854,239.64414234306278,239.73410635745702,239.82407037185126,239.9140343862455,240.00399840063974,240.09396241503399,240.18392642942823,240.27389044382247,240.3638544582167,240.45381847261095,240.5437824870052,240.63374650139943,240.72371051579367,240.81367453018794,240.90363854458218,240.99360255897642,241.08356657337066,241.1735305877649,241.26349460215914,241.35345861655338,241.44342263094762,241.53338664534186,241.6233506597361,241.71331467413034,241.80327868852459,241.89324270291883,241.98320671731307,242.0731707317073,242.16313474610155,242.2530987604958,242.34306277489006,242.4330267892843,242.52299080367854,242.61295481807278,242.70291883246702,242.79288284686126,242.8828468612555,242.97281087564974,243.06277489004398,243.15273890443822,243.24270291883246,243.3326669332267,243.42263094762095,243.51259496201519,243.60255897640943,243.69252299080367,243.7824870051979,243.87245101959218,243.96241503398642,244.05237904838066,244.1423430627749,244.23230707716914,244.32227109156338,244.41223510595762,244.50219912035186,244.5921631347461,244.68212714914034,244.77209116353458,244.86205517792882,244.95201919232306,245.0419832067173,245.13194722111155,245.2219112355058,245.31187524990003,245.4018392642943,245.49180327868854,245.58176729308278,245.67173130747702,245.76169532187126,245.8516593362655,245.94162335065974,246.03158736505398,246.12155137944822,246.21151539384246,246.3014794082367,246.39144342263094,246.48140743702518,246.57137145141942,246.66133546581366,246.7512994802079,246.84126349460215,246.93122750899641,247.02119152339066,247.1111555377849,247.20111955217914,247.29108356657338,247.38104758096762,247.47101159536186,247.5609756097561,247.65093962415034,247.74090363854458,247.83086765293882,247.92083166733306,248.0107956817273,248.10075969612154,248.19072371051578,248.28068772491002,248.37065173930426,248.46061575369853,248.55057976809277,248.64054378248701,248.73050779688126,248.8204718112755,248.91043582566974,249.00039984006398,249.09036385445822,249.18032786885246,249.2702918832467,249.36025589764094,249.45021991203518,249.54018392642942,249.63014794082366,249.7201119552179,249.81007596961214,249.90003998400638,249.99000399840065,250.0799680127949,250.16993202718913,250.25989604158337,250.34986005597762,250.43982407037186,250.5297880847661,250.61975209916034,250.70971611355458,250.79968012794882,250.88964414234306,250.9796081567373,251.06957217113154,251.15953618552578,251.24950019992002,251.33946421431426,251.4294282287085,251.51939224310277,251.609356257497,251.69932027189125,251.7892842862855,251.87924830067973,251.96921231507397,252.05917632946822,252.14914034386246,252.2391043582567,252.32906837265094,252.41903238704518,252.50899640143942,252.59896041583366,252.6889244302279,252.77888844462214,252.86885245901638,252.95881647341065,253.0487804878049,253.13874450219913,253.22870851659337,253.3186725309876,253.40863654538185,253.4986005597761,253.58856457417033,253.67852858856457,253.76849260295882,253.85845661735306,253.9484206317473,254.03838464614154,254.12834866053578,254.21831267493002,254.30827668932426,254.3982407037185,254.48820471811277,254.578168732507,254.66813274690125,254.7580967612955,254.84806077568973,254.93802479008397,255.0279888044782,255.11795281887245,255.2079168332667,255.29788084766093,255.38784486205518,255.47780887644942,255.56777289084366,255.6577369052379,255.74770091963214,255.83766493402638,255.92762894842062,256.0175929628149,256.10755697720913,256.19752099160337,256.2874850059976,256.37744902039185,256.4674130347861,256.55737704918033,256.6473410635746,256.7373050779688,256.82726909236305,256.9172331067573,257.00719712115153,257.0971611355458,257.18712514994,257.27708916433426,257.3670531787285,257.45701719312274,257.546981207517,257.6369452219112,257.72690923630546,257.8168732506997,257.90683726509394,257.9968012794882,258.0867652938824,258.17672930827666,258.2666933226709,258.3566573370652,258.44662135145944,258.5365853658537,258.6265493802479,258.71651339464216,258.8064774090364,258.89644142343064,258.9864054378249,259.0763694522191,259.16633346661337,259.2562974810076,259.34626149540185,259.4362255097961,259.52618952419033,259.61615353858457,259.7061175529788,259.79608156737305,259.8860455817673,259.97600959616153,260.0659736105558,260.15593762495,260.24590163934425,260.3358656537385,260.42582966813274,260.515793682527,260.6057576969212,260.69572171131546,260.7856857257097,260.87564974010394,260.9656137544982,261.0555777688924,261.14554178328666,261.2355057976809,261.3254698120752,261.41543382646944,261.5053978408637,261.5953618552579,261.68532586965216,261.7752898840464,261.86525389844064,261.9552179128349,262.0451819272291,262.13514594162336,262.2251099560176,262.31507397041185,262.4050379848061,262.4950019992003,262.58496601359457,262.6749300279888,262.76489404238305,262.8548580567773,262.94482207117153,263.03478608556577,263.12475009996,263.21471411435425,263.3046781287485,263.39464214314273,263.484606157537,263.5745701719312,263.66453418632545,263.7544982007197,263.84446221511394,263.9344262295082,264.0243902439024,264.11435425829666,264.2043182726909,264.29428228708514,264.38424630147944,264.4742103158737,264.5641743302679,264.65413834466216,264.7441023590564,264.83406637345064,264.9240303878449,265.0139944022391,265.10395841663336,265.1939224310276,265.28388644542184,265.3738504598161,265.4638144742103,265.55377848860456,265.6437425029988,265.73370651739305,265.8236705317873,265.9136345461815,266.00359856057577,266.09356257497,266.18352658936425,266.2734906037585,266.36345461815273,266.45341863254697,266.5433826469412,266.63334666133545,266.7233106757297,266.81327469012393,266.9032387045182,266.9932027189124,267.08316673330665,267.1731307477009,267.26309476209514,267.3530587764894,267.4430227908837,267.5329868052779,267.62295081967216,267.7129148340664,267.80287884846064,267.8928428628549,267.9828068772491,268.07277089164336,268.1627349060376,268.25269892043184,268.3426629348261,268.4326269492203,268.52259096361456,268.6125549780088,268.70251899240304,268.7924830067973,268.8824470211915,268.97241103558576,269.06237504998,269.15233906437425,269.2423030787685,269.3322670931627,269.42223110755697,269.5121951219512,269.60215913634545,269.6921231507397,269.78208716513393,269.87205117952817,269.9620151939224,270.05197920831665,270.1419432227109,270.23190723710513,270.3218712514994,270.4118352658936,270.5017992802879,270.59176329468215,270.6817273090764,270.77169132347063,270.8616553378649,270.9516193522591,271.04158336665336,271.1315473810476,271.22151139544184,271.3114754098361,271.4014394242303,271.49140343862456,271.5813674530188,271.67133146741304,271.7612954818073,271.8512594962015,271.94122351059576,272.03118752499,272.12115153938424,272.2111155537785,272.3010795681727,272.39104358256697,272.4810075969612,272.57097161135545,272.6609356257497,272.7508996401439,272.84086365453817,272.9308276689324,273.02079168332665,273.1107556977209,273.20071971211513,273.29068372650937,273.3806477409036,273.47061175529785,273.56057576969215,273.6505397840864,273.74050379848063,273.8304678128749,273.9204318272691,274.01039584166335,274.1003598560576,274.19032387045183,274.2802878848461,274.3702518992403,274.46021591363456,274.5501799280288,274.64014394242304,274.7301079568173,274.8200719712115,274.91003598560576,275.0,275.08996401439424,275.1799280287885,275.2698920431827,275.35985605757696,275.4498200719712,275.53978408636544,275.6297481007597,275.7197121151539,275.80967612954817,275.8996401439424,275.98960415833665,276.0795681727309,276.1695321871251,276.25949620151937,276.3494602159136,276.43942423030785,276.52938824470215,276.6193522590964,276.70931627349063,276.79928028788487,276.8892443022791,276.97920831667335,277.0691723310676,277.15913634546183,277.2491003598561,277.3390643742503,277.42902838864455,277.5189924030388,277.60895641743303,277.6989204318273,277.7888844462215,277.87884846061576,277.96881247501,278.05877648940424,278.1487405037985,278.2387045181927,278.32866853258696,278.4186325469812,278.50859656137544,278.5985605757697,278.6885245901639,278.77848860455816,278.8684526189524,278.95841663334664,279.0483806477409,279.1383446621351,279.22830867652937,279.3182726909236,279.40823670531785,279.4982007197121,279.5881647341064,279.6781287485006,279.76809276289487,279.8580567772891,279.94802079168335,280.0379848060776,280.12794882047183,280.21791283486607,280.3078768492603,280.39784086365455,280.4878048780488,280.57776889244303,280.6677329068373,280.7576969212315,280.84766093562575,280.93762495002,281.02758896441424,281.1175529788085,281.2075169932027,281.29748100759696,281.3874450219912,281.47740903638544,281.5673730507797,281.6573370651739,281.74730107956816,281.8372650939624,281.92722910835664,282.0171931227509,282.1071571371451,282.19712115153936,282.2870851659336,282.37704918032784,282.4670131947221,282.5569772091163,282.6469412235106,282.73690523790486,282.8268692522991,282.91683326669335,283.0067972810876,283.0967612954818,283.18672530987607,283.2766893242703,283.36665333866455,283.4566173530588,283.54658136745303,283.63654538184727,283.7265093962415,283.81647341063575,283.90643742503,283.99640143942423,284.0863654538185,284.1763294682127,284.26629348260695,284.3562574970012,284.44622151139544,284.5361855257897,284.6261495401839,284.71611355457816,284.8060775689724,284.89604158336664,284.9860055977609,285.0759696121551,285.16593362654936,285.2558976409436,285.34586165533784,285.4358256697321,285.5257896841263,285.61575369852056,285.70571771291486,285.7956817273091,285.88564574170334,285.9756097560976,286.0655737704918,286.15553778488606,286.2455017992803,286.33546581367455,286.4254298280688,286.515393842463,286.60535785685727,286.6953218712515,286.78528588564575,286.87524990004,286.96521391443423,287.05517792882847,287.1451419432227,287.23510595761695,287.3250699720112,287.41503398640543,287.5049980007997,287.5949620151939,287.68492602958815,287.7748900439824,287.86485405837664,287.9548180727709,288.0447820871651,288.13474610155936,288.2247101159536,288.31467413034784,288.4046381447421,288.4946021591363,288.58456617353056,288.6745301879248,288.7644942023191,288.85445821671334,288.9444222311076,289.0343862455018,289.12435025989606,289.2143142742903,289.30427828868454,289.3942423030788,289.484206317473,289.57417033186726,289.6641343462615,289.75409836065575,289.84406237505,289.9340263894442,290.02399040383847,290.1139544182327,290.20391843262695,290.2938824470212,290.38384646141543,290.47381047580967,290.5637744902039,290.65373850459815,290.7437025189924,290.83366653338663,290.9236305477809,291.0135945621751,291.10355857656936,291.1935225909636,291.28348660535784,291.3734506197521,291.4634146341463,291.55337864854056,291.6433426629348,291.7333066773291,291.82327069172334,291.9132347061176,292.0031987205118,292.09316273490606,292.1831267493003,292.27309076369454,292.3630547780888,292.453018792483,292.54298280687726,292.6329468212715,292.72291083566574,292.81287485006,292.9028388644542,292.99280287884847,293.0827668932427,293.17273090763695,293.2626949220312,293.3526589364254,293.44262295081967,293.5325869652139,293.62255097960815,293.7125149940024,293.80247900839663,293.89244302279087,293.9824070371851,294.07237105157935,294.1623350659736,294.25229908036783,294.3422630947621,294.4322271091563,294.52219112355056,294.6121551379448,294.70211915233904,294.79208316673333,294.8820471811276,294.9720111955218,295.06197520991606,295.1519392243103,295.24190323870454,295.3318672530988,295.421831267493,295.51179528188726,295.6017592962815,295.69172331067574,295.78168732507,295.8716513394642,295.96161535385846,296.0515793682527,296.14154338264694,296.2315073970412,296.3214714114354,296.41143542582967,296.5013994402239,296.59136345461815,296.6813274690124,296.7712914834066,296.86125549780087,296.9512195121951,297.04118352658935,297.1311475409836,297.22111155537783,297.3110755697721,297.4010395841663,297.49100359856055,297.5809676129548,297.67093162734903,297.7608956417433,297.8508596561376,297.9408236705318,298.03078768492605,298.1207516993203,298.21071571371454,298.3006797281088,298.390643742503,298.48060775689726,298.5705717712915,298.66053578568574,298.75049980008,298.8404638144742,298.93042782886846,299.0203918432627,299.11035585765694,299.2003198720512,299.2902838864454,299.38024790083966,299.4702119152339,299.56017592962814,299.6501399440224,299.7401039584166,299.83006797281087,299.9200319872051,300.00999600159935,300.0999600159936,300.18992403038783,300.27988804478207,300.3698520591763,300.45981607357055,300.5497800879648,300.63974410235903,300.7297081167533,300.8196721311475,300.9096361455418,300.99960015993605,301.0895641743303,301.17952818872453,301.2694922031188,301.359456217513,301.44942023190725,301.5393842463015,301.62934826069574,301.71931227509,301.8092762894842,301.89924030387846,301.9892043182727,302.07916833266694,302.1691323470612,302.2590963614554,302.34906037584966,302.4390243902439,302.52898840463814,302.6189524190324,302.7089164334266,302.79888044782086,302.8888444622151,302.97880847660934,303.0687724910036,303.1587365053978,303.24870051979207,303.3386645341863,303.42862854858055,303.5185925629748,303.60855657736903,303.69852059176327,303.7884846061575,303.87844862055175,303.96841263494605,304.0583766493403,304.14834066373453,304.23830467812877,304.328268692523,304.41823270691725,304.5081967213115,304.59816073570573,304.6881247501,304.7780887644942,304.86805277888845,304.9580167932827,305.04798080767694,305.1379448220712,305.2279088364654,305.31787285085966,305.4078368652539,305.49780087964814,305.5877648940424,305.6777289084366,305.76769292283086,305.8576569372251,305.94762095161934,306.0375849660136,306.1275489804078,306.21751299480206,306.3074770091963,306.39744102359055,306.4874050379848,306.577369052379,306.66733306677327,306.7572970811675,306.84726109556175,306.93722510995605,307.0271891243503,307.1171531387445,307.20711715313877,307.297081167533,307.38704518192725,307.4770091963215,307.56697321071573,307.65693722510997,307.7469012395042,307.83686525389845,307.9268292682927,308.01679328268693,308.1067572970812,308.1967213114754,308.28668532586966,308.3766493402639,308.46661335465814,308.5565773690524,308.6465413834466,308.73650539784086,308.8264694122351,308.91643342662934,309.0063974410236,309.0963614554178,309.18632546981206,309.2762894842063,309.36625349860054,309.4562175129948,309.546181527389,309.63614554178326,309.7261095561775,309.81607357057175,309.906037584966,309.9960015993603,310.0859656137545,310.17592962814877,310.265893642543,310.35585765693725,310.4458216713315,310.5357856857257,310.62574970011997,310.7157137145142,310.80567772890845,310.8956417433027,310.98560575769693,311.07556977209117,311.1655337864854,311.25549780087965,311.3454618152739,311.43542582966813,311.5253898440624,311.6153538584566,311.70531787285086,311.7952818872451,311.88524590163934,311.9752099160336,312.0651739304278,312.15513794482206,312.2451019592163,312.33506597361054,312.4250299880048,312.514994002399,312.60495801679326,312.6949220311875,312.78488604558174,312.874850059976,312.9648140743702,313.0547780887645,313.14474210315876,313.234706117553,313.32467013194724,313.4146341463415,313.5045981607357,313.59456217512997,313.6845261895242,313.77449020391845,313.8644542183127,313.9544182327069,314.04438224710117,314.1343462614954,314.22431027588965,314.3142742902839,314.40423830467813,314.4942023190724,314.5841663334666,314.67413034786085,314.7640943622551,314.85405837664933,314.9440223910436,315.0339864054378,315.12395041983206,315.2139144342263,315.30387844862054,315.3938424630148,315.483806477409,315.57377049180326,315.6637345061975,315.75369852059174,315.843662534986,315.9336265493802,316.02359056377446,316.11355457816876,316.203518592563,316.29348260695724,316.3834466213515,316.4734106357457,316.56337465013996,316.6533386645342,316.74330267892844,316.8332666933227,316.9232307077169,317.01319472211117,317.1031587365054,317.19312275089965,317.2830867652939,317.3730507796881,317.46301479408237,317.5529788084766,317.64294282287085,317.7329068372651,317.82287085165933,317.9128348660536,318.0027988804478,318.09276289484205,318.1827269092363,318.27269092363053,318.3626549380248,318.452618952419,318.54258296681326,318.6325469812075,318.72251099560174,318.812475009996,318.9024390243902,318.99240303878446,319.0823670531787,319.172331067573,319.26229508196724,319.3522590963615,319.4422231107557,319.53218712514996,319.6221511395442,319.71211515393844,319.8020791683327,319.8920431827269,319.98200719712116,320.0719712115154,320.16193522590964,320.2518992403039,320.3418632546981,320.43182726909237,320.5217912834866,320.61175529788085,320.7017193122751,320.79168332666933,320.88164734106357,320.9716113554578,321.06157536985205,321.1515393842463,321.24150339864053,321.3314674130348,321.421431427429,321.51139544182325,321.6013594562175,321.69132347061174,321.781287485006,321.8712514994002,321.96121551379446,322.0511795281887,322.141143542583,322.23110755697724,322.3210715713715,322.4110355857657,322.50099960015996,322.5909636145542,322.68092762894844,322.7708916433427,322.8608556577369,322.95081967213116,323.0407836865254,323.13074770091964,323.2207117153139,323.3106757297081,323.40063974410236,323.4906037584966,323.58056777289084,323.6705317872851,323.7604958016793,323.85045981607357,323.9404238304678,324.03038784486205,324.1203518592563,324.21031587365053,324.30027988804477,324.390243902439,324.48020791683325,324.5701719312275,324.66013594562173,324.750099960016,324.8400639744102,324.93002798880445,325.0199920031987,325.10995601759294,325.19992003198723,325.2898840463815,325.3798480607757,325.46981207516995,325.5597760895642,325.64974010395844,325.7397041183527,325.8296681327469,325.91963214714116,326.0095961615354,326.09956017592964,326.1895241903239,326.2794882047181,326.36945221911236,326.4594162335066,326.54938024790084,326.6393442622951,326.7293082766893,326.81927229108356,326.9092363054778,326.99920031987205,327.0891643342663,327.1791283486605,327.26909236305477,327.359056377449,327.44902039184325,327.5389844062375,327.62894842063173,327.71891243502597,327.8088764494202,327.89884046381445,327.9888044782087,328.07876849260293,328.1687325069972,328.25869652139147,328.3486605357857,328.43862455017995,328.5285885645742,328.61855257896843,328.7085165933627,328.7984806077569,328.88844462215116,328.9784086365454,329.06837265093964,329.1583366653339,329.2483006797281,329.33826469412236,329.4282287085166,329.51819272291084,329.6081567373051,329.6981207516993,329.78808476609356,329.8780487804878,329.96801279488204,330.0579768092763,330.1479408236705,330.23790483806476,330.327868852459,330.41783286685325,330.5077968812475,330.5977608956417,330.68772491003597,330.7776889244302,330.86765293882445,330.9576169532187,331.04758096761293,331.13754498200717,331.2275089964014,331.3174730107957,331.40743702518995,331.4974010395842,331.58736505397843,331.67732906837267,331.7672930827669,331.85725709716115,331.9472211115554,332.03718512594963,332.1271491403439,332.2171131547381,332.30707716913236,332.3970411835266,332.48700519792084,332.5769692123151,332.6669332267093,332.75689724110356,332.8468612554978,332.93682526989204,333.0267892842863,333.1167532986805,333.20671731307476,333.296681327469,333.38664534186324,333.4766093562575,333.5665733706517,333.65653738504597,333.7465013994402,333.83646541383445,333.9264294282287,334.0163934426229,334.10635745701717,334.1963214714114,334.28628548580565,334.37624950019995,334.4662135145942,334.5561775289884,334.64614154338267,334.7361055577769,334.82606957217115,334.9160335865654,335.00599760095963,335.0959616153539,335.1859256297481,335.27588964414235,335.3658536585366,335.45581767293083,335.5457816873251,335.6357457017193,335.72570971611356,335.8156737305078,335.90563774490204,335.9956017592963,336.0855657736905,336.17552978808476,336.265493802479,336.35545781687324,336.4454218312675,336.5353858456617,336.62534986005596,336.7153138744502,336.80527788884444,336.8952419032387,336.9852059176329,337.07516993202717,337.1651339464214,337.25509796081565,337.34506197520994,337.4350259896042,337.5249900039984,337.61495401839267,337.7049180327869,337.79488204718115,337.8848460615754,337.97481007596963,338.06477409036387,338.1547381047581,338.24470211915235,338.3346661335466,338.42463014794083,338.5145941623351,338.6045581767293,338.69452219112355,338.7844862055178,338.87445021991203,338.9644142343063,339.0543782487005,339.14434226309476,339.234306277489,339.32427029188324,339.4142343062775,339.5041983206717,339.59416233506596,339.6841263494602,339.77409036385444,339.8640543782487,339.9540183926429,340.04398240703716,340.1339464214314,340.22391043582564,340.3138744502199,340.4038384646142,340.4938024790084,340.58376649340266,340.6737305077969,340.76369452219114,340.8536585365854,340.9436225509796,341.03358656537387,341.1235505797681,341.21351459416235,341.3034786085566,341.39344262295083,341.48340663734507,341.5733706517393,341.66333466613355,341.7532986805278,341.84326269492203,341.9332267093163,342.0231907237105,342.11315473810475,342.203118752499,342.29308276689324,342.3830467812875,342.4730107956817,342.56297481007596,342.6529388244702,342.74290283886444,342.8328668532587,342.9228308676529,343.01279488204716,343.1027588964414,343.19272291083564,343.2826869252299,343.3726509396241,343.4626149540184,343.55257896841266,343.6425429828069,343.73250699720114,343.8224710115954,343.9124350259896,344.00239904038386,344.0923630547781,344.18232706917235,344.2722910835666,344.3622550979608,344.45221911235507,344.5421831267493,344.63214714114355,344.7221111555378,344.81207516993203,344.90203918432627,344.9920031987205,345.08196721311475,345.171931227509,345.26189524190323,345.3518592562975,345.4418232706917,345.53178728508595,345.6217512994802,345.71171531387444,345.8016793282687,345.8916433426629,345.98160735705716,346.0715713714514,346.16153538584564,346.2514994002399,346.3414634146341,346.43142742902836,346.52139144342266,346.6113554578169,346.70131947221114,346.7912834866054,346.8812475009996,346.97121151539386,347.0611755297881,347.15113954418234,347.2411035585766,347.3310675729708,347.42103158736506,347.5109956017593,347.60095961615355,347.6909236305478,347.780887644942,347.87085165933627,347.9608156737305,348.05077968812475,348.140743702519,348.23070771691323,348.32067173130747,348.4106357457017,348.50059976009595,348.5905637744902,348.68052778888443,348.7704918032787,348.8604558176729,348.95041983206715,349.0403838464614,349.13034786085564,349.2203118752499,349.3102758896441,349.40023990403836,349.4902039184326,349.5801679328269,349.67013194722114,349.7600959616154,349.8500599760096,349.94002399040386,350.0299880047981,350.11995201919234,350.2099160335866,350.2998800479808,350.38984406237506,350.4798080767693,350.56977209116354,350.6597361055578,350.749700119952,350.83966413434626,350.9296281487405,351.01959216313475,351.109556177529,351.1995201919232,351.28948420631747,351.3794482207117,351.46941223510595,351.5593762495002,351.64934026389443,351.73930427828867,351.8292682926829,351.91923230707715,352.0091963214714,352.09916033586563,352.1891243502599,352.2790883646541,352.36905237904836,352.4590163934426,352.5489804078369,352.63894442223113,352.7289084366254,352.8188724510196,352.90883646541386,352.9988004798081,353.08876449420234,353.1787285085966,353.2686925229908,353.35865653738506,353.4486205517793,353.53858456617354,353.6285485805678,353.718512594962,353.80847660935626,353.8984406237505,353.98840463814474,354.078368652539,354.1683326669332,354.25829668132747,354.3482606957217,354.43822471011595,354.5281887245102,354.6181527389044,354.70811675329867,354.7980807676929,354.88804478208715,354.9780087964814,355.06797281087563,355.15793682526987,355.2479008396641,355.33786485405835,355.4278288684526,355.51779288284683,355.60775689724113,355.6977209116354,355.7876849260296,355.87764894042385,355.9676129548181,356.05757696921233,356.1475409836066,356.2375049980008,356.32746901239506,356.4174330267893,356.50739704118354,356.5973610555778,356.687325069972,356.77728908436626,356.8672530987605,356.95721711315474,357.047181127549,357.1371451419432,357.22710915633746,357.3170731707317,357.40703718512594,357.4970011995202,357.5869652139144,357.67692922830867,357.7668932427029,357.85685725709715,357.9468212714914,358.0367852858856,358.12674930027987,358.2167133146741,358.30667732906835,358.3966413434626,358.48660535785683,358.5765693722511,358.66653338664537,358.7564974010396,358.84646141543385,358.9364254298281,359.02638944422233,359.1163534586166,359.2063174730108,359.29628148740505,359.3862455017993,359.47620951619353,359.5661735305878,359.656137544982,359.74610155937626,359.8360655737705,359.92602958816474,360.015993602559,360.1059576169532,360.19592163134746,360.2858856457417,360.37584966013594,360.4658136745302,360.5557776889244,360.64574170331866,360.7357057177129,360.82566973210714,360.9156337465014,361.0055977608956,361.09556177528987,361.1855257896841,361.27548980407835,361.3654538184726,361.45541783286683,361.54538184726107,361.6353458616553,361.7253098760496,361.81527389044385,361.9052379048381,361.99520191923233,362.08516593362657,362.1751299480208,362.26509396241505,362.3550579768093,362.44502199120353,362.5349860055978,362.624950019992,362.71491403438625,362.8048780487805,362.89484206317474,362.984806077569,363.0747700919632,363.16473410635746,363.2546981207517,363.34466213514594,363.4346261495402,363.5245901639344,363.61455417832866,363.7045181927229,363.79448220711714,363.8844462215114,363.9744102359056,364.06437425029986,364.1543382646941,364.24430227908834,364.3342662934826,364.4242303078768,364.51419432227107,364.6041583366653,364.69412235105955,364.78408636545385,364.8740503798481,364.9640143942423,365.05397840863657,365.1439424230308,365.23390643742505,365.3238704518193,365.41383446621353,365.50379848060777,365.593762495002,365.68372650939625,365.7736905237905,365.86365453818473,365.953618552579,366.0435825669732,366.13354658136745,366.2235105957617,366.31347461015594,366.4034386245502,366.4934026389444,366.58336665333866,366.6733306677329,366.76329468212714,366.8532586965214,366.9432227109156,367.03318672530986,367.1231507397041,367.21311475409834,367.3030787684926,367.3930427828868,367.48300679728106,367.5729708116753,367.66293482606955,367.75289884046384,367.8428628548581,367.9328268692523,368.02279088364656,368.1127548980408,368.20271891243505,368.2926829268293,368.3826469412235,368.47261095561777,368.562574970012,368.65253898440625,368.7425029988005,368.83246701319473,368.92243102758897,369.0123950419832,369.10235905637745,369.1923230707717,369.28228708516593,369.3722510995602,369.4622151139544,369.55217912834866,369.6421431427429,369.73210715713714,369.8220711715314,369.9120351859256,370.00199920031986,370.0919632147141,370.18192722910834,370.2718912435026,370.3618552578968,370.45181927229106,370.5417832866853,370.63174730107954,370.7217113154738,370.8116753298681,370.9016393442623,370.99160335865656,371.0815673730508,371.17153138744504,371.2614954018393,371.3514594162335,371.44142343062776,371.531387445022,371.62135145941625,371.7113154738105,371.8012794882047,371.89124350259897,371.9812075169932,372.07117153138745,372.1611355457817,372.25109956017593,372.34106357457017,372.4310275889644,372.52099160335865,372.6109556177529,372.70091963214713,372.7908836465414,372.8808476609356,372.97081167532986,373.0607756897241,373.15073970411834,373.2407037185126,373.3306677329068,373.42063174730106,373.5105957616953,373.60055977608954,373.6905237904838,373.780487804878,373.8704518192723,373.96041583366656,374.0503798480608,374.14034386245504,374.2303078768493,374.3202718912435,374.41023590563776,374.500199920032,374.59016393442624,374.6801279488205,374.7700919632147,374.86005597760897,374.9500199920032,375.03998400639745,375.1299480207917,375.2199120351859,375.30987604958017,375.3998400639744,375.48980407836865,375.5797680927629,375.66973210715713,375.75969612155137,375.8496601359456,375.93962415033985,376.0295881647341,376.11955217912833,376.2095161935226,376.2994802079168,376.38944422231106,376.4794082367053,376.56937225109954,376.6593362654938,376.749300279888,376.83926429428226,376.92922830867656,377.0191923230708,377.10915633746504,377.1991203518593,377.2890843662535,377.37904838064776,377.469012395042,377.55897640943624,377.6489404238305,377.7389044382247,377.82886845261896,377.9188324670132,378.00879648140744,378.0987604958017,378.1887245101959,378.27868852459017,378.3686525389844,378.45861655337865,378.5485805677729,378.6385445821671,378.72850859656137,378.8184726109556,378.90843662534985,378.9984006397441,379.08836465413833,379.1783286685326,379.2682926829268,379.35825669732105,379.4482207117153,379.53818472610953,379.6281487405038,379.718112754898,379.80807676929226,379.8980407836865,379.9880047980808,380.07796881247504,380.1679328268693,380.2578968412635,380.34786085565776,380.437824870052,380.52778888444624,380.6177528988405,380.7077169132347,380.79768092762896,380.8876449420232,380.97760895641744,381.0675729708117,381.1575369852059,381.24750099960016,381.3374650139944,381.42742902838864,381.5173930427829,381.6073570571771,381.69732107157137,381.7872850859656,381.87724910035985,381.9672131147541,382.05717712914833,382.14714114354257,382.2371051579368,382.32706917233105,382.4170331867253,382.50699720111953,382.5969612155138,382.686925229908,382.77688924430225,382.8668532586965,382.9568172730908,383.04678128748503,383.1367453018793,383.2267093162735,383.31667333066775,383.406637345062,383.49660135945624,383.5865653738505,383.6765293882447,383.76649340263896,383.8564574170332,383.94642143142744,384.0363854458217,384.1263494602159,384.21631347461016,384.3062774890044,384.39624150339864,384.4862055177929,384.5761695321871,384.66613354658136,384.7560975609756,384.84606157536984,384.9360255897641,385.0259896041583,385.11595361855257,385.2059176329468,385.29588164734105,385.3858456617353,385.47580967612953,385.56577369052377,385.655737704918,385.74570171931225,385.8356657337065,385.92562974810073,386.01559376249503,386.10555777688927,386.1955217912835,386.28548580567775,386.375449820072,386.46541383446623,386.5553778488605,386.6453418632547,386.73530587764895,386.8252698920432,386.91523390643744,387.0051979208317,387.0951619352259,387.18512594962016,387.2750899640144,387.36505397840864,387.4550179928029,387.5449820071971,387.63494602159136,387.7249100359856,387.81487405037984,387.9048380647741,387.9948020791683,388.08476609356256,388.1747301079568,388.26469412235105,388.3546581367453,388.4446221511395,388.53458616553377,388.624550179928,388.71451419432225,388.8044782087165,388.89444222311073,388.98440623750497,389.07437025189927,389.1643342662935,389.25429828068775,389.344262295082,389.43422630947623,389.52419032387047,389.6141543382647,389.70411835265895,389.7940823670532,389.88404638144743,389.9740103958417,390.0639744102359,390.15393842463016,390.2439024390244,390.33386645341864,390.4238304678129,390.5137944822071,390.60375849660136,390.6937225109956,390.78368652538984,390.8736505397841,390.9636145541783,391.05357856857256,391.1435425829668,391.23350659736104,391.3234706117553,391.4134346261495,391.50339864054376,391.593362654938,391.68332666933225,391.7732906837265,391.8632546981207,391.95321871251497,392.0431827269092,392.1331467413035,392.22311075569775,392.313074770092,392.4030387844862,392.49300279888047,392.5829668132747,392.67293082766895,392.7628948420632,392.85285885645743,392.94282287085167,393.0327868852459,393.12275089964015,393.2127149140344,393.30267892842863,393.3926429428229,393.4826069572171,393.57257097161136,393.6625349860056,393.75249900039984,393.8424630147941,393.9324270291883,394.02239104358256,394.1123550579768,394.20231907237104,394.2922830867653,394.3822471011595,394.47221111555376,394.562175129948,394.65213914434224,394.7421031587365,394.8320671731307,394.92203118752496,395.0119952019192,395.1019592163135,395.19192323070774,395.281887245102,395.3718512594962,395.46181527389047,395.5517792882847,395.64174330267895,395.7317073170732,395.8216713314674,395.91163534586167,396.0015993602559,396.09156337465015,396.1815273890444,396.27149140343863,396.3614554178329,396.4514194322271,396.54138344662135,396.6313474610156,396.72131147540983,396.8112754898041,396.9012395041983,396.99120351859256,397.0811675329868,397.17113154738104,397.2610955617753,397.3510595761695,397.44102359056376,397.530987604958,397.62095161935224,397.7109156337465,397.8008796481407,397.89084366253496,397.9808076769292,398.07077169132344,398.16073570571774,398.250699720112,398.3406637345062,398.43062774890046,398.5205917632947,398.61055577768894,398.7005197920832,398.7904838064774,398.88044782087167,398.9704118352659,399.06037584966015,399.1503398640544,399.24030387844863,399.33026789284287,399.4202319072371,399.51019592163135,399.6001599360256,399.69012395041983,399.7800879648141,399.8700519792083,399.96001599360255,400.0499800079968,400.13994402239103,400.2299080367853,400.3198720511795,400.40983606557376,400.499800079968,400.58976409436224,400.6797281087565,400.7696921231507,400.85965613754496,400.9496201519392,401.03958416633344,401.1295481807277,401.219512195122,401.3094762095162,401.39944022391046,401.4894042383047,401.57936825269894,401.6693322670932,401.7592962814874,401.84926029588166,401.9392243102759,402.02918832467014,402.1191523390644,402.2091163534586,402.29908036785287,402.3890443822471,402.47900839664135,402.5689724110356,402.65893642542983,402.74890043982407,402.8388644542183,402.92882846861255,403.0187924830068,403.10875649740103,403.1987205117953,403.2886845261895,403.37864854058375,403.468612554978,403.55857656937224,403.6485405837665,403.7385045981607,403.82846861255496,403.9184326269492,404.00839664134344,404.0983606557377,404.1883246701319,404.2782886845262,404.36825269892046,404.4582167133147,404.54818072770894,404.6381447421032,404.7281087564974,404.81807277089166,404.9080367852859,404.99800079968014,405.0879648140744,405.1779288284686,405.26789284286286,405.3578568572571,405.44782087165134,405.5377848860456,405.6277489004398,405.71771291483407,405.8076769292283,405.89764094362255,405.9876049580168,406.07756897241103,406.16753298680527,406.2574970011995,406.34746101559375,406.437425029988,406.52738904438223,406.6173530587765,406.7073170731707,406.79728108756495,406.8872451019592,406.97720911635344,407.0671731307477,407.1571371451419,407.24710115953616,407.33706517393045,407.4270291883247,407.51699320271894,407.6069572171132,407.6969212315074,407.78688524590166,407.8768492602959,407.96681327469014,408.0567772890844,408.1467413034786,408.23670531787286,408.3266693322671,408.41663334666134,408.5065973610556,408.5965613754498,408.68652538984406,408.7764894042383,408.86645341863255,408.9564174330268,409.046381447421,409.13634546181527,409.2263094762095,409.31627349060375,409.406237504998,409.49620151939223,409.58616553378647,409.6761295481807,409.76609356257495,409.8560575769692,409.94602159136343,410.0359856057577,410.1259496201519,410.21591363454615,410.30587764894045,410.3958416633347,410.48580567772893,410.5757696921232,410.6657337065174,410.75569772091166,410.8456617353059,410.93562574970014,411.0255897640944,411.1155537784886,411.20551779288286,411.2954818072771,411.38544582167134,411.4754098360656,411.5653738504598,411.65533786485406,411.7453018792483,411.83526589364254,411.9252299080368,412.015193922431,412.10515793682526,412.1951219512195,412.28508596561375,412.375049980008,412.4650139944022,412.55497800879647,412.6449420231907,412.73490603758495,412.8248700519792,412.91483406637343,413.00479808076767,413.0947620951619,413.18472610955615,413.2746901239504,413.3646541383447,413.45461815273893,413.54458216713317,413.6345461815274,413.72451019592165,413.8144742103159,413.90443822471013,413.9944022391044,414.0843662534986,414.17433026789286,414.2642942822871,414.35425829668134,414.4442223110756,414.5341863254698,414.62415033986406,414.7141143542583,414.80407836865254,414.8940423830468,414.984006397441,415.07397041183526,415.1639344262295,415.25389844062374,415.343862455018,415.4338264694122,415.52379048380647,415.6137544982007,415.70371851259495,415.7936825269892,415.8836465413834,415.97361055577767,416.0635745701719,416.15353858456615,416.2435025989604,416.33346661335463,416.4234306277489,416.51339464214317,416.6033586565374,416.69332267093165,416.7832866853259,416.87325069972013,416.9632147141144,417.0531787285086,417.14314274290285,417.2331067572971,417.32307077169133,417.4130347860856,417.5029988004798,417.59296281487406,417.6829268292683,417.77289084366254,417.8628548580568,417.952818872451,418.04278288684526,418.1327469012395,418.22271091563374,418.312674930028,418.4026389444222,418.49260295881646,418.5825669732107,418.67253098760494,418.7624950019992,418.8524590163934,418.94242303078767,419.0323870451819,419.12235105957615,419.2123150739704,419.3022790883646,419.39224310275887,419.48220711715317,419.5721711315474,419.66213514594165,419.7520991603359,419.84206317473013,419.93202718912437,420.0219912035186,420.11195521791285,420.2019192323071,420.29188324670133,420.3818472610956,420.4718112754898,420.56177528988405,420.6517393042783,420.74170331867253,420.8316673330668,420.921631347461,421.01159536185526,421.1015593762495,421.19152339064374,421.281487405038,421.3714514194322,421.46141543382646,421.5513794482207,421.64134346261494,421.7313074770092,421.8212714914034,421.91123550579766,422.0011995201919,422.09116353458614,422.1811275489804,422.2710915633746,422.36105557776887,422.4510195921631,422.5409836065574,422.63094762095164,422.7209116353459,422.8108756497401,422.90083966413437,422.9908036785286,423.08076769292285,423.1707317073171,423.26069572171133,423.35065973610557,423.4406237504998,423.53058776489405,423.6205517792883,423.71051579368253,423.8004798080768,423.890443822471,423.98040783686525,424.0703718512595,424.16033586565374,424.250299880048,424.3402638944422,424.43022790883646,424.5201919232307,424.61015593762494,424.7001199520192,424.7900839664134,424.88004798080766,424.9700119952019,425.05997600959614,425.1499400239904,425.2399040383846,425.32986805277886,425.4198320671731,425.5097960815674,425.59976009596164,425.6897241103559,425.7796881247501,425.86965213914436,425.9596161535386,426.04958016793285,426.1395441823271,426.2295081967213,426.31947221111557,426.4094362255098,426.49940023990405,426.5893642542983,426.67932826869253,426.76929228308677,426.859256297481,426.94922031187525,427.0391843262695,427.12914834066373,427.219112355058,427.3090763694522,427.39904038384645,427.4890043982407,427.57896841263494,427.6689324270292,427.7588964414234,427.84886045581766,427.9388244702119,428.02878848460614,428.1187524990004,428.2087165133946,428.29868052778886,428.3886445421831,428.47860855657734,428.56857257097164,428.6585365853659,428.7485005997601,428.83846461415436,428.9284286285486,429.01839264294284,429.1083566573371,429.1983206717313,429.28828468612556,429.3782487005198,429.46821271491405,429.5581767293083,429.6481407437025,429.73810475809677,429.828068772491,429.91803278688525,430.0079968012795,430.09796081567373,430.18792483006797,430.2778888444622,430.36785285885645,430.4578168732507,430.54778088764493,430.6377449020392,430.7277089164334,430.81767293082765,430.9076369452219,430.99760095961614,431.0875649740104,431.1775289884046,431.26749300279886,431.3574570171931,431.44742103158734,431.5373850459816,431.6273490603759,431.7173130747701,431.80727708916436,431.8972411035586,431.98720511795284,432.0771691323471,432.1671331467413,432.25709716113556,432.3470611755298,432.43702518992404,432.5269892043183,432.6169532187125,432.70691723310676,432.796881247501,432.88684526189525,432.9768092762895,433.0667732906837,433.15673730507797,433.2467013194722,433.33666533386645,433.4266293482607,433.51659336265493,433.60655737704917,433.6965213914434,433.78648540583765,433.8764494202319,433.96641343462613,434.0563774490204,434.1463414634146,434.23630547780886,434.3262694922031,434.41623350659734,434.5061975209916,434.5961615353858,434.6861255497801,434.77608956417436,434.8660535785686,434.95601759296284,435.0459816073571,435.1359456217513,435.22590963614556,435.3158736505398,435.40583766493404,435.4958016793283,435.5857656937225,435.67572970811676,435.765693722511,435.85565773690524,435.9456217512995,436.0355857656937,436.12554978008797,436.2155137944822,436.30547780887645,436.3954418232707,436.4854058376649,436.57536985205917,436.6653338664534,436.75529788084765,436.8452618952419,436.93522590963613,437.02518992403037,437.1151539384246,437.20511795281885,437.2950819672131,437.38504598160733,437.4750099960016,437.5649740103958,437.65493802479006,437.74490203918435,437.8348660535786,437.92483006797283,438.0147940823671,438.1047580967613,438.19472211115556,438.2846861255498,438.37465013994404,438.4646141543383,438.5545781687325,438.64454218312676,438.734506197521,438.82447021191524,438.9144342263095,439.0043982407037,439.09436225509796,439.1843262694922,439.27429028388644,439.3642542982807,439.4542183126749,439.54418232706917,439.6341463414634,439.72411035585765,439.8140743702519,439.9040383846461,439.99400239904037,440.0839664134346,440.17393042782885,440.2638944422231,440.35385845661733,440.4438224710116,440.5337864854058,440.62375049980005,440.71371451419435,440.8036785285886,440.89364254298283,440.9836065573771,441.0735705717713,441.16353458616555,441.2534986005598,441.34346261495403,441.4334266293483,441.5233906437425,441.61335465813676,441.703318672531,441.79328268692524,441.8832467013195,441.9732107157137,442.06317473010796,442.1531387445022,442.24310275889644,442.3330667732907,442.4230307876849,442.51299480207916,442.6029588164734,442.69292283086764,442.7828868452619,442.8728508596561,442.96281487405037,443.0527788884446,443.14274290283885,443.2327069172331,443.32267093162733,443.41263494602157,443.5025989604158,443.59256297481005,443.6825269892043,443.7724910035986,443.86245501799283,443.95241903238707,444.0423830467813,444.13234706117555,444.2223110755698,444.31227508996403,444.4022391043583,444.4922031187525,444.58216713314675,444.672131147541,444.76209516193524,444.8520591763295,444.9420231907237,445.03198720511796,445.1219512195122,445.21191523390644,445.3018792483007,445.3918432626949,445.48180727708916,445.5717712914834,445.66173530587764,445.7516993202719,445.8416633346661,445.93162734906036,446.0215913634546,446.11155537784884,446.2015193922431,446.2914834066373,446.38144742103157,446.4714114354258,446.56137544982005,446.6513394642143,446.74130347860853,446.8312674930028,446.92123150739707,447.0111955217913,447.10115953618555,447.1911235505798,447.28108756497403,447.37105157936827,447.4610155937625,447.55097960815675,447.640943622551,447.73090763694523,447.8208716513395,447.9108356657337,448.00079968012795,448.0907636945222,448.18072770891644,448.2706917233107,448.3606557377049,448.45061975209916,448.5405837664934,448.63054778088764,448.7205117952819,448.8104758096761,448.90043982407036,448.9904038384646,449.08036785285884,449.1703318672531,449.2602958816473,449.35025989604156,449.4402239104358,449.53018792483005,449.6201519392243,449.7101159536185,449.80007996801277,449.89004398240706,449.9800079968013,450.06997201119555,450.1599360255898,450.249900039984,450.33986405437827,450.4298280687725,450.51979208316675,450.609756097561,450.69972011195523,450.78968412634947,450.8796481407437,450.96961215513795,451.0595761695322,451.14954018392643,451.2395041983207,451.3294682127149,451.41943222710916,451.5093962415034,451.59936025589764,451.6893242702919,451.7792882846861,451.86925229908036,451.9592163134746,452.04918032786884,452.1391443422631,452.2291083566573,452.31907237105156,452.4090363854458,452.49900039984004,452.5889644142343,452.6789284286285,452.76889244302276,452.858856457417,452.9488204718113,453.03878448620554,453.1287485005998,453.218712514994,453.30867652938826,453.3986405437825,453.48860455817675,453.578568572571,453.6685325869652,453.75849660135947,453.8484606157537,453.93842463014795,454.0283886445422,454.11835265893643,454.20831667333067,454.2982806877249,454.38824470211915,454.4782087165134,454.56817273090763,454.6581367453019,454.7481007596961,454.83806477409036,454.9280287884846,455.01799280287884,455.1079568172731,455.1979208316673,455.28788484606156,455.3778488604558,455.46781287485004,455.5577768892443,455.6477409036385,455.73770491803276,455.827668932427,455.9176329468213,456.00759696121554,456.0975609756098,456.187524990004,456.27748900439826,456.3674530187925,456.45741703318674,456.547381047581,456.6373450619752,456.72730907636947,456.8172730907637,456.90723710515795,456.9972011195522,457.0871651339464,457.17712914834067,457.2670931627349,457.35705717712915,457.4470211915234,457.53698520591763,457.6269492203119,457.7169132347061,457.80687724910035,457.8968412634946,457.98680527788883,458.0767692922831,458.1667333066773,458.25669732107156,458.3466613354658,458.43662534986004,458.5265893642543,458.6165533786485,458.70651739304276,458.796481407437,458.88644542183124,458.97640943622554,459.0663734506198,459.156337465014,459.24630147940826,459.3362654938025,459.42622950819674,459.516193522591,459.6061575369852,459.69612155137946,459.7860855657737,459.87604958016794,459.9660135945622,460.0559776089564,460.14594162335067,460.2359056377449,460.32586965213915,460.4158336665334,460.5057976809276,460.59576169532187,460.6857257097161,460.77568972411035,460.8656537385046,460.95561775289883,461.0455817672931,461.1355457816873,461.22550979608155,461.3154738104758,461.40543782487003,461.4954018392643,461.5853658536585,461.67532986805276,461.765293882447,461.85525789684124,461.9452219112355,462.0351859256298,462.125149940024,462.21511395441826,462.3050779688125,462.39504198320674,462.485005997601,462.5749700119952,462.66493402638946,462.7548980407837,462.84486205517794,462.9348260695722,463.0247900839664,463.11475409836066,463.2047181127549,463.29468212714914,463.3846461415434,463.4746101559376,463.56457417033187,463.6545381847261,463.74450219912035,463.8344662135146,463.92443022790883,464.01439424230307,464.1043582566973,464.19432227109155,464.2842862854858,464.37425029988003,464.4642143142743,464.5541783286685,464.64414234306275,464.734106357457,464.82407037185123,464.9140343862455,465.0039984006397,465.093962415034,465.18392642942825,465.2738904438225,465.36385445821674,465.453818472611,465.5437824870052,465.63374650139946,465.7237105157937,465.81367453018794,465.9036385445822,465.9936025589764,466.08356657337066,466.1735305877649,466.26349460215914,466.3534586165534,466.4434226309476,466.53338664534186,466.6233506597361,466.71331467413034,466.8032786885246,466.8932427029188,466.98320671731307,467.0731707317073,467.16313474610155,467.2530987604958,467.34306277489003,467.43302678928427,467.5229908036785,467.61295481807275,467.702918832467,467.79288284686123,467.8828468612555,467.9728108756497,468.06277489004395,468.15273890443825,468.2427029188325,468.33266693322673,468.422630947621,468.5125949620152,468.60255897640945,468.6925229908037,468.78248700519794,468.8724510195922,468.9624150339864,469.05237904838066,469.1423430627749,469.23230707716914,469.3222710915634,469.4122351059576,469.50219912035186,469.5921631347461,469.68212714914034,469.7720911635346,469.8620551779288,469.95201919232306,470.0419832067173,470.13194722111155,470.2219112355058,470.3118752499,470.40183926429427,470.4918032786885,470.58176729308275,470.671731307477,470.76169532187123,470.85165933626547,470.9416233506597,471.03158736505395,471.12155137944825,471.2115153938425,471.30147940823673,471.39144342263097,471.4814074370252,471.57137145141945,471.6613354658137,471.75129948020793,471.8412634946022,471.9312275089964,472.02119152339066,472.1111555377849,472.20111955217914,472.2910835665734,472.3810475809676,472.47101159536186,472.5609756097561,472.65093962415034,472.7409036385446,472.8308676529388,472.92083166733306,473.0107956817273,473.10075969612154,473.1907237105158,473.28068772491,473.37065173930426,473.4606157536985,473.55057976809275,473.640543782487,473.7305077968812,473.82047181127547,473.9104358256697,474.00039984006395,474.0903638544582,474.1803278688525,474.2702918832467,474.36025589764097,474.4502199120352,474.54018392642945,474.6301479408237,474.72011195521793,474.81007596961217,474.9000399840064,474.99000399840065,475.0799680127949,475.16993202718913,475.2598960415834,475.3498600559776,475.43982407037186,475.5297880847661,475.61975209916034,475.7097161135546,475.7996801279488,475.88964414234306,475.9796081567373,476.06957217113154,476.1595361855258,476.24950019992,476.33946421431426,476.4294282287085,476.51939224310274,476.609356257497,476.6993202718912,476.78928428628546,476.8792483006797,476.96921231507395,477.0591763294682,477.1491403438624,477.2391043582567,477.32906837265097,477.4190323870452,477.50899640143945,477.5989604158337,477.6889244302279,477.77888844462217,477.8688524590164,477.95881647341065,478.0487804878049,478.13874450219913,478.2287085165934,478.3186725309876,478.40863654538185,478.4986005597761,478.58856457417033,478.6785285885646,478.7684926029588,478.85845661735306,478.9484206317473,479.03838464614154,479.1283486605358,479.21831267493,479.30827668932426,479.3982407037185,479.48820471811274,479.578168732507,479.6681327469012,479.75809676129546,479.8480607756897,479.93802479008394,480.0279888044782,480.1179528188724,480.20791683326667,480.29788084766096,480.3878448620552,480.47780887644944,480.5677728908437,480.6577369052379,480.74770091963217,480.8376649340264,480.92762894842065,481.0175929628149,481.10755697720913,481.19752099160337,481.2874850059976,481.37744902039185,481.4674130347861,481.55737704918033,481.6473410635746,481.7373050779688,481.82726909236305,481.9172331067573,482.00719712115153,482.0971611355458,482.18712514994,482.27708916433426,482.3670531787285,482.45701719312274,482.546981207517,482.6369452219112,482.72690923630546,482.8168732506997,482.90683726509394,482.9968012794882,483.0867652938824,483.17672930827666,483.2666933226709,483.3566573370652,483.44662135145944,483.5365853658537,483.6265493802479,483.71651339464216,483.8064774090364,483.89644142343064,483.9864054378249,484.0763694522191,484.16633346661337,484.2562974810076,484.34626149540185,484.4362255097961,484.52618952419033,484.61615353858457,484.7061175529788,484.79608156737305,484.8860455817673,484.97600959616153,485.0659736105558,485.15593762495,485.24590163934425,485.3358656537385,485.42582966813274,485.515793682527,485.6057576969212,485.69572171131546,485.7856857257097,485.87564974010394,485.9656137544982,486.0555777688924,486.14554178328666,486.2355057976809,486.3254698120752,486.41543382646944,486.5053978408637,486.5953618552579,486.68532586965216,486.7752898840464,486.86525389844064,486.9552179128349,487.0451819272291,487.13514594162336,487.2251099560176,487.31507397041185,487.4050379848061,487.4950019992003,487.58496601359457,487.6749300279888,487.76489404238305,487.8548580567773,487.94482207117153,488.03478608556577,488.12475009996,488.21471411435425,488.3046781287485,488.39464214314273,488.484606157537,488.5745701719312,488.66453418632545,488.7544982007197,488.84446221511394,488.9344262295082,489.0243902439024,489.11435425829666,489.2043182726909,489.29428228708514,489.38424630147944,489.4742103158737,489.5641743302679,489.65413834466216,489.7441023590564,489.83406637345064,489.9240303878449,490.0139944022391,490.10395841663336,490.1939224310276,490.28388644542184,490.3738504598161,490.4638144742103,490.55377848860456,490.6437425029988,490.73370651739305,490.8236705317873,490.9136345461815,491.00359856057577,491.09356257497,491.18352658936425,491.2734906037585,491.36345461815273,491.45341863254697,491.5433826469412,491.63334666133545,491.7233106757297,491.81327469012393,491.9032387045182,491.9932027189124,492.08316673330665,492.1731307477009,492.26309476209514,492.3530587764894,492.4430227908837,492.5329868052779,492.62295081967216,492.7129148340664,492.80287884846064,492.8928428628549,492.9828068772491,493.07277089164336,493.1627349060376,493.25269892043184,493.3426629348261,493.4326269492203,493.52259096361456,493.6125549780088,493.70251899240304,493.7924830067973,493.8824470211915,493.97241103558576,494.06237504998,494.15233906437425,494.2423030787685,494.3322670931627,494.42223110755697,494.5121951219512,494.60215913634545,494.6921231507397,494.78208716513393,494.87205117952817,494.9620151939224,495.05197920831665,495.1419432227109,495.23190723710513,495.3218712514994,495.4118352658936,495.5017992802879,495.59176329468215,495.6817273090764,495.77169132347063,495.8616553378649,495.9516193522591,496.04158336665336,496.1315473810476,496.22151139544184,496.3114754098361,496.4014394242303,496.49140343862456,496.5813674530188,496.67133146741304,496.7612954818073,496.8512594962015,496.94122351059576,497.03118752499,497.12115153938424,497.2111155537785,497.3010795681727,497.39104358256697,497.4810075969612,497.57097161135545,497.6609356257497,497.7508996401439,497.84086365453817,497.9308276689324,498.02079168332665,498.1107556977209,498.20071971211513,498.29068372650937,498.3806477409036,498.47061175529785,498.56057576969215,498.6505397840864,498.74050379848063,498.8304678128749,498.9204318272691,499.01039584166335,499.1003598560576,499.19032387045183,499.2802878848461,499.3702518992403,499.46021591363456,499.5501799280288,499.64014394242304,499.7301079568173,499.8200719712115,499.91003598560576,500.0]}

},{}],96:[function(require,module,exports){
(function (__filename){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var rcbrt = require( './../lib' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var veryLargeNegative = require( './fixtures/julia/very_large_negative.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var tinyNegative = require( './fixtures/julia/tiny_negative.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof rcbrt, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[50,500]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[20,50]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[3,20]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.8,3]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.0,0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[1e-300,1e-308]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of subnormal `x`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge positive)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge negative)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugeNegative.expected;
	x = hugeNegative.x;

	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-50,-500]', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargeNegative.expected;
	x = veryLargeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-50]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largeNegative.expected;
	x = largeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-3]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumNegative.expected;
	x = mediumNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-3,-0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallNegative.expected;
	x = smallNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-0.8,0.8]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-1e-300,-1e-308]`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyNegative.expected;
	x = tinyNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = rcbrt( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', function test( t ) {
	var v = rcbrt( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', function test( t ) {
	var v = rcbrt( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', function test( t ) {
	var v = rcbrt( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', function test( t ) {
	var v = rcbrt( NINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rcbrt/test/test.js")
},{"./../lib":80,"./fixtures/julia/huge_negative.json":82,"./fixtures/julia/huge_positive.json":83,"./fixtures/julia/large_negative.json":84,"./fixtures/julia/large_positive.json":85,"./fixtures/julia/medium_negative.json":86,"./fixtures/julia/medium_positive.json":87,"./fixtures/julia/small_negative.json":88,"./fixtures/julia/small_positive.json":89,"./fixtures/julia/smaller.json":90,"./fixtures/julia/subnormal.json":91,"./fixtures/julia/tiny_negative.json":92,"./fixtures/julia/tiny_positive.json":93,"./fixtures/julia/very_large_negative.json":94,"./fixtures/julia/very_large_positive.json":95,"@stdlib/constants/float64/eps":62,"@stdlib/constants/float64/ninf":65,"@stdlib/constants/float64/pinf":66,"@stdlib/math/base/assert/is-nan":73,"@stdlib/math/base/special/abs":75,"tape":290}],97:[function(require,module,exports){
(function (__filename,__dirname){(function (){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var tryRequire = require( '@stdlib/utils/try-require' );


// FIXTURES //

var hugePositive = require( './fixtures/julia/huge_positive.json' );
var veryLargePositive = require( './fixtures/julia/very_large_positive.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var smaller = require( './fixtures/julia/smaller.json' );
var tinyPositive = require( './fixtures/julia/tiny_positive.json' );
var subnormal = require( './fixtures/julia/subnormal.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var veryLargeNegative = require( './fixtures/julia/very_large_negative.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var tinyNegative = require( './fixtures/julia/tiny_negative.json' );


// VARIABLES //

var rcbrt = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( rcbrt instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof rcbrt, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[50,500]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargePositive.expected;
	x = veryLargePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[20,50]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largePositive.expected;
	x = largePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[3,20]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumPositive.expected;
	x = mediumPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.8,3]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallPositive.expected;
	x = smallPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[0.0,0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smaller.expected;
	x = smaller.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[1e-300,1e-308]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyPositive.expected;
	x = tinyPositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of subnormal `x`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = subnormal.expected;
	x = subnormal.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge positive)', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugePositive.expected;
	x = hugePositive.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.equal( delta <= tol, true, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. Tolerance: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` (huge negative)', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = hugeNegative.expected;
	x = hugeNegative.x;

	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-50,-500]', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = veryLargeNegative.expected;
	x = veryLargeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-50]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = largeNegative.expected;
	x = largeNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-20,-3]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = mediumNegative.expected;
	x = mediumNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-3,-0.8]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = smallNegative.expected;
	x = smallNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function evaluates the reciprocal cube root of `x` on the interval `[-1e-300,-1e-308]`', opts, function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	expected = tinyNegative.expected;
	x = tinyNegative.x;
	for ( i = 0; i < x.length; i++ ) {
		y = rcbrt( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[ i ]+', y: '+y+', expected: '+expected[ i ] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ i ]+'. y: '+y+'. E: '+expected[ i ]+'. Δ: '+delta+'. tol: '+tol );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', opts, function test( t ) {
	var v = rcbrt( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `0.0` if provided `+infinity`', opts, function test( t ) {
	var v = rcbrt( PINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+0`', opts, function test( t ) {
	var v = rcbrt( +0.0 );
	t.equal( v, PINF, 'returns +infinity' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-0`', opts, function test( t ) {
	var v = rcbrt( -0.0 );
	t.equal( v, NINF, 'returns -infinity' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', opts, function test( t ) {
	var v = rcbrt( NINF );
	t.equal( v, 0.0, 'returns 0.0' );
	t.end();
});

}).call(this)}).call(this,"/lib/node_modules/@stdlib/math/base/special/rcbrt/test/test.native.js","/lib/node_modules/@stdlib/math/base/special/rcbrt/test")
},{"./fixtures/julia/huge_negative.json":82,"./fixtures/julia/huge_positive.json":83,"./fixtures/julia/large_negative.json":84,"./fixtures/julia/large_positive.json":85,"./fixtures/julia/medium_negative.json":86,"./fixtures/julia/medium_positive.json":87,"./fixtures/julia/small_negative.json":88,"./fixtures/julia/small_positive.json":89,"./fixtures/julia/smaller.json":90,"./fixtures/julia/subnormal.json":91,"./fixtures/julia/tiny_negative.json":92,"./fixtures/julia/tiny_positive.json":93,"./fixtures/julia/very_large_negative.json":94,"./fixtures/julia/very_large_positive.json":95,"@stdlib/constants/float64/eps":62,"@stdlib/constants/float64/ninf":65,"@stdlib/constants/float64/pinf":66,"@stdlib/math/base/assert/is-nan":73,"@stdlib/math/base/special/abs":75,"@stdlib/utils/try-require":158,"path":172,"tape":290}],98:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Constructor which returns a `Number` object.
*
* @module @stdlib/number/ctor
*
* @example
* var Number = require( '@stdlib/number/ctor' );
*
* var v = new Number( 10.0 );
* // returns <Number>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":99}],99:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// EXPORTS //

module.exports = Number; // eslint-disable-line stdlib/require-globals

},{}],100:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/from-words
*
* @example
* var fromWords = require( '@stdlib/number/float64/base/from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":102}],101:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var indices;
var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}
indices = {
	'HIGH': HIGH,
	'LOW': LOW
};


// EXPORTS //

module.exports = indices;

},{"@stdlib/assert/is-little-endian":48}],102:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns -3.141592653589793
*
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
*
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
*
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Infinity
*
* @example
* var v = fromWords( 4293918720, 0 );
* // returns -Infinity
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":101,"@stdlib/array/float64":1,"@stdlib/array/uint32":7}],103:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":48}],104:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/get-high-word
*
* @example
* var getHighWord = require( '@stdlib/number/float64/base/get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":105}],105:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
}


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":103,"@stdlib/array/float64":1,"@stdlib/array/uint32":7}],106:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":48,"dup":103}],107:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Set the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/number/float64/base/set-high-word
*
* @example
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
* var setHighWord = require( '@stdlib/number/float64/base/set-high-word' );
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":108}],108:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Sets the more significant 32 bits of a double-precision floating-point number.
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @param {number} x - double
* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
* @returns {number} double having the same lower order word as `x`
*
* @example
* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
*
* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
* // returns 1.18350528745e-313
*
* @example
* var PINF = require( '@stdlib/constants/float64/pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
*
* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
*
* // Set the higher order bits of `+infinity` to return `1`:
* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
* // returns 1.0
*/
function setHighWord( x, high ) {
	FLOAT64_VIEW[ 0 ] = x;
	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
	return FLOAT64_VIEW[ 0 ];
}


// EXPORTS //

module.exports = setHighWord;

},{"./high.js":106,"@stdlib/array/float64":1,"@stdlib/array/uint32":7}],109:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Uint32Array = require( '@stdlib/array/uint32' );
var Float64Array = require( '@stdlib/array/float64' );
var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* ## Notes
*
* ```text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ```text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ```text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
* ## References
*
* -   [Open Group][1]
*
* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
*
* @private
* @param {number} x - input value
* @param {Collection} out - output array
* @param {integer} stride - output array stride
* @param {NonNegativeInteger} offset - output array index offset
* @returns {Collection} output array
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords( 3.14e201, out, 1, 0 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/
function toWords( x, out, stride, offset ) {
	FLOAT64_VIEW[ 0 ] = x;
	out[ offset ] = UINT32_VIEW[ HIGH ];
	out[ offset + stride ] = UINT32_VIEW[ LOW ];
	return out;
}


// EXPORTS //

module.exports = toWords;

},{"./indices.js":111,"@stdlib/array/float64":1,"@stdlib/array/uint32":7}],110:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/number/float64/base/to-words
*
* @example
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*
* @example
* var Uint32Array = require( '@stdlib/array/uint32' );
* var toWords = require( '@stdlib/number/float64/base/to-words' );
*
* var out = new Uint32Array( 2 );
*
* var w = toWords.assign( 3.14e201, out, 1, 0 );
* // returns <Uint32Array>[ 1774486211, 2479577218 ]
*
* var bool = ( w === out );
* // returns true
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var assign = require( './assign.js' );


// MAIN //

setReadOnly( main, 'assign', assign );


// EXPORTS //

module.exports = main;

},{"./assign.js":109,"./main.js":112,"@stdlib/utils/define-nonenumerable-read-only-property":135}],111:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":48,"dup":101}],112:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fcn = require( './assign.js' );


// MAIN //

/**
* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @param {number} x - input value
* @returns {Array<number>} output array
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	return fcn( x, [ 0>>>0, 0>>>0 ], 1, 0 );
}


// EXPORTS //

module.exports = toWords;

},{"./assign.js":109}],113:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Object constructor.
*
* @module @stdlib/object/ctor
*
* @example
* var Object = require( '@stdlib/object/ctor' );
*
* var o = new Object( null );
* // returns {}
*
* o = new Object( 5.0 );
* // returns <Number>
*
* o = new Object( 'beep' );
* // returns <String>
*
* var o1 = {};
*
* var o2 = new Object( o1 );
* // returns {}
*
* var bool = ( o1 === o2 );
* // returns true
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":114}],114:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns an object.
*
* @name Object
* @constructor
* @type {Function}
* @param {*} value - input value
* @returns {Object} object
*
* @example
* var o = new Object( null );
* // returns {}
*
* @example
* var o = new Object( 5.0 );
* // returns <Number>
*
* @example
* var o = new Object( 'beep' );
* // returns <String>
*
* @example
* var o1 = {};
*
* var o2 = new Object( o1 );
* // returns {}
*
* var bool = ( o1 === o2 );
* // returns true
*/
var Obj = Object; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Obj;

},{}],115:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @module @stdlib/regexp/function-name
*
* @example
* var reFunctionName = require( '@stdlib/regexp/function-name' );
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var REGEXP = require( './regexp.js' );


// MAIN //

setReadOnly( main, 'REGEXP', REGEXP );


// EXPORTS //

module.exports = main;

},{"./main.js":116,"./regexp.js":117,"@stdlib/utils/define-nonenumerable-read-only-property":135}],116:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a regular expression to capture everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* @returns {RegExp} regular expression
*
* @example
* var RE_FUNCTION_NAME = reFunctionName();
*
* function fname( fcn ) {
*     return RE_FUNCTION_NAME.exec( fcn.toString() )[ 1 ];
* }
*
* var fn = fname( Math.sqrt );
* // returns 'sqrt'
*
* fn = fname( Int8Array );
* // returns 'Int8Array'
*
* fn = fname( Object.prototype.toString );
* // returns 'toString'
*
* fn = fname( function(){} );
* // returns ''
*/
function reFunctionName() {
	return /^\s*function\s*([^(]*)/i;
}


// EXPORTS //

module.exports = reFunctionName;

},{}],117:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var reFunctionName = require( './main.js' );


// MAIN //

/**
* Captures everything that is not a space immediately after the `function` keyword and before the first left parenthesis.
*
* Regular expression: `/^\s*function\s*([^(]*)/i`
*
* -   `/^\s*`
*     -   Match zero or more spaces at beginning
*
* -   `function`
*     -   Match the word `function`
*
* -   `\s*`
*     -   Match zero or more spaces after the word `function`
*
* -   `()`
*     -   Capture
*
* -   `[^(]*`
*     -   Match anything except a left parenthesis `(` zero or more times
*
* -   `/i`
*     -   ignore case
*
* @constant
* @type {RegExp}
* @default /^\s*function\s*([^(]*)/i
*/
var RE_FUNCTION_NAME = reFunctionName();


// EXPORTS //

module.exports = RE_FUNCTION_NAME;

},{"./main.js":116}],118:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( './is_number.js' );

// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
var abs = Math.abs; // eslint-disable-line stdlib/no-builtin-math
var lowercase = String.prototype.toLowerCase;
var uppercase = String.prototype.toUpperCase;
var replace = String.prototype.replace;


// VARIABLES //

var RE_EXP_POS_DIGITS = /e\+(\d)$/;
var RE_EXP_NEG_DIGITS = /e-(\d)$/;
var RE_ONLY_DIGITS = /^(\d+)$/;
var RE_DIGITS_BEFORE_EXP = /^(\d+)e/;
var RE_TRAILING_PERIOD_ZERO = /\.0$/;
var RE_PERIOD_ZERO_EXP = /\.0*e/;
var RE_ZERO_BEFORE_EXP = /(\..*[^0])0*e/;


// MAIN //

/**
* Formats a token object argument as a floating-point number.
*
* @private
* @param {Object} token - token object
* @throws {Error} must provide a valid floating-point number
* @returns {string} formatted token argument
*/
function formatDouble( token ) {
	var digits;
	var out;
	var f = parseFloat( token.arg );
	if ( !isFinite( f ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
		if ( !isNumber( token.arg ) ) {
			throw new Error( 'invalid floating-point number. Value: ' + out );
		}
		// Case: NaN, Infinity, or -Infinity
		f = token.arg;
	}
	switch ( token.specifier ) {
	case 'e':
	case 'E':
		out = f.toExponential( token.precision );
		break;
	case 'f':
	case 'F':
		out = f.toFixed( token.precision );
		break;
	case 'g':
	case 'G':
		if ( abs( f ) < 0.0001 ) {
			digits = token.precision;
			if ( digits > 0 ) {
				digits -= 1;
			}
			out = f.toExponential( digits );
		} else {
			out = f.toPrecision( token.precision );
		}
		if ( !token.alternate ) {
			out = replace.call( out, RE_ZERO_BEFORE_EXP, '$1e' );
			out = replace.call( out, RE_PERIOD_ZERO_EXP, 'e' );
			out = replace.call( out, RE_TRAILING_PERIOD_ZERO, '' );
		}
		break;
	default:
		throw new Error( 'invalid double notation. Value: ' + token.specifier );
	}
	out = replace.call( out, RE_EXP_POS_DIGITS, 'e+0$1' );
	out = replace.call( out, RE_EXP_NEG_DIGITS, 'e-0$1' );
	if ( token.alternate ) {
		out = replace.call( out, RE_ONLY_DIGITS, '$1.' );
		out = replace.call( out, RE_DIGITS_BEFORE_EXP, '$1.e' );
	}
	if ( f >= 0 && token.sign ) {
		out = token.sign + out;
	}
	out = ( token.specifier === uppercase.call( token.specifier ) ) ?
		uppercase.call( out ) :
		lowercase.call( out );
	return out;
}


// EXPORTS //

module.exports = formatDouble;

},{"./is_number.js":121}],119:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumber = require( './is_number.js' );
var zeroPad = require( './zero_pad.js' );

// NOTE: for the following, we explicitly avoid using stdlib packages in this particular package in order to avoid circular dependencies.
var lowercase = String.prototype.toLowerCase;
var uppercase = String.prototype.toUpperCase;


// MAIN //

/**
* Formats a token object argument as an integer.
*
* @private
* @param {Object} token - token object
* @throws {Error} must provide a valid integer
* @returns {string} formatted token argument
*/
function formatInteger( token ) {
	var base;
	var out;
	var i;

	switch ( token.specifier ) {
	case 'b':
		// Case: %b (binary)
		base = 2;
		break;
	case 'o':
		// Case: %o (octal)
		base = 8;
		break;
	case 'x':
	case 'X':
		// Case: %x, %X (hexadecimal)
		base = 16;
		break;
	case 'd':
	case 'i':
	case 'u':
	default:
		// Case: %d, %i, %u (decimal)
		base = 10;
		break;
	}
	out = token.arg;
	i = parseInt( out, 10 );
	if ( !isFinite( i ) ) { // NOTE: We use the global `isFinite` function here instead of `@stdlib/math/base/assert/is-finite` in order to avoid circular dependencies.
		if ( !isNumber( out ) ) {
			throw new Error( 'invalid integer. Value: ' + out );
		}
		i = 0;
	}
	if ( i < 0 && ( token.specifier === 'u' || base !== 10 ) ) {
		i = 0xffffffff + i + 1;
	}
	if ( i < 0 ) {
		out = ( -i ).toString( base );
		if ( token.precision ) {
			out = zeroPad( out, token.precision, token.padRight );
		}
		out = '-' + out;
	} else {
		out = i.toString( base );
		if ( !i && !token.precision ) {
			out = '';
		} else if ( token.precision ) {
			out = zeroPad( out, token.precision, token.padRight );
		}
		if ( token.sign ) {
			out = token.sign + out;
		}
	}
	if ( base === 16 ) {
		if ( token.alternate ) {
			out = '0x' + out;
		}
		out = ( token.specifier === uppercase.call( token.specifier ) ) ?
			uppercase.call( out ) :
			lowercase.call( out );
	}
	if ( base === 8 ) {
		if ( token.alternate && out.charAt( 0 ) !== '0' ) {
			out = '0' + out;
		}
	}
	return out;
}


// EXPORTS //

module.exports = formatInteger;

},{"./is_number.js":121,"./zero_pad.js":125}],120:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Generate string from a token array by interpolating values.
*
* @module @stdlib/string/base/format-interpolate
*
* @example
* var formatInterpolate = require( '@stdlib/string/base/format-interpolate' );
*
* var tokens = ['Hello ', { 'specifier': 's' }, '!' ];
* var out = formatInterpolate( tokens, 'World' );
* // returns 'Hello World!'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":123}],121:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a number primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a number primitive
*
* @example
* var bool = isNumber( 3.14 );
* // returns true
*
* @example
* var bool = isNumber( NaN );
* // returns true
*
* @example
* var bool = isNumber( new Number( 3.14 ) );
* // returns false
*/
function isNumber( value ) {
	return ( typeof value === 'number' );  // NOTE: we inline the `isNumber.isPrimitive` function from `@stdlib/assert/is-number` in order to avoid circular dependencies.
}


// EXPORTS //

module.exports = isNumber;

},{}],122:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tests if a value is a string primitive.
*
* @param {*} value - value to test
* @returns {boolean} boolean indicating if a value is a string primitive
*
* @example
* var bool = isString( 'beep' );
* // returns true
*
* @example
* var bool = isString( new String( 'beep' ) );
* // returns false
*/
function isString( value ) {
	return ( typeof value === 'string' ); // NOTE: we inline the `isString.isPrimitive` function from `@stdlib/assert/is-string` in order to avoid circular dependencies.
}


// EXPORTS //

module.exports = isString;

},{}],123:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var formatInteger = require( './format_integer.js' );
var isString = require( './is_string.js' );
var formatDouble = require( './format_double.js' );
var spacePad = require( './space_pad.js' );
var zeroPad = require( './zero_pad.js' );


// VARIABLES //

var fromCharCode = String.fromCharCode;
var isArray = Array.isArray; // NOTE: We use the global `Array.isArray` function here instead of `@stdlib/assert/is-array` to avoid circular dependencies.


// FUNCTIONS //

/**
* Returns a boolean indicating whether a value is `NaN`.
*
* @private
* @param {*} value - input value
* @returns {boolean} boolean indicating whether a value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 4 );
* // returns false
*/
function isnan( value ) { // explicitly define a function here instead of `@stdlib/math/base/assert/is-nan` in order to avoid circular dependencies
	return ( value !== value );
}

/**
* Initializes token object with properties of supplied format identifier object or default values if not present.
*
* @private
* @param {Object} token - format identifier object
* @returns {Object} token object
*/
function initialize( token ) {
	var out = {};
	out.specifier = token.specifier;
	out.precision = ( token.precision === void 0 ) ? 1 : token.precision;
	out.width = token.width;
	out.flags = token.flags || '';
	out.mapping = token.mapping;
	return out;
}


// MAIN //

/**
* Generates string from a token array by interpolating values.
*
* @param {Array} tokens - string parts and format identifier objects
* @param {Array} ...args - variable values
* @throws {TypeError} first argument must be an array
* @throws {Error} invalid flags
* @returns {string} formatted string
*
* @example
* var tokens = [ 'beep ', { 'specifier': 's' } ];
* var out = formatInterpolate( tokens, 'boop' );
* // returns 'beep boop'
*/
function formatInterpolate( tokens ) {
	var hasPeriod;
	var flags;
	var token;
	var flag;
	var num;
	var out;
	var pos;
	var i;
	var j;

	if ( !isArray( tokens ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array. Value: `' + tokens + '`.' );
	}
	out = '';
	pos = 1;
	for ( i = 0; i < tokens.length; i++ ) {
		token = tokens[ i ];
		if ( isString( token ) ) {
			out += token;
		} else {
			hasPeriod = token.precision !== void 0;
			token = initialize( token );
			if ( !token.specifier ) {
				throw new TypeError( 'invalid argument. Token is missing `specifier` property. Index: `'+ i +'`. Value: `' + token + '`.' );
			}
			if ( token.mapping ) {
				pos = token.mapping;
			}
			flags = token.flags;
			for ( j = 0; j < flags.length; j++ ) {
				flag = flags.charAt( j );
				switch ( flag ) {
				case ' ':
					token.sign = ' ';
					break;
				case '+':
					token.sign = '+';
					break;
				case '-':
					token.padRight = true;
					token.padZeros = false;
					break;
				case '0':
					token.padZeros = flags.indexOf( '-' ) < 0; // NOTE: We use built-in `Array.prototype.indexOf` here instead of `@stdlib/assert/contains` in order to avoid circular dependencies.
					break;
				case '#':
					token.alternate = true;
					break;
				default:
					throw new Error( 'invalid flag: ' + flag );
				}
			}
			if ( token.width === '*' ) {
				token.width = parseInt( arguments[ pos ], 10 );
				pos += 1;
				if ( isnan( token.width ) ) {
					throw new TypeError( 'the argument for * width at position ' + pos + ' is not a number. Value: `' + token.width + '`.' );
				}
				if ( token.width < 0 ) {
					token.padRight = true;
					token.width = -token.width;
				}
			}
			if ( hasPeriod ) {
				if ( token.precision === '*' ) {
					token.precision = parseInt( arguments[ pos ], 10 );
					pos += 1;
					if ( isnan( token.precision ) ) {
						throw new TypeError( 'the argument for * precision at position ' + pos + ' is not a number. Value: `' + token.precision + '`.' );
					}
					if ( token.precision < 0 ) {
						token.precision = 1;
						hasPeriod = false;
					}
				}
			}
			token.arg = arguments[ pos ];
			switch ( token.specifier ) {
			case 'b':
			case 'o':
			case 'x':
			case 'X':
			case 'd':
			case 'i':
			case 'u':
				// Case: %b (binary), %o (octal), %x, %X (hexadecimal), %d, %i (decimal), %u (unsigned decimal)
				if ( hasPeriod ) {
					token.padZeros = false;
				}
				token.arg = formatInteger( token );
				break;
			case 's':
				// Case: %s (string)
				token.maxWidth = ( hasPeriod ) ? token.precision : -1;
				token.arg = String( token.arg );
				break;
			case 'c':
				// Case: %c (character)
				if ( !isnan( token.arg ) ) {
					num = parseInt( token.arg, 10 );
					if ( num < 0 || num > 127 ) {
						throw new Error( 'invalid character code. Value: ' + token.arg );
					}
					token.arg = ( isnan( num ) ) ? String( token.arg ) : fromCharCode( num ); // eslint-disable-line max-len
				}
				break;
			case 'e':
			case 'E':
			case 'f':
			case 'F':
			case 'g':
			case 'G':
				// Case: %e, %E (scientific notation), %f, %F (decimal floating point), %g, %G (uses the shorter of %e/E or %f/F)
				if ( !hasPeriod ) {
					token.precision = 6;
				}
				token.arg = formatDouble( token );
				break;
			default:
				throw new Error( 'invalid specifier: ' + token.specifier );
			}
			// Fit argument into field width...
			if ( token.maxWidth >= 0 && token.arg.length > token.maxWidth ) {
				token.arg = token.arg.substring( 0, token.maxWidth );
			}
			if ( token.padZeros ) {
				token.arg = zeroPad( token.arg, token.width || token.precision, token.padRight ); // eslint-disable-line max-len
			} else if ( token.width ) {
				token.arg = spacePad( token.arg, token.width, token.padRight );
			}
			out += token.arg || '';
			pos += 1;
		}
	}
	return out;
}


// EXPORTS //

module.exports = formatInterpolate;

},{"./format_double.js":118,"./format_integer.js":119,"./is_string.js":122,"./space_pad.js":124,"./zero_pad.js":125}],124:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

/**
* Returns `n` spaces.
*
* @private
* @param {number} n - number of spaces
* @returns {string} string of spaces
*/
function spaces( n ) {
	var out = '';
	var i;
	for ( i = 0; i < n; i++ ) {
		out += ' ';
	}
	return out;
}


// MAIN //

/**
* Pads a token with spaces to the specified width.
*
* @private
* @param {string} str - token argument
* @param {number} width - token width
* @param {boolean} [right=false] - boolean indicating whether to pad to the right
* @returns {string} padded token argument
*/
function spacePad( str, width, right ) {
	var pad = width - str.length;
	if ( pad < 0 ) {
		return str;
	}
	str = ( right ) ?
		str + spaces( pad ) :
		spaces( pad ) + str;
	return str;
}


// EXPORTS //

module.exports = spacePad;

},{}],125:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// FUNCTIONS //

/**
* Tests if a string starts with a minus sign (`-`).
*
* @private
* @param {string} str - input string
* @returns {boolean} boolean indicating if a string starts with a minus sign (`-`)
*/
function startsWithMinus( str ) {
	return str[ 0 ] === '-';
}

/**
* Returns a string of `n` zeros.
*
* @private
* @param {number} n - number of zeros
* @returns {string} string of zeros
*/
function zeros( n ) {
	var out = '';
	var i;
	for ( i = 0; i < n; i++ ) {
		out += '0';
	}
	return out;
}


// MAIN //

/**
* Pads a token with zeros to the specified width.
*
* @private
* @param {string} str - token argument
* @param {number} width - token width
* @param {boolean} [right=false] - boolean indicating whether to pad to the right
* @returns {string} padded token argument
*/
function zeroPad( str, width, right ) {
	var negative = false;
	var pad = width - str.length;
	if ( pad < 0 ) {
		return str;
	}
	if ( startsWithMinus( str ) ) {
		negative = true;
		str = str.substr( 1 );
	}
	str = ( right ) ?
		str + zeros( pad ) :
		zeros( pad ) + str;
	if ( negative ) {
		str = '-' + str;
	}
	return str;
}


// EXPORTS //

module.exports = zeroPad;

},{}],126:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Tokenize a string into an array of string parts and format identifier objects.
*
* @module @stdlib/string/base/format-tokenize
*
* @example
* var formatTokenize = require( '@stdlib/string/base/format-tokenize' );
*
* var str = 'Hello %s!';
* var tokens = formatTokenize( str );
* // returns [ 'Hello ', {...}, '!' ]
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":127}],127:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var RE = /%(?:([1-9]\d*)\$)?([0 +\-#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([%A-Za-z])/g;


// FUNCTIONS //

/**
* Parses a delimiter.
*
* @private
* @param {Array} match - regular expression match
* @returns {Object} delimiter token object
*/
function parse( match ) {
	var token = {
		'mapping': ( match[ 1 ] ) ? parseInt( match[ 1 ], 10 ) : void 0,
		'flags': match[ 2 ],
		'width': match[ 3 ],
		'precision': match[ 5 ],
		'specifier': match[ 6 ]
	};
	if ( match[ 4 ] === '.' && match[ 5 ] === void 0 ) {
		token.precision = '1';
	}
	return token;
}


// MAIN //

/**
* Tokenizes a string into an array of string parts and format identifier objects.
*
* @param {string} str - input string
* @returns {Array} tokens
*
* @example
* var tokens = formatTokenize( 'Hello %s!' );
* // returns [ 'Hello ', {...}, '!' ]
*/
function formatTokenize( str ) {
	var content;
	var tokens;
	var match;
	var prev;

	tokens = [];
	prev = 0;
	match = RE.exec( str );
	while ( match ) {
		content = str.slice( prev, RE.lastIndex - match[ 0 ].length );
		if ( content.length ) {
			tokens.push( content );
		}
		tokens.push( parse( match ) );
		prev = RE.lastIndex;
		match = RE.exec( str );
	}
	content = str.slice( prev );
	if ( content.length ) {
		tokens.push( content );
	}
	return tokens;
}


// EXPORTS //

module.exports = formatTokenize;

},{}],128:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Insert supplied variable values into a format string.
*
* @module @stdlib/string/format
*
* @example
* var format = require( '@stdlib/string/format' );
*
* var out = format( '%s %s!', 'Hello', 'World' );
* // returns 'Hello World!'
*
* out = format( 'Pi: ~%.2f', 3.141592653589793 );
* // returns 'Pi: ~3.14'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":130}],129:[function(require,module,exports){
arguments[4][122][0].apply(exports,arguments)
},{"dup":122}],130:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var interpolate = require( '@stdlib/string/base/format-interpolate' );
var tokenize = require( '@stdlib/string/base/format-tokenize' );
var isString = require( './is_string.js' );


// MAIN //

/**
* Inserts supplied variable values into a format string.
*
* @param {string} str - input string
* @param {Array} ...args - variable values
* @throws {TypeError} first argument must be a string
* @throws {Error} invalid flags
* @returns {string} formatted string
*
* @example
* var str = format( 'Hello %s!', 'world' );
* // returns 'Hello world!'
*
* @example
* var str = format( 'Pi: ~%.2f', 3.141592653589793 );
* // returns 'Pi: ~3.14'
*/
function format( str ) {
	var args;
	var i;

	if ( !isString( str ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );
	}
	args = [ tokenize( str ) ];
	for ( i = 1; i < arguments.length; i++ ) {
		args.push( arguments[ i ] );
	}
	return interpolate.apply( null, args );
}


// EXPORTS //

module.exports = format;

},{"./is_string.js":129,"@stdlib/string/base/format-interpolate":120,"@stdlib/string/base/format-tokenize":126}],131:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Symbol factory.
*
* @module @stdlib/symbol/ctor
*
* @example
* var Symbol = require( '@stdlib/symbol/ctor' );
*
* var s = Symbol( 'beep' );
* // returns <symbol>
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":132}],132:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var Sym = ( typeof Symbol === 'function' ) ? Symbol : void 0; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = Sym;

},{}],133:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine the name of a value's constructor.
*
* @module @stdlib/utils/constructor-name
*
* @example
* var constructorName = require( '@stdlib/utils/constructor-name' );
*
* var v = constructorName( 'a' );
* // returns 'String'
*
* v = constructorName( {} );
* // returns 'Object'
*
* v = constructorName( true );
* // returns 'Boolean'
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":134}],134:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var RE = require( '@stdlib/regexp/function-name' ).REGEXP;
var isBuffer = require( '@stdlib/assert/is-buffer' );


// MAIN //

/**
* Determines the name of a value's constructor.
*
* @param {*} v - input value
* @returns {string} name of a value's constructor
*
* @example
* var v = constructorName( 'a' );
* // returns 'String'
*
* @example
* var v = constructorName( 5 );
* // returns 'Number'
*
* @example
* var v = constructorName( null );
* // returns 'Null'
*
* @example
* var v = constructorName( undefined );
* // returns 'Undefined'
*
* @example
* var v = constructorName( function noop() {} );
* // returns 'Function'
*/
function constructorName( v ) {
	var match;
	var name;
	var ctor;
	name = nativeClass( v ).slice( 8, -1 );
	if ( (name === 'Object' || name === 'Error') && v.constructor ) {
		ctor = v.constructor;
		if ( typeof ctor.name === 'string' ) {
			return ctor.name;
		}
		match = RE.exec( ctor.toString() );
		if ( match ) {
			return match[ 1 ];
		}
	}
	if ( isBuffer( v ) ) {
		return 'Buffer';
	}
	return name;
}


// EXPORTS //

module.exports = constructorName;

},{"@stdlib/assert/is-buffer":39,"@stdlib/regexp/function-name":115,"@stdlib/utils/native-class":153}],135:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define a non-enumerable read-only property.
*
* @module @stdlib/utils/define-nonenumerable-read-only-property
*
* @example
* var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
*
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":136}],136:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( '@stdlib/utils/define-property' );


// MAIN //

/**
* Defines a non-enumerable read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
*
* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
*
* try {
*     obj.foo = 'boop';
* } catch ( err ) {
*     console.error( err.message );
* }
*/
function setNonEnumerableReadOnly( obj, prop, value ) {
	defineProperty( obj, prop, {
		'configurable': false,
		'enumerable': false,
		'writable': false,
		'value': value
	});
}


// EXPORTS //

module.exports = setNonEnumerableReadOnly;

},{"@stdlib/utils/define-property":140}],137:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @name defineProperty
* @type {Function}
* @param {Object} obj - object on which to define the property
* @param {(string|symbol)} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
var defineProperty = Object.defineProperty;


// EXPORTS //

module.exports = defineProperty;

},{}],138:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


// EXPORTS //

module.exports = main;

},{}],139:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var defineProperty = require( './define_property.js' );


// MAIN //

/**
* Tests for `Object.defineProperty` support.
*
* @private
* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
*
* @example
* var bool = hasDefinePropertySupport();
* // returns <boolean>
*/
function hasDefinePropertySupport() {
	// Test basic support...
	try {
		defineProperty( {}, 'x', {} );
		return true;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return false;
	}
}


// EXPORTS //

module.exports = hasDefinePropertySupport;

},{"./define_property.js":138}],140:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Define (or modify) an object property.
*
* @module @stdlib/utils/define-property
*
* @example
* var defineProperty = require( '@stdlib/utils/define-property' );
*
* var obj = {};
* defineProperty( obj, 'foo', {
*     'value': 'bar',
*     'writable': false,
*     'configurable': false,
*     'enumerable': false
* });
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var hasDefinePropertySupport = require( './has_define_property_support.js' );
var builtin = require( './builtin.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var defineProperty;
if ( hasDefinePropertySupport() ) {
	defineProperty = builtin;
} else {
	defineProperty = polyfill;
}


// EXPORTS //

module.exports = defineProperty;

},{"./builtin.js":137,"./has_define_property_support.js":139,"./polyfill.js":141}],141:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle, no-proto */

'use strict';

// MODULES //

var format = require( '@stdlib/string/format' );


// VARIABLES //

var objectProtoype = Object.prototype;
var toStr = objectProtoype.toString;
var defineGetter = objectProtoype.__defineGetter__;
var defineSetter = objectProtoype.__defineSetter__;
var lookupGetter = objectProtoype.__lookupGetter__;
var lookupSetter = objectProtoype.__lookupSetter__;


// MAIN //

/**
* Defines (or modifies) an object property.
*
* ## Notes
*
* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {Object} descriptor - property descriptor
* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
* @param {*} [descriptor.value] - property value
* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
* @throws {TypeError} first argument must be an object
* @throws {TypeError} third argument must be an object
* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
* @returns {Object} object with added property
*
* @example
* var obj = {};
*
* defineProperty( obj, 'foo', {
*     'value': 'bar'
* });
*
* var str = obj.foo;
* // returns 'bar'
*/
function defineProperty( obj, prop, descriptor ) {
	var prototype;
	var hasValue;
	var hasGet;
	var hasSet;

	if ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {
		throw new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );
	}
	if ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {
		throw new TypeError( format( 'invalid argument. Property descriptor must be an object. Value: `%s`.', descriptor ) );
	}
	hasValue = ( 'value' in descriptor );
	if ( hasValue ) {
		if (
			lookupGetter.call( obj, prop ) ||
			lookupSetter.call( obj, prop )
		) {
			// Override `__proto__` to avoid touching inherited accessors:
			prototype = obj.__proto__;
			obj.__proto__ = objectProtoype;

			// Delete property as existing getters/setters prevent assigning value to specified property:
			delete obj[ prop ];
			obj[ prop ] = descriptor.value;

			// Restore original prototype:
			obj.__proto__ = prototype;
		} else {
			obj[ prop ] = descriptor.value;
		}
	}
	hasGet = ( 'get' in descriptor );
	hasSet = ( 'set' in descriptor );

	if ( hasValue && ( hasGet || hasSet ) ) {
		throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
	}

	if ( hasGet && defineGetter ) {
		defineGetter.call( obj, prop, descriptor.get );
	}
	if ( hasSet && defineSetter ) {
		defineSetter.call( obj, prop, descriptor.set );
	}
	return obj;
}


// EXPORTS //

module.exports = defineProperty;

},{"@stdlib/string/format":128}],142:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var builtin = require( './native.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var getProto;
if ( isFunction( Object.getPrototypeOf ) ) {
	getProto = builtin;
} else {
	getProto = polyfill;
}


// EXPORTS //

module.exports = getProto;

},{"./native.js":145,"./polyfill.js":146,"@stdlib/assert/is-function":45}],143:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return the prototype of a provided object.
*
* @module @stdlib/utils/get-prototype-of
*
* @example
* var getPrototype = require( '@stdlib/utils/get-prototype-of' );
*
* var proto = getPrototype( {} );
* // returns {}
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":144}],144:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Object = require( '@stdlib/object/ctor' );
var getProto = require( './detect.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @param {*} value - input value
* @returns {(Object|null)} prototype
*
* @example
* var proto = getPrototypeOf( {} );
* // returns {}
*/
function getPrototypeOf( value ) {
	if (
		value === null ||
		value === void 0
	) {
		return null;
	}
	// In order to ensure consistent ES5/ES6 behavior, cast input value to an object (strings, numbers, booleans); ES5 `Object.getPrototypeOf` throws when provided primitives and ES6 `Object.getPrototypeOf` casts:
	value = Object( value );

	return getProto( value );
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./detect.js":142,"@stdlib/object/ctor":113}],145:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var getProto = Object.getPrototypeOf;


// EXPORTS //

module.exports = getProto;

},{}],146:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var nativeClass = require( '@stdlib/utils/native-class' );
var getProto = require( './proto.js' );


// MAIN //

/**
* Returns the prototype of a provided object.
*
* @private
* @param {Object} obj - input object
* @returns {(Object|null)} prototype
*/
function getPrototypeOf( obj ) {
	var proto = getProto( obj );
	if ( proto || proto === null ) {
		return proto;
	}
	if ( nativeClass( obj.constructor ) === '[object Function]' ) {
		// May break if the constructor has been tampered with...
		return obj.constructor.prototype;
	}
	if ( obj instanceof Object ) {
		return Object.prototype;
	}
	// Return `null` for objects created via `Object.create( null )`. Also return `null` for cross-realm objects on browsers that lack `__proto__` support, such as IE < 11.
	return null;
}


// EXPORTS //

module.exports = getPrototypeOf;

},{"./proto.js":147,"@stdlib/utils/native-class":153}],147:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Returns the value of the `__proto__` property.
*
* @private
* @param {Object} obj - input object
* @returns {*} value of `__proto__` property
*/
function getProto( obj ) {
	// eslint-disable-next-line no-proto
	return obj.__proto__;
}


// EXPORTS //

module.exports = getProto;

},{}],148:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var getThis = require( './codegen.js' );
var Self = require( './self.js' );
var Win = require( './window.js' );
var GlobalThis = require( './global_this.js' );


// MAIN //

/**
* Returns the global object.
*
* ## Notes
*
* -   Using code generation is the **most** reliable way to resolve the global object; however, doing so is likely to violate content security policies (CSPs) in, e.g., Chrome Apps and elsewhere.
*
* @private
* @param {boolean} [codegen=false] - boolean indicating whether to use code generation to resolve the global object
* @throws {TypeError} must provide a boolean
* @throws {Error} unable to resolve global object
* @returns {Object} global object
*
* @example
* var g = getGlobal();
* // returns {...}
*/
function getGlobal( codegen ) {
	if ( arguments.length ) {
		if ( !isBoolean( codegen ) ) {
			throw new TypeError( format( 'invalid argument. Must provide a boolean. Value: `%s`.', codegen ) );
		}
		if ( codegen ) {
			return getThis();
		}
		// Fall through...
	}
	// Case: 2020 revision of ECMAScript standard
	if ( GlobalThis ) {
		return GlobalThis;
	}
	// Case: browsers and web workers
	if ( Self ) {
		return Self;
	}
	// Case: browsers
	if ( Win ) {
		return Win;
	}
	// Case: unknown
	throw new Error( 'unexpected error. Unable to resolve global object.' );
}


// EXPORTS //

module.exports = getGlobal;

},{"./codegen.js":149,"./global_this.js":150,"./self.js":151,"./window.js":152,"@stdlib/assert/is-boolean":33,"@stdlib/string/format":128}],149:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns the global object using code generation.
*
* @private
* @returns {Object} global object
*/
function getGlobal() {
	return new Function( 'return this;' )(); // eslint-disable-line no-new-func, stdlib/require-globals
}


// EXPORTS //

module.exports = getGlobal;

},{}],150:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof globalThis === 'object' ) ? globalThis : null; // eslint-disable-line no-undef


// EXPORTS //

module.exports = obj;

},{}],151:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof self === 'object' ) ? self : null;


// EXPORTS //

module.exports = obj;

},{}],152:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var obj = ( typeof window === 'object' ) ? window : null;


// EXPORTS //

module.exports = obj;

},{}],153:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Return a string value indicating a specification defined classification of an object.
*
* @module @stdlib/utils/native-class
*
* @example
* var nativeClass = require( '@stdlib/utils/native-class' );
*
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* str = nativeClass( 5 );
* // returns '[object Number]'
*
* function Beep() {
*     return this;
* }
* str = nativeClass( new Beep() );
* // returns '[object Object]'
*/

// MODULES //

var hasToStringTag = require( '@stdlib/assert/has-tostringtag-support' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var main;
if ( hasToStringTag() ) {
	main = polyfill;
} else {
	main = builtin;
}


// EXPORTS //

module.exports = main;

},{"./main.js":154,"./polyfill.js":155,"@stdlib/assert/has-tostringtag-support":20}],154:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	return toStr.call( v );
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":156}],155:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var toStringTag = require( './tostringtag.js' );
var toStr = require( './tostring.js' );


// MAIN //

/**
* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
*
* @param {*} v - input value
* @returns {string} string value indicating a specification defined classification of the input value
*
* @example
* var str = nativeClass( 'a' );
* // returns '[object String]'
*
* @example
* var str = nativeClass( 5 );
* // returns '[object Number]'
*
* @example
* function Beep() {
*     return this;
* }
* var str = nativeClass( new Beep() );
* // returns '[object Object]'
*/
function nativeClass( v ) {
	var isOwn;
	var tag;
	var out;

	if ( v === null || v === void 0 ) {
		return toStr.call( v );
	}
	tag = v[ toStringTag ];
	isOwn = hasOwnProp( v, toStringTag );

	// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
	try {
		v[ toStringTag ] = void 0;
	} catch ( err ) { // eslint-disable-line no-unused-vars
		return toStr.call( v );
	}
	out = toStr.call( v );

	if ( isOwn ) {
		v[ toStringTag ] = tag;
	} else {
		delete v[ toStringTag ];
	}
	return out;
}


// EXPORTS //

module.exports = nativeClass;

},{"./tostring.js":156,"./tostringtag.js":157,"@stdlib/assert/has-own-property":16}],156:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var toStr = Object.prototype.toString;


// EXPORTS //

module.exports = toStr;

},{}],157:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var Symbol = require( '@stdlib/symbol/ctor' );


// MAIN //

var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


// EXPORTS //

module.exports = toStrTag;

},{"@stdlib/symbol/ctor":131}],158:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Wrap `require` in a try/catch block.
*
* @module @stdlib/utils/try-require
*
* @example
* var tryRequire = require( '@stdlib/utils/try-require' );
*
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.log( out.message );
* }
*/

// MODULES //

var main = require( './main.js' );


// EXPORTS //

module.exports = main;

},{"./main.js":159}],159:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isError = require( '@stdlib/assert/is-error' );


// MAIN //

/**
* Wraps `require` in a try/catch block.
*
* @param {string} id - module id
* @returns {*|Error} `module.exports` of the resolved module or an error
*
* @example
* var out = tryRequire( 'beepboop' );
*
* if ( out instanceof Error ) {
*     console.error( out.message );
* }
*/
function tryRequire( id ) {
	try {
		return require( id ); // eslint-disable-line stdlib/no-dynamic-require
	} catch ( error ) {
		if ( isError( error ) ) {
			return error;
		}
		// Handle case where a literal is thrown...
		if ( typeof error === 'object' ) {
			return new Error( JSON.stringify( error ) );
		}
		return new Error( error.toString() );
	}
}


// EXPORTS //

module.exports = tryRequire;

},{"@stdlib/assert/is-error":41}],160:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var RE = require( './fixtures/re.js' );
var nodeList = require( './fixtures/nodelist.js' );
var typedarray = require( './fixtures/typedarray.js' );


// MAIN //

/**
* Checks whether a polyfill is needed when using the `typeof` operator.
*
* @private
* @returns {boolean} boolean indicating whether a polyfill is needed
*/
function check() {
	if (
		// Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
		typeof RE === 'function' ||

		// Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
		typeof typedarray === 'object' ||

		// PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
		typeof nodeList === 'function'
	) {
		return true;
	}
	return false;
}


// EXPORTS //

module.exports = check;

},{"./fixtures/nodelist.js":161,"./fixtures/re.js":162,"./fixtures/typedarray.js":163}],161:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var getGlobal = require( '@stdlib/utils/global' );


// MAIN //

var root = getGlobal();
var nodeList = root.document && root.document.childNodes;


// EXPORTS //

module.exports = nodeList;

},{"@stdlib/utils/global":148}],162:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var RE = /./;


// EXPORTS //

module.exports = RE;

},{}],163:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var typedarray = Int8Array; // eslint-disable-line stdlib/require-globals


// EXPORTS //

module.exports = typedarray;

},{}],164:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Determine a value's type.
*
* @module @stdlib/utils/type-of
*
* @example
* var typeOf = require( '@stdlib/utils/type-of' );
*
* var str = typeOf( 'a' );
* // returns 'string'
*
* str = typeOf( 5 );
* // returns 'number'
*/

// MODULES //

var usePolyfill = require( './check.js' );
var builtin = require( './main.js' );
var polyfill = require( './polyfill.js' );


// MAIN //

var main = ( usePolyfill() ) ? polyfill : builtin;


// EXPORTS //

module.exports = main;

},{"./check.js":160,"./main.js":165,"./polyfill.js":166}],165:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// NOTES //

/*
* Built-in `typeof` operator behavior:
*
* ```text
* typeof null => 'object'
* typeof undefined => 'undefined'
* typeof 'a' => 'string'
* typeof 5 => 'number'
* typeof NaN => 'number'
* typeof true => 'boolean'
* typeof false => 'boolean'
* typeof {} => 'object'
* typeof [] => 'object'
* typeof function foo(){} => 'function'
* typeof function* foo(){} => 'object'
* typeof Symbol() => 'symbol'
* ```
*
*/


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	var type;

	// Address `typeof null` => `object` (see http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null):
	if ( v === null ) {
		return 'null';
	}
	type = typeof v;

	// If the `typeof` operator returned something other than `object`, we are done. Otherwise, we need to check for an internal class name or search for a constructor.
	if ( type === 'object' ) {
		return ctorName( v ).toLowerCase();
	}
	return type;
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":133}],166:[function(require,module,exports){
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ctorName = require( '@stdlib/utils/constructor-name' );


// MAIN //

/**
* Determines a value's type.
*
* @param {*} v - input value
* @returns {string} string indicating the value's type
*/
function typeOf( v ) {
	return ctorName( v ).toLowerCase();
}


// EXPORTS //

module.exports = typeOf;

},{"@stdlib/utils/constructor-name":133}],167:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],168:[function(require,module,exports){

},{}],169:[function(require,module,exports){
arguments[4][168][0].apply(exports,arguments)
},{"dup":168}],170:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":167,"buffer":170,"ieee754":273}],171:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],172:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":280}],173:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":171,"inherits":274,"readable-stream/lib/_stream_duplex.js":175,"readable-stream/lib/_stream_passthrough.js":176,"readable-stream/lib/_stream_readable.js":177,"readable-stream/lib/_stream_transform.js":178,"readable-stream/lib/_stream_writable.js":179,"readable-stream/lib/internal/streams/end-of-stream.js":183,"readable-stream/lib/internal/streams/pipeline.js":185}],174:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],175:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":177,"./_stream_writable":179,"_process":280,"inherits":274}],176:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":178,"inherits":274}],177:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/async_iterator":180,"./internal/streams/buffer_list":181,"./internal/streams/destroy":182,"./internal/streams/from":184,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":280,"buffer":170,"events":171,"inherits":274,"string_decoder/":289,"util":168}],178:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":174,"./_stream_duplex":175,"inherits":274}],179:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":174,"./_stream_duplex":175,"./internal/streams/destroy":182,"./internal/streams/state":186,"./internal/streams/stream":187,"_process":280,"buffer":170,"inherits":274,"util-deprecate":298}],180:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":183,"_process":280}],181:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":170,"util":168}],182:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":280}],183:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":174}],184:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],185:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":174,"./end-of-stream":183}],186:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":174}],187:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":171}],188:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var callBind = require('./');

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};

},{"./":189,"get-intrinsic":264}],189:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var setFunctionLength = require('set-function-length');

var $TypeError = require('es-errors/type');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = require('es-define-property');
var $max = GetIntrinsic('%Math.max%');

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}

},{"es-define-property":249,"es-errors/type":255,"function-bind":263,"get-intrinsic":264,"set-function-length":284}],190:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":191,"./lib/keys.js":192}],191:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],192:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],193:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

},{"es-define-property":249,"es-errors/syntax":254,"es-errors/type":255,"gopd":265}],194:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require('define-data-property');

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = require('has-property-descriptors')();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"define-data-property":193,"has-property-descriptors":266,"object-keys":278}],195:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],196:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');
var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.3

module.exports = function AbstractEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType === yType) {
		return x === y; // ES6+ specified this shortcut anyways.
	}
	if (x == null && y == null) {
		return true;
	}
	if (xType === 'Number' && yType === 'String') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if (xType === 'String' && yType === 'Number') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (xType === 'Boolean') {
		return AbstractEqualityComparison(ToNumber(x), y);
	}
	if (yType === 'Boolean') {
		return AbstractEqualityComparison(x, ToNumber(y));
	}
	if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
		return AbstractEqualityComparison(x, ToPrimitive(y));
	}
	if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
		return AbstractEqualityComparison(ToPrimitive(x), y);
	}
	return false;
};

},{"./ToNumber":227,"./ToPrimitive":229,"./Type":234}],197:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Number = GetIntrinsic('%Number%');
var $TypeError = require('es-errors/type');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var isPrefixOf = require('../helpers/isPrefixOf');

var ToNumber = require('./ToNumber');
var ToPrimitive = require('./ToPrimitive');

// https://262.ecma-international.org/5.1/#sec-11.8.5

// eslint-disable-next-line max-statements
module.exports = function AbstractRelationalComparison(x, y, LeftFirst) {
	if (typeof LeftFirst !== 'boolean') {
		throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
	}
	var px;
	var py;
	if (LeftFirst) {
		px = ToPrimitive(x, $Number);
		py = ToPrimitive(y, $Number);
	} else {
		py = ToPrimitive(y, $Number);
		px = ToPrimitive(x, $Number);
	}
	var bothStrings = typeof px === 'string' && typeof py === 'string';
	if (!bothStrings) {
		var nx = ToNumber(px);
		var ny = ToNumber(py);
		if ($isNaN(nx) || $isNaN(ny)) {
			return undefined;
		}
		if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
			return false;
		}
		if (nx === Infinity) {
			return false;
		}
		if (ny === Infinity) {
			return true;
		}
		if (ny === -Infinity) {
			return false;
		}
		if (nx === -Infinity) {
			return true;
		}
		return nx < ny; // by now, these are both nonzero, finite, and not equal
	}
	if (isPrefixOf(py, px)) {
		return false;
	}
	if (isPrefixOf(px, py)) {
		return true;
	}
	return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
};

},{"../helpers/isFinite":242,"../helpers/isNaN":243,"../helpers/isPrefixOf":244,"./ToNumber":227,"./ToPrimitive":229,"es-errors/type":255,"get-intrinsic":264}],198:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var callBound = require('call-bind/callBound');

var $charCodeAt = callBound('String.prototype.charCodeAt');
var $toUpperCase = callBound('String.prototype.toUpperCase');

// https://262.ecma-international.org/5.1/#sec-15.10.2.8

module.exports = function Canonicalize(ch, IgnoreCase) {
	if (typeof ch !== 'string' || ch.length !== 1) {
		throw new $TypeError('Assertion failed: `ch` must be a character');
	}

	if (typeof IgnoreCase !== 'boolean') {
		throw new $TypeError('Assertion failed: `IgnoreCase` must be a Boolean');
	}

	if (!IgnoreCase) {
		return ch; // step 1
	}

	var u = $toUpperCase(ch); // step 2

	if (u.length !== 1) {
		return ch; // step 3
	}

	var cu = u; // step 4

	if ($charCodeAt(ch, 0) >= 128 && $charCodeAt(cu, 0) < 128) {
		return ch; // step 5
	}

	return cu;
};

},{"call-bind/callBound":188,"es-errors/type":255}],199:[function(require,module,exports){
'use strict';

var RequireObjectCoercible = require('es-object-atoms/RequireObjectCoercible');

// http://262.ecma-international.org/5.1/#sec-9.10

module.exports = function CheckObjectCoercible(value) {
	return RequireObjectCoercible(value, arguments.length > 1 ? arguments[1] : void undefined);
};

},{"es-object-atoms/RequireObjectCoercible":257}],200:[function(require,module,exports){
'use strict';

var $EvalError = require('es-errors/eval');

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');
var MonthFromTime = require('./MonthFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.5

module.exports = function DateFromTime(t) {
	var m = MonthFromTime(t);
	var d = DayWithinYear(t);
	if (m === 0) {
		return d + 1;
	}
	if (m === 1) {
		return d - 30;
	}
	var leap = InLeapYear(t);
	if (m === 2) {
		return d - 58 - leap;
	}
	if (m === 3) {
		return d - 89 - leap;
	}
	if (m === 4) {
		return d - 119 - leap;
	}
	if (m === 5) {
		return d - 150 - leap;
	}
	if (m === 6) {
		return d - 180 - leap;
	}
	if (m === 7) {
		return d - 211 - leap;
	}
	if (m === 8) {
		return d - 242 - leap;
	}
	if (m === 9) {
		return d - 272 - leap;
	}
	if (m === 10) {
		return d - 303 - leap;
	}
	if (m === 11) {
		return d - 333 - leap;
	}
	throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
};

},{"./DayWithinYear":203,"./InLeapYear":207,"./MonthFromTime":217,"es-errors/eval":250}],201:[function(require,module,exports){
'use strict';

var floor = require('./floor');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function Day(t) {
	return floor(t / msPerDay);
};

},{"../helpers/timeConstants":248,"./floor":238}],202:[function(require,module,exports){
'use strict';

var floor = require('./floor');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DayFromYear(y) {
	return (365 * (y - 1970)) + floor((y - 1969) / 4) - floor((y - 1901) / 100) + floor((y - 1601) / 400);
};


},{"./floor":238}],203:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var DayFromYear = require('./DayFromYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function DayWithinYear(t) {
	return Day(t) - DayFromYear(YearFromTime(t));
};

},{"./Day":201,"./DayFromYear":202,"./YearFromTime":236}],204:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function DaysInYear(y) {
	if (modulo(y, 4) !== 0) {
		return 365;
	}
	if (modulo(y, 100) !== 0) {
		return 366;
	}
	if (modulo(y, 400) !== 0) {
		return 365;
	}
	return 366;
};

},{"./modulo":239}],205:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var IsDataDescriptor = require('./IsDataDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.4

module.exports = function FromPropertyDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return Desc;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (IsDataDescriptor(Desc)) {
		return {
			value: Desc['[[Value]]'],
			writable: !!Desc['[[Writable]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	} else if (IsAccessorDescriptor(Desc)) {
		return {
			get: Desc['[[Get]]'],
			set: Desc['[[Set]]'],
			enumerable: !!Desc['[[Enumerable]]'],
			configurable: !!Desc['[[Configurable]]']
		};
	}
	throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');

};

},{"../helpers/records/property-descriptor":246,"./IsAccessorDescriptor":208,"./IsDataDescriptor":210,"es-errors/type":255}],206:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerHour = timeConstants.msPerHour;
var HoursPerDay = timeConstants.HoursPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function HourFromTime(t) {
	return modulo(floor(t / msPerHour), HoursPerDay);
};

},{"../helpers/timeConstants":248,"./floor":238,"./modulo":239}],207:[function(require,module,exports){
'use strict';

var $EvalError = require('es-errors/eval');

var DaysInYear = require('./DaysInYear');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function InLeapYear(t) {
	var days = DaysInYear(YearFromTime(t));
	if (days === 365) {
		return 0;
	}
	if (days === 366) {
		return 1;
	}
	throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
};

},{"./DaysInYear":204,"./YearFromTime":236,"es-errors/eval":250}],208:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.1

module.exports = function IsAccessorDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!hasOwn(Desc, '[[Get]]') && !hasOwn(Desc, '[[Set]]')) {
		return false;
	}

	return true;
};

},{"../helpers/records/property-descriptor":246,"es-errors/type":255,"hasown":272}],209:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.11

module.exports = require('is-callable');

},{"is-callable":275}],210:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.2

module.exports = function IsDataDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!hasOwn(Desc, '[[Value]]') && !hasOwn(Desc, '[[Writable]]')) {
		return false;
	}

	return true;
};

},{"../helpers/records/property-descriptor":246,"es-errors/type":255,"hasown":272}],211:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');

var isPropertyDescriptor = require('./IsPropertyDescriptor');

// https://262.ecma-international.org/5.1/#sec-8.10.3

module.exports = function IsGenericDescriptor(Desc) {
	if (typeof Desc === 'undefined') {
		return false;
	}

	if (!isPropertyDescriptor(Desc)) {
		throw new $TypeError('Assertion failed: `Desc` must be a Property Descriptor');
	}

	if (!IsAccessorDescriptor(Desc) && !IsDataDescriptor(Desc)) {
		return true;
	}

	return false;
};

},{"./IsAccessorDescriptor":208,"./IsDataDescriptor":210,"./IsPropertyDescriptor":212,"es-errors/type":255}],212:[function(require,module,exports){
'use strict';

// TODO, semver-major: delete this

var isPropertyDescriptor = require('../helpers/records/property-descriptor');

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function IsPropertyDescriptor(Desc) {
	return isPropertyDescriptor(Desc);
};

},{"../helpers/records/property-descriptor":246}],213:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.13

module.exports = function MakeDate(day, time) {
	if (!$isFinite(day) || !$isFinite(time)) {
		return NaN;
	}
	return (day * msPerDay) + time;
};

},{"../helpers/isFinite":242,"../helpers/timeConstants":248}],214:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $DateUTC = GetIntrinsic('%Date.UTC%');

var $isFinite = require('../helpers/isFinite');

var DateFromTime = require('./DateFromTime');
var Day = require('./Day');
var floor = require('./floor');
var modulo = require('./modulo');
var MonthFromTime = require('./MonthFromTime');
var ToInteger = require('./ToInteger');
var YearFromTime = require('./YearFromTime');

// https://262.ecma-international.org/5.1/#sec-15.9.1.12

module.exports = function MakeDay(year, month, date) {
	if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
		return NaN;
	}
	var y = ToInteger(year);
	var m = ToInteger(month);
	var dt = ToInteger(date);
	var ym = y + floor(m / 12);
	var mn = modulo(m, 12);
	var t = $DateUTC(ym, mn, 1);
	if (YearFromTime(t) !== ym || MonthFromTime(t) !== mn || DateFromTime(t) !== 1) {
		return NaN;
	}
	return Day(t) + dt - 1;
};

},{"../helpers/isFinite":242,"./DateFromTime":200,"./Day":201,"./MonthFromTime":217,"./ToInteger":226,"./YearFromTime":236,"./floor":238,"./modulo":239,"get-intrinsic":264}],215:[function(require,module,exports){
'use strict';

var $isFinite = require('../helpers/isFinite');
var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var msPerMinute = timeConstants.msPerMinute;
var msPerHour = timeConstants.msPerHour;

var ToInteger = require('./ToInteger');

// https://262.ecma-international.org/5.1/#sec-15.9.1.11

module.exports = function MakeTime(hour, min, sec, ms) {
	if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
		return NaN;
	}
	var h = ToInteger(hour);
	var m = ToInteger(min);
	var s = ToInteger(sec);
	var milli = ToInteger(ms);
	var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
	return t;
};

},{"../helpers/isFinite":242,"../helpers/timeConstants":248,"./ToInteger":226}],216:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerMinute = timeConstants.msPerMinute;
var MinutesPerHour = timeConstants.MinutesPerHour;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function MinFromTime(t) {
	return modulo(floor(t / msPerMinute), MinutesPerHour);
};

},{"../helpers/timeConstants":248,"./floor":238,"./modulo":239}],217:[function(require,module,exports){
'use strict';

var DayWithinYear = require('./DayWithinYear');
var InLeapYear = require('./InLeapYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.4

module.exports = function MonthFromTime(t) {
	var day = DayWithinYear(t);
	if (0 <= day && day < 31) {
		return 0;
	}
	var leap = InLeapYear(t);
	if (31 <= day && day < (59 + leap)) {
		return 1;
	}
	if ((59 + leap) <= day && day < (90 + leap)) {
		return 2;
	}
	if ((90 + leap) <= day && day < (120 + leap)) {
		return 3;
	}
	if ((120 + leap) <= day && day < (151 + leap)) {
		return 4;
	}
	if ((151 + leap) <= day && day < (181 + leap)) {
		return 5;
	}
	if ((181 + leap) <= day && day < (212 + leap)) {
		return 6;
	}
	if ((212 + leap) <= day && day < (243 + leap)) {
		return 7;
	}
	if ((243 + leap) <= day && day < (273 + leap)) {
		return 8;
	}
	if ((273 + leap) <= day && day < (304 + leap)) {
		return 9;
	}
	if ((304 + leap) <= day && day < (334 + leap)) {
		return 10;
	}
	if ((334 + leap) <= day && day < (365 + leap)) {
		return 11;
	}
};

},{"./DayWithinYear":203,"./InLeapYear":207}],218:[function(require,module,exports){
'use strict';

var $isNaN = require('../helpers/isNaN');

// http://262.ecma-international.org/5.1/#sec-9.12

module.exports = function SameValue(x, y) {
	if (x === y) { // 0 === -0, but they are not identical.
		if (x === 0) { return 1 / x === 1 / y; }
		return true;
	}
	return $isNaN(x) && $isNaN(y);
};

},{"../helpers/isNaN":243}],219:[function(require,module,exports){
'use strict';

var floor = require('./floor');
var modulo = require('./modulo');

var timeConstants = require('../helpers/timeConstants');
var msPerSecond = timeConstants.msPerSecond;
var SecondsPerMinute = timeConstants.SecondsPerMinute;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function SecFromTime(t) {
	return modulo(floor(t / msPerSecond), SecondsPerMinute);
};

},{"../helpers/timeConstants":248,"./floor":238,"./modulo":239}],220:[function(require,module,exports){
'use strict';

var Type = require('./Type');

// https://262.ecma-international.org/5.1/#sec-11.9.6

module.exports = function StrictEqualityComparison(x, y) {
	var xType = Type(x);
	var yType = Type(y);
	if (xType !== yType) {
		return false;
	}
	if (xType === 'Undefined' || xType === 'Null') {
		return true;
	}
	return x === y; // shortcut for steps 4-7
};

},{"./Type":234}],221:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');
var $Number = GetIntrinsic('%Number%');

var $isFinite = require('../helpers/isFinite');

var abs = require('./abs');
var ToNumber = require('./ToNumber');

// https://262.ecma-international.org/5.1/#sec-15.9.1.14

module.exports = function TimeClip(time) {
	if (!$isFinite(time) || abs(time) > 8.64e15) {
		return NaN;
	}
	return $Number(new $Date(ToNumber(time)));
};


},{"../helpers/isFinite":242,"./ToNumber":227,"./abs":237,"get-intrinsic":264}],222:[function(require,module,exports){
'use strict';

var msPerDay = require('../helpers/timeConstants').msPerDay;

var DayFromYear = require('./DayFromYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function TimeFromYear(y) {
	return msPerDay * DayFromYear(y);
};

},{"../helpers/timeConstants":248,"./DayFromYear":202}],223:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerDay = require('../helpers/timeConstants').msPerDay;

// https://262.ecma-international.org/5.1/#sec-15.9.1.2

module.exports = function TimeWithinDay(t) {
	return modulo(t, msPerDay);
};


},{"../helpers/timeConstants":248,"./modulo":239}],224:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.2

module.exports = function ToBoolean(value) { return !!value; };

},{}],225:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.5

module.exports = function ToInt32(x) {
	return ToNumber(x) >> 0;
};

},{"./ToNumber":227}],226:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.4

module.exports = function ToInteger(value) {
	var number = ToNumber(value);
	if ($isNaN(number)) { return 0; }
	if (number === 0 || !$isFinite(number)) { return number; }
	return $sign(number) * floor(abs(number));
};

},{"../helpers/isFinite":242,"../helpers/isNaN":243,"../helpers/sign":247,"./ToNumber":227,"./abs":237,"./floor":238}],227:[function(require,module,exports){
'use strict';

var ToPrimitive = require('./ToPrimitive');

var callBound = require('call-bind/callBound');

var $replace = callBound('String.prototype.replace');

var safeRegexTester = require('safe-regex-test');

var isNonDecimal = safeRegexTester(/^0[ob]|^[+-]0x/);

// http://262.ecma-international.org/5.1/#sec-9.3

module.exports = function ToNumber(value) {
	var prim = ToPrimitive(value, Number);
	if (typeof prim !== 'string') {
		return +prim; // eslint-disable-line no-implicit-coercion
	}

	var trimmed = $replace(
		prim,
		// eslint-disable-next-line no-control-regex
		/^[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+|[ \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u0085]+$/g,
		''
	);
	if (isNonDecimal(trimmed)) {
		return NaN;
	}

	return +trimmed; // eslint-disable-line no-implicit-coercion
};

},{"./ToPrimitive":229,"call-bind/callBound":188,"safe-regex-test":283}],228:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.9

module.exports = require('es-object-atoms/ToObject');

},{"es-object-atoms/ToObject":258}],229:[function(require,module,exports){
'use strict';

// http://262.ecma-international.org/5.1/#sec-9.1

module.exports = require('es-to-primitive/es5');

},{"es-to-primitive/es5":260}],230:[function(require,module,exports){
'use strict';

var hasOwn = require('hasown');

var $TypeError = require('es-errors/type');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) {
	if (Type(Obj) !== 'Object') {
		throw new $TypeError('ToPropertyDescriptor requires an object');
	}

	var desc = {};
	if (hasOwn(Obj, 'enumerable')) {
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	}
	if (hasOwn(Obj, 'configurable')) {
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	}
	if (hasOwn(Obj, 'value')) {
		desc['[[Value]]'] = Obj.value;
	}
	if (hasOwn(Obj, 'writable')) {
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	}
	if (hasOwn(Obj, 'get')) {
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
			throw new $TypeError('getter must be a function');
		}
		desc['[[Get]]'] = getter;
	}
	if (hasOwn(Obj, 'set')) {
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
			throw new $TypeError('setter must be a function');
		}
		desc['[[Set]]'] = setter;
	}

	if ((hasOwn(desc, '[[Get]]') || hasOwn(desc, '[[Set]]')) && (hasOwn(desc, '[[Value]]') || hasOwn(desc, '[[Writable]]'))) {
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	}
	return desc;
};

},{"./IsCallable":209,"./ToBoolean":224,"./Type":234,"es-errors/type":255,"hasown":272}],231:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $String = GetIntrinsic('%String%');

// http://262.ecma-international.org/5.1/#sec-9.8

module.exports = function ToString(value) {
	return $String(value);
};


},{"get-intrinsic":264}],232:[function(require,module,exports){
'use strict';

var abs = require('./abs');
var floor = require('./floor');
var modulo = require('./modulo');
var ToNumber = require('./ToNumber');

var $isNaN = require('../helpers/isNaN');
var $isFinite = require('../helpers/isFinite');
var $sign = require('../helpers/sign');

// http://262.ecma-international.org/5.1/#sec-9.7

module.exports = function ToUint16(value) {
	var number = ToNumber(value);
	if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
	var posInt = $sign(number) * floor(abs(number));
	return modulo(posInt, 0x10000);
};

},{"../helpers/isFinite":242,"../helpers/isNaN":243,"../helpers/sign":247,"./ToNumber":227,"./abs":237,"./floor":238,"./modulo":239}],233:[function(require,module,exports){
'use strict';

var ToNumber = require('./ToNumber');

// http://262.ecma-international.org/5.1/#sec-9.6

module.exports = function ToUint32(x) {
	return ToNumber(x) >>> 0;
};

},{"./ToNumber":227}],234:[function(require,module,exports){
'use strict';

// https://262.ecma-international.org/5.1/#sec-8

module.exports = function Type(x) {
	if (x === null) {
		return 'Null';
	}
	if (typeof x === 'undefined') {
		return 'Undefined';
	}
	if (typeof x === 'function' || typeof x === 'object') {
		return 'Object';
	}
	if (typeof x === 'number') {
		return 'Number';
	}
	if (typeof x === 'boolean') {
		return 'Boolean';
	}
	if (typeof x === 'string') {
		return 'String';
	}
};

},{}],235:[function(require,module,exports){
'use strict';

var Day = require('./Day');
var modulo = require('./modulo');

// https://262.ecma-international.org/5.1/#sec-15.9.1.6

module.exports = function WeekDay(t) {
	return modulo(Day(t) + 4, 7);
};

},{"./Day":201,"./modulo":239}],236:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $Date = GetIntrinsic('%Date%');

var callBound = require('call-bind/callBound');

var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

// https://262.ecma-international.org/5.1/#sec-15.9.1.3

module.exports = function YearFromTime(t) {
	// largest y such that this.TimeFromYear(y) <= t
	return $getUTCFullYear(new $Date(t));
};

},{"call-bind/callBound":188,"get-intrinsic":264}],237:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $abs = GetIntrinsic('%Math.abs%');

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function abs(x) {
	return $abs(x);
};

},{"get-intrinsic":264}],238:[function(require,module,exports){
'use strict';

// var modulo = require('./modulo');
var $floor = Math.floor;

// http://262.ecma-international.org/5.1/#sec-5.2

module.exports = function floor(x) {
	// return x - modulo(x, 1);
	return $floor(x);
};

},{}],239:[function(require,module,exports){
'use strict';

var mod = require('../helpers/mod');

// https://262.ecma-international.org/5.1/#sec-5.2

module.exports = function modulo(x, y) {
	return mod(x, y);
};

},{"../helpers/mod":245}],240:[function(require,module,exports){
'use strict';

var modulo = require('./modulo');

var msPerSecond = require('../helpers/timeConstants').msPerSecond;

// https://262.ecma-international.org/5.1/#sec-15.9.1.10

module.exports = function msFromTime(t) {
	return modulo(t, msPerSecond);
};

},{"../helpers/timeConstants":248,"./modulo":239}],241:[function(require,module,exports){
'use strict';

/* eslint global-require: 0 */

// https://es5.github.io/#x9
module.exports = {
	'Abstract Equality Comparison': require('./5/AbstractEqualityComparison'),
	'Abstract Relational Comparison': require('./5/AbstractRelationalComparison'),
	'Strict Equality Comparison': require('./5/StrictEqualityComparison'),
	abs: require('./5/abs'),
	Canonicalize: require('./5/Canonicalize'),
	CheckObjectCoercible: require('./5/CheckObjectCoercible'),
	DateFromTime: require('./5/DateFromTime'),
	Day: require('./5/Day'),
	DayFromYear: require('./5/DayFromYear'),
	DaysInYear: require('./5/DaysInYear'),
	DayWithinYear: require('./5/DayWithinYear'),
	floor: require('./5/floor'),
	FromPropertyDescriptor: require('./5/FromPropertyDescriptor'),
	HourFromTime: require('./5/HourFromTime'),
	InLeapYear: require('./5/InLeapYear'),
	IsAccessorDescriptor: require('./5/IsAccessorDescriptor'),
	IsCallable: require('./5/IsCallable'),
	IsDataDescriptor: require('./5/IsDataDescriptor'),
	IsGenericDescriptor: require('./5/IsGenericDescriptor'),
	IsPropertyDescriptor: require('./5/IsPropertyDescriptor'),
	MakeDate: require('./5/MakeDate'),
	MakeDay: require('./5/MakeDay'),
	MakeTime: require('./5/MakeTime'),
	MinFromTime: require('./5/MinFromTime'),
	modulo: require('./5/modulo'),
	MonthFromTime: require('./5/MonthFromTime'),
	msFromTime: require('./5/msFromTime'),
	SameValue: require('./5/SameValue'),
	SecFromTime: require('./5/SecFromTime'),
	TimeClip: require('./5/TimeClip'),
	TimeFromYear: require('./5/TimeFromYear'),
	TimeWithinDay: require('./5/TimeWithinDay'),
	ToBoolean: require('./5/ToBoolean'),
	ToInt32: require('./5/ToInt32'),
	ToInteger: require('./5/ToInteger'),
	ToNumber: require('./5/ToNumber'),
	ToObject: require('./5/ToObject'),
	ToPrimitive: require('./5/ToPrimitive'),
	ToPropertyDescriptor: require('./5/ToPropertyDescriptor'),
	ToString: require('./5/ToString'),
	ToUint16: require('./5/ToUint16'),
	ToUint32: require('./5/ToUint32'),
	Type: require('./5/Type'),
	WeekDay: require('./5/WeekDay'),
	YearFromTime: require('./5/YearFromTime')
};

},{"./5/AbstractEqualityComparison":196,"./5/AbstractRelationalComparison":197,"./5/Canonicalize":198,"./5/CheckObjectCoercible":199,"./5/DateFromTime":200,"./5/Day":201,"./5/DayFromYear":202,"./5/DayWithinYear":203,"./5/DaysInYear":204,"./5/FromPropertyDescriptor":205,"./5/HourFromTime":206,"./5/InLeapYear":207,"./5/IsAccessorDescriptor":208,"./5/IsCallable":209,"./5/IsDataDescriptor":210,"./5/IsGenericDescriptor":211,"./5/IsPropertyDescriptor":212,"./5/MakeDate":213,"./5/MakeDay":214,"./5/MakeTime":215,"./5/MinFromTime":216,"./5/MonthFromTime":217,"./5/SameValue":218,"./5/SecFromTime":219,"./5/StrictEqualityComparison":220,"./5/TimeClip":221,"./5/TimeFromYear":222,"./5/TimeWithinDay":223,"./5/ToBoolean":224,"./5/ToInt32":225,"./5/ToInteger":226,"./5/ToNumber":227,"./5/ToObject":228,"./5/ToPrimitive":229,"./5/ToPropertyDescriptor":230,"./5/ToString":231,"./5/ToUint16":232,"./5/ToUint32":233,"./5/Type":234,"./5/WeekDay":235,"./5/YearFromTime":236,"./5/abs":237,"./5/floor":238,"./5/modulo":239,"./5/msFromTime":240}],242:[function(require,module,exports){
'use strict';

var $isNaN = require('./isNaN');

module.exports = function (x) { return (typeof x === 'number' || typeof x === 'bigint') && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{"./isNaN":243}],243:[function(require,module,exports){
'use strict';

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],244:[function(require,module,exports){
'use strict';

var $strSlice = require('call-bind/callBound')('String.prototype.slice');

module.exports = function isPrefixOf(prefix, string) {
	if (prefix === string) {
		return true;
	}
	if (prefix.length > string.length) {
		return false;
	}
	return $strSlice(string, 0, prefix.length) === prefix;
};

},{"call-bind/callBound":188}],245:[function(require,module,exports){
'use strict';

var $floor = Math.floor;

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return $floor(remain >= 0 ? remain : remain + modulo);
};

},{}],246:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

var hasOwn = require('hasown');

var allowed = {
	__proto__: null,
	'[[Configurable]]': true,
	'[[Enumerable]]': true,
	'[[Get]]': true,
	'[[Set]]': true,
	'[[Value]]': true,
	'[[Writable]]': true
};

// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type

module.exports = function isPropertyDescriptor(Desc) {
	if (!Desc || typeof Desc !== 'object') {
		return false;
	}

	for (var key in Desc) { // eslint-disable-line
		if (hasOwn(Desc, key) && !allowed[key]) {
			return false;
		}
	}

	var isData = hasOwn(Desc, '[[Value]]') || hasOwn(Desc, '[[Writable]]');
	var IsAccessor = hasOwn(Desc, '[[Get]]') || hasOwn(Desc, '[[Set]]');
	if (isData && IsAccessor) {
		throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
	}
	return true;
};

},{"es-errors/type":255,"hasown":272}],247:[function(require,module,exports){
'use strict';

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],248:[function(require,module,exports){
'use strict';

var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1e3;
var msPerMinute = msPerSecond * SecondsPerMinute;
var msPerHour = msPerMinute * MinutesPerHour;
var msPerDay = 86400000;

module.exports = {
	HoursPerDay: HoursPerDay,
	MinutesPerHour: MinutesPerHour,
	SecondsPerMinute: SecondsPerMinute,
	msPerSecond: msPerSecond,
	msPerMinute: msPerMinute,
	msPerHour: msPerHour,
	msPerDay: msPerDay
};

},{}],249:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;

},{"get-intrinsic":264}],250:[function(require,module,exports){
'use strict';

/** @type {import('./eval')} */
module.exports = EvalError;

},{}],251:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Error;

},{}],252:[function(require,module,exports){
'use strict';

/** @type {import('./range')} */
module.exports = RangeError;

},{}],253:[function(require,module,exports){
'use strict';

/** @type {import('./ref')} */
module.exports = ReferenceError;

},{}],254:[function(require,module,exports){
'use strict';

/** @type {import('./syntax')} */
module.exports = SyntaxError;

},{}],255:[function(require,module,exports){
'use strict';

/** @type {import('./type')} */
module.exports = TypeError;

},{}],256:[function(require,module,exports){
'use strict';

/** @type {import('./uri')} */
module.exports = URIError;

},{}],257:[function(require,module,exports){
'use strict';

var $TypeError = require('es-errors/type');

/** @type {import('./RequireObjectCoercible')} */
module.exports = function RequireObjectCoercible(value) {
	if (value == null) {
		throw new $TypeError((arguments.length > 0 && arguments[1]) || ('Cannot call method on ' + value));
	}
	return value;
};

},{"es-errors/type":255}],258:[function(require,module,exports){
'use strict';

var $Object = require('./');
var RequireObjectCoercible = require('./RequireObjectCoercible');

/** @type {import('./ToObject')} */
module.exports = function ToObject(value) {
	RequireObjectCoercible(value);
	return $Object(value);
};

},{"./":259,"./RequireObjectCoercible":257}],259:[function(require,module,exports){
'use strict';

/** @type {import('.')} */
module.exports = Object;

},{}],260:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
var ES5internalSlots = {
	'[[DefaultValue]]': function (O) {
		var actualHint;
		if (arguments.length > 1) {
			actualHint = arguments[1];
		} else {
			actualHint = toStr.call(O) === '[object Date]' ? String : Number;
		}

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// http://ecma-international.org/ecma-262/5.1/#sec-9.1
module.exports = function ToPrimitive(input) {
	if (isPrimitive(input)) {
		return input;
	}
	if (arguments.length > 1) {
		return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
	}
	return ES5internalSlots['[[DefaultValue]]'](input);
};

},{"./helpers/isPrimitive":261,"is-callable":275}],261:[function(require,module,exports){
'use strict';

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],262:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],263:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":262}],264:[function(require,module,exports){
'use strict';

var undefined;

var $Error = require('es-errors');
var $EvalError = require('es-errors/eval');
var $RangeError = require('es-errors/range');
var $ReferenceError = require('es-errors/ref');
var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');
var $URIError = require('es-errors/uri');

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = require('has-symbols')();
var hasProto = require('has-proto')();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = require('function-bind');
var hasOwn = require('hasown');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

},{"es-errors":251,"es-errors/eval":250,"es-errors/range":252,"es-errors/ref":253,"es-errors/syntax":254,"es-errors/type":255,"es-errors/uri":256,"function-bind":263,"has-proto":267,"has-symbols":268,"hasown":272}],265:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;

},{"get-intrinsic":264}],266:[function(require,module,exports){
'use strict';

var $defineProperty = require('es-define-property');

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;

},{"es-define-property":249}],267:[function(require,module,exports){
'use strict';

var test = {
	__proto__: null,
	foo: {}
};

var $Object = Object;

/** @type {import('.')} */
module.exports = function hasProto() {
	// @ts-expect-error: TS errors on an inherited property for some reason
	return { __proto__: test }.foo === test.foo
		&& !(test instanceof $Object);
};

},{}],268:[function(require,module,exports){
'use strict';

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};

},{"./shams":269}],269:[function(require,module,exports){
'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};

},{}],270:[function(require,module,exports){
'use strict';

var hasSymbols = require('has-symbols/shams');

/** @type {import('.')} */
module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":269}],271:[function(require,module,exports){
'use strict';

var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":263}],272:[function(require,module,exports){
'use strict';

var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require('function-bind');

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);

},{"function-bind":263}],273:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],274:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],275:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

},{}],276:[function(require,module,exports){
'use strict';

var callBound = require('call-bind/callBound');
var hasToStringTag = require('has-tostringtag/shams')();
var has;
var $exec;
var isRegexMarker;
var badStringifier;

if (hasToStringTag) {
	has = callBound('Object.prototype.hasOwnProperty');
	$exec = callBound('RegExp.prototype.exec');
	isRegexMarker = {};

	var throwRegexMarker = function () {
		throw isRegexMarker;
	};
	badStringifier = {
		toString: throwRegexMarker,
		valueOf: throwRegexMarker
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
	}
}

var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';

module.exports = hasToStringTag
	// eslint-disable-next-line consistent-return
	? function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		var descriptor = gOPD(value, 'lastIndex');
		var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}

		try {
			$exec(value, badStringifier);
		} catch (e) {
			return e === isRegexMarker;
		}
	}
	: function isRegex(value) {
		// In older browsers, typeof regex incorrectly returns 'function'
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return $toString(value) === regexClass;
	};

},{"call-bind/callBound":188,"has-tostringtag/shams":270}],277:[function(require,module,exports){
'use strict';

var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = require('./isArguments'); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;

},{"./isArguments":279}],278:[function(require,module,exports){
'use strict';

var slice = Array.prototype.slice;
var isArgs = require('./isArguments');

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./implementation":277,"./isArguments":279}],279:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],280:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],281:[function(require,module,exports){
(function (process,setImmediate){(function (){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":280,"through":296,"timers":297}],282:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":170}],283:[function(require,module,exports){
'use strict';

var callBound = require('call-bind/callBound');
var isRegex = require('is-regex');

var $exec = callBound('RegExp.prototype.exec');
var $TypeError = require('es-errors/type');

module.exports = function regexTester(regex) {
	if (!isRegex(regex)) {
		throw new $TypeError('`regex` must be a RegExp');
	}
	return function test(s) {
		return $exec(regex, s) !== null;
	};
};

},{"call-bind/callBound":188,"es-errors/type":255,"is-regex":276}],284:[function(require,module,exports){
'use strict';

var GetIntrinsic = require('get-intrinsic');
var define = require('define-data-property');
var hasDescriptors = require('has-property-descriptors')();
var gOPD = require('gopd');

var $TypeError = require('es-errors/type');
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};

},{"define-data-property":193,"es-errors/type":255,"get-intrinsic":264,"gopd":265,"has-property-descriptors":266}],285:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":241,"function-bind":263}],286:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":285,"./polyfill":287,"./shim":288,"define-properties":194,"function-bind":263}],287:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":285}],288:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":287,"define-properties":194}],289:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":282}],290:[function(require,module,exports){
(function (process,setImmediate){(function (){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"./lib/default_stream":291,"./lib/results":293,"./lib/test":294,"_process":280,"defined":195,"through":296,"timers":297}],291:[function(require,module,exports){
(function (process){(function (){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this)}).call(this,require('_process'))
},{"_process":280,"fs":169,"through":296}],292:[function(require,module,exports){
(function (process,setImmediate){(function (){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":280,"timers":297}],293:[function(require,module,exports){
(function (process,setImmediate){(function (){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this)}).call(this,require('_process'),require("timers").setImmediate)
},{"_process":280,"events":171,"function-bind":263,"has":271,"inherits":274,"object-inspect":295,"resumer":281,"through":296,"timers":297}],294:[function(require,module,exports){
(function (__dirname){(function (){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this)}).call(this,"/node_modules/tape/lib")
},{"./next_tick":292,"deep-equal":190,"defined":195,"events":171,"has":271,"inherits":274,"path":172,"string.prototype.trim":286}],295:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],296:[function(require,module,exports){
(function (process){(function (){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this)}).call(this,require('_process'))
},{"_process":280,"stream":173}],297:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":280,"timers":297}],298:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[96,97]);
