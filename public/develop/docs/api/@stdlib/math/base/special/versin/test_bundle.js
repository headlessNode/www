// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-to-words":53}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -Math.PI/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;
	var y;
	var z;

	y = new Array( 2 );
	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= 0x7fffffff;
	if ( ix <= 0x3fe921fb ) {
		// Case: x < 2**-27
		if ( ix<0x3e400000 ) {
			if ( (x|0) === 0 ) {
				// Generate inexact...
				return 1.0;
			}
		}
		return kernelCos( x, z );
	}
	// Case: cos(Inf or NaN) is NaN */
	else if ( ix >= 0x7ff00000 ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = rempio2( x, y );
	switch ( n & 3 ) {
	case 0:
		return kernelCos( y[0], y[1] );
	case 1:
		return -kernelSin( y[0], y[1] );
	case 2:
		return -kernelCos( y[0], y[1] );
	default:
		return kernelSin( y[0], y[1] );
	}
} // end FUNCTION cos()


// EXPORTS //

module.exports = cos;

},{"@stdlib/math/base/special/kernel-cos":16,"@stdlib/math/base/special/kernel-sin":18,"@stdlib/math/base/special/rempio2":22,"@stdlib/math/base/utils/float64-get-high-word":47}],13:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* v = cos( -Math.PI/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":12}],14:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],15:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":14}],16:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number on `[-pi/4, pi/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":17}],17:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;


// VARIABLES //

var C13 = [
	4.16666666666666019037e-02,  // 0x3FA55555, 0x5555554C
	-1.38888888888741095749e-03, // 0xBF56C16C, 0x16C15177
	2.48015872894767294178e-05  // 0x3EFA01A0, 0x19CB1590
];
var C46 = [
	-2.75573143513906633035e-07, // 0xBE927E4F, 0x809C52AD
	2.08757232129817482790e-09, // 0x3E21EE9E, 0xBDB4B1C4
	-1.13596475577881948265e-11 // 0xBDA8FAE9, 0xBE8838D4
];


// FUNCTIONS //

// Create polynomial functions based on above coefficients...
var polyval13 = evalpoly( C13 );
var polyval46 = evalpoly( C46 );


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{"@stdlib/math/base/tools/evalpoly":39}],18:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number on `[-pi/4, pi/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":19}],19:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @param {number} x - input value (assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine (in radians)
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],20:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":21}],21:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":41,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-normalize":51,"@stdlib/math/base/utils/float64-to-words":53,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-max-base2-exponent":60,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":59,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":61,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],22:[function(require,module,exports){
'use strict';

/**
* Compute `x - n*pi/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var x = 128.0;
* var y = new Array( 2 );
* var n = rempio2( x, y );
* // returns 81.0
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":24}],23:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/pi` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (24*i)-th to (24*i+23)-th bit of `2/pi` after binary point. The corresponding floating value is
*
* ``` tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (e0 <= 16360, jk = 6), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `pi/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Collection} y - output result in an array of double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/pi`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	// eslint-disable-next-line no-plusplus
	for ( i = 0; j > 0; i++, j-- ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - N*pi/2` so that `|y| < pi/2`.
*
* ## Method
*
* * The method is to compute the integer (mod 8) and fraction parts of `(2/pi)*x` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals 0 mod 8 ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Collection} y - output result in an array of double precision numbers
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	// eslint-disable-next-line no-plusplus
	for ( i = 0; i <= m; i++, j++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
} // end FUNCTION kernelRempio2()


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":15,"@stdlib/math/base/special/ldexp":20}],24:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for PI and PI/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3*PI/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5*PI/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6*PI/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7*PI/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8*PI/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9*PI/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*pi/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - n*pi/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
* * The function does not perform input validation for `y` due to performance considerations. You should ensure to only supply an array, typed array, or an array-like object for `y`.
*
*
* @param {number} x - input value
* @param {Collection} y - remainder elements
* @returns {integer} factor of `pi/2`
*
* @example
* var x = 128.0;
* var y = new Array( 2 );
* var n = rempio2( x, y );
* // returns 81.0
*
* var y1 = y[ 0 ];
* // returns ~0.765
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0.0
*
* var y1 = y[ 0 ];
* // returns NaN
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= pi/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5pi/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= pi/2 or pi
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3pi/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4pi/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*pi/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION rempio2()


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":23,"./rempio2_medium.js":25,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-get-low-word":49}],25:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/PI:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of PI/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of PI/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - n*pi/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {Collection} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION rempio2Medium()


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":26,"@stdlib/math/base/utils/float64-get-high-word":47}],26:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":27}],27:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],28:[function(require,module,exports){
'use strict';

/**
* Compute the versed sine.
*
* @module @stdlib/math/base/special/versin
*
* @example
* var versin = require( '@stdlib/math/base/special/versin' );
*
* var v = versin( 0.0 );
* // returns 0.0
*
* v = versin( Math.PI/2.0 );
* // returns ~1.0
*
* v = versin( -Math.PI/6.0 );
* // returns ~0.13397
*
* v = versin( NaN );
* // returns NaN
*/

// MODULES //

var versin = require( './versin.js' );


// EXPORTS //

module.exports = versin;

},{"./versin.js":29}],29:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the versed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed sine
*
* @example
* var v = versin( 0.0 );
* // returns 0.0
*
* @example
* var v = versin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = versin( -Math.PI/6.0 );
* // returns ~0.13397
*
* @example
* var v = versin( NaN );
* // returns NaN
*/
function versin( x ) {
	return 1.0 - cos( x );
} // end FUNCTION versin()


// EXPORTS //

module.exports = versin;

},{"@stdlib/math/base/special/cos":13}],30:[function(require,module,exports){
module.exports={"expected":[0.910367263113076,0.9277943241428723,1.9895726807480307,0.18066768764982066,0.04149181903431176,0.0005249102343740653,0.6573891238778162,0.3780964409889961,0.16252413404369503,0.03275978919982292,0.0020990898759878363,1.3806191180989815,1.7652355751255793,1.8503664647509315,1.2264719265788935,0.004720886318832163,0.5972683478814744,1.7439785203898401,0.12889274922245808,0.8134170964507066,0.00838754714733636,0.5678264775120259,1.710258173875107,1.890400207539686,0.828829029124448,0.010533745074159273,0.5537537512540057,1.6991444153283375,1.8974209329432885,0.8608374279024325,0.018838971740057886,0.5103342829727712,1.6756144327637656,1.9112424838311215,0.8929919223970885,0.025612763384810222,0.4823443152855855,1.6513751763386968,1.9303736402062301,0.9252587561619334,0.03340948669504795,0.45489779313197687,1.626452092920673,1.9360021567265147,0.9910666528871964,0.03754319010123486,0.41437494082656834,1.6141656837899365,1.9414009974590418,1.0067312388129697,0.04191306072606238,0.40174974033881317,1.6017285709602564,1.9568323243197328,1.022394173030394,0.05714141958443508,0.38927133823039517,1.5337665339001016,1.9612675570543785,1.0714749934566943,0.07464607324778638,0.35111324967237323,1.5204549711364197,1.9654669143887114,1.0870902764825903,0.0806979388689123,0.33927427132257637,1.5070156993662693,1.9770985426554586,1.1026841893356578,0.10113902624282833,0.3275974215545726,1.4640651841657015,1.9863712123436894,1.1514207592994634,0.10811385345237956,0.26880977921881655,1.4501329586078238,1.9888274929390772,1.166885679811075,0.13140555917773888,0.25821384263607927,1.405727168135222,1.9860159023177704,1.2151155505506168,0.13927406639735074,0.24779992520662653,1.3913604787768539,1.9998403906187243,1.2303865542046146,0.14735377815898476,0.23757058229282801,1.3140865801362294,1.9999975752107695,1.2456010257096795,0.15564271186660694,0.2275283239662419,1.2991766227959318,1.9999093808480857,1.260755231745644,0.16413883358539638,0.17775796833604818,1.284193253630645,1.9995758291717656,1.2758454537802553,0.21228895262384384,0.16894380627379557,1.269140149252748,1.9989970020285694,1.3542241629025642,0.2220353946734912,0.16033356840615376,1.2540210033862151,1.9981730414508414,1.4301865745765432,0.23197273332769386,0.15192936750941388,1.2388395259602514,1.989782650620731,1.44427441823601,0.2874402204885177,0.1437332658026076,1.1578919704985042,1.987427756341669,1.458253246038777,0.2985177659470275,0.13574727444148127,1.1424049683464452,1.984830567484372,1.4721196278663715,0.30976744080026775,0.09718203808553771,1.1268830229273752,1.9819917213458724,1.4858701611922653,0.37183291931279105,0.09055687588115824,1.1113299430092716,1.9789119145209575,1.4995014719167818,0.3840978997126183,0.05934405543369514,1.0957495449998818,1.9755919027312392,1.5692870096905072,0.3965140098924874,0.05414366291928041,1.0801456520102537,1.9541435073063478,1.582095241554355,0.40907820319287314,0.049175364206961,0.9307217220679285,1.9493373975187382,1.5947606391499343,0.4217873966176807,0.04444037841563786,0.9151037418744369,1.9442983397479907,1.6072800946476864,0.4910873947453269,0.03993986741399236,0.8995065934865374,1.8847188049870753,1.6707709300739468,0.5638588788930783,0.05554528075294607,0.9506423614435212,1.9074505998226101,1.6318689278413134,0.5183017344476956,0.03164662930688755,0.8683900949616868,1.8696835642374265,1.6936739513031034,0.592261040855061,0.0006383865747935369,0.9193803755691702,1.8938440712834486,1.6558376082284885,0.5459888407604843,0.003783807060553701,0.8374027660294054,1.8537947656068268,1.802699240356656,0.6210633814754207,9.699145162911371e-6,0.8881975144691877,1.8793602723407068,1.7710713137502236,0.5741215399520445,0.0015502860454711387,0.8065750194511935,1.8370680032836078,1.8209866967448414,0.650237632466889,0.0003624601839964381,0.6003199714553271,1.864013418234551,1.7906386919166288,0.6026722209600368,0.00029670147753357856,0.6478360827302736,1.8195196938822615,1.8384683891816556,0.6797551605277932,0.0016963234711548925,0.5718024595584339,1.8478185712575301,1.8094300914234138,0.7590226116831181,2.4283697328653098e-5,0.6186912057386267,1.8011670603312213,1.855127160120417,0.8399338610585421,0.004009979875860381,0.5437052055579495,1.7490504848319555,1.8274270693014318,0.7895421457183388,0.0007333000714626614,0.5899205673089136,1.691824351700204,1.8709466596773208,0.8709329088880807,0.007301158641553673,0.5160557857282472,1.6298790221082005,1.90852519235075,0.8202682352957326,0.002423054730151919,0.5615524046140344,1.668866584411369,1.8859113616781649,0.9020586306451491,0.04066060906039981,0.4888813368132757,1.6052404826021096,1.9211676234692137,0.9845171212450954,0.027452683643038656,0.5336145598138644,1.6452523526705125,1.950140251304199,0.9332804777415038,0.04997285201211543,0.4622085293929862,1.5800079249898484,1.972631611893129,1.0158453506161014,0.03521928886614012,0.5061344527293437,1.6210048328540019,1.9594416499804959,0.9645678072459191,0.0602175066968198,0.33086397125378864,1.5542061139666377,1.9794326170790006,1.0471580284411761,0.09162633757531136,0.369839455289233,1.5961478228838442,1.9678013969856223,0.995889911958937,0.07138451841634086,0.3079139331016634,1.5278603729260043,1.98527235029936,1.210812237481819,0.10517068963088494,0.3458264079859218,1.5707057188710267,1.9752112875791048,1.1604239705761206,0.083462927217827,0.2856431483481182,1.5009965591059369,1.990145080101391,1.2413292057231842,0.11959327906080885,0.23033278790414546,1.427869911675776,1.9816640492646314,1.1912639249376047,0.09644087865048045,0.26407347483274346,1.3518246011952808,1.9940460241055078,1.2716093194879106,0.2095833226190491,0.21071157920848838,1.2733793615875297,1.9871533489277027,1.221916161792187,0.17922033493028244,0.2432260822839042,1.3223302595195543,1.9969713536990574,1.3016228601164732,0.22915956875422627,0.1918650239380696,1.2431140820347604,1.9904010404135333,1.2523505972571636,0.1975170113446978,0.22312143154154163,1.292519564235923,1.9961846212913192,1.3313403705796816,0.24949236238794392,0.17381161919510135,1.2126101962242393,1.9855852507125555,1.2825373612127442,0.21660129109837656,0.13013755134452054,1.262421773289394,1.9998846456444785,1.4820159204258025,0.27056174773747654,0.1565690836378748,1.0489955608270958,1.97980215049464,1.4364673130228145,0.4345452722044827,0.18521853462061588,1.1001327187354648,1.9887649461122288,1.6195618449591946,0.3930079600645018,0.21601056658393702,1.1510065637583393,1.9951276470322559,1.5785083374377469,0.3530668177631705,0.10095547913072167,1.2014833160573377,1.9507122912258366,1.5359335619278032,0.5319880205787857,0.12458349893457499,1.2514302400045245,1.9653576657916125,1.491949474712289,0.48730099619057177,0.04118148551257639,1.037632898567079,1.9774644983530982,1.6674978823908035,0.44396218501166673,0.002552731224336302,1.0888102503581654,1.987000952313264,1.6284491055672157,0.40208555246285926,0.007524736791666542,1.139754063266271,1.9294303324505326,1.5877477345719824,0.5882434006685977,0.015106593850471639,1.1903303734627462,1.9471242790102234,1.5455007993107692,0.5420689964447676,0.025278364855014557,0.7113478590616951,1.9623276307875352,1.712814078282315,0.49709878537005214,3.8796392504703014e-5,0.7608084649680036,1.975000408458265,1.6759232934781756,0.45345102285775585,0.0018051208925994322,0.8108980582230079,1.9045004816626592,1.6372550745343637,0.6461148713435573,0.006196337408238772,0.6043611055396543,1.9251735537993877,1.5969111049009612,0.598634315757588,0.013200898625955526,0.6519616875359875,1.943413753633132,1.755332572515266,0.55220920696055,0.0014495779812158105,0.7004774845936396,1.6805117495650588,1.7207445712168496,0.5069616262212941,3.2888223461258193e-6,0.7497809176887245,1.7171794115706942,1.6842612720063403,0.7053752946802933,0.001186629846600784,0.5476287377552274,1.7519611507464825,1.824945685642989,0.6567749426782492,0.004996489294471496,0.5939415206862391,1.7847655036804588,1.794886485582841,0.6090771486148957,0.006779538857981993,0.64132209076233,1.6332937327195867,1.9066761153949034,0.5624073404616805,0.0021263125351859147,0.6896458541965679,1.6721342048813117,1.8838597966399495,0.7657920812986189,9.713360991869813e-5,0.49267186777482386,1.7092072068378752,1.9637096063722241,0.7162626828804584,0.0006973380898783743,0.5375150800487817,1.7444152499837302,1.9487576623287477,0.6674794111293523,0.016007759626232132,0.5835744606272446,1.583590121130174,1.9313108282946914,0.877846742346025,0.00816585944181758,0.6307288899744867,1.6244509596948464,1.911414983142318,1.0939181764521773,0.0029321248278612044,0.4397061940968011,1.6636697177675135,1.978534447352211,1.042758132789185,0.04265093789501928,0.48290383199383413,1.7011432641790223,1.966683371983815,0.9914856506798461,0.029098020731196605,0.5274612460538963,1.5315959949457916,1.9522902684826469,1.2065048350160346,0.018098225113677535,0.3491639497280651,1.5743168264874292,1.9353929855125798,1.1560751203644601,0.009680476532156979,0.3889396000354909,1.6155274122005292,1.9895186691164377,1.1052349845157379,0.18820309470107022,0.4303221184990794,1.4318465803176554,1.9808149763377934,1.0541181186652968,0.15933586598327398,0.4732026840413319,1.477515424284432,1.9695320944108157,1.2673679164391312,0.1326792803165705,0.30290041894416253,1.5219285751488512,1.999520560930922,1.2176194899233352,0.10830343489374528,0.3405713378064881,1.5649692423647692,1.9966191600368033,1.167298802746337,0.22636135716723893,0.19446700570318753,1.374520961579628,1.991097010699196,1.116538180141167,0.19489683617201192,0.22590216022247733,1.4215606682846906,1.9829686341764314,1.3271816138979406,0.16554944571978225,0.10797549509234705,1.4674918226865823,1.9994978497277056,1.2783097315595957,0.13839635884808743,0.13231862350836432,1.5121936424381102,1.9998080516188017,1.2287059951439465,0.2675560497210332,0.15894344056540743,1.0533941343298558,1.9974891194332753,1.4325004078628716,0.2336177305617162,0.18777993261066062,1.1045139500674988,1.9925471511252493,1.3857111664839967,0.20169471997791732,0.08142349720355946,1.1553589318636064,1.9955522407070825,1.3379076440439772,0.34971457882631574,0.10289267045954831,1.205795375779659,1.9990728278817027,1.2892155465417057,0.31162548860340156,0.1267209119853554,0.9907606465815733,1.9999662143525894,1.4881101816565387,0.27534657472629787,0.04244170305107409,1.0420337520103822,1.9783847730281559,1.442726853388839,0.24097323763570178,0.05847679147115137,1.0931963238526692,1.9111164010558181,1.3961793133957032,0.3985610106086679,0.07698774588117174,1.1441138230227967,1.9310465082184913,1.348589964895809,0.35839670705343174,0.09792588915660949,0.9281634220822503,1.948528299329184,1.5418041870803227,0.3199195884317715,0.02627184829286333,0.9793885769960228,1.9635158035911466,1.498004895528023,0.28323083566894036,0.039225440702020165,1.0306679325080996,1.883520428930034,1.6726708636436767,0.4497680114502025,0.05470552320066213,0.81522476524919,1.9063700384068487,1.6338546773651275,0.40768613418017585,0.07267138876273527,0.8658481467184862,1.9268362220349247,1.7852146674051754,0.36716182845216827,0.013923748671114677,0.9168242991104946,1.8245356716750063,1.752438899987563,0.3283016585541433,0.023745003920064622,0.9680191735554025,1.8524567551346283,1.7176844900201829,0.7504829522361156,0.03613345721619077,0.7540475776088834,1.8781361852087404,1.8505274493159893,0.7011693091317187,0.05105653140164268,0.804059399763545,1.9015064342708476,1.8224482994486333,0.6526414828160847,0.0054458688554304135,0.8545864749292635,1.7874876692825572,1.7922064075961135,0.8622030012320152,0.012096239806937747,0.9054959351471392,1.8180473005103166,1.7598812990115849,0.8116100591136592,0.02134444084807252,0.6938357209307665,1.8464557627906184,1.8817910862327916,0.7615125144993293,0.03821155829558154,0.7430396939358244,1.8726383521279057,1.8564539299113814,0.7120421058377082,0.025440609842461992,0.7929193797398728,1.747348881192165,1.8288646090784515,0.9244941025318049,0.015232400605342034,0.8433436127842164,1.7804271176482387,1.7990956736834,0.8734765717719414,0.007613774487632119,0.6348255188459595,1.8114531126505584,1.9095938089229811,0.8227917519320459,0.05724342715573816,0.4433597152282397,1.8403452790378787,1.8870980911590887,0.7725729257825389,0.04138766090046009,0.4866786408381867,1.7042768468765117,1.8622696258072997,0.7229521506987375,0.0004613908088314522,0.31429895672793606,1.5353213049121328,1.9509368554046786,0.9358396722723904,0.017273607217726306,0.5772485786490917,1.773265615594207,1.9951988700384766,1.151723242562302,0.07997549177215812,0.39243193044771896,1.6189925693252887,1.9142605088827032,1.3605219016273948,0.0034896199145642015,0.6722623273484468,1.4358148718741934,1.9799468772772886,1.0497197097993751,0.0446877626793627,0.47695144118805977,1.2322862405415174,1.8679737847272948,1.2631213269098849,0.130495434472784,0.770721136583921,1.5256803658955571,1.9543940354037972,1.464236156504978,0.019441932224091518,0.5669690502515456,1.3306562070300283,1.9962476336667387,1.1629549154418584,0.08449168857136491,0.3834378989898597,1.610020096984306,1.9188089467010778,1.3711069009719408,0.19229227862424025,0.6615385249087151,1.425550434398755,1.9821496999685446,1.5619295742364736,0.04811143675493956,0.46729189932473747,1.2212091489920653,1.8735656688225344,1.274076703173474,0.1361691541947393,0.032812661335002824,1.5159714286606059,1.957727761878215,1.4742794629856397,0.2645645598649847,0.16133411255226027,1.3199013940883462,1.9971675298908798,1.1741655096495744,0.08912630891865159,0.06391004226174846,1.108893154007586,1.923238534025014,1.381643896606,0.19904993686156913,0.010197892023937838,1.415230950790257,1.9842254788626401,1.5713009327839704,0.05165824026542032,0.10484726413680678,1.210103443423533,1.9992527538093248,1.2849966268527115,0.14195461284076993,0.029985703839098377,1.5061957490853317,1.9609376036011343,1.484261420097774,0.2723185142417849,0.15519400960789076,1.3091052010110054,1.9979584397197634,1.660913005814078,0.09387875331297724,0.05996995704636032,1.0975805894978259,1.927548697875063,1.3921315255398614,0.20591120021872866,0.00864181186536428,1.404857755902624,1.986173945451798,1.5805983919657955,0.3550246411505802,0.09983546796057197,1.1989705603898444,1.833359883063466,1.2958796854250774,0.1478510620456982,0.027284220392097214,0.9837921796050678,1.9646852858354664,1.4941807366474462,0.2801665962440141,0.00015518255969859673,1.2982690243156276,1.8855748191380743,1.6694053851444712,0.0987484070124327,0.056151467333272365,1.0862554026672326,1.7651113015134203,1.4025684311695334,0.21287518117220783,0.0072139666475240505,0.8702139744663419,1.928480911232342,1.5898207491297276,0.3637577573440349,0.09494011057184881,1.1878119399604048,1.8270196929458806,1.749530631431626,0.15385773908740874,0.02470856043840175,0.9724215691905834,1.686939730380391,1.5040361295434543,0.28810779070042314,1.949378293797377e-5,1.2873942656918276,1.8802347508237625,1.6778111750252407,0.4556005612228793,0.052455067054756443,1.0749190584602428,1.7577386661144048,1.8199349591633869,0.2199409789116884,0.005914541066169954,0.8589454097949412,1.9241970975987384,1.5989668113382007,0.8578420146194964,0.0057941093722160275,1.1766290255338225,1.8205725255292933,1.7570108364715797,1.0738075174078052,0.022259057146795436,0.9610545261228791,1.6786302679245342,1.5138263239632983,0.7572375739495227,1.315526775169662e-5,0.7472986355181284,1.8747808216946065,1.686129288144071,0.971307383238226,0.024462920455047055,1.0635730232645302,1.7502680151100276,1.826392566030552,0.6591849645868038,0.0047437032056173445,0.8476950909273595,1.5907204821901422,1.608035395522613,0.8691088555360515,0.007080940129564395,0.6389292314780372,1.8140192147727525,1.7643931200529617,1.085144876195823,0.019936027367346454,0.9496925207606118,1.670233022754792,1.8850565283732301,0.768286208466311,0.00013616783404446497,0.73631095007552,1.4951494409238646,1.6943586485298794,0.9826777090450595,0.027026231137674106,1.052218764721325,1.7427003148497877,1.832743276719327,1.1978780961961855,0.0037016045170022993,0.3558768435448154,1.5815055495934147,1.617025328636361,0.8803926275864328,0.008496207730749106,0.20658916577990527,1.807360608365244,1.7716765272568444,1.0964712212571335,0.059590351006159836,0.43758371976717425,1.6617490810781979,1.8902933016351344,0.7793648158069283,0.00038851556979846436,0.2730835058995489,1.4852363325058284,1.7024981916919963,0.9940502755384385,0.029715398685234984,0.1425275891717862,1.7350365442367761,1.8389862697476094,1.2090135652774703,0.002788379798690177,0.34721893075204846,1.5722153976354303,1.936296808886844,0.8916918711833209,0.010039729106967155,0.19971779634497977,1.3826739198227562,1.7788601159542354,1.1077850874974808,0.06351854176842586,0.42821615541595603,1.6531795403162195,1.8954149129806528,1.3188451410385382,0.0007701658331317196,0.2653202822021119,1.475260457417697,1.9701571632890431,1.0054236116452357,0.03253007524642304,0.13673121980623204,1.7272776946010506,1.8451207375668757,1.2201219978723707,0.10946723248149504,0.338645457007376,1.562851228023201,1.9823587522637953,1.4245415053514778,0.011711304599432593,0.19294994564040202,1.372141702133017,1.9914352183497845,1.1190850114367783,0.06756786901368206,0.08494067069020528,1.644525508962805,1.9963434841607648,1.3296040709346335,0.16696554657342744,0.25765209137089573,1.465223106066678,1.9547262142957786,1.0167962461927718,0.03546989673499146,0.1310465166600021,1.2641965141105698,1.9998550117113087,1.2312019570742136,0.11469869330383997,0.04501783830322481,1.5534142520381273,1.9801683679190427,1.4348113963151878,0.013510717985203313,0.1862864891064967,1.3615613468783805,1.9147115062300006,1.1303695313984148,0.07173780895017945,0.08041284195747578,1.1528248713328546,1.995307344200042,1.3403203656268161,0.1733112923720872,0.2500799253077257,1.4551255768121039,1.9512811136064387,1.5343795043065027,0.038534482876848686,0.12547421506526968,1.2532103751904284,1.8628335924714017,1.2422520096594396,0.485722390719605,0.0417056069400672,1.5439056903793182,1.9778511960679448,1.4450250432146394,0.6819715690941609,0.17972828867991175,1.3509342226572463,1.9100563698826414,1.6270170621358937,0.4006119673768245,0.07600396438298773,1.1415754317321625,1.9941424584642577,1.3509926389325424,0.5865676275558163,0.015426818948543586,1.4449691757974863,1.947712962057496,1.543958039140918,0.7918290421252764,0.12001503581475448,1.2421914828035339,1.8570287945179955,1.2532707262729925,0.49550953841563583,0.038517333623728334,1.028104348183552,1.9754075364431292,1.45518112488618,0.6927748099245494,0.0019172965526706998,1.340261704117709,1.905283515211015,1.635836257618087,0.40975447155541345,0.07171460826732579,1.1303076789553503,1.7928861202344115,1.3616195103635578,0.5969500184209128,0.013500499695072943,1.4347552167815638,1.9440222211992846,1.5534662114890536,0.802966500631767,0.11466968506848652,0.702233190198423,1.8511131375047791,1.7194680986749415,0.505361943356945,0.035453430766235305,0.504102213377492,1.9728377051387698,1.4652783276123793,0.7036177911883277,0.001277914453871709,0.8015450689035457,1.9003935595971564,1.6445732059107299,0.9157135860349752,0.06754532845064154,0.5956233747605317,1.7859043830542776,1.3721996053044663,0.607384544922875,0.011701786897542199,0.4085845652885134,1.940209368439406,1.5629027914423541,0.8141294459697747,0.0020080967793855153,0.6913951977842385,1.8450873866384514,1.7273205104479787,0.5152783311075326,0.032514294691949996,0.49425805777916065,1.7105029664501221,1.475315345291963,0.7144991103156919,0.0007677198364309801,0.32073718580784005,1.8953871355704341,1.6532267768652447,0.9270517193994849,0.06349666424088285,0.5852477276640913,1.7788209869549065,1.9942981328383307,0.6178698573266588,0.010030913224458038,0.3994518806437293,1.6258867943968993,1.9106564425103225,0.8253164341812516,0.0027930372301452344,0.6805971242601141,1.8389523213666574,1.9781536684825767,1.040920083975756,0.029700305586303655,0.48447932130861104,1.7024537920991092,1.9999747555298129,0.7254173597777284,0.0003867786954423469,0.31243441702052177,1.8902648907257298,1.9517272045803988,0.9383992888271162,0.017751472046214856,0.5749257299283952,1.7716368481932976,1.9954466120059648,1.154257742017928,0.008488094807980295,0.39039687856959904,1.6169762342833878,1.915296526615418,0.8365260181981377,0.0037069691769152646,0.23433422609218624,1.832708735277165,1.9804546917332007,1.0522810641189886,0.04544902323856448,0.4747672688726212,1.694313753395054,1.9998292686968187,0.7363711272684821,0.00013514030670236377,0.30422058675495967,1.5234969011264414,1.9551565843852203,0.9497548264781818,0.019948423985423513,0.16616421588854513,1.7643528960577939,1.9964663273838594,1.1654847884480615,0.08552647181328821,0.38142073035584245,1.6079858665768345,1.9912447983848223,0.8477567480295423,0.19380703281733458,0.2270680956030845,1.4232281580021784,1.9826288904406968,1.0636352815610715,0.3397338074541869,0.46512315675220406,1.6860839032746184,1.9995544511652443,1.276542284079866,0.13746403966237353,0.29609675749295905,1.5137728035643674,1.958462412027508,0.9611168634822822,0.2663047990683096,0.15994002210196845,1.756970072747877,1.9973571470689921,1.1766904289602402,0.4294063960156139,0.372524597092213,1.598916854206324,1.989679012146134,0.859007170949305,0.2005881307433719,0.21990194600700153,1.4128964457244613,1.9846759833664112,1.0749812676023778,0.3483181087722821,0.10370697314600685,1.6777653062918203,1.9991503384835023,1.287454017886129,0.1432745924602139,0.28806398007444456,1.5039822480602458,1.966968088265412,0.9724839301283088,0.27408006717635547,0.1538244924115454,0.7779507177296952,1.9981189558313572,1.1878732140736772,0.4387833033265771,0.36370962951830743,1.0950278184097402,1.9879852081728004,1.3944895175530712,0.20747263481958045,0.2128367042653322,0.8789530981046318,1.931716225245566,1.086317554608036,0.3569867069567356,0.09872137775287848,1.1964564959647006,1.9986169829246925,1.298328568715151,0.5365271087494756,0.28012329356153187,0.9812278799748417,1.9640065605222703,1.496408748037304,0.2819492350480558,0.14781841787806171,0.7668758521835594,1.9987516551288715,1.1990316972639943,0.44823280557920486,0.0553072531303459,1.0836999876189084,1.9861636055630791,1.4049147983367598,0.640281852270893,0.2058732842867591,0.867671403571012,1.9275253827966141,1.0976426761977705,0.3657384807002464,0.09385236525793084,0.6578220728950523,1.997954453479841,1.3091645299135164,0.5466349612506807,0.02414517114234971,0.9698579455689406,1.9609203358475509,1.875482485750391,0.28991128478464534,0.14192257540397435,0.755831141894763,1.8790148118398835,1.6796945981712286,0.4577536804540815,0.05163845055865546,0.5532061159200743,1.9842144399463373,1.8214004363903715,0.650916962832026,0.199012586809037,0.8564068261096306,1.9232145623579555,1.9247499287156837,0.37457229793652325,0.08910056548148149,0.6471575894681025,1.8191039978022805,1.7586841210795834,0.5568014577814309,0.021724160446540575,0.95849191012167,1.9577098134530047,1.8809219369869061,0.7597263414558517,0.13613772763291632,0.744818015527321,1.873535304138732,1.9620239742610721,0.4673446963995441,0.048092321192817256,0.5430601706800608,1.9821379634525726,1.827834010701439,0.6615972282555671,0.004497463559061221,0.8451608228249332,1.918784321546212,1.9290184603456821,0.8716519111568226,0.0844665930820564,0.6365387471889683,1.812526868444033,1.7660441910460363,0.5670252832771046,0.05663152988137243,0.44488896048078697,1.9543754086286387,1.8862474385191348,0.7707818597649942,0.14992598680757274,0.7338378976597801,1.8679428022148103,1.9650662262410994,0.4770046127909867,0.027621658135227767,0.5329733318787019,1.7409804944970613,1.8341605023792367,0.6723212670194588,0.10046799011153518,0.8339348484187439,1.9142352334253618,1.9331668208522375,0.8829392995616389,0.008833077779337173,0.6259669196344521,1.8058446364739684,1.9885977188950448,0.57730511525742,0.060465550364964926,0.4354649448120079,1.950917552688997,1.891458301478632,0.7818670280785244,0.1559707879660771,0.7228922086009458,1.862238029473808,1.9679836442188385,0.9966149395322045,0.030339158826631185,0.5229469042766695,1.7332951966277546,1.8403790930744583,0.6830876919394404,0.10549458551200264,0.34527820553796706,1.9095678864326153,1.9371944736333728,0.8942418300938542,0.22242008871788388,0.6154434742998711,1.380303186738427,1.990246357354572,0.5876396239974997,0.0644211022444825,0.426113953323803,1.17273742390975,1.896553851825771,0.7929804124990694,0.16212476665221753,0.2635827766567388,1.4730023644565373,1.9707758508181552,1.0079882459073572,0.03318208784655163,0.5129821848202789,1.2726818762936096,1.84648897839509,1.2226230579371151,0.0018451374723690295,0.3367239263634634,1.0596281585112062,1.9411008977009914,1.4268622010143428,0.012105915601692607,0.19143819406612284,1.7921683356431073,1.9917669046917714,1.61116846664746,0.06849767385828076,0.0839092913624313,1.6425624714915736,1.996121085249174,0.804120575479424,0.16838712683172363,0.019158418148278233,1.4629513293744796,1.9539601153327617,1.0193605189806694,0.3071098085202354,0.5030804624737252,1.2617220817210293,1.867252755456517,1.233696398240155,0.0012191211952682357,0.3282554437950811,1.0482713860992041,1.7400479168939342,1.4371195247326312,0.013934124763960498,0.18479839792068864,1.7851760358498867,1.5782855925779566,1.6201307949065606,0.07269473789047565,0.07940823542898134,1.6338064246182396,1.9950559009149318,1.7741842629963092,0.17475705845087686,0.690275849464535,1.4528404102495045,1.9504872272838163,1.8920862049101768,0.31535515560716143,0.49324301805235193,1.2507284326687662,1.8615343346503628,1.2447395092636704,0.4879236210546546,0.3198738532546094,1.8948624055812622,1.7323509923175187,1.4473203058238262,0.6844041491755031,0.1782640503713112,1.7780821713511665,1.5689695819869711,1.6290129075214235,0.07701175143915351,0.07502626060242301,1.6249683931199033,1.993862003330517,1.7813329455050302,0.18123373754129402,0.014981304826847008,1.4426709149571413,1.9468913910666736,1.8971676404229147,0.32368906341017867,0.483471124056974,1.239702351195923,1.8557044719802427,1.2557509625505159,0.49772559506660374,0.3115802389241119,1.0255405789985874,1.7245593361020042,1.457463224788504,0.6952164736599562,0.17183599665403226,1.7708876597580632,1.5595799735970286,1.6378136555660614,0.08144815608659717,0.07076393370339606,1.6160495202205363,1.3684703071968307,1.7883805604226835,0.18781632632650913,0.013083739562233188,1.4324441589499086,1.943173071812756,1.9021330248044124,0.3321104539151183,0.4737660445092764,0.2550097485372903,1.8497639215551187,1.9737592316281276,0.5075925396707358,0.30337567360568474,0.12909730385224005,1.7166739561198083,1.4675469696118666,0.7060682227417995,0.16551506825549045,0.7990320434095706,1.5501179819801063,1.6465319006392214,0.9182694267868329,0.06662180607574752,0.5932790584629903,1.3578735437680318,1.7953261961206652,0.19450397333034253,0.011313834662642464,0.40651842904085256,1.939332750497008,1.9069817157683806,0.34061823779168043,0.0021738306111983574,0.24747118204319707,1.843713451801721,1.9762845620205605,0.5175231785503049,0.2952612185826863,0.12356423246669956,1.7086958723667776,1.4775702359334568,0.7169579927170873,0.15930208280536606,0.04058357409228741,1.5405848310711543,1.6551665150116386,0.9296098160950357,0.06260041351521406,0.5829153923016953,1.3472304884003308,1.8021689541616672,0.2012958134870414,0.009671819070199539,0.3974031589532806,1.9353709238756795,1.9117130861231486,0.3492113145343422,0.0029878680089620024,0.24002995724610665,1.8375538453651525,1.9786836072877496,0.5275162271495338,0.2872379234824576,0.11814453048694129,1.7006261168302492,1.48753172721588,0.7278843749637651,0.15319784397061875,0.037438474858441095,1.5309817540097748,1.6637163817719127,0.9409593105694329,0.05870027620011564,0.5726056771952148,1.336542517802561,1.8089079494158922,0.20819096825317895,0.008157905184191239,0.3883658364442152,1.1263879974916007,1.9163265238527925,0.3578885726047112,0.003930871700832506,0.2326870366891567,1.8312858990076484,1.9809560571065137,0.5375703928397739,0.2793068261405498,0.11283889896650023,1.692465733355562,1.9997785903075296,0.73884595612388,0.1472031413515309,0.03441788563682446,1.5213099929807128,1.6721803949709826,0.9523164421213272,0.0549218986240686,0.5623512467338916,1.325811014493465,1.8155423101755481,1.1680135729541243,0.006772288833592266,0.37940763051647497,1.115097873200499,1.9208214321963024,0.36664888957530584,0.6110226106008928,0.22544337019955774,1.8249104235055147,1.9831016175291434,0.5476843750867109,0.8180143878934094,0.10764802420357977,1.6842157775110296,1.9994746131160912,0.7498413182864011,0.13876459858508905,0.03152219714906024,1.5115707990531746,1.6805574597651844,0.9636797416741435,0.2680498642579785,0.0006206820755406683,1.3150373666228636,1.8220711782676071,1.179214186064044,0.4315144794171333,0.3705296999389288,1.103792860679164,1.9251972297247741,0.37549113227474484,0.6215252543993002,0.2182998947657303,0.8877016141091566,1.985120011021427,0.5578568656185923,0.8292093925928801,0.10257257765227756,1.6758773164514011,1.999041351101759,0.7608690391706308,0.14460020731498757,0.028751783960513144,1.5017654320190013,1.9663111751523532,0.9750477393534589,0.2758463949543193,0.0002846702435079784,1.3042229677920936,1.82849370916481,1.1903916173202163,0.44090786308882235,0.36173319309660557,1.0924744222624292,1.9294533504166185,1.3968449147543993,0.6320768549594029,0.2112575344161033,0.8764076650914162,1.9870109764985489,0.5680865485954565,0.8404264895327545,0.0976132158357308,1.667451428779822,1.9984788603081804,0.771927692310181,1.0562276136498316,0.026107004431839775,1.491895160229708,1.9633214943164383,0.9864189646771349,0.2837365969349004,7.797437173651112e-5,1.2933692168737414,1.8348090720949106,1.2015444208907997,0.45037356688445784,0.02074158456685471,1.0811440220218047,1.9335892437307791,1.407258502118312,0.6426760474023017,0.20431720009958765,0.8651297030861722,1.9887742693588615,0.5783721007793396,0.8516642277503249,0.09277058026119289,0.6554133254834706,1.997787213495105,0.7830158472374902,1.0675791370563212,0.02358820067263301,1.481961260432421,1.9602072051641657,0.9977919467455278,0.2917194495801362,6.211969125757832e-7,1.2824775178306964,1.8777890910088932,1.959582214385113,0.4599103663889095,0.023109294082029885,1.0698031255760956,1.9376043746779446,1.9976365152770483,0.6533214606929549,0.19747978956774337,0.8538691869291981,1.990409661515526,1.9891049007481931,0.8629211536128764,0.08804529733705335,0.6447590138460513,1.996966500128973,1.7603524153330046,1.0789219189133497,0.02119569849716929,1.4719650176047272,1.956968710537505,1.882132808996173,1.2912373240821096,5.262072488465552e-5,1.2715492795345429,1.8722840407780006,1.9627208808061385,0.4695170279906188,0.025603367128848586,1.058453199901821,1.9414982238897522,1.9983534674867238,0.6640117178175258,0.09665481286580824,0.8426275731995987,1.9919169414260152,1.987366659744408,0.874195811005719,0.08343797829180954,0.6341506536188797,1.9960168263713425,1.7676902232726035,1.0902544920005153,0.018929807382263575,0.44275753805522733,1.9536064293447495,1.8874325192442796,1.3020986238420915,0.00023396622936899814,1.2605859155833192,1.8666661581787363,1.9657350166018355,0.47919230904117105,0.028223481092020553,1.0470957131434548,1.7392558002379181,1.9989412798968131,0.6747454359615026,0.10159134570882622,0.8314063160313969,1.9932959141194777,1.985500700115196,0.8854867415205397,0.07894921909500285,0.6235896170228761,1.994938315065157,1.9260409023522214,1.1015753904179488,0.016790820427238118,0.43334988316785095,1.9501207965063287,1.8926174376261642,1.3129208463042938,0.0005446342528198089,1.2495888441186653,1.8609361698998503,1.9686242318853502,1.5096540623055685,0.030969297052512612,1.035732134423519,1.7315490256634753,1.9993998764721448,0.6855212266885699,0.10664409021168253,0.8202068669254379,1.9945464012219578,1.9835072632276283,0.8967924846440525,0.22403528229647163,0.6130772701575168,1.9937311057188558,1.9216885180915462,1.1128831497759324,0.014779014316008365,0.4240155260501588,1.1702107186364195,1.8976868934582043,1.3237025915841214,0.0009845846094638233,1.2385594876423816,0.9545432775086109,1.9713881529286446,1.5194063260960102,0.03384045983138828,1.0243639336525479,0.7409984962843466,1.9997291978919756,0.6963376961202064,0.11181239278781296,0.8090306745616331,1.5586041065897847,1.9813866069383144,0.9081115779469184,0.23125938415856462,0.6026149728241265,1.3673758554581432,1.9172169108558594,1.1241763073843216,0.012894649281294246,0.4147556741272229,1.1589925180120633,1.9026402309921786,1.3344424650328146,0.0015537603904978159,0.2542251091405481,0.9431848212094176,1.974026422210839,1.5290914032325862,0.036836598035751233,1.0129925813389502,0.7300301819815744,1.9999292015576629,0.7071934451159874,0.11709558490289507,0.7978791846115701,0.5294821293369016,1.9791390055600473,0.9194425572729161,0.2385829247588368,0.5922040783499833,1.3567742376720608,1.9126266590600012,1.1354534024417495,0.011137969070957321,0.4055715251866612,1.147753751263002,1.803498041304165,1.3451390774178527,0.0022520879714504893,0.2466965713366257,0.9318337141117261,1.9765386984644593,1.5387080409236136,0.039957324106785985,1.0016195483987962,0.7190967890261293,1.9999998615981767,1.7071213421749734,0.12249298316132518,0.78675383955151,0.5194769993174619,1.9767647498263208,0.930783956928334,0.24600495677692902,0.5818459334132626,1.3461264701453797,1.9079183564658173,1.1467129762245845,0.4047256950812741,0.3964642672236999,1.1364958721549945,1.7966755520722295,1.355791045102653,0.0030794770217057454,0.239265475427757,0.9204914245128312,1.9789246567195802,1.5482549952302425,0.04320223436988979,0.11759015703791353,0.7081997316828192,1.9999411688734434,1.715117475838917,0.12800388939461638,0.7756560784757999,0.5095340262855279,1.9742641468537219,0.9421343098715618,0.25352452015234306,0.5715418778688401,0.3337712579984454,1.9030926121053522,1.1579535722756207,0.4139027799516648,0.012726761255329677,1.125220336926035,1.789750010640366,1.3663969902255495,0.004035820516187005,0.06994256370143825,0.9091594195694597,1.6395290204678021,1.5577310312273627,0.0465709090868891,0.17058858988173897,0.6973404195163398,1.9997531309755305,1.723021107067082,0.13362759075171005,0.03411241563142997,0.49965449639233406,1.9716375201022047,1.8545487858558876,0.2611406422086282,0.0010318197751622016,0.3253328476862173,1.8981500502020694,1.1691737365924746,0.42315567812866495,0.014599323140775389,1.1139286040979872,1.782722312846634,1.376955540878023,0.6121071988085831,0.07418137377364209,0.8978391651079899,1.6307443541371693,1.5671349231633447,0.05006291251033368,0.17699571147290205,0.6865202572089428,1.9994357722276637,1.7308312135027717,0.13936335979118397,0.3182412889966426,0.489839687582568,1.96888520933325,1.860400403863647,0.2688523377791997,0.0005799111115570854,0.3169817074478405,1.893091310090107,1.1803720178156645,0.43248319272414315,0.01659934934629037,0.17601814168190877,1.7755933677433022,1.38746533128216,0.6226149721829494,0.07853994106183992,0.8865321254348423,1.6218780992688733,1.5764654546185946,0.05367779293986208,0.18350929095933,0.6757406443787368,1.4391234360941243,1.7385467848869827,0.1452104545753493,0.3266057207408868,0.48009086942906576,1.9660075705659155,1.8661407266845438,0.2766586093347728,0.00025728021798532286,0.30871891752654734,1.8879170461315777,1.9532891174041929,0.4418841171981266,0.018726581162918254,0.16962722155587773,1.7683640974792605,1.397925001967322,0.6331715613609827,0.08301770177322254,0.8752397631470676,1.6129314027376567,1.5857214186628996,1.7908058484394167,0.19012848579138808,0.6650029753986428,1.428877090754273,1.7461668231890823,0.15116811876622238,0.33505725790931007,0.4704093029685875,1.9630049760307848,1.8717690117918449,1.27053642523647,0.51103638340579,0.3005455467372108,1.8826279276319258,1.956662829331703,1.4710370811856825,0.020980743427303494,0.16334371245978996,1.7610354371807375,1.4083331999459945,1.649542057056888,0.08761407669697963,0.06521061559400754,1.6039054218236166,1.5949016180115505,1.79771583427114,0.19685243975780253,0.6543086392160277,1.4185752689691036,1.7536903427359087,1.0687534111115673,0.34359480727205793,0.4607962405387005,1.2136992075809456,1.8772845311512074,1.2814679726962381,0.5209888563576316,0.29246265232809,1.8772246387533489,1.9599127942597034,1.4810390266316857,0.023361544557283342,0.15716842718303503,1.75360833483034,1.997716699438299,1.6581473468303474,0.09232847127922239,0.0612313023084321,1.5948013240625043,1.6040048651802112,1.8045226333395377,0.20368028309641406,0.6436590191730407,1.408219303307935,1.761116370339269,1.9133297045950401,0.3522172644733589,0.45125292561578445,1.2025749591060768,1.882686571314851,1.2923631114903706,0.5310032907340628,0.28447127984407283,1.871707878426302,1.963038591796186,1.4909787483407904,0.7316897192915137,0.15110216451595038,1.7460837511444274,1.9984202912263553,1.666667503412772,0.09716027569989072,0.0573734213666367,1.5856202870947036,1.6130299826385253,1.8112253651662065,0.21061113260668385,0.007661834158541048,1.3978105333437487,1.7684439454218257,1.9179020190146376,0.3609235141743764,0.4417805926541851,1.1914245069964515,1.8879744335138469,1.3032204323023415,0.5410783911401256,0.27657246299143123,1.8660783602590874,1.9660398176105387,1.5008549605823298,0.7426632006792451,0.14514570914649505,1.7384626594488415,1.9989947345709886,1.675101424698195,0.10210886495163529,0.05363747179625833,1.5763634985128985,1.621975802962431,1.8178231627341295,0.21764409176393829,0.006320845339556125,1.3873503054799081,1.925596029453181,1.9223556002534172,0.3697124301974809,0.4323804669265341,1.1802492935940831,1.822669853961183,1.3140385307074864,0.5512128543335418,0.26876722350410864,0.9647313099781293,1.6813280554952934,1.5106663858407638,0.7536699692981754,0.13929983155874892,1.730746045553004,1.508170770445795,1.6834480197354247,0.10717359892066358,0.0500239368527714,1.5670321557084548,1.311283800116351,1.8243151725998286,0.22477825083533642,0.005108391684784053,1.3768399727759997,1.921231280647003,1.9266898722282502,0.37858287567192384,0.4230537643652561,1.1690507644439276,1.8161507887179575,1.985791600841833,0.5614053693932918,0.261056571011556,0.9533675140498347,1.6729590899198772,1.5204117549809282,0.7647086013921502,0.13356528793324796,1.722934907622399,1.4983427041094601,1.6917062088691641,0.9789990667439709,0.04653328395697798,1.557627465716535,1.3004555671700466,1.8307005550037596,0.23201268699754707,0.004024630028479748,1.366280894772811,1.9167473680107492,1.9309042742889941,0.3875337031808954,0.008024322212191404,1.1578303681068975,1.8095261520987416,1.9876382256549616,0.571654617889185,0.25344150290813305,0.9420097501633828,1.664503075213234,1.5300898074122022,0.7757776690833862,0.12794282004917013,0.7288970612428639,1.4884501757573863,1.6998749238796642,0.9903710693311534,0.04316596463454514,1.5481506450599642,1.289588469459916,1.8369784839789371,0.23934646445611818,0.0030697005582296377,1.3556744373164686,1.0772040585114941,1.934998261291013,0.3965637549099459,0.009526374249353653,1.1465895559724877,1.8027968010187194,1.989357096714857,0.5819592740524038,0.24592300422409274,0.930659487477143,1.6559611051844003,1.9975166347766575,0.7868757405571705,0.12243315518838449,0.02274244606841891,1.4784944650156486,1.7079531081209038,1.0017443174473166,0.03992241445759903,1.5386029195918698,1.2786839126752927,1.8431481474577756,1.216531441199147,0.0022437267968182795,0.3414096874288872,1.0658598579357983,1.938971303665694,0.40567186279675194,0.01115654680664302,0.19512797937825865,1.7959636059381818,1.9909479916807635,0.5923180049469934,0.06624467893610819,0.08643080166815453,1.6473342847609735,1.996651093454834,0.7980013802470705,0.11703700604137501,0.020393908292879237,1.4684768596831395,1.7159397166572687,1.0131173399311635,0.03680305298838238,0.00010097660618146875,1.2677433073509459,1.849208747377133,1.2276207686190255,0.0015468155862506938,0.3328939660691227,1.0545071382041804,1.9428228874889482,0.4148568486822093,0.01291462901670204,0.1884306561231599,0.838725688395245,1.99241070476599,0.6027294706422832,0.0703756586652442,0.08186461660885691,1.6386237298461848,1.9956566325402434,0.8091531490206277,0.11175507061505197,0.01817208529169212,1.458398655564989,1.9524090980550608,1.0244886656505825,0.03380828372498268,0.0003272665351190529,1.2567680686846237,1.8551594997815424,1.2386806526589804,0.000979057073931533,0.324464536731503,1.0431473678225343,1.9465525145476887,1.4417271407536156,0.01480039346670392,0.1818383116214105,0.8275118453322972,1.9937450467645275,0.6131923243862087,0.07462688789021532,0.07741719491670906,1.629830567174555,1.9945333806691723,0.8203296043655145,0.17766486552757887,0.016077264463846386,1.4482611563049494,1.9488807039998002,1.0358568236929442,0.030938494049139176,0.0006828669143689181,1.245759616353993,1.8609996349246183,1.2497096626922302,0.0005405247010045189,0.0319528633877445,1.0317820162087747,1.9501597024042754,1.4519019890220255,0.01681359622776868,0.17535179861111916,0.816320314092216,1.994950845075525,0.6237052127795185,0.07899781670268946,0.07308911187808453,0.6094357702704705,1.9932814831373769,0.8315293005761262,1.116809368742069,0.014109716780246306,1.4380656732167638,1.9452295695846007,1.0472203435553662,0.32747633249149444,0.0011677317460324632,1.2347193743330014,1.8530389500927482,1.260706372085631,0.5021676051180962,0.03486749935006661,1.0204125535027646,1.9536439844589193,1.4620183825104447,0.7001057993304195,0.16897195614079663,0.8051525423307149,1.9960279437256148,1.6417558525481666,0.912047937517968,0.06888092734257023,0.598991182865912,1.9919011018812864,0.8427507889405875,1.1280971099621107,0.012269696748660852,1.4278135251145454,1.9414561670938602,1.058577755334928,1.3381646237169806,0.001781798311494165,1.2236487707076806,1.8470487302317813,1.2716693583842182,0.5120634342488968,0.037906977887455784,1.0090404503761476,1.9570049100100402,1.4720750126352198,0.7109748698543413,0.16269960946082263,0.794009974630153,1.996976203389089,1.650436519269205,0.9233827042596129,0.0647931856505477,0.5885984670679174,1.9903924154570585,0.8539926179281474,1.1393682814644652,0.010557442380801918,1.4175060381421845,1.9375609846276927,1.0699275899188068,1.3488458781842192,0.0025249871795347545,1.2125492374914206,1.8409489422600958,1.2825972034952018,0.5220223793324776,0.041070905834904026,0.9976671778421137,1.960242044312563,1.482070578543255,0.7218813265832477,0.12439524728377405,0.7828940523126737,1.9977955014059212,1.6590330502162138,0.9347273816616991,0.06082641556278168,0.5782589672031995,1.988755619017481,0.8652533333769387,1.1506214252917295,0.008973175161537617,0.39331762002581416,1.9335445260387911,1.0812683791743105,1.3594820084662245,0.003397202216605777,1.201422210439735,1.8347403752022422,1.2934884938714029,0.5320431521515749,0.04435887392952542,0.9862942070651183,1.6969569529356656,1.4920037872802814,0.7328237587366063,0.1299454325526691,0.7718062132537662,1.9984857317976323,1.973365637679481,0.9460805022586308,0.05698113019202311,0.5679740207148423,1.9869909242867294,1.901388232486485,1.1618550858184304,0.007517100020242085,0.3843158348630866,1.9294073108672527,1.9183684297813435,1.3700716387499423,0.004398330599264755,1.1902691288645408,1.8284238321536488,1.981939427456571,1.5610072223119134,0.047770456863496236,0.9749230091705844,1.6887560410814906,1.9996575053405377,0.7438007508803638,0.13560816180135538,0.7607478916962717,1.9990468052810004,1.970695295083066,0.9574405974926615,0.2638097512283073,0.5577449579892984,1.9850985595329775,1.896405224203391,1.173067809939314,0.006189405304287132,0.3753936901606607,1.925149874273374,1.922809690386543,1.3806133992372231,0.005528242828768848,0.22220921432077356,1.822000130176739,1.984027669159731,1.570385758151759,0.05130521333906901,0.9635550550546073,1.6804660367164905,1.9992952150195222,0.7548108831100357,0.14138270254004448,0.7497205180648605,1.5071567097440726,1.9678993903486424,0.9688061979038557,0.2715544266510054,0.5475731021843004,1.9830787695388736,1.8913062634097169,1.1842581472573082,0.00499026275467962,0.36655234002278514,1.9207727669684274,1.7730924484091728,1.391105926322009,0.006786792747826675,0.2151112280237354,1.8154701001952418,1.9859886241451892,1.579690513006319,0.05496268612565569,0.9521918151936906,1.6720880121758024,1.9988036630812558,1.7412057083886805,0.14726830781582023,0.7387255187810031,1.4973219132354574,1.964978285134268,0.9801758333201679,0.2793933285359892,0.5374597690577068,1.9809318155698747,1.8860920096702318,1.1954246502711365,0.44516800114280464,0.35779292810270724,1.9162765551434253,1.7658285324043224,1.4015478627667184,0.008173817559503527,0.20811476927381523,1.8088345868867088,1.9878220387579604,1.5889202832796565,0.05874240211897219,0.09541470599041213,0.6612815996004511,1.9981829131093503,1.748792316540996,0.1532642163092598,0.7277643160784572,0.4670608342886331,1.961932357293033,0.9915480330476139,0.2873254428994829,0.527406266797304,0.2977263462111259,1.8807631374631693,1.2065658745625565,0.4546659211321883,0.3491165874547376,1.0760305064337046,1.75846555434739,1.4119378578778115,0.009689137848279517,0.20122074308242444,0.8600489802157378,1.6007504502975478,1.5980738750752983,0.06264387240223523,0.09062491964239472,0.6506026461954149,1.9974330453995415,1.7562820663231657,0.15936965243291212,0.7168383278192991,0.4574718693177334,1.9587620008241804,1.8791746974081138,0.29534974370041744,0.51741389585159,0.28967513868067596,1.8753203360929804,1.217680378983198,0.4642343816024198,0.3405244403876865,1.064685356134335,1.75100446666008,1.4222745676805033,0.658137281568643,0.19443004121103802,0.8487968088434006,1.5916194813430773,1.6071501043506702,0.0666665923094053,0.08595276349194836,0.6399688883105183,1.9965541569493048,1.7636739889152107,0.16558382643162217,0.020158092712868614,0.44795308187047433,1.955467625822143,1.88453713801962,0.30346519297315133,0.507483948761557,0.2817158136479778,1.869764309601171,1.228766725840981,0.47387214484650675,0.33201759831969024,0.14901974589386457,1.7434462344548496,1.4325566550926123,0.6688473110798749,0.18774354205584265,0.8375641960246605,1.5824119847621296,1.616147797070255,0.07081004149046655,0.08139884189547442,0.6293817014519392,1.3941812611566156,1.7709671281513706,0.17190593448468816,0.017949399879314876,0.43850570322850446,1.9520496584234965,1.8897851612905243,0.31167074096173464,0.4976177099934973,0.27384940067387675,1.8640957766752302,1.9670535361806076,0.4835779641929504,0.3235971616344463,0.14310163082123095,1.7357918354100705,1.4427827900975152,0.6796001761130661,0.18116211053411346,0.8263525947292477,1.5731291515700137,1.625065789357457,0.8905838683597996,0.2201118591720801,0.6188424551017634,1.3837034676077975,1.7781605406437873,0.1783351588098382,0.37278581668990396,0.42913095543654456,1.9485085407518363,1.8949180883744106,0.31996532625569774,0.5547483441898422,0.2660769173007841,1.8583154705556686,1.9698862892486106,0.4933505841670053,0.03224869113650397,0.13729435793752687,1.7280422596435625,1.4529516499161885,0.6903944857551978,0.10896072054463213,0.8151634552089935,1.5637721825270376,1.6339029276451542,0.9018958135497811,0.22728097085652554,0.6083525125408387,1.3731760409475402,1.7852532959045344,0.1848706677690123,0.38168432637203764,0.41983005114431293,1.9448447308605887,1.8999352553128745,0.32834787592734793,0.5649607245577875,0.2583993689210562,1.8524241389411706,1.9725935848257605,0.5031887406530793,0.035176264591237016,0.13159867842966244,1.7201985095845191,1.4630619191783127,0.7012288437322755,0.11418092178570405,0.04534910039102791,1.5543422879831896,1.642658068824914,0.9132204487893184,0.2345500358979833,0.5979132306724302,1.3626003429277815,1.792244476465979,0.19151161597593724,0.3906628169074201,0.41060419344966537,1.153926310234731,1.9048360131214095,0.3368173056705551,0.5752293784667906,0.25081774864694395,1.8464225438918764,1.9751750727158401,0.5130911610582499,0.038228640681393866,0.12601532904963375,1.7122615998438409,1.9999770827312586,0.7121018485899411,0.11951570618990981,0.042024743558711,1.5448406877215737,1.6513300803948576,0.9245563092053254,0.2419181140226594,0.5875259598467019,1.3519777415444945,1.7991331779994582,1.1405337096335302,0.39972012690331205,0.4014545757429717,1.1426787437128312,1.9096197278733533,0.34537251994101037,0.5855529776378892,0.24333303718213029,1.8403114617308098,1.9776304189962057,0.5230565644768777,0.7907389631409928,0.12054503201922251,1.7042325570828922,1.9999894049992815,1.710738972313194,0.1249643836880393,0.038824303492003054,1.5352686108006277,1.6599178406061532,1.845266673752059,0.24938425214914184,0.001986905733411426,1.3413096108607316,1.8059185094322556,1.9403235647620467,0.4088550847714576,0.3923823815527472,1.1314127212983358,1.914285780781889,1.3605800902198397,0.5959301866847984,0.23594620269487443,0.9153793463268027,1.9799593060609824,1.5525375264370502,0.801873846293192,0.11518849493657424,1.6961124198807005,1.9998723758546473,1.7186935148531435,0.13052624947849378,0.03574819417673414,1.525627295395142,1.973095123852889,1.851289188681993,0.05659014543502727,0.5669128189112738,1.3305973308288885,1.9008779481494558,1.9441328230302513,0.007373740824892061,0.3833887843925595,1.1201297002825994,1.7865931223006273,1.992888965425125,0.004509291306883378,0.22865820069277598,0.9040524594512096,1.6355773226903818,0.5431711561635497,0.04813055602165983,0.1099464106846687,0.6924556119698945,1.454882425588397,0.7449386560088581,0.1362005841184536,0.032796813516205336,0.49521994376531275,1.2529462107515856,0.9586165721393852,0.2646068327851321,0.0008120084842251352,0.32155562709583463,1.8191755646745285,1.1742269404612813,0.42735320770449214,0.015485567044015602,0.17957213975631303,1.923262502098976,1.3817015585494379,0.6168400583616085,0.07613228857639254,0.07589958262122432,1.9842365139484945,1.5713521332608043,0.8242190534625797,0.17992019670860782,0.015379078588732553,1.9992503406095983,1.734322687996975,1.0398063651022702,0.3220027820798794,1.5061419464493464,1.967602892208103,1.8630031038792219,0.04929135454391964,0.49574531630615726,1.3090458709055062,1.890771986899158,1.9513844840009018,0.0048735122680952925,0.6930346691235483,1.0975185024181129,1.7723453422548596,1.9953397465681233,0.00692437646057098,0.9046581614018973,0.8814373825031763,1.6178530421950374,0.5635221085359893,0.05534817938996661,1.120733763001606,0.6708926959346481,1.4345093026325393,0.7669971854541147,0.14788370952976182,1.3311715468335232,0.47571609663715886,1.2308755944171144,0.9813526273599094,0.28020990172797255,0.0001540855068514757,0.3050216060080362,1.0164608544836862,1.1965788322252877,0.44614761488129917,0.019727508108746683,0.1667800220097374,0.8012774538577229,1.4026255366299978,0.6379481748467011,0.08507601080972149,1.8081419011501692,0.5953736571606689,1.5898711256901208,0.8466552087094128,0.193148061540646,1.6627421077924858,0.40836440601791657,1.7495719266939094,1.0625228740926118,0.3388970974125265,1.4863947224946221,1.961610028245024,1.874270506102928,1.2754709537552198,0.5155171804371131,1.2873345123790334,1.8802051452107555,1.95814390396685,1.475555564252446,0.7147608095221756,1.0748568490265347,1.757697955053792,0.3984425501546338,1.6534334983150205,0.9273240481030918,0.8588836491895391,1.599809087995357,0.5840988921253949,1.800798517884724,1.143280983382504,0.649500058175674,1.4139113669965535,0.7891762692509077,0.16000771513829615,1.3525472295471426,0.45648351106485385,1.2086855243428902,1.004098330626621,0.29618538603716227,1.5453508310851893,0.2888471628497269,0.9937148437269943,1.2188290152022525,0.4652285821808455,0.024476636671702856,0.15441900761412175,0.7790376565368671,1.4233411985124247,0.6592436149188028,0.09449310959189983,0.05947634031875826,0.5746785891089207,1.608084922102015,0.8691707036925985,0.20679338704763972,1.6455382412800272,0.3901804499559589,1.7644333410732338,1.0852070340979976,0.35613346368509724,1.466395840634068,0.23415861609581912,1.8850855656622927,1.2972645128645874,0.5355397132660278,1.2654744885847982,1.8691828903089691,1.9644075856420549,1.4954408442976055,0.7366345310807465,1.0521564651204343,1.7426585391735423,1.9986953576488338,1.670481930663893,0.9500275369348455,0.836402928685624,1.5814547959322054,0.6048908606191582,1.8142140041434556,1.1657540709849081,0.6282887671239601,1.393099275936999,0.8114644320654734,1.9199253113914247,1.3737405062982977,0.4375321378804792,1.1863874815469149,1.0268419134400149,0.31252502008657523,1.564274649770805,0.2730406661872271,0.9709720848749641,1.2409659772720945,0.48458623721749516,1.7284592654285462,0.14249549208909806,0.7569121838952307,1.443837826029259,0.680715360436465,0.10437871256874931,0.051992589767068,0.5542035799735614,1.625984098780212,0.8917538890211092,0.22084911321457934,0.005758108212625457,0.3723120111144824,1.7788992419223653,1.1078471084610613,0.37370296289819804,1.4461556481771742,0.21973113719598147,0.8899790504510572,1.318904268979545,0.5558025552465324,1.2434771097767054,0.10358591763799685,0.6790238221104452,1.5150697860241682,0.7586445164582096,1.029429095751333,1.7272348759236742,0.48305698768512484,1.6871834594162332,0.9727568812391661,0.8140068523903379,1.5627996624135205,0.3112294696143004,1.8272082206356712,1.188141398359132,0.6072697973827224,1.3720837975132514,1.9192237608477345,1.9286054340340328,1.394740411804271,0.4188717824184013,1.163993002911672,1.8131761062693315,1.9866402268044943,1.5829065159123106,0.257610294213401,0.9482443449036765,1.6691561514304967,0.5042105644489263,1.7438530533418213,0.13101564459483284,0.7349124835284659,1.493889092665052,0.7023523020387887,1.8700644192957214,0.04499933294102254,0.5339592234096668,1.2955592498637247,0.9143930802813115,0.23530796768745155,0.0035780011432303693,0.3547683345236884,1.0834278891697207,1.1304313833341022,0.3915965046913171,0.00868587136574106,0.20570736503660847,0.8674007562890738,1.340379025811451,0.5762952224976493,1.221353757275375,0.09373690792064548,0.6575655150019923,1.5344322335275984,0.7807793778113765,1.0066864999328795,0.024085567146237663,0.46372069077662914,1.703529443294586,0.9955003209805846,0.7917070079081481,1.5438533395009246,0.2949181160668243,1.839774444226519,1.210431382427351,0.5864540240492088,1.3508758050161704,0.15904024339694112,1.9368051014248393,1.4155360808315431,0.4005120994420468,1.1415136752150088,1.7997278435497353,1.9900904440196507,1.6012367894864938,0.2425640305163046,0.9255433830185277,1.6520808600423025,0.5240914103581165,1.7588619758505355,0.11998540474013775,0.7130499379583541,1.473984125219371,0.7241432448933461,1.8810511298704626,0.03850018811254463,0.513955993733964,1.2737540943210295,0.9370765640824165,0.25016246953591537,0.0019134372365345875,0.33755849718360853,1.0607407652085152,1.1529481737397622,0.4098048310461265,0.011933617325369905,0.19209455543888843,0.844891068233291,1.3616776724413695,0.5970071122280921,1.1991158775795105,0.08435679365247539,0.6362843815786003,1.5535181687859783,0.8030276626869282,0.983940444556802,0.019376164662751938,0.4446618617798057,1.7195114249784222,1.0182460888307314,0.7695149330537208,1.5246256299158019,0.27897156793795774,1.8519061732222784,1.2326124904766218,0.565852217087983,1.3294862713423186,0.14695062063431208,1.9445200711018504,1.436116753817406,0.3824625881485819,1.1189611291352015,1.7858658061219979,1.9930283939831268,1.619255986512449,0.22790965994852275,0.9028809445700818,1.6346681856684784,1.9951659835721332,1.773478267422226,0.10941047950934912,0.6913358587435532,1.4538339210413964,0.7460769144883236,1.8915819895240942,0.03249851790277647,0.4942042405054783,1.251807299942831,0.9597926041169227,1.9680521481801263,0.0007652777285823698,0.32069140336771507,1.0380222143155118,1.1753858296167696,0.42831852107652857,0.01569258329867307,0.17889975159428195,0.822461632670265,1.3827891890687973,0.6179275082220914,0.07658338495207495,0.0754504280520848,0.615191432579538,1.572317716843278,0.8253778599468503,0.9612026983047847,0.015174131460622853,0.42589036162605687,1.7351211354799112,1.0409824162566872,0.7474421098823201,0.0008855407253779424,0.26339807588240927,1.8635971307342993,1.254673246125844,0.545475035758606,1.3079262633166473,0.13530236084387892,1.9517463513829554,1.4564717824368987,0.36473258725408064,1.0963470332333078,0.04758481006199433,1.9954525566160624,1.636954783958534,0.2136547645993293,0.8802687549770931,1.6169271375292418,1.9926748291765093,1.7876943656694784,0.0992963403095668,0.6697814806270597,1.4334489057339386,1.9435428786063782,1.9016515496487987,0.02699742754227763,0.4747141831707291,1.2297302218776478,0.9825294472329157,1.9735049591694438,1.5271454112322915,0.3041757800159005,1.0152839909417282,1.1977327418476138,1.9998993072031568,1.6973931810725107,0.16612978042041326,0.8001240544643613,1.4037026527132461,0.6390455863839049,1.835075282704948,0.06702241922316343,0.5942975813785061,1.5908211509186014,0.8478184057242314,1.933762473972379,0.0114816416482999,0.40741590258445015,1.7503504984222462,1.0636975396099546,0.3397806615581239,0.002100995472879452,0.24820569753776411,1.8748412679266286,1.2766022352635749,0.5165471666993943,0.0393185219901272,0.1241014907700323,1.958480203431201,1.4765906351121927,0.7158891213728313,1.0736830879159187,0.04089848723948575,1.997361677670286,1.6543240245660558,0.9284979975744726,0.8577185136598386,0.002481957809684854,1.9896700703827968,1.8015029152626627,1.144445751399782,0.6483979557234163,1.4128396263897702,1.9357645510268044,1.911254600310553,1.353648425775254,0.4554959057762462,1.20753428268205,1.8381623069014683,1.9784540841440714,1.5463370337552245,0.28802017221920706,0.992537859716615,1.2199773482650396,1.9999634007583147,1.7135137338849713,0.15379124902886154,0.7778898909534635,1.4244072428657317,1.9747781450526225,1.8473719959369908,0.05907712777028662,0.5736136383371203,1.609018897438769,0.8703376894063433,1.9416611368430141,0.00830060569933555,0.3892480432366453,1.7651916342183185,1.086379706212905,1.9919782043493064,0.003832757577543533,0.23340229335550722,1.8856327671456454,1.2983881119536271,0.5365823893488755,0.04588221529791714,0.11335380568022857,1.9647181431892438,1.49646290246157,0.7377701720594289,0.13248542555135612,0.034708398169147836,1.9987547693772543,1.6713547215871833,0.9512031125986884,0.8352418879869052,0.0011385188997369289,1.9861532618363693,1.8148967717355418,1.166914686321943,0.6271963477486704,0.014211756399864162,1.9275020641083849,1.9203861729447174,1.374831964888186,0.4365593517511397,1.18523096641069,1.8255399690250014,1.98289696245446,1.565245984556131,0.27223293879864463,0.9697955893610997,1.6850282272671468,1.99951011884926,1.7292651186868715,0.14189054130667877,0.755770645969271,1.444892247087246,1.969449869503689,1.859230283643233,0.05161866454276198,0.5531503052116895,1.62690154099163,1.894119916279192,1.9490725895143197,0.005632669463917495,0.3713961835313371,1.7796368641475708,1.1090171804395477,1.9945967347063875,0.006079931035354202,0.21899552253407029,1.895966044930081,1.3200196043053918,1.9936769109264905,0.05293956380488685,0.1030648663665511,1.9704569431819827,1.5160783026851798,0.7597868989906352,0.14402339717588852,0.029017745568403974,1.9996311109591183,1.6880380634346421,0.9739334748592053,0.27507815483715226,0.0003118853269409305,1.9821262231142769,1.8278690051817752,1.1892972605200471,0.6061876262960688,0.01828774256891985,1.9187596928155843,1.9290415429267433,1.395821568041373,0.41791431876242613,0.08210591160673086,1.8124905013912087,1.9868312953802496,1.5838624802497483,0.2568222479803838,0.947068946598518,1.6682810249046978,1.9985396960015143,1.7446391857999157,0.13043381461340187,0.7337777638852808,1.4928653096460587,1.9636200060207518,1.8706440104120166,0.04465088850769938,0.5329181696161873,1.6444598291975452,1.8837028451066025,1.955992997342185,0.003479213317314711,0.3538695599207746,1.7936787143289243,1.7625200474912788,1.9967006662822202,0.008841353171347488,0.20499283905600485,1.9058357548998717,1.341485520305853,1.990866120469446,0.060486916078436925,0.09323999626858737,1.975693634186436,1.535426686884784,1.938761811496792,0.156004246301643,0.02382947374904476,1.9999902490016508,1.70436541824078,0.9966773237938695,0.2909330397133023,2.484786878698131e-6,1.9775910377838049,1.8404129038404171,1.2115818933755367,0.458972623411562,0.022871661162829016,0.15840394767152588,1.9372162320166684,1.416606375331676,0.39957045364577026,0.09136909738218024,0.06202334635379281,1.9902550473196157,1.6021768887654482,0.24179607316956098,0.20229621789021768,0.00944276677173539,1.9970526343064245,1.7596279807678672,0.11942699659526945,0.7119226236955332,0.003117526464032072,1.9572915709425327,1.8816072708450227,0.03817740475340303,0.5129276995442804,0.04334299063181446,1.8728285510302882,1.9624187797463506,0.0018413514456790958,0.3366772405818731,1.059565884786215,1.74760768351274,1.9982889105143884,0.012115595241173005,0.19140148783133382,0.8437284089945322,1.5874763172526856,1.9875426614300693,0.06852036716076271,0.0838842787191113,0.6351882353863317,1.5544980443147391,1.9306818423642897,0.16842177410436932,0.01914626709385736,0.44368341458504235,1.7203283383236452,1.8303616421229847,0.30715479186425276,0.0002104773616572464,0.2781565095862104,1.8525219775685413,1.2337570549441559,0.47824110440800705,0.02796114048777898,0.14633701131970567,1.944906010676132,1.4371756328161882,0.6736916171468029,0.10110240369872492,0.054380400166425424,1.9931664468424755,1.6201797343308173,0.2271621888248837,0.21621884198795482,0.006580707914469741,1.9950497031613854,1.7742237484721404,0.10887578211829096,0.367934945762984,0.005170002442560162,1.9504678385659047,1.8921143926126924,0.032201562624118996,0.4931892379532461,0.05021415845034083,1.8615026603491134,1.9683466120629824,0.0007199312695717053,0.31982812072438915,0.13960978135486934,1.732308511505014,1.9993606456542197,0.015900963170318083,0.1782285009490756,0.82130344218332,1.5689182783591855,1.9837082533474577,0.07703576058925787,0.07500255431399527,0.6141053216397682,1.3789616772114572,1.9221203436579426,0.18126955582471482,0.014970548667741501,0.42492704757550304,1.7359185645577724,1.817472842945429,0.32373501824627515,0.000935755437082908,0.2626025419050222,1.8641899611992065,1.6746524003476904,0.4977795405354193,0.03355354727566573,0.13471175541810476,1.952106900256715,1.4575186980762658,0.6952758907087004,0.11130079459817888,0.04722671226497288,1.9955639876070188,1.6378617023743676,0.9070017236291903,0.2305469900680298,0.004232638636233688,1.9925319388717555,1.788418937144254,0.0987856303217548,0.3857237797894445,0.007737197891229619,1.9431523394517896,1.9021599393890591,0.026726453987102716,0.569584984727743,0.05757674014491709,1.849731033015496,1.9737734272648326,0.00011553300551225831,0.3033309179885898,0.15142394410894433,1.7166304471740297,1.9999153171919537,0.020195498430612524,0.16548069403888033,0.28489649434136755,1.5500658843341457,1.9793648801228825,0.08602869054704487,0.06659941840771277,0.5932220676389537,1.3578152901882237,1.913081745049241,0.194540944092359,0.011304478964028863,0.4064682200914015,1.1488560525737483,1.804161087896409,0.34066514034308104,0.0021779437583406835,0.24743009953956252,1.875410817783017,1.6576890983176287,0.5175778227163526,0.03964598804653208,0.1235341948090305,1.9588151750584704,1.4805054735508634,0.717017826818429,0.1219589934901969,0.040565983927497995,1.997446429139079,1.655213644344844,0.9296720461016398,0.2452732488268573,0.0023997738149235115,1.98950064411468,1.8022062022730763,1.1456103193081542,0.40383043689257503,0.010817784557490384,1.9353488585984655,1.9117387136644703,0.021754911632904994,0.5902265266204472,0.06542692635700131,1.8375197596035033,1.9786964175481037,2.846936577816095e-5,0.7957575137585671,0.163677155362698,1.7005816022624813,1.9999526381436428,0.02499697905356002,0.15316466274466123,0.30098055123641854,1.5309288893006698,1.974514788993329,0.09549450414251981,0.05867921873572801,0.47092555597160357,1.3364837715374493,1.9035707230584926,1.9420566225225473,0.008149954786655589,0.38831648262671714,1.126326112902608,1.790433264403447,1.9921263021200195,0.003936399624149045,0.2326470326265524,1.8861787417116087,1.6403855116308566,1.9958673727606817,0.046235310605638125,0.11281011269975283,1.9650273642575786,1.46043413682289,1.9531051403572783,0.1330714858823535,0.03440166137754552,1.9988127974739485,1.6722265824446347,1.865836442146061,0.2603899989806159,0.001083061764534765,1.9859573872650926,1.8155784104048318,1.7381364018133558,0.42224554878937937,0.014410168563051329,1.9270614334832303,1.920845759434753,1.375922904202057,0.6110800830137331,0.07376065544420485,1.8248751581576208,1.9831130357851894,1.56621653627408,0.8180757311114615,0.17636307537324003,1.6841702803528604,1.9994725891996357,1.7300699616527948,0.14128677931204603,0.3174262768800693,1.5115171946328296,1.969160489368789,1.8598318346835363,0.05124605316500186,0.49036313301639933,1.3149781580674376,1.8935921986352182,1.9494427584323675,0.005508608268767201,0.3704812267887727,1.1037308128080205,1.776296475165549,1.994718235990229,0.006210213219289273,0.21826098984203424,0.8876396243271449,1.622750593066234,1.9935440709179884,0.053318105674389105,0.10254505767030497,1.9707402537021337,1.4401245740507456,1.9459750923582326,0.1446325222333098,0.028736934001085568,1.9996623856603015,1.2369463740882258,1.8542325947181963,0.2758894192074226,0.0002831837445091967,1.9819040015842466,1.8285286428339114,1.7226006114811208,0.4409595876040783,0.018512491228543704,1.9182943519734326,1.9294763647654212,1.5572258667733279,0.6321348643942933,0.08257361558176324,1.811803770923833,1.9870209968425452,1.58481763572932,0.8404880750623858,0.1894751405165923,1.667404972571227,1.998475418734568,1.7454242866670395,1.056289899458984,0.33422516234596045,1.4918408438327497,1.963304751533907,1.8712223953756983,0.044303767573778186,0.5100643933224381,1.2933095766621756,1.8831513346120792,1.9563376579754217,0.00338180602826188,0.7087817952407405,1.0810818429717315,1.761758034478307,1.9967955082151057,0.008998208085339798,0.20427941444398945,0.865067888728009,1.6047934668318784,1.9907067149363962,0.060890708654276704,0.09274434080267968,0.6553547623178788,1.4195872932884843,1.9383556021434303,0.15663612092759427,0.023574732696342693,1.999994754125968,1.214787953439076,1.8421867721291383,0.29176349019404213,5.536072553713467e-7,1.9773425842711958,0.9999588148813284,1.7066909516387394,0.4599628707977791,0.023122630035191438,1.9090521501079536,1.9376260642296037,1.5381952916300992,0.6533799771361388,0.09186124699344977,1.7983123609647003,1.9904182787630025,1.3445679128523391,0.8629829495900787,0.20300656668367123,1.6502943531939487,1.9969616426788546,1.760392933329399,1.0789841087822318,0.3513685159848179,1.4719100173341555,1.956950605214649,1.8821621904789416,1.2912970038070555,0.5300191435679557,1.271489238524349,1.872253533033657,1.9627377537692947,0.0017706484607095119,0.7306161294608168,1.0583909218439103,1.746825464449524,1.9983570440256329,0.012298941729368407,0.9437923403684906,0.8425659662476869,1.5865234238443522,1.9873567728480024,0.06894920152292239,0.0834130329329047,0.6340925945885273,1.3988329204101735,1.9302506119944427,0.16907607137045733,0.018917728357365937,0.44270573808725167,1.1925184027055313,1.8297052068200426,0.30800399878503326,0.00023531758402373093,1.9722754953777164,0.9772139914995521,1.6904156538551276,0.4792455661781674,0.028238199722990687,1.899339609750287,0.7629736021577731,1.5188862572566295,0.6748044291368998,0.10161874431077855,1.78440790866019,1.993303123811919,1.3231268019910678,0.8855487159724206,0.2169503527903479,1.6328472751596803,1.9949320442517502,1.112278526662052,1.1016374521698706,0.36884746792146406,0.005290222130818201,1.9501013380107406,1.8926455598045377,1.3129800973032268,0.5502170592769124,0.05058310411721845,1.8609044323614659,1.9686397344402606,1.5097077357501947,0.7525898413870831,0.14021022460969623,1.731506491107317,1.9994020354919257,0.016110706370270123,0.9665157578772487,0.26998633037149333,1.567949916921593,1.983495977894085,0.07748941486123961,1.1820052639589869,0.43385135985305856,1.3778721936121252,1.9216643153877893,0.18194593720119778,0.014768330492123338,0.6241534255312757,1.1701492440284422,1.8167943566829097,0.32460254223219076,0.0009873542092474485,0.8320061286022427,0.9544809574709826,1.6737831388782245,0.49879769698662735,0.03385655352482975,0.13412234872529694,0.7409382409310793,1.4993087540391823,0.6963971355050782,0.1118410590592751,0.04686993439891829,0.539492745184457,1.3015185071318092,0.9081736988082434,0.23129928439976954,0.004125149796551764,1.9923876735561161,1.0896484671776223,1.1242382089088803,0.3866529746440409,0.00788401740702216,1.94276049369468,0.8735921771758612,1.3345012566495993,0.5706476901608197,0.05797101209076416,1.8491099045566433,1.974040546336568,1.5291443395917172,0.7746915619440314,0.15204725745112713,1.7158090404027142,1.9999299419412515,1.6990783495677517,0.9892564999453847,0.2857197426646786,1.5490825558920789,1.979126327628335,0.08650693001066867,1.20432311944817,0.4527464597506703,1.356715957857014,1.9126011548252544,0.19523905962330024,1.4098486090751294,0.6453278821320105,1.147692051085251,1.8034609017193053,0.34155053254207923,0.002256274383387491,0.8544711735228491,0.9317714747401318,1.6568020122781444,0.5186091470601619,0.039974784535911856,1.070410119942081,0.7190369168078998,1.4794729112682965,0.7181469242953087,0.12252290227052887,0.04023480977396254,0.519422290062546,1.279754208285327,0.9308461920581172,0.24604593745506886,0.0023189718524339042,0.3422488552798242,1.0669720240782654,1.146774685494278,0.40477582368307297,0.010991127937222123,1.9349318703782112,0.8510624953910322,1.355849346918836,0.5913004655256604,0.06584632058772089,1.836876052041832,0.6421077943253303,1.5483071671149022,0.7969098558252053,0.16432301629340362,1.6997412341088118,1.999940490237769,1.715161081559048,1.0120028006402901,0.30182271956336504,1.5299311026227589,1.9742500828833314,1.848619632914966,1.226535259299467,0.47192470556563637,1.3353751592627545,1.9030658195353634,0.20894856084965885,1.4304893637505272,0.6666858441005278,1.1251584431018367,1.7897117405841665,0.35883920091941324,1.614341215745779,0.8770115142433795,0.9090972930662018,1.6394810599947036,0.538669666065438,0.046589727217771326,1.093080289322199,0.6972809614106987,1.4593889918979503,0.7400425422886598,0.13365874721867588,1.3048025610209746,0.49960048315674044,1.2578451661779741,0.9535544651009904,0.26118268212052964,0.0010289884857203058,0.3252868015379181,1.0442609300286632,1.169235221679272,0.42320663837794714,0.014609946119828132,0.18247971727747025,0.8286098730371056,1.377013322728571,0.612164699741107,0.07420495496757051,1.824209204543819,0.6209620976379773,1.5671863035800921,0.819233227409763,0.17703114972763956,1.6833113856186137,0.431013982776843,1.7308737932113214,1.0347428911533547,0.3182869294774747,1.5105054659683144,1.9688697666008004,1.8604321945499478,1.2486301910760966,0.4913761745809617,1.3138608394390405,1.8930632430472025,0.7492522201480291,1.4509073856396646,0.6882162609469,1.1025600788407917,1.7755539870164754,0.3764596023039831,1.632128882052302,0.8996154885177611,0.8864701439438255,1.6218292437916242,0.5589688748022521,1.7838323103275187,1.1157022994818284,0.6756816311489751,1.4390673872355655,0.7620726608149875,0.14524283227989543,1.3263862433143188,0.48003758015894016,1.2358027164254561,1.8536200852405438,0.2767016867292208,1.5218291632942211,0.3086738406268098,1.0215269356217052,1.7217864831201974,0.4419358827283445,0.018738599598576378,0.16959246195012156,0.8062459269751631,1.5562481362961451,0.6332295977692064,0.08304259051968932,0.06928802732067041,0.6000125130388668,1.3647350699889471,0.8416501267102473,0.1901650826367557,1.666527995643729,0.4124570273375563,1.1561902322286135,1.0574650058890807,0.33510385391699005,1.4908156966443762,0.2523376136037312,0.940351891437133,1.2705964829840795,0.5110908027154972,1.2921841297744787,1.8825986006378361,0.7272988955061985,1.4710921105723478,0.7099079929540115,1.0799086505692441,1.760994966158651,0.5269800270801865,1.6495894884148854,0.9222714011762759,0.8639017345332571,1.6038556966197675,1.9905459369210476,1.7977534527324313,1.1382644459195863,0.6542501013952596,1.418518611565602,1.9379480928327406,1.908665297358552,1.3478010551929867,0.46074370280561294,1.2136382636678475,1.8415515606925394,0.2925949218350571,1.5410966485328605,0.29241856799944965,0.9987818032987975,1.7058577000882038,0.4609538663281134,1.709125040525333,0.157134854833056,0.783982228185669,1.5372029097144808,0.6544842607496729,0.09235465470092952,0.06120980964101519,0.5792698797257623,1.3434627411167948,0.8641489553484846,0.20371801959740887,0.009122775323893384,0.39420406334235214,1.1336841397203488,1.0801573885525377,0.3522647918993732,1.4708719820273384,0.23742666446895522,0.9176629861210258,1.2924227697869832,0.5310583897310388,1.2703562456772695,0.11625860463557314,0.7054866648888312,1.4910330950849224,0.7317498169411853,1.0572158780093441,1.7460422107665612,0.5070630212197406,1.6667140008135681,0.9449675301765775,0.8414037416031531,1.5855697178917967,0.33165770140867346,1.8112618419679558,1.1607550551072434,0.6329974607030404,1.3977532967095285,1.9298180928955713,1.9179267718863424,1.3690359167532251,0.44172883364086457,1.1913632756688939,1.8290476220793384,1.9817279349891157,1.560084173395444,0.2765293940428728,0.9760373012640416,1.689563710234666,0.48025074937903134,1.7249785818867884,0.14511334142243892,0.7618302957817105,1.5178797373554218,0.6759176916388967,1.8560191865322666,0.053617316749054345,0.5587449298209907,1.3220127065456235,0.8867180725565205,0.21768294839590607,0.006313844134959501,0.37626453477259336,1.1111088797867632,1.1028082982320022,0.36976086445140555,0.005411819847045751,0.22291026650791956,0.8950166815148498,1.3140977586862337,0.5512686045098741,1.2483884807724186,0.10584319908690532,0.6838268138219099,1.5107200218236616,0.7537304320709951,1.034493502274545,0.030529929228818364,0.48740105819189294,1.6834935591215243,0.9676921326686089,0.8189878054890768,1.5669807686707122,0.3149117669777035,1.8243504888691433,1.183162490529543,0.6119347050696065,1.3767821865249745,1.9212070102836956,1.9267133162423309,1.3900798411965685,0.42300281085152613,1.1689892773826567,1.8161147388687622,1.985802077852402,1.5787819138429289,0.2610145397267124,0.9533051973954316,1.6729129439786956,0.49981654778186146,1.7404570233895251,0.13353414158199406,0.7398015910490726,1.4982886169201457,0.6975188008997534,1.867555543430699,0.04651447695809552,0.5384482828187023,1.30039606440321,0.9093458011994885,0.23205264365628409,0.0040190405988802524,0.3586477234399088,1.088476132740935,1.1254060154736414,0.38758301920311855,1.6430285990058588,0.2087959304236443,0.8724246946897993,1.3356102351639443,0.5717109904000448,1.2262922010584785,0.09589042526015912,0.6623305489910912,1.5301427048829086,0.7758384656962538,1.0117532797948168,0.025203475186611257,0.4680043109862163,1.6999194816892438,0.9904334510702882,0.2865439805210118,1.5480984667747517,0.29852029336231733,1.8370126214433768,1.205475158704869,0.45373195856118964,1.355616131346921,0.16179276949381083,1.935020384317668,1.410921940514346,0.6464286227669718,1.1465278449905645,1.8027596024621662,1.9893661722406502,1.5971801957691065,0.8556357554878484,0.9305972531562197,1.6559140163335166,1.9975122390082825,1.7555523565745825,1.0715841615900046,0.7179075115162334,1.4784396847446644,0.7192764122392674,1.8786430319488763,1.284189853541031,0.518390440090404,1.2786239990191555,0.9320204338172937,1.9607043450808805,1.4835249361290543,0.3413627441838357,1.0657976086394527,1.147938848345091,0.4057220350714399,1.6602812022509463,0.1950909588945854,0.8498987146133526,1.3569490687852452,0.592374970625559,1.8062047915702473,0.08640543266478151,0.6410089924434295,1.549291095075207,0.7980624792441589,0.16497003493491358,0.02038137540792606,0.44888281537110186,1.7159832698363675,1.0131797191508154,0.3026658551149649,0.00010186507877019135,0.28249176141917864,1.849241688374165,1.2276815151836487,0.47292458673237703,1.334266082373797,0.14960567406018743,1.9428436780818474,1.4315514311210773,0.667795780150112,1.1239905999119633,0.0564298394193925,1.9924183741113806,1.6152695000059303,0.8781796752897351,0.9079252175096009,1.6385757224491062,1.9956508225082152,1.770256771201097,1.0942521265884213,0.6961593850573464,1.4583432105553404,1.952390079952504,1.889275915482324,1.3059233540643624,0.498581779451609,1.2567077751381759,0.9547302386819873,1.9667691814000259,1.503309098521742,0.3244185401558535,1.043085041223697,1.170395138484797,1.9991179216047517,1.6771921796992633,0.18180244279627045,0.8274503961014662,1.3781032189571092,0.613249853758757,1.8194529043130512,0.07739312878282967,0.6198731758328915,1.5681552851306935,0.8203909741345449,1.9234482255388652,0.016066124820186767,0.43004646470130914,1.731676612248858,1.0359191681184545,0.3191485264907281,0.0006851739408637592,0.26683446422096235,1.861031362410755,1.249770070521385,0.49238992077100674],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],31:[function(require,module,exports){
module.exports={"expected":[0.910367263113076,0.9277943241428723,1.9895726807480307,0.18066768764982066,0.04149181903431176,0.0005249102343740653,0.6573891238778162,0.3780964409889961,0.16252413404369503,0.03275978919982292,0.0020990898759878363,1.3806191180989815,1.7652355751255793,1.8503664647509315,1.2264719265788935,0.004720886318832163,0.5972683478814744,1.7439785203898401,0.12889274922245808,0.8134170964507066,0.00838754714733636,0.5678264775120259,1.710258173875107,1.890400207539686,0.828829029124448,0.010533745074159273,0.5537537512540057,1.6991444153283375,1.8974209329432885,0.8608374279024325,0.018838971740057886,0.5103342829727712,1.6756144327637656,1.9112424838311215,0.8929919223970885,0.025612763384810222,0.4823443152855855,1.6513751763386968,1.9303736402062301,0.9252587561619334,0.03340948669504795,0.45489779313197687,1.626452092920673,1.9360021567265147,0.9910666528871964,0.03754319010123486,0.41437494082656834,1.6141656837899365,1.9414009974590418,1.0067312388129697,0.04191306072606238,0.40174974033881317,1.6017285709602564,1.9568323243197328,1.022394173030394,0.05714141958443508,0.38927133823039517,1.5337665339001016,1.9612675570543785,1.0714749934566943,0.07464607324778638,0.35111324967237323,1.5204549711364197,1.9654669143887114,1.0870902764825903,0.0806979388689123,0.33927427132257637,1.5070156993662693,1.9770985426554586,1.1026841893356578,0.10113902624282833,0.3275974215545726,1.4640651841657015,1.9863712123436894,1.1514207592994634,0.10811385345237956,0.26880977921881655,1.4501329586078238,1.9888274929390772,1.166885679811075,0.13140555917773888,0.25821384263607927,1.405727168135222,1.9860159023177704,1.2151155505506168,0.13927406639735074,0.24779992520662653,1.3913604787768539,1.9998403906187243,1.2303865542046146,0.14735377815898476,0.23757058229282801,1.3140865801362294,1.9999975752107695,1.2456010257096795,0.15564271186660694,0.2275283239662419,1.2991766227959318,1.9999093808480857,1.260755231745644,0.16413883358539638,0.17775796833604818,1.284193253630645,1.9995758291717656,1.2758454537802553,0.21228895262384384,0.16894380627379557,1.269140149252748,1.9989970020285694,1.3542241629025642,0.2220353946734912,0.16033356840615376,1.2540210033862151,1.9981730414508414,1.4301865745765432,0.23197273332769386,0.15192936750941388,1.2388395259602514,1.989782650620731,1.44427441823601,0.2874402204885177,0.1437332658026076,1.1578919704985042,1.987427756341669,1.458253246038777,0.2985177659470275,0.13574727444148127,1.1424049683464452,1.984830567484372,1.4721196278663715,0.30976744080026775,0.09718203808553771,1.1268830229273752,1.9819917213458724,1.4858701611922653,0.37183291931279105,0.09055687588115824,1.1113299430092716,1.9789119145209575,1.4995014719167818,0.3840978997126183,0.05934405543369514,1.0957495449998818,1.9755919027312392,1.5692870096905072,0.3965140098924874,0.05414366291928041,1.0801456520102537,1.9541435073063478,1.582095241554355,0.40907820319287314,0.049175364206961,0.9307217220679285,1.9493373975187382,1.5947606391499343,0.4217873966176807,0.04444037841563786,0.9151037418744369,1.9442983397479907,1.6072800946476864,0.4910873947453269,0.03993986741399236,0.8995065934865374,1.8847188049870753,1.6707709300739468,0.5638588788930783,0.05554528075294607,0.9506423614435212,1.9074505998226101,1.6318689278413134,0.5183017344476956,0.03164662930688755,0.8683900949616868,1.8696835642374265,1.6936739513031034,0.592261040855061,0.0006383865747935369,0.9193803755691702,1.8938440712834486,1.6558376082284885,0.5459888407604843,0.003783807060553701,0.8374027660294054,1.8537947656068268,1.802699240356656,0.6210633814754207,9.699145162911371e-6,0.8881975144691877,1.8793602723407068,1.7710713137502236,0.5741215399520445,0.0015502860454711387,0.8065750194511935,1.8370680032836078,1.8209866967448414,0.650237632466889,0.0003624601839964381,0.6003199714553271,1.864013418234551,1.7906386919166288,0.6026722209600368,0.00029670147753357856,0.6478360827302736,1.8195196938822615,1.8384683891816556,0.6797551605277932,0.0016963234711548925,0.5718024595584339,1.8478185712575301,1.8094300914234138,0.7590226116831181,2.4283697328653098e-5,0.6186912057386267,1.8011670603312213,1.855127160120417,0.8399338610585421,0.004009979875860381,0.5437052055579495,1.7490504848319555,1.8274270693014318,0.7895421457183388,0.0007333000714626614,0.5899205673089136,1.691824351700204,1.8709466596773208,0.8709329088880807,0.007301158641553673,0.5160557857282472,1.6298790221082005,1.90852519235075,0.8202682352957326,0.002423054730151919,0.5615524046140344,1.668866584411369,1.8859113616781649,0.9020586306451491,0.04066060906039981,0.4888813368132757,1.6052404826021096,1.9211676234692137,0.9845171212450954,0.027452683643038656,0.5336145598138644,1.6452523526705125,1.950140251304199,0.9332804777415038,0.04997285201211543,0.4622085293929862,1.5800079249898484,1.972631611893129,1.0158453506161014,0.03521928886614012,0.5061344527293437,1.6210048328540019,1.9594416499804959,0.9645678072459191,0.0602175066968198,0.33086397125378864,1.5542061139666377,1.9794326170790006,1.0471580284411761,0.09162633757531136,0.369839455289233,1.5961478228838442,1.9678013969856223,0.995889911958937,0.07138451841634086,0.3079139331016634,1.5278603729260043,1.98527235029936,1.210812237481819,0.10517068963088494,0.3458264079859218,1.5707057188710267,1.9752112875791048,1.1604239705761206,0.083462927217827,0.2856431483481182,1.5009965591059369,1.990145080101391,1.2413292057231842,0.11959327906080885,0.23033278790414546,1.427869911675776,1.9816640492646314,1.1912639249376047,0.09644087865048045,0.26407347483274346,1.3518246011952808,1.9940460241055078,1.2716093194879106,0.2095833226190491,0.21071157920848838,1.2733793615875297,1.9871533489277027,1.221916161792187,0.17922033493028244,0.2432260822839042,1.3223302595195543,1.9969713536990574,1.3016228601164732,0.22915956875422627,0.1918650239380696,1.2431140820347604,1.9904010404135333,1.2523505972571636,0.1975170113446978,0.22312143154154163,1.292519564235923,1.9961846212913192,1.3313403705796816,0.24949236238794392,0.17381161919510135,1.2126101962242393,1.9855852507125555,1.2825373612127442,0.21660129109837656,0.13013755134452054,1.262421773289394,1.9998846456444785,1.4820159204258025,0.27056174773747654,0.1565690836378748,1.0489955608270958,1.97980215049464,1.4364673130228145,0.4345452722044827,0.18521853462061588,1.1001327187354648,1.9887649461122288,1.6195618449591946,0.3930079600645018,0.21601056658393702,1.1510065637583393,1.9951276470322559,1.5785083374377469,0.3530668177631705,0.10095547913072167,1.2014833160573377,1.9507122912258366,1.5359335619278032,0.5319880205787857,0.12458349893457499,1.2514302400045245,1.9653576657916125,1.491949474712289,0.48730099619057177,0.04118148551257639,1.037632898567079,1.9774644983530982,1.6674978823908035,0.44396218501166673,0.002552731224336302,1.0888102503581654,1.987000952313264,1.6284491055672157,0.40208555246285926,0.007524736791666542,1.139754063266271,1.9294303324505326,1.5877477345719824,0.5882434006685977,0.015106593850471639,1.1903303734627462,1.9471242790102234,1.5455007993107692,0.5420689964447676,0.025278364855014557,0.7113478590616951,1.9623276307875352,1.712814078282315,0.49709878537005214,3.8796392504703014e-5,0.7608084649680036,1.975000408458265,1.6759232934781756,0.45345102285775585,0.0018051208925994322,0.8108980582230079,1.9045004816626592,1.6372550745343637,0.6461148713435573,0.006196337408238772,0.6043611055396543,1.9251735537993877,1.5969111049009612,0.598634315757588,0.013200898625955526,0.6519616875359875,1.943413753633132,1.755332572515266,0.55220920696055,0.0014495779812158105,0.7004774845936396,1.6805117495650588,1.7207445712168496,0.5069616262212941,3.2888223461258193e-6,0.7497809176887245,1.7171794115706942,1.6842612720063403,0.7053752946802933,0.001186629846600784,0.5476287377552274,1.7519611507464825,1.824945685642989,0.6567749426782492,0.004996489294471496,0.5939415206862391,1.7847655036804588,1.794886485582841,0.6090771486148957,0.006779538857981993,0.64132209076233,1.6332937327195867,1.9066761153949034,0.5624073404616805,0.0021263125351859147,0.6896458541965679,1.6721342048813117,1.8838597966399495,0.7657920812986189,9.713360991869813e-5,0.49267186777482386,1.7092072068378752,1.9637096063722241,0.7162626828804584,0.0006973380898783743,0.5375150800487817,1.7444152499837302,1.9487576623287477,0.6674794111293523,0.016007759626232132,0.5835744606272446,1.583590121130174,1.9313108282946914,0.877846742346025,0.00816585944181758,0.6307288899744867,1.6244509596948464,1.911414983142318,1.0939181764521773,0.0029321248278612044,0.4397061940968011,1.6636697177675135,1.978534447352211,1.042758132789185,0.04265093789501928,0.48290383199383413,1.7011432641790223,1.966683371983815,0.9914856506798461,0.029098020731196605,0.5274612460538963,1.5315959949457916,1.9522902684826469,1.2065048350160346,0.018098225113677535,0.3491639497280651,1.5743168264874292,1.9353929855125798,1.1560751203644601,0.009680476532156979,0.3889396000354909,1.6155274122005292,1.9895186691164377,1.1052349845157379,0.18820309470107022,0.4303221184990794,1.4318465803176554,1.9808149763377934,1.0541181186652968,0.15933586598327398,0.4732026840413319,1.477515424284432,1.9695320944108157,1.2673679164391312,0.1326792803165705,0.30290041894416253,1.5219285751488512,1.999520560930922,1.2176194899233352,0.10830343489374528,0.3405713378064881,1.5649692423647692,1.9966191600368033,1.167298802746337,0.22636135716723893,0.19446700570318753,1.374520961579628,1.991097010699196,1.116538180141167,0.19489683617201192,0.22590216022247733,1.4215606682846906,1.9829686341764314,1.3271816138979406,0.16554944571978225,0.10797549509234705,1.4674918226865823,1.9994978497277056,1.2783097315595957,0.13839635884808743,0.13231862350836432,1.5121936424381102,1.9998080516188017,1.2287059951439465,0.2675560497210332,0.15894344056540743,1.0533941343298558,1.9974891194332753,1.4325004078628716,0.2336177305617162,0.18777993261066062,1.1045139500674988,1.9925471511252493,1.3857111664839967,0.20169471997791732,0.08142349720355946,1.1553589318636064,1.9955522407070825,1.3379076440439772,0.34971457882631574,0.10289267045954831,1.205795375779659,1.9990728278817027,1.2892155465417057,0.31162548860340156,0.1267209119853554,0.9907606465815733,1.9999662143525894,1.4881101816565387,0.27534657472629787,0.04244170305107409,1.0420337520103822,1.9783847730281559,1.442726853388839,0.24097323763570178,0.05847679147115137,1.0931963238526692,1.9111164010558181,1.3961793133957032,0.3985610106086679,0.07698774588117174,1.1441138230227967,1.9310465082184913,1.348589964895809,0.35839670705343174,0.09792588915660949,0.9281634220822503,1.948528299329184,1.5418041870803227,0.3199195884317715,0.02627184829286333,0.9793885769960228,1.9635158035911466,1.498004895528023,0.28323083566894036,0.039225440702020165,1.0306679325080996,1.883520428930034,1.6726708636436767,0.4497680114502025,0.05470552320066213,0.81522476524919,1.9063700384068487,1.6338546773651275,0.40768613418017585,0.07267138876273527,0.8658481467184862,1.9268362220349247,1.7852146674051754,0.36716182845216827,0.013923748671114677,0.9168242991104946,1.8245356716750063,1.752438899987563,0.3283016585541433,0.023745003920064622,0.9680191735554025,1.8524567551346283,1.7176844900201829,0.7504829522361156,0.03613345721619077,0.7540475776088834,1.8781361852087404,1.8505274493159893,0.7011693091317187,0.05105653140164268,0.804059399763545,1.9015064342708476,1.8224482994486333,0.6526414828160847,0.0054458688554304135,0.8545864749292635,1.7874876692825572,1.7922064075961135,0.8622030012320152,0.012096239806937747,0.9054959351471392,1.8180473005103166,1.7598812990115849,0.8116100591136592,0.02134444084807252,0.6938357209307665,1.8464557627906184,1.8817910862327916,0.7615125144993293,0.03821155829558154,0.7430396939358244,1.8726383521279057,1.8564539299113814,0.7120421058377082,0.025440609842461992,0.7929193797398728,1.747348881192165,1.8288646090784515,0.9244941025318049,0.015232400605342034,0.8433436127842164,1.7804271176482387,1.7990956736834,0.8734765717719414,0.007613774487632119,0.6348255188459595,1.8114531126505584,1.9095938089229811,0.8227917519320459,0.05724342715573816,0.4433597152282397,1.8403452790378787,1.8870980911590887,0.7725729257825389,0.04138766090046009,0.4866786408381867,1.7042768468765117,1.8622696258072997,0.7229521506987375,0.0004613908088314522,0.31429895672793606,1.5353213049121328,1.9509368554046786,0.9358396722723904,0.017273607217726306,0.5772485786490917,1.773265615594207,1.9951988700384766,1.151723242562302,0.07997549177215812,0.39243193044771896,1.6189925693252887,1.9142605088827032,1.3605219016273948,0.0034896199145642015,0.6722623273484468,1.4358148718741934,1.9799468772772886,1.0497197097993751,0.0446877626793627,0.47695144118805977,1.2322862405415174,1.8679737847272948,1.2631213269098849,0.130495434472784,0.770721136583921,1.5256803658955571,1.9543940354037972,1.464236156504978,0.019441932224091518,0.5669690502515456,1.3306562070300283,1.9962476336667387,1.1629549154418584,0.08449168857136491,0.3834378989898597,1.610020096984306,1.9188089467010778,1.3711069009719408,0.19229227862424025,0.6615385249087151,1.425550434398755,1.9821496999685446,1.5619295742364736,0.04811143675493956,0.46729189932473747,1.2212091489920653,1.8735656688225344,1.274076703173474,0.1361691541947393,0.032812661335002824,1.5159714286606059,1.957727761878215,1.4742794629856397,0.2645645598649847,0.16133411255226027,1.3199013940883462,1.9971675298908798,1.1741655096495744,0.08912630891865159,0.06391004226174846,1.108893154007586,1.923238534025014,1.381643896606,0.19904993686156913,0.010197892023937838,1.415230950790257,1.9842254788626401,1.5713009327839704,0.05165824026542032,0.10484726413680678,1.210103443423533,1.9992527538093248,1.2849966268527115,0.14195461284076993,0.029985703839098377,1.5061957490853317,1.9609376036011343,1.484261420097774,0.2723185142417849,0.15519400960789076,1.3091052010110054,1.9979584397197634,1.660913005814078,0.09387875331297724,0.05996995704636032,1.0975805894978259,1.927548697875063,1.3921315255398614,0.20591120021872866,0.00864181186536428,1.404857755902624,1.986173945451798,1.5805983919657955,0.3550246411505802,0.09983546796057197,1.1989705603898444,1.833359883063466,1.2958796854250774,0.1478510620456982,0.027284220392097214,0.9837921796050678,1.9646852858354664,1.4941807366474462,0.2801665962440141,0.00015518255969859673,1.2982690243156276,1.8855748191380743,1.6694053851444712,0.0987484070124327,0.056151467333272365,1.0862554026672326,1.7651113015134203,1.4025684311695334,0.21287518117220783,0.0072139666475240505,0.8702139744663419,1.928480911232342,1.5898207491297276,0.3637577573440349,0.09494011057184881,1.1878119399604048,1.8270196929458806,1.749530631431626,0.15385773908740874,0.02470856043840175,0.9724215691905834,1.686939730380391,1.5040361295434543,0.28810779070042314,1.949378293797377e-5,1.2873942656918276,1.8802347508237625,1.6778111750252407,0.4556005612228793,0.052455067054756443,1.0749190584602428,1.7577386661144048,1.8199349591633869,0.2199409789116884,0.005914541066169954,0.8589454097949412,1.9241970975987384,1.5989668113382007,0.8578420146194964,0.0057941093722160275,1.1766290255338225,1.8205725255292933,1.7570108364715797,1.0738075174078052,0.022259057146795436,0.9610545261228791,1.6786302679245342,1.5138263239632983,0.7572375739495227,1.315526775169662e-5,0.7472986355181284,1.8747808216946065,1.686129288144071,0.971307383238226,0.024462920455047055,1.0635730232645302,1.7502680151100276,1.826392566030552,0.6591849645868038,0.0047437032056173445,0.8476950909273595,1.5907204821901422,1.608035395522613,0.8691088555360515,0.007080940129564395,0.6389292314780372,1.8140192147727525,1.7643931200529617,1.085144876195823,0.019936027367346454,0.9496925207606118,1.670233022754792,1.8850565283732301,0.768286208466311,0.00013616783404446497,0.73631095007552,1.4951494409238646,1.6943586485298794,0.9826777090450595,0.027026231137674106,1.052218764721325,1.7427003148497877,1.832743276719327,1.1978780961961855,0.0037016045170022993,0.3558768435448154,1.5815055495934147,1.617025328636361,0.8803926275864328,0.008496207730749106,0.20658916577990527,1.807360608365244,1.7716765272568444,1.0964712212571335,0.059590351006159836,0.43758371976717425,1.6617490810781979,1.8902933016351344,0.7793648158069283,0.00038851556979846436,0.2730835058995489,1.4852363325058284,1.7024981916919963,0.9940502755384385,0.029715398685234984,0.1425275891717862,1.7350365442367761,1.8389862697476094,1.2090135652774703,0.002788379798690177,0.34721893075204846,1.5722153976354303,1.936296808886844,0.8916918711833209,0.010039729106967155,0.19971779634497977,1.3826739198227562,1.7788601159542354,1.1077850874974808,0.06351854176842586,0.42821615541595603,1.6531795403162195,1.8954149129806528,1.3188451410385382,0.0007701658331317196,0.2653202822021119,1.475260457417697,1.9701571632890431,1.0054236116452357,0.03253007524642304,0.13673121980623204,1.7272776946010506,1.8451207375668757,1.2201219978723707,0.10946723248149504,0.338645457007376,1.562851228023201,1.9823587522637953,1.4245415053514778,0.011711304599432593,0.19294994564040202,1.372141702133017,1.9914352183497845,1.1190850114367783,0.06756786901368206,0.08494067069020528,1.644525508962805,1.9963434841607648,1.3296040709346335,0.16696554657342744,0.25765209137089573,1.465223106066678,1.9547262142957786,1.0167962461927718,0.03546989673499146,0.1310465166600021,1.2641965141105698,1.9998550117113087,1.2312019570742136,0.11469869330383997,0.04501783830322481,1.5534142520381273,1.9801683679190427,1.4348113963151878,0.013510717985203313,0.1862864891064967,1.3615613468783805,1.9147115062300006,1.1303695313984148,0.07173780895017945,0.08041284195747578,1.1528248713328546,1.995307344200042,1.3403203656268161,0.1733112923720872,0.2500799253077257,1.4551255768121039,1.9512811136064387,1.5343795043065027,0.038534482876848686,0.12547421506526968,1.2532103751904284,1.8628335924714017,1.2422520096594396,0.485722390719605,0.0417056069400672,1.5439056903793182,1.9778511960679448,1.4450250432146394,0.6819715690941609,0.17972828867991175,1.3509342226572463,1.9100563698826414,1.6270170621358937,0.4006119673768245,0.07600396438298773,1.1415754317321625,1.9941424584642577,1.3509926389325424,0.5865676275558163,0.015426818948543586,1.4449691757974863,1.947712962057496,1.543958039140918,0.7918290421252764,0.12001503581475448,1.2421914828035339,1.8570287945179955,1.2532707262729925,0.49550953841563583,0.038517333623728334,1.028104348183552,1.9754075364431292,1.45518112488618,0.6927748099245494,0.0019172965526706998,1.340261704117709,1.905283515211015,1.635836257618087,0.40975447155541345,0.07171460826732579,1.1303076789553503,1.7928861202344115,1.3616195103635578,0.5969500184209128,0.013500499695072943,1.4347552167815638,1.9440222211992846,1.5534662114890536,0.802966500631767,0.11466968506848652,0.702233190198423,1.8511131375047791,1.7194680986749415,0.505361943356945,0.035453430766235305,0.504102213377492,1.9728377051387698,1.4652783276123793,0.7036177911883277,0.001277914453871709,0.8015450689035457,1.9003935595971564,1.6445732059107299,0.9157135860349752,0.06754532845064154,0.5956233747605317,1.7859043830542776,1.3721996053044663,0.607384544922875,0.011701786897542199,0.4085845652885134,1.940209368439406,1.5629027914423541,0.8141294459697747,0.0020080967793855153,0.6913951977842385,1.8450873866384514,1.7273205104479787,0.5152783311075326,0.032514294691949996,0.49425805777916065,1.7105029664501221,1.475315345291963,0.7144991103156919,0.0007677198364309801,0.32073718580784005,1.8953871355704341,1.6532267768652447,0.9270517193994849,0.06349666424088285,0.5852477276640913,1.7788209869549065,1.9942981328383307,0.6178698573266588,0.010030913224458038,0.3994518806437293,1.6258867943968993,1.9106564425103225,0.8253164341812516,0.0027930372301452344,0.6805971242601141,1.8389523213666574,1.9781536684825767,1.040920083975756,0.029700305586303655,0.48447932130861104,1.7024537920991092,1.9999747555298129,0.7254173597777284,0.0003867786954423469,0.31243441702052177,1.8902648907257298,1.9517272045803988,0.9383992888271162,0.017751472046214856,0.5749257299283952,1.7716368481932976,1.9954466120059648,1.154257742017928,0.008488094807980295,0.39039687856959904,1.6169762342833878,1.915296526615418,0.8365260181981377,0.0037069691769152646,0.23433422609218624,1.832708735277165,1.9804546917332007,1.0522810641189886,0.04544902323856448,0.4747672688726212,1.694313753395054,1.9998292686968187,0.7363711272684821,0.00013514030670236377,0.30422058675495967,1.5234969011264414,1.9551565843852203,0.9497548264781818,0.019948423985423513,0.16616421588854513,1.7643528960577939,1.9964663273838594,1.1654847884480615,0.08552647181328821,0.38142073035584245,1.6079858665768345,1.9912447983848223,0.8477567480295423,0.19380703281733458,0.2270680956030845,1.4232281580021784,1.9826288904406968,1.0636352815610715,0.3397338074541869,0.46512315675220406,1.6860839032746184,1.9995544511652443,1.276542284079866,0.13746403966237353,0.29609675749295905,1.5137728035643674,1.958462412027508,0.9611168634822822,0.2663047990683096,0.15994002210196845,1.756970072747877,1.9973571470689921,1.1766904289602402,0.4294063960156139,0.372524597092213,1.598916854206324,1.989679012146134,0.859007170949305,0.2005881307433719,0.21990194600700153,1.4128964457244613,1.9846759833664112,1.0749812676023778,0.3483181087722821,0.10370697314600685,1.6777653062918203,1.9991503384835023,1.287454017886129,0.1432745924602139,0.28806398007444456,1.5039822480602458,1.966968088265412,0.9724839301283088,0.27408006717635547,0.1538244924115454,0.7779507177296952,1.9981189558313572,1.1878732140736772,0.4387833033265771,0.36370962951830743,1.0950278184097402,1.9879852081728004,1.3944895175530712,0.20747263481958045,0.2128367042653322,0.8789530981046318,1.931716225245566,1.086317554608036,0.3569867069567356,0.09872137775287848,1.1964564959647006,1.9986169829246925,1.298328568715151,0.5365271087494756,0.28012329356153187,0.9812278799748417,1.9640065605222703,1.496408748037304,0.2819492350480558,0.14781841787806171,0.7668758521835594,1.9987516551288715,1.1990316972639943,0.44823280557920486,0.0553072531303459,1.0836999876189084,1.9861636055630791,1.4049147983367598,0.640281852270893,0.2058732842867591,0.867671403571012,1.9275253827966141,1.0976426761977705,0.3657384807002464,0.09385236525793084,0.6578220728950523,1.997954453479841,1.3091645299135164,0.5466349612506807,0.02414517114234971,0.9698579455689406,1.9609203358475509,1.875482485750391,0.28991128478464534,0.14192257540397435,0.755831141894763,1.8790148118398835,1.6796945981712286,0.4577536804540815,0.05163845055865546,0.5532061159200743,1.9842144399463373,1.8214004363903715,0.650916962832026,0.199012586809037,0.8564068261096306,1.9232145623579555,1.9247499287156837,0.37457229793652325,0.08910056548148149,0.6471575894681025,1.8191039978022805,1.7586841210795834,0.5568014577814309,0.021724160446540575,0.95849191012167,1.9577098134530047,1.8809219369869061,0.7597263414558517,0.13613772763291632,0.744818015527321,1.873535304138732,1.9620239742610721,0.4673446963995441,0.048092321192817256,0.5430601706800608,1.9821379634525726,1.827834010701439,0.6615972282555671,0.004497463559061221,0.8451608228249332,1.918784321546212,1.9290184603456821,0.8716519111568226,0.0844665930820564,0.6365387471889683,1.812526868444033,1.7660441910460363,0.5670252832771046,0.05663152988137243,0.44488896048078697,1.9543754086286387,1.8862474385191348,0.7707818597649942,0.14992598680757274,0.7338378976597801,1.8679428022148103,1.9650662262410994,0.4770046127909867,0.027621658135227767,0.5329733318787019,1.7409804944970613,1.8341605023792367,0.6723212670194588,0.10046799011153518,0.8339348484187439,1.9142352334253618,1.9331668208522375,0.8829392995616389,0.008833077779337173,0.6259669196344521,1.8058446364739684,1.9885977188950448,0.57730511525742,0.060465550364964926,0.4354649448120079,1.950917552688997,1.891458301478632,0.7818670280785244,0.1559707879660771,0.7228922086009458,1.862238029473808,1.9679836442188385,0.9966149395322045,0.030339158826631185,0.5229469042766695,1.7332951966277546,1.8403790930744583,0.6830876919394404,0.10549458551200264,0.34527820553796706,1.9095678864326153,1.9371944736333728,0.8942418300938542,0.22242008871788388,0.6154434742998711,1.380303186738427,1.990246357354572,0.5876396239974997,0.0644211022444825,0.426113953323803,1.17273742390975,1.896553851825771,0.7929804124990694,0.16212476665221753,0.2635827766567388,1.4730023644565373,1.9707758508181552,1.0079882459073572,0.03318208784655163,0.5129821848202789,1.2726818762936096,1.84648897839509,1.2226230579371151,0.0018451374723690295,0.3367239263634634,1.0596281585112062,1.9411008977009914,1.4268622010143428,0.012105915601692607,0.19143819406612284,1.7921683356431073,1.9917669046917714,1.61116846664746,0.06849767385828076,0.0839092913624313,1.6425624714915736,1.996121085249174,0.804120575479424,0.16838712683172363,0.019158418148278233,1.4629513293744796,1.9539601153327617,1.0193605189806694,0.3071098085202354,0.5030804624737252,1.2617220817210293,1.867252755456517,1.233696398240155,0.0012191211952682357,0.3282554437950811,1.0482713860992041,1.7400479168939342,1.4371195247326312,0.013934124763960498,0.18479839792068864,1.7851760358498867,1.5782855925779566,1.6201307949065606,0.07269473789047565,0.07940823542898134,1.6338064246182396,1.9950559009149318,1.7741842629963092,0.17475705845087686,0.690275849464535,1.4528404102495045,1.9504872272838163,1.8920862049101768,0.31535515560716143,0.49324301805235193,1.2507284326687662,1.8615343346503628,1.2447395092636704,0.4879236210546546,0.3198738532546094,1.8948624055812622,1.7323509923175187,1.4473203058238262,0.6844041491755031,0.1782640503713112,1.7780821713511665,1.5689695819869711,1.6290129075214235,0.07701175143915351,0.07502626060242301,1.6249683931199033,1.993862003330517,1.7813329455050302,0.18123373754129402,0.014981304826847008,1.4426709149571413,1.9468913910666736,1.8971676404229147,0.32368906341017867,0.483471124056974,1.239702351195923,1.8557044719802427,1.2557509625505159,0.49772559506660374,0.3115802389241119,1.0255405789985874,1.7245593361020042,1.457463224788504,0.6952164736599562,0.17183599665403226,1.7708876597580632,1.5595799735970286,1.6378136555660614,0.08144815608659717,0.07076393370339606,1.6160495202205363,1.3684703071968307,1.7883805604226835,0.18781632632650913,0.013083739562233188,1.4324441589499086,1.943173071812756,1.9021330248044124,0.3321104539151183,0.4737660445092764,0.2550097485372903,1.8497639215551187,1.9737592316281276,0.5075925396707358,0.30337567360568474,0.12909730385224005,1.7166739561198083,1.4675469696118666,0.7060682227417995,0.16551506825549045,0.7990320434095706,1.5501179819801063,1.6465319006392214,0.9182694267868329,0.06662180607574752,0.5932790584629903,1.3578735437680318,1.7953261961206652,0.19450397333034253,0.011313834662642464,0.40651842904085256,1.939332750497008,1.9069817157683806,0.34061823779168043,0.0021738306111983574,0.24747118204319707,1.843713451801721,1.9762845620205605,0.5175231785503049,0.2952612185826863,0.12356423246669956,1.7086958723667776,1.4775702359334568,0.7169579927170873,0.15930208280536606,0.04058357409228741,1.5405848310711543,1.6551665150116386,0.9296098160950357,0.06260041351521406,0.5829153923016953,1.3472304884003308,1.8021689541616672,0.2012958134870414,0.009671819070199539,0.3974031589532806,1.9353709238756795,1.9117130861231486,0.3492113145343422,0.0029878680089620024,0.24002995724610665,1.8375538453651525,1.9786836072877496,0.5275162271495338,0.2872379234824576,0.11814453048694129,1.7006261168302492,1.48753172721588,0.7278843749637651,0.15319784397061875,0.037438474858441095,1.5309817540097748,1.6637163817719127,0.9409593105694329,0.05870027620011564,0.5726056771952148,1.336542517802561,1.8089079494158922,0.20819096825317895,0.008157905184191239,0.3883658364442152,1.1263879974916007,1.9163265238527925,0.3578885726047112,0.003930871700832506,0.2326870366891567,1.8312858990076484,1.9809560571065137,0.5375703928397739,0.2793068261405498,0.11283889896650023,1.692465733355562,1.9997785903075296,0.73884595612388,0.1472031413515309,0.03441788563682446,1.5213099929807128,1.6721803949709826,0.9523164421213272,0.0549218986240686,0.5623512467338916,1.325811014493465,1.8155423101755481,1.1680135729541243,0.006772288833592266,0.37940763051647497,1.115097873200499,1.9208214321963024,0.36664888957530584,0.6110226106008928,0.22544337019955774,1.8249104235055147,1.9831016175291434,0.5476843750867109,0.8180143878934094,0.10764802420357977,1.6842157775110296,1.9994746131160912,0.7498413182864011,0.13876459858508905,0.03152219714906024,1.5115707990531746,1.6805574597651844,0.9636797416741435,0.2680498642579785,0.0006206820755406683,1.3150373666228636,1.8220711782676071,1.179214186064044,0.4315144794171333,0.3705296999389288,1.103792860679164,1.9251972297247741,0.37549113227474484,0.6215252543993002,0.2182998947657303,0.8877016141091566,1.985120011021427,0.5578568656185923,0.8292093925928801,0.10257257765227756,1.6758773164514011,1.999041351101759,0.7608690391706308,0.14460020731498757,0.028751783960513144,1.5017654320190013,1.9663111751523532,0.9750477393534589,0.2758463949543193,0.0002846702435079784,1.3042229677920936,1.82849370916481,1.1903916173202163,0.44090786308882235,0.36173319309660557,1.0924744222624292,1.9294533504166185,1.3968449147543993,0.6320768549594029,0.2112575344161033,0.8764076650914162,1.9870109764985489,0.5680865485954565,0.8404264895327545,0.0976132158357308,1.667451428779822,1.9984788603081804,0.771927692310181,1.0562276136498316,0.026107004431839775,1.491895160229708,1.9633214943164383,0.9864189646771349,0.2837365969349004,7.797437173651112e-5,1.2933692168737414,1.8348090720949106,1.2015444208907997,0.45037356688445784,0.02074158456685471,1.0811440220218047,1.9335892437307791,1.407258502118312,0.6426760474023017,0.20431720009958765,0.8651297030861722,1.9887742693588615,0.5783721007793396,0.8516642277503249,0.09277058026119289,0.6554133254834706,1.997787213495105,0.7830158472374902,1.0675791370563212,0.02358820067263301,1.481961260432421,1.9602072051641657,0.9977919467455278,0.2917194495801362,6.211969125757832e-7,1.2824775178306964,1.8777890910088932,1.959582214385113,0.4599103663889095,0.023109294082029885,1.0698031255760956,1.9376043746779446,1.9976365152770483,0.6533214606929549,0.19747978956774337,0.8538691869291981,1.990409661515526,1.9891049007481931,0.8629211536128764,0.08804529733705335,0.6447590138460513,1.996966500128973,1.7603524153330046,1.0789219189133497,0.02119569849716929,1.4719650176047272,1.956968710537505,1.882132808996173,1.2912373240821096,5.262072488465552e-5,1.2715492795345429,1.8722840407780006,1.9627208808061385,0.4695170279906188,0.025603367128848586,1.058453199901821,1.9414982238897522,1.9983534674867238,0.6640117178175258,0.09665481286580824,0.8426275731995987,1.9919169414260152,1.987366659744408,0.874195811005719,0.08343797829180954,0.6341506536188797,1.9960168263713425,1.7676902232726035,1.0902544920005153,0.018929807382263575,0.44275753805522733,1.9536064293447495,1.8874325192442796,1.3020986238420915,0.00023396622936899814,1.2605859155833192,1.8666661581787363,1.9657350166018355,0.47919230904117105,0.028223481092020553,1.0470957131434548,1.7392558002379181,1.9989412798968131,0.6747454359615026,0.10159134570882622,0.8314063160313969,1.9932959141194777,1.985500700115196,0.8854867415205397,0.07894921909500285,0.6235896170228761,1.994938315065157,1.9260409023522214,1.1015753904179488,0.016790820427238118,0.43334988316785095,1.9501207965063287,1.8926174376261642,1.3129208463042938,0.0005446342528198089,1.2495888441186653,1.8609361698998503,1.9686242318853502,1.5096540623055685,0.030969297052512612,1.035732134423519,1.7315490256634753,1.9993998764721448,0.6855212266885699,0.10664409021168253,0.8202068669254379,1.9945464012219578,1.9835072632276283,0.8967924846440525,0.22403528229647163,0.6130772701575168,1.9937311057188558,1.9216885180915462,1.1128831497759324,0.014779014316008365,0.4240155260501588,1.1702107186364195,1.8976868934582043,1.3237025915841214,0.0009845846094638233,1.2385594876423816,0.9545432775086109,1.9713881529286446,1.5194063260960102,0.03384045983138828,1.0243639336525479,0.7409984962843466,1.9997291978919756,0.6963376961202064,0.11181239278781296,0.8090306745616331,1.5586041065897847,1.9813866069383144,0.9081115779469184,0.23125938415856462,0.6026149728241265,1.3673758554581432,1.9172169108558594,1.1241763073843216,0.012894649281294246,0.4147556741272229,1.1589925180120633,1.9026402309921786,1.3344424650328146,0.0015537603904978159,0.2542251091405481,0.9431848212094176,1.974026422210839,1.5290914032325862,0.036836598035751233,1.0129925813389502,0.7300301819815744,1.9999292015576629,0.7071934451159874,0.11709558490289507,0.7978791846115701,0.5294821293369016,1.9791390055600473,0.9194425572729161,0.2385829247588368,0.5922040783499833,1.3567742376720608,1.9126266590600012,1.1354534024417495,0.011137969070957321,0.4055715251866612,1.147753751263002,1.803498041304165,1.3451390774178527,0.0022520879714504893,0.2466965713366257,0.9318337141117261,1.9765386984644593,1.5387080409236136,0.039957324106785985,1.0016195483987962,0.7190967890261293,1.9999998615981767,1.7071213421749734,0.12249298316132518,0.78675383955151,0.5194769993174619,1.9767647498263208,0.930783956928334,0.24600495677692902,0.5818459334132626,1.3461264701453797,1.9079183564658173,1.1467129762245845,0.4047256950812741,0.3964642672236999,1.1364958721549945,1.7966755520722295,1.355791045102653,0.0030794770217057454,0.239265475427757,0.9204914245128312,1.9789246567195802,1.5482549952302425,0.04320223436988979,0.11759015703791353,0.7081997316828192,1.9999411688734434,1.715117475838917,0.12800388939461638,0.7756560784757999,0.5095340262855279,1.9742641468537219,0.9421343098715618,0.25352452015234306,0.5715418778688401,0.3337712579984454,1.9030926121053522,1.1579535722756207,0.4139027799516648,0.012726761255329677,1.125220336926035,1.789750010640366,1.3663969902255495,0.004035820516187005,0.06994256370143825,0.9091594195694597,1.6395290204678021,1.5577310312273627,0.0465709090868891,0.17058858988173897,0.6973404195163398,1.9997531309755305,1.723021107067082,0.13362759075171005,0.03411241563142997,0.49965449639233406,1.9716375201022047,1.8545487858558876,0.2611406422086282,0.0010318197751622016,0.3253328476862173,1.8981500502020694,1.1691737365924746,0.42315567812866495,0.014599323140775389,1.1139286040979872,1.782722312846634,1.376955540878023,0.6121071988085831,0.07418137377364209,0.8978391651079899,1.6307443541371693,1.5671349231633447,0.05006291251033368,0.17699571147290205,0.6865202572089428,1.9994357722276637,1.7308312135027717,0.13936335979118397,0.3182412889966426,0.489839687582568,1.96888520933325,1.860400403863647,0.2688523377791997,0.0005799111115570854,0.3169817074478405,1.893091310090107,1.1803720178156645,0.43248319272414315,0.01659934934629037,0.17601814168190877,1.7755933677433022,1.38746533128216,0.6226149721829494,0.07853994106183992,0.8865321254348423,1.6218780992688733,1.5764654546185946,0.05367779293986208,0.18350929095933,0.6757406443787368,1.4391234360941243,1.7385467848869827,0.1452104545753493,0.3266057207408868,0.48009086942906576,1.9660075705659155,1.8661407266845438,0.2766586093347728,0.00025728021798532286,0.30871891752654734,1.8879170461315777,1.9532891174041929,0.4418841171981266,0.018726581162918254,0.16962722155587773,1.7683640974792605,1.397925001967322,0.6331715613609827,0.08301770177322254,0.8752397631470676,1.6129314027376567,1.5857214186628996,1.7908058484394167,0.19012848579138808,0.6650029753986428,1.428877090754273,1.7461668231890823,0.15116811876622238,0.33505725790931007,0.4704093029685875,1.9630049760307848,1.8717690117918449,1.27053642523647,0.51103638340579,0.3005455467372108,1.8826279276319258,1.956662829331703,1.4710370811856825,0.020980743427303494,0.16334371245978996,1.7610354371807375,1.4083331999459945,1.649542057056888,0.08761407669697963,0.06521061559400754,1.6039054218236166,1.5949016180115505,1.79771583427114,0.19685243975780253,0.6543086392160277,1.4185752689691036,1.7536903427359087,1.0687534111115673,0.34359480727205793,0.4607962405387005,1.2136992075809456,1.8772845311512074,1.2814679726962381,0.5209888563576316,0.29246265232809,1.8772246387533489,1.9599127942597034,1.4810390266316857,0.023361544557283342,0.15716842718303503,1.75360833483034,1.997716699438299,1.6581473468303474,0.09232847127922239,0.0612313023084321,1.5948013240625043,1.6040048651802112,1.8045226333395377,0.20368028309641406,0.6436590191730407,1.408219303307935,1.761116370339269,1.9133297045950401,0.3522172644733589,0.45125292561578445,1.2025749591060768,1.882686571314851,1.2923631114903706,0.5310032907340628,0.28447127984407283,1.871707878426302,1.963038591796186,1.4909787483407904,0.7316897192915137,0.15110216451595038,1.7460837511444274,1.9984202912263553,1.666667503412772,0.09716027569989072,0.0573734213666367,1.5856202870947036,1.6130299826385253,1.8112253651662065,0.21061113260668385,0.007661834158541048,1.3978105333437487,1.7684439454218257,1.9179020190146376,0.3609235141743764,0.4417805926541851,1.1914245069964515,1.8879744335138469,1.3032204323023415,0.5410783911401256,0.27657246299143123,1.8660783602590874,1.9660398176105387,1.5008549605823298,0.7426632006792451,0.14514570914649505,1.7384626594488415,1.9989947345709886,1.675101424698195,0.10210886495163529,0.05363747179625833,1.5763634985128985,1.621975802962431,1.8178231627341295,0.21764409176393829,0.006320845339556125,1.3873503054799081,1.925596029453181,1.9223556002534172,0.3697124301974809,0.4323804669265341,1.1802492935940831,1.822669853961183,1.3140385307074864,0.5512128543335418,0.26876722350410864,0.9647313099781293,1.6813280554952934,1.5106663858407638,0.7536699692981754,0.13929983155874892,1.730746045553004,1.508170770445795,1.6834480197354247,0.10717359892066358,0.0500239368527714,1.5670321557084548,1.311283800116351,1.8243151725998286,0.22477825083533642,0.005108391684784053,1.3768399727759997,1.921231280647003,1.9266898722282502,0.37858287567192384,0.4230537643652561,1.1690507644439276,1.8161507887179575,1.985791600841833,0.5614053693932918,0.261056571011556,0.9533675140498347,1.6729590899198772,1.5204117549809282,0.7647086013921502,0.13356528793324796,1.722934907622399,1.4983427041094601,1.6917062088691641,0.9789990667439709,0.04653328395697798,1.557627465716535,1.3004555671700466,1.8307005550037596,0.23201268699754707,0.004024630028479748,1.366280894772811,1.9167473680107492,1.9309042742889941,0.3875337031808954,0.008024322212191404,1.1578303681068975,1.8095261520987416,1.9876382256549616,0.571654617889185,0.25344150290813305,0.9420097501633828,1.664503075213234,1.5300898074122022,0.7757776690833862,0.12794282004917013,0.7288970612428639,1.4884501757573863,1.6998749238796642,0.9903710693311534,0.04316596463454514,1.5481506450599642,1.289588469459916,1.8369784839789371,0.23934646445611818,0.0030697005582296377,1.3556744373164686,1.0772040585114941,1.934998261291013,0.3965637549099459,0.009526374249353653,1.1465895559724877,1.8027968010187194,1.989357096714857,0.5819592740524038,0.24592300422409274,0.930659487477143,1.6559611051844003,1.9975166347766575,0.7868757405571705,0.12243315518838449,0.02274244606841891,1.4784944650156486,1.7079531081209038,1.0017443174473166,0.03992241445759903,1.5386029195918698,1.2786839126752927,1.8431481474577756,1.216531441199147,0.0022437267968182795,0.3414096874288872,1.0658598579357983,1.938971303665694,0.40567186279675194,0.01115654680664302,0.19512797937825865,1.7959636059381818,1.9909479916807635,0.5923180049469934,0.06624467893610819,0.08643080166815453,1.6473342847609735,1.996651093454834,0.7980013802470705,0.11703700604137501,0.020393908292879237,1.4684768596831395,1.7159397166572687,1.0131173399311635,0.03680305298838238,0.00010097660618146875,1.2677433073509459,1.849208747377133,1.2276207686190255,0.0015468155862506938,0.3328939660691227,1.0545071382041804,1.9428228874889482,0.4148568486822093,0.01291462901670204,0.1884306561231599,0.838725688395245,1.99241070476599,0.6027294706422832,0.0703756586652442,0.08186461660885691,1.6386237298461848,1.9956566325402434,0.8091531490206277,0.11175507061505197,0.01817208529169212,1.458398655564989,1.9524090980550608,1.0244886656505825,0.03380828372498268,0.0003272665351190529,1.2567680686846237,1.8551594997815424,1.2386806526589804,0.000979057073931533,0.324464536731503,1.0431473678225343,1.9465525145476887,1.4417271407536156,0.01480039346670392,0.1818383116214105,0.8275118453322972,1.9937450467645275,0.6131923243862087,0.07462688789021532,0.07741719491670906,1.629830567174555,1.9945333806691723,0.8203296043655145,0.17766486552757887,0.016077264463846386,1.4482611563049494,1.9488807039998002,1.0358568236929442,0.030938494049139176,0.0006828669143689181,1.245759616353993,1.8609996349246183,1.2497096626922302,0.0005405247010045189,0.0319528633877445,1.0317820162087747,1.9501597024042754,1.4519019890220255,0.01681359622776868,0.17535179861111916,0.816320314092216,1.994950845075525,0.6237052127795185,0.07899781670268946,0.07308911187808453,0.6094357702704705,1.9932814831373769,0.8315293005761262,1.116809368742069,0.014109716780246306,1.4380656732167638,1.9452295695846007,1.0472203435553662,0.32747633249149444,0.0011677317460324632,1.2347193743330014,1.8530389500927482,1.260706372085631,0.5021676051180962,0.03486749935006661,1.0204125535027646,1.9536439844589193,1.4620183825104447,0.7001057993304195,0.16897195614079663,0.8051525423307149,1.9960279437256148,1.6417558525481666,0.912047937517968,0.06888092734257023,0.598991182865912,1.9919011018812864,0.8427507889405875,1.1280971099621107,0.012269696748660852,1.4278135251145454,1.9414561670938602,1.058577755334928,1.3381646237169806,0.001781798311494165,1.2236487707076806,1.8470487302317813,1.2716693583842182,0.5120634342488968,0.037906977887455784,1.0090404503761476,1.9570049100100402,1.4720750126352198,0.7109748698543413,0.16269960946082263,0.794009974630153,1.996976203389089,1.650436519269205,0.9233827042596129,0.0647931856505477,0.5885984670679174,1.9903924154570585,0.8539926179281474,1.1393682814644652,0.010557442380801918,1.4175060381421845,1.9375609846276927,1.0699275899188068,1.3488458781842192,0.0025249871795347545,1.2125492374914206,1.8409489422600958,1.2825972034952018,0.5220223793324776,0.041070905834904026,0.9976671778421137,1.960242044312563,1.482070578543255,0.7218813265832477,0.12439524728377405,0.7828940523126737,1.9977955014059212,1.6590330502162138,0.9347273816616991,0.06082641556278168,0.5782589672031995,1.988755619017481,0.8652533333769387,1.1506214252917295,0.008973175161537617,0.39331762002581416,1.9335445260387911,1.0812683791743105,1.3594820084662245,0.003397202216605777,1.201422210439735,1.8347403752022422,1.2934884938714029,0.5320431521515749,0.04435887392952542,0.9862942070651183,1.6969569529356656,1.4920037872802814,0.7328237587366063,0.1299454325526691,0.7718062132537662,1.9984857317976323,1.973365637679481,0.9460805022586308,0.05698113019202311,0.5679740207148423,1.9869909242867294,1.901388232486485,1.1618550858184304,0.007517100020242085,0.3843158348630866,1.9294073108672527,1.9183684297813435,1.3700716387499423,0.004398330599264755,1.1902691288645408,1.8284238321536488,1.981939427456571,1.5610072223119134,0.047770456863496236,0.9749230091705844,1.6887560410814906,1.9996575053405377,0.7438007508803638,0.13560816180135538,0.7607478916962717,1.9990468052810004,1.970695295083066,0.9574405974926615,0.2638097512283073,0.5577449579892984,1.9850985595329775,1.896405224203391,1.173067809939314,0.006189405304287132,0.3753936901606607,1.925149874273374,1.922809690386543,1.3806133992372231,0.005528242828768848,0.22220921432077356,1.822000130176739,1.984027669159731,1.570385758151759,0.05130521333906901,0.9635550550546073,1.6804660367164905,1.9992952150195222,0.7548108831100357,0.14138270254004448,0.7497205180648605,1.5071567097440726,1.9678993903486424,0.9688061979038557,0.2715544266510054,0.5475731021843004,1.9830787695388736,1.8913062634097169,1.1842581472573082,0.00499026275467962,0.36655234002278514,1.9207727669684274,1.7730924484091728,1.391105926322009,0.006786792747826675,0.2151112280237354,1.8154701001952418,1.9859886241451892,1.579690513006319,0.05496268612565569,0.9521918151936906,1.6720880121758024,1.9988036630812558,1.7412057083886805,0.14726830781582023,0.7387255187810031,1.4973219132354574,1.964978285134268,0.9801758333201679,0.2793933285359892,0.5374597690577068,1.9809318155698747,1.8860920096702318,1.1954246502711365,0.44516800114280464,0.35779292810270724,1.9162765551434253,1.7658285324043224,1.4015478627667184,0.008173817559503527,0.20811476927381523,1.8088345868867088,1.9878220387579604,1.5889202832796565,0.05874240211897219,0.09541470599041213,0.6612815996004511,1.9981829131093503,1.748792316540996,0.1532642163092598,0.7277643160784572,0.4670608342886331,1.961932357293033,0.9915480330476139,0.2873254428994829,0.527406266797304,0.2977263462111259,1.8807631374631693,1.2065658745625565,0.4546659211321883,0.3491165874547376,1.0760305064337046,1.75846555434739,1.4119378578778115,0.009689137848279517,0.20122074308242444,0.8600489802157378,1.6007504502975478,1.5980738750752983,0.06264387240223523,0.09062491964239472,0.6506026461954149,1.9974330453995415,1.7562820663231657,0.15936965243291212,0.7168383278192991,0.4574718693177334,1.9587620008241804,1.8791746974081138,0.29534974370041744,0.51741389585159,0.28967513868067596,1.8753203360929804,1.217680378983198,0.4642343816024198,0.3405244403876865,1.064685356134335,1.75100446666008,1.4222745676805033,0.658137281568643,0.19443004121103802,0.8487968088434006,1.5916194813430773,1.6071501043506702,0.0666665923094053,0.08595276349194836,0.6399688883105183,1.9965541569493048,1.7636739889152107,0.16558382643162217,0.020158092712868614,0.44795308187047433,1.955467625822143,1.88453713801962,0.30346519297315133,0.507483948761557,0.2817158136479778,1.869764309601171,1.228766725840981,0.47387214484650675,0.33201759831969024,0.14901974589386457,1.7434462344548496,1.4325566550926123,0.6688473110798749,0.18774354205584265,0.8375641960246605,1.5824119847621296,1.616147797070255,0.07081004149046655,0.08139884189547442,0.6293817014519392,1.3941812611566156,1.7709671281513706,0.17190593448468816,0.017949399879314876,0.43850570322850446,1.9520496584234965,1.8897851612905243,0.31167074096173464,0.4976177099934973,0.27384940067387675,1.8640957766752302,1.9670535361806076,0.4835779641929504,0.3235971616344463,0.14310163082123095,1.7357918354100705,1.4427827900975152,0.6796001761130661,0.18116211053411346,0.8263525947292477,1.5731291515700137,1.625065789357457,0.8905838683597996,0.2201118591720801,0.6188424551017634,1.3837034676077975,1.7781605406437873,0.1783351588098382,0.37278581668990396,0.42913095543654456,1.9485085407518363,1.8949180883744106,0.31996532625569774,0.5547483441898422,0.2660769173007841,1.8583154705556686,1.9698862892486106,0.4933505841670053,0.03224869113650397,0.13729435793752687,1.7280422596435625,1.4529516499161885,0.6903944857551978,0.10896072054463213,0.8151634552089935,1.5637721825270376,1.6339029276451542,0.9018958135497811,0.22728097085652554,0.6083525125408387,1.3731760409475402,1.7852532959045344,0.1848706677690123,0.38168432637203764,0.41983005114431293,1.9448447308605887,1.8999352553128745,0.32834787592734793,0.5649607245577875,0.2583993689210562,1.8524241389411706,1.9725935848257605,0.5031887406530793,0.035176264591237016,0.13159867842966244,1.7201985095845191,1.4630619191783127,0.7012288437322755,0.11418092178570405,0.04534910039102791,1.5543422879831896,1.642658068824914,0.9132204487893184,0.2345500358979833,0.5979132306724302,1.3626003429277815,1.792244476465979,0.19151161597593724,0.3906628169074201,0.41060419344966537,1.153926310234731,1.9048360131214095,0.3368173056705551,0.5752293784667906,0.25081774864694395,1.8464225438918764,1.9751750727158401,0.5130911610582499,0.038228640681393866,0.12601532904963375,1.7122615998438409,1.9999770827312586,0.7121018485899411,0.11951570618990981,0.042024743558711,1.5448406877215737,1.6513300803948576,0.9245563092053254,0.2419181140226594,0.5875259598467019,1.3519777415444945,1.7991331779994582,1.1405337096335302,0.39972012690331205,0.4014545757429717,1.1426787437128312,1.9096197278733533,0.34537251994101037,0.5855529776378892,0.24333303718213029,1.8403114617308098,1.9776304189962057,0.5230565644768777,0.7907389631409928,0.12054503201922251,1.7042325570828922,1.9999894049992815,1.710738972313194,0.1249643836880393,0.038824303492003054,1.5352686108006277,1.6599178406061532,1.845266673752059,0.24938425214914184,0.001986905733411426,1.3413096108607316,1.8059185094322556,1.9403235647620467,0.4088550847714576,0.3923823815527472,1.1314127212983358,1.914285780781889,1.3605800902198397,0.5959301866847984,0.23594620269487443,0.9153793463268027,1.9799593060609824,1.5525375264370502,0.801873846293192,0.11518849493657424,1.6961124198807005,1.9998723758546473,1.7186935148531435,0.13052624947849378,0.03574819417673414,1.525627295395142,1.973095123852889,1.851289188681993,0.05659014543502727,0.5669128189112738,1.3305973308288885,1.9008779481494558,1.9441328230302513,0.007373740824892061,0.3833887843925595,1.1201297002825994,1.7865931223006273,1.992888965425125,0.004509291306883378,0.22865820069277598,0.9040524594512096,1.6355773226903818,0.5431711561635497,0.04813055602165983,0.1099464106846687,0.6924556119698945,1.454882425588397,0.7449386560088581,0.1362005841184536,0.032796813516205336,0.49521994376531275,1.2529462107515856,0.9586165721393852,0.2646068327851321,0.0008120084842251352,0.32155562709583463,1.8191755646745285,1.1742269404612813,0.42735320770449214,0.015485567044015602,0.17957213975631303,1.923262502098976,1.3817015585494379,0.6168400583616085,0.07613228857639254,0.07589958262122432,1.9842365139484945,1.5713521332608043,0.8242190534625797,0.17992019670860782,0.015379078588732553,1.9992503406095983,1.734322687996975,1.0398063651022702,0.3220027820798794,1.5061419464493464,1.967602892208103,1.8630031038792219,0.04929135454391964,0.49574531630615726,1.3090458709055062,1.890771986899158,1.9513844840009018,0.0048735122680952925,0.6930346691235483,1.0975185024181129,1.7723453422548596,1.9953397465681233,0.00692437646057098,0.9046581614018973,0.8814373825031763,1.6178530421950374,0.5635221085359893,0.05534817938996661,1.120733763001606,0.6708926959346481,1.4345093026325393,0.7669971854541147,0.14788370952976182,1.3311715468335232,0.47571609663715886,1.2308755944171144,0.9813526273599094,0.28020990172797255,0.0001540855068514757,0.3050216060080362,1.0164608544836862,1.1965788322252877,0.44614761488129917,0.019727508108746683,0.1667800220097374,0.8012774538577229,1.4026255366299978,0.6379481748467011,0.08507601080972149,1.8081419011501692,0.5953736571606689,1.5898711256901208,0.8466552087094128,0.193148061540646,1.6627421077924858,0.40836440601791657,1.7495719266939094,1.0625228740926118,0.3388970974125265,1.4863947224946221,1.961610028245024,1.874270506102928,1.2754709537552198,0.5155171804371131,1.2873345123790334,1.8802051452107555,1.95814390396685,1.475555564252446,0.7147608095221756,1.0748568490265347,1.757697955053792,0.3984425501546338,1.6534334983150205,0.9273240481030918,0.8588836491895391,1.599809087995357,0.5840988921253949,1.800798517884724,1.143280983382504,0.649500058175674,1.4139113669965535,0.7891762692509077,0.16000771513829615,1.3525472295471426,0.45648351106485385,1.2086855243428902,1.004098330626621,0.29618538603716227,1.5453508310851893,0.2888471628497269,0.9937148437269943,1.2188290152022525,0.4652285821808455,0.024476636671702856,0.15441900761412175,0.7790376565368671,1.4233411985124247,0.6592436149188028,0.09449310959189983,0.05947634031875826,0.5746785891089207,1.608084922102015,0.8691707036925985,0.20679338704763972,1.6455382412800272,0.3901804499559589,1.7644333410732338,1.0852070340979976,0.35613346368509724,1.466395840634068,0.23415861609581912,1.8850855656622927,1.2972645128645874,0.5355397132660278,1.2654744885847982,1.8691828903089691,1.9644075856420549,1.4954408442976055,0.7366345310807465,1.0521564651204343,1.7426585391735423,1.9986953576488338,1.670481930663893,0.9500275369348455,0.836402928685624,1.5814547959322054,0.6048908606191582,1.8142140041434556,1.1657540709849081,0.6282887671239601,1.393099275936999,0.8114644320654734,1.9199253113914247,1.3737405062982977,0.4375321378804792,1.1863874815469149,1.0268419134400149,0.31252502008657523,1.564274649770805,0.2730406661872271,0.9709720848749641,1.2409659772720945,0.48458623721749516,1.7284592654285462,0.14249549208909806,0.7569121838952307,1.443837826029259,0.680715360436465,0.10437871256874931,0.051992589767068,0.5542035799735614,1.625984098780212,0.8917538890211092,0.22084911321457934,0.005758108212625457,0.3723120111144824,1.7788992419223653,1.1078471084610613,0.37370296289819804,1.4461556481771742,0.21973113719598147,0.8899790504510572,1.318904268979545,0.5558025552465324,1.2434771097767054,0.10358591763799685,0.6790238221104452,1.5150697860241682,0.7586445164582096,1.029429095751333,1.7272348759236742,0.48305698768512484,1.6871834594162332,0.9727568812391661,0.8140068523903379,1.5627996624135205,0.3112294696143004,1.8272082206356712,1.188141398359132,0.6072697973827224,1.3720837975132514,1.9192237608477345,1.9286054340340328,1.394740411804271,0.4188717824184013,1.163993002911672,1.8131761062693315,1.9866402268044943,1.5829065159123106,0.257610294213401,0.9482443449036765,1.6691561514304967,0.5042105644489263,1.7438530533418213,0.13101564459483284,0.7349124835284659,1.493889092665052,0.7023523020387887,1.8700644192957214,0.04499933294102254,0.5339592234096668,1.2955592498637247,0.9143930802813115,0.23530796768745155,0.0035780011432303693,0.3547683345236884,1.0834278891697207,1.1304313833341022,0.3915965046913171,0.00868587136574106,0.20570736503660847,0.8674007562890738,1.340379025811451,0.5762952224976493,1.221353757275375,0.09373690792064548,0.6575655150019923,1.5344322335275984,0.7807793778113765,1.0066864999328795,0.024085567146237663,0.46372069077662914,1.703529443294586,0.9955003209805846,0.7917070079081481,1.5438533395009246,0.2949181160668243,1.839774444226519,1.210431382427351,0.5864540240492088,1.3508758050161704,0.15904024339694112,1.9368051014248393,1.4155360808315431,0.4005120994420468,1.1415136752150088,1.7997278435497353,1.9900904440196507,1.6012367894864938,0.2425640305163046,0.9255433830185277,1.6520808600423025,0.5240914103581165,1.7588619758505355,0.11998540474013775,0.7130499379583541,1.473984125219371,0.7241432448933461,1.8810511298704626,0.03850018811254463,0.513955993733964,1.2737540943210295,0.9370765640824165,0.25016246953591537,0.0019134372365345875,0.33755849718360853,1.0607407652085152,1.1529481737397622,0.4098048310461265,0.011933617325369905,0.19209455543888843,0.844891068233291,1.3616776724413695,0.5970071122280921,1.1991158775795105,0.08435679365247539,0.6362843815786003,1.5535181687859783,0.8030276626869282,0.983940444556802,0.019376164662751938,0.4446618617798057,1.7195114249784222,1.0182460888307314,0.7695149330537208,1.5246256299158019,0.27897156793795774,1.8519061732222784,1.2326124904766218,0.565852217087983,1.3294862713423186,0.14695062063431208,1.9445200711018504,1.436116753817406,0.3824625881485819,1.1189611291352015,1.7858658061219979,1.9930283939831268,1.619255986512449,0.22790965994852275,0.9028809445700818,1.6346681856684784,1.9951659835721332,1.773478267422226,0.10941047950934912,0.6913358587435532,1.4538339210413964,0.7460769144883236,1.8915819895240942,0.03249851790277647,0.4942042405054783,1.251807299942831,0.9597926041169227,1.9680521481801263,0.0007652777285823698,0.32069140336771507,1.0380222143155118,1.1753858296167696,0.42831852107652857,0.01569258329867307,0.17889975159428195,0.822461632670265,1.3827891890687973,0.6179275082220914,0.07658338495207495,0.0754504280520848,0.615191432579538,1.572317716843278,0.8253778599468503,0.9612026983047847,0.015174131460622853,0.42589036162605687,1.7351211354799112,1.0409824162566872,0.7474421098823201,0.0008855407253779424,0.26339807588240927,1.8635971307342993,1.254673246125844,0.545475035758606,1.3079262633166473,0.13530236084387892,1.9517463513829554,1.4564717824368987,0.36473258725408064,1.0963470332333078,0.04758481006199433,1.9954525566160624,1.636954783958534,0.2136547645993293,0.8802687549770931,1.6169271375292418,1.9926748291765093,1.7876943656694784,0.0992963403095668,0.6697814806270597,1.4334489057339386,1.9435428786063782,1.9016515496487987,0.02699742754227763,0.4747141831707291,1.2297302218776478,0.9825294472329157,1.9735049591694438,1.5271454112322915,0.3041757800159005,1.0152839909417282,1.1977327418476138,1.9998993072031568,1.6973931810725107,0.16612978042041326,0.8001240544643613,1.4037026527132461,0.6390455863839049,1.835075282704948,0.06702241922316343,0.5942975813785061,1.5908211509186014,0.8478184057242314,1.933762473972379,0.0114816416482999,0.40741590258445015,1.7503504984222462,1.0636975396099546,0.3397806615581239,0.002100995472879452,0.24820569753776411,1.8748412679266286,1.2766022352635749,0.5165471666993943,0.0393185219901272,0.1241014907700323,1.958480203431201,1.4765906351121927,0.7158891213728313,1.0736830879159187,0.04089848723948575,1.997361677670286,1.6543240245660558,0.9284979975744726,0.8577185136598386,0.002481957809684854,1.9896700703827968,1.8015029152626627,1.144445751399782,0.6483979557234163,1.4128396263897702,1.9357645510268044,1.911254600310553,1.353648425775254,0.4554959057762462,1.20753428268205,1.8381623069014683,1.9784540841440714,1.5463370337552245,0.28802017221920706,0.992537859716615,1.2199773482650396,1.9999634007583147,1.7135137338849713,0.15379124902886154,0.7778898909534635,1.4244072428657317,1.9747781450526225,1.8473719959369908,0.05907712777028662,0.5736136383371203,1.609018897438769,0.8703376894063433,1.9416611368430141,0.00830060569933555,0.3892480432366453,1.7651916342183185,1.086379706212905,1.9919782043493064,0.003832757577543533,0.23340229335550722,1.8856327671456454,1.2983881119536271,0.5365823893488755,0.04588221529791714,0.11335380568022857,1.9647181431892438,1.49646290246157,0.7377701720594289,0.13248542555135612,0.034708398169147836,1.9987547693772543,1.6713547215871833,0.9512031125986884,0.8352418879869052,0.0011385188997369289,1.9861532618363693,1.8148967717355418,1.166914686321943,0.6271963477486704,0.014211756399864162,1.9275020641083849,1.9203861729447174,1.374831964888186,0.4365593517511397,1.18523096641069,1.8255399690250014,1.98289696245446,1.565245984556131,0.27223293879864463,0.9697955893610997,1.6850282272671468,1.99951011884926,1.7292651186868715,0.14189054130667877,0.755770645969271,1.444892247087246,1.969449869503689,1.859230283643233,0.05161866454276198,0.5531503052116895,1.62690154099163,1.894119916279192,1.9490725895143197,0.005632669463917495,0.3713961835313371,1.7796368641475708,1.1090171804395477,1.9945967347063875,0.006079931035354202,0.21899552253407029,1.895966044930081,1.3200196043053918,1.9936769109264905,0.05293956380488685,0.1030648663665511,1.9704569431819827,1.5160783026851798,0.7597868989906352,0.14402339717588852,0.029017745568403974,1.9996311109591183,1.6880380634346421,0.9739334748592053,0.27507815483715226,0.0003118853269409305,1.9821262231142769,1.8278690051817752,1.1892972605200471,0.6061876262960688,0.01828774256891985,1.9187596928155843,1.9290415429267433,1.395821568041373,0.41791431876242613,0.08210591160673086,1.8124905013912087,1.9868312953802496,1.5838624802497483,0.2568222479803838,0.947068946598518,1.6682810249046978,1.9985396960015143,1.7446391857999157,0.13043381461340187,0.7337777638852808,1.4928653096460587,1.9636200060207518,1.8706440104120166,0.04465088850769938,0.5329181696161873,1.6444598291975452,1.8837028451066025,1.955992997342185,0.003479213317314711,0.3538695599207746,1.7936787143289243,1.7625200474912788,1.9967006662822202,0.008841353171347488,0.20499283905600485,1.9058357548998717,1.341485520305853,1.990866120469446,0.060486916078436925,0.09323999626858737,1.975693634186436,1.535426686884784,1.938761811496792,0.156004246301643,0.02382947374904476,1.9999902490016508,1.70436541824078,0.9966773237938695,0.2909330397133023,2.484786878698131e-6,1.9775910377838049,1.8404129038404171,1.2115818933755367,0.458972623411562,0.022871661162829016,0.15840394767152588,1.9372162320166684,1.416606375331676,0.39957045364577026,0.09136909738218024,0.06202334635379281,1.9902550473196157,1.6021768887654482,0.24179607316956098,0.20229621789021768,0.00944276677173539,1.9970526343064245,1.7596279807678672,0.11942699659526945,0.7119226236955332,0.003117526464032072,1.9572915709425327,1.8816072708450227,0.03817740475340303,0.5129276995442804,0.04334299063181446,1.8728285510302882,1.9624187797463506,0.0018413514456790958,0.3366772405818731,1.059565884786215,1.74760768351274,1.9982889105143884,0.012115595241173005,0.19140148783133382,0.8437284089945322,1.5874763172526856,1.9875426614300693,0.06852036716076271,0.0838842787191113,0.6351882353863317,1.5544980443147391,1.9306818423642897,0.16842177410436932,0.01914626709385736,0.44368341458504235,1.7203283383236452,1.8303616421229847,0.30715479186425276,0.0002104773616572464,0.2781565095862104,1.8525219775685413,1.2337570549441559,0.47824110440800705,0.02796114048777898,0.14633701131970567,1.944906010676132,1.4371756328161882,0.6736916171468029,0.10110240369872492,0.054380400166425424,1.9931664468424755,1.6201797343308173,0.2271621888248837,0.21621884198795482,0.006580707914469741,1.9950497031613854,1.7742237484721404,0.10887578211829096,0.367934945762984,0.005170002442560162,1.9504678385659047,1.8921143926126924,0.032201562624118996,0.4931892379532461,0.05021415845034083,1.8615026603491134,1.9683466120629824,0.0007199312695717053,0.31982812072438915,0.13960978135486934,1.732308511505014,1.9993606456542197,0.015900963170318083,0.1782285009490756,0.82130344218332,1.5689182783591855,1.9837082533474577,0.07703576058925787,0.07500255431399527,0.6141053216397682,1.3789616772114572,1.9221203436579426,0.18126955582471482,0.014970548667741501,0.42492704757550304,1.7359185645577724,1.817472842945429,0.32373501824627515,0.000935755437082908,0.2626025419050222,1.8641899611992065,1.6746524003476904,0.4977795405354193,0.03355354727566573,0.13471175541810476,1.952106900256715,1.4575186980762658,0.6952758907087004,0.11130079459817888,0.04722671226497288,1.9955639876070188,1.6378617023743676,0.9070017236291903,0.2305469900680298,0.004232638636233688,1.9925319388717555,1.788418937144254,0.0987856303217548,0.3857237797894445,0.007737197891229619,1.9431523394517896,1.9021599393890591,0.026726453987102716,0.569584984727743,0.05757674014491709,1.849731033015496,1.9737734272648326,0.00011553300551225831,0.3033309179885898,0.15142394410894433,1.7166304471740297,1.9999153171919537,0.020195498430612524,0.16548069403888033,0.28489649434136755,1.5500658843341457,1.9793648801228825,0.08602869054704487,0.06659941840771277,0.5932220676389537,1.3578152901882237,1.913081745049241,0.194540944092359,0.011304478964028863,0.4064682200914015,1.1488560525737483,1.804161087896409,0.34066514034308104,0.0021779437583406835,0.24743009953956252,1.875410817783017,1.6576890983176287,0.5175778227163526,0.03964598804653208,0.1235341948090305,1.9588151750584704,1.4805054735508634,0.717017826818429,0.1219589934901969,0.040565983927497995,1.997446429139079,1.655213644344844,0.9296720461016398,0.2452732488268573,0.0023997738149235115,1.98950064411468,1.8022062022730763,1.1456103193081542,0.40383043689257503,0.010817784557490384,1.9353488585984655,1.9117387136644703,0.021754911632904994,0.5902265266204472,0.06542692635700131,1.8375197596035033,1.9786964175481037,2.846936577816095e-5,0.7957575137585671,0.163677155362698,1.7005816022624813,1.9999526381436428,0.02499697905356002,0.15316466274466123,0.30098055123641854,1.5309288893006698,1.974514788993329,0.09549450414251981,0.05867921873572801,0.47092555597160357,1.3364837715374493,1.9035707230584926,1.9420566225225473,0.008149954786655589,0.38831648262671714,1.126326112902608,1.790433264403447,1.9921263021200195,0.003936399624149045,0.2326470326265524,1.8861787417116087,1.6403855116308566,1.9958673727606817,0.046235310605638125,0.11281011269975283,1.9650273642575786,1.46043413682289,1.9531051403572783,0.1330714858823535,0.03440166137754552,1.9988127974739485,1.6722265824446347,1.865836442146061,0.2603899989806159,0.001083061764534765,1.9859573872650926,1.8155784104048318,1.7381364018133558,0.42224554878937937,0.014410168563051329,1.9270614334832303,1.920845759434753,1.375922904202057,0.6110800830137331,0.07376065544420485,1.8248751581576208,1.9831130357851894,1.56621653627408,0.8180757311114615,0.17636307537324003,1.6841702803528604,1.9994725891996357,1.7300699616527948,0.14128677931204603,0.3174262768800693,1.5115171946328296,1.969160489368789,1.8598318346835363,0.05124605316500186,0.49036313301639933,1.3149781580674376,1.8935921986352182,1.9494427584323675,0.005508608268767201,0.3704812267887727,1.1037308128080205,1.776296475165549,1.994718235990229,0.006210213219289273,0.21826098984203424,0.8876396243271449,1.622750593066234,1.9935440709179884,0.053318105674389105,0.10254505767030497,1.9707402537021337,1.4401245740507456,1.9459750923582326,0.1446325222333098,0.028736934001085568,1.9996623856603015,1.2369463740882258,1.8542325947181963,0.2758894192074226,0.0002831837445091967,1.9819040015842466,1.8285286428339114,1.7226006114811208,0.4409595876040783,0.018512491228543704,1.9182943519734326,1.9294763647654212,1.5572258667733279,0.6321348643942933,0.08257361558176324,1.811803770923833,1.9870209968425452,1.58481763572932,0.8404880750623858,0.1894751405165923,1.667404972571227,1.998475418734568,1.7454242866670395,1.056289899458984,0.33422516234596045,1.4918408438327497,1.963304751533907,1.8712223953756983,0.044303767573778186,0.5100643933224381,1.2933095766621756,1.8831513346120792,1.9563376579754217,0.00338180602826188,0.7087817952407405,1.0810818429717315,1.761758034478307,1.9967955082151057,0.008998208085339798,0.20427941444398945,0.865067888728009,1.6047934668318784,1.9907067149363962,0.060890708654276704,0.09274434080267968,0.6553547623178788,1.4195872932884843,1.9383556021434303,0.15663612092759427,0.023574732696342693,1.999994754125968,1.214787953439076,1.8421867721291383,0.29176349019404213,5.536072553713467e-7,1.9773425842711958,0.9999588148813284,1.7066909516387394,0.4599628707977791,0.023122630035191438,1.9090521501079536,1.9376260642296037,1.5381952916300992,0.6533799771361388,0.09186124699344977,1.7983123609647003,1.9904182787630025,1.3445679128523391,0.8629829495900787,0.20300656668367123,1.6502943531939487,1.9969616426788546,1.760392933329399,1.0789841087822318,0.3513685159848179,1.4719100173341555,1.956950605214649,1.8821621904789416,1.2912970038070555,0.5300191435679557,1.271489238524349,1.872253533033657,1.9627377537692947,0.0017706484607095119,0.7306161294608168,1.0583909218439103,1.746825464449524,1.9983570440256329,0.012298941729368407,0.9437923403684906,0.8425659662476869,1.5865234238443522,1.9873567728480024,0.06894920152292239,0.0834130329329047,0.6340925945885273,1.3988329204101735,1.9302506119944427,0.16907607137045733,0.018917728357365937,0.44270573808725167,1.1925184027055313,1.8297052068200426,0.30800399878503326,0.00023531758402373093,1.9722754953777164,0.9772139914995521,1.6904156538551276,0.4792455661781674,0.028238199722990687,1.899339609750287,0.7629736021577731,1.5188862572566295,0.6748044291368998,0.10161874431077855,1.78440790866019,1.993303123811919,1.3231268019910678,0.8855487159724206,0.2169503527903479,1.6328472751596803,1.9949320442517502,1.112278526662052,1.1016374521698706,0.36884746792146406,0.005290222130818201,1.9501013380107406,1.8926455598045377,1.3129800973032268,0.5502170592769124,0.05058310411721845,1.8609044323614659,1.9686397344402606,1.5097077357501947,0.7525898413870831,0.14021022460969623,1.731506491107317,1.9994020354919257,0.016110706370270123,0.9665157578772487,0.26998633037149333,1.567949916921593,1.983495977894085,0.07748941486123961,1.1820052639589869,0.43385135985305856,1.3778721936121252,1.9216643153877893,0.18194593720119778,0.014768330492123338,0.6241534255312757,1.1701492440284422,1.8167943566829097,0.32460254223219076,0.0009873542092474485,0.8320061286022427,0.9544809574709826,1.6737831388782245,0.49879769698662735,0.03385655352482975,0.13412234872529694,0.7409382409310793,1.4993087540391823,0.6963971355050782,0.1118410590592751,0.04686993439891829,0.539492745184457,1.3015185071318092,0.9081736988082434,0.23129928439976954,0.004125149796551764,1.9923876735561161,1.0896484671776223,1.1242382089088803,0.3866529746440409,0.00788401740702216,1.94276049369468,0.8735921771758612,1.3345012566495993,0.5706476901608197,0.05797101209076416,1.8491099045566433,1.974040546336568,1.5291443395917172,0.7746915619440314,0.15204725745112713,1.7158090404027142,1.9999299419412515,1.6990783495677517,0.9892564999453847,0.2857197426646786,1.5490825558920789,1.979126327628335,0.08650693001066867,1.20432311944817,0.4527464597506703,1.356715957857014,1.9126011548252544,0.19523905962330024,1.4098486090751294,0.6453278821320105,1.147692051085251,1.8034609017193053,0.34155053254207923,0.002256274383387491,0.8544711735228491,0.9317714747401318,1.6568020122781444,0.5186091470601619,0.039974784535911856,1.070410119942081,0.7190369168078998,1.4794729112682965,0.7181469242953087,0.12252290227052887,0.04023480977396254,0.519422290062546,1.279754208285327,0.9308461920581172,0.24604593745506886,0.0023189718524339042,0.3422488552798242,1.0669720240782654,1.146774685494278,0.40477582368307297,0.010991127937222123,1.9349318703782112,0.8510624953910322,1.355849346918836,0.5913004655256604,0.06584632058772089,1.836876052041832,0.6421077943253303,1.5483071671149022,0.7969098558252053,0.16432301629340362,1.6997412341088118,1.999940490237769,1.715161081559048,1.0120028006402901,0.30182271956336504,1.5299311026227589,1.9742500828833314,1.848619632914966,1.226535259299467,0.47192470556563637,1.3353751592627545,1.9030658195353634,0.20894856084965885,1.4304893637505272,0.6666858441005278,1.1251584431018367,1.7897117405841665,0.35883920091941324,1.614341215745779,0.8770115142433795,0.9090972930662018,1.6394810599947036,0.538669666065438,0.046589727217771326,1.093080289322199,0.6972809614106987,1.4593889918979503,0.7400425422886598,0.13365874721867588,1.3048025610209746,0.49960048315674044,1.2578451661779741,0.9535544651009904,0.26118268212052964,0.0010289884857203058,0.3252868015379181,1.0442609300286632,1.169235221679272,0.42320663837794714,0.014609946119828132,0.18247971727747025,0.8286098730371056,1.377013322728571,0.612164699741107,0.07420495496757051,1.824209204543819,0.6209620976379773,1.5671863035800921,0.819233227409763,0.17703114972763956,1.6833113856186137,0.431013982776843,1.7308737932113214,1.0347428911533547,0.3182869294774747,1.5105054659683144,1.9688697666008004,1.8604321945499478,1.2486301910760966,0.4913761745809617,1.3138608394390405,1.8930632430472025,0.7492522201480291,1.4509073856396646,0.6882162609469,1.1025600788407917,1.7755539870164754,0.3764596023039831,1.632128882052302,0.8996154885177611,0.8864701439438255,1.6218292437916242,0.5589688748022521,1.7838323103275187,1.1157022994818284,0.6756816311489751,1.4390673872355655,0.7620726608149875,0.14524283227989543,1.3263862433143188,0.48003758015894016,1.2358027164254561,1.8536200852405438,0.2767016867292208,1.5218291632942211,0.3086738406268098,1.0215269356217052,1.7217864831201974,0.4419358827283445,0.018738599598576378,0.16959246195012156,0.8062459269751631,1.5562481362961451,0.6332295977692064,0.08304259051968932,0.06928802732067041,0.6000125130388668,1.3647350699889471,0.8416501267102473,0.1901650826367557,1.666527995643729,0.4124570273375563,1.1561902322286135,1.0574650058890807,0.33510385391699005,1.4908156966443762,0.2523376136037312,0.940351891437133,1.2705964829840795,0.5110908027154972,1.2921841297744787,1.8825986006378361,0.7272988955061985,1.4710921105723478,0.7099079929540115,1.0799086505692441,1.760994966158651,0.5269800270801865,1.6495894884148854,0.9222714011762759,0.8639017345332571,1.6038556966197675,1.9905459369210476,1.7977534527324313,1.1382644459195863,0.6542501013952596,1.418518611565602,1.9379480928327406,1.908665297358552,1.3478010551929867,0.46074370280561294,1.2136382636678475,1.8415515606925394,0.2925949218350571,1.5410966485328605,0.29241856799944965,0.9987818032987975,1.7058577000882038,0.4609538663281134,1.709125040525333,0.157134854833056,0.783982228185669,1.5372029097144808,0.6544842607496729,0.09235465470092952,0.06120980964101519,0.5792698797257623,1.3434627411167948,0.8641489553484846,0.20371801959740887,0.009122775323893384,0.39420406334235214,1.1336841397203488,1.0801573885525377,0.3522647918993732,1.4708719820273384,0.23742666446895522,0.9176629861210258,1.2924227697869832,0.5310583897310388,1.2703562456772695,0.11625860463557314,0.7054866648888312,1.4910330950849224,0.7317498169411853,1.0572158780093441,1.7460422107665612,0.5070630212197406,1.6667140008135681,0.9449675301765775,0.8414037416031531,1.5855697178917967,0.33165770140867346,1.8112618419679558,1.1607550551072434,0.6329974607030404,1.3977532967095285,1.9298180928955713,1.9179267718863424,1.3690359167532251,0.44172883364086457,1.1913632756688939,1.8290476220793384,1.9817279349891157,1.560084173395444,0.2765293940428728,0.9760373012640416,1.689563710234666,0.48025074937903134,1.7249785818867884,0.14511334142243892,0.7618302957817105,1.5178797373554218,0.6759176916388967,1.8560191865322666,0.053617316749054345,0.5587449298209907,1.3220127065456235,0.8867180725565205,0.21768294839590607,0.006313844134959501,0.37626453477259336,1.1111088797867632,1.1028082982320022,0.36976086445140555,0.005411819847045751,0.22291026650791956,0.8950166815148498,1.3140977586862337,0.5512686045098741,1.2483884807724186,0.10584319908690532,0.6838268138219099,1.5107200218236616,0.7537304320709951,1.034493502274545,0.030529929228818364,0.48740105819189294,1.6834935591215243,0.9676921326686089,0.8189878054890768,1.5669807686707122,0.3149117669777035,1.8243504888691433,1.183162490529543,0.6119347050696065,1.3767821865249745,1.9212070102836956,1.9267133162423309,1.3900798411965685,0.42300281085152613,1.1689892773826567,1.8161147388687622,1.985802077852402,1.5787819138429289,0.2610145397267124,0.9533051973954316,1.6729129439786956,0.49981654778186146,1.7404570233895251,0.13353414158199406,0.7398015910490726,1.4982886169201457,0.6975188008997534,1.867555543430699,0.04651447695809552,0.5384482828187023,1.30039606440321,0.9093458011994885,0.23205264365628409,0.0040190405988802524,0.3586477234399088,1.088476132740935,1.1254060154736414,0.38758301920311855,1.6430285990058588,0.2087959304236443,0.8724246946897993,1.3356102351639443,0.5717109904000448,1.2262922010584785,0.09589042526015912,0.6623305489910912,1.5301427048829086,0.7758384656962538,1.0117532797948168,0.025203475186611257,0.4680043109862163,1.6999194816892438,0.9904334510702882,0.2865439805210118,1.5480984667747517,0.29852029336231733,1.8370126214433768,1.205475158704869,0.45373195856118964,1.355616131346921,0.16179276949381083,1.935020384317668,1.410921940514346,0.6464286227669718,1.1465278449905645,1.8027596024621662,1.9893661722406502,1.5971801957691065,0.8556357554878484,0.9305972531562197,1.6559140163335166,1.9975122390082825,1.7555523565745825,1.0715841615900046,0.7179075115162334,1.4784396847446644,0.7192764122392674,1.8786430319488763,1.284189853541031,0.518390440090404,1.2786239990191555,0.9320204338172937,1.9607043450808805,1.4835249361290543,0.3413627441838357,1.0657976086394527,1.147938848345091,0.4057220350714399,1.6602812022509463,0.1950909588945854,0.8498987146133526,1.3569490687852452,0.592374970625559,1.8062047915702473,0.08640543266478151,0.6410089924434295,1.549291095075207,0.7980624792441589,0.16497003493491358,0.02038137540792606,0.44888281537110186,1.7159832698363675,1.0131797191508154,0.3026658551149649,0.00010186507877019135,0.28249176141917864,1.849241688374165,1.2276815151836487,0.47292458673237703,1.334266082373797,0.14960567406018743,1.9428436780818474,1.4315514311210773,0.667795780150112,1.1239905999119633,0.0564298394193925,1.9924183741113806,1.6152695000059303,0.8781796752897351,0.9079252175096009,1.6385757224491062,1.9956508225082152,1.770256771201097,1.0942521265884213,0.6961593850573464,1.4583432105553404,1.952390079952504,1.889275915482324,1.3059233540643624,0.498581779451609,1.2567077751381759,0.9547302386819873,1.9667691814000259,1.503309098521742,0.3244185401558535,1.043085041223697,1.170395138484797,1.9991179216047517,1.6771921796992633,0.18180244279627045,0.8274503961014662,1.3781032189571092,0.613249853758757,1.8194529043130512,0.07739312878282967,0.6198731758328915,1.5681552851306935,0.8203909741345449,1.9234482255388652,0.016066124820186767,0.43004646470130914,1.731676612248858,1.0359191681184545,0.3191485264907281,0.0006851739408637592,0.26683446422096235,1.861031362410755,1.249770070521385,0.49238992077100674],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],32:[function(require,module,exports){
module.exports={"expected":[0.0,1.4893256757618758,1.5869843187742858,0.03301563472808622,1.4679531665624277,1.5556727801915762,0.05876261810376693,1.3895382640382172,1.799231239102681,0.016401411560051038,1.063244882713126,1.2598415605388933,0.47510709728341816,0.30131630578238444,1.8910717884987964,0.010486852768968435,1.3798193065293205,1.8055151450208249,0.22996046272931459,1.5250363944186773,1.698563069236116,0.1365547702543768,1.989488781432731,0.6200247421232846,0.7962204313556671,0.09949550656004347,1.6400160235215298,0.02041756433434594,1.042216079569228,1.9591314628784522,0.4931464731161642,0.28640644095273127,1.8525436668994875,1.3005910370326064,0.001839326946497466,1.8178143622139766,0.24356544151746895,0.5486294840332153,0.7958903364477785,0.0996421800764945,1.6402750645531665,1.5901857704315998,0.07381792433516154,0.8584898199759596,1.994734647820146,0.6596252816478934,0.17015499076070562,1.742381202012393,1.4702091094824519,1.817620273718421,0.9997744636628727,0.5489303892219666,0.5301890348040607,0.9786628912835951,1.8295932289945842,1.3407988227828729,0.00531168113062519,0.15855978434915596,1.926352070387603,1.9966765508207214,1.8528959330442745,0.08198504641010984,0.0017986713059113812,1.6239155602347362,0.0906561179987494,0.8166030093429999,1.9981879173416368,0.6998392055104206,0.147220663998205,1.713277483012531,1.3206593193988434,0.040996270596653006,0.27177552571199803,0.5114583370099756,1.9648914589339688,0.2295652676550658,0.024880231083289073,1.4512688839031185,1.7565090462114035,0.18225118534038198,0.6396376098973453,0.25776841623532143,0.8796466549977351,1.8808647307215831,1.5728248131678666,1.1417312200970637,0.10913302706899886,0.4096339890300359,0.8369568097517993,1.9004549624611502,0.12582311849530126,1.1064957963872128,0.09037575909811646,1.8635026756320208,0.9149689338448054,0.47486667863554566,0.1475730585359083,1.0635267965216202,1.506661030546415,1.4129880617682202,0.9580070130393104,0.20741623959731526,1.95495789815193,1.0204396506826536,0.29656724956077296,0.051662641733518644,1.286827501488872,0.18186322448312264,1.9412758420024607,1.9924043782553786,0.3278659746658801,0.06622336703874065,1.2452572256440961,1.6512686477920822,1.925843218271183,0.06848468926930684,0.33252005747936264,1.993155942454766,1.203230824900265,1.68338085942293,1.280817405461184,1.457453119226186,0.30103599541913295,1.9871967434784967,0.5618274238613482,1.7142221318400517,0.9642701307610493,1.4186882830310106,1.5012473049230308,1.9794015740683921,0.6009906999105725,0.4802110352481853,1.9977461273513497,1.37914477803074,1.538088922982217,0.0010389573338869251,1.6125987710702228,1.9031634592439954,1.9997114416153767,0.40458660320764095,1.5739298131116404,3.0247359807944463e-6,1.5779511555945307,1.3342640246265312,0.8734267574887734,0.43977983259018405,0.645491390174761,1.9685731234698691,1.7523951358664358,1.3745883487046802,0.026288827768876977,0.23357625594676723,0.6055060958032852,1.9783964458035024,0.2674942495494962,0.8653655397655016,0.01737323446276795,1.7176564739507096,1.1559694307044492,0.6938662978127164,0.2975265124363763,0.822768124529792,1.9066241294676505,1.6869638513700227,1.1984119075060125,1.9925693938976412,1.8561514899641143,0.9293238523108266,0.2252592657465533,0.15518949391403858,1.2404853814737349,0.0679950019493274,1.8330766857616791,0.9723969156878893,1.9396035703003975,0.17904451478838257,1.2821116051308459,1.8139954657630553,0.0563289886962276,1.015521314775908,0.1736686980340707,1.936316864864028,0.7478024623854406,1.8382828945429823,1.7823248505763711,1.058616847606809,0.15015531399012028,0.006032658500489729,0.7897584741003696,0.3218679114804709,1.9913713356456855,1.189111986859153,0.12822245553762224,1.9025836339147046,0.8321054891568981,0.2908114428447436,0.10690922678968884,1.1465989639667937,0.5049658608639286,0.019176705151442874,1.4055693985189628,0.26107391010659986,1.9763927234037668,0.6142344919262692,0.46796456779311735,0.028491870149798926,0.917656923769318,0.23271061858510933,0.00048634832100591385,1.6011549777103151,0.43195274448072807,1.999953679230074,0.41621615884147256,0.6724978512269593,1.9541539790370104,0.6951505481092168,0.39699736505659555,1.9994388121111952,1.2842423488371275,0.6320650150920598,1.9720539830808566,1.5300746140123127,1.3878994501215944,1.9970652069833168,0.4883326507001883,0.5923164577073965,1.9812716833505049,1.4930221595358921,1.427278061828393,1.9928372782338095,1.7075551790882733,1.170175305673913,1.9886644325046914,0.3078467083971509,0.8086161830833278,1.9126053348367371,1.6764295531966664,0.515166463655712,1.9942184816438562,0.3396087246000905,0.7664759612887471,1.929383984958732,0.16298107570716824,1.0347651006775223,0.06287303386611498,0.3725989244091924,0.724770043226929,1.9444341837569796,0.1873509037609452,1.2958957776774813,0.0486977600243802,0.06119097786908667,1.029916221644985,0.1656454868848387,0.21323208172914843,0.9485377919121024,1.846046435676762,0.07691447244054483,1.0729842646308034,1.9692405336428314,0.24057647627072254,0.9055276164714009,0.3113563560676865,0.09435470457996642,1.1749539420535737,1.704118569603261,0.013982824655674131,0.8626931390403598,1.8888284056281803,0.11347923926284509,1.1323410757959382,0.10149740010652641,0.022084583675659797,1.3923664312147712,0.25144916081256385,1.973181446651985,1.0894820840279131,1.7626744695697703,0.032005051887125324,1.3523438616012329,0.2235565432797464,1.962358332426133,1.0464566751178965,0.4201619268639535,1.9999886060918621,1.3116660093232038,1.597270989993137,0.0003468231638681374,1.5542139626490354,1.8155593753916133,0.05722496817444733,1.2704085263057814,1.6312956544551611,0.00241182417396113,1.5178106556283604,1.4011301320863598,0.02013378165068358,0.5007564312716775,1.6641462468142887,0.00633212141356454,1.480444333828373,1.440251519988446,1.9910141378298443,0.5385783074370332,1.6957616721401483,1.9907237304112901,0.3183104018248497,1.4785541361720378,0.0065764402447585635,1.6657550174074323,1.2265507057950606,1.995661447660368,1.4031022804508542,1.5159667461326496,0.0025636464900431477,0.170946188561785,1.2683341768958796,0.05794535127927736,1.816803926702964,1.5524197705830782,0.00040586660847341527,1.5989971708332102,1.309618605006106,0.04435797174637035,1.7911705898316996,1.044304926272336,0.00010711359957715771,1.9258176262909146,1.3503272101020127,0.33246963687804487,1.7640658483790819,1.6221777949856946,0.13533253689841973,1.5277853801661923,0.8179956096426777,0.02253703353328662,1.987185940248556,1.130205747871721,0.114477912107391,1.8898133778292792,1.4297153264838993,0.014344057034587077,1.705646430079651,0.601052791466635,0.09527016508679576,1.9977506688387456,0.903383502579559,0.2419796013451031,1.969768409576087,1.2151384027587746,0.07774501805296363,1.8471927725117991,0.9463867987216723,0.21456344050835952,1.9583453628587226,0.68153343555137,0.4084913214830097,1.9998162149596912,0.9894898037141849,0.1886080202082986,1.9451400029771029,1.2984713599097468,0.3742776656962906,1.9980599240936394,0.47607262472507883,0.6054438739093706,1.9301768890178241,0.7643820912771382,0.03557510224337013,1.994447459649284,1.075674255178964,0.5661934617646941,1.9134838491063422,0.29757470716023604,0.8227014823711218,1.9889855400218766,0.5513999917078036,0.1199747999650802,1.9925776311212555,0.8489827235460568,0.7804342592331854,1.981684323189564,0.15522572757566577,0.4901844906067738,1.8750353326140146,0.36150421041744885,0.24966326604609845,1.9396267444454627,0.6300629994151448,1.0059745762754726,1.9993643418209053,0.39528046023448804,0.6972026943711198,1.9616217080258318,0.6704634345904389,0.4179663383158596,1.838319812997642,0.4301813563827741,1.231207423485107,1.9656140375688977,0.23133105748038896,0.9198037667100303,1.998720111067839,0.46614199081447805,0.6162226297437621,1.975925195340308,0.25962431059667757,0.8769020505533461,1.8821703035489485,0.10693969202043074,1.1465319806724015,1.9844213452967954,0.28929450086825426,0.8342292697098536,1.9906497291480492,0.12716924540718166,1.1037459500960278,1.7533274076307905,0.028507921146371018,0.7918647862362809,1.9194612686072277,0.5797044298192185,1.0607669747006352,1.9959088227329937,0.03963270057376855,0.7498873888235513,1.5857159963774405,7.208188922291914e-5,1.0176749859979752,1.807182923750276,0.3860027101433542,1.2841774266979753,1.9499154249370592,0.001519572435517258,0.9745501256798799,1.3879618618438632,0.06721646863518616,0.6674052622755435,1.6533644952049649,0.22389915496602608,1.4929632456164468,1.8550364956367984,0.014791278269607466,1.2005225903290166,1.6853969882720303,0.009979274848489816,0.8885225134751062,1.8765995397164223,0.10173610534787092,1.6763796793860721,1.7161547925658396,0.016975753515467096,1.4161755537367584,1.503638096477872,0.003691553066142883,1.1153767345526946,1.7455807052849588,0.02580044268274395,1.376584618764597,1.540417589778923,0.0009167615210301516,1.61041085973055,1.2959604593030083,0.04867688853922347,1.336293318611476,1.5761920243383267,4.669558395509199e-8,1.0293729756837882,1.3368688572314698,0.04886543498695706,1.7732325698077176,1.0730517984206909,0.0009431134792570184,1.5399032275809827,1.8253328272653535,0.025662684088292642,1.253910518019761,1.1159838306301468,0.0037442079737070033,1.8962613844763165,1.4167312299528039,0.07900274813602681,1.715728077430151,1.6768297338408336,0.10146767763444398,1.4653810542812113,0.8891299240028594,0.009893328434492643,1.973165867444721,1.201121338189161,0.014896196560324926,1.8547193876196586,1.4934949276046878,0.22351387223864472,1.6529016686934739,0.6679817280638729,0.06699634396300647,1.8315439294830531,0.9751611318015714,0.001486077270974162,1.6196372793390754,1.2847633742505102,0.38552040022080414,1.806821981167006,1.0182860865541181,0.17211456002778958,1.93534228049284,0.750479208976886,0.03946251571681625,1.7805995200984843,1.0613770331776007,0.14870122962202403,1.9192207851532581,0.7924626392210505,0.3198382741140585,1.9910050782523037,0.5386383835492169,0.12687112908720322,1.9013897398228994,0.8348320436500201,0.01907092530136767,1.9843136969807222,1.1471365553123485,0.5025651754377991,1.9956677462085686,0.877508624420969,0.2592136047845155,1.6934301448311384,0.6167870985702777,0.08811999454835484,1.9987508377988048,0.9204130124101331,0.7108915829376772,1.9654549576881393,1.2318020188717338,0.4296791972463362,1.837986443512222,0.4184634527493071,0.20409717714567066,1.961789228512981,0.6977852574981136,0.93409638724999,1.999342365988443,1.0065857635867577,0.629495229588038,1.9394174158651962,0.25006744306860096,0.3610339351953018,1.875331025744523,0.4907103906936082,0.589793080484822,1.9818005823484506,0.7810305849146583,0.32846241727680026,1.9925031161303592,0.12026523940006595,0.5508538267020777,1.9890758202351222,0.30984511327673014,0.8059028638416051,1.913732360207324,0.5667442370864706,0.5127498867512446,1.994511593015401,0.8659040962030328,0.7637881437970664,1.9304010936668734,0.16449730149108,1.032001475061879,1.798640696916794,0.37475454608827796,0.7221127262390632,1.9453394842025173,0.6459996294896662,0.9888786401001873,1.9998277456586204,0.06214699497555842,1.2564531932259353,1.9585197496689708,0.21494188425788052,0.40415004485757267,1.8475173356870698,0.4443130965110559,1.2145414753457877,1.9699173776497707,0.008061451216771265,0.9027751806742461,1.9977095111320384,0.09553069632962707,0.6004924121470512,1.706079372198475,0.2712238985308222,1.4291633549687375,1.890092116928411,0.11476203905577909,1.1295997273581042,1.9872832874933715,0.30142477552636204,0.817394652725772,1.5283044207128165,0.13563973113826677,1.6216991854981937,1.7644600137434292,0.03270272498282012,1.3497546786354695,1.9260484687025095,0.15812494462750093,1.0436943188254275,1.7915442488395081,0.044538167191516154,1.3090373816665595,1.5994864775165234,0.00042346518683489265,1.5519101923709582,1.8171563844300502,0.05815055982806061,1.2677453426318575,1.9551190315152294,0.0026075697358460825,1.5154430911434398,1.4036615472457807,0.01958544836975218,1.7256627321274771,1.6662109519053887,0.0066466064703545324,1.478017378289702,1.8637766515413237,0.012005814608518905,1.1837451411529878,1.1870629683249214,0.0892025407053566,1.4397026574654688,1.4809802813238169,0.10938004437155524,1.6636891885037444,1.7279817028406566,0.07224923959735519,1.4005701856872155,0.9608375611714889,0.0023695867929206527,1.0983786718086457,1.2709969053135768,0.029801033887217332,1.815205538261051,1.554722605717357,0.1802375351664659,1.5967806724218327,1.7843394235265153,0.043547199575119655,1.3201444861749048,1.0470672058681112,0.00015140751253750473,1.9247689362323581,0.2774655664525373,0.05428308151263783,1.7622790140570233,1.6243401969849653,0.13394677705030167,1.5254346933934255,0.8207152851228507,0.021957025030587385,1.9867409173473645,1.1329468744484037,0.0053677704120539405,1.8885481635151937,1.4322105285452347,0.2689160825280963,1.7036844361842292,0.6035899000746519,0.09409570316676596,1.9979322153244077,1.8791829104166435,0.007639253333645013,1.9690899270394937,1.2178379942092061,0.441509185811098,1.845720441655768,0.40686498218364,0.12410895956474954,1.957766891995237,0.6841558465104287,0.06098063287053679,1.3715814173907819,0.9922548553822998,0.6428439218491606,1.0670604584899712,0.24066459293864118,0.3721231029498492,1.868311976831576,1.5805929523549598,0.1626467996989096,1.9789781821065051,1.8034442277238885,0.034847798829997556,1.9941526677862038,0.11354190891851357,0.0011919004789909815,1.734171091333454,0.2995455188942825,0.3074057042373578,1.7415647205647864,0.5538730242555903,1.0893471973993318,1.4984402804913577,0.8517167517864119,0.7777374107803088,1.5622475326912202,1.1640243587150498,0.48780761380171656,1.7899344492509957,1.4603326631510598,0.24783820676400814,1.9405693943723694,0.0003503988404185421,0.08123634188682871,1.9994590988858265,0.05727013287588345,0.004252737373787285,1.960859329412902,0.20614584485945675,1.5176947919355401,1.8285351937264962,0.4324558651532252,1.2285162989072778,1.6153938837248583,0.7141254086450396,0.9170478154205561,1.4403731142770702,1.0236797986186514,0.6136706733901147,1.6958589407807638,0.2614858659799546,0.3479769572034087,1.7772161903121533,0.006560943090171967,0.14588302568032807,1.98490376822892,0.01973276631780052,0.8315029971754062,1.9902686907785605,0.12852204611198326,1.6328598297962482,1.8990405922863136,0.32231723301130133,0.28508211171456943,1.9205449623342408,0.5822151114134668,1.0580066882463823,1.309747376384712,0.040407127369016194,0.7472110667015635,1.9745976360893054,0.15772224447894734,0.46107304261552584,1.808812118103126,0.38818762410451524,1.2815251790444835,1.950775926781449,0.0016757709673359544,1.908603902271569,1.9999989268722398,0.0682167024323429,0.6647987908087641,1.6554553468963742,0.22564585898873402,1.4905555294796127,1.8564671519681926,0.014321210087364866,1.197812822532413,1.9739372370986212,0.010372731788264367,0.8857750108251041,1.4683668537181584,0.10295470874050283,1.674340403147601,1.7180819774662628,0.07769267204317765,0.3244747427395407,1.897753780441834,0.003457984659964608,1.1126295955466607,1.2571747803874902,0.02642823241529968,1.8234216725185053,1.9854067345488802,0.18852886902052346,1.6082182810992478,1.7753691888578764,0.3457582196918366,1.3336879193623785,1.0327477121312643,0.6109697986506184,1.9301271628921204,1.3394711140873494,0.3411258338483093,0.7169343743856464,1.613081744962717,0.14120029069318218,0.434870710175673,1.8268910123868967,0.02504399033479643,1.9889654857991106,1.9600434826179438,0.527630463465231,1.8950315350987204,1.9995511661550545,0.08008349163519546,1.7137942083469548,0.5904741143028949,0.24591061734092712,1.4629317994043876,0.891878464595125,0.7384446634436244,1.1669139882389443,1.2038292310688394,0.45345387442625573,0.8546150136596867,1.4958980388489946,0.2217744158584044,1.9535478541030238,1.7395958437415278,0.305295175885532,1.999971070373005,1.911151817268221,0.0013392009229137303,1.948854873813648,0.23141769131713408,0.034085188024409185,1.8051852524661953,0.4662565110473653,0.16104866440598598,1.5829760622539162,0.7531578634411694,0.876767652593681,1.3039020841587274,1.0641367494505276,0.5766431587981713,1.9181285082612622,1.3688595935927412,0.059977135530281056,1.9017127851746458,1.637603048689146,0.1255264787091469,1.9911047190314517,0.8375598610417421,0.018537221497361034,1.9838220837823195,0.14909320881457266,0.0072820369655868245,1.8805752439438799,1.4475635036830887,0.2573589636246695,1.691435126998635,0.619342635316755,1.0175395779009155,1.9988851882016156,0.9231697095848153,0.005675218454925024,1.9647307478436908,1.2344909820718393,0.42741001076907414,1.8364743144671267,0.4207151931715113,0.20242612207124855,1.9625426284374181,0.004837314122834724,0.05523937175680649,1.9992382787462954,1.009350842659444,0.6269282770182376,1.9384659943586655,0.2518995057686101,0.3589093171240022,1.8766647029433163,0.49309202479063485,0.15342377507630423,1.9823219743540705,0.783729480496665,0.8456459466968241,1.992161365201428,0.12158334086959288,0.548384984929729,1.7456709504719798,1.397883791139366,0.29517556095205766,1.914852399045269,0.5692380558178866,1.0723071445437975,1.994797100204354,0.03647316393175659,0.012999735253141576,1.5763027071941864,0.16601991565208052,0.4731997521552439,1.8652493056922095,0.3769149484864919,1.2952471972237496,1.66839319139683,0.0009490030363475954,0.9861136894104962,1.3772761770742386,0.9545368313828394,0.6783346833637397,1.6445651277461577,1.2649211521813333,0.4019316311238874,1.8489817554545975,0.01683903934668629,0.18386550408149738,1.158833869553459,0.008415644611958983,0.04540695957843488,1.9975186496242898,0.0967136037852302,1.6848531251318475,1.9271502954943474,0.27312013661018997,1.4266641435696223,1.766345629648574,0.5204281556612114,1.1268573879816048,1.2432998381911433,0.8145146841033492,0.8146766792829502,1.5306501775451518,0.19698685875728017,0.5205728214271717,1.8914237412808055,0.05230498253640814,0.2732333619404148,1.9270885140515652,6.339612332784128e-5,1.9352943646867502,1.997507029944426,0.04535786060051161,1.78051486549066,1.9706264810177179,0.1837702526837771,0.44675147337078003,0.7925951215301565,0.40179951834056116,1.265080111737481,1.1044885206411454,0.0028109415076301714,0.9547015148982665,1.999877835430122,0.28876945360901385,0.6487414335239378,1.6682705630491097,0.2365761565037352,1.4755867677595234,1.8651666460516303,0.011582398614322864,1.9757620795571742,1.977672441019192,0.012973253660020667,0.8688082258527261,1.483402748829294,0.11064090324232645,1.6616182849344527,1.7298747067822355,0.07122082610963942,1.3980350281047476,1.905153054792072,0.002183155125349945,1.0956265451488862,1.2736575616488928,0.030474769001263446,1.813600916637136,1.5570211993606253,0.17865704946534855,1.5945596109372522,1.7860517445171276,0.042743740583308876,1.317523632130248,1.0498291255810754,0.00020334641557617772,1.923713175253869,1.3555016900244492,0.3283620744745086,1.7604863512369868,1.6264978251868358,0.13256763917309644,1.5230799890693536,0.8234363314404455,0.021384494788992958,1.9862883496793158,1.1356869844936401,0.5126316260781837,0.9233340767062211,1.4347024258610042,0.267032240387421,1.7017170618136301,0.6061300396928674,0.09292816792484848,1.9981061314728943,1.8804971069253797,0.7219826337484827,1.968404034698123,1.2205359200381456,0.01850564021897827,1.8442416442962744,0.4090934918064104,0.125446524639375,1.958558341707286,0.6867806724605551,0.9456412590864695,1.3690128173206382,0.995019966270935,0.6402625002510884,1.0643012625190684,1.3037450237000785,0.3699733410429392,1.869680229702336,1.5828421127416088,1.172097350253206,1.9795384361047375,1.8050874796349958,0.03412787511296844,1.993850274484927,0.1148250404476776,0.0013306856483947804,1.9112197361447814,0.30152168640679233,0.06594593282181116,1.73970678844762,0.5563494679561544,1.0865927507614757,1.4960411875900599,0.8544519138223936,0.7750422617800315,1.9806157056155023,1.166751445269221,0.009486448145936133,1.791627003903966,1.4627856681067337,0.2460188986221301,1.9415048525667058,0.00042741520284428347,0.08014814549121052,1.9995462139387947,0.058196077402233426,0.004001797832638765,1.9600896039275604,1.2510754345588486,1.5153270340036307,1.826983708446783,0.43473471344999304,1.2258234270600608,1.9670370396874275,0.7167762672912141,0.0497742386372495,1.4428540362184,1.026444096938038,0.6111216709675836,1.9324245946985033,0.2633530681514251,0.3458829047756835,1.8847612036591737,0.006248509277465009,0.1444481818007668,1.9853786604413006,0.8004518658102567,0.8287780129939402,1.9898800806683377,0.12988151026599204,0.5331982741478585,1.7569528701476282,0.3243531994668387,0.28315141879845207,1.9216216174384495,0.5847289874527063,1.05524595826442,1.996393332625893,0.04118889135315995,0.7445366774411122,1.590189443993657,1.1976512240244204,0.45874585998148065,1.8104351281590092,0.3903772160735054,1.2788707788078737,1.9516291588526136,0.0018396028337247516,0.06827655933293797,1.393053077364712,0.06922406078227561,0.6621948823399604,1.6575411868793495,0.22739848383762473,1.4881440624827145,1.8578912596251893,0.013858678550796366,1.1951015422297389,1.1756890061507421,0.7470515709810506,0.8830283815562474,1.4708081799705446,0.10418017107398148,1.6722959708027654,1.7200036718057805,0.07662758038066897,0.32243846785574204,0.9492834453265631,0.003232035961287183,1.1098815953580967,1.9902457348997307,0.02706346622144773,1.82184948752065,1.9849322914170782,0.18691603008241442,1.6060210519410967,0.7254879123703317,0.3478519743907714,1.331079968686143,1.0355112680550078,0.6135186243502904,1.0238446054245125,1.3420707752969299,0.33904824922258414,0.7142833860644784,0.5158196048026426,0.13978694855726825,0.43259160371571925,1.8284428749775756,0.024432751239012007,1.9885520566075003,1.960813645922677,0.004237563455086524,1.8937948421777544,1.9994645067240224,0.08117126895191629,1.7118548814877692,0.592998335111677,0.24772958217237318,1.4604790048826217,0.8946278319006266,0.009132474888628783,1.1641869771134856,1.9811218977123417,0.4511403352031883,0.8518797846897367,1.4982973583836214,0.22004090990597314,1.648702793580568,1.7414541134503794,0.06502043722315565,1.9999462142653905,1.9122877773712397,0.0011999604828876187,1.0785955456968093,0.2331896460053159,0.034804671605383475,1.803542367199968,0.46859690284218103,0.16902528625320856,1.580727167072292,1.7965045584989197,0.8740240360115538,1.3012665413233053,1.0668959753243912,0.0006941915652823871,1.9170292112230274,1.3714283624269845,0.31579461671155185,1.9029048167333948,1.6397307970312751,0.12418851468484882,1.5084334461534699,0.840288920474769,0.01801102210278227,1.983322948134892,1.1526044217291609,0.497775233292966,1.8792614485258394,1.450034546664545,0.2555100008079222,1.6894348223509823,0.6219010826256898,0.08586398654828409,1.9990119009806795,0.9259269942152506,0.7056018610145157,1.1331102626193503,1.2371781523192469,0.4251452023994772,1.8349557896158235,0.42297136289094506,0.2007611653645488,1.9632886686186901,1.7621723026024971,0.9285791106971137,1.9991265511806182,1.0121158502342056,0.00015428969920738833,1.937507397202472,0.25373728855553923,0.043499094015331585,1.8779916770342524,0.4954775347809419,1.1552318961615573,1.5548597619979534,0.7864300297150205,0.8429145114203374,1.9918120280600946,1.098214616813331,0.5459195962725173,1.747510568357455,1.4004191307084666,1.3738959769991812,1.9159654427865902,0.5717351682187781,0.10945502327000234,1.9950750010276854,0.03721683793627106,0.012559095228903971,1.977122719984581,0.167548906548037,1.5733182357933895,1.8638597052680006,0.37908011508507844,1.2926041727923523,1.6663338844411038,0.6511772367600572,0.9833488448975877,1.3798355555046948,0.9572993102721327,1.743235797703936,1.6466767681890029,1.2675865044830603,0.39971779030932275,1.8504396837821755,0.016337487260159156,0.18227074091472895,1.971248812150344,0.008777419807647013,0.04458683082255055,1.99732016094155,0.09790341790209067,1.6828355838867584,1.9261106725333224,0.27502193252039886,1.4241616698334207,1.8925991125908423,0.5228564279417629,0.13572264319559568,1.2459809821863999,0.817232573649563,0.8119601228496223,1.5329918769478192,0.13843399177710125,0.5181479968925162,1.7680135529602352,0.05142602797382867,0.27133679210827266,1.9281214707448533,0.6003412915794621,1.038168625084774,1.997698346209431,0.046184853344365284,1.7787832744512113,1.6039036843718328,0.18537088444580574,0.4444501617624118,0.7953009507002224,0.40401765992178096,1.2624128540014015,1.9567426257825442,0.003021937934302499,0.9519393623107854,1.4087150988651387,0.28682837610660605,0.6461538126209925,1.6703250644973602,0.23836508875756057,0.37488321078461506,0.8803878897856172,0.011166540207158127,1.1783061834487871,1.9782497602973952,0.7636279587428993,1.8592545859678746,1.485821520165925,0.11190856228416546,0.5668928205230126,0.6596932327411259,0.07019951420472603,1.39549682708764,1.9063250264010099,0.5507065432100249,1.9524428184650602,1.2763161255580562,0.03115591724848532,0.7811914405366934,0.45651179503726325,0.17708284387379458,1.5923340033620326,1.7877580552399523,0.3609071329209851,1.9966154521143502,1.6836000534282354,0.0002629299115606276,1.0067506132756536,1.9993363747174904,0.3263159885950021,1.7586878736259375,1.628650663093762,0.20399738171907045,1.9894992290896234,1.8305128549018161,0.02081944718615414,1.5406454692015927,1.9654119887309944,0.7107337733507757,1.8859973627013291,1.4371909993777927,0.08805234174508136,1.9314603718310406,0.6086731908989986,0.09176756828819022,0.045870890153958066,1.8818045710231317,0.719327546113734,1.9677107377964096,1.2232321596168538,1.5396752191072343,0.8349946350619017,1.990755307610366,0.20945608752266076,1.6355977039349563,0.003767661452427351,0.3197174356126109,1.9996227805647133,0.9977851152376439,1.6695478186371648,1.0615415748912114,0.24427477266325703,0.36782839641295795,1.7932489640491132,0.00985535882521471,0.17202210548868457,1.9800912004073483,1.8597896603764545,0.03341533659692586,1.493730488044814,1.9496726169294827,0.5587341751596296,0.668237233438284,1.38724647635912,0.06693703137749818,1.9101211517328505,0.5588293038742413,0.11606536622003438,1.4936383018845452,0.03344251611031146,0.772348832839861,0.17767810908124015,1.1694772568172018,1.5850008465379941,1.7933135056598912,0.36791053551738406,1.9958287292472545,1.6769510797256095,1.7156129375736753,0.28057236595731083,1.9996256863137158,0.3196397432008552,0.0037584738409153218,1.6356795382580476,0.20952100988923084,0.825127852928832,1.8254258999274378,0.019018315657075013,1.2231288285335524,1.967737452290544,0.7194292915078987,0.04891635078274015,1.337024070588988,1.9310789504633856,0.608575641966218,0.6170372935046329,1.3361380621934908,1.4370956594983828,1.886046511131628,0.5103113802832773,0.14301987959682583,1.5405562895444715,0.020840970739642528,0.826054338001087,1.9894839017887507,1.1152129805542337,1.6285682208978693,0.9439256238386583,0.32639433201764834,1.9993325078338464,1.7162698408284207,0.0002605048244939123,0.24358957667189474,1.9966241606279649,0.888358689174052,0.01000251973838906,1.5924194073307871,1.1604254474146258,0.4564228158565671,1.8551219716635585,0.03112966832320596,0.11562578001346091,1.9524751146266144,0.6672497985677632,1.9062802256516918,1.395594186838613,1.9096868736469852,0.6595935567790012,1.9499669298721745,1.2840193661050396,1.4857288630641852,0.035808655464789285,0.46326524348457065,0.1725500951068757,1.1784104885536306,0.011182343110494264,0.8802826466696694,1.9959237059761452,0.23829640123222695,1.6702463979835964,0.9987260198536659,0.2869026883818926,1.9998327361501578,1.7534358124871288,0.0030137086977477523,1.642656101723873,1.9906272247623622,0.8340666994672754,0.019222058953759724,1.5473787264293595,0.14723828574375364,0.5032385519529254,0.7281478985477308,1.87743922066022,0.09137423310873138,1.9343500592330543,0.6002441230133027,0.08843880529634163,1.344667820982817,0.05145958972072662,1.8902155362017719,1.965656883000485,1.2310470337772563,1.5329021811098995,1.8299884031716198,0.4178322932982912,1.988131068800794,0.19847586723664656,1.7580745805644487,0.9348707726024096,1.9993702052396887,0.27494892344112243,1.7099101116809745,1.6829130242183181,1.0434237177269896,1.9973279107317432,1.7883372902756836,0.008763411155039202,1.599703246318823,1.9816529028462129,0.44883099264221893,1.8503839127719226,1.500692867863016,0.11989651861593464,0.5515473326263894,0.6758179860688818,0.06404320357770066,1.3797374931772977,0.07361655304151604,1.9174884075603549,0.11234145865582157,1.2927055365326043,0.03553153521245833,0.7645423065130518,0.470941357823599,0.16749017410595235,1.1873290384336872,1.7981734216211056,0.3741490810211716,1.995064487720684,1.069654689701743,0.00080102692388484,1.7281673755723481,0.2932916934119274,0.9509995649336307,1.7474401504592447,1.6418536538972017,0.2144614164886367,1.9918255599728092,0.8430192010823094,1.8150486349484276,1.2152993929117222,1.9697281677106873,0.4953860131988681,1.8779409301448415,1.452502148615359,1.319887871862185,1.9375442779415941,1.9284713380204748,0.08474646267770136,1.4298641773569705,0.0543711428241348,0.702960366463208,1.9632602043270646,0.13381139278110565,1.8294040017896975,0.8181577120420416,0.4252319446566013,0.19910231975607606,1.6223068462610821,0.005395833492199076,0.9258212810172106,1.9990071841456976,1.014880765169386,0.0001095399983066514,1.689511602833614,1.9972508820832178,0.3546748028113377,0.9064057656475377,1.5988651561830194,0.18172951456353204,1.983342221499201,0.7891322119209265,0.029174233393904014,1.5085247241912754,0.12423968318961087,0.5434576795811685,0.06441234931488082,1.402951408613727,1.3713299389258615,1.9170714829207904,0.5742355551958551,1.944143883565458,1.4786988804833272,1.8633853579959954,0.7557356101231518,1.976530899597893,0.16249876247233785,0.01241087972475341,1.8036054618012902,0.38125002932885366,1.0686102835865205,1.664269482598038,0.0012051576058436098,0.9805841277018714,1.9999473080791415,0.30721035223112947,0.002423280299749142,1.6487834640457242,1.991691429408598,0.39750853934123254,0.8519846210496307,1.5540767354325955,1.206431845011427,1.971903392463633,0.7358789978012976,0.043774007296931816,1.4605730996645767,0.09910012958271397,0.5929015096818904,1.9250639683932511,1.3521895754046145,1.4216559528944162,0.7039601878064448,0.5252883485325703,1.9607842565025786,1.2486602453747198,0.02445604609037133,1.8399711237493064,1.986866576119274,1.1321776706551983,0.005287769180677193,1.7697815208324958,0.916777893788918,0.2694457937426872,1.023950579979343,1.6416005935382394e-5,0.25488214992349534,1.9978820339254586,0.3477716166793895,1.7770457287197714,1.60610536992914,0.1869777449824236,0.4421530979701961,1.8461343090212732,1.507623005773056,1.2597435898178653,0.12865491632434534,0.6834196142649048,1.8989219599119374,1.4112371966848734,0.07666828139726167,0.6435688972782811,1.9444883583169232,0.10413306571588887,1.4707146560916775,1.8679267789186764,0.4777679145379352,1.974536938115062,1.5719095660110414,0.013876271086099345,1.8089713712283697,1.994236169431915,0.22733118664065266,0.0011543224034735733,1.7336439580443082,0.29899186331211236,0.30796570079681984,0.9691279529716518,1.7352647985665381,1.0901201193540426,1.9928175689827143,0.39029319035570975,0.01602961479607512,1.5616055919051492,0.15629181890880817,1.973998636795409,0.74463916633189,1.459643586511469,1.3122746606011075,1.9403055624549994,0.6319117309505966,1.9215804728811143,0.07758803077278875,0.05701155881938047,0.6953075586764585,1.9610740351579512,0.12982927146107948,1.518358599815544,1.8394025771197415,0.8003479940694317,1.985360593941905,1.6160053984347735,0.006260346621353552,1.7755402095801858,1.9986175298070599,0.26328138360673925,1.6977662318592657,1.695301386921857,0.260962844185022,0.34856555600646744,0.9143981136442064,0.006649993764103468,1.1445640477147148,0.19229288108646958,1.9864779611908863,0.02728131438447534,1.515417876568868,0.12814170540557268,0.5363329153224875,0.69203748903647,0.05816044782278007,1.4194891429930971,1.920241530543901,0.581510157709586,1.941469123710604,1.309009397590835,0.040189041238511414,1.8723967759222098,0.7381832438428846,1.194178631268008,1.5644445875033832,1.8083555034862386,0.854347038638227,1.9932226928744636,1.0866983569273123,1.6505990475760428,0.9725617066010788,1.9999974888187484,0.30144582996633873,0.9781963308259698,1.6548690482273072,1.08108189224883,1.9938620070544715,1.8109859788326435,0.01445237552972456,1.19857348066852,0.16119609794786094,0.4807005537244943,1.8696278991857571,0.038622471515054047,1.4766006354803123,0.5855851112877785,0.6403614104539808,0.07799286093630431,1.4143660605947694,0.06006956283583009,0.6866800034684004,0.5413341048885191,1.2564247528980157,0.02625128968097057,1.8442984541899339,0.43930535889178834,0.18898263273266858,1.150138854976698,0.007314701445077287,0.34517149936948344,1.9980996049305357,1.0319720658557057,2.632856620943258e-6,1.701792581618284,0.26710435570826463,1.9988979376180818,1.7719696983024524,1.6124684636372393,1.1355819592613727,1.9863058382400558,0.8058739992442079,1.8363258518401095,1.5231703323065924,1.9598260145089346,0.5283146189823456,1.8953773872804174,0.05515062963085138,1.355402607896422,1.9237537789032804,0.6266769878056596,1.3080135544041656,1.4636195483388699,0.04277440692214807,0.7391937792849865,1.972706237737512,0.1532796371234425,1.5569331594039388,1.8136625457881559,0.3947703670315572,0.2222619994922227,1.0957320636497103,1.739073297819922,0.9634948194567042,0.3120453462656838,0.9771496809351651,0.0013796514686373884,1.6616977679638771,0.23092144236547085,0.38395233897553405,0.8689133152194176,0.012956239503365996,1.1896745270409852,0.48159552019885354,0.7524058995242855,1.86511348141539,1.475680014229365,0.10665163503084152,1.946325136917125,1.918435768088476,1.3681381531227488,1.406093007653039,1.9013769984708233,0.6780782321659009,0.1259031844217786,1.2651823229013257,0.02835624656927349,0.43843880036361726,1.9839608160252098,0.18370901537119766,1.6016127092810322,1.7805811286691478,0.8997539908145987,0.2578789017200226,1.0410375442008055,1.701046397367612,1.0183155058891251,0.27330617909249955,0.9223959739386041,1.766171594523809,1.6196141843112644,0.19705003804649246,0.42804642365434253,0.8147808488946344,0.023232655658041335,1.2431970173213736,1.962331927130207,0.6996819578514337,1.8913009635817155,1.3563809745239888,0.08336789171507197,1.927190009196598,0.5980560933894892,0.09666812875077924,1.4555628719489015,1.87629107858162,0.49242321991362503,0.15383709761168363,1.211943475897305,1.5493758998473783,0.8464127453023005,1.992258044530177,0.21659180225750874,0.002121457512710423,1.745153630899694,0.9544309364172,1.9998735650891488,0.9862196840960032,0.0009443915271571957,1.0730811440345822,1.9947177394641238,0.8678755102235578,1.8002381772652156,0.01154132983786793,0.16559194516924325,1.977729321862249,0.7612050691851695,0.03644480121019089,1.295988565236352,1.9459862397780778,0.5691423925277387,1.9148095903830036,1.3765573604875727,0.06283913794983231,1.9052681595582976,1.9562102913533645,0.12153268656740668,1.2739180703716175,1.8485714163841402,0.7836259856488567,0.18431420117540998,1.158067620811064,0.008315473708503718,0.9007956828475447,0.3589906757361274,1.9968173960341438,1.6854184138290356,1.707486531824424,1.0092448424130314,0.335690414284498,0.9314432415086273,0.004826905729127362,1.6267089153459815,0.20249007092041083,0.8137521541217111,1.8318995989868694,1.5299922425614616,0.1366417128078533,1.964758646990724,0.5123951315507577,0.05255296631045725,1.34789050280828,1.926797337376009,0.6192446130779452,1.9355687053142074,1.3252229435548644,1.4474687061225857,1.8806254753589247,1.9708129003479353,0.14903752748901633,1.2208001012890333,1.8183013248880502,0.8374552650397089,1.9910906058825377,1.103716684566662,0.002753094874856976,0.9554767845686367,0.3178913496519553,0.28931520084036866,1.7242926857236196,0.000591346432293971,1.6751912915494254,0.3776511577272599,0.876872850129315,0.01170046884909215,1.1817895307644821,0.17062597173258842,0.46616687144128266,0.7700238898929456,1.482723248269867,0.11028635252008967,1.9488883355395727,0.6563655126116177,0.07150873695923421,1.3849455799820796,0.06604269910740934,0.5475456964074326,1.9535159156834316,1.2729110507046228,1.495805983509889,1.8533360215770596,0.45354264901464947,1.9805625974479053,1.5951834182219207,1.78557178256226,0.891773081808056,1.9969003081801007,1.0490540219714002,1.6787848536776036,1.713868445401233,1.9992011186418632,0.3289372382568284,1.7609900550608326,0.003977626886881636,1.118624633940358,1.9889811844448482,0.4132588327233464,1.5291041692227996,1.2354055501554035,0.1412546030095898,0.5133094192704474,1.8876338334656682,0.049689884324090494,1.3393714022914462,1.930166086625831,0.6054168369535997,0.09325514051767625,1.3337878465009718,1.88012895284292,0.7227281750553833,0.5081381238669171,0.1443079852492425,0.01835732863948636,1.8234818182066879,0.40846759699624735,0.21162970217986843,1.1127349252381524,0.0034667982407862175,1.7571298399328916,0.29005210305638907,0.9942439247437254,1.7180081984672944,1.674418675510553,0.24196041026146042,1.9964162796761922,0.8858803224838121,1.5822113281590096,1.1728617723333086,1.9793819549700777,0.45851812628205724,1.8564124273017093,1.4906479003839181,1.278610655712296,0.6553825434309657,1.911539133834574,0.06817822632535364,1.3904113724024687,1.908648171025586,0.6619399586583777,1.9507430727449204,1.2816268948029892,0.0325404322531736,0.7757984907948582,0.46116233907574267,1.1659862079469887,1.5878692180436043,0.010813444080115975,0.36517042901043095,0.2465289116343944,1.0581125142573684,0.0004050288015817749,1.001220328764098,0.2851562351998119,0.3222392857037675,1.755073529080858,1.1196640875943058,0.20735701168020793,1.990283437766224,0.8316074873110828,0.019711817121246367,1.5452895755203921,1.9668391377379804,0.7160320762839008,1.8834194640722535,1.442158098927984,1.3308243740321033,0.6118367569343874,0.6137684502708902,0.08946721127401824,0.04754122984826825,1.8843992620489827,0.7140238293181853,1.966301951572731,1.2286194975732412,1.5350111481857616,0.8295426568276953,0.41580606129491704,1.111694626691018,1.6313184739411337,0.0042625088780189335,0.3237812771399522,1.9994556071622713,1.003315442834203,0.00034759848111765024,1.0560208090721488,0.2479080658907149,0.3635530245490769,1.7898694435745874,1.5895627863009145,0.17513594634954122,1.9811742430769348,1.8569524699370392,0.032012436903989805,1.4985321758247083,0.11871500460365836,0.5537781556551862,1.9077713337694913,1.39233936634339,0.06894062386822553,0.6629254172933872,0.5637990764924243,1.9478919907221832,1.4888212255810027,1.8574922411609385,0.7669672175039535,0.17454381446938383,1.1749249715366699,1.5805066406006167,1.7966682989460216,0.3722056113779295,1.0570673409287321,1.6728702665237258,1.7194648975375357,0.28442453881741014,1.999761700657228,0.31559710781699757,0.0032946798894643026,1.110652915675841,0.212920351349437,0.4067796407101444,1.822291360863045,1.5444117061475715,1.2177345338688996,1.9691160738072289,0.7247417554947345,0.04722239795600425,1.4502764095296155,1.9330822663983058,0.6034925820733548,0.6221518475723256,1.3413414356434694,1.4321149338531982,0.7150271743404828,0.5151407292155757,0.14018294384974228,1.5358953322789914,0.021979122282722363,1.8336390848163115,1.9886688498963028,1.1207046986226388,1.6242573875342559,0.9384048754685753,0.33049203293849816,0.27739228567094476,1.0123866880883925,0.0001495685484039777,0.2472185029417442,1.9970629539186429,0.8938561313774193,0.00923741540706946,1.5968657278100755,1.1549643156148375,0.45178921415171014,1.8522418350434193,1.4976243658762747,1.2708948656400652,1.9541451714655986,0.672470049841266,1.9039288308747202,1.4006673120650253,1.9119696704733067,0.6543987339211936,0.5719799458082595,1.289317583988063,1.480887340858517,1.8621241819112768,0.4679396538501245,0.16945726247935455,1.5813587753014862,0.012022196958573428,0.8747939440135287,1.9954096444164144,0.23472482154691043,1.0762144070930753,0.9931957365326034,0.2907906984915909,0.31636078969835646,1.749787994996149,0.0025999250952455366,1.1016326378453396,0.21854846182025145,0.839522877483983,0.018157943806833887,1.5519985870733395,0.15013980679419636,0.49844646605974996,0.733474086412,0.04450688897667332,0.09369764699133787,1.9363065319442239,0.6211827539439223,1.926008456789417,1.349853986374082,0.05322530063026987,1.8927211965896182,1.964205227732665,1.2364241720003626,1.5282144138120688,1.8330604091489795,0.42233771589284985,1.987266430275604,1.129704837455242,1.761669676611005,0.9293532030233813,1.9991586790537146,0.2711513156000386,1.70600430274605,1.6869424687083296,1.0378979628761238,0.892815193051829,1.7849227503106144,0.008048023876102484,1.1559984948021391,1.9826923915217627,0.4442249681046484,1.8474610669848843,1.5054723834197046,0.12253566725121201,0.5466111654295878,0.6810545850776871,1.3997078881750258,1.3746156304608057,0.07571333156887494,0.5710340146659814,0.10980831406560243,1.2979891547758504,0.03700738021769745,0.7591710867086303,0.4756423856111146,0.16443905797989034,1.5739539085242098,0.8758326849551141,0.3784719745427704,1.9945004965202044,1.075170499596831,0.0010376168347709935,1.7319467092823317,0.29721522081690765,0.9565239783104816,1.7437547760554595,1.646084628311264,1.092603996404584,0.4003386488742803,0.8484833423072367,1.8118319521846806,0.1495885419840488,1.971063767400051,0.49061916630881885,1.8752797649328161,1.4574269539809197,1.3146432605029639,1.9394537464258592,0.6295936921942002,1.3488730442467456,1.4248643248960864,0.05618432334315682,0.5221745568745239,1.9617601999473295,0.13106104900066207,0.02368378849027397,0.8127223884269323,0.4297662751540098,0.19580301252210341,1.617968352361329,1.767516311504777,0.9203073442841795,1.9987455353773218,1.706745345916751,4.297681082132687e-5,1.6935065199433446,0.2592848167002221,0.35046002546819555,0.911913228510464,1.6032849440886683,0.18492103299613716,1.9843323935821142,0.7945413926379241,1.8426105591830906,1.2631616314060734,0.1269228102295764,0.5385443373660842,0.062473935310669915,1.4080067020076004,1.3661893646904928,1.9192625185936585,0.57924607638036,1.94230702395225,1.4738360656168923,0.039492006417376935,0.47475123042833534,1.975324863308096,0.1594896139319012,0.01329457025512848,1.8068846037168784,0.38560403434985635,0.22958402651166077,1.6601254574276092,0.0014918598487441148,0.9750551598186257,1.9999887881430145,0.9655886214131042,0.0020537640733102602,1.652981957606293,1.9923876799033597,0.3931038744782892,0.8574562758245915,1.5586720529077587,1.2010174982977517,1.9731902541911652,0.7412169604123414,0.042170300740462796,1.3156368261961786,0.10151420898164176,1.9425236508508665,1.9229493486430687,1.3573601628571055,1.4166348660689785,0.6986823003332063,0.5301630602379028,1.9592360264501334,1.2540130474009188,0.025686550492431515,0.42890656881236544,1.9859581327295714,1.1376574339579306,0.00587095089419698,1.7732997855141184,0.91126804365787,0.26568056920388705,1.700298518163766,1.9919053628747463e-8,1.0298779484785148,1.998226518150907,0.9108704356091877,1.7735528263684717,1.6104948211311214,1.9841472599003604,0.43757178405636543,0.8034277463491297,1.51238004133163,1.2543991237619625,0.131381800967598,0.6886703152220093,0.059356423519786206,1.3671633566856627,0.07880605750322978,0.6384072623113004,1.94265696078033,0.1016895258887025,1.3152580178897493,1.8706603666508697,0.4824921655428599,1.9732819909162091,1.567364216925517,0.01480944864549949,0.8578514005647693,0.3927866543756624,0.22383231174726115,0.0014352425145741643,1.7373907711488388,0.30294654006634314,0.3039841504018662,0.9746560963162675,1.731505223239556,1.084610937277472,1.9934640220029503,0.8564201337429171,1.8071203444178567,1.5661728080051467,0.159273401741032,1.97523665466196,0.7499900258796337,1.4645480426145205,1.3070161382974337,0.1055335603637193,0.6370593889756033,1.9194195844003554,1.3658178733837438,0.0588666064256127,0.6900448725405002,1.9595313642036358,0.12711751751406541,1.5136213568062469,1.8423955190518133,0.7949320823237284,0.4447635564836955,1.611639523374384,0.006893392620255567,0.9123108735068401,1.9983115607126631,0.2595530590205878,1.6937940610508448,3.93555886629704e-5,0.2646997183525368,0.34437964652985353,0.9199094305575435,0.006028459686781562,1.1390896231276746,0.19556581306342047,0.4300942479461207,0.02601322540576534,1.5201491305410473,0.13086355155019214,1.9616507880937568,0.697303724501837,0.05631631969969575,1.424502921753429,1.9223917486906035,0.5865393012256863,1.9395904641990849,1.314264320573601,0.041755784894699444,1.8750866402944617,0.49027568770346286,1.1996007062904068,1.5598708477916816,1.8115988041622435,0.8488779353224152,1.9925647340121844,1.0922065146311664,1.6463892646766445,0.30219626701590907,1.999994590349055,0.29749926137745586,1.7322186436131704,1.65903852133387,1.0755685538844082,1.9944586094019057,0.8654034815268454,0.013530620568138363,1.193150267263169,0.1642198106189775,0.7489764986384625,1.8668842451774403,0.03711504965322254,0.10506594002284853,0.5805583819268607,0.6455271938689711,0.07586577553878793,1.4093265343415502,0.061971795602511315,0.6814329517496525,1.9569373518124549,1.514519342488016,0.02752502045060401,1.8472490865924434,0.44389315291710585,0.18575968317114777,1.155604179829326,1.77836278324741,0.3493611950191614,1.997743557269089,1.0374990569226832,1.6872325098464347,1.0218560101028886,0.2708780585358196,0.33755686936440377,0.006143786002397511,1.616830777994429,1.1301006447312727,1.9872028503357608,0.8113020699311552,1.8332811673445568,1.527875415345362,0.13538579271824958,0.6963060933113874,1.8929010041098948,0.0533538740283338,0.08195810333686793,1.9258576877905584,0.6215522228220445,0.09819276896211482,1.458712416178883,0.044389198788480466,0.7338588577652172,1.9714081101904135,1.2084813834600796,1.5523314054508233,1.8168650779286568,1.9926916178568517,0.21879760486330213,1.1012355070467845,0.002571237716047836,0.9579687565628432,0.31606950748275287,0.9826788936815846,0.0011045209668154587,1.076612429664383,0.2344679228015245,1.9953713602530798,1.8023567624734667,0.01208398872799299,1.1842417107454781,0.4768742854550492,0.7577678006173547,1.8623263814647872,1.4805373000372897,0.10915042162988098,0.5723407552872624,1.9162340986651727,0.0724378967785938,0.06160949339997834,1.9037580322392478,0.6728472466576978,0.12323019493045706,1.2705105804762526,0.02967874418713845,0.787084666008945,1.9829592466516996,1.1545699357462418,1.5971859665774562,1.7840259351564907,0.35627669672543416,0.2541834744573441,1.0465625652324955,1.704979425529548,1.0127858461825512,0.2771164000324168,0.9279107900034005,1.762605903212548,1.131138586243315,0.20035863694387546,0.42351873652575966,1.8338594946955085,0.022062434049743174,1.5355582599287947,1.9638207758655528,0.7049615738541799,1.8887798249623118,1.351208333296076,0.08559254924281334,0.6225214744845591,0.6031261449338109,0.09430975979622547,0.04408126910813959,1.8789420808997772,0.49719593078705127,0.15090280204656248,1.217344904162366,1.5447465103429758,0.8409504033092605,1.9915560436035515,0.2131666547825969,1.6402456515670067,1.7488303581735025,0.31530611152564925,1.9997703352472733,0.9917496769996794,1.6650526465510471,1.0675645072197237,0.2403359600526611,0.8733593545157059,1.7969095124198535,0.010718655028459922,0.16865271834718032,0.46916463245537954,1.8628560151301468,0.03498012593607702,1.2907015364774799,1.94776473660636,0.5641583218230091,0.6625496158450337,1.401991844202857,0.0647829800724814,1.9076038151796748,1.9545770555935746,0.1189037259621385,1.4988781821613326,0.031912318146762875,0.4505803556925222,0.18112741872746774,1.1635259854686677,0.009042348759150443,0.8952941731516817,0.3632451720722065,1.996361283257503,1.6813810421052757,1.7113841292733043,0.276393412462526,1.9994423573583031,0.9369615855784182,0.004299406511030557,1.631008842568571,0.20583873323230928,0.8191885446375967,1.8288179650975211,0.020207674227091244,0.13944546093976018,1.9661991186704806,0.7136413338652481,0.050798239534753264,1.3427003251787777,1.928860136924604,0.614136694371472,1.9336013994943884,1.3304476354052066,1.4425161117679042,0.04989172238043715,1.969471676044973,0.14614587672255264,1.5456241519439982,1.8214675736360446,0.8320009900138235,1.9903388716620494,0.20760045523453619,0.003178431784004787,0.949952642267933,0.3219458224839855,0.2854354392100116,1.7204685034536746,0.0004164688372030323,1.0585110247185965,0.3733318820839252,0.8823629596705771,0.010872069148496144,1.5875462443032944,0.17372840293413372,0.46149866325864464,0.7754094812015513,1.487559159885844,0.1128246487826684,1.950619256162272,0.6615642983633554,0.06946923261232885,1.3900438310788292,0.0680334281505306,0.5524844748623433,1.951834816756252,1.278227250069262,1.490995698405949,1.8562062604885845,0.4581825656796933,1.9794625201600649,0.008902422558191958,1.788981760588126,0.8862769133800307,1.99644996568869,1.0545769213265697,1.674713363150972,1.717730291393774,0.2826844030062915,0.3248473274814505,1.7573905560404113,0.0035000886356660876,0.20520295339601502,1.9897847743809565,0.40878950329315134,0.020417611624015564,1.5423177426304475,1.2201683201739209,0.5084857268523044,0.7223446590648945,1.880318391919157,1.334164115373374,0.6151027395586326,0.6105044504693458,1.930312570626474,1.443454697500904,0.04956569036602898,1.8874499159773106,1.967207440739883,1.5465011955287522,0.019427131817366217,1.8266068045585233,1.9904835023575145,0.2082395075586594,1.1182282533931631,1.6262040449420594,0.9408946379033871,0.28616821761045763,0.9997742284412416,1.714147933023098,1.0595561097668085,0.24557891605189452,1.996868822450181,1.7920362285519775,0.009578745175804482,0.17313916033645682,1.9804841957034436,0.4538770087170979,0.03290734427077868,1.4954592743652138,1.9502938165069459,0.556950064342677,0.6701143457306364,1.904992791399199,1.3853139771679561,0.07136057014642261,0.5606152534386826,1.9490142489922906,1.4919074581675624,0.033954536556537684,1.8608576420546243,1.9796730681560262,0.17084906261317545,1.18139697808725,1.794522935210721,1.9965375559884384,0.24290436172133678,1.0636325868774683,1.7170009119294458,0.9956900069293577,0.2890344232890252,1.9998836550034114,1.7514360909648228,1.1141716887401276,0.21074088425665105,0.8270866626222088,1.8243013914636952,0.01863416871221213,1.5499170044124002,1.2113104252656235,1.8855600786133575,0.7310708332341815,1.44711167527939,1.931802772497977,0.09694615326874256,0.09137369104193316,1.3380107698042478,1.4353057560510014,0.05242533595353149,1.8915944612614375,1.964863611455526,1.5388817631977334,0.021246886926169273,1.8316780118884481,1.9891942328577275,0.42857786021818145,0.0038498157606249306,0.32040832592172563,0.9318414974705761,0.27984470956720187,1.008845669029493,1.70776859352874,1.0504983298828257,0.2515643614984395,0.890335588925995,1.7864657653123255,0.008366925506637979,0.17827501529192624,0.7733696435657911,0.4463002960362258,0.03063914265822054,0.11655600522175802,1.264557735651737,1.9096863345855117,0.6786915402339097,1.3974202568115253,1.376927137155791,0.07476413226111522,0.11562517412659579,1.2859260033346769,1.4839891989087572,0.036338090909394216,0.46494462203539444,0.7517783978558077,1.5842364286656831,0.8883573992693041,1.7999987265046022,1.995742318446952,0.3844626839053731,0.0005426669502117676,1.7232948530037926,0.9866188369957866,0.318949524795312,0.9540321650238612,1.7454197882873663,1.1051548772549138,0.41047950153263324,1.9922083887882245,1.8191316724017303,0.016931484909921912,0.14827888715977566,0.7203337748402051,0.4927672048128582,0.045557585386885924,1.4552074755333795,1.317009902827565,1.931078476922118,0.0876227558268764,1.3465343693251866,1.4271209921747379,0.05536295988878759,0.5199849073420415,1.2329818701199395,1.5312179849052587,0.02314718613720712,0.4194507311466017,0.8052386406738242,1.6278351385638188,0.004686032997707201,1.765914999783783,1.9992976442827848,0.27358046494856547,0.00023944357931282578,1.6843647201669687,1.0414363943618488,0.2576113976319294,0.8993568199413953,1.7808305817891212,1.1594953757068232,0.4556322095846933,1.9838895282782905,1.8493356330051047,0.02845071223510054,0.12084265491675228,0.6681384587430808,0.5407586303915928,0.06334465867635664,1.405728183068975,1.3685092788434385,0.6492144811165703,0.11142722338369593,1.2946069532280111,1.476031110938302,0.7626095833439048,0.4726303370326732,1.1793374967414092,0.16084363270687752,0.012892267645964517,0.37570171386064555,0.8592842497526786,1.6695468545081482,0.0008826032810497209,1.7295292722908693,0.9775487682324151,0.3123351144748814,0.002941057002887937,1.6433776905274144,1.990755483700195,0.22201113536903927,0.8449839636184736,0.3870620352696309,1.2133565018026276,0.5024210457634946,1.9726135322449736,1.8769868674136703,0.042889985794122065,0.09604877970779313,1.9382343681577563,1.9277307363353773,0.0839469024736802,1.3550294516447001,1.41890107941731,0.7010616187394403,0.13790234658560696,1.959937949002008,1.5235104913232858,0.8162021211610773,0.42686080601836085,1.125154114391804,1.620748589872317,0.005604157172139912,1.7717158881333632,1.9989165940665619,1.709246209581537,8.207730607279196e-5,1.6909509033840218,1.0323710489337776,0.3531565796372247,0.9083863331420328,1.6004569529166617,1.150533507873091,0.18874916256067975,0.7910770167444308,1.8445123019972267,1.2665763728870798,0.1252016527229678,1.9584142913309464,0.5327192692952516,0.060205907535126224,0.07397178092459378,1.9178627737328708,1.9467915504753093,0.58522184651653,1.303263659160082,1.468033849147652,0.7538072325439553,0.16696855295515522,1.9738516887461104,1.569416431371462,0.014384831883890836,0.38281387720851723,1.9939060889868818,1.662781319555135,0.0013047595432177372,1.735703656744334,1.9999657491971745,0.3057772938603769,0.0022868610987882843,1.6502958425289578,1.0870960366200402,0.3959221692174466,0.8539521175983186,1.5557315080347185,1.2044851664844627,0.1579254499439533,1.97468197026778,1.8725918296982975,1.3189950336330725,0.09996524084459102,0.6253358290122404,0.581872743717889,0.08034643347773829,1.3634953176806919,1.8947324909229737,1.9630067291585367,0.5359792663937027,1.2505863906269048,1.515759916721216,0.8072927926100372,0.43431804598335766,1.1341490704675137,1.6136109581883658,0.006604112729131528,0.27502103848170856,1.9984533404435738,1.702822022564267,1.0360526375101504,1.6974802264803173,1.9980094508148387,0.3462651140015707,0.007490328057034756,1.6076862808062855,1.1415592522511764,0.19408659292953967,0.7999568572103937,1.5093357807311825,1.2578222333836182,0.12963263992730312,1.960963666072934,1.898048733392454,0.05714449445847203,0.07743393424692091,0.5750882823981498,0.6322829232149365,0.10325103013419101,1.3118954087483705,1.868913039098886,0.745025141577836,0.4881313267823304,1.1971559705496764,1.561935838747503,0.8613575450673439,0.38997683038429143,1.0796404687129053,0.21970200173934828,0.0018091009963948634,0.30041179305681964,1.9999996840172107,1.7407503543062939,0.9812317308245186,1.6571604800189008,1.0780554935786615,0.38871777124967344,0.015676838867104026,1.5632502836593143,1.1955970035578491,0.1628528759394693,0.7465628377816924,1.8681249841647922,1.3103844010048125,0.5920410961070112,1.9443571313278585,1.920806500918457,0.07682164513087253,0.05767545204395674,1.8987469997709767,0.6837982971459753,0.12885085644613914,1.259358080556792,1.8404820200807186,0.7983993224290048,0.19314632302123358,1.9832242829711526,1.6064228308859705,1.99901184329136,0.34746907386077175,1.0248925030334246,0.2551484420090008,1.4208364149226327e-5,1.7039521521411225,1.9985404720848823,1.776452319038896,0.006422944909520889,1.6148656006343522,1.1325733473555752,1.8456317672544391,0.8088531597392905,1.5171214059861329,1.249046877027769,0.13413525189246434,0.6939305380520031,1.8940212957715805,1.3620136907858276,0.08097200789535053,1.9249122779102628,1.9407967325212017,1.4698831542548,0.04074917946943779,1.8733673256427075,0.7362640331463208,0.49594532591853313,1.206041237011866,1.8095248849012235,0.8523794254981145,0.22673340972803968,1.9917427019397684,1.649087184970203,0.9705733960840045,0.30692253587483387,0.9700697215307538,0.29283357568728885,0.0012248294835326412,1.66397103808863,1.9940800903904317,0.38156367726323037,0.014117372185130539,1.5707227079744481,1.1866927444524944,1.8736126436664224,0.7553485318655779,1.469438290732825,1.3017482260486737,0.10802003322887077,0.6422181473695547,1.9172305759013568,1.4125549279814604,0.06075043815678893,1.9026875484248658,0.6752053132820772,1.5175526314290098,0.02670598939117086,1.845362696710682,1.9851995266787918,0.44937156266067024,1.1521051248969048,1.5991847994945498,0.9068032105379081,0.2626445928271912,1.997280382228206,1.6898006708753557,1.0253962402372738,0.2684590813354766,1.9989893209002028,1.7707037724394574,0.005437325764424461,1.6219943215962322,0.7979057976236693,0.42555865392346437,0.024774925357301747,1.8296269427420273,1.240251025966098,1.8989678279574793,0.7025792177913058,1.4203442521942664,1.3535426537407909,0.08458571071273413,1.9283230033665404,1.3099053519731538,1.4618562080499804,0.043351836002310074,1.8777497405508479,0.7275246282234775,1.5636665749506788,1.2149095478125749,1.8148172824681752,1.99311274260301,0.4044527442573278,1.0977118522418692,1.7404117524656932,0.9615071037899171,0.3134903138137397,1.9998206800257248,1.7284409219210342,1.0801427545567484,0.23219431432679793,1.9950247966975945,1.8044652859439325,0.8809257345313277,1.578148166055171,0.7445379323907415,0.4712801464798022,0.03836357254829614,1.477428734201761,1.2930872194576277,0.5755444809917791,0.6507038186690515,1.913579169629289,1.4042744890276029,0.06390271752337706,1.9065538126067918,1.2573353396934572,0.1200861167903613,0.02882849391293907,1.8501738062776547,0.7806628832775317,1.60808638675916,1.1610647456008454,1.781822888882155,0.8977750952283826,0.36132387675313915,1.9965707741615644,1.702463478631021,1.016326689614628,0.27467406121715277,0.9243792425133973,0.3259157484939166,1.1346483953028896,1.6290718570512066,1.9880696692937203,1.8358089336148766,0.8266922212932811,1.5325643535612894,1.9628708182068437,0.5185907364051283,0.7112523730490707,1.4285580533941256,1.3450425227646423,0.6258030695584405,0.10018496233579843,1.934492238640646,1.4537912545140554,1.3376338267817385,1.8820599231831512,1.203991891522273,0.14744685053654427,0.01722406261325038,1.8200426266325627,0.8344603684187191,0.21535710294449217,0.0022529290850855643,1.746478682465265,0.9524439791749169,0.32011458639425716,1.9996077559448997,1.6624039111532773,0.0004915581791404833,0.23803781667833934,0.8698474470048303,0.36740875196116374,1.1887493426952827,0.16668989024731584,1.9781448427166493,0.4636021029753785,0.7729795943683443,1.485379888836502,1.9466292524860234,0.5673482290504712,0.6592182344465615,1.3783993171624822,0.06670423334092379,0.6771863281250823,0.1254458951927886,1.9525966384713838,1.5019441247659768,0.031030918627071302,1.8549149528631,1.9819276139290793,0.17736998090489864,0.008573419876651167,1.787446762577071,0.8887553922682748,0.25051085764449466,7.574831903522927e-5,1.6765522619971138,1.0072557954268477,0.3342049504466096,1.9996403601842176,1.620353451324106,0.003711697182742224,0.20369169249858443,1.9894260829390609,0.41080304413775426,1.2422829932822346,0.13764711042117939,1.9652801465929712,0.5106594717620001,0.05191849795314851,1.8814989110427804,1.9275425391042678,1.9384085974309342,0.6082083346794858,1.3271032804203202,0.08778676881273073,0.7295398214072061,0.5019840196879171,1.9678379553257144,1.5485883736133224,0.01894091096750483,1.8252004873874224,1.9908237163987996,1.6437633662712772,1.1157510725975117,1.7524841828208195,0.943384768066757,0.28791724427475807,0.0009038963428052993,1.7158917133869411,1.0620458039759926,0.2439440228508677,1.9966684888856359,1.5764384841745107,1.1798332011116586,0.17173891789314377,1.9799907700631638,0.4559682010286974,0.03354496534374818,0.11119618088938199,1.9495142464931707,0.5591875811322884,0.07077190796850186,1.9060511214413918,1.9056680442561995,0.6686138406107187,0.5583759868813917,1.2748241163020202,1.494077590052631,0.7827061980251011,0.4552095867985114,1.9801703805653739,0.17224602137335232,0.009799531786373383,1.7930058352596556,1.9967418422512666,1.6847320443077838,1.0611431369374682,1.7152599693711017,0.9981843041410654,0.3274638358284625,0.004734884110756621,1.7530795118160376,1.1166493303584502,0.20921168459535,1.9907010741761213,1.8257109821981112,1.2334718703578866,0.14227552873000937,1.9676100396018068,1.8867159914243299,0.04907254365122349,0.08741660141393626,1.3279577793459163,0.6090405771138437,0.09241816547464998,1.927880144042788,1.881071512971023,0.720817600013061,0.5098709649869049,1.9655159922051864,1.5409812446821558,0.8365256634322987,0.4100725522524906,1.104653761074423,0.2042390719474958,0.0036342560148885372,1.6210625263471377,1.9996642042251191,1.7236427215281171,1.0063514321274825,1.6758860017029584,1.0529892973917843,0.369031772792064,0.8878566670857325,1.583827400398976,1.1709022605929995,0.17685610526626494,1.981756051457478,1.8553837689536192,1.2864088267169433,1.5011617176068484,1.9523211025393539,1.910719380466962,0.06745818811400128,0.06637984286344789,1.9094769528896376,0.6600686237127595,0.5665330484127362,1.283534939983505,1.8538268715121298,0.7738604578799936,0.46283905357771293,1.978332486468859,1.5862589496393298,0.011107129830524642,0.366708577955424,1.0499950698657468,0.23862382691611705,0.00046361373744618906,1.7215701859408297,1.9995820189964615,0.32077806593498615,0.9515406377296631,1.6344806204991,1.1076350283176457,0.41249612038427275,0.8335685296410167,1.5384572217338293,0.01739159573373994,0.1469745313839419,0.7179398674637826,1.8824856515002732,1.3384849651779003,1.4529851649775045,1.9341699106392933,0.6007072462615837,0.088646639639675,0.0481491324033847,1.8853258937321624,0.7121183532541601,0.5177982442603928,1.230555479028659,1.5333295970178207,0.827582990907627,0.4174216097187742,1.9882085472120339,1.6297746202257208,0.0044479398222867506,0.32524799678020366,1.9993880045914594,0.2752969409569437,1.0154224193437082,1.682543892626745,1.9964955335776373,0.3620200395359846,0.01022269098119466,1.7823864531844367,1.1619572560892908,0.18204103126021476,0.7797806113764647,1.4914686794897984,0.029044479841669912,0.1196567737056684,1.9550495896411948,1.9069351736000253,0.06422120951532062,0.06966822911243442,1.9132110183336186,0.6515513806390045,1.4958969116735799,1.2922224308480739,1.8585139376194093,0.038115868697749744,0.4705127247079478,1.1768830705654283,1.5788858453942534,0.8818237329900052,0.3737551381016787,1.9951144913765877,0.23277405167243825,1.0002781249617372,0.2858154208442366,1.9998031448731672,0.31414819095532076,0.9606034056558005,1.6414661751098985,1.0986118687144906,0.4051794979257436,0.01952609821068141,1.8153412368809725,1.2157927121843544,0.5045862021128322,0.726654574917054,1.8781826895701301,0.04361562558137966,0.09498493729438906,1.9373684183222752,1.9286588508338895,0.08495011140853748,0.05096924877826581,1.4211646865403438,0.7034427970138151,1.5427410342567907,1.2393730322692362,1.8291216693991617,0.818654507020541,0.42481860905395175,1.9867789238198545,1.6227022196809655,0.9364196605146023,0.3319708807720917,1.9990295627574541,0.2690759873832925,1.055080059879483,1.6891456152642363,1.9972133203584028,1.7892912628089026,0.9059028006563554,1.5984604947893564,1.1529989237078797,0.4501267229154765,0.788638403811502,1.845845466459427,1.2689795911002257,0.5529351543095404,0.674350093564629,1.9030763327131632,1.3811728790885587,1.4117309261559818,1.916869933302326,1.2815264245636708,0.10842924740167015,0.035122633945060766,1.470236638550605,0.756225532804536,0.16835105890927904,1.1858041845279486,1.7972374291929156,0.8728207308208066,0.38085323354269474,1.9941779449903527,1.7201189659777243,0.00118049003114451,0.29219442267437545,1.9999419943865702,0.3075747564788709,1.1097164485676794,1.6483989418250586,1.9916263149109552,0.3979118247708646,0.8514850101018581,1.5536561076652369,1.9693479958677473,0.496726623082951,0.7353917766659442,1.8738074597356658,0.04100511087723513,0.09888097649134742,0.6230243713907792,1.9252557289544483,1.4312650450443472,1.3611705004635517,1.8936157439353307,1.963675892669191,0.13458804962596094,0.022176012508331566,1.517895267796178,0.8097409465188637,0.43226294153998956,1.1316768918203626,1.6155785753745566,0.9273691990945812,0.3387487385923704,1.9985889082202006,1.6810121391990767,1.9438328191845322e-5,0.2545453141989492,1.997849043899162,0.34815464873518287,0.007798135249677873,1.6057034687604292,1.9830589205911153,0.44257245225766684,0.7975135897340128,1.8409717073523018,1.9544267913020619,0.5448391397973853,0.6829404444742515,1.4015304037355572,0.05797853526532426,0.07647440285805185,1.9204533966942696,1.9446542168664285,1.4800610195598978,1.3095245564418558,1.8676757420002628,1.9768640115744818,0.1633478963245122,1.1947100081879047,1.8026807394354685,0.8638281945596312,0.38800228015800564,0.0007003952528683577,1.6578418914386588,0.9821359633408974,1.7401425038293872,1.9999985561103872,1.6398584919890702,0.0018638846579158708,0.21913671186684147,1.9927570017760794,0.390693698995087,0.8604619517159164,0.15063673324760218,1.9715368871861891,0.4889084597091541,0.7441507537037277,1.8693603220457569,1.9366370031323141,0.1028511710823331,0.6314420526765008,1.3507364917517706,0.07778325834812594,0.05684353754522242,0.523922848641104,1.9612134931985303,0.13007831728049546,1.2569483188913577,1.8391278916373976,1.9871161105434731,0.19462234815441493,1.140663917564246,1.768789873529128,0.00738024888420985,0.34558101247374806,0.0001513849266463474,1.6981280265591372,1.0369564189579186,0.26062260679391447,1.998402651884596,1.7780217560605078,0.006708285432743488,0.18607503823137783,1.9846811724373974,0.4350640537414566,0.8064054387822003,0.12298797722633081,1.2514618172252527,0.5367805816390007,0.061783747426494284,1.8951360252109843,1.9160320995711833,0.07999163025720091,0.5810513825966166,1.9416393042526716,0.10035975591232615,0.040047382226830575,0.4764449032867458,1.9748837881108727,0.1584135839857097,0.013619790826471245,1.556483151217151,1.9944013763139252,1.6662099838895963,1.0861950535950722,1.732588366255349,0.002226141230634804,0.30512663800216266,0.9675766251433209,1.7363158984825073,0.0013513519568242316,0.22483578244556623,1.9938059921230753,1.8112814472731904,1.20897418104404,1.5686727502255233,1.9736458282441198,0.16646856513434238,0.7529307852317348,0.09797513035180683,1.3041253288316688,0.5860449356820936,0.6398900635403277,1.9182213465169367,1.4148257904595238,0.6967862291648446,0.5319198862383632,1.9586719930059089,0.12564017301992425,1.2657046059575203,0.4305405323332129,0.7919615284622455,0.1892782861765795,0.006088141451489282,1.6011799045373092,1.9986979126082702,0.2643318034118918,1.0314671255261187,1.691604401635527,7.089923958247812e-5,0.26676074464960287,0.9128518090418283,1.772290731403781,0.005700176136823498,0.19137875791549275,1.1260513364585927,1.842102786294656,1.2622525216658396,1.5227397245548127,1.959684136546227,0.5287601429937918,0.7001987121547134,1.4180796984803972,1.355874774592682,0.6365534550411045,0.5893055707976057,1.9385469017271313,1.464067108890406,0.7494642927460575,1.876551939214369,1.9728233389616974,1.5657251250894881,1.2124728543864958,0.3863477039589681,0.8458774789146137,0.22257965824818293,1.0952291771977614,1.6440697777143665,1.9999928059441114,0.30255729113619556,0.976644621234899,1.730147527106293,1.0826287890237603,1.668874831446884,0.8583889217482699,1.5594532582024834,0.013037424571305856,0.16035209017975804,1.1802271453110524,1.8703931378504364,0.03905082010112115,1.475235575130331,1.9428380599963342,0.5778042686138339,0.6483677087737933,1.3676683908757283,1.8967258001828693,0.06302827897554386,0.5399554433478806,1.956051601237891,1.5119136474262986,0.8028953555395835,1.8488579036186585,1.9840508094508436,0.18400094056646754,1.1586025036563152,0.34399924220462585,1.9981940453464473,0.2582176110467074,1.0405327700133986,1.6850238628131127,1.0188206133328819,0.34287898229658476,0.9218923128531014,1.7664961529633731,1.137119568855892,1.6271309577148796,0.8043516545451455,1.8371757590623483,0.023341044745872397,0.13184903163987305,1.9621944534071127,1.8960674736917797,0.05566009014702589,1.4263030783550528,1.347382573641902,0.6281173273398999,0.5975935560957903,1.316152035165317,1.8711234358696711,0.04528811185290038,0.4919880057852969,1.970682833686597,1.5582216005944236,0.8569188274697097,1.8186125776707809,1.9923206596769376,0.21690588442375536,1.1042554641473852,1.7448166251969304,1.9999860693465297,0.29608503269305253,0.9857145393004559,1.6605332482515844,1.0735849783413305,0.38517568777388866,1.9956585446963844,1.8005410313596686,1.1911982280826503,1.583502206484365,0.7509024194897438,1.8658909381858866,0.036580068548390465,1.483197597958834,1.945822331571804,1.9190486281528532,0.0751076271053358,0.0591855224691159,1.3982499903739198,0.6795481004335312,1.9093103754435714,1.2636854666646415,1.84290286089011,0.03041738520898185,0.44554742695148286,1.9823966240781083,1.6028517872271877,0.008250585431864188,0.3508729899502314,1.9976080341382454,0.25216446185551034,1.049595078955148,1.7071294070189398,1.998772578760308,0.27921753068521926,0.9309392443461411,1.6183951807559325,1.1281281795430849,0.42932028243190634,0.8132558228578439,1.8321798384911325,0.021432724193933383,0.13638690617612637,0.6982018612755365,1.8920036332102546,0.05271470534540379,1.4344913766567688,1.926607487321923,0.6197118028169699,0.0973349803057989,0.042025634481915874,1.4479204442763987,0.731942009802636,0.49982258609184416,1.210426376607366,1.5506721386131148,0.018460793852253632,0.4007732866279574,1.9911577659540938,1.6456700687790393,0.0027157606395852296,0.31016142623993737,0.9458752504661487,0.28967070121671457,0.0010130336578496602,1.6673168714866895,1.9945572208022475,0.24231383351027747,0.876371515391815,1.795071783214437,1.1822862842676605,0.4751800871991807,0.7596981543482106,1.8613174821367413,0.03418859929107976,0.11005583514273831,1.9487287690034507,1.9154353609563466,1.4084666971016708,1.3844792669926598,1.9046076719566498,0.6709682381655937,0.12227534418351105,1.2724249989069594,1.4962446479959564,0.7851415825946724,0.4531196249359736,1.1565348381954348,1.5955893114779727,0.9023402507724089,1.7914838015617685,1.9969399272080288,1.6865477524874395,0.00017832993105360018,0.27152321130837775,1.0006786126492646,0.32931187538752826,0.9399918590257673,1.6254986774233648,1.9873526649686717,0.42189455154468203,0.8221753588275077,1.827115435708117,1.961622064173922,0.1409958496473248,0.7068627266020854,0.5049341283513571,0.04984727507858622,0.08639954153922247,1.929980491310236,1.936115696043568,0.09346828649758432,1.33331158318557,1.4397914882276743,1.9711839848575061,0.14985375906681297,1.2192860378680905,1.5430773604101382,0.020236192001977016,0.4080603436218557,1.9899133073183362,1.6387164070427902,0.9570274038858111,1.7567997177062014,1.999725729227829,1.7253619781662253,0.0006459196975160397,1.6740455795060958,1.0554799352237518,0.370968840581012,0.8853784429538447,1.581800511772098,1.1733593396471353,0.4674799585412496,1.9812787178532294,1.8566731460644204,1.9451404269944885,0.11422965622430525,0.6549083394804187,1.9117467602377114,0.06836168852235236,1.3928375905904598,1.9084371047477173,1.9539824825572918,0.11796474366382803,1.2811421125978875,1.4883485692008551,1.9827856110081412,0.4607368271081915,1.1654880002624692,1.7846104395916544,0.010739477100824901,0.3647801703633321,1.996189779536029,1.6799238043870781,0.00039077921721719644,1.7198410295734332,1.9995067991282491,1.7619960874688365,0.004117124571531461,1.632550700201469,1.9887502176353267,0.2132546253084021,0.8311095284426611,0.13533318895224933,1.2270713917778553,0.5146658845861969,1.969249521578676,1.883656076916171,1.3408309847434468,0.09012569557626149,0.6039911448268244,1.9328868266507215,0.08967619350752931,1.3418505660749993,0.4980105954596581,0.7145079617601093,0.14511220758888121,1.2281276535187255,1.5354378909792574,1.9914334195210717,0.4153961128472283,1.1111925791293231,1.6317101836963652,0.004216040550611533,0.3234091861645423,0.992691852556605,1.719087652351727,0.0003610451458111452,1.6807188185871749,1.0464201926990047,1.7963399745115605,0.010581511650881725,1.5891546540563135,1.979067223274071,0.18060865941260984,0.7773482237785677,1.4892948705402933,1.2801009680211193,0.563310509714883,1.9543071911473873,1.9079831295413543,1.3918398327408776,0.06875641351772632,1.9121917799210957,1.9512230490394822,0.11372672808605955,1.289836090383798,0.4513678548455299,0.7674585331941415,0.17482908503728867,1.1744275438978136,1.5809179239478166,1.997101418919594,0.3718124585733067,1.0565629624221524,1.6732439036141982,0.0006854889081735482,1.7261082448157565,0.9379019435735613,1.7560902417806576,0.00333578238850607,0.20641166974885583,1.1010937116023154,1.8282904168029837,0.8400575964875878,1.5439878703372711,1.9664415870993694,0.15042542045023988,0.724256111597863,1.4407654258869458,1.332288684991708,0.09392672550183401,0.6123372511089149,1.9295811876099056,1.4416709839994255,0.7252262215860699,1.8883649511288767,1.9667003168524206,0.5235706965059943,1.2369504959600575,0.4063740591170586,0.821108021134943,0.2070260602561932,1.1202031824462932,1.6246519752998403,0.9389091185981512,0.28477661922993913,1.0017633425381218,1.7127541509712834,0.00015843344579202778,1.6873360395719792,0.8832986738048946,0.35696904747359715,0.009306050204578087,0.17425948672299874,1.155463387648092,1.8577513854850152,0.032403178321411374,1.4971861003627307,1.2713811358361489,0.12279562585000858,0.6719927632410567,1.3909112358623879,1.383477689559974,0.0721003357654405,0.5624029414628068,0.6453939256001331,1.4901746681807322,0.7783320978774882,1.8618680913228016,1.9792721122873453,0.16973873903128123,1.18335273344351,1.7957292211701974,0.8752951790176898,0.24160636341887254,1.0656175435437791,1.666508599874955,0.9937009202298475,0.3241525840061721,1.999912018359907,1.7501221754886114,1.1121953559220885,1.646498007057252,0.8290461564605588,0.3999052262621925,0.018253904617050565,1.5515772626816804,1.2093658097055027,0.49888358728953885,0.047694871661455696,1.4488900094945758,1.3237190403524202,0.6049179408282476,1.9396392416252626,1.33988214004929,1.8831832345689763,0.053062800855100845,0.5137838544809672,0.6971678872704015,0.13584054176067106,0.021656675624975863,1.8327808383109156,1.9889006501033277,0.2015318681368813,1.1292038939352969,1.7613422307858577,1.9995379788906082,0.3368796550759645,1.0108346874096619,1.7063619952249558,3.810127089476367e-5,0.365559846346593,1.9976824287888795,1.7852356654588584,0.00811211550256763,1.6037168882838362,0.7753074505442945,1.8530527890808393,0.03015245234432984,1.5050364154666733,1.2626389710019563,0.12718706947854974,0.06584877182774518,1.3992447543604989,1.3750839890171371,0.6558556166029469,1.9194756276648368,1.2878315092760002,1.4822476198126862,0.03687133915676499,1.8664330465902474,0.7498520279520684,0.16471671735241178,0.011783438108141753,1.8011906154742863,0.8662996912552839,0.235724838290849,1.9934477431107565,1.7246669833448058,1.9997015879742732,0.29685591383938115,0.9560192670108555,1.7440923797201686,0.0020192097304314593,0.21758094254052673,1.9924542483532974,1.8179890853055638,0.016568947781272714,1.559121264319442,1.970942992748792,1.8803680582565918,0.7417402614115354,1.456977652792812,1.9357603300380233,0.101752155696613,0.0868103162484396,1.9227406949975885,1.4253216015772454,0.05601749096699071,1.896548477795852,1.2349157846518606,1.529531686895635,0.02357461502266689,1.8377685424953323,1.9875121428573976,0.43768963737480293,0.004880341258501453,0.3285637343084139,0.9208109421976096,0.27221488059099963,1.9982180234035358,1.6858137083737512,1.0394489070504134,0.25894551185022385,0.9013360331880096,1.779586352559899,0.006999805796797154,0.18462845262480299,0.7841561681950086,0.4371239505287391,0.02798153760767974,1.5128451698295708,1.9563690800943272,1.9050373315314861,0.6891851550052112,1.4075454179845026,1.3666594218514978,0.07901697652191375,0.1105165038183844,1.2965072042882553,1.4742808860519974,0.03935155740329843,1.870926700861607,1.9754362729502035,1.5752242165985533,0.013212592507867216,1.8065860777491634,1.9946618534545166,0.3932171581375167,0.000968132723355497,1.730888282570484,0.9755602003238316,0.3108923221551303,0.9650837304804095,1.6448991815841074,1.094149320328048,0.22326239096192813,1.9935257108152702,1.812737234604941,0.014964920007331517,0.15412660792706223,0.7309699853026075,0.483266239215173,0.042315583798760104,1.465027690228759,1.9389207461771818,1.9269864640119738,0.6375642201627789,1.3568882824141912,1.417094072067013,0.05904986381899113,0.5297171581007667,1.2437236928569484,1.521814692547875,0.025572906967881726,0.42849193504960414,1.9860423707062227,1.6191878774438162,1.1471726795379136,1.7729793730099621,1.9988220516967767,0.3505683989877797,5.8570866322549264e-5,1.6923874701338193,1.0303829136477456,0.2650669698681756,0.910367263113076],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],33:[function(require,module,exports){
module.exports={"expected":[0.0,1.4893256757618758,1.5869843187742858,0.03301563472808622,1.4679531665624277,1.5556727801915762,0.05876261810376693,1.3895382640382172,1.799231239102681,0.016401411560051038,1.063244882713126,1.2598415605388933,0.47510709728341816,0.30131630578238444,1.8910717884987964,0.010486852768968435,1.3798193065293205,1.8055151450208249,0.22996046272931459,1.5250363944186773,1.698563069236116,0.1365547702543768,1.989488781432731,0.6200247421232846,0.7962204313556671,0.09949550656004347,1.6400160235215298,0.02041756433434594,1.042216079569228,1.9591314628784522,0.4931464731161642,0.28640644095273127,1.8525436668994875,1.3005910370326064,0.001839326946497466,1.8178143622139766,0.24356544151746895,0.5486294840332153,0.7958903364477785,0.0996421800764945,1.6402750645531665,1.5901857704315998,0.07381792433516154,0.8584898199759596,1.994734647820146,0.6596252816478934,0.17015499076070562,1.742381202012393,1.4702091094824519,1.817620273718421,0.9997744636628727,0.5489303892219666,0.5301890348040607,0.9786628912835951,1.8295932289945842,1.3407988227828729,0.00531168113062519,0.15855978434915596,1.926352070387603,1.9966765508207214,1.8528959330442745,0.08198504641010984,0.0017986713059113812,1.6239155602347362,0.0906561179987494,0.8166030093429999,1.9981879173416368,0.6998392055104206,0.147220663998205,1.713277483012531,1.3206593193988434,0.040996270596653006,0.27177552571199803,0.5114583370099756,1.9648914589339688,0.2295652676550658,0.024880231083289073,1.4512688839031185,1.7565090462114035,0.18225118534038198,0.6396376098973453,0.25776841623532143,0.8796466549977351,1.8808647307215831,1.5728248131678666,1.1417312200970637,0.10913302706899886,0.4096339890300359,0.8369568097517993,1.9004549624611502,0.12582311849530126,1.1064957963872128,0.09037575909811646,1.8635026756320208,0.9149689338448054,0.47486667863554566,0.1475730585359083,1.0635267965216202,1.506661030546415,1.4129880617682202,0.9580070130393104,0.20741623959731526,1.95495789815193,1.0204396506826536,0.29656724956077296,0.051662641733518644,1.286827501488872,0.18186322448312264,1.9412758420024607,1.9924043782553786,0.3278659746658801,0.06622336703874065,1.2452572256440961,1.6512686477920822,1.925843218271183,0.06848468926930684,0.33252005747936264,1.993155942454766,1.203230824900265,1.68338085942293,1.280817405461184,1.457453119226186,0.30103599541913295,1.9871967434784967,0.5618274238613482,1.7142221318400517,0.9642701307610493,1.4186882830310106,1.5012473049230308,1.9794015740683921,0.6009906999105725,0.4802110352481853,1.9977461273513497,1.37914477803074,1.538088922982217,0.0010389573338869251,1.6125987710702228,1.9031634592439954,1.9997114416153767,0.40458660320764095,1.5739298131116404,3.0247359807944463e-6,1.5779511555945307,1.3342640246265312,0.8734267574887734,0.43977983259018405,0.645491390174761,1.9685731234698691,1.7523951358664358,1.3745883487046802,0.026288827768876977,0.23357625594676723,0.6055060958032852,1.9783964458035024,0.2674942495494962,0.8653655397655016,0.01737323446276795,1.7176564739507096,1.1559694307044492,0.6938662978127164,0.2975265124363763,0.822768124529792,1.9066241294676505,1.6869638513700227,1.1984119075060125,1.9925693938976412,1.8561514899641143,0.9293238523108266,0.2252592657465533,0.15518949391403858,1.2404853814737349,0.0679950019493274,1.8330766857616791,0.9723969156878893,1.9396035703003975,0.17904451478838257,1.2821116051308459,1.8139954657630553,0.0563289886962276,1.015521314775908,0.1736686980340707,1.936316864864028,0.7478024623854406,1.8382828945429823,1.7823248505763711,1.058616847606809,0.15015531399012028,0.006032658500489729,0.7897584741003696,0.3218679114804709,1.9913713356456855,1.189111986859153,0.12822245553762224,1.9025836339147046,0.8321054891568981,0.2908114428447436,0.10690922678968884,1.1465989639667937,0.5049658608639286,0.019176705151442874,1.4055693985189628,0.26107391010659986,1.9763927234037668,0.6142344919262692,0.46796456779311735,0.028491870149798926,0.917656923769318,0.23271061858510933,0.00048634832100591385,1.6011549777103151,0.43195274448072807,1.999953679230074,0.41621615884147256,0.6724978512269593,1.9541539790370104,0.6951505481092168,0.39699736505659555,1.9994388121111952,1.2842423488371275,0.6320650150920598,1.9720539830808566,1.5300746140123127,1.3878994501215944,1.9970652069833168,0.4883326507001883,0.5923164577073965,1.9812716833505049,1.4930221595358921,1.427278061828393,1.9928372782338095,1.7075551790882733,1.170175305673913,1.9886644325046914,0.3078467083971509,0.8086161830833278,1.9126053348367371,1.6764295531966664,0.515166463655712,1.9942184816438562,0.3396087246000905,0.7664759612887471,1.929383984958732,0.16298107570716824,1.0347651006775223,0.06287303386611498,0.3725989244091924,0.724770043226929,1.9444341837569796,0.1873509037609452,1.2958957776774813,0.0486977600243802,0.06119097786908667,1.029916221644985,0.1656454868848387,0.21323208172914843,0.9485377919121024,1.846046435676762,0.07691447244054483,1.0729842646308034,1.9692405336428314,0.24057647627072254,0.9055276164714009,0.3113563560676865,0.09435470457996642,1.1749539420535737,1.704118569603261,0.013982824655674131,0.8626931390403598,1.8888284056281803,0.11347923926284509,1.1323410757959382,0.10149740010652641,0.022084583675659797,1.3923664312147712,0.25144916081256385,1.973181446651985,1.0894820840279131,1.7626744695697703,0.032005051887125324,1.3523438616012329,0.2235565432797464,1.962358332426133,1.0464566751178965,0.4201619268639535,1.9999886060918621,1.3116660093232038,1.597270989993137,0.0003468231638681374,1.5542139626490354,1.8155593753916133,0.05722496817444733,1.2704085263057814,1.6312956544551611,0.00241182417396113,1.5178106556283604,1.4011301320863598,0.02013378165068358,0.5007564312716775,1.6641462468142887,0.00633212141356454,1.480444333828373,1.440251519988446,1.9910141378298443,0.5385783074370332,1.6957616721401483,1.9907237304112901,0.3183104018248497,1.4785541361720378,0.0065764402447585635,1.6657550174074323,1.2265507057950606,1.995661447660368,1.4031022804508542,1.5159667461326496,0.0025636464900431477,0.170946188561785,1.2683341768958796,0.05794535127927736,1.816803926702964,1.5524197705830782,0.00040586660847341527,1.5989971708332102,1.309618605006106,0.04435797174637035,1.7911705898316996,1.044304926272336,0.00010711359957715771,1.9258176262909146,1.3503272101020127,0.33246963687804487,1.7640658483790819,1.6221777949856946,0.13533253689841973,1.5277853801661923,0.8179956096426777,0.02253703353328662,1.987185940248556,1.130205747871721,0.114477912107391,1.8898133778292792,1.4297153264838993,0.014344057034587077,1.705646430079651,0.601052791466635,0.09527016508679576,1.9977506688387456,0.903383502579559,0.2419796013451031,1.969768409576087,1.2151384027587746,0.07774501805296363,1.8471927725117991,0.9463867987216723,0.21456344050835952,1.9583453628587226,0.68153343555137,0.4084913214830097,1.9998162149596912,0.9894898037141849,0.1886080202082986,1.9451400029771029,1.2984713599097468,0.3742776656962906,1.9980599240936394,0.47607262472507883,0.6054438739093706,1.9301768890178241,0.7643820912771382,0.03557510224337013,1.994447459649284,1.075674255178964,0.5661934617646941,1.9134838491063422,0.29757470716023604,0.8227014823711218,1.9889855400218766,0.5513999917078036,0.1199747999650802,1.9925776311212555,0.8489827235460568,0.7804342592331854,1.981684323189564,0.15522572757566577,0.4901844906067738,1.8750353326140146,0.36150421041744885,0.24966326604609845,1.9396267444454627,0.6300629994151448,1.0059745762754726,1.9993643418209053,0.39528046023448804,0.6972026943711198,1.9616217080258318,0.6704634345904389,0.4179663383158596,1.838319812997642,0.4301813563827741,1.231207423485107,1.9656140375688977,0.23133105748038896,0.9198037667100303,1.998720111067839,0.46614199081447805,0.6162226297437621,1.975925195340308,0.25962431059667757,0.8769020505533461,1.8821703035489485,0.10693969202043074,1.1465319806724015,1.9844213452967954,0.28929450086825426,0.8342292697098536,1.9906497291480492,0.12716924540718166,1.1037459500960278,1.7533274076307905,0.028507921146371018,0.7918647862362809,1.9194612686072277,0.5797044298192185,1.0607669747006352,1.9959088227329937,0.03963270057376855,0.7498873888235513,1.5857159963774405,7.208188922291914e-5,1.0176749859979752,1.807182923750276,0.3860027101433542,1.2841774266979753,1.9499154249370592,0.001519572435517258,0.9745501256798799,1.3879618618438632,0.06721646863518616,0.6674052622755435,1.6533644952049649,0.22389915496602608,1.4929632456164468,1.8550364956367984,0.014791278269607466,1.2005225903290166,1.6853969882720303,0.009979274848489816,0.8885225134751062,1.8765995397164223,0.10173610534787092,1.6763796793860721,1.7161547925658396,0.016975753515467096,1.4161755537367584,1.503638096477872,0.003691553066142883,1.1153767345526946,1.7455807052849588,0.02580044268274395,1.376584618764597,1.540417589778923,0.0009167615210301516,1.61041085973055,1.2959604593030083,0.04867688853922347,1.336293318611476,1.5761920243383267,4.669558395509199e-8,1.0293729756837882,1.3368688572314698,0.04886543498695706,1.7732325698077176,1.0730517984206909,0.0009431134792570184,1.5399032275809827,1.8253328272653535,0.025662684088292642,1.253910518019761,1.1159838306301468,0.0037442079737070033,1.8962613844763165,1.4167312299528039,0.07900274813602681,1.715728077430151,1.6768297338408336,0.10146767763444398,1.4653810542812113,0.8891299240028594,0.009893328434492643,1.973165867444721,1.201121338189161,0.014896196560324926,1.8547193876196586,1.4934949276046878,0.22351387223864472,1.6529016686934739,0.6679817280638729,0.06699634396300647,1.8315439294830531,0.9751611318015714,0.001486077270974162,1.6196372793390754,1.2847633742505102,0.38552040022080414,1.806821981167006,1.0182860865541181,0.17211456002778958,1.93534228049284,0.750479208976886,0.03946251571681625,1.7805995200984843,1.0613770331776007,0.14870122962202403,1.9192207851532581,0.7924626392210505,0.3198382741140585,1.9910050782523037,0.5386383835492169,0.12687112908720322,1.9013897398228994,0.8348320436500201,0.01907092530136767,1.9843136969807222,1.1471365553123485,0.5025651754377991,1.9956677462085686,0.877508624420969,0.2592136047845155,1.6934301448311384,0.6167870985702777,0.08811999454835484,1.9987508377988048,0.9204130124101331,0.7108915829376772,1.9654549576881393,1.2318020188717338,0.4296791972463362,1.837986443512222,0.4184634527493071,0.20409717714567066,1.961789228512981,0.6977852574981136,0.93409638724999,1.999342365988443,1.0065857635867577,0.629495229588038,1.9394174158651962,0.25006744306860096,0.3610339351953018,1.875331025744523,0.4907103906936082,0.589793080484822,1.9818005823484506,0.7810305849146583,0.32846241727680026,1.9925031161303592,0.12026523940006595,0.5508538267020777,1.9890758202351222,0.30984511327673014,0.8059028638416051,1.913732360207324,0.5667442370864706,0.5127498867512446,1.994511593015401,0.8659040962030328,0.7637881437970664,1.9304010936668734,0.16449730149108,1.032001475061879,1.798640696916794,0.37475454608827796,0.7221127262390632,1.9453394842025173,0.6459996294896662,0.9888786401001873,1.9998277456586204,0.06214699497555842,1.2564531932259353,1.9585197496689708,0.21494188425788052,0.40415004485757267,1.8475173356870698,0.4443130965110559,1.2145414753457877,1.9699173776497707,0.008061451216771265,0.9027751806742461,1.9977095111320384,0.09553069632962707,0.6004924121470512,1.706079372198475,0.2712238985308222,1.4291633549687375,1.890092116928411,0.11476203905577909,1.1295997273581042,1.9872832874933715,0.30142477552636204,0.817394652725772,1.5283044207128165,0.13563973113826677,1.6216991854981937,1.7644600137434292,0.03270272498282012,1.3497546786354695,1.9260484687025095,0.15812494462750093,1.0436943188254275,1.7915442488395081,0.044538167191516154,1.3090373816665595,1.5994864775165234,0.00042346518683489265,1.5519101923709582,1.8171563844300502,0.05815055982806061,1.2677453426318575,1.9551190315152294,0.0026075697358460825,1.5154430911434398,1.4036615472457807,0.01958544836975218,1.7256627321274771,1.6662109519053887,0.0066466064703545324,1.478017378289702,1.8637766515413237,0.012005814608518905,1.1837451411529878,1.1870629683249214,0.0892025407053566,1.4397026574654688,1.4809802813238169,0.10938004437155524,1.6636891885037444,1.7279817028406566,0.07224923959735519,1.4005701856872155,0.9608375611714889,0.0023695867929206527,1.0983786718086457,1.2709969053135768,0.029801033887217332,1.815205538261051,1.554722605717357,0.1802375351664659,1.5967806724218327,1.7843394235265153,0.043547199575119655,1.3201444861749048,1.0470672058681112,0.00015140751253750473,1.9247689362323581,0.2774655664525373,0.05428308151263783,1.7622790140570233,1.6243401969849653,0.13394677705030167,1.5254346933934255,0.8207152851228507,0.021957025030587385,1.9867409173473645,1.1329468744484037,0.0053677704120539405,1.8885481635151937,1.4322105285452347,0.2689160825280963,1.7036844361842292,0.6035899000746519,0.09409570316676596,1.9979322153244077,1.8791829104166435,0.007639253333645013,1.9690899270394937,1.2178379942092061,0.441509185811098,1.845720441655768,0.40686498218364,0.12410895956474954,1.957766891995237,0.6841558465104287,0.06098063287053679,1.3715814173907819,0.9922548553822998,0.6428439218491606,1.0670604584899712,0.24066459293864118,0.3721231029498492,1.868311976831576,1.5805929523549598,0.1626467996989096,1.9789781821065051,1.8034442277238885,0.034847798829997556,1.9941526677862038,0.11354190891851357,0.0011919004789909815,1.734171091333454,0.2995455188942825,0.3074057042373578,1.7415647205647864,0.5538730242555903,1.0893471973993318,1.4984402804913577,0.8517167517864119,0.7777374107803088,1.5622475326912202,1.1640243587150498,0.48780761380171656,1.7899344492509957,1.4603326631510598,0.24783820676400814,1.9405693943723694,0.0003503988404185421,0.08123634188682871,1.9994590988858265,0.05727013287588345,0.004252737373787285,1.960859329412902,0.20614584485945675,1.5176947919355401,1.8285351937264962,0.4324558651532252,1.2285162989072778,1.6153938837248583,0.7141254086450396,0.9170478154205561,1.4403731142770702,1.0236797986186514,0.6136706733901147,1.6958589407807638,0.2614858659799546,0.3479769572034087,1.7772161903121533,0.006560943090171967,0.14588302568032807,1.98490376822892,0.01973276631780052,0.8315029971754062,1.9902686907785605,0.12852204611198326,1.6328598297962482,1.8990405922863136,0.32231723301130133,0.28508211171456943,1.9205449623342408,0.5822151114134668,1.0580066882463823,1.309747376384712,0.040407127369016194,0.7472110667015635,1.9745976360893054,0.15772224447894734,0.46107304261552584,1.808812118103126,0.38818762410451524,1.2815251790444835,1.950775926781449,0.0016757709673359544,1.908603902271569,1.9999989268722398,0.0682167024323429,0.6647987908087641,1.6554553468963742,0.22564585898873402,1.4905555294796127,1.8564671519681926,0.014321210087364866,1.197812822532413,1.9739372370986212,0.010372731788264367,0.8857750108251041,1.4683668537181584,0.10295470874050283,1.674340403147601,1.7180819774662628,0.07769267204317765,0.3244747427395407,1.897753780441834,0.003457984659964608,1.1126295955466607,1.2571747803874902,0.02642823241529968,1.8234216725185053,1.9854067345488802,0.18852886902052346,1.6082182810992478,1.7753691888578764,0.3457582196918366,1.3336879193623785,1.0327477121312643,0.6109697986506184,1.9301271628921204,1.3394711140873494,0.3411258338483093,0.7169343743856464,1.613081744962717,0.14120029069318218,0.434870710175673,1.8268910123868967,0.02504399033479643,1.9889654857991106,1.9600434826179438,0.527630463465231,1.8950315350987204,1.9995511661550545,0.08008349163519546,1.7137942083469548,0.5904741143028949,0.24591061734092712,1.4629317994043876,0.891878464595125,0.7384446634436244,1.1669139882389443,1.2038292310688394,0.45345387442625573,0.8546150136596867,1.4958980388489946,0.2217744158584044,1.9535478541030238,1.7395958437415278,0.305295175885532,1.999971070373005,1.911151817268221,0.0013392009229137303,1.948854873813648,0.23141769131713408,0.034085188024409185,1.8051852524661953,0.4662565110473653,0.16104866440598598,1.5829760622539162,0.7531578634411694,0.876767652593681,1.3039020841587274,1.0641367494505276,0.5766431587981713,1.9181285082612622,1.3688595935927412,0.059977135530281056,1.9017127851746458,1.637603048689146,0.1255264787091469,1.9911047190314517,0.8375598610417421,0.018537221497361034,1.9838220837823195,0.14909320881457266,0.0072820369655868245,1.8805752439438799,1.4475635036830887,0.2573589636246695,1.691435126998635,0.619342635316755,1.0175395779009155,1.9988851882016156,0.9231697095848153,0.005675218454925024,1.9647307478436908,1.2344909820718393,0.42741001076907414,1.8364743144671267,0.4207151931715113,0.20242612207124855,1.9625426284374181,0.004837314122834724,0.05523937175680649,1.9992382787462954,1.009350842659444,0.6269282770182376,1.9384659943586655,0.2518995057686101,0.3589093171240022,1.8766647029433163,0.49309202479063485,0.15342377507630423,1.9823219743540705,0.783729480496665,0.8456459466968241,1.992161365201428,0.12158334086959288,0.548384984929729,1.7456709504719798,1.397883791139366,0.29517556095205766,1.914852399045269,0.5692380558178866,1.0723071445437975,1.994797100204354,0.03647316393175659,0.012999735253141576,1.5763027071941864,0.16601991565208052,0.4731997521552439,1.8652493056922095,0.3769149484864919,1.2952471972237496,1.66839319139683,0.0009490030363475954,0.9861136894104962,1.3772761770742386,0.9545368313828394,0.6783346833637397,1.6445651277461577,1.2649211521813333,0.4019316311238874,1.8489817554545975,0.01683903934668629,0.18386550408149738,1.158833869553459,0.008415644611958983,0.04540695957843488,1.9975186496242898,0.0967136037852302,1.6848531251318475,1.9271502954943474,0.27312013661018997,1.4266641435696223,1.766345629648574,0.5204281556612114,1.1268573879816048,1.2432998381911433,0.8145146841033492,0.8146766792829502,1.5306501775451518,0.19698685875728017,0.5205728214271717,1.8914237412808055,0.05230498253640814,0.2732333619404148,1.9270885140515652,6.339612332784128e-5,1.9352943646867502,1.997507029944426,0.04535786060051161,1.78051486549066,1.9706264810177179,0.1837702526837771,0.44675147337078003,0.7925951215301565,0.40179951834056116,1.265080111737481,1.1044885206411454,0.0028109415076301714,0.9547015148982665,1.999877835430122,0.28876945360901385,0.6487414335239378,1.6682705630491097,0.2365761565037352,1.4755867677595234,1.8651666460516303,0.011582398614322864,1.9757620795571742,1.977672441019192,0.012973253660020667,0.8688082258527261,1.483402748829294,0.11064090324232645,1.6616182849344527,1.7298747067822355,0.07122082610963942,1.3980350281047476,1.905153054792072,0.002183155125349945,1.0956265451488862,1.2736575616488928,0.030474769001263446,1.813600916637136,1.5570211993606253,0.17865704946534855,1.5945596109372522,1.7860517445171276,0.042743740583308876,1.317523632130248,1.0498291255810754,0.00020334641557617772,1.923713175253869,1.3555016900244492,0.3283620744745086,1.7604863512369868,1.6264978251868358,0.13256763917309644,1.5230799890693536,0.8234363314404455,0.021384494788992958,1.9862883496793158,1.1356869844936401,0.5126316260781837,0.9233340767062211,1.4347024258610042,0.267032240387421,1.7017170618136301,0.6061300396928674,0.09292816792484848,1.9981061314728943,1.8804971069253797,0.7219826337484827,1.968404034698123,1.2205359200381456,0.01850564021897827,1.8442416442962744,0.4090934918064104,0.125446524639375,1.958558341707286,0.6867806724605551,0.9456412590864695,1.3690128173206382,0.995019966270935,0.6402625002510884,1.0643012625190684,1.3037450237000785,0.3699733410429392,1.869680229702336,1.5828421127416088,1.172097350253206,1.9795384361047375,1.8050874796349958,0.03412787511296844,1.993850274484927,0.1148250404476776,0.0013306856483947804,1.9112197361447814,0.30152168640679233,0.06594593282181116,1.73970678844762,0.5563494679561544,1.0865927507614757,1.4960411875900599,0.8544519138223936,0.7750422617800315,1.9806157056155023,1.166751445269221,0.009486448145936133,1.791627003903966,1.4627856681067337,0.2460188986221301,1.9415048525667058,0.00042741520284428347,0.08014814549121052,1.9995462139387947,0.058196077402233426,0.004001797832638765,1.9600896039275604,1.2510754345588486,1.5153270340036307,1.826983708446783,0.43473471344999304,1.2258234270600608,1.9670370396874275,0.7167762672912141,0.0497742386372495,1.4428540362184,1.026444096938038,0.6111216709675836,1.9324245946985033,0.2633530681514251,0.3458829047756835,1.8847612036591737,0.006248509277465009,0.1444481818007668,1.9853786604413006,0.8004518658102567,0.8287780129939402,1.9898800806683377,0.12988151026599204,0.5331982741478585,1.7569528701476282,0.3243531994668387,0.28315141879845207,1.9216216174384495,0.5847289874527063,1.05524595826442,1.996393332625893,0.04118889135315995,0.7445366774411122,1.590189443993657,1.1976512240244204,0.45874585998148065,1.8104351281590092,0.3903772160735054,1.2788707788078737,1.9516291588526136,0.0018396028337247516,0.06827655933293797,1.393053077364712,0.06922406078227561,0.6621948823399604,1.6575411868793495,0.22739848383762473,1.4881440624827145,1.8578912596251893,0.013858678550796366,1.1951015422297389,1.1756890061507421,0.7470515709810506,0.8830283815562474,1.4708081799705446,0.10418017107398148,1.6722959708027654,1.7200036718057805,0.07662758038066897,0.32243846785574204,0.9492834453265631,0.003232035961287183,1.1098815953580967,1.9902457348997307,0.02706346622144773,1.82184948752065,1.9849322914170782,0.18691603008241442,1.6060210519410967,0.7254879123703317,0.3478519743907714,1.331079968686143,1.0355112680550078,0.6135186243502904,1.0238446054245125,1.3420707752969299,0.33904824922258414,0.7142833860644784,0.5158196048026426,0.13978694855726825,0.43259160371571925,1.8284428749775756,0.024432751239012007,1.9885520566075003,1.960813645922677,0.004237563455086524,1.8937948421777544,1.9994645067240224,0.08117126895191629,1.7118548814877692,0.592998335111677,0.24772958217237318,1.4604790048826217,0.8946278319006266,0.009132474888628783,1.1641869771134856,1.9811218977123417,0.4511403352031883,0.8518797846897367,1.4982973583836214,0.22004090990597314,1.648702793580568,1.7414541134503794,0.06502043722315565,1.9999462142653905,1.9122877773712397,0.0011999604828876187,1.0785955456968093,0.2331896460053159,0.034804671605383475,1.803542367199968,0.46859690284218103,0.16902528625320856,1.580727167072292,1.7965045584989197,0.8740240360115538,1.3012665413233053,1.0668959753243912,0.0006941915652823871,1.9170292112230274,1.3714283624269845,0.31579461671155185,1.9029048167333948,1.6397307970312751,0.12418851468484882,1.5084334461534699,0.840288920474769,0.01801102210278227,1.983322948134892,1.1526044217291609,0.497775233292966,1.8792614485258394,1.450034546664545,0.2555100008079222,1.6894348223509823,0.6219010826256898,0.08586398654828409,1.9990119009806795,0.9259269942152506,0.7056018610145157,1.1331102626193503,1.2371781523192469,0.4251452023994772,1.8349557896158235,0.42297136289094506,0.2007611653645488,1.9632886686186901,1.7621723026024971,0.9285791106971137,1.9991265511806182,1.0121158502342056,0.00015428969920738833,1.937507397202472,0.25373728855553923,0.043499094015331585,1.8779916770342524,0.4954775347809419,1.1552318961615573,1.5548597619979534,0.7864300297150205,0.8429145114203374,1.9918120280600946,1.098214616813331,0.5459195962725173,1.747510568357455,1.4004191307084666,1.3738959769991812,1.9159654427865902,0.5717351682187781,0.10945502327000234,1.9950750010276854,0.03721683793627106,0.012559095228903971,1.977122719984581,0.167548906548037,1.5733182357933895,1.8638597052680006,0.37908011508507844,1.2926041727923523,1.6663338844411038,0.6511772367600572,0.9833488448975877,1.3798355555046948,0.9572993102721327,1.743235797703936,1.6466767681890029,1.2675865044830603,0.39971779030932275,1.8504396837821755,0.016337487260159156,0.18227074091472895,1.971248812150344,0.008777419807647013,0.04458683082255055,1.99732016094155,0.09790341790209067,1.6828355838867584,1.9261106725333224,0.27502193252039886,1.4241616698334207,1.8925991125908423,0.5228564279417629,0.13572264319559568,1.2459809821863999,0.817232573649563,0.8119601228496223,1.5329918769478192,0.13843399177710125,0.5181479968925162,1.7680135529602352,0.05142602797382867,0.27133679210827266,1.9281214707448533,0.6003412915794621,1.038168625084774,1.997698346209431,0.046184853344365284,1.7787832744512113,1.6039036843718328,0.18537088444580574,0.4444501617624118,0.7953009507002224,0.40401765992178096,1.2624128540014015,1.9567426257825442,0.003021937934302499,0.9519393623107854,1.4087150988651387,0.28682837610660605,0.6461538126209925,1.6703250644973602,0.23836508875756057,0.37488321078461506,0.8803878897856172,0.011166540207158127,1.1783061834487871,1.9782497602973952,0.7636279587428993,1.8592545859678746,1.485821520165925,0.11190856228416546,0.5668928205230126,0.6596932327411259,0.07019951420472603,1.39549682708764,1.9063250264010099,0.5507065432100249,1.9524428184650602,1.2763161255580562,0.03115591724848532,0.7811914405366934,0.45651179503726325,0.17708284387379458,1.5923340033620326,1.7877580552399523,0.3609071329209851,1.9966154521143502,1.6836000534282354,0.0002629299115606276,1.0067506132756536,1.9993363747174904,0.3263159885950021,1.7586878736259375,1.628650663093762,0.20399738171907045,1.9894992290896234,1.8305128549018161,0.02081944718615414,1.5406454692015927,1.9654119887309944,0.7107337733507757,1.8859973627013291,1.4371909993777927,0.08805234174508136,1.9314603718310406,0.6086731908989986,0.09176756828819022,0.045870890153958066,1.8818045710231317,0.719327546113734,1.9677107377964096,1.2232321596168538,1.5396752191072343,0.8349946350619017,1.990755307610366,0.20945608752266076,1.6355977039349563,0.003767661452427351,0.3197174356126109,1.9996227805647133,0.9977851152376439,1.6695478186371648,1.0615415748912114,0.24427477266325703,0.36782839641295795,1.7932489640491132,0.00985535882521471,0.17202210548868457,1.9800912004073483,1.8597896603764545,0.03341533659692586,1.493730488044814,1.9496726169294827,0.5587341751596296,0.668237233438284,1.38724647635912,0.06693703137749818,1.9101211517328505,0.5588293038742413,0.11606536622003438,1.4936383018845452,0.03344251611031146,0.772348832839861,0.17767810908124015,1.1694772568172018,1.5850008465379941,1.7933135056598912,0.36791053551738406,1.9958287292472545,1.6769510797256095,1.7156129375736753,0.28057236595731083,1.9996256863137158,0.3196397432008552,0.0037584738409153218,1.6356795382580476,0.20952100988923084,0.825127852928832,1.8254258999274378,0.019018315657075013,1.2231288285335524,1.967737452290544,0.7194292915078987,0.04891635078274015,1.337024070588988,1.9310789504633856,0.608575641966218,0.6170372935046329,1.3361380621934908,1.4370956594983828,1.886046511131628,0.5103113802832773,0.14301987959682583,1.5405562895444715,0.020840970739642528,0.826054338001087,1.9894839017887507,1.1152129805542337,1.6285682208978693,0.9439256238386583,0.32639433201764834,1.9993325078338464,1.7162698408284207,0.0002605048244939123,0.24358957667189474,1.9966241606279649,0.888358689174052,0.01000251973838906,1.5924194073307871,1.1604254474146258,0.4564228158565671,1.8551219716635585,0.03112966832320596,0.11562578001346091,1.9524751146266144,0.6672497985677632,1.9062802256516918,1.395594186838613,1.9096868736469852,0.6595935567790012,1.9499669298721745,1.2840193661050396,1.4857288630641852,0.035808655464789285,0.46326524348457065,0.1725500951068757,1.1784104885536306,0.011182343110494264,0.8802826466696694,1.9959237059761452,0.23829640123222695,1.6702463979835964,0.9987260198536659,0.2869026883818926,1.9998327361501578,1.7534358124871288,0.0030137086977477523,1.642656101723873,1.9906272247623622,0.8340666994672754,0.019222058953759724,1.5473787264293595,0.14723828574375364,0.5032385519529254,0.7281478985477308,1.87743922066022,0.09137423310873138,1.9343500592330543,0.6002441230133027,0.08843880529634163,1.344667820982817,0.05145958972072662,1.8902155362017719,1.965656883000485,1.2310470337772563,1.5329021811098995,1.8299884031716198,0.4178322932982912,1.988131068800794,0.19847586723664656,1.7580745805644487,0.9348707726024096,1.9993702052396887,0.27494892344112243,1.7099101116809745,1.6829130242183181,1.0434237177269896,1.9973279107317432,1.7883372902756836,0.008763411155039202,1.599703246318823,1.9816529028462129,0.44883099264221893,1.8503839127719226,1.500692867863016,0.11989651861593464,0.5515473326263894,0.6758179860688818,0.06404320357770066,1.3797374931772977,0.07361655304151604,1.9174884075603549,0.11234145865582157,1.2927055365326043,0.03553153521245833,0.7645423065130518,0.470941357823599,0.16749017410595235,1.1873290384336872,1.7981734216211056,0.3741490810211716,1.995064487720684,1.069654689701743,0.00080102692388484,1.7281673755723481,0.2932916934119274,0.9509995649336307,1.7474401504592447,1.6418536538972017,0.2144614164886367,1.9918255599728092,0.8430192010823094,1.8150486349484276,1.2152993929117222,1.9697281677106873,0.4953860131988681,1.8779409301448415,1.452502148615359,1.319887871862185,1.9375442779415941,1.9284713380204748,0.08474646267770136,1.4298641773569705,0.0543711428241348,0.702960366463208,1.9632602043270646,0.13381139278110565,1.8294040017896975,0.8181577120420416,0.4252319446566013,0.19910231975607606,1.6223068462610821,0.005395833492199076,0.9258212810172106,1.9990071841456976,1.014880765169386,0.0001095399983066514,1.689511602833614,1.9972508820832178,0.3546748028113377,0.9064057656475377,1.5988651561830194,0.18172951456353204,1.983342221499201,0.7891322119209265,0.029174233393904014,1.5085247241912754,0.12423968318961087,0.5434576795811685,0.06441234931488082,1.402951408613727,1.3713299389258615,1.9170714829207904,0.5742355551958551,1.944143883565458,1.4786988804833272,1.8633853579959954,0.7557356101231518,1.976530899597893,0.16249876247233785,0.01241087972475341,1.8036054618012902,0.38125002932885366,1.0686102835865205,1.664269482598038,0.0012051576058436098,0.9805841277018714,1.9999473080791415,0.30721035223112947,0.002423280299749142,1.6487834640457242,1.991691429408598,0.39750853934123254,0.8519846210496307,1.5540767354325955,1.206431845011427,1.971903392463633,0.7358789978012976,0.043774007296931816,1.4605730996645767,0.09910012958271397,0.5929015096818904,1.9250639683932511,1.3521895754046145,1.4216559528944162,0.7039601878064448,0.5252883485325703,1.9607842565025786,1.2486602453747198,0.02445604609037133,1.8399711237493064,1.986866576119274,1.1321776706551983,0.005287769180677193,1.7697815208324958,0.916777893788918,0.2694457937426872,1.023950579979343,1.6416005935382394e-5,0.25488214992349534,1.9978820339254586,0.3477716166793895,1.7770457287197714,1.60610536992914,0.1869777449824236,0.4421530979701961,1.8461343090212732,1.507623005773056,1.2597435898178653,0.12865491632434534,0.6834196142649048,1.8989219599119374,1.4112371966848734,0.07666828139726167,0.6435688972782811,1.9444883583169232,0.10413306571588887,1.4707146560916775,1.8679267789186764,0.4777679145379352,1.974536938115062,1.5719095660110414,0.013876271086099345,1.8089713712283697,1.994236169431915,0.22733118664065266,0.0011543224034735733,1.7336439580443082,0.29899186331211236,0.30796570079681984,0.9691279529716518,1.7352647985665381,1.0901201193540426,1.9928175689827143,0.39029319035570975,0.01602961479607512,1.5616055919051492,0.15629181890880817,1.973998636795409,0.74463916633189,1.459643586511469,1.3122746606011075,1.9403055624549994,0.6319117309505966,1.9215804728811143,0.07758803077278875,0.05701155881938047,0.6953075586764585,1.9610740351579512,0.12982927146107948,1.518358599815544,1.8394025771197415,0.8003479940694317,1.985360593941905,1.6160053984347735,0.006260346621353552,1.7755402095801858,1.9986175298070599,0.26328138360673925,1.6977662318592657,1.695301386921857,0.260962844185022,0.34856555600646744,0.9143981136442064,0.006649993764103468,1.1445640477147148,0.19229288108646958,1.9864779611908863,0.02728131438447534,1.515417876568868,0.12814170540557268,0.5363329153224875,0.69203748903647,0.05816044782278007,1.4194891429930971,1.920241530543901,0.581510157709586,1.941469123710604,1.309009397590835,0.040189041238511414,1.8723967759222098,0.7381832438428846,1.194178631268008,1.5644445875033832,1.8083555034862386,0.854347038638227,1.9932226928744636,1.0866983569273123,1.6505990475760428,0.9725617066010788,1.9999974888187484,0.30144582996633873,0.9781963308259698,1.6548690482273072,1.08108189224883,1.9938620070544715,1.8109859788326435,0.01445237552972456,1.19857348066852,0.16119609794786094,0.4807005537244943,1.8696278991857571,0.038622471515054047,1.4766006354803123,0.5855851112877785,0.6403614104539808,0.07799286093630431,1.4143660605947694,0.06006956283583009,0.6866800034684004,0.5413341048885191,1.2564247528980157,0.02625128968097057,1.8442984541899339,0.43930535889178834,0.18898263273266858,1.150138854976698,0.007314701445077287,0.34517149936948344,1.9980996049305357,1.0319720658557057,2.632856620943258e-6,1.701792581618284,0.26710435570826463,1.9988979376180818,1.7719696983024524,1.6124684636372393,1.1355819592613727,1.9863058382400558,0.8058739992442079,1.8363258518401095,1.5231703323065924,1.9598260145089346,0.5283146189823456,1.8953773872804174,0.05515062963085138,1.355402607896422,1.9237537789032804,0.6266769878056596,1.3080135544041656,1.4636195483388699,0.04277440692214807,0.7391937792849865,1.972706237737512,0.1532796371234425,1.5569331594039388,1.8136625457881559,0.3947703670315572,0.2222619994922227,1.0957320636497103,1.739073297819922,0.9634948194567042,0.3120453462656838,0.9771496809351651,0.0013796514686373884,1.6616977679638771,0.23092144236547085,0.38395233897553405,0.8689133152194176,0.012956239503365996,1.1896745270409852,0.48159552019885354,0.7524058995242855,1.86511348141539,1.475680014229365,0.10665163503084152,1.946325136917125,1.918435768088476,1.3681381531227488,1.406093007653039,1.9013769984708233,0.6780782321659009,0.1259031844217786,1.2651823229013257,0.02835624656927349,0.43843880036361726,1.9839608160252098,0.18370901537119766,1.6016127092810322,1.7805811286691478,0.8997539908145987,0.2578789017200226,1.0410375442008055,1.701046397367612,1.0183155058891251,0.27330617909249955,0.9223959739386041,1.766171594523809,1.6196141843112644,0.19705003804649246,0.42804642365434253,0.8147808488946344,0.023232655658041335,1.2431970173213736,1.962331927130207,0.6996819578514337,1.8913009635817155,1.3563809745239888,0.08336789171507197,1.927190009196598,0.5980560933894892,0.09666812875077924,1.4555628719489015,1.87629107858162,0.49242321991362503,0.15383709761168363,1.211943475897305,1.5493758998473783,0.8464127453023005,1.992258044530177,0.21659180225750874,0.002121457512710423,1.745153630899694,0.9544309364172,1.9998735650891488,0.9862196840960032,0.0009443915271571957,1.0730811440345822,1.9947177394641238,0.8678755102235578,1.8002381772652156,0.01154132983786793,0.16559194516924325,1.977729321862249,0.7612050691851695,0.03644480121019089,1.295988565236352,1.9459862397780778,0.5691423925277387,1.9148095903830036,1.3765573604875727,0.06283913794983231,1.9052681595582976,1.9562102913533645,0.12153268656740668,1.2739180703716175,1.8485714163841402,0.7836259856488567,0.18431420117540998,1.158067620811064,0.008315473708503718,0.9007956828475447,0.3589906757361274,1.9968173960341438,1.6854184138290356,1.707486531824424,1.0092448424130314,0.335690414284498,0.9314432415086273,0.004826905729127362,1.6267089153459815,0.20249007092041083,0.8137521541217111,1.8318995989868694,1.5299922425614616,0.1366417128078533,1.964758646990724,0.5123951315507577,0.05255296631045725,1.34789050280828,1.926797337376009,0.6192446130779452,1.9355687053142074,1.3252229435548644,1.4474687061225857,1.8806254753589247,1.9708129003479353,0.14903752748901633,1.2208001012890333,1.8183013248880502,0.8374552650397089,1.9910906058825377,1.103716684566662,0.002753094874856976,0.9554767845686367,0.3178913496519553,0.28931520084036866,1.7242926857236196,0.000591346432293971,1.6751912915494254,0.3776511577272599,0.876872850129315,0.01170046884909215,1.1817895307644821,0.17062597173258842,0.46616687144128266,0.7700238898929456,1.482723248269867,0.11028635252008967,1.9488883355395727,0.6563655126116177,0.07150873695923421,1.3849455799820796,0.06604269910740934,0.5475456964074326,1.9535159156834316,1.2729110507046228,1.495805983509889,1.8533360215770596,0.45354264901464947,1.9805625974479053,1.5951834182219207,1.78557178256226,0.891773081808056,1.9969003081801007,1.0490540219714002,1.6787848536776036,1.713868445401233,1.9992011186418632,0.3289372382568284,1.7609900550608326,0.003977626886881636,1.118624633940358,1.9889811844448482,0.4132588327233464,1.5291041692227996,1.2354055501554035,0.1412546030095898,0.5133094192704474,1.8876338334656682,0.049689884324090494,1.3393714022914462,1.930166086625831,0.6054168369535997,0.09325514051767625,1.3337878465009718,1.88012895284292,0.7227281750553833,0.5081381238669171,0.1443079852492425,0.01835732863948636,1.8234818182066879,0.40846759699624735,0.21162970217986843,1.1127349252381524,0.0034667982407862175,1.7571298399328916,0.29005210305638907,0.9942439247437254,1.7180081984672944,1.674418675510553,0.24196041026146042,1.9964162796761922,0.8858803224838121,1.5822113281590096,1.1728617723333086,1.9793819549700777,0.45851812628205724,1.8564124273017093,1.4906479003839181,1.278610655712296,0.6553825434309657,1.911539133834574,0.06817822632535364,1.3904113724024687,1.908648171025586,0.6619399586583777,1.9507430727449204,1.2816268948029892,0.0325404322531736,0.7757984907948582,0.46116233907574267,1.1659862079469887,1.5878692180436043,0.010813444080115975,0.36517042901043095,0.2465289116343944,1.0581125142573684,0.0004050288015817749,1.001220328764098,0.2851562351998119,0.3222392857037675,1.755073529080858,1.1196640875943058,0.20735701168020793,1.990283437766224,0.8316074873110828,0.019711817121246367,1.5452895755203921,1.9668391377379804,0.7160320762839008,1.8834194640722535,1.442158098927984,1.3308243740321033,0.6118367569343874,0.6137684502708902,0.08946721127401824,0.04754122984826825,1.8843992620489827,0.7140238293181853,1.966301951572731,1.2286194975732412,1.5350111481857616,0.8295426568276953,0.41580606129491704,1.111694626691018,1.6313184739411337,0.0042625088780189335,0.3237812771399522,1.9994556071622713,1.003315442834203,0.00034759848111765024,1.0560208090721488,0.2479080658907149,0.3635530245490769,1.7898694435745874,1.5895627863009145,0.17513594634954122,1.9811742430769348,1.8569524699370392,0.032012436903989805,1.4985321758247083,0.11871500460365836,0.5537781556551862,1.9077713337694913,1.39233936634339,0.06894062386822553,0.6629254172933872,0.5637990764924243,1.9478919907221832,1.4888212255810027,1.8574922411609385,0.7669672175039535,0.17454381446938383,1.1749249715366699,1.5805066406006167,1.7966682989460216,0.3722056113779295,1.0570673409287321,1.6728702665237258,1.7194648975375357,0.28442453881741014,1.999761700657228,0.31559710781699757,0.0032946798894643026,1.110652915675841,0.212920351349437,0.4067796407101444,1.822291360863045,1.5444117061475715,1.2177345338688996,1.9691160738072289,0.7247417554947345,0.04722239795600425,1.4502764095296155,1.9330822663983058,0.6034925820733548,0.6221518475723256,1.3413414356434694,1.4321149338531982,0.7150271743404828,0.5151407292155757,0.14018294384974228,1.5358953322789914,0.021979122282722363,1.8336390848163115,1.9886688498963028,1.1207046986226388,1.6242573875342559,0.9384048754685753,0.33049203293849816,0.27739228567094476,1.0123866880883925,0.0001495685484039777,0.2472185029417442,1.9970629539186429,0.8938561313774193,0.00923741540706946,1.5968657278100755,1.1549643156148375,0.45178921415171014,1.8522418350434193,1.4976243658762747,1.2708948656400652,1.9541451714655986,0.672470049841266,1.9039288308747202,1.4006673120650253,1.9119696704733067,0.6543987339211936,0.5719799458082595,1.289317583988063,1.480887340858517,1.8621241819112768,0.4679396538501245,0.16945726247935455,1.5813587753014862,0.012022196958573428,0.8747939440135287,1.9954096444164144,0.23472482154691043,1.0762144070930753,0.9931957365326034,0.2907906984915909,0.31636078969835646,1.749787994996149,0.0025999250952455366,1.1016326378453396,0.21854846182025145,0.839522877483983,0.018157943806833887,1.5519985870733395,0.15013980679419636,0.49844646605974996,0.733474086412,0.04450688897667332,0.09369764699133787,1.9363065319442239,0.6211827539439223,1.926008456789417,1.349853986374082,0.05322530063026987,1.8927211965896182,1.964205227732665,1.2364241720003626,1.5282144138120688,1.8330604091489795,0.42233771589284985,1.987266430275604,1.129704837455242,1.761669676611005,0.9293532030233813,1.9991586790537146,0.2711513156000386,1.70600430274605,1.6869424687083296,1.0378979628761238,0.892815193051829,1.7849227503106144,0.008048023876102484,1.1559984948021391,1.9826923915217627,0.4442249681046484,1.8474610669848843,1.5054723834197046,0.12253566725121201,0.5466111654295878,0.6810545850776871,1.3997078881750258,1.3746156304608057,0.07571333156887494,0.5710340146659814,0.10980831406560243,1.2979891547758504,0.03700738021769745,0.7591710867086303,0.4756423856111146,0.16443905797989034,1.5739539085242098,0.8758326849551141,0.3784719745427704,1.9945004965202044,1.075170499596831,0.0010376168347709935,1.7319467092823317,0.29721522081690765,0.9565239783104816,1.7437547760554595,1.646084628311264,1.092603996404584,0.4003386488742803,0.8484833423072367,1.8118319521846806,0.1495885419840488,1.971063767400051,0.49061916630881885,1.8752797649328161,1.4574269539809197,1.3146432605029639,1.9394537464258592,0.6295936921942002,1.3488730442467456,1.4248643248960864,0.05618432334315682,0.5221745568745239,1.9617601999473295,0.13106104900066207,0.02368378849027397,0.8127223884269323,0.4297662751540098,0.19580301252210341,1.617968352361329,1.767516311504777,0.9203073442841795,1.9987455353773218,1.706745345916751,4.297681082132687e-5,1.6935065199433446,0.2592848167002221,0.35046002546819555,0.911913228510464,1.6032849440886683,0.18492103299613716,1.9843323935821142,0.7945413926379241,1.8426105591830906,1.2631616314060734,0.1269228102295764,0.5385443373660842,0.062473935310669915,1.4080067020076004,1.3661893646904928,1.9192625185936585,0.57924607638036,1.94230702395225,1.4738360656168923,0.039492006417376935,0.47475123042833534,1.975324863308096,0.1594896139319012,0.01329457025512848,1.8068846037168784,0.38560403434985635,0.22958402651166077,1.6601254574276092,0.0014918598487441148,0.9750551598186257,1.9999887881430145,0.9655886214131042,0.0020537640733102602,1.652981957606293,1.9923876799033597,0.3931038744782892,0.8574562758245915,1.5586720529077587,1.2010174982977517,1.9731902541911652,0.7412169604123414,0.042170300740462796,1.3156368261961786,0.10151420898164176,1.9425236508508665,1.9229493486430687,1.3573601628571055,1.4166348660689785,0.6986823003332063,0.5301630602379028,1.9592360264501334,1.2540130474009188,0.025686550492431515,0.42890656881236544,1.9859581327295714,1.1376574339579306,0.00587095089419698,1.7732997855141184,0.91126804365787,0.26568056920388705,1.700298518163766,1.9919053628747463e-8,1.0298779484785148,1.998226518150907,0.9108704356091877,1.7735528263684717,1.6104948211311214,1.9841472599003604,0.43757178405636543,0.8034277463491297,1.51238004133163,1.2543991237619625,0.131381800967598,0.6886703152220093,0.059356423519786206,1.3671633566856627,0.07880605750322978,0.6384072623113004,1.94265696078033,0.1016895258887025,1.3152580178897493,1.8706603666508697,0.4824921655428599,1.9732819909162091,1.567364216925517,0.01480944864549949,0.8578514005647693,0.3927866543756624,0.22383231174726115,0.0014352425145741643,1.7373907711488388,0.30294654006634314,0.3039841504018662,0.9746560963162675,1.731505223239556,1.084610937277472,1.9934640220029503,0.8564201337429171,1.8071203444178567,1.5661728080051467,0.159273401741032,1.97523665466196,0.7499900258796337,1.4645480426145205,1.3070161382974337,0.1055335603637193,0.6370593889756033,1.9194195844003554,1.3658178733837438,0.0588666064256127,0.6900448725405002,1.9595313642036358,0.12711751751406541,1.5136213568062469,1.8423955190518133,0.7949320823237284,0.4447635564836955,1.611639523374384,0.006893392620255567,0.9123108735068401,1.9983115607126631,0.2595530590205878,1.6937940610508448,3.93555886629704e-5,0.2646997183525368,0.34437964652985353,0.9199094305575435,0.006028459686781562,1.1390896231276746,0.19556581306342047,0.4300942479461207,0.02601322540576534,1.5201491305410473,0.13086355155019214,1.9616507880937568,0.697303724501837,0.05631631969969575,1.424502921753429,1.9223917486906035,0.5865393012256863,1.9395904641990849,1.314264320573601,0.041755784894699444,1.8750866402944617,0.49027568770346286,1.1996007062904068,1.5598708477916816,1.8115988041622435,0.8488779353224152,1.9925647340121844,1.0922065146311664,1.6463892646766445,0.30219626701590907,1.999994590349055,0.29749926137745586,1.7322186436131704,1.65903852133387,1.0755685538844082,1.9944586094019057,0.8654034815268454,0.013530620568138363,1.193150267263169,0.1642198106189775,0.7489764986384625,1.8668842451774403,0.03711504965322254,0.10506594002284853,0.5805583819268607,0.6455271938689711,0.07586577553878793,1.4093265343415502,0.061971795602511315,0.6814329517496525,1.9569373518124549,1.514519342488016,0.02752502045060401,1.8472490865924434,0.44389315291710585,0.18575968317114777,1.155604179829326,1.77836278324741,0.3493611950191614,1.997743557269089,1.0374990569226832,1.6872325098464347,1.0218560101028886,0.2708780585358196,0.33755686936440377,0.006143786002397511,1.616830777994429,1.1301006447312727,1.9872028503357608,0.8113020699311552,1.8332811673445568,1.527875415345362,0.13538579271824958,0.6963060933113874,1.8929010041098948,0.0533538740283338,0.08195810333686793,1.9258576877905584,0.6215522228220445,0.09819276896211482,1.458712416178883,0.044389198788480466,0.7338588577652172,1.9714081101904135,1.2084813834600796,1.5523314054508233,1.8168650779286568,1.9926916178568517,0.21879760486330213,1.1012355070467845,0.002571237716047836,0.9579687565628432,0.31606950748275287,0.9826788936815846,0.0011045209668154587,1.076612429664383,0.2344679228015245,1.9953713602530798,1.8023567624734667,0.01208398872799299,1.1842417107454781,0.4768742854550492,0.7577678006173547,1.8623263814647872,1.4805373000372897,0.10915042162988098,0.5723407552872624,1.9162340986651727,0.0724378967785938,0.06160949339997834,1.9037580322392478,0.6728472466576978,0.12323019493045706,1.2705105804762526,0.02967874418713845,0.787084666008945,1.9829592466516996,1.1545699357462418,1.5971859665774562,1.7840259351564907,0.35627669672543416,0.2541834744573441,1.0465625652324955,1.704979425529548,1.0127858461825512,0.2771164000324168,0.9279107900034005,1.762605903212548,1.131138586243315,0.20035863694387546,0.42351873652575966,1.8338594946955085,0.022062434049743174,1.5355582599287947,1.9638207758655528,0.7049615738541799,1.8887798249623118,1.351208333296076,0.08559254924281334,0.6225214744845591,0.6031261449338109,0.09430975979622547,0.04408126910813959,1.8789420808997772,0.49719593078705127,0.15090280204656248,1.217344904162366,1.5447465103429758,0.8409504033092605,1.9915560436035515,0.2131666547825969,1.6402456515670067,1.7488303581735025,0.31530611152564925,1.9997703352472733,0.9917496769996794,1.6650526465510471,1.0675645072197237,0.2403359600526611,0.8733593545157059,1.7969095124198535,0.010718655028459922,0.16865271834718032,0.46916463245537954,1.8628560151301468,0.03498012593607702,1.2907015364774799,1.94776473660636,0.5641583218230091,0.6625496158450337,1.401991844202857,0.0647829800724814,1.9076038151796748,1.9545770555935746,0.1189037259621385,1.4988781821613326,0.031912318146762875,0.4505803556925222,0.18112741872746774,1.1635259854686677,0.009042348759150443,0.8952941731516817,0.3632451720722065,1.996361283257503,1.6813810421052757,1.7113841292733043,0.276393412462526,1.9994423573583031,0.9369615855784182,0.004299406511030557,1.631008842568571,0.20583873323230928,0.8191885446375967,1.8288179650975211,0.020207674227091244,0.13944546093976018,1.9661991186704806,0.7136413338652481,0.050798239534753264,1.3427003251787777,1.928860136924604,0.614136694371472,1.9336013994943884,1.3304476354052066,1.4425161117679042,0.04989172238043715,1.969471676044973,0.14614587672255264,1.5456241519439982,1.8214675736360446,0.8320009900138235,1.9903388716620494,0.20760045523453619,0.003178431784004787,0.949952642267933,0.3219458224839855,0.2854354392100116,1.7204685034536746,0.0004164688372030323,1.0585110247185965,0.3733318820839252,0.8823629596705771,0.010872069148496144,1.5875462443032944,0.17372840293413372,0.46149866325864464,0.7754094812015513,1.487559159885844,0.1128246487826684,1.950619256162272,0.6615642983633554,0.06946923261232885,1.3900438310788292,0.0680334281505306,0.5524844748623433,1.951834816756252,1.278227250069262,1.490995698405949,1.8562062604885845,0.4581825656796933,1.9794625201600649,0.008902422558191958,1.788981760588126,0.8862769133800307,1.99644996568869,1.0545769213265697,1.674713363150972,1.717730291393774,0.2826844030062915,0.3248473274814505,1.7573905560404113,0.0035000886356660876,0.20520295339601502,1.9897847743809565,0.40878950329315134,0.020417611624015564,1.5423177426304475,1.2201683201739209,0.5084857268523044,0.7223446590648945,1.880318391919157,1.334164115373374,0.6151027395586326,0.6105044504693458,1.930312570626474,1.443454697500904,0.04956569036602898,1.8874499159773106,1.967207440739883,1.5465011955287522,0.019427131817366217,1.8266068045585233,1.9904835023575145,0.2082395075586594,1.1182282533931631,1.6262040449420594,0.9408946379033871,0.28616821761045763,0.9997742284412416,1.714147933023098,1.0595561097668085,0.24557891605189452,1.996868822450181,1.7920362285519775,0.009578745175804482,0.17313916033645682,1.9804841957034436,0.4538770087170979,0.03290734427077868,1.4954592743652138,1.9502938165069459,0.556950064342677,0.6701143457306364,1.904992791399199,1.3853139771679561,0.07136057014642261,0.5606152534386826,1.9490142489922906,1.4919074581675624,0.033954536556537684,1.8608576420546243,1.9796730681560262,0.17084906261317545,1.18139697808725,1.794522935210721,1.9965375559884384,0.24290436172133678,1.0636325868774683,1.7170009119294458,0.9956900069293577,0.2890344232890252,1.9998836550034114,1.7514360909648228,1.1141716887401276,0.21074088425665105,0.8270866626222088,1.8243013914636952,0.01863416871221213,1.5499170044124002,1.2113104252656235,1.8855600786133575,0.7310708332341815,1.44711167527939,1.931802772497977,0.09694615326874256,0.09137369104193316,1.3380107698042478,1.4353057560510014,0.05242533595353149,1.8915944612614375,1.964863611455526,1.5388817631977334,0.021246886926169273,1.8316780118884481,1.9891942328577275,0.42857786021818145,0.0038498157606249306,0.32040832592172563,0.9318414974705761,0.27984470956720187,1.008845669029493,1.70776859352874,1.0504983298828257,0.2515643614984395,0.890335588925995,1.7864657653123255,0.008366925506637979,0.17827501529192624,0.7733696435657911,0.4463002960362258,0.03063914265822054,0.11655600522175802,1.264557735651737,1.9096863345855117,0.6786915402339097,1.3974202568115253,1.376927137155791,0.07476413226111522,0.11562517412659579,1.2859260033346769,1.4839891989087572,0.036338090909394216,0.46494462203539444,0.7517783978558077,1.5842364286656831,0.8883573992693041,1.7999987265046022,1.995742318446952,0.3844626839053731,0.0005426669502117676,1.7232948530037926,0.9866188369957866,0.318949524795312,0.9540321650238612,1.7454197882873663,1.1051548772549138,0.41047950153263324,1.9922083887882245,1.8191316724017303,0.016931484909921912,0.14827888715977566,0.7203337748402051,0.4927672048128582,0.045557585386885924,1.4552074755333795,1.317009902827565,1.931078476922118,0.0876227558268764,1.3465343693251866,1.4271209921747379,0.05536295988878759,0.5199849073420415,1.2329818701199395,1.5312179849052587,0.02314718613720712,0.4194507311466017,0.8052386406738242,1.6278351385638188,0.004686032997707201,1.765914999783783,1.9992976442827848,0.27358046494856547,0.00023944357931282578,1.6843647201669687,1.0414363943618488,0.2576113976319294,0.8993568199413953,1.7808305817891212,1.1594953757068232,0.4556322095846933,1.9838895282782905,1.8493356330051047,0.02845071223510054,0.12084265491675228,0.6681384587430808,0.5407586303915928,0.06334465867635664,1.405728183068975,1.3685092788434385,0.6492144811165703,0.11142722338369593,1.2946069532280111,1.476031110938302,0.7626095833439048,0.4726303370326732,1.1793374967414092,0.16084363270687752,0.012892267645964517,0.37570171386064555,0.8592842497526786,1.6695468545081482,0.0008826032810497209,1.7295292722908693,0.9775487682324151,0.3123351144748814,0.002941057002887937,1.6433776905274144,1.990755483700195,0.22201113536903927,0.8449839636184736,0.3870620352696309,1.2133565018026276,0.5024210457634946,1.9726135322449736,1.8769868674136703,0.042889985794122065,0.09604877970779313,1.9382343681577563,1.9277307363353773,0.0839469024736802,1.3550294516447001,1.41890107941731,0.7010616187394403,0.13790234658560696,1.959937949002008,1.5235104913232858,0.8162021211610773,0.42686080601836085,1.125154114391804,1.620748589872317,0.005604157172139912,1.7717158881333632,1.9989165940665619,1.709246209581537,8.207730607279196e-5,1.6909509033840218,1.0323710489337776,0.3531565796372247,0.9083863331420328,1.6004569529166617,1.150533507873091,0.18874916256067975,0.7910770167444308,1.8445123019972267,1.2665763728870798,0.1252016527229678,1.9584142913309464,0.5327192692952516,0.060205907535126224,0.07397178092459378,1.9178627737328708,1.9467915504753093,0.58522184651653,1.303263659160082,1.468033849147652,0.7538072325439553,0.16696855295515522,1.9738516887461104,1.569416431371462,0.014384831883890836,0.38281387720851723,1.9939060889868818,1.662781319555135,0.0013047595432177372,1.735703656744334,1.9999657491971745,0.3057772938603769,0.0022868610987882843,1.6502958425289578,1.0870960366200402,0.3959221692174466,0.8539521175983186,1.5557315080347185,1.2044851664844627,0.1579254499439533,1.97468197026778,1.8725918296982975,1.3189950336330725,0.09996524084459102,0.6253358290122404,0.581872743717889,0.08034643347773829,1.3634953176806919,1.8947324909229737,1.9630067291585367,0.5359792663937027,1.2505863906269048,1.515759916721216,0.8072927926100372,0.43431804598335766,1.1341490704675137,1.6136109581883658,0.006604112729131528,0.27502103848170856,1.9984533404435738,1.702822022564267,1.0360526375101504,1.6974802264803173,1.9980094508148387,0.3462651140015707,0.007490328057034756,1.6076862808062855,1.1415592522511764,0.19408659292953967,0.7999568572103937,1.5093357807311825,1.2578222333836182,0.12963263992730312,1.960963666072934,1.898048733392454,0.05714449445847203,0.07743393424692091,0.5750882823981498,0.6322829232149365,0.10325103013419101,1.3118954087483705,1.868913039098886,0.745025141577836,0.4881313267823304,1.1971559705496764,1.561935838747503,0.8613575450673439,0.38997683038429143,1.0796404687129053,0.21970200173934828,0.0018091009963948634,0.30041179305681964,1.9999996840172107,1.7407503543062939,0.9812317308245186,1.6571604800189008,1.0780554935786615,0.38871777124967344,0.015676838867104026,1.5632502836593143,1.1955970035578491,0.1628528759394693,0.7465628377816924,1.8681249841647922,1.3103844010048125,0.5920410961070112,1.9443571313278585,1.920806500918457,0.07682164513087253,0.05767545204395674,1.8987469997709767,0.6837982971459753,0.12885085644613914,1.259358080556792,1.8404820200807186,0.7983993224290048,0.19314632302123358,1.9832242829711526,1.6064228308859705,1.99901184329136,0.34746907386077175,1.0248925030334246,0.2551484420090008,1.4208364149226327e-5,1.7039521521411225,1.9985404720848823,1.776452319038896,0.006422944909520889,1.6148656006343522,1.1325733473555752,1.8456317672544391,0.8088531597392905,1.5171214059861329,1.249046877027769,0.13413525189246434,0.6939305380520031,1.8940212957715805,1.3620136907858276,0.08097200789535053,1.9249122779102628,1.9407967325212017,1.4698831542548,0.04074917946943779,1.8733673256427075,0.7362640331463208,0.49594532591853313,1.206041237011866,1.8095248849012235,0.8523794254981145,0.22673340972803968,1.9917427019397684,1.649087184970203,0.9705733960840045,0.30692253587483387,0.9700697215307538,0.29283357568728885,0.0012248294835326412,1.66397103808863,1.9940800903904317,0.38156367726323037,0.014117372185130539,1.5707227079744481,1.1866927444524944,1.8736126436664224,0.7553485318655779,1.469438290732825,1.3017482260486737,0.10802003322887077,0.6422181473695547,1.9172305759013568,1.4125549279814604,0.06075043815678893,1.9026875484248658,0.6752053132820772,1.5175526314290098,0.02670598939117086,1.845362696710682,1.9851995266787918,0.44937156266067024,1.1521051248969048,1.5991847994945498,0.9068032105379081,0.2626445928271912,1.997280382228206,1.6898006708753557,1.0253962402372738,0.2684590813354766,1.9989893209002028,1.7707037724394574,0.005437325764424461,1.6219943215962322,0.7979057976236693,0.42555865392346437,0.024774925357301747,1.8296269427420273,1.240251025966098,1.8989678279574793,0.7025792177913058,1.4203442521942664,1.3535426537407909,0.08458571071273413,1.9283230033665404,1.3099053519731538,1.4618562080499804,0.043351836002310074,1.8777497405508479,0.7275246282234775,1.5636665749506788,1.2149095478125749,1.8148172824681752,1.99311274260301,0.4044527442573278,1.0977118522418692,1.7404117524656932,0.9615071037899171,0.3134903138137397,1.9998206800257248,1.7284409219210342,1.0801427545567484,0.23219431432679793,1.9950247966975945,1.8044652859439325,0.8809257345313277,1.578148166055171,0.7445379323907415,0.4712801464798022,0.03836357254829614,1.477428734201761,1.2930872194576277,0.5755444809917791,0.6507038186690515,1.913579169629289,1.4042744890276029,0.06390271752337706,1.9065538126067918,1.2573353396934572,0.1200861167903613,0.02882849391293907,1.8501738062776547,0.7806628832775317,1.60808638675916,1.1610647456008454,1.781822888882155,0.8977750952283826,0.36132387675313915,1.9965707741615644,1.702463478631021,1.016326689614628,0.27467406121715277,0.9243792425133973,0.3259157484939166,1.1346483953028896,1.6290718570512066,1.9880696692937203,1.8358089336148766,0.8266922212932811,1.5325643535612894,1.9628708182068437,0.5185907364051283,0.7112523730490707,1.4285580533941256,1.3450425227646423,0.6258030695584405,0.10018496233579843,1.934492238640646,1.4537912545140554,1.3376338267817385,1.8820599231831512,1.203991891522273,0.14744685053654427,0.01722406261325038,1.8200426266325627,0.8344603684187191,0.21535710294449217,0.0022529290850855643,1.746478682465265,0.9524439791749169,0.32011458639425716,1.9996077559448997,1.6624039111532773,0.0004915581791404833,0.23803781667833934,0.8698474470048303,0.36740875196116374,1.1887493426952827,0.16668989024731584,1.9781448427166493,0.4636021029753785,0.7729795943683443,1.485379888836502,1.9466292524860234,0.5673482290504712,0.6592182344465615,1.3783993171624822,0.06670423334092379,0.6771863281250823,0.1254458951927886,1.9525966384713838,1.5019441247659768,0.031030918627071302,1.8549149528631,1.9819276139290793,0.17736998090489864,0.008573419876651167,1.787446762577071,0.8887553922682748,0.25051085764449466,7.574831903522927e-5,1.6765522619971138,1.0072557954268477,0.3342049504466096,1.9996403601842176,1.620353451324106,0.003711697182742224,0.20369169249858443,1.9894260829390609,0.41080304413775426,1.2422829932822346,0.13764711042117939,1.9652801465929712,0.5106594717620001,0.05191849795314851,1.8814989110427804,1.9275425391042678,1.9384085974309342,0.6082083346794858,1.3271032804203202,0.08778676881273073,0.7295398214072061,0.5019840196879171,1.9678379553257144,1.5485883736133224,0.01894091096750483,1.8252004873874224,1.9908237163987996,1.6437633662712772,1.1157510725975117,1.7524841828208195,0.943384768066757,0.28791724427475807,0.0009038963428052993,1.7158917133869411,1.0620458039759926,0.2439440228508677,1.9966684888856359,1.5764384841745107,1.1798332011116586,0.17173891789314377,1.9799907700631638,0.4559682010286974,0.03354496534374818,0.11119618088938199,1.9495142464931707,0.5591875811322884,0.07077190796850186,1.9060511214413918,1.9056680442561995,0.6686138406107187,0.5583759868813917,1.2748241163020202,1.494077590052631,0.7827061980251011,0.4552095867985114,1.9801703805653739,0.17224602137335232,0.009799531786373383,1.7930058352596556,1.9967418422512666,1.6847320443077838,1.0611431369374682,1.7152599693711017,0.9981843041410654,0.3274638358284625,0.004734884110756621,1.7530795118160376,1.1166493303584502,0.20921168459535,1.9907010741761213,1.8257109821981112,1.2334718703578866,0.14227552873000937,1.9676100396018068,1.8867159914243299,0.04907254365122349,0.08741660141393626,1.3279577793459163,0.6090405771138437,0.09241816547464998,1.927880144042788,1.881071512971023,0.720817600013061,0.5098709649869049,1.9655159922051864,1.5409812446821558,0.8365256634322987,0.4100725522524906,1.104653761074423,0.2042390719474958,0.0036342560148885372,1.6210625263471377,1.9996642042251191,1.7236427215281171,1.0063514321274825,1.6758860017029584,1.0529892973917843,0.369031772792064,0.8878566670857325,1.583827400398976,1.1709022605929995,0.17685610526626494,1.981756051457478,1.8553837689536192,1.2864088267169433,1.5011617176068484,1.9523211025393539,1.910719380466962,0.06745818811400128,0.06637984286344789,1.9094769528896376,0.6600686237127595,0.5665330484127362,1.283534939983505,1.8538268715121298,0.7738604578799936,0.46283905357771293,1.978332486468859,1.5862589496393298,0.011107129830524642,0.366708577955424,1.0499950698657468,0.23862382691611705,0.00046361373744618906,1.7215701859408297,1.9995820189964615,0.32077806593498615,0.9515406377296631,1.6344806204991,1.1076350283176457,0.41249612038427275,0.8335685296410167,1.5384572217338293,0.01739159573373994,0.1469745313839419,0.7179398674637826,1.8824856515002732,1.3384849651779003,1.4529851649775045,1.9341699106392933,0.6007072462615837,0.088646639639675,0.0481491324033847,1.8853258937321624,0.7121183532541601,0.5177982442603928,1.230555479028659,1.5333295970178207,0.827582990907627,0.4174216097187742,1.9882085472120339,1.6297746202257208,0.0044479398222867506,0.32524799678020366,1.9993880045914594,0.2752969409569437,1.0154224193437082,1.682543892626745,1.9964955335776373,0.3620200395359846,0.01022269098119466,1.7823864531844367,1.1619572560892908,0.18204103126021476,0.7797806113764647,1.4914686794897984,0.029044479841669912,0.1196567737056684,1.9550495896411948,1.9069351736000253,0.06422120951532062,0.06966822911243442,1.9132110183336186,0.6515513806390045,1.4958969116735799,1.2922224308480739,1.8585139376194093,0.038115868697749744,0.4705127247079478,1.1768830705654283,1.5788858453942534,0.8818237329900052,0.3737551381016787,1.9951144913765877,0.23277405167243825,1.0002781249617372,0.2858154208442366,1.9998031448731672,0.31414819095532076,0.9606034056558005,1.6414661751098985,1.0986118687144906,0.4051794979257436,0.01952609821068141,1.8153412368809725,1.2157927121843544,0.5045862021128322,0.726654574917054,1.8781826895701301,0.04361562558137966,0.09498493729438906,1.9373684183222752,1.9286588508338895,0.08495011140853748,0.05096924877826581,1.4211646865403438,0.7034427970138151,1.5427410342567907,1.2393730322692362,1.8291216693991617,0.818654507020541,0.42481860905395175,1.9867789238198545,1.6227022196809655,0.9364196605146023,0.3319708807720917,1.9990295627574541,0.2690759873832925,1.055080059879483,1.6891456152642363,1.9972133203584028,1.7892912628089026,0.9059028006563554,1.5984604947893564,1.1529989237078797,0.4501267229154765,0.788638403811502,1.845845466459427,1.2689795911002257,0.5529351543095404,0.674350093564629,1.9030763327131632,1.3811728790885587,1.4117309261559818,1.916869933302326,1.2815264245636708,0.10842924740167015,0.035122633945060766,1.470236638550605,0.756225532804536,0.16835105890927904,1.1858041845279486,1.7972374291929156,0.8728207308208066,0.38085323354269474,1.9941779449903527,1.7201189659777243,0.00118049003114451,0.29219442267437545,1.9999419943865702,0.3075747564788709,1.1097164485676794,1.6483989418250586,1.9916263149109552,0.3979118247708646,0.8514850101018581,1.5536561076652369,1.9693479958677473,0.496726623082951,0.7353917766659442,1.8738074597356658,0.04100511087723513,0.09888097649134742,0.6230243713907792,1.9252557289544483,1.4312650450443472,1.3611705004635517,1.8936157439353307,1.963675892669191,0.13458804962596094,0.022176012508331566,1.517895267796178,0.8097409465188637,0.43226294153998956,1.1316768918203626,1.6155785753745566,0.9273691990945812,0.3387487385923704,1.9985889082202006,1.6810121391990767,1.9438328191845322e-5,0.2545453141989492,1.997849043899162,0.34815464873518287,0.007798135249677873,1.6057034687604292,1.9830589205911153,0.44257245225766684,0.7975135897340128,1.8409717073523018,1.9544267913020619,0.5448391397973853,0.6829404444742515,1.4015304037355572,0.05797853526532426,0.07647440285805185,1.9204533966942696,1.9446542168664285,1.4800610195598978,1.3095245564418558,1.8676757420002628,1.9768640115744818,0.1633478963245122,1.1947100081879047,1.8026807394354685,0.8638281945596312,0.38800228015800564,0.0007003952528683577,1.6578418914386588,0.9821359633408974,1.7401425038293872,1.9999985561103872,1.6398584919890702,0.0018638846579158708,0.21913671186684147,1.9927570017760794,0.390693698995087,0.8604619517159164,0.15063673324760218,1.9715368871861891,0.4889084597091541,0.7441507537037277,1.8693603220457569,1.9366370031323141,0.1028511710823331,0.6314420526765008,1.3507364917517706,0.07778325834812594,0.05684353754522242,0.523922848641104,1.9612134931985303,0.13007831728049546,1.2569483188913577,1.8391278916373976,1.9871161105434731,0.19462234815441493,1.140663917564246,1.768789873529128,0.00738024888420985,0.34558101247374806,0.0001513849266463474,1.6981280265591372,1.0369564189579186,0.26062260679391447,1.998402651884596,1.7780217560605078,0.006708285432743488,0.18607503823137783,1.9846811724373974,0.4350640537414566,0.8064054387822003,0.12298797722633081,1.2514618172252527,0.5367805816390007,0.061783747426494284,1.8951360252109843,1.9160320995711833,0.07999163025720091,0.5810513825966166,1.9416393042526716,0.10035975591232615,0.040047382226830575,0.4764449032867458,1.9748837881108727,0.1584135839857097,0.013619790826471245,1.556483151217151,1.9944013763139252,1.6662099838895963,1.0861950535950722,1.732588366255349,0.002226141230634804,0.30512663800216266,0.9675766251433209,1.7363158984825073,0.0013513519568242316,0.22483578244556623,1.9938059921230753,1.8112814472731904,1.20897418104404,1.5686727502255233,1.9736458282441198,0.16646856513434238,0.7529307852317348,0.09797513035180683,1.3041253288316688,0.5860449356820936,0.6398900635403277,1.9182213465169367,1.4148257904595238,0.6967862291648446,0.5319198862383632,1.9586719930059089,0.12564017301992425,1.2657046059575203,0.4305405323332129,0.7919615284622455,0.1892782861765795,0.006088141451489282,1.6011799045373092,1.9986979126082702,0.2643318034118918,1.0314671255261187,1.691604401635527,7.089923958247812e-5,0.26676074464960287,0.9128518090418283,1.772290731403781,0.005700176136823498,0.19137875791549275,1.1260513364585927,1.842102786294656,1.2622525216658396,1.5227397245548127,1.959684136546227,0.5287601429937918,0.7001987121547134,1.4180796984803972,1.355874774592682,0.6365534550411045,0.5893055707976057,1.9385469017271313,1.464067108890406,0.7494642927460575,1.876551939214369,1.9728233389616974,1.5657251250894881,1.2124728543864958,0.3863477039589681,0.8458774789146137,0.22257965824818293,1.0952291771977614,1.6440697777143665,1.9999928059441114,0.30255729113619556,0.976644621234899,1.730147527106293,1.0826287890237603,1.668874831446884,0.8583889217482699,1.5594532582024834,0.013037424571305856,0.16035209017975804,1.1802271453110524,1.8703931378504364,0.03905082010112115,1.475235575130331,1.9428380599963342,0.5778042686138339,0.6483677087737933,1.3676683908757283,1.8967258001828693,0.06302827897554386,0.5399554433478806,1.956051601237891,1.5119136474262986,0.8028953555395835,1.8488579036186585,1.9840508094508436,0.18400094056646754,1.1586025036563152,0.34399924220462585,1.9981940453464473,0.2582176110467074,1.0405327700133986,1.6850238628131127,1.0188206133328819,0.34287898229658476,0.9218923128531014,1.7664961529633731,1.137119568855892,1.6271309577148796,0.8043516545451455,1.8371757590623483,0.023341044745872397,0.13184903163987305,1.9621944534071127,1.8960674736917797,0.05566009014702589,1.4263030783550528,1.347382573641902,0.6281173273398999,0.5975935560957903,1.316152035165317,1.8711234358696711,0.04528811185290038,0.4919880057852969,1.970682833686597,1.5582216005944236,0.8569188274697097,1.8186125776707809,1.9923206596769376,0.21690588442375536,1.1042554641473852,1.7448166251969304,1.9999860693465297,0.29608503269305253,0.9857145393004559,1.6605332482515844,1.0735849783413305,0.38517568777388866,1.9956585446963844,1.8005410313596686,1.1911982280826503,1.583502206484365,0.7509024194897438,1.8658909381858866,0.036580068548390465,1.483197597958834,1.945822331571804,1.9190486281528532,0.0751076271053358,0.0591855224691159,1.3982499903739198,0.6795481004335312,1.9093103754435714,1.2636854666646415,1.84290286089011,0.03041738520898185,0.44554742695148286,1.9823966240781083,1.6028517872271877,0.008250585431864188,0.3508729899502314,1.9976080341382454,0.25216446185551034,1.049595078955148,1.7071294070189398,1.998772578760308,0.27921753068521926,0.9309392443461411,1.6183951807559325,1.1281281795430849,0.42932028243190634,0.8132558228578439,1.8321798384911325,0.021432724193933383,0.13638690617612637,0.6982018612755365,1.8920036332102546,0.05271470534540379,1.4344913766567688,1.926607487321923,0.6197118028169699,0.0973349803057989,0.042025634481915874,1.4479204442763987,0.731942009802636,0.49982258609184416,1.210426376607366,1.5506721386131148,0.018460793852253632,0.4007732866279574,1.9911577659540938,1.6456700687790393,0.0027157606395852296,0.31016142623993737,0.9458752504661487,0.28967070121671457,0.0010130336578496602,1.6673168714866895,1.9945572208022475,0.24231383351027747,0.876371515391815,1.795071783214437,1.1822862842676605,0.4751800871991807,0.7596981543482106,1.8613174821367413,0.03418859929107976,0.11005583514273831,1.9487287690034507,1.9154353609563466,1.4084666971016708,1.3844792669926598,1.9046076719566498,0.6709682381655937,0.12227534418351105,1.2724249989069594,1.4962446479959564,0.7851415825946724,0.4531196249359736,1.1565348381954348,1.5955893114779727,0.9023402507724089,1.7914838015617685,1.9969399272080288,1.6865477524874395,0.00017832993105360018,0.27152321130837775,1.0006786126492646,0.32931187538752826,0.9399918590257673,1.6254986774233648,1.9873526649686717,0.42189455154468203,0.8221753588275077,1.827115435708117,1.961622064173922,0.1409958496473248,0.7068627266020854,0.5049341283513571,0.04984727507858622,0.08639954153922247,1.929980491310236,1.936115696043568,0.09346828649758432,1.33331158318557,1.4397914882276743,1.9711839848575061,0.14985375906681297,1.2192860378680905,1.5430773604101382,0.020236192001977016,0.4080603436218557,1.9899133073183362,1.6387164070427902,0.9570274038858111,1.7567997177062014,1.999725729227829,1.7253619781662253,0.0006459196975160397,1.6740455795060958,1.0554799352237518,0.370968840581012,0.8853784429538447,1.581800511772098,1.1733593396471353,0.4674799585412496,1.9812787178532294,1.8566731460644204,1.9451404269944885,0.11422965622430525,0.6549083394804187,1.9117467602377114,0.06836168852235236,1.3928375905904598,1.9084371047477173,1.9539824825572918,0.11796474366382803,1.2811421125978875,1.4883485692008551,1.9827856110081412,0.4607368271081915,1.1654880002624692,1.7846104395916544,0.010739477100824901,0.3647801703633321,1.996189779536029,1.6799238043870781,0.00039077921721719644,1.7198410295734332,1.9995067991282491,1.7619960874688365,0.004117124571531461,1.632550700201469,1.9887502176353267,0.2132546253084021,0.8311095284426611,0.13533318895224933,1.2270713917778553,0.5146658845861969,1.969249521578676,1.883656076916171,1.3408309847434468,0.09012569557626149,0.6039911448268244,1.9328868266507215,0.08967619350752931,1.3418505660749993,0.4980105954596581,0.7145079617601093,0.14511220758888121,1.2281276535187255,1.5354378909792574,1.9914334195210717,0.4153961128472283,1.1111925791293231,1.6317101836963652,0.004216040550611533,0.3234091861645423,0.992691852556605,1.719087652351727,0.0003610451458111452,1.6807188185871749,1.0464201926990047,1.7963399745115605,0.010581511650881725,1.5891546540563135,1.979067223274071,0.18060865941260984,0.7773482237785677,1.4892948705402933,1.2801009680211193,0.563310509714883,1.9543071911473873,1.9079831295413543,1.3918398327408776,0.06875641351772632,1.9121917799210957,1.9512230490394822,0.11372672808605955,1.289836090383798,0.4513678548455299,0.7674585331941415,0.17482908503728867,1.1744275438978136,1.5809179239478166,1.997101418919594,0.3718124585733067,1.0565629624221524,1.6732439036141982,0.0006854889081735482,1.7261082448157565,0.9379019435735613,1.7560902417806576,0.00333578238850607,0.20641166974885583,1.1010937116023154,1.8282904168029837,0.8400575964875878,1.5439878703372711,1.9664415870993694,0.15042542045023988,0.724256111597863,1.4407654258869458,1.332288684991708,0.09392672550183401,0.6123372511089149,1.9295811876099056,1.4416709839994255,0.7252262215860699,1.8883649511288767,1.9667003168524206,0.5235706965059943,1.2369504959600575,0.4063740591170586,0.821108021134943,0.2070260602561932,1.1202031824462932,1.6246519752998403,0.9389091185981512,0.28477661922993913,1.0017633425381218,1.7127541509712834,0.00015843344579202778,1.6873360395719792,0.8832986738048946,0.35696904747359715,0.009306050204578087,0.17425948672299874,1.155463387648092,1.8577513854850152,0.032403178321411374,1.4971861003627307,1.2713811358361489,0.12279562585000858,0.6719927632410567,1.3909112358623879,1.383477689559974,0.0721003357654405,0.5624029414628068,0.6453939256001331,1.4901746681807322,0.7783320978774882,1.8618680913228016,1.9792721122873453,0.16973873903128123,1.18335273344351,1.7957292211701974,0.8752951790176898,0.24160636341887254,1.0656175435437791,1.666508599874955,0.9937009202298475,0.3241525840061721,1.999912018359907,1.7501221754886114,1.1121953559220885,1.646498007057252,0.8290461564605588,0.3999052262621925,0.018253904617050565,1.5515772626816804,1.2093658097055027,0.49888358728953885,0.047694871661455696,1.4488900094945758,1.3237190403524202,0.6049179408282476,1.9396392416252626,1.33988214004929,1.8831832345689763,0.053062800855100845,0.5137838544809672,0.6971678872704015,0.13584054176067106,0.021656675624975863,1.8327808383109156,1.9889006501033277,0.2015318681368813,1.1292038939352969,1.7613422307858577,1.9995379788906082,0.3368796550759645,1.0108346874096619,1.7063619952249558,3.810127089476367e-5,0.365559846346593,1.9976824287888795,1.7852356654588584,0.00811211550256763,1.6037168882838362,0.7753074505442945,1.8530527890808393,0.03015245234432984,1.5050364154666733,1.2626389710019563,0.12718706947854974,0.06584877182774518,1.3992447543604989,1.3750839890171371,0.6558556166029469,1.9194756276648368,1.2878315092760002,1.4822476198126862,0.03687133915676499,1.8664330465902474,0.7498520279520684,0.16471671735241178,0.011783438108141753,1.8011906154742863,0.8662996912552839,0.235724838290849,1.9934477431107565,1.7246669833448058,1.9997015879742732,0.29685591383938115,0.9560192670108555,1.7440923797201686,0.0020192097304314593,0.21758094254052673,1.9924542483532974,1.8179890853055638,0.016568947781272714,1.559121264319442,1.970942992748792,1.8803680582565918,0.7417402614115354,1.456977652792812,1.9357603300380233,0.101752155696613,0.0868103162484396,1.9227406949975885,1.4253216015772454,0.05601749096699071,1.896548477795852,1.2349157846518606,1.529531686895635,0.02357461502266689,1.8377685424953323,1.9875121428573976,0.43768963737480293,0.004880341258501453,0.3285637343084139,0.9208109421976096,0.27221488059099963,1.9982180234035358,1.6858137083737512,1.0394489070504134,0.25894551185022385,0.9013360331880096,1.779586352559899,0.006999805796797154,0.18462845262480299,0.7841561681950086,0.4371239505287391,0.02798153760767974,1.5128451698295708,1.9563690800943272,1.9050373315314861,0.6891851550052112,1.4075454179845026,1.3666594218514978,0.07901697652191375,0.1105165038183844,1.2965072042882553,1.4742808860519974,0.03935155740329843,1.870926700861607,1.9754362729502035,1.5752242165985533,0.013212592507867216,1.8065860777491634,1.9946618534545166,0.3932171581375167,0.000968132723355497,1.730888282570484,0.9755602003238316,0.3108923221551303,0.9650837304804095,1.6448991815841074,1.094149320328048,0.22326239096192813,1.9935257108152702,1.812737234604941,0.014964920007331517,0.15412660792706223,0.7309699853026075,0.483266239215173,0.042315583798760104,1.465027690228759,1.9389207461771818,1.9269864640119738,0.6375642201627789,1.3568882824141912,1.417094072067013,0.05904986381899113,0.5297171581007667,1.2437236928569484,1.521814692547875,0.025572906967881726,0.42849193504960414,1.9860423707062227,1.6191878774438162,1.1471726795379136,1.7729793730099621,1.9988220516967767,0.3505683989877797,5.8570866322549264e-5,1.6923874701338193,1.0303829136477456,0.2650669698681756,0.910367263113076],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],34:[function(require,module,exports){
module.exports={"expected":[0.0,0.02015498988300879,0.07980751229765448,0.17655297527247604,0.30649157115239656,0.4643854777667179,0.6438699949346414,0.8377101054008167,1.0380921182346257,1.2369386385530405,1.4262341671457004,1.5983482050849356,1.7463428389842743,1.8642524081457115,1.9473239802219982,1.9922089418236992,1.9970979810568097,1.9617940208488098,1.8877201631212777,1.7778623235804831,1.636648869515334,1.4697721124020433,1.2839588509433018,1.0866992139484442,0.885944733393705,0.6897878183279641,0.506135550028704,0.34239094771502177,0.205154552992721,0.09995836215647036,0.031042831530226356,0.0011859447591739958,0.011591232344880686,0.061839257355307264,0.1499045229190017,0.2722371199630814,0.423905823975839,0.5987968725674438,0.789860411107913,0.9893946722246588,1.1893564338895521,1.3816852415356808,1.5586283248185238,1.7130531116312944,1.8387347419419644,1.9306069917760296,1.9849664926014383,1.9996220140398904,1.9739827923187154,1.9090823439467863,1.807536804684637,1.6734394731653932,1.5121958101092232,1.3303055443112106,1.1351006687055114,0.9344498878779194,0.7364414307436278,0.5490570142032177,0.3798501002958087,0.23564141629746704,0.12224401134214691,0.04422893252911442,0.004740966106766442,0.005371871202600076,0.0460962160449675,0.1252724031173329,0.23970884192069697,0.38479260192256526,0.5546753596929332,0.7425091447032931,0.9407223808807079,1.141325096685176,1.3362310007019493,1.517583439883821,1.6780721010766493,1.8112276895952517,1.9116827063605633,1.9753878116794386,1.999775054045557,1.9838613842125172,1.928288281889275,1.835295897706077,1.7086327527878002,1.5534046359429614,1.3758687894209287,1.183181679602554,0.9831105199860027,0.7837201749670741,0.5930480653190178,0.41878017992368843,0.26794125371515887,0.14661160075699076,0.059682016904851753,0.01065663192488886,0.001511658093664825,0.03261572912130595,0.10271504053401248,0.20898389050713362,0.3471385838485823,0.5116101076649313,0.6957686181594227,0.8921906894999923,1.0929585519654041,1.289979257082122,1.4753109042130856,1.6414827784128538,1.7817964947944593,1.8905960102897665,1.963495618630639,1.997556738079824,1.9914063656015843,1.9452924225860269,1.8610737611430839,1.7421452338113492,1.5933008471212997,1.42054051528874,1.230828203793904,1.0318112120748153,0.8315119110405469,0.6380043614631603,0.4590888487504803,0.30197745360006234,0.17300333317114547,0.07736543164860943,0.018918910907798625,1.9749017104664368e-5,0.02142977080993591,0.0822859387410334,0.18013514191252333,0.3110330809243328,0.46970326250352923,0.6497496948412933,0.8439147098928333,1.0443715198305843,1.2430397147016652,1.4319109835907864,1.6033719294707383,1.7505109650821717,1.8673969188771251,1.9493181204229715,1.9929723277430655,1.9965998406236247,1.9600544340938284,1.8848092527514462,1.7738974283338793,1.6317898142392102,1.4642147655160902,1.2779272289880237,1.080436451483028,0.8797032822463025,0.6838192712681451,0.5006804990674711,0.337669285846267,0.201356610310935,0.09723723365435699,0.02950820584260616,0.0008996826164089367,0.012564872968180874,0.064033553310888,0.15323102218127493,0.27656173141393703,0.4290542226154107,0.6045615265506648,0.7960089473494727,0.9956792433529651,1.1955237089693618,1.3874866178336478,1.56382994897335,1.7174453062785484,1.842140457804349,1.9328889445159223,1.986032696750129,1.9994294909297183,1.9725393025523559,1.9064460745674672,1.803814023657789,1.6687802457188345,1.5067879496070498,1.3243670415008422,1.1288709045150749,0.928179983975878,0.7303841268292981,0.5434564800750376,0.3749320933710548,0.231604181335765,0.11925028920311342,0.0423994000915664,0.004149371786306699,0.006042062154284156,0.04800117688509287,0.12833534491292398,0.24380629755013128,0.38975940303221757,0.5603112946304699,0.748587029045509,0.9469972152326348,1.1475439426013874,1.342143176629168,1.5229506261299501,1.6826779464728143,1.8148865326066614,1.9142470590995904,1.976754305139019,1.9998886049019373,1.9827174152329965,1.9259329064403141,1.8318240609242815,1.704184404343558,1.5481590886721142,1.370037491227932,1.1769996899995936,0.9768270348486688,0.7775884814542244,0.587315331871983,0.4136774929118334,0.26367430234883804,0.14335238575919973,0.05756191716628156,0.009761108623087211,0.0018768097548454987,0.03422683648933689,0.10550715990355153,0.2128444716028609,0.3519120067246445,0.5171039557418784,0.7017614345322409,0.8984409038620512,1.099214218302236,1.2959882096102664,1.4808309221778175,1.6462913500015115,1.7856997865837003,1.8934366806665457,1.965159160229546,1.9979760935726674,1.9905646307769183,1.9432235277575933,1.857861103419614,1.7379183153606328,1.5882300549405581,1.4148302529080738,1.2247086517744277,1.025529049434725,0.8253203716286405,0.6321530261078524,0.453813584661643,0.29749090656610866,0.16948635581242422,0.07495979325133206,0.017721582707019845,7.899528837107539e-5,0.02274320333727553,0.08480061308584386,0.1837496916027821,0.3156018035352075,0.47504199291901905,0.655643228946374,0.8501254794470905,1.0506491688388482,1.2491311912593244,1.4375707404011702,1.608371821851339,1.7546494474723704,1.8705071691354198,1.9512747644243487,1.9936964932074765,1.996062336455851,1.9582769270759974,1.8818633941554275,1.7699019656601043,1.6269058045073033,1.4586390830594482,1.2718846294536563,1.0741705119357863,0.87346658258266,0.6778632127254578,0.4952451702449673,0.332973784738803,0.1975902124731448,0.09455176250682307,0.02801191267301628,0.000652882972158042,0.01357751533790763,0.06626481810115925,0.15659096715354148,0.2809149172544303,0.43422517249082904,0.6103417995762375,0.8021655408364972,1.0019639851425515,1.2016832612472488,1.3932726891720322,1.5690093029535637,1.7218091632465518,1.8455129107740607,1.9351340499763712,1.98705995454565,1.9991974923193245,1.971057399395382,1.9037740023501335,1.800059493557137,1.664094602767167,1.5013600719770077,1.31841572683008,1.122636050177243,0.9219129168232862,0.7243374722120599,0.5378739785183245,0.3700387753999481,0.22759729649839466,0.11629135494628673,0.04060769099530559,0.003597111608017678,0.006751512490612788,0.04994373980730049,0.13143271574893556,0.2479336213442198,0.394750307445755,0.5659645964075325,0.7546748437058521,0.953274143090481,1.1537569608217941,1.3480418385733848,1.528297156854359,1.6872568274321786,1.8185131892019966,1.9167753008770017,1.9780822187236164,1.999962662123993,1.981534630847369,1.9235409584616971,1.8283193687272719,1.6997082419997036,1.5428918901950208,1.3641915772813422,1.170810709256599,0.9705444649979051,0.7714655727591426,0.5815988986582947,0.4085979644865134,0.2594364343999581,0.14012700665818112,0.055479041879347046,0.008904697810924067,0.00228138531993316,0.03587608999887737,0.10833460998193989,0.21673614379457662,0.3567110278023484,0.5226168772632016,0.7077660307421205,0.904695129608877,1.1054659658724795,1.3019854711858734,1.4863319482662367,1.6510743943523176,1.7895720447759627,1.896242062050799,1.9667845799388959,1.9983560309716273,1.9896837705965942,1.9411173774540305,1.8546145618688752,1.7336622505871297,1.583136028828984,1.4091036055479906,1.218580224205047,1.019245878447253,0.8191357317186712,0.6263162199849029,0.44855989386242756,0.29303210726044104,0.1660021821100962,0.07259069212378566,0.01656305257277002,0.0001777364736877951,0.024095235586977348,0.08735143600730166,0.18739648157564515,0.32019755852954224,0.48040145814383084,0.6615503644669777,0.8563421687501753,1.0569248173042816,1.2552128276247787,1.4432132140274805,1.6133476847409083,1.7587581226928022,1.8735830360716572,1.953193834942573,1.9943814096138173,1.9954854897838374,1.9564615700033192,1.8788827036890061,1.7658760933722242,1.621997033228395,1.4530452852606142,1.265831291010894,1.0679016427993537,0.8672348807403802,0.6719198779525068,0.48982977824589846,0.3283046298556078,0.19385550824465914,0.09190205478479707,0.026554011122177812,0.0004455555745188633,0.014629119456678108,0.06853296359554584,0.1599842251246395,0.28529650554204256,0.4394184693598331,0.6161374633348454,0.8083299483956459,1.0082486493585856,1.2078348474326723,1.3990432270121815,1.5741661821849573,1.7261445101714545,1.8488519676458983,1.9373422194801242,1.9880482254133014,1.9989260273721918,1.9695371413799734,1.901066232836338,1.796273362679239,1.659382729384246,1.4959123916097896,1.3124518353638315,1.116396351956506,0.9156489339569772,0.7183017057227744,0.5323097300311179,0.36517033965866463,0.22362092004935863,0.11336732544375305,0.03885387600928558,0.0030842073851106155,0.0075001941896527535,0.05192382808420992,0.13456439328525327,0.25209065028186006,0.3997651180323539,0.5716350417298142,0.7607723482277214,0.9595529165279354,1.1599639059445024,1.353926753549155,1.533622820879594,1.6918085630977795,1.8221075161354485,1.9192673318322169,1.9793714999832794,1.9999972227866138,1.9803130777733362,1.921112532430665,1.8247819595434358,1.6952044425557706,1.5376032485553814,1.35833127848348,1.1646149818264786,0.9642630585827571,0.765351690724686,0.5758989914655166,0.40354179527902334,0.25522781725620325,0.1369355908500115,0.0534334733134908,0.008087433314895365,0.0027253688089942107,0.03756342450756722,0.11119727909035537,0.22065875336895058,0.3615354575299691,0.5281486544794376,0.7137821696193148,0.9109531197106205,1.1117135477445081,1.3079708049292258,1.4918137651987262,1.655831722544423,1.7934131164245195,1.8990120436353746,1.968371813557893,1.9986965352699229,1.988763819852843,1.9389740548640981,1.851334264722995,1.7293772075968008,1.5780189699905018,1.4033607993997004,1.2124431631466044,1.0129619472855294,0.8129582355917575,0.6204941736365747,0.44332798386338856,0.28860123179686537,0.16255094968210937,0.07025822184080743,0.015443366264692227,0.0003159686729751199,0.02548581415642326,0.08993830675296077,0.19107536779007717,0.3248201643838825,0.4857814464897213,0.6674708680827566,0.8625645322551933,1.0631982173514474,1.2612843835851266,1.448838181603203,1.6182993216026438,1.7628368284589473,1.8766243981953072,1.9550752561780618,1.9950270499092118,1.9948693233918937,1.9546084345788297,1.8758672990834349,1.761819970484208,1.6170636942894787,1.4474335930636046,1.2597674527545957,1.0616300916813974,0.8610084228593228,0.6659895016995474,0.4844345369678964,0.3236620056190369,0.19015264513881847,0.08928821514647622,0.02513455877430859,0.00027770861252618406,0.015719643788216997,0.07083790020688374,0.16341066206754973,0.28970632321272827,0.444633908097123,0.6219482889089534,0.8145019265452728,1.014532987769185,1.213978224550182,1.4047980034291956,1.5793003829807515,1.7304511758158105,1.852157496533739,1.9395133658088266,1.9889974703183286,1.9986151068106626,1.967978588553415,1.898322872977603,1.7924557805688224,1.654644811679809,1.4904451236779632,1.3064756026644087,1.1101520563085647,0.909388282791847,0.7122770657624617,0.5267639543901939,0.3603269784411104,0.21967520904785387,0.11047831618887793,0.03713802440578162,0.0026106793762837865,0.008288077679988182,0.05394136350615497,0.13773025382682835,0.25627722016858057,0.40480363671685426,0.5773224066258714,0.7668793017714539,0.965833287545563,1.1661645328073813,1.3597976891139065,1.5389274078523947,1.696332973685089,1.8256693714380394,1.9217230535349126,1.980622097993955,1.99999228552472,1.979052804259822,1.9186477242653603,1.8212119730936753,1.6906731839029012,1.5322933726442398,1.352456826304522,1.1584127524281749,0.9579830637067708,0.7592470768370658,0.5702158354287791,0.3985091849981075,0.25104861714960014,0.1337782643895139,0.05142529226472403,0.0073093474153441695,0.0032087426855539336,0.03928877336903991,0.11409505415899357,0.22461214539047392,0.3663851053520175,0.5336990688963612,0.7198096135381649,0.9172146269889747,1.117956717150893,1.3139439744310812,1.497276156454392,1.6605631466727162,1.7972228498145935,1.9017465160114964,1.9699207983938418,1.9989975930183093,1.9878048148818932,1.9367936446448655,1.8480203415472032,1.7250633556406523,1.5728790805390616,1.3976020612926523,1.2062977110007256,1.0066775041523683,0.806788127246853,0.614687117022464,0.4381180613145922,0.2841984551860127,0.15913279484536025,0.0679624745303885,0.014362568008234988,0.0004936864263278551,0.02691488412056975,0.0925611231465121,0.1947862049373048,0.3294694385144673,0.4911817454575321,0.6734045059457778,0.8687923241911304,1.069469121193262,1.2673456193259536,1.4544454209529722,1.623226536856623,1.766885403670019,1.879631135378489,1.95691895381841,1.99563338859215,1.9942138616173815,1.9527175939977002,1.8728172994412666,1.7577337572049365,1.6121059825476567,1.4418042281192298,1.2536933541946715,1.0553561062958583,0.8547874548723339,0.6600723182046759,0.4790596595120924,0.31904609540378903,0.18648176941143801,0.08671034683334189,0.023753611694986132,0.0001493487157947504,0.016849045258917394,0.07317953689458356,0.16687014264481126,0.2941441960873581,0.4498712827034036,0.6277740467824787,0.8206812315040392,1.0208167521554503,1.2201131499485696,1.4105367911209266,1.5844117025502016,1.734728990074558,1.8554293668755701,1.9416474032065048,1.9899076517674579,1.9982647429154827,1.966381802475452,1.89554403113135,1.7886068980128058,1.6498810367920336,1.4849584841278638,1.3004872647811476,1.103903409871048,0.9031312106115362,0.7062637902922306,0.5212368706426884,0.35550888305044426,0.2157603193417068,0.10762444129195214,0.03546020395746685,0.0021765462849552275,0.00911513184175694,0.05599626638445043,0.1409301723282782,0.2604931656431009,0.4098656644877644,0.5830264664560745,0.772995463124389,0.9721150080811679,1.1723585964978593,1.3656544133773307,1.5442107082520997,1.700829880488702,1.829198614423552,1.9241423689889081,1.9818339633594348,1.999947850533323,1.9777538600851527,1.9161466313208164,1.8176095503852445,1.6861146450170683,1.5269624721911597,1.3465684527737816,1.1522042660375564,0.9517047284170579,0.7531519722167512,0.5645496550217792,0.3935003324219791,0.24689899915026303,0.13065515198470457,0.049454578052213205,0.006570470845162046,0.00373148785729438,0.04105206843543918,0.11702782073154072,0.22859616370800373,0.3712597797167625,0.539267901283212,0.7258481244265935,0.9234794041270507,1.124195227498829,1.319904743763095,1.5027189062792217,1.6652684798553299,1.8010010944694101,1.9044453711728808,1.9714314732649159,1.9992591923255816,1.9868067935625902,1.93457623291813,1.8446729232348902,1.7207208651072787,1.5677165634901944,1.39182761868589,1.200144110500689,1.0003927972708062,0.8006256503911081,0.6088952795098911,0.43293033199792574,0.27982395132914384,0.15574785261018464,0.06570354086999408,0.013320700492802762,0.0007108827142462415,0.028382389033886013,0.09521978159191236,0.19852884644662339,0.3341451972840229,0.496602141746167,0.6793510436886885,0.8750252985722224,1.075737281141465,1.2733962954403628,1.4600347106019587,1.6281291358875298,1.7709036884151088,1.8826031288610476,1.9587248550411849,1.996200401713446,1.993519130349752,1.9507891229444851,1.8697328252316017,1.7536176149318017,1.6071240938227058,1.4361574127763392,1.2476092352459651,1.0490799344530524,0.8485722224954201,0.654168561184902,0.47370535817567794,0.31445708152915974,0.18284302605502578,0.08416855166626358,0.022411224428881438,6.048095429045386e-5,0.01801727925966079,0.07555778116864065,0.17036253021355352,0.2986099488787586,0.45513038631267466,0.6336145068494379,0.8268676192016579,1.0270996943206994,1.2262393813101193,1.4162593634165412,1.589499939006324,1.738977783982521,1.8586674494389468,1.9437442473827993,1.9907787338103091,1.9978749495253298,1.964746846215996,1.8927298170563707,1.7847268670346232,1.6450915928809209,1.4794526896708688,1.2944870582415144,1.0976506594532072,0.8968779645579824,0.7002621168249679,0.5157286970977444,0.35071624379187627,0.21187640556122334,0.10480581347537155,0.03382048093504275,0.0017818252585440897,0.009981324007961367,0.05808845555458475,0.14416402239916926,0.26473832018386245,0.41495100140475527,0.5887469959210667,0.7791205907105089,0.9783978300191375,1.1785458523625965,1.3714966950101206,1.5494725133985372,1.7052991058898828,1.832695105693889,1.9265251826359995,1.9830070482134425,1.9998639195675187,1.9764162965550698,1.913609352385242,1.813974833706823,1.681529005951515,1.5216107577564224,1.3406663904704375,1.145989767877519,0.9454283006955206,0.7470666176082825,0.5589006740474016,0.3885154353904685,0.24277912716009564,0.12756637699238604,0.04752140851529574,0.005870832788506863,0.004293583676808654,0.042853240060012565,0.11999546296948416,0.23261065096072142,0.3761592880842368,0.5448549316823597,0.7318974637750731,0.9297472036781268,1.130428832379533,1.325852877486596,1.5081417996955924,1.6699475362406824,1.8047477011555277,1.9071085025201024,1.9729037785024532,1.9994813228590969,1.9857697953147975,1.9323219072674158,1.84129214200262,1.7163499075164408,1.5625316227529884,1.3860376996584407,1.1939826047018403,0.9941080748746378,0.7944710484301332,0.603118889864738,0.42776500081840496,0.27547789301048187,0.15239625667532963,0.06348151008314507,0.012317804870058735,0.0009675489579038521,0.02988827093283819,0.09791417707723404,0.20230314449091513,0.33884725600952414,0.5020424212607266,0.6853102464350447,0.8812632092082339,1.082002449615833,1.279436172938542,1.465605829784309,1.6330069250523396,1.7748915239798697,1.8855402612549754,1.9604928885168385,1.9967280668772052,1.9927851570295108,1.9488230975900027,1.866613998285053,1.749471706244332,1.602118224889618,1.4304933700729356,1.2415153362193245,1.0428018240493162,0.8423629712180424,0.6482784638272359,0.4683718444429339,0.3098951452521759,0.1792365587927245,0.08166293004101499,0.02110744999770131,1.1108838118278896e-5,0.01922429964750061,0.07797253909308144,0.17388768683152123,0.3031034051983116,0.46041101120049166,0.639469438423139,0.8330608452880881,1.0333815661014087,1.2323566766608467,1.4219654942854763,1.5945648913735058,1.7431973897207684,1.86187161632609,1.945803815516526,1.9916106820408228,1.9974457420362994,1.9630737843525745,1.8898803419084356,1.780815840887802,1.6402766691200048,1.4739279577753353,1.288475220042089,1.0913940520260523,0.8906287916221122,0.6942722824148684,0.510239651317388,0.3459492499654093,0.2080236211133646,0.10202254406934397,0.03221892010431482,0.001426531887753102,0.01088661996568241,0.06021784837908584,0.14743167630884035,0.26901251611560606,0.4200594466070139,0.5944837690712826,0.785254442598982,0.9846815052004696,1.184726056017261,1.377324303253637,1.5547126154608437,1.7097404733627708,1.8361587071443919,1.9288714003597736,1.984141306221412,1.999740495942415,1.9750401665007034,1.911035987676259,1.810307966622508,1.6769164478299707,1.5162384407221312,1.3347508725143489,1.139769503408748,0.9391540284489429,0.740991253371204,0.5532691156292902,0.38355469079720905,0.23868916390586747,0.12451206141321036,0.04562586001036806,0.005210460879694678,0.00489500794241704,0.04469221710005322,0.12299786365668197,0.23665544858405319,0.3810834369335806,0.5504599394169858,0.7379573926467,0.9360177780765553,1.1366572855775288,1.3317881406621022,1.513544622509873,1.6746001310153305,1.8084625218894153,1.9097358048645647,1.9743376559532386,1.9996639758451336,1.984693861097907,1.9300307567341144,1.8378781313846075,1.711950655512529,1.5573244631224088,1.380232532900619,1.187813436971435,0.9878235851980433,0.7883245644588297,0.5973581762433547,0.4226222717963647,0.27116045189078697,0.14907813942206316,0.06129646993564797,0.011353920752464108,0.0012636750194943147,0.031432470338080054,0.10064420317929745,0.2061089499928942,0.34357542896864,0.5075023691206675,0.6912818788081605,0.8875058097141827,1.0882643791546407,1.2854650132572032,1.4711585584515656,1.6378597116880564,1.778848752852852,1.8884424165493707,1.962222984411524,1.9972163632416717,1.9920119706471882,1.9468195955882814,1.8634609417891541,1.74529619489777,1.5970885734702853,1.4248123237277766,1.2354118978114514,1.0365220230575563,0.83615994629342,0.6424022587788375,0.46305932897736124,0.30536046676035267,0.17566251007283717,0.07919358092477102,0.019842339897948036,1.234317377862837e-6,0.020470058747504294,0.08042371528975956,0.1774454732619597,0.30762438756340615,0.465712948792647,0.6453386102452947,0.8392606651428501,1.039662119375992,1.2384647943796108,1.4276549583468827,1.5996063595963603,1.7473876406230162,1.8650417409787052,1.947826026258829,1.9924034635986954,1.9969771374012213,1.961362682967903,1.8869957182363652,1.7768739740501147,1.6354364556893086,1.468384506657013,1.2824519876385538,1.085133834713617,0.8843839386338591,0.6882945236485087,0.5047699501079387,0.3412080898578418,0.2042021181756818,0.09927474300764039,0.0306555847237594,0.0011106802059590581,0.011830983957524577,0.06238436075116072,0.15073300499120734,0.2733155846160724,0.4251907983212748,0.6002365593154602,0.7913967765148278,0.9909657854320061,1.1908989633557336,1.3831370079291265,1.5599308074652884,1.714153807482162,1.839589281969614,1.931180929489158,1.985236692582442,1.999577584532999,1.973625524276485,1.9084266388367168,1.8066090939664732,1.672277152839413,1.510845733284151,1.3288221325568461,1.1335437183194625,0.9328821594986311,0.7349261194704603,0.5476552022028303,0.37861829458177143,0.23462927093316022,0.12149232588658254,0.0437680074078699,0.004589381202141807,0.005535736899055288,0.0465689269195485,0.12603490420426244,0.24073039681666297,0.3860320317704161,0.556082703100405,0.7440276716861962,0.9422908796469741,1.1428803410814965,1.3377102988581706,1.518927161320988,1.679226080410926,1.8121454099429566,1.9123271744331327,1.9757330489819578,1.999807144069251,1.9835790334092056,1.9277028718141258,1.834431026227437,1.7075232828572706,1.552095290271213,1.3744123477054162,1.1816368509793596,0.9815395764657834,0.7821864412511205,0.5916133661825,0.41750234805977016,0.26687179850041887,0.1457936319094958,0.05914850673229366,0.010429086211528271,0.0015992492026033478,0.03301492625671454,0.10340975206744019,0.2099461126307246,0.34832952940791817,0.5129817696687815,0.6972657049400803,0.8937528535196209,1.0945228224240944,1.2914825782690054,1.4766926772818627,1.6426873041189727,1.7827752187310786,1.891309480114856,1.9639150743898544,1.9976652715201018,1.991199601742113,1.9447786960738196,1.86027378028338,1.7410912458165302,1.592035338226144,1.4191144981309223,1.2292991610964956,1.0302407795177937,0.8299633927287318,0.6365401781383608,0.45776802161278085,0.30085322516457635,0.17212102106339167,0.0767606018519239,0.018615944098983706,3.085778209344081e-5,0.021754507354636354,0.08291121294194481,0.18103574897916996,0.3121727174041262,0.4710359896730284,0.6512217904951556,0.845466833885359,1.0459411060747137,1.2445634932077687,1.4333275308782176,1.6046241445467118,1.7515483711826674,1.868177698182985,1.94981079973625,1.9931570471706266,1.996469154129064,1.9596136096470922,1.8840760599770725,1.7729014222177675,1.6305711437676598,1.462822555271323,1.2764175989367486,1.0788702547820659,0.8781436522529787,0.6823290766358254,0.49931980951184285,0.3364929507355925,0.20041204768995868,0.09656251882299904,0.02913053654210762,0.0008342826886846844,0.01281437868298485,0.06458790709782947,0.1540678780504552,0.2776473557223593,0.4303448538689547,0.6060051394297977,0.7975473498480421,0.9972504224973723,1.1970643305604212,1.3889345794458645,1.5651268833036394,1.7185389339301143,1.842986694668718,1.9334536788023344,1.9862931640308643,1.9993751917739573,1.9721724257579758,1.9057814089306222,1.8028783618368518,1.6676113042228746,1.5054328484440191,1.3228804047713956,1.1273126585155975,0.9266129415710793,0.7288714554669176,0.5420591555067698,0.37370644172228074,0.23059960859954587,0.11850728968606594,0.041947924089326905,0.00400761828726226,0.006215745239165793,0.048483295392252934,0.12910646465515008,0.24483533470603314,0.39100487713506404,0.5617230006443017,0.7501080611294729,0.9485662606143164,1.1490977530929767,1.3436191181613024,1.5242892035293334,1.683825201711562,1.8157962198493791,1.9148825088718013,1.9770899024733295,1.9999108218765898,1.9824253562821954,1.925338344454412,1.8309509626849843,1.7030679644231017,1.5468443107413559,1.36857737395839,1.1754530906888423,0.9752562968838501,0.776056921250695,0.5858846865908784,0.4124054318352657,0.262612102232911,0.14254286386933668,0.05703770531336805,0.009543337776381722,0.0019742582527272345,0.03463557618487145,0.10621071450781738,0.2138144808440956,0.3531093695498235,0.5184804064797166,0.7032614884815425,0.9000040938783722,1.100777532227648,1.297488630292068,1.4822079676886852,1.647489511664765,1.7866707665269377,1.8941413387079018,1.9655690916176314,1.9980747739815234,1.9903480824012603,1.9427004796581004,1.8570526396545195,1.7368570250879865,1.586958718749777,1.41340011833518,1.223177367515431,1.0239583415268008,0.8237735552758865,0.63069245344615,0.4524981313453368,0.2963735984920295,0.16861223164624028,0.07436408892045221,0.017428311041031486,9.997806219774752e-5,0.023077594735726015,0.08543493379836797,0.18465837217438297,0.3167482150703842,0.4763799235920819,0.6571187467987738,0.851679106384037,1.052218278190056,1.2506525322587057,1.438982987823811,1.6096180480320084,1.7556794170590437,1.8712793640748426,1.951758057554247,1.9938714029915199,1.9959218122841587,1.9578266334751002,1.8811214824513196,1.7688983422985338,1.625680925525491,1.4572423233046128,1.2703722922831644,1.07260355963038,0.8719081789581774,0.6763761770001403,0.49388944479913754,0.3318040188376431,0.19665355935646134,0.09388597864284554,0.027643835795735816,0.0005973502530983721,0.013836765299850229,0.06682840038338411,0.1574361637656555,0.2820076583381008,0.4355214096750839,0.6117892815664073,0.8037059196628467,1.0035351681657585,1.203221914111439,1.3947167888112788,1.5703006377408333,1.7228956795025936,1.8463508110505786,1.9356895585302132,1.9873106788381536,1.999133325659408,1.9706809283397626,1.9031004024394993,1.7991159175901605,1.6629190862722036,1.5000000000000475,1.316925923844779,1.1210765701121035,0.9203466222879586,0.7228275005077928,0.5364811965739515,0.36881932622717983,0.22660033606898466,0.11555707071483079,0.04016568194442027,0.003465195113556918,0.006935006103767294,0.050435246904272146,0.13221242368863384,0.24897010011526155,0.3960017766099079,0.5673806092681118,0.7561983208130996,0.9548436731131429,1.1553092760361923,1.3495143651847499,1.529630537344782,1.688397313260988,1.819414807408736,1.9174017072497906,1.978408162834308,1.9999750051720808,1.9812328752848547,1.9229372680491146,1.8274380782130444,1.698584876186584,1.5415717319361102,1.3627278421296385,1.169262400346147,0.9689739946296626,0.7699362465618765,0.5801723637399693,0.40733172444102417,0.2583815313378145,0.13932596370047312,0.054964149051491495,0.00869671043237863,0.0023886873577479983,0.03629435611006426,0.10904697986796874,0.2177139018398564,0.3579147605998936,0.5239980623681286,0.7092689926109925,0.9062592838788444,1.1070282615168996,1.3034829320989263,1.4877042118286041,1.6522661446477618,1.7905352423739493,1.8969378804758152,1.9671849707643663,1.9984448544513715,1.9894574462579535,1.9405850284265869,1.8537976471310615,1.732593699955459,1.581858915557949,1.4076694100475249,1.2170467588670693,1.0176749572281876,0.8175906784211835,0.6248593156761523,0.447249866325526,0.2919217636791599,0.165136280411478,0.07200413678786155,0.0162794876332627,0.00020859242757342855,0.02443926863137469,0.0879947781771544,0.18831319976110394,0.32135069983910014,0.4817445394747294,0.6630292462377538,0.8578972372666699,1.0584933877860598,1.2567316710274588,1.4446211058043343,1.6145878728026988,1.7597806150839541,1.8743466161445723,1.9536677227999624,1.9945465028457385,1.9953351334854519,1.9560018250339728,1.8781321023591104,1.7648648924061996,1.6207659941167216,1.4516440311649745,1.2643163064555307,1.0663339967809256,0.8656777650383928,0.6704360598692869,0.48847907045845507,0.32714147936733085,0.19292680162822662,0.09124522818525749,0.02619554120640122,0.0003998922575603192,0.014898103425913689,0.06910575211266312,0.160837729096022,0.2863963202399151,0.44072026127588393,0.6175887572634635,0.8098722427079514,1.0098197742018378,1.2093714707963412,1.4004834076394654,1.5754518664241153,1.7272238721167947,1.8496814982390906,1.9378884803598198,1.9882891968144754,1.9988519957425728,1.9691510909330359,1.9003837252577869,1.7953219098357216,1.6582006843207426,1.4945474025387746,1.310958924967181,1.1148356994221016,0.9140834491568456,0.716794493317644,0.5309215457224861,0.36395714112792366,0.22263161130477094,0.11264178550069859,0.03842135136827585,0.002962133105646525,0.007693491083469395,0.05242470435741087,0.1353526586254643,0.2531345297290931,0.40102253282728695,0.5730553055074166,0.7622982101838462,0.9611228691981135,1.16151466456831,1.355395807077898,1.5349509517951487,1.6929422344698262,1.8230010296939985,1.9198846700637637,1.9796877779962119,1.999999691420608,1.980001637517828,1.9204997374360304,1.8238925115635527,1.6940741952206482,1.536277762112213,1.356863983264117,1.1630650244713723,0.9626929178416398,0.7638246589389508,0.5744766232555538,0.40228142627869723,0.2541802529143632,0.13614305846410946,0.05292791984792833,0.007889237619625566,0.0028425201485157148,0.03799120051374694,0.11191843612101393,0.22164422159878938,0.3627455127546707,0.5295345193972574,0.715287980043555,0.9125181764533853,1.1132747634002729,1.3094652469265504,1.4931811926108804,1.6570170144001346,1.7943684936329487,1.899698994960667,1.9687626480060398,1.9987754983122028,1.9885277284906109,1.9384324259354049,1.8505089312790184,1.7283014388119091,1.5767361300827234,1.4019225996196178,1.2109075772982898,1.0113908748036793,0.8114150063761042,0.6190409952256848,0.4420234338494512,0.2874978965646112,0.16169330465253506,0.06968083866762176,0.015169519251933439,0.0003566965881671713,0.02583947525816399,0.09059064496934521,0.19200008738082763,0.3259799899209649,0.48712962542928573,0.6689530553590934,0.864120980928974,1.064766187008289,1.262800669399722,1.4502416621252106,1.6195334225606093,1.7638518032681385,1.8773793332417745,1.9555397200452869,1.995182320068165,1.994709140905587,1.9541392564000564,1.8751080377750546,1.7608012318542525,1.615826543671481,1.4460278999738925,1.2582498806533275,1.0600618138690536,0.8594526565829524,0.6645089598662148,0.4830889001888975,0.3225055164858427,0.1892319217048235,0.08864037175478223,0.0247857099788803,0.00024191650127203257,0.015998351140397493,0.07141987233479008,0.16427243968647165,0.2908131680843242,0.44594120332703113,0.6234033374527097,0.8160460754257177,1.0161039923761397,1.215512757719783,1.406234208160421,1.5805803658897517,1.7315233408176174,1.8529786246787476,1.9400503574382044,1.9892286793103096,1.9985312131354447,1.967582973963366,1.8976314846888678,1.7914964884292466,1.6534562847361784,1.4890752714273767,1.3049796438233268,1.1085902929476588,0.9078236695604837,0.710772672188341,0.5253804225479551,0.35912007847122207,0.21869359106380282,0.10976154919162595,0.03671500125850491,0.002498452133519846,0.008491170219613986,0.05445158917197479,0.1385270454326203,0.2573284590608189,0.40606694747706384,0.5787468652229213,0.7684074883080187,0.9674036008533266,1.1677136735886813,1.3612632115351941,1.5402502367345692,1.6974597858225817,1.8265547450564363,1.9223312992415704,1.9809286974167346,1.9999848796471147,1.978731691612597,1.9180258488928055,1.8203144027795193,1.6895360996883648,1.5309626103708747,1.3509860289727762,1.1568612078486267,0.9564133146101379,0.7577223997776705,0.5687976901079268,0.3972547368250424,0.2500084329047584,0.13299427387880325,0.05092909812980406,0.007120951231689876,0.0033357386995344074,0.03972604237391697,0.11482496985002377,0.22560528488084908,0.3676014352090726,0.5350895588880833,0.7213182130412759,0.9187805243879288,1.119516791153166,1.315435338485265,1.498638693705589,1.6617419332720398,1.7981703688979773,1.9024245731038374,1.9703020610275017,1.999066692504237,1.987558965821214,1.9362427572082188,1.8471866219960524,1.7239804111931756,1.5715905646641484,1.3961599140390175,1.204760065294974,1.005106342461895,0.8052467830674986,0.6132377219070727,0.4368190403507797,0.28310217188259845,0.15828344036012265,0.0673942863254211,0.01409844973862373,0.0005442846941557944,0.02727815931068467,0.09322243164335098,0.1957188894087747,0.3306359024683291,0.49253496875544167,0.6748899401839774,0.870350091545478,1.071036428093391,1.268859287662265,1.4558444347855644,1.6244545019661127,1.7678928208077032,1.8803773955800303,1.9573739753500945,1.9957788295452747,1.9940438592700587,1.952239001141133,1.8720494081437857,1.7567075211492233,1.6108627692883066,1.4403941515576097,1.2521732544885587,1.0537872586334895,0.8532330994712903,0.6585951110997228,0.47771914689169226,0.3178963133046827,0.18556906552664598,0.08607151223805709,0.023414397798772968,0.00012342922396813005,0.01713746498567037,0.07377066964656542,0.1677401598727194,0.2952580274144009,0.4511840296113413,0.6292327924699215,0.8222271739618898,1.0223875744744566,1.2216455323128923,1.41196896322857,1.5856859335723277,1.7357939157845381,1.856242060139478,1.942175104375393,1.9901290892179024,1.9981709905083016,1.9659766393682756,1.894843789440884,1.7876398044673953,1.6486860749128822,1.483583822804177,1.2989883165830136,1.1023405973701104,0.9015675307480878,0.704762274969817,0.5198580459137307,0.3543083293116286,0.21478643089006744,0.10691647555138917,0.035046699012536875,0.002074170511650708,0.009328012005428654,0.05651582129003463,0.14173545872797733,0.2615517224584749,0.4111348213149586,0.5844550636091028,0.7745259138810854,0.9736856200022281,1.173906058248636,1.3671163468059087,1.545528182851657,1.7019497888848167,1.830075813131278,1.9247414981461888,1.98213087208201,1.999930570436636,1.9774230877295405,1.915515700133241,1.8167038931890778,1.6849707688356683,1.52562648665014,1.345094211423256,1.1506511955166396,0.950135432966913,0.751629710105332,0.5631357886039384,0.39225185462436674,0.24586623608780245,0.12987973431532684,0.048967762846611085,0.0063918816143948565,0.003868323529645834,0.041498813167699766,0.11776646625265552,0.22959693523189406,0.3724823361636207,0.5406629614273664,0.7273594534217515,0.9250460803320983,1.1257540982276975,1.321392970968243,1.5040764995520663,1.6664407146384268,1.8019407180025047,1.9051145072503235,1.9718031490249777,1.999318425525873,1.9865511965140201,1.934016108732541,1.8438308505069394,1.719630787771433,1.5664224225418497,1.3903815809206845,1.198604465671483,0.9988216084296212,0.7990862521281736,0.6074497249381515,0.43163689139296546,0.27873476325552493,0.1549068222171467,0.06514457007562346,0.013066321398491842,0.0007713493361780621,0.028755263963744726,0.09589003424879583,0.19946945895954216,0.3353182535816316,0.49796035595276145,0.6808396662171794,0.876584323078445,1.077303863379283,1.274907286511357,1.461429202486738,1.6293509166464242,1.771903508090326,1.883340684741825,1.9591704162648562,1.9963360077161,1.9933393148561591,1.950301134313567,1.8689563342751896,1.7525839219846375,1.6058748670266638,1.4347430084380632,1.2460866679759024,1.0475105789070005,0.8470193393636861,0.6526947471551585,0.47237002266148975,0.3133140518782327,0.1819383777693797,0.08353875110005227,0.022081658830164885,4.4435105661544405e-5,0.018315399968963808,0.07615805119613828,0.17124075268654038,0.2997307226670999,0.4564485330477195,0.6350768920629273,0.8284152941752821,1.0286702723075343,1.227769552343184,1.4176874463326197,1.5907683678118176,1.7400354283381636,1.8594716757220255,1.9442626372480782,1.9909903909728741,1.9977713420892251,1.9643321505948526,1.8920207496222932,1.7837520102815674,1.6438902432648514,1.4780732735705515,1.2929851798919438,1.096086859540259,0.8953152798246167,0.6987635390611104,0.5143546339427842,0.3495220837036893,0.2109102851088165,0.10410667695470155,0.03341651052506189,0.0016893049983367492,0.010203983387323201,0.05861731917844226,0.14497777178554594,0.2658041531114973,0.4162259541697797,0.590179675203449,0.7806532452373187,0.979968678517411,1.1800915739612088,1.3729549817025979,1.5507845816778687,1.7064120663102773,1.833564094843288,1.9271151715794574,1.9832942545085128,1.9998367659342797,1.9760758775559282,1.9129693903031881,1.813061125400357,1.6803783829840708,1.5202696017164539,1.3391887633308743,1.1444352327584661,0.9438595208760627,0.7455468305712554,0.5574911423775164,0.3872729772808179,0.24175382607197704,0.12679956279184257,0.047043991467272894,0.0057020575645503335,0.004440253602786437,0.043309442874149395,0.12074280914561053,0.23361901498954651,0.37738802283223327,0.5462545068767123,0.7334114625678625,0.9313145968088078,1.1319864382626115,1.3273379090605517,1.50949439536772,1.6711131729067112,1.8056793920250844,1.907768691153063,1.973265852708415,1.9995306874341474,1.9855044603738983,1.9317525684566683,1.8404417493579959,1.7152527403482172,1.5612319078474224,1.3845878284972093,1.192441021562013,0.992536920941555,0.7929336568869351,0.6016772329333713,0.4264771916606581,0.27439584318740706,0.15156358359344735,0.0629317787775775,0.012073174998541103,0.0010378815456268953,0.030270730874627838,0.09859334742059744,0.20325164789293682,0.340026858317377,0.5034055727291655,0.6868019984561096,0.8828234292880974,1.0835682453144213,1.2809444270631514,1.4669957446415876,1.6342224732026565,1.7758837067018163,1.886269083683009,1.9609289718337037,1.9968538325732186,1.9925955354920197,1.9483257324593062,1.8658289383395759,1.748430597234556,1.6008630338987064,1.429074693824246,1.239990361523671,1.0412320226060405,0.840811621691393,0.6468081010854052,0.4670417387781337,0.3087589131968529,0.1783400018381187,0.08104218837976229,0.02078754571366226,4.937266464333234e-6,0.019532109564182942,0.07858192268656505,0.17477407986152627,0.304231077179671,0.4617345056984862,0.640935405401387,0.834610191647199,1.0349518377212157,1.2338845759239607,1.4233894316035736,1.5958274678621516,1.7442477109471248,1.862667343862924,1.9463128736028334,1.9918125505554816,1.9973322836635496,1.9626495725971567,1.8891624767375927,1.7798332594320612,1.6390689792179216,1.4725438413825118,1.2869704708623246,1.0898293264682295,0.8890671637418608,0.6927767014003892,0.50887040400912,0.3447615306948265,0.20706530682004853,0.1013322643831358,0.031824500185335,0.0013438707950051976,0.011119049766125655,0.06075599983218083,0.14825385654036383,0.270085583057158,0.4213401449518335,0.595920473894952,0.7867892403591754,0.9862525282304719,1.1862699764106321,1.378778885610556,1.5560192255958318,1.7108464418477771,1.8370194524121328,1.929452225785984,1.9844187987448927,1.9997034698451395,1.9746901143039008,1.9103870199769482,1.809386243295458,1.6757591235238682,1.5148921671563382,1.3332699179490084,1.1382135650925844,0.9375858262238341,0.7394740014371695,0.5518639743810907,0.3823183014500833,0.23767136528946875,0.12375388096912665,0.045157859976959425,0.005051506328844213,0.005051506328847433,0.04515785997696875,0.12375388096914175,0.23767136528948907,0.3823183014501079,0.5518639743810678,0.7394740014371997,0.9375858262239222,1.138213565092559,1.333269917949038,1.5148921671563653,1.6757591235238913,1.8093862432955097,1.9103870199769375,1.9746901143039077,1.9997034698451401,1.9844187987448971,1.9294522257859514,1.8370194524121157,1.7108464418477949,1.5560192255958056,1.3787788856105272,1.1862699764105455,0.9862525282304406,0.7867892403592003,0.5959204738949233,0.42134014495180794,0.2700855830571366,0.1482538565403474,0.06075599983217006,0.01111904976612943,0.001343870795006863,0.031824500185357096,0.10133226438314957,0.20706530682006763,0.3447615306948073,0.5088704040091968,0.6927767014004731,0.8890671637418355,1.0898293264682608,1.2869704708623546,1.4725438413824894,1.6390689792179893,1.7798332594320807,1.8891624767376072,1.962649572597165,1.9973322836635519,1.99181255055547,1.9463128736028232,1.8626673438629369,1.744247710947104,1.5958274678620807,1.4233894316035451,1.2338845759239303,1.0349518377211844,0.834610191647168,0.6409354054013048,0.4617345056985076,0.3042310771796485,0.1747740798615086,0.07858192268657505,0.019532109564165623,4.9372664644442565e-6,0.02078754571365704,0.08104218837977462,0.17834000183813659,0.3087589131969166,0.46704173877816024,0.6468081010853814,0.8408116216914239,1.0412320226060718,1.2399903615237013,1.4290746938242744,1.6008630338987315,1.748430597234539,1.8658289383395916,1.9483257324593342,1.9925955354920235,1.9968538325732161,1.9609289718336953,1.8862690836829945,1.7758837067017605,1.634222473202676,1.4669957446415598,1.2809444270631214,1.0835682453144468,0.8828234292880098,0.6868019984560798,0.5034055727291383,0.34002685831735346,0.20325164789291783,0.09859334742055925,0.030270730874620178,0.0010378815456281165,0.012073174998545988,0.06293177877758849,0.1515635835934639,0.2743958431874287,0.4264771916606839,0.6016772329334001,0.7929336568869657,0.9925369209416431,1.1924410215620436,1.3845878284972382,1.5612319078474013,1.7152527403482392,1.8404417493580434,1.931752568456659,1.9855044603739036,1.9995306874341465,1.973265852708408,1.9077686911530258,1.8056793920250658,1.671113172906688,1.5094943953676931,1.327337909060576,1.131986438262524,0.9313145968087765,0.7334114625678871,0.5462545068766844,0.37738802283220874,0.2336190149894899,0.12074280914559565,0.04330944287414029,0.004440253602783439,0.005702057564553664,0.04704399146728244,0.1267995627918579,0.24175382607199747,0.3872729772807978,0.5574911423775446,0.7455468305713406,0.943859520876094,1.1444352327584972,1.3391887633309039,1.5202696017165291,1.6803783829841352,1.8130611254003424,1.9129693903032008,1.9760758775559348,1.9998367659342804,1.9832942545084968,1.9271151715794455,1.8335640948432708,1.706412066310255,1.5507845816777952,1.3729549817025162,1.180091573961178,0.9799686785174365,0.7806532452372882,0.5901796752033686,0.41622595416980046,0.2658041531114761,0.14497777178552973,0.058617319178431715,0.010203983387310656,0.0016893049983418562,0.03341651052507,0.10410667695471554,0.21091028510880083,0.34952208370375637,0.5143546339428116,0.6987635390610862,0.8953152798246479,1.0960868595402904,1.2929851798920282,1.478073273570579,1.6438902432648754,1.783752010281587,1.8920207496223074,1.9643321505948608,1.9977713420892274,1.9909903909728697,1.9442626372480867,1.8594716757220096,1.7400354283381043,1.590768367811838,1.417687446332591,1.2277695523431535,1.028670272307503,0.8284152941751952,0.635076892062951,0.4564485330476932,0.29973072266707745,0.1712407526865546,0.07615805119610453,0.018315399968957813,4.443510566121134e-5,0.022081658830171436,0.08353875110006481,0.18193837776943045,0.31331405187825545,0.4723700226614681,0.6526947471551878,0.8470193393637171,1.0475105789070318,1.2460866679759328,1.4347430084380917,1.6058748670266436,1.752583921984658,1.868956334275233,1.9503011343135768,1.993339314856163,1.9963360077161023,1.9591704162648473,1.8833406847417837,1.7719035080903422,1.6293509166464,1.4614292024867102,1.2749072865113815,1.0773038633791951,0.8765843230784139,0.6808396662171496,0.49796035595273436,0.33531825358165057,0.1994694589594893,0.09589003424878251,0.02875526396375072,0.0007713493361768409,0.01306632139849695,0.06514457007563468,0.15490682221716345,0.2787347632555467,0.4316368913929912,0.6074497249381803,0.7990862521282043,0.9988216084296526,1.1986044656715138,1.390381580920661,1.5664224225419223,1.7196307877714943,1.8438308505069259,1.934016108732552,1.986551196514025,1.9993184255258696,1.9718031490249568,1.9051145072503344,1.801940718002486,1.6664407146384035,1.5040764995520393,1.3213929709681596,1.1257540982276664,0.9250460803321238,0.7273594534217214,0.540662961427288,0.3724823361635963,0.22959693523187408,0.11776646625266751,0.04149881316769077,0.0038683235296380625,0.00639188161439197,0.048967762846620744,0.12987973431534228,0.24586623608778568,0.3922518546244368,0.5631357886039666,0.7516297101053623,0.9501354329669444,1.1506511955166145,1.3450942114233388,1.5256264866501665,1.68497076883565,1.816703893189096,1.9155157001332537,1.9774230877295471,1.9999305704366364,1.9821308720820041,1.924741498146177,1.8300758131312604,1.7019497888847943,1.5455281828516307,1.3671163468058793,1.1739060582486611,0.9736856200021967,0.7745259138809995,0.5844550636091259,0.4111348213149332,0.2615517224584538,0.14173545872796123,0.05651582129000543,0.009328012005432207,0.0020741705116527065,0.03504669901254509,0.10691647555137773,0.21478643089012206,0.35430832931165257,0.5198580459137083,0.7047622749698469,0.901567530748119,1.102340597370198,1.2989883165830436,1.4835838228041547,1.6486860749129062,1.7876398044674144,1.894843789440898,1.9659766393682836,1.9981709905083036,1.990129089217906,1.9421751043753825,1.8562420601394325,1.7357939157845168,1.5856859335723024,1.411968963228593,1.2216455323128617,1.0223875744743685,0.8222271739619149,0.6292327924698924,0.4511840296113151,0.295258027414419,0.16774015987267055,0.07377066964655365,0.017137464985664597,0.00012342922396857414,0.023414397798767528,0.08607151223809295,0.1855690655266642,0.31789631330466417,0.477719146891719,0.6585951110997523,0.8532330994713214,1.0537872586335209,1.252173254488589,1.440394151557638,1.6108627692883766,1.7567075211492438,1.872049408143801,1.9522390011411426,1.994043859270056,1.9957788295452668,1.957373975350069,1.8803773955800422,1.767892820807683,1.6244545019660883,1.455844434785486,1.26885928766218,1.0710364280934166,0.870350091545447,0.6748899401839477,0.4925349687554146,0.3306359024682636,0.19571888940875615,0.09322243164336164,0.02727815931067734,0.0005442846941529078,0.014098449738628949,0.06739428632543243,0.15828344036013953,0.2831021718826203,0.4368190403508526,0.6132377219070492,0.8052467830675294,1.0051063424619262,1.2047600652949488,1.3961599140390986,1.5715905646641741,1.7239804111931973,1.847186621996069,1.93624275720823,1.987558965821228,1.9990666925042357,1.970302061027508,1.9024245731038238,1.7981703688979587,1.6617419332720162,1.4986386937055618,1.3154353384852353,1.119516791153135,0.9187805243878975,0.7213182130411913,0.5350895588880555,0.3676014352090483,0.22560528488086518,0.11482496985000923,0.03972604237389232,0.003335738699536517,0.00712095123169354,0.05092909812981394,0.1329942738788189,0.2500084329048168,0.3972547368250675,0.5687976901079551,0.7577223997777008,0.9564133146101125,1.1568612078487137,1.3509860289728055,1.5309626103708531,1.6895360996883875,1.8203144027795375,1.9180258488928403,1.9787316916126034,1.9999848796471147,1.9809286974167284,1.9223312992415582,1.8265547450564186,1.6974597858225593,1.5402502367345425,1.361263211535218,1.1677136735886504,0.9674036008532384,0.7684074883079882,0.5787468652228929,0.40606694747703864,0.25732845906079804,0.13852704543257555,0.054451589171983006,0.008491170219609878,0.0024984521335220666,0.036715001258498026,0.10976154919166603,0.21869359106382236,0.35912007847124605,0.5253804225479828,0.7107726721883709,0.9078236695605715,1.1085902929476898,1.3049796438233026,1.4890752714274038,1.6534562847362022,1.7914964884292657,1.8976314846888815,1.967582973963374,1.9985312131354465,1.9892286793102967,1.9400503574381744,1.8529786246787314,1.731523340817596,1.5805803658897726,1.4062342081603405,1.215512757719697,1.0161039923761652,0.8160460754256869,0.6234033374526806,0.44594120332695764,0.29081316808426216,0.16427243968645444,0.07141987233477853,0.015998351140391942,0.00024191650127280973,0.024785709978887294,0.08864037175479522,0.18923192170480863,0.3225055164858657,0.483088900188973,0.6645089598661909,0.8594526565829834,1.060061813869085,1.2582498806533577,1.4460278999739715,1.615826543671461,1.7608012318542727,1.8751080377750697,1.9541392564000486,1.9947091409055964,1.995182320068162,1.9555397200452944,1.8773793332417594,1.763851803268118,1.61953342256054,1.4502416621251826,1.2628006693997467,1.0647661870082576,0.864120980928943,0.6689530553590639,0.48712962542925875,0.3259799899209417,0.19200008738084273,0.09059064496933211,0.025839475258144118,0.00035669658816628314,0.015169519251938879,0.06968083866761243,0.16169330465255216,0.28749789656467317,0.44202343384943,0.6190409952257137,0.811415006376135,1.011390874803654,1.210907577298376,1.4019225996196465,1.576736130082749,1.7283014388119309,1.8505089312790048,1.9384324259354353,1.9885277284906153,1.9987754983122041,1.9687626480060318,1.8996989949606533,1.7943684936329298,1.657017014400111,1.4931811926108531,1.3094652469265204,1.1132747634002418,0.9125181764533541,0.715287980043525,0.5295345193972296,0.36274551275469036,0.22164422159876973,0.11191843612097341,0.03799120051375393,0.0028425201485133833,0.007889237619629452,0.05292791984793843,0.13614305846415387,0.2541802529143462,0.4022814262787223,0.5744766232555822,0.763824658938926,0.962692917841728,1.1630650244714031,1.3568639832640932,1.5362777621122394,1.6940741952206708,1.8238925115636029,1.9204997374360429,1.980001637517823,1.999999691420608,1.9796877779961943,1.9198846700637515,1.8230010296939807,1.6929422344698035,1.5349509517951703,1.3553958070778156,1.161514664568223,0.9611228691980822,0.7622982101838157,0.5730553055074397,0.40102253282721634,0.2531345297290345,0.13535265862547718,0.052424704357400875,0.007693491083465509,0.0029621331056489675,0.038421351368284395,0.11264178550071302,0.2226316113047906,0.36395714112794786,0.5309215457225138,0.7167944933176741,0.9140834491568768,1.1148356994220763,1.3109589249672107,1.4945474025388512,1.6582006843207235,1.7953219098357405,1.9003837252578004,1.9691510909330439,1.998851995742577,1.988289196814488,1.9378884803598284,1.849681498239074,1.7272238721167732,1.575451866424043,1.4004834076394888,1.209371470796366,1.0098197742018062,0.8098722427078648,0.617588757263382,0.440720261275905,0.2863963202399329,0.16083772909600502,0.06910575211263092,0.01489810342591813,0.0003998922575596531,0.026195541206408324,0.09124522818527059,0.1929268016282787,0.32714147936735405,0.4884790704584331,0.6704360598693165,0.8656777650384238,1.0663339967810135,1.264316306455561,1.4516440311649519,1.6207659941167463,1.7648648924062562,1.878132102359098,1.956001825033982,1.9953351334854548,1.994546502845735,1.9536677227999357,1.8743466161445848,1.7597806150839337,1.614587872802674,1.4446211058043064,1.2567316710273735,1.0584933877860287,0.8578972372666389,0.6630292462377243,0.481744539474654,0.3213506998390354,0.18831319976108563,0.0879947781771182,0.024439268631367805,0.00020859242757154117,0.01627948763325804,0.07200413678787321,0.16513628041152661,0.2919217636791017,0.4472498663255995,0.6248593156761814,0.8175906784212144,1.0176749572282757,1.2170467588670444,1.4076694100476055,1.5818589155579748,1.7325936999554803,1.8537976471311075,1.9405850284265784,1.9894574462579664,1.9984448544513698,1.967184970764344,1.8969378804758263,1.790535242373965,1.652266144647652,1.4877042118285768,1.3034829320988421,1.107028261516925,0.9062592838788698,0.7092689926108537,0.5239980623681011,0.35791476059982597,0.21771390183983685,0.10904697986798029,0.036294356110055936,0.002388687357742003,0.008696710432390287,0.05496414905150171,0.13932596370046013,0.2583815313378355,0.4073317244410952,0.5801723637400493,0.7699362465618518,0.9689739946296939,1.1692624003461778,1.3627278421296147,1.541571731936232,1.6985848761865658,1.8274380782130617,1.9229372680491266,1.9812328752848498,1.9999750051720797,1.978408162834313,1.9174017072497782,1.8194148074086853,1.6883973132610062,1.5296305373447554,1.3495143651847206,1.1553092760361614,0.9548436731130548,0.7561983208131243,0.5673806092680835,0.3960017766098829,0.2489701001152409,0.13221242368859,0.050435246904262265,0.00693500610376363,0.0034651951135500347,0.04016568194444503,0.11555707071487187,0.22660033606900454,0.36881932622720415,0.5364811965738786,0.7228275005078775,0.9203466222880465,1.1210765701121348,1.3169259238448627,1.4999999999999762,1.6629190862721845,1.7991159175902478,1.9031004024395128,1.970680928339784,1.9991333256594044,1.9873106788381578,1.935689558530162,1.846350811050562,1.7228956795025328,1.5703006377408544,1.3947167888113021,1.2032219141114084,1.0035351681656701,0.8037059196627602,0.6117892815664308,0.4355214096751049,0.28200765833807895,0.15743616376560798,0.06682840038335247,0.013836765299854559,0.0005973502530994823,0.027643835795743144,0.09388597864283477,0.1966535593565477,0.3318040188376241,0.4938894447991645,0.6763761770001699,0.8719081789581521,1.0726035596305248,1.2703722922831946,1.4572423233046405,1.6256809255255154,1.7688983422985176,1.8811214824513343,1.957826633475109,1.9959218122841615,1.9938714029915101,1.9517580575542546,1.871279364074827,1.755679417059023,1.6096180480319382,1.438982987823732,1.2506525322587303,1.0522182781900247,0.8516791063841185,0.657118746798691,0.47637992359200676,0.3167482150703613,0.18465837217436487,0.08543493379840128,0.02307759473570714,9.997806219652627e-5,0.01742831104103737,0.07436408892046409,0.16861223164622618,0.2963735984920114,0.4524981313454106,0.6306924534461791,0.8237735552759173,1.0239583415267755,1.223177367515406,1.4134001183352862,1.5869587187498024,1.7368570250880269,1.8570526396545062,1.9427004796581016,1.9903480824012647,1.9980747739815214,1.9655690916176158,1.8941413387079007,1.786670766526936,1.6474895116647412,1.482207967688658,1.297488630291984,1.1007775322276452,0.9000040938783693,0.7032614884814854,0.5184804064797638,0.35310936954975625,0.2138144808440411,0.1062107145078034,0.0346355761848558,0.0019742582527306762,0.009543337776393934,0.057037705313406906,0.14254286386935278,0.2626121022329514,0.41240543183524503,0.5858846865908811,0.7760569212508087,0.9752562968838814,1.1754530906889291,1.3685773739583662,1.546844310741358,1.7030679644231845,1.8309509626850176,1.9253383444544458,1.9824253562821905,1.9999108218765893,1.9770899024733226,1.9148825088717771,1.8157962198493283,1.6838252017115598,1.5242892035293067,1.3436191181612729,1.1490977530929176,0.9485662606141999,0.75010806112947,0.5617230006442735,0.3910048771350165,0.2448353347060498,0.1291064646550928,0.048483295392252046,0.006215745239159132,0.004007618287267589,0.04194792408931958,0.11850728968613444,0.23059960859956596,0.37370644172232736,0.5420591555068229,0.7288714554669204,0.9266129415711106,1.1273126585156286,1.322880404771452,1.5054328484440953,1.6676113042228768,1.8028783618368536,1.9057814089306475,1.9721724257579965,1.9993751917739604,1.9862931640308639,1.933453678802323,1.842986694668747,1.7185389339300527,1.5651268833035665,1.3889345794458356,1.1970643305603905,0.9972504224974262,0.7975473498479279,0.6060051394296906,0.43034485386892896,0.2776473557223377,0.15406787805046873,0.06458790709782847,0.012814378682966199,0.0008342826886859056,0.029130536542121943,0.09656251882298805,0.20041204768996046,0.33649295073570096,0.4993198095118946,0.682329076635882,0.8781436522529534,1.0788702547820972,1.2764175989367788,1.462822555271376,1.630571143767706,1.7729014222177695,1.8840760599770872,1.9596136096471009,1.9964691541290618,1.9931570471706164,1.9498107997362488,1.8681776981829694,1.7515483711826279,1.604624144546732,1.4333275308781381,1.2445634932077658,1.045941106074654,0.8454668338853,0.6512217904951796,0.47103598967302596,0.31217271740410346,0.18103574897915198,0.08291121294192094,0.021754507354635688,3.085778209344081e-5,0.0186159440989897,0.0767606018519359,0.17212102106344118,0.30085322516457835,0.4577680216127833,0.6365401781383107,0.8299633927287907,1.0302407795178818,1.2292991610964985,1.419114498130951,1.5920353382261005,1.7410912458165702,1.860273780283425,1.94477869607383,1.991199601742117,1.9976652715201055,1.963915074389861,1.8913094801148032,1.782775218731059,1.6426873041189487,1.4766926772818851,1.2914825782690298,1.0945228224239782,0.8937528535195897,0.6972657049400233,0.5129817696688038,0.3483295294079375,0.2099461126307054,0.10340975206741365,0.03301492625669933,0.001599249202604791,0.010429086211528715,0.05914850673230421,0.14579363190952688,0.2668717985004595,0.4175023480597725,0.5916133661825027,0.782186441251151,0.9815395764657578,1.1816368509794464,1.3744123477054189,1.5520952902712155,1.707523282857313,1.8344310262274073,1.9277028718141587,1.9835790334092063,1.9998071440692504,1.9757330489819447,1.912327174433155,1.8121454099429548,1.6792260804109032,1.5189271613209612,1.3377102988581144,1.1428803410815216,0.9422908796469712,0.744027671686166,0.556082703100377,0.3860320317703465,0.24073039681667951,0.126034904204261,0.046568926919564824,0.00553573689904896,0.0045893812021502445,0.043768007407862464,0.12149232588659742,0.23462927093312558,0.3786182945818183,0.5476552022029089,0.734926119470463,0.9328821594986624,1.1335437183194093,1.3288221325568221,1.5108457332842513,1.6722771528394151,1.8066090939664918,1.9084266388367062,1.9736255242764793,1.9995775845330024,1.9852366925824367,1.931180929489136,1.839589281969628,1.7141538074821798,1.5599308074652627,1.3831370079290974,1.190898963355675,0.9909657854320316,0.7913967765148249,0.6002365593154313,0.4251907983212492,0.2733155846160119,0.15073300499122078,0.06238436075115972,0.011830983957519803,0.0011106802059565046,0.03065558472378105,0.09927474300767869,0.20420211817568357,0.34120808985788675,0.5047699501078918,0.6882945236485924,0.8843839386339749,1.0851338347136483,1.2824519876386111,1.4683845066569652,1.6354364556893108,1.7768739740501882,1.8869957182363795,1.9613626829679194,1.996977137401219,1.992403463598695,1.9478260262587916,1.865041740978675,1.7473876406229576,1.5996063595963808,1.42765495834688,1.2384647943795803,1.0396621193759323,0.8392606651427631,0.6453386102453186,0.4657129487926205,0.3076243875633835,0.17744547326192572,0.0804237152897137,0.02047005874750374,1.234317377862837e-6,0.019842339897954253,0.07919358092476103,0.17566251007290312,0.3053604667603548,0.46305932897738766,0.6424022587788933,0.8361599462933949,1.0365220230576728,1.2354118978114819,1.4248123237278307,1.5970885734703333,1.7452961948977532,1.8634609417891697,1.9468195955882914,1.9920119706471957,1.9972163632416673,1.962222984411523,1.8884424165493694,1.7788487528528323,1.6378597116879887,1.471158558451488,1.2854650132572003,1.0882643791546378,0.8875058097142363,0.6912818788080767,0.5075023691205908,0.3435754289686379,0.2061089499928751,0.1006442031793211,0.03143247033805807,0.0012636750194885416,0.011353920752468882,0.06129646993565885,0.14907813942203485,0.27116045189078897,0.42262227179645984,0.5973581762433835,0.7883245644588603,0.9878235851980177,1.187813436971438,1.380232532900727,1.5573244631224583,1.7119506555125712,1.8378781313845938,1.9300307567341157,1.9846938610979126,1.999663975845132,1.974337655953225,1.9097358048645752,1.8084625218893968,1.6746001310153071,1.5135446225098217,1.331788140662019,1.1366572855775259,0.936017778076524,0.7379573926466697,0.5504599394170085,0.3810834369335113,0.2366554485840513,0.12299786365668064,0.04469221710003546,0.004895007942419594,0.005210460879703671,0.045625860010377384,0.12451206141322546,0.23868916390590622,0.38355469079718896,0.5532691156292927,0.7409912533712343,0.9391540284489742,1.1397695034088353,1.3347508725143515,1.5162384407221339,1.6769164478299938,1.8103079666225428,1.9110359876762955,1.9750401665007038,1.999740495942415,1.9841413062214215,1.9288714003597516,1.8361587071443435,1.7097404733627486,1.5547126154608177,1.377324303253687,1.1847260560172022,0.984681505200353,0.7852544425989514,0.594483769071254,0.42005944660705774,0.2690125161156234,0.1474316763087794,0.06021784837907507,0.010886619965673527,0.0014265318877517696,0.03221892010430838,0.10202254406939526,0.2080236211134011,0.3459492499654546,0.5102396513173658,0.6942722824148441,0.8906287916221434,1.0913940520261118,1.288475220042146,1.473927957775338,1.640276669120007,1.7808158408878216,1.88988034190845,1.9630737843525985,1.9974457420362999,1.9916106820408226,1.9458038155165158,1.8618716163261175,1.7431973897207094,1.5945648913735035,1.4219654942854478,1.2323566766607885,1.0333815661014627,0.8330608452880012,0.6394694384231098,0.46041101120046524,0.3031034051982686,0.17388768683155165,0.07797253909308033,0.019224299647494503,1.1108838118500941e-5,0.021107449997719296,0.08166293004100489,0.17923655879272615,0.3098951452521985,0.4683718444429845,0.6482784638273185,0.8423629712180172,1.0428018240493193,1.2415153362192721,1.4304933700729896,1.6021182248896881,1.749471706244334,1.8666139982850685,1.9488230975899856,1.9927851570295179,1.9967280668771958,1.9604928885168378,1.885540261254961,1.7748915239799037,1.6330069250523591,1.4656058297842058,1.279436172938539,1.0820024496157732,0.8812632092082592,0.6853102464350689,0.5020424212606254,0.3388472560095006,0.20230314449087905,0.09791417707725736,0.029888270932844407,0.0009675489579025198,0.01231780487006362,0.06348151008316594,0.1523962566753161,0.27547789301048387,0.4277650008184307,0.6031188898647668,0.7944710484302195,0.994108074874726,1.1939826047018431,1.3860376996584696,1.5625316227529438,1.7163499075165025,1.8412921420026678,1.9323219072674271,1.9857697953148075,1.9994813228590984,1.9729037785024328,1.9071085025200534,1.804747701155509,1.669947536240638,1.5081417996956388,1.3258528774865932,1.1304288323794176,0.9297472036780955,0.7318974637749882,0.5448549316823823,0.3761592880842345,0.2326106509606466,0.11999546296945585,0.04285324005998703,0.004293583676810986,0.0058708327885071965,0.047521408515305286,0.12756637699241524,0.24277912716015326,0.38851543539047084,0.5589006740474298,0.7470666176083128,0.9454283006955804,1.1459897678776343,1.3406663904704403,1.521610757756449,1.6815290059515382,1.8139748337068082,1.9136093523852895,1.9764162965550702,1.9998639195675199,1.9830070482134317,1.926525182636009,1.83269510569384,1.7052991058898606,1.5494725133984872,1.371496695010065,1.1785458523625936,0.9783978300191345,0.7791205907104782,0.5887469959210123,0.41495100140468366,0.26473832018386045,0.1441640223991678,0.0580884555545742,0.009981324007948933,0.0017818252585494188,0.03382048093504353,0.10480581347538553,0.21187640556119014,0.3507162437919433,0.5157286970978215,0.7002621168249976,0.8968779645580136,1.0976506594531534,1.2944870582415986,1.4794526896709712,1.6450915928809449,1.7847268670346428,1.8927298170563591,1.9647468462159967,1.9978749495253376,1.990778733810305,1.9437442473827793,1.85866744943896,1.7389777839825187,1.5894999390062299,1.4162593634164868,1.2262393813100612,1.027099694320725,0.826867619201627,0.6336145068494086,0.4551303863126246,0.29860994887871595,0.17036253021355185,0.07555778116862877,0.018017279259654795,6.048095429111999e-5,0.02241122442890009,0.0841685516662648,0.18284302605502745,0.31445708152920326,0.4737053581756563,0.6541685611849848,0.848572222495423,1.0490799344530837,1.2476092352460229,1.4361574127763164,1.6071240938227758,1.7536176149318223,1.8697328252316172,1.9507891229445038,1.9935191303497524,1.9962004017134456,1.958724855041176,1.882603128861033,1.7709036884150526,1.6281291358875274,1.4600347106019562,1.2733962954403326,1.0757372811414052,0.875025298572135,0.6793510436886858,0.4966021417461399,0.3341451972840632,0.19852884644658764,0.09521978159187472,0.028382389033878574,0.0007108827142450203,0.013320700492793991,0.0657035408700154,0.15574785261024715,0.2798239513291656,0.4329303319979516,0.6088952795098677,0.8006256503910831,1.0003927972709228,1.2001441105007196,1.3918276186859448,1.5677165634901735,1.720720865107261,1.8446729232349526,1.9345762329181513,1.9868067935625997,1.9992591923255825,1.9714314732649152,1.9044453711728675,1.8010010944693915,1.665268479855285,1.5027189062792192,1.3199047437630922,1.1241952274987979,0.9234794041270193,0.7258481244265087,0.5392679012832093,0.37125977971676016,0.22859616370796576,0.11702782073156603,0.0410520684354142,0.003731487857294047,0.00657047084516571,0.04945457805223186,0.13065515198467792,0.2468989991503211,0.3935003324220041,0.5645496550218074,0.7531519722168092,0.9517047284170325,1.1522042660375593,1.3465684527738109,1.5269624721911863,1.6861146450171325,1.8176095503852299,1.9161466313208178,1.9777538600851652,1.9999478505333237,1.9818339633594182,1.9241423689889179,1.8291986144235344,1.7008298804887403,1.5442107082520495,1.3656544133772486,1.1723585964978565,0.9721150080811365,0.7729954631244416,0.5830264664559943,0.40986566448767037,0.260493165643099,0.1409301723282621,0.05599626638445887,0.009115131841760271,0.002176546284962888,0.03546020395746763,0.10762444129197912,0.2157603193416734,0.3555088830504247,0.5212368706428157,0.7062637902922606,0.9031312106115957,1.1039034098711076,1.3004872647811505,1.4849584841278913,1.6498810367920573,1.7886068980128424,1.8955440311313891,1.966381802475453,1.9982647429154845,1.9899076517674654,1.941647403206475,1.8554293668755246,1.7347289900745557,1.584411702550153,1.4105367911209759,1.2201131499484834,1.0208167521553622,0.8206812315040083,0.6277740467824233,0.44987128270344867,0.294144196087356,0.16687014264474676,0.07317953689457168,0.016849045258906403,0.0001493487157943063,0.023753611694986798,0.0867103468333894,0.18648176941145622,0.31904609540385365,0.47905965951207063,0.6600723182046786,0.854787454872365,1.0553561062959178,1.2536933541947568,1.4418042281192325,1.612105982547659,1.757733757204957,1.8728172994412957,1.9527175939977268,1.9942138616173817,1.9956333885921471,1.9569189538183926,1.8796311353785145,1.7668854036699626,1.6232265368566208,1.4544454209529443,1.267345619325896,1.0694691211932876,0.8687923241910288,0.6734045059457616,0.49118174545750515,0.32946943851441235,0.19478620493731147,0.09256112314651088,0.026914884120562532,0.0004936864263264118,0.014362568008247534,0.0679624745303844,0.15913279484536957,0.2841984551860346,0.4381180613146416,0.6146871170225323,0.8067881272468559,1.0066775041523996,1.206297711000659,1.3976020612927202,1.572879080539134,1.725063355640664,1.8480203415472198,1.9367936446448466,1.9878048148819047,1.9989975930183046,1.9699207983938343,1.9017465160114766,1.7972228498146172,1.6605631466727355,1.497276156454291,1.313943974431065,1.1179567171508338,0.9172146269890142,0.7198096135381756,0.533699068896258,0.3663851053519932,0.22461214539042718,0.11409505415900545,0.03928877336903902,0.0032087426855526013,0.00730934741534961,0.05142529226474746,0.13377826438950824,0.251048617149602,0.3985091849981326,0.5702158354288203,0.7592470768371515,0.9579830637067737,1.1584127524281917,1.3524568263045647,1.5322933726441943,1.6906731839029754,1.821211973093677,1.9186477242653726,1.9790528042598314,1.99999228552472,1.9806220979939377,1.921723053534906,1.8256693714380137,1.696332973685046,1.5389274078524162,1.359797689113917,1.1661645328073504,0.9658332875455174,0.766879301771382,0.5773224066258945,0.40480363671685193,0.2562772201685596,0.13773025382679804,0.05394136350612633,0.008288077679989625,0.002610679376285008,0.037138024405763304,0.11047831618891168,0.21967520904790905,0.3603269784411126,0.526763954390209,0.7122770657623965,0.9093882827919207,1.1101520563086666,1.306475602664425,1.4904451236779905,1.654644811679768,1.7924557805688068,1.8983228729776542,1.9679785885534191,1.9986151068106648,1.9889974703183364,1.9395133658088304,1.8521574965336782,1.730451175815789,1.5793003829807029,1.4047980034292318,1.2139782245501793,1.014532987769168,0.814501926545228,0.6219482889088981,0.4446339080971442,0.28970632321272616,0.16341066206753252,0.07083790020686165,0.015719643788203896,0.000277708612525851,0.025134558774309257,0.0892882151464951,0.19015264513878682,0.32366200561910186,0.48443453696788674,0.6659895016995635,0.8610084228593679,1.061630091681358,1.2597674527546945,1.447433593063607,1.6170636942895036,1.7618199704842468,1.8758672990834226,1.9546084345788262,1.9948693233918955,1.9950270499092086,1.9550752561780398,1.8766243981953195,1.7628368284589455,1.6182993216026191,1.4488381816031624,1.2612843835850416,1.0631982173514585,0.8625645322551763,0.6674708680828343,0.48578144648967003,0.324820164383828,0.1910753677900755,0.08993830675295367,0.02548581415643858,0.0003159686729732325,0.015443366264707659,0.07025822184081376,0.16255094968212647,0.2886012317968275,0.4433279838633556,0.6204941736366694,0.8129582355917744,1.0129619472855749,1.2124431631465518,1.4033607993996768,1.5780189699905969,1.7293772075968223,1.8513342647230262,1.9389740548641237,1.9887638198528415,1.9986965352699229,1.968371813557885,1.8990120436353484,1.7934131164244658,1.655831722544421,1.4918137651987113,1.3079708049291825,1.1117135477444344,0.9109531197105185,0.7137821696193121,0.5281486544794101,0.3615354575300216,0.2206587533688953,0.11119727909030841,0.03756342450756256,0.00272536880899088,0.008087433314888481,0.05343347331352377,0.13693559085007045,0.2552278172562241,0.40354179527905987,0.5758989914654806,0.7653516907246612,0.9642630585828877,1.1646149818265095,1.3583312784835357,1.53760324855536,1.6952044425557626,1.8247819595435177,1.9211125324306828,1.9803130777733509,1.999997222786614,1.9793714999832788,1.9192673318322047,1.8221075161354143,1.691808563097726,1.5336228208796032,1.353926753549139,1.1599639059444573,0.9595529165278616,0.7607723482276358,0.5716350417298115,0.39976511803234027,0.2520906502818203,0.13456439328527314,0.05192382808417739,0.0075001941896523094,0.003084207385113058,0.038853876009302124,0.11336732544374128,0.22362092004943213,0.36517033965867784,0.5323097300311582,0.7183017057228318,0.915648933956966,1.116396351956509,1.3124518353638612,1.4959123916098291,1.6593827293843018,1.7962733626792409,1.9010662328363452,1.9695371413799845,1.9989260273721947,1.9880482254132879,1.937342219480123,1.8488519676458819,1.7261445101715016,1.5741661821848965,1.3990432270121007,1.2078348474326557,1.00824864935854,0.8083299483956987,0.616137463334764,0.43941846935974826,0.28529650554203057,0.15998422512461474,0.06853296359556027,0.014629119456682438,0.000445555574522305,0.026554011122184917,0.09190205478482205,0.19385550824464404,0.3283046298555995,0.4898297782460109,0.6719198779525364,0.8672348807404535,1.0679016427993282,1.2658312910108966,1.4530452852606293,1.6219970332284306,1.7658760933722808,1.8788827036890008,1.9564615700033243,1.9954854897838405,1.994381409613811,1.9531938349425504,1.8735830360716559,1.7587581226927909,1.6133476847408723,1.443213214027529,1.2552128276246934,1.0569248173042645,0.8563421687501444,0.6615503644669214,0.4804014581438647,0.3201975585294671,0.18739648157563515,0.08735143600728301,0.02409523558696436,0.00017773647368835022,0.016563052572768022,0.07259069212379732,0.16600218211012918,0.29303210726049334,0.4485598938624181,0.6263162199849057,0.8191357317187159,1.0192458784473126,1.2185802242051331,1.4091036055479802,1.583136028828998,1.7336622505870738,1.8546145618689138,1.941117377454065,1.9896837705965946,1.9983560309716255,1.9667845799389134,1.8962420620507598,1.7895720447758996,1.6510743943523045,1.4863319482662092,1.301985471185925,1.1054659658724908,0.9046951296087609,0.7077660307420905,0.5226168772631616,0.35671102780237884,0.2167361437945836,0.10833460998188071,0.03587608999886904,0.0022813853199290524,0.008904697810918849,0.05547904187934327,0.1401270066581971,0.25943643439998876,0.40859796448657304,0.5815988986582715,0.7714655727591455,0.9705444649979365,1.1708107092566578,1.364191577281411,1.5428918901950113,1.6997082419997058,1.8283193687272974,1.9235409584616818,1.9815346308473858,1.999962662123993,1.978082218723613,1.916775300876978,1.8185131892020192,1.6872568274321043,1.5282971568543444,1.3480418385733552,1.153756960821735,0.9532741430905064,0.7546748437058631,0.5659645964075171,0.3947503074457187,0.24793362134417574,0.13143271574894821,0.04994373980729738,0.006751512490595912,0.003597111608022119,0.04060769099532846,0.1162913549462814,0.22759729649840554,0.3700387753998897,0.5378739785183775,0.7243374722121447,0.9219129168232821,1.122636050177274,1.3184157268300223,1.5013600719770719,1.6640946027672436,1.800059493557143,1.903774002350147,1.971057399395369,1.9991974923193232,1.9870599545456327,1.9351340499763652,1.84551291077404,1.7218091632465005,1.569009302953579,1.3932726891719185,1.2016832612472181,1.0019639851424988,0.8021655408364177,0.6103417995762479,0.4342251724908208,0.28091491725440354,0.1565909671535094,0.06626481810112761,0.013577515337907187,0.0006528829721589302,0.028011912673028605,0.09455176250685449,0.19759021247320163,0.33297378473881056,0.49524517024499426,0.6778632127254067,0.8734665825827405,1.0741705119358884,1.2718846294536728,1.4586390830594889,1.6269058045072722,1.769901965660165,1.8818633941554825,1.9582769270760063,1.9960623364558556,1.993696493207481,1.951274764424352,1.870507169135359,1.7546494474723453,1.608371821851286,1.437570740401193,1.2491311912593215,1.0506491688387105,0.8501254794470385,0.6556432289463044,0.4750419929190347,0.3156018035352002,0.183749691602764,0.08480061308582265,0.022743203337258322,7.899528837107539e-5,0.017721582707024397,0.07495979325134938,0.16948635581246152,0.2974909065661765,0.45381358466164545,0.6321530261078816,0.8253203716286923,1.0255290494346854,1.2247086517745274,1.4148302529080894,1.5882300549405892,1.7379183153606776,1.8578611034196006,1.943223527757632,1.9905646307769214,1.9979760935726647,1.9651591602295264,1.8934366806665541,1.7856997865836985,1.6462913500014875,1.4808309221777651,1.295988209610182,1.0992142183022402,0.8984409038620342,0.7017614345321974,0.5171039557418198,0.3519120067245719,0.21284447160285913,0.10550715990354076,0.03422683648935276,0.0018768097548410578,0.009761108623101533,0.057561917166287335,0.1433523857592196,0.2636743023488064,0.4136774929119049,0.5873153318720827,0.777588481454248,0.9768270348487144,1.1769996899995545,1.370037491227915,1.5481590886722119,1.7041844043435854,1.8318240609243146,1.925932906440302,1.9827174152329956,1.9998886049019355,1.9767543051390093,1.9142470590995633,1.8148865326066763,1.682677946472812,1.5229506261299295,1.3421431766291119,1.1475439426013072,0.946997215232646,0.7485870290454923,0.5603112946304354,0.38975940303217016,0.24380629755007355,0.12833534491292597,0.04800117688508543,0.00604206215427916,0.00414937178630248,0.04239940009159593,0.1192502892031182,0.23160418133578964,0.37493209337110145,0.5434564800750086,0.7303841268294036,0.928179983975895,1.1288709045151128,1.3243670415009055,1.5067879496070278,1.668780245718842,1.8038140236578077,1.9064460745674894,1.972539302552375,1.9994294909297181,1.9860326967501272,1.9328889445159083,1.8421404578043168,1.7174453062784867,1.5638299489733534,1.3874866178336318,1.1955237089694215,0.995679243352891,0.7960089473493724,0.6045615265506555,0.42905422261538495,0.2765617314139742,0.15323102218123186,0.0640335533108507,0.012564872968177543,0.000899682616410713,0.029508205842594837,0.09723723365434755,0.20135661031100516,0.3376692858462904,0.5006804990675168,0.6838192712681108,0.8797032822462912,1.0804364514830416,1.2779272289880572,1.4642147655161462,1.6317898142391907,1.7738974283338789,1.884809252751456,1.960054434093841,1.996599840623631,1.9929723277430673,1.9493181204229693,1.8673969188771093,1.7505109650822097,1.6033719294706736,1.4319109835907902,1.2430397147016485,1.0443715198305423,0.8439147098928795,0.6497496948412074,0.4697032625035267,0.3110330809243126,0.18013514191249314,0.08228593874104784,0.02142977080993891,1.9749017104664368e-5,0.018918910907806064,0.07736543164863385,0.17300333317113104,0.30197745360005934,0.4590888487505963,0.6380043614632062,0.8315119110406198,1.031811212074797,1.2308282037939102,1.4205405152886654,1.593300847121348,1.7421452338114036,1.86107376114308,1.9452924225860326,1.9914063656015748,1.9975567380798194,1.9634956186306143,1.8905960102897652,1.781796494794442,1.6414827784128134,1.4753109042131205,1.289979257082024,1.0929585519653906,0.892190689499954,0.6957686181593656,0.5116101076649566,0.3471385838484967,0.20898389050711885,0.10271504053399239,0.03261572912128807,0.0015116580936658242,0.010656631924890303,0.05968201690486363,0.14661160075702007,0.26794125371521416,0.4187801799236822,0.5930480653190366,0.7837201749671151,0.9831105199860697,1.1831816796026442,1.3758687894209316,1.5534046359429816,1.7086327527877572,1.8352958977061196,1.928288281889313,1.9838613842125192,1.999775054045556,1.9753878116794499,1.9116827063605268,1.8112276895951869,1.6780721010766326,1.5175834398837804,1.3362310007019884,1.1413250966851942,0.9407223808805862,0.7425091447032628,0.554675359692883,0.3847926019225909,0.23970884192070185,0.1252724031172695,0.04609621604495484,0.0053718712025933035,0.004740966106764222,0.044228932529115306,0.12224401134216023,0.23564141629750102,0.3798501002958681,0.5490570142032076,0.7364414307436391,0.934449887877956,1.1351006687055725,1.330305544311292,1.5121958101092197,1.6734394731654099,1.807536804684664,1.909082343946769,1.973982792318737,1.9996220140398906,1.9849664926014325,1.930606991776009,1.838734741941981,1.7130531116312202,1.5586283248185095,1.3816852415356422,1.1893564338894864,0.9893946722246816,0.7898604111079102,0.5987968725674192,0.4239058239757967,0.2722371199630288,0.14990452291900846,0.06183925735530316,0.011591232344875135,0.0011859447591769934,0.031042831530247672,0.09995836215646892,0.2051545529927341,0.34239094771497114,0.5061355500287653,0.6897878183280547,0.8859447333937115,1.0866992139484761,1.2839588509432476,1.4697721124021148,1.6366488695154158,1.7778623235804938,1.8877201631212968,1.9617940208487967,1.997097981056808,1.9922089418236846,1.9473239802219897,1.864252408145686,1.7463428389842997,1.5983482050849456,1.426234167145587,1.2369386385530052,1.0380921182345646,0.8377101054008442,0.6438699949346445,0.4643854777666997,0.30649157115236325,0.17655297527243574,0.07980751229766148,0.020154989883007457,0.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],35:[function(require,module,exports){
module.exports={"expected":[0.0,0.020154989883007457,0.07980751229766148,0.17655297527243574,0.30649157115236325,0.4643854777666997,0.6438699949346445,0.8377101054008442,1.0380921182345646,1.2369386385530052,1.426234167145587,1.5983482050849456,1.7463428389842997,1.864252408145686,1.9473239802219897,1.9922089418236846,1.997097981056808,1.9617940208487967,1.8877201631212968,1.7778623235804938,1.6366488695154158,1.4697721124021148,1.2839588509432476,1.0866992139484761,0.8859447333937115,0.6897878183280547,0.5061355500287653,0.34239094771497114,0.2051545529927341,0.09995836215646892,0.031042831530247672,0.0011859447591769934,0.011591232344875135,0.06183925735530316,0.14990452291900846,0.2722371199630288,0.4239058239757967,0.5987968725674192,0.7898604111079102,0.9893946722246816,1.1893564338894864,1.3816852415356422,1.5586283248185095,1.7130531116312202,1.838734741941981,1.930606991776009,1.9849664926014325,1.9996220140398906,1.973982792318737,1.909082343946769,1.807536804684664,1.6734394731654099,1.5121958101092197,1.330305544311292,1.1351006687055725,0.934449887877956,0.7364414307436391,0.5490570142032076,0.3798501002958681,0.23564141629750102,0.12224401134216023,0.044228932529115306,0.004740966106764222,0.0053718712025933035,0.04609621604495484,0.1252724031172695,0.23970884192070185,0.3847926019225909,0.554675359692883,0.7425091447032628,0.9407223808805862,1.1413250966851942,1.3362310007019884,1.5175834398837804,1.6780721010766326,1.8112276895951869,1.9116827063605268,1.9753878116794499,1.999775054045556,1.9838613842125192,1.928288281889313,1.8352958977061196,1.7086327527877572,1.5534046359429816,1.3758687894209316,1.1831816796026442,0.9831105199860697,0.7837201749671151,0.5930480653190366,0.4187801799236822,0.26794125371521416,0.14661160075702007,0.05968201690486363,0.010656631924890303,0.0015116580936658242,0.03261572912128807,0.10271504053399239,0.20898389050711885,0.3471385838484967,0.5116101076649566,0.6957686181593656,0.892190689499954,1.0929585519653906,1.289979257082024,1.4753109042131205,1.6414827784128134,1.781796494794442,1.8905960102897652,1.9634956186306143,1.9975567380798194,1.9914063656015748,1.9452924225860326,1.86107376114308,1.7421452338114036,1.593300847121348,1.4205405152886654,1.2308282037939102,1.031811212074797,0.8315119110406198,0.6380043614632062,0.4590888487505963,0.30197745360005934,0.17300333317113104,0.07736543164863385,0.018918910907806064,1.9749017104664368e-5,0.02142977080993891,0.08228593874104784,0.18013514191249314,0.3110330809243126,0.4697032625035267,0.6497496948412074,0.8439147098928795,1.0443715198305423,1.2430397147016485,1.4319109835907902,1.6033719294706736,1.7505109650822097,1.8673969188771093,1.9493181204229693,1.9929723277430673,1.996599840623631,1.960054434093841,1.884809252751456,1.7738974283338789,1.6317898142391907,1.4642147655161462,1.2779272289880572,1.0804364514830416,0.8797032822462912,0.6838192712681108,0.5006804990675168,0.3376692858462904,0.20135661031100516,0.09723723365434755,0.029508205842594837,0.000899682616410713,0.012564872968177543,0.0640335533108507,0.15323102218123186,0.2765617314139742,0.42905422261538495,0.6045615265506555,0.7960089473493724,0.995679243352891,1.1955237089694215,1.3874866178336318,1.5638299489733534,1.7174453062784867,1.8421404578043168,1.9328889445159083,1.9860326967501272,1.9994294909297181,1.972539302552375,1.9064460745674894,1.8038140236578077,1.668780245718842,1.5067879496070278,1.3243670415009055,1.1288709045151128,0.928179983975895,0.7303841268294036,0.5434564800750086,0.37493209337110145,0.23160418133578964,0.1192502892031182,0.04239940009159593,0.00414937178630248,0.00604206215427916,0.04800117688508543,0.12833534491292597,0.24380629755007355,0.38975940303217016,0.5603112946304354,0.7485870290454923,0.946997215232646,1.1475439426013072,1.3421431766291119,1.5229506261299295,1.682677946472812,1.8148865326066763,1.9142470590995633,1.9767543051390093,1.9998886049019355,1.9827174152329956,1.925932906440302,1.8318240609243146,1.7041844043435854,1.5481590886722119,1.370037491227915,1.1769996899995545,0.9768270348487144,0.777588481454248,0.5873153318720827,0.4136774929119049,0.2636743023488064,0.1433523857592196,0.057561917166287335,0.009761108623101533,0.0018768097548410578,0.03422683648935276,0.10550715990354076,0.21284447160285913,0.3519120067245719,0.5171039557418198,0.7017614345321974,0.8984409038620342,1.0992142183022402,1.295988209610182,1.4808309221777651,1.6462913500014875,1.7856997865836985,1.8934366806665541,1.9651591602295264,1.9979760935726647,1.9905646307769214,1.943223527757632,1.8578611034196006,1.7379183153606776,1.5882300549405892,1.4148302529080894,1.2247086517745274,1.0255290494346854,0.8253203716286923,0.6321530261078816,0.45381358466164545,0.2974909065661765,0.16948635581246152,0.07495979325134938,0.017721582707024397,7.899528837107539e-5,0.022743203337258322,0.08480061308582265,0.183749691602764,0.3156018035352002,0.4750419929190347,0.6556432289463044,0.8501254794470385,1.0506491688387105,1.2491311912593215,1.437570740401193,1.608371821851286,1.7546494474723453,1.870507169135359,1.951274764424352,1.993696493207481,1.9960623364558556,1.9582769270760063,1.8818633941554825,1.769901965660165,1.6269058045072722,1.4586390830594889,1.2718846294536728,1.0741705119358884,0.8734665825827405,0.6778632127254067,0.49524517024499426,0.33297378473881056,0.19759021247320163,0.09455176250685449,0.028011912673028605,0.0006528829721589302,0.013577515337907187,0.06626481810112761,0.1565909671535094,0.28091491725440354,0.4342251724908208,0.6103417995762479,0.8021655408364177,1.0019639851424988,1.2016832612472181,1.3932726891719185,1.569009302953579,1.7218091632465005,1.84551291077404,1.9351340499763652,1.9870599545456327,1.9991974923193232,1.971057399395369,1.903774002350147,1.800059493557143,1.6640946027672436,1.5013600719770719,1.3184157268300223,1.122636050177274,0.9219129168232821,0.7243374722121447,0.5378739785183775,0.3700387753998897,0.22759729649840554,0.1162913549462814,0.04060769099532846,0.003597111608022119,0.006751512490595912,0.04994373980729738,0.13143271574894821,0.24793362134417574,0.3947503074457187,0.5659645964075171,0.7546748437058631,0.9532741430905064,1.153756960821735,1.3480418385733552,1.5282971568543444,1.6872568274321043,1.8185131892020192,1.916775300876978,1.978082218723613,1.999962662123993,1.9815346308473858,1.9235409584616818,1.8283193687272974,1.6997082419997058,1.5428918901950113,1.364191577281411,1.1708107092566578,0.9705444649979365,0.7714655727591455,0.5815988986582715,0.40859796448657304,0.25943643439998876,0.1401270066581971,0.05547904187934327,0.008904697810918849,0.0022813853199290524,0.03587608999886904,0.10833460998188071,0.2167361437945836,0.35671102780237884,0.5226168772631616,0.7077660307420905,0.9046951296087609,1.1054659658724908,1.301985471185925,1.4863319482662092,1.6510743943523045,1.7895720447758996,1.8962420620507598,1.9667845799389134,1.9983560309716255,1.9896837705965946,1.941117377454065,1.8546145618689138,1.7336622505870738,1.583136028828998,1.4091036055479802,1.2185802242051331,1.0192458784473126,0.8191357317187159,0.6263162199849057,0.4485598938624181,0.29303210726049334,0.16600218211012918,0.07259069212379732,0.016563052572768022,0.00017773647368835022,0.02409523558696436,0.08735143600728301,0.18739648157563515,0.3201975585294671,0.4804014581438647,0.6615503644669214,0.8563421687501444,1.0569248173042645,1.2552128276246934,1.443213214027529,1.6133476847408723,1.7587581226927909,1.8735830360716559,1.9531938349425504,1.994381409613811,1.9954854897838405,1.9564615700033243,1.8788827036890008,1.7658760933722808,1.6219970332284306,1.4530452852606293,1.2658312910108966,1.0679016427993282,0.8672348807404535,0.6719198779525364,0.4898297782460109,0.3283046298555995,0.19385550824464404,0.09190205478482205,0.026554011122184917,0.000445555574522305,0.014629119456682438,0.06853296359556027,0.15998422512461474,0.28529650554203057,0.43941846935974826,0.616137463334764,0.8083299483956987,1.00824864935854,1.2078348474326557,1.3990432270121007,1.5741661821848965,1.7261445101715016,1.8488519676458819,1.937342219480123,1.9880482254132879,1.9989260273721947,1.9695371413799845,1.9010662328363452,1.7962733626792409,1.6593827293843018,1.4959123916098291,1.3124518353638612,1.116396351956509,0.915648933956966,0.7183017057228318,0.5323097300311582,0.36517033965867784,0.22362092004943213,0.11336732544374128,0.038853876009302124,0.003084207385113058,0.0075001941896523094,0.05192382808417739,0.13456439328527314,0.2520906502818203,0.39976511803234027,0.5716350417298115,0.7607723482276358,0.9595529165278616,1.1599639059444573,1.353926753549139,1.5336228208796032,1.691808563097726,1.8221075161354143,1.9192673318322047,1.9793714999832788,1.999997222786614,1.9803130777733509,1.9211125324306828,1.8247819595435177,1.6952044425557626,1.53760324855536,1.3583312784835357,1.1646149818265095,0.9642630585828877,0.7653516907246612,0.5758989914654806,0.40354179527905987,0.2552278172562241,0.13693559085007045,0.05343347331352377,0.008087433314888481,0.00272536880899088,0.03756342450756256,0.11119727909030841,0.2206587533688953,0.3615354575300216,0.5281486544794101,0.7137821696193121,0.9109531197105185,1.1117135477444344,1.3079708049291825,1.4918137651987113,1.655831722544421,1.7934131164244658,1.8990120436353484,1.968371813557885,1.9986965352699229,1.9887638198528415,1.9389740548641237,1.8513342647230262,1.7293772075968223,1.5780189699905969,1.4033607993996768,1.2124431631465518,1.0129619472855749,0.8129582355917744,0.6204941736366694,0.4433279838633556,0.2886012317968275,0.16255094968212647,0.07025822184081376,0.015443366264707659,0.0003159686729732325,0.02548581415643858,0.08993830675295367,0.1910753677900755,0.324820164383828,0.48578144648967003,0.6674708680828343,0.8625645322551763,1.0631982173514585,1.2612843835850416,1.4488381816031624,1.6182993216026191,1.7628368284589455,1.8766243981953195,1.9550752561780398,1.9950270499092086,1.9948693233918955,1.9546084345788262,1.8758672990834226,1.7618199704842468,1.6170636942895036,1.447433593063607,1.2597674527546945,1.061630091681358,0.8610084228593679,0.6659895016995635,0.48443453696788674,0.32366200561910186,0.19015264513878682,0.0892882151464951,0.025134558774309257,0.000277708612525851,0.015719643788203896,0.07083790020686165,0.16341066206753252,0.28970632321272616,0.4446339080971442,0.6219482889088981,0.814501926545228,1.014532987769168,1.2139782245501793,1.4047980034292318,1.5793003829807029,1.730451175815789,1.8521574965336782,1.9395133658088304,1.9889974703183364,1.9986151068106648,1.9679785885534191,1.8983228729776542,1.7924557805688068,1.654644811679768,1.4904451236779905,1.306475602664425,1.1101520563086666,0.9093882827919207,0.7122770657623965,0.526763954390209,0.3603269784411126,0.21967520904790905,0.11047831618891168,0.037138024405763304,0.002610679376285008,0.008288077679989625,0.05394136350612633,0.13773025382679804,0.2562772201685596,0.40480363671685193,0.5773224066258945,0.766879301771382,0.9658332875455174,1.1661645328073504,1.359797689113917,1.5389274078524162,1.696332973685046,1.8256693714380137,1.921723053534906,1.9806220979939377,1.99999228552472,1.9790528042598314,1.9186477242653726,1.821211973093677,1.6906731839029754,1.5322933726441943,1.3524568263045647,1.1584127524281917,0.9579830637067737,0.7592470768371515,0.5702158354288203,0.3985091849981326,0.251048617149602,0.13377826438950824,0.05142529226474746,0.00730934741534961,0.0032087426855526013,0.03928877336903902,0.11409505415900545,0.22461214539042718,0.3663851053519932,0.533699068896258,0.7198096135381756,0.9172146269890142,1.1179567171508338,1.313943974431065,1.497276156454291,1.6605631466727355,1.7972228498146172,1.9017465160114766,1.9699207983938343,1.9989975930183046,1.9878048148819047,1.9367936446448466,1.8480203415472198,1.725063355640664,1.572879080539134,1.3976020612927202,1.206297711000659,1.0066775041523996,0.8067881272468559,0.6146871170225323,0.4381180613146416,0.2841984551860346,0.15913279484536957,0.0679624745303844,0.014362568008247534,0.0004936864263264118,0.026914884120562532,0.09256112314651088,0.19478620493731147,0.32946943851441235,0.49118174545750515,0.6734045059457616,0.8687923241910288,1.0694691211932876,1.267345619325896,1.4544454209529443,1.6232265368566208,1.7668854036699626,1.8796311353785145,1.9569189538183926,1.9956333885921471,1.9942138616173817,1.9527175939977268,1.8728172994412957,1.757733757204957,1.612105982547659,1.4418042281192325,1.2536933541947568,1.0553561062959178,0.854787454872365,0.6600723182046786,0.47905965951207063,0.31904609540385365,0.18648176941145622,0.0867103468333894,0.023753611694986798,0.0001493487157943063,0.016849045258906403,0.07317953689457168,0.16687014264474676,0.294144196087356,0.44987128270344867,0.6277740467824233,0.8206812315040083,1.0208167521553622,1.2201131499484834,1.4105367911209759,1.584411702550153,1.7347289900745557,1.8554293668755246,1.941647403206475,1.9899076517674654,1.9982647429154845,1.966381802475453,1.8955440311313891,1.7886068980128424,1.6498810367920573,1.4849584841278913,1.3004872647811505,1.1039034098711076,0.9031312106115957,0.7062637902922606,0.5212368706428157,0.3555088830504247,0.2157603193416734,0.10762444129197912,0.03546020395746763,0.002176546284962888,0.009115131841760271,0.05599626638445887,0.1409301723282621,0.260493165643099,0.40986566448767037,0.5830264664559943,0.7729954631244416,0.9721150080811365,1.1723585964978565,1.3656544133772486,1.5442107082520495,1.7008298804887403,1.8291986144235344,1.9241423689889179,1.9818339633594182,1.9999478505333237,1.9777538600851652,1.9161466313208178,1.8176095503852299,1.6861146450171325,1.5269624721911863,1.3465684527738109,1.1522042660375593,0.9517047284170325,0.7531519722168092,0.5645496550218074,0.3935003324220041,0.2468989991503211,0.13065515198467792,0.04945457805223186,0.00657047084516571,0.003731487857294047,0.0410520684354142,0.11702782073156603,0.22859616370796576,0.37125977971676016,0.5392679012832093,0.7258481244265087,0.9234794041270193,1.1241952274987979,1.3199047437630922,1.5027189062792192,1.665268479855285,1.8010010944693915,1.9044453711728675,1.9714314732649152,1.9992591923255825,1.9868067935625997,1.9345762329181513,1.8446729232349526,1.720720865107261,1.5677165634901735,1.3918276186859448,1.2001441105007196,1.0003927972709228,0.8006256503910831,0.6088952795098677,0.4329303319979516,0.2798239513291656,0.15574785261024715,0.0657035408700154,0.013320700492793991,0.0007108827142450203,0.028382389033878574,0.09521978159187472,0.19852884644658764,0.3341451972840632,0.4966021417461399,0.6793510436886858,0.875025298572135,1.0757372811414052,1.2733962954403326,1.4600347106019562,1.6281291358875274,1.7709036884150526,1.882603128861033,1.958724855041176,1.9962004017134456,1.9935191303497524,1.9507891229445038,1.8697328252316172,1.7536176149318223,1.6071240938227758,1.4361574127763164,1.2476092352460229,1.0490799344530837,0.848572222495423,0.6541685611849848,0.4737053581756563,0.31445708152920326,0.18284302605502745,0.0841685516662648,0.02241122442890009,6.048095429111999e-5,0.018017279259654795,0.07555778116862877,0.17036253021355185,0.29860994887871595,0.4551303863126246,0.6336145068494086,0.826867619201627,1.027099694320725,1.2262393813100612,1.4162593634164868,1.5894999390062299,1.7389777839825187,1.85866744943896,1.9437442473827793,1.990778733810305,1.9978749495253376,1.9647468462159967,1.8927298170563591,1.7847268670346428,1.6450915928809449,1.4794526896709712,1.2944870582415986,1.0976506594531534,0.8968779645580136,0.7002621168249976,0.5157286970978215,0.3507162437919433,0.21187640556119014,0.10480581347538553,0.03382048093504353,0.0017818252585494188,0.009981324007948933,0.0580884555545742,0.1441640223991678,0.26473832018386045,0.41495100140468366,0.5887469959210123,0.7791205907104782,0.9783978300191345,1.1785458523625936,1.371496695010065,1.5494725133984872,1.7052991058898606,1.83269510569384,1.926525182636009,1.9830070482134317,1.9998639195675199,1.9764162965550702,1.9136093523852895,1.8139748337068082,1.6815290059515382,1.521610757756449,1.3406663904704403,1.1459897678776343,0.9454283006955804,0.7470666176083128,0.5589006740474298,0.38851543539047084,0.24277912716015326,0.12756637699241524,0.047521408515305286,0.0058708327885071965,0.004293583676810986,0.04285324005998703,0.11999546296945585,0.2326106509606466,0.3761592880842345,0.5448549316823823,0.7318974637749882,0.9297472036780955,1.1304288323794176,1.3258528774865932,1.5081417996956388,1.669947536240638,1.804747701155509,1.9071085025200534,1.9729037785024328,1.9994813228590984,1.9857697953148075,1.9323219072674271,1.8412921420026678,1.7163499075165025,1.5625316227529438,1.3860376996584696,1.1939826047018431,0.994108074874726,0.7944710484302195,0.6031188898647668,0.4277650008184307,0.27547789301048387,0.1523962566753161,0.06348151008316594,0.01231780487006362,0.0009675489579025198,0.029888270932844407,0.09791417707725736,0.20230314449087905,0.3388472560095006,0.5020424212606254,0.6853102464350689,0.8812632092082592,1.0820024496157732,1.279436172938539,1.4656058297842058,1.6330069250523591,1.7748915239799037,1.885540261254961,1.9604928885168378,1.9967280668771958,1.9927851570295179,1.9488230975899856,1.8666139982850685,1.749471706244334,1.6021182248896881,1.4304933700729896,1.2415153362192721,1.0428018240493193,0.8423629712180172,0.6482784638273185,0.4683718444429845,0.3098951452521985,0.17923655879272615,0.08166293004100489,0.021107449997719296,1.1108838118500941e-5,0.019224299647494503,0.07797253909308033,0.17388768683155165,0.3031034051982686,0.46041101120046524,0.6394694384231098,0.8330608452880012,1.0333815661014627,1.2323566766607885,1.4219654942854478,1.5945648913735035,1.7431973897207094,1.8618716163261175,1.9458038155165158,1.9916106820408226,1.9974457420362999,1.9630737843525985,1.88988034190845,1.7808158408878216,1.640276669120007,1.473927957775338,1.288475220042146,1.0913940520261118,0.8906287916221434,0.6942722824148441,0.5102396513173658,0.3459492499654546,0.2080236211134011,0.10202254406939526,0.03221892010430838,0.0014265318877517696,0.010886619965673527,0.06021784837907507,0.1474316763087794,0.2690125161156234,0.42005944660705774,0.594483769071254,0.7852544425989514,0.984681505200353,1.1847260560172022,1.377324303253687,1.5547126154608177,1.7097404733627486,1.8361587071443435,1.9288714003597516,1.9841413062214215,1.999740495942415,1.9750401665007038,1.9110359876762955,1.8103079666225428,1.6769164478299938,1.5162384407221339,1.3347508725143515,1.1397695034088353,0.9391540284489742,0.7409912533712343,0.5532691156292927,0.38355469079718896,0.23868916390590622,0.12451206141322546,0.045625860010377384,0.005210460879703671,0.004895007942419594,0.04469221710003546,0.12299786365668064,0.2366554485840513,0.3810834369335113,0.5504599394170085,0.7379573926466697,0.936017778076524,1.1366572855775259,1.331788140662019,1.5135446225098217,1.6746001310153071,1.8084625218893968,1.9097358048645752,1.974337655953225,1.999663975845132,1.9846938610979126,1.9300307567341157,1.8378781313845938,1.7119506555125712,1.5573244631224583,1.380232532900727,1.187813436971438,0.9878235851980177,0.7883245644588603,0.5973581762433835,0.42262227179645984,0.27116045189078897,0.14907813942203485,0.06129646993565885,0.011353920752468882,0.0012636750194885416,0.03143247033805807,0.1006442031793211,0.2061089499928751,0.3435754289686379,0.5075023691205908,0.6912818788080767,0.8875058097142363,1.0882643791546378,1.2854650132572003,1.471158558451488,1.6378597116879887,1.7788487528528323,1.8884424165493694,1.962222984411523,1.9972163632416673,1.9920119706471957,1.9468195955882914,1.8634609417891697,1.7452961948977532,1.5970885734703333,1.4248123237278307,1.2354118978114819,1.0365220230576728,0.8361599462933949,0.6424022587788933,0.46305932897738766,0.3053604667603548,0.17566251007290312,0.07919358092476103,0.019842339897954253,1.234317377862837e-6,0.02047005874750374,0.0804237152897137,0.17744547326192572,0.3076243875633835,0.4657129487926205,0.6453386102453186,0.8392606651427631,1.0396621193759323,1.2384647943795803,1.42765495834688,1.5996063595963808,1.7473876406229576,1.865041740978675,1.9478260262587916,1.992403463598695,1.996977137401219,1.9613626829679194,1.8869957182363795,1.7768739740501882,1.6354364556893108,1.4683845066569652,1.2824519876386111,1.0851338347136483,0.8843839386339749,0.6882945236485924,0.5047699501078918,0.34120808985788675,0.20420211817568357,0.09927474300767869,0.03065558472378105,0.0011106802059565046,0.011830983957519803,0.06238436075115972,0.15073300499122078,0.2733155846160119,0.4251907983212492,0.6002365593154313,0.7913967765148249,0.9909657854320316,1.190898963355675,1.3831370079290974,1.5599308074652627,1.7141538074821798,1.839589281969628,1.931180929489136,1.9852366925824367,1.9995775845330024,1.9736255242764793,1.9084266388367062,1.8066090939664918,1.6722771528394151,1.5108457332842513,1.3288221325568221,1.1335437183194093,0.9328821594986624,0.734926119470463,0.5476552022029089,0.3786182945818183,0.23462927093312558,0.12149232588659742,0.043768007407862464,0.0045893812021502445,0.00553573689904896,0.046568926919564824,0.126034904204261,0.24073039681667951,0.3860320317703465,0.556082703100377,0.744027671686166,0.9422908796469712,1.1428803410815216,1.3377102988581144,1.5189271613209612,1.6792260804109032,1.8121454099429548,1.912327174433155,1.9757330489819447,1.9998071440692504,1.9835790334092063,1.9277028718141587,1.8344310262274073,1.707523282857313,1.5520952902712155,1.3744123477054189,1.1816368509794464,0.9815395764657578,0.782186441251151,0.5916133661825027,0.4175023480597725,0.2668717985004595,0.14579363190952688,0.05914850673230421,0.010429086211528715,0.001599249202604791,0.03301492625669933,0.10340975206741365,0.2099461126307054,0.3483295294079375,0.5129817696688038,0.6972657049400233,0.8937528535195897,1.0945228224239782,1.2914825782690298,1.4766926772818851,1.6426873041189487,1.782775218731059,1.8913094801148032,1.963915074389861,1.9976652715201055,1.991199601742117,1.94477869607383,1.860273780283425,1.7410912458165702,1.5920353382261005,1.419114498130951,1.2292991610964985,1.0302407795178818,0.8299633927287907,0.6365401781383107,0.4577680216127833,0.30085322516457835,0.17212102106344118,0.0767606018519359,0.0186159440989897,3.085778209344081e-5,0.021754507354635688,0.08291121294192094,0.18103574897915198,0.31217271740410346,0.47103598967302596,0.6512217904951796,0.8454668338853,1.045941106074654,1.2445634932077658,1.4333275308781381,1.604624144546732,1.7515483711826279,1.8681776981829694,1.9498107997362488,1.9931570471706164,1.9964691541290618,1.9596136096471009,1.8840760599770872,1.7729014222177695,1.630571143767706,1.462822555271376,1.2764175989367788,1.0788702547820972,0.8781436522529534,0.682329076635882,0.4993198095118946,0.33649295073570096,0.20041204768996046,0.09656251882298805,0.029130536542121943,0.0008342826886859056,0.012814378682966199,0.06458790709782847,0.15406787805046873,0.2776473557223377,0.43034485386892896,0.6060051394296906,0.7975473498479279,0.9972504224974262,1.1970643305603905,1.3889345794458356,1.5651268833035665,1.7185389339300527,1.842986694668747,1.933453678802323,1.9862931640308639,1.9993751917739604,1.9721724257579965,1.9057814089306475,1.8028783618368536,1.6676113042228768,1.5054328484440953,1.322880404771452,1.1273126585156286,0.9266129415711106,0.7288714554669204,0.5420591555068229,0.37370644172232736,0.23059960859956596,0.11850728968613444,0.04194792408931958,0.004007618287267589,0.006215745239159132,0.048483295392252046,0.1291064646550928,0.2448353347060498,0.3910048771350165,0.5617230006442735,0.75010806112947,0.9485662606141999,1.1490977530929176,1.3436191181612729,1.5242892035293067,1.6838252017115598,1.8157962198493283,1.9148825088717771,1.9770899024733226,1.9999108218765893,1.9824253562821905,1.9253383444544458,1.8309509626850176,1.7030679644231845,1.546844310741358,1.3685773739583662,1.1754530906889291,0.9752562968838814,0.7760569212508087,0.5858846865908811,0.41240543183524503,0.2626121022329514,0.14254286386935278,0.057037705313406906,0.009543337776393934,0.0019742582527306762,0.0346355761848558,0.1062107145078034,0.2138144808440411,0.35310936954975625,0.5184804064797638,0.7032614884814854,0.9000040938783693,1.1007775322276452,1.297488630291984,1.482207967688658,1.6474895116647412,1.786670766526936,1.8941413387079007,1.9655690916176158,1.9980747739815214,1.9903480824012647,1.9427004796581016,1.8570526396545062,1.7368570250880269,1.5869587187498024,1.4134001183352862,1.223177367515406,1.0239583415267755,0.8237735552759173,0.6306924534461791,0.4524981313454106,0.2963735984920114,0.16861223164622618,0.07436408892046409,0.01742831104103737,9.997806219652627e-5,0.02307759473570714,0.08543493379840128,0.18465837217436487,0.3167482150703613,0.47637992359200676,0.657118746798691,0.8516791063841185,1.0522182781900247,1.2506525322587303,1.438982987823732,1.6096180480319382,1.755679417059023,1.871279364074827,1.9517580575542546,1.9938714029915101,1.9959218122841615,1.957826633475109,1.8811214824513343,1.7688983422985176,1.6256809255255154,1.4572423233046405,1.2703722922831946,1.0726035596305248,0.8719081789581521,0.6763761770001699,0.4938894447991645,0.3318040188376241,0.1966535593565477,0.09388597864283477,0.027643835795743144,0.0005973502530994823,0.013836765299854559,0.06682840038335247,0.15743616376560798,0.28200765833807895,0.4355214096751049,0.6117892815664308,0.8037059196627602,1.0035351681656701,1.2032219141114084,1.3947167888113021,1.5703006377408544,1.7228956795025328,1.846350811050562,1.935689558530162,1.9873106788381578,1.9991333256594044,1.970680928339784,1.9031004024395128,1.7991159175902478,1.6629190862721845,1.4999999999999762,1.3169259238448627,1.1210765701121348,0.9203466222880465,0.7228275005078775,0.5364811965738786,0.36881932622720415,0.22660033606900454,0.11555707071487187,0.04016568194444503,0.0034651951135500347,0.00693500610376363,0.050435246904262265,0.13221242368859,0.2489701001152409,0.3960017766098829,0.5673806092680835,0.7561983208131243,0.9548436731130548,1.1553092760361614,1.3495143651847206,1.5296305373447554,1.6883973132610062,1.8194148074086853,1.9174017072497782,1.978408162834313,1.9999750051720797,1.9812328752848498,1.9229372680491266,1.8274380782130617,1.6985848761865658,1.541571731936232,1.3627278421296147,1.1692624003461778,0.9689739946296939,0.7699362465618518,0.5801723637400493,0.4073317244410952,0.2583815313378355,0.13932596370046013,0.05496414905150171,0.008696710432390287,0.002388687357742003,0.036294356110055936,0.10904697986798029,0.21771390183983685,0.35791476059982597,0.5239980623681011,0.7092689926108537,0.9062592838788698,1.107028261516925,1.3034829320988421,1.4877042118285768,1.652266144647652,1.790535242373965,1.8969378804758263,1.967184970764344,1.9984448544513698,1.9894574462579664,1.9405850284265784,1.8537976471311075,1.7325936999554803,1.5818589155579748,1.4076694100476055,1.2170467588670444,1.0176749572282757,0.8175906784212144,0.6248593156761814,0.4472498663255995,0.2919217636791017,0.16513628041152661,0.07200413678787321,0.01627948763325804,0.00020859242757154117,0.024439268631367805,0.0879947781771182,0.18831319976108563,0.3213506998390354,0.481744539474654,0.6630292462377243,0.8578972372666389,1.0584933877860287,1.2567316710273735,1.4446211058043064,1.614587872802674,1.7597806150839337,1.8743466161445848,1.9536677227999357,1.994546502845735,1.9953351334854548,1.956001825033982,1.878132102359098,1.7648648924062562,1.6207659941167463,1.4516440311649519,1.264316306455561,1.0663339967810135,0.8656777650384238,0.6704360598693165,0.4884790704584331,0.32714147936735405,0.1929268016282787,0.09124522818527059,0.026195541206408324,0.0003998922575596531,0.01489810342591813,0.06910575211263092,0.16083772909600502,0.2863963202399329,0.440720261275905,0.617588757263382,0.8098722427078648,1.0098197742018062,1.209371470796366,1.4004834076394888,1.575451866424043,1.7272238721167732,1.849681498239074,1.9378884803598284,1.988289196814488,1.998851995742577,1.9691510909330439,1.9003837252578004,1.7953219098357405,1.6582006843207235,1.4945474025388512,1.3109589249672107,1.1148356994220763,0.9140834491568768,0.7167944933176741,0.5309215457225138,0.36395714112794786,0.2226316113047906,0.11264178550071302,0.038421351368284395,0.0029621331056489675,0.007693491083465509,0.052424704357400875,0.13535265862547718,0.2531345297290345,0.40102253282721634,0.5730553055074397,0.7622982101838157,0.9611228691980822,1.161514664568223,1.3553958070778156,1.5349509517951703,1.6929422344698035,1.8230010296939807,1.9198846700637515,1.9796877779961943,1.999999691420608,1.980001637517823,1.9204997374360429,1.8238925115636029,1.6940741952206708,1.5362777621122394,1.3568639832640932,1.1630650244714031,0.962692917841728,0.763824658938926,0.5744766232555822,0.4022814262787223,0.2541802529143462,0.13614305846415387,0.05292791984793843,0.007889237619629452,0.0028425201485133833,0.03799120051375393,0.11191843612097341,0.22164422159876973,0.36274551275469036,0.5295345193972296,0.715287980043525,0.9125181764533541,1.1132747634002418,1.3094652469265204,1.4931811926108531,1.657017014400111,1.7943684936329298,1.8996989949606533,1.9687626480060318,1.9987754983122041,1.9885277284906153,1.9384324259354353,1.8505089312790048,1.7283014388119309,1.576736130082749,1.4019225996196465,1.210907577298376,1.011390874803654,0.811415006376135,0.6190409952257137,0.44202343384943,0.28749789656467317,0.16169330465255216,0.06968083866761243,0.015169519251938879,0.00035669658816628314,0.025839475258144118,0.09059064496933211,0.19200008738084273,0.3259799899209417,0.48712962542925875,0.6689530553590639,0.864120980928943,1.0647661870082576,1.2628006693997467,1.4502416621251826,1.61953342256054,1.763851803268118,1.8773793332417594,1.9555397200452944,1.995182320068162,1.9947091409055964,1.9541392564000486,1.8751080377750697,1.7608012318542727,1.615826543671461,1.4460278999739715,1.2582498806533577,1.060061813869085,0.8594526565829834,0.6645089598661909,0.483088900188973,0.3225055164858657,0.18923192170480863,0.08864037175479522,0.024785709978887294,0.00024191650127280973,0.015998351140391942,0.07141987233477853,0.16427243968645444,0.29081316808426216,0.44594120332695764,0.6234033374526806,0.8160460754256869,1.0161039923761652,1.215512757719697,1.4062342081603405,1.5805803658897726,1.731523340817596,1.8529786246787314,1.9400503574381744,1.9892286793102967,1.9985312131354465,1.967582973963374,1.8976314846888815,1.7914964884292657,1.6534562847362022,1.4890752714274038,1.3049796438233026,1.1085902929476898,0.9078236695605715,0.7107726721883709,0.5253804225479828,0.35912007847124605,0.21869359106382236,0.10976154919166603,0.036715001258498026,0.0024984521335220666,0.008491170219609878,0.054451589171983006,0.13852704543257555,0.25732845906079804,0.40606694747703864,0.5787468652228929,0.7684074883079882,0.9674036008532384,1.1677136735886504,1.361263211535218,1.5402502367345425,1.6974597858225593,1.8265547450564186,1.9223312992415582,1.9809286974167284,1.9999848796471147,1.9787316916126034,1.9180258488928403,1.8203144027795375,1.6895360996883875,1.5309626103708531,1.3509860289728055,1.1568612078487137,0.9564133146101125,0.7577223997777008,0.5687976901079551,0.3972547368250675,0.2500084329048168,0.1329942738788189,0.05092909812981394,0.00712095123169354,0.003335738699536517,0.03972604237389232,0.11482496985000923,0.22560528488086518,0.3676014352090483,0.5350895588880555,0.7213182130411913,0.9187805243878975,1.119516791153135,1.3154353384852353,1.4986386937055618,1.6617419332720162,1.7981703688979587,1.9024245731038238,1.970302061027508,1.9990666925042357,1.987558965821228,1.93624275720823,1.847186621996069,1.7239804111931973,1.5715905646641741,1.3961599140390986,1.2047600652949488,1.0051063424619262,0.8052467830675294,0.6132377219070492,0.4368190403508526,0.2831021718826203,0.15828344036013953,0.06739428632543243,0.014098449738628949,0.0005442846941529078,0.02727815931067734,0.09322243164336164,0.19571888940875615,0.3306359024682636,0.4925349687554146,0.6748899401839477,0.870350091545447,1.0710364280934166,1.26885928766218,1.455844434785486,1.6244545019660883,1.767892820807683,1.8803773955800422,1.957373975350069,1.9957788295452668,1.994043859270056,1.9522390011411426,1.872049408143801,1.7567075211492438,1.6108627692883766,1.440394151557638,1.252173254488589,1.0537872586335209,0.8532330994713214,0.6585951110997523,0.477719146891719,0.31789631330466417,0.1855690655266642,0.08607151223809295,0.023414397798767528,0.00012342922396857414,0.017137464985664597,0.07377066964655365,0.16774015987267055,0.295258027414419,0.4511840296113151,0.6292327924698924,0.8222271739619149,1.0223875744743685,1.2216455323128617,1.411968963228593,1.5856859335723024,1.7357939157845168,1.8562420601394325,1.9421751043753825,1.990129089217906,1.9981709905083036,1.9659766393682836,1.894843789440898,1.7876398044674144,1.6486860749129062,1.4835838228041547,1.2989883165830436,1.102340597370198,0.901567530748119,0.7047622749698469,0.5198580459137083,0.35430832931165257,0.21478643089012206,0.10691647555137773,0.03504669901254509,0.0020741705116527065,0.009328012005432207,0.05651582129000543,0.14173545872796123,0.2615517224584538,0.4111348213149332,0.5844550636091259,0.7745259138809995,0.9736856200021967,1.1739060582486611,1.3671163468058793,1.5455281828516307,1.7019497888847943,1.8300758131312604,1.924741498146177,1.9821308720820041,1.9999305704366364,1.9774230877295471,1.9155157001332537,1.816703893189096,1.68497076883565,1.5256264866501665,1.3450942114233388,1.1506511955166145,0.9501354329669444,0.7516297101053623,0.5631357886039666,0.3922518546244368,0.24586623608778568,0.12987973431534228,0.048967762846620744,0.00639188161439197,0.0038683235296380625,0.04149881316769077,0.11776646625266751,0.22959693523187408,0.3724823361635963,0.540662961427288,0.7273594534217214,0.9250460803321238,1.1257540982276664,1.3213929709681596,1.5040764995520393,1.6664407146384035,1.801940718002486,1.9051145072503344,1.9718031490249568,1.9993184255258696,1.986551196514025,1.934016108732552,1.8438308505069259,1.7196307877714943,1.5664224225419223,1.390381580920661,1.1986044656715138,0.9988216084296526,0.7990862521282043,0.6074497249381803,0.4316368913929912,0.2787347632555467,0.15490682221716345,0.06514457007563468,0.01306632139849695,0.0007713493361768409,0.02875526396375072,0.09589003424878251,0.1994694589594893,0.33531825358165057,0.49796035595273436,0.6808396662171496,0.8765843230784139,1.0773038633791951,1.2749072865113815,1.4614292024867102,1.6293509166464,1.7719035080903422,1.8833406847417837,1.9591704162648473,1.9963360077161023,1.993339314856163,1.9503011343135768,1.868956334275233,1.752583921984658,1.6058748670266436,1.4347430084380917,1.2460866679759328,1.0475105789070318,0.8470193393637171,0.6526947471551878,0.4723700226614681,0.31331405187825545,0.18193837776943045,0.08353875110006481,0.022081658830171436,4.443510566121134e-5,0.018315399968957813,0.07615805119610453,0.1712407526865546,0.29973072266707745,0.4564485330476932,0.635076892062951,0.8284152941751952,1.028670272307503,1.2277695523431535,1.417687446332591,1.590768367811838,1.7400354283381043,1.8594716757220096,1.9442626372480867,1.9909903909728697,1.9977713420892274,1.9643321505948608,1.8920207496223074,1.783752010281587,1.6438902432648754,1.478073273570579,1.2929851798920282,1.0960868595402904,0.8953152798246479,0.6987635390610862,0.5143546339428116,0.34952208370375637,0.21091028510880083,0.10410667695471554,0.03341651052507,0.0016893049983418562,0.010203983387310656,0.058617319178431715,0.14497777178552973,0.2658041531114761,0.41622595416980046,0.5901796752033686,0.7806532452372882,0.9799686785174365,1.180091573961178,1.3729549817025162,1.5507845816777952,1.706412066310255,1.8335640948432708,1.9271151715794455,1.9832942545084968,1.9998367659342804,1.9760758775559348,1.9129693903032008,1.8130611254003424,1.6803783829841352,1.5202696017165291,1.3391887633309039,1.1444352327584972,0.943859520876094,0.7455468305713406,0.5574911423775446,0.3872729772807978,0.24175382607199747,0.1267995627918579,0.04704399146728244,0.005702057564553664,0.004440253602783439,0.04330944287414029,0.12074280914559565,0.2336190149894899,0.37738802283220874,0.5462545068766844,0.7334114625678871,0.9313145968087765,1.131986438262524,1.327337909060576,1.5094943953676931,1.671113172906688,1.8056793920250658,1.9077686911530258,1.973265852708408,1.9995306874341465,1.9855044603739036,1.931752568456659,1.8404417493580434,1.7152527403482392,1.5612319078474013,1.3845878284972382,1.1924410215620436,0.9925369209416431,0.7929336568869657,0.6016772329334001,0.4264771916606839,0.2743958431874287,0.1515635835934639,0.06293177877758849,0.012073174998545988,0.0010378815456281165,0.030270730874620178,0.09859334742055925,0.20325164789291783,0.34002685831735346,0.5034055727291383,0.6868019984560798,0.8828234292880098,1.0835682453144468,1.2809444270631214,1.4669957446415598,1.634222473202676,1.7758837067017605,1.8862690836829945,1.9609289718336953,1.9968538325732161,1.9925955354920235,1.9483257324593342,1.8658289383395916,1.748430597234539,1.6008630338987315,1.4290746938242744,1.2399903615237013,1.0412320226060718,0.8408116216914239,0.6468081010853814,0.46704173877816024,0.3087589131969166,0.17834000183813659,0.08104218837977462,0.02078754571365704,4.9372664644442565e-6,0.019532109564165623,0.07858192268657505,0.1747740798615086,0.3042310771796485,0.4617345056985076,0.6409354054013048,0.834610191647168,1.0349518377211844,1.2338845759239303,1.4233894316035451,1.5958274678620807,1.744247710947104,1.8626673438629369,1.9463128736028232,1.99181255055547,1.9973322836635519,1.962649572597165,1.8891624767376072,1.7798332594320807,1.6390689792179893,1.4725438413824894,1.2869704708623546,1.0898293264682608,0.8890671637418355,0.6927767014004731,0.5088704040091968,0.3447615306948073,0.20706530682006763,0.10133226438314957,0.031824500185357096,0.001343870795006863,0.01111904976612943,0.06075599983217006,0.1482538565403474,0.2700855830571366,0.42134014495180794,0.5959204738949233,0.7867892403592003,0.9862525282304406,1.1862699764105455,1.3787788856105272,1.5560192255958056,1.7108464418477949,1.8370194524121157,1.9294522257859514,1.9844187987448971,1.9997034698451401,1.9746901143039077,1.9103870199769375,1.8093862432955097,1.6757591235238913,1.5148921671563653,1.333269917949038,1.138213565092559,0.9375858262239222,0.7394740014371997,0.5518639743810678,0.3823183014501079,0.23767136528948907,0.12375388096914175,0.04515785997696875,0.005051506328847433,0.005051506328844213,0.045157859976959425,0.12375388096912665,0.23767136528946875,0.3823183014500833,0.5518639743810907,0.7394740014371695,0.9375858262238341,1.1382135650925844,1.3332699179490084,1.5148921671563382,1.6757591235238682,1.809386243295458,1.9103870199769482,1.9746901143039008,1.9997034698451395,1.9844187987448927,1.929452225785984,1.8370194524121328,1.7108464418477771,1.5560192255958318,1.378778885610556,1.1862699764106321,0.9862525282304719,0.7867892403591754,0.595920473894952,0.4213401449518335,0.270085583057158,0.14825385654036383,0.06075599983218083,0.011119049766125655,0.0013438707950051976,0.031824500185335,0.1013322643831358,0.20706530682004853,0.3447615306948265,0.50887040400912,0.6927767014003892,0.8890671637418608,1.0898293264682295,1.2869704708623246,1.4725438413825118,1.6390689792179216,1.7798332594320612,1.8891624767375927,1.9626495725971567,1.9973322836635496,1.9918125505554816,1.9463128736028334,1.862667343862924,1.7442477109471248,1.5958274678621516,1.4233894316035736,1.2338845759239607,1.0349518377212157,0.834610191647199,0.640935405401387,0.4617345056984862,0.304231077179671,0.17477407986152627,0.07858192268656505,0.019532109564182942,4.937266464333234e-6,0.02078754571366226,0.08104218837976229,0.1783400018381187,0.3087589131968529,0.4670417387781337,0.6468081010854052,0.840811621691393,1.0412320226060405,1.239990361523671,1.429074693824246,1.6008630338987064,1.748430597234556,1.8658289383395759,1.9483257324593062,1.9925955354920197,1.9968538325732186,1.9609289718337037,1.886269083683009,1.7758837067018163,1.6342224732026565,1.4669957446415876,1.2809444270631514,1.0835682453144213,0.8828234292880974,0.6868019984561096,0.5034055727291655,0.340026858317377,0.20325164789293682,0.09859334742059744,0.030270730874627838,0.0010378815456268953,0.012073174998541103,0.0629317787775775,0.15156358359344735,0.27439584318740706,0.4264771916606581,0.6016772329333713,0.7929336568869351,0.992536920941555,1.192441021562013,1.3845878284972093,1.5612319078474224,1.7152527403482172,1.8404417493579959,1.9317525684566683,1.9855044603738983,1.9995306874341474,1.973265852708415,1.907768691153063,1.8056793920250844,1.6711131729067112,1.50949439536772,1.3273379090605517,1.1319864382626115,0.9313145968088078,0.7334114625678625,0.5462545068767123,0.37738802283223327,0.23361901498954651,0.12074280914561053,0.043309442874149395,0.004440253602786437,0.0057020575645503335,0.047043991467272894,0.12679956279184257,0.24175382607197704,0.3872729772808179,0.5574911423775164,0.7455468305712554,0.9438595208760627,1.1444352327584661,1.3391887633308743,1.5202696017164539,1.6803783829840708,1.813061125400357,1.9129693903031881,1.9760758775559282,1.9998367659342797,1.9832942545085128,1.9271151715794574,1.833564094843288,1.7064120663102773,1.5507845816778687,1.3729549817025979,1.1800915739612088,0.979968678517411,0.7806532452373187,0.590179675203449,0.4162259541697797,0.2658041531114973,0.14497777178554594,0.05861731917844226,0.010203983387323201,0.0016893049983367492,0.03341651052506189,0.10410667695470155,0.2109102851088165,0.3495220837036893,0.5143546339427842,0.6987635390611104,0.8953152798246167,1.096086859540259,1.2929851798919438,1.4780732735705515,1.6438902432648514,1.7837520102815674,1.8920207496222932,1.9643321505948526,1.9977713420892251,1.9909903909728741,1.9442626372480782,1.8594716757220255,1.7400354283381636,1.5907683678118176,1.4176874463326197,1.227769552343184,1.0286702723075343,0.8284152941752821,0.6350768920629273,0.4564485330477195,0.2997307226670999,0.17124075268654038,0.07615805119613828,0.018315399968963808,4.4435105661544405e-5,0.022081658830164885,0.08353875110005227,0.1819383777693797,0.3133140518782327,0.47237002266148975,0.6526947471551585,0.8470193393636861,1.0475105789070005,1.2460866679759024,1.4347430084380632,1.6058748670266638,1.7525839219846375,1.8689563342751896,1.950301134313567,1.9933393148561591,1.9963360077161,1.9591704162648562,1.883340684741825,1.771903508090326,1.6293509166464242,1.461429202486738,1.274907286511357,1.077303863379283,0.876584323078445,0.6808396662171794,0.49796035595276145,0.3353182535816316,0.19946945895954216,0.09589003424879583,0.028755263963744726,0.0007713493361780621,0.013066321398491842,0.06514457007562346,0.1549068222171467,0.27873476325552493,0.43163689139296546,0.6074497249381515,0.7990862521281736,0.9988216084296212,1.198604465671483,1.3903815809206845,1.5664224225418497,1.719630787771433,1.8438308505069394,1.934016108732541,1.9865511965140201,1.999318425525873,1.9718031490249777,1.9051145072503235,1.8019407180025047,1.6664407146384268,1.5040764995520663,1.321392970968243,1.1257540982276975,0.9250460803320983,0.7273594534217515,0.5406629614273664,0.3724823361636207,0.22959693523189406,0.11776646625265552,0.041498813167699766,0.003868323529645834,0.0063918816143948565,0.048967762846611085,0.12987973431532684,0.24586623608780245,0.39225185462436674,0.5631357886039384,0.751629710105332,0.950135432966913,1.1506511955166396,1.345094211423256,1.52562648665014,1.6849707688356683,1.8167038931890778,1.915515700133241,1.9774230877295405,1.999930570436636,1.98213087208201,1.9247414981461888,1.830075813131278,1.7019497888848167,1.545528182851657,1.3671163468059087,1.173906058248636,0.9736856200022281,0.7745259138810854,0.5844550636091028,0.4111348213149586,0.2615517224584749,0.14173545872797733,0.05651582129003463,0.009328012005428654,0.002074170511650708,0.035046699012536875,0.10691647555138917,0.21478643089006744,0.3543083293116286,0.5198580459137307,0.704762274969817,0.9015675307480878,1.1023405973701104,1.2989883165830136,1.483583822804177,1.6486860749128822,1.7876398044673953,1.894843789440884,1.9659766393682756,1.9981709905083016,1.9901290892179024,1.942175104375393,1.856242060139478,1.7357939157845381,1.5856859335723277,1.41196896322857,1.2216455323128923,1.0223875744744566,0.8222271739618898,0.6292327924699215,0.4511840296113413,0.2952580274144009,0.1677401598727194,0.07377066964656542,0.01713746498567037,0.00012342922396813005,0.023414397798772968,0.08607151223805709,0.18556906552664598,0.3178963133046827,0.47771914689169226,0.6585951110997228,0.8532330994712903,1.0537872586334895,1.2521732544885587,1.4403941515576097,1.6108627692883066,1.7567075211492233,1.8720494081437857,1.952239001141133,1.9940438592700587,1.9957788295452747,1.9573739753500945,1.8803773955800303,1.7678928208077032,1.6244545019661127,1.4558444347855644,1.268859287662265,1.071036428093391,0.870350091545478,0.6748899401839774,0.49253496875544167,0.3306359024683291,0.1957188894087747,0.09322243164335098,0.02727815931068467,0.0005442846941557944,0.01409844973862373,0.0673942863254211,0.15828344036012265,0.28310217188259845,0.4368190403507797,0.6132377219070727,0.8052467830674986,1.005106342461895,1.204760065294974,1.3961599140390175,1.5715905646641484,1.7239804111931756,1.8471866219960524,1.9362427572082188,1.987558965821214,1.999066692504237,1.9703020610275017,1.9024245731038374,1.7981703688979773,1.6617419332720398,1.498638693705589,1.315435338485265,1.119516791153166,0.9187805243879288,0.7213182130412759,0.5350895588880833,0.3676014352090726,0.22560528488084908,0.11482496985002377,0.03972604237391697,0.0033357386995344074,0.007120951231689876,0.05092909812980406,0.13299427387880325,0.2500084329047584,0.3972547368250424,0.5687976901079268,0.7577223997776705,0.9564133146101379,1.1568612078486267,1.3509860289727762,1.5309626103708747,1.6895360996883648,1.8203144027795193,1.9180258488928055,1.978731691612597,1.9999848796471147,1.9809286974167346,1.9223312992415704,1.8265547450564363,1.6974597858225817,1.5402502367345692,1.3612632115351941,1.1677136735886813,0.9674036008533266,0.7684074883080187,0.5787468652229213,0.40606694747706384,0.2573284590608189,0.1385270454326203,0.05445158917197479,0.008491170219613986,0.002498452133519846,0.03671500125850491,0.10976154919162595,0.21869359106380282,0.35912007847122207,0.5253804225479551,0.710772672188341,0.9078236695604837,1.1085902929476588,1.3049796438233268,1.4890752714273767,1.6534562847361784,1.7914964884292466,1.8976314846888678,1.967582973963366,1.9985312131354447,1.9892286793103096,1.9400503574382044,1.8529786246787476,1.7315233408176174,1.5805803658897517,1.406234208160421,1.215512757719783,1.0161039923761397,0.8160460754257177,0.6234033374527097,0.44594120332703113,0.2908131680843242,0.16427243968647165,0.07141987233479008,0.015998351140397493,0.00024191650127203257,0.0247857099788803,0.08864037175478223,0.1892319217048235,0.3225055164858427,0.4830889001888975,0.6645089598662148,0.8594526565829524,1.0600618138690536,1.2582498806533275,1.4460278999738925,1.615826543671481,1.7608012318542525,1.8751080377750546,1.9541392564000564,1.994709140905587,1.995182320068165,1.9555397200452869,1.8773793332417745,1.7638518032681385,1.6195334225606093,1.4502416621252106,1.262800669399722,1.064766187008289,0.864120980928974,0.6689530553590934,0.48712962542928573,0.3259799899209649,0.19200008738082763,0.09059064496934521,0.02583947525816399,0.0003566965881671713,0.015169519251933439,0.06968083866762176,0.16169330465253506,0.2874978965646112,0.4420234338494512,0.6190409952256848,0.8114150063761042,1.0113908748036793,1.2109075772982898,1.4019225996196178,1.5767361300827234,1.7283014388119091,1.8505089312790184,1.9384324259354049,1.9885277284906109,1.9987754983122028,1.9687626480060398,1.899698994960667,1.7943684936329487,1.6570170144001346,1.4931811926108804,1.3094652469265504,1.1132747634002729,0.9125181764533853,0.715287980043555,0.5295345193972574,0.3627455127546707,0.22164422159878938,0.11191843612101393,0.03799120051374694,0.0028425201485157148,0.007889237619625566,0.05292791984792833,0.13614305846410946,0.2541802529143632,0.40228142627869723,0.5744766232555538,0.7638246589389508,0.9626929178416398,1.1630650244713723,1.356863983264117,1.536277762112213,1.6940741952206482,1.8238925115635527,1.9204997374360304,1.980001637517828,1.999999691420608,1.9796877779962119,1.9198846700637637,1.8230010296939985,1.6929422344698262,1.5349509517951487,1.355395807077898,1.16151466456831,0.9611228691981135,0.7622982101838462,0.5730553055074166,0.40102253282728695,0.2531345297290931,0.1353526586254643,0.05242470435741087,0.007693491083469395,0.002962133105646525,0.03842135136827585,0.11264178550069859,0.22263161130477094,0.36395714112792366,0.5309215457224861,0.716794493317644,0.9140834491568456,1.1148356994221016,1.310958924967181,1.4945474025387746,1.6582006843207426,1.7953219098357216,1.9003837252577869,1.9691510909330359,1.9988519957425728,1.9882891968144754,1.9378884803598198,1.8496814982390906,1.7272238721167947,1.5754518664241153,1.4004834076394654,1.2093714707963412,1.0098197742018378,0.8098722427079514,0.6175887572634635,0.44072026127588393,0.2863963202399151,0.160837729096022,0.06910575211266312,0.014898103425913689,0.0003998922575603192,0.02619554120640122,0.09124522818525749,0.19292680162822662,0.32714147936733085,0.48847907045845507,0.6704360598692869,0.8656777650383928,1.0663339967809256,1.2643163064555307,1.4516440311649745,1.6207659941167216,1.7648648924061996,1.8781321023591104,1.9560018250339728,1.9953351334854519,1.9945465028457385,1.9536677227999624,1.8743466161445723,1.7597806150839541,1.6145878728026988,1.4446211058043343,1.2567316710274588,1.0584933877860598,0.8578972372666699,0.6630292462377538,0.4817445394747294,0.32135069983910014,0.18831319976110394,0.0879947781771544,0.02443926863137469,0.00020859242757342855,0.0162794876332627,0.07200413678786155,0.165136280411478,0.2919217636791599,0.447249866325526,0.6248593156761523,0.8175906784211835,1.0176749572281876,1.2170467588670693,1.4076694100475249,1.581858915557949,1.732593699955459,1.8537976471310615,1.9405850284265869,1.9894574462579535,1.9984448544513715,1.9671849707643663,1.8969378804758152,1.7905352423739493,1.6522661446477618,1.4877042118286041,1.3034829320989263,1.1070282615168996,0.9062592838788444,0.7092689926109925,0.5239980623681286,0.3579147605998936,0.2177139018398564,0.10904697986796874,0.03629435611006426,0.0023886873577479983,0.00869671043237863,0.054964149051491495,0.13932596370047312,0.2583815313378145,0.40733172444102417,0.5801723637399693,0.7699362465618765,0.9689739946296626,1.169262400346147,1.3627278421296385,1.5415717319361102,1.698584876186584,1.8274380782130444,1.9229372680491146,1.9812328752848547,1.9999750051720808,1.978408162834308,1.9174017072497906,1.819414807408736,1.688397313260988,1.529630537344782,1.3495143651847499,1.1553092760361923,0.9548436731131429,0.7561983208130996,0.5673806092681118,0.3960017766099079,0.24897010011526155,0.13221242368863384,0.050435246904272146,0.006935006103767294,0.003465195113556918,0.04016568194442027,0.11555707071483079,0.22660033606898466,0.36881932622717983,0.5364811965739515,0.7228275005077928,0.9203466222879586,1.1210765701121035,1.316925923844779,1.5000000000000475,1.6629190862722036,1.7991159175901605,1.9031004024394993,1.9706809283397626,1.999133325659408,1.9873106788381536,1.9356895585302132,1.8463508110505786,1.7228956795025936,1.5703006377408333,1.3947167888112788,1.203221914111439,1.0035351681657585,0.8037059196628467,0.6117892815664073,0.4355214096750839,0.2820076583381008,0.1574361637656555,0.06682840038338411,0.013836765299850229,0.0005973502530983721,0.027643835795735816,0.09388597864284554,0.19665355935646134,0.3318040188376431,0.49388944479913754,0.6763761770001403,0.8719081789581774,1.07260355963038,1.2703722922831644,1.4572423233046128,1.625680925525491,1.7688983422985338,1.8811214824513196,1.9578266334751002,1.9959218122841587,1.9938714029915199,1.951758057554247,1.8712793640748426,1.7556794170590437,1.6096180480320084,1.438982987823811,1.2506525322587057,1.052218278190056,0.851679106384037,0.6571187467987738,0.4763799235920819,0.3167482150703842,0.18465837217438297,0.08543493379836797,0.023077594735726015,9.997806219774752e-5,0.017428311041031486,0.07436408892045221,0.16861223164624028,0.2963735984920295,0.4524981313453368,0.63069245344615,0.8237735552758865,1.0239583415268008,1.223177367515431,1.41340011833518,1.586958718749777,1.7368570250879865,1.8570526396545195,1.9427004796581004,1.9903480824012603,1.9980747739815234,1.9655690916176314,1.8941413387079018,1.7866707665269377,1.647489511664765,1.4822079676886852,1.297488630292068,1.100777532227648,0.9000040938783722,0.7032614884815425,0.5184804064797166,0.3531093695498235,0.2138144808440956,0.10621071450781738,0.03463557618487145,0.0019742582527272345,0.009543337776381722,0.05703770531336805,0.14254286386933668,0.262612102232911,0.4124054318352657,0.5858846865908784,0.776056921250695,0.9752562968838501,1.1754530906888423,1.36857737395839,1.5468443107413559,1.7030679644231017,1.8309509626849843,1.925338344454412,1.9824253562821954,1.9999108218765898,1.9770899024733295,1.9148825088718013,1.8157962198493791,1.683825201711562,1.5242892035293334,1.3436191181613024,1.1490977530929767,0.9485662606143164,0.7501080611294729,0.5617230006443017,0.39100487713506404,0.24483533470603314,0.12910646465515008,0.048483295392252934,0.006215745239165793,0.00400761828726226,0.041947924089326905,0.11850728968606594,0.23059960859954587,0.37370644172228074,0.5420591555067698,0.7288714554669176,0.9266129415710793,1.1273126585155975,1.3228804047713956,1.5054328484440191,1.6676113042228746,1.8028783618368518,1.9057814089306222,1.9721724257579758,1.9993751917739573,1.9862931640308643,1.9334536788023344,1.842986694668718,1.7185389339301143,1.5651268833036394,1.3889345794458645,1.1970643305604212,0.9972504224973723,0.7975473498480421,0.6060051394297977,0.4303448538689547,0.2776473557223593,0.1540678780504552,0.06458790709782947,0.01281437868298485,0.0008342826886846844,0.02913053654210762,0.09656251882299904,0.20041204768995868,0.3364929507355925,0.49931980951184285,0.6823290766358254,0.8781436522529787,1.0788702547820659,1.2764175989367486,1.462822555271323,1.6305711437676598,1.7729014222177675,1.8840760599770725,1.9596136096470922,1.996469154129064,1.9931570471706266,1.94981079973625,1.868177698182985,1.7515483711826674,1.6046241445467118,1.4333275308782176,1.2445634932077687,1.0459411060747137,0.845466833885359,0.6512217904951556,0.4710359896730284,0.3121727174041262,0.18103574897916996,0.08291121294194481,0.021754507354636354,3.085778209344081e-5,0.018615944098983706,0.0767606018519239,0.17212102106339167,0.30085322516457635,0.45776802161278085,0.6365401781383608,0.8299633927287318,1.0302407795177937,1.2292991610964956,1.4191144981309223,1.592035338226144,1.7410912458165302,1.86027378028338,1.9447786960738196,1.991199601742113,1.9976652715201018,1.9639150743898544,1.891309480114856,1.7827752187310786,1.6426873041189727,1.4766926772818627,1.2914825782690054,1.0945228224240944,0.8937528535196209,0.6972657049400803,0.5129817696687815,0.34832952940791817,0.2099461126307246,0.10340975206744019,0.03301492625671454,0.0015992492026033478,0.010429086211528271,0.05914850673229366,0.1457936319094958,0.26687179850041887,0.41750234805977016,0.5916133661825,0.7821864412511205,0.9815395764657834,1.1816368509793596,1.3744123477054162,1.552095290271213,1.7075232828572706,1.834431026227437,1.9277028718141258,1.9835790334092056,1.999807144069251,1.9757330489819578,1.9123271744331327,1.8121454099429566,1.679226080410926,1.518927161320988,1.3377102988581706,1.1428803410814965,0.9422908796469741,0.7440276716861962,0.556082703100405,0.3860320317704161,0.24073039681666297,0.12603490420426244,0.0465689269195485,0.005535736899055288,0.004589381202141807,0.0437680074078699,0.12149232588658254,0.23462927093316022,0.37861829458177143,0.5476552022028303,0.7349261194704603,0.9328821594986311,1.1335437183194625,1.3288221325568461,1.510845733284151,1.672277152839413,1.8066090939664732,1.9084266388367168,1.973625524276485,1.999577584532999,1.985236692582442,1.931180929489158,1.839589281969614,1.714153807482162,1.5599308074652884,1.3831370079291265,1.1908989633557336,0.9909657854320061,0.7913967765148278,0.6002365593154602,0.4251907983212748,0.2733155846160724,0.15073300499120734,0.06238436075116072,0.011830983957524577,0.0011106802059590581,0.0306555847237594,0.09927474300764039,0.2042021181756818,0.3412080898578418,0.5047699501079387,0.6882945236485087,0.8843839386338591,1.085133834713617,1.2824519876385538,1.468384506657013,1.6354364556893086,1.7768739740501147,1.8869957182363652,1.961362682967903,1.9969771374012213,1.9924034635986954,1.947826026258829,1.8650417409787052,1.7473876406230162,1.5996063595963603,1.4276549583468827,1.2384647943796108,1.039662119375992,0.8392606651428501,0.6453386102452947,0.465712948792647,0.30762438756340615,0.1774454732619597,0.08042371528975956,0.020470058747504294,1.234317377862837e-6,0.019842339897948036,0.07919358092477102,0.17566251007283717,0.30536046676035267,0.46305932897736124,0.6424022587788375,0.83615994629342,1.0365220230575563,1.2354118978114514,1.4248123237277766,1.5970885734702853,1.74529619489777,1.8634609417891541,1.9468195955882814,1.9920119706471882,1.9972163632416717,1.962222984411524,1.8884424165493707,1.778848752852852,1.6378597116880564,1.4711585584515656,1.2854650132572032,1.0882643791546407,0.8875058097141827,0.6912818788081605,0.5075023691206675,0.34357542896864,0.2061089499928942,0.10064420317929745,0.031432470338080054,0.0012636750194943147,0.011353920752464108,0.06129646993564797,0.14907813942206316,0.27116045189078697,0.4226222717963647,0.5973581762433547,0.7883245644588297,0.9878235851980433,1.187813436971435,1.380232532900619,1.5573244631224088,1.711950655512529,1.8378781313846075,1.9300307567341144,1.984693861097907,1.9996639758451336,1.9743376559532386,1.9097358048645647,1.8084625218894153,1.6746001310153305,1.513544622509873,1.3317881406621022,1.1366572855775288,0.9360177780765553,0.7379573926467,0.5504599394169858,0.3810834369335806,0.23665544858405319,0.12299786365668197,0.04469221710005322,0.00489500794241704,0.005210460879694678,0.04562586001036806,0.12451206141321036,0.23868916390586747,0.38355469079720905,0.5532691156292902,0.740991253371204,0.9391540284489429,1.139769503408748,1.3347508725143489,1.5162384407221312,1.6769164478299707,1.810307966622508,1.911035987676259,1.9750401665007034,1.999740495942415,1.984141306221412,1.9288714003597736,1.8361587071443919,1.7097404733627708,1.5547126154608437,1.377324303253637,1.184726056017261,0.9846815052004696,0.785254442598982,0.5944837690712826,0.4200594466070139,0.26901251611560606,0.14743167630884035,0.06021784837908584,0.01088661996568241,0.001426531887753102,0.03221892010431482,0.10202254406934397,0.2080236211133646,0.3459492499654093,0.510239651317388,0.6942722824148684,0.8906287916221122,1.0913940520260523,1.288475220042089,1.4739279577753353,1.6402766691200048,1.780815840887802,1.8898803419084356,1.9630737843525745,1.9974457420362994,1.9916106820408228,1.945803815516526,1.86187161632609,1.7431973897207684,1.5945648913735058,1.4219654942854763,1.2323566766608467,1.0333815661014087,0.8330608452880881,0.639469438423139,0.46041101120049166,0.3031034051983116,0.17388768683152123,0.07797253909308144,0.01922429964750061,1.1108838118278896e-5,0.02110744999770131,0.08166293004101499,0.1792365587927245,0.3098951452521759,0.4683718444429339,0.6482784638272359,0.8423629712180424,1.0428018240493162,1.2415153362193245,1.4304933700729356,1.602118224889618,1.749471706244332,1.866613998285053,1.9488230975900027,1.9927851570295108,1.9967280668772052,1.9604928885168385,1.8855402612549754,1.7748915239798697,1.6330069250523396,1.465605829784309,1.279436172938542,1.082002449615833,0.8812632092082339,0.6853102464350447,0.5020424212607266,0.33884725600952414,0.20230314449091513,0.09791417707723404,0.02988827093283819,0.0009675489579038521,0.012317804870058735,0.06348151008314507,0.15239625667532963,0.27547789301048187,0.42776500081840496,0.603118889864738,0.7944710484301332,0.9941080748746378,1.1939826047018403,1.3860376996584407,1.5625316227529884,1.7163499075164408,1.84129214200262,1.9323219072674158,1.9857697953147975,1.9994813228590969,1.9729037785024532,1.9071085025201024,1.8047477011555277,1.6699475362406824,1.5081417996955924,1.325852877486596,1.130428832379533,0.9297472036781268,0.7318974637750731,0.5448549316823597,0.3761592880842368,0.23261065096072142,0.11999546296948416,0.042853240060012565,0.004293583676808654,0.005870832788506863,0.04752140851529574,0.12756637699238604,0.24277912716009564,0.3885154353904685,0.5589006740474016,0.7470666176082825,0.9454283006955206,1.145989767877519,1.3406663904704375,1.5216107577564224,1.681529005951515,1.813974833706823,1.913609352385242,1.9764162965550698,1.9998639195675187,1.9830070482134425,1.9265251826359995,1.832695105693889,1.7052991058898828,1.5494725133985372,1.3714966950101206,1.1785458523625965,0.9783978300191375,0.7791205907105089,0.5887469959210667,0.41495100140475527,0.26473832018386245,0.14416402239916926,0.05808845555458475,0.009981324007961367,0.0017818252585440897,0.03382048093504275,0.10480581347537155,0.21187640556122334,0.35071624379187627,0.5157286970977444,0.7002621168249679,0.8968779645579824,1.0976506594532072,1.2944870582415144,1.4794526896708688,1.6450915928809209,1.7847268670346232,1.8927298170563707,1.964746846215996,1.9978749495253298,1.9907787338103091,1.9437442473827993,1.8586674494389468,1.738977783982521,1.589499939006324,1.4162593634165412,1.2262393813101193,1.0270996943206994,0.8268676192016579,0.6336145068494379,0.45513038631267466,0.2986099488787586,0.17036253021355352,0.07555778116864065,0.01801727925966079,6.048095429045386e-5,0.022411224428881438,0.08416855166626358,0.18284302605502578,0.31445708152915974,0.47370535817567794,0.654168561184902,0.8485722224954201,1.0490799344530524,1.2476092352459651,1.4361574127763392,1.6071240938227058,1.7536176149318017,1.8697328252316017,1.9507891229444851,1.993519130349752,1.996200401713446,1.9587248550411849,1.8826031288610476,1.7709036884151088,1.6281291358875298,1.4600347106019587,1.2733962954403628,1.075737281141465,0.8750252985722224,0.6793510436886885,0.496602141746167,0.3341451972840229,0.19852884644662339,0.09521978159191236,0.028382389033886013,0.0007108827142462415,0.013320700492802762,0.06570354086999408,0.15574785261018464,0.27982395132914384,0.43293033199792574,0.6088952795098911,0.8006256503911081,1.0003927972708062,1.200144110500689,1.39182761868589,1.5677165634901944,1.7207208651072787,1.8446729232348902,1.93457623291813,1.9868067935625902,1.9992591923255816,1.9714314732649159,1.9044453711728808,1.8010010944694101,1.6652684798553299,1.5027189062792217,1.319904743763095,1.124195227498829,0.9234794041270507,0.7258481244265935,0.539267901283212,0.3712597797167625,0.22859616370800373,0.11702782073154072,0.04105206843543918,0.00373148785729438,0.006570470845162046,0.049454578052213205,0.13065515198470457,0.24689899915026303,0.3935003324219791,0.5645496550217792,0.7531519722167512,0.9517047284170579,1.1522042660375564,1.3465684527737816,1.5269624721911597,1.6861146450170683,1.8176095503852445,1.9161466313208164,1.9777538600851527,1.999947850533323,1.9818339633594348,1.9241423689889081,1.829198614423552,1.700829880488702,1.5442107082520997,1.3656544133773307,1.1723585964978593,0.9721150080811679,0.772995463124389,0.5830264664560745,0.4098656644877644,0.2604931656431009,0.1409301723282782,0.05599626638445043,0.00911513184175694,0.0021765462849552275,0.03546020395746685,0.10762444129195214,0.2157603193417068,0.35550888305044426,0.5212368706426884,0.7062637902922306,0.9031312106115362,1.103903409871048,1.3004872647811476,1.4849584841278638,1.6498810367920336,1.7886068980128058,1.89554403113135,1.966381802475452,1.9982647429154827,1.9899076517674579,1.9416474032065048,1.8554293668755701,1.734728990074558,1.5844117025502016,1.4105367911209266,1.2201131499485696,1.0208167521554503,0.8206812315040392,0.6277740467824787,0.4498712827034036,0.2941441960873581,0.16687014264481126,0.07317953689458356,0.016849045258917394,0.0001493487157947504,0.023753611694986132,0.08671034683334189,0.18648176941143801,0.31904609540378903,0.4790596595120924,0.6600723182046759,0.8547874548723339,1.0553561062958583,1.2536933541946715,1.4418042281192298,1.6121059825476567,1.7577337572049365,1.8728172994412666,1.9527175939977002,1.9942138616173815,1.99563338859215,1.95691895381841,1.879631135378489,1.766885403670019,1.623226536856623,1.4544454209529722,1.2673456193259536,1.069469121193262,0.8687923241911304,0.6734045059457778,0.4911817454575321,0.3294694385144673,0.1947862049373048,0.0925611231465121,0.02691488412056975,0.0004936864263278551,0.014362568008234988,0.0679624745303885,0.15913279484536025,0.2841984551860127,0.4381180613145922,0.614687117022464,0.806788127246853,1.0066775041523683,1.2062977110007256,1.3976020612926523,1.5728790805390616,1.7250633556406523,1.8480203415472032,1.9367936446448655,1.9878048148818932,1.9989975930183093,1.9699207983938418,1.9017465160114964,1.7972228498145935,1.6605631466727162,1.497276156454392,1.3139439744310812,1.117956717150893,0.9172146269889747,0.7198096135381649,0.5336990688963612,0.3663851053520175,0.22461214539047392,0.11409505415899357,0.03928877336903991,0.0032087426855539336,0.0073093474153441695,0.05142529226472403,0.1337782643895139,0.25104861714960014,0.3985091849981075,0.5702158354287791,0.7592470768370658,0.9579830637067708,1.1584127524281749,1.352456826304522,1.5322933726442398,1.6906731839029012,1.8212119730936753,1.9186477242653603,1.979052804259822,1.99999228552472,1.980622097993955,1.9217230535349126,1.8256693714380394,1.696332973685089,1.5389274078523947,1.3597976891139065,1.1661645328073813,0.965833287545563,0.7668793017714539,0.5773224066258714,0.40480363671685426,0.25627722016858057,0.13773025382682835,0.05394136350615497,0.008288077679988182,0.0026106793762837865,0.03713802440578162,0.11047831618887793,0.21967520904785387,0.3603269784411104,0.5267639543901939,0.7122770657624617,0.909388282791847,1.1101520563085647,1.3064756026644087,1.4904451236779632,1.654644811679809,1.7924557805688224,1.898322872977603,1.967978588553415,1.9986151068106626,1.9889974703183286,1.9395133658088266,1.852157496533739,1.7304511758158105,1.5793003829807515,1.4047980034291956,1.213978224550182,1.014532987769185,0.8145019265452728,0.6219482889089534,0.444633908097123,0.28970632321272827,0.16341066206754973,0.07083790020688374,0.015719643788216997,0.00027770861252618406,0.02513455877430859,0.08928821514647622,0.19015264513881847,0.3236620056190369,0.4844345369678964,0.6659895016995474,0.8610084228593228,1.0616300916813974,1.2597674527545957,1.4474335930636046,1.6170636942894787,1.761819970484208,1.8758672990834349,1.9546084345788297,1.9948693233918937,1.9950270499092118,1.9550752561780618,1.8766243981953072,1.7628368284589473,1.6182993216026438,1.448838181603203,1.2612843835851266,1.0631982173514474,0.8625645322551933,0.6674708680827566,0.4857814464897213,0.3248201643838825,0.19107536779007717,0.08993830675296077,0.02548581415642326,0.0003159686729751199,0.015443366264692227,0.07025822184080743,0.16255094968210937,0.28860123179686537,0.44332798386338856,0.6204941736365747,0.8129582355917575,1.0129619472855294,1.2124431631466044,1.4033607993997004,1.5780189699905018,1.7293772075968008,1.851334264722995,1.9389740548640981,1.988763819852843,1.9986965352699229,1.968371813557893,1.8990120436353746,1.7934131164245195,1.655831722544423,1.4918137651987262,1.3079708049292258,1.1117135477445081,0.9109531197106205,0.7137821696193148,0.5281486544794376,0.3615354575299691,0.22065875336895058,0.11119727909035537,0.03756342450756722,0.0027253688089942107,0.008087433314895365,0.0534334733134908,0.1369355908500115,0.25522781725620325,0.40354179527902334,0.5758989914655166,0.765351690724686,0.9642630585827571,1.1646149818264786,1.35833127848348,1.5376032485553814,1.6952044425557706,1.8247819595434358,1.921112532430665,1.9803130777733362,1.9999972227866138,1.9793714999832794,1.9192673318322169,1.8221075161354485,1.6918085630977795,1.533622820879594,1.353926753549155,1.1599639059445024,0.9595529165279354,0.7607723482277214,0.5716350417298142,0.3997651180323539,0.25209065028186006,0.13456439328525327,0.05192382808420992,0.0075001941896527535,0.0030842073851106155,0.03885387600928558,0.11336732544375305,0.22362092004935863,0.36517033965866463,0.5323097300311179,0.7183017057227744,0.9156489339569772,1.116396351956506,1.3124518353638315,1.4959123916097896,1.659382729384246,1.796273362679239,1.901066232836338,1.9695371413799734,1.9989260273721918,1.9880482254133014,1.9373422194801242,1.8488519676458983,1.7261445101714545,1.5741661821849573,1.3990432270121815,1.2078348474326723,1.0082486493585856,0.8083299483956459,0.6161374633348454,0.4394184693598331,0.28529650554204256,0.1599842251246395,0.06853296359554584,0.014629119456678108,0.0004455555745188633,0.026554011122177812,0.09190205478479707,0.19385550824465914,0.3283046298556078,0.48982977824589846,0.6719198779525068,0.8672348807403802,1.0679016427993537,1.265831291010894,1.4530452852606142,1.621997033228395,1.7658760933722242,1.8788827036890061,1.9564615700033192,1.9954854897838374,1.9943814096138173,1.953193834942573,1.8735830360716572,1.7587581226928022,1.6133476847409083,1.4432132140274805,1.2552128276247787,1.0569248173042816,0.8563421687501753,0.6615503644669777,0.48040145814383084,0.32019755852954224,0.18739648157564515,0.08735143600730166,0.024095235586977348,0.0001777364736877951,0.01656305257277002,0.07259069212378566,0.1660021821100962,0.29303210726044104,0.44855989386242756,0.6263162199849029,0.8191357317186712,1.019245878447253,1.218580224205047,1.4091036055479906,1.583136028828984,1.7336622505871297,1.8546145618688752,1.9411173774540305,1.9896837705965942,1.9983560309716273,1.9667845799388959,1.896242062050799,1.7895720447759627,1.6510743943523176,1.4863319482662367,1.3019854711858734,1.1054659658724795,0.904695129608877,0.7077660307421205,0.5226168772632016,0.3567110278023484,0.21673614379457662,0.10833460998193989,0.03587608999887737,0.00228138531993316,0.008904697810924067,0.055479041879347046,0.14012700665818112,0.2594364343999581,0.4085979644865134,0.5815988986582947,0.7714655727591426,0.9705444649979051,1.170810709256599,1.3641915772813422,1.5428918901950208,1.6997082419997036,1.8283193687272719,1.9235409584616971,1.981534630847369,1.999962662123993,1.9780822187236164,1.9167753008770017,1.8185131892019966,1.6872568274321786,1.528297156854359,1.3480418385733848,1.1537569608217941,0.953274143090481,0.7546748437058521,0.5659645964075325,0.394750307445755,0.2479336213442198,0.13143271574893556,0.04994373980730049,0.006751512490612788,0.003597111608017678,0.04060769099530559,0.11629135494628673,0.22759729649839466,0.3700387753999481,0.5378739785183245,0.7243374722120599,0.9219129168232862,1.122636050177243,1.31841572683008,1.5013600719770077,1.664094602767167,1.800059493557137,1.9037740023501335,1.971057399395382,1.9991974923193245,1.98705995454565,1.9351340499763712,1.8455129107740607,1.7218091632465518,1.5690093029535637,1.3932726891720322,1.2016832612472488,1.0019639851425515,0.8021655408364972,0.6103417995762375,0.43422517249082904,0.2809149172544303,0.15659096715354148,0.06626481810115925,0.01357751533790763,0.000652882972158042,0.02801191267301628,0.09455176250682307,0.1975902124731448,0.332973784738803,0.4952451702449673,0.6778632127254578,0.87346658258266,1.0741705119357863,1.2718846294536563,1.4586390830594482,1.6269058045073033,1.7699019656601043,1.8818633941554275,1.9582769270759974,1.996062336455851,1.9936964932074765,1.9512747644243487,1.8705071691354198,1.7546494474723704,1.608371821851339,1.4375707404011702,1.2491311912593244,1.0506491688388482,0.8501254794470905,0.655643228946374,0.47504199291901905,0.3156018035352075,0.1837496916027821,0.08480061308584386,0.02274320333727553,7.899528837107539e-5,0.017721582707019845,0.07495979325133206,0.16948635581242422,0.29749090656610866,0.453813584661643,0.6321530261078524,0.8253203716286405,1.025529049434725,1.2247086517744277,1.4148302529080738,1.5882300549405581,1.7379183153606328,1.857861103419614,1.9432235277575933,1.9905646307769183,1.9979760935726674,1.965159160229546,1.8934366806665457,1.7856997865837003,1.6462913500015115,1.4808309221778175,1.2959882096102664,1.099214218302236,0.8984409038620512,0.7017614345322409,0.5171039557418784,0.3519120067246445,0.2128444716028609,0.10550715990355153,0.03422683648933689,0.0018768097548454987,0.009761108623087211,0.05756191716628156,0.14335238575919973,0.26367430234883804,0.4136774929118334,0.587315331871983,0.7775884814542244,0.9768270348486688,1.1769996899995936,1.370037491227932,1.5481590886721142,1.704184404343558,1.8318240609242815,1.9259329064403141,1.9827174152329965,1.9998886049019373,1.976754305139019,1.9142470590995904,1.8148865326066614,1.6826779464728143,1.5229506261299501,1.342143176629168,1.1475439426013874,0.9469972152326348,0.748587029045509,0.5603112946304699,0.38975940303221757,0.24380629755013128,0.12833534491292398,0.04800117688509287,0.006042062154284156,0.004149371786306699,0.0423994000915664,0.11925028920311342,0.231604181335765,0.3749320933710548,0.5434564800750376,0.7303841268292981,0.928179983975878,1.1288709045150749,1.3243670415008422,1.5067879496070498,1.6687802457188345,1.803814023657789,1.9064460745674672,1.9725393025523559,1.9994294909297183,1.986032696750129,1.9328889445159223,1.842140457804349,1.7174453062785484,1.56382994897335,1.3874866178336478,1.1955237089693618,0.9956792433529651,0.7960089473494727,0.6045615265506648,0.4290542226154107,0.27656173141393703,0.15323102218127493,0.064033553310888,0.012564872968180874,0.0008996826164089367,0.02950820584260616,0.09723723365435699,0.201356610310935,0.337669285846267,0.5006804990674711,0.6838192712681451,0.8797032822463025,1.080436451483028,1.2779272289880237,1.4642147655160902,1.6317898142392102,1.7738974283338793,1.8848092527514462,1.9600544340938284,1.9965998406236247,1.9929723277430655,1.9493181204229715,1.8673969188771251,1.7505109650821717,1.6033719294707383,1.4319109835907864,1.2430397147016652,1.0443715198305843,0.8439147098928333,0.6497496948412933,0.46970326250352923,0.3110330809243328,0.18013514191252333,0.0822859387410334,0.02142977080993591,1.9749017104664368e-5,0.018918910907798625,0.07736543164860943,0.17300333317114547,0.30197745360006234,0.4590888487504803,0.6380043614631603,0.8315119110405469,1.0318112120748153,1.230828203793904,1.42054051528874,1.5933008471212997,1.7421452338113492,1.8610737611430839,1.9452924225860269,1.9914063656015843,1.997556738079824,1.963495618630639,1.8905960102897665,1.7817964947944593,1.6414827784128538,1.4753109042130856,1.289979257082122,1.0929585519654041,0.8921906894999923,0.6957686181594227,0.5116101076649313,0.3471385838485823,0.20898389050713362,0.10271504053401248,0.03261572912130595,0.001511658093664825,0.01065663192488886,0.059682016904851753,0.14661160075699076,0.26794125371515887,0.41878017992368843,0.5930480653190178,0.7837201749670741,0.9831105199860027,1.183181679602554,1.3758687894209287,1.5534046359429614,1.7086327527878002,1.835295897706077,1.928288281889275,1.9838613842125172,1.999775054045557,1.9753878116794386,1.9116827063605633,1.8112276895952517,1.6780721010766493,1.517583439883821,1.3362310007019493,1.141325096685176,0.9407223808807079,0.7425091447032931,0.5546753596929332,0.38479260192256526,0.23970884192069697,0.1252724031173329,0.0460962160449675,0.005371871202600076,0.004740966106766442,0.04422893252911442,0.12224401134214691,0.23564141629746704,0.3798501002958087,0.5490570142032177,0.7364414307436278,0.9344498878779194,1.1351006687055114,1.3303055443112106,1.5121958101092232,1.6734394731653932,1.807536804684637,1.9090823439467863,1.9739827923187154,1.9996220140398904,1.9849664926014383,1.9306069917760296,1.8387347419419644,1.7130531116312944,1.5586283248185238,1.3816852415356808,1.1893564338895521,0.9893946722246588,0.789860411107913,0.5987968725674438,0.423905823975839,0.2722371199630814,0.1499045229190017,0.061839257355307264,0.011591232344880686,0.0011859447591739958,0.031042831530226356,0.09995836215647036,0.205154552992721,0.34239094771502177,0.506135550028704,0.6897878183279641,0.885944733393705,1.0866992139484442,1.2839588509433018,1.4697721124020433,1.636648869515334,1.7778623235804831,1.8877201631212777,1.9617940208488098,1.9970979810568097,1.9922089418236992,1.9473239802219982,1.8642524081457115,1.7463428389842743,1.5983482050849356,1.4262341671457004,1.2369386385530405,1.0380921182346257,0.8377101054008167,0.6438699949346414,0.4643854777667179,0.30649157115239656,0.17655297527247604,0.07980751229765448,0.02015498988300879,0.0],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],36:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var versin = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof versin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the versed sine (for -256*pi < x < 0 )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed sine (for 0 < x < 256*pi )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed sine (for -2**60 (pi/2) < x < -2**20 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed sine (for 2**20 (pi/2) < x < 2**60 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed sine (for x <= -2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed sine (for x >= 2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = versin( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = versin( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = versin( PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = versin( NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/versin/test/test.js")
},{"./../lib":28,"./fixtures/julia/huge_negative.json":30,"./fixtures/julia/huge_positive.json":31,"./fixtures/julia/large_negative.json":32,"./fixtures/julia/large_positive.json":33,"./fixtures/julia/medium_negative.json":34,"./fixtures/julia/medium_positive.json":35,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":56,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63,"tape":121}],37:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],38:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":37}],39:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":37,"./factory.js":38,"@stdlib/utils/define-read-only-property":66}],40:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-high-word-exponent-mask":58}],41:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":40}],42:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":44}],43:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":42}],44:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],45:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":46}],46:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],47:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":45}],48:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":50}],49:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":48}],50:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":2}],51:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":52}],52:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":64}],53:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":55}],54:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":44}],55:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":54}],56:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],57:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],58:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],59:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],60:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],61:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],62:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],63:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],64:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],65:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],66:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":65}],67:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],68:[function(require,module,exports){

},{}],69:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"dup":68}],70:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],71:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":67,"ieee754":90}],72:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":92}],73:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":74,"./lib/keys.js":75}],74:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],75:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],76:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":86,"object-keys":95}],77:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],78:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":79,"./helpers/isNaN":80,"./helpers/mod":81,"./helpers/sign":82,"es-to-primitive/es5":83,"has":89,"is-callable":93}],79:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],80:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],81:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],82:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],83:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":84,"is-callable":93}],84:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],85:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],86:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],87:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],88:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":87}],89:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":88}],90:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],91:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],92:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],93:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],94:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],95:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":96}],96:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],97:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":70}],98:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":70}],99:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":100}],100:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":102,"./_stream_writable":104,"core-util-is":72,"inherits":91,"process-nextick-args":98}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":103,"core-util-is":72,"inherits":91}],102:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/BufferList":105,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"events":85,"inherits":91,"isarray":108,"process-nextick-args":98,"safe-buffer":115,"string_decoder/":109,"util":68}],103:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":100,"core-util-is":72,"inherits":91}],104:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"inherits":91,"process-nextick-args":98,"safe-buffer":115,"util-deprecate":127}],105:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":115}],106:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":98}],107:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":85}],108:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],109:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":115}],110:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":111}],111:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":100,"./lib/_stream_passthrough.js":101,"./lib/_stream_readable.js":102,"./lib/_stream_transform.js":103,"./lib/_stream_writable.js":104}],112:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":111}],113:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":104}],114:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":70,"through":126}],115:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":71}],116:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":85,"inherits":91,"readable-stream/duplex.js":99,"readable-stream/passthrough.js":110,"readable-stream/readable.js":111,"readable-stream/transform.js":112,"readable-stream/writable.js":113}],117:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":78,"function-bind":88}],118:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":117,"./polyfill":119,"./shim":120,"define-properties":76,"function-bind":88}],119:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":117}],120:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":119,"define-properties":76}],121:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":122,"./lib/results":124,"./lib/test":125,"_process":70,"defined":77,"through":126}],122:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":70,"fs":69,"through":126}],123:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":70}],124:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":70,"events":85,"function-bind":88,"has":89,"inherits":91,"object-inspect":94,"resumer":114,"through":126}],125:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":123,"deep-equal":73,"defined":77,"events":85,"has":89,"inherits":91,"path":97,"string.prototype.trim":118}],126:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":70,"stream":116}],127:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[36]);
