// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":48,"@stdlib/math/constants/float64-pinf":49}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":30,"@stdlib/math/base/utils/float64-get-high-word":34,"@stdlib/math/base/utils/float64-to-words":37}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var MAXL10 = require( '@stdlib/math/constants/float64-max-base10-exponent' );
var MINL10 = require( '@stdlib/math/constants/float64-min-base10-exponent' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// VARIABLES //

var P = [
	2.39423741207388267439e3,
	4.06717289936872725516e2,
	1.17452732554344059015e1,
	4.09962519798587023075e-2
];
var Q = [
	2.07960819286001865907e3,
	1.27209271178345121210e3,
	8.50936160849306532625e1,
	1.0
];
var LOG210 = 3.32192809488736234787e0;
var LG102A = 3.01025390625000000000e-1;
var LG102B = 4.60503898119521373889e-6;


// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// MAIN //

/**
* Returns 10 raised to the x power.
*
* #### Method
*
* * Range reduction is accomplished by expressing the argument
*   as \\( 10^x = 2^n 10^f \\), with \\( |f| < 0.5 log_{10}(2) \\).
*   The Pade' form
*
*   ``` tex
*   1 + 2x \frac{P(x^2)}{Q(x^2) - P(x^2)}
*   ```
*
*   is used to approximate \\( 10**f \\).
*
*
* #### Notes
*
* * Relative error:
*
*   | arithmetic | domain      | # trials | peak    | rms     |
*   |:----------:|:-----------:|:--------:|:-------:|:-------:|
*   | IEEE       | -307,+307   |  30000   | 2.2e-16 | 5.5e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp10( 3.0 );
* // returns 1000
*
* @example
* var v = exp10( -9.0 );
* // returns 1e-9
*
* @example
* var v = exp10( 0.0 );
* // returns 1.0
*
* @example
* var v = exp10( NaN );
* // returns NaN
*/
function exp10( x ) {
	var px;
	var xx;
	var n;

	if ( isnan( x ) ) {
		return x;
	}
	if ( x > MAXL10 ) {
		return PINF;
	}
	if ( x < MINL10 ) {
		return 0.0;
	}

	// Express 10**x = 10**g 2**n = 10**g 10**( n log10(2) ) = 10**( g + n log10(2) )
	px = floor( (LOG210 * x) + 0.5 );
	n = px;
	x -= px * LG102A;
	x -= px * LG102B;

	// Rational approximation for exponential of the fractional part:
	// 10**x = 1 + 2x P(x**2)/( Q(x**2) - P(x**2) )
	xx = x * x;
	px = x * polyvalP( xx );
	x = px / ( polyvalQ( xx ) - px );
	x = 1.0 + ldexp( x, 1 );

	// Multiply by power of 2
	x = ldexp( x, n );

	return x;
} // end FUNCTION exp10()


// EXPORTS //

module.exports = exp10;

},{"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/floor":21,"@stdlib/math/base/special/ldexp":22,"@stdlib/math/base/tools/evalpoly":26,"@stdlib/math/constants/float64-max-base10-exponent":43,"@stdlib/math/constants/float64-min-base10-exponent":46,"@stdlib/math/constants/float64-pinf":49}],13:[function(require,module,exports){
'use strict';

/**
* Evaluate the base `10` exponential function.
*
* @module @stdlib/math/base/special/exp10
*
* @example
* var exp10 = require( '@stdlib/math/base/special/exp10' );
*
* var v = exp10( 3.0 );
* // returns 1000
*
* v = exp10( -9.0 );
* // returns 1e-9
*
* v = exp10( 0.0 );
* // returns 1.0
*
* v = exp10( NaN );
* // returns NaN
*/

// MODULES //

var exp10 = require( './exp10.js' );


// EXPORTS //

module.exports = exp10;

},{"./exp10.js":12}],14:[function(require,module,exports){
module.exports={"expected": [1e-300, 1.4104271176297771e-300, 1.989304654145441e-300, 2.8057692294338553e-300, 3.957333007004713e-300, 5.581529786570837e-300, 7.87234096883785e-300, 1.1103363181676776e-299, 1.5660484528328967e-299, 2.2087972053976743e-299, 3.1153474758377486e-299, 4.3939705607610377e-299, 6.197375232964286e-299, 8.740946086698842e-299, 1.2328467394419929e-298, 1.7388404731904388e-298, 2.4525077566199885e-298, 3.459083446134201e-298, 4.878785094571937e-298, 6.8811707984722175e-298, 9.705389895207363e-298, 1.3688745095370485e-297, 1.9306977288832142e-297, 2.7231084327631084e-297, 3.840745977815411e-297, 5.4170922790383495e-297, 7.64041384905858e-297, 1.0776246882626325e-296, 1.5199110829529518e-296, 2.143723807782885e-296, 3.0235661912055445e-296, 4.2645197480248803e-296, 6.014794296281995e-296, 8.483428982441038e-296, 1.1965258287321227e-295, 1.687612475788228e-295, 2.3802543999020426e-295, 3.3571753524794326e-295, 4.735051155775297e-295, 6.678444553468823e-295, 9.419459301799317e-295, 1.3285460832667803e-294, 1.873817422860295e-294, 2.642882906689303e-294, 3.727593720314801e-294, 5.257499266638462e-294, 7.415319536585552e-294, 1.0458767760290136e-293, 1.4751329666105257e-293, 2.080567538217146e-293, 2.9344888759616904e-293, 4.138882687039292e-293, 5.837592378488614e-293, 8.233498592289252e-293, 1.1612749687531357e-292, 1.6378937069540948e-292, 2.3101297000832148e-292, 3.25826957423931e-292, 4.595551764055151e-292, 6.481690828494745e-292, 9.141952512601205e-292, 1.2894057731856418e-291, 1.8186128681294187e-291, 2.565020905680198e-291, 3.6177750426586416e-291, 5.102608025649304e-291, 7.196856730011117e-291, 1.0150641893704043e-290, 1.4316740588229056e-290, 2.0192719161709146e-290, 2.8480358684357e-290, 4.0169470208239837e-290, 5.665611008252292e-290, 7.990931403980814e-290, 1.1270626347293928e-289, 1.5896397032895998e-289, 2.2420709447806046e-289, 3.1622776601683794e-289, 4.4601621653763235e-289, 6.290733667073113e-289, 8.872621353826528e-289, 1.2514185761897963e-288, 1.7650346953637338e-288, 2.489452797898423e-288, 3.511191734215257e-288, 4.9522800371347226e-288, 6.984830058471413e-288, 9.851593726503663e-288, 1.3894954943732155e-287, 1.9597821250883767e-287, 2.7641298538703967e-287, 3.898603702548841e-287, 5.498696382966738e-287, 7.755510490149058e-287, 1.0938582306368436e-286, 1.542807311332731e-286, 2.17601726918117e-286, 3.0691137648838167e-286, 4.328761281082956e-286, 6.105402296585214e-286, 8.611224963142905e-286, 1.2145505204027231e-285, 1.7130349897073586e-285, 2.416111002931905e-285, 3.407748477738836e-285, 4.806380863064449e-285, 6.779049906922909e-285, 9.561355820489688e-285, 1.3485595530525965e-284, 1.902044963364074e-284, 2.682695795279826e-284, 3.7837468980140477e-284, 5.3366992312065634e-284, 7.527025314327721e-284, 1.0616320618413615e-283, 1.4973546489660728e-283, 2.1119096016110413e-283, 2.978694572094522e-283, 4.201231599618739e-283, 5.925530975545396e-283, 8.357529574264454e-283, 1.1787686347935433e-282, 1.6625672479242445e-282, 2.3449299313554634e-282, 3.3073527641254774e-282, 4.6647800260903734e-282, 6.579332246575601e-282, 9.279668616466272e-282, 1.3088296259282025e-281, 1.8460087967663742e-281, 2.60366086634241e-281, 3.672273891000774e-281, 5.179474679231308e-281, 7.305271542664628e-281, 1.0303553085423307e-280, 1.4532410679618991e-280, 2.0496906107067206e-280, 2.890939220091897e-280, 4.0774590714370907e-280, 5.750958845380403e-280, 8.111308307896292e-280, 1.1440409196914128e-279, 1.6135863368106677e-279, 2.2758459260746608e-279, 3.2099148096829546e-279, 4.527350892858264e-279, 6.385498470312679e-279, 9.006280202112463e-279, 1.270270182603161e-278, 1.7916235122600268e-278, 2.5269543862746473e-278, 3.564084991415273e-278, 5.026882121429393e-278, 7.090050861192318e-278, 1.0000000000000001e-277, 1.410427117629777e-277, 1.9893046541454411e-277, 2.8057692294338553e-277, 3.9573330070047135e-277, 5.581529786570836e-277, 7.87234096883785e-277, 1.1103363181676776e-276, 1.5660484528328967e-276, 2.2087972053976743e-276, 3.115347475837749e-276, 4.393970560761037e-276, 6.197375232964286e-276, 8.740946086698842e-276, 1.2328467394419928e-275, 1.7388404731904388e-275, 2.4525077566199882e-275, 3.459083446134201e-275, 4.878785094571938e-275, 6.881170798472218e-275, 9.705389895207362e-275, 1.3688745095370485e-274, 1.930697728883214e-274, 2.7231084327631086e-274, 3.840745977815411e-274, 5.41709227903835e-274, 7.64041384905858e-274, 1.0776246882626324e-273, 1.5199110829529519e-273, 2.143723807782885e-273, 3.0235661912055448e-273, 4.26451974802488e-273, 6.014794296281995e-273, 8.483428982441038e-273, 1.1965258287321226e-272, 1.687612475788228e-272, 2.3802543999020426e-272, 3.3571753524794325e-272, 4.735051155774678e-272, 6.678444553468823e-272, 9.419459301799317e-272, 1.3285460832667804e-271, 1.873817422860295e-271, 2.642882906689303e-271, 3.7275937203148005e-271, 5.257499266638462e-271, 7.415319536585553e-271, 1.0458767760290137e-270, 1.4751329666105257e-270, 2.080567538217146e-270, 2.9344888759616904e-270, 4.138882687039292e-270, 5.837592378488616e-270, 8.233498592289252e-270, 1.1612749687531357e-269, 1.6378937069540948e-269, 2.3101297000832146e-269, 3.25826957423931e-269, 4.595551764055152e-269, 6.481690828494745e-269, 9.141952512601204e-269, 1.2894057731856417e-268, 1.8186128681294187e-268, 2.5650209056798623e-268, 3.617775042658642e-268, 5.102608025649305e-268, 7.196856730011117e-268, 1.0150641893704042e-267, 1.4316740588229054e-267, 2.0192719161709146e-267, 2.8480358684357003e-267, 4.016947020823983e-267, 5.665611008252291e-267, 7.990931403980814e-267, 1.127062634729393e-266, 1.5896397032896e-266, 2.2420709447806044e-266, 3.1622776601683797e-266, 4.460162165376323e-266, 6.290733667073113e-266, 8.872621353826529e-266, 1.251418576189796e-265, 1.7650346953637339e-265, 2.489452797898423e-265, 3.5111917342152567e-265, 4.952280037134723e-265, 6.984830058471413e-265, 9.851593726503663e-265, 1.3894954943730338e-264, 1.9597821250883767e-264, 2.7641298538703965e-264, 3.8986037025488406e-264, 5.498696382966739e-264, 7.755510490149058e-264, 1.0938582306368436e-263, 1.5428073113327312e-263, 2.17601726918117e-263, 3.069113764883817e-263, 4.3287612810829555e-263, 6.105402296585214e-263, 8.611224963142905e-263, 1.2145505204027232e-262, 1.7130349897073584e-262, 2.4161110029319048e-262, 3.4077484777388367e-262, 4.806380863064448e-262, 6.77904990692291e-262, 9.561355820489689e-262, 1.3485595530525964e-261, 1.9020449633640742e-261, 2.682695795279826e-261, 3.783746898014048e-261, 5.336699231206563e-261, 7.527025314327722e-261, 1.0616320618413616e-260, 1.4973546489660728e-260, 2.111909601611041e-260, 2.978694572094522e-260, 4.201231599618739e-260, 5.925530975545396e-260, 8.357529574264454e-260, 1.1787686347935432e-259, 1.6625672479242444e-259, 2.3449299313554635e-259, 3.307352764125477e-259, 4.664780026090373e-259, 6.579332246575602e-259, 9.279668616466272e-259, 1.3088296259282028e-258, 1.8460087967663743e-258, 2.60366086634241e-258, 3.672273891000774e-258, 5.179474679231307e-258, 7.305271542664629e-258, 1.0303553085423306e-257, 1.4532410679618993e-257, 2.0496906107067204e-257, 2.8909392200918974e-257, 4.0774590714370904e-257, 5.750958845380403e-257, 8.111308307896292e-257, 1.144040919691338e-256, 1.6135863368107733e-256, 2.2758459260748094e-256, 3.2099148096831647e-256, 4.5273508928585607e-256, 6.38549847031268e-256, 9.006280202112464e-256, 1.2702701826031609e-255, 1.791623512260027e-255, 2.5269543862746473e-255, 3.564084991415273e-255, 5.026882121429393e-255, 7.090050861192318e-255, 1e-254, 1.4104271176297772e-254, 1.9893046541454413e-254, 2.8057692294338554e-254, 3.957333007004713e-254, 5.581529786570836e-254, 7.87234096883785e-254, 1.1103363181676776e-253, 1.566048452832794e-253, 2.2087972053975298e-253, 3.115347475837545e-253, 4.39397056076075e-253, 6.19737523296388e-253, 8.740946086699415e-253, 1.2328467394420734e-252, 1.7388404731905526e-252, 2.4525077566201486e-252, 3.459083446134201e-252, 4.878785094571938e-252, 6.881170798472218e-252, 9.705389895207362e-252, 1.3688745095370485e-251, 1.9306977288832142e-251, 2.7231084327631087e-251, 3.8407459778154105e-251, 5.41709227903835e-251, 7.640413849058581e-251, 1.0776246882626324e-250, 1.519911082952952e-250, 2.1437238077828852e-250, 3.023566191205545e-250, 4.26451974802488e-250, 6.014794296281995e-250, 8.483428982440484e-250, 1.1965258287320444e-249, 1.6876124757881177e-249, 2.3802543999018866e-249, 3.3571753524792133e-249, 4.735051155774988e-249, 6.678444553469262e-249, 9.419459301799933e-249, 1.3285460832668673e-248, 1.8738174228604173e-248, 2.642882906689303e-248, 3.727593720314801e-248, 5.257499266638461e-248, 7.415319536585554e-248, 1.0458767760290135e-247, 1.4751329666105256e-247, 2.0805675382171462e-247, 2.93448887596169e-247, 4.1388826870392916e-247, 5.837592378488614e-247, 8.233498592289252e-247, 1.1612749687531358e-246, 1.6378937069540948e-246, 2.310129700083215e-246, 3.25826957423931e-246, 4.595551764055152e-246, 6.48169082849432e-246, 9.141952512600607e-246, 1.2894057731855573e-245, 1.8186128681292997e-245, 2.56502090568003e-245, 3.617775042658405e-245, 5.102608025649639e-245, 7.196856730011587e-245, 1.0150641893704705e-244, 1.4316740588229056e-244, 2.0192719161709145e-244, 2.8480358684357e-244, 4.016947020823983e-244, 5.6656110082522915e-244, 7.990931403980815e-244, 1.1270626347293929e-243, 1.5896397032895998e-243, 2.2420709447806047e-243, 3.162277660168379e-243, 4.460162165376323e-243, 6.290733667073113e-243, 8.872621353826529e-243, 1.2514185761897963e-242, 1.7650346953637339e-242, 2.489452797898423e-242, 3.5111917342152567e-242, 4.9522800371343985e-242, 6.984830058470956e-242, 9.851593726503019e-242, 1.3894954943731247e-241, 1.9597821250882483e-241, 2.7641298538705775e-241, 3.898603702549096e-241, 5.498696382967098e-241, 7.755510490149565e-241, 1.0938582306368435e-240, 1.5428073113327312e-240, 2.1760172691811704e-240, 3.069113764883817e-240, 4.3287612810829553e-240, 6.105402296585214e-240, 8.611224963142905e-240, 1.2145505204027231e-239, 1.7130349897073587e-239, 2.416111002931905e-239, 3.4077484777388364e-239, 4.806380863064448e-239, 6.77904990692291e-239, 9.561355820489688e-239, 1.3485595530525965e-238, 1.9020449633640742e-238, 2.6826957952796504e-238, 3.7837468980138e-238, 5.336699231206214e-238, 7.527025314327228e-238, 1.061632061841292e-237, 1.4973546489661708e-237, 2.1119096016109032e-237, 2.978694572094717e-237, 4.201231599619014e-237, 5.925530975545784e-237, 8.357529574264454e-237, 1.1787686347935433e-236, 1.6625672479242446e-236, 2.3449299313554633e-236, 3.3073527641254773e-236, 4.664780026090373e-236, 6.579332246575601e-236, 9.27966861646627e-236, 1.3088296259282025e-235, 1.846008796766374e-235, 2.60366086634241e-235, 3.672273891000774e-235, 5.179474679231308e-235, 7.305271542664628e-235, 1.0303553085423307e-234, 1.453241067961899e-234, 2.0496906107067204e-234, 2.8909392200917084e-234, 4.077459071436824e-234, 5.750958845380027e-234, 8.111308307896823e-234, 1.1440409196913381e-233, 1.6135863368107732e-233, 2.2758459260748097e-233, 3.209914809682955e-233, 4.527350892858264e-233, 6.38549847031268e-233, 9.006280202112464e-233, 1.2702701826031608e-232, 1.791623512260027e-232, 2.5269543862746474e-232, 3.5640849914152735e-232, 5.026882121429393e-232, 7.090050861192318e-232, 1e-231, 1.410427117629777e-231, 1.989304654145441e-231, 2.805769229433855e-231, 3.957333007004713e-231, 5.581529786570837e-231, 7.87234096883785e-231, 1.1103363181676776e-230, 1.5660484528328968e-230, 2.2087972053975297e-230, 3.115347475837545e-230, 4.39397056076075e-230, 6.197375232963881e-230, 8.740946086699414e-230, 1.2328467394420736e-229, 1.7388404731904386e-229, 2.4525077566199883e-229, 3.459083446134201e-229, 4.878785094571938e-229, 6.881170798472218e-229, 9.705389895207362e-229, 1.3688745095370485e-228, 1.9306977288832143e-228, 2.723108432763108e-228, 3.840745977815411e-228, 5.41709227903835e-228, 7.64041384905858e-228, 1.0776246882626325e-227, 1.5199110829529517e-227, 2.143723807782885e-227, 3.023566191205545e-227, 4.2645197480248805e-227, 6.014794296281996e-227, 8.483428982441038e-227, 1.1965258287320443e-226, 1.6876124757881177e-226, 2.3802543999018868e-226, 3.357175352479213e-226, 4.735051155774987e-226, 6.678444553469261e-226, 9.419459301799933e-226, 1.3285460832667803e-225, 1.8738174228602947e-225, 2.642882906689303e-225, 3.7275937203148004e-225, 5.2574992666384623e-225, 7.415319536585554e-225, 1.0458767760290136e-224, 1.4751329666105256e-224, 2.0805675382171462e-224, 2.9344888759616905e-224, 4.1388826870392918e-224, 5.837592378488615e-224, 8.233498592289252e-224, 1.1612749687531358e-223, 1.6378937069540948e-223, 2.3101297000832147e-223, 3.25826957423931e-223, 4.595551764055151e-223, 6.481690828494745e-223, 9.141952512600607e-223, 1.2894057731855571e-222, 1.8186128681292997e-222, 2.56502090568003e-222, 3.617775042658405e-222, 5.1026080256496383e-222, 7.196856730011588e-222, 1.0150641893704042e-221, 1.4316740588229056e-221, 2.0192719161709144e-221, 2.8480358684357e-221, 4.0169470208239833e-221, 5.665611008252291e-221, 7.990931403980815e-221, 1.1270626347293927e-220, 1.5896397032896e-220, 2.2420709447806045e-220, 3.1622776601683794e-220, 4.460162165376323e-220, 6.290733667073113e-220, 8.872621353826528e-220, 1.2514185761897962e-219, 1.7650346953637338e-219, 2.489452797898423e-219, 3.5111917342152564e-219, 4.952280037134723e-219, 6.984830058470956e-219, 9.851593726503018e-219, 1.3894954943731245e-218, 1.9597821250882484e-218, 2.7641298538705777e-218, 3.898603702549096e-218, 5.498696382966738e-218, 7.755510490149057e-218, 1.0938582306368436e-217, 1.5428073113327314e-217, 2.1760172691811703e-217, 3.069113764883817e-217, 4.328761281082955e-217, 6.105402296585214e-217, 8.611224963142905e-217, 1.2145505204027231e-216, 1.7130349897073586e-216, 2.416111002931905e-216, 3.407748477738836e-216, 4.806380863064448e-216, 6.77904990692291e-216, 9.561355820489689e-216, 1.3485595530525964e-215, 1.902044963364074e-215, 2.682695795279826e-215, 3.7837468980138003e-215, 5.336699231206214e-215, 7.527025314327228e-215, 1.061632061841292e-214, 1.497354648966171e-214, 2.111909601610903e-214, 2.978694572094717e-214, 4.2012315996187386e-214, 5.925530975545396e-214, 8.357529574264453e-214, 1.1787686347935433e-213, 1.6625672479242445e-213, 2.3449299313554633e-213, 3.307352764125477e-213, 4.664780026090374e-213, 6.579332246575602e-213, 9.279668616466273e-213, 1.3088296259282026e-212, 1.8460087967663742e-212, 2.60366086634241e-212, 3.672273891000774e-212, 5.179474679231308e-212, 7.305271542664628e-212, 1.0303553085423307e-211, 1.4532410679618993e-211, 2.0496906107067206e-211, 2.8909392200917084e-211, 4.077459071436824e-211, 5.750958845380028e-211, 8.111308307896823e-211, 1.1440409196913381e-210, 1.6135863368107732e-210, 2.275845926074661e-210, 3.2099148096829546e-210, 4.527350892858264e-210, 6.385498470312679e-210, 9.006280202112463e-210, 1.270270182603161e-209, 1.7916235122600268e-209, 2.5269543862746476e-209, 3.564084991415273e-209, 5.026882121429393e-209, 7.090050861192318e-209, 1e-208, 1.410427117629777e-208, 1.989304654145441e-208, 2.805769229433855e-208, 3.957333007004713e-208, 5.581529786570836e-208, 7.87234096883785e-208, 1.1103363181676775e-207, 1.566048452832794e-207, 2.20879720539753e-207, 3.115347475837545e-207, 4.39397056076075e-207, 6.1973752329638805e-207, 8.740946086699414e-207, 1.2328467394420734e-206, 1.738840473190439e-206, 2.4525077566199883e-206, 3.459083446134201e-206, 4.8787850945719374e-206, 6.881170798472217e-206, 9.705389895207362e-206, 1.3688745095370483e-205, 1.930697728883214e-205, 2.723108432763108e-205, 3.840745977815411e-205, 5.41709227903835e-205, 7.64041384905858e-205, 1.0776246882626325e-204, 1.5199110829529518e-204, 2.143723807782885e-204, 3.023566191205545e-204, 4.26451974802488e-204, 6.014794296281995e-204, 8.483428982441039e-204, 1.1965258287320443e-203, 1.6876124757881175e-203, 2.3802543999018868e-203, 3.3571753524792127e-203, 4.7350511557749875e-203, 6.678444553469261e-203, 9.419459301799934e-203, 1.3285460832667802e-202, 1.8738174228602948e-202, 2.642882906689303e-202, 3.727593720314801e-202, 5.257499266638462e-202, 7.415319536585553e-202, 1.0458767760290136e-201, 1.4751329666105256e-201, 2.080567538217146e-201, 2.9344888759616903e-201, 4.138882687039292e-201, 5.8375923784886146e-201, 8.233498592289252e-201, 1.1612749687531358e-200, 1.6378937069540948e-200, 2.310129700083215e-200, 3.25826957423931e-200, 4.595551764055151e-200, 6.481690828494744e-200, 9.141952512600607e-200, 1.2894057731855572e-199, 1.8186128681292995e-199, 2.56502090568003e-199, 3.6177750426584053e-199, 5.102608025649638e-199, 7.196856730011117e-199, 1.0150641893704043e-198, 1.4316740588229054e-198, 2.0192719161709147e-198, 2.8480358684357e-198, 4.016947020823983e-198, 5.665611008252291e-198, 7.990931403980815e-198, 1.1270626347293928e-197, 1.5896397032895998e-197, 2.2420709447806046e-197, 3.162277660168379e-197, 4.460162165376323e-197, 6.290733667073112e-197, 8.872621353826528e-197, 1.251418576189796e-196, 1.765034695363734e-196, 2.489452797898423e-196, 3.511191734215257e-196, 4.952280037134399e-196, 6.984830058470956e-196, 9.851593726503017e-196, 1.3894954943731247e-195, 1.9597821250882482e-195, 2.7641298538705775e-195, 3.898603702549095e-195, 5.498696382966738e-195, 7.755510490149057e-195, 1.0938582306368435e-194, 1.542807311332731e-194, 2.1760172691811703e-194, 3.0691137648838166e-194, 4.328761281082955e-194, 6.105402296585214e-194, 8.611224963142905e-194, 1.214550520402723e-193, 1.7130349897073586e-193, 2.4161110029319046e-193, 3.407748477738836e-193, 4.806380863064448e-193, 6.77904990692291e-193, 9.561355820489689e-193, 1.3485595530525965e-192, 1.902044963364074e-192, 2.682695795279826e-192, 3.7837468980138e-192, 5.3366992312062144e-192, 7.527025314327229e-192, 1.061632061841292e-191, 1.4973546489661707e-191, 2.111909601610903e-191, 2.978694572094522e-191, 4.201231599618739e-191, 5.925530975545395e-191, 8.357529574264455e-191, 1.1787686347935433e-190, 1.6625672479242445e-190, 2.3449299313554633e-190, 3.3073527641254776e-190, 4.664780026090373e-190, 6.579332246575602e-190, 9.279668616466273e-190, 1.3088296259282026e-189, 1.846008796766374e-189, 2.6036608663424106e-189, 3.672273891000774e-189, 5.179474679231308e-189, 7.305271542664628e-189, 1.0303553085423306e-188, 1.453241067961899e-188, 2.0496906107065863e-188, 2.890939220091708e-188, 4.0774590714368244e-188, 5.750958845380026e-188, 8.111308307896823e-188, 1.1440409196913381e-187, 1.613586336810773e-187, 2.2758459260746606e-187, 3.2099148096829544e-187, 4.527350892858264e-187, 6.385498470312679e-187, 9.006280202112464e-187, 1.270270182603161e-186, 1.7916235122600268e-186, 2.5269543862746475e-186, 3.5640849914152733e-186, 5.0268821214293935e-186, 7.090050861192318e-186, 1e-185, 1.410427117629777e-185, 1.9893046541454412e-185, 2.8057692294338553e-185, 3.957333007004713e-185, 5.581529786570837e-185, 7.87234096883785e-185, 1.1103363181676775e-184, 1.566048452832794e-184, 2.20879720539753e-184, 3.115347475837545e-184, 4.39397056076075e-184, 6.19737523296388e-184, 8.740946086699414e-184, 1.2328467394420734e-183, 1.7388404731904387e-183, 2.452507756619988e-183, 3.459083446134201e-183, 4.878785094571938e-183, 6.881170798472218e-183, 9.705389895207362e-183, 1.3688745095370484e-182, 1.930697728883214e-182, 2.7231084327631086e-182, 3.840745977815411e-182, 5.41709227903835e-182, 7.64041384905858e-182, 1.0776246882626324e-181, 1.5199110829529519e-181, 2.143723807782885e-181, 3.023566191205545e-181, 4.2645197480248804e-181, 6.014794296281995e-181, 8.483428982441038e-181, 1.1965258287320444e-180, 1.6876124757881176e-180, 2.380254399901887e-180, 3.357175352479213e-180, 4.735051155774987e-180, 6.6784445534692606e-180, 9.419459301799317e-180, 1.3285460832667803e-179, 1.8738174228602947e-179, 2.642882906689303e-179, 3.7275937203148005e-179, 5.257499266638462e-179, 7.415319536585553e-179, 1.0458767760290137e-178, 1.4751329666105256e-178, 2.080567538217146e-178, 2.93448887596169e-178, 4.138882687039292e-178, 5.837592378488615e-178, 8.233498592289252e-178, 1.1612749687531357e-177, 1.6378937069540948e-177, 2.3101297000832146e-177, 3.25826957423931e-177, 4.595551764055151e-177, 6.48169082849432e-177, 9.141952512600606e-177, 1.2894057731855572e-176, 1.8186128681292996e-176, 2.56502090568003e-176, 3.617775042658405e-176, 5.102608025649638e-176, 7.196856730011116e-176, 1.0150641893704042e-175, 1.4316740588229056e-175, 2.0192719161709146e-175, 2.8480358684357e-175, 4.0169470208239834e-175, 5.665611008252292e-175, 7.990931403980815e-175, 1.1270626347293928e-174, 1.5896397032896e-174, 2.2420709447806047e-174, 3.1622776601683797e-174, 4.460162165376323e-174, 6.290733667073112e-174, 8.87262135382653e-174, 1.2514185761897962e-173, 1.765034695363734e-173, 2.4894527978984228e-173, 3.511191734215257e-173, 4.9522800371343985e-173, 6.984830058470956e-173, 9.851593726503017e-173, 1.3894954943731248e-172, 1.9597821250882484e-172, 2.7641298538705775e-172, 3.898603702549096e-172, 5.498696382967099e-172, 7.755510490149566e-172, 1.0938582306368435e-171, 1.5428073113327314e-171, 2.17601726918117e-171, 3.0691137648838167e-171, 4.3287612810829555e-171, 6.105402296585215e-171, 8.611224963142906e-171, 1.2145505204027231e-170, 1.7130349897073587e-170, 2.4161110029319048e-170, 3.4077484777388366e-170, 4.806380863064448e-170, 6.779049906922909e-170, 9.561355820489062e-170, 1.3485595530525083e-169, 1.9020449633639494e-169, 2.6826957952796506e-169, 3.7837468980138005e-169, 5.336699231206214e-169, 7.527025314327229e-169, 1.061632061841292e-168, 1.4973546489661709e-168, 2.111909601610903e-168, 2.978694572094717e-168, 4.201231599619014e-168, 5.925530975545784e-168, 8.357529574264454e-168, 1.1787686347935434e-167, 1.6625672479242447e-167, 2.3449299313554636e-167, 3.3073527641254774e-167, 4.664780026090373e-167, 6.5793322465756016e-167, 9.279668616466272e-167, 1.3088296259282025e-166, 1.846008796766374e-166, 2.60366086634241e-166, 3.6722738910007736e-166, 5.179474679231308e-166, 7.30527154266415e-166, 1.0303553085422632e-165, 1.4532410679618043e-165, 2.0496906107065865e-165, 2.8909392200917085e-165, 4.077459071436824e-165, 5.750958845380027e-165, 8.111308307896823e-165, 1.144040919691338e-164, 1.6135863368107733e-164, 2.27584592607481e-164, 3.2099148096831647e-164, 4.52735089285856e-164, 6.38549847031268e-164, 9.006280202112463e-164, 1.2702701826031609e-163, 1.7916235122600268e-163, 2.5269543862746473e-163, 3.564084991415273e-163, 5.026882121429393e-163, 7.090050861192318e-163, 1e-162, 1.410427117629777e-162, 1.989304654145441e-162, 2.805769229433855e-162, 3.9573330070047134e-162, 5.58152978657047e-162, 7.872340968837334e-162, 1.1103363181676049e-161, 1.5660484528327942e-161, 2.2087972053975298e-161, 3.115347475837545e-161, 4.39397056076075e-161, 6.19737523296388e-161, 8.740946086699414e-161, 1.2328467394420735e-160, 1.7388404731905525e-160, 2.452507756620149e-160, 3.459083446134201e-160, 4.878785094571938e-160, 6.881170798472218e-160, 9.705389895207362e-160, 1.3688745095370484e-159, 1.9306977288832142e-159, 2.7231084327631086e-159, 3.840745977815411e-159, 5.41709227903835e-159, 7.64041384905858e-159, 1.0776246882626324e-158, 1.5199110829529518e-158, 2.143723807782885e-158, 3.023566191205347e-158, 4.264519748024601e-158, 6.014794296281602e-158, 8.483428982440482e-158, 1.1965258287320443e-157, 1.6876124757881176e-157, 2.3802543999018866e-157, 3.357175352479213e-157, 4.735051155774988e-157, 6.67844455346926e-157, 9.419459301799933e-157, 1.3285460832668674e-156, 1.8738174228604177e-156, 2.642882906689303e-156, 3.727593720314801e-156, 5.257499266638462e-156, 7.415319536585553e-156, 1.0458767760290136e-155, 1.4751329666105256e-155, 2.080567538217146e-155, 2.9344888759616904e-155, 4.138882687039291e-155, 5.837592378488615e-155, 8.233498592289252e-155, 1.1612749687531359e-154, 1.6378937069540948e-154, 2.3101297000830636e-154, 3.258269574239097e-154, 4.5955517640548504e-154, 6.48169082849432e-154, 9.141952512600606e-154, 1.2894057731855572e-153, 1.8186128681292997e-153, 2.56502090568003e-153, 3.617775042658405e-153, 5.102608025649639e-153, 7.196856730011588e-153, 1.0150641893704706e-152, 1.4316740588229055e-152, 2.0192719161709147e-152, 2.8480358684357e-152, 4.0169470208239835e-152, 5.665611008252292e-152, 7.990931403980815e-152, 1.1270626347293928e-151, 1.5896397032896e-151, 2.2420709447806047e-151, 3.162277660168379e-151, 4.460162165376323e-151, 6.290733667073113e-151, 8.872621353826528e-151, 1.2514185761897141e-150, 1.7650346953636183e-150, 2.48945279789826e-150, 3.5111917342150274e-150, 4.952280037134399e-150, 6.984830058470956e-150, 9.851593726503017e-150, 1.3894954943731247e-149, 1.9597821250882485e-149, 2.7641298538705777e-149, 3.8986037025490956e-149, 5.498696382967098e-149, 7.755510490149565e-149, 1.0938582306368435e-148, 1.5428073113327312e-148, 2.1760172691811703e-148, 3.0691137648838168e-148, 4.328761281082955e-148, 6.105402296585214e-148, 8.611224963142905e-148, 1.2145505204027232e-147, 1.7130349897073588e-147, 2.4161110029319048e-147, 3.4077484777388365e-147, 4.8063808630644477e-147, 6.77904990692291e-147, 9.561355820489062e-147, 1.348559553052508e-146, 1.9020449633639497e-146, 2.6826957952796504e-146, 3.7837468980138e-146, 5.336699231206214e-146, 7.527025314327229e-146, 1.0616320618412921e-145, 1.4973546489661708e-145, 2.111909601610903e-145, 2.978694572094717e-145, 4.201231599619014e-145, 5.9255309755457836e-145, 8.357529574264455e-145, 1.1787686347935433e-144, 1.6625672479242445e-144, 2.3449299313554635e-144, 3.3073527641254775e-144, 4.6647800260903733e-144, 6.579332246575602e-144, 9.279668616466272e-144, 1.3088296259282024e-143, 1.8460087967663742e-143, 2.60366086634241e-143, 3.672273891000774e-143, 5.179474679231308e-143, 7.30527154266415e-143, 1.0303553085422633e-142, 1.4532410679618041e-142, 2.0496906107065864e-142, 2.890939220091708e-142, 4.0774590714368236e-142, 5.750958845380027e-142, 8.111308307896822e-142, 1.144040919691338e-141, 1.6135863368107732e-141, 2.2758459260748097e-141, 3.2099148096831646e-141, 4.5273508928582644e-141, 6.38549847031268e-141, 9.006280202112463e-141, 1.2702701826031608e-140, 1.791623512260027e-140, 2.526954386274647e-140, 3.5640849914152732e-140, 5.026882121429393e-140, 7.090050861192318e-140, 1e-139, 1.410427117629777e-139, 1.989304654145441e-139, 2.8057692294338553e-139, 3.957333007004455e-139, 5.5815297865704716e-139, 7.872340968837334e-139, 1.110336318167605e-138, 1.566048452832794e-138, 2.2087972053975298e-138, 3.115347475837545e-138, 4.39397056076075e-138, 6.19737523296388e-138, 8.740946086699414e-138, 1.2328467394420736e-137, 1.7388404731905525e-137, 2.4525077566201486e-137, 3.459083446134201e-137, 4.878785094571938e-137, 6.881170798472218e-137, 9.705389895207362e-137, 1.3688745095370484e-136, 1.930697728883214e-136, 2.7231084327631087e-136, 3.840745977815411e-136, 5.41709227903835e-136, 7.640413849058581e-136, 1.0776246882626325e-135, 1.5199110829529517e-135, 2.143723807782885e-135, 3.0235661912053467e-135, 4.2645197480246015e-135, 6.014794296281602e-135, 8.483428982440483e-135, 1.1965258287320444e-134, 1.6876124757881176e-134, 2.380254399901887e-134, 3.357175352479213e-134, 4.735051155774988e-134, 6.678444553469261e-134, 9.419459301799934e-134, 1.3285460832668673e-133, 1.873817422860295e-133, 2.642882906689303e-133, 3.727593720314801e-133, 5.257499266638462e-133, 7.415319536585553e-133, 1.0458767760290137e-132, 1.4751329666105256e-132, 2.080567538217146e-132, 2.9344888759616904e-132, 4.1388826870392916e-132, 5.837592378488615e-132, 8.233498592289252e-132, 1.1612749687531358e-131, 1.6378937069539874e-131, 2.3101297000830637e-131, 3.258269574239097e-131, 4.595551764054851e-131, 6.48169082849432e-131, 9.141952512600607e-131, 1.2894057731855572e-130, 1.8186128681292997e-130, 2.56502090568003e-130, 3.617775042658405e-130, 5.102608025649638e-130, 7.196856730011587e-130, 1.0150641893704706e-129, 1.4316740588229056e-129, 2.0192719161709145e-129, 2.8480358684357e-129, 4.0169470208239834e-129, 5.6656110082522915e-129, 7.990931403980814e-129, 1.1270626347293928e-128, 1.5896397032896e-128, 2.2420709447806045e-128, 3.1622776601683794e-128, 4.460162165376323e-128, 6.290733667073112e-128, 8.872621353826528e-128, 1.251418576189714e-127, 1.7650346953636183e-127, 2.48945279789826e-127, 3.511191734215027e-127, 4.952280037134398e-127, 6.984830058470956e-127, 9.851593726503017e-127, 1.3894954943731247e-126, 1.9597821250882484e-126, 2.7641298538705774e-126, 3.898603702549096e-126, 5.4986963829670984e-126, 7.755510490149565e-126, 1.0938582306368435e-125, 1.5428073113327313e-125, 2.1760172691811703e-125, 3.0691137648838165e-125, 4.3287612810829557e-125, 6.105402296585214e-125, 8.611224963142906e-125, 1.214550520402723e-124, 1.7130349897073586e-124, 2.4161110029319048e-124, 3.4077484777388362e-124, 4.806380863064448e-124, 6.77904990692291e-124, 9.561355820489062e-124, 1.3485595530525082e-123, 1.9020449633639495e-123, 2.6826957952796505e-123, 3.7837468980138005e-123, 5.3366992312062145e-123, 7.527025314327229e-123, 1.061632061841292e-122, 1.497354648966171e-122, 2.111909601610903e-122, 2.978694572094717e-122, 4.2012315996190137e-122, 5.925530975545396e-122, 8.357529574264455e-122, 1.1787686347935433e-121, 1.6625672479242446e-121, 2.3449299313554633e-121, 3.3073527641254774e-121, 4.664780026090373e-121, 6.579332246575602e-121, 9.279668616466273e-121, 1.3088296259282026e-120, 1.846008796766374e-120, 2.60366086634241e-120, 3.672273891000774e-120, 5.179474679230969e-120, 7.30527154266415e-120, 1.0303553085422633e-119, 1.453241067961804e-119, 2.0496906107065863e-119, 2.8909392200917083e-119, 4.0774590714368237e-119, 5.750958845380027e-119, 8.111308307896823e-119, 1.144040919691338e-118, 1.6135863368107732e-118, 2.2758459260748096e-118, 3.2099148096831645e-118, 4.527350892858264e-118, 6.38549847031268e-118, 9.006280202112463e-118, 1.2702701826031609e-117, 1.791623512260027e-117, 2.5269543862746474e-117, 3.564084991415273e-117, 5.026882121429393e-117, 7.090050861192318e-117, 1e-116, 1.4104271176297772e-116, 1.9893046541454412e-116, 2.8057692294338555e-116, 3.9573330070044545e-116, 5.581529786570471e-116, 7.872340968837335e-116, 1.110336318167605e-115, 1.5660484528327942e-115, 2.20879720539753e-115, 3.1153474758375446e-115, 4.39397056076075e-115, 6.19737523296388e-115, 8.740946086699415e-115, 1.2328467394420735e-114, 1.7388404731905524e-114, 2.4525077566199884e-114, 3.459083446134201e-114, 4.878785094571937e-114, 6.881170798472218e-114, 9.70538989520736e-114, 1.3688745095370485e-113, 1.930697728883214e-113, 2.7231084327631084e-113, 3.8407459778154113e-113, 5.41709227903835e-113, 7.64041384905858e-113, 1.0776246882626324e-112, 1.519911082952952e-112, 2.143723807782745e-112, 3.023566191205347e-112, 4.264519748024601e-112, 6.014794296281601e-112, 8.483428982440483e-112, 1.1965258287320443e-111, 1.6876124757881176e-111, 2.3802543999018867e-111, 3.357175352479213e-111, 4.7350511557749875e-111, 6.67844455346926e-111, 9.419459301799934e-111, 1.3285460832668673e-110, 1.8738174228602946e-110, 2.642882906689303e-110, 3.727593720314801e-110, 5.257499266638462e-110, 7.415319536585553e-110, 1.0458767760290137e-109, 1.4751329666105255e-109, 2.080567538217146e-109, 2.9344888759616903e-109, 4.1388826870392917e-109, 5.837592378488615e-109, 8.233498592289253e-109, 1.1612749687531356e-108, 1.6378937069539875e-108, 2.3101297000830635e-108, 3.258269574239097e-108, 4.59555176405485e-108, 6.48169082849432e-108, 9.141952512600606e-108, 1.2894057731855573e-107, 1.8186128681292996e-107, 2.56502090568003e-107, 3.6177750426584055e-107, 5.102608025649639e-107, 7.196856730011587e-107, 1.0150641893704706e-106, 1.4316740588229056e-106, 2.0192719161709146e-106, 2.8480358684357003e-106, 4.0169470208239837e-106, 5.665611008252292e-106, 7.990931403980815e-106, 1.127062634729393e-105, 1.5896397032896e-105, 2.2420709447806045e-105, 3.1622776601683793e-105, 4.460162165376323e-105, 6.2907336670731124e-105, 8.872621353826529e-105, 1.2514185761897143e-104, 1.7650346953636183e-104, 2.48945279789826e-104, 3.5111917342150266e-104, 4.952280037134399e-104, 6.984830058470956e-104, 9.851593726503017e-104, 1.3894954943731247e-103, 1.9597821250882484e-103, 2.7641298538705775e-103, 3.898603702549096e-103, 5.498696382967097e-103, 7.755510490149057e-103, 1.0938582306368437e-102, 1.5428073113327313e-102, 2.1760172691811705e-102, 3.069113764883817e-102, 4.328761281082956e-102, 6.105402296585214e-102, 8.611224963142905e-102, 1.2145505204027232e-101, 1.7130349897073587e-101, 2.416111002931905e-101, 3.407748477738837e-101, 4.806380863064448e-101, 6.779049906922467e-101, 9.561355820489064e-101, 1.3485595530525083e-100, 1.9020449633639495e-100, 2.6826957952796504e-100, 3.7837468980138e-100, 5.336699231206215e-100, 7.527025314327229e-100, 1.061632061841292e-99, 1.4973546489661708e-99, 2.111909601610903e-99, 2.978694572094717e-99, 4.201231599619014e-99, 5.925530975545396e-99, 8.357529574264454e-99, 1.1787686347935432e-98, 1.6625672479242445e-98, 2.3449299313554635e-98, 3.3073527641254776e-98, 4.664780026090373e-98, 6.579332246575601e-98, 9.279668616466272e-98, 1.3088296259282025e-97, 1.8460087967663742e-97, 2.6036608663424103e-97, 3.672273891000774e-97, 5.179474679230969e-97, 7.305271542664149e-97, 1.0303553085422632e-96, 1.453241067961804e-96, 2.0496906107065864e-96, 2.8909392200917082e-96, 4.077459071436824e-96, 5.750958845380027e-96, 8.111308307896823e-96, 1.144040919691338e-95, 1.613586336810773e-95, 2.2758459260748097e-95, 3.209914809682954e-95, 4.5273508928582646e-95, 6.385498470312679e-95, 9.006280202112464e-95, 1.270270182603161e-94, 1.791623512260027e-94, 2.5269543862746476e-94, 3.5640849914152733e-94, 5.026882121429393e-94, 7.090050861192318e-94, 1e-93, 1.4104271176297772e-93, 1.989304654145441e-93, 2.805769229433672e-93, 3.957333007004455e-93, 5.581529786570471e-93, 7.872340968837335e-93, 1.110336318167605e-92, 1.5660484528327942e-92, 2.2087972053975296e-92, 3.115347475837545e-92, 4.39397056076075e-92, 6.19737523296388e-92, 8.740946086699414e-92, 1.2328467394420736e-91, 1.7388404731905527e-91, 2.4525077566199882e-91, 3.459083446134201e-91, 4.8787850945719375e-91, 6.881170798472217e-91, 9.705389895207362e-91, 1.3688745095370484e-90, 1.9306977288832142e-90, 2.7231084327631085e-90, 3.840745977815411e-90, 5.41709227903835e-90, 7.64041384905858e-90, 1.0776246882626324e-89, 1.5199110829529517e-89, 2.1437238077827444e-89, 3.023566191205347e-89, 4.2645197480246015e-89, 6.014794296281601e-89, 8.483428982440482e-89, 1.1965258287320444e-88, 1.6876124757881178e-88, 2.3802543999018868e-88, 3.3571753524792135e-88, 4.735051155774988e-88, 6.678444553469261e-88, 9.419459301799933e-88, 1.3285460832668672e-87, 1.8738174228602948e-87, 2.642882906689303e-87, 3.727593720314801e-87, 5.257499266638462e-87, 7.415319536585553e-87, 1.0458767760290135e-86, 1.4751329666105256e-86, 2.080567538217146e-86, 2.9344888759616906e-86, 4.1388826870392914e-86, 5.837592378488615e-86, 8.233498592289252e-86, 1.1612749687531357e-85, 1.6378937069539874e-85, 2.3101297000830635e-85, 3.258269574239097e-85, 4.59555176405485e-85, 6.48169082849432e-85, 9.141952512600606e-85, 1.2894057731855573e-84, 1.8186128681292998e-84, 2.5650209056800303e-84, 3.6177750426584054e-84, 5.102608025649639e-84, 7.1968567300115875e-84, 1.0150641893704043e-83, 1.4316740588229055e-83, 2.0192719161709147e-83, 2.8480358684357e-83, 4.016947020823983e-83, 5.665611008252291e-83, 7.990931403980815e-83, 1.1270626347293928e-82, 1.5896397032896e-82, 2.2420709447806046e-82, 3.1622776601683793e-82, 4.460162165376323e-82, 6.290733667073113e-82, 8.872621353825948e-82, 1.2514185761897143e-81, 1.7650346953636183e-81, 2.48945279789826e-81, 3.511191734215027e-81, 4.952280037134399e-81, 6.984830058470956e-81, 9.851593726503017e-81, 1.3894954943731246e-80, 1.9597821250882482e-80, 2.7641298538705777e-80, 3.8986037025490955e-80, 5.498696382967098e-80, 7.755510490149058e-80, 1.0938582306368435e-79, 1.5428073113327312e-79, 2.1760172691811702e-79, 3.069113764883817e-79, 4.3287612810829554e-79, 6.105402296585214e-79, 8.611224963142906e-79, 1.214550520402723e-78, 1.7130349897073588e-78, 2.4161110029319046e-78, 3.407748477738836e-78, 4.806380863064448e-78, 6.779049906922467e-78, 9.561355820489063e-78, 1.3485595530525081e-77, 1.9020449633639497e-77, 2.6826957952796503e-77, 3.7837468980138e-77, 5.336699231206215e-77, 7.527025314327229e-77, 1.0616320618412921e-76, 1.497354648966171e-76, 2.111909601610903e-76, 2.978694572094717e-76, 4.201231599618739e-76, 5.925530975545396e-76, 8.357529574264455e-76, 1.1787686347935432e-75, 1.6625672479242445e-75, 2.3449299313554635e-75, 3.3073527641254773e-75, 4.664780026090373e-75, 6.579332246575602e-75, 9.27966861646627e-75, 1.3088296259282026e-74, 1.846008796766374e-74, 2.60366086634241e-74, 3.672273891000533e-74, 5.179474679230968e-74, 7.30527154266415e-74, 1.0303553085422633e-73, 1.453241067961804e-73, 2.0496906107065866e-73, 2.890939220091708e-73, 4.077459071436824e-73, 5.750958845380027e-73, 8.111308307896823e-73, 1.144040919691338e-72, 1.6135863368107732e-72, 2.27584592607481e-72, 3.209914809682955e-72, 4.5273508928582644e-72, 6.385498470312679e-72, 9.006280202112464e-72, 1.2702701826031608e-71, 1.7916235122600268e-71, 2.5269543862746474e-71, 3.5640849914152734e-71, 5.026882121429393e-71, 7.090050861192318e-71, 9.999999999999998e-71, 1.4104271176297771e-70, 1.989304654145441e-70, 2.8057692294336715e-70, 3.957333007004455e-70, 5.581529786570471e-70, 7.872340968837335e-70, 1.110336318167605e-69, 1.566048452832794e-69, 2.2087972053975299e-69, 3.115347475837545e-69, 4.39397056076075e-69, 6.197375232963881e-69, 8.740946086699414e-69, 1.2328467394420734e-68, 1.7388404731905525e-68, 2.452507756619988e-68, 3.459083446134201e-68, 4.878785094571937e-68, 6.881170798472218e-68, 9.705389895207362e-68, 1.3688745095370484e-67, 1.930697728883214e-67, 2.7231084327631085e-67, 3.840745977815411e-67, 5.41709227903835e-67, 7.64041384905858e-67, 1.0776246882626325e-66, 1.5199110829529518e-66, 2.1437238077827447e-66, 3.0235661912053467e-66, 4.264519748024601e-66, 6.014794296281601e-66, 8.483428982440482e-66, 1.1965258287320442e-65, 1.6876124757881177e-65, 2.380254399901887e-65, 3.357175352479213e-65, 4.735051155774988e-65, 6.678444553469261e-65, 9.419459301799933e-65, 1.3285460832667804e-64, 1.8738174228602948e-64, 2.642882906689303e-64, 3.7275937203148006e-64, 5.257499266638462e-64, 7.415319536585554e-64, 1.0458767760290138e-63, 1.4751329666105257e-63, 2.0805675382171462e-63, 2.9344888759616904e-63, 4.1388826870392916e-63, 5.837592378488615e-63, 8.233498592289252e-63, 1.1612749687530598e-62, 1.6378937069539876e-62, 2.3101297000830636e-62, 3.258269574239097e-62, 4.59555176405485e-62, 6.4816908284943205e-62, 9.141952512600606e-62, 1.2894057731855572e-61, 1.8186128681292995e-61, 2.56502090568003e-61, 3.617775042658405e-61, 5.102608025649638e-61, 7.196856730011587e-61, 1.0150641893704042e-60, 1.4316740588229055e-60, 2.0192719161709144e-60, 2.8480358684357003e-60, 4.0169470208239836e-60, 5.665611008252292e-60, 7.990931403980815e-60, 1.127062634729393e-59, 1.5896397032895999e-59, 2.2420709447806045e-59, 3.1622776601683796e-59, 4.460162165376323e-59, 6.290733667073112e-59, 8.872621353825948e-59, 1.2514185761897143e-58, 1.7650346953636183e-58, 2.48945279789826e-58, 3.511191734215027e-58, 4.9522800371343984e-58, 6.984830058470956e-58, 9.851593726503018e-58, 1.3894954943731247e-57, 1.9597821250882483e-57, 2.7641298538705774e-57, 3.8986037025490957e-57, 5.498696382966738e-57, 7.755510490149058e-57, 1.0938582306368436e-56, 1.5428073113327313e-56, 2.1760172691811704e-56, 3.0691137648838168e-56, 4.328761281082955e-56, 6.105402296585215e-56, 8.611224963142905e-56, 1.2145505204027231e-55, 1.713034989707359e-55, 2.416111002931905e-55, 3.4077484777388365e-55, 4.8063808630641334e-55, 6.779049906922466e-55, 9.561355820489062e-55, 1.3485595530525082e-54, 1.9020449633639498e-54, 2.682695795279651e-54, 3.7837468980138e-54, 5.336699231206215e-54, 7.527025314327229e-54, 1.061632061841292e-53, 1.497354648966171e-53, 2.111909601610903e-53, 2.978694572094717e-53, 4.201231599618739e-53, 5.925530975545397e-53, 8.357529574264453e-53, 1.1787686347935432e-52, 1.6625672479242446e-52, 2.3449299313554632e-52, 3.3073527641254774e-52, 4.6647800260903735e-52, 6.5793322465756015e-52, 9.279668616466271e-52, 1.3088296259282026e-51, 1.846008796766374e-51, 2.6036608663424102e-51, 3.6722738910005335e-51, 5.179474679230969e-51, 7.30527154266415e-51, 1.0303553085422633e-50, 1.453241067961804e-50, 2.0496906107065863e-50, 2.890939220091708e-50, 4.077459071436824e-50, 5.750958845380026e-50, 8.111308307896822e-50, 1.144040919691338e-49, 1.6135863368107732e-49, 2.2758459260748097e-49, 3.2099148096829547e-49, 4.527350892858264e-49, 6.385498470312679e-49, 9.006280202112464e-49, 1.2702701826031608e-48, 1.791623512260027e-48, 2.5269543862746474e-48, 3.5640849914152735e-48, 5.026882121429393e-48, 7.090050861192317e-48, 1e-47, 1.410427117629777e-47, 1.989304654145441e-47, 2.8057692294336716e-47, 3.957333007004454e-47, 5.581529786570472e-47, 7.872340968837334e-47, 1.110336318167605e-46, 1.5660484528327942e-46, 2.20879720539753e-46, 3.115347475837545e-46, 4.3939705607607494e-46, 6.1973752329638806e-46, 8.740946086699414e-46, 1.2328467394420735e-45, 1.7388404731904388e-45, 2.4525077566199885e-45, 3.459083446134201e-45, 4.8787850945719374e-45, 6.881170798472218e-45, 9.705389895207361e-45, 1.3688745095370485e-44, 1.9306977288832142e-44, 2.7231084327631084e-44, 3.840745977815411e-44, 5.41709227903835e-44, 7.64041384905858e-44, 1.0776246882626325e-43, 1.5199110829529517e-43, 2.143723807782885e-43, 3.023566191205545e-43, 4.26451974802488e-43, 6.014794296281995e-43, 8.483428982441038e-43, 1.196525828731966e-42, 1.687612475788007e-42, 2.380254399901731e-42, 3.357175352478993e-42, 4.735051155774678e-42, 6.678444553468824e-42, 9.419459301799317e-42, 1.3285460832667804e-41, 1.873817422860295e-41, 2.642882906689303e-41, 3.727593720314801e-41, 5.257499266638462e-41, 7.415319536585554e-41, 1.0458767760290136e-40, 1.4751329666105256e-40, 2.080567538217146e-40, 2.9344888759616904e-40, 4.1388826870392915e-40, 5.8375923784886146e-40, 8.233498592289252e-40, 1.1612749687531358e-39, 1.6378937069540947e-39, 2.310129700083215e-39, 3.25826957423931e-39, 4.595551764055151e-39, 6.481690828494744e-39, 9.141952512600009e-39, 1.2894057731854728e-38, 1.8186128681291806e-38, 2.5650209056798624e-38, 3.6177750426581685e-38, 5.102608025649304e-38, 7.196856730011117e-38, 1.0150641893704042e-37, 1.4316740588229054e-37, 2.0192719161709145e-37, 2.8480358684357e-37, 4.016947020823984e-37, 5.6656110082522914e-37, 7.990931403980815e-37, 1.1270626347293928e-36, 1.5896397032896e-36, 2.242070944780605e-36, 3.1622776601683796e-36, 4.460162165376323e-36, 6.290733667073113e-36, 8.872621353826528e-36, 1.2514185761897963e-35, 1.7650346953637338e-35, 2.489452797898423e-35, 3.5111917342152564e-35, 4.952280037134723e-35, 6.984830058470499e-35, 9.851593726502372e-35, 1.3894954943730338e-34, 1.95978212508812e-34, 2.7641298538703964e-34, 3.898603702548841e-34, 5.498696382966739e-34, 7.755510490149059e-34, 1.0938582306368435e-33, 1.5428073113327314e-33, 2.1760172691811703e-33, 3.0691137648838168e-33, 4.328761281082955e-33, 6.105402296585214e-33, 8.611224963142905e-33, 1.2145505204027232e-32, 1.7130349897073587e-32, 2.4161110029319048e-32, 3.4077484777388366e-32, 4.806380863064448e-32, 6.77904990692291e-32, 9.561355820489688e-32, 1.3485595530525964e-31, 1.9020449633640742e-31, 2.682695795279826e-31, 3.7837468980135524e-31, 5.336699231205865e-31, 7.527025314326736e-31, 1.0616320618412225e-30, 1.4973546489660729e-30, 2.1119096016107648e-30, 2.978694572094522e-30, 4.201231599618739e-30, 5.925530975545396e-30, 8.357529574264453e-30, 1.1787686347935432e-29, 1.6625672479242445e-29, 2.3449299313554634e-29, 3.3073527641254774e-29, 4.6647800260903734e-29, 6.579332246575602e-29, 9.279668616466272e-29, 1.3088296259282026e-28, 1.846008796766374e-28, 2.60366086634241e-28, 3.672273891000774e-28, 5.1794746792313075e-28, 7.305271542664628e-28, 1.0303553085423307e-27, 1.453241067961899e-27, 2.0496906107067206e-27, 2.890939220091519e-27, 4.077459071436557e-27, 5.7509588453796504e-27, 8.111308307896291e-27, 1.1440409196912631e-26, 1.6135863368106677e-26, 2.275845926074661e-26, 3.2099148096829544e-26, 4.527350892858264e-26, 6.38549847031268e-26, 9.006280202112464e-26, 1.2702701826031608e-25, 1.7916235122600269e-25, 2.5269543862746472e-25, 3.5640849914152734e-25, 5.026882121429393e-25, 7.090050861192318e-25, 1e-24, 1.410427117629777e-24, 1.9893046541454412e-24, 2.805769229433855e-24, 3.957333007004713e-24, 5.5815297865708365e-24, 7.87234096883785e-24, 1.1103363181676776e-23, 1.5660484528328966e-23, 2.2087972053973852e-23, 3.115347475837341e-23, 4.3939705607604624e-23, 6.197375232963475e-23, 8.740946086698842e-23, 1.2328467394419928e-22, 1.7388404731904387e-22, 2.4525077566199885e-22, 3.4590834461342013e-22, 4.878785094571937e-22, 6.881170798472218e-22, 9.705389895207363e-22, 1.3688745095370484e-21, 1.930697728883214e-21, 2.7231084327631085e-21, 3.840745977815411e-21, 5.41709227903835e-21, 7.64041384905858e-21, 1.0776246882626325e-20, 1.5199110829529518e-20, 2.143723807782885e-20, 3.0235661912055445e-20, 4.26451974802488e-20, 6.014794296281995e-20, 8.483428982441038e-20, 1.196525828731966e-19, 1.6876124757880072e-19, 2.380254399901731e-19, 3.3571753524789934e-19, 4.735051155774678e-19, 6.678444553468823e-19, 9.419459301799316e-19, 1.3285460832667803e-18, 1.873817422860295e-18, 2.642882906689303e-18, 3.727593720314801e-18, 5.257499266638462e-18, 7.415319536585554e-18, 1.0458767760290136e-17, 1.4751329666105257e-17, 2.080567538217146e-17, 2.9344888759616905e-17, 4.138882687039292e-17, 5.837592378488615e-17, 8.233498592289253e-17, 1.1612749687531358e-16, 1.637893706954095e-16, 2.310129700083215e-16, 3.25826957423931e-16, 4.595551764055151e-16, 6.481690828494745e-16, 9.141952512600008e-16, 1.289405773185473e-15, 1.8186128681291805e-15, 2.5650209056798623e-15, 3.617775042658168e-15, 5.102608025649305e-15, 7.196856730011116e-15, 1.0150641893704042e-14, 1.4316740588229055e-14, 2.0192719161709146e-14, 2.8480358684357e-14, 4.016947020823983e-14, 5.665611008252291e-14, 7.990931403980815e-14, 1.1270626347293928e-13, 1.5896397032895999e-13, 2.2420709447806045e-13, 3.162277660168379e-13, 4.4601621653763234e-13, 6.290733667073113e-13, 8.872621353826528e-13, 1.2514185761897962e-12, 1.7650346953637337e-12, 2.489452797898423e-12, 3.511191734215257e-12, 4.952280037134074e-12, 6.9848300584704986e-12, 9.851593726502372e-12, 1.3894954943730337e-11, 1.9597821250881202e-11, 2.7641298538703966e-11, 3.89860370254884e-11, 5.498696382966738e-11, 7.755510490149057e-11, 1.0938582306368436e-10, 1.5428073113327312e-10, 2.1760172691811703e-10, 3.069113764883817e-10, 4.328761281082955e-10, 6.105402296585215e-10, 8.611224963142905e-10, 1.2145505204027232e-09, 1.7130349897073587e-09, 2.416111002931905e-09, 3.4077484777388367e-09, 4.8063808630644475e-09, 6.7790499069229095e-09, 9.561355820489689e-09, 1.3485595530525965e-08, 1.9020449633640743e-08, 2.682695795279826e-08, 3.7837468980135526e-08, 5.336699231205865e-08, 7.527025314326735e-08, 1.0616320618412225e-07, 1.4973546489660727e-07, 2.1119096016107649e-07, 2.978694572094522e-07, 4.201231599618739e-07, 5.925530975545396e-07, 8.357529574264454e-07, 1.1787686347935432e-06, 1.6625672479242445e-06, 2.3449299313554633e-06, 3.3073527641254774e-06, 4.664780026090373e-06, 6.579332246575601e-06, 9.279668616466272e-06, 1.3088296259282025e-05, 1.846008796766374e-05, 2.60366086634241e-05, 3.672273891000774e-05, 5.1794746792313074e-05, 7.305271542664627e-05, 0.00010303553085423307, 0.0001453241067961899, 0.00020496906107064523, 0.0002890939220091519, 0.0004077459071436557, 0.0005750958845379651, 0.0008111308307896291, 0.001144040919691263, 0.0016135863368106677, 0.002275845926074661, 0.0032099148096829547, 0.004527350892858264, 0.006385498470312679, 0.009006280202112464, 0.012702701826031608, 0.01791623512260027, 0.025269543862746473, 0.035640849914152735, 0.05026882121429393, 0.07090050861192318, 0.1], "x": [-300.0, -299.85064935064935, -299.7012987012987, -299.55194805194805, -299.4025974025974, -299.25324675324674, -299.1038961038961, -298.95454545454544, -298.8051948051948, -298.65584415584414, -298.5064935064935, -298.35714285714283, -298.2077922077922, -298.0584415584416, -297.90909090909093, -297.7597402597403, -297.61038961038963, -297.461038961039, -297.31168831168833, -297.1623376623377, -297.012987012987, -296.8636363636364, -296.7142857142857, -296.56493506493507, -296.4155844155844, -296.26623376623377, -296.1168831168831, -295.96753246753246, -295.8181818181818, -295.66883116883116, -295.5194805194805, -295.37012987012986, -295.2207792207792, -295.07142857142856, -294.9220779220779, -294.77272727272725, -294.6233766233766, -294.47402597402595, -294.3246753246753, -294.1753246753247, -294.02597402597405, -293.8766233766234, -293.72727272727275, -293.5779220779221, -293.42857142857144, -293.2792207792208, -293.12987012987014, -292.9805194805195, -292.83116883116884, -292.6818181818182, -292.53246753246754, -292.3831168831169, -292.23376623376623, -292.0844155844156, -291.93506493506493, -291.7857142857143, -291.6363636363636, -291.487012987013, -291.3376623376623, -291.18831168831167, -291.038961038961, -290.88961038961037, -290.7402597402597, -290.59090909090907, -290.4415584415584, -290.2922077922078, -290.14285714285717, -289.9935064935065, -289.84415584415586, -289.6948051948052, -289.54545454545456, -289.3961038961039, -289.24675324675326, -289.0974025974026, -288.94805194805195, -288.7987012987013, -288.64935064935065, -288.5, -288.35064935064935, -288.2012987012987, -288.05194805194805, -287.9025974025974, -287.75324675324674, -287.6038961038961, -287.45454545454544, -287.3051948051948, -287.15584415584414, -287.0064935064935, -286.85714285714283, -286.7077922077922, -286.5584415584416, -286.40909090909093, -286.2597402597403, -286.11038961038963, -285.961038961039, -285.81168831168833, -285.6623376623377, -285.512987012987, -285.3636363636364, -285.2142857142857, -285.06493506493507, -284.9155844155844, -284.76623376623377, -284.6168831168831, -284.46753246753246, -284.3181818181818, -284.16883116883116, -284.0194805194805, -283.87012987012986, -283.7207792207792, -283.57142857142856, -283.4220779220779, -283.27272727272725, -283.1233766233766, -282.97402597402595, -282.82467532467535, -282.67532467532465, -282.52597402597405, -282.3766233766234, -282.22727272727275, -282.0779220779221, -281.92857142857144, -281.7792207792208, -281.62987012987014, -281.4805194805195, -281.33116883116884, -281.1818181818182, -281.03246753246754, -280.8831168831169, -280.73376623376623, -280.5844155844156, -280.43506493506493, -280.2857142857143, -280.1363636363636, -279.987012987013, -279.8376623376623, -279.68831168831167, -279.538961038961, -279.38961038961037, -279.2402597402597, -279.0909090909091, -278.9415584415584, -278.7922077922078, -278.64285714285717, -278.4935064935065, -278.34415584415586, -278.1948051948052, -278.04545454545456, -277.8961038961039, -277.74675324675326, -277.5974025974026, -277.44805194805195, -277.2987012987013, -277.14935064935065, -277.0, -276.85064935064935, -276.7012987012987, -276.55194805194805, -276.4025974025974, -276.25324675324674, -276.1038961038961, -275.95454545454544, -275.8051948051948, -275.65584415584414, -275.5064935064935, -275.35714285714283, -275.2077922077922, -275.0584415584416, -274.90909090909093, -274.7597402597403, -274.61038961038963, -274.461038961039, -274.31168831168833, -274.1623376623377, -274.012987012987, -273.8636363636364, -273.7142857142857, -273.56493506493507, -273.4155844155844, -273.26623376623377, -273.1168831168831, -272.96753246753246, -272.8181818181818, -272.66883116883116, -272.5194805194805, -272.37012987012986, -272.2207792207792, -272.07142857142856, -271.9220779220779, -271.77272727272725, -271.6233766233766, -271.47402597402595, -271.32467532467535, -271.1753246753247, -271.02597402597405, -270.8766233766234, -270.72727272727275, -270.5779220779221, -270.42857142857144, -270.2792207792208, -270.12987012987014, -269.9805194805195, -269.83116883116884, -269.6818181818182, -269.53246753246754, -269.3831168831169, -269.23376623376623, -269.0844155844156, -268.93506493506493, -268.7857142857143, -268.6363636363636, -268.487012987013, -268.3376623376623, -268.18831168831167, -268.038961038961, -267.88961038961037, -267.7402597402597, -267.5909090909091, -267.4415584415584, -267.2922077922078, -267.14285714285717, -266.9935064935065, -266.84415584415586, -266.6948051948052, -266.54545454545456, -266.3961038961039, -266.24675324675326, -266.0974025974026, -265.94805194805195, -265.7987012987013, -265.64935064935065, -265.5, -265.35064935064935, -265.2012987012987, -265.05194805194805, -264.9025974025974, -264.75324675324674, -264.6038961038961, -264.45454545454544, -264.3051948051948, -264.15584415584414, -264.0064935064935, -263.8571428571429, -263.7077922077922, -263.5584415584416, -263.40909090909093, -263.2597402597403, -263.11038961038963, -262.961038961039, -262.81168831168833, -262.6623376623377, -262.512987012987, -262.3636363636364, -262.2142857142857, -262.06493506493507, -261.9155844155844, -261.76623376623377, -261.6168831168831, -261.46753246753246, -261.3181818181818, -261.16883116883116, -261.0194805194805, -260.87012987012986, -260.7207792207792, -260.57142857142856, -260.4220779220779, -260.27272727272725, -260.1233766233766, -259.97402597402595, -259.82467532467535, -259.67532467532465, -259.52597402597405, -259.3766233766234, -259.22727272727275, -259.0779220779221, -258.92857142857144, -258.7792207792208, -258.62987012987014, -258.4805194805195, -258.33116883116884, -258.1818181818182, -258.03246753246754, -257.8831168831169, -257.73376623376623, -257.5844155844156, -257.43506493506493, -257.2857142857143, -257.1363636363636, -256.987012987013, -256.8376623376623, -256.68831168831167, -256.538961038961, -256.38961038961037, -256.2402597402597, -256.0909090909091, -255.94155844155844, -255.7922077922078, -255.64285714285714, -255.4935064935065, -255.34415584415584, -255.1948051948052, -255.04545454545456, -254.8961038961039, -254.74675324675326, -254.5974025974026, -254.44805194805195, -254.2987012987013, -254.14935064935065, -254.0, -253.85064935064935, -253.7012987012987, -253.55194805194805, -253.4025974025974, -253.25324675324674, -253.1038961038961, -252.95454545454544, -252.80519480519482, -252.65584415584416, -252.5064935064935, -252.35714285714286, -252.2077922077922, -252.05844155844156, -251.9090909090909, -251.75974025974025, -251.6103896103896, -251.46103896103898, -251.31168831168833, -251.16233766233768, -251.01298701298703, -250.86363636363637, -250.71428571428572, -250.56493506493507, -250.41558441558442, -250.26623376623377, -250.11688311688312, -249.96753246753246, -249.8181818181818, -249.66883116883116, -249.5194805194805, -249.37012987012986, -249.2207792207792, -249.07142857142858, -248.92207792207793, -248.77272727272728, -248.62337662337663, -248.47402597402598, -248.32467532467533, -248.17532467532467, -248.02597402597402, -247.87662337662337, -247.72727272727272, -247.5779220779221, -247.42857142857144, -247.2792207792208, -247.12987012987014, -246.9805194805195, -246.83116883116884, -246.6818181818182, -246.53246753246754, -246.38311688311688, -246.23376623376623, -246.08441558441558, -245.93506493506493, -245.78571428571428, -245.63636363636363, -245.48701298701297, -245.33766233766232, -245.1883116883117, -245.03896103896105, -244.8896103896104, -244.74025974025975, -244.5909090909091, -244.44155844155844, -244.2922077922078, -244.14285714285714, -243.9935064935065, -243.84415584415586, -243.6948051948052, -243.54545454545456, -243.3961038961039, -243.24675324675326, -243.0974025974026, -242.94805194805195, -242.7987012987013, -242.64935064935065, -242.5, -242.35064935064935, -242.2012987012987, -242.05194805194805, -241.9025974025974, -241.75324675324674, -241.6038961038961, -241.45454545454544, -241.30519480519482, -241.15584415584416, -241.0064935064935, -240.85714285714286, -240.7077922077922, -240.55844155844156, -240.4090909090909, -240.25974025974025, -240.1103896103896, -239.96103896103898, -239.81168831168833, -239.66233766233768, -239.51298701298703, -239.36363636363637, -239.21428571428572, -239.06493506493507, -238.91558441558442, -238.76623376623377, -238.61688311688312, -238.46753246753246, -238.3181818181818, -238.16883116883116, -238.0194805194805, -237.87012987012986, -237.7207792207792, -237.57142857142858, -237.42207792207793, -237.27272727272728, -237.12337662337663, -236.97402597402598, -236.82467532467533, -236.67532467532467, -236.52597402597402, -236.37662337662337, -236.22727272727272, -236.0779220779221, -235.92857142857144, -235.7792207792208, -235.62987012987014, -235.4805194805195, -235.33116883116884, -235.1818181818182, -235.03246753246754, -234.88311688311688, -234.73376623376623, -234.58441558441558, -234.43506493506493, -234.28571428571428, -234.13636363636363, -233.98701298701297, -233.83766233766232, -233.68831168831167, -233.53896103896105, -233.3896103896104, -233.24025974025975, -233.0909090909091, -232.94155844155844, -232.7922077922078, -232.64285714285714, -232.49350649350652, -232.34415584415586, -232.1948051948052, -232.04545454545456, -231.8961038961039, -231.74675324675326, -231.5974025974026, -231.44805194805195, -231.2987012987013, -231.14935064935065, -231.0, -230.85064935064935, -230.7012987012987, -230.55194805194805, -230.4025974025974, -230.25324675324674, -230.1038961038961, -229.95454545454544, -229.8051948051948, -229.65584415584416, -229.5064935064935, -229.35714285714286, -229.2077922077922, -229.05844155844156, -228.9090909090909, -228.75974025974028, -228.61038961038963, -228.46103896103898, -228.31168831168833, -228.16233766233768, -228.01298701298703, -227.86363636363637, -227.71428571428572, -227.56493506493507, -227.41558441558442, -227.26623376623377, -227.11688311688312, -226.96753246753246, -226.8181818181818, -226.66883116883116, -226.5194805194805, -226.37012987012986, -226.2207792207792, -226.07142857142856, -225.92207792207793, -225.77272727272728, -225.62337662337663, -225.47402597402598, -225.32467532467533, -225.17532467532467, -225.02597402597402, -224.8766233766234, -224.72727272727275, -224.5779220779221, -224.42857142857144, -224.2792207792208, -224.12987012987014, -223.9805194805195, -223.83116883116884, -223.6818181818182, -223.53246753246754, -223.38311688311688, -223.23376623376623, -223.08441558441558, -222.93506493506493, -222.78571428571428, -222.63636363636363, -222.48701298701297, -222.33766233766232, -222.18831168831167, -222.03896103896105, -221.8896103896104, -221.74025974025975, -221.5909090909091, -221.44155844155844, -221.2922077922078, -221.14285714285714, -220.99350649350652, -220.84415584415586, -220.6948051948052, -220.54545454545456, -220.3961038961039, -220.24675324675326, -220.0974025974026, -219.94805194805195, -219.7987012987013, -219.64935064935065, -219.5, -219.35064935064935, -219.2012987012987, -219.05194805194805, -218.9025974025974, -218.75324675324674, -218.6038961038961, -218.45454545454544, -218.3051948051948, -218.15584415584416, -218.0064935064935, -217.85714285714286, -217.7077922077922, -217.55844155844156, -217.4090909090909, -217.25974025974028, -217.11038961038963, -216.96103896103898, -216.81168831168833, -216.66233766233768, -216.51298701298703, -216.36363636363637, -216.21428571428572, -216.06493506493507, -215.91558441558442, -215.76623376623377, -215.61688311688312, -215.46753246753246, -215.3181818181818, -215.16883116883116, -215.0194805194805, -214.87012987012986, -214.7207792207792, -214.57142857142856, -214.42207792207793, -214.27272727272728, -214.12337662337663, -213.97402597402598, -213.82467532467533, -213.67532467532467, -213.52597402597402, -213.3766233766234, -213.22727272727275, -213.0779220779221, -212.92857142857144, -212.7792207792208, -212.62987012987014, -212.4805194805195, -212.33116883116884, -212.1818181818182, -212.03246753246754, -211.88311688311688, -211.73376623376623, -211.58441558441558, -211.43506493506493, -211.28571428571428, -211.13636363636363, -210.98701298701297, -210.83766233766232, -210.68831168831167, -210.53896103896105, -210.3896103896104, -210.24025974025975, -210.0909090909091, -209.94155844155844, -209.7922077922078, -209.64285714285717, -209.49350649350652, -209.34415584415586, -209.1948051948052, -209.04545454545456, -208.8961038961039, -208.74675324675326, -208.5974025974026, -208.44805194805195, -208.2987012987013, -208.14935064935065, -208.0, -207.85064935064935, -207.7012987012987, -207.55194805194805, -207.4025974025974, -207.25324675324674, -207.1038961038961, -206.95454545454544, -206.80519480519482, -206.65584415584416, -206.5064935064935, -206.35714285714286, -206.2077922077922, -206.05844155844156, -205.9090909090909, -205.75974025974028, -205.61038961038963, -205.46103896103898, -205.31168831168833, -205.16233766233768, -205.01298701298703, -204.86363636363637, -204.71428571428572, -204.56493506493507, -204.41558441558442, -204.26623376623377, -204.11688311688312, -203.96753246753246, -203.8181818181818, -203.66883116883116, -203.5194805194805, -203.37012987012986, -203.2207792207792, -203.07142857142856, -202.92207792207793, -202.77272727272728, -202.62337662337663, -202.47402597402598, -202.32467532467533, -202.17532467532467, -202.02597402597402, -201.8766233766234, -201.72727272727275, -201.5779220779221, -201.42857142857144, -201.2792207792208, -201.12987012987014, -200.9805194805195, -200.83116883116884, -200.6818181818182, -200.53246753246754, -200.38311688311688, -200.23376623376623, -200.08441558441558, -199.93506493506493, -199.78571428571428, -199.63636363636363, -199.48701298701297, -199.33766233766232, -199.18831168831167, -199.03896103896105, -198.8896103896104, -198.74025974025975, -198.5909090909091, -198.44155844155844, -198.2922077922078, -198.14285714285717, -197.99350649350652, -197.84415584415586, -197.6948051948052, -197.54545454545456, -197.3961038961039, -197.24675324675326, -197.0974025974026, -196.94805194805195, -196.7987012987013, -196.64935064935065, -196.5, -196.35064935064935, -196.2012987012987, -196.05194805194805, -195.9025974025974, -195.75324675324674, -195.6038961038961, -195.45454545454544, -195.30519480519482, -195.15584415584416, -195.0064935064935, -194.85714285714286, -194.7077922077922, -194.55844155844156, -194.4090909090909, -194.25974025974028, -194.11038961038963, -193.96103896103898, -193.81168831168833, -193.66233766233768, -193.51298701298703, -193.36363636363637, -193.21428571428572, -193.06493506493507, -192.91558441558442, -192.76623376623377, -192.61688311688312, -192.46753246753246, -192.3181818181818, -192.16883116883116, -192.0194805194805, -191.87012987012986, -191.7207792207792, -191.57142857142856, -191.42207792207793, -191.27272727272728, -191.12337662337663, -190.97402597402598, -190.82467532467533, -190.67532467532467, -190.52597402597405, -190.3766233766234, -190.22727272727275, -190.0779220779221, -189.92857142857144, -189.7792207792208, -189.62987012987014, -189.4805194805195, -189.33116883116884, -189.1818181818182, -189.03246753246754, -188.88311688311688, -188.73376623376623, -188.58441558441558, -188.43506493506493, -188.28571428571428, -188.13636363636363, -187.98701298701297, -187.83766233766232, -187.6883116883117, -187.53896103896105, -187.3896103896104, -187.24025974025975, -187.0909090909091, -186.94155844155844, -186.7922077922078, -186.64285714285717, -186.49350649350652, -186.34415584415586, -186.1948051948052, -186.04545454545456, -185.8961038961039, -185.74675324675326, -185.5974025974026, -185.44805194805195, -185.2987012987013, -185.14935064935065, -185.0, -184.85064935064935, -184.7012987012987, -184.55194805194805, -184.4025974025974, -184.25324675324674, -184.1038961038961, -183.95454545454544, -183.80519480519482, -183.65584415584416, -183.5064935064935, -183.35714285714286, -183.2077922077922, -183.05844155844156, -182.9090909090909, -182.75974025974028, -182.61038961038963, -182.46103896103898, -182.31168831168833, -182.16233766233768, -182.01298701298703, -181.86363636363637, -181.71428571428572, -181.56493506493507, -181.41558441558442, -181.26623376623377, -181.11688311688312, -180.96753246753246, -180.8181818181818, -180.66883116883116, -180.5194805194805, -180.37012987012986, -180.2207792207792, -180.07142857142856, -179.92207792207793, -179.77272727272728, -179.62337662337663, -179.47402597402598, -179.32467532467533, -179.17532467532467, -179.02597402597405, -178.8766233766234, -178.72727272727275, -178.5779220779221, -178.42857142857144, -178.2792207792208, -178.12987012987014, -177.9805194805195, -177.83116883116884, -177.6818181818182, -177.53246753246754, -177.38311688311688, -177.23376623376623, -177.08441558441558, -176.93506493506493, -176.78571428571428, -176.63636363636363, -176.48701298701297, -176.33766233766232, -176.1883116883117, -176.03896103896105, -175.8896103896104, -175.74025974025975, -175.5909090909091, -175.44155844155844, -175.2922077922078, -175.14285714285717, -174.99350649350652, -174.84415584415586, -174.6948051948052, -174.54545454545456, -174.3961038961039, -174.24675324675326, -174.0974025974026, -173.94805194805195, -173.7987012987013, -173.64935064935065, -173.5, -173.35064935064935, -173.2012987012987, -173.05194805194805, -172.9025974025974, -172.75324675324674, -172.6038961038961, -172.45454545454544, -172.30519480519482, -172.15584415584416, -172.0064935064935, -171.85714285714286, -171.7077922077922, -171.55844155844156, -171.4090909090909, -171.25974025974025, -171.1103896103896, -170.96103896103898, -170.81168831168833, -170.66233766233768, -170.51298701298703, -170.36363636363637, -170.21428571428572, -170.06493506493507, -169.91558441558442, -169.76623376623377, -169.61688311688312, -169.46753246753246, -169.3181818181818, -169.16883116883116, -169.01948051948054, -168.8701298701299, -168.72077922077924, -168.57142857142858, -168.42207792207793, -168.27272727272728, -168.12337662337663, -167.97402597402598, -167.82467532467533, -167.67532467532467, -167.52597402597402, -167.37662337662337, -167.22727272727272, -167.0779220779221, -166.92857142857144, -166.7792207792208, -166.62987012987014, -166.4805194805195, -166.33116883116884, -166.1818181818182, -166.03246753246754, -165.88311688311688, -165.73376623376623, -165.58441558441558, -165.43506493506493, -165.28571428571428, -165.13636363636365, -164.987012987013, -164.83766233766235, -164.6883116883117, -164.53896103896105, -164.3896103896104, -164.24025974025975, -164.0909090909091, -163.94155844155844, -163.7922077922078, -163.64285714285714, -163.4935064935065, -163.34415584415584, -163.1948051948052, -163.04545454545456, -162.8961038961039, -162.74675324675326, -162.5974025974026, -162.44805194805195, -162.2987012987013, -162.14935064935065, -162.0, -161.85064935064935, -161.7012987012987, -161.55194805194805, -161.4025974025974, -161.25324675324677, -161.10389610389612, -160.95454545454547, -160.80519480519482, -160.65584415584416, -160.5064935064935, -160.35714285714286, -160.2077922077922, -160.05844155844156, -159.9090909090909, -159.75974025974025, -159.6103896103896, -159.46103896103898, -159.31168831168833, -159.16233766233768, -159.01298701298703, -158.86363636363637, -158.71428571428572, -158.56493506493507, -158.41558441558442, -158.26623376623377, -158.11688311688312, -157.96753246753246, -157.8181818181818, -157.66883116883116, -157.51948051948054, -157.3701298701299, -157.22077922077924, -157.07142857142858, -156.92207792207793, -156.77272727272728, -156.62337662337663, -156.47402597402598, -156.32467532467533, -156.17532467532467, -156.02597402597402, -155.87662337662337, -155.72727272727272, -155.5779220779221, -155.42857142857144, -155.2792207792208, -155.12987012987014, -154.9805194805195, -154.83116883116884, -154.6818181818182, -154.53246753246754, -154.38311688311688, -154.23376623376623, -154.08441558441558, -153.93506493506493, -153.78571428571428, -153.63636363636365, -153.487012987013, -153.33766233766235, -153.1883116883117, -153.03896103896105, -152.8896103896104, -152.74025974025975, -152.5909090909091, -152.44155844155844, -152.2922077922078, -152.14285714285714, -151.9935064935065, -151.84415584415586, -151.6948051948052, -151.54545454545456, -151.3961038961039, -151.24675324675326, -151.0974025974026, -150.94805194805195, -150.7987012987013, -150.64935064935065, -150.5, -150.35064935064935, -150.2012987012987, -150.05194805194805, -149.90259740259742, -149.75324675324677, -149.60389610389612, -149.45454545454547, -149.30519480519482, -149.15584415584416, -149.0064935064935, -148.85714285714286, -148.7077922077922, -148.55844155844156, -148.4090909090909, -148.25974025974025, -148.1103896103896, -147.96103896103898, -147.81168831168833, -147.66233766233768, -147.51298701298703, -147.36363636363637, -147.21428571428572, -147.06493506493507, -146.91558441558442, -146.76623376623377, -146.61688311688312, -146.46753246753246, -146.3181818181818, -146.16883116883116, -146.01948051948054, -145.8701298701299, -145.72077922077924, -145.57142857142858, -145.42207792207793, -145.27272727272728, -145.12337662337663, -144.97402597402598, -144.82467532467533, -144.67532467532467, -144.52597402597402, -144.37662337662337, -144.22727272727272, -144.0779220779221, -143.92857142857144, -143.7792207792208, -143.62987012987014, -143.4805194805195, -143.33116883116884, -143.1818181818182, -143.03246753246754, -142.88311688311688, -142.73376623376623, -142.58441558441558, -142.43506493506493, -142.28571428571428, -142.13636363636365, -141.987012987013, -141.83766233766235, -141.6883116883117, -141.53896103896105, -141.3896103896104, -141.24025974025975, -141.0909090909091, -140.94155844155844, -140.7922077922078, -140.64285714285714, -140.4935064935065, -140.34415584415586, -140.1948051948052, -140.04545454545456, -139.8961038961039, -139.74675324675326, -139.5974025974026, -139.44805194805195, -139.2987012987013, -139.14935064935065, -139.0, -138.85064935064935, -138.7012987012987, -138.55194805194805, -138.40259740259742, -138.25324675324677, -138.10389610389612, -137.95454545454547, -137.80519480519482, -137.65584415584416, -137.5064935064935, -137.35714285714286, -137.2077922077922, -137.05844155844156, -136.9090909090909, -136.75974025974025, -136.6103896103896, -136.46103896103898, -136.31168831168833, -136.16233766233768, -136.01298701298703, -135.86363636363637, -135.71428571428572, -135.56493506493507, -135.41558441558442, -135.26623376623377, -135.11688311688312, -134.96753246753246, -134.8181818181818, -134.66883116883116, -134.51948051948054, -134.3701298701299, -134.22077922077924, -134.07142857142858, -133.92207792207793, -133.77272727272728, -133.62337662337663, -133.47402597402598, -133.32467532467533, -133.17532467532467, -133.02597402597402, -132.87662337662337, -132.72727272727275, -132.5779220779221, -132.42857142857144, -132.2792207792208, -132.12987012987014, -131.9805194805195, -131.83116883116884, -131.6818181818182, -131.53246753246754, -131.38311688311688, -131.23376623376623, -131.08441558441558, -130.93506493506493, -130.7857142857143, -130.63636363636365, -130.487012987013, -130.33766233766235, -130.1883116883117, -130.03896103896105, -129.8896103896104, -129.74025974025975, -129.5909090909091, -129.44155844155844, -129.2922077922078, -129.14285714285714, -128.9935064935065, -128.84415584415586, -128.6948051948052, -128.54545454545456, -128.3961038961039, -128.24675324675326, -128.0974025974026, -127.94805194805195, -127.7987012987013, -127.64935064935065, -127.5, -127.35064935064935, -127.2012987012987, -127.05194805194805, -126.90259740259742, -126.75324675324677, -126.60389610389612, -126.45454545454547, -126.30519480519482, -126.15584415584416, -126.00649350649351, -125.85714285714286, -125.70779220779221, -125.55844155844156, -125.4090909090909, -125.25974025974025, -125.1103896103896, -124.96103896103898, -124.81168831168833, -124.66233766233768, -124.51298701298703, -124.36363636363637, -124.21428571428572, -124.06493506493507, -123.91558441558442, -123.76623376623377, -123.61688311688312, -123.46753246753246, -123.31818181818181, -123.16883116883116, -123.01948051948054, -122.87012987012989, -122.72077922077924, -122.57142857142858, -122.42207792207793, -122.27272727272728, -122.12337662337663, -121.97402597402598, -121.82467532467533, -121.67532467532467, -121.52597402597402, -121.37662337662337, -121.22727272727275, -121.0779220779221, -120.92857142857144, -120.7792207792208, -120.62987012987014, -120.48051948051949, -120.33116883116884, -120.18181818181819, -120.03246753246754, -119.88311688311688, -119.73376623376623, -119.58441558441558, -119.43506493506493, -119.2857142857143, -119.13636363636365, -118.987012987013, -118.83766233766235, -118.6883116883117, -118.53896103896105, -118.3896103896104, -118.24025974025975, -118.0909090909091, -117.94155844155844, -117.79220779220779, -117.64285714285714, -117.49350649350649, -117.34415584415586, -117.19480519480521, -117.04545454545456, -116.89610389610391, -116.74675324675326, -116.5974025974026, -116.44805194805195, -116.2987012987013, -116.14935064935065, -116.0, -115.85064935064935, -115.7012987012987, -115.55194805194805, -115.40259740259742, -115.25324675324677, -115.10389610389612, -114.95454545454547, -114.80519480519482, -114.65584415584416, -114.50649350649351, -114.35714285714286, -114.20779220779221, -114.05844155844156, -113.9090909090909, -113.75974025974025, -113.61038961038963, -113.46103896103898, -113.31168831168833, -113.16233766233768, -113.01298701298703, -112.86363636363637, -112.71428571428572, -112.56493506493507, -112.41558441558442, -112.26623376623377, -112.11688311688312, -111.96753246753246, -111.81818181818181, -111.66883116883119, -111.51948051948054, -111.37012987012989, -111.22077922077924, -111.07142857142858, -110.92207792207793, -110.77272727272728, -110.62337662337663, -110.47402597402598, -110.32467532467533, -110.17532467532467, -110.02597402597402, -109.87662337662337, -109.72727272727275, -109.5779220779221, -109.42857142857144, -109.2792207792208, -109.12987012987014, -108.98051948051949, -108.83116883116884, -108.68181818181819, -108.53246753246754, -108.38311688311688, -108.23376623376623, -108.08441558441558, -107.93506493506493, -107.7857142857143, -107.63636363636365, -107.487012987013, -107.33766233766235, -107.1883116883117, -107.03896103896105, -106.8896103896104, -106.74025974025975, -106.5909090909091, -106.44155844155844, -106.29220779220779, -106.14285714285714, -105.99350649350649, -105.84415584415586, -105.69480519480521, -105.54545454545456, -105.39610389610391, -105.24675324675326, -105.0974025974026, -104.94805194805195, -104.7987012987013, -104.64935064935065, -104.5, -104.35064935064935, -104.2012987012987, -104.05194805194805, -103.90259740259742, -103.75324675324677, -103.60389610389612, -103.45454545454547, -103.30519480519482, -103.15584415584416, -103.00649350649351, -102.85714285714286, -102.70779220779221, -102.55844155844156, -102.4090909090909, -102.25974025974025, -102.11038961038963, -101.96103896103898, -101.81168831168833, -101.66233766233768, -101.51298701298703, -101.36363636363637, -101.21428571428572, -101.06493506493507, -100.91558441558442, -100.76623376623377, -100.61688311688312, -100.46753246753246, -100.31818181818181, -100.16883116883119, -100.01948051948054, -99.87012987012989, -99.72077922077924, -99.57142857142858, -99.42207792207793, -99.27272727272728, -99.12337662337663, -98.97402597402598, -98.82467532467533, -98.67532467532467, -98.52597402597402, -98.37662337662337, -98.22727272727275, -98.0779220779221, -97.92857142857144, -97.7792207792208, -97.62987012987014, -97.48051948051949, -97.33116883116884, -97.18181818181819, -97.03246753246754, -96.88311688311688, -96.73376623376623, -96.58441558441558, -96.43506493506493, -96.2857142857143, -96.13636363636365, -95.987012987013, -95.83766233766235, -95.6883116883117, -95.53896103896105, -95.3896103896104, -95.24025974025975, -95.0909090909091, -94.94155844155844, -94.79220779220779, -94.64285714285714, -94.49350649350652, -94.34415584415586, -94.19480519480521, -94.04545454545456, -93.89610389610391, -93.74675324675326, -93.5974025974026, -93.44805194805195, -93.2987012987013, -93.14935064935065, -93.0, -92.85064935064935, -92.7012987012987, -92.55194805194807, -92.40259740259742, -92.25324675324677, -92.10389610389612, -91.95454545454547, -91.80519480519482, -91.65584415584416, -91.50649350649351, -91.35714285714286, -91.20779220779221, -91.05844155844156, -90.9090909090909, -90.75974025974025, -90.61038961038963, -90.46103896103898, -90.31168831168833, -90.16233766233768, -90.01298701298703, -89.86363636363637, -89.71428571428572, -89.56493506493507, -89.41558441558442, -89.26623376623377, -89.11688311688312, -88.96753246753246, -88.81818181818181, -88.66883116883119, -88.51948051948054, -88.37012987012989, -88.22077922077924, -88.07142857142858, -87.92207792207793, -87.77272727272728, -87.62337662337663, -87.47402597402598, -87.32467532467533, -87.17532467532467, -87.02597402597402, -86.87662337662337, -86.72727272727275, -86.5779220779221, -86.42857142857144, -86.2792207792208, -86.12987012987014, -85.98051948051949, -85.83116883116884, -85.68181818181819, -85.53246753246754, -85.38311688311688, -85.23376623376623, -85.08441558441558, -84.93506493506493, -84.7857142857143, -84.63636363636365, -84.487012987013, -84.33766233766235, -84.1883116883117, -84.03896103896105, -83.8896103896104, -83.74025974025975, -83.5909090909091, -83.44155844155844, -83.29220779220779, -83.14285714285714, -82.99350649350652, -82.84415584415586, -82.69480519480521, -82.54545454545456, -82.39610389610391, -82.24675324675326, -82.0974025974026, -81.94805194805195, -81.7987012987013, -81.64935064935065, -81.5, -81.35064935064935, -81.2012987012987, -81.05194805194807, -80.90259740259742, -80.75324675324677, -80.60389610389612, -80.45454545454547, -80.30519480519482, -80.15584415584416, -80.00649350649351, -79.85714285714286, -79.70779220779221, -79.55844155844156, -79.4090909090909, -79.25974025974025, -79.11038961038963, -78.96103896103898, -78.81168831168833, -78.66233766233768, -78.51298701298703, -78.36363636363637, -78.21428571428572, -78.06493506493507, -77.91558441558442, -77.76623376623377, -77.61688311688312, -77.46753246753246, -77.31818181818181, -77.16883116883119, -77.01948051948054, -76.87012987012989, -76.72077922077924, -76.57142857142858, -76.42207792207793, -76.27272727272728, -76.12337662337663, -75.97402597402598, -75.82467532467533, -75.67532467532467, -75.52597402597402, -75.3766233766234, -75.22727272727275, -75.0779220779221, -74.92857142857144, -74.7792207792208, -74.62987012987014, -74.48051948051949, -74.33116883116884, -74.18181818181819, -74.03246753246754, -73.88311688311688, -73.73376623376623, -73.58441558441558, -73.43506493506496, -73.2857142857143, -73.13636363636365, -72.987012987013, -72.83766233766235, -72.6883116883117, -72.53896103896105, -72.3896103896104, -72.24025974025975, -72.0909090909091, -71.94155844155844, -71.79220779220779, -71.64285714285714, -71.49350649350652, -71.34415584415586, -71.19480519480521, -71.04545454545456, -70.89610389610391, -70.74675324675326, -70.5974025974026, -70.44805194805195, -70.2987012987013, -70.14935064935065, -70.0, -69.85064935064935, -69.7012987012987, -69.55194805194807, -69.40259740259742, -69.25324675324677, -69.10389610389612, -68.95454545454547, -68.80519480519482, -68.65584415584416, -68.50649350649351, -68.35714285714286, -68.20779220779221, -68.05844155844156, -67.9090909090909, -67.75974025974025, -67.61038961038963, -67.46103896103898, -67.31168831168833, -67.16233766233768, -67.01298701298703, -66.86363636363637, -66.71428571428572, -66.56493506493507, -66.41558441558442, -66.26623376623377, -66.11688311688312, -65.96753246753246, -65.81818181818181, -65.66883116883119, -65.51948051948054, -65.37012987012989, -65.22077922077924, -65.07142857142858, -64.92207792207793, -64.77272727272728, -64.62337662337663, -64.47402597402598, -64.32467532467533, -64.17532467532467, -64.02597402597402, -63.8766233766234, -63.72727272727275, -63.577922077922096, -63.428571428571445, -63.27922077922079, -63.12987012987014, -62.98051948051949, -62.83116883116884, -62.68181818181819, -62.532467532467535, -62.383116883116884, -62.23376623376623, -62.08441558441558, -61.93506493506496, -61.785714285714306, -61.636363636363654, -61.487012987013, -61.33766233766235, -61.1883116883117, -61.03896103896105, -60.8896103896104, -60.740259740259745, -60.59090909090909, -60.44155844155844, -60.29220779220779, -60.14285714285714, -59.993506493506516, -59.844155844155864, -59.69480519480521, -59.54545454545456, -59.39610389610391, -59.24675324675326, -59.097402597402606, -58.948051948051955, -58.7987012987013, -58.64935064935065, -58.5, -58.35064935064935, -58.2012987012987, -58.051948051948074, -57.90259740259742, -57.75324675324677, -57.60389610389612, -57.45454545454547, -57.305194805194816, -57.155844155844164, -57.00649350649351, -56.85714285714286, -56.70779220779221, -56.55844155844156, -56.40909090909091, -56.25974025974028, -56.11038961038963, -55.96103896103898, -55.81168831168833, -55.66233766233768, -55.512987012987026, -55.363636363636374, -55.21428571428572, -55.06493506493507, -54.91558441558442, -54.76623376623377, -54.616883116883116, -54.467532467532465, -54.31818181818184, -54.16883116883119, -54.01948051948054, -53.87012987012989, -53.720779220779235, -53.571428571428584, -53.42207792207793, -53.27272727272728, -53.12337662337663, -52.97402597402598, -52.824675324675326, -52.675324675324674, -52.52597402597402, -52.3766233766234, -52.22727272727275, -52.077922077922096, -51.928571428571445, -51.77922077922079, -51.62987012987014, -51.48051948051949, -51.33116883116884, -51.18181818181819, -51.032467532467535, -50.883116883116884, -50.73376623376623, -50.58441558441558, -50.43506493506496, -50.285714285714306, -50.136363636363654, -49.987012987013, -49.83766233766235, -49.6883116883117, -49.53896103896105, -49.3896103896104, -49.240259740259745, -49.09090909090909, -48.94155844155844, -48.79220779220779, -48.64285714285714, -48.493506493506516, -48.344155844155864, -48.19480519480521, -48.04545454545456, -47.89610389610391, -47.74675324675326, -47.597402597402606, -47.448051948051955, -47.2987012987013, -47.14935064935065, -47.0, -46.85064935064935, -46.7012987012987, -46.551948051948074, -46.40259740259742, -46.25324675324677, -46.10389610389612, -45.95454545454547, -45.805194805194816, -45.655844155844164, -45.50649350649351, -45.35714285714286, -45.20779220779221, -45.05844155844156, -44.90909090909091, -44.75974025974028, -44.61038961038963, -44.46103896103898, -44.31168831168833, -44.16233766233768, -44.012987012987026, -43.863636363636374, -43.71428571428572, -43.56493506493507, -43.41558441558442, -43.26623376623377, -43.116883116883116, -42.967532467532465, -42.81818181818181, -42.66883116883116, -42.51948051948051, -42.37012987012986, -42.22077922077921, -42.071428571428555, -41.92207792207796, -41.77272727272731, -41.62337662337666, -41.474025974026006, -41.324675324675354, -41.1753246753247, -41.02597402597405, -40.8766233766234, -40.72727272727275, -40.577922077922096, -40.428571428571445, -40.27922077922079, -40.12987012987014, -39.98051948051949, -39.83116883116884, -39.68181818181819, -39.532467532467535, -39.383116883116884, -39.23376623376623, -39.08441558441558, -38.93506493506493, -38.78571428571428, -38.636363636363626, -38.487012987012974, -38.33766233766232, -38.18831168831167, -38.03896103896108, -37.889610389610425, -37.74025974025977, -37.59090909090912, -37.44155844155847, -37.29220779220782, -37.14285714285717, -36.993506493506516, -36.844155844155864, -36.69480519480521, -36.54545454545456, -36.39610389610391, -36.24675324675326, -36.097402597402606, -35.948051948051955, -35.7987012987013, -35.64935064935065, -35.5, -35.35064935064935, -35.2012987012987, -35.051948051948045, -34.902597402597394, -34.75324675324674, -34.60389610389609, -34.45454545454544, -34.30519480519479, -34.15584415584419, -34.00649350649354, -33.85714285714289, -33.70779220779224, -33.55844155844159, -33.409090909090935, -33.25974025974028, -33.11038961038963, -32.96103896103898, -32.81168831168833, -32.66233766233768, -32.512987012987026, -32.363636363636374, -32.21428571428572, -32.06493506493507, -31.91558441558442, -31.766233766233768, -31.616883116883116, -31.467532467532465, -31.318181818181813, -31.16883116883116, -31.01948051948051, -30.87012987012986, -30.720779220779207, -30.571428571428555, -30.42207792207796, -30.27272727272731, -30.123376623376657, -29.974025974026006, -29.824675324675354, -29.675324675324703, -29.52597402597405, -29.3766233766234, -29.227272727272748, -29.077922077922096, -28.928571428571445, -28.779220779220793, -28.62987012987014, -28.48051948051949, -28.33116883116884, -28.181818181818187, -28.032467532467535, -27.883116883116884, -27.733766233766232, -27.58441558441558, -27.43506493506493, -27.285714285714278, -27.136363636363626, -26.987012987012974, -26.837662337662323, -26.68831168831167, -26.538961038961077, -26.389610389610425, -26.240259740259773, -26.090909090909122, -25.94155844155847, -25.79220779220782, -25.642857142857167, -25.493506493506516, -25.344155844155864, -25.194805194805213, -25.04545454545456, -24.89610389610391, -24.746753246753258, -24.597402597402606, -24.448051948051955, -24.298701298701303, -24.14935064935065, -24.0, -23.85064935064935, -23.701298701298697, -23.551948051948045, -23.402597402597394, -23.253246753246742, -23.10389610389609, -22.95454545454544, -22.805194805194787, -22.655844155844193, -22.50649350649354, -22.35714285714289, -22.207792207792238, -22.058441558441586, -21.909090909090935, -21.759740259740283, -21.610389610389632, -21.46103896103898, -21.31168831168833, -21.162337662337677, -21.012987012987026, -20.863636363636374, -20.714285714285722, -20.56493506493507, -20.41558441558442, -20.266233766233768, -20.116883116883116, -19.967532467532465, -19.818181818181813, -19.66883116883116, -19.51948051948051, -19.37012987012986, -19.220779220779207, -19.071428571428555, -18.92207792207796, -18.77272727272731, -18.623376623376657, -18.474025974026006, -18.324675324675354, -18.175324675324703, -18.02597402597405, -17.8766233766234, -17.727272727272748, -17.577922077922096, -17.428571428571445, -17.279220779220793, -17.12987012987014, -16.98051948051949, -16.83116883116884, -16.681818181818187, -16.532467532467535, -16.383116883116884, -16.233766233766232, -16.08441558441558, -15.93506493506493, -15.785714285714278, -15.636363636363626, -15.487012987012974, -15.337662337662323, -15.188311688311671, -15.038961038961077, -14.889610389610425, -14.740259740259773, -14.590909090909122, -14.44155844155847, -14.292207792207819, -14.142857142857167, -13.993506493506516, -13.844155844155864, -13.694805194805213, -13.545454545454561, -13.39610389610391, -13.246753246753258, -13.097402597402606, -12.948051948051955, -12.798701298701303, -12.649350649350652, -12.5, -12.350649350649348, -12.201298701298697, -12.051948051948045, -11.902597402597394, -11.753246753246742, -11.60389610389609, -11.454545454545439, -11.305194805194844, -11.155844155844193, -11.006493506493541, -10.85714285714289, -10.707792207792238, -10.558441558441586, -10.409090909090935, -10.259740259740283, -10.110389610389632, -9.96103896103898, -9.811688311688329, -9.662337662337677, -9.512987012987026, -9.363636363636374, -9.214285714285722, -9.06493506493507, -8.91558441558442, -8.766233766233768, -8.616883116883116, -8.467532467532465, -8.318181818181813, -8.168831168831161, -8.01948051948051, -7.870129870129858, -7.720779220779207, -7.571428571428555, -7.4220779220779605, -7.272727272727309, -7.123376623376657, -6.974025974026006, -6.824675324675354, -6.675324675324703, -6.525974025974051, -6.3766233766233995, -6.227272727272748, -6.077922077922096, -5.928571428571445, -5.779220779220793, -5.629870129870142, -5.48051948051949, -5.3311688311688386, -5.181818181818187, -5.032467532467535, -4.883116883116884, -4.733766233766232, -4.584415584415581, -4.435064935064929, -4.285714285714278, -4.136363636363626, -3.9870129870129745, -3.837662337662323, -3.688311688311728, -3.5389610389610766, -3.389610389610425, -3.2402597402597735, -3.090909090909122, -2.9415584415584703, -2.792207792207819, -2.642857142857167, -2.4935064935065157, -2.344155844155864, -2.1948051948052125, -2.045454545454561, -1.8961038961039094, -1.7467532467532578, -1.5974025974026063, -1.4480519480519547, -1.2987012987013031, -1.1493506493506516, -1.0]}
},{}],15:[function(require,module,exports){
module.exports={"expected": [10.0, 14.104271176297699, 19.893046541454208, 28.057692294338125, 39.573330070046325, 55.81529786570694, 78.72340968837608, 111.03363181676379, 156.60484528328325, 220.87972053975727, 311.53474758375893, 439.397056076079, 619.7375232963906, 874.0946086699405, 1232.8467394420659, 1738.840473190533, 2452.507756620109, 3459.083446134353, 4878.7850945721275, 6881.17079847245, 9705.38989520764, 13688.74509537082, 19306.977288832495, 27231.08432763142, 38407.45977815442, 54170.92279038372, 76404.13849058564, 107762.46882626237, 151991.10829529332, 214372.38077828498, 302356.61912054766, 426451.97480247583, 601479.4296281799, 848342.8982440726, 1196525.8287320712, 1687612.4757881453, 2380254.399901916, 3357175.3524792404, 4735051.155774998, 6678444.553469233, 9419459.301799856, 13285460.83266851, 18738174.22860383, 26428829.06689411, 37275937.20314938, 52574992.66638634, 74153195.3658575, 104587677.6029035, 147513296.66105497, 208056753.82171714, 293448887.59617144, 413888268.7039292, 583759237.8488591, 823349859.2289186, 1161274968.7531168, 1637893706.9540613, 2310129700.083158, 3258269574.239217, 4595551764.055001, 6481690828.494479, 9141952512.600794, 12894057731.855785, 18186128681.293144, 25650209056.800407, 36177750426.58405, 51026080256.49617, 71968567300.11528, 101506418937.04541, 143167405882.297, 201927191617.09973, 284803586843.57935, 401694702082.4098, 566561100825.243, 799093140398.0979, 1127062634729.4114, 1589639703289.613, 2242070944780.614, 3162277660168.3794, 4460162165376.287, 6290733667073.035, 8872621353826.383, 12514185761897.707, 17650346953636.906, 24894527978983.414, 35111917342151.273, 49522800371345.2, 69848300584710.7, 98515937265031.39, 138949549437313.6, 195978212508825.62, 276412985387057.75, 389860370254906.4, 549869638296703.06, 775551049014943.8, 1093858230636888.2, 1542807311332788.0, 2176017269181241.5, 3069113764883904.5, 4328761281083061.5, 6105402296585314.0, 8611224963143011.0, 1.214550520402733e+16, 1.7130349897073586e+16, 2.416111002931905e+16, 3.407748477738809e+16, 4.80638086306437e+16, 6.779049906922799e+16, 9.561355820489453e+16, 1.3485595530525523e+17, 1.9020449633640118e+17, 2.6826957952797165e+17, 3.783746898013893e+17, 5.3366992312063014e+17, 7.527025314327291e+17, 1.0616320618413007e+18, 1.4973546489661706e+18, 2.111909601610903e+18, 2.9786945720946924e+18, 4.201231599618945e+18, 5.925530975545687e+18, 8.357529574264796e+18, 1.1787686347935818e+19, 1.662567247924299e+19, 2.344929931355521e+19, 3.3073527641255313e+19, 4.664780026090449e+19, 6.579332246575655e+19, 9.279668616466348e+19, 1.3088296259282026e+20, 1.846008796766359e+20, 2.6036608663423887e+20, 3.672273891000714e+20, 5.1794746792312236e+20, 7.305271542664449e+20, 1.030355308542297e+21, 1.4532410679618516e+21, 2.0496906107066369e+21, 2.8909392200917556e+21, 4.0774590714368906e+21, 5.750958845380074e+21, 8.111308307896823e+21, 1.144040919691338e+22, 1.61358633681076e+22, 2.275845926074791e+22, 3.209914809683112e+22, 4.527350892858449e+22, 6.385498470312941e+22, 9.006280202112758e+22, 1.2702701826032023e+23, 1.791623512260071e+23, 2.5269543862746886e+23, 3.564084991415332e+23, 5.026882121429434e+23, 7.090050861192318e+23, 1e+24, 1.4104271176297654e+24, 1.9893046541454086e+24, 2.8057692294338093e+24, 3.9573330070046166e+24, 5.581529786570699e+24, 7.872340968837592e+24, 1.110336318167632e+25, 1.5660484528328326e+25, 2.208797205397566e+25, 3.115347475837596e+25, 4.393970560760786e+25, 6.19737523296388e+25, 8.740946086699415e+25, 1.2328467394420634e+26, 1.738840473190524e+26, 2.4525077566201087e+26, 3.459083446134343e+26, 4.878785094572098e+26, 6.881170798472444e+26, 9.7053898952076e+26, 1.368874509537082e+27, 1.9306977288832458e+27, 2.7231084327631306e+27, 3.8407459778154425e+27, 5.41709227903835e+27, 7.64041384905858e+27, 1.0776246882626236e+28, 1.519911082952927e+28, 2.14372380778285e+28, 3.0235661912054706e+28, 4.264519748024741e+28, 6.014794296281798e+28, 8.48342898244069e+28, 1.1965258287320639e+29, 1.687612475788145e+29, 2.3802543999019062e+29, 3.35717535247924e+29, 4.7350511557749876e+29, 6.678444553469206e+29, 9.419459301799856e+29, 1.3285460832668454e+30, 1.873817422860387e+30, 2.642882906689411e+30, 3.7275937203149225e+30, 5.257499266638634e+30, 7.415319536585735e+30, 1.0458767760290308e+31, 1.47513296661055e+31, 2.080567538217163e+31, 2.9344888759616906e+31, 4.138882687039292e+31, 5.8375923784885675e+31, 8.233498592289185e+31, 1.1612749687531169e+32, 1.637893706954041e+32, 2.3101297000831394e+32, 3.2582695742392036e+32, 4.595551764055001e+32, 6.4816908284945326e+32, 9.141952512600755e+32, 1.2894057731855783e+33, 1.8186128681292997e+33, 2.56502090568003e+33, 3.617775042658405e+33, 5.1026080256496386e+33, 7.19685673001147e+33, 1.015064189370454e+34, 1.4316740588229758e+34, 2.0192719161709805e+34, 2.8480358684357934e+34, 4.0169470208241147e+34, 5.665611008252384e+34, 7.990931403980945e+34, 1.1270626347294114e+35, 1.5896397032896e+35, 2.242070944780605e+35, 3.162277660168379e+35, 4.460162165376323e+35, 6.29073366707301e+35, 8.872621353826384e+35, 1.2514185761897757e+36, 1.765034695363676e+36, 2.4894527978983414e+36, 3.511191734215142e+36, 4.95228003713448e+36, 6.98483005847107e+36, 9.851593726503179e+36, 1.3894954943731246e+37, 1.9597821250882485e+37, 2.7641298538705773e+37, 3.8986037025490317e+37, 5.498696382967008e+37, 7.755510490149439e+37, 1.0938582306368793e+38, 1.5428073113327816e+38, 2.1760172691812416e+38, 3.0691137648839175e+38, 4.328761281083026e+38, 6.105402296585314e+38, 8.611224963143045e+38, 1.2145505204027232e+39, 1.7130349897073588e+39, 2.4161110029319047e+39, 3.4077484777387804e+39, 4.8063808630643695e+39, 6.779049906922799e+39, 9.561355820489377e+39, 1.3485595530525523e+40, 1.9020449633640118e+40, 2.682695795279738e+40, 3.783746898013862e+40, 5.336699231206302e+40, 7.527025314327352e+40, 1.061632061841292e+41, 1.4973546489661709e+41, 2.111909601610903e+41, 2.978694572094668e+41, 4.201231599618945e+41, 5.925530975545687e+41, 8.357529574264727e+41, 1.1787686347935818e+42, 1.662567247924299e+42, 2.344929931355502e+42, 3.3073527641255314e+42, 4.66478002609045e+42, 6.579332246575602e+42, 9.279668616466272e+42, 1.3088296259282026e+43, 1.846008796766374e+43, 2.603660866342368e+43, 3.6722738910007136e+43, 5.179474679231223e+43, 7.305271542664389e+43, 1.0303553085422969e+44, 1.4532410679618517e+44, 2.04969061070662e+44, 2.8909392200917555e+44, 4.077459071436891e+44, 5.750958845380027e+44, 8.111308307896823e+44, 1.144040919691338e+45, 1.6135863368107732e+45, 2.2758459260747726e+45, 3.209914809683112e+45, 4.527350892858487e+45, 6.385498470312888e+45, 9.006280202112759e+45, 1.2702701826032024e+46, 1.791623512260056e+46, 2.5269543862746886e+46, 3.564084991415332e+46, 5.026882121429393e+46, 7.090050861192318e+46, 1e+47, 1.4104271176297542e+47, 1.9893046541454084e+47, 2.8057692294338094e+47, 3.957333007004584e+47, 5.581529786570654e+47, 7.872340968837593e+47, 1.1103363181676414e+48, 1.5660484528328198e+48, 2.208797205397566e+48, 3.115347475837596e+48, 4.3939705607607505e+48, 6.19737523296388e+48, 8.740946086699414e+48, 1.2328467394420534e+49, 1.738840473190524e+49, 2.4525077566201084e+49, 3.459083446134314e+49, 4.878785094572097e+49, 6.881170798472443e+49, 9.70538989520768e+49, 1.3688745095370708e+50, 1.9306977288832457e+50, 2.723108432763153e+50, 3.840745977815411e+50, 5.41709227903835e+50, 7.64041384905858e+50, 1.0776246882626149e+51, 1.519911082952927e+51, 2.14372380778285e+51, 3.0235661912054456e+51, 4.26451974802474e+51, 6.014794296281798e+51, 8.483428982440621e+51, 1.1965258287320639e+52, 1.6876124757881451e+52, 2.3802543999018867e+52, 3.357175352479213e+52, 4.7350511557749876e+52, 6.67844455346926e+52, 9.419459301799779e+52, 1.3285460832668455e+53, 1.8738174228603869e+53, 2.6428829066893894e+53, 3.7275937203149226e+53, 5.257499266638634e+53, 7.415319536585674e+53, 1.0458767760290307e+54, 1.4751329666105498e+54, 2.080567538217146e+54, 2.9344888759616905e+54, 4.1388826870392914e+54, 5.837592378488615e+54, 8.233498592289117e+54, 1.1612749687531167e+55, 1.6378937069540678e+55, 2.3101297000831393e+55, 3.258269574239203e+55, 4.5955517640550007e+55, 6.481690828494427e+55, 9.141952512600756e+55, 1.2894057731855783e+56, 1.8186128681292997e+56, 2.5650209056800303e+56, 3.6177750426584054e+56, 5.102608025649555e+56, 7.19685673001147e+56, 1.0150641893704541e+57, 1.4316740588229524e+57, 2.0192719161709807e+57, 2.8480358684357932e+57, 4.016947020824115e+57, 5.6656110082523844e+57, 7.990931403980945e+57, 1.1270626347294113e+58, 1.5896397032896e+58, 2.2420709447806044e+58, 3.1622776601683794e+58, 4.46016216537625e+58, 6.29073366707301e+58, 8.872621353826384e+58, 1.2514185761897553e+59, 1.765034695363676e+59, 2.4894527978983414e+59, 3.5111917342151417e+59, 4.95228003713448e+59, 6.98483005847107e+59, 9.85159372650318e+59, 1.3894954943731246e+60, 1.9597821250882484e+60, 2.7641298538705777e+60, 3.898603702549032e+60, 5.498696382967008e+60, 7.755510490149439e+60, 1.0938582306368793e+61, 1.5428073113327816e+61, 2.1760172691812414e+61, 3.069113764883867e+61, 4.3287612810830265e+61, 6.105402296585314e+61, 8.611224963142906e+61, 1.2145505204027233e+62, 1.7130349897073588e+62, 2.416111002931905e+62, 3.4077484777387805e+62, 4.806380863064369e+62, 6.779049906922799e+62, 9.561355820489376e+62, 1.3485595530525523e+63, 1.9020449633640117e+63, 2.6826957952796946e+63, 3.783746898013862e+63, 5.336699231206302e+63, 7.527025314327229e+63, 1.061632061841292e+64, 1.4973546489661708e+64, 2.1119096016109028e+64, 2.978694572094717e+64, 4.2012315996190136e+64, 5.925530975545783e+64, 8.357529574264727e+64, 1.1787686347935817e+65, 1.662567247924299e+65, 2.34492993135554e+65, 3.3073527641254775e+65, 4.664780026090373e+65, 6.579332246575601e+65, 9.279668616466271e+65, 1.3088296259282025e+66, 1.846008796766374e+66, 2.6036608663424102e+66, 3.672273891000654e+66, 5.1794746792311385e+66, 7.305271542664389e+66, 1.030355308542297e+67, 1.4532410679618516e+67, 2.0496906107066534e+67, 2.890939220091708e+67, 4.0774590714368236e+67, 5.750958845380028e+67, 8.111308307896824e+67, 1.144040919691338e+68, 1.6135863368107733e+68, 2.2758459260748094e+68, 3.2099148096830597e+68, 4.527350892858412e+68, 6.385498470312889e+68, 9.006280202112758e+68, 1.2702701826032023e+69, 1.7916235122600855e+69, 2.5269543862746472e+69, 3.564084991415273e+69, 5.026882121429393e+69, 7.090050861192318e+69, 1e+70, 1.4104271176297772e+70, 1.989304654145441e+70, 2.805769229433763e+70, 3.957333007004584e+70, 5.581529786570653e+70, 7.872340968837593e+70, 1.1103363181676413e+71, 1.5660484528328454e+71, 2.2087972053975297e+71, 3.1153474758375447e+71, 4.39397056076075e+71, 6.19737523296388e+71, 8.740946086699414e+71, 1.2328467394420733e+72, 1.7388404731904957e+72, 2.4525077566200685e+72, 3.4590834461343143e+72, 4.878785094572098e+72, 6.881170798472443e+72, 9.70538989520768e+72, 1.3688745095370932e+73, 1.930697728883214e+73, 2.7231084327631085e+73, 3.840745977815411e+73, 5.41709227903835e+73, 7.640413849058581e+73, 1.0776246882626324e+74, 1.519911082952902e+74, 2.1437238077828147e+74, 3.023566191205446e+74, 4.2645197480247405e+74, 6.014794296281799e+74, 8.48342898244076e+74, 1.1965258287320444e+75, 1.6876124757881177e+75, 2.3802543999018868e+75, 3.3571753524792132e+75, 4.735051155774988e+75, 6.678444553469261e+75, 9.419459301799934e+75, 1.3285460832668238e+76, 1.8738174228603562e+76, 2.6428829066893893e+76, 3.727593720314923e+76, 5.257499266638634e+76, 7.415319536585796e+76, 1.0458767760290136e+77, 1.4751329666105258e+77, 2.080567538217146e+77, 2.9344888759616904e+77, 4.1388826870392917e+77, 5.837592378488615e+77, 8.233498592289253e+77, 1.1612749687530977e+78, 1.6378937069540413e+78, 2.310129700083139e+78, 3.2582695742392035e+78, 4.595551764055001e+78, 6.481690828494532e+78, 9.141952512600606e+78, 1.2894057731855572e+79, 1.8186128681292997e+79, 2.56502090568003e+79, 3.617775042658405e+79, 5.1026080256496383e+79, 7.196856730011588e+79, 1.0150641893704375e+80, 1.4316740588229523e+80, 2.0192719161709806e+80, 2.848035868435793e+80, 4.016947020824115e+80, 5.665611008252477e+80, 7.990931403980815e+80, 1.1270626347293928e+81, 1.5896397032896002e+81, 2.2420709447806046e+81, 3.1622776601683793e+81, 4.460162165376324e+81, 6.2907336670729074e+81, 8.872621353826238e+81, 1.251418576189755e+82, 1.765034695363676e+82, 2.4894527978983412e+82, 3.511191734215142e+82, 4.952280037134561e+82, 6.984830058470956e+82, 9.851593726503018e+82, 1.3894954943731246e+83, 1.9597821250882483e+83, 2.7641298538705777e+83, 3.8986037025490957e+83, 5.498696382966918e+83, 7.755510490149311e+83, 1.0938582306368793e+84, 1.5428073113327818e+84, 2.1760172691812415e+84, 3.0691137648839173e+84, 4.328761281082956e+84, 6.1054022965852145e+84, 8.611224963142905e+84, 1.2145505204027231e+85, 1.7130349897073585e+85, 2.4161110029319047e+85, 3.407748477738836e+85, 4.806380863064291e+85, 6.779049906922689e+85, 9.561355820489375e+85, 1.3485595530525523e+86, 1.9020449633640118e+86, 2.6826957952797383e+86, 3.7837468980138e+86, 5.336699231206215e+86, 7.527025314327228e+86, 1.061632061841292e+87, 1.4973546489661707e+87, 2.111909601610903e+87, 2.978694572094717e+87, 4.201231599618877e+87, 5.92553097554559e+87, 8.357529574264727e+87, 1.1787686347935819e+88, 1.662567247924299e+88, 2.3449299313555403e+88, 3.3073527641254774e+88, 4.664780026090373e+88, 6.579332246575602e+88, 9.279668616466272e+88, 1.3088296259282026e+89, 1.8460087967663741e+89, 2.6036608663424104e+89, 3.672273891000654e+89, 5.179474679231139e+89, 7.305271542664389e+89, 1.030355308542297e+90, 1.4532410679618516e+90, 2.0496906107066534e+90, 2.890939220091708e+90, 4.077459071436824e+90, 5.750958845380027e+90, 8.111308307896823e+90, 1.144040919691338e+91, 1.6135863368107732e+91, 2.2758459260747353e+91, 3.2099148096830598e+91, 4.5273508928584126e+91, 6.3854984703128884e+91, 9.006280202112758e+91, 1.2702701826032024e+92, 1.7916235122600853e+92, 2.5269543862746473e+92, 3.5640849914152737e+92, 5.026882121429393e+92, 7.090050861192318e+92, 1e+93, 1.4104271176297773e+93, 1.989304654145376e+93, 2.805769229433763e+93, 3.957333007004584e+93, 5.581529786570654e+93, 7.872340968837593e+93, 1.1103363181676412e+94, 1.5660484528327942e+94, 2.20879720539753e+94, 3.115347475837545e+94, 4.39397056076075e+94, 6.19737523296388e+94, 8.740946086699414e+94, 1.2328467394420735e+95, 1.7388404731904955e+95, 2.4525077566200685e+95, 3.4590834461343143e+95, 4.8787850945720975e+95, 6.881170798472443e+95, 9.705389895207679e+95, 1.3688745095370484e+96, 1.9306977288832141e+96, 2.7231084327631084e+96, 3.840745977815411e+96, 5.41709227903835e+96, 7.64041384905858e+96, 1.0776246882626323e+97, 1.5199110829529021e+97, 2.143723807782815e+97, 3.023566191205446e+97, 4.2645197480247405e+97, 6.014794296281798e+97, 8.483428982440761e+97, 1.1965258287320443e+98, 1.6876124757881175e+98, 2.380254399901887e+98, 3.357175352479213e+98, 4.735051155774988e+98, 6.67844455346926e+98, 9.419459301799932e+98, 1.3285460832668238e+99, 1.8738174228603563e+99, 2.642882906689389e+99, 3.7275937203149226e+99, 5.257499266638634e+99, 7.415319536585796e+99, 1.0458767760290136e+100, 1.4751329666105257e+100, 2.0805675382171458e+100, 2.9344888759616903e+100, 4.138882687039291e+100, 5.837592378488615e+100, 8.233498592288983e+100, 1.1612749687530978e+101, 1.6378937069540412e+101, 2.310129700083139e+101, 3.2582695742392036e+101, 4.595551764055001e+101, 6.481690828494533e+101, 9.141952512600606e+101, 1.2894057731855572e+102, 1.8186128681292997e+102, 2.56502090568003e+102, 3.6177750426584054e+102, 5.102608025649638e+102, 7.196856730011352e+102, 1.0150641893704374e+103, 1.4316740588229523e+103, 2.0192719161709806e+103, 2.848035868435793e+103, 4.016947020824115e+103, 5.665611008252291e+103, 7.990931403980816e+103, 1.127062634729393e+104, 1.5896397032896e+104, 2.2420709447806045e+104, 3.162277660168379e+104, 4.460162165376323e+104, 6.290733667072907e+104, 8.872621353826237e+104, 1.2514185761897552e+105, 1.765034695363676e+105, 2.4894527978983415e+105, 3.511191734215142e+105, 4.952280037134399e+105, 6.984830058470956e+105, 9.851593726503017e+105, 1.3894954943731248e+106, 1.9597821250882484e+106, 2.7641298538705775e+106, 3.898603702549096e+106, 5.498696382966918e+106, 7.755510490149311e+106, 1.0938582306368795e+107, 1.5428073113327817e+107, 2.1760172691812415e+107, 3.069113764883917e+107, 4.328761281082955e+107, 6.105402296585214e+107, 8.611224963142905e+107, 1.2145505204027233e+108, 1.7130349897073588e+108, 2.416111002931905e+108, 3.407748477738836e+108, 4.80638086306429e+108, 6.779049906922689e+108, 9.561355820489375e+108, 1.3485595530525525e+109, 1.902044963364012e+109, 2.682695795279738e+109, 3.7837468980138e+109, 5.3366992312062146e+109, 7.527025314327229e+109, 1.0616320618412922e+110, 1.4973546489661708e+110, 2.111909601610903e+110, 2.9786945720946193e+110, 4.2012315996188765e+110, 5.9255309755455895e+110, 8.357529574264728e+110, 1.1787686347935817e+111, 1.662567247924299e+111, 2.3449299313555402e+111, 3.307352764125477e+111, 4.664780026090373e+111, 6.579332246575601e+111, 9.279668616466272e+111, 1.3088296259282026e+112, 1.8460087967663742e+112, 2.603660866342325e+112, 3.6722738910006538e+112, 5.1794746792311386e+112, 7.305271542664389e+112, 1.030355308542297e+113, 1.4532410679618515e+113, 2.0496906107065863e+113, 2.890939220091708e+113, 4.077459071436824e+113, 5.750958845380027e+113, 8.111308307896822e+113, 1.1440409196913381e+114, 1.6135863368107733e+114, 2.2758459260747354e+114, 3.20991480968306e+114, 4.527350892858412e+114, 6.385498470312888e+114, 9.006280202112759e+114, 1.2702701826032025e+115, 1.7916235122600268e+115, 2.5269543862746474e+115, 3.564084991415273e+115, 5.026882121429393e+115, 7.090050861192318e+115, 1e+116, 1.4104271176297772e+116, 1.989304654145376e+116, 2.8057692294337633e+116, 3.9573330070045834e+116, 5.581529786570654e+116, 7.872340968837592e+116, 1.1103363181676412e+117, 1.5660484528327943e+117, 2.20879720539753e+117, 3.1153474758375447e+117, 4.3939705607607505e+117, 6.19737523296388e+117, 8.740946086699414e+117, 1.2328467394420734e+118, 1.7388404731904956e+118, 2.4525077566200683e+118, 3.4590834461343143e+118, 4.878785094572097e+118, 6.8811707984724435e+118, 9.70538989520768e+118, 1.3688745095370483e+119, 1.9306977288832142e+119, 2.7231084327631084e+119, 3.840745977815411e+119, 5.41709227903835e+119, 7.64041384905858e+119, 1.0776246882625972e+120, 1.519911082952902e+120, 2.1437238077828148e+120, 3.023566191205446e+120, 4.264519748024741e+120, 6.014794296281798e+120, 8.48342898244076e+120, 1.1965258287320444e+121, 1.6876124757881176e+121, 2.380254399901887e+121, 3.357175352479213e+121, 4.735051155774987e+121, 6.67844455346926e+121, 9.419459301799624e+121, 1.328546083266824e+122, 1.873817422860356e+122, 2.6428829066893896e+122, 3.727593720314923e+122, 5.2574992666386344e+122, 7.415319536585553e+122, 1.0458767760290136e+123, 1.4751329666105256e+123, 2.080567538217146e+123, 2.9344888759616904e+123, 4.138882687039292e+123, 5.837592378488615e+123, 8.233498592288982e+123, 1.1612749687530977e+124, 1.6378937069540412e+124, 2.310129700083139e+124, 3.2582695742392034e+124, 4.595551764055001e+124, 6.481690828494321e+124, 9.141952512600607e+124, 1.2894057731855572e+125, 1.8186128681292996e+125, 2.56502090568003e+125, 3.617775042658405e+125, 5.102608025649638e+125, 7.196856730011351e+125, 1.0150641893704374e+126, 1.4316740588229522e+126, 2.0192719161709806e+126, 2.848035868435793e+126, 4.016947020824115e+126, 5.665611008252291e+126, 7.990931403980816e+126, 1.1270626347293928e+127, 1.5896397032896002e+127, 2.242070944780605e+127, 3.162277660168379e+127, 4.460162165376323e+127, 6.290733667072907e+127, 8.872621353826238e+127, 1.2514185761897961e+128, 1.7650346953637338e+128, 2.489452797898423e+128, 3.5111917342152566e+128, 4.952280037134399e+128, 6.984830058470956e+128, 9.851593726503019e+128, 1.3894954943731247e+129, 1.9597821250882484e+129, 2.7641298538705775e+129, 3.898603702549095e+129, 5.498696382967098e+129, 7.755510490149565e+129, 1.0938582306368436e+130, 1.5428073113327312e+130, 2.1760172691811704e+130, 3.069113764883817e+130, 4.328761281082955e+130, 6.105402296585214e+130, 8.611224963142906e+130, 1.2145505204027231e+131, 1.7130349897073586e+131, 2.4161110029319046e+131, 3.4077484777388367e+131, 4.806380863064448e+131, 6.7790499069229096e+131, 9.561355820489062e+131, 1.3485595530525081e+132, 1.9020449633639494e+132, 2.6826957952796506e+132, 3.7837468980138003e+132, 5.336699231206214e+132, 7.527025314327229e+132, 1.061632061841292e+133, 1.497354648966171e+133, 2.1119096016109031e+133, 2.978694572094717e+133, 4.201231599619014e+133, 5.925530975545784e+133, 8.357529574264454e+133, 1.178768634793543e+134, 1.6625672479242446e+134, 2.3449299313554634e+134, 3.3073527641254775e+134, 4.664780026090373e+134, 6.579332246575601e+134, 9.279668616466272e+134, 1.3088296259282026e+135, 1.846008796766374e+135, 2.6036608663424104e+135, 3.672273891000774e+135, 5.179474679231308e+135, 7.30527154266415e+135, 1.0303553085422633e+136, 1.453241067961804e+136, 2.0496906107065864e+136, 2.8909392200917085e+136, 4.0774590714368236e+136, 5.750958845380027e+136, 8.111308307896823e+136, 1.144040919691338e+137, 1.6135863368107733e+137, 2.2758459260748097e+137, 3.2099148096831647e+137, 4.527350892858561e+137, 6.385498470312679e+137, 9.006280202112464e+137, 1.2702701826031609e+138, 1.7916235122600267e+138, 2.5269543862746473e+138, 3.5640849914152733e+138, 5.026882121429393e+138, 7.090050861192318e+138, 9.999999999999999e+138, 1.410427117629777e+139, 1.9893046541454411e+139, 2.805769229433855e+139, 3.957333007004713e+139, 5.581529786570472e+139, 7.872340968837335e+139, 1.1103363181676049e+140, 1.566048452832794e+140, 2.20879720539753e+140, 3.115347475837545e+140, 4.3939705607607504e+140, 6.19737523296388e+140, 8.740946086699414e+140, 1.2328467394420735e+141, 1.7388404731905526e+141, 2.4525077566201488e+141, 3.459083446134201e+141, 4.878785094571938e+141, 6.881170798472218e+141, 9.705389895207362e+141, 1.3688745095370485e+142, 1.930697728883214e+142, 2.7231084327631083e+142, 3.840745977815411e+142, 5.41709227903835e+142, 7.640413849058581e+142, 1.0776246882626324e+143, 1.5199110829529518e+143, 2.143723807782885e+143, 3.0235661912053467e+143, 4.264519748024601e+143, 6.014794296281602e+143, 8.483428982440483e+143, 1.1965258287320444e+144, 1.6876124757881176e+144, 2.3802543999018867e+144, 3.357175352479213e+144, 4.7350511557749876e+144, 6.678444553469261e+144, 9.419459301799933e+144, 1.3285460832668673e+145, 1.8738174228604177e+145, 2.642882906689303e+145, 3.727593720314801e+145, 5.257499266638462e+145, 7.415319536585553e+145, 1.0458767760290137e+146, 1.4751329666105256e+146, 2.080567538217146e+146, 2.93448887596169e+146, 4.138882687039292e+146, 5.837592378488615e+146, 8.233498592289253e+146, 1.1612749687531358e+147, 1.637893706954095e+147, 2.310129700083064e+147, 3.258269574239097e+147, 4.59555176405485e+147, 6.48169082849432e+147, 9.141952512600607e+147, 1.2894057731855573e+148, 1.8186128681292997e+148, 2.5650209056800303e+148, 3.617775042658405e+148, 5.1026080256496387e+148, 7.196856730011588e+148, 1.0150641893704706e+149, 1.4316740588229056e+149, 2.0192719161709145e+149, 2.8480358684357e+149, 4.0169470208239834e+149, 5.6656110082522915e+149, 7.990931403980815e+149, 1.1270626347293927e+150, 1.5896397032896e+150, 2.2420709447806044e+150, 3.1622776601683793e+150, 4.460162165376323e+150, 6.2907336670731125e+150, 8.87262135382653e+150, 1.2514185761897143e+151, 1.7650346953636184e+151, 2.48945279789826e+151, 3.511191734215027e+151, 4.952280037134399e+151, 6.984830058470956e+151, 9.851593726503018e+151, 1.3894954943731247e+152, 1.9597821250882485e+152, 2.7641298538705777e+152, 3.8986037025490957e+152, 5.498696382967098e+152, 7.7555104901495655e+152, 1.0938582306368435e+153, 1.5428073113327312e+153, 2.17601726918117e+153, 3.069113764883817e+153, 4.3287612810829555e+153, 6.1054022965852145e+153, 8.611224963142904e+153, 1.2145505204027232e+154, 1.7130349897073586e+154, 2.416111002931905e+154, 3.4077484777388367e+154, 4.806380863064448e+154, 6.77904990692291e+154, 9.561355820489063e+154, 1.3485595530525082e+155, 1.9020449633639495e+155, 2.6826957952796503e+155, 3.7837468980138e+155, 5.336699231206214e+155, 7.527025314327229e+155, 1.061632061841292e+156, 1.4973546489661708e+156, 2.111909601610903e+156, 2.9786945720947168e+156, 4.201231599619014e+156, 5.9255309755457835e+156, 8.357529574264454e+156, 1.1787686347935432e+157, 1.6625672479242447e+157, 2.3449299313554635e+157, 3.307352764125477e+157, 4.664780026090373e+157, 6.579332246575602e+157, 9.279668616466273e+157, 1.3088296259282025e+158, 1.846008796766374e+158, 2.6036608663424103e+158, 3.672273891000774e+158, 5.179474679231308e+158, 7.30527154266415e+158, 1.0303553085422634e+159, 1.4532410679618042e+159, 2.0496906107065864e+159, 2.8909392200917084e+159, 4.077459071436824e+159, 5.750958845380027e+159, 8.111308307896823e+159, 1.1440409196913381e+160, 1.6135863368107732e+160, 2.2758459260748097e+160, 3.209914809683165e+160, 4.5273508928582646e+160, 6.385498470312679e+160, 9.006280202112464e+160, 1.2702701826031608e+161, 1.791623512260027e+161, 2.5269543862746473e+161, 3.5640849914152733e+161, 5.026882121429393e+161, 7.090050861192318e+161, 1e+162, 1.4104271176297772e+162, 1.989304654145441e+162, 2.805769229433855e+162, 3.9573330070044546e+162, 5.581529786570471e+162, 7.872340968837335e+162, 1.1103363181676049e+163, 1.566048452832794e+163, 2.20879720539753e+163, 3.115347475837545e+163, 4.3939705607607504e+163, 6.19737523296388e+163, 8.740946086699414e+163, 1.2328467394420734e+164, 1.7388404731905524e+164, 2.452507756620149e+164, 3.459083446134201e+164, 4.878785094571937e+164, 6.881170798472218e+164, 9.705389895207362e+164, 1.3688745095370482e+165, 1.930697728883214e+165, 2.7231084327631086e+165, 3.840745977815411e+165, 5.417092279038351e+165, 7.64041384905858e+165, 1.0776246882626326e+166, 1.519911082952952e+166, 2.143723807782885e+166, 3.0235661912053466e+166, 4.2645197480246007e+166, 6.014794296281602e+166, 8.483428982440483e+166, 1.1965258287320444e+167, 1.6876124757881177e+167, 2.3802543999018866e+167, 3.357175352479213e+167, 4.735051155774987e+167, 6.678444553469261e+167, 9.419459301799933e+167, 1.3285460832668671e+168, 1.873817422860295e+168, 2.642882906689303e+168, 3.727593720314801e+168, 5.257499266638462e+168, 7.4153195365855535e+168, 1.0458767760290135e+169, 1.4751329666105257e+169, 2.080567538217146e+169, 2.9344888759616905e+169, 4.1388826870392914e+169, 5.837592378488615e+169, 8.233498592289253e+169, 1.1612749687531358e+170, 1.6378937069539877e+170, 2.3101297000830635e+170, 3.258269574239097e+170, 4.5955517640548503e+170, 6.48169082849432e+170, 9.141952512600607e+170, 1.2894057731855571e+171, 1.8186128681292996e+171, 2.56502090568003e+171, 3.617775042658405e+171, 5.102608025649639e+171, 7.196856730011588e+171, 1.0150641893704706e+172, 1.4316740588229054e+172, 2.0192719161709146e+172, 2.8480358684357e+172, 4.016947020823983e+172, 5.665611008252292e+172, 7.990931403980814e+172, 1.1270626347293928e+173, 1.5896397032896e+173, 2.2420709447806045e+173, 3.1622776601683794e+173, 4.4601621653763233e+173, 6.290733667073113e+173, 8.872621353826529e+173, 1.2514185761897142e+174, 1.7650346953636183e+174, 2.48945279789826e+174, 3.511191734215027e+174, 4.952280037134399e+174, 6.984830058470956e+174, 9.851593726503018e+174, 1.3894954943731247e+175, 1.9597821250882483e+175, 2.7641298538705777e+175, 3.8986037025490954e+175, 5.498696382967098e+175, 7.755510490149565e+175, 1.0938582306368436e+176, 1.5428073113327312e+176, 2.1760172691811703e+176, 3.0691137648838165e+176, 4.3287612810829557e+176, 6.105402296585214e+176, 8.611224963142906e+176, 1.2145505204027232e+177, 1.7130349897073586e+177, 2.4161110029319048e+177, 3.407748477738836e+177, 4.806380863064448e+177, 6.77904990692291e+177, 9.561355820489063e+177, 1.3485595530525081e+178, 1.90204496336395e+178, 2.6826957952796504e+178, 3.7837468980138e+178, 5.336699231206214e+178, 7.527025314327228e+178, 1.061632061841292e+179, 1.497354648966171e+179, 2.111909601610903e+179, 2.978694572094717e+179, 4.201231599619014e+179, 5.925530975545395e+179, 8.357529574264454e+179, 1.1787686347935434e+180, 1.6625672479242447e+180, 2.3449299313554635e+180, 3.307352764125477e+180, 4.664780026090373e+180, 6.579332246575602e+180, 9.279668616466273e+180, 1.3088296259282026e+181, 1.846008796766374e+181, 2.60366086634241e+181, 3.672273891000774e+181, 5.1794746792309696e+181, 7.30527154266415e+181, 1.0303553085422634e+182, 1.453241067961804e+182, 2.0496906107065864e+182, 2.8909392200917084e+182, 4.077459071436824e+182, 5.750958845380027e+182, 8.111308307896822e+182, 1.144040919691338e+183, 1.613586336810773e+183, 2.2758459260748096e+183, 3.2099148096831646e+183, 4.527350892858265e+183, 6.385498470312679e+183, 9.006280202112463e+183, 1.270270182603161e+184, 1.7916235122600268e+184, 2.526954386274647e+184, 3.5640849914152735e+184, 5.026882121429393e+184, 7.090050861192318e+184, 1e+185, 1.410427117629777e+185, 1.9893046541454412e+185, 2.8057692294338555e+185, 3.957333007004454e+185, 5.58152978657047e+185, 7.872340968837335e+185, 1.110336318167605e+186, 1.5660484528327943e+186, 2.20879720539753e+186, 3.1153474758375447e+186, 4.39397056076075e+186, 6.197375232963881e+186, 8.740946086699414e+186, 1.2328467394420735e+187, 1.7388404731905526e+187, 2.452507756619988e+187, 3.459083446134201e+187, 4.878785094571937e+187, 6.881170798472218e+187, 9.705389895207361e+187, 1.3688745095370484e+188, 1.930697728883214e+188, 2.7231084327631086e+188, 3.840745977815411e+188, 5.41709227903835e+188, 7.64041384905858e+188, 1.0776246882626325e+189, 1.5199110829529517e+189, 2.1437238077827446e+189, 3.023566191205347e+189, 4.264519748024601e+189, 6.014794296281602e+189, 8.483428982440483e+189, 1.1965258287320443e+190, 1.6876124757881177e+190, 2.380254399901887e+190, 3.3571753524792132e+190, 4.735051155774987e+190, 6.678444553469261e+190, 9.419459301799933e+190, 1.3285460832668673e+191, 1.873817422860295e+191, 2.642882906689303e+191, 3.727593720314801e+191, 5.257499266638462e+191, 7.415319536585554e+191, 1.0458767760290136e+192, 1.4751329666105256e+192, 2.0805675382171459e+192, 2.9344888759616903e+192, 4.138882687039292e+192, 5.837592378488615e+192, 8.233498592289253e+192, 1.1612749687531358e+193, 1.6378937069539876e+193, 2.3101297000830636e+193, 3.258269574239097e+193, 4.595551764054851e+193, 6.48169082849432e+193, 9.141952512600606e+193, 1.2894057731855572e+194, 1.8186128681292998e+194, 2.5650209056800302e+194, 3.6177750426584053e+194, 5.1026080256496383e+194, 7.196856730011587e+194, 1.0150641893704707e+195, 1.4316740588229055e+195, 2.0192719161709145e+195, 2.8480358684357e+195, 4.0169470208239834e+195, 5.665611008252291e+195, 7.990931403980815e+195, 1.127062634729393e+196, 1.5896397032896e+196, 2.2420709447806048e+196, 3.1622776601683794e+196, 4.460162165376323e+196, 6.290733667073113e+196, 8.872621353826528e+196, 1.2514185761897143e+197, 1.7650346953636185e+197, 2.48945279789826e+197, 3.511191734215027e+197, 4.952280037134399e+197, 6.984830058470956e+197, 9.851593726503018e+197, 1.3894954943731246e+198, 1.9597821250882484e+198, 2.7641298538705775e+198, 3.898603702549096e+198, 5.498696382967099e+198, 7.755510490149058e+198, 1.0938582306368435e+199, 1.5428073113327312e+199, 2.17601726918117e+199, 3.069113764883817e+199, 4.328761281082955e+199, 6.105402296585214e+199, 8.611224963142905e+199, 1.2145505204027233e+200, 1.7130349897073586e+200, 2.4161110029319048e+200, 3.407748477738836e+200, 4.806380863064448e+200, 6.779049906922466e+200, 9.561355820489063e+200, 1.348559553052508e+201, 1.9020449633639496e+201, 2.6826957952796504e+201, 3.7837468980138e+201, 5.336699231206215e+201, 7.527025314327229e+201, 1.061632061841292e+202, 1.4973546489661708e+202, 2.111909601610903e+202, 2.978694572094717e+202, 4.201231599619014e+202, 5.925530975545396e+202, 8.357529574264454e+202, 1.1787686347935432e+203, 1.6625672479242445e+203, 2.3449299313554632e+203, 3.3073527641254776e+203, 4.664780026090373e+203, 6.579332246575602e+203, 9.279668616466272e+203, 1.3088296259282026e+204, 1.8460087967663742e+204, 2.60366086634241e+204, 3.6722738910007737e+204, 5.179474679230969e+204, 7.30527154266415e+204, 1.0303553085422632e+205, 1.4532410679618043e+205, 2.0496906107065865e+205, 2.890939220091708e+205, 4.0774590714368235e+205, 5.750958845380028e+205, 8.111308307896822e+205, 1.144040919691338e+206, 1.6135863368107734e+206, 2.2758459260748096e+206, 3.2099148096829547e+206, 4.527350892858264e+206, 6.3854984703126795e+206, 9.006280202112464e+206, 1.2702701826031609e+207, 1.791623512260027e+207, 2.5269543862746472e+207, 3.5640849914152733e+207, 5.026882121429393e+207, 7.090050861192318e+207, 1e+208, 1.410427117629777e+208, 1.9893046541454413e+208, 2.8057692294336714e+208, 3.9573330070044543e+208, 5.581529786570472e+208, 7.872340968837335e+208, 1.110336318167605e+209, 1.5660484528327941e+209, 2.20879720539753e+209, 3.115347475837545e+209, 4.39397056076075e+209, 6.1973752329638806e+209, 8.740946086699415e+209, 1.2328467394420735e+210, 1.7388404731905523e+210, 2.4525077566199882e+210, 3.4590834461342006e+210, 4.878785094571938e+210, 6.881170798472218e+210, 9.705389895207362e+210, 1.3688745095370484e+211, 1.930697728883214e+211, 2.7231084327631085e+211, 3.840745977815411e+211, 5.41709227903835e+211, 7.64041384905858e+211, 1.0776246882626324e+212, 1.5199110829529517e+212, 2.1437238077827445e+212, 3.023566191205347e+212, 4.2645197480246014e+212, 6.0147942962816016e+212, 8.483428982440483e+212, 1.1965258287320443e+213, 1.6876124757881177e+213, 2.3802543999018868e+213, 3.357175352479213e+213, 4.735051155774988e+213, 6.67844455346926e+213, 9.419459301799934e+213, 1.3285460832668672e+214, 1.8738174228602948e+214, 2.642882906689303e+214, 3.7275937203148007e+214, 5.257499266638462e+214, 7.415319536585553e+214, 1.0458767760290136e+215, 1.4751329666105257e+215, 2.080567538217146e+215, 2.9344888759616906e+215, 4.1388826870392916e+215, 5.837592378488615e+215, 8.233498592289251e+215, 1.1612749687531357e+216, 1.6378937069539876e+216, 2.3101297000830636e+216, 3.258269574239097e+216, 4.5955517640548505e+216, 6.48169082849432e+216, 9.141952512600606e+216, 1.289405773185557e+217, 1.8186128681292996e+217, 2.56502090568003e+217, 3.617775042658405e+217, 5.102608025649638e+217, 7.196856730011587e+217, 1.0150641893704043e+218, 1.4316740588229055e+218, 2.0192719161709147e+218, 2.8480358684357e+218, 4.016947020823984e+218, 5.6656110082522915e+218, 7.990931403980814e+218, 1.1270626347293929e+219, 1.5896397032895998e+219, 2.2420709447806044e+219, 3.1622776601683793e+219, 4.460162165376323e+219, 6.290733667073112e+219, 8.872621353825948e+219, 1.251418576189714e+220, 1.7650346953636183e+220, 2.48945279789826e+220, 3.511191734215027e+220, 4.952280037134399e+220, 6.984830058470956e+220, 9.851593726503019e+220, 1.3894954943731248e+221, 1.9597821250882485e+221, 2.7641298538705778e+221, 3.898603702549096e+221, 5.498696382967098e+221, 7.755510490149057e+221, 1.0938582306368436e+222, 1.5428073113327313e+222, 2.1760172691811703e+222, 3.069113764883817e+222, 4.3287612810829555e+222, 6.105402296585214e+222, 8.611224963142905e+222, 1.2145505204027233e+223, 1.7130349897073588e+223, 2.4161110029319047e+223, 3.407748477738836e+223, 4.806380863064448e+223, 6.779049906922465e+223, 9.561355820489062e+223, 1.3485595530525083e+224, 1.9020449633639495e+224, 2.6826957952796506e+224, 3.7837468980138e+224, 5.336699231206214e+224, 7.527025314327229e+224, 1.061632061841292e+225, 1.4973546489661708e+225, 2.111909601610903e+225, 2.978694572094717e+225, 4.201231599618739e+225, 5.925530975545396e+225, 8.357529574264453e+225, 1.1787686347935432e+226, 1.6625672479242446e+226, 2.3449299313554634e+226, 3.3073527641254773e+226, 4.664780026090373e+226, 6.579332246575602e+226, 9.279668616466272e+226, 1.3088296259282026e+227, 1.8460087967663742e+227, 2.60366086634241e+227, 3.6722738910005337e+227, 5.179474679230969e+227, 7.30527154266415e+227, 1.0303553085422631e+228, 1.453241067961804e+228, 2.0496906107065863e+228, 2.8909392200917083e+228, 4.077459071436824e+228, 5.750958845380027e+228, 8.111308307896823e+228, 1.144040919691338e+229, 1.6135863368107734e+229, 2.2758459260748097e+229, 3.2099148096829545e+229, 4.527350892858264e+229, 6.38549847031268e+229, 9.006280202112464e+229, 1.2702701826031609e+230, 1.7916235122600268e+230, 2.5269543862746477e+230, 3.5640849914152735e+230, 5.026882121429393e+230, 7.090050861192318e+230, 1e+231, 1.410427117629777e+231, 1.9893046541454413e+231, 2.8057692294336717e+231, 3.957333007004454e+231, 5.581529786570471e+231, 7.872340968837334e+231, 1.1103363181676049e+232, 1.566048452832794e+232, 2.2087972053975297e+232, 3.1153474758375445e+232, 4.39397056076075e+232, 6.19737523296388e+232, 8.740946086699414e+232, 1.2328467394420735e+233, 1.7388404731905526e+233, 2.452507756619988e+233, 3.4590834461342014e+233, 4.878785094571938e+233, 6.881170798472218e+233, 9.705389895207362e+233, 1.3688745095370484e+234, 1.930697728883214e+234, 2.7231084327631085e+234, 3.840745977815411e+234, 5.41709227903835e+234, 7.64041384905858e+234, 1.0776246882626325e+235, 1.5199110829529518e+235, 2.1437238077827445e+235, 3.023566191205347e+235, 4.264519748024601e+235, 6.014794296281601e+235, 8.483428982440483e+235, 1.1965258287320443e+236, 1.6876124757881178e+236, 2.3802543999018867e+236, 3.357175352479213e+236, 4.735051155774988e+236, 6.678444553469261e+236, 9.419459301799933e+236, 1.3285460832667804e+237, 1.873817422860295e+237, 2.642882906689303e+237, 3.727593720314801e+237, 5.257499266638462e+237, 7.415319536585553e+237, 1.0458767760290137e+238, 1.4751329666105256e+238, 2.080567538217146e+238, 2.93448887596169e+238, 4.1388826870392915e+238, 5.837592378488615e+238, 8.233498592289252e+238, 1.1612749687530597e+239, 1.6378937069539876e+239, 2.3101297000830637e+239, 3.258269574239097e+239, 4.5955517640548505e+239, 6.481690828494321e+239, 9.141952512600606e+239, 1.2894057731855572e+240, 1.8186128681292996e+240, 2.5650209056800302e+240, 3.617775042658405e+240, 5.102608025649638e+240, 7.196856730011588e+240, 1.0150641893704043e+241, 1.4316740588229056e+241, 2.0192719161709146e+241, 2.8480358684357e+241, 4.016947020823983e+241, 5.665611008252291e+241, 7.990931403980814e+241, 1.1270626347293928e+242, 1.5896397032895998e+242, 2.2420709447806047e+242, 3.162277660168379e+242, 4.460162165376323e+242, 6.290733667073113e+242, 8.872621353825948e+242, 1.2514185761897143e+243, 1.7650346953636185e+243, 2.48945279789826e+243, 3.511191734215027e+243, 4.952280037134399e+243, 6.984830058470956e+243, 9.85159372650302e+243, 1.3894954943731247e+244, 1.9597821250882482e+244, 2.764129853870578e+244, 3.898603702549096e+244, 5.498696382966738e+244, 7.755510490149058e+244, 1.0938582306368435e+245, 1.5428073113327312e+245, 2.1760172691811703e+245, 3.069113764883817e+245, 4.328761281082955e+245, 6.105402296585214e+245, 8.611224963142905e+245, 1.214550520402723e+246, 1.7130349897073587e+246, 2.416111002931905e+246, 3.4077484777388364e+246, 4.806380863064133e+246, 6.779049906922466e+246, 9.561355820489063e+246, 1.3485595530525082e+247, 1.9020449633639495e+247, 2.6826957952796505e+247, 3.7837468980138004e+247, 5.3366992312062145e+247, 7.527025314327229e+247, 1.061632061841292e+248, 1.4973546489661708e+248, 2.111909601610903e+248, 2.978694572094717e+248, 4.201231599618739e+248, 5.925530975545396e+248, 8.357529574264454e+248, 1.1787686347935431e+249, 1.6625672479242446e+249, 2.344929931355463e+249, 3.3073527641254775e+249, 4.664780026090373e+249, 6.579332246575601e+249, 9.279668616466272e+249, 1.3088296259282026e+250, 1.8460087967663743e+250, 2.60366086634241e+250, 3.672273891000534e+250, 5.179474679230969e+250, 7.30527154266415e+250, 1.0303553085422633e+251, 1.453241067961804e+251, 2.0496906107065864e+251, 2.890939220091708e+251, 4.077459071436824e+251, 5.750958845380027e+251, 8.111308307896822e+251, 1.144040919691338e+252, 1.6135863368107732e+252, 2.2758459260748097e+252, 3.2099148096829544e+252, 4.527350892858264e+252, 6.38549847031268e+252, 9.006280202112463e+252, 1.270270182603161e+253, 1.791623512260027e+253, 2.5269543862746474e+253, 3.5640849914152734e+253, 5.0268821214293926e+253, 7.090050861192318e+253, 1e+254, 1.410427117629777e+254, 1.989304654145441e+254, 2.805769229433672e+254, 3.9573330070044544e+254, 5.581529786570471e+254, 7.872340968837335e+254, 1.1103363181676048e+255, 1.5660484528327942e+255, 2.2087972053975296e+255, 3.115347475837545e+255, 4.39397056076075e+255, 6.19737523296388e+255, 8.740946086699414e+255, 1.232846739442154e+256, 1.738840473190439e+256, 2.4525077566199883e+256, 3.459083446134201e+256, 4.878785094571938e+256, 6.881170798472218e+256, 9.705389895207362e+256, 1.3688745095370484e+257, 1.930697728883214e+257, 2.723108432763109e+257, 3.8407459778154113e+257, 5.41709227903835e+257, 7.64041384905858e+257, 1.0776246882626324e+258, 1.5199110829529517e+258, 2.1437238077828847e+258, 3.0235661912055446e+258, 4.26451974802488e+258, 6.014794296281995e+258, 8.483428982441038e+258, 1.196525828731966e+259, 1.6876124757880073e+259, 2.380254399901731e+259, 3.357175352478993e+259, 4.735051155774678e+259, 6.678444553468824e+259, 9.419459301799317e+259, 1.3285460832667803e+260, 1.873817422860295e+260, 2.642882906689303e+260, 3.7275937203148004e+260, 5.257499266638462e+260, 7.415319536585553e+260, 1.0458767760290137e+261, 1.4751329666105255e+261, 2.080567538217146e+261, 2.9344888759616905e+261, 4.138882687039291e+261, 5.837592378488615e+261, 8.233498592289252e+261, 1.1612749687531359e+262, 1.637893706954095e+262, 2.3101297000832147e+262, 3.25826957423931e+262, 4.5955517640551516e+262, 6.481690828494745e+262, 9.141952512600008e+262, 1.2894057731854727e+263, 1.8186128681291806e+263, 2.5650209056798624e+263, 3.6177750426581687e+263, 5.102608025649305e+263, 7.196856730011117e+263, 1.0150641893704043e+264, 1.4316740588229053e+264, 2.0192719161709144e+264, 2.8480358684357e+264, 4.0169470208239835e+264, 5.665611008252291e+264, 7.990931403980815e+264, 1.127062634729393e+265, 1.5896397032895999e+265, 2.2420709447806045e+265, 3.1622776601683792e+265, 4.4601621653763236e+265, 6.290733667073113e+265, 8.872621353826529e+265, 1.2514185761897962e+266, 1.7650346953637336e+266, 2.4894527978984228e+266, 3.5111917342152565e+266, 4.952280037134723e+266, 6.984830058470499e+266, 9.851593726502373e+266, 1.3894954943730337e+267, 1.9597821250881203e+267, 2.7641298538703967e+267, 3.8986037025488407e+267, 5.498696382966738e+267, 7.755510490149058e+267, 1.0938582306368436e+268, 1.5428073113327312e+268, 2.1760172691811702e+268, 3.069113764883817e+268, 4.328761281082955e+268, 6.1054022965852144e+268, 8.611224963142905e+268, 1.2145505204027232e+269, 1.7130349897073587e+269, 2.4161110029319048e+269, 3.407748477738837e+269, 4.806380863064448e+269, 6.77904990692291e+269, 9.561355820489688e+269, 1.3485595530525963e+270, 1.9020449633640741e+270, 2.682695795279826e+270, 3.7837468980135523e+270, 5.336699231205865e+270, 7.527025314326736e+270, 1.0616320618412226e+271, 1.4973546489660727e+271, 2.1119096016107647e+271, 2.978694572094522e+271, 4.201231599618739e+271, 5.925530975545396e+271, 8.357529574264454e+271, 1.1787686347935432e+272, 1.6625672479242446e+272, 2.3449299313554635e+272, 3.3073527641254777e+272, 4.6647800260903734e+272, 6.579332246575602e+272, 9.279668616466272e+272, 1.3088296259282024e+273, 1.846008796766374e+273, 2.60366086634241e+273, 3.672273891000774e+273, 5.179474679231308e+273, 7.305271542664629e+273, 1.0303553085423308e+274, 1.4532410679618993e+274, 2.0496906107067205e+274, 2.8909392200915192e+274, 4.077459071436557e+274, 5.7509588453796506e+274, 8.111308307896292e+274, 1.1440409196912631e+275, 1.6135863368106678e+275, 2.2758459260746608e+275, 3.209914809682954e+275, 4.5273508928582644e+275, 6.38549847031268e+275, 9.006280202112464e+275, 1.270270182603161e+276, 1.7916235122600267e+276, 2.5269543862746474e+276, 3.5640849914152734e+276, 5.026882121429393e+276, 7.090050861192318e+276, 1e+277, 1.410427117629777e+277, 1.989304654145441e+277, 2.8057692294338553e+277, 3.957333007004713e+277, 5.581529786570836e+277, 7.872340968837849e+277, 1.1103363181676776e+278, 1.5660484528328967e+278, 2.2087972053973853e+278, 3.115347475837341e+278, 4.3939705607604624e+278, 6.197375232963474e+278, 8.740946086698843e+278, 1.2328467394419928e+279, 1.7388404731904388e+279, 2.4525077566199885e+279, 3.459083446134201e+279, 4.878785094571938e+279, 6.881170798472218e+279, 9.705389895207362e+279, 1.3688745095370484e+280, 1.930697728883214e+280, 2.7231084327631086e+280, 3.8407459778154105e+280, 5.4170922790383495e+280, 7.64041384905858e+280, 1.0776246882626324e+281, 1.5199110829529518e+281, 2.143723807782885e+281, 3.023566191205545e+281, 4.2645197480248797e+281, 6.014794296281995e+281, 8.483428982441038e+281, 1.196525828731966e+282, 1.6876124757880073e+282, 2.380254399901731e+282, 3.3571753524789936e+282, 4.735051155774678e+282, 6.678444553468823e+282, 9.419459301799318e+282, 1.3285460832667803e+283, 1.873817422860295e+283, 2.642882906689303e+283, 3.727593720314801e+283, 5.257499266638462e+283, 7.415319536585553e+283, 1.0458767760290137e+284, 1.4751329666105257e+284, 2.0805675382171456e+284, 2.9344888759616905e+284, 4.138882687039291e+284, 5.837592378488615e+284, 8.233498592289253e+284, 1.1612749687531358e+285, 1.6378937069540947e+285, 2.3101297000832148e+285, 3.2582695742393105e+285, 4.5955517640551515e+285, 6.481690828494745e+285, 9.141952512600008e+285, 1.289405773185473e+286, 1.8186128681291806e+286, 2.5650209056798623e+286, 3.6177750426581686e+286, 5.102608025649305e+286, 7.196856730011117e+286, 1.0150641893704041e+287, 1.4316740588229055e+287, 2.0192719161709146e+287, 2.8480358684357e+287, 4.0169470208239835e+287, 5.665611008252291e+287, 7.990931403980814e+287, 1.1270626347293929e+288, 1.5896397032896e+288, 2.2420709447806045e+288, 3.1622776601683793e+288, 4.460162165376323e+288, 6.290733667073113e+288, 8.872621353826529e+288, 1.2514185761897963e+289, 1.7650346953637338e+289, 2.4894527978984227e+289, 3.5111917342152565e+289, 4.952280037134075e+289, 6.984830058470499e+289, 9.851593726502373e+289, 1.3894954943730338e+290, 1.95978212508812e+290, 2.7641298538703966e+290, 3.89860370254884e+290, 5.4986963829667385e+290, 7.755510490149057e+290, 1.0938582306368435e+291, 1.5428073113327312e+291, 2.1760172691811703e+291, 3.069113764883817e+291, 4.3287612810829555e+291, 6.105402296585215e+291, 8.611224963142905e+291, 1.2145505204027233e+292, 1.7130349897073588e+292, 2.4161110029319047e+292, 3.4077484777388367e+292, 4.806380863064448e+292, 6.77904990692291e+292, 9.561355820489688e+292, 1.3485595530525964e+293, 1.902044963364074e+293, 2.682695795279826e+293, 3.783746898013552e+293, 5.336699231205865e+293, 7.527025314326736e+293, 1.0616320618412225e+294, 1.4973546489660727e+294, 2.1119096016107648e+294, 2.978694572094522e+294, 4.201231599618739e+294, 5.925530975545396e+294, 8.357529574264455e+294, 1.1787686347935432e+295, 1.6625672479242445e+295, 2.3449299313554635e+295, 3.3073527641254774e+295, 4.664780026090373e+295, 6.579332246575602e+295, 9.279668616466273e+295, 1.3088296259282026e+296, 1.846008796766374e+296, 2.6036608663424102e+296, 3.672273891000774e+296, 5.1794746792313076e+296, 7.305271542664628e+296, 1.0303553085423307e+297, 1.4532410679618993e+297, 2.0496906107064523e+297, 2.890939220091519e+297, 4.077459071436557e+297, 5.750958845379651e+297, 8.111308307896292e+297, 1.1440409196912631e+298, 1.6135863368106675e+298, 2.2758459260746606e+298, 3.209914809682955e+298, 4.527350892858264e+298, 6.38549847031268e+298, 9.006280202112464e+298, 1.2702701826031608e+299, 1.7916235122600267e+299, 2.5269543862746474e+299, 3.564084991415273e+299, 5.0268821214293925e+299, 7.090050861192318e+299, 1e+300], "x": [1.0, 1.1493506493506493, 1.2987012987012987, 1.448051948051948, 1.5974025974025974, 1.7467532467532467, 1.896103896103896, 2.0454545454545454, 2.1948051948051948, 2.344155844155844, 2.4935064935064934, 2.642857142857143, 2.792207792207792, 2.9415584415584415, 3.090909090909091, 3.24025974025974, 3.3896103896103895, 3.538961038961039, 3.688311688311688, 3.8376623376623376, 3.987012987012987, 4.136363636363637, 4.285714285714286, 4.4350649350649345, 4.584415584415584, 4.733766233766234, 4.883116883116883, 5.032467532467532, 5.181818181818182, 5.3311688311688314, 5.48051948051948, 5.629870129870129, 5.779220779220779, 5.928571428571429, 6.077922077922078, 6.227272727272727, 6.376623376623376, 6.525974025974026, 6.675324675324675, 6.824675324675324, 6.974025974025974, 7.123376623376624, 7.2727272727272725, 7.422077922077921, 7.571428571428571, 7.720779220779221, 7.87012987012987, 8.019480519480519, 8.168831168831169, 8.318181818181818, 8.467532467532468, 8.616883116883116, 8.766233766233766, 8.915584415584416, 9.064935064935064, 9.214285714285714, 9.363636363636363, 9.512987012987013, 9.662337662337663, 9.811688311688311, 9.96103896103896, 10.11038961038961, 10.259740259740258, 10.409090909090908, 10.558441558441558, 10.707792207792208, 10.857142857142858, 11.006493506493506, 11.155844155844155, 11.305194805194805, 11.454545454545453, 11.603896103896103, 11.753246753246753, 11.902597402597403, 12.051948051948052, 12.2012987012987, 12.35064935064935, 12.5, 12.649350649350648, 12.798701298701298, 12.948051948051948, 13.097402597402597, 13.246753246753247, 13.396103896103895, 13.545454545454545, 13.694805194805195, 13.844155844155843, 13.993506493506493, 14.142857142857142, 14.292207792207792, 14.441558441558442, 14.59090909090909, 14.74025974025974, 14.88961038961039, 15.038961038961038, 15.188311688311687, 15.337662337662337, 15.487012987012987, 15.636363636363637, 15.785714285714285, 15.935064935064934, 16.084415584415584, 16.233766233766232, 16.383116883116884, 16.532467532467532, 16.68181818181818, 16.83116883116883, 16.98051948051948, 17.129870129870127, 17.27922077922078, 17.428571428571427, 17.57792207792208, 17.727272727272727, 17.876623376623375, 18.025974025974026, 18.175324675324674, 18.324675324675326, 18.474025974025974, 18.623376623376622, 18.772727272727273, 18.92207792207792, 19.07142857142857, 19.22077922077922, 19.37012987012987, 19.519480519480517, 19.66883116883117, 19.818181818181817, 19.967532467532468, 20.116883116883116, 20.266233766233764, 20.415584415584416, 20.564935064935064, 20.714285714285715, 20.863636363636363, 21.01298701298701, 21.162337662337663, 21.31168831168831, 21.46103896103896, 21.61038961038961, 21.75974025974026, 21.909090909090907, 22.058441558441558, 22.207792207792206, 22.357142857142858, 22.506493506493506, 22.655844155844154, 22.805194805194805, 22.954545454545453, 23.103896103896105, 23.253246753246753, 23.4025974025974, 23.551948051948052, 23.7012987012987, 23.85064935064935, 24.0, 24.149350649350648, 24.298701298701296, 24.448051948051948, 24.597402597402596, 24.746753246753247, 24.896103896103895, 25.045454545454543, 25.194805194805195, 25.344155844155843, 25.493506493506494, 25.642857142857142, 25.79220779220779, 25.941558441558442, 26.09090909090909, 26.240259740259738, 26.38961038961039, 26.538961038961038, 26.688311688311686, 26.837662337662337, 26.987012987012985, 27.136363636363637, 27.285714285714285, 27.435064935064933, 27.584415584415584, 27.733766233766232, 27.883116883116884, 28.032467532467532, 28.18181818181818, 28.33116883116883, 28.48051948051948, 28.629870129870127, 28.77922077922078, 28.928571428571427, 29.077922077922075, 29.227272727272727, 29.376623376623375, 29.525974025974026, 29.675324675324674, 29.824675324675322, 29.974025974025974, 30.123376623376622, 30.272727272727273, 30.42207792207792, 30.57142857142857, 30.72077922077922, 30.87012987012987, 31.019480519480517, 31.16883116883117, 31.318181818181817, 31.467532467532465, 31.616883116883116, 31.766233766233764, 31.915584415584416, 32.064935064935064, 32.21428571428571, 32.36363636363636, 32.51298701298701, 32.66233766233766, 32.811688311688314, 32.96103896103896, 33.11038961038961, 33.259740259740255, 33.40909090909091, 33.55844155844156, 33.70779220779221, 33.857142857142854, 34.006493506493506, 34.15584415584416, 34.3051948051948, 34.45454545454545, 34.603896103896105, 34.75324675324675, 34.9025974025974, 35.05194805194805, 35.2012987012987, 35.35064935064935, 35.5, 35.64935064935065, 35.798701298701296, 35.94805194805195, 36.0974025974026, 36.246753246753244, 36.396103896103895, 36.54545454545455, 36.69480519480519, 36.84415584415584, 36.993506493506494, 37.14285714285714, 37.29220779220779, 37.44155844155844, 37.590909090909086, 37.74025974025974, 37.88961038961039, 38.038961038961034, 38.188311688311686, 38.33766233766234, 38.48701298701299, 38.63636363636363, 38.785714285714285, 38.935064935064936, 39.08441558441558, 39.23376623376623, 39.383116883116884, 39.53246753246753, 39.68181818181818, 39.83116883116883, 39.980519480519476, 40.12987012987013, 40.27922077922078, 40.42857142857143, 40.577922077922075, 40.72727272727273, 40.87662337662338, 41.02597402597402, 41.175324675324674, 41.324675324675326, 41.47402597402597, 41.62337662337662, 41.77272727272727, 41.92207792207792, 42.07142857142857, 42.22077922077922, 42.370129870129865, 42.51948051948052, 42.66883116883117, 42.81818181818181, 42.967532467532465, 43.116883116883116, 43.26623376623377, 43.41558441558441, 43.564935064935064, 43.714285714285715, 43.86363636363636, 44.01298701298701, 44.16233766233766, 44.31168831168831, 44.46103896103896, 44.61038961038961, 44.759740259740255, 44.90909090909091, 45.05844155844156, 45.20779220779221, 45.357142857142854, 45.506493506493506, 45.65584415584416, 45.8051948051948, 45.95454545454545, 46.103896103896105, 46.25324675324675, 46.4025974025974, 46.55194805194805, 46.7012987012987, 46.85064935064935, 47.0, 47.149350649350644, 47.298701298701296, 47.44805194805195, 47.59740259740259, 47.746753246753244, 47.896103896103895, 48.04545454545455, 48.19480519480519, 48.34415584415584, 48.493506493506494, 48.64285714285714, 48.79220779220779, 48.94155844155844, 49.090909090909086, 49.24025974025974, 49.38961038961039, 49.538961038961034, 49.688311688311686, 49.83766233766234, 49.98701298701299, 50.13636363636363, 50.285714285714285, 50.435064935064936, 50.58441558441558, 50.73376623376623, 50.883116883116884, 51.03246753246753, 51.18181818181818, 51.33116883116883, 51.480519480519476, 51.62987012987013, 51.77922077922078, 51.92857142857142, 52.077922077922075, 52.22727272727273, 52.37662337662337, 52.52597402597402, 52.675324675324674, 52.824675324675326, 52.97402597402597, 53.12337662337662, 53.27272727272727, 53.42207792207792, 53.57142857142857, 53.72077922077922, 53.870129870129865, 54.01948051948052, 54.16883116883117, 54.31818181818181, 54.467532467532465, 54.616883116883116, 54.76623376623377, 54.91558441558441, 55.064935064935064, 55.214285714285715, 55.36363636363636, 55.51298701298701, 55.66233766233766, 55.81168831168831, 55.96103896103896, 56.11038961038961, 56.259740259740255, 56.40909090909091, 56.55844155844156, 56.7077922077922, 56.857142857142854, 57.006493506493506, 57.15584415584415, 57.3051948051948, 57.45454545454545, 57.603896103896105, 57.75324675324675, 57.9025974025974, 58.05194805194805, 58.2012987012987, 58.35064935064935, 58.5, 58.649350649350644, 58.798701298701296, 58.94805194805195, 59.09740259740259, 59.246753246753244, 59.396103896103895, 59.54545454545455, 59.69480519480519, 59.84415584415584, 59.993506493506494, 60.14285714285714, 60.29220779220779, 60.44155844155844, 60.590909090909086, 60.74025974025974, 60.88961038961039, 61.038961038961034, 61.188311688311686, 61.33766233766234, 61.48701298701298, 61.63636363636363, 61.785714285714285, 61.93506493506493, 62.08441558441558, 62.23376623376623, 62.383116883116884, 62.53246753246753, 62.68181818181818, 62.83116883116883, 62.980519480519476, 63.12987012987013, 63.27922077922078, 63.42857142857142, 63.577922077922075, 63.72727272727273, 63.87662337662337, 64.02597402597402, 64.17532467532467, 64.32467532467533, 64.47402597402598, 64.62337662337663, 64.77272727272728, 64.92207792207792, 65.07142857142857, 65.22077922077922, 65.37012987012987, 65.51948051948051, 65.66883116883116, 65.81818181818181, 65.96753246753246, 66.11688311688312, 66.26623376623377, 66.41558441558442, 66.56493506493506, 66.71428571428571, 66.86363636363636, 67.01298701298701, 67.16233766233766, 67.31168831168831, 67.46103896103895, 67.6103896103896, 67.75974025974025, 67.9090909090909, 68.05844155844156, 68.20779220779221, 68.35714285714286, 68.5064935064935, 68.65584415584415, 68.8051948051948, 68.95454545454545, 69.1038961038961, 69.25324675324676, 69.4025974025974, 69.55194805194805, 69.7012987012987, 69.85064935064935, 70.0, 70.14935064935065, 70.2987012987013, 70.44805194805194, 70.59740259740259, 70.74675324675324, 70.8961038961039, 71.04545454545455, 71.1948051948052, 71.34415584415584, 71.49350649350649, 71.64285714285714, 71.79220779220779, 71.94155844155844, 72.0909090909091, 72.24025974025973, 72.38961038961038, 72.53896103896103, 72.68831168831169, 72.83766233766234, 72.98701298701299, 73.13636363636364, 73.28571428571428, 73.43506493506493, 73.58441558441558, 73.73376623376623, 73.88311688311688, 74.03246753246754, 74.18181818181817, 74.33116883116882, 74.48051948051948, 74.62987012987013, 74.77922077922078, 74.92857142857143, 75.07792207792207, 75.22727272727272, 75.37662337662337, 75.52597402597402, 75.67532467532467, 75.82467532467533, 75.97402597402598, 76.12337662337661, 76.27272727272727, 76.42207792207792, 76.57142857142857, 76.72077922077922, 76.87012987012987, 77.01948051948051, 77.16883116883116, 77.31818181818181, 77.46753246753246, 77.61688311688312, 77.76623376623377, 77.91558441558442, 78.06493506493506, 78.21428571428571, 78.36363636363636, 78.51298701298701, 78.66233766233766, 78.81168831168831, 78.96103896103895, 79.1103896103896, 79.25974025974025, 79.4090909090909, 79.55844155844156, 79.70779220779221, 79.85714285714286, 80.0064935064935, 80.15584415584415, 80.3051948051948, 80.45454545454545, 80.6038961038961, 80.75324675324676, 80.9025974025974, 81.05194805194805, 81.2012987012987, 81.35064935064935, 81.5, 81.64935064935065, 81.79870129870129, 81.94805194805194, 82.09740259740259, 82.24675324675324, 82.3961038961039, 82.54545454545455, 82.6948051948052, 82.84415584415584, 82.99350649350649, 83.14285714285714, 83.29220779220779, 83.44155844155844, 83.5909090909091, 83.74025974025973, 83.88961038961038, 84.03896103896103, 84.18831168831169, 84.33766233766234, 84.48701298701299, 84.63636363636363, 84.78571428571428, 84.93506493506493, 85.08441558441558, 85.23376623376623, 85.38311688311688, 85.53246753246754, 85.68181818181817, 85.83116883116882, 85.98051948051948, 86.12987012987013, 86.27922077922078, 86.42857142857143, 86.57792207792207, 86.72727272727272, 86.87662337662337, 87.02597402597402, 87.17532467532467, 87.32467532467533, 87.47402597402598, 87.62337662337661, 87.77272727272727, 87.92207792207792, 88.07142857142857, 88.22077922077922, 88.37012987012987, 88.51948051948051, 88.66883116883116, 88.81818181818181, 88.96753246753246, 89.11688311688312, 89.26623376623377, 89.41558441558442, 89.56493506493506, 89.71428571428571, 89.86363636363636, 90.01298701298701, 90.16233766233766, 90.31168831168831, 90.46103896103895, 90.6103896103896, 90.75974025974025, 90.9090909090909, 91.05844155844156, 91.20779220779221, 91.35714285714285, 91.5064935064935, 91.65584415584415, 91.8051948051948, 91.95454545454545, 92.1038961038961, 92.25324675324676, 92.4025974025974, 92.55194805194805, 92.7012987012987, 92.85064935064935, 93.0, 93.14935064935065, 93.29870129870129, 93.44805194805194, 93.59740259740259, 93.74675324675324, 93.8961038961039, 94.04545454545455, 94.19480519480518, 94.34415584415584, 94.49350649350649, 94.64285714285714, 94.79220779220779, 94.94155844155844, 95.0909090909091, 95.24025974025973, 95.38961038961038, 95.53896103896103, 95.68831168831169, 95.83766233766234, 95.98701298701299, 96.13636363636363, 96.28571428571428, 96.43506493506493, 96.58441558441558, 96.73376623376623, 96.88311688311688, 97.03246753246754, 97.18181818181817, 97.33116883116882, 97.48051948051948, 97.62987012987013, 97.77922077922078, 97.92857142857143, 98.07792207792207, 98.22727272727272, 98.37662337662337, 98.52597402597402, 98.67532467532467, 98.82467532467533, 98.97402597402598, 99.12337662337661, 99.27272727272727, 99.42207792207792, 99.57142857142857, 99.72077922077922, 99.87012987012987, 100.01948051948051, 100.16883116883116, 100.31818181818181, 100.46753246753246, 100.61688311688312, 100.76623376623377, 100.9155844155844, 101.06493506493506, 101.21428571428571, 101.36363636363636, 101.51298701298701, 101.66233766233766, 101.81168831168831, 101.96103896103895, 102.1103896103896, 102.25974025974025, 102.4090909090909, 102.55844155844156, 102.70779220779221, 102.85714285714285, 103.0064935064935, 103.15584415584415, 103.3051948051948, 103.45454545454545, 103.6038961038961, 103.75324675324674, 103.9025974025974, 104.05194805194805, 104.2012987012987, 104.35064935064935, 104.5, 104.64935064935065, 104.79870129870129, 104.94805194805194, 105.09740259740259, 105.24675324675324, 105.3961038961039, 105.54545454545455, 105.69480519480518, 105.84415584415584, 105.99350649350649, 106.14285714285714, 106.29220779220779, 106.44155844155844, 106.5909090909091, 106.74025974025973, 106.88961038961038, 107.03896103896103, 107.18831168831169, 107.33766233766234, 107.48701298701299, 107.63636363636363, 107.78571428571428, 107.93506493506493, 108.08441558441558, 108.23376623376623, 108.38311688311688, 108.53246753246754, 108.68181818181817, 108.83116883116882, 108.98051948051948, 109.12987012987013, 109.27922077922078, 109.42857142857143, 109.57792207792207, 109.72727272727272, 109.87662337662337, 110.02597402597402, 110.17532467532467, 110.32467532467533, 110.47402597402596, 110.62337662337661, 110.77272727272727, 110.92207792207792, 111.07142857142857, 111.22077922077922, 111.37012987012987, 111.51948051948051, 111.66883116883116, 111.81818181818181, 111.96753246753246, 112.11688311688312, 112.26623376623377, 112.4155844155844, 112.56493506493506, 112.71428571428571, 112.86363636363636, 113.01298701298701, 113.16233766233766, 113.3116883116883, 113.46103896103895, 113.6103896103896, 113.75974025974025, 113.9090909090909, 114.05844155844156, 114.20779220779221, 114.35714285714285, 114.5064935064935, 114.65584415584415, 114.8051948051948, 114.95454545454545, 115.1038961038961, 115.25324675324674, 115.4025974025974, 115.55194805194805, 115.7012987012987, 115.85064935064935, 116.0, 116.14935064935065, 116.29870129870129, 116.44805194805194, 116.59740259740259, 116.74675324675324, 116.8961038961039, 117.04545454545455, 117.19480519480518, 117.34415584415584, 117.49350649350649, 117.64285714285714, 117.79220779220779, 117.94155844155844, 118.0909090909091, 118.24025974025973, 118.38961038961038, 118.53896103896103, 118.68831168831169, 118.83766233766234, 118.98701298701299, 119.13636363636363, 119.28571428571428, 119.43506493506493, 119.58441558441558, 119.73376623376623, 119.88311688311688, 120.03246753246752, 120.18181818181817, 120.33116883116882, 120.48051948051948, 120.62987012987013, 120.77922077922078, 120.92857142857143, 121.07792207792207, 121.22727272727272, 121.37662337662337, 121.52597402597402, 121.67532467532467, 121.82467532467533, 121.97402597402596, 122.12337662337661, 122.27272727272727, 122.42207792207792, 122.57142857142857, 122.72077922077922, 122.87012987012986, 123.01948051948051, 123.16883116883116, 123.31818181818181, 123.46753246753246, 123.61688311688312, 123.76623376623377, 123.9155844155844, 124.06493506493506, 124.21428571428571, 124.36363636363636, 124.51298701298701, 124.66233766233766, 124.8116883116883, 124.96103896103895, 125.1103896103896, 125.25974025974025, 125.4090909090909, 125.55844155844156, 125.70779220779221, 125.85714285714285, 126.0064935064935, 126.15584415584415, 126.3051948051948, 126.45454545454545, 126.6038961038961, 126.75324675324674, 126.9025974025974, 127.05194805194805, 127.2012987012987, 127.35064935064935, 127.5, 127.64935064935065, 127.79870129870129, 127.94805194805194, 128.0974025974026, 128.24675324675326, 128.3961038961039, 128.54545454545456, 128.69480519480518, 128.84415584415584, 128.9935064935065, 129.14285714285714, 129.2922077922078, 129.44155844155844, 129.5909090909091, 129.74025974025975, 129.8896103896104, 130.03896103896102, 130.18831168831167, 130.33766233766232, 130.48701298701297, 130.63636363636363, 130.78571428571428, 130.93506493506493, 131.08441558441558, 131.23376623376623, 131.38311688311688, 131.53246753246754, 131.6818181818182, 131.83116883116884, 131.98051948051946, 132.1298701298701, 132.27922077922076, 132.42857142857142, 132.57792207792207, 132.72727272727272, 132.87662337662337, 133.02597402597402, 133.17532467532467, 133.32467532467533, 133.47402597402598, 133.62337662337663, 133.77272727272728, 133.9220779220779, 134.07142857142856, 134.2207792207792, 134.37012987012986, 134.5194805194805, 134.66883116883116, 134.8181818181818, 134.96753246753246, 135.11688311688312, 135.26623376623377, 135.41558441558442, 135.56493506493507, 135.71428571428572, 135.86363636363635, 136.012987012987, 136.16233766233765, 136.3116883116883, 136.46103896103895, 136.6103896103896, 136.75974025974025, 136.9090909090909, 137.05844155844156, 137.2077922077922, 137.35714285714286, 137.5064935064935, 137.65584415584416, 137.8051948051948, 137.95454545454544, 138.1038961038961, 138.25324675324674, 138.4025974025974, 138.55194805194805, 138.7012987012987, 138.85064935064935, 139.0, 139.14935064935065, 139.2987012987013, 139.44805194805195, 139.5974025974026, 139.74675324675323, 139.89610389610388, 140.04545454545453, 140.19480519480518, 140.34415584415584, 140.4935064935065, 140.64285714285714, 140.7922077922078, 140.94155844155844, 141.0909090909091, 141.24025974025975, 141.3896103896104, 141.53896103896102, 141.68831168831167, 141.83766233766232, 141.98701298701297, 142.13636363636363, 142.28571428571428, 142.43506493506493, 142.58441558441558, 142.73376623376623, 142.88311688311688, 143.03246753246754, 143.1818181818182, 143.33116883116884, 143.48051948051946, 143.6298701298701, 143.77922077922076, 143.92857142857142, 144.07792207792207, 144.22727272727272, 144.37662337662337, 144.52597402597402, 144.67532467532467, 144.82467532467533, 144.97402597402598, 145.12337662337663, 145.27272727272728, 145.4220779220779, 145.57142857142856, 145.7207792207792, 145.87012987012986, 146.0194805194805, 146.16883116883116, 146.3181818181818, 146.46753246753246, 146.61688311688312, 146.76623376623377, 146.91558441558442, 147.06493506493507, 147.21428571428572, 147.36363636363635, 147.512987012987, 147.66233766233765, 147.8116883116883, 147.96103896103895, 148.1103896103896, 148.25974025974025, 148.4090909090909, 148.55844155844156, 148.7077922077922, 148.85714285714286, 149.0064935064935, 149.15584415584414, 149.3051948051948, 149.45454545454544, 149.6038961038961, 149.75324675324674, 149.9025974025974, 150.05194805194805, 150.2012987012987, 150.35064935064935, 150.5, 150.64935064935065, 150.7987012987013, 150.94805194805195, 151.09740259740258, 151.24675324675323, 151.39610389610388, 151.54545454545453, 151.69480519480518, 151.84415584415584, 151.9935064935065, 152.14285714285714, 152.2922077922078, 152.44155844155844, 152.5909090909091, 152.74025974025975, 152.8896103896104, 153.03896103896102, 153.18831168831167, 153.33766233766232, 153.48701298701297, 153.63636363636363, 153.78571428571428, 153.93506493506493, 154.08441558441558, 154.23376623376623, 154.38311688311688, 154.53246753246754, 154.6818181818182, 154.83116883116884, 154.98051948051946, 155.1298701298701, 155.27922077922076, 155.42857142857142, 155.57792207792207, 155.72727272727272, 155.87662337662337, 156.02597402597402, 156.17532467532467, 156.32467532467533, 156.47402597402598, 156.62337662337663, 156.77272727272728, 156.9220779220779, 157.07142857142856, 157.2207792207792, 157.37012987012986, 157.5194805194805, 157.66883116883116, 157.8181818181818, 157.96753246753246, 158.11688311688312, 158.26623376623377, 158.41558441558442, 158.56493506493507, 158.71428571428572, 158.86363636363635, 159.012987012987, 159.16233766233765, 159.3116883116883, 159.46103896103895, 159.6103896103896, 159.75974025974025, 159.9090909090909, 160.05844155844156, 160.2077922077922, 160.35714285714286, 160.5064935064935, 160.65584415584414, 160.8051948051948, 160.95454545454544, 161.1038961038961, 161.25324675324674, 161.4025974025974, 161.55194805194805, 161.7012987012987, 161.85064935064935, 162.0, 162.14935064935065, 162.2987012987013, 162.44805194805195, 162.59740259740258, 162.74675324675323, 162.89610389610388, 163.04545454545453, 163.19480519480518, 163.34415584415584, 163.4935064935065, 163.64285714285714, 163.7922077922078, 163.94155844155844, 164.0909090909091, 164.24025974025975, 164.3896103896104, 164.53896103896102, 164.68831168831167, 164.83766233766232, 164.98701298701297, 165.13636363636363, 165.28571428571428, 165.43506493506493, 165.58441558441558, 165.73376623376623, 165.88311688311688, 166.03246753246754, 166.1818181818182, 166.33116883116884, 166.48051948051946, 166.6298701298701, 166.77922077922076, 166.92857142857142, 167.07792207792207, 167.22727272727272, 167.37662337662337, 167.52597402597402, 167.67532467532467, 167.82467532467533, 167.97402597402598, 168.12337662337663, 168.27272727272725, 168.4220779220779, 168.57142857142856, 168.7207792207792, 168.87012987012986, 169.0194805194805, 169.16883116883116, 169.3181818181818, 169.46753246753246, 169.61688311688312, 169.76623376623377, 169.91558441558442, 170.06493506493507, 170.2142857142857, 170.36363636363635, 170.512987012987, 170.66233766233765, 170.8116883116883, 170.96103896103895, 171.1103896103896, 171.25974025974025, 171.4090909090909, 171.55844155844156, 171.7077922077922, 171.85714285714286, 172.0064935064935, 172.15584415584414, 172.3051948051948, 172.45454545454544, 172.6038961038961, 172.75324675324674, 172.9025974025974, 173.05194805194805, 173.2012987012987, 173.35064935064935, 173.5, 173.64935064935065, 173.7987012987013, 173.94805194805195, 174.09740259740258, 174.24675324675323, 174.39610389610388, 174.54545454545453, 174.69480519480518, 174.84415584415584, 174.9935064935065, 175.14285714285714, 175.2922077922078, 175.44155844155844, 175.5909090909091, 175.74025974025975, 175.8896103896104, 176.03896103896102, 176.18831168831167, 176.33766233766232, 176.48701298701297, 176.63636363636363, 176.78571428571428, 176.93506493506493, 177.08441558441558, 177.23376623376623, 177.38311688311688, 177.53246753246754, 177.6818181818182, 177.83116883116884, 177.98051948051946, 178.1298701298701, 178.27922077922076, 178.42857142857142, 178.57792207792207, 178.72727272727272, 178.87662337662337, 179.02597402597402, 179.17532467532467, 179.32467532467533, 179.47402597402598, 179.62337662337663, 179.77272727272725, 179.9220779220779, 180.07142857142856, 180.2207792207792, 180.37012987012986, 180.5194805194805, 180.66883116883116, 180.8181818181818, 180.96753246753246, 181.11688311688312, 181.26623376623377, 181.41558441558442, 181.56493506493507, 181.7142857142857, 181.86363636363635, 182.012987012987, 182.16233766233765, 182.3116883116883, 182.46103896103895, 182.6103896103896, 182.75974025974025, 182.9090909090909, 183.05844155844156, 183.2077922077922, 183.35714285714286, 183.5064935064935, 183.65584415584414, 183.8051948051948, 183.95454545454544, 184.1038961038961, 184.25324675324674, 184.4025974025974, 184.55194805194805, 184.7012987012987, 184.85064935064935, 185.0, 185.14935064935065, 185.2987012987013, 185.44805194805195, 185.59740259740258, 185.74675324675323, 185.89610389610388, 186.04545454545453, 186.19480519480518, 186.34415584415584, 186.4935064935065, 186.64285714285714, 186.7922077922078, 186.94155844155844, 187.0909090909091, 187.24025974025975, 187.38961038961037, 187.53896103896102, 187.68831168831167, 187.83766233766232, 187.98701298701297, 188.13636363636363, 188.28571428571428, 188.43506493506493, 188.58441558441558, 188.73376623376623, 188.88311688311688, 189.03246753246754, 189.1818181818182, 189.3311688311688, 189.48051948051946, 189.6298701298701, 189.77922077922076, 189.92857142857142, 190.07792207792207, 190.22727272727272, 190.37662337662337, 190.52597402597402, 190.67532467532467, 190.82467532467533, 190.97402597402598, 191.12337662337663, 191.27272727272725, 191.4220779220779, 191.57142857142856, 191.7207792207792, 191.87012987012986, 192.0194805194805, 192.16883116883116, 192.3181818181818, 192.46753246753246, 192.61688311688312, 192.76623376623377, 192.91558441558442, 193.06493506493507, 193.2142857142857, 193.36363636363635, 193.512987012987, 193.66233766233765, 193.8116883116883, 193.96103896103895, 194.1103896103896, 194.25974025974025, 194.4090909090909, 194.55844155844156, 194.7077922077922, 194.85714285714286, 195.0064935064935, 195.15584415584414, 195.3051948051948, 195.45454545454544, 195.6038961038961, 195.75324675324674, 195.9025974025974, 196.05194805194805, 196.2012987012987, 196.35064935064935, 196.5, 196.64935064935065, 196.7987012987013, 196.94805194805195, 197.09740259740258, 197.24675324675323, 197.39610389610388, 197.54545454545453, 197.69480519480518, 197.84415584415584, 197.9935064935065, 198.14285714285714, 198.2922077922078, 198.44155844155844, 198.5909090909091, 198.74025974025975, 198.88961038961037, 199.03896103896102, 199.18831168831167, 199.33766233766232, 199.48701298701297, 199.63636363636363, 199.78571428571428, 199.93506493506493, 200.08441558441558, 200.23376623376623, 200.38311688311688, 200.53246753246754, 200.6818181818182, 200.8311688311688, 200.98051948051946, 201.1298701298701, 201.27922077922076, 201.42857142857142, 201.57792207792207, 201.72727272727272, 201.87662337662337, 202.02597402597402, 202.17532467532467, 202.32467532467533, 202.47402597402598, 202.62337662337663, 202.77272727272725, 202.9220779220779, 203.07142857142856, 203.2207792207792, 203.37012987012986, 203.5194805194805, 203.66883116883116, 203.8181818181818, 203.96753246753246, 204.11688311688312, 204.26623376623377, 204.41558441558442, 204.56493506493507, 204.7142857142857, 204.86363636363635, 205.012987012987, 205.16233766233765, 205.3116883116883, 205.46103896103895, 205.6103896103896, 205.75974025974025, 205.9090909090909, 206.05844155844156, 206.2077922077922, 206.35714285714286, 206.50649350649348, 206.65584415584414, 206.8051948051948, 206.95454545454544, 207.1038961038961, 207.25324675324674, 207.4025974025974, 207.55194805194805, 207.7012987012987, 207.85064935064935, 208.0, 208.14935064935065, 208.2987012987013, 208.44805194805193, 208.59740259740258, 208.74675324675323, 208.89610389610388, 209.04545454545453, 209.19480519480518, 209.34415584415584, 209.4935064935065, 209.64285714285714, 209.7922077922078, 209.94155844155844, 210.0909090909091, 210.24025974025975, 210.38961038961037, 210.53896103896102, 210.68831168831167, 210.83766233766232, 210.98701298701297, 211.13636363636363, 211.28571428571428, 211.43506493506493, 211.58441558441558, 211.73376623376623, 211.88311688311688, 212.03246753246754, 212.1818181818182, 212.3311688311688, 212.48051948051946, 212.6298701298701, 212.77922077922076, 212.92857142857142, 213.07792207792207, 213.22727272727272, 213.37662337662337, 213.52597402597402, 213.67532467532467, 213.82467532467533, 213.97402597402598, 214.12337662337663, 214.27272727272725, 214.4220779220779, 214.57142857142856, 214.7207792207792, 214.87012987012986, 215.0194805194805, 215.16883116883116, 215.3181818181818, 215.46753246753246, 215.61688311688312, 215.76623376623377, 215.91558441558442, 216.06493506493507, 216.2142857142857, 216.36363636363635, 216.512987012987, 216.66233766233765, 216.8116883116883, 216.96103896103895, 217.1103896103896, 217.25974025974025, 217.4090909090909, 217.55844155844156, 217.7077922077922, 217.85714285714286, 218.00649350649348, 218.15584415584414, 218.3051948051948, 218.45454545454544, 218.6038961038961, 218.75324675324674, 218.9025974025974, 219.05194805194805, 219.2012987012987, 219.35064935064935, 219.5, 219.64935064935065, 219.7987012987013, 219.94805194805193, 220.09740259740258, 220.24675324675323, 220.39610389610388, 220.54545454545453, 220.69480519480518, 220.84415584415584, 220.9935064935065, 221.14285714285714, 221.2922077922078, 221.44155844155844, 221.5909090909091, 221.74025974025975, 221.88961038961037, 222.03896103896102, 222.18831168831167, 222.33766233766232, 222.48701298701297, 222.63636363636363, 222.78571428571428, 222.93506493506493, 223.08441558441558, 223.23376623376623, 223.38311688311688, 223.53246753246754, 223.6818181818182, 223.8311688311688, 223.98051948051946, 224.1298701298701, 224.27922077922076, 224.42857142857142, 224.57792207792207, 224.72727272727272, 224.87662337662337, 225.02597402597402, 225.17532467532467, 225.32467532467533, 225.47402597402598, 225.6233766233766, 225.77272727272725, 225.9220779220779, 226.07142857142856, 226.2207792207792, 226.37012987012986, 226.5194805194805, 226.66883116883116, 226.8181818181818, 226.96753246753246, 227.11688311688312, 227.26623376623377, 227.41558441558442, 227.56493506493504, 227.7142857142857, 227.86363636363635, 228.012987012987, 228.16233766233765, 228.3116883116883, 228.46103896103895, 228.6103896103896, 228.75974025974025, 228.9090909090909, 229.05844155844156, 229.2077922077922, 229.35714285714286, 229.50649350649348, 229.65584415584414, 229.8051948051948, 229.95454545454544, 230.1038961038961, 230.25324675324674, 230.4025974025974, 230.55194805194805, 230.7012987012987, 230.85064935064935, 231.0, 231.14935064935065, 231.2987012987013, 231.44805194805193, 231.59740259740258, 231.74675324675323, 231.89610389610388, 232.04545454545453, 232.19480519480518, 232.34415584415584, 232.4935064935065, 232.64285714285714, 232.7922077922078, 232.94155844155844, 233.0909090909091, 233.24025974025975, 233.38961038961037, 233.53896103896102, 233.68831168831167, 233.83766233766232, 233.98701298701297, 234.13636363636363, 234.28571428571428, 234.43506493506493, 234.58441558441558, 234.73376623376623, 234.88311688311688, 235.03246753246754, 235.1818181818182, 235.3311688311688, 235.48051948051946, 235.6298701298701, 235.77922077922076, 235.92857142857142, 236.07792207792207, 236.22727272727272, 236.37662337662337, 236.52597402597402, 236.67532467532467, 236.82467532467533, 236.97402597402598, 237.1233766233766, 237.27272727272725, 237.4220779220779, 237.57142857142856, 237.7207792207792, 237.87012987012986, 238.0194805194805, 238.16883116883116, 238.3181818181818, 238.46753246753246, 238.61688311688312, 238.76623376623377, 238.91558441558442, 239.06493506493504, 239.2142857142857, 239.36363636363635, 239.512987012987, 239.66233766233765, 239.8116883116883, 239.96103896103895, 240.1103896103896, 240.25974025974025, 240.4090909090909, 240.55844155844156, 240.7077922077922, 240.85714285714286, 241.00649350649348, 241.15584415584414, 241.3051948051948, 241.45454545454544, 241.6038961038961, 241.75324675324674, 241.9025974025974, 242.05194805194805, 242.2012987012987, 242.35064935064935, 242.5, 242.64935064935065, 242.7987012987013, 242.94805194805193, 243.09740259740258, 243.24675324675323, 243.39610389610388, 243.54545454545453, 243.69480519480518, 243.84415584415584, 243.9935064935065, 244.14285714285714, 244.2922077922078, 244.44155844155844, 244.5909090909091, 244.74025974025972, 244.88961038961037, 245.03896103896102, 245.18831168831167, 245.33766233766232, 245.48701298701297, 245.63636363636363, 245.78571428571428, 245.93506493506493, 246.08441558441558, 246.23376623376623, 246.38311688311688, 246.53246753246754, 246.68181818181816, 246.8311688311688, 246.98051948051946, 247.1298701298701, 247.27922077922076, 247.42857142857142, 247.57792207792207, 247.72727272727272, 247.87662337662337, 248.02597402597402, 248.17532467532467, 248.32467532467533, 248.47402597402598, 248.6233766233766, 248.77272727272725, 248.9220779220779, 249.07142857142856, 249.2207792207792, 249.37012987012986, 249.5194805194805, 249.66883116883116, 249.8181818181818, 249.96753246753246, 250.11688311688312, 250.26623376623377, 250.41558441558442, 250.56493506493504, 250.7142857142857, 250.86363636363635, 251.012987012987, 251.16233766233765, 251.3116883116883, 251.46103896103895, 251.6103896103896, 251.75974025974025, 251.9090909090909, 252.05844155844156, 252.2077922077922, 252.35714285714286, 252.50649350649348, 252.65584415584414, 252.8051948051948, 252.95454545454544, 253.1038961038961, 253.25324675324674, 253.4025974025974, 253.55194805194805, 253.7012987012987, 253.85064935064935, 254.0, 254.14935064935065, 254.2987012987013, 254.44805194805193, 254.59740259740258, 254.74675324675323, 254.89610389610388, 255.04545454545453, 255.19480519480518, 255.34415584415584, 255.4935064935065, 255.64285714285714, 255.7922077922078, 255.94155844155844, 256.0909090909091, 256.2402597402597, 256.38961038961037, 256.538961038961, 256.68831168831167, 256.8376623376623, 256.987012987013, 257.1363636363636, 257.2857142857143, 257.43506493506493, 257.5844155844156, 257.73376623376623, 257.8831168831169, 258.03246753246754, 258.1818181818182, 258.33116883116884, 258.4805194805195, 258.62987012987014, 258.7792207792208, 258.92857142857144, 259.07792207792204, 259.2272727272727, 259.37662337662334, 259.525974025974, 259.67532467532465, 259.8246753246753, 259.97402597402595, 260.1233766233766, 260.27272727272725, 260.4220779220779, 260.57142857142856, 260.7207792207792, 260.87012987012986, 261.0194805194805, 261.16883116883116, 261.3181818181818, 261.46753246753246, 261.6168831168831, 261.76623376623377, 261.9155844155844, 262.06493506493507, 262.2142857142857, 262.3636363636364, 262.512987012987, 262.6623376623377, 262.81168831168833, 262.9610389610389, 263.1103896103896, 263.2597402597402, 263.4090909090909, 263.55844155844153, 263.7077922077922, 263.85714285714283, 264.0064935064935, 264.15584415584414, 264.3051948051948, 264.45454545454544, 264.6038961038961, 264.75324675324674, 264.9025974025974, 265.05194805194805, 265.2012987012987, 265.35064935064935, 265.5, 265.64935064935065, 265.7987012987013, 265.94805194805195, 266.0974025974026, 266.24675324675326, 266.3961038961039, 266.54545454545456, 266.6948051948052, 266.8441558441558, 266.99350649350646, 267.1428571428571, 267.29220779220776, 267.4415584415584, 267.59090909090907, 267.7402597402597, 267.88961038961037, 268.038961038961, 268.18831168831167, 268.3376623376623, 268.487012987013, 268.6363636363636, 268.7857142857143, 268.93506493506493, 269.0844155844156, 269.23376623376623, 269.3831168831169, 269.53246753246754, 269.6818181818182, 269.83116883116884, 269.9805194805195, 270.12987012987014, 270.2792207792208, 270.42857142857144, 270.57792207792204, 270.7272727272727, 270.87662337662334, 271.025974025974, 271.17532467532465, 271.3246753246753, 271.47402597402595, 271.6233766233766, 271.77272727272725, 271.9220779220779, 272.07142857142856, 272.2207792207792, 272.37012987012986, 272.5194805194805, 272.66883116883116, 272.8181818181818, 272.96753246753246, 273.1168831168831, 273.26623376623377, 273.4155844155844, 273.56493506493507, 273.7142857142857, 273.8636363636364, 274.012987012987, 274.1623376623377, 274.31168831168833, 274.4610389610389, 274.6103896103896, 274.7597402597402, 274.9090909090909, 275.05844155844153, 275.2077922077922, 275.35714285714283, 275.5064935064935, 275.65584415584414, 275.8051948051948, 275.95454545454544, 276.1038961038961, 276.25324675324674, 276.4025974025974, 276.55194805194805, 276.7012987012987, 276.85064935064935, 277.0, 277.14935064935065, 277.2987012987013, 277.44805194805195, 277.5974025974026, 277.74675324675326, 277.8961038961039, 278.04545454545456, 278.1948051948052, 278.3441558441558, 278.49350649350646, 278.6428571428571, 278.79220779220776, 278.9415584415584, 279.09090909090907, 279.2402597402597, 279.38961038961037, 279.538961038961, 279.68831168831167, 279.8376623376623, 279.987012987013, 280.1363636363636, 280.2857142857143, 280.43506493506493, 280.5844155844156, 280.73376623376623, 280.8831168831169, 281.03246753246754, 281.1818181818182, 281.33116883116884, 281.4805194805195, 281.62987012987014, 281.7792207792208, 281.92857142857144, 282.07792207792204, 282.2272727272727, 282.37662337662334, 282.525974025974, 282.67532467532465, 282.8246753246753, 282.97402597402595, 283.1233766233766, 283.27272727272725, 283.4220779220779, 283.57142857142856, 283.7207792207792, 283.87012987012986, 284.0194805194805, 284.16883116883116, 284.3181818181818, 284.46753246753246, 284.6168831168831, 284.76623376623377, 284.9155844155844, 285.06493506493507, 285.2142857142857, 285.3636363636364, 285.512987012987, 285.6623376623377, 285.81168831168833, 285.9610389610389, 286.1103896103896, 286.2597402597402, 286.4090909090909, 286.55844155844153, 286.7077922077922, 286.85714285714283, 287.0064935064935, 287.15584415584414, 287.3051948051948, 287.45454545454544, 287.6038961038961, 287.75324675324674, 287.9025974025974, 288.05194805194805, 288.2012987012987, 288.35064935064935, 288.5, 288.64935064935065, 288.7987012987013, 288.94805194805195, 289.0974025974026, 289.24675324675326, 289.3961038961039, 289.54545454545456, 289.69480519480516, 289.8441558441558, 289.99350649350646, 290.1428571428571, 290.29220779220776, 290.4415584415584, 290.59090909090907, 290.7402597402597, 290.88961038961037, 291.038961038961, 291.18831168831167, 291.3376623376623, 291.487012987013, 291.6363636363636, 291.7857142857143, 291.93506493506493, 292.0844155844156, 292.23376623376623, 292.3831168831169, 292.53246753246754, 292.6818181818182, 292.83116883116884, 292.9805194805195, 293.12987012987014, 293.2792207792208, 293.42857142857144, 293.57792207792204, 293.7272727272727, 293.87662337662334, 294.025974025974, 294.17532467532465, 294.3246753246753, 294.47402597402595, 294.6233766233766, 294.77272727272725, 294.9220779220779, 295.07142857142856, 295.2207792207792, 295.37012987012986, 295.5194805194805, 295.66883116883116, 295.8181818181818, 295.96753246753246, 296.1168831168831, 296.26623376623377, 296.4155844155844, 296.56493506493507, 296.7142857142857, 296.8636363636364, 297.012987012987, 297.1623376623377, 297.3116883116883, 297.4610389610389, 297.6103896103896, 297.7597402597402, 297.9090909090909, 298.05844155844153, 298.2077922077922, 298.35714285714283, 298.5064935064935, 298.65584415584414, 298.8051948051948, 298.95454545454544, 299.1038961038961, 299.25324675324674, 299.4025974025974, 299.55194805194805, 299.7012987012987, 299.85064935064935, 300.0]}
},{}],16:[function(require,module,exports){
module.exports={"expected": [0.1, 0.1002307548283865, 0.10046204213468127, 0.10069386314760276, 0.10092621909870476, 0.10115911122238297, 0.10139254075588151, 0.10162650893929948, 0.10186101701559758, 0.10209606623060467, 0.10233165783302449, 0.10256779307444217, 0.10280447320933092, 0.1030416994950588, 0.10327947319189516, 0.10351779556301763, 0.10375666787451857, 0.10399609139541198, 0.10423606739764016, 0.10447659715608044, 0.10471768194855202, 0.10495932305582274, 0.10520152176161585, 0.1054442793526169, 0.10568759711848043, 0.105931476351837, 0.10617591834829998, 0.10642092440647241, 0.10666649582795393, 0.10691263391734764, 0.10715933998226711, 0.10740661533334331, 0.10765446128423153, 0.10790287915161842, 0.10815187025522885, 0.1084014359178331, 0.1086515774652538, 0.108902296226373, 0.10915359353313916, 0.10940547072057427, 0.10965792912678099, 0.1099109700929497, 0.11016459496336564, 0.11041880508541607, 0.11067360180959737, 0.11092898648952228, 0.11118496048192707, 0.11144152514667878, 0.11169868184678232, 0.11195643194838786, 0.11221477682079803, 0.11247371783647517, 0.11273325637104868, 0.11299339380332223, 0.11325413151528119, 0.1135154708920999, 0.1137774133221491, 0.11403996019700328, 0.11430311291144793, 0.11456687286348718, 0.11483124145435111, 0.1150962200885032, 0.11536181017364783, 0.1156280131207376, 0.1158948303439811, 0.11616226326085019, 0.11643031329208765, 0.11669898186171472, 0.11696827039703853, 0.11723818032865989, 0.11750871309048076, 0.11777987011971189, 0.11805165285688053, 0.11832406274583786, 0.11859710123376697, 0.11887076977119033, 0.1191450698119776, 0.11942000281335322, 0.11969557023590434, 0.11997177354358846, 0.12024861420374122, 0.12052609368708427, 0.12080421346773286, 0.121082975023204, 0.12136237983442408, 0.1216424293857368, 0.12192312516491108, 0.12220446866314884, 0.12248646137509314, 0.12276910479883595, 0.12305240043592616, 0.1233363497913776, 0.12362095437367689, 0.12390621569479163, 0.12419213527017836, 0.12447871461879062, 0.12476595526308698, 0.1250538587290391, 0.12534242654614, 0.12563166024741204, 0.1259215613694151, 0.12621213145225474, 0.12650337203959036, 0.12679528467864346, 0.12708787092020585, 0.12738113231864784, 0.12767507043192658, 0.12796968682159413, 0.12826498305280606, 0.12856096069432954, 0.1288576213185518, 0.1291549665014884, 0.12945299782279157, 0.12975171686575876, 0.13005112521734088, 0.1303512244681509, 0.13065201621247213, 0.13095350204826672, 0.13125568357718434, 0.13155856240457042, 0.13186214013947484, 0.1321664183946605, 0.1324713987866117, 0.13277708293554297, 0.1330834724654075, 0.13339056900390586, 0.13369837418249467, 0.13400688963639504, 0.1343161170046016, 0.134626057929891, 0.13493671405883065, 0.13524808704178753, 0.13556017853293686, 0.135872990190271, 0.13618652367560818, 0.1365007806546014, 0.1368157627967472, 0.13713147177539453, 0.13744790926775374, 0.1377650769549054, 0.13808297652180923, 0.13840160965731316, 0.13872097805416206, 0.13904108340900703, 0.13936192742241424, 0.13968351179887398, 0.14000583824680976, 0.14032890847858728, 0.14065272421052372, 0.14097728716289665, 0.14130259905995335, 0.14162866162991988, 0.14195547660501012, 0.14228304572143527, 0.14261137071941288, 0.1429404533431761, 0.1432702953409831, 0.14360089846512603, 0.1439322644719407, 0.14426439512181577, 0.14459729217920195, 0.14493095741262166, 0.14526539259467808, 0.14560059950206494, 0.14593657991557565, 0.146273335620113, 0.14661086840469845, 0.14694918006248167, 0.14728827239075024, 0.14762814719093897, 0.14796880626863962, 0.14831025143361043, 0.1486524844997857, 0.14899550728528543, 0.14933932161242522, 0.14968392930772556, 0.15002933220192183, 0.1503755321299738, 0.15072253093107563, 0.15107033044866544, 0.1514189325304352, 0.15176833902834053, 0.15211855179861045, 0.15246957270175737, 0.152821403602587, 0.15317404637020798, 0.15352750287804226, 0.1538817750038346, 0.15423686462966282, 0.15459277364194776, 0.15494950393146317, 0.155307057393346, 0.15566543592710616, 0.15602464143663686, 0.1563846758302247, 0.1567455410205595, 0.15710723892474504, 0.15746977146430863, 0.15783314056521175, 0.15819734815786007, 0.1585623961771137, 0.1589282865622978, 0.15929502125721223, 0.15966260221014258, 0.1600310313738701, 0.16040031070568203, 0.16077044216738237, 0.16114142772530193, 0.16151326935030905, 0.16188596901781982, 0.16225952870780874, 0.16263395040481923, 0.16300923609797408, 0.16338538778098613, 0.1637624074521688, 0.1641402971144467, 0.16451905877536624, 0.16489869444710642, 0.16527920614648947, 0.16566059589499144, 0.16604286571875299, 0.16642601764859036, 0.16681005372000587, 0.1671949759731989, 0.16758078645307678, 0.16796748720926535, 0.16835508029612023, 0.16874356777273752, 0.16913295170296477, 0.16952323415541204, 0.16991441720346265, 0.17030650292528443, 0.17069949340384075, 0.17109339072690144, 0.171488196987054, 0.1718839142817146, 0.17228054471313942, 0.17267809038843557, 0.1730765534195725, 0.17347593592339317, 0.1738762400216251, 0.17427746784089193, 0.17467962151272454, 0.17508270317357244, 0.1754867149648151, 0.17589165903277332, 0.17629753752872057, 0.1767043526088946, 0.17711210643450878, 0.1775208011717635, 0.1779304389918578, 0.1783410220710008, 0.1787525525904235, 0.17916503273639006, 0.1795784647002096, 0.1799928506782477, 0.18040819287193827, 0.1808244934877951, 0.18124175473742368, 0.18165997883753277, 0.18207916800994628, 0.18249932448161524, 0.18292045048462935, 0.18334254825622898, 0.18376562003881713, 0.18418966807997114, 0.18461469463245475, 0.18504070195423017, 0.18546769230846985, 0.18589566796356874, 0.186324631193156, 0.18675458427610758, 0.18718552949655787, 0.18761746914391206, 0.18805040551285826, 0.1884843409033796, 0.18891927762076663, 0.18935521797562951, 0.18979216428391005, 0.1902301188668945, 0.19066908405122523, 0.19110906216891377, 0.1915500555573528, 0.19199206655932838, 0.19243509752303312, 0.19287915080207782, 0.1933242287555045, 0.1937703337477989, 0.19421746814890256, 0.19466563433422623, 0.1951148346846617, 0.19556507158659492, 0.19601634743191856, 0.19646866461804458, 0.19692202554791724, 0.19737643263002558, 0.19783188827841644, 0.19828839491270717, 0.19874595495809827, 0.19920457084538704, 0.1996642450109794, 0.2001249798969037, 0.20058677795082341, 0.2010496416260498, 0.20151357338155576, 0.2019785756819879, 0.2024446509976804, 0.2029118018046678, 0.2033800305846981, 0.20384933982524633, 0.2043197320195271, 0.20479120966650854, 0.2052637752709252, 0.20573743134329125, 0.20621218039991435, 0.20668802496290825, 0.2071649675602069, 0.2076430107255775, 0.20812215699863382, 0.20860240892485038, 0.20908376905557505, 0.2095662399480433, 0.21004982416539153, 0.2105345242766705, 0.21102034285685956, 0.21150728248687953, 0.21199534575360712, 0.21248453524988828, 0.21297485357455198, 0.21346630333242445, 0.21395888713434222, 0.21445260759716675, 0.21494746734379805, 0.21544346900318834, 0.21594061521035665, 0.21643890860640208, 0.21693835183851842, 0.217438947560008, 0.21794069843029548, 0.21844360711494273, 0.2189476762856621, 0.21945290862033137, 0.2199593068030075, 0.22046687352394087, 0.22097561147959022, 0.221485523372636, 0.2219966119119955, 0.22250887981283693, 0.22302232979659375, 0.22353696459097955, 0.22405278693000188, 0.2245697995539774, 0.22508800520954617, 0.22560740664968604, 0.22612800663372784, 0.22664980792736933, 0.2271728133026905, 0.227697025538168, 0.22822244741868974, 0.2287490817355703, 0.22927693128656493, 0.2298059988758851, 0.23033628731421313, 0.23086779941871685, 0.2314005380130653, 0.2319345059274428, 0.23246970599856479, 0.23300614106969247, 0.23354381399064789, 0.2340827276178293, 0.2346228848142263, 0.23516428844943485, 0.23570694139967277, 0.23625084654779469, 0.23679600678330776, 0.23734242500238667, 0.23789010410788933, 0.23843904700937205, 0.23898925662310497, 0.23954073587208782, 0.24009348768606525, 0.2406475150015424, 0.2412028207618007, 0.24175940791691303, 0.24231727942375994, 0.2428764382460451, 0.24343688735431104, 0.243998629725955, 0.2445616683452446, 0.24512600620333386, 0.24569164629827908, 0.24625859163505467, 0.24682684522556925, 0.24739641008868135, 0.24796728925021588, 0.2485394857429799, 0.24911300260677885, 0.24968784288843268, 0.25026400964179185, 0.250841505927754, 0.2514203348142797, 0.2520004993764092, 0.25258200269627845, 0.2531648478631355, 0.253749037973357, 0.25433457613046495, 0.2549214654451423, 0.2555097090352507, 0.25609931002584585, 0.25669027154919505, 0.25728259674479337, 0.25787628875938007, 0.2584713507469564, 0.2590677858688008, 0.2596655972934871, 0.2602647881969006, 0.2608653617622548, 0.2614673211801092, 0.26207066964838516, 0.2626754103723837, 0.2632815465648021, 0.263889081445751, 0.26449801824277197, 0.2651083601908538, 0.26572011053245054, 0.2663332725174982, 0.2669478494034321, 0.26756384445520454, 0.2681812609453015, 0.2688001021537606, 0.26942037136818836, 0.27004207188377727, 0.27066520700332414, 0.27128978003724663, 0.27191579430360174, 0.2725432531281029, 0.2731721598441376, 0.27380251779278575, 0.2744343303228365, 0.2750676007908066, 0.2757023325609584, 0.27633852900531697, 0.27697619350368907, 0.27761532944368, 0.2782559402207124, 0.2788980292380441, 0.2795415999067856, 0.28018665564591955, 0.2808331998823172, 0.281481236050758, 0.28213076759394723, 0.2827817979625341, 0.2834343306151309, 0.28408836901833034, 0.2847439166467246, 0.2854009769829239, 0.28605955351757417, 0.28671964974937697, 0.28738126918510654, 0.28804441533962966, 0.28870909173592363, 0.28937530190509503, 0.2900430493863992, 0.29071233772725774, 0.2913831704832787, 0.29205555121827464, 0.29272948350428163, 0.2934049709215787, 0.2940820170587063, 0.2947606255124857, 0.2954407998880382, 0.29612254379880343, 0.29680586086656024, 0.297490754721444, 0.2981772290019672, 0.2988652873550384, 0.29955493343598133, 0.30024617090855493, 0.30093900344497204, 0.3016334347259196, 0.3023294684405778, 0.30302710828663965, 0.30372635797033115, 0.3044272212064302, 0.3051297017182869, 0.3058338032378433, 0.30653952950565266, 0.30724688427090036, 0.3079558712914226, 0.3086664943337273, 0.30937875717301383, 0.31009266359319265, 0.3108082173869064, 0.31152542235554875, 0.31224428230928564, 0.3129648010670752, 0.3136869824566877, 0.3144108303147265, 0.31513634848664784, 0.31586354082678175, 0.31659241119835224, 0.31732296347349775, 0.318055201533292, 0.3187891292677645, 0.31952475057592117, 0.3202620693657652, 0.3210010895543173, 0.32174181506763716, 0.3224842498408441, 0.3232283978181379, 0.3239742629528197, 0.32472184920731295, 0.3254711605531848, 0.3262222009711669, 0.3269749744511766, 0.3277294849923384, 0.32848573660300445, 0.3292437333007769, 0.3300034791125285, 0.33076497807442407, 0.3315282342319425, 0.33229325163989726, 0.33306003436245885, 0.33382858647317604, 0.3345989120549973, 0.33537101520029305, 0.3361449000108766, 0.3369205705980267, 0.33769803108250906, 0.3384772855945981, 0.33925833827409935, 0.34004119327037075, 0.34082585474234517, 0.3416123268585528, 0.3424006137971424, 0.3431907197459044, 0.3439826489022926, 0.34477640547344646, 0.34557199367621383, 0.3463694177371733, 0.34716868189265615, 0.34796979038876924, 0.34877274748141773, 0.3495775574363274, 0.35038422452906737, 0.35119275304507297, 0.35200314727966797, 0.3528154115380883, 0.3536295501355042, 0.35444556739704347, 0.35526346765781414, 0.35608325526292783, 0.356904934567523, 0.3577285099367873, 0.35855398574598163, 0.35938136638046275, 0.3602106562357071, 0.36104185971733377, 0.36187498124112794, 0.3627100252330647, 0.36354699612933195, 0.36438589837635454, 0.3652267364308176, 0.3660695147596902, 0.36691423784024935, 0.36776091016010326, 0.3686095362172159, 0.36946012051993027, 0.37031266758699266, 0.37116718194757664, 0.3720236681413068, 0.37288213071828347, 0.3737425742391064, 0.3746050032748992, 0.3754694224073336, 0.37633583622865346, 0.3772042493416999, 0.3780746663599349, 0.37894709190746667, 0.37982153061907353, 0.3806979871402286, 0.3815764661271249, 0.38245697224669994, 0.38333951017666, 0.384224084605506, 0.3851107002325571, 0.3859993617679768, 0.38689007393279756, 0.3877828414589456, 0.3886776690892667, 0.3895745615775503, 0.3904735236885561, 0.3913745601980384, 0.39227767589277185, 0.39318287557057696, 0.39409016404034497, 0.3949995461220644, 0.39591102664684585, 0.39682461045694806, 0.3977403024058036, 0.3986581073580441, 0.3995780301895271, 0.40050007578736113, 0.4014242490499321, 0.4023505548869292, 0.40327899821937074, 0.4042095839796307, 0.4051423171114647, 0.40607720257003654, 0.4070142453219438, 0.4079534503452451, 0.4088948226294861, 0.40983836717572614, 0.4107840889965647, 0.4117319931161678, 0.4126820845702954, 0.4136343684063275, 0.4145888496832911, 0.4155455334718875, 0.4165044248545184, 0.4174655289253137, 0.4184288507901581, 0.41939439556671865, 0.4203621683844714, 0.4213321743847288, 0.42230441872066743, 0.423278906557355, 0.4242556430717777, 0.4252346334528682, 0.4262158829015324, 0.4271993966306779, 0.42818517986524124, 0.4291732378422157, 0.4301635758106795, 0.43115619903182273, 0.43215111277897644, 0.43314832233764, 0.43414783300550924, 0.435149650092505, 0.4361537789208005, 0.43716022482485045, 0.4381689931514191, 0.4391800892596086, 0.44019351852088745, 0.4412092863191189, 0.4422273980505899, 0.44324785912403974, 0.4442706749606883, 0.44529585099426555, 0.44632339267103965, 0.44735330544984653, 0.4483855948021187, 0.4494202662119142, 0.45045732517594583, 0.4514967772036101, 0.4525386278170169, 0.45358288255101875, 0.45462954695324, 0.4556786265841064, 0.4567301270168746, 0.45778405383766185, 0.4588404126454758, 0.45989920905224385, 0.46096044868284336, 0.4620241371751312, 0.46309028017997395, 0.46415888336127786, 0.46522995239601894, 0.46630349297427315, 0.4673795107992462, 0.46845801158730477, 0.46953900106800595, 0.4706224849841282, 0.4717084690917017, 0.47279695916003894, 0.47388796097176533, 0.4749814803228501, 0.47607752302263695, 0.4771760948938746, 0.4782772017727484, 0.4793808495089109, 0.480487043965513, 0.4815957910192352, 0.4827070965603183, 0.4838209664925956, 0.48493740673352353, 0.4860564232142135, 0.48717802187946324, 0.488302208687788, 0.48942898961145304, 0.4905583706365048, 0.49169035776280273, 0.4928249570040515, 0.4939621743878321, 0.495102015955635, 0.4962444877628916, 0.4973895958790064, 0.4985373463873895, 0.4996877453854884, 0.5008407989848211, 0.5019965133110081, 0.5031548945038052, 0.504315948717136, 0.5054796821191241, 0.5066461008921267, 0.5078152112327673, 0.5089870193519681, 0.5101615314749834, 0.5113387538414326, 0.5125186927053331, 0.5137013543351341, 0.5148867450137493, 0.5160748710385908, 0.5172657387216019, 0.5184593543892911, 0.519655724382766, 0.5208548550577662, 0.5220567527846977, 0.5232614239486661, 0.5244688749495118, 0.5256791122018422, 0.5268921421350673, 0.5281079711934332, 0.5293266058360562, 0.5305480525369572, 0.5317723177850969, 0.5329994080844089, 0.5342293299538353, 0.5354620899273608, 0.5366976945540475, 0.5379361503980701, 0.5391774640387501, 0.5404216420705916, 0.5416686911033152, 0.5429186177618941, 0.5441714286865891, 0.5454271305329833, 0.5466857299720183, 0.5479472336900287, 0.5492116483887788, 0.5504789807854971, 0.5517492376129126, 0.5530224256192902, 0.5542985515684669, 0.5555776222398876, 0.5568596444286411, 0.5581446249454963, 0.5594325706169379, 0.5607234882852032, 0.5620173848083186, 0.5633142670601354, 0.564614141930367, 0.5659170163246243, 0.5672228971644544, 0.5685317913873752, 0.5698437059469139, 0.5711586478126431, 0.572476623970218, 0.5737976414214133, 0.5751217071841612, 0.5764488282925876, 0.5777790117970504, 0.579112264764176, 0.5804485942768978, 0.5817880074344934, 0.5831305113526222, 0.5844761131633635, 0.5858248200152537, 0.5871766390733255, 0.5885315775191449, 0.5898896425508496, 0.5912508413831878, 0.5926151812475554, 0.5939826693920356, 0.5953533130814369, 0.5967271195973314, 0.5981040962380941, 0.599484250318941, 0.6008675891719687, 0.6022541201461926, 0.6036438506075866, 0.6050367879391221, 0.6064329395408063, 0.6078323128297229, 0.609234915240071, 0.610640754223204, 0.6120498372476699, 0.6134621717992508, 0.6148777653810023, 0.6162966255132941, 0.6177187597338492, 0.6191441755977845, 0.6205728806776503, 0.6220048825634712, 0.6234401888627863, 0.6248788072006891, 0.6263207452198689, 0.6277660105806502, 0.6292146109610344, 0.6306665540567404, 0.6321218475812451, 0.6335804992658252, 0.6350425168595963, 0.6365079081295572, 0.6379766808606281, 0.6394488428556941, 0.6409244019356454, 0.6424033659394193, 0.6438857427240419, 0.64537154016467, 0.6468607661546326, 0.6483534286054724, 0.649849535446989, 0.6513490946272803, 0.6528521141127845, 0.6543586018883234, 0.6558685659571432, 0.6573820143409587, 0.658898955079995, 0.6604193962330304, 0.6619433458774393, 0.6634708121092348, 0.665001803043112, 0.6665363268124913, 0.6680743915695613, 0.6696160054853221, 0.6711611767496284, 0.6727099135712338, 0.6742622241778342, 0.6758181168161108, 0.677377599751775, 0.6789406812696108, 0.6805073696735209, 0.6820776732865685, 0.6836516004510237, 0.6852291595284062, 0.6868103588995305, 0.6883952069645498, 0.6899837121430018, 0.6915758828738523, 0.6931717276155406, 0.6947712548460236, 0.6963744730628224, 0.697981390783066, 0.6995920165435372, 0.7012063589007183, 0.702824426430835, 0.7044462277299038, 0.7060717714137773, 0.7077010661181888, 0.7093341204987995, 0.7109709432312434, 0.7126115430111748, 0.7142559285543126, 0.7159041085964887, 0.7175560918936927, 0.7192118872221189, 0.7208715033782137, 0.7225349491787214, 0.7242022334607314, 0.7258733650817252, 0.7275483529196228, 0.7292272058728315, 0.730909932860291, 0.732596542821523, 0.7342870447166764, 0.7359814475265767, 0.7376797602527733, 0.7393819919175866, 0.741088151564157, 0.7427982482564917, 0.7445122910795139, 0.746230289139111, 0.7479522515621821, 0.7496781874966877, 0.7514081061116968, 0.7531420165974372, 0.7548799281653433, 0.7566218500481054, 0.7583677914997191, 0.7601177617955328, 0.7618717702322996, 0.7636298261282244, 0.7653919388230148, 0.7671581176779303, 0.7689283720758312, 0.7707027114212299, 0.7724811451403402, 0.774263682681127, 0.7760503335133571, 0.7778411071286488, 0.7796360130405233, 0.7814350607844545, 0.7832382599179196, 0.785045620020451, 0.786857150693685, 0.7886728615614151, 0.7904927622696423, 0.7923168624866254, 0.794145171902934, 0.7959777002314984, 0.7978144572076624, 0.7996554525892349, 0.8015006961565405, 0.8033501977124735, 0.8052039670825476, 0.8070620141149504, 0.808924348680594, 0.8107909806731687, 0.8126619200091946, 0.8145371766280743, 0.8164167604921468, 0.8183006815867392, 0.8201889499202203, 0.822081575524054, 0.8239785684528518, 0.8258799387844268, 0.8277856966198475, 0.8296958520834907, 0.8316104153230962, 0.8335293965098193, 0.8354528058382866, 0.8373806535266491, 0.8393129498166365, 0.8412497049736118, 0.8431909292866258, 0.8451366330684718, 0.8470868266557404, 0.8490415204088747, 0.8510007247122247, 0.8529644499741023, 0.854932706626838, 0.8569055051268349, 0.8588828559546252, 0.8608647696149245, 0.8628512566366894, 0.8648423275731723, 0.8668379930019776, 0.8688382635251186, 0.8708431497690724, 0.8728526623848377, 0.874866812047991, 0.8768856094587429, 0.8789090653419956, 0.8809371904473992, 0.882969995549409, 0.8850074914473434, 0.8870496889654406, 0.889096598952916, 0.8911482322840202, 0.8932045998580966, 0.8952657125996396, 0.8973315814583522, 0.8994022174092047, 0.9014776314524918, 0.9035578346138927, 0.9056428379445289, 0.9077326525210226, 0.909827289445556, 0.9119267598459299, 0.914031074875623, 0.9161402457138517, 0.9182542835656284, 0.9203731996618223, 0.9224970052592174, 0.924625711640574, 0.9267593301146878, 0.92889787201645, 0.9310413487069078, 0.9331897715733238, 0.9353431520292383, 0.9375015015145285, 0.9396648314954693, 0.9418331534647953, 0.9440064789417604, 0.9461848194722, 0.9483681866285922, 0.9505565920101193, 0.9527500472427293, 0.9549485639791967, 0.9571521538991863, 0.9593608287093142, 0.9615746001432098, 0.9637934799615788, 0.9660174799522646, 0.9682466119303121, 0.9704808877380302, 0.972720319245054, 0.9749649183484089, 0.9772146969725725, 0.9794696670695393, 0.9817298406188836, 0.9839952296278232, 0.9862658461312823, 0.9885417021919574, 0.9908228099003795, 0.9931091813749796, 0.9954008287621524, 0.9976977642363204, 0.9999999999999999], "x": [-1.0, -0.998998998998999, -0.997997997997998, -0.996996996996997, -0.995995995995996, -0.994994994994995, -0.993993993993994, -0.992992992992993, -0.991991991991992, -0.990990990990991, -0.98998998998999, -0.988988988988989, -0.987987987987988, -0.986986986986987, -0.985985985985986, -0.984984984984985, -0.983983983983984, -0.982982982982983, -0.9819819819819819, -0.980980980980981, -0.97997997997998, -0.978978978978979, -0.977977977977978, -0.9769769769769769, -0.975975975975976, -0.974974974974975, -0.973973973973974, -0.972972972972973, -0.9719719719719719, -0.970970970970971, -0.96996996996997, -0.968968968968969, -0.967967967967968, -0.9669669669669669, -0.965965965965966, -0.964964964964965, -0.963963963963964, -0.962962962962963, -0.9619619619619619, -0.960960960960961, -0.95995995995996, -0.958958958958959, -0.957957957957958, -0.9569569569569569, -0.955955955955956, -0.954954954954955, -0.953953953953954, -0.9529529529529529, -0.9519519519519519, -0.950950950950951, -0.94994994994995, -0.948948948948949, -0.9479479479479479, -0.9469469469469469, -0.9459459459459459, -0.944944944944945, -0.943943943943944, -0.9429429429429429, -0.9419419419419419, -0.9409409409409409, -0.93993993993994, -0.938938938938939, -0.9379379379379379, -0.9369369369369369, -0.9359359359359359, -0.934934934934935, -0.933933933933934, -0.9329329329329329, -0.9319319319319319, -0.9309309309309309, -0.92992992992993, -0.928928928928929, -0.9279279279279279, -0.9269269269269269, -0.9259259259259259, -0.924924924924925, -0.9239239239239239, -0.9229229229229229, -0.9219219219219219, -0.9209209209209209, -0.91991991991992, -0.9189189189189189, -0.9179179179179179, -0.9169169169169169, -0.9159159159159159, -0.914914914914915, -0.9139139139139139, -0.9129129129129129, -0.9119119119119119, -0.9109109109109109, -0.9099099099099099, -0.9089089089089089, -0.9079079079079079, -0.9069069069069069, -0.9059059059059059, -0.9049049049049049, -0.9039039039039038, -0.9029029029029029, -0.9019019019019019, -0.9009009009009009, -0.8998998998998999, -0.8988988988988988, -0.8978978978978979, -0.8968968968968969, -0.8958958958958959, -0.8948948948948949, -0.8938938938938938, -0.8928928928928929, -0.8918918918918919, -0.8908908908908909, -0.8898898898898899, -0.8888888888888888, -0.8878878878878879, -0.8868868868868869, -0.8858858858858859, -0.8848848848848849, -0.8838838838838838, -0.8828828828828829, -0.8818818818818819, -0.8808808808808809, -0.8798798798798799, -0.8788788788788788, -0.8778778778778779, -0.8768768768768769, -0.8758758758758759, -0.8748748748748749, -0.8738738738738738, -0.8728728728728729, -0.8718718718718719, -0.8708708708708709, -0.8698698698698699, -0.8688688688688688, -0.8678678678678678, -0.8668668668668669, -0.8658658658658659, -0.8648648648648649, -0.8638638638638638, -0.8628628628628628, -0.8618618618618619, -0.8608608608608609, -0.8598598598598599, -0.8588588588588588, -0.8578578578578578, -0.8568568568568569, -0.8558558558558559, -0.8548548548548549, -0.8538538538538538, -0.8528528528528528, -0.8518518518518519, -0.8508508508508509, -0.8498498498498499, -0.8488488488488488, -0.8478478478478478, -0.8468468468468469, -0.8458458458458459, -0.8448448448448449, -0.8438438438438438, -0.8428428428428428, -0.8418418418418419, -0.8408408408408409, -0.8398398398398399, -0.8388388388388388, -0.8378378378378378, -0.8368368368368369, -0.8358358358358359, -0.8348348348348349, -0.8338338338338338, -0.8328328328328328, -0.8318318318318318, -0.8308308308308309, -0.8298298298298299, -0.8288288288288288, -0.8278278278278278, -0.8268268268268268, -0.8258258258258259, -0.8248248248248249, -0.8238238238238238, -0.8228228228228228, -0.8218218218218218, -0.8208208208208209, -0.8198198198198199, -0.8188188188188188, -0.8178178178178178, -0.8168168168168168, -0.8158158158158157, -0.8148148148148149, -0.8138138138138138, -0.8128128128128128, -0.8118118118118118, -0.8108108108108107, -0.8098098098098099, -0.8088088088088088, -0.8078078078078078, -0.8068068068068068, -0.8058058058058057, -0.8048048048048049, -0.8038038038038038, -0.8028028028028028, -0.8018018018018018, -0.8008008008008007, -0.7997997997997999, -0.7987987987987988, -0.7977977977977978, -0.7967967967967968, -0.7957957957957957, -0.7947947947947948, -0.7937937937937938, -0.7927927927927928, -0.7917917917917918, -0.7907907907907907, -0.7897897897897898, -0.7887887887887888, -0.7877877877877878, -0.7867867867867868, -0.7857857857857857, -0.7847847847847848, -0.7837837837837838, -0.7827827827827828, -0.7817817817817818, -0.7807807807807807, -0.7797797797797797, -0.7787787787787788, -0.7777777777777778, -0.7767767767767768, -0.7757757757757757, -0.7747747747747747, -0.7737737737737738, -0.7727727727727728, -0.7717717717717718, -0.7707707707707707, -0.7697697697697697, -0.7687687687687688, -0.7677677677677678, -0.7667667667667668, -0.7657657657657657, -0.7647647647647647, -0.7637637637637638, -0.7627627627627628, -0.7617617617617618, -0.7607607607607607, -0.7597597597597597, -0.7587587587587588, -0.7577577577577578, -0.7567567567567568, -0.7557557557557557, -0.7547547547547547, -0.7537537537537538, -0.7527527527527528, -0.7517517517517518, -0.7507507507507507, -0.7497497497497497, -0.7487487487487487, -0.7477477477477478, -0.7467467467467468, -0.7457457457457457, -0.7447447447447447, -0.7437437437437437, -0.7427427427427428, -0.7417417417417418, -0.7407407407407407, -0.7397397397397397, -0.7387387387387387, -0.7377377377377378, -0.7367367367367368, -0.7357357357357357, -0.7347347347347347, -0.7337337337337337, -0.7327327327327328, -0.7317317317317318, -0.7307307307307307, -0.7297297297297297, -0.7287287287287287, -0.7277277277277278, -0.7267267267267268, -0.7257257257257257, -0.7247247247247247, -0.7237237237237237, -0.7227227227227226, -0.7217217217217218, -0.7207207207207207, -0.7197197197197197, -0.7187187187187187, -0.7177177177177176, -0.7167167167167168, -0.7157157157157157, -0.7147147147147147, -0.7137137137137137, -0.7127127127127126, -0.7117117117117118, -0.7107107107107107, -0.7097097097097097, -0.7087087087087087, -0.7077077077077076, -0.7067067067067068, -0.7057057057057057, -0.7047047047047047, -0.7037037037037037, -0.7027027027027026, -0.7017017017017018, -0.7007007007007007, -0.6996996996996997, -0.6986986986986987, -0.6976976976976976, -0.6966966966966968, -0.6956956956956957, -0.6946946946946947, -0.6936936936936937, -0.6926926926926926, -0.6916916916916918, -0.6906906906906907, -0.6896896896896897, -0.6886886886886887, -0.6876876876876876, -0.6866866866866868, -0.6856856856856857, -0.6846846846846847, -0.6836836836836837, -0.6826826826826826, -0.6816816816816818, -0.6806806806806807, -0.6796796796796797, -0.6786786786786787, -0.6776776776776776, -0.6766766766766767, -0.6756756756756757, -0.6746746746746747, -0.6736736736736737, -0.6726726726726726, -0.6716716716716717, -0.6706706706706707, -0.6696696696696697, -0.6686686686686687, -0.6676676676676676, -0.6666666666666667, -0.6656656656656657, -0.6646646646646647, -0.6636636636636637, -0.6626626626626626, -0.6616616616616617, -0.6606606606606606, -0.6596596596596597, -0.6586586586586587, -0.6576576576576576, -0.6566566566566567, -0.6556556556556556, -0.6546546546546547, -0.6536536536536537, -0.6526526526526526, -0.6516516516516517, -0.6506506506506506, -0.6496496496496497, -0.6486486486486487, -0.6476476476476476, -0.6466466466466467, -0.6456456456456456, -0.6446446446446447, -0.6436436436436437, -0.6426426426426426, -0.6416416416416417, -0.6406406406406406, -0.6396396396396397, -0.6386386386386387, -0.6376376376376376, -0.6366366366366367, -0.6356356356356356, -0.6346346346346347, -0.6336336336336337, -0.6326326326326326, -0.6316316316316316, -0.6306306306306306, -0.6296296296296297, -0.6286286286286287, -0.6276276276276276, -0.6266266266266266, -0.6256256256256256, -0.6246246246246246, -0.6236236236236237, -0.6226226226226226, -0.6216216216216216, -0.6206206206206206, -0.6196196196196196, -0.6186186186186187, -0.6176176176176176, -0.6166166166166166, -0.6156156156156156, -0.6146146146146146, -0.6136136136136137, -0.6126126126126126, -0.6116116116116116, -0.6106106106106106, -0.6096096096096096, -0.6086086086086087, -0.6076076076076076, -0.6066066066066066, -0.6056056056056056, -0.6046046046046046, -0.6036036036036037, -0.6026026026026026, -0.6016016016016016, -0.6006006006006006, -0.5995995995995996, -0.5985985985985987, -0.5975975975975976, -0.5965965965965966, -0.5955955955955956, -0.5945945945945945, -0.5935935935935936, -0.5925925925925926, -0.5915915915915916, -0.5905905905905906, -0.5895895895895895, -0.5885885885885886, -0.5875875875875876, -0.5865865865865866, -0.5855855855855856, -0.5845845845845845, -0.5835835835835836, -0.5825825825825826, -0.5815815815815816, -0.5805805805805806, -0.5795795795795795, -0.5785785785785786, -0.5775775775775776, -0.5765765765765766, -0.5755755755755756, -0.5745745745745745, -0.5735735735735736, -0.5725725725725725, -0.5715715715715716, -0.5705705705705706, -0.5695695695695695, -0.5685685685685686, -0.5675675675675675, -0.5665665665665666, -0.5655655655655656, -0.5645645645645645, -0.5635635635635636, -0.5625625625625625, -0.5615615615615616, -0.5605605605605606, -0.5595595595595595, -0.5585585585585586, -0.5575575575575575, -0.5565565565565566, -0.5555555555555556, -0.5545545545545545, -0.5535535535535536, -0.5525525525525525, -0.5515515515515516, -0.5505505505505506, -0.5495495495495495, -0.5485485485485486, -0.5475475475475475, -0.5465465465465466, -0.5455455455455456, -0.5445445445445445, -0.5435435435435436, -0.5425425425425425, -0.5415415415415415, -0.5405405405405406, -0.5395395395395395, -0.5385385385385386, -0.5375375375375375, -0.5365365365365365, -0.5355355355355356, -0.5345345345345345, -0.5335335335335336, -0.5325325325325325, -0.5315315315315315, -0.5305305305305306, -0.5295295295295295, -0.5285285285285286, -0.5275275275275275, -0.5265265265265265, -0.5255255255255256, -0.5245245245245245, -0.5235235235235236, -0.5225225225225225, -0.5215215215215215, -0.5205205205205206, -0.5195195195195195, -0.5185185185185186, -0.5175175175175175, -0.5165165165165165, -0.5155155155155156, -0.5145145145145145, -0.5135135135135136, -0.5125125125125125, -0.5115115115115115, -0.5105105105105106, -0.5095095095095095, -0.5085085085085086, -0.5075075075075075, -0.5065065065065065, -0.5055055055055055, -0.5045045045045045, -0.5035035035035035, -0.5025025025025025, -0.5015015015015015, -0.5005005005005005, -0.49949949949949946, -0.4984984984984985, -0.4974974974974975, -0.4964964964964965, -0.49549549549549554, -0.49449449449449445, -0.4934934934934935, -0.4924924924924925, -0.4914914914914915, -0.49049049049049054, -0.48948948948948945, -0.48848848848848847, -0.4874874874874875, -0.4864864864864865, -0.48548548548548554, -0.48448448448448445, -0.48348348348348347, -0.4824824824824825, -0.4814814814814815, -0.48048048048048053, -0.47947947947947944, -0.47847847847847846, -0.4774774774774775, -0.4764764764764765, -0.47547547547547553, -0.47447447447447444, -0.47347347347347346, -0.4724724724724725, -0.4714714714714715, -0.4704704704704705, -0.46946946946946944, -0.46846846846846846, -0.4674674674674675, -0.4664664664664665, -0.4654654654654655, -0.46446446446446443, -0.46346346346346345, -0.4624624624624625, -0.4614614614614615, -0.4604604604604605, -0.45945945945945943, -0.45845845845845845, -0.4574574574574575, -0.4564564564564565, -0.4554554554554555, -0.4544544544544544, -0.45345345345345345, -0.45245245245245247, -0.4514514514514515, -0.4504504504504504, -0.4494494494494494, -0.44844844844844844, -0.44744744744744747, -0.4464464464464465, -0.4454454454454454, -0.4444444444444444, -0.44344344344344344, -0.44244244244244246, -0.4414414414414415, -0.4404404404404404, -0.4394394394394394, -0.43843843843843844, -0.43743743743743746, -0.4364364364364365, -0.4354354354354354, -0.4344344344344344, -0.43343343343343343, -0.43243243243243246, -0.4314314314314315, -0.4304304304304304, -0.4294294294294294, -0.42842842842842843, -0.42742742742742745, -0.4264264264264265, -0.4254254254254254, -0.4244244244244244, -0.42342342342342343, -0.42242242242242245, -0.42142142142142147, -0.4204204204204204, -0.4194194194194194, -0.4184184184184184, -0.41741741741741745, -0.41641641641641647, -0.4154154154154154, -0.4144144144144144, -0.4134134134134134, -0.41241241241241244, -0.41141141141141147, -0.4104104104104104, -0.4094094094094094, -0.4084084084084084, -0.40740740740740744, -0.40640640640640646, -0.4054054054054054, -0.4044044044044044, -0.4034034034034034, -0.40240240240240244, -0.40140140140140146, -0.40040040040040037, -0.3993993993993994, -0.3983983983983984, -0.39739739739739743, -0.39639639639639646, -0.39539539539539537, -0.3943943943943944, -0.3933933933933934, -0.39239239239239243, -0.39139139139139134, -0.39039039039039036, -0.3893893893893894, -0.3883883883883884, -0.3873873873873874, -0.38638638638638634, -0.38538538538538536, -0.3843843843843844, -0.3833833833833834, -0.3823823823823824, -0.38138138138138133, -0.38038038038038036, -0.3793793793793794, -0.3783783783783784, -0.3773773773773774, -0.37637637637637633, -0.37537537537537535, -0.3743743743743744, -0.3733733733733734, -0.3723723723723724, -0.37137137137137133, -0.37037037037037035, -0.36936936936936937, -0.3683683683683684, -0.3673673673673674, -0.3663663663663663, -0.36536536536536535, -0.36436436436436437, -0.3633633633633634, -0.3623623623623624, -0.3613613613613613, -0.36036036036036034, -0.35935935935935936, -0.3583583583583584, -0.3573573573573574, -0.3563563563563563, -0.35535535535535534, -0.35435435435435436, -0.3533533533533534, -0.3523523523523524, -0.3513513513513513, -0.35035035035035034, -0.34934934934934936, -0.3483483483483484, -0.3473473473473474, -0.3463463463463463, -0.34534534534534533, -0.34434434434434436, -0.3433433433433434, -0.3423423423423424, -0.3413413413413413, -0.34034034034034033, -0.33933933933933935, -0.3383383383383384, -0.3373373373373374, -0.3363363363363363, -0.3353353353353353, -0.33433433433433435, -0.33333333333333337, -0.3323323323323324, -0.3313313313313313, -0.3303303303303303, -0.32932932932932935, -0.32832832832832837, -0.3273273273273274, -0.3263263263263263, -0.3253253253253253, -0.32432432432432434, -0.32332332332332336, -0.3223223223223223, -0.3213213213213213, -0.3203203203203203, -0.31931931931931934, -0.31831831831831836, -0.31731731731731727, -0.3163163163163163, -0.3153153153153153, -0.31431431431431434, -0.31331331331331336, -0.31231231231231227, -0.3113113113113113, -0.3103103103103103, -0.30930930930930933, -0.30830830830830835, -0.30730730730730726, -0.3063063063063063, -0.3053053053053053, -0.30430430430430433, -0.30330330330330335, -0.30230230230230226, -0.3013013013013013, -0.3003003003003003, -0.2992992992992993, -0.29829829829829835, -0.29729729729729726, -0.2962962962962963, -0.2952952952952953, -0.2942942942942943, -0.29329329329329334, -0.29229229229229226, -0.2912912912912913, -0.2902902902902903, -0.2892892892892893, -0.28828828828828834, -0.28728728728728725, -0.2862862862862863, -0.2852852852852853, -0.2842842842842843, -0.28328328328328334, -0.28228228228228225, -0.28128128128128127, -0.2802802802802803, -0.2792792792792793, -0.27827827827827833, -0.27727727727727725, -0.27627627627627627, -0.2752752752752753, -0.2742742742742743, -0.27327327327327333, -0.27227227227227224, -0.27127127127127126, -0.2702702702702703, -0.2692692692692693, -0.26826826826826833, -0.26726726726726724, -0.26626626626626626, -0.2652652652652653, -0.2642642642642643, -0.2632632632632632, -0.26226226226226224, -0.26126126126126126, -0.2602602602602603, -0.2592592592592593, -0.2582582582582582, -0.25725725725725723, -0.25625625625625625, -0.2552552552552553, -0.2542542542542543, -0.2532532532532532, -0.25225225225225223, -0.25125125125125125, -0.2502502502502503, -0.2492492492492493, -0.2482482482482482, -0.24724724724724723, -0.24624624624624625, -0.24524524524524527, -0.2442442442442443, -0.2432432432432432, -0.24224224224224222, -0.24124124124124124, -0.24024024024024027, -0.2392392392392393, -0.2382382382382382, -0.23723723723723722, -0.23623623623623624, -0.23523523523523526, -0.23423423423423428, -0.2332332332332332, -0.23223223223223222, -0.23123123123123124, -0.23023023023023026, -0.22922922922922928, -0.2282282282282282, -0.2272272272272272, -0.22622622622622623, -0.22522522522522526, -0.22422422422422428, -0.2232232232232232, -0.2222222222222222, -0.22122122122122123, -0.22022022022022025, -0.21921921921921927, -0.21821821821821819, -0.2172172172172172, -0.21621621621621623, -0.21521521521521525, -0.21421421421421427, -0.21321321321321318, -0.2122122122122122, -0.21121121121121122, -0.21021021021021025, -0.20920920920920927, -0.20820820820820818, -0.2072072072072072, -0.20620620620620622, -0.20520520520520524, -0.20420420420420426, -0.20320320320320318, -0.2022022022022022, -0.20120120120120122, -0.20020020020020024, -0.19919919919919926, -0.19819819819819817, -0.1971971971971972, -0.19619619619619622, -0.19519519519519524, -0.19419419419419415, -0.19319319319319317, -0.1921921921921922, -0.1911911911911912, -0.19019019019019023, -0.18918918918918914, -0.18818818818818817, -0.1871871871871872, -0.1861861861861862, -0.18518518518518523, -0.18418418418418414, -0.18318318318318316, -0.18218218218218218, -0.1811811811811812, -0.18018018018018023, -0.17917917917917914, -0.17817817817817816, -0.17717717717717718, -0.1761761761761762, -0.17517517517517522, -0.17417417417417413, -0.17317317317317316, -0.17217217217217218, -0.1711711711711712, -0.17017017017017022, -0.16916916916916913, -0.16816816816816815, -0.16716716716716717, -0.1661661661661662, -0.16516516516516522, -0.16416416416416413, -0.16316316316316315, -0.16216216216216217, -0.1611611611611612, -0.16016016016016021, -0.15915915915915912, -0.15815815815815815, -0.15715715715715717, -0.1561561561561562, -0.1551551551551552, -0.15415415415415412, -0.15315315315315314, -0.15215215215215216, -0.1511511511511512, -0.1501501501501502, -0.14914914914914912, -0.14814814814814814, -0.14714714714714716, -0.14614614614614618, -0.1451451451451452, -0.14414414414414412, -0.14314314314314314, -0.14214214214214216, -0.14114114114114118, -0.1401401401401402, -0.1391391391391391, -0.13813813813813813, -0.13713713713713716, -0.13613613613613618, -0.1351351351351351, -0.1341341341341341, -0.13313313313313313, -0.13213213213213215, -0.13113113113113117, -0.13013013013013008, -0.1291291291291291, -0.12812812812812813, -0.12712712712712715, -0.12612612612612617, -0.12512512512512508, -0.1241241241241241, -0.12312312312312312, -0.12212212212212215, -0.12112112112112117, -0.12012012012012008, -0.1191191191191191, -0.11811811811811812, -0.11711711711711714, -0.11611611611611616, -0.11511511511511507, -0.1141141141141141, -0.11311311311311312, -0.11211211211211214, -0.11111111111111116, -0.11011011011011007, -0.10910910910910909, -0.10810810810810811, -0.10710710710710714, -0.10610610610610616, -0.10510510510510507, -0.10410410410410409, -0.10310310310310311, -0.10210210210210213, -0.10110110110110115, -0.10010010010010006, -0.09909909909909909, -0.09809809809809811, -0.09709709709709713, -0.09609609609609615, -0.09509509509509506, -0.09409409409409408, -0.0930930930930931, -0.09209209209209213, -0.09109109109109115, -0.09009009009009006, -0.08908908908908908, -0.0880880880880881, -0.08708708708708712, -0.08608608608608614, -0.08508508508508505, -0.08408408408408408, -0.0830830830830831, -0.08208208208208212, -0.08108108108108114, -0.08008008008008005, -0.07907907907907907, -0.0780780780780781, -0.07707707707707712, -0.07607607607607614, -0.07507507507507505, -0.07407407407407407, -0.07307307307307309, -0.07207207207207211, -0.07107107107107113, -0.07007007007007005, -0.06906906906906907, -0.06806806806806809, -0.06706706706706711, -0.06606606606606602, -0.06506506506506504, -0.06406406406406406, -0.06306306306306309, -0.06206206206206211, -0.06106106106106102, -0.06006006006006004, -0.05905905905905906, -0.05805805805805808, -0.0570570570570571, -0.056056056056056014, -0.055055055055055035, -0.05405405405405406, -0.05305305305305308, -0.0520520520520521, -0.05105105105105101, -0.05005005005005003, -0.049049049049049054, -0.048048048048048075, -0.0470470470470471, -0.04604604604604601, -0.04504504504504503, -0.04404404404404405, -0.04304304304304307, -0.042042042042042094, -0.041041041041041004, -0.040040040040040026, -0.03903903903903905, -0.03803803803803807, -0.03703703703703709, -0.036036036036036, -0.03503503503503502, -0.034034034034034044, -0.033033033033033066, -0.03203203203203209, -0.031031031031030998, -0.03003003003003002, -0.02902902902902904, -0.028028028028028062, -0.027027027027027084, -0.026026026026025995, -0.025025025025025016, -0.024024024024024038, -0.02302302302302306, -0.02202202202202208, -0.02102102102102099, -0.020020020020020013, -0.019019019019019034, -0.018018018018018056, -0.017017017017017078, -0.016016016016015988, -0.01501501501501501, -0.014014014014014031, -0.013013013013013053, -0.012012012012012074, -0.011011011011010985, -0.010010010010010006, -0.009009009009009028, -0.00800800800800805, -0.00700700700700696, -0.006006006006005982, -0.005005005005005003, -0.004004004004004025, -0.0030030030030030463, -0.002002002002001957, -0.0010010010010009784, -5.551115123125783e-17]}
},{}],17:[function(require,module,exports){
module.exports={"expected": [1.0000000000000002, 1.0023075482838653, 1.0046204213468128, 1.0069386314760276, 1.0092621909870476, 1.01159111222383, 1.0139254075588153, 1.016265089392995, 1.0186101701559758, 1.0209606623060468, 1.0233165783302451, 1.0256779307444217, 1.0280447320933095, 1.0304169949505881, 1.0327947319189519, 1.0351779556301763, 1.0375666787451858, 1.03996091395412, 1.0423606739764018, 1.0447659715608046, 1.0471768194855204, 1.0495932305582276, 1.0520152176161588, 1.054442793526169, 1.0568759711848044, 1.0593147635183702, 1.061759183483, 1.0642092440647244, 1.0666649582795393, 1.0691263391734764, 1.0715933998226712, 1.0740661533334332, 1.0765446128423157, 1.0790287915161842, 1.0815187025522885, 1.084014359178331, 1.0865157746525382, 1.0890229622637302, 1.0915359353313918, 1.0940547072057427, 1.09657929126781, 1.0991097009294972, 1.1016459496336566, 1.1041880508541608, 1.1067360180959738, 1.109289864895223, 1.111849604819271, 1.114415251466788, 1.1169868184678233, 1.1195643194838787, 1.1221477682079803, 1.124737178364752, 1.1273325637104867, 1.1299339380332223, 1.1325413151528119, 1.1351547089209992, 1.1377741332214915, 1.1403996019700329, 1.1430311291144792, 1.145668728634872, 1.1483124145435113, 1.1509622008850322, 1.1536181017364782, 1.156280131207376, 1.1589483034398111, 1.161622632608502, 1.1643031329208768, 1.1669898186171472, 1.1696827039703854, 1.172381803286599, 1.1750871309048079, 1.1777987011971192, 1.1805165285688053, 1.1832406274583787, 1.1859710123376699, 1.1887076977119035, 1.1914506981197759, 1.194200028133532, 1.1969557023590436, 1.1997177354358848, 1.2024861420374124, 1.2052609368708427, 1.2080421346773287, 1.2108297502320402, 1.213623798344241, 1.2164242938573682, 1.2192312516491106, 1.2220446866314885, 1.2248646137509314, 1.2276910479883596, 1.2305240043592618, 1.233363497913776, 1.2362095437367688, 1.2390621569479163, 1.2419213527017838, 1.2447871461879063, 1.2476595526308698, 1.2505385872903911, 1.2534242654614003, 1.2563166024741206, 1.2592156136941512, 1.2621213145225474, 1.2650337203959037, 1.2679528467864347, 1.2708787092020588, 1.2738113231864787, 1.2767507043192659, 1.2796968682159413, 1.2826498305280607, 1.2856096069432956, 1.2885762131855183, 1.2915496650148839, 1.2945299782279158, 1.2975171686575877, 1.300511252173409, 1.3035122446815093, 1.306520162124721, 1.3095350204826675, 1.3125568357718436, 1.3155856240457044, 1.3186214013947488, 1.3216641839466052, 1.3247139878661174, 1.32777082935543, 1.3308347246540753, 1.3339056900390591, 1.3369837418249466, 1.3400688963639504, 1.3431611700460162, 1.3462605792989102, 1.3493671405883068, 1.3524808704178755, 1.3556017853293687, 1.3587299019027101, 1.361865236756082, 1.3650078065460143, 1.3681576279674719, 1.3713147177539453, 1.3744790926775377, 1.377650769549054, 1.3808297652180928, 1.3840160965731316, 1.3872097805416206, 1.3904108340900705, 1.3936192742241427, 1.39683511798874, 1.4000583824680977, 1.4032890847858728, 1.4065272421052373, 1.409772871628967, 1.413025990599534, 1.4162866162991987, 1.4195547660501013, 1.4228304572143529, 1.426113707194129, 1.4294045334317613, 1.432702953409831, 1.4360089846512607, 1.4393226447194074, 1.442643951218158, 1.4459729217920199, 1.4493095741262167, 1.452653925946781, 1.4560059950206494, 1.4593657991557567, 1.4627333562011304, 1.4661086840469846, 1.469491800624817, 1.4728827239075029, 1.4762814719093904, 1.4796880626863969, 1.4831025143361045, 1.4865248449978572, 1.4899550728528546, 1.4933932161242525, 1.4968392930772558, 1.5002933220192185, 1.5037553212997383, 1.5072253093107566, 1.510703304486655, 1.5141893253043524, 1.5176833902834055, 1.5211855179861047, 1.524695727017574, 1.52821403602587, 1.5317404637020802, 1.5352750287804229, 1.5388177500383462, 1.5423686462966284, 1.5459277364194777, 1.549495039314632, 1.5530705739334603, 1.5566543592710618, 1.560246414366369, 1.563846758302247, 1.5674554102055953, 1.5710723892474505, 1.5746977146430865, 1.5783314056521176, 1.5819734815786006, 1.5856239617711374, 1.589282865622978, 1.5929502125721227, 1.5966260221014263, 1.600310313738701, 1.6040031070568204, 1.6077044216738239, 1.6114142772530196, 1.615132693503091, 1.6188596901781984, 1.6225952870780875, 1.6263395040481923, 1.6300923609797409, 1.6338538778098615, 1.6376240745216881, 1.641402971144467, 1.6451905877536626, 1.6489869444710648, 1.652792061464895, 1.6566059589499145, 1.6604286571875302, 1.6642601764859037, 1.668100537200059, 1.6719497597319894, 1.675807864530768, 1.6796748720926535, 1.6835508029612027, 1.6874356777273756, 1.691329517029648, 1.6952323415541206, 1.6991441720346265, 1.7030650292528446, 1.7069949340384079, 1.7109339072690146, 1.71488196987054, 1.7188391428171461, 1.7228054471313943, 1.7267809038843558, 1.7307655341957253, 1.7347593592339317, 1.738762400216251, 1.7427746784089193, 1.7467962151272456, 1.7508270317357246, 1.7548671496481512, 1.758916590327733, 1.762975375287206, 1.7670435260889465, 1.7711210643450883, 1.7752080117176352, 1.779304389918578, 1.7834102207100084, 1.7875255259042353, 1.7916503273639008, 1.795784647002096, 1.799928506782477, 1.804081928719383, 1.8082449348779515, 1.8124175473742372, 1.8165997883753278, 1.8207916800994632, 1.8249932448161525, 1.8292045048462935, 1.8334254825622902, 1.8376562003881713, 1.8418966807997115, 1.846146946324548, 1.850407019542302, 1.854676923084699, 1.8589566796356873, 1.8632463119315605, 1.8675458427610763, 1.8718552949655791, 1.8761746914391209, 1.8805040551285825, 1.8848434090337962, 1.8891927762076666, 1.8935521797562953, 1.897921642839101, 1.902301188668945, 1.9066908405122527, 1.9110906216891381, 1.9155005555735278, 1.9199206655932843, 1.9243509752303312, 1.9287915080207785, 1.9332422875550455, 1.9377033374779888, 1.942174681489026, 1.9466563433422623, 1.951148346846617, 1.9556507158659493, 1.9601634743191856, 1.964686646180446, 1.9692202554791725, 1.9737643263002562, 1.9783188827841645, 1.9828839491270713, 1.9874595495809833, 1.9920457084538703, 1.9966424501097941, 2.001249798969037, 2.005867779508234, 2.010496416260499, 2.0151357338155576, 2.0197857568198794, 2.024446509976804, 2.029118018046678, 2.0338003058469813, 2.0384933982524633, 2.0431973201952713, 2.047912096665086, 2.052637752709252, 2.057374313432913, 2.0621218039991436, 2.066880249629083, 2.0716496756020693, 2.0764301072557747, 2.081221569986339, 2.0860240892485042, 2.090837690555751, 2.095662399480433, 2.1004982416539155, 2.1053452427667056, 2.1102034285685956, 2.1150728248687956, 2.1199534575360715, 2.124845352498883, 2.1297485357455206, 2.1346630333242445, 2.139588871343422, 2.144526075971668, 2.1494746734379806, 2.154434690031884, 2.159406152103567, 2.164389086064021, 2.1693835183851844, 2.17438947560008, 2.1794069843029553, 2.1844360711494275, 2.1894767628566214, 2.194529086203314, 2.1995930680300746, 2.204668735239409, 2.209756114795902, 2.21485523372636, 2.2199661191199556, 2.225088798128369, 2.230223297965938, 2.2353696459097954, 2.240527869300019, 2.2456979955397744, 2.2508800520954617, 2.256074066496861, 2.2612800663372785, 2.2664980792736937, 2.2717281330269055, 2.27697025538168, 2.282224474186898, 2.287490817355703, 2.2927693128656497, 2.2980599887588515, 2.3033628731421314, 2.308677994187169, 2.314005380130653, 2.3193450592744282, 2.3246970599856485, 2.3300614106969246, 2.335438139906479, 2.3408272761782936, 2.346228848142263, 2.3516428844943493, 2.3570694139967276, 2.3625084654779474, 2.367960067833078, 2.373424250023867, 2.378901041078894, 2.3843904700937206, 2.38989256623105, 2.3954073587208784, 2.4009348768606524, 2.406475150015425, 2.4120282076180066, 2.4175940791691306, 2.4231727942376, 2.4287643824604515, 2.434368873543111, 2.43998629725955, 2.445616683452446, 2.451260062033339, 2.456916462982791, 2.4625859163505472, 2.4682684522556926, 2.4739641008868136, 2.479672892502159, 2.4853948574297995, 2.491130026067789, 2.496878428884327, 2.502640096417919, 2.5084150592775405, 2.5142033481427974, 2.520004993764093, 2.5258200269627844, 2.531648478631355, 2.537490379733571, 2.5433457613046495, 2.549214654451424, 2.5550970903525068, 2.560993100258459, 2.566902715491951, 2.5728259674479332, 2.578762887593802, 2.584713507469564, 2.5906778586880086, 2.5966559729348715, 2.6026478819690055, 2.6086536176225485, 2.614673211801092, 2.620706696483852, 2.626754103723837, 2.6328154656480214, 2.638890814457511, 2.64498018242772, 2.6510836019085384, 2.6572011053245057, 2.663332725174982, 2.6694784940343212, 2.675638444552045, 2.681812609453015, 2.6880010215376062, 2.6942037136818833, 2.700420718837773, 2.7066520700332415, 2.712897800372467, 2.7191579430360178, 2.725432531281029, 2.7317215984413767, 2.7380251779278577, 2.744343303228365, 2.7506760079080665, 2.757023325609584, 2.7633852900531704, 2.769761935036891, 2.7761532944368006, 2.782559402207125, 2.788980292380441, 2.795415999067857, 2.8018665564591956, 2.8083319988231725, 2.81481236050758, 2.821307675939472, 2.827817979625342, 2.8343433061513097, 2.8408836901833037, 2.8474391664672467, 2.854009769829239, 2.860595535175743, 2.86719649749377, 2.8738126918510662, 2.8804441533962963, 2.8870909173592363, 2.8937530190509513, 2.9004304938639915, 2.907123377272578, 2.9138317048327878, 2.9205555121827467, 2.927294835042817, 2.9340497092157873, 2.940820170587063, 2.9476062551248576, 2.9544079988803813, 2.961225437988035, 2.9680586086656024, 2.9749075472144404, 2.9817722900196726, 2.988652873550384, 2.995549334359814, 3.0024617090855497, 3.0093900344497206, 3.0163343472591966, 3.0232946844057778, 3.030271082866397, 3.037263579703312, 3.0442722120643024, 3.05129701718287, 3.0583380323784333, 3.0653952950565273, 3.0724688427090037, 3.079558712914226, 3.086664943337274, 3.093787571730138, 3.1009266359319274, 3.1080821738690645, 3.115254223555487, 3.122442823092857, 3.1296480106707523, 3.136869824566878, 3.144108303147265, 3.151363484866479, 3.158635408267818, 3.1659241119835224, 3.173229634734978, 3.18055201533292, 3.1878912926776457, 3.195247505759212, 3.202620693657652, 3.2100108955431734, 3.2174181506763713, 3.2248424984084423, 3.2322839781813792, 3.2397426295281972, 3.2472184920731304, 3.254711605531848, 3.2622220097116696, 3.2697497445117665, 3.2772948499233836, 3.284857366030045, 3.2924373330077685, 3.3000347911252854, 3.307649780744241, 3.3152823423194246, 3.322932516398973, 3.330600343624589, 3.338285864731761, 3.345989120549973, 3.3537101520029307, 3.3614490001087667, 3.369205705980267, 3.3769803108250915, 3.384772855945981, 3.3925833827409937, 3.4004119327037077, 3.408258547423452, 3.4161232685855287, 3.424006137971424, 3.4319071974590445, 3.439826489022926, 3.447764054734464, 3.455719936762139, 3.4636941773717327, 3.4716868189265613, 3.4796979038876934, 3.4877274748141778, 3.4957755743632752, 3.503842245290674, 3.5119275304507296, 3.520031472796681, 3.528154115380883, 3.536295501355043, 3.5444556739704356, 3.5526346765781414, 3.5608325526292797, 3.5690493456752295, 3.5772850993678733, 3.5855398574598167, 3.5938136638046276, 3.602106562357072, 3.6104185971733376, 3.6187498124112802, 3.6271002523306484, 3.6354699612933197, 3.6438589837635464, 3.6522673643081753, 3.6606951475969023, 3.669142378402494, 3.6776091016010324, 3.6860953621721597, 3.6946012051993025, 3.7031266758699273, 3.7116718194757667, 3.720236681413068, 3.7288213071828356, 3.737425742391064, 3.746050032748993, 3.754694224073337, 3.7633583622865348, 3.7720424934169996, 3.7807466635993494, 3.7894709190746676, 3.798215306190736, 3.806979871402286, 3.8157646612712504, 3.824569722466999, 3.8333951017666013, 3.842240846055061, 3.8511070023255707, 3.8599936176797693, 3.8689007393279757, 3.8778284145894575, 3.8867766908926678, 3.8957456157755033, 3.904735236885562, 3.913745601980384, 3.9227767589277196, 3.9318287557057703, 3.9409016404034496, 3.949995461220645, 3.9591102664684588, 3.9682461045694817, 3.9774030240580367, 3.986581073580441, 3.995780301895272, 4.005000757873611, 4.014242490499322, 4.023505548869293, 4.032789982193707, 4.042095839796308, 4.051423171114648, 4.060772025700365, 4.070142453219439, 4.079534503452451, 4.088948226294862, 4.0983836717572615, 4.1078408899656464, 4.1173199311616795, 4.126820845702954, 4.1363436840632755, 4.145888496832911, 4.155455334718876, 4.165044248545185, 4.174655289253137, 4.184288507901583, 4.193943955667186, 4.203621683844713, 4.213321743847289, 4.223044187206674, 4.2327890655735505, 4.242556430717777, 4.252346334528682, 4.262158829015325, 4.271993966306779, 4.281851798652413, 4.291732378422157, 4.301635758106795, 4.3115619903182285, 4.321511127789765, 4.3314832233764005, 4.341478330055092, 4.35149650092505, 4.361537789208006, 4.371602248248505, 4.381689931514193, 4.391800892596086, 4.401935185208875, 4.41209286319119, 4.422273980505899, 4.432478591240399, 4.442706749606883, 4.452958509942656, 4.463233926710397, 4.473533054498465, 4.483855948021189, 4.494202662119142, 4.504573251759458, 4.514967772036102, 4.525386278170169, 4.535828825510189, 4.546295469532399, 4.556786265841064, 4.5673012701687465, 4.577840538376619, 4.588404126454759, 4.598992090522438, 4.609604486828434, 4.620241371751313, 4.630902801799739, 4.641588833612779, 4.652299523960189, 4.663034929742731, 4.673795107992463, 4.684580115873048, 4.69539001068006, 4.7062248498412815, 4.717084690917018, 4.727969591600391, 4.738879609717653, 4.749814803228502, 4.76077523022637, 4.771760948938746, 4.782772017727485, 4.79380849508911, 4.804870439655131, 4.8159579101923535, 4.827070965603183, 4.838209664925957, 4.849374067335235, 4.860564232142136, 4.871780218794633, 4.8830220868778795, 4.894289896114532, 4.905583706365048, 4.9169035776280285, 4.928249570040515, 4.9396217438783205, 4.951020159556351, 4.962444877628916, 4.973895958790065, 4.985373463873896, 4.996877453854884, 5.008407989848212, 5.019965133110082, 5.031548945038054, 5.043159487171361, 5.05479682119124, 5.0664610089212685, 5.078152112327674, 5.089870193519682, 5.101615314749836, 5.113387538414326, 5.125186927053333, 5.137013543351341, 5.1488674501374945, 5.16074871038591, 5.172657387216019, 5.1845935438929125, 5.19655724382766, 5.208548550577662, 5.220567527846978, 5.2326142394866615, 5.244688749495118, 5.256791122018422, 5.268921421350674, 5.281079711934334, 5.293266058360562, 5.305480525369574, 5.317723177850969, 5.329994080844091, 5.342293299538355, 5.354620899273607, 5.366976945540476, 5.3793615039807, 5.391774640387503, 5.404216420705918, 5.416686911033152, 5.429186177618943, 5.44171428686589, 5.454271305329833, 5.466857299720184, 5.479472336900287, 5.49211648388779, 5.50478980785497, 5.517492376129126, 5.530224256192903, 5.542985515684669, 5.555776222398878, 5.5685964442864115, 5.581446249454963, 5.59432570616938, 5.607234882852032, 5.620173848083188, 5.633142670601354, 5.646141419303669, 5.659170163246245, 5.672228971644543, 5.685317913873753, 5.698437059469139, 5.711586478126431, 5.724766239702181, 5.737976414214134, 5.751217071841614, 5.764488282925877, 5.777790117970504, 5.79112264764176, 5.804485942768977, 5.817880074344935, 5.831305113526222, 5.844761131633635, 5.858248200152539, 5.871766390733255, 5.885315775191451, 5.898896425508497, 5.912508413831878, 5.926151812475556, 5.939826693920357, 5.95353313081437, 5.967271195973314, 5.981040962380941, 5.994842503189412, 6.008675891719687, 6.0225412014619275, 6.036438506075867, 6.050367879391221, 6.064329395408065, 6.07832312829723, 6.092349152400712, 6.10640754223204, 6.1204983724767, 6.134621717992509, 6.148777653810023, 6.162966255132942, 6.1771875973384915, 6.191441755977845, 6.205728806776504, 6.220048825634711, 6.234401888627865, 6.248788072006891, 6.263207452198689, 6.277660105806504, 6.292146109610344, 6.306665540567406, 6.3212184758124526, 6.33580499265825, 6.350425168595965, 6.365079081295572, 6.379766808606282, 6.394488428556944, 6.4092440193564535, 6.424033659394194, 6.4388574272404195, 6.453715401646702, 6.4686076615463275, 6.483534286054724, 6.498495354469892, 6.513490946272802, 6.528521141127848, 6.543586018883236, 6.558685659571433, 6.573820143409589, 6.58898955079995, 6.604193962330306, 6.619433458774394, 6.6347081210923475, 6.650018030431122, 6.6653632681249135, 6.680743915695615, 6.696160054853222, 6.711611767496284, 6.72709913571234, 6.742622241778342, 6.75818116816111, 6.773775997517752, 6.789406812696109, 6.80507369673521, 6.820776732865685, 6.836516004510239, 6.852291595284065, 6.868103588995304, 6.8839520696455, 6.899837121430018, 6.915758828738525, 6.931717276155407, 6.9477125484602364, 6.963744730628226, 6.9798139078306605, 6.995920165435375, 7.012063589007184, 7.028244264308349, 7.044462277299041, 7.060717714137772, 7.077010661181889, 7.093341204987997, 7.109709432312435, 7.126115430111749, 7.142559285543126, 7.159041085964889, 7.175560918936928, 7.192118872221189, 7.208715033782139, 7.225349491787214, 7.242022334607316, 7.258733650817254, 7.2754835291962285, 7.292272058728317, 7.309099328602911, 7.3259654282152304, 7.342870447166765, 7.359814475265767, 7.376797602527734, 7.393819919175866, 7.41088151564157, 7.427982482564918, 7.445122910795139, 7.462302891391111, 7.479522515621821, 7.496781874966877, 7.51408106111697, 7.531420165974372, 7.5487992816534355, 7.566218500481055, 7.583677914997191, 7.60117761795533, 7.6187177023229955, 7.636298261282246, 7.653919388230148, 7.671581176779302, 7.689283720758313, 7.707027114212299, 7.724811451403404, 7.742636826811269, 7.760503335133571, 7.77841107128649, 7.796360130405233, 7.814350607844546, 7.832382599179196, 7.850456200204509, 7.868571506936852, 7.886728615614152, 7.904927622696424, 7.923168624866253, 7.94145171902934, 7.959777002314985, 7.978144572076625, 7.996554525892351, 8.015006961565405, 8.033501977124734, 8.052039670825478, 8.070620141149503, 8.089243486805943, 8.107909806731687, 8.126619200091945, 8.145371766280745, 8.164167604921468, 8.183006815867394, 8.201889499202203, 8.22081575524054, 8.23978568452852, 8.258799387844268, 8.277856966198476, 8.296958520834906, 8.316104153230961, 8.335293965098195, 8.354528058382867, 8.373806535266494, 8.393129498166365, 8.412497049736118, 8.43190929286626, 8.451366330684717, 8.470868266557407, 8.490415204088746, 8.510007247122246, 8.529644499741025, 8.549327066268381, 8.569055051268352, 8.588828559546254, 8.608647696149244, 8.628512566366895, 8.648423275731723, 8.668379930019778, 8.68838263525119, 8.708431497690723, 8.72852662384838, 8.748668120479909, 8.76885609458743, 8.789090653419958, 8.809371904473991, 8.829699955494092, 8.850074914473433, 8.870496889654408, 8.890965989529162, 8.911482322840202, 8.932045998580968, 8.952657125996396, 8.973315814583524, 8.994022174092049, 9.014776314524918, 9.03557834613893, 9.05642837944529, 9.077326525210228, 9.098272894455564, 9.119267598459299, 9.140310748756232, 9.161402457138516, 9.182542835656285, 9.203731996618226, 9.224970052592173, 9.246257116405744, 9.267593301146878, 9.288978720164502, 9.31041348706908, 9.33189771573324, 9.353431520292386, 9.375015015145285, 9.396648314954696, 9.418331534647956, 9.440064789417603, 9.461848194722002, 9.483681866285922, 9.505565920101196, 9.527500472427295, 9.549485639791966, 9.571521538991865, 9.593608287093142, 9.6157460014321, 9.63793479961579, 9.660174799522645, 9.682466119303124, 9.704808877380302, 9.727203192450542, 9.749649183484092, 9.772146969725725, 9.794696670695396, 9.817298406188836, 9.83995229627823, 9.862658461312826, 9.885417021919572, 9.908228099003798, 9.931091813749797, 9.954008287621523, 9.976977642363206, 10.0], "x": [5.551115123125783e-17, 0.0010010010010010565, 0.0020020020020020575, 0.0030030030030030585, 0.0040040040040040595, 0.0050050050050050605, 0.0060060060060060615, 0.0070070070070070625, 0.008008008008008063, 0.009009009009009064, 0.010010010010010065, 0.011011011011011066, 0.012012012012012067, 0.013013013013013068, 0.01401401401401407, 0.01501501501501507, 0.01601601601601607, 0.01701701701701707, 0.018018018018018073, 0.019019019019019076, 0.020020020020020075, 0.021021021021021075, 0.022022022022022077, 0.02302302302302308, 0.02402402402402408, 0.02502502502502508, 0.02602602602602608, 0.027027027027027084, 0.028028028028028083, 0.029029029029029083, 0.030030030030030085, 0.031031031031031088, 0.03203203203203209, 0.033033033033033087, 0.034034034034034086, 0.03503503503503509, 0.03603603603603609, 0.03703703703703709, 0.0380380380380381, 0.039039039039039096, 0.040040040040040095, 0.041041041041041094, 0.042042042042042094, 0.0430430430430431, 0.0440440440440441, 0.0450450450450451, 0.046046046046046105, 0.047047047047047104, 0.0480480480480481, 0.0490490490490491, 0.0500500500500501, 0.05105105105105111, 0.05205205205205211, 0.053053053053053106, 0.05405405405405411, 0.05505505505505511, 0.05605605605605611, 0.05705705705705711, 0.05805805805805811, 0.059059059059059116, 0.060060060060060115, 0.061061061061061114, 0.06206206206206212, 0.06306306306306311, 0.06406406406406412, 0.06506506506506513, 0.06606606606606612, 0.06706706706706712, 0.06806806806806812, 0.06906906906906912, 0.07007007007007013, 0.07107107107107112, 0.07207207207207213, 0.07307307307307313, 0.07407407407407413, 0.07507507507507513, 0.07607607607607614, 0.07707707707707713, 0.07807807807807814, 0.07907907907907913, 0.08008008008008013, 0.08108108108108114, 0.08208208208208213, 0.08308308308308314, 0.08408408408408413, 0.08508508508508514, 0.08608608608608614, 0.08708708708708714, 0.08808808808808814, 0.08908908908908915, 0.09009009009009014, 0.09109109109109115, 0.09209209209209215, 0.09309309309309315, 0.09409409409409415, 0.09509509509509514, 0.09609609609609615, 0.09709709709709716, 0.09809809809809815, 0.09909909909909916, 0.10010010010010015, 0.10110110110110115, 0.10210210210210216, 0.10310310310310315, 0.10410410410410416, 0.10510510510510516, 0.10610610610610616, 0.10710710710710716, 0.10810810810810817, 0.10910910910910916, 0.11011011011011017, 0.11111111111111116, 0.11211211211211217, 0.11311311311311317, 0.11411411411411417, 0.11511511511511517, 0.11611611611611616, 0.11711711711711717, 0.11811811811811818, 0.11911911911911917, 0.12012012012012017, 0.12112112112112118, 0.12212212212212217, 0.12312312312312318, 0.12412412412412419, 0.1251251251251252, 0.12612612612612617, 0.12712712712712718, 0.12812812812812818, 0.1291291291291292, 0.1301301301301302, 0.13113113113113117, 0.13213213213213218, 0.13313313313313319, 0.1341341341341342, 0.1351351351351352, 0.13613613613613618, 0.13713713713713718, 0.1381381381381382, 0.1391391391391392, 0.1401401401401402, 0.1411411411411412, 0.14214214214214219, 0.1431431431431432, 0.1441441441441442, 0.1451451451451452, 0.1461461461461462, 0.1471471471471472, 0.1481481481481482, 0.1491491491491492, 0.1501501501501502, 0.15115115115115121, 0.15215215215215222, 0.1531531531531532, 0.1541541541541542, 0.1551551551551552, 0.15615615615615622, 0.15715715715715722, 0.1581581581581582, 0.1591591591591592, 0.16016016016016021, 0.16116116116116122, 0.16216216216216223, 0.1631631631631632, 0.1641641641641642, 0.16516516516516522, 0.16616616616616622, 0.16716716716716723, 0.1681681681681682, 0.16916916916916921, 0.17017017017017022, 0.17117117117117123, 0.17217217217217223, 0.17317317317317324, 0.17417417417417422, 0.17517517517517522, 0.17617617617617623, 0.17717717717717724, 0.17817817817817824, 0.17917917917917922, 0.18018018018018023, 0.18118118118118123, 0.18218218218218224, 0.18318318318318325, 0.18418418418418425, 0.18518518518518523, 0.18618618618618624, 0.18718718718718724, 0.18818818818818825, 0.18918918918918926, 0.19019019019019023, 0.19119119119119124, 0.19219219219219225, 0.19319319319319325, 0.19419419419419426, 0.19519519519519524, 0.19619619619619624, 0.19719719719719725, 0.19819819819819826, 0.19919919919919926, 0.20020020020020024, 0.20120120120120125, 0.20220220220220225, 0.20320320320320326, 0.20420420420420426, 0.20520520520520527, 0.20620620620620625, 0.20720720720720726, 0.20820820820820826, 0.20920920920920927, 0.21021021021021027, 0.21121121121121125, 0.21221221221221226, 0.21321321321321327, 0.21421421421421427, 0.21521521521521528, 0.21621621621621628, 0.21721721721721726, 0.21821821821821827, 0.21921921921921927, 0.22022022022022028, 0.2212212212212213, 0.22222222222222227, 0.22322322322322327, 0.22422422422422428, 0.22522522522522528, 0.2262262262262263, 0.22722722722722727, 0.22822822822822827, 0.22922922922922928, 0.2302302302302303, 0.2312312312312313, 0.23223223223223227, 0.23323323323323328, 0.23423423423423428, 0.2352352352352353, 0.2362362362362363, 0.2372372372372373, 0.23823823823823828, 0.2392392392392393, 0.2402402402402403, 0.2412412412412413, 0.2422422422422423, 0.24324324324324328, 0.2442442442442443, 0.2452452452452453, 0.2462462462462463, 0.2472472472472473, 0.24824824824824832, 0.2492492492492493, 0.25025025025025033, 0.2512512512512513, 0.2522522522522523, 0.2532532532532533, 0.2542542542542543, 0.25525525525525533, 0.2562562562562563, 0.2572572572572573, 0.2582582582582583, 0.2592592592592593, 0.26026026026026033, 0.2612612612612613, 0.2622622622622623, 0.2632632632632633, 0.2642642642642643, 0.26526526526526534, 0.2662662662662663, 0.2672672672672673, 0.26826826826826833, 0.2692692692692693, 0.27027027027027034, 0.2712712712712713, 0.2722722722722723, 0.27327327327327333, 0.2742742742742743, 0.27527527527527534, 0.2762762762762763, 0.27727727727727736, 0.27827827827827833, 0.2792792792792793, 0.28028028028028035, 0.2812812812812813, 0.28228228228228236, 0.28328328328328334, 0.2842842842842843, 0.28528528528528535, 0.28628628628628633, 0.28728728728728736, 0.28828828828828834, 0.2892892892892893, 0.29029029029029035, 0.29129129129129133, 0.29229229229229237, 0.29329329329329334, 0.2942942942942943, 0.29529529529529536, 0.29629629629629634, 0.29729729729729737, 0.29829829829829835, 0.2992992992992993, 0.30030030030030036, 0.30130130130130134, 0.3023023023023024, 0.30330330330330335, 0.3043043043043044, 0.30530530530530536, 0.30630630630630634, 0.3073073073073074, 0.30830830830830835, 0.3093093093093094, 0.31031031031031037, 0.31131131131131135, 0.3123123123123124, 0.31331331331331336, 0.3143143143143144, 0.31531531531531537, 0.31631631631631635, 0.3173173173173174, 0.31831831831831836, 0.3193193193193194, 0.3203203203203204, 0.32132132132132135, 0.3223223223223224, 0.32332332332332336, 0.3243243243243244, 0.3253253253253254, 0.32632632632632635, 0.3273273273273274, 0.32832832832832837, 0.3293293293293294, 0.3303303303303304, 0.33133133133133136, 0.3323323323323324, 0.33333333333333337, 0.3343343343343344, 0.3353353353353354, 0.33633633633633636, 0.3373373373373374, 0.3383383383383384, 0.3393393393393394, 0.3403403403403404, 0.3413413413413414, 0.3423423423423424, 0.3433433433433434, 0.3443443443443444, 0.3453453453453454, 0.3463463463463464, 0.3473473473473474, 0.3483483483483484, 0.3493493493493494, 0.3503503503503504, 0.3513513513513514, 0.3523523523523524, 0.3533533533533534, 0.3543543543543544, 0.3553553553553554, 0.35635635635635643, 0.3573573573573574, 0.3583583583583584, 0.3593593593593594, 0.3603603603603604, 0.36136136136136143, 0.3623623623623624, 0.3633633633633634, 0.3643643643643644, 0.3653653653653654, 0.36636636636636644, 0.3673673673673674, 0.36836836836836845, 0.3693693693693694, 0.3703703703703704, 0.37137137137137144, 0.3723723723723724, 0.37337337337337345, 0.37437437437437443, 0.3753753753753754, 0.37637637637637644, 0.3773773773773774, 0.37837837837837845, 0.37937937937937943, 0.3803803803803804, 0.38138138138138145, 0.3823823823823824, 0.38338338338338346, 0.38438438438438444, 0.3853853853853854, 0.38638638638638645, 0.3873873873873874, 0.38838838838838846, 0.38938938938938944, 0.3903903903903904, 0.39139139139139145, 0.39239239239239243, 0.39339339339339346, 0.39439439439439444, 0.3953953953953954, 0.39639639639639646, 0.39739739739739743, 0.39839839839839847, 0.39939939939939945, 0.4004004004004004, 0.40140140140140146, 0.40240240240240244, 0.40340340340340347, 0.40440440440440445, 0.4054054054054055, 0.40640640640640646, 0.40740740740740744, 0.4084084084084085, 0.40940940940940945, 0.4104104104104105, 0.41141141141141147, 0.41241241241241244, 0.4134134134134135, 0.41441441441441446, 0.4154154154154155, 0.41641641641641647, 0.41741741741741745, 0.4184184184184185, 0.41941941941941946, 0.4204204204204205, 0.42142142142142147, 0.42242242242242245, 0.4234234234234235, 0.42442442442442446, 0.4254254254254255, 0.4264264264264265, 0.42742742742742745, 0.4284284284284285, 0.42942942942942947, 0.4304304304304305, 0.4314314314314315, 0.4324324324324325, 0.4334334334334335, 0.43443443443443447, 0.4354354354354355, 0.4364364364364365, 0.4374374374374375, 0.4384384384384385, 0.43943943943943947, 0.4404404404404405, 0.4414414414414415, 0.4424424424424425, 0.4434434434434435, 0.4444444444444445, 0.4454454454454455, 0.4464464464464465, 0.4474474474474475, 0.4484484484484485, 0.4494494494494495, 0.4504504504504505, 0.4514514514514515, 0.4524524524524525, 0.4534534534534535, 0.4544544544544545, 0.4554554554554555, 0.4564564564564565, 0.45745745745745753, 0.4584584584584585, 0.4594594594594595, 0.4604604604604605, 0.4614614614614615, 0.46246246246246253, 0.4634634634634635, 0.4644644644644645, 0.4654654654654655, 0.4664664664664665, 0.46746746746746753, 0.4684684684684685, 0.46946946946946955, 0.4704704704704705, 0.4714714714714715, 0.47247247247247254, 0.4734734734734735, 0.47447447447447455, 0.47547547547547553, 0.4764764764764765, 0.47747747747747754, 0.4784784784784785, 0.47947947947947955, 0.48048048048048053, 0.4814814814814815, 0.48248248248248254, 0.4834834834834835, 0.48448448448448456, 0.48548548548548554, 0.4864864864864865, 0.48748748748748755, 0.4884884884884885, 0.48948948948948956, 0.49049049049049054, 0.4914914914914915, 0.49249249249249255, 0.49349349349349353, 0.49449449449449456, 0.49549549549549554, 0.4964964964964966, 0.49749749749749755, 0.49849849849849853, 0.49949949949949957, 0.5005005005005005, 0.5015015015015016, 0.5025025025025025, 0.5035035035035036, 0.5045045045045045, 0.5055055055055055, 0.5065065065065066, 0.5075075075075075, 0.5085085085085086, 0.5095095095095095, 0.5105105105105106, 0.5115115115115116, 0.5125125125125125, 0.5135135135135136, 0.5145145145145145, 0.5155155155155156, 0.5165165165165166, 0.5175175175175175, 0.5185185185185186, 0.5195195195195195, 0.5205205205205206, 0.5215215215215216, 0.5225225225225225, 0.5235235235235236, 0.5245245245245245, 0.5255255255255256, 0.5265265265265267, 0.5275275275275275, 0.5285285285285286, 0.5295295295295295, 0.5305305305305306, 0.5315315315315317, 0.5325325325325325, 0.5335335335335336, 0.5345345345345345, 0.5355355355355356, 0.5365365365365367, 0.5375375375375375, 0.5385385385385386, 0.5395395395395395, 0.5405405405405406, 0.5415415415415417, 0.5425425425425425, 0.5435435435435436, 0.5445445445445445, 0.5455455455455456, 0.5465465465465467, 0.5475475475475475, 0.5485485485485486, 0.5495495495495497, 0.5505505505505506, 0.5515515515515517, 0.5525525525525525, 0.5535535535535536, 0.5545545545545547, 0.5555555555555556, 0.5565565565565567, 0.5575575575575575, 0.5585585585585586, 0.5595595595595597, 0.5605605605605606, 0.5615615615615617, 0.5625625625625625, 0.5635635635635636, 0.5645645645645647, 0.5655655655655656, 0.5665665665665667, 0.5675675675675675, 0.5685685685685686, 0.5695695695695697, 0.5705705705705706, 0.5715715715715717, 0.5725725725725725, 0.5735735735735736, 0.5745745745745747, 0.5755755755755756, 0.5765765765765767, 0.5775775775775776, 0.5785785785785786, 0.5795795795795797, 0.5805805805805806, 0.5815815815815817, 0.5825825825825826, 0.5835835835835836, 0.5845845845845847, 0.5855855855855856, 0.5865865865865867, 0.5875875875875876, 0.5885885885885886, 0.5895895895895897, 0.5905905905905906, 0.5915915915915917, 0.5925925925925926, 0.5935935935935936, 0.5945945945945947, 0.5955955955955956, 0.5965965965965967, 0.5975975975975976, 0.5985985985985987, 0.5995995995995997, 0.6006006006006006, 0.6016016016016017, 0.6026026026026026, 0.6036036036036037, 0.6046046046046047, 0.6056056056056056, 0.6066066066066067, 0.6076076076076076, 0.6086086086086087, 0.6096096096096097, 0.6106106106106106, 0.6116116116116117, 0.6126126126126126, 0.6136136136136137, 0.6146146146146148, 0.6156156156156156, 0.6166166166166167, 0.6176176176176176, 0.6186186186186187, 0.6196196196196198, 0.6206206206206206, 0.6216216216216217, 0.6226226226226226, 0.6236236236236237, 0.6246246246246248, 0.6256256256256256, 0.6266266266266267, 0.6276276276276276, 0.6286286286286287, 0.6296296296296298, 0.6306306306306306, 0.6316316316316317, 0.6326326326326326, 0.6336336336336337, 0.6346346346346348, 0.6356356356356356, 0.6366366366366367, 0.6376376376376376, 0.6386386386386387, 0.6396396396396398, 0.6406406406406406, 0.6416416416416417, 0.6426426426426426, 0.6436436436436437, 0.6446446446446448, 0.6456456456456456, 0.6466466466466467, 0.6476476476476476, 0.6486486486486487, 0.6496496496496498, 0.6506506506506506, 0.6516516516516517, 0.6526526526526526, 0.6536536536536537, 0.6546546546546548, 0.6556556556556556, 0.6566566566566567, 0.6576576576576576, 0.6586586586586587, 0.6596596596596598, 0.6606606606606606, 0.6616616616616617, 0.6626626626626626, 0.6636636636636637, 0.6646646646646648, 0.6656656656656657, 0.6666666666666667, 0.6676676676676676, 0.6686686686686687, 0.6696696696696698, 0.6706706706706707, 0.6716716716716717, 0.6726726726726726, 0.6736736736736737, 0.6746746746746748, 0.6756756756756757, 0.6766766766766767, 0.6776776776776778, 0.6786786786786787, 0.6796796796796798, 0.6806806806806807, 0.6816816816816818, 0.6826826826826828, 0.6836836836836837, 0.6846846846846848, 0.6856856856856857, 0.6866866866866868, 0.6876876876876878, 0.6886886886886887, 0.6896896896896898, 0.6906906906906907, 0.6916916916916918, 0.6926926926926928, 0.6936936936936937, 0.6946946946946948, 0.6956956956956957, 0.6966966966966968, 0.6976976976976978, 0.6986986986986987, 0.6996996996996998, 0.7007007007007007, 0.7017017017017018, 0.7027027027027029, 0.7037037037037037, 0.7047047047047048, 0.7057057057057057, 0.7067067067067068, 0.7077077077077079, 0.7087087087087087, 0.7097097097097098, 0.7107107107107107, 0.7117117117117118, 0.7127127127127129, 0.7137137137137137, 0.7147147147147148, 0.7157157157157157, 0.7167167167167168, 0.7177177177177179, 0.7187187187187187, 0.7197197197197198, 0.7207207207207207, 0.7217217217217218, 0.7227227227227229, 0.7237237237237237, 0.7247247247247248, 0.7257257257257257, 0.7267267267267268, 0.7277277277277279, 0.7287287287287287, 0.7297297297297298, 0.7307307307307307, 0.7317317317317318, 0.7327327327327329, 0.7337337337337337, 0.7347347347347348, 0.7357357357357357, 0.7367367367367368, 0.7377377377377379, 0.7387387387387387, 0.7397397397397398, 0.7407407407407407, 0.7417417417417418, 0.7427427427427429, 0.7437437437437437, 0.7447447447447448, 0.7457457457457457, 0.7467467467467468, 0.7477477477477479, 0.7487487487487487, 0.7497497497497498, 0.7507507507507507, 0.7517517517517518, 0.7527527527527529, 0.7537537537537538, 0.7547547547547548, 0.7557557557557557, 0.7567567567567568, 0.7577577577577579, 0.7587587587587588, 0.7597597597597598, 0.7607607607607607, 0.7617617617617618, 0.7627627627627629, 0.7637637637637638, 0.7647647647647648, 0.7657657657657657, 0.7667667667667668, 0.7677677677677679, 0.7687687687687688, 0.7697697697697699, 0.7707707707707707, 0.7717717717717718, 0.7727727727727729, 0.7737737737737738, 0.7747747747747749, 0.7757757757757757, 0.7767767767767768, 0.7777777777777779, 0.7787787787787788, 0.7797797797797799, 0.7807807807807807, 0.7817817817817818, 0.7827827827827829, 0.7837837837837838, 0.7847847847847849, 0.7857857857857857, 0.7867867867867868, 0.7877877877877879, 0.7887887887887888, 0.7897897897897899, 0.7907907907907907, 0.7917917917917918, 0.7927927927927929, 0.7937937937937938, 0.7947947947947949, 0.7957957957957957, 0.7967967967967968, 0.7977977977977979, 0.7987987987987988, 0.7997997997997999, 0.8008008008008007, 0.8018018018018018, 0.8028028028028029, 0.8038038038038038, 0.8048048048048049, 0.805805805805806, 0.8068068068068068, 0.8078078078078079, 0.8088088088088088, 0.8098098098098099, 0.810810810810811, 0.8118118118118118, 0.8128128128128129, 0.8138138138138138, 0.8148148148148149, 0.815815815815816, 0.8168168168168168, 0.8178178178178179, 0.8188188188188188, 0.8198198198198199, 0.820820820820821, 0.8218218218218218, 0.8228228228228229, 0.8238238238238238, 0.8248248248248249, 0.825825825825826, 0.8268268268268268, 0.8278278278278279, 0.8288288288288288, 0.8298298298298299, 0.830830830830831, 0.8318318318318318, 0.8328328328328329, 0.8338338338338338, 0.8348348348348349, 0.835835835835836, 0.8368368368368369, 0.8378378378378379, 0.8388388388388388, 0.8398398398398399, 0.840840840840841, 0.8418418418418419, 0.8428428428428429, 0.8438438438438438, 0.8448448448448449, 0.845845845845846, 0.8468468468468469, 0.847847847847848, 0.8488488488488488, 0.8498498498498499, 0.850850850850851, 0.8518518518518519, 0.852852852852853, 0.8538538538538538, 0.8548548548548549, 0.855855855855856, 0.8568568568568569, 0.857857857857858, 0.8588588588588588, 0.8598598598598599, 0.860860860860861, 0.8618618618618619, 0.862862862862863, 0.8638638638638638, 0.8648648648648649, 0.865865865865866, 0.8668668668668669, 0.867867867867868, 0.8688688688688688, 0.8698698698698699, 0.870870870870871, 0.8718718718718719, 0.872872872872873, 0.8738738738738738, 0.8748748748748749, 0.875875875875876, 0.8768768768768769, 0.877877877877878, 0.8788788788788788, 0.8798798798798799, 0.880880880880881, 0.8818818818818819, 0.882882882882883, 0.8838838838838838, 0.8848848848848849, 0.885885885885886, 0.8868868868868869, 0.887887887887888, 0.8888888888888888, 0.8898898898898899, 0.890890890890891, 0.8918918918918919, 0.892892892892893, 0.8938938938938938, 0.8948948948948949, 0.895895895895896, 0.8968968968968969, 0.897897897897898, 0.8988988988988988, 0.8998998998998999, 0.900900900900901, 0.9019019019019019, 0.902902902902903, 0.9039039039039038, 0.9049049049049049, 0.905905905905906, 0.9069069069069069, 0.907907907907908, 0.9089089089089089, 0.9099099099099099, 0.910910910910911, 0.9119119119119119, 0.912912912912913, 0.9139139139139139, 0.914914914914915, 0.915915915915916, 0.9169169169169169, 0.917917917917918, 0.9189189189189189, 0.91991991991992, 0.920920920920921, 0.9219219219219219, 0.922922922922923, 0.9239239239239239, 0.924924924924925, 0.925925925925926, 0.9269269269269269, 0.927927927927928, 0.9289289289289289, 0.92992992992993, 0.930930930930931, 0.9319319319319319, 0.932932932932933, 0.9339339339339341, 0.934934934934935, 0.935935935935936, 0.9369369369369369, 0.937937937937938, 0.9389389389389391, 0.93993993993994, 0.940940940940941, 0.9419419419419419, 0.942942942942943, 0.9439439439439441, 0.944944944944945, 0.945945945945946, 0.9469469469469469, 0.947947947947948, 0.9489489489489491, 0.94994994994995, 0.9509509509509511, 0.9519519519519519, 0.952952952952953, 0.9539539539539541, 0.954954954954955, 0.9559559559559561, 0.9569569569569569, 0.957957957957958, 0.9589589589589591, 0.95995995995996, 0.9609609609609611, 0.9619619619619619, 0.962962962962963, 0.9639639639639641, 0.964964964964965, 0.9659659659659661, 0.9669669669669669, 0.967967967967968, 0.9689689689689691, 0.96996996996997, 0.9709709709709711, 0.9719719719719719, 0.972972972972973, 0.9739739739739741, 0.974974974974975, 0.9759759759759761, 0.9769769769769769, 0.977977977977978, 0.9789789789789791, 0.97997997997998, 0.9809809809809811, 0.9819819819819819, 0.982982982982983, 0.9839839839839841, 0.984984984984985, 0.9859859859859861, 0.986986986986987, 0.987987987987988, 0.9889889889889891, 0.98998998998999, 0.9909909909909911, 0.991991991991992, 0.992992992992993, 0.9939939939939941, 0.994994994994995, 0.9959959959959961, 0.996996996996997, 0.997997997997998, 0.9989989989989991, 1.0]}
},{}],18:[function(require,module,exports){
module.exports={"expectedx": [-5.551115123125783e-17, -5.5400017795359415e-17, -5.5288884359461e-17, -5.5177750923562586e-17, -5.506661748766417e-17, -5.4955484051765757e-17, -5.4844350615867345e-17, -5.473321717996893e-17, -5.4622083744070516e-17, -5.45109503081721e-17, -5.4399816872273687e-17, -5.4288683436375275e-17, -5.417755000047686e-17, -5.4066416564578446e-17, -5.395528312868003e-17, -5.3844149692781617e-17, -5.3733016256883205e-17, -5.362188282098479e-17, -5.3510749385086376e-17, -5.339961594918796e-17, -5.3288482513289546e-17, -5.3177349077391135e-17, -5.306621564149272e-17, -5.2955082205594306e-17, -5.284394876969589e-17, -5.2732815333797476e-17, -5.262168189789906e-17, -5.251054846200065e-17, -5.2399415026102235e-17, -5.228828159020382e-17, -5.2177148154305406e-17, -5.206601471840699e-17, -5.1954881282508577e-17, -5.1843747846610165e-17, -5.173261441071175e-17, -5.1621480974813336e-17, -5.151034753891492e-17, -5.1399214103016507e-17, -5.128808066711809e-17, -5.117694723121968e-17, -5.1065813795321266e-17, -5.095468035942285e-17, -5.0843546923524437e-17, -5.073241348762602e-17, -5.062128005172761e-17, -5.0510146615829196e-17, -5.039901317993078e-17, -5.0287879744032366e-17, -5.017674630813395e-17, -5.006561287223554e-17, -4.9954479436337126e-17, -4.984334600043871e-17, -4.9732212564540296e-17, -4.962107912864188e-17, -4.950994569274347e-17, -4.9398812256845055e-17, -4.928767882094664e-17, -4.9176545385048226e-17, -4.906541194914981e-17, -4.8954278513251397e-17, -4.8843145077352985e-17, -4.873201164145457e-17, -4.8620878205556156e-17, -4.850974476965774e-17, -4.8398611333759327e-17, -4.8287477897860915e-17, -4.81763444619625e-17, -4.8065211026064086e-17, -4.795407759016567e-17, -4.7842944154267257e-17, -4.7731810718368845e-17, -4.762067728247043e-17, -4.7509543846572016e-17, -4.73984104106736e-17, -4.7287276974775186e-17, -4.7176143538876775e-17, -4.706501010297836e-17, -4.6953876667079946e-17, -4.684274323118153e-17, -4.6731609795283116e-17, -4.6620476359384705e-17, -4.650934292348629e-17, -4.6398209487587875e-17, -4.628707605168946e-17, -4.6175942615791046e-17, -4.6064809179892635e-17, -4.5953675743994217e-17, -4.5842542308095805e-17, -4.573140887219739e-17, -4.5620275436298976e-17, -4.5509142000400564e-17, -4.5398008564502147e-17, -4.528687512860373e-17, -4.517574169270532e-17, -4.5064608256806906e-17, -4.4953474820908494e-17, -4.4842341385010077e-17, -4.473120794911166e-17, -4.462007451321325e-17, -4.4508941077314836e-17, -4.4397807641416424e-17, -4.4286674205518006e-17, -4.417554076961959e-17, -4.406440733372118e-17, -4.3953273897822766e-17, -4.384214046192435e-17, -4.3731007026025936e-17, -4.361987359012752e-17, -4.350874015422911e-17, -4.3397606718330695e-17, -4.328647328243228e-17, -4.3175339846533866e-17, -4.306420641063545e-17, -4.2953072974737037e-17, -4.2841939538838625e-17, -4.273080610294021e-17, -4.2619672667041796e-17, -4.250853923114338e-17, -4.2397405795244967e-17, -4.2286272359346555e-17, -4.217513892344814e-17, -4.2064005487549726e-17, -4.195287205165131e-17, -4.1841738615752897e-17, -4.1730605179854485e-17, -4.161947174395607e-17, -4.1508338308057656e-17, -4.139720487215924e-17, -4.1286071436260826e-17, -4.1174938000362415e-17, -4.1063804564464e-17, -4.0952671128565586e-17, -4.084153769266717e-17, -4.0730404256768756e-17, -4.0619270820870345e-17, -4.050813738497193e-17, -4.0397003949073515e-17, -4.02858705131751e-17, -4.0174737077276686e-17, -4.0063603641378275e-17, -3.9952470205479857e-17, -3.984133676958144e-17, -3.973020333368303e-17, -3.9619069897784616e-17, -3.9507936461886204e-17, -3.9396803025987787e-17, -3.928566959008937e-17, -3.917453615419096e-17, -3.9063402718292546e-17, -3.8952269282394134e-17, -3.8841135846495717e-17, -3.87300024105973e-17, -3.861886897469889e-17, -3.8507735538800476e-17, -3.8396602102902064e-17, -3.8285468667003646e-17, -3.817433523110523e-17, -3.806320179520682e-17, -3.7952068359308406e-17, -3.7840934923409994e-17, -3.7729801487511576e-17, -3.761866805161316e-17, -3.750753461571475e-17, -3.7396401179816335e-17, -3.7285267743917924e-17, -3.7174134308019506e-17, -3.706300087212109e-17, -3.6951867436222677e-17, -3.6840734000324265e-17, -3.6729600564425854e-17, -3.6618467128527436e-17, -3.650733369262902e-17, -3.6396200256730607e-17, -3.6285066820832195e-17, -3.6173933384933784e-17, -3.6062799949035366e-17, -3.595166651313695e-17, -3.5840533077238537e-17, -3.5729399641340125e-17, -3.5618266205441713e-17, -3.5507132769543296e-17, -3.539599933364488e-17, -3.5284865897746466e-17, -3.5173732461848055e-17, -3.506259902594964e-17, -3.4951465590051226e-17, -3.484033215415281e-17, -3.4729198718254396e-17, -3.4618065282355985e-17, -3.450693184645757e-17, -3.4395798410559155e-17, -3.428466497466074e-17, -3.4173531538762326e-17, -3.4062398102863915e-17, -3.3951264666965497e-17, -3.3840131231067085e-17, -3.372899779516867e-17, -3.3617864359270256e-17, -3.3506730923371844e-17, -3.3395597487473427e-17, -3.3284464051575015e-17, -3.31733306156766e-17, -3.3062197179778186e-17, -3.2951063743879774e-17, -3.2839930307981357e-17, -3.272879687208294e-17, -3.261766343618453e-17, -3.2506530000286116e-17, -3.2395396564387704e-17, -3.2284263128489286e-17, -3.217312969259087e-17, -3.206199625669246e-17, -3.1950862820794046e-17, -3.1839729384895634e-17, -3.1728595948997216e-17, -3.16174625130988e-17, -3.150632907720039e-17, -3.1395195641301975e-17, -3.1284062205403564e-17, -3.1172928769505146e-17, -3.106179533360673e-17, -3.0950661897708317e-17, -3.0839528461809905e-17, -3.0728395025911494e-17, -3.0617261590013076e-17, -3.050612815411466e-17, -3.0394994718216247e-17, -3.0283861282317835e-17, -3.0172727846419424e-17, -3.0061594410521006e-17, -2.995046097462259e-17, -2.9839327538724177e-17, -2.9728194102825765e-17, -2.9617060666927353e-17, -2.9505927231028936e-17, -2.939479379513052e-17, -2.9283660359232106e-17, -2.9172526923333695e-17, -2.9061393487435283e-17, -2.8950260051536866e-17, -2.883912661563845e-17, -2.8727993179740036e-17, -2.8616859743841625e-17, -2.8505726307943213e-17, -2.8394592872044795e-17, -2.828345943614638e-17, -2.8172326000247966e-17, -2.8061192564349555e-17, -2.7950059128451137e-17, -2.7838925692552725e-17, -2.7727792256654308e-17, -2.7616658820755896e-17, -2.7505525384857484e-17, -2.7394391948959067e-17, -2.7283258513060655e-17, -2.7172125077162237e-17, -2.7060991641263826e-17, -2.6949858205365414e-17, -2.6838724769466997e-17, -2.6727591333568585e-17, -2.6616457897670167e-17, -2.6505324461771756e-17, -2.6394191025873344e-17, -2.6283057589974926e-17, -2.6171924154076515e-17, -2.6060790718178097e-17, -2.5949657282279686e-17, -2.5838523846381274e-17, -2.5727390410482856e-17, -2.5616256974584445e-17, -2.5505123538686027e-17, -2.5393990102787615e-17, -2.5282856666889204e-17, -2.5171723230990786e-17, -2.5060589795092375e-17, -2.4949456359193957e-17, -2.4838322923295545e-17, -2.4727189487397128e-17, -2.4616056051498716e-17, -2.4504922615600304e-17, -2.4393789179701887e-17, -2.4282655743803475e-17, -2.4171522307905057e-17, -2.4060388872006646e-17, -2.3949255436108234e-17, -2.3838122000209817e-17, -2.3726988564311405e-17, -2.3615855128412987e-17, -2.3504721692514576e-17, -2.3393588256616164e-17, -2.3282454820717746e-17, -2.3171321384819335e-17, -2.3060187948920917e-17, -2.2949054513022506e-17, -2.2837921077124094e-17, -2.2726787641225676e-17, -2.2615654205327265e-17, -2.2504520769428847e-17, -2.2393387333530435e-17, -2.2282253897632024e-17, -2.2171120461733606e-17, -2.2059987025835195e-17, -2.1948853589936777e-17, -2.1837720154038365e-17, -2.1726586718139948e-17, -2.1615453282241536e-17, -2.1504319846343124e-17, -2.1393186410444707e-17, -2.1282052974546295e-17, -2.1170919538647877e-17, -2.1059786102749466e-17, -2.0948652666851054e-17, -2.0837519230952637e-17, -2.0726385795054225e-17, -2.0615252359155807e-17, -2.0504118923257396e-17, -2.0392985487358984e-17, -2.0281852051460566e-17, -2.0170718615562155e-17, -2.0059585179663737e-17, -1.9948451743765326e-17, -1.9837318307866914e-17, -1.9726184871968496e-17, -1.9615051436070085e-17, -1.9503918000171667e-17, -1.9392784564273255e-17, -1.9281651128374844e-17, -1.9170517692476426e-17, -1.9059384256578015e-17, -1.8948250820679597e-17, -1.8837117384781185e-17, -1.8725983948882774e-17, -1.8614850512984356e-17, -1.8503717077085944e-17, -1.8392583641187527e-17, -1.8281450205289115e-17, -1.8170316769390704e-17, -1.8059183333492286e-17, -1.7948049897593874e-17, -1.7836916461695457e-17, -1.7725783025797045e-17, -1.7614649589898627e-17, -1.7503516154000216e-17, -1.7392382718101804e-17, -1.7281249282203386e-17, -1.7170115846304975e-17, -1.7058982410406557e-17, -1.6947848974508146e-17, -1.6836715538609734e-17, -1.6725582102711316e-17, -1.6614448666812905e-17, -1.6503315230914487e-17, -1.6392181795016075e-17, -1.6281048359117664e-17, -1.6169914923219246e-17, -1.6058781487320835e-17, -1.5947648051422417e-17, -1.5836514615524005e-17, -1.5725381179625594e-17, -1.5614247743727176e-17, -1.5503114307828764e-17, -1.5391980871930347e-17, -1.5280847436031935e-17, -1.5169714000133524e-17, -1.5058580564235106e-17, -1.4947447128336694e-17, -1.4836313692438277e-17, -1.4725180256539865e-17, -1.4614046820641447e-17, -1.4502913384743036e-17, -1.4391779948844624e-17, -1.4280646512946206e-17, -1.4169513077047795e-17, -1.4058379641149377e-17, -1.3947246205250966e-17, -1.3836112769352554e-17, -1.3724979333454136e-17, -1.3613845897555725e-17, -1.3502712461657307e-17, -1.3391579025758895e-17, -1.3280445589860484e-17, -1.3169312153962066e-17, -1.3058178718063655e-17, -1.2947045282165237e-17, -1.2835911846266825e-17, -1.2724778410368414e-17, -1.2613644974469996e-17, -1.2502511538571584e-17, -1.2391378102673167e-17, -1.2280244666774755e-17, -1.2169111230876344e-17, -1.2057977794977926e-17, -1.1946844359079514e-17, -1.1835710923181097e-17, -1.1724577487282685e-17, -1.1613444051384273e-17, -1.1502310615485856e-17, -1.1391177179587444e-17, -1.1280043743689026e-17, -1.1168910307790615e-17, -1.1057776871892203e-17, -1.0946643435993786e-17, -1.0835510000095374e-17, -1.0724376564196956e-17, -1.0613243128298545e-17, -1.0502109692400127e-17, -1.0390976256501715e-17, -1.0279842820603304e-17, -1.0168709384704886e-17, -1.0057575948806475e-17, -9.946442512908057e-18, -9.835309077009645e-18, -9.724175641111234e-18, -9.613042205212816e-18, -9.501908769314404e-18, -9.390775333415987e-18, -9.279641897517575e-18, -9.168508461619164e-18, -9.057375025720746e-18, -8.946241589822334e-18, -8.835108153923917e-18, -8.723974718025505e-18, -8.612841282127093e-18, -8.501707846228676e-18, -8.390574410330264e-18, -8.279440974431846e-18, -8.168307538533435e-18, -8.057174102635023e-18, -7.946040666736606e-18, -7.834907230838194e-18, -7.723773794939776e-18, -7.612640359041365e-18, -7.501506923142947e-18, -7.390373487244535e-18, -7.279240051346124e-18, -7.168106615447706e-18, -7.056973179549295e-18, -6.945839743650877e-18, -6.834706307752465e-18, -6.723572871854054e-18, -6.612439435955636e-18, -6.501306000057224e-18, -6.390172564158807e-18, -6.279039128260395e-18, -6.1679056923619835e-18, -6.056772256463566e-18, -5.945638820565154e-18, -5.8345053846667365e-18, -5.723371948768325e-18, -5.612238512869913e-18, -5.501105076971496e-18, -5.389971641073084e-18, -5.278838205174666e-18, -5.167704769276255e-18, -5.056571333377843e-18, -4.9454378974794255e-18, -4.834304461581014e-18, -4.723171025682596e-18, -4.612037589784185e-18, -4.500904153885773e-18, -4.389770717987355e-18, -4.278637282088944e-18, -4.167503846190526e-18, -4.0563704102921145e-18, -3.945236974393703e-18, -3.834103538495285e-18, -3.722970102596874e-18, -3.611836666698456e-18, -3.500703230800044e-18, -3.3895697949016266e-18, -3.278436359003215e-18, -3.1673029231048035e-18, -3.0561694872063858e-18, -2.9450360513079742e-18, -2.8339026154095565e-18, -2.722769179511145e-18, -2.6116357436127334e-18, -2.5005023077143156e-18, -2.389368871815904e-18, -2.2782354359174864e-18, -2.1671020000190748e-18, -2.0559685641206632e-18, -1.9448351282222455e-18, -1.833701692323834e-18, -1.7225682564254162e-18, -1.6114348205270046e-18, -1.500301384628593e-18, -1.3891679487301754e-18, -1.2780345128317638e-18, -1.166901076933346e-18, -1.0557676410349345e-18, -9.44634205136523e-19, -8.335007692381052e-19, -7.2236733333969365e-19, -6.112338974412759e-19, -5.001004615428644e-19, -3.8896702564444664e-19, -2.7783358974603507e-19, -1.667001538476235e-19, -5.556671794920578e-20, 5.556671794921194e-20, 1.667001538476235e-19, 2.7783358974603507e-19, 3.8896702564444664e-19, 5.001004615428582e-19, 6.112338974412821e-19, 7.2236733333969365e-19, 8.335007692381052e-19, 9.446342051365168e-19, 1.0557676410349283e-18, 1.1669010769333522e-18, 1.2780345128317638e-18, 1.3891679487301754e-18, 1.500301384628587e-18, 1.6114348205269985e-18, 1.7225682564254224e-18, 1.833701692323834e-18, 1.9448351282222455e-18, 2.055968564120657e-18, 2.1671020000190686e-18, 2.2782354359174925e-18, 2.389368871815904e-18, 2.5005023077143156e-18, 2.6116357436127272e-18, 2.7227691795111388e-18, 2.8339026154095627e-18, 2.9450360513079742e-18, 3.0561694872063858e-18, 3.1673029231047974e-18, 3.278436359003209e-18, 3.3895697949016328e-18, 3.500703230800044e-18, 3.611836666698456e-18, 3.7229701025968675e-18, 3.834103538495279e-18, 3.945236974393703e-18, 4.0563704102921145e-18, 4.167503846190526e-18, 4.278637282088938e-18, 4.389770717987349e-18, 4.500904153885773e-18, 4.612037589784185e-18, 4.723171025682596e-18, 4.834304461581008e-18, 4.945437897479419e-18, 5.056571333377843e-18, 5.167704769276255e-18, 5.278838205174666e-18, 5.389971641073078e-18, 5.501105076971502e-18, 5.612238512869913e-18, 5.723371948768325e-18, 5.8345053846667365e-18, 5.945638820565148e-18, 6.056772256463572e-18, 6.1679056923619835e-18, 6.279039128260395e-18, 6.390172564158807e-18, 6.501306000057218e-18, 6.612439435955642e-18, 6.723572871854054e-18, 6.834706307752465e-18, 6.945839743650877e-18, 7.056973179549288e-18, 7.168106615447712e-18, 7.279240051346124e-18, 7.390373487244535e-18, 7.501506923142947e-18, 7.612640359041358e-18, 7.723773794939782e-18, 7.834907230838194e-18, 7.946040666736606e-18, 8.057174102635017e-18, 8.168307538533429e-18, 8.279440974431853e-18, 8.390574410330264e-18, 8.501707846228676e-18, 8.612841282127087e-18, 8.723974718025499e-18, 8.835108153923923e-18, 8.946241589822334e-18, 9.057375025720746e-18, 9.168508461619157e-18, 9.279641897517569e-18, 9.390775333415993e-18, 9.501908769314404e-18, 9.613042205212816e-18, 9.724175641111228e-18, 9.835309077009639e-18, 9.946442512908063e-18, 1.0057575948806475e-17, 1.0168709384704886e-17, 1.0279842820603298e-17, 1.0390976256501709e-17, 1.0502109692400133e-17, 1.0613243128298545e-17, 1.0724376564196956e-17, 1.0835510000095368e-17, 1.094664343599378e-17, 1.1057776871892203e-17, 1.1168910307790615e-17, 1.1280043743689026e-17, 1.1391177179587438e-17, 1.150231061548585e-17, 1.1613444051384273e-17, 1.1724577487282685e-17, 1.1835710923181097e-17, 1.1946844359079508e-17, 1.2057977794977932e-17, 1.2169111230876344e-17, 1.2280244666774755e-17, 1.2391378102673167e-17, 1.2502511538571578e-17, 1.2613644974470002e-17, 1.2724778410368414e-17, 1.2835911846266825e-17, 1.2947045282165237e-17, 1.3058178718063648e-17, 1.3169312153962072e-17, 1.3280445589860484e-17, 1.3391579025758895e-17, 1.3502712461657307e-17, 1.3613845897555719e-17, 1.3724979333454142e-17, 1.3836112769352554e-17, 1.3947246205250966e-17, 1.4058379641149377e-17, 1.416951307704779e-17, 1.4280646512946213e-17, 1.4391779948844624e-17, 1.4502913384743036e-17, 1.4614046820641447e-17, 1.472518025653986e-17, 1.4836313692438283e-17, 1.4947447128336694e-17, 1.5058580564235106e-17, 1.5169714000133517e-17, 1.528084743603193e-17, 1.5391980871930353e-17, 1.5503114307828764e-17, 1.5614247743727176e-17, 1.5725381179625588e-17, 1.5836514615524e-17, 1.5947648051422423e-17, 1.6058781487320835e-17, 1.6169914923219246e-17, 1.6281048359117658e-17, 1.639218179501607e-17, 1.6503315230914493e-17, 1.6614448666812905e-17, 1.6725582102711316e-17, 1.6836715538609728e-17, 1.694784897450814e-17, 1.7058982410406563e-17, 1.7170115846304975e-17, 1.7281249282203386e-17, 1.7392382718101798e-17, 1.750351615400021e-17, 1.7614649589898633e-17, 1.7725783025797045e-17, 1.7836916461695457e-17, 1.7948049897593868e-17, 1.805918333349228e-17, 1.8170316769390704e-17, 1.8281450205289115e-17, 1.8392583641187527e-17, 1.8503717077085938e-17, 1.861485051298435e-17, 1.8725983948882774e-17, 1.8837117384781185e-17, 1.8948250820679597e-17, 1.9059384256578008e-17, 1.917051769247642e-17, 1.9281651128374844e-17, 1.9392784564273255e-17, 1.9503918000171667e-17, 1.961505143607008e-17, 1.9726184871968502e-17, 1.9837318307866914e-17, 1.9948451743765326e-17, 2.0059585179663737e-17, 2.017071861556215e-17, 2.0281852051460573e-17, 2.0392985487358984e-17, 2.0504118923257396e-17, 2.0615252359155807e-17, 2.072638579505422e-17, 2.0837519230952643e-17, 2.0948652666851054e-17, 2.1059786102749466e-17, 2.1170919538647877e-17, 2.128205297454629e-17, 2.1393186410444713e-17, 2.1504319846343124e-17, 2.1615453282241536e-17, 2.1726586718139948e-17, 2.183772015403836e-17, 2.1948853589936783e-17, 2.2059987025835195e-17, 2.2171120461733606e-17, 2.2282253897632018e-17, 2.239338733353043e-17, 2.2504520769428853e-17, 2.2615654205327265e-17, 2.2726787641225676e-17, 2.2837921077124088e-17, 2.29490545130225e-17, 2.3060187948920923e-17, 2.3171321384819335e-17, 2.3282454820717746e-17, 2.3393588256616158e-17, 2.350472169251457e-17, 2.3615855128412993e-17, 2.3726988564311405e-17, 2.3838122000209817e-17, 2.3949255436108228e-17, 2.406038887200664e-17, 2.4171522307905064e-17, 2.4282655743803475e-17, 2.4393789179701887e-17, 2.4504922615600298e-17, 2.461605605149871e-17, 2.4727189487397134e-17, 2.4838322923295545e-17, 2.4949456359193957e-17, 2.5060589795092368e-17, 2.517172323099078e-17, 2.5282856666889204e-17, 2.5393990102787615e-17, 2.5505123538686027e-17, 2.561625697458444e-17, 2.572739041048285e-17, 2.5838523846381274e-17, 2.5949657282279686e-17, 2.6060790718178097e-17, 2.617192415407651e-17, 2.6283057589974933e-17, 2.6394191025873344e-17, 2.6505324461771756e-17, 2.6616457897670167e-17, 2.672759133356858e-17, 2.6838724769467003e-17, 2.6949858205365414e-17, 2.7060991641263826e-17, 2.7172125077162237e-17, 2.728325851306065e-17, 2.7394391948959073e-17, 2.7505525384857484e-17, 2.7616658820755896e-17, 2.7727792256654308e-17, 2.783892569255272e-17, 2.795005912845114e-17, 2.8061192564349555e-17, 2.8172326000247966e-17, 2.828345943614638e-17, 2.839459287204479e-17, 2.8505726307943213e-17, 2.8616859743841625e-17, 2.8727993179740036e-17, 2.883912661563845e-17, 2.895026005153686e-17, 2.9061393487435283e-17, 2.9172526923333695e-17, 2.9283660359232106e-17, 2.939479379513052e-17, 2.950592723102893e-17, 2.9617060666927353e-17, 2.9728194102825765e-17, 2.9839327538724177e-17, 2.995046097462259e-17, 3.0061594410521e-17, 3.0172727846419424e-17, 3.0283861282317835e-17, 3.0394994718216247e-17, 3.050612815411466e-17, 3.061726159001307e-17, 3.0728395025911494e-17, 3.0839528461809905e-17, 3.0950661897708317e-17, 3.106179533360673e-17, 3.117292876950514e-17, 3.1284062205403564e-17, 3.1395195641301975e-17, 3.150632907720039e-17, 3.16174625130988e-17, 3.172859594899721e-17, 3.1839729384895634e-17, 3.1950862820794046e-17, 3.206199625669246e-17, 3.217312969259087e-17, 3.228426312848928e-17, 3.2395396564387704e-17, 3.2506530000286116e-17, 3.261766343618453e-17, 3.272879687208294e-17, 3.283993030798135e-17, 3.2951063743879774e-17, 3.3062197179778186e-17, 3.31733306156766e-17, 3.328446405157501e-17, 3.339559748747342e-17, 3.3506730923371844e-17, 3.3617864359270256e-17, 3.372899779516867e-17, 3.384013123106708e-17, 3.39512646669655e-17, 3.4062398102863915e-17, 3.4173531538762326e-17, 3.428466497466074e-17, 3.439579841055915e-17, 3.4506931846457573e-17, 3.4618065282355985e-17, 3.4729198718254396e-17, 3.484033215415281e-17, 3.495146559005122e-17, 3.5062599025949643e-17, 3.5173732461848055e-17, 3.5284865897746466e-17, 3.539599933364488e-17, 3.550713276954329e-17, 3.5618266205441713e-17, 3.5729399641340125e-17, 3.5840533077238537e-17, 3.595166651313695e-17, 3.606279994903536e-17, 3.6173933384933784e-17, 3.6285066820832195e-17, 3.6396200256730607e-17, 3.650733369262902e-17, 3.661846712852743e-17, 3.6729600564425854e-17, 3.6840734000324265e-17, 3.6951867436222677e-17, 3.706300087212109e-17, 3.71741343080195e-17, 3.7285267743917924e-17, 3.7396401179816335e-17, 3.750753461571475e-17, 3.761866805161316e-17, 3.772980148751157e-17, 3.7840934923409994e-17, 3.7952068359308406e-17, 3.806320179520682e-17, 3.817433523110523e-17, 3.828546866700364e-17, 3.8396602102902064e-17, 3.8507735538800476e-17, 3.861886897469889e-17, 3.87300024105973e-17, 3.884113584649571e-17, 3.8952269282394134e-17, 3.9063402718292546e-17, 3.917453615419096e-17, 3.928566959008937e-17, 3.939680302598778e-17, 3.9507936461886204e-17, 3.9619069897784616e-17, 3.973020333368303e-17, 3.984133676958144e-17, 3.995247020547985e-17, 4.0063603641378275e-17, 4.0174737077276686e-17, 4.02858705131751e-17, 4.039700394907351e-17, 4.0508137384971933e-17, 4.0619270820870345e-17, 4.0730404256768756e-17, 4.084153769266717e-17, 4.095267112856558e-17, 4.1063804564464003e-17, 4.1174938000362415e-17, 4.1286071436260826e-17, 4.139720487215924e-17, 4.150833830805765e-17, 4.1619471743956073e-17, 4.1730605179854485e-17, 4.1841738615752897e-17, 4.195287205165131e-17, 4.206400548754972e-17, 4.2175138923448144e-17, 4.2286272359346555e-17, 4.2397405795244967e-17, 4.250853923114338e-17, 4.261967266704179e-17, 4.2730806102940214e-17, 4.2841939538838625e-17, 4.2953072974737037e-17, 4.306420641063545e-17, 4.317533984653386e-17, 4.3286473282432284e-17, 4.3397606718330695e-17, 4.350874015422911e-17, 4.361987359012752e-17, 4.373100702602593e-17, 4.3842140461924354e-17, 4.3953273897822766e-17, 4.406440733372118e-17, 4.417554076961959e-17, 4.4286674205518e-17, 4.4397807641416424e-17, 4.4508941077314836e-17, 4.462007451321325e-17, 4.473120794911166e-17, 4.484234138501007e-17, 4.4953474820908494e-17, 4.5064608256806906e-17, 4.517574169270532e-17, 4.528687512860373e-17, 4.539800856450214e-17, 4.5509142000400564e-17, 4.5620275436298976e-17, 4.573140887219739e-17, 4.58425423080958e-17, 4.595367574399421e-17, 4.6064809179892635e-17, 4.6175942615791046e-17, 4.628707605168946e-17, 4.639820948758787e-17, 4.650934292348628e-17, 4.6620476359384705e-17, 4.6731609795283116e-17, 4.684274323118153e-17, 4.695387666707994e-17, 4.706501010297835e-17, 4.7176143538876775e-17, 4.7287276974775186e-17, 4.73984104106736e-17, 4.750954384657201e-17, 4.762067728247042e-17, 4.7731810718368845e-17, 4.7842944154267257e-17, 4.795407759016567e-17, 4.806521102606408e-17, 4.8176344461962504e-17, 4.8287477897860915e-17, 4.8398611333759327e-17, 4.850974476965774e-17, 4.862087820555615e-17, 4.8732011641454574e-17, 4.8843145077352985e-17, 4.8954278513251397e-17, 4.906541194914981e-17, 4.917654538504822e-17, 4.9287678820946644e-17, 4.9398812256845055e-17, 4.950994569274347e-17, 4.962107912864188e-17, 4.973221256454029e-17, 4.9843346000438714e-17, 4.9954479436337126e-17, 5.006561287223554e-17, 5.017674630813395e-17, 5.028787974403236e-17, 5.0399013179930784e-17, 5.0510146615829196e-17, 5.062128005172761e-17, 5.073241348762602e-17, 5.084354692352443e-17, 5.0954680359422854e-17, 5.1065813795321266e-17, 5.117694723121968e-17, 5.128808066711809e-17, 5.13992141030165e-17, 5.1510347538914924e-17, 5.1621480974813336e-17, 5.173261441071175e-17, 5.184374784661016e-17, 5.195488128250857e-17, 5.2066014718406995e-17, 5.2177148154305406e-17, 5.228828159020382e-17, 5.239941502610223e-17, 5.251054846200064e-17, 5.2621681897899065e-17, 5.2732815333797476e-17, 5.284394876969589e-17, 5.29550822055943e-17, 5.306621564149271e-17, 5.3177349077391135e-17, 5.3288482513289546e-17, 5.339961594918796e-17, 5.351074938508637e-17, 5.362188282098478e-17, 5.3733016256883205e-17, 5.3844149692781617e-17, 5.395528312868003e-17, 5.406641656457844e-17, 5.417755000047685e-17, 5.4288683436375275e-17, 5.4399816872273687e-17, 5.45109503081721e-17, 5.462208374407051e-17, 5.4733217179968934e-17, 5.4844350615867345e-17, 5.4955484051765757e-17, 5.506661748766417e-17, 5.517775092356258e-17, 5.5288884359461004e-17, 5.5400017795359415e-17, 5.551115123125783e-17]}
},{}],19:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var exp10 = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/python/medium_negative.json' );
var mediumPositive = require( './fixtures/python/medium_positive.json' );
var smallNegative = require( './fixtures/python/small_negative.json' );
var smallPositive = require( './fixtures/python/small_positive.json' );
var tiny = require( './fixtures/python/tiny.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof exp10, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accurately computes `10**x` for negative medium numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp10( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `10**x` for positive medium numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp10( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `10**x` for negative small numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = smallNegative.x;
	expected = smallNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp10( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `10**x` for positive small numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = smallPositive.x;
	expected = smallPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp10( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `10**x` for very small `x`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = tiny.x;
	expected = tiny.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp10( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function returns `+infinity` for very large `x`', function test( t ) {
	t.equal( exp10( 400.0 ), PINF, 'equals +infinity' );
	t.equal( exp10( 500.0 ), PINF, 'equals +infinity' );
	t.equal( exp10( 600.0 ), PINF, 'equals +infinity' );
	t.end();
});

tape( 'the function returns `0.0` for negative large `x`', function test( t ) {
	t.equal( exp10( -400.0 ), 0.0, 'equals 0' );
	t.equal( exp10( -500.0 ), 0.0, 'equals 0' );
	t.equal( exp10( -600.0 ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', function test( t ) {
	t.equal( exp10( NINF ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	t.equal( exp10( PINF ), PINF, 'equals +infinity' );
	t.end();
});

tape( 'the function returns `1` if provided `0`', function test( t ) {
	var v = exp10( 0.0 );
	t.equal( v, 1.0, 'equals 1' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var val = exp10( NaN );
	t.equal( isnan( val ), true, 'equals NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/exp10/test/test.js")
},{"./../lib":13,"./fixtures/python/medium_negative.json":14,"./fixtures/python/medium_positive.json":15,"./fixtures/python/small_negative.json":16,"./fixtures/python/small_positive.json":17,"./fixtures/python/tiny.json":18,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":40,"@stdlib/math/constants/float64-ninf":48,"@stdlib/math/constants/float64-pinf":49,"tape":107}],20:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],21:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":20}],22:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":23}],23:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":28,"@stdlib/math/base/utils/float64-from-words":30,"@stdlib/math/base/utils/float64-normalize":35,"@stdlib/math/base/utils/float64-to-words":37,"@stdlib/math/constants/float64-exponent-bias":41,"@stdlib/math/constants/float64-max-base2-exponent":45,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":44,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":47,"@stdlib/math/constants/float64-ninf":48,"@stdlib/math/constants/float64-pinf":49}],24:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],25:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":24}],26:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":24,"./factory.js":25,"@stdlib/utils/define-read-only-property":52}],27:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":34,"@stdlib/math/constants/float64-exponent-bias":41,"@stdlib/math/constants/float64-high-word-exponent-mask":42}],28:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":27}],29:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":31}],30:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":29}],31:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],32:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":33}],33:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],34:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":32}],35:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":36}],36:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":50}],37:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":39}],38:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":31}],39:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":38}],40:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],41:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],42:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],43:[function(require,module,exports){
'use strict';

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/math/constants/float64-max-base10-exponent' );
* // returns 308
*/


// MAIN //

/**
* The maximum base 10 exponent for a double-precision floating-point number.
*
* @constant
* @type {integer32}
* @default 308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE10_EXPONENT;

},{}],44:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],45:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],46:[function(require,module,exports){
'use strict';

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base10-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/math/constants/float64-min-base10-exponent' );
* // returns -308
*/


// MAIN //

/**
* The minimum base 10 exponent for a normal double-precision floating-point number.
*
* ``` text
* 2^-1022 = 2.2250738585072014e-308 => -308
* ```
*
* @constant
* @type {integer32}
* @default -308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE10_EXPONENT;

},{}],47:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],48:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],49:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],50:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],51:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],52:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":51}],53:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],54:[function(require,module,exports){

},{}],55:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],56:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],57:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":53,"ieee754":76}],58:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":78}],59:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":60,"./lib/keys.js":61}],60:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],61:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],62:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":72,"object-keys":81}],63:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],64:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":65,"./helpers/isNaN":66,"./helpers/mod":67,"./helpers/sign":68,"es-to-primitive/es5":69,"has":75,"is-callable":79}],65:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],66:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],67:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],68:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],69:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":70,"is-callable":79}],70:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],71:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],72:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],73:[function(require,module,exports){
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],74:[function(require,module,exports){
var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":73}],75:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":74}],76:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],77:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],78:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],79:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],80:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],81:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":82}],82:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],83:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":56}],84:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":56}],85:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":86}],86:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":88,"./_stream_writable":90,"core-util-is":58,"inherits":77,"process-nextick-args":84}],87:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":89,"core-util-is":58,"inherits":77}],88:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":86,"./internal/streams/BufferList":91,"./internal/streams/destroy":92,"./internal/streams/stream":93,"_process":56,"core-util-is":58,"events":71,"inherits":77,"isarray":94,"process-nextick-args":84,"safe-buffer":101,"string_decoder/":95,"util":54}],89:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":86,"core-util-is":58,"inherits":77}],90:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":86,"./internal/streams/destroy":92,"./internal/streams/stream":93,"_process":56,"core-util-is":58,"inherits":77,"process-nextick-args":84,"safe-buffer":101,"util-deprecate":113}],91:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":101}],92:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":84}],93:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":71}],94:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],95:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":101}],96:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":97}],97:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":86,"./lib/_stream_passthrough.js":87,"./lib/_stream_readable.js":88,"./lib/_stream_transform.js":89,"./lib/_stream_writable.js":90}],98:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":97}],99:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":90}],100:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":56,"through":112}],101:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":57}],102:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":71,"inherits":77,"readable-stream/duplex.js":85,"readable-stream/passthrough.js":96,"readable-stream/readable.js":97,"readable-stream/transform.js":98,"readable-stream/writable.js":99}],103:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":64,"function-bind":74}],104:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":103,"./polyfill":105,"./shim":106,"define-properties":62,"function-bind":74}],105:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":103}],106:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":105,"define-properties":62}],107:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":108,"./lib/results":110,"./lib/test":111,"_process":56,"defined":63,"through":112}],108:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":56,"fs":55,"through":112}],109:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":56}],110:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":56,"events":71,"function-bind":74,"has":75,"inherits":77,"object-inspect":80,"resumer":100,"through":112}],111:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":109,"deep-equal":59,"defined":63,"events":71,"has":75,"inherits":77,"path":83,"string.prototype.trim":104}],112:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":56,"stream":102}],113:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[19]);
