// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":47,"@stdlib/math/constants/float64-pinf":48}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":30,"@stdlib/math/base/utils/float64-get-high-word":34,"@stdlib/math/base/utils/float64-to-words":37}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

// TODO: replace with TOMS (Openlibm) algo

/*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes/}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* COPYRIGHT
*
* Cephes Math Library Release 2.8:  June, 2000
* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
*
*
* LICENSE
*
* The README [file]{@link http://netlib.sandia.gov/cephes/} reads:
*   > Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*   > The two known misprints in the book are repaired here in the source listings for the gamma function and the incomplete beta integral.
*   > Stephen L. Moshier
*   > moshier@na-net.ornl.gov
*/

// MODULES //

var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent' );
var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;
var round = require( '@stdlib/math/base/special/round' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );


// VARIABLES //

var P = [
	1.51390680115615096133e3,
	2.02020656693165307700e1,
	2.30933477057345225087e-2
];
var Q = [
	4.36821166879210612817E3,
	2.33184211722314911771E2,
	1.0
];

// FUNCTIONS //

// Compile functions to evaluate polynomials based on the above coefficients...
var polyvalP = evalpoly( P );
var polyvalQ = evalpoly( Q );


// MAIN //

/**
* Evaluates the base 2 exponential function.
*
* #### Method
*
* * Range reduction is accomplished by separating the argument into an integer \\( k \\) and fraction \\( f \\) such that
*
* ``` tex
* 2^x = 2^k 2^f
* ```
*
* * A Pade' approximate
*
*    ``` tex
*    1 + 2x \frac{\mathrm{P}\left(x^2\right)}{\mathrm{Q}\left(x^2\right) - x \mathrm{P}\left(x^2\right)}
*    ```
*
*    approximates \\( 2^x \\) in the basic range \\( [-0.5, 0.5] \\).
*
*
* #### Notes
*
* * Relative error:
*
*   | arithmetic | domain      | # trials | peak    | rms     |
*   |:----------:|:-----------:|:--------:|:-------:|:-------:|
*   | IEEE       | -1022,+1024 | 30000    | 1.8e-16 | 5.4e-17 |
*
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = exp2( 3.0 );
* // returns 8.0
*
* @example
* var v = exp2( -9.0 );
* // returns ~0.002
*
* @example
* var v = exp2( 0.0 );
* // returns 1.0
*
* @example
* var v = exp2( NaN );
* // returns NaN
*/
function exp2( x ) {
	var px;
	var xx;
	var n;
	if ( isnan( x ) ) {
		return x;
	}
	if ( x > FLOAT64_MAX_BASE2_EXPONENT ) {
		return PINF;
	}
	if ( x < FLOAT64_MIN_BASE2_EXPONENT ) {
		return 0.0;
	}
	// Separate into integer and fractional parts...
	n = round( x );
	x = x - n;

	xx = x * x;
	px = x * polyvalP( xx );
	x = px / ( polyvalQ( xx ) - px );
	x = 1.0 + ldexp( x, 1 );

	// Scale by power of 2:
	x = ldexp( x, n );

	return x;
} // end FUNCTION exp2()


// EXPORTS //

module.exports = exp2;

},{"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/ldexp":20,"@stdlib/math/base/special/round":22,"@stdlib/math/base/tools/evalpoly":26,"@stdlib/math/constants/float64-max-base2-exponent":44,"@stdlib/math/constants/float64-min-base2-exponent":46,"@stdlib/math/constants/float64-pinf":48}],13:[function(require,module,exports){
'use strict';

/**
* Evaluate the base `2` exponential function.
*
* @module @stdlib/math/base/special/exp2
*
* @example
* var exp2 = require( '@stdlib/math/base/special/exp2' );
*
* var v = exp2( 3.0 );
* // returns 8.0
*
* v = exp2( -9.0 );
* // returns ~0.002
*
* v = exp2( 0.0 );
* // returns 1.0
*
* v = exp2( NaN );
* // returns NaN
*/

// MODULES //

var exp2 = require( './exp2.js' );


// EXPORTS //

module.exports = exp2;

},{"./exp2.js":12}],14:[function(require,module,exports){
module.exports={"expected":[2.2250738585072014e-308,4.51859810934357e-308,9.176202756461085e-308,1.863469487440426e-307,3.78426525958868e-307,7.684946628560024e-307,1.560630680795227e-306,3.169271355493775e-306,6.436039639843063e-306,1.3070072454926882e-305,2.654222216400415e-305,5.390096801933102e-305,1.0946010230300368e-304,2.222875476352667e-304,4.5141337157640464e-304,9.16713663026906e-304,1.861628371896757e-303,3.7805263898954794e-303,7.677353869577133e-303,1.5590887712422648e-302,3.1661401023154983e-302,6.429680806118449e-302,1.3057159169404458e-301,2.651599833897293e-301,5.384771364049197e-301,1.0935195527020493e-300,2.2206792662085983e-300,4.509673733024158e-300,9.15807946144785e-300,1.8597890753828432e-299,3.776791214220965e-299,7.669768612270846e-299,1.557548385102181e-298,3.163011942828534e-298,6.423328254948302e-298,1.304425864226142e-297,2.6489800423186972e-297,5.379451187719473e-297,1.0924391508712951e-296,2.2184852259293903e-296,4.505218156765623e-296,9.149031241146812e-296,1.8579515961013291e-295,3.773059728915135e-295,7.662190849230685e-295,1.5560095208700832e-294,3.159886873976052e-294,6.41698198012442e-294,1.303137086089141e-293,2.646362839105201e-293,5.374136267746342e-293,1.091359816482008e-292,2.2162933533710323e-292,4.500766982634463e-292,9.13999196052405e-292,1.8561159322570746e-291,3.769331930332483e-291,7.65462057305168e-291,1.5544721770420747e-290,3.156764892704243e-290,6.41064197544676e-290,1.3018495812703607e-289,2.6437482216992804e-289,5.3688265989360775e-289,1.090281548479466e-288,2.214103646391633e-288,4.496320206282068e-288,9.130961610748566e-288,1.8542820820562734e-287,3.765607814829917e-287,7.647057776336176e-287,1.552936352116235e-286,3.1536459959630635e-286,6.404308234719886e-286,1.3005633485116544e-285,2.6411361875459386e-285,5.363522176100087e-285,1.0892043458102461e-284,2.21191610285194e-284,4.4918778233630603e-284,9.121940182995927e-284,1.8524500437068922e-283,3.761887378769133e-283,7.639502451695641e-283,1.55140204459176e-282,3.1505301807047353e-282,6.397980751754482e-282,1.2992783865561194e-281,2.6385267340933275e-281,5.358222994056171e-281,1.0881282074217087e-280,2.209730720614292e-280,4.487439829536355e-280,9.11292766845042e-280,1.850619815419107e-279,3.758170618514531e-279,7.631954591747029e-279,1.5498692529693287e-278,3.147417443884492e-278,6.391659520368865e-278,1.2979946941484014e-277,2.6359198587914963e-277,5.352929047625983e-277,1.0870531322622545e-276,2.207547497543139e-276,4.48300622046622e-276,9.103924058307191e-276,1.8487913954044226e-275,3.754457530434102e-275,7.624414189114594e-275,1.5483379757514682e-274,3.1443077824613213e-274,6.385344534385943e-274,1.29671227003408e-273,2.6333155590930136e-273,5.347640331636293e-273,1.08597911928158e-272,2.2053664315055638e-272,4.4785769918201414e-272,9.094929343767225e-272,1.8469647818761128e-271,3.750748110900316e-271,7.616881236431677e-271,1.5468082114418178e-270,3.1412011933964694e-270,6.37903578763473e-270,1.2954311129599733e-269,2.6307138324535877e-269,5.3423568409202475e-269,1.0849061674301627e-268,2.203187520370061e-268,4.474152139269891e-268,9.08594351604306e-268,1.8451399730496525e-267,3.747042356288337e-267,7.609355726337098e-267,1.5452799585454968e-266,3.138097673654186e-266,6.372733273951844e-266,1.2941512216744452e-265,2.6281146763308185e-265,5.337078570314413e-265,1.083834275659517e-264,2.2010107620079257e-264,4.469731658492574e-264,9.076966566353768e-264,1.8433169671418433e-263,3.743340262976912e-263,7.601837651476949e-263,1.5437532155694658e-262,3.134997220202463e-262,6.366436987178486e-262,1.292872594926687e-261,2.625518088184818e-261,5.33180551466214e-261,1.0827634429224493e-260,2.198836154292035e-260,4.4653155451685064e-260,9.0679984859271e-260,1.8414957623712488e-259,3.739641827349252e-259,7.594327004506387e-259,1.5422279810217956e-258,3.131899830011298e-258,6.360146921161942e-258,1.2915952314675341e-257,2.6229240654788274e-257,5.3265376688106114e-257,1.0816936681725451e-256,2.1966636950973685e-256,4.4609037949822754e-256,9.059039266001619e-256,1.8396763569586287e-255,3.735947045791254e-255,7.586823778085428e-255,1.5407042534120312e-254,3.1288055000546713e-254,6.3538630697570814e-254,1.2903191300487501e-253,2.6203326056779758e-253,5.321275027612104e-253,1.0806249503644233e-252,2.1944933823015247e-252,4.456496403623786e-252,9.050088897822394e-252,1.8378587491259195e-251,3.732255914692389e-251,7.579327964883735e-251,1.539182031251555e-250,3.125714227308811e-250,6.34758542682334e-250,1.2890442894233326e-249,2.6177437062498953e-249,5.316017585925237e-249,1.0795572884539914e-248,2.1923252137836794e-248,4.4520933667857975e-248,9.041147372643157e-248,1.8360429370973948e-247,3.728568430446576e-247,7.571839557576417e-247,1.537661313052855e-246,3.1226260087529346e-246,6.341313986226224e-246,1.2877707083458154e-245,2.6151573646653394e-245,5.310765338612454e-245,1.078490681397848e-244,2.190159187425105e-244,4.447694680166725e-244,9.032214681728406e-244,1.8342289190986476e-243,3.7248845894504155e-243,7.564358548845827e-243,1.5361420973298898e-242,3.1195408413699814e-242,6.335048741838799e-242,1.2864983855716586e-241,2.612573578396943e-241,5.305518280541272e-241,1.0774251281539629e-240,2.1879953011096837e-240,4.443300339468185e-240,9.023290816349143e-240,1.8324166933570247e-239,3.721204388104068e-239,7.556884931383332e-239,1.5346243825984495e-238,3.116458722145135e-238,6.328789687538683e-238,1.285227319857552e-237,2.609992344919836e-237,5.300276406585535e-237,1.0763606276810798e-236,2.185833552722872e-236,4.438910340396039e-236,9.01437576778499e-236,1.8306062581020575e-235,3.7175278228121314e-235,7.549418697885731e-235,1.533108167375427e-234,3.113379648066556e-234,6.322536817209548e-234,1.2839575099617177e-233,2.6074136617122625e-233,5.2950397116229e-233,1.0752971789389721e-232,2.1836739401522153e-232,4.434524678661443e-232,9.00546952732632e-232,1.8287976115645937e-231,3.7138548899818755e-231,7.541959841057042e-231,1.5315934501791812e-230,3.1103036161261187e-230,6.3162901247426e-230,1.2826889546433004e-229,2.6048375262541347e-229,5.28980819053608e-229,1.074234780888695e-228,2.1815164612878628e-228,4.4301433499787393e-228,8.996572086269977e-228,1.8269907519772285e-227,3.7101855860241203e-227,7.534508353610275e-227,1.530080229529897e-226,3.107230623317932e-226,6.3100496040330895e-226,1.281421652662672e-225,2.6022639360286755e-225,5.2845818382141015e-225,1.0731734324920758e-224,2.1793611140215317e-224,4.425766350066506e-224,8.987683435921407e-224,1.8251856775747363e-223,3.706519907354111e-223,7.527064228263856e-223,1.5285685039487385e-222,3.1041606666390775e-222,6.303815248984291e-222,1.280155602781731e-221,2.5996928885209795e-221,5.279360649549784e-221,1.0721131327119679e-220,2.1772078962470226e-220,4.4213936746485974e-220,8.97880356759677e-220,1.8233823865932025e-219,3.702857850389462e-219,7.519627457743407e-219,1.527058271958813e-218,3.101093743090335e-218,6.297587053504009e-218,1.2788908037632971e-217,2.597124381218627e-217,5.274144619440998e-217,1.0710538805125028e-216,2.1750568058607323e-216,4.417025319452047e-216,8.969932472617978e-216,1.821580877270457e-215,3.699199411552499e-215,7.512198034783515e-215,1.5255495320843261e-214,3.0980298496747152e-214,6.2913650115060674e-214,1.2776272543714124e-213,2.594558411612293e-213,5.2689337427919e-213,1.069995674858582e-212,2.1729078407604495e-212,4.4126612802081097e-212,8.961070142318339e-212,1.8197811478465001e-211,3.6955445872682046e-211,7.504775952124165e-211,1.524042282850941e-210,3.09496898339819e-210,6.285149116911792e-210,1.2763649533716418e-209,2.5919949771945194e-209,5.263728014510021e-209,1.06893851471613e-208,2.170760998846725e-208,4.4083015526533026e-208,8.952216568037608e-208,1.817983196562641e-207,3.691893373965095e-207,7.497361202512522e-207,1.5225365227861388e-206,3.091911141270421e-206,6.278939363647028e-206,1.2751038995303679e-205,2.5894340754603252e-205,5.258527429509581e-205,1.0678823990523456e-204,2.1686162780216708e-204,4.403946132527311e-204,8.9433717411241e-204,1.8161870216619273e-203,3.6882457680760865e-203,7.489953778704685e-203,1.5210322504184947e-202,3.08885632030305e-202,6.272735745643621e-202,1.2738440916155934e-201,2.5868757039078164e-201,5.253331982708584e-201,1.0668273268351955e-200,2.1664736761894718e-200,4.3995950155740314e-200,8.934535652936786e-200,1.8143926213895709e-199,3.684601766036749e-199,7.482553673461549e-199,1.5195294642780377e-198,3.085804517511645e-198,6.266538256840897e-198,1.2725855283962378e-197,2.5843198600369594e-197,5.248141669030053e-197,1.0657732970336658e-196,2.164333191256896e-196,4.395248197542604e-196,8.925708294841067e-196,1.8125999939920883e-195,3.680961364286175e-195,7.475160879553521e-195,1.5180281628966088e-194,3.0827557299139914e-194,6.260346891182684e-194,1.2713282086424365e-193,2.581766541350191e-193,5.24295648340327e-193,1.0647203086180138e-192,2.1621948211322664e-192,4.39090567418533e-192,8.916889658210871e-192,1.8108091377177297e-191,3.6773245592678435e-191,7.467775389756383e-191,1.5165283448071403e-190,3.079709954530824e-190,6.254161642618801e-190,1.2700721311258409e-189,2.579215745353025e-189,5.237776420761282e-189,1.063668360559262e-188,2.1600585637259743e-188,4.386567441258708e-188,8.90807973443076e-188,1.8090200508169033e-187,3.6736913474278783e-187,7.460397196853054e-187,1.5150300085440142e-186,3.076667188386546e-186,6.247982505106516e-186,1.268817294619015e-185,2.576667469552831e-185,5.232601476042151e-185,1.0626174518294495e-184,2.1579244169509858e-184,4.382233494524466e-184,8.899278514891702e-184,1.8072327315411757e-183,3.6700617252159148e-183,7.453026293635349e-183,1.5135331526434187e-182,3.0736274285077757e-182,6.241809472607592e-182,1.2675636978957366e-181,2.5741217114594407e-181,5.227431644190169e-181,1.0615675814018828e-180,2.155792378721818e-180,4.377903829747137e-180,8.890485990993168e-180,1.8054471781444106e-179,3.666435689085965e-179,7.445662672900442e-179,1.51203777564263e-178,3.0705906719240683e-178,6.235642539089761e-178,1.2663113397312937e-177,2.5715784685857552e-177,5.222266920153392e-177,1.0605187482505472e-176,2.1536624469550493e-176,4.373578442696821e-176,8.88170215414523e-176,1.80366338888177e-175,3.662813235494675e-175,7.438306327452622e-175,1.5105438760803703e-174,3.0675569156686393e-174,6.229481698528186e-174,1.2650602189018856e-173,2.569037738446322e-173,5.217107298884866e-173,1.0594709513507773e-172,2.1515346195698255e-172,4.3692573291467603e-172,8.872926995764348e-172,1.8018813620101403e-171,3.6591943609021935e-171,7.430957250105049e-171,1.5090514524971619e-170,3.06452615677691e-170,6.22332694490202e-170,1.2638103341849203e-169,2.566499518558954e-169,5.2119527753438567e-169,1.0584241896786682e-168,2.1494088944868395e-168,4.364940484874376e-168,8.864160507275458e-168,1.8001010957885555e-167,3.6555790617730326e-167,7.423615433676223e-167,1.507560503434494e-166,3.0614983922872317e-166,6.217178272198326e-166,1.2625616843593132e-165,2.563963806443309e-165,5.206803344493377e-165,1.0573784622113276e-164,2.1472852696288386e-164,4.36062790566229e-164,8.855402680114074e-164,1.7983225884773446e-163,3.6519673345740426e-163,7.416280870991742e-163,1.5060710274357714e-162,3.058473619241606e-162,6.211035674408638e-162,1.2613142682048863e-161,2.561430599621497e-161,5.201659001301418e-161,1.0563337679271234e-160,2.14516374292113e-160,4.356319587296263e-160,8.846653505721367e-160,1.7965458383385551e-159,3.6483591757767173e-159,7.408953554886046e-159,1.5045830230454824e-158,3.055451834684231e-158,6.2048991455304254e-158,1.2600680845026686e-157,2.5588998956186804e-157,5.196519740742173e-157,1.0552901058051833e-156,2.1430443122903953e-156,4.352015525566218e-156,8.837912975549764e-156,1.7947708436363763e-155,3.6447545818551743e-155,7.4016334781989006e-155,1.5030964888096122e-154,3.0524330356622286e-154,6.198768679568558e-154,1.2588231320351908e-153,2.5563716919617616e-153,5.191385557793363e-153,1.0542474748256851e-152,2.1409269756660384e-152,4.347715716267267e-152,8.829181081058042e-152,1.7929976026362177e-151,3.641153549287158e-151,7.394320633777147e-151,1.5016114232757018e-150,3.049417219226358e-150,6.192644270532115e-150,1.2575794095858388e-149,2.55384598618059e-149,5.186256447438496e-149,1.0532058739698972e-148,2.1388117309790047e-148,4.3434201551974765e-148,8.820457813713762e-148,1.791226113605485e-147,3.637556074554179e-147,7.387015014476443e-147,1.5001278249926676e-146,3.0464043824294523e-146,6.186525912437319e-146,1.2563369159393994e-145,2.5513227758070525e-145,5.181132404666029e-145,1.0521653022200535e-144,2.136698576162366e-144,4.33912883815975e-144,8.811743164993619e-144,1.7894563748132957e-143,3.633962154141082e-143,7.379716613157466e-143,1.4986456925109184e-142,3.043394522327735e-142,6.180413599305325e-142,1.2550956498818596e-141,2.5488020583757768e-141,5.1760134244687635e-141,1.0511257585594342e-140,2.1345875091514074e-140,4.334841760961137e-140,8.803037126382373e-140,1.787688384530266e-139,3.6303717845363275e-139,7.372425422689112e-139,1.4971650243821186e-138,3.040387635980339e-138,6.17430732516393e-138,1.2538556102002577e-137,2.546283831423826e-137,5.1708995018450575e-137,1.0500872419722001e-136,2.132478527883367e-136,4.3305589194123174e-136,8.794339689373551e-136,1.785922141028932e-135,3.626784962231417e-135,7.365141435947318e-135,1.4956858191595405e-134,3.0373837204489427e-134,6.16820708404683e-134,1.2526167956829785e-133,2.5437680924903955e-133,5.165790631798008e-133,1.04904975144364e-132,2.130371630297607e-132,4.3262803093286226e-132,8.78565084546804e-132,1.7841576425835367e-131,3.623201683721745e-131,7.357864645814196e-131,1.4942080753978856e-130,3.0343827727984886e-130,6.1621128699928835e-130,1.2513792051195548e-129,2.5412548391174133e-129,5.160686809335852e-129,1.0480132859600036e-128,2.1282668143352725e-128,4.322005926529517e-128,8.776970586176164e-128,1.7823948874698168e-127,3.619621945506171e-127,7.350595045179756e-127,1.4927317916531064e-126,3.0313847900966974e-126,6.156024677047572e-126,1.2501428373007645e-125,2.538744068849135e-125,5.155588029471147e-125,1.0469778445085836e-124,2.126164077939795e-124,4.317735766838087e-124,8.768298903016637e-124,1.7806338739654237e-123,3.616045744086584e-123,7.343332626940741e-123,1.4912569664827596e-122,3.0283897694143066e-122,6.149942499262017e-122,1.2489076910184317e-121,2.536235779232344e-121,5.15049428722199e-121,1.0459434260775493e-120,2.1240634190566372e-120,4.3134698260820534e-120,8.75963578751551e-120,1.7788746003497103e-119,3.612473075968758e-119,7.336077384001207e-119,1.4897835984457675e-118,3.0253977078245907e-118,6.143866330693454e-118,1.2476737650657234e-117,2.5337299678159447e-117,5.1454055776113996e-117,1.0449100296561937e-116,2.1219648356330413e-116,4.309208100093262e-116,8.75098123120825e-116,1.7771170649035193e-115,3.608903937661776e-115,7.328829309271348e-115,1.4883116861025347e-114,3.022408602404073e-114,6.137796165404271e-114,1.2464410582369976e-113,2.531226632151566e-113,5.140321895666701e-113,1.0438776542348082e-112,2.1198683256185284e-112,4.304950584707164e-112,8.742335225638338e-112,1.775361265909602e-111,3.6053383256783124e-111,7.321588395669234e-111,1.4868412280147127e-110,3.0194224502321656e-110,6.131731997463444e-110,1.2452095693276565e-109,2.5287257697932543e-109,5.135243236420744e-109,1.0428462988045583e-108,2.1177738869645617e-108,4.300697275763838e-108,8.733697762357951e-108,1.773607201652337e-107,3.601776236534061e-107,7.314354636119928e-107,1.4853722227455497e-106,3.0164392483908075e-106,6.125673820945809e-106,1.2439792971344398e-105,2.526227378297173e-105,5.130169594911079e-105,1.0418159623577297e-104,2.115681517624712e-104,4.2964481691073004e-104,8.725068832926589e-104,1.7718548704178663e-103,3.5982176667485844e-103,7.307128023554623e-103,1.4839046688597134e-102,3.01345899396518e-102,6.119621629931333e-102,1.2427502404552273e-101,2.5237314552222008e-101,5.125100966180366e-101,1.0407866438875626e-100,2.113591215554321e-100,4.2922032605858437e-100,8.716448428913113e-100,1.7701042704938171e-99,3.5946626128448826e-99,7.299908550912354e-99,1.4824385649231143e-98,3.010481684043343e-98,6.113575418506556e-98,1.2415223980891346e-97,2.5212379981295266e-97,5.120037345275554e-97,1.0397583423883327e-96,2.111502978711002e-96,4.287962546051355e-96,8.707836541894721e-96,1.7683554001697172e-95,3.591111071348967e-95,7.292696211139136e-95,1.4809739095032545e-94,3.0075073157158763e-94,6.107535180763617e-94,1.240295768836318e-93,2.518747004582849e-93,5.114978727249093e-93,1.0387310568551865e-92,2.1094168050543853e-92,4.2837260213603264e-92,8.6992331634559e-92,1.7666082577367843e-91,3.5875630387907057e-91,7.28549099718709e-91,1.479510701168994e-90,3.004535886076592e-90,6.101500910800736e-90,1.239070351498265e-89,2.5162584721479765e-89,5.109925107158319e-89,1.0377047862843867e-88,2.1073326925458675e-88,4.279493682373345e-88,8.69063828519048e-88,1.7648628414877154e-87,3.5840185117032544e-87,7.278292902016163e-87,1.4780489384906644e-86,3.0015673922220538e-86,6.0954726027212396e-86,1.237846144877648e-85,2.513772398393419e-85,5.104876480064849e-85,1.0366795296731867e-84,2.105250639149108e-84,4.27526552495458e-84,8.682051898700254e-84,1.763119149717104e-83,3.580477486623334e-83,7.27110191859297e-83,1.476588620039835e-82,2.998601831251813e-82,6.089450250635004e-82,1.2366231477781754e-81,2.5112887808900895e-81,5.099832841035782e-81,1.035655286019709e-80,2.1031706428296976e-80,4.271041544972794e-80,8.673473995595658e-80,1.7613771807211573e-79,3.576939960090664e-79,7.263918039891362e-79,1.4751297443896617e-78,2.99563920026793e-78,6.083433848657722e-78,1.235401359004884e-77,2.5088076172110037e-77,5.09479418514299e-77,1.0346320543231875e-76,2.101092701555317e-76,4.2668217383007445e-76,8.664904567494387e-76,1.7596369327978025e-75,3.573405928648878e-75,7.256741258891271e-75,1.4736723101146802e-74,2.9926794963756854e-74,6.077423390910182e-74,1.234180777363967e-73,2.5063289049318722e-73,5.0897605074630126e-73,1.0336098335838253e-72,2.099016813295408e-72,4.262606100815018e-72,8.656343606023614e-72,1.7578984042465772e-71,3.56987538884467e-71,7.249571568580568e-71,1.4722163157907768e-70,2.989722716683159e-70,6.0714188715197e-70,1.2329614016627486e-69,2.503852641630751e-69,5.084731803077257e-69,1.0325886228027517e-68,2.0969429760217077e-68,4.258394628396608e-68,8.647791102817934e-68,1.756161593368735e-67,3.566348337228429e-67,7.242408961953336e-67,1.4707617599952452e-66,2.9867688583011713e-66,6.065420284619276e-66,1.2317432307097305e-65,2.5013788248879404e-65,5.079708067072286e-65,1.0315684209821646e-64,2.0948711877077507e-64,4.254187316930327e-64,8.639247049520885e-64,1.7544264984671734e-63,3.5628247703536696e-63,7.235253432011153e-63,1.469308641306871e-62,2.9838179183433964e-62,6.059427624347345e-62,1.2305262633146654e-61,2.4989074522863305e-61,5.07468929453912e-61,1.0305492271251862e-60,2.092801446329239e-60,4.2499841623050537e-60,8.630711437783584e-60,1.7526931178465691e-59,3.559304684777593e-59,7.228104971761941e-59,1.4678569583057577e-58,2.980869893926536e-58,6.0534408848486116e-58,1.2293104982883847e-57,2.4964385214110495e-57,5.0696754805740284e-57,1.0295310402359243e-56,2.0907337498637095e-56,4.245785160413979e-56,8.622184259266073e-56,1.7509614498131367e-55,3.5557880770605935e-55,7.220963574221097e-55,1.4664067095734112e-54,2.977924782169906e-54,6.047460060273209e-54,1.2280959344429913e-53,2.493972029849613e-53,5.064666620277725e-53,1.028513859319531e-52,2.088668096290862e-52,4.2415903071540185e-52,8.613665505636127e-52,1.7492314926749023e-51,3.55227494376646e-51,7.213829232410352e-51,1.4649578936928261e-50,2.9749825801959053e-50,6.04148514477705e-50,1.2268825705916892e-49,2.4915079751920668e-49,5.059662708756165e-49,1.0274976833820605e-48,2.086604483592269e-48,4.237399598426473e-48,8.605155168569752e-48,1.747503244741425e-47,3.548765281462589e-47,7.2067019393589e-47,1.4635105092482812e-46,2.972043285129596e-46,6.0355161325221766e-46,1.2256704055488556e-45,2.4890463550306422e-45,5.054663741119838e-45,1.0264825114306301e-44,2.0845429097514973e-44,4.233213030136361e-44,8.59665323975169e-44,1.7457767043240724e-43,3.5452590867194877e-43,7.199581688102396e-43,1.4620645548255693e-42,2.9691068940988836e-42,6.029553017675925e-42,1.2244594381301105e-41,2.4865871669601444e-41,5.049669712484066e-41,1.0254683424732569e-40,2.082483372754229e-40,4.22903059819308e-40,8.588159710874216e-40,1.7440518697357774e-39,3.541756356111332e-39,7.192468471683374e-39,1.4606200290117797e-38,2.9661734042346566e-38,6.023595794411869e-38,1.2232496671521488e-37,2.484130408577584e-37,5.0446806179692944e-37,1.024455175519019e-36,2.0804258705879927e-36,4.2248522985097776e-36,8.579674573638492e-36,1.7423287392911392e-35,3.5382570862154367e-35,7.185362283151601e-35,1.4591769303954554e-34,2.9632428126705508e-34,6.017644456908923e-34,1.2220410914329296e-33,2.4816760774824446e-33,5.039696452700443e-33,1.0234430095779029e-32,2.0783704012423874e-32,4.220678127003805e-32,8.57119781975329e-32,1.7406073113065083e-31,3.53476127361264e-31,7.178263115563494e-31,1.4577352575665194e-30,2.9603151165429744e-30,6.011698999351989e-30,1.2208337097914965e-29,2.4792241712765554e-29,5.034717211807446e-29,1.0224318436609135e-28,2.076316962708978e-28,4.216508079596547e-28,8.562729440935907e-28,1.7388875840998476e-27,3.531268914887121e-27,7.171170961982189e-27,1.456295009116288e-26,2.9573903129912546e-26,6.005759415931657e-26,1.2196275210481077e-25,2.4767746875641405e-25,5.029742890424999e-25,1.0214216767800331e-24,2.0742655529813138e-24,4.212342152213296e-24,8.554269428911745e-24,1.7371695559907466e-23,3.5277800066264354e-23,7.16408581547789e-23,1.454856183637469e-22,2.9544683991575136e-22,5.999825700844315e-22,1.2184225240241753e-21,2.474327623951718e-21,5.0247734836926065e-21,1.0204125079481898e-20,2.0722161700549265e-20,4.208180340783491e-20,8.545817775414415e-20,1.7354532253005076e-19,3.524294545421526e-19,7.157007669127577e-19,1.4534187797241678e-18,2.9515493721866986e-18,5.993897848291878e-18,1.217218717542281e-17,2.4718829780482424e-17,5.019808986754597e-17,1.0194043361793169e-16,2.0701688119273378e-16,4.2040226412405533e-16,8.537374472185578e-16,1.7337385903520735e-15,3.520812527866654e-15,7.149936516015068e-15,1.4519827959718648e-14,2.9486332292265916e-14,5.987975852482285e-14,1.2160161004261528e-13,2.4694407474650083e-13,5.014849394760025e-13,1.018397160488312e-12,2.068123476598018e-12,4.199869049521922e-12,8.528939510975175e-12,1.7320256494700526e-11,3.5173339505595126e-11,7.14287234923105e-11,1.450548230977428e-10,2.945719967427749e-10,5.98205970762896e-10,1.2148146715006983e-9,2.467000929815675e-9,5.009894702862824e-9,1.017390979891049e-8,2.066080162068449e-8,4.19571956156906e-8,8.520512883541298e-8,1.7303144009806838e-7,3.5138588101010893e-7,7.135815161872931e-7,1.4491150833391257e-6,2.942809583943593e-6,5.97614940795118e-6,1.2136144295919831e-5,2.4645635227162418e-5,5.004944906221658e-5,0.0001016385793404367,0.00020640388663420678,0.000419157417332742,0.0008512094581650058,0.0017286048432118863,0.003510387103095784,0.00712876494704506,0.01447683351656608,0.029399020759303247,0.05970244947673866,0.12124153735272257,0.2462128523785086,0.5],"x":[-1022.0,-1020.977977977978,-1019.9559559559559,-1018.933933933934,-1017.911911911912,-1016.8898898898899,-1015.8678678678679,-1014.8458458458458,-1013.8238238238238,-1012.8018018018018,-1011.7797797797798,-1010.7577577577578,-1009.7357357357357,-1008.7137137137137,-1007.6916916916917,-1006.6696696696697,-1005.6476476476477,-1004.6256256256256,-1003.6036036036036,-1002.5815815815815,-1001.5595595595596,-1000.5375375375376,-999.5155155155155,-998.4934934934935,-997.4714714714714,-996.4494494494495,-995.4274274274275,-994.4054054054054,-993.3833833833834,-992.3613613613613,-991.3393393393393,-990.3173173173174,-989.2952952952953,-988.2732732732733,-987.2512512512512,-986.2292292292292,-985.2072072072073,-984.1851851851852,-983.1631631631632,-982.1411411411411,-981.1191191191191,-980.097097097097,-979.0750750750751,-978.0530530530531,-977.031031031031,-976.009009009009,-974.986986986987,-973.964964964965,-972.942942942943,-971.9209209209209,-970.8988988988989,-969.8768768768768,-968.8548548548548,-967.8328328328329,-966.8108108108108,-965.7887887887888,-964.7667667667668,-963.7447447447447,-962.7227227227228,-961.7007007007007,-960.6786786786787,-959.6566566566567,-958.6346346346346,-957.6126126126126,-956.5905905905906,-955.5685685685686,-954.5465465465466,-953.5245245245245,-952.5025025025025,-951.4804804804805,-950.4584584584585,-949.4364364364365,-948.4144144144144,-947.3923923923924,-946.3703703703703,-945.3483483483484,-944.3263263263264,-943.3043043043043,-942.2822822822823,-941.2602602602602,-940.2382382382382,-939.2162162162163,-938.1941941941942,-937.1721721721722,-936.1501501501501,-935.1281281281281,-934.1061061061062,-933.0840840840841,-932.0620620620621,-931.04004004004,-930.018018018018,-928.9959959959959,-927.973973973974,-926.951951951952,-925.9299299299299,-924.9079079079079,-923.8858858858858,-922.8638638638639,-921.8418418418419,-920.8198198198198,-919.7977977977978,-918.7757757757757,-917.7537537537537,-916.7317317317318,-915.7097097097097,-914.6876876876877,-913.6656656656656,-912.6436436436436,-911.6216216216217,-910.5995995995996,-909.5775775775776,-908.5555555555555,-907.5335335335335,-906.5115115115115,-905.4894894894895,-904.4674674674675,-903.4454454454454,-902.4234234234234,-901.4014014014014,-900.3793793793794,-899.3573573573574,-898.3353353353353,-897.3133133133133,-896.2912912912913,-895.2692692692692,-894.2472472472473,-893.2252252252252,-892.2032032032032,-891.1811811811812,-890.1591591591591,-889.1371371371372,-888.1151151151151,-887.0930930930931,-886.0710710710711,-885.049049049049,-884.027027027027,-883.005005005005,-881.982982982983,-880.960960960961,-879.9389389389389,-878.9169169169169,-877.894894894895,-876.8728728728729,-875.8508508508509,-874.8288288288288,-873.8068068068068,-872.7847847847847,-871.7627627627628,-870.7407407407408,-869.7187187187187,-868.6966966966967,-867.6746746746746,-866.6526526526527,-865.6306306306307,-864.6086086086086,-863.5865865865866,-862.5645645645645,-861.5425425425425,-860.5205205205206,-859.4984984984985,-858.4764764764765,-857.4544544544544,-856.4324324324324,-855.4104104104105,-854.3883883883884,-853.3663663663664,-852.3443443443443,-851.3223223223223,-850.3003003003003,-849.2782782782783,-848.2562562562563,-847.2342342342342,-846.2122122122122,-845.1901901901902,-844.1681681681682,-843.1461461461462,-842.1241241241241,-841.1021021021021,-840.08008008008,-839.058058058058,-838.0360360360361,-837.014014014014,-835.991991991992,-834.96996996997,-833.9479479479479,-832.925925925926,-831.9039039039039,-830.8818818818819,-829.8598598598599,-828.8378378378378,-827.8158158158158,-826.7937937937938,-825.7717717717718,-824.7497497497498,-823.7277277277277,-822.7057057057057,-821.6836836836837,-820.6616616616617,-819.6396396396397,-818.6176176176176,-817.5955955955956,-816.5735735735735,-815.5515515515516,-814.5295295295296,-813.5075075075075,-812.4854854854855,-811.4634634634634,-810.4414414414415,-809.4194194194195,-808.3973973973974,-807.3753753753754,-806.3533533533533,-805.3313313313313,-804.3093093093094,-803.2872872872873,-802.2652652652653,-801.2432432432432,-800.2212212212212,-799.1991991991991,-798.1771771771772,-797.1551551551552,-796.1331331331331,-795.1111111111111,-794.089089089089,-793.0670670670671,-792.0450450450451,-791.023023023023,-790.001001001001,-788.978978978979,-787.9569569569569,-786.934934934935,-785.9129129129129,-784.8908908908909,-783.8688688688688,-782.8468468468468,-781.8248248248249,-780.8028028028028,-779.7807807807808,-778.7587587587587,-777.7367367367367,-776.7147147147147,-775.6926926926927,-774.6706706706707,-773.6486486486486,-772.6266266266266,-771.6046046046046,-770.5825825825826,-769.5605605605606,-768.5385385385385,-767.5165165165165,-766.4944944944945,-765.4724724724724,-764.4504504504505,-763.4284284284284,-762.4064064064064,-761.3843843843844,-760.3623623623623,-759.3403403403404,-758.3183183183183,-757.2962962962963,-756.2742742742743,-755.2522522522522,-754.2302302302302,-753.2082082082082,-752.1861861861862,-751.1641641641642,-750.1421421421421,-749.1201201201201,-748.0980980980981,-747.0760760760761,-746.0540540540541,-745.032032032032,-744.01001001001,-742.9879879879879,-741.965965965966,-740.943943943944,-739.9219219219219,-738.8998998998999,-737.8778778778778,-736.8558558558559,-735.8338338338339,-734.8118118118118,-733.7897897897898,-732.7677677677677,-731.7457457457457,-730.7237237237238,-729.7017017017017,-728.6796796796797,-727.6576576576576,-726.6356356356356,-725.6136136136137,-724.5915915915916,-723.5695695695696,-722.5475475475475,-721.5255255255255,-720.5035035035035,-719.4814814814815,-718.4594594594595,-717.4374374374374,-716.4154154154154,-715.3933933933934,-714.3713713713714,-713.3493493493494,-712.3273273273273,-711.3053053053053,-710.2832832832833,-709.2612612612612,-708.2392392392393,-707.2172172172172,-706.1951951951952,-705.1731731731732,-704.1511511511511,-703.1291291291292,-702.1071071071071,-701.0850850850851,-700.063063063063,-699.041041041041,-698.019019019019,-696.996996996997,-695.974974974975,-694.952952952953,-693.9309309309309,-692.9089089089089,-691.8868868868869,-690.8648648648649,-689.8428428428429,-688.8208208208208,-687.7987987987988,-686.7767767767767,-685.7547547547548,-684.7327327327328,-683.7107107107107,-682.6886886886887,-681.6666666666666,-680.6446446446447,-679.6226226226227,-678.6006006006006,-677.5785785785786,-676.5565565565565,-675.5345345345345,-674.5125125125126,-673.4904904904905,-672.4684684684685,-671.4464464464464,-670.4244244244244,-669.4024024024025,-668.3803803803804,-667.3583583583584,-666.3363363363363,-665.3143143143143,-664.2922922922922,-663.2702702702703,-662.2482482482483,-661.2262262262262,-660.2042042042042,-659.1821821821821,-658.1601601601602,-657.1381381381382,-656.1161161161161,-655.0940940940941,-654.072072072072,-653.05005005005,-652.0280280280281,-651.006006006006,-649.983983983984,-648.961961961962,-647.9399399399399,-646.9179179179179,-645.8958958958959,-644.8738738738739,-643.8518518518518,-642.8298298298298,-641.8078078078078,-640.7857857857858,-639.7637637637638,-638.7417417417417,-637.7197197197197,-636.6976976976977,-635.6756756756756,-634.6536536536537,-633.6316316316316,-632.6096096096096,-631.5875875875876,-630.5655655655655,-629.5435435435436,-628.5215215215215,-627.4994994994995,-626.4774774774775,-625.4554554554554,-624.4334334334334,-623.4114114114114,-622.3893893893894,-621.3673673673674,-620.3453453453453,-619.3233233233233,-618.3013013013014,-617.2792792792793,-616.2572572572573,-615.2352352352352,-614.2132132132132,-613.1911911911911,-612.1691691691692,-611.1471471471472,-610.1251251251251,-609.1031031031031,-608.081081081081,-607.0590590590591,-606.0370370370371,-605.015015015015,-603.992992992993,-602.9709709709709,-601.9489489489489,-600.926926926927,-599.9049049049049,-598.8828828828829,-597.8608608608608,-596.8388388388388,-595.8168168168169,-594.7947947947948,-593.7727727727728,-592.7507507507507,-591.7287287287287,-590.7067067067067,-589.6846846846847,-588.6626626626627,-587.6406406406406,-586.6186186186186,-585.5965965965966,-584.5745745745746,-583.5525525525526,-582.5305305305305,-581.5085085085085,-580.4864864864865,-579.4644644644644,-578.4424424424425,-577.4204204204204,-576.3983983983984,-575.3763763763764,-574.3543543543543,-573.3323323323324,-572.3103103103103,-571.2882882882883,-570.2662662662663,-569.2442442442442,-568.2222222222222,-567.2002002002002,-566.1781781781782,-565.1561561561562,-564.1341341341341,-563.1121121121121,-562.0900900900901,-561.0680680680681,-560.0460460460461,-559.024024024024,-558.002002002002,-556.9799799799799,-555.957957957958,-554.935935935936,-553.9139139139139,-552.8918918918919,-551.8698698698698,-550.8478478478479,-549.8258258258259,-548.8038038038038,-547.7817817817818,-546.7597597597597,-545.7377377377377,-544.7157157157158,-543.6936936936937,-542.6716716716717,-541.6496496496496,-540.6276276276276,-539.6056056056057,-538.5835835835836,-537.5615615615616,-536.5395395395395,-535.5175175175175,-534.4954954954954,-533.4734734734735,-532.4514514514515,-531.4294294294294,-530.4074074074074,-529.3853853853853,-528.3633633633634,-527.3413413413414,-526.3193193193193,-525.2972972972973,-524.2752752752752,-523.2532532532532,-522.2312312312313,-521.2092092092092,-520.1871871871872,-519.1651651651651,-518.1431431431431,-517.1211211211212,-516.0990990990991,-515.0770770770771,-514.055055055055,-513.033033033033,-512.011011011011,-510.988988988989,-509.966966966967,-508.94494494494495,-507.9229229229229,-506.9009009009009,-505.8788788788789,-504.85685685685684,-503.83483483483485,-502.8128128128128,-501.79079079079077,-500.7687687687688,-499.74674674674674,-498.72472472472475,-497.7027027027027,-496.68068068068067,-495.6586586586587,-494.63663663663664,-493.6146146146146,-492.5925925925926,-491.57057057057057,-490.5485485485485,-489.52652652652654,-488.5045045045045,-487.4824824824825,-486.46046046046047,-485.4384384384384,-484.41641641641644,-483.3943943943944,-482.37237237237235,-481.35035035035037,-480.3283283283283,-479.3063063063063,-478.2842842842843,-477.26226226226225,-476.24024024024027,-475.2182182182182,-474.1961961961962,-473.1741741741742,-472.15215215215215,-471.1301301301301,-470.1081081081081,-469.0860860860861,-468.06406406406404,-467.04204204204206,-466.02002002002,-464.99799799799797,-463.975975975976,-462.95395395395394,-461.93193193193196,-460.9099099099099,-459.88788788788787,-458.8658658658659,-457.84384384384384,-456.8218218218218,-455.7997997997998,-454.77777777777777,-453.75575575575573,-452.73373373373374,-451.7117117117117,-450.6896896896897,-449.6676676676677,-448.64564564564563,-447.62362362362364,-446.6016016016016,-445.57957957957956,-444.5575575575576,-443.53553553553553,-442.5135135135135,-441.4914914914915,-440.46946946946946,-439.4474474474475,-438.42542542542543,-437.4034034034034,-436.3813813813814,-435.35935935935936,-434.3373373373373,-433.31531531531533,-432.2932932932933,-431.27127127127125,-430.24924924924926,-429.2272272272272,-428.20520520520523,-427.1831831831832,-426.16116116116115,-425.13913913913916,-424.1171171171171,-423.0950950950951,-422.0730730730731,-421.05105105105105,-420.029029029029,-419.007007007007,-417.984984984985,-416.962962962963,-415.94094094094095,-414.9189189189189,-413.8968968968969,-412.8748748748749,-411.85285285285283,-410.83083083083085,-409.8088088088088,-408.78678678678676,-407.7647647647648,-406.74274274274273,-405.72072072072075,-404.6986986986987,-403.67667667667666,-402.6546546546547,-401.63263263263264,-400.6106106106106,-399.5885885885886,-398.56656656656656,-397.5445445445445,-396.52252252252254,-395.5005005005005,-394.47847847847845,-393.45645645645646,-392.4344344344344,-391.41241241241244,-390.3903903903904,-389.36836836836835,-388.34634634634637,-387.3243243243243,-386.3023023023023,-385.2802802802803,-384.25825825825825,-383.2362362362362,-382.2142142142142,-381.1921921921922,-380.1701701701702,-379.14814814814815,-378.1261261261261,-377.1041041041041,-376.0820820820821,-375.06006006006004,-374.03803803803805,-373.016016016016,-371.99399399399397,-370.971971971972,-369.94994994994994,-368.92792792792795,-367.9059059059059,-366.88388388388387,-365.8618618618619,-364.83983983983984,-363.8178178178178,-362.7957957957958,-361.77377377377377,-360.7517517517517,-359.72972972972974,-358.7077077077077,-357.6856856856857,-356.66366366366367,-355.6416416416416,-354.61961961961964,-353.5975975975976,-352.57557557557556,-351.55355355355357,-350.5315315315315,-349.5095095095095,-348.4874874874875,-347.46546546546546,-346.44344344344347,-345.4214214214214,-344.3993993993994,-343.3773773773774,-342.35535535535536,-341.3333333333333,-340.31131131131133,-339.2892892892893,-338.26726726726724,-337.24524524524526,-336.2232232232232,-335.20120120120123,-334.1791791791792,-333.15715715715714,-332.13513513513516,-331.1131131131131,-330.0910910910911,-329.0690690690691,-328.04704704704704,-327.025025025025,-326.003003003003,-324.980980980981,-323.95895895895893,-322.93693693693695,-321.9149149149149,-320.8928928928929,-319.8708708708709,-318.84884884884883,-317.82682682682685,-316.8048048048048,-315.78278278278276,-314.7607607607608,-313.73873873873873,-312.7167167167167,-311.6946946946947,-310.67267267267266,-309.6506506506507,-308.62862862862863,-307.6066066066066,-306.5845845845846,-305.56256256256256,-304.5405405405405,-303.51851851851853,-302.4964964964965,-301.47447447447445,-300.45245245245246,-299.4304304304304,-298.40840840840843,-297.3863863863864,-296.36436436436435,-295.34234234234236,-294.3203203203203,-293.2982982982983,-292.2762762762763,-291.25425425425425,-290.2322322322322,-289.2102102102102,-288.1881881881882,-287.1661661661662,-286.14414414414415,-285.1221221221221,-284.1001001001001,-283.0780780780781,-282.05605605605604,-281.03403403403405,-280.012012012012,-278.98998998998997,-277.967967967968,-276.94594594594594,-275.92392392392395,-274.9019019019019,-273.87987987987987,-272.8578578578579,-271.83583583583584,-270.8138138138138,-269.7917917917918,-268.76976976976977,-267.7477477477477,-266.72572572572574,-265.7037037037037,-264.6816816816817,-263.65965965965967,-262.6376376376376,-261.61561561561564,-260.5935935935936,-259.57157157157155,-258.54954954954957,-257.5275275275275,-256.5055055055055,-255.4834834834835,-254.46146146146145,-253.43943943943944,-252.41741741741743,-251.39539539539538,-250.37337337337337,-249.35135135135135,-248.32932932932934,-247.3073073073073,-246.28528528528528,-245.26326326326327,-244.24124124124126,-243.2192192192192,-242.1971971971972,-241.17517517517518,-240.15315315315314,-239.13113113113113,-238.1091091091091,-237.0870870870871,-236.06506506506506,-235.04304304304304,-234.02102102102103,-232.99899899899899,-231.97697697697697,-230.95495495495496,-229.93293293293294,-228.9109109109109,-227.88888888888889,-226.86686686686687,-225.84484484484486,-224.82282282282281,-223.8008008008008,-222.7787787787788,-221.75675675675674,-220.73473473473473,-219.71271271271272,-218.6906906906907,-217.66866866866866,-216.64664664664664,-215.62462462462463,-214.60260260260262,-213.58058058058057,-212.55855855855856,-211.53653653653654,-210.5145145145145,-209.4924924924925,-208.47047047047047,-207.44844844844846,-206.42642642642642,-205.4044044044044,-204.3823823823824,-203.36036036036037,-202.33833833833833,-201.31631631631632,-200.2942942942943,-199.27227227227226,-198.25025025025025,-197.22822822822823,-196.20620620620622,-195.18418418418418,-194.16216216216216,-193.14014014014015,-192.1181181181181,-191.0960960960961,-190.07407407407408,-189.05205205205206,-188.03003003003002,-187.008008008008,-185.985985985986,-184.96396396396398,-183.94194194194193,-182.91991991991992,-181.8978978978979,-180.87587587587586,-179.85385385385385,-178.83183183183183,-177.80980980980982,-176.78778778778778,-175.76576576576576,-174.74374374374375,-173.72172172172174,-172.6996996996997,-171.67767767767768,-170.65565565565566,-169.63363363363362,-168.6116116116116,-167.5895895895896,-166.56756756756758,-165.54554554554554,-164.52352352352352,-163.5015015015015,-162.47947947947947,-161.45745745745745,-160.43543543543544,-159.41341341341342,-158.39139139139138,-157.36936936936937,-156.34734734734735,-155.32532532532534,-154.3033033033033,-153.28128128128128,-152.25925925925927,-151.23723723723722,-150.2152152152152,-149.1931931931932,-148.17117117117118,-147.14914914914914,-146.12712712712712,-145.1051051051051,-144.0830830830831,-143.06106106106105,-142.03903903903904,-141.01701701701703,-139.99499499499498,-138.97297297297297,-137.95095095095095,-136.92892892892894,-135.9069069069069,-134.88488488488488,-133.86286286286287,-132.84084084084085,-131.8188188188188,-130.7967967967968,-129.77477477477478,-128.75275275275274,-127.73073073073073,-126.70870870870871,-125.68668668668668,-124.66466466466467,-123.64264264264264,-122.62062062062063,-121.5985985985986,-120.57657657657657,-119.55455455455456,-118.53253253253253,-117.51051051051051,-116.48848848848849,-115.46646646646647,-114.44444444444444,-113.42242242242243,-112.4004004004004,-111.37837837837837,-110.35635635635636,-109.33433433433433,-108.31231231231232,-107.29029029029029,-106.26826826826827,-105.24624624624624,-104.22422422422423,-103.2022022022022,-102.18018018018019,-101.15815815815816,-100.13613613613613,-99.11411411411412,-98.09209209209209,-97.07007007007007,-96.04804804804805,-95.02602602602603,-94.004004004004,-92.98198198198199,-91.95995995995996,-90.93793793793793,-89.91591591591592,-88.89389389389389,-87.87187187187187,-86.84984984984985,-85.82782782782783,-84.8058058058058,-83.78378378378379,-82.76176176176176,-81.73973973973973,-80.71771771771772,-79.69569569569569,-78.67367367367368,-77.65165165165165,-76.62962962962963,-75.6076076076076,-74.58558558558559,-73.56356356356356,-72.54154154154155,-71.51951951951952,-70.49749749749749,-69.47547547547548,-68.45345345345345,-67.43143143143143,-66.4094094094094,-65.38738738738739,-64.36536536536536,-63.34334334334334,-62.32132132132132,-61.2992992992993,-60.27727727727728,-59.25525525525526,-58.233233233233236,-57.211211211211214,-56.189189189189186,-55.167167167167165,-54.14514514514514,-53.12312312312312,-52.1011011011011,-51.07907907907908,-50.05705705705706,-49.03503503503504,-48.013013013013015,-46.990990990990994,-45.968968968968966,-44.946946946946944,-43.92492492492492,-42.9029029029029,-41.88088088088088,-40.85885885885886,-39.83683683683684,-38.81481481481482,-37.792792792792795,-36.770770770770774,-35.748748748748746,-34.726726726726724,-33.7047047047047,-32.68268268268268,-31.66066066066066,-30.63863863863864,-29.616616616616618,-28.594594594594593,-27.57257257257257,-26.55055055055055,-25.52852852852853,-24.506506506506508,-23.484484484484483,-22.46246246246246,-21.44044044044044,-20.41841841841842,-19.396396396396398,-18.374374374374373,-17.35235235235235,-16.33033033033033,-15.308308308308309,-14.286286286286286,-13.264264264264265,-12.242242242242241,-11.22022022022022,-10.198198198198199,-9.176176176176176,-8.154154154154154,-7.132132132132132,-6.11011011011011,-5.088088088088088,-4.066066066066066,-3.044044044044044,-2.022022022022022,-1.0]}
},{}],15:[function(require,module,exports){
module.exports={"expected":[2.0,4.064345431677766,8.259451893999964,16.784632786770516,34.1092727946498,69.3159335303928,140.8619488933658,286.2558092409891,581.7212452899183,1182.1580429019896,2402.349320594916,4881.988743227068,9921.0443230186,20161.27558586665,40971.19416210677,83260.54291157084,169199.80361082667,343843.22442321904,698748.819198931,1.4199782856007067e6,2.885641129081427e6,5.86412117022178e6,1.1916907044497905e7,2.421721335301681e7,4.921356022964979e7,1.0001045434798804e8,2.0323851662463132e8,4.130157682921427e8,8.393193755345259e8,1.7056419348361957e9,3.4661590029647565e9,7.043833754584296e9,1.4314286770971155e10,2.9089103022661026e10,5.9114081490878075e10,1.2013002352763866e11,2.441249561659502e11,4.961040751758094e11,1.0081691657887612e12,2.0487738716659666e12,4.163462362923167e12,8.46087461735454e12,1.7193958549521633e13,3.494109344160253e13,7.10063367536019e13,1.4429714020233738e14,2.9323671129276775e14,5.959076439714859e14,1.2109872552386838e15,2.460935259324669e15,5.001045489445499e15,1.016298819432025e16,2.065294731989027e16,4.197035604513876e16,8.529101242897446e16,1.7332606836443683e17,3.522285070738332e17,7.1578916181611e17,1.4546072049358807e18,2.9560130741333535e18,6.007129116916818e18,1.2207523891919671e19,2.4807796981110555e19,5.041372816508279e19,1.0244940288079992e20,2.0819488128834588e20,4.2308795733149345e20,8.597878032890701e20,1.7472373152550871e21,3.550688000156984e21,7.215611276375509e21,1.466336836394975e22,2.9798497111513554e22,6.055569280302187e22,1.2305962670302256e23,2.5007841580719906e23,5.082025334236033e23,1.0327553225436388e24,2.098737188610577e24,4.264996452410794e24,8.667209423738881e24,1.7613266513383876e25,3.5793199645297165e25,7.2737963731747185e25,1.4781610530133403e26,3.0038785615493954e26,6.104400054473997e26,1.24051952372675e27,2.520949929582958e27,5.123005664894412e27,1.0410832335286503e28,2.1156609420942316e28,4.299388442489902e28,8.737099887621047e28,1.775529600718236e29,3.6081828107439204e29,7.332450661752606e29,1.4900806175048473e30,3.028101175293688e30,6.153624589231514e30,1.2505227993751587e31,2.5412783134246446e31,5.164316451894638e31,1.0494782989498092e32,2.1327211649908138e32,4.334057761986424e32,8.80755393277858e32,1.7898470795472155e33,3.637278400579738e33,7.391577925568265e33,1.5020962987336714e34,3.052519114849152e34,6.203246059773069e34,1.2606067392305942e35,2.561770620867046e35,5.205960359963617e35,1.0579410603256876e36,2.149918957759508e36,4.369006647223659e36,8.878576103806586e36,1.8042800113654913e37,3.6666086108304363e37,7.45118197858948e37,1.514208871763999e38,3.077133955279959e38,6.253267666901283e38,1.270771993751431e39,2.5824281737538485e39,5.247940075316227e39,1.0664720635415134e40,2.1672554297334217e40,4.404237352557951e40,8.950170981946782e40,1.818829327160523e41,3.696175333423224e41,7.511266665539245e41,1.5264191179099024e42,3.1019472843513715e42,6.303692637229401e42,1.2810192186412095e43,2.6032523045878705e43,5.290258305828186e43,1.0750718588844118e44,2.1847316991911007e44,4.439752150524408e44,9.022343185382746e44,1.833495965426977e45,3.72598047554139e45,7.571835862143631e45,1.5387278247858436e46,3.1269607026319176e46,6.354524223388993e46,1.2913490748908432e47,2.624244356616965e47,5.3329177812110774e47,1.0837410010789232e48,2.2023488934285142e48,4.475553331983401e48,9.09509736953833e48,1.8482808722273866e49,3.7560259597474035e49,7.63289347538126e49,1.551135786357449e50,3.15217582359685e50,6.405765704240505e50,1.3017622288214057e51,2.6454056839204847e51,5.3759212531883317e51,1.0924800493227534e52,2.220108148832026e52,4.5116432062680323e52,9.168438227377791e52,1.8631850012531073e53,3.7863137241068156e53,7.694443443736215e53,1.5636438029926177e54,3.1775942737321604e54,6.457420385084267e54,1.3122593521270118e55,2.6667376514969336e55,5.419271495672351e55,1.1012895673228773e56,2.2380106109515252e56,4.5480241013336186e56,9.242370489707873e56,1.8782093138858874e57,3.8168457223133854e57,7.756489737451494e57,1.5762526815133294e58,3.2032176926392784e58,6.50949159787395e58,1.3228411219181689e59,2.688241635351812e59,5.462971304944074e59,1.1101701233318133e60,2.256057434574408e60,4.584698363907507e60,9.316898925484042e60,1.8933547792597355e61,3.847623923814802e61,7.819036358785418e61,1.5889632352475688e62,3.229047733141203e62,6.561982701430975e62,1.3335082207654812e63,2.7099190225864224e63,5.507023499832925e63,1.1191222901844073e64,2.274249783799887e64,4.621668359640628e64,9.392028342117386e64,1.908622374323653e65,3.878650313940171e65,7.882087342269167e65,1.6017762840818484e66,3.2550860613888737e66,6.614897081661948e66,1.3442613367435719e67,2.7317712114874035e67,5.551430921898855e67,1.1281466453346975e68,2.292588832114347e68,4.658936473259725e68,9.467763585785084e68,1.9240130839045055e69,3.9099268940277806e69,7.945646754967956e69,1.614692654513971e70,3.281334356968765e70,6.668238151776546e70,1.3551011634756254e71,2.7537996116167037e71,5.596196435615202e71,1.1372437708932069e72,2.3110757624668647e72,4.696505108721726e72,9.544109541742258e72,1.9395279007706242e73,3.941455681554266e73,8.009718696742762e73,1.6277131797065286e74,3.307794313010974e74,6.722009352507951e74,1.3660284001780243e75,2.776005643902832e75,5.6413229285541085e75,1.1464142536644012e76,2.3297117673456022e76,4.734376689368443e76,9.62107113463821e76,1.955167825695651e77,3.9732387102647517e77,8.074307300514935e77,1.6408386995405226e78,3.3344676362988185e78,6.776214152334259e78,1.3770437517055045e79,2.798390740732351e79,5.68681331157247e79,1.1556586851846986e80,2.348498048854499e80,4.772553658082985e80,9.698653328833335e80,1.970933867523515e81,4.005278030304111e81,8.139416732532951e81,1.6540700606696006e82,3.361356047378742e82,6.83085604770314e82,1.388147928596486e83,2.820956346042053e83,5.732670518999234e83,1.164977661760422e84,2.3674358187913186e84,4.811038477447424e84,9.776861128719737e84,1.9868270432330078e85,4.037575708348976e85,8.205051192640676e85,1.667408116574508e86,3.3884612806710294e86,6.885938563256175e86,1.3993416471192054e87,2.8437039154127037e87,5.778897508825923e87,1.1743717845065381e88,2.386526298725217e88,4.8498336299013625e88,9.855699579043052e88,2.002848378003614e89,4.070133827741123e89,8.271214914548421e89,1.680853727618501e90,3.415785084582414e90,6.941465252057822e90,1.410625629317564e91,2.8666349161622195e91,5.825497262895741e91,1.1838416593850868e92,2.4057707200758118e92,4.888941617902148e92,9.935173765229993e92,2.018998905281874e93,4.102954488622415e93,8.337912166107183e93,1.694407761102417e94,3.4433292216179946e94,6.99743969582258e94,1.422000603057864e95,2.889750827440641e95,5.872472787097732e95,1.1933878972446383e96,2.425170324192901e96,4.928364964086972e96,1.0015288813713864e97,2.035279666847577e97,4.136039808069152e97,8.405147249581656e97,1.7080710913208144e98,3.471095468495319e98,7.053865505148202e98,1.4334673020759296e99,2.9130531403258905e99,5.919827111559077e99,1.203011113859371e100,2.444726362435968e100,4.9681062114342396e100,1.0096049892266385e101,2.051691712881193e101,4.169391920229921e101,8.47292450193037e101,1.7218445996185726e102,3.4990856162594035e102,7.110746319746673e102,1.4450264660241e103,2.9365433579191555e103,5.967563290841228e103,1.2127119299689293e104,2.4644400962551826e104,5.008167923429154e104,1.0177462210332245e105,2.0682361020318568e105,4.203012976462121e105,8.541248295083132e105,1.7357291744472704e106,3.527301470397307e106,7.168085808679811e106,1.4566788405191069e107,2.960222995442761e107,6.015684404137654e107,1.222490971318608e108,2.4843127972730604e108,5.048552684227708e108,1.0259531019362747e109,2.0849139014850924e109,4.236905145471219e109,8.610123036224022e109,1.7497257114230373e110,3.5557448509556904e110,7.225887670596781e110,1.468425177190342e111,2.984093580337103e111,6.064193555471052e111,1.2323488686993826e112,2.50434574736581e112,5.089263098823957e112,1.0342261613155734e113,2.1017261870323e113,4.271070613451148e113,8.6795531680767e113,1.7638351133838482e114,3.584417592657254e114,7.284155633970993e114,1.4802662337279413e115,3.0081566523595177e115,6.11309387389427e115,1.2422862579889808e116,2.5245402387468012e116,5.13030179321865e116,1.042565932819828e117,2.1186740431395774e117,4.30551158422432e117,8.749543169188599e117,1.778058290447962e118,3.613321545019491e118,7.342893457341439e118,1.492202773932118e119,3.03241376368396e119,6.1623885136928674e119,1.2523037801925624e120,2.54489757404923e120,5.17167141458743e120,1.0509729544008086e121,2.135758563017915e121,4.340230279384284e121,8.820097554222551e121,1.7923961600728407e122,3.6424585724744255e122,7.402104929556005e122,1.5042355677620275e123,3.0568664790004165e123,6.212080654586901e123,1.2624020814842102e124,2.565419066410437e124,5.2133746314521715e124,1.059447768348374e125,2.152980848693968e125,4.3752289384395425e125,8.891220874245595e125,1.8068496471139116e126,3.6718305544878756e126,7.46179387001385e126,1.5163653913856038e127,3.081516375616186e127,6.262173501937963e127,1.2725818132487612e128,2.586106039556916e128,5.255414133853739e128,1.0679909213251647e129,2.17034201108064e129,4.410509818956812e129,8.962917717023563e129,1.821419683884429e130,3.701439385681836e130,7.521964128914094e130,1.5285930272298077e131,3.106365043557991e131,6.312670286954239e131,1.2828436321235271e132,2.6069598278889932e132,5.2977926335240644e132,1.0766029644019871e133,2.187843170048988e133,4.4460751967080214e133,9.035192707318074e133,1.8361072102158316e134,3.731286975955677e134,7.582619587502134e134,1.5409192640307385e135,3.131414085673689e135,6.36357426689966e135,1.2931882000407964e136,2.6279817765677133e136,5.340512864062725e136,1.0852844530934884e137,2.2054854545007204e137,4.481927365815901e137,9.10805050718275e137,1.850913173517863e138,3.761375250609778e138,7.643764158320863e138,1.5533448968846888e139,3.1566651177366406e139,6.414888725304763e139,1.3036161842706867e140,2.649173241600894e140,5.383577581111809e140,1.0940359473937355e141,2.2232700024404145e141,4.5180686389024766e141,9.18149581626497e141,1.8658385288402603e142,3.791706150470154e142,7.705401785463962e142,1.5658707272996143e143,3.1821197685490776e143,6.466616972177004e143,1.3141282574638294e144,2.6705355899309002e144,5.426989562534294e144,1.1028580118124634e145,2.241197961049614e145,4.5545013472387807e145,9.255533372110124e145,1.8808842389338524e146,3.8222816320127732e146,7.767536444828202e146,1.5784975632464095e147,3.207779680047529e147,6.518762344214996e147,1.3247250976951688e148,2.6920701995231325e148,5.470751608593871e148,1.111751215411619e149,2.2592704867602186e149,4.591227840894167e149,9.330167950464664e149,1.896051274312876e150,3.853103667490188e150,7.83017214437233e150,1.5912262192115153e151,3.233646507409116e151,6.57132820502453e151,1.335407388507341e152,2.7137784594542845e152,5.51486654213408e152,1.120716131841765e153,2.2774887453293368e153,4.6282504888884275e153,9.405404365587075e153,1.9113406133177297e154,3.8841742450590633e154,7.893312924373153e154,1.6040575162489615e155,3.259721919157439e155,6.624317945333736e155,1.3461758189549164e156,2.7356617700022566e156,5.559337208762115e156,1.129753339379431e157,2.295853911914755e157,4.6655716793451516e157,9.481247470555855e157,1.926753242178011e158,3.9154953689082783e158,7.9569628576889385e158,1.6169922820338917e159,3.286007597271341e159,6.677734983214131e159,1.3570310836489566e160,2.7577215427366942e160,5.604166477030646e160,1.138863420964064e161,2.3143671711501126e161,4.703193819644497e161,9.557702157583648e161,1.9422901550755996e162,3.947069059387123e162,8.02112605001839e162,1.630031350915195e163,3.3125052372918693e163,6.731582764297969e163,1.367973882801768e164,2.779959200609942e164,5.64935723862482e164,1.1480469642360302e165,2.333029717222128e165,4.741119336580133e165,9.634773358333573e165,1.9579523542096935e166,3.9788973531374644e166,8.085806640169539e166,1.6431755639701475e167,3.3392165484333165e167,6.785864762003903e167,1.3790049222716904e168,2.8023761780480605e168,5.694912408546141e168,1.1573045615739813e169,2.3518427539465353e169,4.779350676513549e169,9.712466044236982e169,1.9737408498610083e170,4.0109823032242073e170,8.15100880032487e170,1.6564257690582896e171,3.366143253692709e171,6.840584477758936e171,1.3901249136092743e172,2.8249739210446633e172,5.740834925303376e172,1.1666368101336522e173,2.3708074948469252e173,4.817890305534275e173,9.790785226811455e173,1.989656660456473e174,4.0433259792667705e174,8.216736736308499e174,1.669782820875723e175,3.393287089960144e175,6.895745441225354e175,1.4013345741028584e176,2.847753887253542e176,5.787127751100791e176,1.1760443118861112e177,2.3899251632322906e177,4.85674070961747e177,9.86973595798864e177,2.005700812635854e178,4.0759304675744746e178,8.282994687861304e178,1.6832475810110216e179,3.4206498081324124e179,6.951351210526228e179,1.4126346268245052e180,2.8707175460820135e180,5.833793872027844e180,1.1855276736563106e181,2.409196992276308e181,4.895904394785034e181,9.949323330437867e181,2.0218743413175165e182,4.1087978712801876e182,8.349786928912515e182,1.6968209180002885e183,3.4482331732248876e183,7.007405372478179e183,1.424025800677302e184,2.893866378787045e184,5.880836298254527e184,1.1950875071627836e185,2.428624225096125e185,4.9353838872657153e185,1.0029552477892275e186,2.038178289764703e186,4.1419303104750035e186,8.417117767853411e186,1.7105037073834455e187,3.476038964485909e187,7.063911542821139e187,1.4355088304420526e188,2.917201878570137e188,5.928258064224191e188,1.2047244290567337e189,2.4482081148336803e189,4.975181733660373e189,1.0110428575484645e190,2.054613709653777e190,4.1753299223469355e190,8.48499154781916e190,1.7242968317601703e191,3.504068975510461e191,7.120873366449896e191,1.4470844568243317e192,2.940725550672949e192,5.976062228847868e192,1.214439060961999e193,2.4679499247359785e193,5.015300501105101e193,1.0191956840078908e194,2.0711816611415922e194,4.2089988613178164e194,8.553412646966354e194,1.738201180847634e195,3.5323250143575043e195,7.178294517652541e195,1.4587534265029391e196,2.9644389124757666e196,6.024251875704369e196,1.2242320295147684e197,2.4878509282359848e197,5.0557427774356285e197,1.0274142530604223e198,2.0878832129333843e198,4.2429392991812664e198,8.622385478756757e198,1.752217651537494e199,3.560808903665794e199,7.236178700345823e199,1.4705164921777311e200,2.9883434935947e200,6.0728301132373436e200,1.2341039664045737e201,2.5079124090359303e201,5.096511171356604e201,1.0356990948399e202,2.1047194423526814e202,4.277153425244766e202,8.691914492239273e202,1.7663471479533304e203,3.5895224807706e203,7.294529648312346e203,1.4823744126178213e204,3.0124408359796396e204,6.121800074956725e204,1.2440555084147538e205,2.528135661189543e205,5.1376083126087055e205,1.0440507437550499e206,2.1216914354103143e206,4.3116434464695544e206,8.762004172340994e206,1.7805905815097895e207,3.6184675978239e207,7.353351125444825e207,1.494327952711218e208,3.0367324940151267e208,6.17116491963893e208,1.254087297463234e209,2.548521989184916e209,5.179036852137045e209,1.0524697385237043e210,2.1388002868739643e210,4.3464115876136643e210,8.832659040154488e210,1.7949488709709683e211,3.647646121913025e211,7.412646925987193e211,1.5063778835137017e212,3.0612200346196803e212,6.2209278315335015e212,1.2641999806445183e213,2.569072708029845e213,5.2207994622645854e213,1.0609566222080448e214,2.156047100339779e214,4.381460091374056e214,8.903883653227333e214,1.80942294250925e215,3.677059935180221e215,7.472420874777569e215,1.518524982298796e216,3.085905037347349e216,6.271092020567077e216,1.27439421027114e217,2.5897891433360617e217,5.262898836863321e217,1.0695119422493036e218,2.1734329883028952e218,4.416791218533332e218,8.975682605860249e218,1.8240137297658922e219,3.706710934945779e219,7.532676827498481e219,1.5307700326074272e220,3.110789094488624e220,6.321660722548953e220,1.2846706439154355e221,2.6106726314041282e221,5.305337691526793e221,1.0781362505032438e222,2.1909590722295366e222,4.4524072481045554e222,9.0480605294014e222,1.8387221739108322e223,3.7366010338295665e223,7.593418670923241e223,1.5431138242991829e224,3.135873811174609e224,6.37263719938276e224,1.2950299444525612e225,2.63172451931085e225,5.3481187637477315e225,1.0868301032754163e226,2.2086264826286656e226,4.488310477477194e226,9.121022092542981e226,1.85354922370296e227,3.7667321598735134e227,7.654650323167851e227,1.5555571536029062e228,3.161160805479834e228,6.424024739275411e228,1.305472780102954e229,2.652946164995568e229,5.391244813092991e229,1.095594061357552e230,2.226436359125938e230,4.524503222567411e230,9.194572001626632e230,1.8684958355521824e231,3.7971062566677375e231,7.716375733941323e231,1.568100823167686e232,3.186651708525878e232,6.475826656947677e232,1.315999824475125e233,2.6743389373471194e233,5.434718621382391e233,1.104428690063485e234,2.244389850536702e234,4.560987817966413e234,9.268715000944905e234,1.8835629735806882e235,3.827725283474744e235,7.778598884804061e235,1.5807456421153644e236,3.2123481645880724e236,6.528046293851021e236,1.3266117566097241e237,2.6959042162933857e237,5.478542992866448e237,1.1133345592653538e238,2.2624881149395694e238,4.5977666170899593e238,9.343455873045096e238,1.8987516096846892e239,3.858591215356402e239,7.8413237894229085e239,1.5934924260923661e240,3.238251831200828e240,6.58068701838165e240,1.3373092610230377e241,2.717643392889473e241,5.52272075440982e241,1.1223122434308818e242,2.280732319752174e242,4.634841992332311e242,9.41879943904209e242,1.914062723597999e243,3.889706043300132e243,7.904554493828179e243,1.6063419973219325e244,3.2643643792637805e244,6.633752226096214e244,1.3480930277508237e245,2.739557869407866e245,5.567254755672389e245,1.1313623216601744e246,2.2991236418059504e246,4.672216335218201e246,9.494750558927205e246,1.929497302954641e247,3.9210717743491494e247,7.968295076678332e247,1.6192951846579074e248,3.290687493151099e248,6.687245339933943e248,1.3589637523934532e249,2.761649059428015e249,5.61214786929175e249,1.1404853777228063e250,2.3176632674214995e250,4.7098920565559876e250,9.571314131879403e250,1.945056343352853e251,3.952690431731031e251,8.032549649521249e251,1.6323528236378334e252,3.317222870819379e252,6.741169810435371e252,1.3699221361603593e253,2.783918387928813e253,5.6574029910711254e253,1.1496820000960077e254,2.3363523924861926e254,4.747871586595358e254,9.648495096585797e254,1.9607408484186987e255,3.984564054987279e255,8.097322357057524e255,1.6455157565364564e256,3.343972223916379e256,6.795529115965967e256,1.3809688859154819e257,2.8063672913798734e257,5.703023040164871e257,1.1589527820023619e258,2.3551922225307784e258,4.78615737518263e258,9.726298431557226e258,1.9765518298717197e259,4.016694700106744e259,8.162617377411603e259,1.6587848324208268e260,3.370937277892992e260,6.850326762938362e260,1.3921047142224295e261,2.8289972178335185e261,5.74901095926541e261,1.1682983214477939e262,2.3741839728065813e262,4.82475189191952e262,9.80472915545092e262,1.992490307589746e263,4.049084439657322e263,8.228438922399417e263,1.6721609072046866e264,3.3981197721135046e264,6.905566286041736e264,1.4033303393910923e265,2.8518096270195093e265,5.7953697147957324e265,1.1777192212606906e266,2.3933288683650023e266,4.8636576263209274e266,9.883792327391136e266,2.0085573096742042e267,4.081735362918685e267,8.294791237798109e267,1.685644843703282e268,3.425521459968323e268,6.961251248468231e268,1.414646485523656e269,2.8748059904385514e269,5.842102297099425e269,1.1872160891305167e270,2.412628144135799e270,4.902877087977792e270,9.963493047300106e270,2.024753872517377e271,4.114649576018951e271,8.361678603623775e271,1.6992375116898078e272,3.453144108985997e272,7.017385242141143e272,1.4260538825609723e273,2.8979877914565265e273,5.889211720632161e273,1.1967895376467291e274,2.4320830450071246e274,4.942412806717849e274,1.0043836456224732e275,2.041081040868788e275,4.1478292020695967e275,8.429105334405634e275,1.7129397879509837e276,3.4809895009488456e276,7.073971887949882e276,1.4375532663303085e277,2.9213565254015325e277,5.9367010241588995e277,1.206440184338852e278,2.451694825905058e278,4.9822673327676396e278,1.0124827736665805e279,2.0575398679021086e279,4.1812763813014225e279,8.497075779462324e279,1.7267525563438817e280,3.5090594320070947e280,7.131014835981936e280,1.4491453785924839e281,2.9449136996596665e281,5.984573270948542e281,1.216168651715938e282,2.471464751875701e282,5.022443236919335e282,1.0206472112917037e283,2.0741314152840526e283,4.2149932712045575e283,8.565594323186419e283,1.7406767078523937e284,3.5373557127938994e284,7.188517765756597e284,1.4608309670893705e285,2.96866083377156e285,6.0328315489701e285,1.2259755673069115e286,2.4913940981662122e286,5.062943110695417e286,1.0288774851399712e287,2.090856753242384e287,4.2489820466666626e287,8.634665385324603e287,1.7547131406455167e288,3.565880168543791e288,7.246484386465679e288,1.4726107855928084e289,2.992599459531781e289,6.081478971094698e289,1.2358615637006621e290,2.511484150306474e290,5.103769566514638e290,1.0371741260999933e291,2.1077169606344525e291,4.2832449001122093e291,8.70429342126411e291,1.7688627601348884e292,3.594634639209594e292,7.304918437211115e292,1.4844855939528902e293,3.016731121086717e293,6.130518675294498e293,1.2458272785874264e294,2.5317362041931856e294,5.144925237862913e294,1.045537669341593e295,2.12471312501777e295,4.3177840416459e295,8.774482922317374e295,1.783126479032767e296,3.623620979580259e296,7.3638236872444e296,1.4964561581466212e297,3.041057375034653e297,6.179953824846061e297,1.2558733547996366e298,2.552151566172877e298,5.186412779462017e298,1.053968654350086e299,2.1418463427195075e299,4.352601699193899e299,8.845238416015839e299,1.7975052174117402e300,3.6528410594021935e300,7.423203936213169e300,1.5085232503280266e301,3.065579790525218e301,6.229787608532453e301,1.2660004403530868e302,2.572731553125565e302,5.228234867439588e302,1.0624676249608296e303,2.159117718907546e303,4.3877001186482204e303,8.916564466399981e303,1.8119999027636605e304,3.6822967634990353e304,7.483063014404595e304,1.520687648877495e305,3.0902999493620376e305,6.280023240851841e305,1.2762091884893244e306,2.593477492550898e306,5.270394199504197e306,1.0710351293947985e307,2.1765283676610864e307,4.4230815640102195e307,8.98846567431158e307],"x":[1.0,2.023023023023023,3.046046046046046,4.069069069069069,5.092092092092092,6.115115115115115,7.138138138138138,8.16116116116116,9.184184184184184,10.207207207207206,11.23023023023023,12.253253253253254,13.276276276276276,14.2992992992993,15.322322322322321,16.345345345345347,17.36836836836837,18.39139139139139,19.414414414414413,20.43743743743744,21.46046046046046,22.483483483483482,23.506506506506508,24.52952952952953,25.55255255255255,26.575575575575577,27.5985985985986,28.62162162162162,29.644644644644643,30.66766766766767,31.69069069069069,32.713713713713716,33.73673673673674,34.75975975975976,35.78278278278278,36.805805805805804,37.828828828828826,38.851851851851855,39.87487487487488,40.8978978978979,41.92092092092092,42.94394394394394,43.966966966966964,44.989989989989986,46.013013013013015,47.03603603603604,48.05905905905906,49.08208208208208,50.1051051051051,51.128128128128125,52.151151151151154,53.174174174174176,54.1971971971972,55.22022022022022,56.24324324324324,57.266266266266264,58.289289289289286,59.312312312312315,60.33533533533534,61.35835835835836,62.38138138138138,63.4044044044044,64.42742742742743,65.45045045045045,66.47347347347348,67.49649649649649,68.51951951951952,69.54254254254255,70.56556556556556,71.58858858858859,72.61161161161161,73.63463463463464,74.65765765765765,75.68068068068068,76.70370370370371,77.72672672672672,78.74974974974975,79.77277277277277,80.7957957957958,81.81881881881881,82.84184184184184,83.86486486486487,84.88788788788789,85.91091091091091,86.93393393393393,87.95695695695696,88.97997997997997,90.003003003003,91.02602602602603,92.04904904904905,93.07207207207207,94.09509509509509,95.11811811811812,96.14114114114115,97.16416416416416,98.18718718718719,99.2102102102102,100.23323323323324,101.25625625625625,102.27927927927928,103.30230230230231,104.32532532532532,105.34834834834835,106.37137137137137,107.3943943943944,108.41741741741741,109.44044044044044,110.46346346346347,111.48648648648648,112.50950950950951,113.53253253253253,114.55555555555556,115.57857857857857,116.6016016016016,117.62462462462463,118.64764764764764,119.67067067067067,120.69369369369369,121.71671671671672,122.73973973973973,123.76276276276276,124.78578578578579,125.8088088088088,126.83183183183183,127.85485485485485,128.87787787787786,129.9009009009009,130.92392392392392,131.94694694694695,132.96996996996998,133.99299299299298,135.016016016016,136.03903903903904,137.06206206206207,138.0850850850851,139.1081081081081,140.13113113113113,141.15415415415416,142.17717717717719,143.20020020020021,144.22322322322321,145.24624624624624,146.26926926926927,147.2922922922923,148.3153153153153,149.33833833833833,150.36136136136136,151.3843843843844,152.40740740740742,153.43043043043042,154.45345345345345,155.47647647647648,156.4994994994995,157.52252252252254,158.54554554554554,159.56856856856857,160.5915915915916,161.61461461461462,162.63763763763762,163.66066066066065,164.68368368368368,165.7067067067067,166.72972972972974,167.75275275275274,168.77577577577577,169.7987987987988,170.82182182182183,171.84484484484486,172.86786786786786,173.8908908908909,174.91391391391392,175.93693693693695,176.95995995995995,177.98298298298297,179.006006006006,180.02902902902903,181.05205205205206,182.07507507507506,183.0980980980981,184.12112112112112,185.14414414414415,186.16716716716718,187.19019019019018,188.2132132132132,189.23623623623624,190.25925925925927,191.2822822822823,192.3053053053053,193.32832832832833,194.35135135135135,195.37437437437438,196.39739739739738,197.4204204204204,198.44344344344344,199.46646646646647,200.4894894894895,201.5125125125125,202.53553553553553,203.55855855855856,204.5815815815816,205.60460460460462,206.62762762762762,207.65065065065065,208.67367367367368,209.6966966966967,210.7197197197197,211.74274274274273,212.76576576576576,213.7887887887888,214.81181181181182,215.83483483483482,216.85785785785785,217.88088088088088,218.9039039039039,219.92692692692694,220.94994994994994,221.97297297297297,222.995995995996,224.01901901901903,225.04204204204206,226.06506506506506,227.08808808808809,228.11111111111111,229.13413413413414,230.15715715715714,231.18018018018017,232.2032032032032,233.22622622622623,234.24924924924926,235.27227227227226,236.2952952952953,237.31831831831832,238.34134134134135,239.36436436436438,240.38738738738738,241.4104104104104,242.43343343343344,243.45645645645646,244.47947947947947,245.5025025025025,246.52552552552552,247.54854854854855,248.57157157157158,249.59459459459458,250.6176176176176,251.64064064064064,252.66366366366367,253.6866866866867,254.7097097097097,255.73273273273273,256.75575575575573,257.77877877877876,258.8018018018018,259.8248248248248,260.84784784784785,261.8708708708709,262.8938938938939,263.91691691691693,264.93993993993996,265.962962962963,266.98598598598596,268.009009009009,269.032032032032,270.05505505505505,271.0780780780781,272.1011011011011,273.12412412412414,274.14714714714717,275.1701701701702,276.19319319319317,277.2162162162162,278.2392392392392,279.26226226226225,280.2852852852853,281.3083083083083,282.33133133133134,283.35435435435437,284.3773773773774,285.40040040040043,286.4234234234234,287.44644644644643,288.46946946946946,289.4924924924925,290.5155155155155,291.53853853853855,292.5615615615616,293.5845845845846,294.60760760760763,295.6306306306306,296.65365365365363,297.67667667667666,298.6996996996997,299.7227227227227,300.74574574574575,301.7687687687688,302.7917917917918,303.81481481481484,304.8378378378378,305.86086086086084,306.88388388388387,307.9069069069069,308.9299299299299,309.95295295295296,310.975975975976,311.998998998999,313.02202202202204,314.0450450450451,315.06806806806804,316.0910910910911,317.1141141141141,318.13713713713713,319.16016016016016,320.1831831831832,321.2062062062062,322.22922922922925,323.2522522522523,324.27527527527525,325.2982982982983,326.3213213213213,327.34434434434434,328.36736736736736,329.3903903903904,330.4134134134134,331.43643643643645,332.4594594594595,333.4824824824825,334.5055055055055,335.5285285285285,336.55155155155154,337.57457457457457,338.5975975975976,339.6206206206206,340.64364364364366,341.6666666666667,342.6896896896897,343.7127127127127,344.7357357357357,345.75875875875874,346.7817817817818,347.8048048048048,348.82782782782783,349.85085085085086,350.8738738738739,351.8968968968969,352.9199199199199,353.9429429429429,354.96596596596595,355.988988988989,357.012012012012,358.03503503503504,359.05805805805807,360.0810810810811,361.1041041041041,362.12712712712715,363.1501501501501,364.17317317317315,365.1961961961962,366.2192192192192,367.24224224224224,368.26526526526527,369.2882882882883,370.31131131131133,371.33433433433436,372.35735735735733,373.38038038038036,374.4034034034034,375.4264264264264,376.44944944944945,377.4724724724725,378.4954954954955,379.51851851851853,380.54154154154156,381.5645645645646,382.58758758758756,383.6106106106106,384.6336336336336,385.65665665665665,386.6796796796797,387.7027027027027,388.72572572572574,389.74874874874877,390.7717717717718,391.79479479479477,392.8178178178178,393.8408408408408,394.86386386386386,395.8868868868869,396.9099099099099,397.93293293293294,398.955955955956,399.978978978979,401.00200200200203,402.025025025025,403.04804804804803,404.07107107107106,405.0940940940941,406.1171171171171,407.14014014014015,408.1631631631632,409.1861861861862,410.20920920920923,411.2322322322322,412.25525525525524,413.27827827827826,414.3013013013013,415.3243243243243,416.34734734734735,417.3703703703704,418.3933933933934,419.41641641641644,420.4394394394394,421.46246246246244,422.48548548548547,423.5085085085085,424.5315315315315,425.55455455455456,426.5775775775776,427.6006006006006,428.62362362362364,429.6466466466467,430.66966966966964,431.6926926926927,432.7157157157157,433.73873873873873,434.76176176176176,435.7847847847848,436.8078078078078,437.83083083083085,438.8538538538539,439.87687687687685,440.8998998998999,441.9229229229229,442.94594594594594,443.96896896896897,444.991991991992,446.015015015015,447.03803803803805,448.0610610610611,449.0840840840841,450.1071071071071,451.1301301301301,452.15315315315314,453.17617617617617,454.1991991991992,455.22222222222223,456.24524524524526,457.2682682682683,458.2912912912913,459.3143143143143,460.3373373373373,461.36036036036035,462.3833833833834,463.4064064064064,464.42942942942943,465.45245245245246,466.4754754754755,467.4984984984985,468.52152152152155,469.5445445445445,470.56756756756755,471.5905905905906,472.6136136136136,473.63663663663664,474.65965965965967,475.6826826826827,476.7057057057057,477.72872872872875,478.7517517517517,479.77477477477476,480.7977977977978,481.8208208208208,482.84384384384384,483.86686686686687,484.8898898898899,485.91291291291293,486.93593593593596,487.95895895895893,488.98198198198196,490.005005005005,491.028028028028,492.05105105105105,493.0740740740741,494.0970970970971,495.12012012012013,496.14314314314316,497.1661661661662,498.18918918918916,499.2122122122122,500.2352352352352,501.25825825825825,502.2812812812813,503.3043043043043,504.32732732732734,505.35035035035037,506.3733733733734,507.39639639639637,508.4194194194194,509.4424424424424,510.46546546546546,511.4884884884885,512.5115115115115,513.5345345345345,514.5575575575575,515.5805805805805,516.6036036036036,517.6266266266266,518.6496496496496,519.6726726726727,520.6956956956957,521.7187187187187,522.7417417417417,523.7647647647648,524.7877877877878,525.8108108108108,526.8338338338339,527.8568568568569,528.8798798798799,529.902902902903,530.925925925926,531.9489489489489,532.9719719719719,533.994994994995,535.018018018018,536.041041041041,537.064064064064,538.0870870870871,539.1101101101101,540.1331331331331,541.1561561561562,542.1791791791792,543.2022022022022,544.2252252252252,545.2482482482483,546.2712712712713,547.2942942942943,548.3173173173174,549.3403403403404,550.3633633633634,551.3863863863863,552.4094094094094,553.4324324324324,554.4554554554554,555.4784784784785,556.5015015015015,557.5245245245245,558.5475475475475,559.5705705705706,560.5935935935936,561.6166166166166,562.6396396396397,563.6626626626627,564.6856856856857,565.7087087087087,566.7317317317318,567.7547547547548,568.7777777777778,569.8008008008009,570.8238238238238,571.8468468468468,572.8698698698698,573.8928928928929,574.9159159159159,575.9389389389389,576.961961961962,577.984984984985,579.008008008008,580.031031031031,581.0540540540541,582.0770770770771,583.1001001001001,584.1231231231232,585.1461461461462,586.1691691691692,587.1921921921922,588.2152152152153,589.2382382382382,590.2612612612612,591.2842842842842,592.3073073073073,593.3303303303303,594.3533533533533,595.3763763763764,596.3993993993994,597.4224224224224,598.4454454454454,599.4684684684685,600.4914914914915,601.5145145145145,602.5375375375376,603.5605605605606,604.5835835835836,605.6066066066066,606.6296296296297,607.6526526526527,608.6756756756756,609.6986986986986,610.7217217217217,611.7447447447447,612.7677677677677,613.7907907907908,614.8138138138138,615.8368368368368,616.8598598598599,617.8828828828829,618.9059059059059,619.9289289289289,620.951951951952,621.974974974975,622.997997997998,624.021021021021,625.0440440440441,626.0670670670671,627.0900900900901,628.1131131131131,629.1361361361361,630.1591591591591,631.1821821821821,632.2052052052052,633.2282282282282,634.2512512512512,635.2742742742743,636.2972972972973,637.3203203203203,638.3433433433433,639.3663663663664,640.3893893893894,641.4124124124124,642.4354354354355,643.4584584584585,644.4814814814815,645.5045045045046,646.5275275275276,647.5505505505505,648.5735735735735,649.5965965965966,650.6196196196196,651.6426426426426,652.6656656656656,653.6886886886887,654.7117117117117,655.7347347347347,656.7577577577578,657.7807807807808,658.8038038038038,659.8268268268268,660.8498498498499,661.8728728728729,662.8958958958959,663.918918918919,664.941941941942,665.964964964965,666.9879879879879,668.011011011011,669.034034034034,670.057057057057,671.08008008008,672.1031031031031,673.1261261261261,674.1491491491491,675.1721721721722,676.1951951951952,677.2182182182182,678.2412412412413,679.2642642642643,680.2872872872873,681.3103103103103,682.3333333333334,683.3563563563564,684.3793793793794,685.4024024024025,686.4254254254254,687.4484484484484,688.4714714714714,689.4944944944945,690.5175175175175,691.5405405405405,692.5635635635635,693.5865865865866,694.6096096096096,695.6326326326326,696.6556556556557,697.6786786786787,698.7017017017017,699.7247247247248,700.7477477477478,701.7707707707708,702.7937937937938,703.8168168168169,704.8398398398398,705.8628628628628,706.8858858858858,707.9089089089089,708.9319319319319,709.9549549549549,710.977977977978,712.001001001001,713.024024024024,714.047047047047,715.0700700700701,716.0930930930931,717.1161161161161,718.1391391391392,719.1621621621622,720.1851851851852,721.2082082082082,722.2312312312313,723.2542542542543,724.2772772772772,725.3003003003003,726.3233233233233,727.3463463463463,728.3693693693693,729.3923923923924,730.4154154154154,731.4384384384384,732.4614614614615,733.4844844844845,734.5075075075075,735.5305305305305,736.5535535535536,737.5765765765766,738.5995995995996,739.6226226226227,740.6456456456457,741.6686686686687,742.6916916916917,743.7147147147147,744.7377377377377,745.7607607607607,746.7837837837837,747.8068068068068,748.8298298298298,749.8528528528528,750.8758758758759,751.8988988988989,752.9219219219219,753.944944944945,754.967967967968,755.990990990991,757.014014014014,758.0370370370371,759.0600600600601,760.0830830830831,761.1061061061062,762.1291291291292,763.1521521521521,764.1751751751751,765.1981981981982,766.2212212212212,767.2442442442442,768.2672672672672,769.2902902902903,770.3133133133133,771.3363363363363,772.3593593593594,773.3823823823824,774.4054054054054,775.4284284284284,776.4514514514515,777.4744744744745,778.4974974974975,779.5205205205206,780.5435435435436,781.5665665665666,782.5895895895895,783.6126126126126,784.6356356356356,785.6586586586586,786.6816816816817,787.7047047047047,788.7277277277277,789.7507507507507,790.7737737737738,791.7967967967968,792.8198198198198,793.8428428428429,794.8658658658659,795.8888888888889,796.911911911912,797.934934934935,798.957957957958,799.980980980981,801.0040040040041,802.027027027027,803.05005005005,804.073073073073,805.0960960960961,806.1191191191191,807.1421421421421,808.1651651651651,809.1881881881882,810.2112112112112,811.2342342342342,812.2572572572573,813.2802802802803,814.3033033033033,815.3263263263264,816.3493493493494,817.3723723723724,818.3953953953954,819.4184184184185,820.4414414414415,821.4644644644644,822.4874874874874,823.5105105105105,824.5335335335335,825.5565565565565,826.5795795795796,827.6026026026026,828.6256256256256,829.6486486486486,830.6716716716717,831.6946946946947,832.7177177177177,833.7407407407408,834.7637637637638,835.7867867867868,836.8098098098098,837.8328328328329,838.8558558558559,839.8788788788788,840.9019019019019,841.9249249249249,842.9479479479479,843.9709709709709,844.993993993994,846.017017017017,847.04004004004,848.063063063063,849.0860860860861,850.1091091091091,851.1321321321321,852.1551551551552,853.1781781781782,854.2012012012012,855.2242242242243,856.2472472472473,857.2702702702703,858.2932932932933,859.3163163163163,860.3393393393393,861.3623623623623,862.3853853853853,863.4084084084084,864.4314314314314,865.4544544544544,866.4774774774775,867.5005005005005,868.5235235235235,869.5465465465466,870.5695695695696,871.5925925925926,872.6156156156156,873.6386386386387,874.6616616616617,875.6846846846847,876.7077077077078,877.7307307307308,878.7537537537537,879.7767767767767,880.7997997997998,881.8228228228228,882.8458458458458,883.8688688688688,884.8918918918919,885.9149149149149,886.9379379379379,887.960960960961,888.983983983984,890.007007007007,891.03003003003,892.0530530530531,893.0760760760761,894.0990990990991,895.1221221221222,896.1451451451452,897.1681681681682,898.1911911911911,899.2142142142142,900.2372372372372,901.2602602602602,902.2832832832833,903.3063063063063,904.3293293293293,905.3523523523523,906.3753753753754,907.3983983983984,908.4214214214214,909.4444444444445,910.4674674674675,911.4904904904905,912.5135135135135,913.5365365365366,914.5595595595596,915.5825825825826,916.6056056056057,917.6286286286286,918.6516516516516,919.6746746746746,920.6976976976977,921.7207207207207,922.7437437437437,923.7667667667668,924.7897897897898,925.8128128128128,926.8358358358358,927.8588588588589,928.8818818818819,929.9049049049049,930.927927927928,931.950950950951,932.973973973974,933.996996996997,935.0200200200201,936.0430430430431,937.066066066066,938.089089089089,939.1121121121121,940.1351351351351,941.1581581581581,942.1811811811812,943.2042042042042,944.2272272272272,945.2502502502502,946.2732732732733,947.2962962962963,948.3193193193193,949.3423423423424,950.3653653653654,951.3883883883884,952.4114114114114,953.4344344344345,954.4574574574575,955.4804804804805,956.5035035035035,957.5265265265265,958.5495495495495,959.5725725725725,960.5955955955956,961.6186186186186,962.6416416416416,963.6646646646647,964.6876876876877,965.7107107107107,966.7337337337337,967.7567567567568,968.7797797797798,969.8028028028028,970.8258258258259,971.8488488488489,972.8718718718719,973.894894894895,974.9179179179179,975.9409409409409,976.9639639639639,977.986986986987,979.01001001001,980.033033033033,981.056056056056,982.0790790790791,983.1021021021021,984.1251251251251,985.1481481481482,986.1711711711712,987.1941941941942,988.2172172172172,989.2402402402403,990.2632632632633,991.2862862862863,992.3093093093094,993.3323323323324,994.3553553553553,995.3783783783783,996.4014014014014,997.4244244244244,998.4474474474474,999.4704704704704,1000.4934934934935,1001.5165165165165,1002.5395395395395,1003.5625625625626,1004.5855855855856,1005.6086086086086,1006.6316316316316,1007.6546546546547,1008.6776776776777,1009.7007007007007,1010.7237237237238,1011.7467467467468,1012.7697697697698,1013.7927927927927,1014.8158158158158,1015.8388388388388,1016.8618618618618,1017.8848848848849,1018.9079079079079,1019.9309309309309,1020.9539539539539,1021.976976976977,1023.0]}
},{}],16:[function(require,module,exports){
module.exports={"expected":[0.5,0.5003470408924718,0.5006943226597058,0.5010418454688887,0.5013896094873233,0.5017376148824285,0.5020858618217395,0.5024343504729077,0.5027830810037011,0.5031320535820036,0.5034812683758162,0.5038307255532563,0.5041804252825578,0.5045303677320716,0.5048805530702654,0.5052309814657238,0.5055816530871484,0.505932568103358,0.5062837266832884,0.5066351289959926,0.5069867752106414,0.5073386654965224,0.5076908000230412,0.5080431789597207,0.5083958024762016,0.5087486707422422,0.5091017839277188,0.5094551422026253,0.5098087457370741,0.5101625947012952,0.5105166892656371,0.5108710296005661,0.5112256158766674,0.511580448264644,0.5119355269353179,0.5122908520596292,0.5126464238086371,0.5130022423535193,0.5133583078655721,0.5137146205162112,0.5140711804769708,0.5144279879195044,0.5147850430155846,0.5151423459371032,0.5154998968560713,0.5158576959446195,0.5162157433749976,0.5165740393195756,0.5169325839508421,0.5172913774414062,0.5176504199639967,0.5180097116914623,0.5183692527967713,0.5187290434530124,0.5190890838333945,0.5194493741112464,0.5198099144600173,0.5201707050532773,0.5205317460647161,0.5208930376681445,0.521254580037494,0.5216163733468165,0.5219784177702851,0.5223407134821931,0.5227032606569557,0.5230660594691083,0.5234291100933082,0.5237924127043333,0.5241559674770832,0.5245197745865785,0.5248838342079618,0.525248146516497,0.5256127116875696,0.5259775298966869,0.5263426013194779,0.5267079261316936,0.5270735045092071,0.5274393366280135,0.5278054226642297,0.5281717627940955,0.5285383571939726,0.528905206040345,0.5292723095098195,0.5296396677791254,0.5300072810251145,0.5303751494247616,0.5307432731551641,0.5311116523935426,0.5314802873172404,0.5318491781037239,0.532218324930583,0.5325877279755306,0.532957387416403,0.53332730343116,0.5336974761978847,0.534067905894784,0.5344385927001887,0.5348095367925529,0.5351807383504548,0.5355521975525966,0.5359239145778044,0.5362958896050287,0.5366681228133438,0.5370406143819484,0.537413364490166,0.5377863733174438,0.5381596410433545,0.5385331678475945,0.5389069539099857,0.539280999410474,0.5396553045291311,0.540029869446153,0.5404046943418612,0.540779779396702,0.5411551247912472,0.5415307307061937,0.5419065973223642,0.5422827248207065,0.5426591133822942,0.5430357631883266,0.5434126744201286,0.5437898472591512,0.5441672818869712,0.5445449784852913,0.5449229372359404,0.5453011583208739,0.5456796419221732,0.546058388222046,0.5464373974028267,0.5468166696469761,0.5471962051370817,0.5475760040558576,0.547956066586145,0.548336392910912,0.5487169832132531,0.5490978376763908,0.549478956483674,0.5498603398185792,0.5502419878647102,0.5506239008057984,0.5510060788257024,0.5513885221084086,0.551771230838031,0.5521542051988118,0.5525374453751203,0.5529209515514546,0.5533047239124402,0.5536887626428312,0.5540730679275095,0.554457639951486,0.5548424788998992,0.5552275849580167,0.5556129583112344,0.5559985991450769,0.5563845076451978,0.5567706839973792,0.5571571283875324,0.5575438410016977,0.5579308220260446,0.5583180716468715,0.5587055900506066,0.559093377423807,0.5594814339531595,0.5598697598254806,0.5602583552277163,0.5606472203469425,0.5610363553703646,0.5614257604853184,0.5618154358792694,0.5622053817398135,0.5625955982546764,0.5629860856117146,0.5633768439989144,0.5637678736043932,0.5641591746163984,0.5645507472233087,0.5649425916136327,0.5653347079760106,0.5657270964992133,0.5661197573721425,0.5665126907838313,0.5669058969234438,0.5672993759802756,0.5676931281437534,0.5680871536034358,0.5684814525490125,0.5688760251703051,0.569270871657267,0.5696659921999834,0.5700613869886713,0.5704570562136799,0.5708530000654904,0.5712492187347163,0.5716457124121035,0.57204248128853,0.5724395255550063,0.5728368454026759,0.5732344410228145,0.5736323126068309,0.5740304603462665,0.5744288844327957,0.5748275850582261,0.5752265624144982,0.5756258166936858,0.5760253480879963,0.5764251567897701,0.5768252429914812,0.5772256068857373,0.5776262486652799,0.5780271685229839,0.5784283666518583,0.578829843245046,0.5792315984958243,0.5796336325976041,0.5800359457439309,0.5804385381284843,0.5808414099450787,0.5812445613876627,0.5816479926503194,0.5820517039272671,0.5824556954128586,0.5828599673015814,0.5832645197880583,0.5836693530670471,0.5840744673334409,0.5844798627822678,0.5848855396086914,0.5852914980080107,0.5856977381756605,0.5861042603072111,0.5865110645983682,0.5869181512449739,0.5873255204430059,0.587733172388578,0.5881411072779401,0.5885493253074784,0.5889578266737152,0.5893666115733095,0.5897756802030566,0.5901850327598883,0.5905946694408735,0.5910045904432172,0.5914147959642619,0.591825286201487,0.5922360613525086,0.5926471216150802,0.5930584671870925,0.5934700982665738,0.5938820150516894,0.5942942177407424,0.5947067065321737,0.5951194816245616,0.5955325432166223,0.5959458915072102,0.5963595266953174,0.5967734489800743,0.5971876585607495,0.5976021556367497,0.5980169404076203,0.598432013073045,0.5988473738328463,0.5992630228869851,0.5996789604355612,0.6000951866788136,0.6005117018171198,0.6009285060509966,0.6013455995811,0.6017629826082254,0.6021806553333071,0.6025986179574195,0.603016870681776,0.60343541370773,0.6038542472367745,0.6042733714705425,0.6046927866108068,0.6051124928594802,0.6055324904186159,0.605952779490407,0.6063733602771874,0.606794232981431,0.6072153978057523,0.6076368549529066,0.60805860462579,0.6084806470274391,0.6089029823610316,0.6093256108298862,0.609748532637463,0.6101717479873628,0.6105952570833282,0.6110190601292428,0.6114431573291319,0.6118675488871625,0.6122922350076433,0.6127172158950247,0.6131424917538989,0.6135680627890002,0.6139939292052053,0.6144200912075327,0.6148465490011433,0.6152733027913405,0.6157003527835702,0.6161276991834207,0.6165553421966232,0.6169832820290517,0.6174115188867229,0.6178400529757966,0.6182688845025758,0.6186980136735065,0.6191274406951782,0.6195571657743235,0.6199871891178189,0.620417510932684,0.6208481314260825,0.6212790508053218,0.6217102692778529,0.6221417870512711,0.6225736043333158,0.6230057213318703,0.6234381382549625,0.6238708553107645,0.624303872707593,0.6247371906539092,0.6251708093583189,0.6256047290295731,0.6260389498765673,0.6264734721083418,0.6269082959340827,0.6273434215631207,0.627778849204932,0.628214579069138,0.628650611365506,0.6290869463039486,0.629523584094524,0.6299605249474366,0.6303977690730362,0.630835316681819,0.631273167984427,0.6317113231916488,0.6321497825144189,0.6325885461638182,0.6330276143510746,0.633466987287562,0.6339066651848015,0.6343466482544607,0.6347869367083543,0.6352275307584438,0.6356684306168381,0.636109636495793,0.6365511486077119,0.6369929671651455,0.6374350923807921,0.6378775244674976,0.6383202636382556,0.6387633101062073,0.6392066640846424,0.6396503257869982,0.6400942954268602,0.6405385732179625,0.6409831593741869,0.6414280541095643,0.6418732576382736,0.6423187701746429,0.6427645919331486,0.6432107231284162,0.6436571639752201,0.6441039146884838,0.6445509754832801,0.6449983465748308,0.6454460281785073,0.6458940205098302,0.6463423237844702,0.6467909382182472,0.6472398640271312,0.6476891014272419,0.6481386506348491,0.6485885118663728,0.6490386853383829,0.6494891712676002,0.6499399698708953,0.6503910813652896,0.650842505967955,0.6512942438962145,0.6517462953675417,0.6521986605995608,0.6526513398100476,0.653104333216929,0.6535576410382826,0.6540112634923382,0.6544652007974763,0.6549194531722293,0.6553740208352815,0.6558289040054686,0.6562841029017784,0.6567396177433508,0.6571954487494773,0.6576515961396022,0.6581080601333219,0.6585648409503851,0.6590219388106932,0.6594793539343,0.6599370865414123,0.6603951368523895,0.6608535050877442,0.6613121914681418,0.6617711962144011,0.6622305195474939,0.6626901616885458,0.6631501228588352,0.6636104032797947,0.6640710031730104,0.6645319227602221,0.6649931622633236,0.6654547219043627,0.6659166019055414,0.6663788024892157,0.6668413238778961,0.6673041662942475,0.6677673299610895,0.6682308151013959,0.6686946219382959,0.6691587506950731,0.6696232015951663,0.6700879748621692,0.670553070719831,0.6710184893920557,0.6714842311029031,0.6719502960765886,0.6724166845374829,0.6728833967101127,0.6733504328191602,0.673817793089464,0.6742854777460184,0.6747534870139741,0.6752218211186377,0.6756904802854727,0.6761594647400987,0.6766287747082922,0.6770984104159861,0.6775683720892701,0.6780386599543913,0.6785092742377532,0.6789802151659171,0.679451482965601,0.6799230778636804,0.6803950000871885,0.6808672498633158,0.6813398274194107,0.6818127329829792,0.6822859667816854,0.6827595290433514,0.6832334199959571,0.6837076398676412,0.6841821888867001,0.6846570672815894,0.6851322752809225,0.6856078131134721,0.6860836810081693,0.6865598791941042,0.687036407900526,0.6875132673568429,0.6879904577926225,0.6884679794375914,0.6889458325216361,0.6894240172748023,0.6899025339272955,0.6903813827094809,0.6908605638518839,0.6913400775851894,0.691819924140243,0.6923001037480498,0.6927806166397761,0.6932614630467479,0.693742643200452,0.6942241573325362,0.6947060056748086,0.6951881884592386,0.6956707059179561,0.6961535582832528,0.696636745787581,0.6971202686635546,0.697604127143949,0.6980883214617013,0.6985728518499098,0.699057718541835,0.6995429217708993,0.7000284617706868,0.700514338774944,0.7010005530175796,0.7014871047326646,0.7019739941544324,0.7024612215172793,0.7029487870557638,0.7034366910046075,0.7039249335986949,0.7044135150730735,0.704902435662954,0.7053916956037101,0.7058812951308792,0.706371234480162,0.7068615138874229,0.70735213358869,0.707843093820155,0.7083343948181737,0.7088260368192663,0.7093180200601163,0.7098103447775724,0.7103030112086473,0.7107960195905179,0.7112893701605261,0.7117830631561787,0.7122770988151468,0.712771477375267,0.7132661990745406,0.7137612641511343,0.71425667284338,0.7147524253897751,0.7152485220289826,0.7157449629998308,0.7162417485413143,0.716738878892593,0.7172363542929934,0.7177341749820076,0.7182323411992942,0.7187308531846782,0.7192297111781508,0.7197289154198698,0.7202284661501601,0.720728363609513,0.7212286080385867,0.7217291996782066,0.7222301387693653,0.7227314255532225,0.7232330602711053,0.7237350431645087,0.7242373744750946,0.7247400544446932,0.7252430833153025,0.725746461329088,0.726250188728384,0.7267542657556924,0.7272586926536835,0.7277634696651964,0.7282685970332385,0.7287740750009859,0.7292799038117833,0.7297860837091446,0.7302926149367526,0.7307994977384591,0.7313067323582854,0.731814319040422,0.7323222580292289,0.732830549569236,0.7333391939051422,0.7338481912818172,0.7343575419442998,0.7348672461377994,0.7353773041076954,0.7358877160995376,0.7363984823590461,0.7369096031321118,0.7374210786647959,0.7379329092033308,0.7384450949941194,0.7389576362837358,0.7394705333189254,0.7399837863466048,0.7404973956138616,0.7410113613679555,0.7415256838563173,0.74204036332655,0.7425554000264281,0.743070794203898,0.7435865461070786,0.7441026559842607,0.7446191240839077,0.7451359506546551,0.7456531359453112,0.7461706802048571,0.7466885836824464,0.7472068466274058,0.7477254692892351,0.7482444519176074,0.7487637947623685,0.7492834980735384,0.7498035621013103,0.7503239870960507,0.7508447733083005,0.751365920988774,0.7518874303883598,0.7524093017581205,0.752931535349293,0.7534541314132888,0.7539770902016933,0.7545004119662673,0.7550240969589456,0.7555481454318383,0.7560725576372307,0.7565973338275825,0.7571224742555293,0.7576479791738815,0.7581738488356256,0.758700083493923,0.7592266834021115,0.7597536488137042,0.7602809799823903,0.7608086771620353,0.7613367406066806,0.7618651705705441,0.7623939673080202,0.7629231310736797,0.7634526621222703,0.7639825607087161,0.7645128270881187,0.7650434615157564,0.7655744642470849,0.7661058355377368,0.7666375756435226,0.7671696848204302,0.7677021633246252,0.7682350114124508,0.7687682293404282,0.7693018173652568,0.7698357757438141,0.770370104733156,0.7709048045905165,0.7714398755733084,0.7719753179391231,0.7725111319457308,0.7730473178510806,0.7735838759133007,0.7741208063906982,0.7746581095417601,0.7751957856251519,0.7757338348997195,0.776272257624488,0.7768110540586624,0.7773502244616274,0.7778897690929482,0.7784296882123697,0.7789699820798173,0.7795106509553968,0.7800516950993946,0.7805931147722777,0.7811349102346936,0.7816770817474712,0.7822196295716201,0.7827625539683312,0.7833058551989767,0.7838495335251101,0.7843935892084665,0.7849380225109628,0.7854828336946974,0.7860280230219509,0.7865735907551857,0.7871195371570467,0.7876658624903607,0.7882125670181374,0.7887596510035684,0.7893071147100286,0.7898549584010753,0.790403182340449,0.7909517867920731,0.7915007720200542,0.7920501382886822,0.7925998858624306,0.7931500150059562,0.7937005259840997,0.7942514190618856,0.7948026945045221,0.795354352577402,0.7959063935461016,0.7964588176763823,0.7970116252341892,0.7975648164856527,0.7981183916970874,0.798672351134993,0.799226695066054,0.7997814237571401,0.8003365374753064,0.800892036487793,0.8014479210620256,0.8020041914656159,0.8025608479663606,0.803117890832243,0.8036753203314322,0.804233136732283,0.8047913403033371,0.8053499313133221,0.8059089100311525,0.8064682767259289,0.8070280316669394,0.8075881751236584,0.8081487073657477,0.8087096286630562,0.8092709392856198,0.8098326395036622,0.8103947295875946,0.8109572098080158,0.8115200804357124,0.8120833417416589,0.812646993997018,0.8132110374731407,0.813775472441566,0.8143402991740217,0.814905517942424,0.815471129018878,0.8160371326756776,0.8166035291853054,0.8171703188204338,0.8177375018539237,0.818305078558826,0.8188730492083806,0.8194414140760174,0.8200101734353562,0.8205793275602062,0.8211488767245672,0.8217188212026287,0.8222891612687708,0.8228598971975642,0.8234310292637698,0.8240025577423392,0.8245744829084152,0.8251468050373314,0.8257195244046123,0.826292641285974,0.8268661559573236,0.8274400686947601,0.8280143797745737,0.8285890894732467,0.8291641980674532,0.8297397058340594,0.8303156130501234,0.8308919199928959,0.8314686269398199,0.832045734168531,0.8326232419568576,0.8332011505828206,0.8337794603246343,0.8343581714607059,0.8349372842696358,0.8355167990302177,0.8360967160214391,0.8366770355224808,0.8372577578127177,0.8378388831717184,0.8384204118792455,0.839002344215256,0.8395846804599009,0.8401674208935259,0.8407505657966713,0.841334115450072,0.8419180701346576,0.842502430131553,0.8430871957220782,0.8436723671877482,0.8442579448102736,0.8448439288715605,0.8454303196537105,0.8460171174390213,0.8466043225099864,0.8471919351492952,0.8477799556398335,0.8483683842646836,0.8489572213071239,0.8495464670506296,0.8501361217788728,0.8507261857757222,0.8513166593252438,0.8519075427117007,0.852498836219553,0.8530905401334588,0.8536826547382732,0.8542751803190495,0.8548681171610385,0.8554614655496892,0.8560552257706484,0.8566493981097618,0.8572439828530728,0.8578389802868237,0.8584343906974555,0.859030214371608,0.8596264515961196,0.8602231026580284,0.860820167844571,0.8614176474431842,0.8620155417415036,0.8626138510273648,0.863212575588803,0.8638117157140537,0.8644112716915517,0.865011243809933,0.865611632358033,0.8662124376248881,0.8668136598997352,0.8674152994720121,0.8680173566313572,0.86861983166761,0.8692227248708114,0.8698260365312035,0.8704297669392296,0.871033916385535,0.8716384851609663,0.8722434735565725,0.8728488818636042,0.8734547103735143,0.8740609593779578,0.8746676291687926,0.8752747200380786,0.8758822322780787,0.8764901661812589,0.8770985220402876,0.8777073001480368,0.8783165007975817,0.8789261242822008,0.8795361708953764,0.880146640930794,0.8807575346823435,0.8813688524441184,0.8819805945104167,0.8825927611757403,0.8832053527347955,0.8838183694824936,0.8844318117139501,0.8850456797244856,0.8856599738096255,0.8862746942651005,0.8868898413868465,0.8875054154710048,0.8881214168139221,0.8887378457121511,0.8893547024624501,0.8899719873617833,0.8905897007073214,0.8912078427964408,0.8918264139267248,0.892445414395963,0.8930648445021518,0.8936847045434945,0.894304994818401,0.8949257156254886,0.895546867263582,0.8961684500317131,0.8967904642291213,0.897412910155254,0.8980357881097663,0.8986590983925208,0.899282841303589,0.8999070171432503,0.9005316262119925,0.901156668810512,0.901782145239714,0.9024080558007124,0.9030344007948301,0.9036611805235994,0.9042883952887617,0.9049160453922676,0.9055441311362777,0.9061726528231622,0.9068016107555008,0.9074310052360839,0.9080608365679115,0.908691105054194,0.9093218109983525,0.9099529547040186,0.9105845364750343,0.9112165566154532,0.9118490154295391,0.9124819132217676,0.9131152502968255,0.9137490269596109,0.9143832435152336,0.9150179002690153,0.9156529975264895,0.9162885355934018,0.91692451477571,0.9175609353795843,0.9181977977114072,0.9188351020777741,0.9194728487854932,0.9201110381415856,0.9207496704532854,0.9213887460280399,0.9220282651735101,0.9226682281975703,0.9233086354083087,0.9239494871140268,0.9245907836232408,0.9252325252446806,0.9258747122872903,0.9265173450602291,0.9271604238728698,0.9278039490348007,0.9284479208558246,0.9290923396459596,0.9297372057154386,0.9303825193747102,0.9310282809344382,0.9316744907055023,0.9323211489989978,0.9329682561262358,0.9336158123987438,0.9342638181282652,0.93491227362676,0.9355611792064047,0.9362105351795924,0.936860341858933,0.9375105995572535,0.9381613085875978,0.9388124692632275,0.9394640818976212,0.9401161468044752,0.9407686642977037,0.9414216346914386,0.9420750583000299,0.9427289354380458,0.9433832664202727,0.9440380515617158,0.9446932911775986,0.9453489855833636,0.946005135094672,0.9466617400274044,0.9473188006976606,0.9479763174217596,0.9486342905162402,0.9492927202978605,0.9499516070835989,0.9506109511906538,0.9512707529364433,0.9519310126386061,0.9525917306150017,0.9532529071837096,0.9539145426630304,0.9545766373714858,0.9552391916278182,0.9559022057509915,0.9565656800601908,0.9572296148748229,0.9578940105145163,0.9585588672991211,0.9592241855487097,0.9598899655835766,0.9605562077242384,0.9612229122914345,0.9618900796061266,0.9625577099894993,0.9632258037629602,0.9638943612481399,0.9645633827668921,0.9652328686412944,0.9659028191936473,0.9665732347464755,0.9672441156225272,0.9679154621447748,0.9685872746364149,0.9692595534208683,0.9699322988217804,0.9706055111630213,0.9712791907686855,0.971953337963093,0.9726279530707885,0.973303036416542,0.9739785883253492,0.9746546091224311,0.9753310991332345,0.976008058683432,0.9766854880989224,0.9773633877058309,0.9780417578305084,0.9787205987995329,0.9793999109397089,0.9800796945780677,0.9807599500418676,0.981440677658594,0.9821218777559596,0.9828035506619048,0.9834856967045973,0.9841683162124326,0.9848514095140345,0.9855349769382543,0.9862190188141722,0.9869035354710962,0.9875885272385633,0.988273994446339,0.9889599374244178,0.9896463565030231,0.9903332520126079,0.991020624283854,0.991708473647673,0.9923968004352062,0.9930856049778247,0.9937748876071296,0.9944646486549523,0.9951548884533542,0.9958456073346275,0.9965368056312947,0.9972284836761094,0.997920641802056,0.9986132803423502,0.9993063996304388,1.0],"x":[-1.0,-0.998998998998999,-0.997997997997998,-0.996996996996997,-0.995995995995996,-0.994994994994995,-0.993993993993994,-0.992992992992993,-0.991991991991992,-0.990990990990991,-0.98998998998999,-0.988988988988989,-0.987987987987988,-0.986986986986987,-0.985985985985986,-0.984984984984985,-0.983983983983984,-0.982982982982983,-0.9819819819819819,-0.980980980980981,-0.97997997997998,-0.978978978978979,-0.977977977977978,-0.9769769769769769,-0.975975975975976,-0.974974974974975,-0.973973973973974,-0.972972972972973,-0.9719719719719719,-0.970970970970971,-0.96996996996997,-0.968968968968969,-0.9679679679679679,-0.9669669669669669,-0.965965965965966,-0.964964964964965,-0.963963963963964,-0.9629629629629629,-0.9619619619619619,-0.960960960960961,-0.95995995995996,-0.958958958958959,-0.9579579579579579,-0.9569569569569569,-0.955955955955956,-0.954954954954955,-0.953953953953954,-0.9529529529529529,-0.9519519519519519,-0.950950950950951,-0.94994994994995,-0.948948948948949,-0.9479479479479479,-0.9469469469469469,-0.9459459459459459,-0.944944944944945,-0.943943943943944,-0.9429429429429429,-0.9419419419419419,-0.9409409409409409,-0.93993993993994,-0.938938938938939,-0.9379379379379379,-0.9369369369369369,-0.9359359359359359,-0.934934934934935,-0.933933933933934,-0.9329329329329329,-0.9319319319319319,-0.9309309309309309,-0.92992992992993,-0.928928928928929,-0.9279279279279279,-0.9269269269269269,-0.9259259259259259,-0.924924924924925,-0.923923923923924,-0.9229229229229229,-0.9219219219219219,-0.9209209209209209,-0.91991991991992,-0.918918918918919,-0.9179179179179179,-0.9169169169169169,-0.9159159159159159,-0.914914914914915,-0.913913913913914,-0.9129129129129129,-0.9119119119119119,-0.9109109109109109,-0.9099099099099099,-0.908908908908909,-0.9079079079079079,-0.9069069069069069,-0.9059059059059059,-0.9049049049049049,-0.9039039039039038,-0.9029029029029029,-0.9019019019019019,-0.9009009009009009,-0.8998998998998999,-0.8988988988988988,-0.8978978978978979,-0.8968968968968969,-0.8958958958958959,-0.8948948948948949,-0.8938938938938938,-0.8928928928928929,-0.8918918918918919,-0.8908908908908909,-0.8898898898898899,-0.8888888888888888,-0.8878878878878879,-0.8868868868868869,-0.8858858858858859,-0.8848848848848849,-0.8838838838838838,-0.8828828828828829,-0.8818818818818819,-0.8808808808808809,-0.8798798798798799,-0.8788788788788788,-0.8778778778778779,-0.8768768768768769,-0.8758758758758759,-0.8748748748748749,-0.8738738738738738,-0.8728728728728729,-0.8718718718718719,-0.8708708708708709,-0.8698698698698699,-0.8688688688688688,-0.8678678678678678,-0.8668668668668669,-0.8658658658658659,-0.8648648648648649,-0.8638638638638638,-0.8628628628628628,-0.8618618618618619,-0.8608608608608609,-0.8598598598598599,-0.8588588588588588,-0.8578578578578578,-0.8568568568568569,-0.8558558558558559,-0.8548548548548549,-0.8538538538538538,-0.8528528528528528,-0.8518518518518519,-0.8508508508508509,-0.8498498498498499,-0.8488488488488488,-0.8478478478478478,-0.8468468468468469,-0.8458458458458459,-0.8448448448448449,-0.8438438438438438,-0.8428428428428428,-0.8418418418418419,-0.8408408408408409,-0.8398398398398398,-0.8388388388388388,-0.8378378378378378,-0.8368368368368369,-0.8358358358358359,-0.8348348348348348,-0.8338338338338338,-0.8328328328328328,-0.8318318318318318,-0.8308308308308309,-0.8298298298298298,-0.8288288288288288,-0.8278278278278278,-0.8268268268268268,-0.8258258258258259,-0.8248248248248248,-0.8238238238238238,-0.8228228228228228,-0.8218218218218218,-0.8208208208208209,-0.8198198198198198,-0.8188188188188188,-0.8178178178178178,-0.8168168168168168,-0.8158158158158159,-0.8148148148148148,-0.8138138138138138,-0.8128128128128128,-0.8118118118118118,-0.8108108108108109,-0.8098098098098098,-0.8088088088088088,-0.8078078078078078,-0.8068068068068068,-0.8058058058058059,-0.8048048048048048,-0.8038038038038038,-0.8028028028028028,-0.8018018018018018,-0.8008008008008008,-0.7997997997997998,-0.7987987987987988,-0.7977977977977978,-0.7967967967967968,-0.7957957957957958,-0.7947947947947948,-0.7937937937937938,-0.7927927927927928,-0.7917917917917918,-0.7907907907907908,-0.7897897897897898,-0.7887887887887888,-0.7877877877877878,-0.7867867867867868,-0.7857857857857858,-0.7847847847847848,-0.7837837837837838,-0.7827827827827828,-0.7817817817817818,-0.7807807807807807,-0.7797797797797797,-0.7787787787787788,-0.7777777777777778,-0.7767767767767768,-0.7757757757757757,-0.7747747747747747,-0.7737737737737738,-0.7727727727727728,-0.7717717717717718,-0.7707707707707707,-0.7697697697697697,-0.7687687687687688,-0.7677677677677678,-0.7667667667667668,-0.7657657657657657,-0.7647647647647647,-0.7637637637637638,-0.7627627627627628,-0.7617617617617618,-0.7607607607607607,-0.7597597597597597,-0.7587587587587588,-0.7577577577577578,-0.7567567567567568,-0.7557557557557557,-0.7547547547547547,-0.7537537537537538,-0.7527527527527528,-0.7517517517517518,-0.7507507507507507,-0.7497497497497497,-0.7487487487487487,-0.7477477477477478,-0.7467467467467468,-0.7457457457457457,-0.7447447447447447,-0.7437437437437437,-0.7427427427427428,-0.7417417417417418,-0.7407407407407407,-0.7397397397397397,-0.7387387387387387,-0.7377377377377378,-0.7367367367367368,-0.7357357357357357,-0.7347347347347347,-0.7337337337337337,-0.7327327327327328,-0.7317317317317318,-0.7307307307307307,-0.7297297297297297,-0.7287287287287287,-0.7277277277277278,-0.7267267267267268,-0.7257257257257257,-0.7247247247247247,-0.7237237237237237,-0.7227227227227228,-0.7217217217217218,-0.7207207207207207,-0.7197197197197197,-0.7187187187187187,-0.7177177177177178,-0.7167167167167167,-0.7157157157157157,-0.7147147147147147,-0.7137137137137137,-0.7127127127127127,-0.7117117117117117,-0.7107107107107107,-0.7097097097097097,-0.7087087087087087,-0.7077077077077077,-0.7067067067067067,-0.7057057057057057,-0.7047047047047047,-0.7037037037037037,-0.7027027027027027,-0.7017017017017017,-0.7007007007007007,-0.6996996996996997,-0.6986986986986987,-0.6976976976976977,-0.6966966966966966,-0.6956956956956957,-0.6946946946946947,-0.6936936936936937,-0.6926926926926927,-0.6916916916916916,-0.6906906906906907,-0.6896896896896897,-0.6886886886886887,-0.6876876876876877,-0.6866866866866866,-0.6856856856856857,-0.6846846846846847,-0.6836836836836837,-0.6826826826826827,-0.6816816816816816,-0.6806806806806807,-0.6796796796796797,-0.6786786786786787,-0.6776776776776777,-0.6766766766766766,-0.6756756756756757,-0.6746746746746747,-0.6736736736736737,-0.6726726726726727,-0.6716716716716716,-0.6706706706706707,-0.6696696696696697,-0.6686686686686687,-0.6676676676676677,-0.6666666666666666,-0.6656656656656657,-0.6646646646646647,-0.6636636636636637,-0.6626626626626627,-0.6616616616616616,-0.6606606606606606,-0.6596596596596597,-0.6586586586586587,-0.6576576576576577,-0.6566566566566566,-0.6556556556556556,-0.6546546546546547,-0.6536536536536537,-0.6526526526526526,-0.6516516516516516,-0.6506506506506506,-0.6496496496496497,-0.6486486486486487,-0.6476476476476476,-0.6466466466466466,-0.6456456456456456,-0.6446446446446447,-0.6436436436436437,-0.6426426426426426,-0.6416416416416416,-0.6406406406406406,-0.6396396396396397,-0.6386386386386387,-0.6376376376376376,-0.6366366366366366,-0.6356356356356356,-0.6346346346346347,-0.6336336336336337,-0.6326326326326326,-0.6316316316316316,-0.6306306306306306,-0.6296296296296297,-0.6286286286286287,-0.6276276276276276,-0.6266266266266266,-0.6256256256256256,-0.6246246246246246,-0.6236236236236237,-0.6226226226226226,-0.6216216216216216,-0.6206206206206206,-0.6196196196196196,-0.6186186186186187,-0.6176176176176176,-0.6166166166166166,-0.6156156156156156,-0.6146146146146146,-0.6136136136136137,-0.6126126126126126,-0.6116116116116116,-0.6106106106106106,-0.6096096096096096,-0.6086086086086087,-0.6076076076076076,-0.6066066066066066,-0.6056056056056056,-0.6046046046046046,-0.6036036036036037,-0.6026026026026026,-0.6016016016016016,-0.6006006006006006,-0.5995995995995996,-0.5985985985985987,-0.5975975975975976,-0.5965965965965966,-0.5955955955955956,-0.5945945945945946,-0.5935935935935935,-0.5925925925925926,-0.5915915915915916,-0.5905905905905906,-0.5895895895895896,-0.5885885885885885,-0.5875875875875876,-0.5865865865865866,-0.5855855855855856,-0.5845845845845846,-0.5835835835835835,-0.5825825825825826,-0.5815815815815816,-0.5805805805805806,-0.5795795795795796,-0.5785785785785785,-0.5775775775775776,-0.5765765765765766,-0.5755755755755756,-0.5745745745745746,-0.5735735735735735,-0.5725725725725725,-0.5715715715715716,-0.5705705705705706,-0.5695695695695696,-0.5685685685685685,-0.5675675675675675,-0.5665665665665666,-0.5655655655655656,-0.5645645645645646,-0.5635635635635635,-0.5625625625625625,-0.5615615615615616,-0.5605605605605606,-0.5595595595595596,-0.5585585585585585,-0.5575575575575575,-0.5565565565565566,-0.5555555555555556,-0.5545545545545546,-0.5535535535535535,-0.5525525525525525,-0.5515515515515516,-0.5505505505505506,-0.5495495495495496,-0.5485485485485485,-0.5475475475475475,-0.5465465465465466,-0.5455455455455456,-0.5445445445445446,-0.5435435435435435,-0.5425425425425425,-0.5415415415415415,-0.5405405405405406,-0.5395395395395396,-0.5385385385385385,-0.5375375375375375,-0.5365365365365365,-0.5355355355355356,-0.5345345345345346,-0.5335335335335335,-0.5325325325325325,-0.5315315315315315,-0.5305305305305306,-0.5295295295295295,-0.5285285285285285,-0.5275275275275275,-0.5265265265265265,-0.5255255255255256,-0.5245245245245245,-0.5235235235235235,-0.5225225225225225,-0.5215215215215215,-0.5205205205205206,-0.5195195195195195,-0.5185185185185185,-0.5175175175175175,-0.5165165165165165,-0.5155155155155156,-0.5145145145145145,-0.5135135135135135,-0.5125125125125125,-0.5115115115115115,-0.5105105105105106,-0.5095095095095095,-0.5085085085085085,-0.5075075075075075,-0.5065065065065065,-0.5055055055055055,-0.5045045045045045,-0.5035035035035035,-0.5025025025025025,-0.5015015015015015,-0.5005005005005005,-0.4994994994994995,-0.4984984984984985,-0.4974974974974975,-0.4964964964964965,-0.4954954954954955,-0.4944944944944945,-0.4934934934934935,-0.4924924924924925,-0.4914914914914915,-0.4904904904904905,-0.4894894894894895,-0.48848848848848847,-0.4874874874874875,-0.48648648648648657,-0.48548548548548554,-0.48448448448448456,-0.4834834834834835,-0.48248248248248254,-0.48148148148148157,-0.48048048048048053,-0.47947947947947955,-0.4784784784784785,-0.47747747747747754,-0.4764764764764765,-0.47547547547547553,-0.47447447447447455,-0.4734734734734735,-0.47247247247247254,-0.4714714714714715,-0.4704704704704705,-0.46946946946946955,-0.4684684684684685,-0.46746746746746753,-0.4664664664664665,-0.4654654654654655,-0.46446446446446454,-0.4634634634634635,-0.46246246246246253,-0.4614614614614615,-0.4604604604604605,-0.45945945945945954,-0.4584584584584585,-0.45745745745745753,-0.4564564564564565,-0.4554554554554555,-0.45445445445445454,-0.4534534534534535,-0.4524524524524525,-0.4514514514514515,-0.4504504504504505,-0.44944944944944953,-0.4484484484484485,-0.4474474474474475,-0.4464464464464465,-0.4454454454454455,-0.4444444444444445,-0.4434434434434435,-0.4424424424424425,-0.4414414414414415,-0.4404404404404405,-0.43943943943943947,-0.4384384384384385,-0.4374374374374375,-0.4364364364364365,-0.4354354354354355,-0.43443443443443447,-0.4334334334334335,-0.4324324324324325,-0.4314314314314315,-0.4304304304304305,-0.42942942942942947,-0.4284284284284285,-0.4274274274274275,-0.4264264264264265,-0.4254254254254255,-0.42442442442442446,-0.4234234234234235,-0.4224224224224225,-0.42142142142142147,-0.4204204204204205,-0.41941941941941946,-0.4184184184184185,-0.41741741741741745,-0.41641641641641647,-0.4154154154154155,-0.41441441441441446,-0.4134134134134135,-0.41241241241241244,-0.41141141141141147,-0.4104104104104105,-0.40940940940940945,-0.4084084084084085,-0.40740740740740744,-0.40640640640640646,-0.4054054054054055,-0.40440440440440445,-0.40340340340340347,-0.40240240240240244,-0.40140140140140146,-0.4004004004004005,-0.39939939939939945,-0.39839839839839847,-0.39739739739739743,-0.39639639639639646,-0.3953953953953955,-0.39439439439439444,-0.39339339339339346,-0.39239239239239243,-0.39139139139139145,-0.3903903903903905,-0.38938938938938944,-0.38838838838838846,-0.3873873873873874,-0.38638638638638645,-0.3853853853853854,-0.38438438438438444,-0.38338338338338346,-0.3823823823823824,-0.38138138138138145,-0.3803803803803804,-0.37937937937937943,-0.37837837837837845,-0.3773773773773774,-0.37637637637637644,-0.3753753753753754,-0.37437437437437443,-0.37337337337337345,-0.3723723723723724,-0.37137137137137144,-0.3703703703703704,-0.3693693693693694,-0.36836836836836845,-0.3673673673673674,-0.36636636636636644,-0.3653653653653654,-0.3643643643643644,-0.36336336336336345,-0.3623623623623624,-0.36136136136136143,-0.3603603603603604,-0.3593593593593594,-0.35835835835835844,-0.3573573573573574,-0.35635635635635643,-0.3553553553553554,-0.3543543543543544,-0.3533533533533534,-0.3523523523523524,-0.3513513513513514,-0.3503503503503504,-0.3493493493493494,-0.3483483483483484,-0.3473473473473474,-0.3463463463463464,-0.3453453453453454,-0.3443443443443444,-0.3433433433433434,-0.3423423423423424,-0.3413413413413414,-0.3403403403403404,-0.3393393393393394,-0.3383383383383384,-0.3373373373373374,-0.3363363363363364,-0.3353353353353354,-0.3343343343343344,-0.33333333333333337,-0.3323323323323324,-0.3313313313313314,-0.3303303303303304,-0.3293293293293294,-0.32832832832832837,-0.3273273273273274,-0.3263263263263264,-0.3253253253253254,-0.3243243243243244,-0.32332332332332336,-0.3223223223223224,-0.32132132132132135,-0.3203203203203204,-0.3193193193193194,-0.31831831831831836,-0.3173173173173174,-0.31631631631631635,-0.31531531531531537,-0.3143143143143144,-0.31331331331331336,-0.3123123123123124,-0.31131131131131135,-0.31031031031031037,-0.3093093093093094,-0.30830830830830835,-0.3073073073073074,-0.30630630630630634,-0.30530530530530536,-0.3043043043043044,-0.30330330330330335,-0.3023023023023024,-0.30130130130130134,-0.30030030030030036,-0.2992992992992994,-0.29829829829829835,-0.29729729729729737,-0.29629629629629634,-0.29529529529529536,-0.2942942942942944,-0.29329329329329334,-0.29229229229229237,-0.29129129129129133,-0.29029029029029035,-0.2892892892892893,-0.28828828828828834,-0.28728728728728736,-0.28628628628628633,-0.28528528528528535,-0.2842842842842843,-0.28328328328328334,-0.28228228228228236,-0.2812812812812813,-0.28028028028028035,-0.2792792792792793,-0.27827827827827833,-0.27727727727727736,-0.2762762762762763,-0.27527527527527534,-0.2742742742742743,-0.27327327327327333,-0.27227227227227235,-0.2712712712712713,-0.27027027027027034,-0.2692692692692693,-0.26826826826826833,-0.26726726726726735,-0.2662662662662663,-0.26526526526526534,-0.2642642642642643,-0.2632632632632633,-0.26226226226226235,-0.2612612612612613,-0.26026026026026033,-0.2592592592592593,-0.2582582582582583,-0.2572572572572573,-0.2562562562562563,-0.2552552552552553,-0.2542542542542543,-0.25325325325325326,-0.2522522522522523,-0.2512512512512513,-0.2502502502502503,-0.24924924924924927,-0.2482482482482483,-0.24724724724724728,-0.24624624624624628,-0.24524524524524527,-0.24424424424424426,-0.24324324324324328,-0.24224224224224228,-0.24124124124124127,-0.24024024024024027,-0.23923923923923926,-0.23823823823823825,-0.23723723723723728,-0.23623623623623627,-0.23523523523523526,-0.23423423423423426,-0.23323323323323325,-0.23223223223223227,-0.2312312312312313,-0.2302302302302303,-0.22922922922922928,-0.22822822822822827,-0.2272272272272273,-0.2262262262262263,-0.22522522522522528,-0.22422422422422428,-0.22322322322322327,-0.22222222222222227,-0.2212212212212213,-0.22022022022022028,-0.21921921921921927,-0.21821821821821827,-0.21721721721721726,-0.21621621621621628,-0.21521521521521528,-0.21421421421421427,-0.21321321321321327,-0.21221221221221226,-0.21121121121121128,-0.21021021021021027,-0.20920920920920927,-0.20820820820820826,-0.20720720720720726,-0.20620620620620625,-0.20520520520520527,-0.20420420420420426,-0.20320320320320326,-0.20220220220220225,-0.20120120120120125,-0.20020020020020027,-0.19919919919919926,-0.19819819819819826,-0.19719719719719725,-0.19619619619619624,-0.19519519519519526,-0.19419419419419426,-0.19319319319319325,-0.19219219219219225,-0.19119119119119124,-0.19019019019019023,-0.18918918918918926,-0.18818818818818825,-0.18718718718718724,-0.18618618618618624,-0.18518518518518523,-0.18418418418418425,-0.18318318318318325,-0.18218218218218224,-0.18118118118118123,-0.18018018018018023,-0.17917917917917925,-0.17817817817817824,-0.17717717717717724,-0.17617617617617623,-0.17517517517517522,-0.17417417417417422,-0.17317317317317324,-0.17217217217217223,-0.17117117117117123,-0.17017017017017022,-0.16916916916916921,-0.16816816816816824,-0.16716716716716723,-0.16616616616616622,-0.16516516516516522,-0.1641641641641642,-0.16316316316316323,-0.16216216216216223,-0.16116116116116122,-0.16016016016016021,-0.1591591591591592,-0.1581581581581582,-0.15715715715715722,-0.15615615615615622,-0.1551551551551552,-0.1541541541541542,-0.1531531531531532,-0.15215215215215222,-0.15115115115115121,-0.1501501501501502,-0.1491491491491492,-0.1481481481481482,-0.14714714714714722,-0.1461461461461462,-0.1451451451451452,-0.1441441441441442,-0.1431431431431432,-0.14214214214214219,-0.1411411411411412,-0.1401401401401402,-0.1391391391391392,-0.1381381381381382,-0.13713713713713718,-0.1361361361361362,-0.1351351351351352,-0.1341341341341342,-0.13313313313313319,-0.13213213213213218,-0.1311311311311312,-0.1301301301301302,-0.1291291291291292,-0.12812812812812818,-0.12712712712712718,-0.12612612612612617,-0.12512512512512516,-0.12412412412412417,-0.12312312312312317,-0.12212212212212216,-0.12112112112112117,-0.12012012012012016,-0.11911911911911917,-0.11811811811811816,-0.11711711711711716,-0.11611611611611616,-0.11511511511511516,-0.11411411411411415,-0.11311311311311316,-0.11211211211211215,-0.11111111111111116,-0.11011011011011015,-0.10910910910910915,-0.10810810810810816,-0.10710710710710715,-0.10610610610610614,-0.10510510510510515,-0.10410410410410414,-0.10310310310310317,-0.10210210210210216,-0.10110110110110115,-0.10010010010010016,-0.09909909909909916,-0.09809809809809815,-0.09709709709709716,-0.09609609609609615,-0.09509509509509516,-0.09409409409409415,-0.09309309309309315,-0.09209209209209215,-0.09109109109109115,-0.09009009009009014,-0.08908908908908915,-0.08808808808808814,-0.08708708708708715,-0.08608608608608614,-0.08508508508508514,-0.08408408408408415,-0.08308308308308314,-0.08208208208208213,-0.08108108108108114,-0.08008008008008013,-0.07907907907907914,-0.07807807807807814,-0.07707707707707713,-0.07607607607607614,-0.07507507507507513,-0.07407407407407413,-0.07307307307307313,-0.07207207207207213,-0.07107107107107113,-0.07007007007007013,-0.06906906906906912,-0.06806806806806813,-0.06706706706706712,-0.06606606606606612,-0.06506506506506513,-0.06406406406406412,-0.06306306306306311,-0.062062062062062114,-0.061061061061061114,-0.06006006006006011,-0.05905905905905911,-0.05805805805805811,-0.0570570570570571,-0.056056056056056104,-0.055055055055055105,-0.054054054054054106,-0.0530530530530531,-0.0520520520520521,-0.0510510510510511,-0.0500500500500501,-0.049049049049049095,-0.048048048048048096,-0.0470470470470471,-0.0460460460460461,-0.04504504504504509,-0.04404404404404409,-0.04304304304304309,-0.042042042042042094,-0.04104104104104109,-0.04004004004004009,-0.039039039039039096,-0.0380380380380381,-0.03703703703703709,-0.03603603603603609,-0.03503503503503509,-0.03403403403403409,-0.033033033033033087,-0.03203203203203209,-0.031031031031031085,-0.030030030030030082,-0.029029029029029083,-0.02802802802802808,-0.02702702702702708,-0.026026026026026078,-0.02502502502502508,-0.024024024024024076,-0.023023023023023077,-0.022022022022022074,-0.021021021021021075,-0.020020020020020072,-0.019019019019019073,-0.01801801801801807,-0.01701701701701707,-0.016016016016016068,-0.01501501501501507,-0.01401401401401407,-0.013013013013013068,-0.012012012012012067,-0.011011011011011066,-0.010010010010010065,-0.009009009009009064,-0.008008008008008063,-0.0070070070070070625,-0.0060060060060060615,-0.0050050050050050605,-0.0040040040040040595,-0.003003003003003058,-0.0020020020020020575,-0.0010010010010010565,-5.551115123125783e-17]}
},{}],17:[function(require,module,exports){
module.exports={"expected":[1.0,1.000694081784944,1.0013886453194116,1.0020836909377775,1.0027792189746465,1.003475229764857,1.004171723643479,1.0048687009458155,1.0055661620074021,1.0062641071640073,1.0069625367516324,1.0076614511065125,1.0083608505651156,1.0090607354641432,1.0097611061405307,1.0104619629314475,1.0111633061742968,1.011865136206716,1.0125674533665767,1.0132702579919852,1.0139735504212828,1.014677330993045,1.0153816000460825,1.0160863579194415,1.0167916049524033,1.0174973414844846,1.0182035678554375,1.0189102844052507,1.0196174914741483,1.0203251894025906,1.0210333785312742,1.0217420592011324,1.0224512317533347,1.023160896529288,1.0238710538706357,1.0245817041192584,1.0252928476172742,1.0260044847070386,1.0267166157311443,1.0274292410324224,1.0281423609539415,1.0288559758390088,1.0295700860311692,1.0302846918742063,1.0309997937121427,1.031715391889239,1.0324314867499955,1.0331480786391511,1.0338651679016841,1.0345827548828126,1.0353008399279935,1.0360194233829245,1.0367385055935425,1.0374580869060248,1.038178167666789,1.0388987482224927,1.039619828920035,1.0403414101065547,1.0410634921294322,1.0417860753362893,1.042509160074988,1.0432327466936333,1.0439568355405702,1.0446814269643863,1.0454065213139114,1.046132118938217,1.0468582201866163,1.0475848254086666,1.0483119349541663,1.049039549173157,1.0497676684159238,1.0504962930329942,1.0512254233751392,1.0519550597933738,1.0526852026389557,1.0534158522633872,1.0541470090184142,1.054878673256027,1.0556108453284596,1.056343525588191,1.0570767143879451,1.05781041208069,1.058544619019639,1.0592793355582508,1.060014562050229,1.0607502988495232,1.0614865463103285,1.0622233047870853,1.0629605746344808,1.0636983562074478,1.0644366498611662,1.0651754559510613,1.065914774832806,1.06665460686232,1.0673949523957693,1.0681358117895683,1.0688771854003773,1.0696190735851059,1.0703614767009095,1.0711043951051933,1.071847829155609,1.0725917792100574,1.0733362456266875,1.0740812287638968,1.074826728980332,1.0755727466348879,1.076319282086709,1.077066335695189,1.0778139078199713,1.078561998820948,1.0793106090582623,1.080059738892306,1.0808093886837224,1.081559558793404,1.0823102495824943,1.0830614614123875,1.0838131946447285,1.084565449641413,1.0853182267645884,1.0860715263766532,1.0868253488402573,1.0875796945183025,1.0883345637739423,1.0890899569705825,1.0898458744718809,1.090602316641748,1.0913592838443464,1.092116776444092,1.0928747948056534,1.0936333392939521,1.0943924102741633,1.0951520081117152,1.0959121331722903,1.096672785821824,1.0974339664265065,1.0981956753527817,1.098957912967348,1.0997206796371584,1.1004839757294205,1.1012478016115967,1.1020121576514048,1.1027770442168172,1.1035424616760623,1.1043084103976235,1.1050748907502408,1.1058419031029092,1.1066094478248805,1.1073775252856624,1.1081461358550193,1.108915279902972,1.1096849577997985,1.1104551699160334,1.1112259166224687,1.1119971982901538,1.1127690152903955,1.1135413679947583,1.1143142567750648,1.1150876820033955,1.1158616440520892,1.1166361432937433,1.1174111801012132,1.118186754847614,1.118962867906319,1.1197395196509614,1.1205167104554328,1.121294440693885,1.1220727107407293,1.122851520970637,1.123630871758539,1.124410763479627,1.1251911965093528,1.1259721712234292,1.1267536879978288,1.1275357472087864,1.1283183492327968,1.1291014944466173,1.1298851832272654,1.1306694159520212,1.1314541929984265,1.132239514744285,1.1330253815676625,1.1338117938468877,1.1345987519605512,1.135386256287507,1.1361743072068715,1.136962905098025,1.1377520503406102,1.138541743314534,1.1393319843999667,1.1401227739773425,1.1409141124273598,1.141706000130981,1.142498437469433,1.143291424824207,1.14408496257706,1.1448790511100126,1.1456736908053518,1.1464688820456292,1.1472646252136618,1.148060920692533,1.1488577688655914,1.1496551701164521,1.1504531248289964,1.151251633387372,1.1520506961759927,1.1528503135795403,1.1536504859829626,1.1544512137714749,1.1552524973305598,1.1560543370459677,1.1568567333037165,1.157659686490092,1.1584631969916486,1.1592672651952083,1.1600718914878618,1.160877076256969,1.1616828198901574,1.1624891227753253,1.163295985300639,1.1641034078545343,1.1649113908257172,1.1657199346031628,1.1665290395761165,1.1673387061340943,1.1681489346668819,1.1689597255645356,1.1697710792173828,1.1705829960160214,1.1713954763513212,1.1722085206144222,1.1730221291967364,1.1738363024899479,1.1746510408860118,1.175466344777156,1.1762822145558802,1.1770986506149568,1.1779156533474304,1.178733223146619,1.1795513604061132,1.1803700655197766,1.181189338881747,1.1820091808864344,1.1828295919285239,1.183650572402974,1.1844721227050172,1.1852942432301603,1.186116934374185,1.1869401965331476,1.1877640301033787,1.1885884354814849,1.1894134130643474,1.1902389632491233,1.1910650864332448,1.1918917830144204,1.1927190533906349,1.1935468979601487,1.194375317121499,1.1952043112734994,1.1960338808152406,1.19686402614609,1.1976947476656925,1.1985260457739702,1.1993579208711225,1.2001903733576271,1.2010234036342395,1.2018570121019931,1.2026911991622,1.2035259652164507,1.2043613106666144,1.205197235914839,1.206033741363552,1.20687082741546,1.2077084944735492,1.208546742941085,1.2093855732216137,1.2102249857189604,1.2110649808372318,1.2119055589808143,1.212746720554375,1.213588465962862,1.2144307956115046,1.2152737099058133,1.21611720925158,1.2169612940548782,1.2178059647220632,1.2186512216597727,1.2194970652749262,1.220343495974726,1.2211905141666564,1.2220381202584856,1.222886314658264,1.223735097774325,1.2245844700152868,1.2254344317900494,1.2262849835077978,1.2271361255780004,1.2279878584104107,1.2288401824150654,1.2296930980022867,1.2305466055826813,1.2314007055671405,1.2322553983668414,1.2331106843932464,1.2339665640581035,1.2348230377734457,1.2356801059515932,1.2365377690051516,1.237396027347013,1.2382548813903564,1.239114331548647,1.2399743782356378,1.240835021865368,1.241696262852165,1.2425581016106435,1.2434205385557058,1.2442835741025422,1.2451472086666315,1.2460114426637405,1.246876276509925,1.247741710621529,1.248607745415186,1.2494743813078184,1.250341618716638,1.2512094580591462,1.2520778997531345,1.2529469442166838,1.2538165918681656,1.2546868431262415,1.255557698409864,1.2564291581382763,1.257301222731012,1.2581738926078974,1.2590471681890483,1.2599210498948732,1.2607955381460725,1.261670633363638,1.2625463359688542,1.2634226463832976,1.2642995650288378,1.2651770923276364,1.2660552287021491,1.2669339745751242,1.267813330369603,1.2686932965089215,1.2695738734167088,1.2704550615168877,1.2713368612336762,1.272219272991586,1.2731022972154238,1.2739859343302913,1.2748701847615844,1.2757550489349954,1.2766405272765111,1.2775266202124147,1.2784133281692849,1.2793006515739964,1.2801885908537207,1.281077146435925,1.281966318748374,1.2828561082191285,1.2837465152765473,1.2846375403492858,1.2855291838662972,1.2864214462568324,1.2873143279504402,1.2882078293769679,1.2891019509665602,1.2899966931496616,1.2908920563570145,1.2917880410196605,1.2926846475689404,1.2935818764364944,1.2944797280542624,1.2953782028544838,1.2962773012696982,1.2971770237327456,1.298077370676766,1.2989783425352004,1.2998799397417906,1.3007821627305791,1.3016850119359102,1.3025884877924292,1.3034925907350834,1.3043973211991218,1.3053026796200955,1.306208666433858,1.3071152820765655,1.3080225269846764,1.3089304015949526,1.3098389063444587,1.310748041670563,1.3116578080109373,1.3125682058035568,1.3134792354867015,1.3143908974989547,1.3153031922792047,1.316216120266644,1.3171296819007703,1.3180438776213865,1.3189587078686,1.3198741730828247,1.3207902737047792,1.3217070101754884,1.3226243829362838,1.3235423924288023,1.324461039094988,1.3253803233770916,1.3263002457176705,1.3272208065595894,1.3281420063460208,1.3290638455204442,1.3299863245266472,1.3309094438087254,1.3318332038110827,1.3327576049784313,1.3336826477557921,1.334608332588495,1.335534659922179,1.3364616302027919,1.3373892438765917,1.3383175013901463,1.3392464031903326,1.3401759497243384,1.341106141439662,1.3420369787841113,1.3429684622058062,1.3439005921531773,1.3448333690749659,1.3457667934202253,1.3467008656383206,1.3476355861789282,1.3485709554920369,1.3495069740279482,1.3504436422372754,1.3513809605709455,1.3523189294801976,1.3532575494165844,1.3541968208319721,1.3551367441785402,1.3560773199087826,1.3570185484755066,1.3579604303318342,1.358902965931202,1.359846155727361,1.360790000174377,1.3617344997266316,1.3626796548388214,1.3636254659659586,1.3645719335633708,1.3655190580867027,1.3664668399919142,1.3674152797352823,1.3683643777734003,1.3693141345631787,1.3702645505618452,1.3712156262269442,1.3721673620163386,1.3731197583882084,1.374072815801052,1.3750265347136859,1.375980915585245,1.3769359588751828,1.3778916650432722,1.3788480345496046,1.379805067854591,1.380762765418962,1.3817211277037678,1.382680155170379,1.383639848280486,1.3846002074960997,1.3855612332795522,1.3865229260934957,1.3874852864009042,1.3884483146650723,1.3894120113496173,1.3903763769184772,1.3913414118359122,1.3923071165665055,1.393273491575162,1.3942405373271092,1.395208254287898,1.3961766429234026,1.3971457036998196,1.3981154370836701,1.3990858435417985,1.4000569235413736,1.4010286775498881,1.4020011060351592,1.4029742094653292,1.403947988308865,1.4049224430345586,1.4058975741115276,1.406873382009215,1.4078498671973898,1.408827030146147,1.4098048713259077,1.4107833912074201,1.4117625902617583,1.412742468960324,1.4137230277748458,1.41470426717738,1.41568618764031,1.4166687896363475,1.4176520736385325,1.4186360401202327,1.4196206895551449,1.4206060224172945,1.4215920391810357,1.4225787403210521,1.4235661263123573,1.4245541976302938,1.425542954750534,1.4265323981490812,1.4275225283022686,1.42851334568676,1.4295048507795505,1.4304970440579652,1.4314899259996616,1.4324834970826286,1.433477757785186,1.434472708585987,1.4354683499640153,1.4364646823985885,1.4374617063693564,1.4384594223563016,1.4394578308397399,1.4404569323003205,1.441456727219026,1.4424572160771734,1.4434583993564132,1.4444602775387305,1.445462851106445,1.4464661205422107,1.4474700863290173,1.4484747489501895,1.4494801088893867,1.450486166630605,1.4514929226581763,1.452500377456768,1.4535085315113847,1.4545173853073672,1.455526939330393,1.456537194066477,1.4575481500019718,1.4585598076235666,1.4595721674182893,1.4605852298735051,1.4615989954769182,1.4626134647165707,1.463628638080844,1.464644516058458,1.465661099138472,1.4666783878102845,1.4676963825636344,1.4687150838885996,1.4697344922755988,1.4707546082153908,1.4717754321990753,1.4727969647180923,1.4738192062642237,1.474842157329592,1.4758658184066615,1.4768901899882387,1.4779152725674716,1.478941066637851,1.4799675726932096,1.4809947912277233,1.482022722735911,1.4830513677126347,1.4840807266531002,1.4851108000528561,1.486141588407796,1.4871730922141573,1.4882053119685215,1.4892382481678155,1.4902719013093102,1.4913062718906225,1.4923413604097142,1.4933771673648928,1.4944136932548118,1.4954509385784704,1.4964889038352147,1.497527589524737,1.498566996147077,1.4996071242026205,1.5006479741921015,1.501689546616601,1.502731841977548,1.5037748607767196,1.5048186035162412,1.5058630706985863,1.5069082628265775,1.5079541804033867,1.5090008239325345,1.5100481939178911,1.511096290863677,1.5121451152744614,1.513194667655165,1.5142449485110585,1.5152959583477632,1.516347697671251,1.517400166987846,1.518453366804223,1.5195072976274084,1.5205619599647808,1.5216173543240705,1.5226734812133613,1.5237303411410883,1.5247879346160407,1.5258462621473596,1.5269053242445405,1.5279651214174323,1.5290256541762375,1.530086923031513,1.5311489284941697,1.5322116710754736,1.5332751512870453,1.5343393696408605,1.5354043266492505,1.5364700228249015,1.5375364586808564,1.5386036347305136,1.5396715514876282,1.540740209466312,1.5418096091810332,1.5428797511466168,1.5439506358782462,1.5450222638914617,1.5460946357021614,1.5471677518266014,1.5482416127813967,1.5493162190835201,1.5503915712503038,1.5514676697994392,1.552544515248976,1.5536221081173247,1.5547004489232548,1.5557795381858963,1.5568593764247394,1.5579399641596348,1.5590213019107937,1.5601033901987893,1.5611862295445553,1.5622698204693872,1.5633541634949424,1.5644392591432401,1.5655251079366623,1.5666117103979533,1.5676990670502202,1.5687871784169332,1.5698760450219256,1.5709656673893948,1.5720560460439017,1.5731471815103717,1.5742390743140935,1.5753317249807217,1.5764251340362747,1.577519302007137,1.5786142294200574,1.5797099168021507,1.580806364680898,1.5819035735841462,1.5830015440401086,1.5841002765773646,1.5851997717248612,1.5863000300119126,1.5874010519681994,1.5885028381237711,1.5896053890090442,1.590708705154804,1.5918127870922034,1.5929176353527645,1.5940232504683787,1.5951296329713056,1.596236783394175,1.597344702269986,1.598453390132108,1.5995628475142805,1.6006730749506128,1.601784072975586,1.6028958421240513,1.6040083829312317,1.6051216959327215,1.6062357816644863,1.6073506406628644,1.6084662734645663,1.6095826806066742,1.6106998626266444,1.611817820062305,1.6129365534518578,1.6140560633338787,1.6151763502473169,1.6162974147314955,1.6174192573261124,1.6185418785712395,1.6196652790073245,1.6207894591751892,1.6219144196160318,1.6230401608714249,1.624166683483318,1.625293987994036,1.6264220749462814,1.627550944883132,1.6286805983480435,1.629811035884848,1.630942258037756,1.6320742653513551,1.633207058370611,1.6343406376408676,1.6354750037078474,1.636610157117652,1.637746098416761,1.638882828152035,1.6400203468707124,1.6411586551204125,1.6422977534491343,1.6434376424052575,1.6445783225375419,1.6457197943951285,1.6468620585275395,1.6480051154846784,1.6491489658168306,1.6502936100746628,1.6514390488092248,1.652585282571948,1.6537323119146472,1.6548801373895203,1.6560287595491476,1.6571781789464937,1.6583283961349067,1.6594794116681189,1.660631226100247,1.6617838399857918,1.6629372538796399,1.664091468337062,1.665246483913715,1.6664023011656413,1.6675589206492687,1.6687163429214118,1.6698745685392715,1.6710335980604354,1.6721934320428784,1.673354071044962,1.6745155156254357,1.6756777663434368,1.676840823758491,1.678004688430512,1.6791693609198017,1.6803348417870518,1.6815011315933426,1.6826682309001437,1.6838361402693152,1.685004860263106,1.6861743914441565,1.6873447343754964,1.6885158896205472,1.689687857743121,1.690860639307421,1.6920342348780426,1.6932086450199728,1.6943838702985905,1.6955599112796673,1.6967367685293673,1.6979144426142478,1.6990929341012593,1.7002722435577455,1.7014523715514445,1.7026333186504878,1.7038150854234013,1.704997672439106,1.7061810802669175,1.7073653094765466,1.7085503606380992,1.709736234322077,1.7109229310993783,1.7121104515412968,1.7132987962195236,1.7144879657061456,1.7156779605736476,1.716868781394911,1.718060428743216,1.7192529031922394,1.7204462053160567,1.721640335689142,1.7228352948863683,1.7240310834830073,1.7252277020547298,1.7264251511776063,1.7276234314281074,1.7288225433831037,1.730022487619866,1.7312232647160661,1.7324248752497764,1.7336273197994707,1.7348305989440242,1.7360347132627145,1.73723966333522,1.7384454497416229,1.739652073062407,1.7408595338784592,1.74206783277107,1.7432769703219329,1.7444869471131452,1.7456977637272084,1.7469094207470286,1.7481219187559158,1.7493352583375852,1.7505494400761572,1.7517644645561574,1.7529803323625177,1.7541970440805752,1.7554146002960738,1.7566330015951634,1.7578522485644017,1.7590723417907528,1.7602932818615882,1.761515069364687,1.7627377048882371,1.7639611890208335,1.7651855223514805,1.7664107054695912,1.7676367389649872,1.7688636234279003,1.7700913594489711,1.771319947619251,1.772549388530201,1.7737796827736931,1.7750108309420096,1.7762428336278442,1.7774756914243022,1.7787094049249002,1.7799439747235668,1.7811794014146427,1.7824156855928817,1.7836528278534496,1.7848908287919263,1.786129689004304,1.787369409086989,1.788609989636802,1.7898514312509772,1.791093734527164,1.7923369000634264,1.793580928458243,1.794825820310508,1.7960715762195325,1.7973181967850418,1.798565682607178,1.7998140342865008,1.8010632524239851,1.8023133376210243,1.803564290479428,1.8048161116014247,1.8060688015896604,1.807322361047199,1.8085767905775234,1.8098320907845353,1.8110882622725555,1.8123453056463243,1.8136032215110016,1.814862010472168,1.816121673135823,1.817382210108388,1.8186436219967053,1.8199059094080372,1.821169072950069,1.8224331132309064,1.8236980308590782,1.8249638264435353,1.826230500593651,1.8274980539192218,1.8287664870304674,1.8300358005380308,1.831305995052979,1.8325770711868037,1.83384902955142,1.8351218707591685,1.8363955954228144,1.8376702041555482,1.8389456975709864,1.8402220762831714,1.8414993409065707,1.84277749205608,1.8440565303470204,1.8453364563951407,1.8466172708166173,1.8478989742280538,1.8491815672464815,1.8504650504893612,1.8517494245745807,1.8530346901204582,1.8543208477457396,1.8556078980696014,1.8568958417116492,1.858184679291919,1.8594744114308772,1.8607650387494203,1.8620565618688765,1.8633489814110047,1.8646422979979955,1.8659365122524718,1.8672316247974876,1.8685276362565304,1.86982454725352,1.8711223584128094,1.8724210703591848,1.8737206837178662,1.875021199114507,1.8763226171751957,1.8776249385264552,1.8789281637952424,1.8802322936089504,1.8815373285954073,1.8828432693828772,1.8841501166000598,1.8854578708760916,1.8867665328405456,1.8880761031234317,1.8893865823551972,1.890697971166727,1.892010270189344,1.8933234800548089,1.8946376013953212,1.8959526348435192,1.8972685810324803,1.898585440595721,1.8999032141671979,1.9012219023813075,1.9025415058728865,1.9038620252772125,1.9051834612300034,1.9065058143674192,1.9078290853260609,1.9091532747429716,1.9104783832556367,1.911804411501983,1.9131313601203817,1.9144592297496459,1.9157880210290326,1.9171177345982424,1.9184483710974196,1.9197799311671533,1.9211124154484769,1.922445824582869,1.9237801592122532,1.9251154199789986,1.9264516075259204,1.9277887224962797,1.9291267655337843,1.9304657372825889,1.9318056383872948,1.933146469492951,1.9344882312450544,1.9358309242895495,1.9371745492728298,1.9385191068417367,1.9398645976435611,1.9412110223260426,1.942558381537371,1.9439066759261863,1.945255906141577,1.946606072833084,1.9479571766506985,1.9493092182448621,1.950662198266469,1.952016117366864,1.953370976197845,1.9547267754116617,1.9560835156610168,1.957441197599066,1.9587998218794178,1.9601593891561353,1.9615199000837351,1.962881355317188,1.9642437555119194,1.9656071013238097,1.9669713934091946,1.9683366324248655,1.9697028190280692,1.9710699538765089,1.9724380376283444,1.9738070709421924,1.9751770544771265,1.976547988892678,1.9779198748488356,1.9792927130060465,1.9806665040252158,1.982041248567708,1.983416947295346,1.9847936008704126,1.9861712099556494,1.9875497752142595,1.9889292973099046,1.9903097769067086,1.991691214669255,1.9930736112625893,1.9944569673522188,1.995841283604112,1.9972265606847006,1.9986127992608775,2.0],"x":[5.551115123125783e-17,0.0010010010010010565,0.0020020020020020575,0.003003003003003058,0.0040040040040040595,0.0050050050050050605,0.0060060060060060615,0.0070070070070070625,0.008008008008008063,0.009009009009009064,0.010010010010010065,0.011011011011011066,0.012012012012012067,0.013013013013013068,0.01401401401401407,0.01501501501501507,0.016016016016016068,0.01701701701701707,0.01801801801801807,0.019019019019019073,0.020020020020020072,0.021021021021021075,0.022022022022022074,0.023023023023023077,0.024024024024024076,0.02502502502502508,0.026026026026026078,0.02702702702702708,0.02802802802802808,0.029029029029029083,0.030030030030030082,0.031031031031031085,0.03203203203203209,0.033033033033033087,0.03403403403403409,0.03503503503503509,0.03603603603603609,0.03703703703703709,0.0380380380380381,0.039039039039039096,0.04004004004004009,0.04104104104104109,0.042042042042042094,0.04304304304304309,0.04404404404404409,0.04504504504504509,0.0460460460460461,0.0470470470470471,0.048048048048048096,0.049049049049049095,0.0500500500500501,0.0510510510510511,0.0520520520520521,0.0530530530530531,0.054054054054054106,0.055055055055055105,0.056056056056056104,0.0570570570570571,0.05805805805805811,0.05905905905905911,0.06006006006006011,0.061061061061061114,0.062062062062062114,0.06306306306306311,0.06406406406406412,0.06506506506506513,0.06606606606606612,0.06706706706706712,0.06806806806806813,0.06906906906906912,0.07007007007007013,0.07107107107107113,0.07207207207207213,0.07307307307307313,0.07407407407407413,0.07507507507507513,0.07607607607607614,0.07707707707707713,0.07807807807807814,0.07907907907907914,0.08008008008008013,0.08108108108108114,0.08208208208208213,0.08308308308308314,0.08408408408408415,0.08508508508508514,0.08608608608608614,0.08708708708708715,0.08808808808808814,0.08908908908908915,0.09009009009009014,0.09109109109109115,0.09209209209209215,0.09309309309309315,0.09409409409409415,0.09509509509509516,0.09609609609609615,0.09709709709709716,0.09809809809809815,0.09909909909909916,0.10010010010010016,0.10110110110110115,0.10210210210210216,0.10310310310310317,0.10410410410410414,0.10510510510510515,0.10610610610610614,0.10710710710710715,0.10810810810810816,0.10910910910910915,0.11011011011011015,0.11111111111111116,0.11211211211211215,0.11311311311311316,0.11411411411411415,0.11511511511511516,0.11611611611611616,0.11711711711711716,0.11811811811811816,0.11911911911911917,0.12012012012012016,0.12112112112112117,0.12212212212212216,0.12312312312312317,0.12412412412412417,0.12512512512512516,0.12612612612612617,0.12712712712712718,0.12812812812812818,0.1291291291291292,0.1301301301301302,0.1311311311311312,0.13213213213213218,0.13313313313313319,0.1341341341341342,0.1351351351351352,0.1361361361361362,0.13713713713713718,0.1381381381381382,0.1391391391391392,0.1401401401401402,0.1411411411411412,0.14214214214214219,0.1431431431431432,0.1441441441441442,0.1451451451451452,0.1461461461461462,0.14714714714714722,0.1481481481481482,0.1491491491491492,0.1501501501501502,0.15115115115115121,0.15215215215215222,0.1531531531531532,0.1541541541541542,0.1551551551551552,0.15615615615615622,0.15715715715715722,0.1581581581581582,0.1591591591591592,0.16016016016016021,0.16116116116116122,0.16216216216216223,0.16316316316316323,0.1641641641641642,0.16516516516516522,0.16616616616616622,0.16716716716716723,0.16816816816816824,0.16916916916916921,0.17017017017017022,0.17117117117117123,0.17217217217217223,0.17317317317317324,0.17417417417417422,0.17517517517517522,0.17617617617617623,0.17717717717717724,0.17817817817817824,0.17917917917917925,0.18018018018018023,0.18118118118118123,0.18218218218218224,0.18318318318318325,0.18418418418418425,0.18518518518518523,0.18618618618618624,0.18718718718718724,0.18818818818818825,0.18918918918918926,0.19019019019019023,0.19119119119119124,0.19219219219219225,0.19319319319319325,0.19419419419419426,0.19519519519519526,0.19619619619619624,0.19719719719719725,0.19819819819819826,0.19919919919919926,0.20020020020020027,0.20120120120120125,0.20220220220220225,0.20320320320320326,0.20420420420420426,0.20520520520520527,0.20620620620620625,0.20720720720720726,0.20820820820820826,0.20920920920920927,0.21021021021021027,0.21121121121121128,0.21221221221221226,0.21321321321321327,0.21421421421421427,0.21521521521521528,0.21621621621621628,0.21721721721721726,0.21821821821821827,0.21921921921921927,0.22022022022022028,0.2212212212212213,0.22222222222222227,0.22322322322322327,0.22422422422422428,0.22522522522522528,0.2262262262262263,0.2272272272272273,0.22822822822822827,0.22922922922922928,0.2302302302302303,0.2312312312312313,0.23223223223223227,0.23323323323323325,0.23423423423423426,0.23523523523523526,0.23623623623623627,0.23723723723723728,0.23823823823823825,0.23923923923923926,0.24024024024024027,0.24124124124124127,0.24224224224224228,0.24324324324324328,0.24424424424424426,0.24524524524524527,0.24624624624624628,0.24724724724724728,0.2482482482482483,0.24924924924924927,0.2502502502502503,0.2512512512512513,0.2522522522522523,0.25325325325325326,0.2542542542542543,0.2552552552552553,0.2562562562562563,0.2572572572572573,0.2582582582582583,0.2592592592592593,0.26026026026026033,0.2612612612612613,0.26226226226226235,0.2632632632632633,0.2642642642642643,0.26526526526526534,0.2662662662662663,0.26726726726726735,0.26826826826826833,0.2692692692692693,0.27027027027027034,0.2712712712712713,0.27227227227227235,0.27327327327327333,0.2742742742742743,0.27527527527527534,0.2762762762762763,0.27727727727727736,0.27827827827827833,0.2792792792792793,0.28028028028028035,0.2812812812812813,0.28228228228228236,0.28328328328328334,0.2842842842842843,0.28528528528528535,0.28628628628628633,0.28728728728728736,0.28828828828828834,0.2892892892892893,0.29029029029029035,0.29129129129129133,0.29229229229229237,0.29329329329329334,0.2942942942942944,0.29529529529529536,0.29629629629629634,0.29729729729729737,0.29829829829829835,0.2992992992992994,0.30030030030030036,0.30130130130130134,0.3023023023023024,0.30330330330330335,0.3043043043043044,0.30530530530530536,0.30630630630630634,0.3073073073073074,0.30830830830830835,0.3093093093093094,0.31031031031031037,0.31131131131131135,0.3123123123123124,0.31331331331331336,0.3143143143143144,0.31531531531531537,0.31631631631631635,0.3173173173173174,0.31831831831831836,0.3193193193193194,0.3203203203203204,0.32132132132132135,0.3223223223223224,0.32332332332332336,0.3243243243243244,0.3253253253253254,0.3263263263263264,0.3273273273273274,0.32832832832832837,0.3293293293293294,0.3303303303303304,0.3313313313313314,0.3323323323323324,0.33333333333333337,0.3343343343343344,0.3353353353353354,0.3363363363363364,0.3373373373373374,0.3383383383383384,0.3393393393393394,0.3403403403403404,0.3413413413413414,0.3423423423423424,0.3433433433433434,0.3443443443443444,0.3453453453453454,0.3463463463463464,0.3473473473473474,0.3483483483483484,0.3493493493493494,0.3503503503503504,0.3513513513513514,0.3523523523523524,0.3533533533533534,0.3543543543543544,0.3553553553553554,0.35635635635635643,0.3573573573573574,0.35835835835835844,0.3593593593593594,0.3603603603603604,0.36136136136136143,0.3623623623623624,0.36336336336336345,0.3643643643643644,0.3653653653653654,0.36636636636636644,0.3673673673673674,0.36836836836836845,0.3693693693693694,0.3703703703703704,0.37137137137137144,0.3723723723723724,0.37337337337337345,0.37437437437437443,0.3753753753753754,0.37637637637637644,0.3773773773773774,0.37837837837837845,0.37937937937937943,0.3803803803803804,0.38138138138138145,0.3823823823823824,0.38338338338338346,0.38438438438438444,0.3853853853853854,0.38638638638638645,0.3873873873873874,0.38838838838838846,0.38938938938938944,0.3903903903903905,0.39139139139139145,0.39239239239239243,0.39339339339339346,0.39439439439439444,0.3953953953953955,0.39639639639639646,0.39739739739739743,0.39839839839839847,0.39939939939939945,0.4004004004004005,0.40140140140140146,0.40240240240240244,0.40340340340340347,0.40440440440440445,0.4054054054054055,0.40640640640640646,0.40740740740740744,0.4084084084084085,0.40940940940940945,0.4104104104104105,0.41141141141141147,0.41241241241241244,0.4134134134134135,0.41441441441441446,0.4154154154154155,0.41641641641641647,0.41741741741741745,0.4184184184184185,0.41941941941941946,0.4204204204204205,0.42142142142142147,0.4224224224224225,0.4234234234234235,0.42442442442442446,0.4254254254254255,0.4264264264264265,0.4274274274274275,0.4284284284284285,0.42942942942942947,0.4304304304304305,0.4314314314314315,0.4324324324324325,0.4334334334334335,0.43443443443443447,0.4354354354354355,0.4364364364364365,0.4374374374374375,0.4384384384384385,0.43943943943943947,0.4404404404404405,0.4414414414414415,0.4424424424424425,0.4434434434434435,0.4444444444444445,0.4454454454454455,0.4464464464464465,0.4474474474474475,0.4484484484484485,0.44944944944944953,0.4504504504504505,0.4514514514514515,0.4524524524524525,0.4534534534534535,0.45445445445445454,0.4554554554554555,0.4564564564564565,0.45745745745745753,0.4584584584584585,0.45945945945945954,0.4604604604604605,0.4614614614614615,0.46246246246246253,0.4634634634634635,0.46446446446446454,0.4654654654654655,0.4664664664664665,0.46746746746746753,0.4684684684684685,0.46946946946946955,0.4704704704704705,0.4714714714714715,0.47247247247247254,0.4734734734734735,0.47447447447447455,0.47547547547547553,0.4764764764764765,0.47747747747747754,0.4784784784784785,0.47947947947947955,0.48048048048048053,0.48148148148148157,0.48248248248248254,0.4834834834834835,0.48448448448448456,0.48548548548548554,0.48648648648648657,0.4874874874874875,0.48848848848848847,0.4894894894894895,0.4904904904904905,0.4914914914914915,0.4924924924924925,0.4934934934934935,0.4944944944944945,0.4954954954954955,0.4964964964964965,0.4974974974974975,0.4984984984984985,0.4994994994994995,0.5005005005005005,0.5015015015015015,0.5025025025025025,0.5035035035035035,0.5045045045045045,0.5055055055055055,0.5065065065065065,0.5075075075075075,0.5085085085085085,0.5095095095095095,0.5105105105105106,0.5115115115115115,0.5125125125125125,0.5135135135135135,0.5145145145145145,0.5155155155155156,0.5165165165165165,0.5175175175175175,0.5185185185185185,0.5195195195195195,0.5205205205205206,0.5215215215215215,0.5225225225225225,0.5235235235235235,0.5245245245245245,0.5255255255255256,0.5265265265265265,0.5275275275275275,0.5285285285285285,0.5295295295295295,0.5305305305305306,0.5315315315315315,0.5325325325325325,0.5335335335335335,0.5345345345345346,0.5355355355355356,0.5365365365365365,0.5375375375375375,0.5385385385385385,0.5395395395395396,0.5405405405405406,0.5415415415415415,0.5425425425425425,0.5435435435435435,0.5445445445445446,0.5455455455455456,0.5465465465465466,0.5475475475475475,0.5485485485485485,0.5495495495495496,0.5505505505505506,0.5515515515515516,0.5525525525525525,0.5535535535535535,0.5545545545545546,0.5555555555555556,0.5565565565565566,0.5575575575575575,0.5585585585585585,0.5595595595595596,0.5605605605605606,0.5615615615615616,0.5625625625625625,0.5635635635635635,0.5645645645645646,0.5655655655655656,0.5665665665665666,0.5675675675675675,0.5685685685685685,0.5695695695695696,0.5705705705705706,0.5715715715715716,0.5725725725725725,0.5735735735735735,0.5745745745745746,0.5755755755755756,0.5765765765765766,0.5775775775775776,0.5785785785785785,0.5795795795795796,0.5805805805805806,0.5815815815815816,0.5825825825825826,0.5835835835835835,0.5845845845845846,0.5855855855855856,0.5865865865865866,0.5875875875875876,0.5885885885885885,0.5895895895895896,0.5905905905905906,0.5915915915915916,0.5925925925925926,0.5935935935935935,0.5945945945945946,0.5955955955955956,0.5965965965965966,0.5975975975975976,0.5985985985985987,0.5995995995995996,0.6006006006006006,0.6016016016016016,0.6026026026026026,0.6036036036036037,0.6046046046046046,0.6056056056056056,0.6066066066066066,0.6076076076076076,0.6086086086086087,0.6096096096096096,0.6106106106106106,0.6116116116116116,0.6126126126126126,0.6136136136136137,0.6146146146146146,0.6156156156156156,0.6166166166166166,0.6176176176176176,0.6186186186186187,0.6196196196196196,0.6206206206206206,0.6216216216216216,0.6226226226226226,0.6236236236236237,0.6246246246246246,0.6256256256256256,0.6266266266266266,0.6276276276276276,0.6286286286286287,0.6296296296296297,0.6306306306306306,0.6316316316316316,0.6326326326326326,0.6336336336336337,0.6346346346346347,0.6356356356356356,0.6366366366366366,0.6376376376376376,0.6386386386386387,0.6396396396396397,0.6406406406406406,0.6416416416416416,0.6426426426426426,0.6436436436436437,0.6446446446446447,0.6456456456456456,0.6466466466466466,0.6476476476476476,0.6486486486486487,0.6496496496496497,0.6506506506506506,0.6516516516516516,0.6526526526526526,0.6536536536536537,0.6546546546546547,0.6556556556556556,0.6566566566566566,0.6576576576576577,0.6586586586586587,0.6596596596596597,0.6606606606606606,0.6616616616616616,0.6626626626626627,0.6636636636636637,0.6646646646646647,0.6656656656656657,0.6666666666666666,0.6676676676676677,0.6686686686686687,0.6696696696696697,0.6706706706706707,0.6716716716716716,0.6726726726726727,0.6736736736736737,0.6746746746746747,0.6756756756756757,0.6766766766766766,0.6776776776776777,0.6786786786786787,0.6796796796796797,0.6806806806806807,0.6816816816816816,0.6826826826826827,0.6836836836836837,0.6846846846846847,0.6856856856856857,0.6866866866866866,0.6876876876876877,0.6886886886886887,0.6896896896896897,0.6906906906906907,0.6916916916916916,0.6926926926926927,0.6936936936936937,0.6946946946946947,0.6956956956956957,0.6966966966966966,0.6976976976976977,0.6986986986986987,0.6996996996996997,0.7007007007007007,0.7017017017017017,0.7027027027027027,0.7037037037037037,0.7047047047047047,0.7057057057057057,0.7067067067067067,0.7077077077077077,0.7087087087087087,0.7097097097097097,0.7107107107107107,0.7117117117117117,0.7127127127127127,0.7137137137137137,0.7147147147147147,0.7157157157157157,0.7167167167167167,0.7177177177177178,0.7187187187187187,0.7197197197197197,0.7207207207207207,0.7217217217217218,0.7227227227227228,0.7237237237237237,0.7247247247247247,0.7257257257257257,0.7267267267267268,0.7277277277277278,0.7287287287287287,0.7297297297297297,0.7307307307307307,0.7317317317317318,0.7327327327327328,0.7337337337337337,0.7347347347347347,0.7357357357357357,0.7367367367367368,0.7377377377377378,0.7387387387387387,0.7397397397397397,0.7407407407407407,0.7417417417417418,0.7427427427427428,0.7437437437437437,0.7447447447447447,0.7457457457457457,0.7467467467467468,0.7477477477477478,0.7487487487487487,0.7497497497497497,0.7507507507507507,0.7517517517517518,0.7527527527527528,0.7537537537537538,0.7547547547547547,0.7557557557557557,0.7567567567567568,0.7577577577577578,0.7587587587587588,0.7597597597597597,0.7607607607607607,0.7617617617617618,0.7627627627627628,0.7637637637637638,0.7647647647647647,0.7657657657657657,0.7667667667667668,0.7677677677677678,0.7687687687687688,0.7697697697697697,0.7707707707707707,0.7717717717717718,0.7727727727727728,0.7737737737737738,0.7747747747747747,0.7757757757757757,0.7767767767767768,0.7777777777777778,0.7787787787787788,0.7797797797797797,0.7807807807807807,0.7817817817817818,0.7827827827827828,0.7837837837837838,0.7847847847847848,0.7857857857857858,0.7867867867867868,0.7877877877877878,0.7887887887887888,0.7897897897897898,0.7907907907907908,0.7917917917917918,0.7927927927927928,0.7937937937937938,0.7947947947947948,0.7957957957957958,0.7967967967967968,0.7977977977977978,0.7987987987987988,0.7997997997997998,0.8008008008008008,0.8018018018018018,0.8028028028028028,0.8038038038038038,0.8048048048048048,0.8058058058058059,0.8068068068068068,0.8078078078078078,0.8088088088088088,0.8098098098098098,0.8108108108108109,0.8118118118118118,0.8128128128128128,0.8138138138138138,0.8148148148148148,0.8158158158158159,0.8168168168168168,0.8178178178178178,0.8188188188188188,0.8198198198198198,0.8208208208208209,0.8218218218218218,0.8228228228228228,0.8238238238238238,0.8248248248248248,0.8258258258258259,0.8268268268268268,0.8278278278278278,0.8288288288288288,0.8298298298298298,0.8308308308308309,0.8318318318318318,0.8328328328328328,0.8338338338338338,0.8348348348348348,0.8358358358358359,0.8368368368368369,0.8378378378378378,0.8388388388388388,0.8398398398398398,0.8408408408408409,0.8418418418418419,0.8428428428428428,0.8438438438438438,0.8448448448448449,0.8458458458458459,0.8468468468468469,0.8478478478478478,0.8488488488488488,0.8498498498498499,0.8508508508508509,0.8518518518518519,0.8528528528528528,0.8538538538538538,0.8548548548548549,0.8558558558558559,0.8568568568568569,0.8578578578578578,0.8588588588588588,0.8598598598598599,0.8608608608608609,0.8618618618618619,0.8628628628628628,0.8638638638638638,0.8648648648648649,0.8658658658658659,0.8668668668668669,0.8678678678678678,0.8688688688688688,0.8698698698698699,0.8708708708708709,0.8718718718718719,0.8728728728728729,0.8738738738738738,0.8748748748748749,0.8758758758758759,0.8768768768768769,0.8778778778778779,0.8788788788788788,0.8798798798798799,0.8808808808808809,0.8818818818818819,0.8828828828828829,0.8838838838838838,0.8848848848848849,0.8858858858858859,0.8868868868868869,0.8878878878878879,0.8888888888888888,0.8898898898898899,0.8908908908908909,0.8918918918918919,0.8928928928928929,0.8938938938938938,0.8948948948948949,0.8958958958958959,0.8968968968968969,0.8978978978978979,0.8988988988988988,0.8998998998998999,0.9009009009009009,0.9019019019019019,0.9029029029029029,0.9039039039039038,0.9049049049049049,0.9059059059059059,0.9069069069069069,0.9079079079079079,0.908908908908909,0.9099099099099099,0.9109109109109109,0.9119119119119119,0.9129129129129129,0.913913913913914,0.914914914914915,0.9159159159159159,0.9169169169169169,0.9179179179179179,0.918918918918919,0.91991991991992,0.9209209209209209,0.9219219219219219,0.9229229229229229,0.923923923923924,0.924924924924925,0.9259259259259259,0.9269269269269269,0.9279279279279279,0.928928928928929,0.92992992992993,0.9309309309309309,0.9319319319319319,0.9329329329329329,0.933933933933934,0.934934934934935,0.9359359359359359,0.9369369369369369,0.9379379379379379,0.938938938938939,0.93993993993994,0.9409409409409409,0.9419419419419419,0.9429429429429429,0.943943943943944,0.944944944944945,0.9459459459459459,0.9469469469469469,0.9479479479479479,0.948948948948949,0.94994994994995,0.950950950950951,0.9519519519519519,0.9529529529529529,0.953953953953954,0.954954954954955,0.955955955955956,0.9569569569569569,0.9579579579579579,0.958958958958959,0.95995995995996,0.960960960960961,0.9619619619619619,0.9629629629629629,0.963963963963964,0.964964964964965,0.965965965965966,0.9669669669669669,0.9679679679679679,0.968968968968969,0.96996996996997,0.970970970970971,0.9719719719719719,0.972972972972973,0.973973973973974,0.974974974974975,0.975975975975976,0.9769769769769769,0.977977977977978,0.978978978978979,0.97997997997998,0.980980980980981,0.9819819819819819,0.982982982982983,0.983983983983984,0.984984984984985,0.985985985985986,0.986986986986987,0.987987987987988,0.988988988988989,0.98998998998999,0.990990990990991,0.991991991991992,0.992992992992993,0.993993993993994,0.994994994994995,0.995995995995996,0.996996996996997,0.997997997997998,0.998998998998999,1.0]}
},{}],18:[function(require,module,exports){
module.exports={"expected":[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0],"x":[-5.551115123125783e-17,-5.5400017795359415e-17,-5.5288884359461e-17,-5.5177750923562586e-17,-5.506661748766417e-17,-5.4955484051765757e-17,-5.4844350615867345e-17,-5.473321717996893e-17,-5.4622083744070516e-17,-5.45109503081721e-17,-5.4399816872273687e-17,-5.4288683436375275e-17,-5.417755000047686e-17,-5.4066416564578446e-17,-5.395528312868003e-17,-5.3844149692781617e-17,-5.37330162568832e-17,-5.362188282098479e-17,-5.3510749385086376e-17,-5.339961594918796e-17,-5.3288482513289546e-17,-5.317734907739113e-17,-5.306621564149272e-17,-5.2955082205594306e-17,-5.284394876969589e-17,-5.2732815333797476e-17,-5.262168189789906e-17,-5.251054846200065e-17,-5.2399415026102235e-17,-5.228828159020382e-17,-5.2177148154305406e-17,-5.206601471840699e-17,-5.1954881282508577e-17,-5.1843747846610165e-17,-5.173261441071175e-17,-5.1621480974813336e-17,-5.151034753891492e-17,-5.1399214103016507e-17,-5.1288080667118095e-17,-5.117694723121968e-17,-5.1065813795321266e-17,-5.095468035942285e-17,-5.0843546923524437e-17,-5.0732413487626025e-17,-5.062128005172761e-17,-5.0510146615829196e-17,-5.039901317993078e-17,-5.0287879744032366e-17,-5.017674630813395e-17,-5.006561287223554e-17,-4.9954479436337126e-17,-4.984334600043871e-17,-4.9732212564540296e-17,-4.962107912864188e-17,-4.950994569274347e-17,-4.9398812256845055e-17,-4.928767882094664e-17,-4.9176545385048226e-17,-4.906541194914981e-17,-4.8954278513251397e-17,-4.8843145077352985e-17,-4.873201164145457e-17,-4.8620878205556156e-17,-4.850974476965774e-17,-4.8398611333759327e-17,-4.8287477897860915e-17,-4.81763444619625e-17,-4.8065211026064086e-17,-4.795407759016567e-17,-4.7842944154267257e-17,-4.7731810718368845e-17,-4.762067728247043e-17,-4.7509543846572016e-17,-4.73984104106736e-17,-4.7287276974775186e-17,-4.7176143538876775e-17,-4.706501010297836e-17,-4.6953876667079946e-17,-4.684274323118153e-17,-4.6731609795283116e-17,-4.66204763593847e-17,-4.650934292348629e-17,-4.6398209487587875e-17,-4.628707605168946e-17,-4.6175942615791046e-17,-4.606480917989263e-17,-4.5953675743994217e-17,-4.5842542308095805e-17,-4.573140887219739e-17,-4.5620275436298976e-17,-4.550914200040056e-17,-4.5398008564502147e-17,-4.5286875128603735e-17,-4.517574169270532e-17,-4.5064608256806906e-17,-4.495347482090849e-17,-4.4842341385010077e-17,-4.4731207949111665e-17,-4.462007451321325e-17,-4.4508941077314836e-17,-4.439780764141642e-17,-4.4286674205518006e-17,-4.4175540769619595e-17,-4.406440733372118e-17,-4.3953273897822766e-17,-4.384214046192435e-17,-4.3731007026025936e-17,-4.3619873590127525e-17,-4.350874015422911e-17,-4.3397606718330695e-17,-4.328647328243228e-17,-4.3175339846533866e-17,-4.306420641063545e-17,-4.2953072974737037e-17,-4.2841939538838625e-17,-4.273080610294021e-17,-4.2619672667041796e-17,-4.250853923114338e-17,-4.2397405795244967e-17,-4.2286272359346555e-17,-4.217513892344814e-17,-4.2064005487549726e-17,-4.195287205165131e-17,-4.1841738615752897e-17,-4.1730605179854485e-17,-4.161947174395607e-17,-4.1508338308057656e-17,-4.139720487215924e-17,-4.1286071436260826e-17,-4.1174938000362415e-17,-4.1063804564464e-17,-4.0952671128565586e-17,-4.084153769266717e-17,-4.0730404256768756e-17,-4.0619270820870345e-17,-4.050813738497193e-17,-4.0397003949073515e-17,-4.02858705131751e-17,-4.0174737077276686e-17,-4.0063603641378275e-17,-3.9952470205479857e-17,-3.9841336769581445e-17,-3.973020333368303e-17,-3.9619069897784616e-17,-3.95079364618862e-17,-3.9396803025987787e-17,-3.9285669590089375e-17,-3.917453615419096e-17,-3.9063402718292546e-17,-3.895226928239413e-17,-3.8841135846495717e-17,-3.8730002410597305e-17,-3.861886897469889e-17,-3.8507735538800476e-17,-3.839660210290206e-17,-3.8285468667003646e-17,-3.8174335231105235e-17,-3.806320179520682e-17,-3.7952068359308406e-17,-3.784093492340999e-17,-3.7729801487511576e-17,-3.7618668051613165e-17,-3.750753461571475e-17,-3.7396401179816335e-17,-3.728526774391792e-17,-3.7174134308019506e-17,-3.7063000872121095e-17,-3.6951867436222677e-17,-3.6840734000324265e-17,-3.672960056442585e-17,-3.6618467128527436e-17,-3.6507333692629024e-17,-3.6396200256730607e-17,-3.6285066820832195e-17,-3.617393338493378e-17,-3.6062799949035366e-17,-3.595166651313695e-17,-3.5840533077238537e-17,-3.5729399641340125e-17,-3.561826620544171e-17,-3.5507132769543296e-17,-3.539599933364488e-17,-3.5284865897746466e-17,-3.5173732461848055e-17,-3.506259902594964e-17,-3.4951465590051226e-17,-3.484033215415281e-17,-3.4729198718254396e-17,-3.4618065282355985e-17,-3.450693184645757e-17,-3.4395798410559155e-17,-3.428466497466074e-17,-3.4173531538762326e-17,-3.4062398102863915e-17,-3.3951264666965497e-17,-3.3840131231067085e-17,-3.372899779516867e-17,-3.3617864359270256e-17,-3.3506730923371844e-17,-3.3395597487473427e-17,-3.3284464051575015e-17,-3.31733306156766e-17,-3.3062197179778186e-17,-3.295106374387977e-17,-3.2839930307981357e-17,-3.2728796872082945e-17,-3.261766343618453e-17,-3.2506530000286116e-17,-3.23953965643877e-17,-3.2284263128489286e-17,-3.2173129692590875e-17,-3.206199625669246e-17,-3.1950862820794046e-17,-3.183972938489563e-17,-3.1728595948997216e-17,-3.1617462513098805e-17,-3.150632907720039e-17,-3.1395195641301975e-17,-3.128406220540356e-17,-3.1172928769505146e-17,-3.1061795333606735e-17,-3.0950661897708317e-17,-3.0839528461809905e-17,-3.072839502591149e-17,-3.0617261590013076e-17,-3.0506128154114664e-17,-3.0394994718216247e-17,-3.0283861282317835e-17,-3.017272784641942e-17,-3.0061594410521006e-17,-2.9950460974622594e-17,-2.9839327538724177e-17,-2.9728194102825765e-17,-2.961706066692735e-17,-2.9505927231028936e-17,-2.939479379513052e-17,-2.9283660359232106e-17,-2.9172526923333695e-17,-2.906139348743528e-17,-2.8950260051536866e-17,-2.883912661563845e-17,-2.8727993179740036e-17,-2.8616859743841625e-17,-2.850572630794321e-17,-2.8394592872044795e-17,-2.828345943614638e-17,-2.8172326000247966e-17,-2.8061192564349555e-17,-2.7950059128451137e-17,-2.7838925692552725e-17,-2.772779225665431e-17,-2.7616658820755896e-17,-2.750552538485748e-17,-2.7394391948959067e-17,-2.7283258513060655e-17,-2.717212507716224e-17,-2.7060991641263826e-17,-2.694985820536541e-17,-2.6838724769466997e-17,-2.6727591333568582e-17,-2.661645789767017e-17,-2.6505324461771756e-17,-2.639419102587334e-17,-2.6283057589974926e-17,-2.6171924154076512e-17,-2.60607907181781e-17,-2.5949657282279686e-17,-2.583852384638127e-17,-2.5727390410482856e-17,-2.5616256974584442e-17,-2.550512353868603e-17,-2.5393990102787615e-17,-2.52828566668892e-17,-2.5171723230990786e-17,-2.506058979509237e-17,-2.4949456359193957e-17,-2.4838322923295545e-17,-2.472718948739713e-17,-2.4616056051498716e-17,-2.45049226156003e-17,-2.4393789179701887e-17,-2.4282655743803475e-17,-2.417152230790506e-17,-2.4060388872006646e-17,-2.394925543610823e-17,-2.3838122000209817e-17,-2.3726988564311405e-17,-2.361585512841299e-17,-2.3504721692514576e-17,-2.339358825661616e-17,-2.3282454820717746e-17,-2.3171321384819332e-17,-2.306018794892092e-17,-2.2949054513022506e-17,-2.283792107712409e-17,-2.2726787641225676e-17,-2.2615654205327262e-17,-2.250452076942885e-17,-2.2393387333530435e-17,-2.228225389763202e-17,-2.2171120461733606e-17,-2.205998702583519e-17,-2.194885358993678e-17,-2.1837720154038365e-17,-2.172658671813995e-17,-2.1615453282241536e-17,-2.150431984634312e-17,-2.1393186410444707e-17,-2.1282052974546295e-17,-2.117091953864788e-17,-2.1059786102749466e-17,-2.094865266685105e-17,-2.0837519230952637e-17,-2.0726385795054225e-17,-2.061525235915581e-17,-2.0504118923257396e-17,-2.039298548735898e-17,-2.0281852051460566e-17,-2.0170718615562155e-17,-2.005958517966374e-17,-1.9948451743765326e-17,-1.983731830786691e-17,-1.9726184871968496e-17,-1.9615051436070082e-17,-1.950391800017167e-17,-1.9392784564273255e-17,-1.928165112837484e-17,-1.9170517692476426e-17,-1.905938425657801e-17,-1.89482508206796e-17,-1.8837117384781185e-17,-1.872598394888277e-17,-1.8614850512984356e-17,-1.850371707708594e-17,-1.839258364118753e-17,-1.8281450205289115e-17,-1.81703167693907e-17,-1.8059183333492286e-17,-1.794804989759387e-17,-1.7836916461695457e-17,-1.7725783025797045e-17,-1.761464958989863e-17,-1.7503516154000216e-17,-1.73923827181018e-17,-1.7281249282203386e-17,-1.7170115846304975e-17,-1.705898241040656e-17,-1.6947848974508146e-17,-1.683671553860973e-17,-1.6725582102711316e-17,-1.6614448666812905e-17,-1.650331523091449e-17,-1.6392181795016075e-17,-1.628104835911766e-17,-1.6169914923219246e-17,-1.605878148732083e-17,-1.594764805142242e-17,-1.5836514615524005e-17,-1.572538117962559e-17,-1.5614247743727176e-17,-1.550311430782876e-17,-1.539198087193035e-17,-1.5280847436031935e-17,-1.516971400013352e-17,-1.5058580564235106e-17,-1.494744712833669e-17,-1.483631369243828e-17,-1.4725180256539865e-17,-1.461404682064145e-17,-1.4502913384743036e-17,-1.439177994884462e-17,-1.4280646512946206e-17,-1.4169513077047795e-17,-1.405837964114938e-17,-1.3947246205250966e-17,-1.3836112769352551e-17,-1.3724979333454138e-17,-1.3613845897555723e-17,-1.350271246165731e-17,-1.3391579025758895e-17,-1.328044558986048e-17,-1.3169312153962068e-17,-1.3058178718063653e-17,-1.2947045282165238e-17,-1.2835911846266825e-17,-1.272477841036841e-17,-1.2613644974469997e-17,-1.2502511538571583e-17,-1.2391378102673168e-17,-1.2280244666774755e-17,-1.216911123087634e-17,-1.2057977794977926e-17,-1.1946844359079513e-17,-1.1835710923181098e-17,-1.1724577487282685e-17,-1.161344405138427e-17,-1.1502310615485856e-17,-1.1391177179587443e-17,-1.1280043743689028e-17,-1.1168910307790613e-17,-1.10577768718922e-17,-1.0946643435993786e-17,-1.0835510000095371e-17,-1.0724376564196958e-17,-1.0613243128298543e-17,-1.050210969240013e-17,-1.0390976256501715e-17,-1.02798428206033e-17,-1.0168709384704888e-17,-1.0057575948806473e-17,-9.946442512908058e-18,-9.835309077009645e-18,-9.72417564111123e-18,-9.613042205212817e-18,-9.501908769314403e-18,-9.390775333415988e-18,-9.279641897517575e-18,-9.16850846161916e-18,-9.057375025720746e-18,-8.946241589822333e-18,-8.835108153923918e-18,-8.723974718025505e-18,-8.61284128212709e-18,-8.501707846228676e-18,-8.390574410330263e-18,-8.279440974431848e-18,-8.168307538533433e-18,-8.05717410263502e-18,-7.946040666736606e-18,-7.834907230838192e-18,-7.723773794939778e-18,-7.612640359041363e-18,-7.50150692314295e-18,-7.390373487244535e-18,-7.27924005134612e-18,-7.168106615447708e-18,-7.056973179549293e-18,-6.94583974365088e-18,-6.834706307752465e-18,-6.723572871854051e-18,-6.612439435955637e-18,-6.501306000057223e-18,-6.390172564158809e-18,-6.279039128260395e-18,-6.1679056923619804e-18,-6.0567722564635666e-18,-5.945638820565153e-18,-5.834505384666739e-18,-5.723371948768324e-18,-5.61223851286991e-18,-5.5011050769714964e-18,-5.3899716410730825e-18,-5.278838205174668e-18,-5.167704769276254e-18,-5.05657133337784e-18,-4.945437897479426e-18,-4.834304461581012e-18,-4.723171025682598e-18,-4.612037589784184e-18,-4.50090415388577e-18,-4.389770717987355e-18,-4.2786372820889415e-18,-4.1675038461905276e-18,-4.056370410292114e-18,-3.945236974393699e-18,-3.834103538495285e-18,-3.722970102596871e-18,-3.6118366666984575e-18,-3.500703230800043e-18,-3.389569794901629e-18,-3.278436359003215e-18,-3.167302923104801e-18,-3.056169487206387e-18,-2.9450360513079727e-18,-2.833902615409559e-18,-2.7227691795111445e-18,-2.6116357436127307e-18,-2.5005023077143164e-18,-2.3893688718159025e-18,-2.2782354359174883e-18,-2.1671020000190744e-18,-2.05596856412066e-18,-1.9448351282222463e-18,-1.833701692323832e-18,-1.7225682564254181e-18,-1.611434820527004e-18,-1.50030138462859e-18,-1.389167948730176e-18,-1.2780345128317619e-18,-1.1669010769333478e-18,-1.0557676410349337e-18,-9.446342051365197e-19,-8.335007692381055e-19,-7.223673333396914e-19,-6.112338974412774e-19,-5.001004615428633e-19,-3.8896702564444924e-19,-2.7783358974603517e-19,-1.667001538476211e-19,-5.556671794920703e-20,5.556671794920703e-20,1.667001538476211e-19,2.7783358974603517e-19,3.8896702564444924e-19,5.001004615428633e-19,6.112338974412774e-19,7.223673333396914e-19,8.335007692381055e-19,9.446342051365197e-19,1.0557676410349337e-18,1.1669010769333478e-18,1.2780345128317619e-18,1.389167948730176e-18,1.50030138462859e-18,1.611434820527004e-18,1.7225682564254181e-18,1.833701692323832e-18,1.9448351282222463e-18,2.05596856412066e-18,2.1671020000190744e-18,2.2782354359174883e-18,2.3893688718159025e-18,2.5005023077143164e-18,2.6116357436127307e-18,2.7227691795111445e-18,2.833902615409559e-18,2.9450360513079727e-18,3.056169487206387e-18,3.167302923104801e-18,3.278436359003215e-18,3.389569794901629e-18,3.500703230800043e-18,3.6118366666984575e-18,3.722970102596871e-18,3.834103538495285e-18,3.945236974393699e-18,4.056370410292114e-18,4.1675038461905276e-18,4.2786372820889415e-18,4.389770717987355e-18,4.50090415388577e-18,4.612037589784184e-18,4.723171025682598e-18,4.834304461581012e-18,4.945437897479426e-18,5.05657133337784e-18,5.167704769276254e-18,5.278838205174668e-18,5.3899716410730825e-18,5.5011050769714964e-18,5.61223851286991e-18,5.723371948768324e-18,5.834505384666739e-18,5.945638820565153e-18,6.0567722564635666e-18,6.1679056923619804e-18,6.279039128260395e-18,6.390172564158809e-18,6.501306000057223e-18,6.612439435955637e-18,6.723572871854051e-18,6.834706307752465e-18,6.94583974365088e-18,7.056973179549293e-18,7.168106615447708e-18,7.27924005134612e-18,7.390373487244535e-18,7.50150692314295e-18,7.612640359041363e-18,7.723773794939778e-18,7.834907230838192e-18,7.946040666736606e-18,8.05717410263502e-18,8.168307538533433e-18,8.279440974431848e-18,8.390574410330263e-18,8.501707846228676e-18,8.61284128212709e-18,8.723974718025505e-18,8.835108153923918e-18,8.946241589822333e-18,9.057375025720746e-18,9.16850846161916e-18,9.279641897517575e-18,9.390775333415988e-18,9.501908769314403e-18,9.613042205212817e-18,9.72417564111123e-18,9.835309077009645e-18,9.946442512908058e-18,1.0057575948806473e-17,1.0168709384704888e-17,1.02798428206033e-17,1.0390976256501715e-17,1.050210969240013e-17,1.0613243128298543e-17,1.0724376564196958e-17,1.0835510000095371e-17,1.0946643435993786e-17,1.10577768718922e-17,1.1168910307790613e-17,1.1280043743689028e-17,1.1391177179587443e-17,1.1502310615485856e-17,1.161344405138427e-17,1.1724577487282685e-17,1.1835710923181098e-17,1.1946844359079513e-17,1.2057977794977926e-17,1.216911123087634e-17,1.2280244666774755e-17,1.2391378102673168e-17,1.2502511538571583e-17,1.2613644974469997e-17,1.272477841036841e-17,1.2835911846266825e-17,1.2947045282165238e-17,1.3058178718063653e-17,1.3169312153962068e-17,1.328044558986048e-17,1.3391579025758895e-17,1.350271246165731e-17,1.3613845897555723e-17,1.3724979333454138e-17,1.3836112769352551e-17,1.3947246205250966e-17,1.405837964114938e-17,1.4169513077047795e-17,1.4280646512946206e-17,1.439177994884462e-17,1.4502913384743036e-17,1.461404682064145e-17,1.4725180256539865e-17,1.483631369243828e-17,1.494744712833669e-17,1.5058580564235106e-17,1.516971400013352e-17,1.5280847436031935e-17,1.539198087193035e-17,1.550311430782876e-17,1.5614247743727176e-17,1.572538117962559e-17,1.5836514615524005e-17,1.594764805142242e-17,1.605878148732083e-17,1.6169914923219246e-17,1.628104835911766e-17,1.6392181795016075e-17,1.650331523091449e-17,1.6614448666812905e-17,1.6725582102711316e-17,1.683671553860973e-17,1.6947848974508146e-17,1.705898241040656e-17,1.7170115846304975e-17,1.7281249282203386e-17,1.73923827181018e-17,1.7503516154000216e-17,1.761464958989863e-17,1.7725783025797045e-17,1.7836916461695457e-17,1.794804989759387e-17,1.8059183333492286e-17,1.81703167693907e-17,1.8281450205289115e-17,1.839258364118753e-17,1.850371707708594e-17,1.8614850512984356e-17,1.872598394888277e-17,1.8837117384781185e-17,1.89482508206796e-17,1.905938425657801e-17,1.9170517692476426e-17,1.928165112837484e-17,1.9392784564273255e-17,1.950391800017167e-17,1.9615051436070082e-17,1.9726184871968496e-17,1.983731830786691e-17,1.9948451743765326e-17,2.005958517966374e-17,2.0170718615562155e-17,2.0281852051460566e-17,2.039298548735898e-17,2.0504118923257396e-17,2.061525235915581e-17,2.0726385795054225e-17,2.0837519230952637e-17,2.094865266685105e-17,2.1059786102749466e-17,2.117091953864788e-17,2.1282052974546295e-17,2.1393186410444707e-17,2.150431984634312e-17,2.1615453282241536e-17,2.172658671813995e-17,2.1837720154038365e-17,2.194885358993678e-17,2.205998702583519e-17,2.2171120461733606e-17,2.228225389763202e-17,2.2393387333530435e-17,2.250452076942885e-17,2.2615654205327262e-17,2.2726787641225676e-17,2.283792107712409e-17,2.2949054513022506e-17,2.306018794892092e-17,2.3171321384819332e-17,2.3282454820717746e-17,2.339358825661616e-17,2.3504721692514576e-17,2.361585512841299e-17,2.3726988564311405e-17,2.3838122000209817e-17,2.394925543610823e-17,2.4060388872006646e-17,2.417152230790506e-17,2.4282655743803475e-17,2.4393789179701887e-17,2.45049226156003e-17,2.4616056051498716e-17,2.472718948739713e-17,2.4838322923295545e-17,2.4949456359193957e-17,2.506058979509237e-17,2.5171723230990786e-17,2.52828566668892e-17,2.5393990102787615e-17,2.550512353868603e-17,2.5616256974584442e-17,2.5727390410482856e-17,2.583852384638127e-17,2.5949657282279686e-17,2.60607907181781e-17,2.6171924154076512e-17,2.6283057589974926e-17,2.639419102587334e-17,2.6505324461771756e-17,2.661645789767017e-17,2.6727591333568582e-17,2.6838724769466997e-17,2.694985820536541e-17,2.7060991641263826e-17,2.717212507716224e-17,2.7283258513060655e-17,2.7394391948959067e-17,2.750552538485748e-17,2.7616658820755896e-17,2.772779225665431e-17,2.7838925692552725e-17,2.7950059128451137e-17,2.8061192564349555e-17,2.8172326000247966e-17,2.828345943614638e-17,2.8394592872044795e-17,2.850572630794321e-17,2.8616859743841625e-17,2.8727993179740036e-17,2.883912661563845e-17,2.8950260051536866e-17,2.906139348743528e-17,2.9172526923333695e-17,2.9283660359232106e-17,2.939479379513052e-17,2.9505927231028936e-17,2.961706066692735e-17,2.9728194102825765e-17,2.9839327538724177e-17,2.9950460974622594e-17,3.0061594410521006e-17,3.017272784641942e-17,3.0283861282317835e-17,3.0394994718216247e-17,3.0506128154114664e-17,3.0617261590013076e-17,3.072839502591149e-17,3.0839528461809905e-17,3.0950661897708317e-17,3.1061795333606735e-17,3.1172928769505146e-17,3.128406220540356e-17,3.1395195641301975e-17,3.150632907720039e-17,3.1617462513098805e-17,3.1728595948997216e-17,3.183972938489563e-17,3.1950862820794046e-17,3.206199625669246e-17,3.2173129692590875e-17,3.2284263128489286e-17,3.23953965643877e-17,3.2506530000286116e-17,3.261766343618453e-17,3.2728796872082945e-17,3.2839930307981357e-17,3.295106374387977e-17,3.3062197179778186e-17,3.31733306156766e-17,3.3284464051575015e-17,3.3395597487473427e-17,3.3506730923371844e-17,3.3617864359270256e-17,3.372899779516867e-17,3.3840131231067085e-17,3.3951264666965497e-17,3.4062398102863915e-17,3.4173531538762326e-17,3.428466497466074e-17,3.4395798410559155e-17,3.450693184645757e-17,3.4618065282355985e-17,3.4729198718254396e-17,3.484033215415281e-17,3.4951465590051226e-17,3.506259902594964e-17,3.5173732461848055e-17,3.5284865897746466e-17,3.539599933364488e-17,3.5507132769543296e-17,3.561826620544171e-17,3.5729399641340125e-17,3.5840533077238537e-17,3.595166651313695e-17,3.6062799949035366e-17,3.617393338493378e-17,3.6285066820832195e-17,3.6396200256730607e-17,3.6507333692629024e-17,3.6618467128527436e-17,3.672960056442585e-17,3.6840734000324265e-17,3.6951867436222677e-17,3.7063000872121095e-17,3.7174134308019506e-17,3.728526774391792e-17,3.7396401179816335e-17,3.750753461571475e-17,3.7618668051613165e-17,3.7729801487511576e-17,3.784093492340999e-17,3.7952068359308406e-17,3.806320179520682e-17,3.8174335231105235e-17,3.8285468667003646e-17,3.839660210290206e-17,3.8507735538800476e-17,3.861886897469889e-17,3.8730002410597305e-17,3.8841135846495717e-17,3.895226928239413e-17,3.9063402718292546e-17,3.917453615419096e-17,3.9285669590089375e-17,3.9396803025987787e-17,3.95079364618862e-17,3.9619069897784616e-17,3.973020333368303e-17,3.9841336769581445e-17,3.9952470205479857e-17,4.0063603641378275e-17,4.0174737077276686e-17,4.02858705131751e-17,4.0397003949073515e-17,4.050813738497193e-17,4.0619270820870345e-17,4.0730404256768756e-17,4.084153769266717e-17,4.0952671128565586e-17,4.1063804564464e-17,4.1174938000362415e-17,4.1286071436260826e-17,4.139720487215924e-17,4.1508338308057656e-17,4.161947174395607e-17,4.1730605179854485e-17,4.1841738615752897e-17,4.195287205165131e-17,4.2064005487549726e-17,4.217513892344814e-17,4.2286272359346555e-17,4.2397405795244967e-17,4.250853923114338e-17,4.2619672667041796e-17,4.273080610294021e-17,4.2841939538838625e-17,4.2953072974737037e-17,4.306420641063545e-17,4.3175339846533866e-17,4.328647328243228e-17,4.3397606718330695e-17,4.350874015422911e-17,4.3619873590127525e-17,4.3731007026025936e-17,4.384214046192435e-17,4.3953273897822766e-17,4.406440733372118e-17,4.4175540769619595e-17,4.4286674205518006e-17,4.439780764141642e-17,4.4508941077314836e-17,4.462007451321325e-17,4.4731207949111665e-17,4.4842341385010077e-17,4.495347482090849e-17,4.5064608256806906e-17,4.517574169270532e-17,4.5286875128603735e-17,4.5398008564502147e-17,4.550914200040056e-17,4.5620275436298976e-17,4.573140887219739e-17,4.5842542308095805e-17,4.5953675743994217e-17,4.606480917989263e-17,4.6175942615791046e-17,4.628707605168946e-17,4.6398209487587875e-17,4.650934292348629e-17,4.66204763593847e-17,4.6731609795283116e-17,4.684274323118153e-17,4.6953876667079946e-17,4.706501010297836e-17,4.7176143538876775e-17,4.7287276974775186e-17,4.73984104106736e-17,4.7509543846572016e-17,4.762067728247043e-17,4.7731810718368845e-17,4.7842944154267257e-17,4.795407759016567e-17,4.8065211026064086e-17,4.81763444619625e-17,4.8287477897860915e-17,4.8398611333759327e-17,4.850974476965774e-17,4.8620878205556156e-17,4.873201164145457e-17,4.8843145077352985e-17,4.8954278513251397e-17,4.906541194914981e-17,4.9176545385048226e-17,4.928767882094664e-17,4.9398812256845055e-17,4.950994569274347e-17,4.962107912864188e-17,4.9732212564540296e-17,4.984334600043871e-17,4.9954479436337126e-17,5.006561287223554e-17,5.017674630813395e-17,5.0287879744032366e-17,5.039901317993078e-17,5.0510146615829196e-17,5.062128005172761e-17,5.0732413487626025e-17,5.0843546923524437e-17,5.095468035942285e-17,5.1065813795321266e-17,5.117694723121968e-17,5.1288080667118095e-17,5.1399214103016507e-17,5.151034753891492e-17,5.1621480974813336e-17,5.173261441071175e-17,5.1843747846610165e-17,5.1954881282508577e-17,5.206601471840699e-17,5.2177148154305406e-17,5.228828159020382e-17,5.2399415026102235e-17,5.251054846200065e-17,5.262168189789906e-17,5.2732815333797476e-17,5.284394876969589e-17,5.2955082205594306e-17,5.306621564149272e-17,5.317734907739113e-17,5.3288482513289546e-17,5.339961594918796e-17,5.3510749385086376e-17,5.362188282098479e-17,5.37330162568832e-17,5.3844149692781617e-17,5.395528312868003e-17,5.4066416564578446e-17,5.417755000047686e-17,5.4288683436375275e-17,5.4399816872273687e-17,5.45109503081721e-17,5.4622083744070516e-17,5.473321717996893e-17,5.4844350615867345e-17,5.4955484051765757e-17,5.506661748766417e-17,5.5177750923562586e-17,5.5288884359461e-17,5.5400017795359415e-17,5.551115123125783e-17]}
},{}],19:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var exp2 = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var smallNegative = require( './fixtures/julia/small_negative.json' );
var smallPositive = require( './fixtures/julia/small_positive.json' );
var tiny = require( './fixtures/julia/tiny.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof exp2, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accurately computes `2**x` for negative medium numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp2( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `2**x` for positive medium numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp2( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `2**x` for negative small numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = smallNegative.x;
	expected = smallNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp2( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `2**x` for positive small numbers', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = smallPositive.x;
	expected = smallPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp2( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes `2**x` for very small `x`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var v;
	var i;

	x = tiny.x;
	expected = tiny.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = exp2( x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * Math.max( 1.0, abs( v ), abs( expected[ i ] ) );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function returns `+infinity` for very large `x`', function test( t ) {
	t.equal( exp2( 1100.0 ), PINF, 'equals +infinity' );
	t.equal( exp2( 1200.0 ), PINF, 'equals +infinity' );
	t.equal( exp2( 1300.0 ), PINF, 'equals +infinity' );
	t.end();
});

tape( 'the function returns `0.0` for negative large `x`', function test( t ) {
	t.equal( exp2( -1100.0 ), 0.0, 'equals 0' );
	t.equal( exp2( -1200.0 ), 0.0, 'equals 0' );
	t.equal( exp2( -1300.0 ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `0.0` if provided `-infinity`', function test( t ) {
	t.equal( exp2( NINF ), 0.0, 'equals 0' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity`', function test( t ) {
	t.equal( exp2( PINF ), PINF, 'equals +infinity' );
	t.end();
});

tape( 'the function returns `1` if provided `0`', function test( t ) {
	var v = exp2( 0.0 );
	t.equal( v, 1.0, 'equals 1' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var val = exp2( NaN );
	t.equal( isnan( val ), true, 'equals NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/exp2/test/test.js")
},{"./../lib":13,"./fixtures/julia/medium_negative.json":14,"./fixtures/julia/medium_positive.json":15,"./fixtures/julia/small_negative.json":16,"./fixtures/julia/small_positive.json":17,"./fixtures/julia/tiny.json":18,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":40,"@stdlib/math/constants/float64-ninf":47,"@stdlib/math/constants/float64-pinf":48,"tape":106}],20:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":21}],21:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":28,"@stdlib/math/base/utils/float64-from-words":30,"@stdlib/math/base/utils/float64-normalize":35,"@stdlib/math/base/utils/float64-to-words":37,"@stdlib/math/constants/float64-exponent-bias":41,"@stdlib/math/constants/float64-max-base2-exponent":44,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":43,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":45,"@stdlib/math/constants/float64-ninf":47,"@stdlib/math/constants/float64-pinf":48}],22:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":23}],23:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],24:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],25:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":24}],26:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":24,"./factory.js":25,"@stdlib/utils/define-read-only-property":51}],27:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":34,"@stdlib/math/constants/float64-exponent-bias":41,"@stdlib/math/constants/float64-high-word-exponent-mask":42}],28:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":27}],29:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":31}],30:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":29}],31:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],32:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":33}],33:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],34:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":32}],35:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":36}],36:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":49}],37:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":39}],38:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":31}],39:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":38}],40:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],41:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],42:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],43:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],44:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],45:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],46:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent' );
* // returns -1022
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a normal double-precision floating-point number.
*
* ``` text
* 1 - BIAS = -1022
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1022
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT;

},{}],47:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],48:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],49:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],50:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],51:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":50}],52:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],53:[function(require,module,exports){

},{}],54:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"dup":53}],55:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],56:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":52,"ieee754":75}],57:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":77}],58:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":59,"./lib/keys.js":60}],59:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],60:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],61:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":71,"object-keys":80}],62:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],63:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":64,"./helpers/isNaN":65,"./helpers/mod":66,"./helpers/sign":67,"es-to-primitive/es5":68,"has":74,"is-callable":78}],64:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],65:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],66:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],67:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],68:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":69,"is-callable":78}],69:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],70:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],71:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],72:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],73:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":72}],74:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":73}],75:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],76:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],77:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],78:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],79:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],80:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":81}],81:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],82:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":55}],83:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":55}],84:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":85}],85:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":87,"./_stream_writable":89,"core-util-is":57,"inherits":76,"process-nextick-args":83}],86:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":88,"core-util-is":57,"inherits":76}],87:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":85,"./internal/streams/BufferList":90,"./internal/streams/destroy":91,"./internal/streams/stream":92,"_process":55,"core-util-is":57,"events":70,"inherits":76,"isarray":93,"process-nextick-args":83,"safe-buffer":100,"string_decoder/":94,"util":53}],88:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":85,"core-util-is":57,"inherits":76}],89:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":85,"./internal/streams/destroy":91,"./internal/streams/stream":92,"_process":55,"core-util-is":57,"inherits":76,"process-nextick-args":83,"safe-buffer":100,"util-deprecate":112}],90:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":100}],91:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":83}],92:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":70}],93:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],94:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":100}],95:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":96}],96:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":85,"./lib/_stream_passthrough.js":86,"./lib/_stream_readable.js":87,"./lib/_stream_transform.js":88,"./lib/_stream_writable.js":89}],97:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":96}],98:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":89}],99:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":55,"through":111}],100:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":56}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":70,"inherits":76,"readable-stream/duplex.js":84,"readable-stream/passthrough.js":95,"readable-stream/readable.js":96,"readable-stream/transform.js":97,"readable-stream/writable.js":98}],102:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":63,"function-bind":73}],103:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":102,"./polyfill":104,"./shim":105,"define-properties":61,"function-bind":73}],104:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":102}],105:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":104,"define-properties":61}],106:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":107,"./lib/results":109,"./lib/test":110,"_process":55,"defined":62,"through":111}],107:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":55,"fs":54,"through":111}],108:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":55}],109:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":55,"events":70,"function-bind":73,"has":74,"inherits":76,"object-inspect":79,"resumer":99,"through":111}],110:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":108,"deep-equal":58,"defined":62,"events":70,"has":74,"inherits":76,"path":82,"string.prototype.trim":103}],111:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":55,"stream":101}],112:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[19]);
