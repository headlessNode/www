// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":60,"@stdlib/math/constants/float64-pinf":61}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":41,"@stdlib/math/base/utils/float64-get-high-word":45,"@stdlib/math/base/utils/float64-to-words":51}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],13:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":12}],14:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":15}],15:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;


// VARIABLES //

var C13 = [
	4.16666666666666019037e-02,  // 0x3FA55555, 0x5555554C
	-1.38888888888741095749e-03, // 0xBF56C16C, 0x16C15177
	2.48015872894767294178e-05   // 0x3EFA01A0, 0x19CB1590
];
var C46 = [
	-2.75573143513906633035e-07, // 0xBE927E4F, 0x809C52AD
	2.08757232129817482790e-09,  // 0x3E21EE9E, 0xBDB4B1C4
	-1.13596475577881948265e-11  // 0xBDA8FAE9, 0xBE8838D4
];


// FUNCTIONS //

// Create polynomial functions based on above coefficients...
var polyval13 = evalpoly( C13 );
var polyval46 = evalpoly( C46 );


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{"@stdlib/math/base/tools/evalpoly":37}],16:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":17}],17:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],18:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":19}],19:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":39,"@stdlib/math/base/utils/float64-from-words":41,"@stdlib/math/base/utils/float64-normalize":49,"@stdlib/math/base/utils/float64-to-words":51,"@stdlib/math/constants/float64-exponent-bias":55,"@stdlib/math/constants/float64-max-base2-exponent":58,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":57,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":59,"@stdlib/math/constants/float64-ninf":60,"@stdlib/math/constants/float64-pinf":61}],20:[function(require,module,exports){
'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":22}],21:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ``` tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* * The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
} // end FUNCTION kernelRempio2()


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":13,"@stdlib/math/base/special/ldexp":18}],22:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION rempio2()


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":21,"./rempio2_medium.js":23,"@stdlib/math/base/utils/float64-from-words":41,"@stdlib/math/base/utils/float64-get-high-word":45,"@stdlib/math/base/utils/float64-get-low-word":47}],23:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION rempio2Medium()


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":24,"@stdlib/math/base/utils/float64-get-high-word":45}],24:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":25}],25:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],26:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

var sin = require( './sin.js' );


// EXPORTS //

module.exports = sin;

},{"./sin.js":27}],27:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000;

// Array for storing remainder elements: (note that, in c, this is not thread safe)
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* * Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\([-\pi/4, +\pi/4]\\).
*
* * Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\([-\pi/4, +\pi/4]\\), and let \\(n = k \mod 4\\).
*
* * We have
*
*   | n   |  sin(x)  |  cos(x)  |  tan(x)  |
*   |:---:|:--------:|:--------:|:--------:|
*   |  0  |     S    |     C    |    T     |
*   |  1  |     C    |    -S    |   -1/T   |
*   |  2  |    -S    |    -C    |    T     |
*   |  3  |    -C    |     S    |   -1/T   |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= ABS_MASK;

	// Case: |x| ~< π/4
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return kernelSin( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction...
	n = rempio2( x, Y );
	switch ( n & 3 ) {
	case 0:
		return kernelSin( Y[ 0 ], Y[ 1 ] );
	case 1:
		return kernelCos( Y[ 0 ], Y[ 1 ] );
	case 2:
		return -kernelSin( Y[ 0 ], Y[ 1 ] );
	default:
		return -kernelCos( Y[ 0 ], Y[ 1 ] );
	}
} // end FUNCTION sin()


// EXPORTS //

module.exports = sin;

},{"@stdlib/math/base/special/kernel-cos":14,"@stdlib/math/base/special/kernel-sin":16,"@stdlib/math/base/special/rempio2":20,"@stdlib/math/base/utils/float64-get-high-word":45}],28:[function(require,module,exports){
module.exports={"expected":[0.9959748854655721,-0.6175515204149469,-0.14923186447229106,0.5360798368606496,0.24704627969715842,-0.8748122442480804,0.9524344729351254,-0.4310986251306361,-0.9173166158470507,0.3390157842848523,0.8730626133516642,-0.9594273045912866,0.8630168256836014,0.9827531328860367,-0.8083664842384198,-0.9962910914677245,0.6361226262327053,-0.9978282967740859,-0.7098618670924043,0.9994246698497325,0.776531137644334,-0.9910671306668833,0.7891221295093308,0.192589806596542,-0.8464156412813347,-0.28943847399974326,0.8952791559943309,-0.30874861107877055,0.39098423766468454,0.4020150946532629,-0.29729780704773934,-0.4912776516693173,0.970903019194982,-0.8399559837239944,0.18078529125067724,0.7816847751969996,-0.0818536911497041,-0.669452776032005,0.9997600475437358,-0.7013475781744907,-0.9969648150480391,0.6268056500353275,0.1375331852304135,-0.5460209618044817,0.9804602444575952,0.8690244833223554,-0.955970186070779,0.4417343061454208,0.9219590065420192,-0.9220344897857679,-0.4419091941927871,0.956027377968241,-0.8689280127647571,-0.980498575397927,0.8152685629322721,-0.13734008757594007,-0.6269575365430986,0.9969799734437683,0.7014865272869827,-0.9997557581374239,0.6693079455885816,0.08204798301660124,-0.7818063440367006,-0.18097702318015937,0.8400617569606741,0.2781035969209006,0.4911078423873261,0.2974839344007275,-0.40183658655325066,-0.3911636594913742,0.3085631820375684,-0.8951922887373207,0.28925186531882985,0.8463118111518922,-0.19239850488531315,-0.7890023706184097,0.09362892415619169,-0.7764082905253504,-0.9994312627994838,0.7097245440338888,0.9978154368616063,-0.6359721949232058,0.996274297908531,0.8084812305436703,-0.9827170640414763,-0.8631152919709386,0.9593723196941507,-0.4523082627947045,-0.33919918077665273,0.9173942184673309,0.4312745190937726,-0.9524938638413822,0.8747177829002335,-0.24685737006347744,-0.5362443950579417,0.14903909701789086,0.617704840897602,-0.9959923402264397,-0.6930131674496053,-0.029515755365699555,-0.6780437266078234,-0.0702614877130902,0.7743813152930384,0.16933895150390957,0.5851146559928825,0.9736214425504678,-0.5013704562385474,-0.2861776897329626,0.4126327860597221,0.380257566295565,0.394115782113619,0.9003979595013791,-0.30054697842015876,-0.8525493818385034,0.20398483431495937,-0.8417987697322418,-0.9894497067872101,0.7838037567815448,0.9989628256449482,-0.7180023387477554,-0.9985266320472875,0.737868273348782,-0.9972241150553967,-0.8014680521963323,0.9848365667215057,-0.5488702793004472,-0.23226441190597036,0.8673348337627911,0.32805565504658013,-0.9126257579291267,0.9232723164009794,0.9488272559552856,-0.4388522827456602,0.2582949141664531,0.526229586705647,-0.9798237506330675,-0.6083658321927825,-0.14071187243420227,-0.755723512334484,0.04132916072677828,0.6990558866351819,0.058465174639738965,-0.7668480807915772,0.9929827436425522,-0.5946597130539275,-0.1776273518269009,0.5115630126528394,0.2748314569183104,-0.8883924923027814,0.94326957253873,-0.40495211306037254,-0.9054778159649057,0.31180009552686344,0.8586678241963427,-0.9671444681640909,0.8481206252063869,0.9876680450902894,-0.7910897006644673,-0.9983548015357337,0.7261798056442647,-0.999310652523734,-0.7298384577550383,0.9980345882008848,0.7943428832104976,-0.9868184563355871,0.8064727178680731,0.2207508291321449,-0.8613908184061767,-0.3168662894827543,0.9077297744771159,-0.9277486553073642,0.36433364557498443,0.42820009700024264,-0.2696963662352189,-0.5161412473033627,0.9773927843530679,-0.8239906956381227,0.15240505085616804,0.7634119268150518,-0.0531367910864884,-0.6905545124567646,-0.04666069211756219,-0.6805424311489834,-0.9943112663681286,0.6041216771947111,0.1659822977151732,-0.5216840874051222,0.9743926805750732,0.8829037590247608,-0.9471284447227601,0.41573185928665224,0.9104311483100015,-0.32300964421972345,-0.4675431415364152,0.9640717726770004,-0.8543239711902549,-0.9857483746796223,0.7982651040954744,-0.10877634666046655,-0.6491186615087764,0.9988020016207896,0.7217066604607645,-0.998705604096058,-0.7871067191994311,0.11069653233945854,-0.7994271809240315,-0.20920640042973193,0.8553264392902281,0.30563264759627284,0.4658345695722655,0.32483733764690553,-0.3753163597015288,-0.4174880780498258,0.2810601331234312,0.5059807865137298,0.2615827227515662,0.8306307280307431,-0.16407693343370344,-0.7709936683111059,0.06493699654242957,-0.7579489337606615,-0.9999877758861966,0.6891559534255756,0.9955008521101534,-0.613499226277186,-0.15431405058477266,0.8250837517044153,-0.9769825058891533,-0.8772916559437477,0.9508549728676583,-0.4264535145182412,-0.366132038409091,0.9284679020411355,0.4570614018730436,-0.9608643656276924,0.860407940878643,0.983690963794366,-0.5603140355775518,0.12051922386216606,0.6400815181523697,-0.9981537862354098,-0.7134740177372926,-0.0007364994422978709,-0.6566092652038655,-0.09894082736733731,0.792269938516275,0.19763273892346916,-0.8491425438020463,0.9666515337632018,-0.4762617550918658,-0.3136350582809919,0.3862466301671612,0.406717722704967,-0.9439092410264316,0.8875039509023825,-0.2729734832288893,-0.8371546948293174,0.175725889232701,0.7784676774116461,-0.9932093502213922,0.7656067319999819,0.9998594637586431,-0.6976731786444917,-0.9965513346455732,0.7569872541151635,-0.9946681645219595,-0.8183473340613017,0.979435815599979,0.8715569672494617,-0.9544486362586372,0.8812998825044985,0.35510662995904835,-0.9240127068884263,-0.4465157961602547,0.957522695193187,-0.46453064934199506,0.23038495766914943,0.5504841045696813,-0.13224526068601836,-0.6309549350014366,0.9973660969439496,-0.7365630032511488,0.012557062350836283,0.6654788657839278,0.0871712972073001,-0.7850019907397481,0.9891679800048915,-0.5712752686804543,-0.9696112025689628,0.4866223916605775,0.3023889540984364,-0.3971229296646294,0.9333232344663777,0.9399400668466584,-0.8928888864265757,0.28432610060793706,0.8435616844276931,-0.9740604152580443,0.8325218117862904,0.9917647383630281,-0.7731575505705316,-0.9995914393874804,0.7060929166778309,-0.9999651441965567,-0.7492104245806951,0.9958176996117587,0.8114965672058865,-0.9817522669019698,0.8231551958745674,0.24872897392006602,-0.8756523890935564,-0.3440316017916451,0.9194283977021134,0.43590779795537105,0.33738122668459064,0.4540303633328465,-0.24187149947132636,-0.5405772533824172,0.9830728429668767,-0.8073427846913476,0.12389855275949996,0.7445066411540314,-0.024375870637432545,-0.7110841692459184,-0.07538958643793468,-0.6591734988480156,-0.990833995278645,0.580937228717897,0.19429390462914742,-0.49691503156716466,0.9675178955397171,0.8960516062133755,-0.9375020688734026,0.3893850055399695,0.8981490569071424,-0.2956389885661288,-0.4927897597044095,0.9713174964358756,-0.8390121776029698,-0.9901815453522607,0.780600334382229,-0.08012249159522282,-0.6707420337545139,0.999796587105276,0.7413289064643335,-0.9968280872212556,-0.8045324084087085,0.13925337676322214,-0.8163857442296156,-0.23726246374222162,0.8698825391271818,0.3329085014413992,0.44017538302265374,0.35192163422242984,-0.34848520758261703,-0.4434666348069972,0.25332424411392124,0.530594866318711,0.2336968758604396,0.814261521212416,-0.13561943488206493,-0.7523462477435269,0.03619127283777357,-0.7388616654524063,-0.9997158639432853,0.6680164417971267,0.992361559454477,-0.5905180133036266,-0.1826849737670341,0.8410027444781835,-0.9704385810816568,-0.8907412406662603,0.9415499043529002,-0.4002454771577339,-0.3927615793889865,0.9387724101631983,0.4824696389183194,-0.9684388535928793,0.8453853066698886,0.9884599924116272,-0.5839194922514036,0.09189950834435856,0.6619279293744679,-0.9994883265562592,-0.7333438010654301,0.02804336662313456,-0.6346308456005229,-0.12753820096177917,0.8095022174689991,0.22576280043402727,-0.8639911388373638,0.9588808168612725,-0.4507585019635651,-0.3408326005204273,0.35954049398708643,0.4328409398541046,-0.9530214148588746,0.8738747028289171,-0.24517384720731814,-0.8210664794394976,0.14732136664589332,0.7600807275766599,-0.9961461841120769,0.7467754516855696,0.9999277831409913,-0.676766041552285,-0.993750459082972,0.7754791200272062,-0.9912881959119713,-0.8345486682244987,0.9732236654152646,0.8853064101701003,-0.945466175293205,0.8945348314401114,0.3818634220549488,-0.9346341712362777,-0.4720821017420566,0.9654248889672346,-0.48982418241713865,0.20228414217338167,0.5742825820483903,-0.10366368380233015,-0.6530213325597622,0.9990404056233327,-0.7167922994809359,-0.016225438737019635,0.6437216621777816,0.11580520400761614,-0.8025055774408599,0.984533754836901,-0.5474175597903618,-0.9621686220400089,0.4612786355711192,0.3296959416380471,-0.3705455411220344,0.922603698614206,0.949374331467412,-0.8795602563438731,0.25661655995135374,0.8277567085029791,-0.9801694164594336,-0.6097434204911678,0.9950398188595203,-0.7545848895801823,-0.9999999805486924,0.6854210755154586,0.06019901990259795,-0.7679617191510058,0.9927758406307996,0.827977978915615,-0.9758727593754679,0.5100698131510522,0.2765010628815492,-0.8891885385569291,-0.3709119062266613,0.9303653341185609,0.46162859964572983,0.31014930932486495,0.47948449495034257,-0.213846257853914,-0.5645654262599604,0.11541337413877241,-0.7900260425983796,0.09528941274588523,0.7249845800172242,0.004405243639829892,-0.6527225303163422,-0.10405602537446726,-0.6372584840463626,-0.9865358824732076,0.5572715114170878,0.9653219815873462,-0.4717343138472587,0.9598415846651437,0.9084571327493561,-0.9270990333508898,-0.9455945902148379,0.8851229072497553,-0.26802341518077105,-0.5176281335106968,0.9777585466325703,0.6003318121207457,-0.9937944148214022,0.7622888879087981,-0.051402260241114446,-0.6918097397185403,-0.04839563440875258,0.7603370095392505,-0.9941247629140029,-0.8212915946863087,0.16769485879401239,-0.8326679848834065,-0.26512197048842717,0.8837179976866886,0.3599085621800306,0.41415153971071583,0.37871438654382794,-0.32136535806622024,-0.4690778082131555,0.22537849239459107,0.5547693826825703,0.20561742626138377,0.7972177515233235,-0.10704958442266414,-0.7330755570944488,0.007415567010339918,-0.719162298164693,-0.9986157522321628,0.6463235218631667,0.9884001595949797,-0.5670475944472944,-0.21090455429446084,0.8562250210117047,-0.9630907108363589,-0.903452904029652,0.9314648227957679,-0.37370586237271514,-0.41906574286838993,0.9482992062167208,0.5074781811527667,-0.9752110527648198,0.8296623255522922,0.9924101460203713,-0.6070412094893031,0.06320366004297265,0.6832259762287964,-0.9999948556088684,-0.7526060566069565,0.056800000577749504,-0.6121266754932791,-0.1560299174267463,0.8260638763254992,0.25370583210367376,-0.8781239732383554,0.9503157293797524,-0.42488182464514207,-0.36774778505110695,0.3325365018216039,0.45860557635149035,-0.9613440722463419,0.8595215062292438,-0.21717110055126368,-0.8042980637122786,0.11879479785965115,0.7410641001451638,-0.9982577754828201,0.7273255163329626,0.9991677271938147,-0.6552982476785245,-0.9901263257032686,0.7933285517730793,-0.9870870093102566,-0.8500586329311202,0.9662052625309729,0.8983224341362704,-0.9357004569088692,0.9070287162726368,0.40830386506703387,-0.9444813517782017,-0.4972573179140164,0.9725272908222922,-0.5147119279190594,0.17401574738263303,0.5976053036463592,-0.07499622827852681,-0.6745467442882445,0.9998870741079239,-0.6964277797699177,-0.04499449810099601,0.6214311769156804,0.1443431737056255,-0.8193443403083247,0.979083907293633,-0.523106350948448,-0.9539289471980664,0.4355527400430069,0.3567297974686463,-0.343661179626086,0.9111198454225765,0.9580221010152901,-0.8655029676225466,0.22869442911476418,0.8112659898199045,-0.9854664108568922,-0.632301507620846,0.9974905733879422,-0.7353871039387339,-0.9995800865695088,0.6641814074371167,0.08890145842364945,-0.786076807234318,0.9889115312409286,0.843773464558794,-0.9691848045468192,0.4851042762835291,0.30404408864172894,-0.9019880529741959,-0.3974849341985914,0.9405315231838268,0.4869669719748918,0.2826604533735274,0.5045414047552205,-0.18564385847840742,-0.5880858932902399,0.08677831715003552,-0.772054815157165,0.06660133163270865,0.7048619161664033,0.033182708458388104,-0.6306488445908177,-0.13263626064133296,-0.6148155419127416,-0.981420488659571,0.5331441308044992,0.9574088707302457,-0.44616279483722976,0.9513701072771535,0.9201100614583851,-0.9159279563955829,-0.9545662635540215,0.8713634906581704,-0.2401858017755097,-0.5420376859731852,0.9833895872746568,0.6230996340186643,-0.9965839900589626,0.7433459345212069,-0.02263944544749828,-0.712304326172568,-0.07712143427618674,0.7787152227046698,-0.9905978707031953,-0.8373703941331249,0.19599741650821173,-0.49540699766031987,-0.292761840873517,0.8968213531884713,0.38661046201262317,0.387784598703159,0.89738400064746,-0.293979278189117,-0.4943003810718515,0.1972460292086401,0.57848430858606,-0.9904228490474832,0.7795135386214755,-0.07839105032403787,-0.7131975608814959,-0.021366282133510554,0.7424934976301695,-0.9966883521240469,0.6240951648012159,0.9836199342945743,-0.5431074134283076,-0.9607550137200296,0.8707379706359366,-0.9549449823872962,-0.9154161152450946,0.9206080830323794,0.950977042753205,-0.44502273755351235,0.9570403978689229,0.5320663106207854,-0.9811753528156332,-0.6138106935325691,0.995538152174475,-0.6296600324478113,0.03445545160758705,0.7039580146645765,0.065330633805647,-0.7712448268321876,0.08550957941499607,-0.5891153981278194,-0.18439237322264979,0.5056404948854658,0.28143868494259394,-0.8915293388681426,0.94096336693823,-0.3986531602858211,-0.9025371568357784,0.3052570247271895,0.4839902878664551,-0.20882063838019116,0.844456251796034,-0.18898844172053464,-0.7868633391927676,0.09016981528645156,0.7214335491598802,-0.9995423750170942,0.7072730389523988,0.9975799255741808,-0.633287581698388,-0.985681936865967,0.5529948066316513,-0.9820680851274952,-0.864864379181127,0.958386421238796,0.9105942562161208,-0.9251595713700678,0.918771186628638,0.43440605480275857,-0.9535460907636448,-0.5220205886419845,0.9788240168789675,-0.8200737592368409,0.14560319182896633,0.6204329480010708,-0.0462666432426119,-0.6955133377790492,0.9999054009877844,-0.675486314802168,-0.073726282440896,0.5986258762192711,0.17276156444393492,-0.8355043295189908,-0.2700762030548371,-0.49836178241481516,-0.9448990040794528,0.40946601731252885,0.38346812579364786,-0.31649211712700775,0.8988811885192052,0.9658762113739738,-0.8507286658147781,0.20058283977299798,0.7941031898695824,-0.10193598065096562,-0.6543357739520971,0.9991149716570824,-0.7155800977667387,-0.998332105304864,0.6423915081305538,0.11753024785107782,-0.8035406816548006,0.9842279727718997,0.8588699385998024,-0.9616939429529289,-0.9056451581388959,0.331335233589749,-0.9140403287776272,-0.42372867167684836,0.9499185428694816,0.5119019237444107,0.2549374315652602,0.5291803347224843,-0.15728766520394724,-0.6111191692914703,0.058071369952548794,0.6869714755065717,0.03785807563493717,0.6841553199237452,0.06193268355467117,-0.608052707191022,-0.1611066153668554,-0.5918632649694314,-0.97549205160981,0.5085750748504654,0.9487026087054783,-0.420221658882431,-0.3725243544768524,0.9310007386446437,-0.9039980925203679,-0.9627471406412588,0.8568822059168254,-0.21214921000796308,-0.5659981953604604,0.9882059534100993,0.6453512582737535,-0.9985479600827434,0.7237871672280098,0.998944786212608,-0.7322088146806603,-0.10578334403614605,0.7964483208026911,-0.9862503323903334,-0.8527554865064207,0.22413760307199063,-0.47020210279509156,-0.32015917705714264,0.9091817503521642,0.41299208014661004,-0.9461582610705244,0.884313290874568,-0.2663496555426766,-0.5191134581169914,0.16895016047761072,0.601719997750828,-0.993986115931595,0.7611635492992581,-0.04966757432336744,-0.6927287267355717,-0.05013043069807772,0.6173945738142484,-0.9939352603449477,0.6013497853637361,0.9780248436599553,-0.5187173031342758,-0.9523736493314773,0.8845295703131858,-0.9460081439422914,-0.9266209635678326,0.9089886791676399,0.9594835434396521,-0.8629160122564423,0.9649887436093305,0.5562136576514914,-0.9863268127094732,-0.636276566450184,0.9978414195236709,-0.6517572228987909,0.005678699064756301,0.7241068695323016,0.09402165891557339,-0.7892446707285947,0.9881348813946831,-0.5656160768553093,-0.2126020718939834,0.48060164138694866,0.3089383840805059,-0.9041961302505513,0.9308314773625482,-0.3720942376332656,-0.8897704828686112,0.2777246619817197,0.5089740448115421,-0.180589048027555,0.8286914201157018,0.9926222395959335,-0.7687767494197006,0.061470132868212686,0.7012053372593869,-0.9999989185074828,-0.7537486227021023,0.9951656936727731,-0.6107522780213914,-0.980420974459029,0.5287870500736108,0.2553855248813105,-0.8789536413738072,0.9497736189417433,0.9221117100008059,-0.9138522511169621,0.33089794226651353,0.460148367290484,-0.9618208786441469,-0.5463513991618997,0.9843098507080241,0.6271129665051467,0.11707001347228849,0.6427466038894015,-0.01749872929286112,-0.7159037435690163,-0.08224683597174548,-0.653985253223495,-0.10239698933646321,0.5753246528014053,0.20103683342856538,-0.49093402460744184,-0.2976744225623478,-0.473204353459969,-0.9350862734065087,0.3830400785379131,0.8951033455594226,-0.28906086143134324,0.8858978668377394,0.9729301559223189,-0.8352495904715981,-0.9911196622876085,0.7762825269188759,-0.07326410207576678,-0.6758279655240442,0.9999116679583068,-0.695180279884455,-0.9962570706263124,0.6200694291144122,0.14606167108923307,-0.8203388747249145,0.9787290452482063,0.8732548945888055,-0.953406380286894,-0.9174736080300464,0.3583518887816729,-0.9253353814382314,-0.4496213774266671,0.958518616638403,0.5364127979636146,0.22700321062597406,0.5533808730963305,-0.12880116929794677,-0.6336461726880427,0.029316314390606692,0.7076005830290255,0.009083456676351898,0.6628819453615492,0.09063135143856056,-0.5849528375515783,-0.18944350370826163,-0.568420667689574,-0.9687554826495995,0.48358469742470095,0.9392104080865866,-0.3939323965318872,-0.3990781333212243,0.9411201420882727,-0.8913193248438912,-0.9701304441503595,0.8416910498311112,-0.1839368663764201,-0.5894898119441778,0.9922036549918647,0.667068250858191,-0.9996846978709307,0.7036287891996504,0.9972092387054111,-0.751506715664765,-0.13435761915493266,0.8135216131114165,-0.9810857496290002,-0.8674341262547882,0.2520921061654888,-0.44460767597724304,-0.34729128212281496,0.9207889493902083,0.4390315611220434,-0.9550824190233802,0.8705099848821468,-0.2384993794776604,-0.5434964833232099,0.14051432749394374,0.6244572009150842,-0.9967259297721865,0.7421829853329476,-0.02090295195798898,-0.6716860117584955,-0.07885304945144363,0.5944992857414625,-0.9903587576528842,0.5781062266227014,0.9716195228609086,-0.49389746919003774,-0.9432033051296854,0.8975883945974151,-0.9362875990925001,-0.9370581665075922,0.8966162371242087,0.9671951742266213,-0.8480148981170085,0.9721376587488959,0.5799002177336682,-0.9906611647958565,-0.6582153254908883,0.9993180399603118,-0.6733144747528119,-0.023102757912022927,0.743655848812236,0.12263479317778074,-0.8065906765926822,0.9833053650525737,-0.5416481793396453,-0.2406356435346132,0.4551646405924303,0.33618214779985023,-0.9161138537702807,0.9199284542662335,-0.34522705903272005,-0.876266691752211,0.24996222236243437,0.5335361497641562,-0.1522078513586522,0.812240071329048,0.995700544592467,-0.7500532779599073,0.03271952643083047,0.6803962222055758,-0.9996270277373083,-0.7723492702788576,0.9919270315241744,-0.5877110056853635,-0.9743477968486696,0.5041412277329822,0.2831049578851155,-0.892314747469031,0.9403739907880337,0.9328652540266971,-0.9017878635311755,0.30360256221055515,0.48550947669353545,-0.9692988602945152,-0.5702295929749408,0.9889802476518554,0.6492704264580502,0.08843985020067713,0.6645277858943429,0.011283681219430113,-0.7357010695291339,-0.11089483121030173,-0.6319424072692128,-0.13098286696614334,0.5515468102147522,0.22914555643263024,-0.46565800419622183,-0.325026038113014,-0.4476549053825032,-0.9244988843903051,0.35629681589588436,0.8819009562291767,-0.26139013755569807,0.8721806362183082,0.9791780909246696,-0.819078565003211,-0.9945360283027365,0.7578187642314855,-0.04453152894269827,-0.6967602774495989,0.9998800022803903,0.7647868757494162,-0.9933567015655326,0.5972336627837154,0.1744720917040394,-0.8364574702309546,-0.27174815498894944,0.886916415522537,-0.9443289822569887,-0.9285419905291349,0.3850716726705284,-0.31484402054023153,-0.4751416010203072,0.9663246198871319,0.5604792889625839,0.1988809322463648,0.7930463310636743,-0.10020796997510033,-0.6556482413183724,0.0005369721631641245,0.7276434893517312,-0.998230324072957,0.6410594160912002,0.11925493712463626,-0.5613683724166068,-0.2176234503910236,0.8597582746862357,-0.9612163625895007,0.4581937014344397,0.9289401325462763,-0.3673167867347683,-0.8874119910266708,0.9504598885196962,-0.8779021569030373,-0.9767100574931259,0.8258026072887974,0.9932325436230465,-0.6124930744432765,0.9953793801834174,0.6882326206518261,-0.9999932617099769,-0.7571176161112605,0.9946475680064746,-0.7701820420652599,-0.16282058769846638,0.8299209555152598,0.2603533802119278,-0.8813941530770099,0.279837767295561,-0.4186449205297608,-0.3741356788808274,0.9316333344908518,0.4647073329174259,-0.9632153531229528,0.8559855178141563,-0.21045152214187912,-0.567429256935204,0.11196208750138746,0.6466770817803666,-0.99864002081115,0.7225875708890239,0.007878987147666315,-0.6500868484751429,-0.10751034356644595,0.5711114935598484,-0.9859618069484236,0.5543837443593352,0.9644092782903727,-0.4686684732186114,-0.933251578150188,0.9099036250994849,-0.9257914006790168,-0.9467190775185225,0.8835010066680463,0.9741055465280547,-0.8324112586227306,0.9784812208749868,0.6031063680882067,-0.9941748183451342,-0.6796087958154025,0.999966790200115,-0.6943139292245608,-0.051865075751935504,0.7625887574426703,0.1511463324659083,-0.8232684743833675,0.9776612439764703,-0.5172315614297568,-0.2684698641482296,0.4293505654076451,0.36314740640896626,-0.927272636366181,0.9082633300969309,-0.31807388219949334,-0.8620369705018847,0.22199270525034473,0.5576562546130369,-0.12370056035458708,0.7951158343117792,0.9979539762525043,-0.7307084359953965,0.003941813987448599,0.6590234430009332,-0.9984270107939588,-0.7903100765670092,0.9878666221499687,-0.5641828528903582,-0.967467435268733,0.4790777570754537,0.3105898567888264,-0.9049366286567796,0.9301953237600881,0.9428459796798662,-0.888976403175526,0.27605566711845514,0.5104683729772753,-0.9759738406918507,-0.5936353885458794,0.9928313385894383,0.6708900079635938,0.05973642024792307,0.6857584497189718,0.04005674393350432,-0.7548889148585719,-0.13945095727200818,-0.6093760380078594,-0.15946023378392826,0.5273120468600563,0.25706444720178834,-0.43999621632341546,-0.3521083906669264,-0.42173460424343445,-0.9131456079961185,0.32925838444541494,0.8679679691422311,-0.23350286890053687,0.8577408604970068,0.9846148403720141,-0.8022289860556318,-0.9971284857076029,0.7387271978375431,-0.015762064325480486,-0.7171153686656547,0.9990200008562936,0.7830122845707477,-0.9896334008902212,0.5739031270901175,0.20273797350424835,-0.8518831149617303,-0.2993321397489175,0.899843183716764,-0.9344692688988707,-0.9388411361989736,0.4114724496479677,-0.28739766808888245,-0.5002682006073418,0.9733300858481455,0.584081459214081,0.17059389391052324,0.7751864371428844,-0.07153175484696403,-0.6771071478952904,-0.028242814910896478,0.7470835902264525,-0.9961054300708384,0.6187058106631497,0.14777972782821056,-0.5373188499861727,-0.24562311015660065,0.450580385740245,-0.9528809371016204,0.43242312167341895,0.9179002903418717,-0.3403968787979421,-0.8737776849855993,0.9590122405646176,-0.8637577039514294,-0.9824805298865482,0.8092300408342682,0.9961636645237926,-0.7466427359387883,0.9977304981023614,0.7088268343466565,-0.9994733959747497,-0.7756050807951149,0.9912618962938645,-0.7882193225851953,-0.19114866994294713,0.8456327622224302,0.288032596466077,-0.8946240019960805,0.9386126388889712,-0.3923353449120176,-0.40067012848915035,0.298699510442552,0.48999812482073174,-0.9705503257607084,0.8407519222497456,-0.18222931936641454,-0.7825997466407406,0.08331709417934882,0.6683612326161932,0.01642493946663633,0.7023935394977188,0.9970780616400937,-0.6279491303917288,-0.1360785723331494,0.5472505725386825,-0.9807480508201112,-0.8682970181929583,0.9564000831684369,-0.44305121580722306,-0.9225267127534827,0.35148780885430747,0.4405914583286734,-0.9555956931622978,0.8696538529171484,0.980208935548593,-0.816118020377135,0.13879444346805078,0.625812883924306,-0.9968648625231781,-0.7004392543207899,0.9997871327955744,0.7680895002626278,-0.08058442673970014,0.78088991073648,0.17953265681844363,-0.8392642476266274,-0.2766928058467423,-0.49238645071032344,-0.29608167488792225,0.40318080112000887,0.38981182093961775,-0.3099596149517729,-0.4796595806744528,-0.2906572017798851,-0.8470931075189835,0.193839281576737,0.7899037020039267,-0.09509079145744427,0.777332895383869,0.9993806677540352,-0.7107582494733489,-0.024839163993220892,0.6371047056071445,0.124358402323212,-0.8076161622031889,0.9829878293360316,-0.5401873111853186,-0.9597855896526415,0.453617401561262,0.3378174521359181,-0.9168088285269353,0.9192460502235186,0.9520456185762946,-0.8754284835141782,-0.9778003747722982,0.5350043793145546,-0.9818402900477232,-0.6165493956907983,0.9958599331416491,0.6919538006003892,0.030983502544511602,0.70642100713498,0.06879662223264871,-0.7734513836716815,-0.16789155725810154,0.8327784610588458,-0.18780549813798134,0.5026404396672903,0.2847703767453957,-0.41396992011627554,-0.37889904425110826,-0.39546492333149375,-0.9010358496772556,0.30194718377369534,0.8533159268749236,-0.20542215825963256,-0.5716555744773664,0.9892359002699733,-0.7847148124124329,-0.9988948868193519,0.7190236438618421,0.01302045813996369,-0.7368763762990346,0.9973323761414313,0.8005890184875616,-0.9850902531135562,0.5500971498696072,0.9630369834910448,-0.8666030297708347,-0.3266681472408443,0.9120244901822545,-0.923835408345719,-0.9483625128652075,0.4375323483821834,-0.25971322530538965,-0.5249803604293095,0.9795292109471538,0.6071997558504996,-0.9947158503784472,0.7566843515247159,-0.042796280298305685,-0.6980051151061677,-0.05699920464416609,0.7659047807901788,-0.993155327310859,0.595839647590009,0.17618209260983253,-0.5128241937301548,-0.27341928710247276,0.42470119431692593,-0.943756111545477,0.4062943073959162,0.9061000272667776,-0.31319497411955355,-0.8594195107913122,0.9667701131539324,-0.8488976837511619,-0.9874370808684263,0.791987079764208,0.9982695284232095,-0.7271885677240933,0.9992550609999554,0.7288338309720366,-0.998125531340301,-0.7934500069624713,0.9870550283770562,-0.805603614507261,-0.21931839790912705,0.8606440170198791,0.31547319639109295,-0.9071127129400401,0.9282956772085745,-0.3657007449014079,-0.4268726488768696,0.2711100825867257,0.5148829850508122,-0.977081260387442,0.82482181823504,-0.15385615141623998,-0.7643595729702815,0.05460307804735377,0.6894916895096723,0.04519382244960291,0.6816176206045884,0.9944666006577546,-0.6052911971721986,-0.16453406882648441,0.5229362899038056,-0.9747218085268211,-0.8822133052460132,0.9475985725939156,-0.41706691919252564,-0.9110375937951132,0.3243990011425575,0.4662445989530205,-0.9636806597384483,0.8550862473404998,0.985500285026198,-0.799148681271598,0.11023593492195671,0.6480009543659657,-0.9987290688028184,-0.7206894443228986,0.9987792165812,0.7862001251754267,-0.10923701875528642,0.7985441473748719,0.20777025000632895,-0.8545647448615519,-0.30423416387820407,-0.46713342974453265,-0.3234482011589394,0.37667702768229505,0.4161533016533798,-0.2824690571462632,0.8826860570807211,0.974496780425324,-0.8314474828249766,0.1655252746275585,0.7719279890149535,-0.9943605214927347,-0.680881919942466,0.9999794371756627,-0.6902192458296583,-0.9956389153159462,0.7637111821790212,0.15286305438821018,-0.8242531902176339,0.9772946948458513,0.8765859312832338,-0.9513086239113704,0.4277812534440124,0.3647651876291778,-0.33555769928293644,-0.45575484584434267,0.9604565494116933,-0.8611553281200773,0.22029880454954986,0.8061986162305533,-0.12197680938150746,-0.638952631640602,0.998063522314286,-0.7295215670137052,-0.99929334052346,0.6577160841263605,0.09747950699128645,-0.7913730981667065,0.9875953826701316,0.8483660627639867,-0.967026546762173,0.47755242746322063,0.3122403924973747,-0.3876006766735738,-0.4053758045462646,0.943423344146644,-0.8881796415832444,0.27438583943952854,0.8379569676941834,-0.17717126868089988,-0.5950322394459611,0.9930374423700673,-0.7665505534307977,-0.9998337682892019,0.6987244254212044,0.04179219400013086,-0.7560269296362868,-0.14117068010781053,0.8175025163155449,-0.979731021938877,0.5258354528306491,0.25874259400006794,-0.4384358130162979,-0.3537335313550849,0.9234502434964802,-0.9124362100614651,0.32761783330459104,0.8671040780458215,-0.2318136269554433,-0.5492576080642203,-0.8072046792713351,0.12366634570956281,-0.9972585145324204,0.7375554019873637,-0.014025351806480376,0.9993558823142614,-0.0857083742324154,0.7840914689069596,-0.9893824597618605,0.19452344663335996,-0.8474635523376625,-0.4879046958829419,-0.3009889538984413,0.9005994876281346,0.38916945713235224,0.40381894490777465,0.8935491190737812,-0.4929933667740154,-0.501771380380347,-0.8388848286249306,0.5854904149674224,-0.9915756042576717,-0.07988923502211498,-0.06979919181833223,0.9998012793884451,-0.029978983961202764,0.7482370360285858,0.6252687469243966,0.13948509967757292,-0.8165208623838122,-0.535853170363784,0.8699979412061987,0.8749422840563891,0.4399652535849685,0.3521406617584155,0.9172096827535424,-0.44367636074097094,-0.45272153295490686,-0.8679508454667345,0.539341298114588,-0.9828027465473037,-0.13538758645059581,-0.6284917636735569,0.9971310961820027,0.025843826805850657,0.7100509472474402,0.6678422882334265,0.08401208931921209,-0.7830337304993426,-0.582131819445005,0.8411293262991127,-0.970382077411161,0.4893900305195177,-0.8953987357814616,0.938012038047599,-0.3929767706394704,0.9388530086378726,-0.8943121542886177,0.4915114861600622,-0.970967279376423,-0.19046404314531015,0.9899752114209369,0.9913536535185971,0.08158610305186259,-0.9994957840592334,0.7083346997152762,-0.7403425898524048,-0.747106509269017,-0.6265964296219179,0.8096395845776295,-0.9823503122882791,0.23583571901463224,-0.8691572906183193,0.9558913606660838,-0.341052586508547,-0.9218549920113749,0.3498612017521997,0.4421500263415546,-0.9561060844223085,-0.24494697587758785,0.9805513046071926,-0.815113057805406,0.13707414072158763,-0.9961666812136558,0.7466197989361674,-0.7016778474001466,-0.676593747717947,-0.6691084402970229,0.7756268443602179,-0.9912573475803113,0.18124106932482173,0.9731698499481574,0.9707919350721902,-0.2880656144665774,-0.9420435606613602,0.401590716297114,-0.9347173609332735,0.8995387319496154,-0.2986666049578538,0.9680718042752595,-0.8461687613769462,0.5744741375851286,-0.9897333242205898,0.7825782818877602,-0.6608265367670103,-0.7166291100826875,-0.016459414192937727,0.7391970961320834,0.6357649780703843,0.1260816362992934,0.9844927310777256,-0.22433204945662932,-0.2341809724911312,-0.9592965336068846,0.45206879403916383,-0.9134296859809437,-0.3609103312036287,-0.35145552930301743,0.9525755990382527,0.2563903823347397,0.5279045139369005,0.821903815501763,-0.14877360419446853,-0.617915958788142,-0.7544313131487502,0.03935985360896364,0.7004638622576674,0.6778463591018355,0.07052930773752064,0.9927477364177755,-0.16960355398135182,-0.179566575878406,-0.9735601471417002,0.2767259389399064,-0.8892955818670893,-0.4123882078886948,-0.4031492480916496,0.9341109781637059,0.30992683349959965,0.4796898344885026,0.8524090277465134,-0.20372198604716907,-0.5730798313866303,-0.7898825577085679,0.6519085369634449,-0.9989750146728263,0.7178154356251314,0.014757195779863837,0.9979091417245154,-0.11434653999024327,0.8016285880849785,-0.984789952999961,0.2226726892986798,-0.8623902552756967,-0.4625810006326335,0.90855491753901,0.9127354810945785,0.36249749081042604,0.4299803458015495,0.8802579633764759,-0.5178283368091599,-0.5264578728817771,-0.8228723706103738,0.6085788960606092,-0.9948926715560126,-0.05116856147851951,-0.6919786922994065,0.9999608630291352,-0.058733199364536554,0.7670203752190863,0.6025499006024007,0.16792554712689228,-0.8327975485729439,-0.5113322986781009,0.8838274932540157,-0.9464942292553471,0.41393853360942046,-0.9298259591096215,0.9053638395514261,-0.4692844599929579,0.964593456700192,-0.8532979490145866,0.5633528018856481,-0.9877100443600114,-0.10681691946330017,0.9983701601111703,0.9988965067586625,-0.0029368343703571743,-0.998603416539554,0.6461449421917099,-0.7945059517341845,-0.8006096785376589,-0.5584901832528603,0.8563458861466693,-0.963027695233473,0.317120929123664,-0.9078423865250942,0.9276484213517345,-0.4192781991613518,-0.8858052924031122,0.2694378190644588,0.5163711879721404,-0.9774495155843417,-0.1621324146134577,0.9936300075464617,-0.7632384809286731,0.05286868238571767,-0.9999955788314641,0.6877264672134569,-0.7593824095526157,-0.6119416156571813,-0.6039077009789893,0.826195734388224,-0.976560174756769,0.26370581342214305,0.9502428599581579,0.9470422655739863,-0.36796538380102717,-0.9103200533678362,0.322755538502674,-0.9614084796511069,0.8594018819673197,-0.2169426728087986,0.9857935056155633,-0.7981033644722192,0.10850944977839465,-0.9982715553669145,0.7271648993387578,-0.7218924802604967,-0.6551214680346743,-0.6474433218089279,0.7934709918675307,0.5682564976522839,0.20946893778780118,0.9661449152524597,0.9634849371298593,-0.31550591488328295,-0.9319980754067345,0.3750674872823072,-0.9445582123377826,0.8865940312364602,-0.2710768943482924,0.9748850744221382,0.17378530618385607,0.5977929116219404,-0.9934367185470213,0.7643373405438142,-0.6821529899580062,-0.6962598311989587,-0.04522826658026338,0.7582736354119729,0.613287181955297,0.1545793151471997,0.9790362702123621,-0.2522851843810758,-0.26206326658069884,-0.9507718054776383,0.426210650932964,-0.9247645131636157,-0.3339209949269669,-0.32436638619602043,0.9609387068143849,0.22846661773349883,0.5521284417095614,0.8051697692933114,-0.1202526904239618,-0.6402877748262944,-0.7352285098019249,0.010586282532757764,-0.9992265472842584,0.6564067410278748,0.09920799251681638,0.9888767528035503,-0.19789592230810601,0.8492843178160465,-0.9665827408916546,0.30426700866782297,-0.9020890632447435,-0.38599896587154664,-0.40696298455663227,0.9439978624565392,0.2824359817154938,0.5047434294045829,0.8370078118408938,-0.5882751414561906,-0.5964272952292331,-0.7719060696654809,0.6734619831138928,-0.9998639287906025,0.03341658538796726,0.043527517986412516,0.9956356981187622,-0.142889977054318,0.8185016099581647,0.5329461408180265,0.25063746207979004,-0.8766025238076292,-0.4368740870186676,0.9202016873081357,-0.9158340144304212,0.3355252188229659,0.4557855358602541,0.8662375710355118,-0.5422343196450548,0.9834320342877815,-0.8061782161946829,0.6311632090007897,-0.9973855347882827,-0.022405498099687206,0.9996215588601723,0.9992920439357583,-0.08743875812066247,0.785168287764996,0.5793318807591943,-0.8429844552622383,-0.8483843159945825,-0.486387821339534,0.8969248515341313,-0.936814411058845,0.38756889239999626,-0.9400316778835978,0.8927679611151927,-0.49450378749988305,0.971784265475794,-0.8379381505424974,0.5868976043901079,-0.9917990884475335,-0.07815776158461105,0.9995990773400206,0.9998343963514086,-0.031715062569723756,-0.9966692962928485,0.6239123069636809,-0.8116534297345119,-0.8175223733716326,-0.5343858741583433,0.8708530189560094,-0.9548755070563609,0.3442836865739582,-0.9195339487191598,0.9165163080907416,-0.44523228288268984,-0.8720830132950337,0.24161097647358692,0.5408031097382939,-0.9831219982498369,-0.13366646988932965,0.9964616456411719,-0.7443273689637266,0.02410746344440609,-0.9996669421098365,0.6665484979281358,-0.7777931301675183,-0.5889262931341595,-0.5807186739652828,0.842067434606293,-0.9699610204440433,0.29135744466283897,0.9408841279379375,0.9374086073743867,-0.39457334563318797,-0.8980309735884117,0.29538249321809457,-0.9689282246365853,0.8443308889434057,-0.18875864680290738,0.9902190406268232,-0.780432494253375,0.6634039744172737,-0.9995494262679634,0.7071075907741563,-0.741509072010979,-0.6331064626954974,-0.1294927689431769,0.8106578001095097,0.5443398051332723,0.23752327481852048,0.9583195921426837,-0.33316166085486676,-0.34268483910801234,-0.9211804901806426,0.3482335391749719,-0.953616558511821,-0.25306450652513496,-0.24326261410933545,0.9808907154998091,0.1453716749303823,0.6206164529944523,0.7521693506132493,-0.03592296133235504,-0.7029143236300027,-0.6753137461929993,-0.07395965028148595,-0.9923284023228607,0.590301317177641,0.1829489350559689,0.9727687412812563,-0.28002931738931436,0.8908632383825176,-0.9414594245589162,0.38368423314898825,-0.9353332329120907,-0.306655026758611,-0.4827047919044578,0.968505739182541,0.20035358335403866,0.5758949668702011,0.7877686921410185,-0.6545127128748273,-0.6621291539614973,-0.7154166173095113,0.7335263070449302,-0.9976809478526931,0.6344233325326765,0.12780448990730442,0.9841865489218474,-0.22602434669549024,0.8641262923268644,-0.9588045835173789,0.33155601290879305,-0.9141352223281026,-0.35928994874069414,0.9499916433992952,0.9531027057324434,0.25471115003467143,0.5293788771187271,0.820913189237672,-0.6113043778998394,-0.6192806577321659,-0.75329010749676,0.6944575096809564,-0.9999245204780425,0.06216623934810785,-0.7692225875728158,0.9925374348976114,-0.17131503903788806,0.8346965563220017,0.5083735770226719,0.27839459797577504,-0.8900885839905541,-0.41080525155204733,0.9310861296484159,-0.9038980213643978,0.3082749859483372,-0.9654948434967634,0.8514995570368123,-0.5661910965074894,0.9882417599505202,-0.7888161954022841,0.6532246441491384,-0.9990521287789399,0.006376126781469989,0.9984158040293024,0.9977953761815646,-0.11607187953551967,-0.986211633853849,0.5556339220186801,-0.8581168977259114,-0.8632682520226199,-0.4610404032300713,0.9092791657344887,-0.9263585028690969,0.422398137032212,-0.9494586413673826,0.8794324823133661,-0.5193134506842161,-0.8276060345629279,0.15873763673684424,0.6099562002858194,-0.9950664913019913,-0.04943385506847112,0.9999998915507878,-0.685225553488594,-0.06046701689626668,-0.9939095001616802,0.6011628008459841,-0.8281285054987455,-0.5185172258770865,-0.5098388610185314,0.8846387065082938,-0.9459322664391134,0.3711612273144817,0.9088911154173974,0.9046249204986118,-0.4708175205280748,-0.8576382699593466,0.21358397485560573,-0.9863653502780091,0.7960263803184289,-0.10508979116229873,0.9984677798765195,-0.7247996300383783,0.724268241272779,-0.9985101461485646,0.6448183364336122,-0.7955594996088983,-0.5654230833653123,-0.21283072311892215,0.8572415365573821,0.4714975617193449,0.31876770515326536,0.9307459344279312,0.9269983669284233,-0.4208544290340046,-0.884997933378832,0.26776474269151573,-0.9756452754166403,-0.17039728798237602,-0.16041824649790942,0.9938242433721823,0.0612365670047525,0.6846638221172998,-0.9999992352836229,0.6864644894219226,-0.7605113715773367,-0.6105669697048102,-0.1579763861339906,0.8271730309299793,0.5199721623826007,0.2653808392178908,0.9497003633916047,-0.36015904339696314,-0.3695798711644218,-0.9095997666509942,0.32111110216110833,-0.9618848952029585,-0.2251169059824976,-0.21524680656858586,0.9860837522240661,0.11683761267063553,0.6429258538785954,0.7328929206066961,-0.007147088034017897,-0.7230933383642899,-0.6538082075380194,-0.10262976320825218,-0.9883593484332307,0.5668264260359012,0.2111669936350917,0.9656953365257196,-0.30754146426617424,0.9035679680599484,-0.931367105554462,0.41010221024491345,-0.9451270897273693,-0.2791350147851678,-0.5077095078244578,0.9752704273470769,0.17207456902239532,0.5991844003938287,0.7697149997089583,-0.6760004238620947,-0.6834220020274085,-0.6950120485397674,0.7527828197996298,-0.9953088344489468,0.14629316418712834,0.15629510956519346,0.9786810103024538,-0.25396552456784477,0.8782523942374544,0.433777752673695,0.35857034449231734,-0.9254240796554813,-0.3322832831849243,0.9585852893095701,-0.8645140498897843,0.22677530668240536,0.5535757687599526,0.8041384932880432,-0.6338271883055077,0.9976281753322668,-0.7340500933199376,0.7148777232322983,-0.9991567395388624,0.09086439261002448,0.9900886541854517,0.9886169187712395,-0.1995981776202803,0.850200010713564,0.4833798586834711,-0.8984403575727996,-0.9028372634980935,-0.3843960905725626,0.9411992275051566,-0.8912132073995767,0.49749023935995207,-0.9725897563499964,0.8360561308693112,-0.5896788207602747,0.992232791396185,0.074728495590075,0.6747449250371754,-0.9998910728629309,0.035152469455039054,0.9963829264455597,-0.621220804053768,-0.1446088429246875,-0.9810404252389581,0.5314756566030162,-0.8725384459831131,-0.8774370262811831,-0.43531104304200136,0.9208802011068699,-0.9151351667280403,0.44830927277614824,-0.9580990399330066,0.8653684507254146,-0.543692896348754,-0.811108982868809,0.13025721791789963,0.6325094870212833,-0.9975095460919898,-0.02066899580887068,0.9995722706948884,-0.6639806709645482,-0.08916887822020346,-0.9903263144581891,0.5779152703292806,-0.8439175304949161,-0.4936939821222293,-0.4848694794420968,0.8976915282552975,0.39528165339245985,0.3977312850455646,0.8965125924289012,0.891984109818886,-0.49601271638715355,-0.842483028929257,0.18538003276398707,-0.9906930437431396,0.7782774748917751,-0.0764260523576787,0.9996467483003751,-0.023336701527139105,0.7438122765873849,-0.9965261492780915,0.6225539847596249,-0.812666799591707,-0.5414514572359033,-0.240862767485758,0.8717054694819667,0.44592249664038164,0.34591388726998284,0.9198366782640665,-0.43771175517072713,-0.4467868618300367,-0.8712317297678028,0.2399251664384175,-0.9815540673502575,-0.14196802606638506,-0.13194495007776694,0.9966061271749405,0.032485644123440065,0.7053564702366937,0.6727731450054394,0.07738911795757823,-0.7788836367865541,-0.5875216615710158,-0.1863291301326325,-0.9719658285502906,0.4951737564122049,0.29301855280018896,0.940294369471342,-0.3868580575255746,0.9365444236141618,-0.897265498696299,0.4857140394108477,-0.9693563726303942,-0.19698281068061962,-0.5787032900986729,0.9904598825007175,0.08820675802494972,0.6647026323823563,0.7130093363387553,-0.7358595436209319,-0.7426733171556382,-0.6317610311783003,0.8057218094101454,-0.9835715029120936,0.22937333045284056,0.23921011405279274,0.9578219158029275,-0.33479883298195157,0.9155241502663425,0.35607815663419146,0.43618044425210944,-0.954137970034148,-0.2513837575520637,0.979225568206149,-0.8189442972920689,0.14365300206823256,0.6219774484949377,0.7510236483106463,-0.6969281123324192,-0.704148679280108,-0.6740317073548152,0.771415700801191,-0.9921121722151582,0.17470250446520993,0.9746772103292151,0.9723646979271172,-0.2816963084711059,0.8916509209883693,0.40766711008396467,0.38528762379638243,-0.9359462831405929,-0.3050013424754435,0.9663848094656681,-0.8496910926803354,0.19865159469345534,-0.988761785640343,0.7866976207398718,-0.6558249139852319,0.9991959330227999,-0.71420196623917,0.7347057069451087,-0.9975612220297848,0.11948727061462806,0.9856366304768557,0.9838773976330372,-0.2277159620551566,-0.961151798298294,0.4579856914753882,-0.9107051890908378,-0.914838000875944,-0.35766848235762255,0.9505326028325524,-0.8777900810817998,0.5222495704433125,-0.9788789416562079,0.8199200864101823,-0.6126780343468928,-0.7587760392204076,0.04599844299870784,0.6957062235076351,-0.9999016720294819,0.06389969058707343,0.9935246102162035,-0.5984107895649553,-0.17302600726443432,-0.975056488245842,0.5068770980685934,-0.8862371527162562,-0.41843239587720793,-0.4092210558818585,0.9317183469457204,-0.9031537004419079,0.47384901335752744,0.8558645129579046,0.8505875174895476,-0.5676219277036119,-0.7939399799775206,0.1016688894402427,-0.9986521935219635,0.7224257870913103,0.008112986373507585,0.9983165690284731,-0.6421857235094325,0.7976385966858747,-0.985922707619384,0.5541889744851525,-0.85900742453963,-0.46846174491602477,-0.3220257247236415,0.9100006707805935,0.36868216099240897,0.423971848197272,0.8833913668905834,-0.26444942364860324,-0.5207969978739013,-0.8266298453392396,0.15702251533591177,-0.9942000122615235,-0.05780333485624272,-0.04769899952441232,0.9999975742138482,-0.052098766087619854,0.7627401116622224,0.6078395350644921,0.5997738874778376,-0.8291008578272058,-0.5170312736837765,-0.2686952726681144,-0.9486176873106323,0.4199780136881229,0.37277350216136096,0.9081653970576805,-0.4634065994503938,-0.47234916068226207,-0.8567437671623673,0.2118868277425102,-0.9866497053864667,-0.1134211528465004,-0.10336234582225615,0.9985623874247538,0.003707808992453897,0.7254647762582718,0.6512019401582156,0.10605031989337095,-0.7966106474082276,-0.5639896298375651,-0.2145275125291907,-0.9647965089604882,0.4699651310934163,0.32041351951183783,0.9301094026379413,-0.4132365848387528,0.9462451371004634,-0.8841879044577606,0.5106695805542634,-0.9760248011595563,-0.16868552789314573,-0.6019344178128775,0.9940154809895929,0.059502829799874306,0.6859287478568271,0.6925350700696717,-0.7550423681126154,-0.761638039261253,-0.6091904817698404,0.8224340356520866,-0.977968832179003,0.25729058290055995,0.26705506440221977,0.9491550017314088,-0.36177884257412823,0.9267218800800222,0.32903741697165556,0.461897331044705,-0.9623584089023897,-0.22342424517642798,0.9846557034430203,-0.8020892582361923,0.11511242791681833,0.6442552286111574,0.7317101225187036,-0.7172784410529278,0.9990096161281095,-0.6524929746068882,0.789409513915925,-0.9880936093787054,0.20296711504666226,0.9678378956682984,0.9652428444510689,-0.3091937252489705,0.9043107727690031,0.3812187417280881,-0.9423556436916177,-0.9456931158201463,-0.2774667279310735,0.9733837424708877,-0.834164221497537,0.5924530618262895,-0.9926547572342843,0.768605020225137,-0.6772793312496959,0.9999359216741753,-0.03858946052218773,0.7539250346205976,-0.9951392897336069,0.14801116116349908,0.9803680707320288,-0.5285591522281128,-0.255645098581368,-0.9528099263520817,0.4322121128193087,-0.9222155604130173,0.9137432002417237,-0.3306445689975221,0.959078523534353,-0.8636397626008193,0.5465762516220456,0.809092541632446,0.8031047913259428,-0.6351696839102369,-0.739716122319845,0.017230283680015845,-0.9994657753507699,-0.9990839174978708,0.09259397496893537,0.9898432232708866,-0.5751050305400324,0.8457576436925436,-0.9682647801782801,0.4818586247261009,-0.8992016694350841,-0.39212008959537453,-0.3827920556122391,0.941784624549996,0.288803826399038,0.49899620075736384,0.8406252031928154,0.8351019276505041,-0.5910807210979544,-0.7761132492946604,0.07299633488025017,-0.9997322455226216,0.7022269569114319,0.036888247472749755,0.9962338268189486,-0.1363103985932824,0.8146661860474536,-0.9807023277479858,0.5300035690112108,-0.8733856866341523,-0.44284141753085193,-0.34913884362046355,0.9215559367577675,0.341777239328614,0.4498611781645624,0.8695383088869763,-0.5366393690108813,-0.5451498328182056,-0.810091852523923,0.12853491493576863,-0.9968833505371478,-0.029047942642205372,-0.018932431163009578,0.999519966980418,-0.08081767019866284,0.7810360660132788,0.5847350561772505,0.1897071211241072,-0.8448480597637881,-0.49218276324751525,-0.2963051812402046,-0.9391181916522258,0.39368560618436377,0.3993242983781334,0.8957417597084465,-0.4887175414113172,0.9701955395725961,-0.8415460479000939,0.5815047678524217,-0.9909279681195738,-0.08478031755610584,-0.6672682480432376,0.9996914034868561,-0.02507309781785524,0.7449720817543881,0.6290912567297775,-0.8077541358379225,-0.813677717763538,-0.53999036926685,0.8675676807939119,-0.9568279180237851,0.33803769272347267,0.3475430443993021,0.9191539004759949,-0.4392727724370946,0.9551619478485147,0.24805339145380953,0.5352020650637878,-0.9818846564298123,-0.14024850008397077,0.995881177321198,-0.7487483052742265,0.03074960733868086,0.7065866158417127,0.6714870834014266,-0.7735996889619001,0.9916751738489556,-0.5861152575492712,0.8384649286249836,-0.9715559776833645,0.2849946867839656,0.943114075737052,0.9397017742874787,-0.3884591418542351,0.9371518809079368,0.30172409114509324,-0.9672633440795086,-0.9697815962315338,-0.19527964030127146,0.9892701152781017,-0.7845697402401339,0.6584174260757791,-0.9993279177891834,0.7117904223368925,-0.7370345510958616,0.9973152677375067,-0.630413693739421,0.8067493524364476,-0.9832564750583207,0.23106358053439457,0.9601967900688078,0.9573213498681078,-0.3364349950746667,-0.9237458076388757,0.35445455836424355,-0.9515953204582325,-0.9546565030752849,-0.24970225019452363,0.9795762901630694,-0.8179462993473475,0.6153926210463749,-0.9957253787290562,0.7498756802901778,-0.6981726665053751,-0.680199439141886,-0.06733160840915746,0.772519784292034,-0.9918929490641896,0.17641243406290646,0.9742873396110879,-0.5039093392751518,-0.2833624497203252,-0.9436787131654079,0.40608047445390033,-0.9329619359430703,-0.3129727319862337,-0.303346738052155,0.9668299098694043,-0.8487739745779406,0.5704501298182216,0.7918441881295009,0.7856241759982076,-0.6571351365770803,-0.7200433985777156,-0.011552149811433309,-0.9981111828328921,0.6395455141775375,0.12121155124665209,0.9853418153999792,-0.5513228342891244,0.8607631513326948,-0.9606709275260085,0.4564409627584179,-0.9114212558781597,-0.36548293724574665,-0.4270842522023059,0.951070694661434,0.2611309764364267,0.5237300021615281,0.8246894899559533,-0.1536249267563427,-0.6140498424426042,-0.7576435591106515,0.044263307590146496,-0.9999840841839923,0.05553311174378225,0.06563294905092347,0.9933257694831829,-0.16476488184306742,0.831018877299691,0.5140842690278195,0.5053790899476247,-0.8870404053206744,-0.4168542247466379,-0.3759627236247272,-0.9067202847860787,0.31458917738406433,0.47537782731631234,0.854964894778355,-0.5607016204691943,0.9872039874805769,-0.7928827511379736,0.09994083169325373,-0.9987408355982479,-0.00026848609125894297,-0.7278276326375581,0.9982143222667078,-0.10946962211044606,0.7986849826287477,0.561146162212228,-0.8546862516463979,-0.859895359865753,-0.4669265113067516,-0.3236696201830994,-0.9288406974677366,0.4163660712616684,0.42554428030728075,0.8825760583943161,-0.5136236125793324,0.9767676295856179,-0.8256511623059182,0.6046773149564543,-0.9943853112863219,-0.05606924727006775,-0.6884273798427862,0.9999922400446495,-0.05383323319244946,0.7638622261873609,0.6064594119876117,-0.8243856672550366,-0.8300707088913846,-0.5155437616900576,0.8815209491905548,-0.948066657201061,0.36498306117807106,0.3743846524103856,0.9074369389086513,-0.46494505102745204,0.9632874688588079,0.22007054078756222,0.5592911693667767,-0.9869310839310443,-0.11169528548667848,0.9980780508921709,-0.7293614963266433,0.0019709108217191807,0.7266591226329157,0.6498828132261496,-0.7915161326317838,0.9875586118379567,-0.5625544748435813,0.8538012077735071,-0.964338252059296,0.31246269104942104,0.9331550980117779,0.9294700648570943,-0.4148176279243623,0.9468055121707181,0.2741608064738604,-0.9741662144464148,-0.9764013823922237,-0.1669732589067388,0.9930649809704022,-0.7664002570885271,0.6798057259326089,-0.999968942254626,0.6912810499451505,-0.7561800758051053,0.9947947083169861,-0.15141172857994661,0.8234208514309206,-0.9776047765061319,0.2589686248286232,0.9517602236912563,-0.42910806996438483,-0.3633975503225629,-0.9123404250973476,0.327396732382865,-0.9600466622066095,-0.23158598819497947,-0.22173091033525305,0.9849573224179967,-0.8010507617266416,0.6378223673841288,0.7373973601947889,0.7305251169786545,-0.7184876109788073,-0.6588214848453647,-0.0960179764245767,-0.9893484232392065,0.5722879878398331,0.20466756069989064,0.9673994746054709,-0.4788420701098417,0.900701173968416,-0.9337657233562979,0.37961242474708223,-0.9429354130057028,-0.2855093491387167,-0.5019737825071163,0.9737803403167548,0.1786162661026929,0.5938514270718208,0.7739398430626312,-0.0695657539299957,-0.6785561953942056,-0.6997741655699918,-0.0403250130958454,-0.9959297199210502,0.13971681495383978,0.149728711613941,0.9800241157280154,-0.24753316586219526,0.8750555725168537,0.4397551000551649,0.4306451690503147,-0.9228857889104757,-0.3385430059817999,-0.452930173096261,0.9595688643730885,0.23324179639248172,0.5480299272193827,0.8080705749524075,-0.6286737606811577,-0.6365102633099253,-0.7385462103661721,0.015493611019891733,-0.9994075008740749,0.0842452664484338,0.09432327798667799,0.9895948061581104,-0.19308286807217548,0.8466831232982504,0.48918594805844356,0.29958830468955716,-0.8999602685501844,-0.39052169526750424,-0.402475142891203,-0.8942074250013725,0.2871404987051122,0.5005006567632883,0.8396831976933179,-0.5842993669927985,0.9913843320626178,-0.7750167978059912,0.6698259705955024,-0.9997709286388965,0.02851119288300452,-0.7472620340867449,0.9960817217147004,-0.13803088553870313,0.8156722405256306,0.5370923950384885,-0.8692729915016462,-0.8742302924206857,-0.441283441028515,0.9182695006666219,-0.9177937189946682,0.44235990446938517,0.45141172639397,0.8686792000451181,-0.5381041798894735,0.9825305309545503,0.13684233910177568,0.627348926114433,-0.9970188707020836,-0.027311727248392096,0.9997445266683369,-0.6689345164348655,-0.08254877122407847,0.7821195602974303,0.5833251549475589,-0.8403342486028739,0.9707357649148569,-0.49067005953636184,0.8947439346416884,-0.938519984628797,0.391626064833259,0.8994364835947893,0.8949682246788001,-0.4902321527916931,0.9706149686640733,0.19190537594841436,-0.9897667428507707,0.7824325790737452,-0.08304953858807265,-0.6685609183758457,-0.7093704586736985,0.7393546768731822,-0.9970575162141206,0.6277401572807845,-0.8087768565104507,0.9826239215537972,-0.23440846576513194,0.8684301679848407,0.45186005164144516,0.3396718402365134,-0.9175940845767987,-0.35123644153187217,-0.440832464487977,-0.8744741480623881,0.24637039735200747,-0.9802620512729896,0.8159628368069186,-0.13852855099433078,0.9960371567197683,-0.74759586101999,0.7006308508264796,-0.999781557292887,0.07076272976640137,-0.7746991543548998,0.991450025986586,-0.17979677408067618,0.839410199643465,0.500935619743792,0.2866591304096108,0.06195217560704227,-0.40293508950456786,0.6943031701669684,-0.9001792276729639,0.9952130095220229,-0.9677026675481248,0.8469503915285153,-0.9784781360785586,0.254918547266441,-0.8787232102137719,0.6597237192491334,-0.9993900795490124,0.014991176599108579,0.33135365991700444,0.45971951856908033,0.8640183314581847,-0.2258154146599862,0.5484501725014779,0.232753133534194,0.9597101818647017,-0.9976955231072847,0.7333805184057718,-0.9230791691940159,0.9991157929329638,-0.9521277292218834,0.7879007857647728,-0.5266568112528378,0.2005637070843604,-0.8507184008187965,0.6167607569254903,0.7553943390207449,-0.040827092065712015,0.3834861623208751,0.4094481999264038,0.8907657870129652,-0.9929231938158127,0.5942556450873553,-0.8329270666592046,0.9738945296243551,-0.9923548952789468,0.8886230669008401,-0.6754719141164618,0.3791474978292556,-0.9335857709098149,0.7523106672900188,0.6204482641213264,0.14558387037178577,0.20515939064443775,-0.5306406449042895,0.7907822258756302,-0.9535519738046775,0.4344236453245399,-0.9212639296852013,0.9147374386376173,-0.9980029732547538,0.11288762941258994,-0.800749870213573,0.5445197099488038,-0.9839218915886727,-0.12928009463281995,0.4638823682516256,0.3269218921700568,0.019683740402941526,-0.3638656438866311,0.6632434741792171,0.0901503652702439,0.990189093675721,-0.9774989038383528,0.8237058775269811,-0.9688751531302839,0.9947433790103651,-0.8981253083456912,0.6909178684289965,-0.9999727762938042,0.057267252182729676,-0.7660773773957692,0.4968681619259684,0.8419517322127315,-0.1844115678630878,0.512593681642405,0.27367753266292033,0.9469670980008668,-0.9996724541440847,0.7039718852321389,-0.9059864079383608,0.996443596190488,-0.9642051340985693,0.8132406583661597,-0.5621389627791292,0.24181909379462785,-0.8721879493391071,0.6495008193666201,0.7270042425256296,0.0014684187683211263,0.3440823134215976,0.44766827356862726,0.8707475740751752,-0.9870119324774733,0.5597076508414712,-0.8555866675159494,0.9634222525211638,-0.9966867638642933,0.907225682761291,-0.7060546708796899,0.4179446316881335,-0.9479067087695138,0.7795013054454191,0.5867239370713678,0.18729723763487946,0.16358122994910762,-0.4943173578468173,0.7641864282118784,-0.054334990531968545,0.3959401316378033,-0.9368894193578962,0.8968299927533129,-0.9944383594849266,0.6050774593199751,-0.825367561207413,0.5795066859922628,-0.9905951987557,-0.08722510042809559,-0.6654385516376466,0.36659959332947756,-0.022619920894199754,-0.32414502299593534,0.6309968352704712,0.1321917259105494,0.21837588633146493,-0.9855458045536976,0.7989872565068712,-0.9575382677025938,0.9981841802713177,-0.9159201181763932,0.7208755484917904,-0.9987659181402566,0.09944084208465263,-0.7925764448895083,0.5331276082226133,-0.20803286961273026,-0.14267769745714373,0.4758198512761099,0.3141121574890326,0.9325293183923388,-0.9998603677401507,0.6733034214257366,-0.8872722901292162,0.9919881603831541,-0.9745569939787951,0.8371251525430439,-0.9721341542396164,0.28264172017974315,-0.8920966271497197,0.6810785327915287,0.6973130966078016,0.043761301714813766,0.30406269356933696,0.48508719844881626,0.8491710681284707,-0.19768568231190609,0.5241580017586286,-0.7860888788651306,0.9512258314692156,-0.9992349582110329,0.7135118597731144,-0.7353738696494181,0.4559938103220259,-0.9605312693536888,0.805296945244372,-0.5509035389807021,0.2286754170838636,0.12171032369282653,0.639159140484967,0.7362230397513854,-0.012054607603023041,0.35674804205898314,-0.9508382483360585,0.8773175766692619,-0.9890940952291044,0.5708627713204805,-0.8485081714275506,0.613456574773825,-0.995495733171078,0.9014543946953204,-0.6964137647037223,0.40562122653032495,-0.0648831014990703,-0.283844310999335,0.5976209621423897,0.17399651575989797,0.17690702364449581,-0.9918289689315254,0.7728387650017945,-0.9444877683266663,0.9998386275118437,-0.9320757940498238,0.7495431470648879,-0.9957716648860875,0.14143647229580567,-0.8176571147099454,0.5684329674227366,-0.2492156435206465,-0.10068849052762494,0.438194491982463,0.3539846460616501,0.9164226809417411,-0.33690815341411634,0.6414300113803506,-0.8669703066195205,0.9857574589750024,-0.9831647831366661,0.8070461704530774,-0.9613494495241518,0.322958529919832,-0.910408805608795,0.7114373856100233,-0.42486414545784845,0.08597586927742995,0.2634989220205711,0.5216380095236243,0.8260748825659573,-0.1560492077599522,0.4876703176194443,-0.7592428436929991,0.9373270932277514,-0.9999949180613433,0.6832402367159449,-0.7633770406814518,0.4932269407831883,-0.9714368597030429,0.8296514227165652,-0.5857080499891748,0.26964435817909077,0.0796216042009189,0.6711146433058619,0.7069421038753112,0.030247348295302193,0.31691751489338604,-0.9630854537448823,0.8562351098758839,-0.981979744601935,0.535626465240059,-0.8701302883542137,0.6463086194496965,-0.9986147248206868,0.9189558532304057,-0.7261426731768711,0.4439169585166431,-0.10703016707075216,-0.2430356301968264,0.563175584378276,0.21548992081512627,0.13512156750796595,-0.9963371525981335,0.7453071984467534,-0.929747010223401,0.36934852955406783,-0.9465634237099887,0.8837271377356749,-0.9909953750577535,0.18317898728442342,-0.8412745023996283,0.6027210569277797,-0.994122648840195,-0.058519091111168695,0.3997849382405843,0.3932236424309654,-0.05138275649429136,-0.29678507132714105,0.6084086958659158,-0.845116789912415,0.9777626424518159,-0.9900130970415626,0.7813497670739302,-0.9488443103556733,0.3626973719063179,-0.9270917131755096,0.7405230475092621,-0.9969228661879151,0.12803657411332803,0.2224635918476227,0.5572552953293115,0.8015003504048793,-0.11413346698120781,0.4503098969154654,-0.7310380647808672,0.9217509110290139,-0.9989652833883269,0.6517458844591973,-0.8736303050269284,0.5295773905266385,-0.9806039631336309,0.8525211530010004,-0.6194643757523053,0.3101307427553521,0.037390393598063745,0.7018691169330155,0.6763960218524374,0.07249517342968377,0.2765198309965336,0.5100530150393845,0.8336203216320281,-0.9731080394710403,0.49943160009955667,-0.8901952169687217,0.9419534521531601,-0.9999465919457856,0.9348127450457835,-0.7545720740949311,0.48141825510791597,-0.9681390716130347,-0.20179201195121887,0.5277223455507993,0.25659768432842506,0.09309429732535636,-0.43132324645293646,0.7164418274328634,-0.9133423735068315,0.3297143791770335,-0.9593570800424323,0.8631425656016218,-0.9844455963208122,0.22459368449465855,-0.8633863421961003,0.6359305146487104,-0.997811867399695,-0.016244965717538848,0.3606599279268152,0.43175892434710994,-0.09357515233030475,-0.25613086160275544,0.5742985699481472,-0.8217508491404644,0.9680180183661692,-0.9950896799261433,0.7542550573247178,-0.9346411159764799,0.40178712936380745,-0.9421154940581236,0.7682834666834789,-0.9927154242623731,0.16986814423295882,0.1810301400258344,0.5918753150423374,0.7754914503169024,-0.07201347253702094,0.41214359999075323,0.3807541466275813,0.9045251600650199,-0.9961478968299197,0.6190851654096163,-0.852268612208804,0.9805091881394773,-0.9880161741639867,0.8738652083456183,-0.6521121058273782,0.35006211623233074,-0.9219380882105366,0.7313675230491555,0.6446394590616675,0.11461326093940931,0.2356272862096859,0.545975713855219,0.809513683444556,-0.9624948566720202,0.4623429503605813,-0.9086670490022318,0.9269105737374573,-0.999488951032149,0.9489966925904911,-0.7816510900991621,0.5180580038480849,-0.9778638128606092,0.845374874660744,0.4913246929044347,0.2972462396974837,0.05090042525143976,-0.3927795394800914,0.6862943095325256,-0.8953032159741772,0.28949017075412303,-0.9704338674734945,0.8410133104093334,-0.976134050182988,0.9910599263757508,-0.8839530626708614,0.6680019088198403,-0.9997153982312305,0.026058231725513106,0.320889479301167,0.4695215289301466,-0.13560008573515453,-0.21501827916176855,0.5391606772317972,0.24350408456909634,0.10654996560989799,-0.9983854467193111,0.7258105299960353,-0.9187652844746197,0.9985891958998502,-0.9554532616440137,0.7946689629860827,-0.986731415221944,0.21139571770709029,-0.8564845022177806,0.625436112550169,-0.3173755459049805,-0.02976460252183831,0.37323972938836925,0.41952193124269266,0.8856806676020174,-0.9915478003912999,0.5853165293081788,-0.8293816963987778,0.9713221401110126,-0.9936602278744333,0.8936453913517517,-0.9393642970239998,0.38936701727958134,-0.9374952728061225,0.7595570711999717,0.6117292471626665,0.1565262361426889,0.19431306197894188,0.5809213325582075,0.7839583366403848,-0.9501591895952101,0.4244268900048919,-0.7110979004747209,0.9102088928054477,-0.9972426210756115,0.9614823122206853,-0.8073312604845516,0.5537706341102424,-0.985838565490794,0.8672108949641427,0.45404776381004414,0.33736284212054796,0.008615461592336317,0.7220782480227665,0.6549185968528475,-0.8756618205670241,0.24874788967426062,-0.9797739629443134,0.8173789747539647,-0.9660756110173204,0.4742914517446903,-0.9029378575465399,0.6988778443581268,-0.9998298347691384,0.06831479526279086,-0.7731451645061433,0.5064438760862892,-0.17738234873597394,-0.17352089923046135,0.5030579006167991,0.2843073770302098,0.0644011483691113,-0.9998944993048887,0.6960670895169021,-0.901245227295587,0.9954498290856274,-0.9670811466160523,0.819632316837428,-0.9789815480708566,0.2525449766399871,-0.8775492533651245,0.6578776273281637,-0.3571991850093548,0.012537534333705207,0.33366790761589693,0.457538937891829,0.865251157811897,-0.985173226421697,0.5505004086282264,-0.8050105161041877,0.9603968104663785,-0.9975260236460304,0.9118263033323285,-0.9240201740670991,0.42797510570398534,-0.9513747124696531,0.7863873132681042,0.5777242823897173,0.19815909142745833,0.15265109438945906,0.6148273323426867,0.7570000151606145,-0.936123114195041,0.38575127375128065,-0.6807248226733351,0.8918782987457534,-0.9932116221163906,0.5962274475229831,-0.8315666279252674,0.5884922344420637,-0.9920490578574297,0.8874949515123596,-0.6736604296282952,0.3768756987807804,-0.033684920328003354,0.7506917699198642,0.6223708394827573,0.14315570294662425,0.2075604484710716,-0.987360651386242,0.7922818547281134,-0.9542882794429314,0.43663256194727523,-0.9203067515655395,0.7285030655776222,-0.9981549722173766,0.9576773973219168,-0.79927759227371,0.5424598894494825,-0.2188471676437292,-0.13171298567009573,0.46605484976280254,0.32460187198077084,0.022137078600201008,-0.9996141370769094,0.6650779648560107,-0.8821122983970964,0.26182300277994336,-0.976978339669224,0.8431288537291456,-0.9694796919994033,0.2932422801689857,-0.8970435391936882,0.6891418019241021,-0.39638357915989586,0.05481723397244454,0.2934989525487505,0.4947371312023462,-0.16405766852130818,-0.9770355828817503,0.514699110425292,-0.7791986860774635,0.9477527512150349,-0.9996066432366787,0.7057125745853036,-0.907022421263599,0.4658172883308149,-0.9635515685056908,0.8118102337552764,-0.9816500123917321,0.23943732048527303,0.11071594184916786,0.6476330349087708,0.7286869637148998,-0.0009854558893592992,0.34638531562252267,-0.6491335172664424,0.8719515960558236,-0.9874031680448078,0.5617394659598768,-0.8129595139296782,0.6221606669419727,-0.9964841756409074,0.9061907438844086,-0.7043148170607259,0.4157140973269451,-0.07592501959305258,0.7779618511095236,0.5887092850066019,0.184886226335113,0.16600155633834865,-0.9931803556341959,0.7657668642285788,-0.9407931501110528,0.3981922729372703,-0.9360286612922837,0.7568245550752485,-0.9946938079160271,0.9689945976174539,-0.8239796299703712,0.5775051146319066,-0.259920336868484,-0.0896693580740396,0.42821774546349206,0.3643154582468312,-0.020166607764663762,-0.9975448617726306,0.6328986142629724,-0.8614007381379274,0.22076987685507388,-0.985127128751033,0.8004604823970232,-0.9582428515635872,0.33341479625244835,-0.9149324726590229,0.7191726858580141,-0.9988847834068412,0.09699883249093899,0.2528047506942488,0.5310499411529134,-0.20563205662989983,-0.14510603569639213,0.47797670483216803,-0.7519923992630076,0.9334125902111637,-0.9998983631620312,0.6751157051526955,-0.8884014578534142,0.5028258426531289,-0.9740040491686178,0.8357803357110049,-0.9727064770889048,0.2802870516480672,0.06858265165877503,0.679279731052457,0.6990698514425442,0.041309647850731275,0.30639946507971055,-0.616380520168496,0.8504644456348865,-0.9798276536912846,0.526246193416125,-0.7876032840550102,0.6547156784613559,-0.9991359817383958,0.9232648140226197,-0.7337087601483459,0.453808532420487,-0.11802924316834267,-0.23228340733527678,-0.5488539542939003,0.22628587666403732,0.12414558721981182,-0.45929056261649287,0.7378814545782894,-0.9256143739539623,0.9993730974852701,-0.6593606914685383,0.8784925740884778,-0.9894525359772463,0.9785776816752891,-0.8472070707400934,0.611516834571782,-0.7766435862965987,0.511208535488521,-0.6946506694457587,-0.16806750825257763,0.49826682164791214,-0.28619640243984185,0.5995866260200331,-0.4001135030906275,0.692082646953573,-0.8988331885951398,0.9949071971673823,-0.9452911362537069,0.9997915349431002,-0.9778377591582855,0.7479165357513603,-0.47255540395551854,0.6620358660934752,-0.3623632739561891,0.5664123822074638,0.32844529297030606,-0.10312958968135,0.44039891039876494,-0.22281307924713403,0.5458714216061923,-0.998400661359054,0.9588399361942378,-0.9978998238083109,0.9861671668103166,-0.982713448661223,0.9989815228282177,-0.6281160337323003,0.7897942355480317,-0.5292732674548454,0.7097107857318296,-0.4226414803934349,-0.47981618746956967,0.2658652809456439,-0.582524446261602,0.38063904157054335,-0.6766600162403252,0.8893614321595404,-0.9925526061273724,0.9381793249987023,-0.9999997304681085,0.9731905536610916,-0.7617896553842588,0.4910908301225379,-0.6777404770044881,0.38199651282870695,-0.5837173683582203,-0.30839339940053967,0.08206744670922986,-0.42131020126685953,0.20214310934378743,-0.5280268148449243,0.3192439440835157,-0.9526194110346822,0.999046702523974,-0.9824405362002584,0.9864094995735212,-0.9978036295210334,0.6444341817720504,-0.8025914906124733,0.5471011755908226,-0.7244533412472158,0.4417167852010265,-0.10459006754878024,-0.24541519777689805,0.5652016153818742,-0.36099426274681407,0.6609346133548509,-0.8794917300994817,0.9897538964732968,-0.93064772450634,0.9997604751561335,-0.9681078931187489,0.995054134069916,-0.8994758140986202,0.693141832290071,-0.4014588269957652,0.6007611696135455,-0.28760309012805757,-0.060968582579493065,0.4020329764819567,-0.18138269031259566,0.5099459419797232,-0.2991274897099715,0.9459726354074446,-0.8464260410535138,0.9782743116315065,-0.9896641806106639,0.9961792680243376,-0.6604639771200657,0.8150296253458903,-0.5646842827818856,0.738871739421335,-0.4605944434100982,0.12560251247611126,0.22485530334290088,-0.5476258844981149,0.3411879566945358,-0.6449134746437295,0.4524995363412613,-0.9865123204904703,0.9226997047984727,-0.9990738760621938,0.962592051772584,-0.9969326161624761,0.9085173154367852,-0.7082330405990531,0.4207415080262531,-0.617536159708247,0.3077969270086476,0.03984243799909845,-0.382575861656746,0.16054111142293406,-0.49163689331446636,0.2788771904547164,-0.9389025834186442,0.8349731788117506,-0.9736703572852338,0.9924760354625042,-0.9941091651602375,0.6761982472290679,-0.8271030742929858,0.5820147214498844,-0.7529595287281173,0.4792660081944075,-0.6677350958799309,-0.20419479718810477,-0.025699866813564197,-0.3212289857643179,0.628603768780819,-0.4335358257280477,0.9828293286251704,-0.9143388222241293,0.9979402404057114,-0.9566454976910893,0.998365019801286,-0.9171522998321749,0.7230073493558253,-0.8621456574326747,0.6340348326569435,-0.32785303985950565,-0.018698465881668597,0.362947562895888,-0.13962769825923443,0.47310786125051163,-0.2585021073335436,0.5763056939169409,-0.8231467070215698,0.9686307332052211,-0.994843805961896,0.9915942471982419,-0.9752429082368069,0.8388064351774669,-0.5990847370734416,0.766710405572747,-0.49772312494441207,0.6833311246657299,0.18344292387577285,0.04683898417629068,0.30112628061681557,-0.6120127935596257,0.4143781290944645,-0.978706568835634,0.9055688178682243,-0.9963600754330463,0.9502708916655829,-0.9993507040559659,0.9809883564136993,-0.7374581477817871,0.8726695821939937,-0.650249806112625,0.3477624545537313,-0.5534720991155486,-0.34315686290045877,0.11865180854824327,-0.4543671366209991,0.23801135719690653,-0.5588907414914275,0.8109519174490988,-0.963157694376089,0.8758348855879579,-0.9886356394408011,0.9797021644840672,-0.850134471319299,0.6158866916577204,-0.7801182171122124,0.5159575350055478,-0.6986213962854493,-0.16260896885149045,-0.06795714339069514,-0.2808888362266971,0.05335096401123294,-0.3950350185702155,0.6880770037763041,-0.8963936158776044,0.9943340881905287,-0.943471086019635,0.9998892278811522,-0.9766640160763403,0.7515789698533445,-0.8828030301151043,0.6661738246698915,-0.819426891744356,0.5709649692196554,0.32321261703812276,-0.09762282797189792,0.4354231049811101,-0.21741410865057545,0.5412257128684481,-0.7983942666646094,0.9572536897143025,-0.8654308245823152,0.9852346657197893,-0.9197313176083205,0.8610821139778627,-0.6324130671520527,0.7931769640084011,-0.5339610793735718,0.713599069092411,-0.4276510828861609,0.08904489511621465,0.26052570785783385,-0.03221729856769512,0.37551514924862744,-0.6725744816358521,0.8868173217051866,-0.9918631852080902,0.9362491233327935,-0.9999803503138437,0.9719026664897488,-0.76536349719514,0.8925414669750306,-0.6817997631113911,0.8313674629740527,-0.5882023605015371,-0.30312374938078934,0.07655016596769434,-0.41628424285594245,0.19671957795313608,-0.5233185122819758,0.31399397714366345,-0.950921360972401,0.8546395257254893,-0.9813928478041549,0.9112224225114255,-0.997421721039476,0.6486564688138983,-0.8058808031125093,0.5517257023453167,-0.7282574413125753,0.4466754950758134,-0.11009280361814631,-0.240046007011514,0.011069217463062359,-0.3558272553139202,0.13206833901734705,-0.8768442202729683,0.9889484720936368,-0.928608235079178,0.9996240305812205,-0.9667064381243565,0.7788055619072145,-0.901880535300874,0.697120629596005,-0.8429360380363362,0.6051765600739583,-0.7715865191628614,-0.05544325151842519,0.3969591139476812,-0.17593702489216578,0.5051771523260608,-0.2938416307643203,0.9441635415569439,-0.8434658175944869,0.9771119047190029,-0.9023058000690043,0.9956806545469048,-0.6646096285176291,0.8182240500795652,-0.5692434551232227,0.7425899540432555,-0.4655000418874642,0.13109145098967578,0.21945889734949225,0.010083816573523967,0.33598014613308774,-0.11107221577183078,0.4475569616680301,-0.9855912530383422,0.9205518401815546,-0.9988204281188882,0.9610776560375213,-0.997350517580641,0.9108160563175692,-0.7121295687873535,0.8541274405612169,-0.621879972815066,0.7848691055392955,0.034311528933172464,-0.37745636530376164,0.1550757486409327,-0.486809750369587,0.2735578046659131,-0.9369832552606998,0.8319146998757113,-0.9723937519764161,0.9931384967411488,-0.9934940697920072,0.9716702349023177,-0.8302011819118934,0.9359024417623886,-0.7565901941879055,0.48411630025961633,0.4301509811090537,0.3746016303748378,-0.25785291831832435,-0.3159827023141383,-0.3729488795710737,0.67052398035476,0.7142890879858105,-0.9120835434815349,-0.9352732637017807,-0.9550188388331781,0.9986660924383475,0.9936954226195975,0.7268198649212231,0.6838215818050419,0.6383051247668344,-0.333076802284431,-0.2752713045391738,-0.2164521198337259,-0.13414508359747196,-0.19400554207033943,0.5209583403978081,0.5717737260614739,0.6204835541870648,0.9672405007183573,0.9808577279120079,-0.9877395680562894,-0.9764518926238634,-0.9615684317445549,0.8075162081554601,0.7702518973256663,0.7301511328172434,-0.449149728350568,-0.3941295218748198,0.05236688568012,0.2958438717324579,0.35323965416176556,-0.6546816638348955,-0.6993261424140642,-0.7413953515052915,0.9275778191325188,0.9485326975348868,-0.9995348131966842,-0.9958445131447513,-0.9884870142940105,0.8753588685905347,-0.6544446664792942,0.3529463607872236,0.2955444044348326,0.23705410540380872,0.11315439520790015,0.1732121606903652,0.23263207215120527,-0.5542925847683053,-0.6037570411471047,0.8419760109372095,-0.9765194745260809,-0.9877884579627941,0.9807966360110184,0.9671608711901921,-0.8198118692653972,-0.7835689505143868,-0.744440538017937,0.4679475031160326,0.41348105974282623,0.35749197179448405,-0.012850994609027843,-0.33337237133094555,0.6385464093776343,0.6840502826902303,0.7270351398894733,-0.9194673289798511,-0.9416221343727823,0.9999562911457162,0.9975480120888922,0.9914662610960394,-0.885389394072169,0.670291376299051,0.624044743878222,-0.31568526270371794,-0.25755002088742907,-0.09211307577583755,-0.15234127536322464,-0.21200847799310815,0.5365634247272998,0.5867603764409345,0.6347965822557169,-0.8626445303843557,0.9842719838699554,-0.9847025210041936,-0.9723205535778761,-0.9563580143664344,0.7965353950258653,0.7583968425870289,-0.48653589432312816,-0.43264758511470724,-0.3771660505749247,0.033998226301144824,-0.026684984731789107,0.3703797537460685,-0.6684683440123699,-0.7123496157041134,0.9109454222903627,0.934290241484969,0.9541945355714018,-0.9988051572197864,-0.9940018753701272,0.8950237512215896,0.8663222351394745,0.8344304862266824,0.3356848672995109,0.2779306953675771,0.219153043265044,0.131402224786543,0.1912900204385168,-0.5185941788680944,-0.5695011652424525,-0.618310962787099,0.8517527020686336,0.8819645910911327,0.9881677999114086,0.9770451702027816,0.9623245703017659,-0.8091454290120887,-0.7720138017626754,-0.7320392326191035,0.45162052191033164,0.39667136604486686,-0.055130245454347145,0.005534693503849029,0.06617925094555224,0.6525872985338657,0.697345350001071,-0.9020159121993623,-0.9265402995339405,-0.9476527009323126,0.9996153860266411,0.9960927225532388,0.9889019462495381,-0.8766934613080622,-0.8459008685942543,-0.3555342693799837,-0.29818700949194055,-0.23974167552848197,-0.11040437815855177,-0.17048596998110369,-0.22993974698309294,0.5519871302022367,0.6015486794860962,-0.8404797561907449,-0.8717980731750801,-0.8999059925475887,-0.9813326070306755,-0.9678605331866078,0.8213934101012749,0.785285322623454,0.746285420857525,-0.470391380670962,-0.4159991905322255,0.9753863241198844,-0.9915100053619713,-0.9817973038919977,0.3873946508801321,0.8227777452472435,-0.7251322877181448,0.9183757762386439,0.9406868381847329,0.1389845602323299,-0.9977378670938,0.27057152142225965,0.3284665443907451,-0.6345369375782614,-0.62620473583115,0.8915843709563133,0.9174109444557174,0.20117789905857258,0.14960563541316763,0.9369911158469795,0.9140756261930102,-0.5845172326524233,-0.6741402730706407,0.8612414683763642,-0.9837793343398014,-0.9928485406535935,0.08693521997952251,0.9571629670907674,-0.4798359279063687,-0.7601976829697518,0.7918854096273218,0.4351408757834257,-0.9705040608094282,-0.983340279735349,0.9855950584942079,-0.3678077914487003,-0.8346156050366232,0.710404688048635,0.751785721498363,-0.9333000642106192,-0.1599000310019457,0.9989365728703107,0.9943007157746262,-0.30841480238221164,-0.867701172794608,0.6425558636332139,0.5948960213541391,-0.9087885033617725,-0.2218522883606966,0.9998554628546199,-0.18857303385389695,-0.9224491265832717,0.5672242430232747,0.6896122802994141,-0.8502995002579108,-0.8806569150439222,0.9901012899594424,-0.06584399852353615,-0.963073339106661,-0.9449691940134067,0.5141421645665176,-0.7787914484135322,-0.454087856833072,-0.3992101723939866,0.9792754182153254,-0.002767357348525109,0.3480563560687774,0.8460800152743135,0.812189302375469,-0.7376698374266187,-0.5093871555037385,0.18074395434957172,0.12075447002330733,-0.9963333036033996,0.2882250598750188,0.8780213400603996,0.8473735723169314,-0.6117648441257423,0.8997594239817557,0.24242740964395107,0.6242984555094201,0.636422929754616,-0.8855403006692673,-0.5496774483634197,0.9975706862449201,-0.13656522931740545,-0.9415127555457349,0.5230417655967238,-0.9948755504494313,-0.821386993555915,0.9516778063754883,-0.4958850877983412,-0.7481245884333878,0.8029787495040018,0.4185141354827795,-0.9747723789716813,0.7686918416374382,0.982319153362526,-0.38484190206733154,-0.8243474589270998,0.7232238822797359,-0.987737811770392,-0.9397443379522079,0.8418007669400437,-0.7010700498134831,-0.5540222711680631,0.9284876892681121,-0.8584155682674929,-0.9994573350888598,0.5800175330960321,0.9020207687383159,-0.2038879066776521,0.9999990427143722,0.8755158234675858,-0.9151944106016352,-0.99587403421933,0.6761816710702295,-0.8598318107388916,-0.3232339090353698,0.9925143695637101,0.941100498740164,-0.9579605895917942,-0.9976550207227836,0.2717470769629928,0.8861070162692367,0.9665371566493999,-0.44943984161460054,-0.7820489994470531,0.7704589533862857,0.4657874237050171,0.6495683966908705,-0.8774361388563805,-0.2893943281463043,-0.4934800486552872,0.9525240129458906,0.1024835602085386,0.5083357904937122,0.7384938705533951,0.8690734653500267,-0.6625224867065549,-0.5971181526245029,0.13717013899804675,0.7926306375533936,0.4340409274783896,-0.9707977768377454,-0.8601434377311886,-0.25518903147552735,0.9986828070619297,-0.9149481377399974,-0.9351582819486202,0.06874772134105935,0.9749084964969886,0.49494837134147196,-0.6887273174352959,-0.5682296481989298,0.6234556990959228,0.9287142914283298,-0.33025847657771956,-0.9858728450443078,0.0],"x":[-1.8110048645192806e18,-1.8105520000870428e18,-1.810099135654805e18,-1.809646271222567e18,-1.809193406790329e18,-1.8087405423580913e18,-1.8082876779258534e18,-1.8078348134936156e18,-1.8073819490613775e18,-1.8069290846291397e18,-1.8064762201969016e18,-1.806023355764664e18,-1.8055704913324262e18,-1.8051176269001882e18,-1.8046647624679503e18,-1.8042118980357123e18,-1.8037590336034747e18,-1.8033061691712369e18,-1.8028533047389988e18,-1.802400440306761e18,-1.801947575874523e18,-1.801494711442285e18,-1.8010418470100475e18,-1.8005889825778094e18,-1.8001361181455716e18,-1.7996832537133335e18,-1.7992303892810957e18,-1.798777524848858e18,-1.79832466041662e18,-1.7978717959843822e18,-1.7974189315521441e18,-1.7969660671199063e18,-1.7965132026876685e18,-1.7960603382554307e18,-1.7956074738231928e18,-1.7951546093909548e18,-1.794701744958717e18,-1.794248880526479e18,-1.7937960160942413e18,-1.7933431516620035e18,-1.7928902872297654e18,-1.7924374227975276e18,-1.7919845583652897e18,-1.7915316939330516e18,-1.791078829500814e18,-1.790625965068576e18,-1.7901731006363382e18,-1.7897202362041004e18,-1.7892673717718623e18,-1.7888145073396247e18,-1.7883616429073866e18,-1.7879087784751488e18,-1.787455914042911e18,-1.787003049610673e18,-1.786550185178435e18,-1.7860973207461972e18,-1.7856444563139594e18,-1.7851915918817216e18,-1.7847387274494835e18,-1.7842858630172457e18,-1.7838329985850079e18,-1.78338013415277e18,-1.7829272697205322e18,-1.7824744052882941e18,-1.7820215408560563e18,-1.7815686764238182e18,-1.7811158119915807e18,-1.7806629475593428e18,-1.7802100831271048e18,-1.779757218694867e18,-1.7793043542626289e18,-1.7788514898303913e18,-1.7783986253981535e18,-1.7779457609659154e18,-1.7774928965336776e18,-1.7770400321014395e18,-1.7765871676692017e18,-1.776134303236964e18,-1.775681438804726e18,-1.7752285743724882e18,-1.77477570994025e18,-1.7743228455080123e18,-1.7738699810757747e18,-1.7734171166435366e18,-1.7729642522112988e18,-1.7725113877790607e18,-1.772058523346823e18,-1.771605658914585e18,-1.7711527944823473e18,-1.7706999300501094e18,-1.7702470656178714e18,-1.7697942011856335e18,-1.7693413367533957e18,-1.768888472321158e18,-1.76843560788892e18,-1.767982743456682e18,-1.7675298790244442e18,-1.7670770145922063e18,-1.7666241501599683e18,-1.7661712857277307e18,-1.7657184212954926e18,-1.7652655568632548e18,-1.764812692431017e18,-1.764359827998779e18,-1.7639069635665413e18,-1.7634540991343032e18,-1.7630012347020654e18,-1.7625483702698276e18,-1.7620955058375895e18,-1.7616426414053517e18,-1.761189776973114e18,-1.760736912540876e18,-1.7602840481086382e18,-1.7598311836764e18,-1.7593783192441623e18,-1.7589254548119247e18,-1.7584725903796867e18,-1.7580197259474488e18,-1.7575668615152108e18,-1.757113997082973e18,-1.7566611326507348e18,-1.7562082682184973e18,-1.7557554037862595e18,-1.7553025393540214e18,-1.7548496749217836e18,-1.7543968104895457e18,-1.753943946057308e18,-1.75349108162507e18,-1.753038217192832e18,-1.7525853527605942e18,-1.7521324883283564e18,-1.7516796238961183e18,-1.7512267594638807e18,-1.7507738950316426e18,-1.7503210305994048e18,-1.749868166167167e18,-1.749415301734929e18,-1.7489624373026913e18,-1.7485095728704532e18,-1.7480567084382154e18,-1.7476038440059776e18,-1.7471509795737395e18,-1.7466981151415017e18,-1.746245250709264e18,-1.745792386277026e18,-1.7453395218447882e18,-1.7448866574125501e18,-1.7444337929803123e18,-1.7439809285480745e18,-1.7435280641158367e18,-1.7430751996835988e18,-1.7426223352513608e18,-1.742169470819123e18,-1.7417166063868849e18,-1.7412637419546473e18,-1.7408108775224095e18,-1.7403580130901714e18,-1.7399051486579336e18,-1.7394522842256955e18,-1.7389994197934577e18,-1.73854655536122e18,-1.738093690928982e18,-1.7376408264967442e18,-1.737187962064506e18,-1.7367350976322683e18,-1.7362822332000307e18,-1.7358293687677926e18,-1.7353765043355548e18,-1.7349236399033167e18,-1.734470775471079e18,-1.734017911038841e18,-1.7335650466066033e18,-1.7331121821743654e18,-1.7326593177421274e18,-1.7322064533098895e18,-1.7317535888776517e18,-1.731300724445414e18,-1.730847860013176e18,-1.730394995580938e18,-1.7299421311487002e18,-1.7294892667164623e18,-1.7290364022842243e18,-1.7285835378519867e18,-1.7281306734197486e18,-1.7276778089875108e18,-1.727224944555273e18,-1.726772080123035e18,-1.7263192156907973e18,-1.7258663512585592e18,-1.7254134868263214e18,-1.7249606223940836e18,-1.7245077579618455e18,-1.7240548935296077e18,-1.7236020290973699e18,-1.723149164665132e18,-1.7226963002328942e18,-1.7222434358006561e18,-1.7217905713684183e18,-1.7213377069361805e18,-1.7208848425039427e18,-1.7204319780717048e18,-1.7199791136394668e18,-1.719526249207229e18,-1.7190733847749908e18,-1.7186205203427533e18,-1.7181676559105155e18,-1.7177147914782774e18,-1.7172619270460396e18,-1.7168090626138015e18,-1.716356198181564e18,-1.715903333749326e18,-1.715450469317088e18,-1.7149976048848502e18,-1.714544740452612e18,-1.7140918760203743e18,-1.7136390115881367e18,-1.7131861471558986e18,-1.7127332827236608e18,-1.7122804182914227e18,-1.711827553859185e18,-1.7113746894269473e18,-1.7109218249947092e18,-1.7104689605624714e18,-1.7100160961302333e18,-1.7095632316979955e18,-1.7091103672657577e18,-1.7086575028335199e18,-1.708204638401282e18,-1.707751773969044e18,-1.7072989095368061e18,-1.7068460451045683e18,-1.7063931806723305e18,-1.7059403162400927e18,-1.7054874518078546e18,-1.7050345873756168e18,-1.704581722943379e18,-1.7041288585111409e18,-1.7036759940789033e18,-1.7032231296466652e18,-1.7027702652144274e18,-1.7023174007821896e18,-1.7018645363499515e18,-1.701411671917714e18,-1.7009588074854758e18,-1.700505943053238e18,-1.7000530786210002e18,-1.699600214188762e18,-1.6991473497565243e18,-1.6986944853242865e18,-1.6982416208920486e18,-1.6977887564598108e18,-1.6973358920275727e18,-1.696883027595335e18,-1.696430163163097e18,-1.6959772987308593e18,-1.6955244342986214e18,-1.6950715698663834e18,-1.6946187054341455e18,-1.6941658410019075e18,-1.69371297656967e18,-1.693260112137432e18,-1.692807247705194e18,-1.6923543832729562e18,-1.691901518840718e18,-1.6914486544084805e18,-1.6909957899762427e18,-1.6905429255440046e18,-1.6900900611117668e18,-1.6896371966795287e18,-1.689184332247291e18,-1.6887314678150533e18,-1.6882786033828152e18,-1.6878257389505774e18,-1.6873728745183393e18,-1.6869200100861015e18,-1.686467145653864e18,-1.6860142812216259e18,-1.685561416789388e18,-1.68510855235715e18,-1.684655687924912e18,-1.6842028234926743e18,-1.6837499590604365e18,-1.6832970946281987e18,-1.6828442301959606e18,-1.6823913657637228e18,-1.681938501331485e18,-1.681485636899247e18,-1.6810327724670093e18,-1.6805799080347712e18,-1.6801270436025334e18,-1.6796741791702956e18,-1.6792213147380575e18,-1.67876845030582e18,-1.6783155858735818e18,-1.677862721441344e18,-1.6774098570091062e18,-1.676956992576868e18,-1.6765041281446305e18,-1.6760512637123927e18,-1.6755983992801546e18,-1.6751455348479168e18,-1.6746926704156787e18,-1.674239805983441e18,-1.6737869415512033e18,-1.6733340771189652e18,-1.6728812126867274e18,-1.6724283482544893e18,-1.6719754838222515e18,-1.671522619390014e18,-1.671069754957776e18,-1.670616890525538e18,-1.6701640260933e18,-1.6697111616610621e18,-1.669258297228824e18,-1.6688054327965865e18,-1.6683525683643487e18,-1.6678997039321106e18,-1.6674468394998728e18,-1.666993975067635e18,-1.666541110635397e18,-1.6660882462031593e18,-1.6656353817709212e18,-1.6651825173386834e18,-1.6647296529064456e18,-1.6642767884742075e18,-1.66382392404197e18,-1.6633710596097318e18,-1.662918195177494e18,-1.6624653307452562e18,-1.662012466313018e18,-1.6615596018807805e18,-1.6611067374485425e18,-1.6606538730163046e18,-1.6602010085840668e18,-1.6597481441518287e18,-1.659295279719591e18,-1.658842415287353e18,-1.6583895508551153e18,-1.6579366864228774e18,-1.6574838219906394e18,-1.6570309575584015e18,-1.6565780931261637e18,-1.656125228693926e18,-1.655672364261688e18,-1.65521949982945e18,-1.6547666353972122e18,-1.654313770964974e18,-1.6538609065327365e18,-1.6534080421004987e18,-1.6529551776682606e18,-1.6525023132360228e18,-1.6520494488037847e18,-1.6515965843715471e18,-1.6511437199393093e18,-1.6506908555070712e18,-1.6502379910748334e18,-1.6497851266425953e18,-1.6493322622103575e18,-1.64887939777812e18,-1.6484265333458819e18,-1.647973668913644e18,-1.647520804481406e18,-1.6470679400491681e18,-1.6466150756169306e18,-1.6461622111846925e18,-1.6457093467524547e18,-1.6452564823202166e18,-1.6448036178879788e18,-1.644350753455741e18,-1.643897889023503e18,-1.6434450245912653e18,-1.6429921601590272e18,-1.6425392957267894e18,-1.6420864312945516e18,-1.6416335668623137e18,-1.641180702430076e18,-1.6407278379978378e18,-1.6402749735656e18,-1.6398221091333622e18,-1.639369244701124e18,-1.6389163802688865e18,-1.6384635158366484e18,-1.6380106514044106e18,-1.6375577869721728e18,-1.6371049225399347e18,-1.6366520581076972e18,-1.636199193675459e18,-1.6357463292432212e18,-1.6352934648109834e18,-1.6348406003787453e18,-1.6343877359465075e18,-1.6339348715142697e18,-1.6334820070820319e18,-1.633029142649794e18,-1.632576278217556e18,-1.6321234137853181e18,-1.6316705493530803e18,-1.6312176849208425e18,-1.6307648204886047e18,-1.6303119560563666e18,-1.6298590916241288e18,-1.6294062271918907e18,-1.628953362759653e18,-1.6285004983274153e18,-1.6280476338951772e18,-1.6275947694629394e18,-1.6271419050307013e18,-1.6266890405984637e18,-1.626236176166226e18,-1.6257833117339878e18,-1.62533044730175e18,-1.624877582869512e18,-1.624424718437274e18,-1.6239718540050365e18,-1.6235189895727985e18,-1.6230661251405606e18,-1.6226132607083226e18,-1.6221603962760847e18,-1.6217075318438472e18,-1.621254667411609e18,-1.6208018029793713e18,-1.6203489385471332e18,-1.6198960741148954e18,-1.6194432096826575e18,-1.6189903452504197e18,-1.618537480818182e18,-1.6180846163859438e18,-1.617631751953706e18,-1.6171788875214682e18,-1.6167260230892303e18,-1.6162731586569925e18,-1.6158202942247544e18,-1.6153674297925166e18,-1.6149145653602788e18,-1.6144617009280407e18,-1.6140088364958031e18,-1.613555972063565e18,-1.6131031076313272e18,-1.6126502431990894e18,-1.6121973787668513e18,-1.6117445143346138e18,-1.6112916499023757e18,-1.6108387854701379e18,-1.6103859210379e18,-1.609933056605662e18,-1.609480192173424e18,-1.6090273277411863e18,-1.6085744633089485e18,-1.6081215988767107e18,-1.6076687344444726e18,-1.6072158700122348e18,-1.606763005579997e18,-1.606310141147759e18,-1.6058572767155213e18,-1.6054044122832832e18,-1.6049515478510454e18,-1.6044986834188073e18,-1.6040458189865697e18,-1.603592954554332e18,-1.6031400901220938e18,-1.602687225689856e18,-1.602234361257618e18,-1.6017814968253804e18,-1.6013286323931425e18,-1.6008757679609044e18,-1.6004229035286666e18,-1.5999700390964285e18,-1.5995171746641907e18,-1.5990643102319532e18,-1.598611445799715e18,-1.5981585813674772e18,-1.5977057169352392e18,-1.5972528525030013e18,-1.5967999880707638e18,-1.5963471236385257e18,-1.595894259206288e18,-1.5954413947740498e18,-1.594988530341812e18,-1.5945356659095741e18,-1.5940828014773363e18,-1.5936299370450985e18,-1.5931770726128604e18,-1.5927242081806226e18,-1.5922713437483848e18,-1.591818479316147e18,-1.591365614883909e18,-1.590912750451671e18,-1.5904598860194332e18,-1.5900070215871954e18,-1.5895541571549573e18,-1.5891012927227197e18,-1.588648428290482e18,-1.5881955638582438e18,-1.587742699426006e18,-1.587289834993768e18,-1.5868369705615304e18,-1.5863841061292925e18,-1.5859312416970545e18,-1.5854783772648166e18,-1.5850255128325786e18,-1.5845726484003407e18,-1.5841197839681032e18,-1.583666919535865e18,-1.5832140551036273e18,-1.5827611906713892e18,-1.5823083262391514e18,-1.5818554618069138e18,-1.5814025973746757e18,-1.580949732942438e18,-1.5804968685101998e18,-1.580044004077962e18,-1.5795911396457242e18,-1.5791382752134863e18,-1.5786854107812485e18,-1.5782325463490104e18,-1.5777796819167726e18,-1.5773268174845348e18,-1.576873953052297e18,-1.5764210886200591e18,-1.575968224187821e18,-1.5755153597555832e18,-1.5750624953233454e18,-1.5746096308911073e18,-1.5741567664588698e18,-1.5737039020266317e18,-1.5732510375943939e18,-1.572798173162156e18,-1.572345308729918e18,-1.5718924442976804e18,-1.5714395798654423e18,-1.5709867154332045e18,-1.5705338510009667e18,-1.5700809865687286e18,-1.5696281221364908e18,-1.569175257704253e18,-1.568722393272015e18,-1.5682695288397773e18,-1.5678166644075392e18,-1.5673637999753014e18,-1.5669109355430636e18,-1.5664580711108257e18,-1.566005206678588e18,-1.5655523422463498e18,-1.565099477814112e18,-1.564646613381874e18,-1.5641937489496364e18,-1.5637408845173985e18,-1.5632880200851604e18,-1.5628351556529226e18,-1.5623822912206845e18,-1.561929426788447e18,-1.5614765623562092e18,-1.561023697923971e18,-1.5605708334917332e18,-1.5601179690594952e18,-1.5596651046272573e18,-1.5592122401950198e18,-1.5587593757627817e18,-1.5583065113305439e18,-1.5578536468983058e18,-1.557400782466068e18,-1.5569479180338304e18,-1.5564950536015923e18,-1.5560421891693545e18,-1.5555893247371164e18,-1.5551364603048786e18,-1.5546835958726408e18,-1.554230731440403e18,-1.553777867008165e18,-1.553325002575927e18,-1.5528721381436892e18,-1.5524192737114514e18,-1.5519664092792136e18,-1.5515135448469757e18,-1.5510606804147377e18,-1.5506078159824998e18,-1.550154951550262e18,-1.549702087118024e18,-1.5492492226857864e18,-1.5487963582535483e18,-1.5483434938213105e18,-1.5478906293890726e18,-1.5474377649568346e18,-1.546984900524597e18,-1.546532036092359e18,-1.546079171660121e18,-1.5456263072278833e18,-1.5451734427956452e18,-1.5447205783634074e18,-1.5442677139311695e18,-1.5438148494989317e18,-1.543361985066694e18,-1.5429091206344558e18,-1.542456256202218e18,-1.5420033917699802e18,-1.5415505273377423e18,-1.5410976629055045e18,-1.5406447984732664e18,-1.5401919340410286e18,-1.5397390696087905e18,-1.539286205176553e18,-1.5388333407443151e18,-1.538380476312077e18,-1.5379276118798392e18,-1.5374747474476012e18,-1.5370218830153636e18,-1.5365690185831258e18,-1.5361161541508877e18,-1.5356632897186499e18,-1.5352104252864118e18,-1.534757560854174e18,-1.5343046964219364e18,-1.5338518319896983e18,-1.5333989675574605e18,-1.5329461031252224e18,-1.5324932386929846e18,-1.532040374260747e18,-1.531587509828509e18,-1.531134645396271e18,-1.530681780964033e18,-1.5302289165317952e18,-1.5297760520995574e18,-1.5293231876673196e18,-1.5288703232350817e18,-1.5284174588028436e18,-1.5279645943706058e18,-1.527511729938368e18,-1.5270588655061302e18,-1.5266060010738924e18,-1.5261531366416543e18,-1.5257002722094164e18,-1.5252474077771786e18,-1.5247945433449405e18,-1.524341678912703e18,-1.523888814480465e18,-1.523435950048227e18,-1.5229830856159892e18,-1.5225302211837512e18,-1.5220773567515136e18,-1.5216244923192755e18,-1.5211716278870377e18,-1.5207187634548e18,-1.5202658990225618e18,-1.519813034590324e18,-1.5193601701580861e18,-1.5189073057258483e18,-1.5184544412936105e18,-1.5180015768613724e18,-1.5175487124291346e18,-1.5170958479968968e18,-1.516642983564659e18,-1.516190119132421e18,-1.515737254700183e18,-1.5152843902679452e18,-1.5148315258357071e18,-1.5143786614034696e18,-1.5139257969712317e18,-1.5134729325389937e18,-1.5130200681067558e18,-1.5125672036745178e18,-1.5121143392422802e18,-1.5116614748100424e18,-1.5112086103778043e18,-1.5107557459455665e18,-1.5103028815133284e18,-1.5098500170810906e18,-1.509397152648853e18,-1.508944288216615e18,-1.508491423784377e18,-1.508038559352139e18,-1.5075856949199012e18,-1.5071328304876636e18,-1.5066799660554255e18,-1.5062271016231877e18,-1.5057742371909496e18,-1.5053213727587118e18,-1.504868508326474e18,-1.5044156438942362e18,-1.5039627794619983e18,-1.5035099150297603e18,-1.5030570505975224e18,-1.5026041861652846e18,-1.5021513217330465e18,-1.501698457300809e18,-1.5012455928685711e18,-1.500792728436333e18,-1.5003398640040952e18,-1.4998869995718572e18,-1.4994341351396196e18,-1.4989812707073818e18,-1.4985284062751437e18,-1.4980755418429059e18,-1.4976226774106678e18,-1.49716981297843e18,-1.4967169485461924e18,-1.4962640841139543e18,-1.4958112196817165e18,-1.4953583552494784e18,-1.4949054908172406e18,-1.494452626385003e18,-1.493999761952765e18,-1.493546897520527e18,-1.493094033088289e18,-1.4926411686560512e18,-1.4921883042238134e18,-1.4917354397915756e18,-1.4912825753593377e18,-1.4908297109270996e18,-1.4903768464948618e18,-1.489923982062624e18,-1.4894711176303862e18,-1.4890182531981484e18,-1.4885653887659103e18,-1.4881125243336724e18,-1.4876596599014346e18,-1.4872067954691965e18,-1.486753931036959e18,-1.486301066604721e18,-1.485848202172483e18,-1.4853953377402452e18,-1.4849424733080072e18,-1.4844896088757696e18,-1.4840367444435315e18,-1.4835838800112937e18,-1.4831310155790559e18,-1.4826781511468178e18,-1.48222528671458e18,-1.4817724222823421e18,-1.4813195578501043e18,-1.4808666934178665e18,-1.4804138289856284e18,-1.4799609645533906e18,-1.4795081001211528e18,-1.479055235688915e18,-1.478602371256677e18,-1.478149506824439e18,-1.4776966423922012e18,-1.4772437779599631e18,-1.4767909135277256e18,-1.4763380490954877e18,-1.4758851846632497e18,-1.4754323202310118e18,-1.4749794557987738e18,-1.4745265913665362e18,-1.4740737269342984e18,-1.4736208625020603e18,-1.4731679980698225e18,-1.4727151336375844e18,-1.4722622692053466e18,-1.471809404773109e18,-1.471356540340871e18,-1.470903675908633e18,-1.470450811476395e18,-1.4699979470441572e18,-1.4695450826119196e18,-1.4690922181796815e18,-1.4686393537474437e18,-1.4681864893152056e18,-1.4677336248829678e18,-1.46728076045073e18,-1.4668278960184922e18,-1.4663750315862543e18,-1.4659221671540163e18,-1.4654693027217784e18,-1.4650164382895406e18,-1.4645635738573028e18,-1.464110709425065e18,-1.463657844992827e18,-1.463204980560589e18,-1.4627521161283512e18,-1.4622992516961132e18,-1.4618463872638756e18,-1.4613935228316375e18,-1.4609406583993997e18,-1.4604877939671619e18,-1.4600349295349238e18,-1.4595820651026862e18,-1.459129200670448e18,-1.4586763362382103e18,-1.4582234718059725e18,-1.4577706073737344e18,-1.4573177429414966e18,-1.4568648785092588e18,-1.456412014077021e18,-1.455959149644783e18,-1.455506285212545e18,-1.4550534207803072e18,-1.4546005563480694e18,-1.4541476919158316e18,-1.4536948274835937e18,-1.4532419630513556e18,-1.4527890986191178e18,-1.4523362341868797e18,-1.4518833697546422e18,-1.4514305053224044e18,-1.4509776408901663e18,-1.4505247764579284e18,-1.4500719120256904e18,-1.4496190475934528e18,-1.449166183161215e18,-1.448713318728977e18,-1.448260454296739e18,-1.447807589864501e18,-1.4473547254322632e18,-1.4469018610000256e18,-1.4464489965677875e18,-1.4459961321355497e18,-1.4455432677033116e18,-1.4450904032710738e18,-1.4446375388388362e18,-1.4441846744065981e18,-1.4437318099743603e18,-1.4432789455421222e18,-1.4428260811098844e18,-1.4423732166776466e18,-1.4419203522454088e18,-1.441467487813171e18,-1.4410146233809329e18,-1.440561758948695e18,-1.4401088945164572e18,-1.4396560300842194e18,-1.4392031656519816e18,-1.4387503012197435e18,-1.4382974367875057e18,-1.4378445723552678e18,-1.4373917079230298e18,-1.4369388434907922e18,-1.436485979058554e18,-1.4360331146263163e18,-1.4355802501940785e18,-1.4351273857618404e18,-1.4346745213296028e18,-1.4342216568973647e18,-1.433768792465127e18,-1.433315928032889e18,-1.432863063600651e18,-1.4324101991684132e18,-1.4319573347361754e18,-1.4315044703039375e18,-1.4310516058716997e18,-1.4305987414394616e18,-1.4301458770072238e18,-1.429693012574986e18,-1.4292401481427482e18,-1.4287872837105103e18,-1.4283344192782723e18,-1.4278815548460344e18,-1.4274286904137964e18,-1.4269758259815588e18,-1.426522961549321e18,-1.426070097117083e18,-1.425617232684845e18,-1.425164368252607e18,-1.4247115038203694e18,-1.4242586393881316e18,-1.4238057749558935e18,-1.4233529105236557e18,-1.4229000460914176e18,-1.4224471816591798e18,-1.4219943172269422e18,-1.4215414527947041e18,-1.4210885883624663e18,-1.4206357239302282e18,-1.4201828594979904e18,-1.4197299950657528e18,-1.4192771306335148e18,-1.418824266201277e18,-1.4183714017690388e18,-1.417918537336801e18,-1.4174656729045632e18,-1.4170128084723254e18,-1.4165599440400876e18,-1.4161070796078497e18,-1.4156542151756116e18,-1.4152013507433738e18,-1.414748486311136e18,-1.4142956218788982e18,-1.4138427574466604e18,-1.4133898930144223e18,-1.4129370285821844e18,-1.4124841641499464e18,-1.4120312997177088e18,-1.411578435285471e18,-1.411125570853233e18,-1.410672706420995e18,-1.410219841988757e18,-1.4097669775565194e18,-1.4093141131242816e18,-1.4088612486920435e18,-1.4084083842598057e18,-1.4079555198275676e18,-1.4075026553953298e18,-1.4070497909630922e18,-1.4065969265308541e18,-1.4061440620986163e18,-1.4056911976663782e18,-1.4052383332341404e18,-1.4047854688019028e18,-1.4043326043696648e18,-1.403879739937427e18,-1.4034268755051889e18,-1.402974011072951e18,-1.4025211466407132e18,-1.4020682822084754e18,-1.4016154177762376e18,-1.4011625533439995e18,-1.4007096889117617e18,-1.4002568244795238e18,-1.399803960047286e18,-1.3993510956150482e18,-1.39889823118281e18,-1.3984453667505723e18,-1.3979925023183345e18,-1.3975396378860964e18,-1.3970867734538588e18,-1.3966339090216207e18,-1.396181044589383e18,-1.395728180157145e18,-1.395275315724907e18,-1.3948224512926694e18,-1.3943695868604314e18,-1.3939167224281935e18,-1.3934638579959557e18,-1.3930109935637176e18,-1.3925581291314798e18,-1.392105264699242e18,-1.3916524002670042e18,-1.3911995358347663e18,-1.3907466714025283e18,-1.3902938069702904e18,-1.3898409425380526e18,-1.3893880781058148e18,-1.388935213673577e18,-1.388482349241339e18,-1.388029484809101e18,-1.387576620376863e18,-1.3871237559446254e18,-1.3866708915123876e18,-1.3862180270801495e18,-1.3857651626479117e18,-1.3853122982156736e18,-1.384859433783436e18,-1.3844065693511982e18,-1.38395370491896e18,-1.3835008404867223e18,-1.3830479760544842e18,-1.3825951116222464e18,-1.3821422471900088e18,-1.3816893827577708e18,-1.381236518325533e18,-1.3807836538932948e18,-1.380330789461057e18,-1.3798779250288195e18,-1.3794250605965814e18,-1.3789721961643436e18,-1.3785193317321055e18,-1.3780664672998676e18,-1.3776136028676298e18,-1.377160738435392e18,-1.3767078740031542e18,-1.376255009570916e18,-1.3758021451386783e18,-1.3753492807064404e18,-1.3748964162742026e18,-1.3744435518419648e18,-1.3739906874097267e18,-1.373537822977489e18,-1.373084958545251e18,-1.372632094113013e18,-1.3721792296807754e18,-1.3717263652485373e18,-1.3712735008162995e18,-1.3708206363840617e18,-1.3703677719518236e18,-1.369914907519586e18,-1.369462043087348e18,-1.3690091786551101e18,-1.3685563142228723e18,-1.3681034497906342e18,-1.3676505853583964e18,-1.3671977209261586e18,-1.3667448564939208e18,-1.366291992061683e18,-1.3658391276294449e18,-1.365386263197207e18,-1.3649333987649692e18,-1.3644805343327314e18,-1.3640276699004936e18,-1.3635748054682555e18,-1.3631219410360177e18,-1.3626690766037796e18,-1.362216212171542e18,-1.3617633477393042e18,-1.361310483307066e18,-1.3608576188748283e18,-1.3604047544425902e18,-1.3599518900103526e18,-1.3594990255781148e18,-1.3590461611458767e18,-1.358593296713639e18,-1.3581404322814008e18,-1.357687567849163e18,-1.3572347034169254e18,-1.3567818389846874e18,-1.3563289745524495e18,-1.3558761101202115e18,-1.3554232456879736e18,-1.354970381255736e18,-1.354517516823498e18,-1.3540646523912602e18,-1.353611787959022e18,-1.3531589235267843e18,-1.3527060590945464e18,-1.3522531946623086e18,-1.3518003302300708e18,-1.3513474657978327e18,-1.350894601365595e18,-1.350441736933357e18,-1.3499888725011192e18,-1.3495360080688814e18,-1.3490831436366433e18,-1.3486302792044055e18,-1.3481774147721677e18,-1.3477245503399296e18,-1.347271685907692e18,-1.346818821475454e18,-1.3463659570432161e18,-1.3459130926109783e18,-1.3454602281787402e18,-1.3450073637465027e18,-1.3445544993142646e18,-1.3441016348820268e18,-1.343648770449789e18,-1.3431959060175508e18,-1.342743041585313e18,-1.3422901771530752e18,-1.3418373127208374e18,-1.3413844482885996e18,-1.3409315838563615e18,-1.3404787194241236e18,-1.3400258549918858e18,-1.339572990559648e18,-1.3391201261274102e18,-1.338667261695172e18,-1.3382143972629343e18,-1.3377615328306962e18,-1.3373086683984586e18,-1.3368558039662208e18,-1.3364029395339827e18,-1.335950075101745e18,-1.3354972106695068e18,-1.3350443462372692e18,-1.3345914818050314e18,-1.3341386173727933e18,-1.3336857529405555e18,-1.3332328885083174e18,-1.3327800240760796e18,-1.332327159643842e18,-1.331874295211604e18,-1.3314214307793661e18,-1.330968566347128e18,-1.3305157019148902e18,-1.3300628374826527e18,-1.3296099730504146e18,-1.3291571086181768e18,-1.328704244185939e18,-1.3282513797537009e18,-1.327798515321463e18,-1.3273456508892252e18,-1.3268927864569874e18,-1.3264399220247496e18,-1.3259870575925115e18,-1.3255341931602737e18,-1.3250813287280358e18,-1.324628464295798e18,-1.3241755998635602e18,-1.323722735431322e18,-1.3232698709990843e18,-1.3228170065668462e18,-1.3223641421346086e18,-1.3219112777023708e18,-1.3214584132701327e18,-1.321005548837895e18,-1.3205526844056568e18,-1.3200998199734193e18,-1.3196469555411814e18,-1.3191940911089434e18,-1.3187412266767055e18,-1.3182883622444675e18,-1.3178354978122296e18,-1.317382633379992e18,-1.316929768947754e18,-1.3164769045155162e18,-1.316024040083278e18,-1.3155711756510403e18,-1.3151183112188027e18,-1.3146654467865646e18,-1.3142125823543268e18,-1.3137597179220887e18,-1.313306853489851e18,-1.312853989057613e18,-1.3124011246253752e18,-1.3119482601931374e18,-1.3114953957608993e18,-1.3110425313286615e18,-1.3105896668964237e18,-1.3101368024641859e18,-1.309683938031948e18,-1.30923107359971e18,-1.308778209167472e18,-1.3083253447352343e18,-1.3078724803029962e18,-1.3074196158707587e18,-1.3069667514385206e18,-1.3065138870062828e18,-1.306061022574045e18,-1.3056081581418068e18,-1.3051552937095693e18,-1.3047024292773312e18,-1.3042495648450934e18,-1.3037967004128556e18,-1.3033438359806175e18,-1.3028909715483796e18,-1.3024381071161418e18,-1.301985242683904e18,-1.3015323782516662e18,-1.301079513819428e18,-1.3006266493871903e18,-1.3001737849549524e18,-1.2997209205227146e18,-1.2992680560904768e18,-1.2988151916582387e18,-1.298362327226001e18,-1.2979094627937628e18,-1.2974565983615252e18,-1.2970037339292874e18,-1.2965508694970493e18,-1.2960980050648115e18,-1.2956451406325734e18,-1.295192276200336e18,-1.294739411768098e18,-1.29428654733586e18,-1.2938336829036221e18,-1.293380818471384e18,-1.2929279540391462e18,-1.2924750896069087e18,-1.2920222251746706e18,-1.2915693607424328e18,-1.2911164963101947e18,-1.2906636318779569e18,-1.2902107674457193e18,-1.2897579030134812e18,-1.2893050385812434e18,-1.2888521741490053e18,-1.2883993097167675e18,-1.2879464452845297e18,-1.2874935808522918e18,-1.287040716420054e18,-1.286587851987816e18,-1.286134987555578e18,-1.2856821231233403e18,-1.2852292586911025e18,-1.2847763942588646e18,-1.2843235298266266e18,-1.2838706653943887e18,-1.283417800962151e18,-1.2829649365299128e18,-1.2825120720976753e18,-1.2820592076654372e18,-1.2816063432331994e18,-1.2811534788009615e18,-1.2807006143687235e18,-1.280247749936486e18,-1.2797948855042478e18,-1.27934202107201e18,-1.2788891566397722e18,-1.278436292207534e18,-1.2779834277752963e18,-1.2775305633430584e18,-1.2770776989108206e18,-1.2766248344785828e18,-1.2761719700463447e18,-1.275719105614107e18,-1.2752662411818688e18,-1.2748133767496312e18,-1.2743605123173934e18,-1.2739076478851553e18,-1.2734547834529175e18,-1.2730019190206794e18,-1.2725490545884419e18,-1.272096190156204e18,-1.271643325723966e18,-1.2711904612917281e18,-1.27073759685949e18,-1.2702847324272522e18,-1.2698318679950147e18,-1.2693790035627766e18,-1.2689261391305388e18,-1.2684732746983007e18,-1.2680204102660628e18,-1.2675675458338253e18,-1.2671146814015872e18,-1.2666618169693494e18,-1.2662089525371113e18,-1.2657560881048735e18,-1.2653032236726356e18,-1.2648503592403978e18,-1.26439749480816e18,-1.263944630375922e18,-1.263491765943684e18,-1.2630389015114463e18,-1.2625860370792084e18,-1.2621331726469706e18,-1.2616803082147325e18,-1.2612274437824947e18,-1.260774579350257e18,-1.2603217149180188e18,-1.2598688504857812e18,-1.2594159860535432e18,-1.2589631216213053e18,-1.2585102571890675e18,-1.2580573927568294e18,-1.2576045283245919e18,-1.2571516638923538e18,-1.256698799460116e18,-1.2562459350278781e18,-1.25579307059564e18,-1.2553402061634022e18,-1.2548873417311644e18,-1.2544344772989266e18,-1.2539816128666888e18,-1.2535287484344507e18,-1.2530758840022129e18,-1.252623019569975e18,-1.2521701551377372e18,-1.2517172907054994e18,-1.2512644262732613e18,-1.2508115618410235e18,-1.2503586974087854e18,-1.2499058329765478e18,-1.24945296854431e18,-1.249000104112072e18,-1.248547239679834e18,-1.248094375247596e18,-1.2476415108153585e18,-1.2471886463831206e18,-1.2467357819508826e18,-1.2462829175186447e18,-1.2458300530864067e18,-1.2453771886541688e18,-1.2449243242219313e18,-1.2444714597896932e18,-1.2440185953574554e18,-1.2435657309252173e18,-1.2431128664929795e18,-1.242660002060742e18,-1.2422071376285038e18,-1.241754273196266e18,-1.2413014087640282e18,-1.24084854433179e18,-1.2403956798995523e18,-1.2399428154673144e18,-1.2394899510350766e18,-1.2390370866028388e18,-1.2385842221706007e18,-1.238131357738363e18,-1.237678493306125e18,-1.2372256288738872e18,-1.2367727644416494e18,-1.2363199000094113e18,-1.2358670355771735e18,-1.2354141711449354e18,-1.2349613067126979e18,-1.23450844228046e18,-1.234055577848222e18,-1.233602713415984e18,-1.233149848983746e18,-1.2326969845515085e18,-1.2322441201192707e18,-1.2317912556870326e18,-1.2313383912547948e18,-1.2308855268225567e18,-1.2304326623903188e18,-1.2299797979580813e18,-1.2295269335258432e18,-1.2290740690936054e18,-1.2286212046613673e18,-1.2281683402291295e18,-1.227715475796892e18,-1.2272626113646538e18,-1.226809746932416e18,-1.226356882500178e18,-1.22590401806794e18,-1.2254511536357023e18,-1.2249982892034644e18,-1.2245454247712266e18,-1.2240925603389885e18,-1.2236396959067507e18,-1.223186831474513e18,-1.222733967042275e18,-1.2222811026100372e18,-1.2218282381777992e18,-1.2213753737455613e18,-1.2209225093133235e18,-1.2204696448810854e18,-1.220016780448848e18,-1.2195639160166098e18,-1.219111051584372e18,-1.2186581871521341e18,-1.218205322719896e18,-1.2177524582876585e18,-1.2172995938554204e18,-1.2168467294231826e18,-1.2163938649909448e18,-1.2159410005587067e18,-1.2154881361264689e18,-1.215035271694231e18,-1.2145824072619932e18,-1.2141295428297554e18,-1.2136766783975173e18,-1.2132238139652795e18,-1.2127709495330417e18,-1.2123180851008038e18,-1.211865220668566e18,-1.211412356236328e18,-1.21095949180409e18,-1.210506627371852e18,-1.2100537629396145e18,-1.2096008985073766e18,-1.2091480340751386e18,-1.2086951696429007e18,-1.2082423052106627e18,-1.207789440778425e18,-1.2073365763461873e18,-1.2068837119139492e18,-1.2064308474817114e18,-1.2059779830494733e18,-1.2055251186172355e18,-1.205072254184998e18,-1.2046193897527598e18,-1.204166525320522e18,-1.203713660888284e18,-1.203260796456046e18,-1.2028079320238085e18,-1.2023550675915704e18,-1.2019022031593326e18,-1.2014493387270945e18,-1.2009964742948567e18,-1.200543609862619e18,-1.200090745430381e18,-1.1996378809981432e18,-1.1991850165659052e18,-1.1987321521336673e18,-1.1982792877014295e18,-1.1978264232691917e18,-1.1973735588369539e18,-1.1969206944047158e18,-1.196467829972478e18,-1.1960149655402401e18,-1.195562101108002e18,-1.1951092366757645e18,-1.1946563722435264e18,-1.1942035078112886e18,-1.1937506433790508e18,-1.1932977789468127e18,-1.192844914514575e18,-1.192392050082337e18,-1.1919391856500992e18,-1.1914863212178614e18,-1.1910334567856233e18,-1.1905805923533855e18,-1.1901277279211476e18,-1.1896748634889098e18,-1.189221999056672e18,-1.188769134624434e18,-1.188316270192196e18,-1.1878634057599583e18,-1.1874105413277204e18,-1.1869576768954826e18,-1.1865048124632445e18,-1.1860519480310067e18,-1.1855990835987686e18,-1.185146219166531e18,-1.1846933547342932e18,-1.1842404903020552e18,-1.1837876258698173e18,-1.1833347614375793e18,-1.1828818970053417e18,-1.1824290325731039e18,-1.1819761681408658e18,-1.181523303708628e18,-1.18107043927639e18,-1.1806175748441523e18,-1.1801647104119142e18,-1.1797118459796764e18,-1.1792589815474386e18,-1.1788061171152005e18,-1.178353252682963e18,-1.1779003882507249e18,-1.177447523818487e18,-1.1769946593862492e18,-1.1765417949540111e18,-1.1760889305217736e18,-1.1756360660895355e18,-1.1751832016572977e18,-1.1747303372250598e18,-1.1742774727928218e18,-1.173824608360584e18,-1.173371743928346e18,-1.1729188794961083e18,-1.1724660150638702e18,-1.1720131506316324e18,-1.1715602861993946e18,-1.1711074217671567e18,-1.170654557334919e18,-1.1702016929026808e18,-1.169748828470443e18,-1.1692959640382052e18,-1.1688430996059674e18,-1.1683902351737295e18,-1.1679373707414915e18,-1.1674845063092536e18,-1.1670316418770158e18,-1.166578777444778e18,-1.1661259130125402e18,-1.165673048580302e18,-1.1652201841480643e18,-1.1647673197158264e18,-1.1643144552835886e18,-1.1638615908513505e18,-1.1634087264191127e18,-1.162955861986875e18,-1.162502997554637e18,-1.1620501331223992e18,-1.1615972686901612e18,-1.1611444042579233e18,-1.1606915398256855e18,-1.1602386753934477e18,-1.1597858109612099e18,-1.1593329465289718e18,-1.158880082096734e18,-1.158427217664496e18,-1.1579743532322583e18,-1.1575214888000202e18,-1.1570686243677824e18,-1.1566157599355446e18,-1.1561628955033068e18,-1.155710031071069e18,-1.1552571666388308e18,-1.154804302206593e18,-1.1543514377743552e18,-1.1538985733421174e18,-1.1534457089098796e18,-1.1529928444776415e18,-1.1525399800454036e18,-1.1520871156131658e18,-1.1516342511809279e18,-1.15118138674869e18,-1.1507285223164521e18,-1.1502756578842143e18,-1.1498227934519764e18,-1.1493699290197385e18,-1.1489170645875005e18,-1.1484642001552627e18,-1.1480113357230249e18,-1.147558471290787e18,-1.1471056068585491e18,-1.1466527424263112e18,-1.1461998779940733e18,-1.1457470135618355e18,-1.1452941491295976e18,-1.1448412846973597e18,-1.1443884202651218e18,-1.1439355558328838e18,-1.1434826914006461e18,-1.1430298269684082e18,-1.1425769625361702e18,-1.1421240981039324e18,-1.1416712336716945e18,-1.1412183692394568e18,-1.1407655048072188e18,-1.1403126403749809e18,-1.139859775942743e18,-1.1394069115105051e18,-1.1389540470782673e18,-1.1385011826460294e18,-1.1380483182137915e18,-1.1375954537815535e18,-1.1371425893493158e18,-1.1366897249170779e18,-1.1362368604848401e18,-1.1357839960526021e18,-1.1353311316203642e18,-1.1348782671881265e18,-1.1344254027558885e18,-1.1339725383236506e18,-1.1335196738914127e18,-1.1330668094591748e18,-1.132613945026937e18,-1.1321610805946991e18,-1.1317082161624612e18,-1.1312553517302234e18,-1.1308024872979854e18,-1.1303496228657476e18,-1.1298967584335098e18,-1.1294438940012718e18,-1.1289910295690339e18,-1.128538165136796e18,-1.1280853007045582e18,-1.1276324362723203e18,-1.1271795718400824e18,-1.1267267074078445e18,-1.1262738429756067e18,-1.1258209785433688e18,-1.1253681141111309e18,-1.124915249678893e18,-1.1244623852466551e18,-1.1240095208144172e18,-1.1235566563821795e18,-1.1231037919499415e18,-1.1226509275177036e18,-1.1221980630854657e18,-1.1217451986532278e18,-1.1212923342209901e18,-1.1208394697887521e18,-1.1203866053565142e18,-1.1199337409242764e18,-1.1194808764920384e18,-1.1190280120598006e18,-1.1185751476275628e18,-1.1181222831953248e18,-1.1176694187630868e18,-1.117216554330849e18,-1.1167636898986112e18,-1.1163108254663734e18,-1.1158579610341354e18,-1.1154050966018975e18,-1.1149522321696596e18,-1.1144993677374218e18,-1.1140465033051839e18,-1.113593638872946e18,-1.1131407744407081e18,-1.1126879100084701e18,-1.1122350455762324e18,-1.1117821811439945e18,-1.1113293167117567e18,-1.1108764522795187e18,-1.1104235878472808e18,-1.1099707234150431e18,-1.1095178589828051e18,-1.1090649945505672e18,-1.1086121301183293e18,-1.1081592656860914e18,-1.1077064012538536e18,-1.1072535368216157e18,-1.1068006723893778e18,-1.10634780795714e18,-1.105894943524902e18,-1.1054420790926642e18,-1.1049892146604264e18,-1.1045363502281884e18,-1.1040834857959505e18,-1.1036306213637126e18,-1.1031777569314748e18,-1.1027248924992369e18,-1.102272028066999e18,-1.1018191636347611e18,-1.1013662992025231e18,-1.1009134347702854e18,-1.1004605703380475e18,-1.1000077059058097e18,-1.0995548414735717e18,-1.0991019770413338e18,-1.0986491126090961e18,-1.0981962481768581e18,-1.0977433837446202e18,-1.0972905193123823e18,-1.0968376548801444e18,-1.0963847904479066e18,-1.0959319260156687e18,-1.0954790615834308e18,-1.095026197151193e18,-1.0945733327189551e18,-1.0941204682867172e18,-1.0936676038544794e18,-1.0932147394222414e18,-1.0927618749900035e18,-1.0923090105577658e18,-1.0918561461255278e18,-1.0914032816932899e18,-1.090950417261052e18,-1.0904975528288141e18,-1.0900446883965764e18,-1.0895918239643384e18,-1.0891389595321005e18,-1.0886860950998627e18,-1.0882332306676247e18,-1.0877803662353869e18,-1.087327501803149e18,-1.0868746373709111e18,-1.0864217729386732e18,-1.0859689085064353e18,-1.0855160440741975e18,-1.0850631796419597e18,-1.0846103152097217e18,-1.0841574507774838e18,-1.083704586345246e18,-1.0832517219130081e18,-1.0827988574807702e18,-1.0823459930485324e18,-1.0818931286162944e18,-1.0814402641840564e18,-1.0809873997518188e18,-1.0805345353195808e18,-1.080081670887343e18,-1.079628806455105e18,-1.0791759420228671e18,-1.0787230775906294e18,-1.0782702131583914e18,-1.0778173487261535e18,-1.0773644842939156e18,-1.0769116198616777e18,-1.0764587554294399e18,-1.076005890997202e18,-1.0755530265649641e18,-1.0751001621327263e18,-1.0746472977004883e18,-1.0741944332682505e18,-1.0737415688360127e18,-1.0732887044037747e18,-1.0728358399715368e18,-1.072382975539299e18,-1.0719301111070611e18,-1.0714772466748232e18,-1.0710243822425853e18,-1.0705715178103474e18,-1.0701186533781096e18,-1.0696657889458717e18,-1.0692129245136338e18,-1.068760060081396e18,-1.068307195649158e18,-1.06785433121692e18,-1.0674014667846824e18,-1.0669486023524444e18,-1.0664957379202065e18,-1.0660428734879686e18,-1.0655900090557307e18,-1.065137144623493e18,-1.064684280191255e18,-1.0642314157590171e18,-1.0637785513267793e18,-1.0633256868945413e18,-1.0628728224623035e18,-1.0624199580300657e18,-1.0619670935978277e18,-1.0615142291655898e18,-1.061061364733352e18,-1.0606085003011141e18,-1.0601556358688763e18,-1.0597027714366383e18,-1.0592499070044004e18,-1.0587970425721626e18,-1.0583441781399247e18,-1.0578913137076868e18,-1.057438449275449e18,-1.056985584843211e18,-1.056532720410973e18,-1.0560798559787354e18,-1.0556269915464974e18,-1.0551741271142596e18,-1.0547212626820216e18,-1.0542683982497837e18,-1.053815533817546e18,-1.053362669385308e18,-1.0529098049530701e18,-1.0524569405208323e18,-1.0520040760885943e18,-1.0515512116563565e18,-1.0510983472241187e18,-1.0506454827918807e18,-1.0501926183596429e18,-1.049739753927405e18,-1.0492868894951671e18,-1.0488340250629293e18,-1.0483811606306913e18,-1.0479282961984534e18,-1.0474754317662157e18,-1.0470225673339777e18,-1.0465697029017398e18,-1.046116838469502e18,-1.045663974037264e18,-1.0452111096050263e18,-1.0447582451727884e18,-1.0443053807405504e18,-1.0438525163083126e18,-1.0433996518760746e18,-1.0429467874438368e18,-1.042493923011599e18,-1.042041058579361e18,-1.0415881941471231e18,-1.0411353297148852e18,-1.0406824652826474e18,-1.0402296008504096e18,-1.0397767364181716e18,-1.0393238719859337e18,-1.0388710075536959e18,-1.038418143121458e18,-1.0379652786892201e18,-1.0375124142569823e18,-1.0370595498247443e18,-1.0366066853925064e18,-1.0361538209602687e18,-1.0357009565280307e18,-1.0352480920957929e18,-1.034795227663555e18,-1.034342363231317e18,-1.0338894987990793e18,-1.0334366343668413e18,-1.0329837699346034e18,-1.0325309055023656e18,-1.0320780410701276e18,-1.0316251766378898e18,-1.031172312205652e18,-1.030719447773414e18,-1.0302665833411762e18,-1.0298137189089382e18,-1.0293608544767004e18,-1.0289079900444626e18,-1.0284551256122246e18,-1.0280022611799867e18,-1.0275493967477489e18,-1.027096532315511e18,-1.0266436678832731e18,-1.0261908034510353e18,-1.0257379390187973e18,-1.0252850745865595e18,-1.0248322101543217e18,-1.0243793457220837e18,-1.0239264812898459e18,-1.023473616857608e18,-1.02302075242537e18,-1.0225678879931323e18,-1.0221150235608943e18,-1.0216621591286564e18,-1.0212092946964186e18,-1.0207564302641806e18,-1.0203035658319429e18,-1.019850701399705e18,-1.019397836967467e18,-1.0189449725352292e18,-1.0184921081029912e18,-1.0180392436707534e18,-1.0175863792385156e18,-1.0171335148062776e18,-1.0166806503740397e18,-1.0162277859418019e18,-1.015774921509564e18,-1.0153220570773262e18,-1.0148691926450883e18,-1.0144163282128503e18,-1.0139634637806125e18,-1.0135105993483747e18,-1.0130577349161367e18,-1.0126048704838989e18,-1.0121520060516609e18,-1.011699141619423e18,-1.0112462771871853e18,-1.0107934127549473e18,-1.0103405483227095e18,-1.0098876838904716e18,-1.0094348194582336e18,-1.0089819550259959e18,-1.008529090593758e18,-1.00807622616152e18,-1.0076233617292822e18,-1.0071704972970444e18,-1.0067176328648064e18,-1.0062647684325686e18,-1.0058119040003306e18,-1.0053590395680928e18,-1.004906175135855e18,-1.004453310703617e18,-1.0040004462713792e18,-1.0035475818391412e18,-1.0030947174069033e18,-1.0026418529746656e18,-1.0021889885424276e18,-1.0017361241101897e18,-1.0012832596779519e18,-1.0008303952457139e18,-1.0003775308134762e18,-9.999246663812383e17,-9.994718019490003e17,-9.990189375167625e17,-9.985660730845245e17,-9.981132086522867e17,-9.976603442200489e17,-9.97207479787811e17,-9.96754615355573e17,-9.963017509233352e17,-9.958488864910973e17,-9.953960220588595e17,-9.949431576266216e17,-9.944902931943836e17,-9.940374287621458e17,-9.93584564329908e17,-9.9313169989767e17,-9.926788354654322e17,-9.922259710331942e17,-9.917731066009563e17,-9.913202421687186e17,-9.908673777364806e17,-9.904145133042428e17,-9.899616488720049e17,-9.895087844397669e17,-9.890559200075292e17,-9.886030555752913e17,-9.881501911430533e17,-9.876973267108155e17,-9.872444622785775e17,-9.867915978463397e17,-9.863387334141019e17,-9.85885868981864e17,-9.854330045496261e17,-9.849801401173882e17,-9.845272756851503e17,-9.840744112529125e17,-9.836215468206746e17,-9.831686823884366e17,-9.827158179561988e17,-9.82262953523961e17,-9.81810089091723e17,-9.813572246594852e17,-9.809043602272472e17,-9.804514957950093e17,-9.799986313627716e17,-9.795457669305336e17,-9.790929024982958e17,-9.786400380660579e17,-9.781871736338199e17,-9.777343092015822e17,-9.772814447693443e17,-9.768285803371063e17,-9.763757159048685e17,-9.759228514726305e17,-9.754699870403927e17,-9.750171226081549e17,-9.745642581759169e17,-9.741113937436791e17,-9.736585293114412e17,-9.732056648792033e17,-9.727528004469655e17,-9.722999360147276e17,-9.718470715824896e17,-9.713942071502518e17,-9.70941342718014e17,-9.70488478285776e17,-9.700356138535382e17,-9.695827494213002e17,-9.691298849890624e17,-9.686770205568246e17,-9.682241561245866e17,-9.677712916923488e17,-9.673184272601108e17,-9.668655628278729e17,-9.664126983956352e17,-9.659598339633972e17,-9.655069695311593e17,-9.650541050989215e17,-9.646012406666836e17,-9.641483762344458e17,-9.636955118022079e17,-9.632426473699699e17,-9.627897829377321e17,-9.623369185054943e17,-9.618840540732563e17,-9.614311896410185e17,-9.609783252087805e17,-9.605254607765426e17,-9.600725963443049e17,-9.59619731912067e17,-9.591668674798291e17,-9.587140030475912e17,-9.582611386153532e17,-9.578082741831155e17,-9.573554097508776e17,-9.569025453186396e17,-9.564496808864018e17,-9.559968164541638e17,-9.55543952021926e17,-9.550910875896882e17,-9.546382231574502e17,-9.541853587252124e17,-9.537324942929745e17,-9.532796298607366e17,-9.528267654284988e17,-9.523739009962609e17,-9.519210365640229e17,-9.514681721317851e17,-9.510153076995473e17,-9.505624432673093e17,-9.501095788350715e17,-9.496567144028335e17,-9.492038499705957e17,-9.487509855383579e17,-9.4829812110612e17,-9.478452566738821e17,-9.473923922416442e17,-9.469395278094062e17,-9.464866633771685e17,-9.460337989449306e17,-9.455809345126926e17,-9.451280700804548e17,-9.446752056482168e17,-9.442223412159791e17,-9.437694767837412e17,-9.433166123515032e17,-9.428637479192654e17,-9.424108834870275e17,-9.419580190547896e17,-9.415051546225518e17,-9.410522901903139e17,-9.405994257580759e17,-9.401465613258381e17,-9.396936968936003e17,-9.392408324613624e17,-9.387879680291245e17,-9.383351035968865e17,-9.378822391646487e17,-9.374293747324109e17,-9.369765103001729e17,-9.365236458679351e17,-9.360707814356972e17,-9.356179170034592e17,-9.351650525712215e17,-9.347121881389836e17,-9.342593237067457e17,-9.338064592745078e17,-9.333535948422698e17,-9.329007304100321e17,-9.324478659777942e17,-9.319950015455562e17,-9.315421371133184e17,-9.310892726810804e17,-9.306364082488426e17,-9.301835438166048e17,-9.297306793843668e17,-9.29277814952129e17,-9.288249505198911e17,-9.283720860876532e17,-9.279192216554154e17,-9.274663572231775e17,-9.270134927909395e17,-9.265606283587017e17,-9.261077639264639e17,-9.256548994942259e17,-9.252020350619881e17,-9.247491706297501e17,-9.242963061975124e17,-9.238434417652745e17,-9.233905773330365e17,-9.229377129007987e17,-9.224848484685608e17,-9.220319840363228e17,-9.215791196040851e17,-9.211262551718472e17,-9.206733907396092e17,-9.202205263073714e17,-9.197676618751336e17,-9.193147974428957e17,-9.188619330106578e17,-9.184090685784198e17,-9.17956204146182e17,-9.175033397139442e17,-9.170504752817062e17,-9.165976108494684e17,-9.161447464172305e17,-9.156918819849925e17,-9.152390175527548e17,-9.147861531205169e17,-9.14333288688279e17,-9.138804242560411e17,-9.134275598238031e17,-9.129746953915654e17,-9.125218309593275e17,-9.120689665270895e17,-9.116161020948517e17,-9.111632376626138e17,-9.10710373230376e17,-9.102575087981381e17,-9.098046443659002e17,-9.093517799336623e17,-9.088989155014244e17,-9.084460510691866e17,-9.079931866369487e17,-9.075403222047108e17,-9.070874577724728e17,-9.06634593340235e17,-9.061817289079972e17,-9.057288644757592e17,-9.052760000435214e17,-9.048231356112835e17,-9.043702711790456e17,-9.039174067468078e17,-9.034645423145699e17,-9.03011677882332e17,-9.025588134500941e17,-9.021059490178561e17,-9.016530845856184e17,-9.012002201533805e17,-9.007473557211425e17,-9.002944912889047e17,-8.998416268566668e17,-8.99388762424429e17,-8.989358979921911e17,-8.984830335599532e17,-8.980301691277153e17,-8.975773046954774e17,-8.971244402632396e17,-8.966715758310017e17,-8.962187113987638e17,-8.957658469665258e17,-8.95312982534288e17,-8.948601181020502e17,-8.944072536698124e17,-8.939543892375744e17,-8.935015248053364e17,-8.930486603730986e17,-8.925957959408608e17,-8.921429315086228e17,-8.91690067076385e17,-8.912372026441471e17,-8.907843382119091e17,-8.903314737796714e17,-8.898786093474335e17,-8.894257449151956e17,-8.889728804829577e17,-8.885200160507197e17,-8.88067151618482e17,-8.876142871862441e17,-8.871614227540061e17,-8.867085583217683e17,-8.862556938895304e17,-8.858028294572925e17,-8.853499650250547e17,-8.848971005928168e17,-8.84444236160579e17,-8.83991371728341e17,-8.835385072961032e17,-8.830856428638653e17,-8.826327784316274e17,-8.821799139993894e17,-8.817270495671516e17,-8.812741851349138e17,-8.808213207026758e17,-8.80368456270438e17,-8.799155918382e17,-8.794627274059624e17,-8.790098629737244e17,-8.785569985414865e17,-8.781041341092486e17,-8.776512696770107e17,-8.771984052447729e17,-8.76745540812535e17,-8.762926763802971e17,-8.758398119480591e17,-8.753869475158213e17,-8.749340830835835e17,-8.744812186513457e17,-8.740283542191077e17,-8.735754897868698e17,-8.73122625354632e17,-8.726697609223941e17,-8.722168964901562e17,-8.717640320579183e17,-8.713111676256804e17,-8.708583031934424e17,-8.704054387612047e17,-8.699525743289668e17,-8.694997098967288e17,-8.69046845464491e17,-8.68593981032253e17,-8.681411166000154e17,-8.676882521677774e17,-8.672353877355395e17,-8.667825233033016e17,-8.663296588710637e17,-8.658767944388259e17,-8.65423930006588e17,-8.649710655743501e17,-8.645182011421121e17,-8.640653367098743e17,-8.636124722776365e17,-8.631596078453987e17,-8.627067434131607e17,-8.622538789809228e17,-8.618010145486849e17,-8.613481501164471e17,-8.608952856842092e17,-8.604424212519713e17,-8.599895568197334e17,-8.595366923874954e17,-8.590838279552577e17,-8.586309635230198e17,-8.58178099090782e17,-8.57725234658544e17,-8.57272370226306e17,-8.568195057940684e17,-8.563666413618304e17,-8.559137769295924e17,-8.554609124973546e17,-8.550080480651167e17,-8.545551836328788e17,-8.54102319200641e17,-8.536494547684031e17,-8.531965903361652e17,-8.527437259039273e17,-8.522908614716895e17,-8.518379970394516e17,-8.513851326072137e17,-8.509322681749757e17,-8.504794037427379e17,-8.500265393105001e17,-8.495736748782621e17,-8.491208104460243e17,-8.486679460137864e17,-8.482150815815485e17,-8.477622171493107e17,-8.473093527170728e17,-8.46856488284835e17,-8.46403623852597e17,-8.45950759420359e17,-8.454978949881213e17,-8.450450305558834e17,-8.445921661236454e17,-8.441393016914076e17,-8.436864372591697e17,-8.43233572826932e17,-8.42780708394694e17,-8.42327843962456e17,-8.418749795302182e17,-8.414221150979803e17,-8.409692506657425e17,-8.405163862335046e17,-8.400635218012667e17,-8.396106573690287e17,-8.391577929367909e17,-8.387049285045531e17,-8.382520640723153e17,-8.377991996400773e17,-8.373463352078394e17,-8.368934707756017e17,-8.364406063433637e17,-8.359877419111258e17,-8.35534877478888e17,-8.3508201304665e17,-8.34629148614412e17,-8.341762841821743e17,-8.337234197499364e17,-8.332705553176986e17,-8.328176908854606e17,-8.323648264532228e17,-8.31911962020985e17,-8.31459097588747e17,-8.31006233156509e17,-8.305533687242712e17,-8.301005042920334e17,-8.296476398597955e17,-8.291947754275576e17,-8.287419109953197e17,-8.282890465630819e17,-8.27836182130844e17,-8.273833176986061e17,-8.269304532663683e17,-8.264775888341303e17,-8.260247244018924e17,-8.255718599696547e17,-8.251189955374167e17,-8.246661311051788e17,-8.242132666729409e17,-8.23760402240703e17,-8.233075378084653e17,-8.228546733762273e17,-8.224018089439894e17,-8.219489445117516e17,-8.214960800795136e17,-8.210432156472758e17,-8.20590351215038e17,-8.201374867828e17,-8.19684622350562e17,-8.192317579183242e17,-8.187788934860864e17,-8.183260290538486e17,-8.178731646216106e17,-8.174203001893727e17,-8.169674357571348e17,-8.16514571324897e17,-8.160617068926591e17,-8.156088424604212e17,-8.151559780281833e17,-8.147031135959453e17,-8.142502491637076e17,-8.137973847314697e17,-8.133445202992319e17,-8.128916558669939e17,-8.12438791434756e17,-8.119859270025183e17,-8.115330625702803e17,-8.110801981380424e17,-8.106273337058045e17,-8.101744692735666e17,-8.097216048413288e17,-8.09268740409091e17,-8.08815875976853e17,-8.083630115446152e17,-8.079101471123772e17,-8.074572826801394e17,-8.070044182479016e17,-8.065515538156636e17,-8.060986893834257e17,-8.056458249511878e17,-8.0519296051895e17,-8.04740096086712e17,-8.042872316544742e17,-8.038343672222363e17,-8.033815027899985e17,-8.029286383577606e17,-8.024757739255227e17,-8.020229094932849e17,-8.015700450610469e17,-8.01117180628809e17,-8.006643161965713e17,-8.002114517643333e17,-7.997585873320954e17,-7.993057228998575e17,-7.988528584676196e17,-7.983999940353819e17,-7.97947129603144e17,-7.97494265170906e17,-7.970414007386682e17,-7.965885363064302e17,-7.961356718741924e17,-7.956828074419546e17,-7.952299430097166e17,-7.947770785774787e17,-7.94324214145241e17,-7.93871349713003e17,-7.934184852807652e17,-7.929656208485272e17,-7.925127564162893e17,-7.920598919840516e17,-7.916070275518136e17,-7.911541631195757e17,-7.907012986873379e17,-7.902484342550999e17,-7.897955698228621e17,-7.893427053906243e17,-7.888898409583863e17,-7.884369765261485e17,-7.879841120939105e17,-7.875312476616727e17,-7.870783832294349e17,-7.866255187971969e17,-7.86172654364959e17,-7.857197899327212e17,-7.852669255004833e17,-7.848140610682454e17,-7.843611966360076e17,-7.839083322037696e17,-7.834554677715318e17,-7.83002603339294e17,-7.82549738907056e17,-7.820968744748182e17,-7.816440100425802e17,-7.811911456103423e17,-7.807382811781046e17,-7.802854167458666e17,-7.798325523136287e17,-7.793796878813908e17,-7.789268234491529e17,-7.784739590169152e17,-7.780210945846772e17,-7.775682301524393e17,-7.771153657202015e17,-7.766625012879635e17,-7.762096368557257e17,-7.757567724234879e17,-7.753039079912499e17,-7.74851043559012e17,-7.743981791267741e17,-7.739453146945363e17,-7.734924502622985e17,-7.730395858300605e17,-7.725867213978226e17,-7.721338569655848e17,-7.71680992533347e17,-7.71228128101109e17,-7.707752636688712e17,-7.703223992366332e17,-7.698695348043953e17,-7.694166703721576e17,-7.689638059399196e17,-7.685109415076818e17,-7.680580770754438e17,-7.676052126432059e17,-7.671523482109682e17,-7.666994837787302e17,-7.662466193464923e17,-7.657937549142545e17,-7.653408904820165e17,-7.648880260497787e17,-7.644351616175409e17,-7.639822971853029e17,-7.635294327530651e17,-7.630765683208271e17,-7.626237038885893e17,-7.621708394563515e17,-7.617179750241135e17,-7.612651105918756e17,-7.608122461596378e17,-7.603593817274e17,-7.59906517295162e17,-7.594536528629242e17,-7.590007884306862e17,-7.585479239984484e17,-7.580950595662106e17,-7.576421951339726e17,-7.571893307017348e17,-7.567364662694968e17,-7.562836018372589e17,-7.558307374050212e17,-7.553778729727832e17,-7.549250085405453e17,-7.544721441083075e17,-7.540192796760695e17,-7.535664152438318e17,-7.531135508115939e17,-7.526606863793559e17,-7.522078219471181e17,-7.517549575148801e17,-7.513020930826423e17,-7.508492286504045e17,-7.503963642181665e17,-7.499434997859286e17,-7.494906353536909e17,-7.490377709214529e17,-7.48584906489215e17,-7.481320420569772e17,-7.476791776247392e17,-7.472263131925015e17,-7.467734487602636e17,-7.463205843280256e17,-7.458677198957878e17,-7.454148554635498e17,-7.44961991031312e17,-7.445091265990742e17,-7.440562621668362e17,-7.436033977345983e17,-7.431505333023604e17,-7.426976688701226e17,-7.422448044378848e17,-7.417919400056468e17,-7.413390755734089e17,-7.408862111411711e17,-7.404333467089332e17,-7.399804822766953e17,-7.395276178444575e17,-7.390747534122195e17,-7.386218889799816e17,-7.381690245477439e17,-7.377161601155059e17,-7.372632956832681e17,-7.368104312510301e17,-7.363575668187922e17,-7.359047023865545e17,-7.354518379543165e17,-7.349989735220786e17,-7.345461090898408e17,-7.340932446576028e17,-7.33640380225365e17,-7.331875157931272e17,-7.327346513608892e17,-7.322817869286514e17,-7.318289224964134e17,-7.313760580641756e17,-7.309231936319378e17,-7.304703291996998e17,-7.300174647674619e17,-7.29564600335224e17,-7.291117359029862e17,-7.286588714707483e17,-7.282060070385105e17,-7.277531426062725e17,-7.273002781740347e17,-7.268474137417969e17,-7.263945493095589e17,-7.259416848773211e17,-7.254888204450831e17,-7.250359560128452e17,-7.245830915806075e17,-7.241302271483695e17,-7.236773627161316e17,-7.232244982838938e17,-7.227716338516558e17,-7.223187694194181e17,-7.218659049871802e17,-7.214130405549422e17,-7.209601761227044e17,-7.205073116904664e17,-7.200544472582286e17,-7.196015828259908e17,-7.191487183937528e17,-7.186958539615149e17,-7.18242989529277e17,-7.177901250970392e17,-7.173372606648014e17,-7.168843962325635e17,-7.164315318003255e17,-7.159786673680877e17,-7.155258029358499e17,-7.150729385036119e17,-7.146200740713741e17,-7.141672096391361e17,-7.137143452068982e17,-7.132614807746605e17,-7.128086163424225e17,-7.123557519101847e17,-7.119028874779468e17,-7.114500230457088e17,-7.109971586134711e17,-7.105442941812332e17,-7.100914297489952e17,-7.096385653167574e17,-7.091857008845194e17,-7.087328364522816e17,-7.082799720200438e17,-7.078271075878058e17,-7.07374243155568e17,-7.069213787233302e17,-7.064685142910922e17,-7.060156498588544e17,-7.055627854266164e17,-7.051099209943785e17,-7.046570565621408e17,-7.042041921299028e17,-7.037513276976649e17,-7.032984632654271e17,-7.028455988331891e17,-7.023927344009514e17,-7.019398699687135e17,-7.014870055364755e17,-7.010341411042377e17,-7.005812766719997e17,-7.001284122397619e17,-6.996755478075241e17,-6.992226833752861e17,-6.987698189430482e17,-6.983169545108104e17,-6.978640900785725e17,-6.974112256463347e17,-6.969583612140968e17,-6.965054967818588e17,-6.96052632349621e17,-6.955997679173832e17,-6.951469034851452e17,-6.946940390529074e17,-6.942411746206694e17,-6.937883101884315e17,-6.933354457561938e17,-6.928825813239558e17,-6.92429716891718e17,-6.9197685245948e17,-6.915239880272421e17,-6.910711235950044e17,-6.906182591627665e17,-6.901653947305285e17,-6.897125302982907e17,-6.892596658660527e17,-6.888068014338149e17,-6.883539370015771e17,-6.879010725693391e17,-6.874482081371013e17,-6.869953437048634e17,-6.865424792726255e17,-6.860896148403877e17,-6.856367504081498e17,-6.851838859759118e17,-6.84731021543674e17,-6.842781571114362e17,-6.838252926791982e17,-6.833724282469604e17,-6.829195638147224e17,-6.824666993824846e17,-6.820138349502468e17,-6.815609705180088e17,-6.81108106085771e17,-6.80655241653533e17,-6.802023772212951e17,-6.797495127890574e17,-6.792966483568195e17,-6.788437839245815e17,-6.783909194923437e17,-6.779380550601057e17,-6.77485190627868e17,-6.770323261956301e17,-6.765794617633921e17,-6.761265973311543e17,-6.756737328989164e17,-6.752208684666785e17,-6.747680040344407e17,-6.743151396022028e17,-6.738622751699648e17,-6.73409410737727e17,-6.729565463054892e17,-6.725036818732513e17,-6.720508174410134e17,-6.715979530087754e17,-6.711450885765376e17,-6.706922241442998e17,-6.702393597120618e17,-6.69786495279824e17,-6.69333630847586e17,-6.688807664153481e17,-6.684279019831104e17,-6.679750375508724e17,-6.675221731186346e17,-6.670693086863967e17,-6.666164442541587e17,-6.66163579821921e17,-6.657107153896831e17,-6.652578509574451e17,-6.648049865252073e17,-6.643521220929695e17,-6.638992576607315e17,-6.634463932284937e17,-6.629935287962557e17,-6.625406643640179e17,-6.620877999317801e17,-6.616349354995421e17,-6.611820710673043e17,-6.607292066350664e17,-6.602763422028284e17,-6.598234777705907e17,-6.593706133383528e17,-6.589177489061148e17,-6.58464884473877e17,-6.58012020041639e17,-6.575591556094013e17,-6.571062911771634e17,-6.566534267449254e17,-6.562005623126876e17,-6.557476978804497e17,-6.552948334482118e17,-6.54841969015974e17,-6.54389104583736e17,-6.539362401514981e17,-6.534833757192603e17,-6.530305112870225e17,-6.525776468547846e17,-6.521247824225467e17,-6.516719179903087e17,-6.512190535580709e17,-6.507661891258331e17,-6.503133246935951e17,-6.498604602613573e17,-6.494075958291194e17,-6.489547313968814e17,-6.485018669646437e17,-6.480490025324058e17,-6.47596138100168e17,-6.4714327366793e17,-6.46690409235692e17,-6.462375448034543e17,-6.457846803712164e17,-6.453318159389784e17,-6.448789515067406e17,-6.444260870745027e17,-6.439732226422648e17,-6.43520358210027e17,-6.43067493777789e17,-6.426146293455512e17,-6.421617649133133e17,-6.417089004810755e17,-6.412560360488376e17,-6.408031716165997e17,-6.403503071843617e17,-6.398974427521239e17,-6.394445783198861e17,-6.389917138876481e17,-6.385388494554103e17,-6.380859850231724e17,-6.376331205909344e17,-6.371802561586967e17,-6.367273917264588e17,-6.362745272942209e17,-6.35821662861983e17,-6.35368798429745e17,-6.349159339975073e17,-6.344630695652694e17,-6.340102051330314e17,-6.335573407007936e17,-6.331044762685556e17,-6.326516118363178e17,-6.3219874740408e17,-6.31745882971842e17,-6.312930185396042e17,-6.308401541073663e17,-6.303872896751284e17,-6.299344252428906e17,-6.294815608106527e17,-6.290286963784147e17,-6.285758319461769e17,-6.281229675139391e17,-6.276701030817011e17,-6.272172386494633e17,-6.267643742172253e17,-6.263115097849875e17,-6.258586453527497e17,-6.254057809205117e17,-6.249529164882739e17,-6.24500052056036e17,-6.24047187623798e17,-6.235943231915603e17,-6.231414587593224e17,-6.226885943270844e17,-6.222357298948466e17,-6.217828654626086e17,-6.21330001030371e17,-6.20877136598133e17,-6.20424272165895e17,-6.199714077336572e17,-6.195185433014194e17,-6.190656788691814e17,-6.186128144369436e17,-6.181599500047057e17,-6.177070855724677e17,-6.1725422114023e17,-6.16801356707992e17,-6.163484922757542e17,-6.158956278435163e17,-6.154427634112783e17,-6.149898989790406e17,-6.145370345468027e17,-6.140841701145647e17,-6.136313056823269e17,-6.13178441250089e17,-6.127255768178511e17,-6.122727123856133e17,-6.118198479533754e17,-6.113669835211375e17,-6.109141190888996e17,-6.104612546566618e17,-6.10008390224424e17,-6.09555525792186e17,-6.09102661359948e17,-6.086497969277102e17,-6.081969324954724e17,-6.077440680632344e17,-6.072912036309966e17,-6.068383391987587e17,-6.063854747665208e17,-6.05932610334283e17,-6.05479745902045e17,-6.050268814698072e17,-6.045740170375693e17,-6.041211526053313e17,-6.036682881730936e17,-6.032154237408557e17,-6.027625593086177e17,-6.023096948763799e17,-6.01856830444142e17,-6.014039660119043e17,-6.009511015796663e17,-6.004982371474284e17,-6.000453727151905e17,-5.995925082829526e17,-5.991396438507148e17,-5.986867794184769e17,-5.98233914986239e17,-5.97781050554001e17,-5.973281861217632e17,-5.968753216895254e17,-5.964224572572876e17,-5.959695928250496e17,-5.955167283928116e17,-5.950638639605738e17,-5.94610999528336e17,-5.94158135096098e17,-5.937052706638602e17,-5.932524062316223e17,-5.927995417993843e17,-5.923466773671466e17,-5.918938129349087e17,-5.914409485026708e17,-5.909880840704329e17,-5.90535219638195e17,-5.900823552059571e17,-5.896294907737193e17,-5.891766263414815e17,-5.887237619092435e17,-5.882708974770056e17,-5.878180330447677e17,-5.873651686125299e17,-5.86912304180292e17,-5.864594397480541e17,-5.860065753158162e17,-5.855537108835784e17,-5.851008464513404e17,-5.846479820191026e17,-5.841951175868648e17,-5.837422531546268e17,-5.83289388722389e17,-5.82836524290151e17,-5.823836598579132e17,-5.819307954256753e17,-5.814779309934374e17,-5.810250665611996e17,-5.805722021289617e17,-5.801193376967238e17,-5.796664732644859e17,-5.79213608832248e17,-5.787607444000101e17,-5.783078799677723e17,-5.778550155355345e17,-5.774021511032965e17,-5.769492866710587e17,-5.764964222388207e17,-5.760435578065829e17,-5.75590693374345e17,-5.7513782894210714e17,-5.7468496450986925e17,-5.7423210007763136e17,-5.737792356453935e17,-5.733263712131556e17,-5.7287350678091776e17,-5.724206423486799e17,-5.719677779164419e17,-5.715149134842041e17,-5.710620490519662e17,-5.706091846197284e17,-5.701563201874904e17,-5.6970345575525254e17,-5.692505913230147e17,-5.6879772689077677e17,-5.6834486245853894e17,-5.6789199802630106e17,-5.674391335940632e17,-5.669862691618253e17,-5.665334047295874e17,-5.6608054029734957e17,-5.656276758651117e17,-5.651748114328738e17,-5.647219470006359e17,-5.64269082568398e17,-5.638162181361601e17,-5.6336335370392224e17,-5.629104892716844e17,-5.624576248394465e17,-5.620047604072086e17,-5.6155189597497075e17,-5.6109903154273286e17,-5.6064616711049504e17,-5.601933026782571e17,-5.597404382460192e17,-5.592875738137814e17,-5.588347093815434e17,-5.583818449493056e17,-5.579289805170677e17,-5.574761160848298e17,-5.5702325165259194e17,-5.5657038722035405e17,-5.561175227881162e17,-5.5566465835587834e17,-5.552117939236404e17,-5.5475892949140256e17,-5.543060650591647e17,-5.538532006269268e17,-5.534003361946889e17,-5.52947471762451e17,-5.524946073302132e17,-5.5204174289797523e17,-5.515888784657374e17,-5.511360140334995e17,-5.506831496012616e17,-5.5023028516902374e17,-5.4977742073678586e17,-5.4932455630454803e17,-5.488716918723101e17,-5.484188274400722e17,-5.479659630078344e17,-5.475130985755965e17,-5.470602341433586e17,-5.466073697111207e17,-5.461545052788829e17,-5.457016408466449e17,-5.4524877641440704e17,-5.447959119821692e17,-5.443430475499313e17,-5.4389018311769344e17,-5.4343731868545555e17,-5.4298445425321766e17,-5.4253158982097984e17,-5.420787253887419e17,-5.4162586095650406e17,-5.411729965242662e17,-5.407201320920282e17,-5.402672676597904e17,-5.398144032275525e17,-5.393615387953147e17,-5.3890867436307674e17,-5.3845580993083885e17,-5.38002945498601e17,-5.3755008106636314e17,-5.3709721663412525e17,-5.3664435220188736e17,-5.361914877696495e17,-5.357386233374116e17,-5.352857589051737e17,-5.348328944729359e17,-5.34380030040698e17,-5.3392716560846e17,-5.334743011762222e17,-5.330214367439843e17,-5.325685723117465e17,-5.3211570787950854e17,-5.3166284344727066e17,-5.312099790150328e17,-5.307571145827949e17,-5.3030425015055706e17,-5.2985138571831917e17,-5.293985212860813e17,-5.289456568538434e17,-5.284927924216055e17,-5.280399279893677e17,-5.275870635571298e17,-5.2713419912489184e17,-5.26681334692654e17,-5.262284702604161e17,-5.2577560582817824e17,-5.2532274139594035e17,-5.248698769637025e17,-5.2441701253146464e17,-5.239641480992267e17,-5.2351128366698886e17,-5.23058419234751e17,-5.2260555480251315e17,-5.221526903702752e17,-5.216998259380373e17,-5.212469615057995e17,-5.2079409707356154e17,-5.203412326413237e17,-5.198883682090858e17,-5.1943550377684794e17,-5.1898263934461005e17,-5.1852977491237216e17,-5.1807691048013434e17,-5.1762404604789645e17,-5.171711816156585e17,-5.167183171834207e17,-5.162654527511828e17,-5.158125883189449e17,-5.15359723886707e17,-5.149068594544691e17,-5.144539950222313e17,-5.1400113058999334e17,-5.135482661577555e17,-5.1309540172551763e17,-5.1264253729327974e17,-5.1218967286104186e17,-5.11736808428804e17,-5.1128394399656614e17,-5.108310795643282e17,-5.103782151320903e17,-5.099253506998525e17,-5.094724862676146e17,-5.090196218353767e17,-5.085667574031388e17,-5.081138929709009e17,-5.076610285386631e17,-5.0720816410642515e17,-5.067552996741873e17,-5.0630243524194944e17,-5.058495708097115e17,-5.0539670637747366e17,-5.049438419452358e17,-5.0449097751299795e17,-5.0403811308076e17,-5.035852486485222e17,-5.031323842162843e17,-5.026795197840464e17,-5.022266553518085e17,-5.017737909195706e17,-5.013209264873328e17,-5.0086806205509485e17,-5.0041519762285696e17,-4.9996233319061914e17,-4.9950946875838125e17,-4.9905660432614336e17,-4.986037398939055e17,-4.981508754616676e17,-4.9769801102942976e17,-4.972451465971918e17,-4.96792282164954e17,-4.963394177327161e17,-4.9588655330047814e17,-4.954336888682403e17,-4.949808244360024e17,-4.945279600037646e17,-4.9407509557152666e17,-4.9362223113928877e17,-4.9316936670705094e17,-4.9271650227481306e17,-4.9226363784257517e17,-4.918107734103373e17,-4.913579089780994e17,-4.909050445458615e17,-4.904521801136236e17,-4.899993156813858e17,-4.895464512491479e17,-4.8909358681690995e17,-4.886407223846721e17,-4.8818785795243424e17,-4.8773499352019635e17,-4.8728212908795846e17,-4.868292646557206e17,-4.8637640022348275e17,-4.859235357912448e17,-4.85470671359007e17,-4.850178069267691e17,-4.845649424945312e17,-4.841120780622933e17,-4.836592136300554e17,-4.832063491978176e17,-4.8275348476557965e17,-4.823006203333418e17,-4.8184775590110394e17,-4.8139489146886605e17,-4.8094202703662816e17,-4.804891626043903e17,-4.8003629817215245e17,-4.7958343373991456e17,-4.791305693076766e17,-4.786777048754388e17,-4.782248404432009e17,-4.77771976010963e17,-4.773191115787251e17,-4.7686624714648723e17,-4.764133827142494e17,-4.7596051828201146e17,-4.7550765384977363e17,-4.7505478941753574e17,-4.7460192498529786e17,-4.7414906055306e17,-4.736961961208221e17,-4.7324333168858426e17,-4.727904672563463e17,-4.723376028241084e17,-4.718847383918706e17,-4.714318739596327e17,-4.709790095273948e17,-4.705261450951569e17,-4.7007328066291904e17,-4.696204162306812e17,-4.6916755179844326e17,-4.6871468736620544e17,-4.6826182293396755e17,-4.678089585017296e17,-4.673560940694918e17,-4.669032296372539e17,-4.6645036520501606e17,-4.659975007727781e17,-4.655446363405402e17,-4.650917719083024e17,-4.646389074760645e17,-4.641860430438266e17,-4.6373317861158874e17,-4.6328031417935085e17,-4.6282744974711296e17,-4.623745853148751e17,-4.6192172088263725e17,-4.6146885645039936e17,-4.610159920181614e17,-4.605631275859236e17,-4.601102631536857e17,-4.596573987214479e17,-4.592045342892099e17,-4.587516698569721e17,-4.582988054247342e17,-4.5784594099249626e17,-4.573930765602584e17,-4.5694021212802054e17,-4.564873476957827e17,-4.5603448326354477e17,-4.555816188313069e17,-4.5512875439906906e17,-4.5467588996683117e17,-4.542230255345933e17,-4.537701611023554e17,-4.533172966701175e17,-4.528644322378796e17,-4.524115678056417e17,-4.519587033734039e17,-4.51505838941166e17,-4.5105297450892806e17,-4.5060011007669024e17,-4.5014724564445235e17,-4.496943812122145e17,-4.492415167799766e17,-4.487886523477387e17,-4.4833578791550086e17,-4.478829234832629e17,-4.474300590510251e17,-4.469771946187872e17,-4.465243301865493e17,-4.460714657543114e17,-4.4561860132207354e17,-4.451657368898357e17,-4.447128724575978e17,-4.442600080253599e17,-4.4380714359312205e17,-4.4335427916088416e17,-4.429014147286463e17,-4.424485502964084e17,-4.419956858641705e17,-4.415428214319327e17,-4.410899569996947e17,-4.406370925674569e17,-4.40184228135219e17,-4.397313637029812e17,-4.3927849927074323e17,-4.3882563483850534e17,-4.383727704062675e17,-4.379199059740296e17,-4.3746704154179174e17,-4.3701417710955386e17,-4.36561312677316e17,-4.361084482450781e17,-4.356555838128402e17,-4.352027193806024e17,-4.347498549483644e17,-4.342969905161265e17,-4.338441260838887e17,-4.333912616516508e17,-4.329383972194129e17,-4.3248553278717504e17,-4.3203266835493715e17,-4.315798039226993e17,-4.311269394904614e17,-4.3067407505822355e17,-4.3022121062598566e17,-4.297683461937477e17,-4.293154817615099e17,-4.28862617329272e17,-4.284097528970342e17,-4.279568884647962e17,-4.2750402403255834e17,-4.270511596003205e17,-4.265982951680826e17,-4.2614543073584474e17,-4.2569256630360685e17,-4.2523970187136896e17,-4.247868374391311e17,-4.243339730068932e17,-4.2388110857465536e17,-4.234282441424175e17,-4.229753797101795e17,-4.225225152779417e17,-4.220696508457038e17,-4.21616786413466e17,-4.21163921981228e17,-4.2071105754899014e17,-4.202581931167523e17,-4.1980532868451437e17,-4.1935246425227654e17,-4.1889959982003866e17,-4.184467353878008e17,-4.179938709555629e17,-4.17541006523325e17,-4.1708814209108717e17,-4.166352776588493e17,-4.161824132266114e17,-4.157295487943735e17,-4.152766843621356e17,-4.148238199298977e17,-4.1437095549765984e17,-4.13918091065422e17,-4.134652266331841e17,-4.130123622009462e17,-4.1255949776870835e17,-4.1210663333647046e17,-4.1165376890423264e17,-4.112009044719947e17,-4.107480400397568e17,-4.10295175607519e17,-4.09842311175281e17,-4.093894467430432e17,-4.089365823108053e17,-4.084837178785674e17,-4.0803085344632954e17,-4.0757798901409165e17,-4.071251245818538e17,-4.0667226014961594e17,-4.06219395717378e17,-4.0576653128514016e17,-4.053136668529023e17,-4.048608024206644e17,-4.044079379884265e17,-4.039550735561886e17,-4.035022091239508e17,-4.0304934469171283e17,-4.02596480259475e17,-4.021436158272371e17,-4.0169075139499923e17,-4.0123788696276134e17,-4.0078502253052346e17,-4.0033215809828563e17,-3.998792936660477e17,-3.994264292338098e17,-3.98973564801572e17,-3.985207003693341e17,-3.980678359370962e17,-3.976149715048583e17,-3.971621070726205e17,-3.967092426403826e17,-3.9625637820814464e17,-3.958035137759068e17,-3.953506493436689e17,-3.9489778491143104e17,-3.9444492047919315e17,-3.9399205604695526e17,-3.9353919161471744e17,-3.930863271824795e17,-3.9263346275024166e17,-3.921805983180038e17,-3.917277338857659e17,-3.91274869453528e17,-3.908220050212901e17,-3.903691405890523e17,-3.8991627615681434e17,-3.8946341172457645e17,-3.890105472923386e17,-3.8855768286010074e17,-3.8810481842786285e17,-3.8765195399562496e17,-3.871990895633871e17,-3.8674622513114925e17,-3.862933606989113e17,-3.858404962666735e17,-3.853876318344356e17,-3.849347674021976e17,-3.844819029699598e17,-3.840290385377219e17,-3.835761741054841e17,-3.8312330967324614e17,-3.8267044524100826e17,-3.822175808087704e17,-3.8176471637653254e17,-3.8131185194429466e17,-3.8085898751205677e17,-3.804061230798189e17,-3.79953258647581e17,-3.795003942153431e17,-3.790475297831053e17,-3.785946653508674e17,-3.7814180091862944e17,-3.776889364863916e17,-3.772360720541537e17,-3.767832076219159e17,-3.7633034318967795e17,-3.7587747875744006e17,-3.7542461432520224e17,-3.749717498929643e17,-3.7451888546072646e17,-3.740660210284886e17,-3.7361315659625075e17,-3.731602921640128e17,-3.727074277317749e17,-3.722545632995371e17,-3.7180169886729914e17,-3.713488344350613e17,-3.708959700028234e17,-3.7044310557058554e17,-3.6999024113834765e17,-3.6953737670610976e17,-3.6908451227387194e17,-3.6863164784163405e17,-3.681787834093961e17,-3.677259189771583e17,-3.672730545449204e17,-3.668201901126825e17,-3.663673256804446e17,-3.659144612482067e17,-3.654615968159689e17,-3.6500873238373094e17,-3.645558679514931e17,-3.6410300351925523e17,-3.6365013908701734e17,-3.6319727465477946e17,-3.627444102225416e17,-3.6229154579030374e17,-3.618386813580658e17,-3.613858169258279e17,-3.609329524935901e17,-3.604800880613522e17,-3.600272236291143e17,-3.595743591968764e17,-3.591214947646385e17,-3.586686303324007e17,-3.5821576590016275e17,-3.577629014679249e17,-3.5731003703568704e17,-3.568571726034491e17,-3.5640430817121126e17,-3.559514437389734e17,-3.5549857930673555e17,-3.550457148744976e17,-3.545928504422597e17,-3.541399860100219e17,-3.53687121577784e17,-3.532342571455461e17,-3.527813927133082e17,-3.523285282810704e17,-3.5187566384883245e17,-3.5142279941659456e17,-3.5096993498435674e17,-3.5051707055211885e17,-3.5006420611988096e17,-3.496113416876431e17,-3.491584772554052e17,-3.4870561282316736e17,-3.482527483909294e17,-3.477998839586916e17,-3.473470195264537e17,-3.4689415509421574e17,-3.464412906619779e17,-3.4598842622974e17,-3.455355617975022e17,-3.4508269736526426e17,-3.4462983293302637e17,-3.4417696850078854e17,-3.4372410406855066e17,-3.4327123963631277e17,-3.428183752040749e17,-3.42365510771837e17,-3.419126463395991e17,-3.414597819073612e17,-3.410069174751234e17,-3.405540530428855e17,-3.4010118861064755e17,-3.396483241784097e17,-3.3919545974617184e17,-3.38742595313934e17,-3.3828973088169606e17,-3.378368664494582e17,-3.3738400201722035e17,-3.369311375849824e17,-3.364782731527446e17,-3.360254087205067e17,-3.355725442882688e17,-3.351196798560309e17,-3.34666815423793e17,-3.342139509915552e17,-3.337610865593173e17,-3.3330822212707936e17,-3.3285535769484154e17,-3.3240249326260365e17,-3.3194962883036576e17,-3.314967643981279e17,-3.3104389996589005e17,-3.3059103553365216e17,-3.301381711014142e17,-3.296853066691764e17,-3.292324422369385e17,-3.287795778047007e17,-3.283267133724627e17,-3.2787384894022483e17,-3.27420984507987e17,-3.2696812007574906e17,-3.2651525564351123e17,-3.2606239121127334e17,-3.2560952677903546e17,-3.251566623467976e17,-3.247037979145597e17,-3.2425093348232186e17,-3.23798069050084e17,-3.23345204617846e17,-3.228923401856082e17,-3.224394757533703e17,-3.219866113211324e17,-3.215337468888945e17,-3.2108088245665664e17,-3.206280180244188e17,-3.2017515359218086e17,-3.1972228915994304e17,-3.1926942472770515e17,-3.188165602954672e17,-3.183636958632294e17,-3.179108314309915e17,-3.1745796699875366e17,-3.170051025665157e17,-3.165522381342778e17,-3.1609937370204e17,-3.156465092698021e17,-3.151936448375642e17,-3.1474078040532634e17,-3.1428791597308845e17,-3.1383505154085056e17,-3.133821871086127e17,-3.1292932267637485e17,-3.1247645824413696e17,-3.12023593811899e17,-3.115707293796612e17,-3.111178649474233e17,-3.106650005151855e17,-3.102121360829475e17,-3.097592716507097e17,-3.093064072184718e17,-3.0885354278623386e17,-3.08400678353996e17,-3.0794781392175814e17,-3.074949494895203e17,-3.0704208505728237e17,-3.065892206250445e17,-3.0613635619280666e17,-3.0568349176056877e17,-3.052306273283309e17,-3.04777762896093e17,-3.043248984638551e17,-3.038720340316172e17,-3.034191695993793e17,-3.029663051671415e17,-3.025134407349036e17,-3.0206057630266566e17,-3.0160771187042784e17,-3.0115484743818995e17,-3.007019830059521e17,-3.002491185737142e17,-2.997962541414763e17,-2.9934338970923846e17,-2.988905252770005e17,-2.984376608447627e17,-2.979847964125248e17,-2.975319319802869e17,-2.97079067548049e17,-2.9662620311581114e17,-2.961733386835733e17,-2.957204742513354e17,-2.952676098190975e17,-2.9481474538685965e17,-2.9436188095462176e17,-2.939090165223839e17,-2.93456152090146e17,-2.930032876579081e17,-2.925504232256702e17,-2.920975587934324e17,-2.916446943611945e17,-2.911918299289566e17,-2.907389654967187e17,-2.9028610106448083e17,-2.8983323663224294e17,-2.8938037220000506e17,-2.8892750776776723e17,-2.8847464333552934e17,-2.8802177890329146e17,-2.8756891447105357e17,-2.8711605003881568e17,-2.866631856065778e17,-2.8621032117433994e17,-2.8575745674210205e17,-2.853045923098642e17,-2.8485172787762627e17,-2.8439886344538838e17,-2.8394599901315053e17,-2.8349313458091264e17,-2.8304027014867478e17,-2.825874057164369e17,-2.82134541284199e17,-2.8168167685196112e17,-2.8122881241972326e17,-2.8077594798748538e17,-2.8032308355524752e17,-2.798702191230096e17,-2.794173546907717e17,-2.7896449025853386e17,-2.7851162582629597e17,-2.780587613940581e17,-2.776058969618202e17,-2.7715303252958234e17,-2.7670016809734445e17,-2.762473036651066e17,-2.757944392328687e17,-2.753415748006308e17,-2.7488871036839293e17,-2.7443584593615504e17,-2.739829815039172e17,-2.735301170716793e17,-2.7307725263944144e17,-2.7262438820720352e17,-2.7217152377496566e17,-2.7171865934272778e17,-2.7126579491048992e17,-2.7081293047825203e17,-2.703600660460141e17,-2.6990720161377626e17,-2.6945433718153837e17,-2.690014727493005e17,-2.6854860831706262e17,-2.6809574388482474e17,-2.6764287945258685e17,-2.67190015020349e17,-2.667371505881111e17,-2.6628428615587325e17,-2.6583142172363533e17,-2.6537855729139744e17,-2.6492569285915958e17,-2.644728284269217e17,-2.6401996399468384e17,-2.6356709956244592e17,-2.6311423513020806e17,-2.6266137069797018e17,-2.6220850626573232e17,-2.6175564183349443e17,-2.6130277740125658e17,-2.6084991296901866e17,-2.6039704853678077e17,-2.599441841045429e17,-2.5949131967230502e17,-2.5903845524006717e17,-2.5858559080782925e17,-2.581327263755914e17,-2.576798619433535e17,-2.5722699751111565e17,-2.5677413307887776e17,-2.5632126864663987e17,-2.55868404214402e17,-2.554155397821641e17,-2.5496267534992624e17,-2.5450981091768835e17,-2.5405694648545046e17,-2.5360408205321258e17,-2.5315121762097472e17,-2.5269835318873683e17,-2.5224548875649898e17,-2.517926243242611e17,-2.513397598920232e17,-2.508868954597853e17,-2.5043403102754742e17,-2.4998116659530957e17,-2.4952830216307168e17,-2.490754377308338e17,-2.486225732985959e17,-2.4816970886635805e17,-2.4771684443412016e17,-2.472639800018823e17,-2.4681111556964438e17,-2.4635825113740653e17,-2.4590538670516864e17,-2.4545252227293075e17,-2.449996578406929e17,-2.4454679340845498e17,-2.4409392897621712e17,-2.4364106454397923e17,-2.4318820011174138e17,-2.427353356795035e17,-2.422824712472656e17,-2.418296068150277e17,-2.4137674238278982e17,-2.4092387795055197e17,-2.4047101351831408e17,-2.4001814908607622e17,-2.395652846538383e17,-2.3911242022160045e17,-2.3865955578936256e17,-2.382066913571247e17,-2.3775382692488682e17,-2.3730096249264893e17,-2.3684809806041104e17,-2.3639523362817315e17,-2.359423691959353e17,-2.354895047636974e17,-2.3503664033145952e17,-2.3458377589922163e17,-2.3413091146698378e17,-2.336780470347459e17,-2.3322518260250803e17,-2.327723181702701e17,-2.3231945373803226e17,-2.3186658930579437e17,-2.3141372487355648e17,-2.3096086044131862e17,-2.305079960090807e17,-2.3005513157684285e17,-2.2960226714460496e17,-2.291494027123671e17,-2.286965382801292e17,-2.2824367384789136e17,-2.2779080941565344e17,-2.2733794498341558e17,-2.268850805511777e17,-2.264322161189398e17,-2.2597935168670195e17,-2.2552648725446403e17,-2.2507362282222618e17,-2.246207583899883e17,-2.2416789395775043e17,-2.2371502952551254e17,-2.2326216509327466e17,-2.2280930066103677e17,-2.223564362287989e17,-2.2190357179656102e17,-2.2145070736432314e17,-2.2099784293208525e17,-2.2054497849984736e17,-2.200921140676095e17,-2.1963924963537162e17,-2.1918638520313376e17,-2.1873352077089587e17,-2.18280656338658e17,-2.178277919064201e17,-2.173749274741822e17,-2.1692206304194435e17,-2.1646919860970646e17,-2.1601633417746858e17,-2.155634697452307e17,-2.1511060531299283e17,-2.1465774088075494e17,-2.142048764485171e17,-2.1375201201627917e17,-2.132991475840413e17,-2.1284628315180342e17,-2.1239341871956554e17,-2.1194055428732768e17,-2.1148768985508976e17,-2.110348254228519e17,-2.10581960990614e17,-2.1012909655837616e17,-2.0967623212613827e17,-2.092233676939004e17,-2.087705032616625e17,-2.0831763882942464e17,-2.0786477439718675e17,-2.0741190996494886e17,-2.06959045532711e17,-2.065061811004731e17,-2.0605331666823523e17,-2.0560045223599734e17,-2.051475878037595e17,-2.046947233715216e17,-2.042418589392837e17,-2.0378899450704582e17,-2.0333613007480797e17,-2.0288326564257008e17,-2.024304012103322e17,-2.019775367780943e17,-2.0152467234585642e17,-2.0107180791361856e17,-2.0061894348138067e17,-2.0016607904914282e17,-1.997132146169049e17,-1.9926035018466704e17,-1.9880748575242915e17,-1.983546213201913e17,-1.979017568879534e17,-1.9744889245571552e17,-1.9699602802347763e17,-1.9654316359123974e17,-1.960902991590019e17,-1.95637434726764e17,-1.9518457029452614e17,-1.9473170586228822e17,-1.9427884143005037e17,-1.9382597699781248e17,-1.9337311256557462e17,-1.9292024813333674e17,-1.924673837010988e17,-1.9201451926886096e17,-1.9156165483662307e17,-1.911087904043852e17,-1.9065592597214733e17,-1.9020306153990944e17,-1.8975019710767155e17,-1.892973326754337e17,-1.888444682431958e17,-1.8839160381095795e17,-1.8793873937872003e17,-1.8748587494648214e17,-1.870330105142443e17,-1.865801460820064e17,-1.8612728164976854e17,-1.8567441721753066e17,-1.8522155278529277e17,-1.8476868835305488e17,-1.8431582392081702e17,-1.8386295948857914e17,-1.8341009505634125e17,-1.8295723062410336e17,-1.8250436619186547e17,-1.8205150175962762e17,-1.8159863732738973e17,-1.8114577289515187e17,-1.8069290846291395e17,-1.802400440306761e17,-1.797871795984382e17,-1.7933431516620035e17,-1.7888145073396246e17,-1.7842858630172454e17,-1.779757218694867e17,-1.775228574372488e17,-1.7706999300501094e17,-1.7661712857277306e17,-1.761642641405352e17,-1.7571139970829728e17,-1.7525853527605942e17,-1.7480567084382154e17,-1.7435280641158368e17,-1.738999419793458e17,-1.7344707754710787e17,-1.7299421311487e17,-1.7254134868263213e17,-1.7208848425039427e17,-1.7163561981815638e17,-1.711827553859185e17,-1.707298909536806e17,-1.7027702652144275e17,-1.6982416208920486e17,-1.69371297656967e17,-1.689184332247291e17,-1.684655687924912e17,-1.6801270436025334e17,-1.6755983992801546e17,-1.671069754957776e17,-1.6665411106353968e17,-1.6620124663130182e17,-1.6574838219906394e17,-1.6529551776682608e17,-1.648426533345882e17,-1.6438978890235034e17,-1.6393692447011242e17,-1.6348406003787453e17,-1.6303119560563667e17,-1.625783311733988e17,-1.6212546674116093e17,-1.61672602308923e17,-1.6121973787668515e17,-1.6076687344444726e17,-1.603140090122094e17,-1.5986114457997152e17,-1.594082801477336e17,-1.5895541571549574e17,-1.5850255128325786e17,-1.5804968685102e17,-1.575968224187821e17,-1.5714395798654422e17,-1.5669109355430634e17,-1.5623822912206848e17,-1.557853646898306e17,-1.5533250025759274e17,-1.5487963582535485e17,-1.5442677139311693e17,-1.5397390696087907e17,-1.5352104252864118e17,-1.5306817809640333e17,-1.5261531366416544e17,-1.5216244923192755e17,-1.5170958479968966e17,-1.512567203674518e17,-1.5080385593521392e17,-1.5035099150297606e17,-1.4989812707073814e17,-1.4944526263850026e17,-1.489923982062624e17,-1.485395337740245e17,-1.4808666934178666e17,-1.4763380490954874e17,-1.4718094047731088e17,-1.46728076045073e17,-1.462752116128351e17,-1.4582234718059725e17,-1.4536948274835936e17,-1.4491661831612147e17,-1.4446375388388362e17,-1.4401088945164573e17,-1.4355802501940784e17,-1.4310516058716997e17,-1.426522961549321e17,-1.4219943172269419e17,-1.4174656729045632e17,-1.4129370285821845e17,-1.4084083842598056e17,-1.4038797399374269e17,-1.399351095615048e17,-1.3948224512926693e17,-1.3902938069702906e17,-1.3857651626479117e17,-1.381236518325533e17,-1.376707874003154e17,-1.3721792296807752e17,-1.3676505853583965e17,-1.3631219410360176e17,-1.3585932967136389e17,-1.3540646523912602e17,-1.3495360080688813e17,-1.3450073637465026e17,-1.3404787194241237e17,-1.335950075101745e17,-1.3314214307793662e17,-1.3268927864569872e17,-1.3223641421346085e17,-1.3178354978122296e17,-1.3133068534898509e17,-1.3087782091674722e17,-1.3042495648450933e17,-1.2997209205227146e17,-1.2951922762003358e17,-1.290663631877957e17,-1.2861349875555782e17,-1.2816063432331994e17,-1.2770776989108205e17,-1.2725490545884418e17,-1.2680204102660629e17,-1.2634917659436842e17,-1.2589631216213054e17,-1.2544344772989266e17,-1.2499058329765478e17,-1.245377188654169e17,-1.2408485443317902e17,-1.2363199000094115e17,-1.2317912556870326e17,-1.2272626113646538e17,-1.2227339670422749e17,-1.2182053227198962e17,-1.2136766783975174e17,-1.2091480340751386e17,-1.2046193897527598e17,-1.2000907454303811e17,-1.1955621011080022e17,-1.1910334567856235e17,-1.1865048124632446e17,-1.1819761681408658e17,-1.177447523818487e17,-1.1729188794961082e17,-1.1683902351737294e17,-1.1638615908513506e17,-1.1593329465289718e17,-1.1548043022065931e17,-1.1502756578842142e17,-1.1457470135618355e17,-1.1412183692394568e17,-1.1366897249170779e17,-1.132161080594699e17,-1.1276324362723202e17,-1.1231037919499414e17,-1.1185751476275627e17,-1.1140465033051838e17,-1.1095178589828051e17,-1.1049892146604262e17,-1.1004605703380475e17,-1.0959319260156688e17,-1.09140328169329e17,-1.086874637370911e17,-1.0823459930485323e17,-1.0778173487261534e17,-1.0732887044037747e17,-1.0687600600813958e17,-1.0642314157590171e17,-1.0597027714366384e17,-1.0551741271142595e17,-1.0506454827918808e17,-1.046116838469502e17,-1.0415881941471232e17,-1.0370595498247443e17,-1.0325309055023654e17,-1.0280022611799867e17,-1.023473616857608e17,-1.0189449725352291e17,-1.0144163282128504e17,-1.0098876838904715e17,-1.0053590395680928e17,-1.0008303952457141e17,-9.963017509233352e16,-9.917731066009565e16,-9.872444622785776e16,-9.827158179561987e16,-9.7818717363382e16,-9.736585293114411e16,-9.691298849890624e16,-9.646012406666837e16,-9.600725963443048e16,-9.55543952021926e16,-9.510153076995472e16,-9.464866633771685e16,-9.419580190547898e16,-9.374293747324107e16,-9.32900730410032e16,-9.283720860876533e16,-9.238434417652744e16,-9.193147974428957e16,-9.147861531205168e16,-9.102575087981381e16,-9.057288644757594e16,-9.012002201533805e16,-8.966715758310018e16,-8.921429315086227e16,-8.87614287186244e16,-8.830856428638653e16,-8.785569985414864e16,-8.740283542191077e16,-8.69499709896729e16,-8.6497106557435e16,-8.604424212519714e16,-8.559137769295925e16,-8.513851326072138e16,-8.46856488284835e16,-8.42327843962456e16,-8.377991996400773e16,-8.332705553176984e16,-8.287419109953197e16,-8.24213266672941e16,-8.196846223505621e16,-8.151559780281834e16,-8.106273337058046e16,-8.060986893834258e16,-8.01570045061047e16,-7.97041400738668e16,-7.925127564162893e16,-7.879841120939106e16,-7.834554677715317e16,-7.78926823449153e16,-7.743981791267742e16,-7.698695348043954e16,-7.653408904820166e16,-7.608122461596378e16,-7.56283601837259e16,-7.517549575148803e16,-7.472263131925013e16,-7.426976688701226e16,-7.381690245477437e16,-7.33640380225365e16,-7.291117359029862e16,-7.245830915806074e16,-7.200544472582286e16,-7.1552580293584984e16,-7.1099715861347096e16,-7.0646851429109224e16,-7.019398699687134e16,-6.9741122564633464e16,-6.928825813239558e16,-6.88353937001577e16,-6.838252926791982e16,-6.7929664835681944e16,-6.747680040344406e16,-6.7023935971206184e16,-6.657107153896831e16,-6.6118207106730424e16,-6.566534267449254e16,-6.5212478242254664e16,-6.475961381001679e16,-6.430674937777891e16,-6.385388494554102e16,-6.3401020513303144e16,-6.294815608106527e16,-6.249529164882739e16,-6.204242721658951e16,-6.158956278435163e16,-6.113669835211374e16,-6.068383391987587e16,-6.023096948763799e16,-5.977810505540011e16,-5.932524062316223e16,-5.887237619092435e16,-5.841951175868647e16,-5.796664732644859e16,-5.751378289421071e16,-5.706091846197284e16,-5.660805402973495e16,-5.615518959749707e16,-5.570232516525919e16,-5.524946073302131e16,-5.479659630078344e16,-5.434373186854555e16,-5.389086743630767e16,-5.343800300406979e16,-5.298513857183192e16,-5.253227413959404e16,-5.207940970735616e16,-5.162654527511827e16,-5.11736808428804e16,-5.072081641064252e16,-5.026795197840464e16,-4.981508754616676e16,-4.936222311392888e16,-4.8909358681691e16,-4.845649424945312e16,-4.800362981721524e16,-4.755076538497736e16,-4.709790095273949e16,-4.66450365205016e16,-4.619217208826372e16,-4.573930765602584e16,-4.528644322378797e16,-4.483357879155009e16,-4.43807143593122e16,-4.392784992707432e16,-4.347498549483645e16,-4.302212106259857e16,-4.256925663036069e16,-4.21163921981228e16,-4.166352776588492e16,-4.121066333364705e16,-4.075779890140917e16,-4.030493446917129e16,-3.98520700369334e16,-3.939920560469553e16,-3.894634117245765e16,-3.849347674021977e16,-3.804061230798189e16,-3.758774787574402e16,-3.713488344350613e16,-3.668201901126825e16,-3.622915457903037e16,-3.5776290146792492e16,-3.5323425714554612e16,-3.4870561282316732e16,-3.441769685007885e16,-3.3964832417840972e16,-3.3511967985603092e16,-3.3059103553365212e16,-3.2606239121127332e16,-3.2153374688889456e16,-3.1700510256651572e16,-3.1247645824413696e16,-3.0794781392175816e16,-3.0341916959937936e16,-2.9889052527700056e16,-2.9436188095462176e16,-2.8983323663224296e16,-2.853045923098642e16,-2.8077594798748536e16,-2.7624730366510656e16,-2.7171865934272776e16,-2.6719001502034896e16,-2.626613706979702e16,-2.5813272637559136e16,-2.536040820532126e16,-2.490754377308338e16,-2.44546793408455e16,-2.400181490860762e16,-2.3548950476369744e16,-2.309608604413186e16,-2.2643221611893984e16,-2.21903571796561e16,-2.1737492747418224e16,-2.1284628315180344e16,-2.083176388294246e16,-2.0378899450704584e16,-1.99260350184667e16,-1.9473170586228824e16,-1.9020306153990944e16,-1.8567441721753064e16,-1.8114577289515184e16,-1.7661712857277306e16,-1.7208848425039424e16,-1.6755983992801546e16,-1.6303119560563666e16,-1.5850255128325786e16,-1.5397390696087908e16,-1.4944526263850028e16,-1.4491661831612148e16,-1.4038797399374268e16,-1.3585932967136388e16,-1.313306853489851e16,-1.268020410266063e16,-1.222733967042275e16,-1.1774475238184872e16,-1.1321610805946992e16,-1.0868746373709112e16,-1.041588194147123e16,-9.96301750923335e15,-9.510153076995472e15,-9.057288644757592e15,-8.604424212519712e15,-8.151559780281833e15,-7.698695348043954e15,-7.245830915806074e15,-6.792966483568194e15,-6.340102051330315e15,-5.887237619092436e15,-5.434373186854556e15,-4.981508754616675e15,-4.528644322378796e15,-4.0757798901409165e15,-3.622915457903037e15,-3.1700510256651575e15,-2.717186593427278e15,-2.264322161189398e15,-1.8114577289515185e15,-1.358593296713639e15,-9.057288644757592e14,-4.528644322378796e14,0.0]}
},{}],29:[function(require,module,exports){
module.exports={"expected":[-0.9959748854655721,0.6175515204149469,0.14923186447229106,-0.5360798368606496,-0.24704627969715842,0.8748122442480804,-0.9524344729351254,0.4310986251306361,0.9173166158470507,-0.3390157842848523,-0.8730626133516642,0.9594273045912866,-0.8630168256836014,-0.9827531328860367,0.8083664842384198,0.9962910914677245,-0.6361226262327053,0.9978282967740859,0.7098618670924043,-0.9994246698497325,-0.776531137644334,0.9910671306668833,-0.7891221295093308,-0.192589806596542,0.8464156412813347,0.28943847399974326,-0.8952791559943309,0.30874861107877055,-0.39098423766468454,-0.4020150946532629,0.29729780704773934,0.4912776516693173,-0.970903019194982,0.8399559837239944,-0.18078529125067724,-0.7816847751969996,0.0818536911497041,0.669452776032005,-0.9997600475437358,0.7013475781744907,0.9969648150480391,-0.6268056500353275,-0.1375331852304135,0.5460209618044817,-0.9804602444575952,-0.8690244833223554,0.955970186070779,-0.4417343061454208,-0.9219590065420192,0.9220344897857679,0.4419091941927871,-0.956027377968241,0.8689280127647571,0.980498575397927,-0.8152685629322721,0.13734008757594007,0.6269575365430986,-0.9969799734437683,-0.7014865272869827,0.9997557581374239,-0.6693079455885816,-0.08204798301660124,0.7818063440367006,0.18097702318015937,-0.8400617569606741,-0.2781035969209006,-0.4911078423873261,-0.2974839344007275,0.40183658655325066,0.3911636594913742,-0.3085631820375684,0.8951922887373207,-0.28925186531882985,-0.8463118111518922,0.19239850488531315,0.7890023706184097,-0.09362892415619169,0.7764082905253504,0.9994312627994838,-0.7097245440338888,-0.9978154368616063,0.6359721949232058,-0.996274297908531,-0.8084812305436703,0.9827170640414763,0.8631152919709386,-0.9593723196941507,0.4523082627947045,0.33919918077665273,-0.9173942184673309,-0.4312745190937726,0.9524938638413822,-0.8747177829002335,0.24685737006347744,0.5362443950579417,-0.14903909701789086,-0.617704840897602,0.9959923402264397,0.6930131674496053,0.029515755365699555,0.6780437266078234,0.0702614877130902,-0.7743813152930384,-0.16933895150390957,-0.5851146559928825,-0.9736214425504678,0.5013704562385474,0.2861776897329626,-0.4126327860597221,-0.380257566295565,-0.394115782113619,-0.9003979595013791,0.30054697842015876,0.8525493818385034,-0.20398483431495937,0.8417987697322418,0.9894497067872101,-0.7838037567815448,-0.9989628256449482,0.7180023387477554,0.9985266320472875,-0.737868273348782,0.9972241150553967,0.8014680521963323,-0.9848365667215057,0.5488702793004472,0.23226441190597036,-0.8673348337627911,-0.32805565504658013,0.9126257579291267,-0.9232723164009794,-0.9488272559552856,0.4388522827456602,-0.2582949141664531,-0.526229586705647,0.9798237506330675,0.6083658321927825,0.14071187243420227,0.755723512334484,-0.04132916072677828,-0.6990558866351819,-0.058465174639738965,0.7668480807915772,-0.9929827436425522,0.5946597130539275,0.1776273518269009,-0.5115630126528394,-0.2748314569183104,0.8883924923027814,-0.94326957253873,0.40495211306037254,0.9054778159649057,-0.31180009552686344,-0.8586678241963427,0.9671444681640909,-0.8481206252063869,-0.9876680450902894,0.7910897006644673,0.9983548015357337,-0.7261798056442647,0.999310652523734,0.7298384577550383,-0.9980345882008848,-0.7943428832104976,0.9868184563355871,-0.8064727178680731,-0.2207508291321449,0.8613908184061767,0.3168662894827543,-0.9077297744771159,0.9277486553073642,-0.36433364557498443,-0.42820009700024264,0.2696963662352189,0.5161412473033627,-0.9773927843530679,0.8239906956381227,-0.15240505085616804,-0.7634119268150518,0.0531367910864884,0.6905545124567646,0.04666069211756219,0.6805424311489834,0.9943112663681286,-0.6041216771947111,-0.1659822977151732,0.5216840874051222,-0.9743926805750732,-0.8829037590247608,0.9471284447227601,-0.41573185928665224,-0.9104311483100015,0.32300964421972345,0.4675431415364152,-0.9640717726770004,0.8543239711902549,0.9857483746796223,-0.7982651040954744,0.10877634666046655,0.6491186615087764,-0.9988020016207896,-0.7217066604607645,0.998705604096058,0.7871067191994311,-0.11069653233945854,0.7994271809240315,0.20920640042973193,-0.8553264392902281,-0.30563264759627284,-0.4658345695722655,-0.32483733764690553,0.3753163597015288,0.4174880780498258,-0.2810601331234312,-0.5059807865137298,-0.2615827227515662,-0.8306307280307431,0.16407693343370344,0.7709936683111059,-0.06493699654242957,0.7579489337606615,0.9999877758861966,-0.6891559534255756,-0.9955008521101534,0.613499226277186,0.15431405058477266,-0.8250837517044153,0.9769825058891533,0.8772916559437477,-0.9508549728676583,0.4264535145182412,0.366132038409091,-0.9284679020411355,-0.4570614018730436,0.9608643656276924,-0.860407940878643,-0.983690963794366,0.5603140355775518,-0.12051922386216606,-0.6400815181523697,0.9981537862354098,0.7134740177372926,0.0007364994422978709,0.6566092652038655,0.09894082736733731,-0.792269938516275,-0.19763273892346916,0.8491425438020463,-0.9666515337632018,0.4762617550918658,0.3136350582809919,-0.3862466301671612,-0.406717722704967,0.9439092410264316,-0.8875039509023825,0.2729734832288893,0.8371546948293174,-0.175725889232701,-0.7784676774116461,0.9932093502213922,-0.7656067319999819,-0.9998594637586431,0.6976731786444917,0.9965513346455732,-0.7569872541151635,0.9946681645219595,0.8183473340613017,-0.979435815599979,-0.8715569672494617,0.9544486362586372,-0.8812998825044985,-0.35510662995904835,0.9240127068884263,0.4465157961602547,-0.957522695193187,0.46453064934199506,-0.23038495766914943,-0.5504841045696813,0.13224526068601836,0.6309549350014366,-0.9973660969439496,0.7365630032511488,-0.012557062350836283,-0.6654788657839278,-0.0871712972073001,0.7850019907397481,-0.9891679800048915,0.5712752686804543,0.9696112025689628,-0.4866223916605775,-0.3023889540984364,0.3971229296646294,-0.9333232344663777,-0.9399400668466584,0.8928888864265757,-0.28432610060793706,-0.8435616844276931,0.9740604152580443,-0.8325218117862904,-0.9917647383630281,0.7731575505705316,0.9995914393874804,-0.7060929166778309,0.9999651441965567,0.7492104245806951,-0.9958176996117587,-0.8114965672058865,0.9817522669019698,-0.8231551958745674,-0.24872897392006602,0.8756523890935564,0.3440316017916451,-0.9194283977021134,-0.43590779795537105,-0.33738122668459064,-0.4540303633328465,0.24187149947132636,0.5405772533824172,-0.9830728429668767,0.8073427846913476,-0.12389855275949996,-0.7445066411540314,0.024375870637432545,0.7110841692459184,0.07538958643793468,0.6591734988480156,0.990833995278645,-0.580937228717897,-0.19429390462914742,0.49691503156716466,-0.9675178955397171,-0.8960516062133755,0.9375020688734026,-0.3893850055399695,-0.8981490569071424,0.2956389885661288,0.4927897597044095,-0.9713174964358756,0.8390121776029698,0.9901815453522607,-0.780600334382229,0.08012249159522282,0.6707420337545139,-0.999796587105276,-0.7413289064643335,0.9968280872212556,0.8045324084087085,-0.13925337676322214,0.8163857442296156,0.23726246374222162,-0.8698825391271818,-0.3329085014413992,-0.44017538302265374,-0.35192163422242984,0.34848520758261703,0.4434666348069972,-0.25332424411392124,-0.530594866318711,-0.2336968758604396,-0.814261521212416,0.13561943488206493,0.7523462477435269,-0.03619127283777357,0.7388616654524063,0.9997158639432853,-0.6680164417971267,-0.992361559454477,0.5905180133036266,0.1826849737670341,-0.8410027444781835,0.9704385810816568,0.8907412406662603,-0.9415499043529002,0.4002454771577339,0.3927615793889865,-0.9387724101631983,-0.4824696389183194,0.9684388535928793,-0.8453853066698886,-0.9884599924116272,0.5839194922514036,-0.09189950834435856,-0.6619279293744679,0.9994883265562592,0.7333438010654301,-0.02804336662313456,0.6346308456005229,0.12753820096177917,-0.8095022174689991,-0.22576280043402727,0.8639911388373638,-0.9588808168612725,0.4507585019635651,0.3408326005204273,-0.35954049398708643,-0.4328409398541046,0.9530214148588746,-0.8738747028289171,0.24517384720731814,0.8210664794394976,-0.14732136664589332,-0.7600807275766599,0.9961461841120769,-0.7467754516855696,-0.9999277831409913,0.676766041552285,0.993750459082972,-0.7754791200272062,0.9912881959119713,0.8345486682244987,-0.9732236654152646,-0.8853064101701003,0.945466175293205,-0.8945348314401114,-0.3818634220549488,0.9346341712362777,0.4720821017420566,-0.9654248889672346,0.48982418241713865,-0.20228414217338167,-0.5742825820483903,0.10366368380233015,0.6530213325597622,-0.9990404056233327,0.7167922994809359,0.016225438737019635,-0.6437216621777816,-0.11580520400761614,0.8025055774408599,-0.984533754836901,0.5474175597903618,0.9621686220400089,-0.4612786355711192,-0.3296959416380471,0.3705455411220344,-0.922603698614206,-0.949374331467412,0.8795602563438731,-0.25661655995135374,-0.8277567085029791,0.9801694164594336,0.6097434204911678,-0.9950398188595203,0.7545848895801823,0.9999999805486924,-0.6854210755154586,-0.06019901990259795,0.7679617191510058,-0.9927758406307996,-0.827977978915615,0.9758727593754679,-0.5100698131510522,-0.2765010628815492,0.8891885385569291,0.3709119062266613,-0.9303653341185609,-0.46162859964572983,-0.31014930932486495,-0.47948449495034257,0.213846257853914,0.5645654262599604,-0.11541337413877241,0.7900260425983796,-0.09528941274588523,-0.7249845800172242,-0.004405243639829892,0.6527225303163422,0.10405602537446726,0.6372584840463626,0.9865358824732076,-0.5572715114170878,-0.9653219815873462,0.4717343138472587,-0.9598415846651437,-0.9084571327493561,0.9270990333508898,0.9455945902148379,-0.8851229072497553,0.26802341518077105,0.5176281335106968,-0.9777585466325703,-0.6003318121207457,0.9937944148214022,-0.7622888879087981,0.051402260241114446,0.6918097397185403,0.04839563440875258,-0.7603370095392505,0.9941247629140029,0.8212915946863087,-0.16769485879401239,0.8326679848834065,0.26512197048842717,-0.8837179976866886,-0.3599085621800306,-0.41415153971071583,-0.37871438654382794,0.32136535806622024,0.4690778082131555,-0.22537849239459107,-0.5547693826825703,-0.20561742626138377,-0.7972177515233235,0.10704958442266414,0.7330755570944488,-0.007415567010339918,0.719162298164693,0.9986157522321628,-0.6463235218631667,-0.9884001595949797,0.5670475944472944,0.21090455429446084,-0.8562250210117047,0.9630907108363589,0.903452904029652,-0.9314648227957679,0.37370586237271514,0.41906574286838993,-0.9482992062167208,-0.5074781811527667,0.9752110527648198,-0.8296623255522922,-0.9924101460203713,0.6070412094893031,-0.06320366004297265,-0.6832259762287964,0.9999948556088684,0.7526060566069565,-0.056800000577749504,0.6121266754932791,0.1560299174267463,-0.8260638763254992,-0.25370583210367376,0.8781239732383554,-0.9503157293797524,0.42488182464514207,0.36774778505110695,-0.3325365018216039,-0.45860557635149035,0.9613440722463419,-0.8595215062292438,0.21717110055126368,0.8042980637122786,-0.11879479785965115,-0.7410641001451638,0.9982577754828201,-0.7273255163329626,-0.9991677271938147,0.6552982476785245,0.9901263257032686,-0.7933285517730793,0.9870870093102566,0.8500586329311202,-0.9662052625309729,-0.8983224341362704,0.9357004569088692,-0.9070287162726368,-0.40830386506703387,0.9444813517782017,0.4972573179140164,-0.9725272908222922,0.5147119279190594,-0.17401574738263303,-0.5976053036463592,0.07499622827852681,0.6745467442882445,-0.9998870741079239,0.6964277797699177,0.04499449810099601,-0.6214311769156804,-0.1443431737056255,0.8193443403083247,-0.979083907293633,0.523106350948448,0.9539289471980664,-0.4355527400430069,-0.3567297974686463,0.343661179626086,-0.9111198454225765,-0.9580221010152901,0.8655029676225466,-0.22869442911476418,-0.8112659898199045,0.9854664108568922,0.632301507620846,-0.9974905733879422,0.7353871039387339,0.9995800865695088,-0.6641814074371167,-0.08890145842364945,0.786076807234318,-0.9889115312409286,-0.843773464558794,0.9691848045468192,-0.4851042762835291,-0.30404408864172894,0.9019880529741959,0.3974849341985914,-0.9405315231838268,-0.4869669719748918,-0.2826604533735274,-0.5045414047552205,0.18564385847840742,0.5880858932902399,-0.08677831715003552,0.772054815157165,-0.06660133163270865,-0.7048619161664033,-0.033182708458388104,0.6306488445908177,0.13263626064133296,0.6148155419127416,0.981420488659571,-0.5331441308044992,-0.9574088707302457,0.44616279483722976,-0.9513701072771535,-0.9201100614583851,0.9159279563955829,0.9545662635540215,-0.8713634906581704,0.2401858017755097,0.5420376859731852,-0.9833895872746568,-0.6230996340186643,0.9965839900589626,-0.7433459345212069,0.02263944544749828,0.712304326172568,0.07712143427618674,-0.7787152227046698,0.9905978707031953,0.8373703941331249,-0.19599741650821173,0.49540699766031987,0.292761840873517,-0.8968213531884713,-0.38661046201262317,-0.387784598703159,-0.89738400064746,0.293979278189117,0.4943003810718515,-0.1972460292086401,-0.57848430858606,0.9904228490474832,-0.7795135386214755,0.07839105032403787,0.7131975608814959,0.021366282133510554,-0.7424934976301695,0.9966883521240469,-0.6240951648012159,-0.9836199342945743,0.5431074134283076,0.9607550137200296,-0.8707379706359366,0.9549449823872962,0.9154161152450946,-0.9206080830323794,-0.950977042753205,0.44502273755351235,-0.9570403978689229,-0.5320663106207854,0.9811753528156332,0.6138106935325691,-0.995538152174475,0.6296600324478113,-0.03445545160758705,-0.7039580146645765,-0.065330633805647,0.7712448268321876,-0.08550957941499607,0.5891153981278194,0.18439237322264979,-0.5056404948854658,-0.28143868494259394,0.8915293388681426,-0.94096336693823,0.3986531602858211,0.9025371568357784,-0.3052570247271895,-0.4839902878664551,0.20882063838019116,-0.844456251796034,0.18898844172053464,0.7868633391927676,-0.09016981528645156,-0.7214335491598802,0.9995423750170942,-0.7072730389523988,-0.9975799255741808,0.633287581698388,0.985681936865967,-0.5529948066316513,0.9820680851274952,0.864864379181127,-0.958386421238796,-0.9105942562161208,0.9251595713700678,-0.918771186628638,-0.43440605480275857,0.9535460907636448,0.5220205886419845,-0.9788240168789675,0.8200737592368409,-0.14560319182896633,-0.6204329480010708,0.0462666432426119,0.6955133377790492,-0.9999054009877844,0.675486314802168,0.073726282440896,-0.5986258762192711,-0.17276156444393492,0.8355043295189908,0.2700762030548371,0.49836178241481516,0.9448990040794528,-0.40946601731252885,-0.38346812579364786,0.31649211712700775,-0.8988811885192052,-0.9658762113739738,0.8507286658147781,-0.20058283977299798,-0.7941031898695824,0.10193598065096562,0.6543357739520971,-0.9991149716570824,0.7155800977667387,0.998332105304864,-0.6423915081305538,-0.11753024785107782,0.8035406816548006,-0.9842279727718997,-0.8588699385998024,0.9616939429529289,0.9056451581388959,-0.331335233589749,0.9140403287776272,0.42372867167684836,-0.9499185428694816,-0.5119019237444107,-0.2549374315652602,-0.5291803347224843,0.15728766520394724,0.6111191692914703,-0.058071369952548794,-0.6869714755065717,-0.03785807563493717,-0.6841553199237452,-0.06193268355467117,0.608052707191022,0.1611066153668554,0.5918632649694314,0.97549205160981,-0.5085750748504654,-0.9487026087054783,0.420221658882431,0.3725243544768524,-0.9310007386446437,0.9039980925203679,0.9627471406412588,-0.8568822059168254,0.21214921000796308,0.5659981953604604,-0.9882059534100993,-0.6453512582737535,0.9985479600827434,-0.7237871672280098,-0.998944786212608,0.7322088146806603,0.10578334403614605,-0.7964483208026911,0.9862503323903334,0.8527554865064207,-0.22413760307199063,0.47020210279509156,0.32015917705714264,-0.9091817503521642,-0.41299208014661004,0.9461582610705244,-0.884313290874568,0.2663496555426766,0.5191134581169914,-0.16895016047761072,-0.601719997750828,0.993986115931595,-0.7611635492992581,0.04966757432336744,0.6927287267355717,0.05013043069807772,-0.6173945738142484,0.9939352603449477,-0.6013497853637361,-0.9780248436599553,0.5187173031342758,0.9523736493314773,-0.8845295703131858,0.9460081439422914,0.9266209635678326,-0.9089886791676399,-0.9594835434396521,0.8629160122564423,-0.9649887436093305,-0.5562136576514914,0.9863268127094732,0.636276566450184,-0.9978414195236709,0.6517572228987909,-0.005678699064756301,-0.7241068695323016,-0.09402165891557339,0.7892446707285947,-0.9881348813946831,0.5656160768553093,0.2126020718939834,-0.48060164138694866,-0.3089383840805059,0.9041961302505513,-0.9308314773625482,0.3720942376332656,0.8897704828686112,-0.2777246619817197,-0.5089740448115421,0.180589048027555,-0.8286914201157018,-0.9926222395959335,0.7687767494197006,-0.061470132868212686,-0.7012053372593869,0.9999989185074828,0.7537486227021023,-0.9951656936727731,0.6107522780213914,0.980420974459029,-0.5287870500736108,-0.2553855248813105,0.8789536413738072,-0.9497736189417433,-0.9221117100008059,0.9138522511169621,-0.33089794226651353,-0.460148367290484,0.9618208786441469,0.5463513991618997,-0.9843098507080241,-0.6271129665051467,-0.11707001347228849,-0.6427466038894015,0.01749872929286112,0.7159037435690163,0.08224683597174548,0.653985253223495,0.10239698933646321,-0.5753246528014053,-0.20103683342856538,0.49093402460744184,0.2976744225623478,0.473204353459969,0.9350862734065087,-0.3830400785379131,-0.8951033455594226,0.28906086143134324,-0.8858978668377394,-0.9729301559223189,0.8352495904715981,0.9911196622876085,-0.7762825269188759,0.07326410207576678,0.6758279655240442,-0.9999116679583068,0.695180279884455,0.9962570706263124,-0.6200694291144122,-0.14606167108923307,0.8203388747249145,-0.9787290452482063,-0.8732548945888055,0.953406380286894,0.9174736080300464,-0.3583518887816729,0.9253353814382314,0.4496213774266671,-0.958518616638403,-0.5364127979636146,-0.22700321062597406,-0.5533808730963305,0.12880116929794677,0.6336461726880427,-0.029316314390606692,-0.7076005830290255,-0.009083456676351898,-0.6628819453615492,-0.09063135143856056,0.5849528375515783,0.18944350370826163,0.568420667689574,0.9687554826495995,-0.48358469742470095,-0.9392104080865866,0.3939323965318872,0.3990781333212243,-0.9411201420882727,0.8913193248438912,0.9701304441503595,-0.8416910498311112,0.1839368663764201,0.5894898119441778,-0.9922036549918647,-0.667068250858191,0.9996846978709307,-0.7036287891996504,-0.9972092387054111,0.751506715664765,0.13435761915493266,-0.8135216131114165,0.9810857496290002,0.8674341262547882,-0.2520921061654888,0.44460767597724304,0.34729128212281496,-0.9207889493902083,-0.4390315611220434,0.9550824190233802,-0.8705099848821468,0.2384993794776604,0.5434964833232099,-0.14051432749394374,-0.6244572009150842,0.9967259297721865,-0.7421829853329476,0.02090295195798898,0.6716860117584955,0.07885304945144363,-0.5944992857414625,0.9903587576528842,-0.5781062266227014,-0.9716195228609086,0.49389746919003774,0.9432033051296854,-0.8975883945974151,0.9362875990925001,0.9370581665075922,-0.8966162371242087,-0.9671951742266213,0.8480148981170085,-0.9721376587488959,-0.5799002177336682,0.9906611647958565,0.6582153254908883,-0.9993180399603118,0.6733144747528119,0.023102757912022927,-0.743655848812236,-0.12263479317778074,0.8065906765926822,-0.9833053650525737,0.5416481793396453,0.2406356435346132,-0.4551646405924303,-0.33618214779985023,0.9161138537702807,-0.9199284542662335,0.34522705903272005,0.876266691752211,-0.24996222236243437,-0.5335361497641562,0.1522078513586522,-0.812240071329048,-0.995700544592467,0.7500532779599073,-0.03271952643083047,-0.6803962222055758,0.9996270277373083,0.7723492702788576,-0.9919270315241744,0.5877110056853635,0.9743477968486696,-0.5041412277329822,-0.2831049578851155,0.892314747469031,-0.9403739907880337,-0.9328652540266971,0.9017878635311755,-0.30360256221055515,-0.48550947669353545,0.9692988602945152,0.5702295929749408,-0.9889802476518554,-0.6492704264580502,-0.08843985020067713,-0.6645277858943429,-0.011283681219430113,0.7357010695291339,0.11089483121030173,0.6319424072692128,0.13098286696614334,-0.5515468102147522,-0.22914555643263024,0.46565800419622183,0.325026038113014,0.4476549053825032,0.9244988843903051,-0.35629681589588436,-0.8819009562291767,0.26139013755569807,-0.8721806362183082,-0.9791780909246696,0.819078565003211,0.9945360283027365,-0.7578187642314855,0.04453152894269827,0.6967602774495989,-0.9998800022803903,-0.7647868757494162,0.9933567015655326,-0.5972336627837154,-0.1744720917040394,0.8364574702309546,0.27174815498894944,-0.886916415522537,0.9443289822569887,0.9285419905291349,-0.3850716726705284,0.31484402054023153,0.4751416010203072,-0.9663246198871319,-0.5604792889625839,-0.1988809322463648,-0.7930463310636743,0.10020796997510033,0.6556482413183724,-0.0005369721631641245,-0.7276434893517312,0.998230324072957,-0.6410594160912002,-0.11925493712463626,0.5613683724166068,0.2176234503910236,-0.8597582746862357,0.9612163625895007,-0.4581937014344397,-0.9289401325462763,0.3673167867347683,0.8874119910266708,-0.9504598885196962,0.8779021569030373,0.9767100574931259,-0.8258026072887974,-0.9932325436230465,0.6124930744432765,-0.9953793801834174,-0.6882326206518261,0.9999932617099769,0.7571176161112605,-0.9946475680064746,0.7701820420652599,0.16282058769846638,-0.8299209555152598,-0.2603533802119278,0.8813941530770099,-0.279837767295561,0.4186449205297608,0.3741356788808274,-0.9316333344908518,-0.4647073329174259,0.9632153531229528,-0.8559855178141563,0.21045152214187912,0.567429256935204,-0.11196208750138746,-0.6466770817803666,0.99864002081115,-0.7225875708890239,-0.007878987147666315,0.6500868484751429,0.10751034356644595,-0.5711114935598484,0.9859618069484236,-0.5543837443593352,-0.9644092782903727,0.4686684732186114,0.933251578150188,-0.9099036250994849,0.9257914006790168,0.9467190775185225,-0.8835010066680463,-0.9741055465280547,0.8324112586227306,-0.9784812208749868,-0.6031063680882067,0.9941748183451342,0.6796087958154025,-0.999966790200115,0.6943139292245608,0.051865075751935504,-0.7625887574426703,-0.1511463324659083,0.8232684743833675,-0.9776612439764703,0.5172315614297568,0.2684698641482296,-0.4293505654076451,-0.36314740640896626,0.927272636366181,-0.9082633300969309,0.31807388219949334,0.8620369705018847,-0.22199270525034473,-0.5576562546130369,0.12370056035458708,-0.7951158343117792,-0.9979539762525043,0.7307084359953965,-0.003941813987448599,-0.6590234430009332,0.9984270107939588,0.7903100765670092,-0.9878666221499687,0.5641828528903582,0.967467435268733,-0.4790777570754537,-0.3105898567888264,0.9049366286567796,-0.9301953237600881,-0.9428459796798662,0.888976403175526,-0.27605566711845514,-0.5104683729772753,0.9759738406918507,0.5936353885458794,-0.9928313385894383,-0.6708900079635938,-0.05973642024792307,-0.6857584497189718,-0.04005674393350432,0.7548889148585719,0.13945095727200818,0.6093760380078594,0.15946023378392826,-0.5273120468600563,-0.25706444720178834,0.43999621632341546,0.3521083906669264,0.42173460424343445,0.9131456079961185,-0.32925838444541494,-0.8679679691422311,0.23350286890053687,-0.8577408604970068,-0.9846148403720141,0.8022289860556318,0.9971284857076029,-0.7387271978375431,0.015762064325480486,0.7171153686656547,-0.9990200008562936,-0.7830122845707477,0.9896334008902212,-0.5739031270901175,-0.20273797350424835,0.8518831149617303,0.2993321397489175,-0.899843183716764,0.9344692688988707,0.9388411361989736,-0.4114724496479677,0.28739766808888245,0.5002682006073418,-0.9733300858481455,-0.584081459214081,-0.17059389391052324,-0.7751864371428844,0.07153175484696403,0.6771071478952904,0.028242814910896478,-0.7470835902264525,0.9961054300708384,-0.6187058106631497,-0.14777972782821056,0.5373188499861727,0.24562311015660065,-0.450580385740245,0.9528809371016204,-0.43242312167341895,-0.9179002903418717,0.3403968787979421,0.8737776849855993,-0.9590122405646176,0.8637577039514294,0.9824805298865482,-0.8092300408342682,-0.9961636645237926,0.7466427359387883,-0.9977304981023614,-0.7088268343466565,0.9994733959747497,0.7756050807951149,-0.9912618962938645,0.7882193225851953,0.19114866994294713,-0.8456327622224302,-0.288032596466077,0.8946240019960805,-0.9386126388889712,0.3923353449120176,0.40067012848915035,-0.298699510442552,-0.48999812482073174,0.9705503257607084,-0.8407519222497456,0.18222931936641454,0.7825997466407406,-0.08331709417934882,-0.6683612326161932,-0.01642493946663633,-0.7023935394977188,-0.9970780616400937,0.6279491303917288,0.1360785723331494,-0.5472505725386825,0.9807480508201112,0.8682970181929583,-0.9564000831684369,0.44305121580722306,0.9225267127534827,-0.35148780885430747,-0.4405914583286734,0.9555956931622978,-0.8696538529171484,-0.980208935548593,0.816118020377135,-0.13879444346805078,-0.625812883924306,0.9968648625231781,0.7004392543207899,-0.9997871327955744,-0.7680895002626278,0.08058442673970014,-0.78088991073648,-0.17953265681844363,0.8392642476266274,0.2766928058467423,0.49238645071032344,0.29608167488792225,-0.40318080112000887,-0.38981182093961775,0.3099596149517729,0.4796595806744528,0.2906572017798851,0.8470931075189835,-0.193839281576737,-0.7899037020039267,0.09509079145744427,-0.777332895383869,-0.9993806677540352,0.7107582494733489,0.024839163993220892,-0.6371047056071445,-0.124358402323212,0.8076161622031889,-0.9829878293360316,0.5401873111853186,0.9597855896526415,-0.453617401561262,-0.3378174521359181,0.9168088285269353,-0.9192460502235186,-0.9520456185762946,0.8754284835141782,0.9778003747722982,-0.5350043793145546,0.9818402900477232,0.6165493956907983,-0.9958599331416491,-0.6919538006003892,-0.030983502544511602,-0.70642100713498,-0.06879662223264871,0.7734513836716815,0.16789155725810154,-0.8327784610588458,0.18780549813798134,-0.5026404396672903,-0.2847703767453957,0.41396992011627554,0.37889904425110826,0.39546492333149375,0.9010358496772556,-0.30194718377369534,-0.8533159268749236,0.20542215825963256,0.5716555744773664,-0.9892359002699733,0.7847148124124329,0.9988948868193519,-0.7190236438618421,-0.01302045813996369,0.7368763762990346,-0.9973323761414313,-0.8005890184875616,0.9850902531135562,-0.5500971498696072,-0.9630369834910448,0.8666030297708347,0.3266681472408443,-0.9120244901822545,0.923835408345719,0.9483625128652075,-0.4375323483821834,0.25971322530538965,0.5249803604293095,-0.9795292109471538,-0.6071997558504996,0.9947158503784472,-0.7566843515247159,0.042796280298305685,0.6980051151061677,0.05699920464416609,-0.7659047807901788,0.993155327310859,-0.595839647590009,-0.17618209260983253,0.5128241937301548,0.27341928710247276,-0.42470119431692593,0.943756111545477,-0.4062943073959162,-0.9061000272667776,0.31319497411955355,0.8594195107913122,-0.9667701131539324,0.8488976837511619,0.9874370808684263,-0.791987079764208,-0.9982695284232095,0.7271885677240933,-0.9992550609999554,-0.7288338309720366,0.998125531340301,0.7934500069624713,-0.9870550283770562,0.805603614507261,0.21931839790912705,-0.8606440170198791,-0.31547319639109295,0.9071127129400401,-0.9282956772085745,0.3657007449014079,0.4268726488768696,-0.2711100825867257,-0.5148829850508122,0.977081260387442,-0.82482181823504,0.15385615141623998,0.7643595729702815,-0.05460307804735377,-0.6894916895096723,-0.04519382244960291,-0.6816176206045884,-0.9944666006577546,0.6052911971721986,0.16453406882648441,-0.5229362899038056,0.9747218085268211,0.8822133052460132,-0.9475985725939156,0.41706691919252564,0.9110375937951132,-0.3243990011425575,-0.4662445989530205,0.9636806597384483,-0.8550862473404998,-0.985500285026198,0.799148681271598,-0.11023593492195671,-0.6480009543659657,0.9987290688028184,0.7206894443228986,-0.9987792165812,-0.7862001251754267,0.10923701875528642,-0.7985441473748719,-0.20777025000632895,0.8545647448615519,0.30423416387820407,0.46713342974453265,0.3234482011589394,-0.37667702768229505,-0.4161533016533798,0.2824690571462632,-0.8826860570807211,-0.974496780425324,0.8314474828249766,-0.1655252746275585,-0.7719279890149535,0.9943605214927347,0.680881919942466,-0.9999794371756627,0.6902192458296583,0.9956389153159462,-0.7637111821790212,-0.15286305438821018,0.8242531902176339,-0.9772946948458513,-0.8765859312832338,0.9513086239113704,-0.4277812534440124,-0.3647651876291778,0.33555769928293644,0.45575484584434267,-0.9604565494116933,0.8611553281200773,-0.22029880454954986,-0.8061986162305533,0.12197680938150746,0.638952631640602,-0.998063522314286,0.7295215670137052,0.99929334052346,-0.6577160841263605,-0.09747950699128645,0.7913730981667065,-0.9875953826701316,-0.8483660627639867,0.967026546762173,-0.47755242746322063,-0.3122403924973747,0.3876006766735738,0.4053758045462646,-0.943423344146644,0.8881796415832444,-0.27438583943952854,-0.8379569676941834,0.17717126868089988,0.5950322394459611,-0.9930374423700673,0.7665505534307977,0.9998337682892019,-0.6987244254212044,-0.04179219400013086,0.7560269296362868,0.14117068010781053,-0.8175025163155449,0.979731021938877,-0.5258354528306491,-0.25874259400006794,0.4384358130162979,0.3537335313550849,-0.9234502434964802,0.9124362100614651,-0.32761783330459104,-0.8671040780458215,0.2318136269554433,0.5492576080642203,0.8072046792713351,-0.12366634570956281,0.9972585145324204,-0.7375554019873637,0.014025351806480376,-0.9993558823142614,0.0857083742324154,-0.7840914689069596,0.9893824597618605,-0.19452344663335996,0.8474635523376625,0.4879046958829419,0.3009889538984413,-0.9005994876281346,-0.38916945713235224,-0.40381894490777465,-0.8935491190737812,0.4929933667740154,0.501771380380347,0.8388848286249306,-0.5854904149674224,0.9915756042576717,0.07988923502211498,0.06979919181833223,-0.9998012793884451,0.029978983961202764,-0.7482370360285858,-0.6252687469243966,-0.13948509967757292,0.8165208623838122,0.535853170363784,-0.8699979412061987,-0.8749422840563891,-0.4399652535849685,-0.3521406617584155,-0.9172096827535424,0.44367636074097094,0.45272153295490686,0.8679508454667345,-0.539341298114588,0.9828027465473037,0.13538758645059581,0.6284917636735569,-0.9971310961820027,-0.025843826805850657,-0.7100509472474402,-0.6678422882334265,-0.08401208931921209,0.7830337304993426,0.582131819445005,-0.8411293262991127,0.970382077411161,-0.4893900305195177,0.8953987357814616,-0.938012038047599,0.3929767706394704,-0.9388530086378726,0.8943121542886177,-0.4915114861600622,0.970967279376423,0.19046404314531015,-0.9899752114209369,-0.9913536535185971,-0.08158610305186259,0.9994957840592334,-0.7083346997152762,0.7403425898524048,0.747106509269017,0.6265964296219179,-0.8096395845776295,0.9823503122882791,-0.23583571901463224,0.8691572906183193,-0.9558913606660838,0.341052586508547,0.9218549920113749,-0.3498612017521997,-0.4421500263415546,0.9561060844223085,0.24494697587758785,-0.9805513046071926,0.815113057805406,-0.13707414072158763,0.9961666812136558,-0.7466197989361674,0.7016778474001466,0.676593747717947,0.6691084402970229,-0.7756268443602179,0.9912573475803113,-0.18124106932482173,-0.9731698499481574,-0.9707919350721902,0.2880656144665774,0.9420435606613602,-0.401590716297114,0.9347173609332735,-0.8995387319496154,0.2986666049578538,-0.9680718042752595,0.8461687613769462,-0.5744741375851286,0.9897333242205898,-0.7825782818877602,0.6608265367670103,0.7166291100826875,0.016459414192937727,-0.7391970961320834,-0.6357649780703843,-0.1260816362992934,-0.9844927310777256,0.22433204945662932,0.2341809724911312,0.9592965336068846,-0.45206879403916383,0.9134296859809437,0.3609103312036287,0.35145552930301743,-0.9525755990382527,-0.2563903823347397,-0.5279045139369005,-0.821903815501763,0.14877360419446853,0.617915958788142,0.7544313131487502,-0.03935985360896364,-0.7004638622576674,-0.6778463591018355,-0.07052930773752064,-0.9927477364177755,0.16960355398135182,0.179566575878406,0.9735601471417002,-0.2767259389399064,0.8892955818670893,0.4123882078886948,0.4031492480916496,-0.9341109781637059,-0.30992683349959965,-0.4796898344885026,-0.8524090277465134,0.20372198604716907,0.5730798313866303,0.7898825577085679,-0.6519085369634449,0.9989750146728263,-0.7178154356251314,-0.014757195779863837,-0.9979091417245154,0.11434653999024327,-0.8016285880849785,0.984789952999961,-0.2226726892986798,0.8623902552756967,0.4625810006326335,-0.90855491753901,-0.9127354810945785,-0.36249749081042604,-0.4299803458015495,-0.8802579633764759,0.5178283368091599,0.5264578728817771,0.8228723706103738,-0.6085788960606092,0.9948926715560126,0.05116856147851951,0.6919786922994065,-0.9999608630291352,0.058733199364536554,-0.7670203752190863,-0.6025499006024007,-0.16792554712689228,0.8327975485729439,0.5113322986781009,-0.8838274932540157,0.9464942292553471,-0.41393853360942046,0.9298259591096215,-0.9053638395514261,0.4692844599929579,-0.964593456700192,0.8532979490145866,-0.5633528018856481,0.9877100443600114,0.10681691946330017,-0.9983701601111703,-0.9988965067586625,0.0029368343703571743,0.998603416539554,-0.6461449421917099,0.7945059517341845,0.8006096785376589,0.5584901832528603,-0.8563458861466693,0.963027695233473,-0.317120929123664,0.9078423865250942,-0.9276484213517345,0.4192781991613518,0.8858052924031122,-0.2694378190644588,-0.5163711879721404,0.9774495155843417,0.1621324146134577,-0.9936300075464617,0.7632384809286731,-0.05286868238571767,0.9999955788314641,-0.6877264672134569,0.7593824095526157,0.6119416156571813,0.6039077009789893,-0.826195734388224,0.976560174756769,-0.26370581342214305,-0.9502428599581579,-0.9470422655739863,0.36796538380102717,0.9103200533678362,-0.322755538502674,0.9614084796511069,-0.8594018819673197,0.2169426728087986,-0.9857935056155633,0.7981033644722192,-0.10850944977839465,0.9982715553669145,-0.7271648993387578,0.7218924802604967,0.6551214680346743,0.6474433218089279,-0.7934709918675307,-0.5682564976522839,-0.20946893778780118,-0.9661449152524597,-0.9634849371298593,0.31550591488328295,0.9319980754067345,-0.3750674872823072,0.9445582123377826,-0.8865940312364602,0.2710768943482924,-0.9748850744221382,-0.17378530618385607,-0.5977929116219404,0.9934367185470213,-0.7643373405438142,0.6821529899580062,0.6962598311989587,0.04522826658026338,-0.7582736354119729,-0.613287181955297,-0.1545793151471997,-0.9790362702123621,0.2522851843810758,0.26206326658069884,0.9507718054776383,-0.426210650932964,0.9247645131636157,0.3339209949269669,0.32436638619602043,-0.9609387068143849,-0.22846661773349883,-0.5521284417095614,-0.8051697692933114,0.1202526904239618,0.6402877748262944,0.7352285098019249,-0.010586282532757764,0.9992265472842584,-0.6564067410278748,-0.09920799251681638,-0.9888767528035503,0.19789592230810601,-0.8492843178160465,0.9665827408916546,-0.30426700866782297,0.9020890632447435,0.38599896587154664,0.40696298455663227,-0.9439978624565392,-0.2824359817154938,-0.5047434294045829,-0.8370078118408938,0.5882751414561906,0.5964272952292331,0.7719060696654809,-0.6734619831138928,0.9998639287906025,-0.03341658538796726,-0.043527517986412516,-0.9956356981187622,0.142889977054318,-0.8185016099581647,-0.5329461408180265,-0.25063746207979004,0.8766025238076292,0.4368740870186676,-0.9202016873081357,0.9158340144304212,-0.3355252188229659,-0.4557855358602541,-0.8662375710355118,0.5422343196450548,-0.9834320342877815,0.8061782161946829,-0.6311632090007897,0.9973855347882827,0.022405498099687206,-0.9996215588601723,-0.9992920439357583,0.08743875812066247,-0.785168287764996,-0.5793318807591943,0.8429844552622383,0.8483843159945825,0.486387821339534,-0.8969248515341313,0.936814411058845,-0.38756889239999626,0.9400316778835978,-0.8927679611151927,0.49450378749988305,-0.971784265475794,0.8379381505424974,-0.5868976043901079,0.9917990884475335,0.07815776158461105,-0.9995990773400206,-0.9998343963514086,0.031715062569723756,0.9966692962928485,-0.6239123069636809,0.8116534297345119,0.8175223733716326,0.5343858741583433,-0.8708530189560094,0.9548755070563609,-0.3442836865739582,0.9195339487191598,-0.9165163080907416,0.44523228288268984,0.8720830132950337,-0.24161097647358692,-0.5408031097382939,0.9831219982498369,0.13366646988932965,-0.9964616456411719,0.7443273689637266,-0.02410746344440609,0.9996669421098365,-0.6665484979281358,0.7777931301675183,0.5889262931341595,0.5807186739652828,-0.842067434606293,0.9699610204440433,-0.29135744466283897,-0.9408841279379375,-0.9374086073743867,0.39457334563318797,0.8980309735884117,-0.29538249321809457,0.9689282246365853,-0.8443308889434057,0.18875864680290738,-0.9902190406268232,0.780432494253375,-0.6634039744172737,0.9995494262679634,-0.7071075907741563,0.741509072010979,0.6331064626954974,0.1294927689431769,-0.8106578001095097,-0.5443398051332723,-0.23752327481852048,-0.9583195921426837,0.33316166085486676,0.34268483910801234,0.9211804901806426,-0.3482335391749719,0.953616558511821,0.25306450652513496,0.24326261410933545,-0.9808907154998091,-0.1453716749303823,-0.6206164529944523,-0.7521693506132493,0.03592296133235504,0.7029143236300027,0.6753137461929993,0.07395965028148595,0.9923284023228607,-0.590301317177641,-0.1829489350559689,-0.9727687412812563,0.28002931738931436,-0.8908632383825176,0.9414594245589162,-0.38368423314898825,0.9353332329120907,0.306655026758611,0.4827047919044578,-0.968505739182541,-0.20035358335403866,-0.5758949668702011,-0.7877686921410185,0.6545127128748273,0.6621291539614973,0.7154166173095113,-0.7335263070449302,0.9976809478526931,-0.6344233325326765,-0.12780448990730442,-0.9841865489218474,0.22602434669549024,-0.8641262923268644,0.9588045835173789,-0.33155601290879305,0.9141352223281026,0.35928994874069414,-0.9499916433992952,-0.9531027057324434,-0.25471115003467143,-0.5293788771187271,-0.820913189237672,0.6113043778998394,0.6192806577321659,0.75329010749676,-0.6944575096809564,0.9999245204780425,-0.06216623934810785,0.7692225875728158,-0.9925374348976114,0.17131503903788806,-0.8346965563220017,-0.5083735770226719,-0.27839459797577504,0.8900885839905541,0.41080525155204733,-0.9310861296484159,0.9038980213643978,-0.3082749859483372,0.9654948434967634,-0.8514995570368123,0.5661910965074894,-0.9882417599505202,0.7888161954022841,-0.6532246441491384,0.9990521287789399,-0.006376126781469989,-0.9984158040293024,-0.9977953761815646,0.11607187953551967,0.986211633853849,-0.5556339220186801,0.8581168977259114,0.8632682520226199,0.4610404032300713,-0.9092791657344887,0.9263585028690969,-0.422398137032212,0.9494586413673826,-0.8794324823133661,0.5193134506842161,0.8276060345629279,-0.15873763673684424,-0.6099562002858194,0.9950664913019913,0.04943385506847112,-0.9999998915507878,0.685225553488594,0.06046701689626668,0.9939095001616802,-0.6011628008459841,0.8281285054987455,0.5185172258770865,0.5098388610185314,-0.8846387065082938,0.9459322664391134,-0.3711612273144817,-0.9088911154173974,-0.9046249204986118,0.4708175205280748,0.8576382699593466,-0.21358397485560573,0.9863653502780091,-0.7960263803184289,0.10508979116229873,-0.9984677798765195,0.7247996300383783,-0.724268241272779,0.9985101461485646,-0.6448183364336122,0.7955594996088983,0.5654230833653123,0.21283072311892215,-0.8572415365573821,-0.4714975617193449,-0.31876770515326536,-0.9307459344279312,-0.9269983669284233,0.4208544290340046,0.884997933378832,-0.26776474269151573,0.9756452754166403,0.17039728798237602,0.16041824649790942,-0.9938242433721823,-0.0612365670047525,-0.6846638221172998,0.9999992352836229,-0.6864644894219226,0.7605113715773367,0.6105669697048102,0.1579763861339906,-0.8271730309299793,-0.5199721623826007,-0.2653808392178908,-0.9497003633916047,0.36015904339696314,0.3695798711644218,0.9095997666509942,-0.32111110216110833,0.9618848952029585,0.2251169059824976,0.21524680656858586,-0.9860837522240661,-0.11683761267063553,-0.6429258538785954,-0.7328929206066961,0.007147088034017897,0.7230933383642899,0.6538082075380194,0.10262976320825218,0.9883593484332307,-0.5668264260359012,-0.2111669936350917,-0.9656953365257196,0.30754146426617424,-0.9035679680599484,0.931367105554462,-0.41010221024491345,0.9451270897273693,0.2791350147851678,0.5077095078244578,-0.9752704273470769,-0.17207456902239532,-0.5991844003938287,-0.7697149997089583,0.6760004238620947,0.6834220020274085,0.6950120485397674,-0.7527828197996298,0.9953088344489468,-0.14629316418712834,-0.15629510956519346,-0.9786810103024538,0.25396552456784477,-0.8782523942374544,-0.433777752673695,-0.35857034449231734,0.9254240796554813,0.3322832831849243,-0.9585852893095701,0.8645140498897843,-0.22677530668240536,-0.5535757687599526,-0.8041384932880432,0.6338271883055077,-0.9976281753322668,0.7340500933199376,-0.7148777232322983,0.9991567395388624,-0.09086439261002448,-0.9900886541854517,-0.9886169187712395,0.1995981776202803,-0.850200010713564,-0.4833798586834711,0.8984403575727996,0.9028372634980935,0.3843960905725626,-0.9411992275051566,0.8912132073995767,-0.49749023935995207,0.9725897563499964,-0.8360561308693112,0.5896788207602747,-0.992232791396185,-0.074728495590075,-0.6747449250371754,0.9998910728629309,-0.035152469455039054,-0.9963829264455597,0.621220804053768,0.1446088429246875,0.9810404252389581,-0.5314756566030162,0.8725384459831131,0.8774370262811831,0.43531104304200136,-0.9208802011068699,0.9151351667280403,-0.44830927277614824,0.9580990399330066,-0.8653684507254146,0.543692896348754,0.811108982868809,-0.13025721791789963,-0.6325094870212833,0.9975095460919898,0.02066899580887068,-0.9995722706948884,0.6639806709645482,0.08916887822020346,0.9903263144581891,-0.5779152703292806,0.8439175304949161,0.4936939821222293,0.4848694794420968,-0.8976915282552975,-0.39528165339245985,-0.3977312850455646,-0.8965125924289012,-0.891984109818886,0.49601271638715355,0.842483028929257,-0.18538003276398707,0.9906930437431396,-0.7782774748917751,0.0764260523576787,-0.9996467483003751,0.023336701527139105,-0.7438122765873849,0.9965261492780915,-0.6225539847596249,0.812666799591707,0.5414514572359033,0.240862767485758,-0.8717054694819667,-0.44592249664038164,-0.34591388726998284,-0.9198366782640665,0.43771175517072713,0.4467868618300367,0.8712317297678028,-0.2399251664384175,0.9815540673502575,0.14196802606638506,0.13194495007776694,-0.9966061271749405,-0.032485644123440065,-0.7053564702366937,-0.6727731450054394,-0.07738911795757823,0.7788836367865541,0.5875216615710158,0.1863291301326325,0.9719658285502906,-0.4951737564122049,-0.29301855280018896,-0.940294369471342,0.3868580575255746,-0.9365444236141618,0.897265498696299,-0.4857140394108477,0.9693563726303942,0.19698281068061962,0.5787032900986729,-0.9904598825007175,-0.08820675802494972,-0.6647026323823563,-0.7130093363387553,0.7358595436209319,0.7426733171556382,0.6317610311783003,-0.8057218094101454,0.9835715029120936,-0.22937333045284056,-0.23921011405279274,-0.9578219158029275,0.33479883298195157,-0.9155241502663425,-0.35607815663419146,-0.43618044425210944,0.954137970034148,0.2513837575520637,-0.979225568206149,0.8189442972920689,-0.14365300206823256,-0.6219774484949377,-0.7510236483106463,0.6969281123324192,0.704148679280108,0.6740317073548152,-0.771415700801191,0.9921121722151582,-0.17470250446520993,-0.9746772103292151,-0.9723646979271172,0.2816963084711059,-0.8916509209883693,-0.40766711008396467,-0.38528762379638243,0.9359462831405929,0.3050013424754435,-0.9663848094656681,0.8496910926803354,-0.19865159469345534,0.988761785640343,-0.7866976207398718,0.6558249139852319,-0.9991959330227999,0.71420196623917,-0.7347057069451087,0.9975612220297848,-0.11948727061462806,-0.9856366304768557,-0.9838773976330372,0.2277159620551566,0.961151798298294,-0.4579856914753882,0.9107051890908378,0.914838000875944,0.35766848235762255,-0.9505326028325524,0.8777900810817998,-0.5222495704433125,0.9788789416562079,-0.8199200864101823,0.6126780343468928,0.7587760392204076,-0.04599844299870784,-0.6957062235076351,0.9999016720294819,-0.06389969058707343,-0.9935246102162035,0.5984107895649553,0.17302600726443432,0.975056488245842,-0.5068770980685934,0.8862371527162562,0.41843239587720793,0.4092210558818585,-0.9317183469457204,0.9031537004419079,-0.47384901335752744,-0.8558645129579046,-0.8505875174895476,0.5676219277036119,0.7939399799775206,-0.1016688894402427,0.9986521935219635,-0.7224257870913103,-0.008112986373507585,-0.9983165690284731,0.6421857235094325,-0.7976385966858747,0.985922707619384,-0.5541889744851525,0.85900742453963,0.46846174491602477,0.3220257247236415,-0.9100006707805935,-0.36868216099240897,-0.423971848197272,-0.8833913668905834,0.26444942364860324,0.5207969978739013,0.8266298453392396,-0.15702251533591177,0.9942000122615235,0.05780333485624272,0.04769899952441232,-0.9999975742138482,0.052098766087619854,-0.7627401116622224,-0.6078395350644921,-0.5997738874778376,0.8291008578272058,0.5170312736837765,0.2686952726681144,0.9486176873106323,-0.4199780136881229,-0.37277350216136096,-0.9081653970576805,0.4634065994503938,0.47234916068226207,0.8567437671623673,-0.2118868277425102,0.9866497053864667,0.1134211528465004,0.10336234582225615,-0.9985623874247538,-0.003707808992453897,-0.7254647762582718,-0.6512019401582156,-0.10605031989337095,0.7966106474082276,0.5639896298375651,0.2145275125291907,0.9647965089604882,-0.4699651310934163,-0.32041351951183783,-0.9301094026379413,0.4132365848387528,-0.9462451371004634,0.8841879044577606,-0.5106695805542634,0.9760248011595563,0.16868552789314573,0.6019344178128775,-0.9940154809895929,-0.059502829799874306,-0.6859287478568271,-0.6925350700696717,0.7550423681126154,0.761638039261253,0.6091904817698404,-0.8224340356520866,0.977968832179003,-0.25729058290055995,-0.26705506440221977,-0.9491550017314088,0.36177884257412823,-0.9267218800800222,-0.32903741697165556,-0.461897331044705,0.9623584089023897,0.22342424517642798,-0.9846557034430203,0.8020892582361923,-0.11511242791681833,-0.6442552286111574,-0.7317101225187036,0.7172784410529278,-0.9990096161281095,0.6524929746068882,-0.789409513915925,0.9880936093787054,-0.20296711504666226,-0.9678378956682984,-0.9652428444510689,0.3091937252489705,-0.9043107727690031,-0.3812187417280881,0.9423556436916177,0.9456931158201463,0.2774667279310735,-0.9733837424708877,0.834164221497537,-0.5924530618262895,0.9926547572342843,-0.768605020225137,0.6772793312496959,-0.9999359216741753,0.03858946052218773,-0.7539250346205976,0.9951392897336069,-0.14801116116349908,-0.9803680707320288,0.5285591522281128,0.255645098581368,0.9528099263520817,-0.4322121128193087,0.9222155604130173,-0.9137432002417237,0.3306445689975221,-0.959078523534353,0.8636397626008193,-0.5465762516220456,-0.809092541632446,-0.8031047913259428,0.6351696839102369,0.739716122319845,-0.017230283680015845,0.9994657753507699,0.9990839174978708,-0.09259397496893537,-0.9898432232708866,0.5751050305400324,-0.8457576436925436,0.9682647801782801,-0.4818586247261009,0.8992016694350841,0.39212008959537453,0.3827920556122391,-0.941784624549996,-0.288803826399038,-0.49899620075736384,-0.8406252031928154,-0.8351019276505041,0.5910807210979544,0.7761132492946604,-0.07299633488025017,0.9997322455226216,-0.7022269569114319,-0.036888247472749755,-0.9962338268189486,0.1363103985932824,-0.8146661860474536,0.9807023277479858,-0.5300035690112108,0.8733856866341523,0.44284141753085193,0.34913884362046355,-0.9215559367577675,-0.341777239328614,-0.4498611781645624,-0.8695383088869763,0.5366393690108813,0.5451498328182056,0.810091852523923,-0.12853491493576863,0.9968833505371478,0.029047942642205372,0.018932431163009578,-0.999519966980418,0.08081767019866284,-0.7810360660132788,-0.5847350561772505,-0.1897071211241072,0.8448480597637881,0.49218276324751525,0.2963051812402046,0.9391181916522258,-0.39368560618436377,-0.3993242983781334,-0.8957417597084465,0.4887175414113172,-0.9701955395725961,0.8415460479000939,-0.5815047678524217,0.9909279681195738,0.08478031755610584,0.6672682480432376,-0.9996914034868561,0.02507309781785524,-0.7449720817543881,-0.6290912567297775,0.8077541358379225,0.813677717763538,0.53999036926685,-0.8675676807939119,0.9568279180237851,-0.33803769272347267,-0.3475430443993021,-0.9191539004759949,0.4392727724370946,-0.9551619478485147,-0.24805339145380953,-0.5352020650637878,0.9818846564298123,0.14024850008397077,-0.995881177321198,0.7487483052742265,-0.03074960733868086,-0.7065866158417127,-0.6714870834014266,0.7735996889619001,-0.9916751738489556,0.5861152575492712,-0.8384649286249836,0.9715559776833645,-0.2849946867839656,-0.943114075737052,-0.9397017742874787,0.3884591418542351,-0.9371518809079368,-0.30172409114509324,0.9672633440795086,0.9697815962315338,0.19527964030127146,-0.9892701152781017,0.7845697402401339,-0.6584174260757791,0.9993279177891834,-0.7117904223368925,0.7370345510958616,-0.9973152677375067,0.630413693739421,-0.8067493524364476,0.9832564750583207,-0.23106358053439457,-0.9601967900688078,-0.9573213498681078,0.3364349950746667,0.9237458076388757,-0.35445455836424355,0.9515953204582325,0.9546565030752849,0.24970225019452363,-0.9795762901630694,0.8179462993473475,-0.6153926210463749,0.9957253787290562,-0.7498756802901778,0.6981726665053751,0.680199439141886,0.06733160840915746,-0.772519784292034,0.9918929490641896,-0.17641243406290646,-0.9742873396110879,0.5039093392751518,0.2833624497203252,0.9436787131654079,-0.40608047445390033,0.9329619359430703,0.3129727319862337,0.303346738052155,-0.9668299098694043,0.8487739745779406,-0.5704501298182216,-0.7918441881295009,-0.7856241759982076,0.6571351365770803,0.7200433985777156,0.011552149811433309,0.9981111828328921,-0.6395455141775375,-0.12121155124665209,-0.9853418153999792,0.5513228342891244,-0.8607631513326948,0.9606709275260085,-0.4564409627584179,0.9114212558781597,0.36548293724574665,0.4270842522023059,-0.951070694661434,-0.2611309764364267,-0.5237300021615281,-0.8246894899559533,0.1536249267563427,0.6140498424426042,0.7576435591106515,-0.044263307590146496,0.9999840841839923,-0.05553311174378225,-0.06563294905092347,-0.9933257694831829,0.16476488184306742,-0.831018877299691,-0.5140842690278195,-0.5053790899476247,0.8870404053206744,0.4168542247466379,0.3759627236247272,0.9067202847860787,-0.31458917738406433,-0.47537782731631234,-0.854964894778355,0.5607016204691943,-0.9872039874805769,0.7928827511379736,-0.09994083169325373,0.9987408355982479,0.00026848609125894297,0.7278276326375581,-0.9982143222667078,0.10946962211044606,-0.7986849826287477,-0.561146162212228,0.8546862516463979,0.859895359865753,0.4669265113067516,0.3236696201830994,0.9288406974677366,-0.4163660712616684,-0.42554428030728075,-0.8825760583943161,0.5136236125793324,-0.9767676295856179,0.8256511623059182,-0.6046773149564543,0.9943853112863219,0.05606924727006775,0.6884273798427862,-0.9999922400446495,0.05383323319244946,-0.7638622261873609,-0.6064594119876117,0.8243856672550366,0.8300707088913846,0.5155437616900576,-0.8815209491905548,0.948066657201061,-0.36498306117807106,-0.3743846524103856,-0.9074369389086513,0.46494505102745204,-0.9632874688588079,-0.22007054078756222,-0.5592911693667767,0.9869310839310443,0.11169528548667848,-0.9980780508921709,0.7293614963266433,-0.0019709108217191807,-0.7266591226329157,-0.6498828132261496,0.7915161326317838,-0.9875586118379567,0.5625544748435813,-0.8538012077735071,0.964338252059296,-0.31246269104942104,-0.9331550980117779,-0.9294700648570943,0.4148176279243623,-0.9468055121707181,-0.2741608064738604,0.9741662144464148,0.9764013823922237,0.1669732589067388,-0.9930649809704022,0.7664002570885271,-0.6798057259326089,0.999968942254626,-0.6912810499451505,0.7561800758051053,-0.9947947083169861,0.15141172857994661,-0.8234208514309206,0.9776047765061319,-0.2589686248286232,-0.9517602236912563,0.42910806996438483,0.3633975503225629,0.9123404250973476,-0.327396732382865,0.9600466622066095,0.23158598819497947,0.22173091033525305,-0.9849573224179967,0.8010507617266416,-0.6378223673841288,-0.7373973601947889,-0.7305251169786545,0.7184876109788073,0.6588214848453647,0.0960179764245767,0.9893484232392065,-0.5722879878398331,-0.20466756069989064,-0.9673994746054709,0.4788420701098417,-0.900701173968416,0.9337657233562979,-0.37961242474708223,0.9429354130057028,0.2855093491387167,0.5019737825071163,-0.9737803403167548,-0.1786162661026929,-0.5938514270718208,-0.7739398430626312,0.0695657539299957,0.6785561953942056,0.6997741655699918,0.0403250130958454,0.9959297199210502,-0.13971681495383978,-0.149728711613941,-0.9800241157280154,0.24753316586219526,-0.8750555725168537,-0.4397551000551649,-0.4306451690503147,0.9228857889104757,0.3385430059817999,0.452930173096261,-0.9595688643730885,-0.23324179639248172,-0.5480299272193827,-0.8080705749524075,0.6286737606811577,0.6365102633099253,0.7385462103661721,-0.015493611019891733,0.9994075008740749,-0.0842452664484338,-0.09432327798667799,-0.9895948061581104,0.19308286807217548,-0.8466831232982504,-0.48918594805844356,-0.29958830468955716,0.8999602685501844,0.39052169526750424,0.402475142891203,0.8942074250013725,-0.2871404987051122,-0.5005006567632883,-0.8396831976933179,0.5842993669927985,-0.9913843320626178,0.7750167978059912,-0.6698259705955024,0.9997709286388965,-0.02851119288300452,0.7472620340867449,-0.9960817217147004,0.13803088553870313,-0.8156722405256306,-0.5370923950384885,0.8692729915016462,0.8742302924206857,0.441283441028515,-0.9182695006666219,0.9177937189946682,-0.44235990446938517,-0.45141172639397,-0.8686792000451181,0.5381041798894735,-0.9825305309545503,-0.13684233910177568,-0.627348926114433,0.9970188707020836,0.027311727248392096,-0.9997445266683369,0.6689345164348655,0.08254877122407847,-0.7821195602974303,-0.5833251549475589,0.8403342486028739,-0.9707357649148569,0.49067005953636184,-0.8947439346416884,0.938519984628797,-0.391626064833259,-0.8994364835947893,-0.8949682246788001,0.4902321527916931,-0.9706149686640733,-0.19190537594841436,0.9897667428507707,-0.7824325790737452,0.08304953858807265,0.6685609183758457,0.7093704586736985,-0.7393546768731822,0.9970575162141206,-0.6277401572807845,0.8087768565104507,-0.9826239215537972,0.23440846576513194,-0.8684301679848407,-0.45186005164144516,-0.3396718402365134,0.9175940845767987,0.35123644153187217,0.440832464487977,0.8744741480623881,-0.24637039735200747,0.9802620512729896,-0.8159628368069186,0.13852855099433078,-0.9960371567197683,0.74759586101999,-0.7006308508264796,0.999781557292887,-0.07076272976640137,0.7746991543548998,-0.991450025986586,0.17979677408067618,-0.839410199643465,-0.500935619743792,-0.2866591304096108,-0.06195217560704227,0.40293508950456786,-0.6943031701669684,0.9001792276729639,-0.9952130095220229,0.9677026675481248,-0.8469503915285153,0.9784781360785586,-0.254918547266441,0.8787232102137719,-0.6597237192491334,0.9993900795490124,-0.014991176599108579,-0.33135365991700444,-0.45971951856908033,-0.8640183314581847,0.2258154146599862,-0.5484501725014779,-0.232753133534194,-0.9597101818647017,0.9976955231072847,-0.7333805184057718,0.9230791691940159,-0.9991157929329638,0.9521277292218834,-0.7879007857647728,0.5266568112528378,-0.2005637070843604,0.8507184008187965,-0.6167607569254903,-0.7553943390207449,0.040827092065712015,-0.3834861623208751,-0.4094481999264038,-0.8907657870129652,0.9929231938158127,-0.5942556450873553,0.8329270666592046,-0.9738945296243551,0.9923548952789468,-0.8886230669008401,0.6754719141164618,-0.3791474978292556,0.9335857709098149,-0.7523106672900188,-0.6204482641213264,-0.14558387037178577,-0.20515939064443775,0.5306406449042895,-0.7907822258756302,0.9535519738046775,-0.4344236453245399,0.9212639296852013,-0.9147374386376173,0.9980029732547538,-0.11288762941258994,0.800749870213573,-0.5445197099488038,0.9839218915886727,0.12928009463281995,-0.4638823682516256,-0.3269218921700568,-0.019683740402941526,0.3638656438866311,-0.6632434741792171,-0.0901503652702439,-0.990189093675721,0.9774989038383528,-0.8237058775269811,0.9688751531302839,-0.9947433790103651,0.8981253083456912,-0.6909178684289965,0.9999727762938042,-0.057267252182729676,0.7660773773957692,-0.4968681619259684,-0.8419517322127315,0.1844115678630878,-0.512593681642405,-0.27367753266292033,-0.9469670980008668,0.9996724541440847,-0.7039718852321389,0.9059864079383608,-0.996443596190488,0.9642051340985693,-0.8132406583661597,0.5621389627791292,-0.24181909379462785,0.8721879493391071,-0.6495008193666201,-0.7270042425256296,-0.0014684187683211263,-0.3440823134215976,-0.44766827356862726,-0.8707475740751752,0.9870119324774733,-0.5597076508414712,0.8555866675159494,-0.9634222525211638,0.9966867638642933,-0.907225682761291,0.7060546708796899,-0.4179446316881335,0.9479067087695138,-0.7795013054454191,-0.5867239370713678,-0.18729723763487946,-0.16358122994910762,0.4943173578468173,-0.7641864282118784,0.054334990531968545,-0.3959401316378033,0.9368894193578962,-0.8968299927533129,0.9944383594849266,-0.6050774593199751,0.825367561207413,-0.5795066859922628,0.9905951987557,0.08722510042809559,0.6654385516376466,-0.36659959332947756,0.022619920894199754,0.32414502299593534,-0.6309968352704712,-0.1321917259105494,-0.21837588633146493,0.9855458045536976,-0.7989872565068712,0.9575382677025938,-0.9981841802713177,0.9159201181763932,-0.7208755484917904,0.9987659181402566,-0.09944084208465263,0.7925764448895083,-0.5331276082226133,0.20803286961273026,0.14267769745714373,-0.4758198512761099,-0.3141121574890326,-0.9325293183923388,0.9998603677401507,-0.6733034214257366,0.8872722901292162,-0.9919881603831541,0.9745569939787951,-0.8371251525430439,0.9721341542396164,-0.28264172017974315,0.8920966271497197,-0.6810785327915287,-0.6973130966078016,-0.043761301714813766,-0.30406269356933696,-0.48508719844881626,-0.8491710681284707,0.19768568231190609,-0.5241580017586286,0.7860888788651306,-0.9512258314692156,0.9992349582110329,-0.7135118597731144,0.7353738696494181,-0.4559938103220259,0.9605312693536888,-0.805296945244372,0.5509035389807021,-0.2286754170838636,-0.12171032369282653,-0.639159140484967,-0.7362230397513854,0.012054607603023041,-0.35674804205898314,0.9508382483360585,-0.8773175766692619,0.9890940952291044,-0.5708627713204805,0.8485081714275506,-0.613456574773825,0.995495733171078,-0.9014543946953204,0.6964137647037223,-0.40562122653032495,0.0648831014990703,0.283844310999335,-0.5976209621423897,-0.17399651575989797,-0.17690702364449581,0.9918289689315254,-0.7728387650017945,0.9444877683266663,-0.9998386275118437,0.9320757940498238,-0.7495431470648879,0.9957716648860875,-0.14143647229580567,0.8176571147099454,-0.5684329674227366,0.2492156435206465,0.10068849052762494,-0.438194491982463,-0.3539846460616501,-0.9164226809417411,0.33690815341411634,-0.6414300113803506,0.8669703066195205,-0.9857574589750024,0.9831647831366661,-0.8070461704530774,0.9613494495241518,-0.322958529919832,0.910408805608795,-0.7114373856100233,0.42486414545784845,-0.08597586927742995,-0.2634989220205711,-0.5216380095236243,-0.8260748825659573,0.1560492077599522,-0.4876703176194443,0.7592428436929991,-0.9373270932277514,0.9999949180613433,-0.6832402367159449,0.7633770406814518,-0.4932269407831883,0.9714368597030429,-0.8296514227165652,0.5857080499891748,-0.26964435817909077,-0.0796216042009189,-0.6711146433058619,-0.7069421038753112,-0.030247348295302193,-0.31691751489338604,0.9630854537448823,-0.8562351098758839,0.981979744601935,-0.535626465240059,0.8701302883542137,-0.6463086194496965,0.9986147248206868,-0.9189558532304057,0.7261426731768711,-0.4439169585166431,0.10703016707075216,0.2430356301968264,-0.563175584378276,-0.21548992081512627,-0.13512156750796595,0.9963371525981335,-0.7453071984467534,0.929747010223401,-0.36934852955406783,0.9465634237099887,-0.8837271377356749,0.9909953750577535,-0.18317898728442342,0.8412745023996283,-0.6027210569277797,0.994122648840195,0.058519091111168695,-0.3997849382405843,-0.3932236424309654,0.05138275649429136,0.29678507132714105,-0.6084086958659158,0.845116789912415,-0.9777626424518159,0.9900130970415626,-0.7813497670739302,0.9488443103556733,-0.3626973719063179,0.9270917131755096,-0.7405230475092621,0.9969228661879151,-0.12803657411332803,-0.2224635918476227,-0.5572552953293115,-0.8015003504048793,0.11413346698120781,-0.4503098969154654,0.7310380647808672,-0.9217509110290139,0.9989652833883269,-0.6517458844591973,0.8736303050269284,-0.5295773905266385,0.9806039631336309,-0.8525211530010004,0.6194643757523053,-0.3101307427553521,-0.037390393598063745,-0.7018691169330155,-0.6763960218524374,-0.07249517342968377,-0.2765198309965336,-0.5100530150393845,-0.8336203216320281,0.9731080394710403,-0.49943160009955667,0.8901952169687217,-0.9419534521531601,0.9999465919457856,-0.9348127450457835,0.7545720740949311,-0.48141825510791597,0.9681390716130347,0.20179201195121887,-0.5277223455507993,-0.25659768432842506,-0.09309429732535636,0.43132324645293646,-0.7164418274328634,0.9133423735068315,-0.3297143791770335,0.9593570800424323,-0.8631425656016218,0.9844455963208122,-0.22459368449465855,0.8633863421961003,-0.6359305146487104,0.997811867399695,0.016244965717538848,-0.3606599279268152,-0.43175892434710994,0.09357515233030475,0.25613086160275544,-0.5742985699481472,0.8217508491404644,-0.9680180183661692,0.9950896799261433,-0.7542550573247178,0.9346411159764799,-0.40178712936380745,0.9421154940581236,-0.7682834666834789,0.9927154242623731,-0.16986814423295882,-0.1810301400258344,-0.5918753150423374,-0.7754914503169024,0.07201347253702094,-0.41214359999075323,-0.3807541466275813,-0.9045251600650199,0.9961478968299197,-0.6190851654096163,0.852268612208804,-0.9805091881394773,0.9880161741639867,-0.8738652083456183,0.6521121058273782,-0.35006211623233074,0.9219380882105366,-0.7313675230491555,-0.6446394590616675,-0.11461326093940931,-0.2356272862096859,-0.545975713855219,-0.809513683444556,0.9624948566720202,-0.4623429503605813,0.9086670490022318,-0.9269105737374573,0.999488951032149,-0.9489966925904911,0.7816510900991621,-0.5180580038480849,0.9778638128606092,-0.845374874660744,-0.4913246929044347,-0.2972462396974837,-0.05090042525143976,0.3927795394800914,-0.6862943095325256,0.8953032159741772,-0.28949017075412303,0.9704338674734945,-0.8410133104093334,0.976134050182988,-0.9910599263757508,0.8839530626708614,-0.6680019088198403,0.9997153982312305,-0.026058231725513106,-0.320889479301167,-0.4695215289301466,0.13560008573515453,0.21501827916176855,-0.5391606772317972,-0.24350408456909634,-0.10654996560989799,0.9983854467193111,-0.7258105299960353,0.9187652844746197,-0.9985891958998502,0.9554532616440137,-0.7946689629860827,0.986731415221944,-0.21139571770709029,0.8564845022177806,-0.625436112550169,0.3173755459049805,0.02976460252183831,-0.37323972938836925,-0.41952193124269266,-0.8856806676020174,0.9915478003912999,-0.5853165293081788,0.8293816963987778,-0.9713221401110126,0.9936602278744333,-0.8936453913517517,0.9393642970239998,-0.38936701727958134,0.9374952728061225,-0.7595570711999717,-0.6117292471626665,-0.1565262361426889,-0.19431306197894188,-0.5809213325582075,-0.7839583366403848,0.9501591895952101,-0.4244268900048919,0.7110979004747209,-0.9102088928054477,0.9972426210756115,-0.9614823122206853,0.8073312604845516,-0.5537706341102424,0.985838565490794,-0.8672108949641427,-0.45404776381004414,-0.33736284212054796,-0.008615461592336317,-0.7220782480227665,-0.6549185968528475,0.8756618205670241,-0.24874788967426062,0.9797739629443134,-0.8173789747539647,0.9660756110173204,-0.4742914517446903,0.9029378575465399,-0.6988778443581268,0.9998298347691384,-0.06831479526279086,0.7731451645061433,-0.5064438760862892,0.17738234873597394,0.17352089923046135,-0.5030579006167991,-0.2843073770302098,-0.0644011483691113,0.9998944993048887,-0.6960670895169021,0.901245227295587,-0.9954498290856274,0.9670811466160523,-0.819632316837428,0.9789815480708566,-0.2525449766399871,0.8775492533651245,-0.6578776273281637,0.3571991850093548,-0.012537534333705207,-0.33366790761589693,-0.457538937891829,-0.865251157811897,0.985173226421697,-0.5505004086282264,0.8050105161041877,-0.9603968104663785,0.9975260236460304,-0.9118263033323285,0.9240201740670991,-0.42797510570398534,0.9513747124696531,-0.7863873132681042,-0.5777242823897173,-0.19815909142745833,-0.15265109438945906,-0.6148273323426867,-0.7570000151606145,0.936123114195041,-0.38575127375128065,0.6807248226733351,-0.8918782987457534,0.9932116221163906,-0.5962274475229831,0.8315666279252674,-0.5884922344420637,0.9920490578574297,-0.8874949515123596,0.6736604296282952,-0.3768756987807804,0.033684920328003354,-0.7506917699198642,-0.6223708394827573,-0.14315570294662425,-0.2075604484710716,0.987360651386242,-0.7922818547281134,0.9542882794429314,-0.43663256194727523,0.9203067515655395,-0.7285030655776222,0.9981549722173766,-0.9576773973219168,0.79927759227371,-0.5424598894494825,0.2188471676437292,0.13171298567009573,-0.46605484976280254,-0.32460187198077084,-0.022137078600201008,0.9996141370769094,-0.6650779648560107,0.8821122983970964,-0.26182300277994336,0.976978339669224,-0.8431288537291456,0.9694796919994033,-0.2932422801689857,0.8970435391936882,-0.6891418019241021,0.39638357915989586,-0.05481723397244454,-0.2934989525487505,-0.4947371312023462,0.16405766852130818,0.9770355828817503,-0.514699110425292,0.7791986860774635,-0.9477527512150349,0.9996066432366787,-0.7057125745853036,0.907022421263599,-0.4658172883308149,0.9635515685056908,-0.8118102337552764,0.9816500123917321,-0.23943732048527303,-0.11071594184916786,-0.6476330349087708,-0.7286869637148998,0.0009854558893592992,-0.34638531562252267,0.6491335172664424,-0.8719515960558236,0.9874031680448078,-0.5617394659598768,0.8129595139296782,-0.6221606669419727,0.9964841756409074,-0.9061907438844086,0.7043148170607259,-0.4157140973269451,0.07592501959305258,-0.7779618511095236,-0.5887092850066019,-0.184886226335113,-0.16600155633834865,0.9931803556341959,-0.7657668642285788,0.9407931501110528,-0.3981922729372703,0.9360286612922837,-0.7568245550752485,0.9946938079160271,-0.9689945976174539,0.8239796299703712,-0.5775051146319066,0.259920336868484,0.0896693580740396,-0.42821774546349206,-0.3643154582468312,0.020166607764663762,0.9975448617726306,-0.6328986142629724,0.8614007381379274,-0.22076987685507388,0.985127128751033,-0.8004604823970232,0.9582428515635872,-0.33341479625244835,0.9149324726590229,-0.7191726858580141,0.9988847834068412,-0.09699883249093899,-0.2528047506942488,-0.5310499411529134,0.20563205662989983,0.14510603569639213,-0.47797670483216803,0.7519923992630076,-0.9334125902111637,0.9998983631620312,-0.6751157051526955,0.8884014578534142,-0.5028258426531289,0.9740040491686178,-0.8357803357110049,0.9727064770889048,-0.2802870516480672,-0.06858265165877503,-0.679279731052457,-0.6990698514425442,-0.041309647850731275,-0.30639946507971055,0.616380520168496,-0.8504644456348865,0.9798276536912846,-0.526246193416125,0.7876032840550102,-0.6547156784613559,0.9991359817383958,-0.9232648140226197,0.7337087601483459,-0.453808532420487,0.11802924316834267,0.23228340733527678,0.5488539542939003,-0.22628587666403732,-0.12414558721981182,0.45929056261649287,-0.7378814545782894,0.9256143739539623,-0.9993730974852701,0.6593606914685383,-0.8784925740884778,0.9894525359772463,-0.9785776816752891,0.8472070707400934,-0.611516834571782,0.7766435862965987,-0.511208535488521,0.6946506694457587,0.16806750825257763,-0.49826682164791214,0.28619640243984185,-0.5995866260200331,0.4001135030906275,-0.692082646953573,0.8988331885951398,-0.9949071971673823,0.9452911362537069,-0.9997915349431002,0.9778377591582855,-0.7479165357513603,0.47255540395551854,-0.6620358660934752,0.3623632739561891,-0.5664123822074638,-0.32844529297030606,0.10312958968135,-0.44039891039876494,0.22281307924713403,-0.5458714216061923,0.998400661359054,-0.9588399361942378,0.9978998238083109,-0.9861671668103166,0.982713448661223,-0.9989815228282177,0.6281160337323003,-0.7897942355480317,0.5292732674548454,-0.7097107857318296,0.4226414803934349,0.47981618746956967,-0.2658652809456439,0.582524446261602,-0.38063904157054335,0.6766600162403252,-0.8893614321595404,0.9925526061273724,-0.9381793249987023,0.9999997304681085,-0.9731905536610916,0.7617896553842588,-0.4910908301225379,0.6777404770044881,-0.38199651282870695,0.5837173683582203,0.30839339940053967,-0.08206744670922986,0.42131020126685953,-0.20214310934378743,0.5280268148449243,-0.3192439440835157,0.9526194110346822,-0.999046702523974,0.9824405362002584,-0.9864094995735212,0.9978036295210334,-0.6444341817720504,0.8025914906124733,-0.5471011755908226,0.7244533412472158,-0.4417167852010265,0.10459006754878024,0.24541519777689805,-0.5652016153818742,0.36099426274681407,-0.6609346133548509,0.8794917300994817,-0.9897538964732968,0.93064772450634,-0.9997604751561335,0.9681078931187489,-0.995054134069916,0.8994758140986202,-0.693141832290071,0.4014588269957652,-0.6007611696135455,0.28760309012805757,0.060968582579493065,-0.4020329764819567,0.18138269031259566,-0.5099459419797232,0.2991274897099715,-0.9459726354074446,0.8464260410535138,-0.9782743116315065,0.9896641806106639,-0.9961792680243376,0.6604639771200657,-0.8150296253458903,0.5646842827818856,-0.738871739421335,0.4605944434100982,-0.12560251247611126,-0.22485530334290088,0.5476258844981149,-0.3411879566945358,0.6449134746437295,-0.4524995363412613,0.9865123204904703,-0.9226997047984727,0.9990738760621938,-0.962592051772584,0.9969326161624761,-0.9085173154367852,0.7082330405990531,-0.4207415080262531,0.617536159708247,-0.3077969270086476,-0.03984243799909845,0.382575861656746,-0.16054111142293406,0.49163689331446636,-0.2788771904547164,0.9389025834186442,-0.8349731788117506,0.9736703572852338,-0.9924760354625042,0.9941091651602375,-0.6761982472290679,0.8271030742929858,-0.5820147214498844,0.7529595287281173,-0.4792660081944075,0.6677350958799309,0.20419479718810477,0.025699866813564197,0.3212289857643179,-0.628603768780819,0.4335358257280477,-0.9828293286251704,0.9143388222241293,-0.9979402404057114,0.9566454976910893,-0.998365019801286,0.9171522998321749,-0.7230073493558253,0.8621456574326747,-0.6340348326569435,0.32785303985950565,0.018698465881668597,-0.362947562895888,0.13962769825923443,-0.47310786125051163,0.2585021073335436,-0.5763056939169409,0.8231467070215698,-0.9686307332052211,0.994843805961896,-0.9915942471982419,0.9752429082368069,-0.8388064351774669,0.5990847370734416,-0.766710405572747,0.49772312494441207,-0.6833311246657299,-0.18344292387577285,-0.04683898417629068,-0.30112628061681557,0.6120127935596257,-0.4143781290944645,0.978706568835634,-0.9055688178682243,0.9963600754330463,-0.9502708916655829,0.9993507040559659,-0.9809883564136993,0.7374581477817871,-0.8726695821939937,0.650249806112625,-0.3477624545537313,0.5534720991155486,0.34315686290045877,-0.11865180854824327,0.4543671366209991,-0.23801135719690653,0.5588907414914275,-0.8109519174490988,0.963157694376089,-0.8758348855879579,0.9886356394408011,-0.9797021644840672,0.850134471319299,-0.6158866916577204,0.7801182171122124,-0.5159575350055478,0.6986213962854493,0.16260896885149045,0.06795714339069514,0.2808888362266971,-0.05335096401123294,0.3950350185702155,-0.6880770037763041,0.8963936158776044,-0.9943340881905287,0.943471086019635,-0.9998892278811522,0.9766640160763403,-0.7515789698533445,0.8828030301151043,-0.6661738246698915,0.819426891744356,-0.5709649692196554,-0.32321261703812276,0.09762282797189792,-0.4354231049811101,0.21741410865057545,-0.5412257128684481,0.7983942666646094,-0.9572536897143025,0.8654308245823152,-0.9852346657197893,0.9197313176083205,-0.8610821139778627,0.6324130671520527,-0.7931769640084011,0.5339610793735718,-0.713599069092411,0.4276510828861609,-0.08904489511621465,-0.26052570785783385,0.03221729856769512,-0.37551514924862744,0.6725744816358521,-0.8868173217051866,0.9918631852080902,-0.9362491233327935,0.9999803503138437,-0.9719026664897488,0.76536349719514,-0.8925414669750306,0.6817997631113911,-0.8313674629740527,0.5882023605015371,0.30312374938078934,-0.07655016596769434,0.41628424285594245,-0.19671957795313608,0.5233185122819758,-0.31399397714366345,0.950921360972401,-0.8546395257254893,0.9813928478041549,-0.9112224225114255,0.997421721039476,-0.6486564688138983,0.8058808031125093,-0.5517257023453167,0.7282574413125753,-0.4466754950758134,0.11009280361814631,0.240046007011514,-0.011069217463062359,0.3558272553139202,-0.13206833901734705,0.8768442202729683,-0.9889484720936368,0.928608235079178,-0.9996240305812205,0.9667064381243565,-0.7788055619072145,0.901880535300874,-0.697120629596005,0.8429360380363362,-0.6051765600739583,0.7715865191628614,0.05544325151842519,-0.3969591139476812,0.17593702489216578,-0.5051771523260608,0.2938416307643203,-0.9441635415569439,0.8434658175944869,-0.9771119047190029,0.9023058000690043,-0.9956806545469048,0.6646096285176291,-0.8182240500795652,0.5692434551232227,-0.7425899540432555,0.4655000418874642,-0.13109145098967578,-0.21945889734949225,-0.010083816573523967,-0.33598014613308774,0.11107221577183078,-0.4475569616680301,0.9855912530383422,-0.9205518401815546,0.9988204281188882,-0.9610776560375213,0.997350517580641,-0.9108160563175692,0.7121295687873535,-0.8541274405612169,0.621879972815066,-0.7848691055392955,-0.034311528933172464,0.37745636530376164,-0.1550757486409327,0.486809750369587,-0.2735578046659131,0.9369832552606998,-0.8319146998757113,0.9723937519764161,-0.9931384967411488,0.9934940697920072,-0.9716702349023177,0.8302011819118934,-0.9359024417623886,0.7565901941879055,-0.48411630025961633,-0.4301509811090537,-0.3746016303748378,0.25785291831832435,0.3159827023141383,0.3729488795710737,-0.67052398035476,-0.7142890879858105,0.9120835434815349,0.9352732637017807,0.9550188388331781,-0.9986660924383475,-0.9936954226195975,-0.7268198649212231,-0.6838215818050419,-0.6383051247668344,0.333076802284431,0.2752713045391738,0.2164521198337259,0.13414508359747196,0.19400554207033943,-0.5209583403978081,-0.5717737260614739,-0.6204835541870648,-0.9672405007183573,-0.9808577279120079,0.9877395680562894,0.9764518926238634,0.9615684317445549,-0.8075162081554601,-0.7702518973256663,-0.7301511328172434,0.449149728350568,0.3941295218748198,-0.05236688568012,-0.2958438717324579,-0.35323965416176556,0.6546816638348955,0.6993261424140642,0.7413953515052915,-0.9275778191325188,-0.9485326975348868,0.9995348131966842,0.9958445131447513,0.9884870142940105,-0.8753588685905347,0.6544446664792942,-0.3529463607872236,-0.2955444044348326,-0.23705410540380872,-0.11315439520790015,-0.1732121606903652,-0.23263207215120527,0.5542925847683053,0.6037570411471047,-0.8419760109372095,0.9765194745260809,0.9877884579627941,-0.9807966360110184,-0.9671608711901921,0.8198118692653972,0.7835689505143868,0.744440538017937,-0.4679475031160326,-0.41348105974282623,-0.35749197179448405,0.012850994609027843,0.33337237133094555,-0.6385464093776343,-0.6840502826902303,-0.7270351398894733,0.9194673289798511,0.9416221343727823,-0.9999562911457162,-0.9975480120888922,-0.9914662610960394,0.885389394072169,-0.670291376299051,-0.624044743878222,0.31568526270371794,0.25755002088742907,0.09211307577583755,0.15234127536322464,0.21200847799310815,-0.5365634247272998,-0.5867603764409345,-0.6347965822557169,0.8626445303843557,-0.9842719838699554,0.9847025210041936,0.9723205535778761,0.9563580143664344,-0.7965353950258653,-0.7583968425870289,0.48653589432312816,0.43264758511470724,0.3771660505749247,-0.033998226301144824,0.026684984731789107,-0.3703797537460685,0.6684683440123699,0.7123496157041134,-0.9109454222903627,-0.934290241484969,-0.9541945355714018,0.9988051572197864,0.9940018753701272,-0.8950237512215896,-0.8663222351394745,-0.8344304862266824,-0.3356848672995109,-0.2779306953675771,-0.219153043265044,-0.131402224786543,-0.1912900204385168,0.5185941788680944,0.5695011652424525,0.618310962787099,-0.8517527020686336,-0.8819645910911327,-0.9881677999114086,-0.9770451702027816,-0.9623245703017659,0.8091454290120887,0.7720138017626754,0.7320392326191035,-0.45162052191033164,-0.39667136604486686,0.055130245454347145,-0.005534693503849029,-0.06617925094555224,-0.6525872985338657,-0.697345350001071,0.9020159121993623,0.9265402995339405,0.9476527009323126,-0.9996153860266411,-0.9960927225532388,-0.9889019462495381,0.8766934613080622,0.8459008685942543,0.3555342693799837,0.29818700949194055,0.23974167552848197,0.11040437815855177,0.17048596998110369,0.22993974698309294,-0.5519871302022367,-0.6015486794860962,0.8404797561907449,0.8717980731750801,0.8999059925475887,0.9813326070306755,0.9678605331866078,-0.8213934101012749,-0.785285322623454,-0.746285420857525,0.470391380670962,0.4159991905322255,-0.9753863241198844,0.9915100053619713,0.9817973038919977,-0.3873946508801321,-0.8227777452472435,0.7251322877181448,-0.9183757762386439,-0.9406868381847329,-0.1389845602323299,0.9977378670938,-0.27057152142225965,-0.3284665443907451,0.6345369375782614,0.62620473583115,-0.8915843709563133,-0.9174109444557174,-0.20117789905857258,-0.14960563541316763,-0.9369911158469795,-0.9140756261930102,0.5845172326524233,0.6741402730706407,-0.8612414683763642,0.9837793343398014,0.9928485406535935,-0.08693521997952251,-0.9571629670907674,0.4798359279063687,0.7601976829697518,-0.7918854096273218,-0.4351408757834257,0.9705040608094282,0.983340279735349,-0.9855950584942079,0.3678077914487003,0.8346156050366232,-0.710404688048635,-0.751785721498363,0.9333000642106192,0.1599000310019457,-0.9989365728703107,-0.9943007157746262,0.30841480238221164,0.867701172794608,-0.6425558636332139,-0.5948960213541391,0.9087885033617725,0.2218522883606966,-0.9998554628546199,0.18857303385389695,0.9224491265832717,-0.5672242430232747,-0.6896122802994141,0.8502995002579108,0.8806569150439222,-0.9901012899594424,0.06584399852353615,0.963073339106661,0.9449691940134067,-0.5141421645665176,0.7787914484135322,0.454087856833072,0.3992101723939866,-0.9792754182153254,0.002767357348525109,-0.3480563560687774,-0.8460800152743135,-0.812189302375469,0.7376698374266187,0.5093871555037385,-0.18074395434957172,-0.12075447002330733,0.9963333036033996,-0.2882250598750188,-0.8780213400603996,-0.8473735723169314,0.6117648441257423,-0.8997594239817557,-0.24242740964395107,-0.6242984555094201,-0.636422929754616,0.8855403006692673,0.5496774483634197,-0.9975706862449201,0.13656522931740545,0.9415127555457349,-0.5230417655967238,0.9948755504494313,0.821386993555915,-0.9516778063754883,0.4958850877983412,0.7481245884333878,-0.8029787495040018,-0.4185141354827795,0.9747723789716813,-0.7686918416374382,-0.982319153362526,0.38484190206733154,0.8243474589270998,-0.7232238822797359,0.987737811770392,0.9397443379522079,-0.8418007669400437,0.7010700498134831,0.5540222711680631,-0.9284876892681121,0.8584155682674929,0.9994573350888598,-0.5800175330960321,-0.9020207687383159,0.2038879066776521,-0.9999990427143722,-0.8755158234675858,0.9151944106016352,0.99587403421933,-0.6761816710702295,0.8598318107388916,0.3232339090353698,-0.9925143695637101,-0.941100498740164,0.9579605895917942,0.9976550207227836,-0.2717470769629928,-0.8861070162692367,-0.9665371566493999,0.44943984161460054,0.7820489994470531,-0.7704589533862857,-0.4657874237050171,-0.6495683966908705,0.8774361388563805,0.2893943281463043,0.4934800486552872,-0.9525240129458906,-0.1024835602085386,-0.5083357904937122,-0.7384938705533951,-0.8690734653500267,0.6625224867065549,0.5971181526245029,-0.13717013899804675,-0.7926306375533936,-0.4340409274783896,0.9707977768377454,0.8601434377311886,0.25518903147552735,-0.9986828070619297,0.9149481377399974,0.9351582819486202,-0.06874772134105935,-0.9749084964969886,-0.49494837134147196,0.6887273174352959,0.5682296481989298,-0.6234556990959228,-0.9287142914283298,0.33025847657771956,0.9858728450443078,0.0],"x":[1.8110048645192806e18,1.8105520000870428e18,1.810099135654805e18,1.809646271222567e18,1.809193406790329e18,1.8087405423580913e18,1.8082876779258534e18,1.8078348134936156e18,1.8073819490613775e18,1.8069290846291397e18,1.8064762201969016e18,1.806023355764664e18,1.8055704913324262e18,1.8051176269001882e18,1.8046647624679503e18,1.8042118980357123e18,1.8037590336034747e18,1.8033061691712369e18,1.8028533047389988e18,1.802400440306761e18,1.801947575874523e18,1.801494711442285e18,1.8010418470100475e18,1.8005889825778094e18,1.8001361181455716e18,1.7996832537133335e18,1.7992303892810957e18,1.798777524848858e18,1.79832466041662e18,1.7978717959843822e18,1.7974189315521441e18,1.7969660671199063e18,1.7965132026876685e18,1.7960603382554307e18,1.7956074738231928e18,1.7951546093909548e18,1.794701744958717e18,1.794248880526479e18,1.7937960160942413e18,1.7933431516620035e18,1.7928902872297654e18,1.7924374227975276e18,1.7919845583652897e18,1.7915316939330516e18,1.791078829500814e18,1.790625965068576e18,1.7901731006363382e18,1.7897202362041004e18,1.7892673717718623e18,1.7888145073396247e18,1.7883616429073866e18,1.7879087784751488e18,1.787455914042911e18,1.787003049610673e18,1.786550185178435e18,1.7860973207461972e18,1.7856444563139594e18,1.7851915918817216e18,1.7847387274494835e18,1.7842858630172457e18,1.7838329985850079e18,1.78338013415277e18,1.7829272697205322e18,1.7824744052882941e18,1.7820215408560563e18,1.7815686764238182e18,1.7811158119915807e18,1.7806629475593428e18,1.7802100831271048e18,1.779757218694867e18,1.7793043542626289e18,1.7788514898303913e18,1.7783986253981535e18,1.7779457609659154e18,1.7774928965336776e18,1.7770400321014395e18,1.7765871676692017e18,1.776134303236964e18,1.775681438804726e18,1.7752285743724882e18,1.77477570994025e18,1.7743228455080123e18,1.7738699810757747e18,1.7734171166435366e18,1.7729642522112988e18,1.7725113877790607e18,1.772058523346823e18,1.771605658914585e18,1.7711527944823473e18,1.7706999300501094e18,1.7702470656178714e18,1.7697942011856335e18,1.7693413367533957e18,1.768888472321158e18,1.76843560788892e18,1.767982743456682e18,1.7675298790244442e18,1.7670770145922063e18,1.7666241501599683e18,1.7661712857277307e18,1.7657184212954926e18,1.7652655568632548e18,1.764812692431017e18,1.764359827998779e18,1.7639069635665413e18,1.7634540991343032e18,1.7630012347020654e18,1.7625483702698276e18,1.7620955058375895e18,1.7616426414053517e18,1.761189776973114e18,1.760736912540876e18,1.7602840481086382e18,1.7598311836764e18,1.7593783192441623e18,1.7589254548119247e18,1.7584725903796867e18,1.7580197259474488e18,1.7575668615152108e18,1.757113997082973e18,1.7566611326507348e18,1.7562082682184973e18,1.7557554037862595e18,1.7553025393540214e18,1.7548496749217836e18,1.7543968104895457e18,1.753943946057308e18,1.75349108162507e18,1.753038217192832e18,1.7525853527605942e18,1.7521324883283564e18,1.7516796238961183e18,1.7512267594638807e18,1.7507738950316426e18,1.7503210305994048e18,1.749868166167167e18,1.749415301734929e18,1.7489624373026913e18,1.7485095728704532e18,1.7480567084382154e18,1.7476038440059776e18,1.7471509795737395e18,1.7466981151415017e18,1.746245250709264e18,1.745792386277026e18,1.7453395218447882e18,1.7448866574125501e18,1.7444337929803123e18,1.7439809285480745e18,1.7435280641158367e18,1.7430751996835988e18,1.7426223352513608e18,1.742169470819123e18,1.7417166063868849e18,1.7412637419546473e18,1.7408108775224095e18,1.7403580130901714e18,1.7399051486579336e18,1.7394522842256955e18,1.7389994197934577e18,1.73854655536122e18,1.738093690928982e18,1.7376408264967442e18,1.737187962064506e18,1.7367350976322683e18,1.7362822332000307e18,1.7358293687677926e18,1.7353765043355548e18,1.7349236399033167e18,1.734470775471079e18,1.734017911038841e18,1.7335650466066033e18,1.7331121821743654e18,1.7326593177421274e18,1.7322064533098895e18,1.7317535888776517e18,1.731300724445414e18,1.730847860013176e18,1.730394995580938e18,1.7299421311487002e18,1.7294892667164623e18,1.7290364022842243e18,1.7285835378519867e18,1.7281306734197486e18,1.7276778089875108e18,1.727224944555273e18,1.726772080123035e18,1.7263192156907973e18,1.7258663512585592e18,1.7254134868263214e18,1.7249606223940836e18,1.7245077579618455e18,1.7240548935296077e18,1.7236020290973699e18,1.723149164665132e18,1.7226963002328942e18,1.7222434358006561e18,1.7217905713684183e18,1.7213377069361805e18,1.7208848425039427e18,1.7204319780717048e18,1.7199791136394668e18,1.719526249207229e18,1.7190733847749908e18,1.7186205203427533e18,1.7181676559105155e18,1.7177147914782774e18,1.7172619270460396e18,1.7168090626138015e18,1.716356198181564e18,1.715903333749326e18,1.715450469317088e18,1.7149976048848502e18,1.714544740452612e18,1.7140918760203743e18,1.7136390115881367e18,1.7131861471558986e18,1.7127332827236608e18,1.7122804182914227e18,1.711827553859185e18,1.7113746894269473e18,1.7109218249947092e18,1.7104689605624714e18,1.7100160961302333e18,1.7095632316979955e18,1.7091103672657577e18,1.7086575028335199e18,1.708204638401282e18,1.707751773969044e18,1.7072989095368061e18,1.7068460451045683e18,1.7063931806723305e18,1.7059403162400927e18,1.7054874518078546e18,1.7050345873756168e18,1.704581722943379e18,1.7041288585111409e18,1.7036759940789033e18,1.7032231296466652e18,1.7027702652144274e18,1.7023174007821896e18,1.7018645363499515e18,1.701411671917714e18,1.7009588074854758e18,1.700505943053238e18,1.7000530786210002e18,1.699600214188762e18,1.6991473497565243e18,1.6986944853242865e18,1.6982416208920486e18,1.6977887564598108e18,1.6973358920275727e18,1.696883027595335e18,1.696430163163097e18,1.6959772987308593e18,1.6955244342986214e18,1.6950715698663834e18,1.6946187054341455e18,1.6941658410019075e18,1.69371297656967e18,1.693260112137432e18,1.692807247705194e18,1.6923543832729562e18,1.691901518840718e18,1.6914486544084805e18,1.6909957899762427e18,1.6905429255440046e18,1.6900900611117668e18,1.6896371966795287e18,1.689184332247291e18,1.6887314678150533e18,1.6882786033828152e18,1.6878257389505774e18,1.6873728745183393e18,1.6869200100861015e18,1.686467145653864e18,1.6860142812216259e18,1.685561416789388e18,1.68510855235715e18,1.684655687924912e18,1.6842028234926743e18,1.6837499590604365e18,1.6832970946281987e18,1.6828442301959606e18,1.6823913657637228e18,1.681938501331485e18,1.681485636899247e18,1.6810327724670093e18,1.6805799080347712e18,1.6801270436025334e18,1.6796741791702956e18,1.6792213147380575e18,1.67876845030582e18,1.6783155858735818e18,1.677862721441344e18,1.6774098570091062e18,1.676956992576868e18,1.6765041281446305e18,1.6760512637123927e18,1.6755983992801546e18,1.6751455348479168e18,1.6746926704156787e18,1.674239805983441e18,1.6737869415512033e18,1.6733340771189652e18,1.6728812126867274e18,1.6724283482544893e18,1.6719754838222515e18,1.671522619390014e18,1.671069754957776e18,1.670616890525538e18,1.6701640260933e18,1.6697111616610621e18,1.669258297228824e18,1.6688054327965865e18,1.6683525683643487e18,1.6678997039321106e18,1.6674468394998728e18,1.666993975067635e18,1.666541110635397e18,1.6660882462031593e18,1.6656353817709212e18,1.6651825173386834e18,1.6647296529064456e18,1.6642767884742075e18,1.66382392404197e18,1.6633710596097318e18,1.662918195177494e18,1.6624653307452562e18,1.662012466313018e18,1.6615596018807805e18,1.6611067374485425e18,1.6606538730163046e18,1.6602010085840668e18,1.6597481441518287e18,1.659295279719591e18,1.658842415287353e18,1.6583895508551153e18,1.6579366864228774e18,1.6574838219906394e18,1.6570309575584015e18,1.6565780931261637e18,1.656125228693926e18,1.655672364261688e18,1.65521949982945e18,1.6547666353972122e18,1.654313770964974e18,1.6538609065327365e18,1.6534080421004987e18,1.6529551776682606e18,1.6525023132360228e18,1.6520494488037847e18,1.6515965843715471e18,1.6511437199393093e18,1.6506908555070712e18,1.6502379910748334e18,1.6497851266425953e18,1.6493322622103575e18,1.64887939777812e18,1.6484265333458819e18,1.647973668913644e18,1.647520804481406e18,1.6470679400491681e18,1.6466150756169306e18,1.6461622111846925e18,1.6457093467524547e18,1.6452564823202166e18,1.6448036178879788e18,1.644350753455741e18,1.643897889023503e18,1.6434450245912653e18,1.6429921601590272e18,1.6425392957267894e18,1.6420864312945516e18,1.6416335668623137e18,1.641180702430076e18,1.6407278379978378e18,1.6402749735656e18,1.6398221091333622e18,1.639369244701124e18,1.6389163802688865e18,1.6384635158366484e18,1.6380106514044106e18,1.6375577869721728e18,1.6371049225399347e18,1.6366520581076972e18,1.636199193675459e18,1.6357463292432212e18,1.6352934648109834e18,1.6348406003787453e18,1.6343877359465075e18,1.6339348715142697e18,1.6334820070820319e18,1.633029142649794e18,1.632576278217556e18,1.6321234137853181e18,1.6316705493530803e18,1.6312176849208425e18,1.6307648204886047e18,1.6303119560563666e18,1.6298590916241288e18,1.6294062271918907e18,1.628953362759653e18,1.6285004983274153e18,1.6280476338951772e18,1.6275947694629394e18,1.6271419050307013e18,1.6266890405984637e18,1.626236176166226e18,1.6257833117339878e18,1.62533044730175e18,1.624877582869512e18,1.624424718437274e18,1.6239718540050365e18,1.6235189895727985e18,1.6230661251405606e18,1.6226132607083226e18,1.6221603962760847e18,1.6217075318438472e18,1.621254667411609e18,1.6208018029793713e18,1.6203489385471332e18,1.6198960741148954e18,1.6194432096826575e18,1.6189903452504197e18,1.618537480818182e18,1.6180846163859438e18,1.617631751953706e18,1.6171788875214682e18,1.6167260230892303e18,1.6162731586569925e18,1.6158202942247544e18,1.6153674297925166e18,1.6149145653602788e18,1.6144617009280407e18,1.6140088364958031e18,1.613555972063565e18,1.6131031076313272e18,1.6126502431990894e18,1.6121973787668513e18,1.6117445143346138e18,1.6112916499023757e18,1.6108387854701379e18,1.6103859210379e18,1.609933056605662e18,1.609480192173424e18,1.6090273277411863e18,1.6085744633089485e18,1.6081215988767107e18,1.6076687344444726e18,1.6072158700122348e18,1.606763005579997e18,1.606310141147759e18,1.6058572767155213e18,1.6054044122832832e18,1.6049515478510454e18,1.6044986834188073e18,1.6040458189865697e18,1.603592954554332e18,1.6031400901220938e18,1.602687225689856e18,1.602234361257618e18,1.6017814968253804e18,1.6013286323931425e18,1.6008757679609044e18,1.6004229035286666e18,1.5999700390964285e18,1.5995171746641907e18,1.5990643102319532e18,1.598611445799715e18,1.5981585813674772e18,1.5977057169352392e18,1.5972528525030013e18,1.5967999880707638e18,1.5963471236385257e18,1.595894259206288e18,1.5954413947740498e18,1.594988530341812e18,1.5945356659095741e18,1.5940828014773363e18,1.5936299370450985e18,1.5931770726128604e18,1.5927242081806226e18,1.5922713437483848e18,1.591818479316147e18,1.591365614883909e18,1.590912750451671e18,1.5904598860194332e18,1.5900070215871954e18,1.5895541571549573e18,1.5891012927227197e18,1.588648428290482e18,1.5881955638582438e18,1.587742699426006e18,1.587289834993768e18,1.5868369705615304e18,1.5863841061292925e18,1.5859312416970545e18,1.5854783772648166e18,1.5850255128325786e18,1.5845726484003407e18,1.5841197839681032e18,1.583666919535865e18,1.5832140551036273e18,1.5827611906713892e18,1.5823083262391514e18,1.5818554618069138e18,1.5814025973746757e18,1.580949732942438e18,1.5804968685101998e18,1.580044004077962e18,1.5795911396457242e18,1.5791382752134863e18,1.5786854107812485e18,1.5782325463490104e18,1.5777796819167726e18,1.5773268174845348e18,1.576873953052297e18,1.5764210886200591e18,1.575968224187821e18,1.5755153597555832e18,1.5750624953233454e18,1.5746096308911073e18,1.5741567664588698e18,1.5737039020266317e18,1.5732510375943939e18,1.572798173162156e18,1.572345308729918e18,1.5718924442976804e18,1.5714395798654423e18,1.5709867154332045e18,1.5705338510009667e18,1.5700809865687286e18,1.5696281221364908e18,1.569175257704253e18,1.568722393272015e18,1.5682695288397773e18,1.5678166644075392e18,1.5673637999753014e18,1.5669109355430636e18,1.5664580711108257e18,1.566005206678588e18,1.5655523422463498e18,1.565099477814112e18,1.564646613381874e18,1.5641937489496364e18,1.5637408845173985e18,1.5632880200851604e18,1.5628351556529226e18,1.5623822912206845e18,1.561929426788447e18,1.5614765623562092e18,1.561023697923971e18,1.5605708334917332e18,1.5601179690594952e18,1.5596651046272573e18,1.5592122401950198e18,1.5587593757627817e18,1.5583065113305439e18,1.5578536468983058e18,1.557400782466068e18,1.5569479180338304e18,1.5564950536015923e18,1.5560421891693545e18,1.5555893247371164e18,1.5551364603048786e18,1.5546835958726408e18,1.554230731440403e18,1.553777867008165e18,1.553325002575927e18,1.5528721381436892e18,1.5524192737114514e18,1.5519664092792136e18,1.5515135448469757e18,1.5510606804147377e18,1.5506078159824998e18,1.550154951550262e18,1.549702087118024e18,1.5492492226857864e18,1.5487963582535483e18,1.5483434938213105e18,1.5478906293890726e18,1.5474377649568346e18,1.546984900524597e18,1.546532036092359e18,1.546079171660121e18,1.5456263072278833e18,1.5451734427956452e18,1.5447205783634074e18,1.5442677139311695e18,1.5438148494989317e18,1.543361985066694e18,1.5429091206344558e18,1.542456256202218e18,1.5420033917699802e18,1.5415505273377423e18,1.5410976629055045e18,1.5406447984732664e18,1.5401919340410286e18,1.5397390696087905e18,1.539286205176553e18,1.5388333407443151e18,1.538380476312077e18,1.5379276118798392e18,1.5374747474476012e18,1.5370218830153636e18,1.5365690185831258e18,1.5361161541508877e18,1.5356632897186499e18,1.5352104252864118e18,1.534757560854174e18,1.5343046964219364e18,1.5338518319896983e18,1.5333989675574605e18,1.5329461031252224e18,1.5324932386929846e18,1.532040374260747e18,1.531587509828509e18,1.531134645396271e18,1.530681780964033e18,1.5302289165317952e18,1.5297760520995574e18,1.5293231876673196e18,1.5288703232350817e18,1.5284174588028436e18,1.5279645943706058e18,1.527511729938368e18,1.5270588655061302e18,1.5266060010738924e18,1.5261531366416543e18,1.5257002722094164e18,1.5252474077771786e18,1.5247945433449405e18,1.524341678912703e18,1.523888814480465e18,1.523435950048227e18,1.5229830856159892e18,1.5225302211837512e18,1.5220773567515136e18,1.5216244923192755e18,1.5211716278870377e18,1.5207187634548e18,1.5202658990225618e18,1.519813034590324e18,1.5193601701580861e18,1.5189073057258483e18,1.5184544412936105e18,1.5180015768613724e18,1.5175487124291346e18,1.5170958479968968e18,1.516642983564659e18,1.516190119132421e18,1.515737254700183e18,1.5152843902679452e18,1.5148315258357071e18,1.5143786614034696e18,1.5139257969712317e18,1.5134729325389937e18,1.5130200681067558e18,1.5125672036745178e18,1.5121143392422802e18,1.5116614748100424e18,1.5112086103778043e18,1.5107557459455665e18,1.5103028815133284e18,1.5098500170810906e18,1.509397152648853e18,1.508944288216615e18,1.508491423784377e18,1.508038559352139e18,1.5075856949199012e18,1.5071328304876636e18,1.5066799660554255e18,1.5062271016231877e18,1.5057742371909496e18,1.5053213727587118e18,1.504868508326474e18,1.5044156438942362e18,1.5039627794619983e18,1.5035099150297603e18,1.5030570505975224e18,1.5026041861652846e18,1.5021513217330465e18,1.501698457300809e18,1.5012455928685711e18,1.500792728436333e18,1.5003398640040952e18,1.4998869995718572e18,1.4994341351396196e18,1.4989812707073818e18,1.4985284062751437e18,1.4980755418429059e18,1.4976226774106678e18,1.49716981297843e18,1.4967169485461924e18,1.4962640841139543e18,1.4958112196817165e18,1.4953583552494784e18,1.4949054908172406e18,1.494452626385003e18,1.493999761952765e18,1.493546897520527e18,1.493094033088289e18,1.4926411686560512e18,1.4921883042238134e18,1.4917354397915756e18,1.4912825753593377e18,1.4908297109270996e18,1.4903768464948618e18,1.489923982062624e18,1.4894711176303862e18,1.4890182531981484e18,1.4885653887659103e18,1.4881125243336724e18,1.4876596599014346e18,1.4872067954691965e18,1.486753931036959e18,1.486301066604721e18,1.485848202172483e18,1.4853953377402452e18,1.4849424733080072e18,1.4844896088757696e18,1.4840367444435315e18,1.4835838800112937e18,1.4831310155790559e18,1.4826781511468178e18,1.48222528671458e18,1.4817724222823421e18,1.4813195578501043e18,1.4808666934178665e18,1.4804138289856284e18,1.4799609645533906e18,1.4795081001211528e18,1.479055235688915e18,1.478602371256677e18,1.478149506824439e18,1.4776966423922012e18,1.4772437779599631e18,1.4767909135277256e18,1.4763380490954877e18,1.4758851846632497e18,1.4754323202310118e18,1.4749794557987738e18,1.4745265913665362e18,1.4740737269342984e18,1.4736208625020603e18,1.4731679980698225e18,1.4727151336375844e18,1.4722622692053466e18,1.471809404773109e18,1.471356540340871e18,1.470903675908633e18,1.470450811476395e18,1.4699979470441572e18,1.4695450826119196e18,1.4690922181796815e18,1.4686393537474437e18,1.4681864893152056e18,1.4677336248829678e18,1.46728076045073e18,1.4668278960184922e18,1.4663750315862543e18,1.4659221671540163e18,1.4654693027217784e18,1.4650164382895406e18,1.4645635738573028e18,1.464110709425065e18,1.463657844992827e18,1.463204980560589e18,1.4627521161283512e18,1.4622992516961132e18,1.4618463872638756e18,1.4613935228316375e18,1.4609406583993997e18,1.4604877939671619e18,1.4600349295349238e18,1.4595820651026862e18,1.459129200670448e18,1.4586763362382103e18,1.4582234718059725e18,1.4577706073737344e18,1.4573177429414966e18,1.4568648785092588e18,1.456412014077021e18,1.455959149644783e18,1.455506285212545e18,1.4550534207803072e18,1.4546005563480694e18,1.4541476919158316e18,1.4536948274835937e18,1.4532419630513556e18,1.4527890986191178e18,1.4523362341868797e18,1.4518833697546422e18,1.4514305053224044e18,1.4509776408901663e18,1.4505247764579284e18,1.4500719120256904e18,1.4496190475934528e18,1.449166183161215e18,1.448713318728977e18,1.448260454296739e18,1.447807589864501e18,1.4473547254322632e18,1.4469018610000256e18,1.4464489965677875e18,1.4459961321355497e18,1.4455432677033116e18,1.4450904032710738e18,1.4446375388388362e18,1.4441846744065981e18,1.4437318099743603e18,1.4432789455421222e18,1.4428260811098844e18,1.4423732166776466e18,1.4419203522454088e18,1.441467487813171e18,1.4410146233809329e18,1.440561758948695e18,1.4401088945164572e18,1.4396560300842194e18,1.4392031656519816e18,1.4387503012197435e18,1.4382974367875057e18,1.4378445723552678e18,1.4373917079230298e18,1.4369388434907922e18,1.436485979058554e18,1.4360331146263163e18,1.4355802501940785e18,1.4351273857618404e18,1.4346745213296028e18,1.4342216568973647e18,1.433768792465127e18,1.433315928032889e18,1.432863063600651e18,1.4324101991684132e18,1.4319573347361754e18,1.4315044703039375e18,1.4310516058716997e18,1.4305987414394616e18,1.4301458770072238e18,1.429693012574986e18,1.4292401481427482e18,1.4287872837105103e18,1.4283344192782723e18,1.4278815548460344e18,1.4274286904137964e18,1.4269758259815588e18,1.426522961549321e18,1.426070097117083e18,1.425617232684845e18,1.425164368252607e18,1.4247115038203694e18,1.4242586393881316e18,1.4238057749558935e18,1.4233529105236557e18,1.4229000460914176e18,1.4224471816591798e18,1.4219943172269422e18,1.4215414527947041e18,1.4210885883624663e18,1.4206357239302282e18,1.4201828594979904e18,1.4197299950657528e18,1.4192771306335148e18,1.418824266201277e18,1.4183714017690388e18,1.417918537336801e18,1.4174656729045632e18,1.4170128084723254e18,1.4165599440400876e18,1.4161070796078497e18,1.4156542151756116e18,1.4152013507433738e18,1.414748486311136e18,1.4142956218788982e18,1.4138427574466604e18,1.4133898930144223e18,1.4129370285821844e18,1.4124841641499464e18,1.4120312997177088e18,1.411578435285471e18,1.411125570853233e18,1.410672706420995e18,1.410219841988757e18,1.4097669775565194e18,1.4093141131242816e18,1.4088612486920435e18,1.4084083842598057e18,1.4079555198275676e18,1.4075026553953298e18,1.4070497909630922e18,1.4065969265308541e18,1.4061440620986163e18,1.4056911976663782e18,1.4052383332341404e18,1.4047854688019028e18,1.4043326043696648e18,1.403879739937427e18,1.4034268755051889e18,1.402974011072951e18,1.4025211466407132e18,1.4020682822084754e18,1.4016154177762376e18,1.4011625533439995e18,1.4007096889117617e18,1.4002568244795238e18,1.399803960047286e18,1.3993510956150482e18,1.39889823118281e18,1.3984453667505723e18,1.3979925023183345e18,1.3975396378860964e18,1.3970867734538588e18,1.3966339090216207e18,1.396181044589383e18,1.395728180157145e18,1.395275315724907e18,1.3948224512926694e18,1.3943695868604314e18,1.3939167224281935e18,1.3934638579959557e18,1.3930109935637176e18,1.3925581291314798e18,1.392105264699242e18,1.3916524002670042e18,1.3911995358347663e18,1.3907466714025283e18,1.3902938069702904e18,1.3898409425380526e18,1.3893880781058148e18,1.388935213673577e18,1.388482349241339e18,1.388029484809101e18,1.387576620376863e18,1.3871237559446254e18,1.3866708915123876e18,1.3862180270801495e18,1.3857651626479117e18,1.3853122982156736e18,1.384859433783436e18,1.3844065693511982e18,1.38395370491896e18,1.3835008404867223e18,1.3830479760544842e18,1.3825951116222464e18,1.3821422471900088e18,1.3816893827577708e18,1.381236518325533e18,1.3807836538932948e18,1.380330789461057e18,1.3798779250288195e18,1.3794250605965814e18,1.3789721961643436e18,1.3785193317321055e18,1.3780664672998676e18,1.3776136028676298e18,1.377160738435392e18,1.3767078740031542e18,1.376255009570916e18,1.3758021451386783e18,1.3753492807064404e18,1.3748964162742026e18,1.3744435518419648e18,1.3739906874097267e18,1.373537822977489e18,1.373084958545251e18,1.372632094113013e18,1.3721792296807754e18,1.3717263652485373e18,1.3712735008162995e18,1.3708206363840617e18,1.3703677719518236e18,1.369914907519586e18,1.369462043087348e18,1.3690091786551101e18,1.3685563142228723e18,1.3681034497906342e18,1.3676505853583964e18,1.3671977209261586e18,1.3667448564939208e18,1.366291992061683e18,1.3658391276294449e18,1.365386263197207e18,1.3649333987649692e18,1.3644805343327314e18,1.3640276699004936e18,1.3635748054682555e18,1.3631219410360177e18,1.3626690766037796e18,1.362216212171542e18,1.3617633477393042e18,1.361310483307066e18,1.3608576188748283e18,1.3604047544425902e18,1.3599518900103526e18,1.3594990255781148e18,1.3590461611458767e18,1.358593296713639e18,1.3581404322814008e18,1.357687567849163e18,1.3572347034169254e18,1.3567818389846874e18,1.3563289745524495e18,1.3558761101202115e18,1.3554232456879736e18,1.354970381255736e18,1.354517516823498e18,1.3540646523912602e18,1.353611787959022e18,1.3531589235267843e18,1.3527060590945464e18,1.3522531946623086e18,1.3518003302300708e18,1.3513474657978327e18,1.350894601365595e18,1.350441736933357e18,1.3499888725011192e18,1.3495360080688814e18,1.3490831436366433e18,1.3486302792044055e18,1.3481774147721677e18,1.3477245503399296e18,1.347271685907692e18,1.346818821475454e18,1.3463659570432161e18,1.3459130926109783e18,1.3454602281787402e18,1.3450073637465027e18,1.3445544993142646e18,1.3441016348820268e18,1.343648770449789e18,1.3431959060175508e18,1.342743041585313e18,1.3422901771530752e18,1.3418373127208374e18,1.3413844482885996e18,1.3409315838563615e18,1.3404787194241236e18,1.3400258549918858e18,1.339572990559648e18,1.3391201261274102e18,1.338667261695172e18,1.3382143972629343e18,1.3377615328306962e18,1.3373086683984586e18,1.3368558039662208e18,1.3364029395339827e18,1.335950075101745e18,1.3354972106695068e18,1.3350443462372692e18,1.3345914818050314e18,1.3341386173727933e18,1.3336857529405555e18,1.3332328885083174e18,1.3327800240760796e18,1.332327159643842e18,1.331874295211604e18,1.3314214307793661e18,1.330968566347128e18,1.3305157019148902e18,1.3300628374826527e18,1.3296099730504146e18,1.3291571086181768e18,1.328704244185939e18,1.3282513797537009e18,1.327798515321463e18,1.3273456508892252e18,1.3268927864569874e18,1.3264399220247496e18,1.3259870575925115e18,1.3255341931602737e18,1.3250813287280358e18,1.324628464295798e18,1.3241755998635602e18,1.323722735431322e18,1.3232698709990843e18,1.3228170065668462e18,1.3223641421346086e18,1.3219112777023708e18,1.3214584132701327e18,1.321005548837895e18,1.3205526844056568e18,1.3200998199734193e18,1.3196469555411814e18,1.3191940911089434e18,1.3187412266767055e18,1.3182883622444675e18,1.3178354978122296e18,1.317382633379992e18,1.316929768947754e18,1.3164769045155162e18,1.316024040083278e18,1.3155711756510403e18,1.3151183112188027e18,1.3146654467865646e18,1.3142125823543268e18,1.3137597179220887e18,1.313306853489851e18,1.312853989057613e18,1.3124011246253752e18,1.3119482601931374e18,1.3114953957608993e18,1.3110425313286615e18,1.3105896668964237e18,1.3101368024641859e18,1.309683938031948e18,1.30923107359971e18,1.308778209167472e18,1.3083253447352343e18,1.3078724803029962e18,1.3074196158707587e18,1.3069667514385206e18,1.3065138870062828e18,1.306061022574045e18,1.3056081581418068e18,1.3051552937095693e18,1.3047024292773312e18,1.3042495648450934e18,1.3037967004128556e18,1.3033438359806175e18,1.3028909715483796e18,1.3024381071161418e18,1.301985242683904e18,1.3015323782516662e18,1.301079513819428e18,1.3006266493871903e18,1.3001737849549524e18,1.2997209205227146e18,1.2992680560904768e18,1.2988151916582387e18,1.298362327226001e18,1.2979094627937628e18,1.2974565983615252e18,1.2970037339292874e18,1.2965508694970493e18,1.2960980050648115e18,1.2956451406325734e18,1.295192276200336e18,1.294739411768098e18,1.29428654733586e18,1.2938336829036221e18,1.293380818471384e18,1.2929279540391462e18,1.2924750896069087e18,1.2920222251746706e18,1.2915693607424328e18,1.2911164963101947e18,1.2906636318779569e18,1.2902107674457193e18,1.2897579030134812e18,1.2893050385812434e18,1.2888521741490053e18,1.2883993097167675e18,1.2879464452845297e18,1.2874935808522918e18,1.287040716420054e18,1.286587851987816e18,1.286134987555578e18,1.2856821231233403e18,1.2852292586911025e18,1.2847763942588646e18,1.2843235298266266e18,1.2838706653943887e18,1.283417800962151e18,1.2829649365299128e18,1.2825120720976753e18,1.2820592076654372e18,1.2816063432331994e18,1.2811534788009615e18,1.2807006143687235e18,1.280247749936486e18,1.2797948855042478e18,1.27934202107201e18,1.2788891566397722e18,1.278436292207534e18,1.2779834277752963e18,1.2775305633430584e18,1.2770776989108206e18,1.2766248344785828e18,1.2761719700463447e18,1.275719105614107e18,1.2752662411818688e18,1.2748133767496312e18,1.2743605123173934e18,1.2739076478851553e18,1.2734547834529175e18,1.2730019190206794e18,1.2725490545884419e18,1.272096190156204e18,1.271643325723966e18,1.2711904612917281e18,1.27073759685949e18,1.2702847324272522e18,1.2698318679950147e18,1.2693790035627766e18,1.2689261391305388e18,1.2684732746983007e18,1.2680204102660628e18,1.2675675458338253e18,1.2671146814015872e18,1.2666618169693494e18,1.2662089525371113e18,1.2657560881048735e18,1.2653032236726356e18,1.2648503592403978e18,1.26439749480816e18,1.263944630375922e18,1.263491765943684e18,1.2630389015114463e18,1.2625860370792084e18,1.2621331726469706e18,1.2616803082147325e18,1.2612274437824947e18,1.260774579350257e18,1.2603217149180188e18,1.2598688504857812e18,1.2594159860535432e18,1.2589631216213053e18,1.2585102571890675e18,1.2580573927568294e18,1.2576045283245919e18,1.2571516638923538e18,1.256698799460116e18,1.2562459350278781e18,1.25579307059564e18,1.2553402061634022e18,1.2548873417311644e18,1.2544344772989266e18,1.2539816128666888e18,1.2535287484344507e18,1.2530758840022129e18,1.252623019569975e18,1.2521701551377372e18,1.2517172907054994e18,1.2512644262732613e18,1.2508115618410235e18,1.2503586974087854e18,1.2499058329765478e18,1.24945296854431e18,1.249000104112072e18,1.248547239679834e18,1.248094375247596e18,1.2476415108153585e18,1.2471886463831206e18,1.2467357819508826e18,1.2462829175186447e18,1.2458300530864067e18,1.2453771886541688e18,1.2449243242219313e18,1.2444714597896932e18,1.2440185953574554e18,1.2435657309252173e18,1.2431128664929795e18,1.242660002060742e18,1.2422071376285038e18,1.241754273196266e18,1.2413014087640282e18,1.24084854433179e18,1.2403956798995523e18,1.2399428154673144e18,1.2394899510350766e18,1.2390370866028388e18,1.2385842221706007e18,1.238131357738363e18,1.237678493306125e18,1.2372256288738872e18,1.2367727644416494e18,1.2363199000094113e18,1.2358670355771735e18,1.2354141711449354e18,1.2349613067126979e18,1.23450844228046e18,1.234055577848222e18,1.233602713415984e18,1.233149848983746e18,1.2326969845515085e18,1.2322441201192707e18,1.2317912556870326e18,1.2313383912547948e18,1.2308855268225567e18,1.2304326623903188e18,1.2299797979580813e18,1.2295269335258432e18,1.2290740690936054e18,1.2286212046613673e18,1.2281683402291295e18,1.227715475796892e18,1.2272626113646538e18,1.226809746932416e18,1.226356882500178e18,1.22590401806794e18,1.2254511536357023e18,1.2249982892034644e18,1.2245454247712266e18,1.2240925603389885e18,1.2236396959067507e18,1.223186831474513e18,1.222733967042275e18,1.2222811026100372e18,1.2218282381777992e18,1.2213753737455613e18,1.2209225093133235e18,1.2204696448810854e18,1.220016780448848e18,1.2195639160166098e18,1.219111051584372e18,1.2186581871521341e18,1.218205322719896e18,1.2177524582876585e18,1.2172995938554204e18,1.2168467294231826e18,1.2163938649909448e18,1.2159410005587067e18,1.2154881361264689e18,1.215035271694231e18,1.2145824072619932e18,1.2141295428297554e18,1.2136766783975173e18,1.2132238139652795e18,1.2127709495330417e18,1.2123180851008038e18,1.211865220668566e18,1.211412356236328e18,1.21095949180409e18,1.210506627371852e18,1.2100537629396145e18,1.2096008985073766e18,1.2091480340751386e18,1.2086951696429007e18,1.2082423052106627e18,1.207789440778425e18,1.2073365763461873e18,1.2068837119139492e18,1.2064308474817114e18,1.2059779830494733e18,1.2055251186172355e18,1.205072254184998e18,1.2046193897527598e18,1.204166525320522e18,1.203713660888284e18,1.203260796456046e18,1.2028079320238085e18,1.2023550675915704e18,1.2019022031593326e18,1.2014493387270945e18,1.2009964742948567e18,1.200543609862619e18,1.200090745430381e18,1.1996378809981432e18,1.1991850165659052e18,1.1987321521336673e18,1.1982792877014295e18,1.1978264232691917e18,1.1973735588369539e18,1.1969206944047158e18,1.196467829972478e18,1.1960149655402401e18,1.195562101108002e18,1.1951092366757645e18,1.1946563722435264e18,1.1942035078112886e18,1.1937506433790508e18,1.1932977789468127e18,1.192844914514575e18,1.192392050082337e18,1.1919391856500992e18,1.1914863212178614e18,1.1910334567856233e18,1.1905805923533855e18,1.1901277279211476e18,1.1896748634889098e18,1.189221999056672e18,1.188769134624434e18,1.188316270192196e18,1.1878634057599583e18,1.1874105413277204e18,1.1869576768954826e18,1.1865048124632445e18,1.1860519480310067e18,1.1855990835987686e18,1.185146219166531e18,1.1846933547342932e18,1.1842404903020552e18,1.1837876258698173e18,1.1833347614375793e18,1.1828818970053417e18,1.1824290325731039e18,1.1819761681408658e18,1.181523303708628e18,1.18107043927639e18,1.1806175748441523e18,1.1801647104119142e18,1.1797118459796764e18,1.1792589815474386e18,1.1788061171152005e18,1.178353252682963e18,1.1779003882507249e18,1.177447523818487e18,1.1769946593862492e18,1.1765417949540111e18,1.1760889305217736e18,1.1756360660895355e18,1.1751832016572977e18,1.1747303372250598e18,1.1742774727928218e18,1.173824608360584e18,1.173371743928346e18,1.1729188794961083e18,1.1724660150638702e18,1.1720131506316324e18,1.1715602861993946e18,1.1711074217671567e18,1.170654557334919e18,1.1702016929026808e18,1.169748828470443e18,1.1692959640382052e18,1.1688430996059674e18,1.1683902351737295e18,1.1679373707414915e18,1.1674845063092536e18,1.1670316418770158e18,1.166578777444778e18,1.1661259130125402e18,1.165673048580302e18,1.1652201841480643e18,1.1647673197158264e18,1.1643144552835886e18,1.1638615908513505e18,1.1634087264191127e18,1.162955861986875e18,1.162502997554637e18,1.1620501331223992e18,1.1615972686901612e18,1.1611444042579233e18,1.1606915398256855e18,1.1602386753934477e18,1.1597858109612099e18,1.1593329465289718e18,1.158880082096734e18,1.158427217664496e18,1.1579743532322583e18,1.1575214888000202e18,1.1570686243677824e18,1.1566157599355446e18,1.1561628955033068e18,1.155710031071069e18,1.1552571666388308e18,1.154804302206593e18,1.1543514377743552e18,1.1538985733421174e18,1.1534457089098796e18,1.1529928444776415e18,1.1525399800454036e18,1.1520871156131658e18,1.1516342511809279e18,1.15118138674869e18,1.1507285223164521e18,1.1502756578842143e18,1.1498227934519764e18,1.1493699290197385e18,1.1489170645875005e18,1.1484642001552627e18,1.1480113357230249e18,1.147558471290787e18,1.1471056068585491e18,1.1466527424263112e18,1.1461998779940733e18,1.1457470135618355e18,1.1452941491295976e18,1.1448412846973597e18,1.1443884202651218e18,1.1439355558328838e18,1.1434826914006461e18,1.1430298269684082e18,1.1425769625361702e18,1.1421240981039324e18,1.1416712336716945e18,1.1412183692394568e18,1.1407655048072188e18,1.1403126403749809e18,1.139859775942743e18,1.1394069115105051e18,1.1389540470782673e18,1.1385011826460294e18,1.1380483182137915e18,1.1375954537815535e18,1.1371425893493158e18,1.1366897249170779e18,1.1362368604848401e18,1.1357839960526021e18,1.1353311316203642e18,1.1348782671881265e18,1.1344254027558885e18,1.1339725383236506e18,1.1335196738914127e18,1.1330668094591748e18,1.132613945026937e18,1.1321610805946991e18,1.1317082161624612e18,1.1312553517302234e18,1.1308024872979854e18,1.1303496228657476e18,1.1298967584335098e18,1.1294438940012718e18,1.1289910295690339e18,1.128538165136796e18,1.1280853007045582e18,1.1276324362723203e18,1.1271795718400824e18,1.1267267074078445e18,1.1262738429756067e18,1.1258209785433688e18,1.1253681141111309e18,1.124915249678893e18,1.1244623852466551e18,1.1240095208144172e18,1.1235566563821795e18,1.1231037919499415e18,1.1226509275177036e18,1.1221980630854657e18,1.1217451986532278e18,1.1212923342209901e18,1.1208394697887521e18,1.1203866053565142e18,1.1199337409242764e18,1.1194808764920384e18,1.1190280120598006e18,1.1185751476275628e18,1.1181222831953248e18,1.1176694187630868e18,1.117216554330849e18,1.1167636898986112e18,1.1163108254663734e18,1.1158579610341354e18,1.1154050966018975e18,1.1149522321696596e18,1.1144993677374218e18,1.1140465033051839e18,1.113593638872946e18,1.1131407744407081e18,1.1126879100084701e18,1.1122350455762324e18,1.1117821811439945e18,1.1113293167117567e18,1.1108764522795187e18,1.1104235878472808e18,1.1099707234150431e18,1.1095178589828051e18,1.1090649945505672e18,1.1086121301183293e18,1.1081592656860914e18,1.1077064012538536e18,1.1072535368216157e18,1.1068006723893778e18,1.10634780795714e18,1.105894943524902e18,1.1054420790926642e18,1.1049892146604264e18,1.1045363502281884e18,1.1040834857959505e18,1.1036306213637126e18,1.1031777569314748e18,1.1027248924992369e18,1.102272028066999e18,1.1018191636347611e18,1.1013662992025231e18,1.1009134347702854e18,1.1004605703380475e18,1.1000077059058097e18,1.0995548414735717e18,1.0991019770413338e18,1.0986491126090961e18,1.0981962481768581e18,1.0977433837446202e18,1.0972905193123823e18,1.0968376548801444e18,1.0963847904479066e18,1.0959319260156687e18,1.0954790615834308e18,1.095026197151193e18,1.0945733327189551e18,1.0941204682867172e18,1.0936676038544794e18,1.0932147394222414e18,1.0927618749900035e18,1.0923090105577658e18,1.0918561461255278e18,1.0914032816932899e18,1.090950417261052e18,1.0904975528288141e18,1.0900446883965764e18,1.0895918239643384e18,1.0891389595321005e18,1.0886860950998627e18,1.0882332306676247e18,1.0877803662353869e18,1.087327501803149e18,1.0868746373709111e18,1.0864217729386732e18,1.0859689085064353e18,1.0855160440741975e18,1.0850631796419597e18,1.0846103152097217e18,1.0841574507774838e18,1.083704586345246e18,1.0832517219130081e18,1.0827988574807702e18,1.0823459930485324e18,1.0818931286162944e18,1.0814402641840564e18,1.0809873997518188e18,1.0805345353195808e18,1.080081670887343e18,1.079628806455105e18,1.0791759420228671e18,1.0787230775906294e18,1.0782702131583914e18,1.0778173487261535e18,1.0773644842939156e18,1.0769116198616777e18,1.0764587554294399e18,1.076005890997202e18,1.0755530265649641e18,1.0751001621327263e18,1.0746472977004883e18,1.0741944332682505e18,1.0737415688360127e18,1.0732887044037747e18,1.0728358399715368e18,1.072382975539299e18,1.0719301111070611e18,1.0714772466748232e18,1.0710243822425853e18,1.0705715178103474e18,1.0701186533781096e18,1.0696657889458717e18,1.0692129245136338e18,1.068760060081396e18,1.068307195649158e18,1.06785433121692e18,1.0674014667846824e18,1.0669486023524444e18,1.0664957379202065e18,1.0660428734879686e18,1.0655900090557307e18,1.065137144623493e18,1.064684280191255e18,1.0642314157590171e18,1.0637785513267793e18,1.0633256868945413e18,1.0628728224623035e18,1.0624199580300657e18,1.0619670935978277e18,1.0615142291655898e18,1.061061364733352e18,1.0606085003011141e18,1.0601556358688763e18,1.0597027714366383e18,1.0592499070044004e18,1.0587970425721626e18,1.0583441781399247e18,1.0578913137076868e18,1.057438449275449e18,1.056985584843211e18,1.056532720410973e18,1.0560798559787354e18,1.0556269915464974e18,1.0551741271142596e18,1.0547212626820216e18,1.0542683982497837e18,1.053815533817546e18,1.053362669385308e18,1.0529098049530701e18,1.0524569405208323e18,1.0520040760885943e18,1.0515512116563565e18,1.0510983472241187e18,1.0506454827918807e18,1.0501926183596429e18,1.049739753927405e18,1.0492868894951671e18,1.0488340250629293e18,1.0483811606306913e18,1.0479282961984534e18,1.0474754317662157e18,1.0470225673339777e18,1.0465697029017398e18,1.046116838469502e18,1.045663974037264e18,1.0452111096050263e18,1.0447582451727884e18,1.0443053807405504e18,1.0438525163083126e18,1.0433996518760746e18,1.0429467874438368e18,1.042493923011599e18,1.042041058579361e18,1.0415881941471231e18,1.0411353297148852e18,1.0406824652826474e18,1.0402296008504096e18,1.0397767364181716e18,1.0393238719859337e18,1.0388710075536959e18,1.038418143121458e18,1.0379652786892201e18,1.0375124142569823e18,1.0370595498247443e18,1.0366066853925064e18,1.0361538209602687e18,1.0357009565280307e18,1.0352480920957929e18,1.034795227663555e18,1.034342363231317e18,1.0338894987990793e18,1.0334366343668413e18,1.0329837699346034e18,1.0325309055023656e18,1.0320780410701276e18,1.0316251766378898e18,1.031172312205652e18,1.030719447773414e18,1.0302665833411762e18,1.0298137189089382e18,1.0293608544767004e18,1.0289079900444626e18,1.0284551256122246e18,1.0280022611799867e18,1.0275493967477489e18,1.027096532315511e18,1.0266436678832731e18,1.0261908034510353e18,1.0257379390187973e18,1.0252850745865595e18,1.0248322101543217e18,1.0243793457220837e18,1.0239264812898459e18,1.023473616857608e18,1.02302075242537e18,1.0225678879931323e18,1.0221150235608943e18,1.0216621591286564e18,1.0212092946964186e18,1.0207564302641806e18,1.0203035658319429e18,1.019850701399705e18,1.019397836967467e18,1.0189449725352292e18,1.0184921081029912e18,1.0180392436707534e18,1.0175863792385156e18,1.0171335148062776e18,1.0166806503740397e18,1.0162277859418019e18,1.015774921509564e18,1.0153220570773262e18,1.0148691926450883e18,1.0144163282128503e18,1.0139634637806125e18,1.0135105993483747e18,1.0130577349161367e18,1.0126048704838989e18,1.0121520060516609e18,1.011699141619423e18,1.0112462771871853e18,1.0107934127549473e18,1.0103405483227095e18,1.0098876838904716e18,1.0094348194582336e18,1.0089819550259959e18,1.008529090593758e18,1.00807622616152e18,1.0076233617292822e18,1.0071704972970444e18,1.0067176328648064e18,1.0062647684325686e18,1.0058119040003306e18,1.0053590395680928e18,1.004906175135855e18,1.004453310703617e18,1.0040004462713792e18,1.0035475818391412e18,1.0030947174069033e18,1.0026418529746656e18,1.0021889885424276e18,1.0017361241101897e18,1.0012832596779519e18,1.0008303952457139e18,1.0003775308134762e18,9.999246663812383e17,9.994718019490003e17,9.990189375167625e17,9.985660730845245e17,9.981132086522867e17,9.976603442200489e17,9.97207479787811e17,9.96754615355573e17,9.963017509233352e17,9.958488864910973e17,9.953960220588595e17,9.949431576266216e17,9.944902931943836e17,9.940374287621458e17,9.93584564329908e17,9.9313169989767e17,9.926788354654322e17,9.922259710331942e17,9.917731066009563e17,9.913202421687186e17,9.908673777364806e17,9.904145133042428e17,9.899616488720049e17,9.895087844397669e17,9.890559200075292e17,9.886030555752913e17,9.881501911430533e17,9.876973267108155e17,9.872444622785775e17,9.867915978463397e17,9.863387334141019e17,9.85885868981864e17,9.854330045496261e17,9.849801401173882e17,9.845272756851503e17,9.840744112529125e17,9.836215468206746e17,9.831686823884366e17,9.827158179561988e17,9.82262953523961e17,9.81810089091723e17,9.813572246594852e17,9.809043602272472e17,9.804514957950093e17,9.799986313627716e17,9.795457669305336e17,9.790929024982958e17,9.786400380660579e17,9.781871736338199e17,9.777343092015822e17,9.772814447693443e17,9.768285803371063e17,9.763757159048685e17,9.759228514726305e17,9.754699870403927e17,9.750171226081549e17,9.745642581759169e17,9.741113937436791e17,9.736585293114412e17,9.732056648792033e17,9.727528004469655e17,9.722999360147276e17,9.718470715824896e17,9.713942071502518e17,9.70941342718014e17,9.70488478285776e17,9.700356138535382e17,9.695827494213002e17,9.691298849890624e17,9.686770205568246e17,9.682241561245866e17,9.677712916923488e17,9.673184272601108e17,9.668655628278729e17,9.664126983956352e17,9.659598339633972e17,9.655069695311593e17,9.650541050989215e17,9.646012406666836e17,9.641483762344458e17,9.636955118022079e17,9.632426473699699e17,9.627897829377321e17,9.623369185054943e17,9.618840540732563e17,9.614311896410185e17,9.609783252087805e17,9.605254607765426e17,9.600725963443049e17,9.59619731912067e17,9.591668674798291e17,9.587140030475912e17,9.582611386153532e17,9.578082741831155e17,9.573554097508776e17,9.569025453186396e17,9.564496808864018e17,9.559968164541638e17,9.55543952021926e17,9.550910875896882e17,9.546382231574502e17,9.541853587252124e17,9.537324942929745e17,9.532796298607366e17,9.528267654284988e17,9.523739009962609e17,9.519210365640229e17,9.514681721317851e17,9.510153076995473e17,9.505624432673093e17,9.501095788350715e17,9.496567144028335e17,9.492038499705957e17,9.487509855383579e17,9.4829812110612e17,9.478452566738821e17,9.473923922416442e17,9.469395278094062e17,9.464866633771685e17,9.460337989449306e17,9.455809345126926e17,9.451280700804548e17,9.446752056482168e17,9.442223412159791e17,9.437694767837412e17,9.433166123515032e17,9.428637479192654e17,9.424108834870275e17,9.419580190547896e17,9.415051546225518e17,9.410522901903139e17,9.405994257580759e17,9.401465613258381e17,9.396936968936003e17,9.392408324613624e17,9.387879680291245e17,9.383351035968865e17,9.378822391646487e17,9.374293747324109e17,9.369765103001729e17,9.365236458679351e17,9.360707814356972e17,9.356179170034592e17,9.351650525712215e17,9.347121881389836e17,9.342593237067457e17,9.338064592745078e17,9.333535948422698e17,9.329007304100321e17,9.324478659777942e17,9.319950015455562e17,9.315421371133184e17,9.310892726810804e17,9.306364082488426e17,9.301835438166048e17,9.297306793843668e17,9.29277814952129e17,9.288249505198911e17,9.283720860876532e17,9.279192216554154e17,9.274663572231775e17,9.270134927909395e17,9.265606283587017e17,9.261077639264639e17,9.256548994942259e17,9.252020350619881e17,9.247491706297501e17,9.242963061975124e17,9.238434417652745e17,9.233905773330365e17,9.229377129007987e17,9.224848484685608e17,9.220319840363228e17,9.215791196040851e17,9.211262551718472e17,9.206733907396092e17,9.202205263073714e17,9.197676618751336e17,9.193147974428957e17,9.188619330106578e17,9.184090685784198e17,9.17956204146182e17,9.175033397139442e17,9.170504752817062e17,9.165976108494684e17,9.161447464172305e17,9.156918819849925e17,9.152390175527548e17,9.147861531205169e17,9.14333288688279e17,9.138804242560411e17,9.134275598238031e17,9.129746953915654e17,9.125218309593275e17,9.120689665270895e17,9.116161020948517e17,9.111632376626138e17,9.10710373230376e17,9.102575087981381e17,9.098046443659002e17,9.093517799336623e17,9.088989155014244e17,9.084460510691866e17,9.079931866369487e17,9.075403222047108e17,9.070874577724728e17,9.06634593340235e17,9.061817289079972e17,9.057288644757592e17,9.052760000435214e17,9.048231356112835e17,9.043702711790456e17,9.039174067468078e17,9.034645423145699e17,9.03011677882332e17,9.025588134500941e17,9.021059490178561e17,9.016530845856184e17,9.012002201533805e17,9.007473557211425e17,9.002944912889047e17,8.998416268566668e17,8.99388762424429e17,8.989358979921911e17,8.984830335599532e17,8.980301691277153e17,8.975773046954774e17,8.971244402632396e17,8.966715758310017e17,8.962187113987638e17,8.957658469665258e17,8.95312982534288e17,8.948601181020502e17,8.944072536698124e17,8.939543892375744e17,8.935015248053364e17,8.930486603730986e17,8.925957959408608e17,8.921429315086228e17,8.91690067076385e17,8.912372026441471e17,8.907843382119091e17,8.903314737796714e17,8.898786093474335e17,8.894257449151956e17,8.889728804829577e17,8.885200160507197e17,8.88067151618482e17,8.876142871862441e17,8.871614227540061e17,8.867085583217683e17,8.862556938895304e17,8.858028294572925e17,8.853499650250547e17,8.848971005928168e17,8.84444236160579e17,8.83991371728341e17,8.835385072961032e17,8.830856428638653e17,8.826327784316274e17,8.821799139993894e17,8.817270495671516e17,8.812741851349138e17,8.808213207026758e17,8.80368456270438e17,8.799155918382e17,8.794627274059624e17,8.790098629737244e17,8.785569985414865e17,8.781041341092486e17,8.776512696770107e17,8.771984052447729e17,8.76745540812535e17,8.762926763802971e17,8.758398119480591e17,8.753869475158213e17,8.749340830835835e17,8.744812186513457e17,8.740283542191077e17,8.735754897868698e17,8.73122625354632e17,8.726697609223941e17,8.722168964901562e17,8.717640320579183e17,8.713111676256804e17,8.708583031934424e17,8.704054387612047e17,8.699525743289668e17,8.694997098967288e17,8.69046845464491e17,8.68593981032253e17,8.681411166000154e17,8.676882521677774e17,8.672353877355395e17,8.667825233033016e17,8.663296588710637e17,8.658767944388259e17,8.65423930006588e17,8.649710655743501e17,8.645182011421121e17,8.640653367098743e17,8.636124722776365e17,8.631596078453987e17,8.627067434131607e17,8.622538789809228e17,8.618010145486849e17,8.613481501164471e17,8.608952856842092e17,8.604424212519713e17,8.599895568197334e17,8.595366923874954e17,8.590838279552577e17,8.586309635230198e17,8.58178099090782e17,8.57725234658544e17,8.57272370226306e17,8.568195057940684e17,8.563666413618304e17,8.559137769295924e17,8.554609124973546e17,8.550080480651167e17,8.545551836328788e17,8.54102319200641e17,8.536494547684031e17,8.531965903361652e17,8.527437259039273e17,8.522908614716895e17,8.518379970394516e17,8.513851326072137e17,8.509322681749757e17,8.504794037427379e17,8.500265393105001e17,8.495736748782621e17,8.491208104460243e17,8.486679460137864e17,8.482150815815485e17,8.477622171493107e17,8.473093527170728e17,8.46856488284835e17,8.46403623852597e17,8.45950759420359e17,8.454978949881213e17,8.450450305558834e17,8.445921661236454e17,8.441393016914076e17,8.436864372591697e17,8.43233572826932e17,8.42780708394694e17,8.42327843962456e17,8.418749795302182e17,8.414221150979803e17,8.409692506657425e17,8.405163862335046e17,8.400635218012667e17,8.396106573690287e17,8.391577929367909e17,8.387049285045531e17,8.382520640723153e17,8.377991996400773e17,8.373463352078394e17,8.368934707756017e17,8.364406063433637e17,8.359877419111258e17,8.35534877478888e17,8.3508201304665e17,8.34629148614412e17,8.341762841821743e17,8.337234197499364e17,8.332705553176986e17,8.328176908854606e17,8.323648264532228e17,8.31911962020985e17,8.31459097588747e17,8.31006233156509e17,8.305533687242712e17,8.301005042920334e17,8.296476398597955e17,8.291947754275576e17,8.287419109953197e17,8.282890465630819e17,8.27836182130844e17,8.273833176986061e17,8.269304532663683e17,8.264775888341303e17,8.260247244018924e17,8.255718599696547e17,8.251189955374167e17,8.246661311051788e17,8.242132666729409e17,8.23760402240703e17,8.233075378084653e17,8.228546733762273e17,8.224018089439894e17,8.219489445117516e17,8.214960800795136e17,8.210432156472758e17,8.20590351215038e17,8.201374867828e17,8.19684622350562e17,8.192317579183242e17,8.187788934860864e17,8.183260290538486e17,8.178731646216106e17,8.174203001893727e17,8.169674357571348e17,8.16514571324897e17,8.160617068926591e17,8.156088424604212e17,8.151559780281833e17,8.147031135959453e17,8.142502491637076e17,8.137973847314697e17,8.133445202992319e17,8.128916558669939e17,8.12438791434756e17,8.119859270025183e17,8.115330625702803e17,8.110801981380424e17,8.106273337058045e17,8.101744692735666e17,8.097216048413288e17,8.09268740409091e17,8.08815875976853e17,8.083630115446152e17,8.079101471123772e17,8.074572826801394e17,8.070044182479016e17,8.065515538156636e17,8.060986893834257e17,8.056458249511878e17,8.0519296051895e17,8.04740096086712e17,8.042872316544742e17,8.038343672222363e17,8.033815027899985e17,8.029286383577606e17,8.024757739255227e17,8.020229094932849e17,8.015700450610469e17,8.01117180628809e17,8.006643161965713e17,8.002114517643333e17,7.997585873320954e17,7.993057228998575e17,7.988528584676196e17,7.983999940353819e17,7.97947129603144e17,7.97494265170906e17,7.970414007386682e17,7.965885363064302e17,7.961356718741924e17,7.956828074419546e17,7.952299430097166e17,7.947770785774787e17,7.94324214145241e17,7.93871349713003e17,7.934184852807652e17,7.929656208485272e17,7.925127564162893e17,7.920598919840516e17,7.916070275518136e17,7.911541631195757e17,7.907012986873379e17,7.902484342550999e17,7.897955698228621e17,7.893427053906243e17,7.888898409583863e17,7.884369765261485e17,7.879841120939105e17,7.875312476616727e17,7.870783832294349e17,7.866255187971969e17,7.86172654364959e17,7.857197899327212e17,7.852669255004833e17,7.848140610682454e17,7.843611966360076e17,7.839083322037696e17,7.834554677715318e17,7.83002603339294e17,7.82549738907056e17,7.820968744748182e17,7.816440100425802e17,7.811911456103423e17,7.807382811781046e17,7.802854167458666e17,7.798325523136287e17,7.793796878813908e17,7.789268234491529e17,7.784739590169152e17,7.780210945846772e17,7.775682301524393e17,7.771153657202015e17,7.766625012879635e17,7.762096368557257e17,7.757567724234879e17,7.753039079912499e17,7.74851043559012e17,7.743981791267741e17,7.739453146945363e17,7.734924502622985e17,7.730395858300605e17,7.725867213978226e17,7.721338569655848e17,7.71680992533347e17,7.71228128101109e17,7.707752636688712e17,7.703223992366332e17,7.698695348043953e17,7.694166703721576e17,7.689638059399196e17,7.685109415076818e17,7.680580770754438e17,7.676052126432059e17,7.671523482109682e17,7.666994837787302e17,7.662466193464923e17,7.657937549142545e17,7.653408904820165e17,7.648880260497787e17,7.644351616175409e17,7.639822971853029e17,7.635294327530651e17,7.630765683208271e17,7.626237038885893e17,7.621708394563515e17,7.617179750241135e17,7.612651105918756e17,7.608122461596378e17,7.603593817274e17,7.59906517295162e17,7.594536528629242e17,7.590007884306862e17,7.585479239984484e17,7.580950595662106e17,7.576421951339726e17,7.571893307017348e17,7.567364662694968e17,7.562836018372589e17,7.558307374050212e17,7.553778729727832e17,7.549250085405453e17,7.544721441083075e17,7.540192796760695e17,7.535664152438318e17,7.531135508115939e17,7.526606863793559e17,7.522078219471181e17,7.517549575148801e17,7.513020930826423e17,7.508492286504045e17,7.503963642181665e17,7.499434997859286e17,7.494906353536909e17,7.490377709214529e17,7.48584906489215e17,7.481320420569772e17,7.476791776247392e17,7.472263131925015e17,7.467734487602636e17,7.463205843280256e17,7.458677198957878e17,7.454148554635498e17,7.44961991031312e17,7.445091265990742e17,7.440562621668362e17,7.436033977345983e17,7.431505333023604e17,7.426976688701226e17,7.422448044378848e17,7.417919400056468e17,7.413390755734089e17,7.408862111411711e17,7.404333467089332e17,7.399804822766953e17,7.395276178444575e17,7.390747534122195e17,7.386218889799816e17,7.381690245477439e17,7.377161601155059e17,7.372632956832681e17,7.368104312510301e17,7.363575668187922e17,7.359047023865545e17,7.354518379543165e17,7.349989735220786e17,7.345461090898408e17,7.340932446576028e17,7.33640380225365e17,7.331875157931272e17,7.327346513608892e17,7.322817869286514e17,7.318289224964134e17,7.313760580641756e17,7.309231936319378e17,7.304703291996998e17,7.300174647674619e17,7.29564600335224e17,7.291117359029862e17,7.286588714707483e17,7.282060070385105e17,7.277531426062725e17,7.273002781740347e17,7.268474137417969e17,7.263945493095589e17,7.259416848773211e17,7.254888204450831e17,7.250359560128452e17,7.245830915806075e17,7.241302271483695e17,7.236773627161316e17,7.232244982838938e17,7.227716338516558e17,7.223187694194181e17,7.218659049871802e17,7.214130405549422e17,7.209601761227044e17,7.205073116904664e17,7.200544472582286e17,7.196015828259908e17,7.191487183937528e17,7.186958539615149e17,7.18242989529277e17,7.177901250970392e17,7.173372606648014e17,7.168843962325635e17,7.164315318003255e17,7.159786673680877e17,7.155258029358499e17,7.150729385036119e17,7.146200740713741e17,7.141672096391361e17,7.137143452068982e17,7.132614807746605e17,7.128086163424225e17,7.123557519101847e17,7.119028874779468e17,7.114500230457088e17,7.109971586134711e17,7.105442941812332e17,7.100914297489952e17,7.096385653167574e17,7.091857008845194e17,7.087328364522816e17,7.082799720200438e17,7.078271075878058e17,7.07374243155568e17,7.069213787233302e17,7.064685142910922e17,7.060156498588544e17,7.055627854266164e17,7.051099209943785e17,7.046570565621408e17,7.042041921299028e17,7.037513276976649e17,7.032984632654271e17,7.028455988331891e17,7.023927344009514e17,7.019398699687135e17,7.014870055364755e17,7.010341411042377e17,7.005812766719997e17,7.001284122397619e17,6.996755478075241e17,6.992226833752861e17,6.987698189430482e17,6.983169545108104e17,6.978640900785725e17,6.974112256463347e17,6.969583612140968e17,6.965054967818588e17,6.96052632349621e17,6.955997679173832e17,6.951469034851452e17,6.946940390529074e17,6.942411746206694e17,6.937883101884315e17,6.933354457561938e17,6.928825813239558e17,6.92429716891718e17,6.9197685245948e17,6.915239880272421e17,6.910711235950044e17,6.906182591627665e17,6.901653947305285e17,6.897125302982907e17,6.892596658660527e17,6.888068014338149e17,6.883539370015771e17,6.879010725693391e17,6.874482081371013e17,6.869953437048634e17,6.865424792726255e17,6.860896148403877e17,6.856367504081498e17,6.851838859759118e17,6.84731021543674e17,6.842781571114362e17,6.838252926791982e17,6.833724282469604e17,6.829195638147224e17,6.824666993824846e17,6.820138349502468e17,6.815609705180088e17,6.81108106085771e17,6.80655241653533e17,6.802023772212951e17,6.797495127890574e17,6.792966483568195e17,6.788437839245815e17,6.783909194923437e17,6.779380550601057e17,6.77485190627868e17,6.770323261956301e17,6.765794617633921e17,6.761265973311543e17,6.756737328989164e17,6.752208684666785e17,6.747680040344407e17,6.743151396022028e17,6.738622751699648e17,6.73409410737727e17,6.729565463054892e17,6.725036818732513e17,6.720508174410134e17,6.715979530087754e17,6.711450885765376e17,6.706922241442998e17,6.702393597120618e17,6.69786495279824e17,6.69333630847586e17,6.688807664153481e17,6.684279019831104e17,6.679750375508724e17,6.675221731186346e17,6.670693086863967e17,6.666164442541587e17,6.66163579821921e17,6.657107153896831e17,6.652578509574451e17,6.648049865252073e17,6.643521220929695e17,6.638992576607315e17,6.634463932284937e17,6.629935287962557e17,6.625406643640179e17,6.620877999317801e17,6.616349354995421e17,6.611820710673043e17,6.607292066350664e17,6.602763422028284e17,6.598234777705907e17,6.593706133383528e17,6.589177489061148e17,6.58464884473877e17,6.58012020041639e17,6.575591556094013e17,6.571062911771634e17,6.566534267449254e17,6.562005623126876e17,6.557476978804497e17,6.552948334482118e17,6.54841969015974e17,6.54389104583736e17,6.539362401514981e17,6.534833757192603e17,6.530305112870225e17,6.525776468547846e17,6.521247824225467e17,6.516719179903087e17,6.512190535580709e17,6.507661891258331e17,6.503133246935951e17,6.498604602613573e17,6.494075958291194e17,6.489547313968814e17,6.485018669646437e17,6.480490025324058e17,6.47596138100168e17,6.4714327366793e17,6.46690409235692e17,6.462375448034543e17,6.457846803712164e17,6.453318159389784e17,6.448789515067406e17,6.444260870745027e17,6.439732226422648e17,6.43520358210027e17,6.43067493777789e17,6.426146293455512e17,6.421617649133133e17,6.417089004810755e17,6.412560360488376e17,6.408031716165997e17,6.403503071843617e17,6.398974427521239e17,6.394445783198861e17,6.389917138876481e17,6.385388494554103e17,6.380859850231724e17,6.376331205909344e17,6.371802561586967e17,6.367273917264588e17,6.362745272942209e17,6.35821662861983e17,6.35368798429745e17,6.349159339975073e17,6.344630695652694e17,6.340102051330314e17,6.335573407007936e17,6.331044762685556e17,6.326516118363178e17,6.3219874740408e17,6.31745882971842e17,6.312930185396042e17,6.308401541073663e17,6.303872896751284e17,6.299344252428906e17,6.294815608106527e17,6.290286963784147e17,6.285758319461769e17,6.281229675139391e17,6.276701030817011e17,6.272172386494633e17,6.267643742172253e17,6.263115097849875e17,6.258586453527497e17,6.254057809205117e17,6.249529164882739e17,6.24500052056036e17,6.24047187623798e17,6.235943231915603e17,6.231414587593224e17,6.226885943270844e17,6.222357298948466e17,6.217828654626086e17,6.21330001030371e17,6.20877136598133e17,6.20424272165895e17,6.199714077336572e17,6.195185433014194e17,6.190656788691814e17,6.186128144369436e17,6.181599500047057e17,6.177070855724677e17,6.1725422114023e17,6.16801356707992e17,6.163484922757542e17,6.158956278435163e17,6.154427634112783e17,6.149898989790406e17,6.145370345468027e17,6.140841701145647e17,6.136313056823269e17,6.13178441250089e17,6.127255768178511e17,6.122727123856133e17,6.118198479533754e17,6.113669835211375e17,6.109141190888996e17,6.104612546566618e17,6.10008390224424e17,6.09555525792186e17,6.09102661359948e17,6.086497969277102e17,6.081969324954724e17,6.077440680632344e17,6.072912036309966e17,6.068383391987587e17,6.063854747665208e17,6.05932610334283e17,6.05479745902045e17,6.050268814698072e17,6.045740170375693e17,6.041211526053313e17,6.036682881730936e17,6.032154237408557e17,6.027625593086177e17,6.023096948763799e17,6.01856830444142e17,6.014039660119043e17,6.009511015796663e17,6.004982371474284e17,6.000453727151905e17,5.995925082829526e17,5.991396438507148e17,5.986867794184769e17,5.98233914986239e17,5.97781050554001e17,5.973281861217632e17,5.968753216895254e17,5.964224572572876e17,5.959695928250496e17,5.955167283928116e17,5.950638639605738e17,5.94610999528336e17,5.94158135096098e17,5.937052706638602e17,5.932524062316223e17,5.927995417993843e17,5.923466773671466e17,5.918938129349087e17,5.914409485026708e17,5.909880840704329e17,5.90535219638195e17,5.900823552059571e17,5.896294907737193e17,5.891766263414815e17,5.887237619092435e17,5.882708974770056e17,5.878180330447677e17,5.873651686125299e17,5.86912304180292e17,5.864594397480541e17,5.860065753158162e17,5.855537108835784e17,5.851008464513404e17,5.846479820191026e17,5.841951175868648e17,5.837422531546268e17,5.83289388722389e17,5.82836524290151e17,5.823836598579132e17,5.819307954256753e17,5.814779309934374e17,5.810250665611996e17,5.805722021289617e17,5.801193376967238e17,5.796664732644859e17,5.79213608832248e17,5.787607444000101e17,5.783078799677723e17,5.778550155355345e17,5.774021511032965e17,5.769492866710587e17,5.764964222388207e17,5.760435578065829e17,5.75590693374345e17,5.7513782894210714e17,5.7468496450986925e17,5.7423210007763136e17,5.737792356453935e17,5.733263712131556e17,5.7287350678091776e17,5.724206423486799e17,5.719677779164419e17,5.715149134842041e17,5.710620490519662e17,5.706091846197284e17,5.701563201874904e17,5.6970345575525254e17,5.692505913230147e17,5.6879772689077677e17,5.6834486245853894e17,5.6789199802630106e17,5.674391335940632e17,5.669862691618253e17,5.665334047295874e17,5.6608054029734957e17,5.656276758651117e17,5.651748114328738e17,5.647219470006359e17,5.64269082568398e17,5.638162181361601e17,5.6336335370392224e17,5.629104892716844e17,5.624576248394465e17,5.620047604072086e17,5.6155189597497075e17,5.6109903154273286e17,5.6064616711049504e17,5.601933026782571e17,5.597404382460192e17,5.592875738137814e17,5.588347093815434e17,5.583818449493056e17,5.579289805170677e17,5.574761160848298e17,5.5702325165259194e17,5.5657038722035405e17,5.561175227881162e17,5.5566465835587834e17,5.552117939236404e17,5.5475892949140256e17,5.543060650591647e17,5.538532006269268e17,5.534003361946889e17,5.52947471762451e17,5.524946073302132e17,5.5204174289797523e17,5.515888784657374e17,5.511360140334995e17,5.506831496012616e17,5.5023028516902374e17,5.4977742073678586e17,5.4932455630454803e17,5.488716918723101e17,5.484188274400722e17,5.479659630078344e17,5.475130985755965e17,5.470602341433586e17,5.466073697111207e17,5.461545052788829e17,5.457016408466449e17,5.4524877641440704e17,5.447959119821692e17,5.443430475499313e17,5.4389018311769344e17,5.4343731868545555e17,5.4298445425321766e17,5.4253158982097984e17,5.420787253887419e17,5.4162586095650406e17,5.411729965242662e17,5.407201320920282e17,5.402672676597904e17,5.398144032275525e17,5.393615387953147e17,5.3890867436307674e17,5.3845580993083885e17,5.38002945498601e17,5.3755008106636314e17,5.3709721663412525e17,5.3664435220188736e17,5.361914877696495e17,5.357386233374116e17,5.352857589051737e17,5.348328944729359e17,5.34380030040698e17,5.3392716560846e17,5.334743011762222e17,5.330214367439843e17,5.325685723117465e17,5.3211570787950854e17,5.3166284344727066e17,5.312099790150328e17,5.307571145827949e17,5.3030425015055706e17,5.2985138571831917e17,5.293985212860813e17,5.289456568538434e17,5.284927924216055e17,5.280399279893677e17,5.275870635571298e17,5.2713419912489184e17,5.26681334692654e17,5.262284702604161e17,5.2577560582817824e17,5.2532274139594035e17,5.248698769637025e17,5.2441701253146464e17,5.239641480992267e17,5.2351128366698886e17,5.23058419234751e17,5.2260555480251315e17,5.221526903702752e17,5.216998259380373e17,5.212469615057995e17,5.2079409707356154e17,5.203412326413237e17,5.198883682090858e17,5.1943550377684794e17,5.1898263934461005e17,5.1852977491237216e17,5.1807691048013434e17,5.1762404604789645e17,5.171711816156585e17,5.167183171834207e17,5.162654527511828e17,5.158125883189449e17,5.15359723886707e17,5.149068594544691e17,5.144539950222313e17,5.1400113058999334e17,5.135482661577555e17,5.1309540172551763e17,5.1264253729327974e17,5.1218967286104186e17,5.11736808428804e17,5.1128394399656614e17,5.108310795643282e17,5.103782151320903e17,5.099253506998525e17,5.094724862676146e17,5.090196218353767e17,5.085667574031388e17,5.081138929709009e17,5.076610285386631e17,5.0720816410642515e17,5.067552996741873e17,5.0630243524194944e17,5.058495708097115e17,5.0539670637747366e17,5.049438419452358e17,5.0449097751299795e17,5.0403811308076e17,5.035852486485222e17,5.031323842162843e17,5.026795197840464e17,5.022266553518085e17,5.017737909195706e17,5.013209264873328e17,5.0086806205509485e17,5.0041519762285696e17,4.9996233319061914e17,4.9950946875838125e17,4.9905660432614336e17,4.986037398939055e17,4.981508754616676e17,4.9769801102942976e17,4.972451465971918e17,4.96792282164954e17,4.963394177327161e17,4.9588655330047814e17,4.954336888682403e17,4.949808244360024e17,4.945279600037646e17,4.9407509557152666e17,4.9362223113928877e17,4.9316936670705094e17,4.9271650227481306e17,4.9226363784257517e17,4.918107734103373e17,4.913579089780994e17,4.909050445458615e17,4.904521801136236e17,4.899993156813858e17,4.895464512491479e17,4.8909358681690995e17,4.886407223846721e17,4.8818785795243424e17,4.8773499352019635e17,4.8728212908795846e17,4.868292646557206e17,4.8637640022348275e17,4.859235357912448e17,4.85470671359007e17,4.850178069267691e17,4.845649424945312e17,4.841120780622933e17,4.836592136300554e17,4.832063491978176e17,4.8275348476557965e17,4.823006203333418e17,4.8184775590110394e17,4.8139489146886605e17,4.8094202703662816e17,4.804891626043903e17,4.8003629817215245e17,4.7958343373991456e17,4.791305693076766e17,4.786777048754388e17,4.782248404432009e17,4.77771976010963e17,4.773191115787251e17,4.7686624714648723e17,4.764133827142494e17,4.7596051828201146e17,4.7550765384977363e17,4.7505478941753574e17,4.7460192498529786e17,4.7414906055306e17,4.736961961208221e17,4.7324333168858426e17,4.727904672563463e17,4.723376028241084e17,4.718847383918706e17,4.714318739596327e17,4.709790095273948e17,4.705261450951569e17,4.7007328066291904e17,4.696204162306812e17,4.6916755179844326e17,4.6871468736620544e17,4.6826182293396755e17,4.678089585017296e17,4.673560940694918e17,4.669032296372539e17,4.6645036520501606e17,4.659975007727781e17,4.655446363405402e17,4.650917719083024e17,4.646389074760645e17,4.641860430438266e17,4.6373317861158874e17,4.6328031417935085e17,4.6282744974711296e17,4.623745853148751e17,4.6192172088263725e17,4.6146885645039936e17,4.610159920181614e17,4.605631275859236e17,4.601102631536857e17,4.596573987214479e17,4.592045342892099e17,4.587516698569721e17,4.582988054247342e17,4.5784594099249626e17,4.573930765602584e17,4.5694021212802054e17,4.564873476957827e17,4.5603448326354477e17,4.555816188313069e17,4.5512875439906906e17,4.5467588996683117e17,4.542230255345933e17,4.537701611023554e17,4.533172966701175e17,4.528644322378796e17,4.524115678056417e17,4.519587033734039e17,4.51505838941166e17,4.5105297450892806e17,4.5060011007669024e17,4.5014724564445235e17,4.496943812122145e17,4.492415167799766e17,4.487886523477387e17,4.4833578791550086e17,4.478829234832629e17,4.474300590510251e17,4.469771946187872e17,4.465243301865493e17,4.460714657543114e17,4.4561860132207354e17,4.451657368898357e17,4.447128724575978e17,4.442600080253599e17,4.4380714359312205e17,4.4335427916088416e17,4.429014147286463e17,4.424485502964084e17,4.419956858641705e17,4.415428214319327e17,4.410899569996947e17,4.406370925674569e17,4.40184228135219e17,4.397313637029812e17,4.3927849927074323e17,4.3882563483850534e17,4.383727704062675e17,4.379199059740296e17,4.3746704154179174e17,4.3701417710955386e17,4.36561312677316e17,4.361084482450781e17,4.356555838128402e17,4.352027193806024e17,4.347498549483644e17,4.342969905161265e17,4.338441260838887e17,4.333912616516508e17,4.329383972194129e17,4.3248553278717504e17,4.3203266835493715e17,4.315798039226993e17,4.311269394904614e17,4.3067407505822355e17,4.3022121062598566e17,4.297683461937477e17,4.293154817615099e17,4.28862617329272e17,4.284097528970342e17,4.279568884647962e17,4.2750402403255834e17,4.270511596003205e17,4.265982951680826e17,4.2614543073584474e17,4.2569256630360685e17,4.2523970187136896e17,4.247868374391311e17,4.243339730068932e17,4.2388110857465536e17,4.234282441424175e17,4.229753797101795e17,4.225225152779417e17,4.220696508457038e17,4.21616786413466e17,4.21163921981228e17,4.2071105754899014e17,4.202581931167523e17,4.1980532868451437e17,4.1935246425227654e17,4.1889959982003866e17,4.184467353878008e17,4.179938709555629e17,4.17541006523325e17,4.1708814209108717e17,4.166352776588493e17,4.161824132266114e17,4.157295487943735e17,4.152766843621356e17,4.148238199298977e17,4.1437095549765984e17,4.13918091065422e17,4.134652266331841e17,4.130123622009462e17,4.1255949776870835e17,4.1210663333647046e17,4.1165376890423264e17,4.112009044719947e17,4.107480400397568e17,4.10295175607519e17,4.09842311175281e17,4.093894467430432e17,4.089365823108053e17,4.084837178785674e17,4.0803085344632954e17,4.0757798901409165e17,4.071251245818538e17,4.0667226014961594e17,4.06219395717378e17,4.0576653128514016e17,4.053136668529023e17,4.048608024206644e17,4.044079379884265e17,4.039550735561886e17,4.035022091239508e17,4.0304934469171283e17,4.02596480259475e17,4.021436158272371e17,4.0169075139499923e17,4.0123788696276134e17,4.0078502253052346e17,4.0033215809828563e17,3.998792936660477e17,3.994264292338098e17,3.98973564801572e17,3.985207003693341e17,3.980678359370962e17,3.976149715048583e17,3.971621070726205e17,3.967092426403826e17,3.9625637820814464e17,3.958035137759068e17,3.953506493436689e17,3.9489778491143104e17,3.9444492047919315e17,3.9399205604695526e17,3.9353919161471744e17,3.930863271824795e17,3.9263346275024166e17,3.921805983180038e17,3.917277338857659e17,3.91274869453528e17,3.908220050212901e17,3.903691405890523e17,3.8991627615681434e17,3.8946341172457645e17,3.890105472923386e17,3.8855768286010074e17,3.8810481842786285e17,3.8765195399562496e17,3.871990895633871e17,3.8674622513114925e17,3.862933606989113e17,3.858404962666735e17,3.853876318344356e17,3.849347674021976e17,3.844819029699598e17,3.840290385377219e17,3.835761741054841e17,3.8312330967324614e17,3.8267044524100826e17,3.822175808087704e17,3.8176471637653254e17,3.8131185194429466e17,3.8085898751205677e17,3.804061230798189e17,3.79953258647581e17,3.795003942153431e17,3.790475297831053e17,3.785946653508674e17,3.7814180091862944e17,3.776889364863916e17,3.772360720541537e17,3.767832076219159e17,3.7633034318967795e17,3.7587747875744006e17,3.7542461432520224e17,3.749717498929643e17,3.7451888546072646e17,3.740660210284886e17,3.7361315659625075e17,3.731602921640128e17,3.727074277317749e17,3.722545632995371e17,3.7180169886729914e17,3.713488344350613e17,3.708959700028234e17,3.7044310557058554e17,3.6999024113834765e17,3.6953737670610976e17,3.6908451227387194e17,3.6863164784163405e17,3.681787834093961e17,3.677259189771583e17,3.672730545449204e17,3.668201901126825e17,3.663673256804446e17,3.659144612482067e17,3.654615968159689e17,3.6500873238373094e17,3.645558679514931e17,3.6410300351925523e17,3.6365013908701734e17,3.6319727465477946e17,3.627444102225416e17,3.6229154579030374e17,3.618386813580658e17,3.613858169258279e17,3.609329524935901e17,3.604800880613522e17,3.600272236291143e17,3.595743591968764e17,3.591214947646385e17,3.586686303324007e17,3.5821576590016275e17,3.577629014679249e17,3.5731003703568704e17,3.568571726034491e17,3.5640430817121126e17,3.559514437389734e17,3.5549857930673555e17,3.550457148744976e17,3.545928504422597e17,3.541399860100219e17,3.53687121577784e17,3.532342571455461e17,3.527813927133082e17,3.523285282810704e17,3.5187566384883245e17,3.5142279941659456e17,3.5096993498435674e17,3.5051707055211885e17,3.5006420611988096e17,3.496113416876431e17,3.491584772554052e17,3.4870561282316736e17,3.482527483909294e17,3.477998839586916e17,3.473470195264537e17,3.4689415509421574e17,3.464412906619779e17,3.4598842622974e17,3.455355617975022e17,3.4508269736526426e17,3.4462983293302637e17,3.4417696850078854e17,3.4372410406855066e17,3.4327123963631277e17,3.428183752040749e17,3.42365510771837e17,3.419126463395991e17,3.414597819073612e17,3.410069174751234e17,3.405540530428855e17,3.4010118861064755e17,3.396483241784097e17,3.3919545974617184e17,3.38742595313934e17,3.3828973088169606e17,3.378368664494582e17,3.3738400201722035e17,3.369311375849824e17,3.364782731527446e17,3.360254087205067e17,3.355725442882688e17,3.351196798560309e17,3.34666815423793e17,3.342139509915552e17,3.337610865593173e17,3.3330822212707936e17,3.3285535769484154e17,3.3240249326260365e17,3.3194962883036576e17,3.314967643981279e17,3.3104389996589005e17,3.3059103553365216e17,3.301381711014142e17,3.296853066691764e17,3.292324422369385e17,3.287795778047007e17,3.283267133724627e17,3.2787384894022483e17,3.27420984507987e17,3.2696812007574906e17,3.2651525564351123e17,3.2606239121127334e17,3.2560952677903546e17,3.251566623467976e17,3.247037979145597e17,3.2425093348232186e17,3.23798069050084e17,3.23345204617846e17,3.228923401856082e17,3.224394757533703e17,3.219866113211324e17,3.215337468888945e17,3.2108088245665664e17,3.206280180244188e17,3.2017515359218086e17,3.1972228915994304e17,3.1926942472770515e17,3.188165602954672e17,3.183636958632294e17,3.179108314309915e17,3.1745796699875366e17,3.170051025665157e17,3.165522381342778e17,3.1609937370204e17,3.156465092698021e17,3.151936448375642e17,3.1474078040532634e17,3.1428791597308845e17,3.1383505154085056e17,3.133821871086127e17,3.1292932267637485e17,3.1247645824413696e17,3.12023593811899e17,3.115707293796612e17,3.111178649474233e17,3.106650005151855e17,3.102121360829475e17,3.097592716507097e17,3.093064072184718e17,3.0885354278623386e17,3.08400678353996e17,3.0794781392175814e17,3.074949494895203e17,3.0704208505728237e17,3.065892206250445e17,3.0613635619280666e17,3.0568349176056877e17,3.052306273283309e17,3.04777762896093e17,3.043248984638551e17,3.038720340316172e17,3.034191695993793e17,3.029663051671415e17,3.025134407349036e17,3.0206057630266566e17,3.0160771187042784e17,3.0115484743818995e17,3.007019830059521e17,3.002491185737142e17,2.997962541414763e17,2.9934338970923846e17,2.988905252770005e17,2.984376608447627e17,2.979847964125248e17,2.975319319802869e17,2.97079067548049e17,2.9662620311581114e17,2.961733386835733e17,2.957204742513354e17,2.952676098190975e17,2.9481474538685965e17,2.9436188095462176e17,2.939090165223839e17,2.93456152090146e17,2.930032876579081e17,2.925504232256702e17,2.920975587934324e17,2.916446943611945e17,2.911918299289566e17,2.907389654967187e17,2.9028610106448083e17,2.8983323663224294e17,2.8938037220000506e17,2.8892750776776723e17,2.8847464333552934e17,2.8802177890329146e17,2.8756891447105357e17,2.8711605003881568e17,2.866631856065778e17,2.8621032117433994e17,2.8575745674210205e17,2.853045923098642e17,2.8485172787762627e17,2.8439886344538838e17,2.8394599901315053e17,2.8349313458091264e17,2.8304027014867478e17,2.825874057164369e17,2.82134541284199e17,2.8168167685196112e17,2.8122881241972326e17,2.8077594798748538e17,2.8032308355524752e17,2.798702191230096e17,2.794173546907717e17,2.7896449025853386e17,2.7851162582629597e17,2.780587613940581e17,2.776058969618202e17,2.7715303252958234e17,2.7670016809734445e17,2.762473036651066e17,2.757944392328687e17,2.753415748006308e17,2.7488871036839293e17,2.7443584593615504e17,2.739829815039172e17,2.735301170716793e17,2.7307725263944144e17,2.7262438820720352e17,2.7217152377496566e17,2.7171865934272778e17,2.7126579491048992e17,2.7081293047825203e17,2.703600660460141e17,2.6990720161377626e17,2.6945433718153837e17,2.690014727493005e17,2.6854860831706262e17,2.6809574388482474e17,2.6764287945258685e17,2.67190015020349e17,2.667371505881111e17,2.6628428615587325e17,2.6583142172363533e17,2.6537855729139744e17,2.6492569285915958e17,2.644728284269217e17,2.6401996399468384e17,2.6356709956244592e17,2.6311423513020806e17,2.6266137069797018e17,2.6220850626573232e17,2.6175564183349443e17,2.6130277740125658e17,2.6084991296901866e17,2.6039704853678077e17,2.599441841045429e17,2.5949131967230502e17,2.5903845524006717e17,2.5858559080782925e17,2.581327263755914e17,2.576798619433535e17,2.5722699751111565e17,2.5677413307887776e17,2.5632126864663987e17,2.55868404214402e17,2.554155397821641e17,2.5496267534992624e17,2.5450981091768835e17,2.5405694648545046e17,2.5360408205321258e17,2.5315121762097472e17,2.5269835318873683e17,2.5224548875649898e17,2.517926243242611e17,2.513397598920232e17,2.508868954597853e17,2.5043403102754742e17,2.4998116659530957e17,2.4952830216307168e17,2.490754377308338e17,2.486225732985959e17,2.4816970886635805e17,2.4771684443412016e17,2.472639800018823e17,2.4681111556964438e17,2.4635825113740653e17,2.4590538670516864e17,2.4545252227293075e17,2.449996578406929e17,2.4454679340845498e17,2.4409392897621712e17,2.4364106454397923e17,2.4318820011174138e17,2.427353356795035e17,2.422824712472656e17,2.418296068150277e17,2.4137674238278982e17,2.4092387795055197e17,2.4047101351831408e17,2.4001814908607622e17,2.395652846538383e17,2.3911242022160045e17,2.3865955578936256e17,2.382066913571247e17,2.3775382692488682e17,2.3730096249264893e17,2.3684809806041104e17,2.3639523362817315e17,2.359423691959353e17,2.354895047636974e17,2.3503664033145952e17,2.3458377589922163e17,2.3413091146698378e17,2.336780470347459e17,2.3322518260250803e17,2.327723181702701e17,2.3231945373803226e17,2.3186658930579437e17,2.3141372487355648e17,2.3096086044131862e17,2.305079960090807e17,2.3005513157684285e17,2.2960226714460496e17,2.291494027123671e17,2.286965382801292e17,2.2824367384789136e17,2.2779080941565344e17,2.2733794498341558e17,2.268850805511777e17,2.264322161189398e17,2.2597935168670195e17,2.2552648725446403e17,2.2507362282222618e17,2.246207583899883e17,2.2416789395775043e17,2.2371502952551254e17,2.2326216509327466e17,2.2280930066103677e17,2.223564362287989e17,2.2190357179656102e17,2.2145070736432314e17,2.2099784293208525e17,2.2054497849984736e17,2.200921140676095e17,2.1963924963537162e17,2.1918638520313376e17,2.1873352077089587e17,2.18280656338658e17,2.178277919064201e17,2.173749274741822e17,2.1692206304194435e17,2.1646919860970646e17,2.1601633417746858e17,2.155634697452307e17,2.1511060531299283e17,2.1465774088075494e17,2.142048764485171e17,2.1375201201627917e17,2.132991475840413e17,2.1284628315180342e17,2.1239341871956554e17,2.1194055428732768e17,2.1148768985508976e17,2.110348254228519e17,2.10581960990614e17,2.1012909655837616e17,2.0967623212613827e17,2.092233676939004e17,2.087705032616625e17,2.0831763882942464e17,2.0786477439718675e17,2.0741190996494886e17,2.06959045532711e17,2.065061811004731e17,2.0605331666823523e17,2.0560045223599734e17,2.051475878037595e17,2.046947233715216e17,2.042418589392837e17,2.0378899450704582e17,2.0333613007480797e17,2.0288326564257008e17,2.024304012103322e17,2.019775367780943e17,2.0152467234585642e17,2.0107180791361856e17,2.0061894348138067e17,2.0016607904914282e17,1.997132146169049e17,1.9926035018466704e17,1.9880748575242915e17,1.983546213201913e17,1.979017568879534e17,1.9744889245571552e17,1.9699602802347763e17,1.9654316359123974e17,1.960902991590019e17,1.95637434726764e17,1.9518457029452614e17,1.9473170586228822e17,1.9427884143005037e17,1.9382597699781248e17,1.9337311256557462e17,1.9292024813333674e17,1.924673837010988e17,1.9201451926886096e17,1.9156165483662307e17,1.911087904043852e17,1.9065592597214733e17,1.9020306153990944e17,1.8975019710767155e17,1.892973326754337e17,1.888444682431958e17,1.8839160381095795e17,1.8793873937872003e17,1.8748587494648214e17,1.870330105142443e17,1.865801460820064e17,1.8612728164976854e17,1.8567441721753066e17,1.8522155278529277e17,1.8476868835305488e17,1.8431582392081702e17,1.8386295948857914e17,1.8341009505634125e17,1.8295723062410336e17,1.8250436619186547e17,1.8205150175962762e17,1.8159863732738973e17,1.8114577289515187e17,1.8069290846291395e17,1.802400440306761e17,1.797871795984382e17,1.7933431516620035e17,1.7888145073396246e17,1.7842858630172454e17,1.779757218694867e17,1.775228574372488e17,1.7706999300501094e17,1.7661712857277306e17,1.761642641405352e17,1.7571139970829728e17,1.7525853527605942e17,1.7480567084382154e17,1.7435280641158368e17,1.738999419793458e17,1.7344707754710787e17,1.7299421311487e17,1.7254134868263213e17,1.7208848425039427e17,1.7163561981815638e17,1.711827553859185e17,1.707298909536806e17,1.7027702652144275e17,1.6982416208920486e17,1.69371297656967e17,1.689184332247291e17,1.684655687924912e17,1.6801270436025334e17,1.6755983992801546e17,1.671069754957776e17,1.6665411106353968e17,1.6620124663130182e17,1.6574838219906394e17,1.6529551776682608e17,1.648426533345882e17,1.6438978890235034e17,1.6393692447011242e17,1.6348406003787453e17,1.6303119560563667e17,1.625783311733988e17,1.6212546674116093e17,1.61672602308923e17,1.6121973787668515e17,1.6076687344444726e17,1.603140090122094e17,1.5986114457997152e17,1.594082801477336e17,1.5895541571549574e17,1.5850255128325786e17,1.5804968685102e17,1.575968224187821e17,1.5714395798654422e17,1.5669109355430634e17,1.5623822912206848e17,1.557853646898306e17,1.5533250025759274e17,1.5487963582535485e17,1.5442677139311693e17,1.5397390696087907e17,1.5352104252864118e17,1.5306817809640333e17,1.5261531366416544e17,1.5216244923192755e17,1.5170958479968966e17,1.512567203674518e17,1.5080385593521392e17,1.5035099150297606e17,1.4989812707073814e17,1.4944526263850026e17,1.489923982062624e17,1.485395337740245e17,1.4808666934178666e17,1.4763380490954874e17,1.4718094047731088e17,1.46728076045073e17,1.462752116128351e17,1.4582234718059725e17,1.4536948274835936e17,1.4491661831612147e17,1.4446375388388362e17,1.4401088945164573e17,1.4355802501940784e17,1.4310516058716997e17,1.426522961549321e17,1.4219943172269419e17,1.4174656729045632e17,1.4129370285821845e17,1.4084083842598056e17,1.4038797399374269e17,1.399351095615048e17,1.3948224512926693e17,1.3902938069702906e17,1.3857651626479117e17,1.381236518325533e17,1.376707874003154e17,1.3721792296807752e17,1.3676505853583965e17,1.3631219410360176e17,1.3585932967136389e17,1.3540646523912602e17,1.3495360080688813e17,1.3450073637465026e17,1.3404787194241237e17,1.335950075101745e17,1.3314214307793662e17,1.3268927864569872e17,1.3223641421346085e17,1.3178354978122296e17,1.3133068534898509e17,1.3087782091674722e17,1.3042495648450933e17,1.2997209205227146e17,1.2951922762003358e17,1.290663631877957e17,1.2861349875555782e17,1.2816063432331994e17,1.2770776989108205e17,1.2725490545884418e17,1.2680204102660629e17,1.2634917659436842e17,1.2589631216213054e17,1.2544344772989266e17,1.2499058329765478e17,1.245377188654169e17,1.2408485443317902e17,1.2363199000094115e17,1.2317912556870326e17,1.2272626113646538e17,1.2227339670422749e17,1.2182053227198962e17,1.2136766783975174e17,1.2091480340751386e17,1.2046193897527598e17,1.2000907454303811e17,1.1955621011080022e17,1.1910334567856235e17,1.1865048124632446e17,1.1819761681408658e17,1.177447523818487e17,1.1729188794961082e17,1.1683902351737294e17,1.1638615908513506e17,1.1593329465289718e17,1.1548043022065931e17,1.1502756578842142e17,1.1457470135618355e17,1.1412183692394568e17,1.1366897249170779e17,1.132161080594699e17,1.1276324362723202e17,1.1231037919499414e17,1.1185751476275627e17,1.1140465033051838e17,1.1095178589828051e17,1.1049892146604262e17,1.1004605703380475e17,1.0959319260156688e17,1.09140328169329e17,1.086874637370911e17,1.0823459930485323e17,1.0778173487261534e17,1.0732887044037747e17,1.0687600600813958e17,1.0642314157590171e17,1.0597027714366384e17,1.0551741271142595e17,1.0506454827918808e17,1.046116838469502e17,1.0415881941471232e17,1.0370595498247443e17,1.0325309055023654e17,1.0280022611799867e17,1.023473616857608e17,1.0189449725352291e17,1.0144163282128504e17,1.0098876838904715e17,1.0053590395680928e17,1.0008303952457141e17,9.963017509233352e16,9.917731066009565e16,9.872444622785776e16,9.827158179561987e16,9.7818717363382e16,9.736585293114411e16,9.691298849890624e16,9.646012406666837e16,9.600725963443048e16,9.55543952021926e16,9.510153076995472e16,9.464866633771685e16,9.419580190547898e16,9.374293747324107e16,9.32900730410032e16,9.283720860876533e16,9.238434417652744e16,9.193147974428957e16,9.147861531205168e16,9.102575087981381e16,9.057288644757594e16,9.012002201533805e16,8.966715758310018e16,8.921429315086227e16,8.87614287186244e16,8.830856428638653e16,8.785569985414864e16,8.740283542191077e16,8.69499709896729e16,8.6497106557435e16,8.604424212519714e16,8.559137769295925e16,8.513851326072138e16,8.46856488284835e16,8.42327843962456e16,8.377991996400773e16,8.332705553176984e16,8.287419109953197e16,8.24213266672941e16,8.196846223505621e16,8.151559780281834e16,8.106273337058046e16,8.060986893834258e16,8.01570045061047e16,7.97041400738668e16,7.925127564162893e16,7.879841120939106e16,7.834554677715317e16,7.78926823449153e16,7.743981791267742e16,7.698695348043954e16,7.653408904820166e16,7.608122461596378e16,7.56283601837259e16,7.517549575148803e16,7.472263131925013e16,7.426976688701226e16,7.381690245477437e16,7.33640380225365e16,7.291117359029862e16,7.245830915806074e16,7.200544472582286e16,7.1552580293584984e16,7.1099715861347096e16,7.0646851429109224e16,7.019398699687134e16,6.9741122564633464e16,6.928825813239558e16,6.88353937001577e16,6.838252926791982e16,6.7929664835681944e16,6.747680040344406e16,6.7023935971206184e16,6.657107153896831e16,6.6118207106730424e16,6.566534267449254e16,6.5212478242254664e16,6.475961381001679e16,6.430674937777891e16,6.385388494554102e16,6.3401020513303144e16,6.294815608106527e16,6.249529164882739e16,6.204242721658951e16,6.158956278435163e16,6.113669835211374e16,6.068383391987587e16,6.023096948763799e16,5.977810505540011e16,5.932524062316223e16,5.887237619092435e16,5.841951175868647e16,5.796664732644859e16,5.751378289421071e16,5.706091846197284e16,5.660805402973495e16,5.615518959749707e16,5.570232516525919e16,5.524946073302131e16,5.479659630078344e16,5.434373186854555e16,5.389086743630767e16,5.343800300406979e16,5.298513857183192e16,5.253227413959404e16,5.207940970735616e16,5.162654527511827e16,5.11736808428804e16,5.072081641064252e16,5.026795197840464e16,4.981508754616676e16,4.936222311392888e16,4.8909358681691e16,4.845649424945312e16,4.800362981721524e16,4.755076538497736e16,4.709790095273949e16,4.66450365205016e16,4.619217208826372e16,4.573930765602584e16,4.528644322378797e16,4.483357879155009e16,4.43807143593122e16,4.392784992707432e16,4.347498549483645e16,4.302212106259857e16,4.256925663036069e16,4.21163921981228e16,4.166352776588492e16,4.121066333364705e16,4.075779890140917e16,4.030493446917129e16,3.98520700369334e16,3.939920560469553e16,3.894634117245765e16,3.849347674021977e16,3.804061230798189e16,3.758774787574402e16,3.713488344350613e16,3.668201901126825e16,3.622915457903037e16,3.5776290146792492e16,3.5323425714554612e16,3.4870561282316732e16,3.441769685007885e16,3.3964832417840972e16,3.3511967985603092e16,3.3059103553365212e16,3.2606239121127332e16,3.2153374688889456e16,3.1700510256651572e16,3.1247645824413696e16,3.0794781392175816e16,3.0341916959937936e16,2.9889052527700056e16,2.9436188095462176e16,2.8983323663224296e16,2.853045923098642e16,2.8077594798748536e16,2.7624730366510656e16,2.7171865934272776e16,2.6719001502034896e16,2.626613706979702e16,2.5813272637559136e16,2.536040820532126e16,2.490754377308338e16,2.44546793408455e16,2.400181490860762e16,2.3548950476369744e16,2.309608604413186e16,2.2643221611893984e16,2.21903571796561e16,2.1737492747418224e16,2.1284628315180344e16,2.083176388294246e16,2.0378899450704584e16,1.99260350184667e16,1.9473170586228824e16,1.9020306153990944e16,1.8567441721753064e16,1.8114577289515184e16,1.7661712857277306e16,1.7208848425039424e16,1.6755983992801546e16,1.6303119560563666e16,1.5850255128325786e16,1.5397390696087908e16,1.4944526263850028e16,1.4491661831612148e16,1.4038797399374268e16,1.3585932967136388e16,1.313306853489851e16,1.268020410266063e16,1.222733967042275e16,1.1774475238184872e16,1.1321610805946992e16,1.0868746373709112e16,1.041588194147123e16,9.96301750923335e15,9.510153076995472e15,9.057288644757592e15,8.604424212519712e15,8.151559780281833e15,7.698695348043954e15,7.245830915806074e15,6.792966483568194e15,6.340102051330315e15,5.887237619092436e15,5.434373186854556e15,4.981508754616675e15,4.528644322378796e15,4.0757798901409165e15,3.622915457903037e15,3.1700510256651575e15,2.717186593427278e15,2.264322161189398e15,1.8114577289515185e15,1.358593296713639e15,9.057288644757592e14,4.528644322378796e14,0.0]}
},{}],30:[function(require,module,exports){
module.exports={"expected":[6.420676210313675e-11,0.872101131199922,-0.8095983013279411,-0.2548357065241723,0.8837532652862997,-0.8314010833251086,-0.3377457489312408,0.9210102827059491,-0.6010236488212364,-0.1803713303686036,0.9979980384803384,-0.9656512638715452,-0.8511682798822809,0.7154307062423485,-0.4538623885513716,0.14444283110261608,0.9250606976775017,-0.5925751860667804,-0.6379961685151007,0.8510797756590359,-0.7155484877347008,-0.5044425985476721,-0.14460965188661998,-0.9249966504812456,-0.9790167962824384,0.43484670551177834,0.7683615617895581,-0.20104291018423115,0.9991085039302812,-0.28296083989951776,-0.8620321932998887,0.7005599421079199,0.5226560016201628,-0.9537531276256253,-0.06062401149197215,-0.5754821187113868,-0.6540693837303029,0.8923366278013464,-0.9789480298997485,0.4351503143772189,0.7681457164571306,-0.8072674627284683,-0.3770766005961805,0.9899368004825175,-0.10248404961812378,-0.940289876105621,0.5579939611148452,0.6699777241809122,-0.8825550370145306,-0.5757578379879984,0.99999997456668,0.8924887709279896,-0.8827670457043919,-0.9997723379808147,0.5583682247463044,-0.940136246716298,-0.10293273679843956,-0.5403502229901095,-0.3766587868198501,0.08146074541833026,0.5220809586611415,0.396545766570962,-0.05995087483395125,-0.7814917617588655,-0.41604531516037485,0.9830389330122974,-0.06017376233181375,-0.9538886189966753,0.5222713893066875,0.7008817533844839,0.9471945950451103,-0.28339344909590275,-0.6853386863791969,0.8725405684109716,0.26264895293200213,0.6375188806589102,0.2216786779729173,0.8923880290662991,-0.6539832283784597,-0.5755752566978446,0.9328123861739306,0.6701434742368061,-0.9927311178495242,0.4733680662769646,0.8196778229397198,0.989905177908368,-0.4542642805028312,-0.8071356596579117,-0.9866189325741165,0.43494926207442697,0.4856076398109074,-0.9943131525590182,-0.4154319924652796,-0.5043442566108404,0.9963783005407689,0.8510199732043524,0.5228463535936478,-0.9979801331307656,-0.8621453474476589,0.9107364387334729,0.9991179054776865,-0.60976305459247,-0.29674132296875727,-0.9997910885179819,0.7107618205907688,0.3172636993356654,-0.9579822463854177,-0.5750236660754464,-0.3376385482473215,0.12301849462400076,0.7404295050767173,0.3578563954095742,-0.9694580410050561,0.7588472497170117,-0.37790783953400386,-0.3637021114515288,-0.7446277770353766,-0.11679586451063086,-0.9791308553050291,0.7300620528245374,0.9597612123804801,-0.8892337396378035,-0.7151568501386795,-0.15950733420583213,0.8988908685263286,0.6999190998893029,-0.9993614843709795,-0.9081300136283045,0.8653040733218573,-0.20192215508050554,0.916946878746062,-0.854294698638729,0.06710190277021978,-0.925337364041905,0.8428880773648646,-0.04557230776943546,-0.7903940445646417,-0.4292968272494215,0.02402152166923049,0.8034194962285797,0.8189044935898433,-0.0024595655739376417,-0.8160713582444532,0.9424794755539634,0.9919572643416622,0.8283437475030024,-0.9350527501482344,0.24872897798974164,0.658712045984076,0.9271912256998018,-0.22778620035527244,-0.6423353053907473,-0.9188985578134472,0.20673750225605958,0.6807608431431292,-0.9908953335834039,-0.1855926713257764,-0.6963972899118968,0.9877618825839201,0.9519885274440588,0.7117099123028985,-0.9841691228225526,0.42193919925390316,-0.7266915899546832,0.9801187249307226,0.12167990096013977,-0.5167249038242955,0.997499314359573,-0.6322790481175462,0.535065611684008,0.9706527604130285,-0.36244542155828885,-0.5531575143124576,0.9996189622733547,0.342264708491463,0.5709921989843275,0.9593815936583825,0.580871226449707,0.3308852103447893,0.999879537138163,-0.5631843209743078,-0.3511562737175539,0.9676757731911825,0.5452355350824439,-0.6228706351809007,0.998280554341634,-0.5270332149502238,0.1096764515855427,0.9776494774649015,-0.7349400455276209,-0.13108346524291098,-0.9819555267048419,-0.48990194219981104,-0.4305145570004881,0.9858049671353637,-0.7050188581875279,0.44987650617320374,-0.989196008768668,-0.868873524219612,0.1948991130878238,-0.9140642553918006,-0.673786489679669,-0.21600289276807189,0.9225968636303813,-0.8467220906982619,0.23700623121547845,0.9966040426352224,-0.6413010253913168,-0.031184292637842427,-0.7991324625956014,-0.8229959389310636,0.009624936064091576,0.811909124719137,-0.944850433957164,-0.2993161944964565,0.9524005521217893,-0.7977391943807897,-0.033497176683462436,-0.9587524639486215,-0.9298515187280139,0.23475743646717995,-0.8479510030536539,0.9217016961009482,-0.07655699199495411,0.8591836379147967,-0.91312328266437,0.19262887492394914,-0.8700167528309817,0.9041202673760677,-0.11947442801403559,-0.7066580987616017,0.9854138041141854,0.15014206572502084,0.7217505254056567,-0.9815152747779352,0.40884165984831716,-0.7365073384306217,-0.8746064498023622,0.1073760250604631,0.750921675926112,-0.9723510288697108,0.36911435694406075,0.5471739397811913,-0.9993955111840765,-0.3489886091904723,0.7786962760585784,-0.961378422315944,0.32870058191504264,0.5827533323644298,0.9552202304979928,-0.30825970903990735,0.34443812211426045,0.9995524096726935,-0.5512282162991677,0.6172489309668755,-0.9986749426809095,0.5331092089606468,0.38459473320663456,0.9973330923599703,0.2461153955845904,0.6505965813056565,-0.9955274826695771,-0.725099945987879,0.4240360820538273,-0.9845766187351367,0.7100824177092809,0.1666437215318864,-0.990528558868148,0.45824018303556374,0.4626888163571885,-0.9912042371061445,-0.43896819700824397,0.20900104907677458,-0.9198089930283266,-0.663077402081978,-0.23003884865898055,-0.9959884319800213,0.6467825395497854,0.25096968029615274,-0.9358706124202913,-0.6301869234729515,-0.27178381116246136,-0.9989203057987109,-0.8147317404777334,-0.004773644986220049,-0.9501917167774874,0.8020395030873592,0.026334882597596716,-0.8323742449192273,0.5786734011606559,0.333429511840701,-0.962745671972165,0.775542259755089,0.06941060043016659,-0.8554952512537564,0.9160210789781966,-0.1996551881064196,0.8664616893339305,0.7476026771236806,0.11235722969855062,-0.8770252231790205,0.8978744896408757,-0.13375716287874187,0.8871809407512804,0.7182727167175047,0.13589146404369012,0.7316415049324376,0.8780580497624486,-0.11449729657605114,-0.7461703939428511,0.9739993725376623,0.09304988792502916,-0.9151549330552291,0.8566086135950806,-0.07155921112449683,0.5591688275823041,0.9633258895667711,-0.3354594443799068,-0.5769153710230114,0.8335660724075442,-0.028488041161915646,-0.8007511407009108,0.9508608307392165,-0.29453066705402514,-0.6115955344714027,0.999018054645662,0.014636110338172309,-0.3779705317204718,0.936627378343245,-0.7445825772271808,-0.6451382637394514,0.7828759744855752,-0.5023446807257715,-0.8493777678293846,0.9832977178304948,-0.21110696148183428,-0.15957418141909516,0.9914869959919624,-0.46459727921535926,-0.45632461322620843,0.9029644168984932,-0.1687671831161576,-0.7085641225152768,0.9169738953773089,-0.4259858281890681,0.06703434069068977,0.9953216828876009,-0.6522308450411335,-0.24402711281385733,0.9765835692138197,-0.38658213651677137,-0.5312856164096399,0.9985617780832038,-0.6189421709771719,-0.28561191411981257,0.9479340944012334,-0.8062986315498022,-0.019171236362753006,0.9999447663616394,-0.5845023995927674,-0.3266655396157389,0.9544185912447569,-0.7800458706726913,-0.06226064501913498,0.8517629396948025,-0.9188718427312677,-0.36711163852038603,0.9718457702172013,-0.2643569870215539,-0.10523426246753152,0.9971325925387802,-0.9010060418134276,-0.406874989919338,0.7117574783442544,-0.9841571193902945,-0.14801216716080282,0.8937326404245519,-0.474926991550806,0.12161268929563639,0.9885311235426193,-0.9755977067836517,-0.19051480153480863,0.5351228164168828,-0.8602837592225749,-0.48405905288206386,0.7696253157773297,-0.6610558113195829,0.34220108287792034,0.9290568419630097,-0.9999821520598898,0.035649856898291137,0.7964384961977838,-0.95305497832176,-0.2743787357895691,0.944142813380513,-0.813164692215883,0.5451787698870884,0.8217704748810492,-0.9729044800623432,0.25997986547017654,0.6396468219304954,-0.9967790949684392,-0.050578055999050964,0.8455741398768479,-0.9234256494592331,0.21810550910048473,0.6721933044449007,-0.9923945258021273,0.4709305209225198,0.4499369803777379,-0.9892059333830459,0.17582552409717916,0.7034896541555506,-0.9861643194615548,-0.13642988726410635,0.4880230259290347,-0.994603829591799,0.6576456621253369,0.23707201590372146,-0.978100062770436,0.3931805889552375,0.90738725673574,-0.998151979803543,0.09036380250179092,0.2787376009668718,-0.9682167534857568,0.8105163610856859,0.012006605792112138,-0.9998437852334591,0.5903013870947251,0.7893081325114382,-0.9587717090920637,0.3125070966660537,0.055107492872092885,-0.9996760994927758,0.9216754275528035,0.3604370730302134,-0.9430698491829754,0.7570434838274229,0.6306088156199147,-0.8700501356078848,0.5185678269321609,-0.17135861410027203,-0.9796890786202229,0.7281696014443546,0.14092183567665417,-0.9937669596027492,0.4812205803672123,0.43945645468509015,-0.7365531408619437,0.6979414825649636,0.18347569545723572,-0.9092842836384573,0.8639147340890453,-0.08584566714893382,-0.993321805420558,0.666415344891445,0.2256883304977518,-0.9263822239820468,0.8413969507061098,-0.042809842213840106,-0.7920849590309178,0.9552001918598805,-0.3081952913342237,-0.9417572956220092,0.8173143526752121,0.00030559968220996434,-0.9995685210627031,0.9415515774653896,0.3087766818227204,-0.6341225378336216,0.9973281479771353,0.04342047322956477,-0.8417270964199961,0.5646465480618633,-0.2250928582207127,-0.9672277130226039,0.9932511017020608,0.08645459417557719,-0.4435262457810091,0.9090297475781656,0.38956907225678117,-0.6983790655354294,0.7361396004759875,-0.43890735430653294,-0.8851104305769468,0.993834908950369,-0.14031670934522547,-0.23010474667108416,0.9795663363575747,0.171960741009935,-0.5190903278111391,0.8697486742895582,-0.6301343455122694,-0.7574426783706325,0.9432729547170045,-0.3598668890320469,-0.5554589933918462,0.9996914677172258,-0.05449721200477067,-0.7848882990931058,0.9585978409559787,-0.7889327103468327,-0.5907946265037853,0.999832795540602,-0.5608972261315076,-0.3537440011116136,0.9683694413018202,-0.278150573048003,-0.6250315105832793,0.9981146526318084,-0.5246812399475954,-0.3937424896327902,0.9782270921830514,-0.7330620892119967,-0.1338242686441646,0.887212183677569,-0.48748946119741365,-0.43300870307882483,0.9862654542237456,-0.19436602174990628,-0.17642716892854893,0.9891161883675832,-0.8675013517642335,0.09298246694914812,0.9924695778253139,-0.6717406617614033,-0.7205238609785707,0.9236600414534635,-0.410456886478358,0.04996762948334946,0.9968279246722427,-0.9572963612088567,-0.2605699995690093,0.9727629845172915,-0.8214220486122932,-0.5456910485702855,0.8135202789185667,-0.6054243937706095,0.2737909419911563,0.9532398698200356,-0.9978259937616862,-0.03626066106155046,0.9999783136238403,-0.9288305631825319,-0.342775318202984,0.6615142931595158,-0.769234923822364,0.4835241414542205,0.8605951974375309,-0.9119924797836155,0.1899147611436329,0.975731722994176,-0.7409704953574614,-0.12221932936948501,0.47546477366065387,-0.8934582894639418,0.14740767220948922,0.7236616836146506,-0.9809823146902851,0.40631659320036817,0.9012710157894881,-0.8732624617714166,0.1046264371847258,0.9909683590230691,-0.9717015791842497,0.3665430464536,0.5494863426731484,-0.9994878216335925,0.6018081398820204,0.7804281660490763,-0.9606136908673092,0.3260878096582549,0.9352452820937117,-0.9999381557646347,0.018560145775319743,0.3470327664164074,-0.9665566510475323,0.2850261207232308,0.619422113673247,-0.8030957794415106,0.5307677135149524,0.8313916437461161,-0.976714879254152,0.2434343454260143,0.1267198304837174,-0.9952624450400379,-0.06764415271602701,0.42653871889669137,-0.9167298878338801,0.7081326995385874,0.6847520674867559,-0.9032268899628584,0.4557806746472472,0.4651384229488229,-0.9915663924663366,0.1589707842223879,0.7155366208319505,-0.9831862932053409,0.8490550271067803,0.5028730710758652,-0.7832561029132697,0.6446711466999248,0.2536453858132219,-0.9368413231559544,0.37740460200392,0.5396724850699279,-0.9990449471882543,0.6111118572970902,0.2951146998139077,-0.9510498918209692,0.8003848844617388,0.029098987111330958,-0.8339035553090368,0.5764160332478686,0.33603516489767005,-0.963489715305228,0.29622227403996887,0.072168830195348,-0.8569238121282987,0.9149083862743539,-0.19694493380551842,-0.6880505789557083,0.7457633455469073,0.1151044550099487,-0.8783503777269296,0.5038748815450707,-0.15449106651396963,-0.9829739178140326,0.9823479250659969,-0.41285347054666066,-0.898143403370422,0.8767314121084415,0.4547483860734275,-0.7480084632296893,0.6855965579910811,-0.37320038393913035,-0.9162660783519763,0.9992328574386469,-0.06880086223494657,-0.9951490526213481,0.9625802186365894,0.24230964932021928,-0.5791717624232986,0.8320353542405188,-0.5727036766514153,-0.8024044049129748,0.620331902050905,-0.2918870339007953,-0.947368728622497,0.998891724929068,0.017400922413486855,-0.3805291244828346,0.6913349349904483,0.3249915538698936,-0.647248564871528,0.7811525577176168,-0.49995181269642386,-0.8508339338428839,0.983797230638214,-0.20840330878606744,-0.16230330259265005,0.99112316518907,0.10347331958003127,-0.4587833487756248,0.9017727313545519,-0.682287553465498,-0.7105126418805533,0.9180735442638436,-0.423482473048276,0.06427513996655347,0.4764844279001362,-0.12336996585796045,-0.24670774878505308,0.9759849426496855,-0.8295107054563053,-0.5336262124048747,0.8051030062296292,0.4825089483991509,0.28754578869770314,0.9488110827274606,-0.34386425832846074,-0.928400371741555,0.999970005917603,-0.9340447183298621,-0.997748913758925,0.6506994233768465,-0.7783126634911411,0.496018458215862,0.8141939717756153,-0.5466622521681206,0.20396499444621002,0.5953800239655042,-0.2616891831480604,-0.10798367068021876,0.4628088728148662,0.048809633590411086,0.6789645120698466,0.7136970785276622,-0.7213273469632562,-0.6708813346737784,0.8949696763092853,-0.9960005413235903,-0.8669240374933069,0.98894493188409,-0.9749868416719063,0.8269689909438173,0.9864562888177644,-0.8588707466903902,0.6131912963231997,0.8877464949163432,-0.6589784797669928,0.33960155236687933,0.02647026447714096,-0.39480797931463296,0.032886314088566994,0.33355718794855177,-0.09212702628655786,-0.2770367287566549,0.6081081979106139,-0.8555653700348196,-0.5599369899877996,0.8233429753152849,-0.973540087070748,-0.7882197459300518,0.9582670389915509,-0.9965535284536892,0.8978148585437392,0.9997195942549991,-0.9223609116832481,0.7181784837597639,0.6742379949636645,-0.7581991503966978,-0.6292336557405864,-0.11436275707638117,-0.5200809496405427,0.17310276522480525,0.1976768842557167,-0.9857021659908883,-0.13916867486512763,0.4904346805509942,-0.7742663855742826,-0.43786529140989716,0.7353543821359475,-0.699208418863432,0.39063662439798374,0.9085459739984202,-0.9983161944587932,0.9508188906530978,0.281392108623921,-0.9675214494789449,-0.2239630499192619,-0.5390437668264217,-0.8423525002066019,0.588067136991632,0.7910029182633412,-0.9595538408885514,0.30987922978618093,0.057868244541690886,-0.4176588904559281,0.0014650100234304083,0.36301499469573306,-0.9421465646897691,0.755233929471494,0.632752451041246,-0.8714099336689805,0.5162015280871347,-0.16863369508008563,-0.9802398110879603,0.2268176761028645,0.14365886680528125,-0.993454906801509,0.8835340912144551,0.4419386217894561,-0.7384206258513712,0.695958528676919,-0.3864572328177421,-0.7373368475826977,0.44049761600080783,-0.08309038248811096,-0.9936370434957604,0.966364906405777,0.2283812894306411,-0.5674299509426934,-0.17021623749135253,-0.5843925081543133,-0.7937698170985568,0.6315082113241908,0.7562854572839577,-0.9426836014653097,0.9994636498393364,0.9212250009840481,-0.3672376081643255,0.9406164801343285,-0.7522531709324424,-0.9591005430065999,0.7900194769709604,-0.5123114865924102,-0.8250023550164277,0.5623622085753746,-0.22239779499289875,-0.14814610321614632,0.2798508736502528,-0.881400601857026,-0.44600286005678075,-0.02995774087060861,0.39211429155018895,-0.7003555012494327,0.9122984977210045,0.656771804328458,-0.8863939017729171,0.9941376834129628,-0.9651884820691143,-0.9859714603020564,0.9790064578754758,-0.8374290015400284,-0.9893751592529635,0.8683807546610651,-0.6279848248066766,0.3012415806881888,0.6730512520753956,0.7192949376661052,-0.007606472051268737,0.41207082630152125,-0.05173594868865776,-0.31571257250873996,0.6397509162007631,0.2588601475819697,-0.5930233631240418,0.8456464320273981,0.5442064465853192,-0.8124893296769615,0.9690557051166211,-0.9923778456579572,-0.9527032713515693,0.997941119189865,-0.9059630152537186,-0.3962827807487339,0.9294851264084851,0.34111143967059276,0.43233557921200866,0.7703650772862867,-0.4850732527785632,0.133084318811748,0.9867184001807313,-0.19165284869753396,-0.1791482834475809,0.5253166975401786,0.12046180253011972,-0.4739063617985903,0.8942521513370364,-0.6696896976147797,-0.7224385545860503,0.9247161568353865,-0.9998461697716593,0.047205728375091766,0.9970441848156572,-0.10638716466444137,-0.2632386448927147,0.9721182949245346,-0.8198418775791636,-0.54800613248097,0.815125212821736,-0.6032212771825055,0.2711303901092362,0.09824066692437775,-0.3277611253970281,-0.039023868185266035,0.9999562799150562,-0.9278025056613175,-0.34537165117073704,0.6635854508130434,-0.7674651368821823,0.48110185887533957,0.8620001767222218,-0.5322675036050426,0.1871991952469907,0.9763334790909086,-0.9880156001950983,-0.12496329621788264,0.477895567004104,-0.8922129107803131,0.6663143654628904,0.9174358226865601,-0.7093817802289212,0.40378841979570923,0.9024655934961985,-0.9973824125419108,0.10187604931978993,0.26761172652991194,-0.16071862801066739,0.8172363120179206,0.551794544111336,-0.8499891169130952,-0.5013418384686733,0.7821540887704985,-0.9554208981027787,-0.743808135001467,0.04355577419736989,-0.9999035805407499,0.9261007970044339,0.9989660155877614,-0.9468534332584396,0.7645494072285841,0.9642700778967036,-0.8014450861723879,0.5284221597408931,-0.18274169050124617,-0.5778619943999187,0.9873053235360755,0.12946221900494043,-0.29791295235137427,-0.07040272474651496,0.4290380943614843,-0.7286811353377703,-0.3746896443254663,0.686764635226954,-0.9044101440121073,-0.6424284986817838,0.8775026188664582,-0.9919209661633757,0.9699511269832947,0.9826470361155727,-0.9826776006393987,0.8475909326268769,-0.5959613200464438,-0.8775816659694398,-0.4531707332572699,-0.31917730789434623,-0.6868844544780205,0.3748424830694366,-0.011260027867958567,-0.3538706704224133,0.07056716808438711,0.29775558043933925,-0.6251372207348536,-0.24059142617134455,0.5777274440392242,-0.8330162470099832,0.9782551898083186,0.8013464817058944,-0.96422639165356,0.9945260926965289,0.07492650814698991,-0.9989734967693027,-0.01563055391128865,-0.7029588251671497,-0.9362784946142797,0.7439183117533981,0.6458978519714945,-0.8796688162780634,0.5014844709059026,-0.15175850971522062,-0.2188341017717732,0.21013471410401147,0.16055591552326567,-0.9913570085474207,0.8753980708365094,0.4572093579689452,-0.74984081313329,0.6835809479495063,-0.37063357396158725,-0.9173702177428984,0.42508581180813365,-0.06604198728383746,-0.9954172812759923,0.9618271876758228,0.2449914824169335,-0.5814237253907103,0.8304982742082312,-0.5704347093288005,-0.8040515338223935,0.618160703168343,-0.2892411689361743,-0.9482503588392756,0.9987577575387464,0.020165601438777422,-0.3830848076632836,0.934675638063687,-0.7408795428379802,-0.6493539170454385,0.779423168141777,-0.49755512196164214,-0.8522835942544036,0.9842892211869394,-0.20569806260780746,-0.165031182771171,0.9907517561120054,-0.873196465923222,-0.9970568369985296,0.9005741507230586,-0.6802633779416003,-0.712455728561183,0.919166173424402,-0.4209758798979201,0.06151544778519953,0.4740515211409372,-0.9605760480370983,-0.24938649839234744,0.9753788535604658,0.19149104866296543,-0.5359627282152396,0.8067400439884332,0.4849290862947413,0.2848963066509952,0.9496808163039506,-0.998521470618582,-0.9294243060373907,0.9999875995551432,-0.9330535522007308,-0.9979305324713007,0.952753357683634,-0.7765735052159605,0.49361553669317604,0.812585424195449,-0.9850799470275625,0.20125717923464273,0.5931560925548773,-0.2590193783604047,-0.11073225323380405,0.4652583056556266,0.05157131540395949,-0.4119206142695883,0.7156312216777498,0.35713162781792873,-0.67292931807472,0.8961998691236306,-0.9962437932130673,-0.8682989924065576,0.9893511786064825,-0.974368521666703,-0.19594090410174858,0.9859989632350665,0.13741507775148543,0.6110046535747746,0.886470205587872,-0.656896109567574,0.3369994252121885,0.029234358585967422,-0.3922659375433212,0.030122519825225968,0.3361627156295893,-0.08937326937840154,-0.27969260345997704,0.9679675232987341,-0.8569936102591552,-0.5622258851774846,0.8249091803474723,-0.9741682502477944,0.2546357474365618,0.9590538656564094,-0.3115621967482272,0.8965937221535026,0.9996502937213252,-0.921289121399442,-0.36136460147796967,0.6762775301590916,-0.7563933009587688,0.46604464646594784,-0.11161529772723552,-0.5177171876381796,0.17037868278311036,0.9798880253076839,-0.985232475695811,-0.14190639836189697,0.4928425852369184,-0.8843620009597101,0.6534694731777974,0.7372254749595286,-0.6972288803752522,0.38808967297537844,0.9096977443843342,-0.9984727758409069,0.08485473881090577,0.28404446471532846,-0.966818747660167,0.8072647770084225,0.980272407875305,-0.8408590582926565,0.5858283904403153,0.7926916558900506,-0.9603286357945857,0.3072489935239287,0.060628553742140365,-0.36316859736427054,0.9195157847335356,0.36559014069496326,-0.9412160764047153,0.7534186004853453,0.6348912483438395,-0.8727630688009614,0.5138312822889496,-0.16590748666174893,-0.9807830484972594,0.9844457187259055,0.9674797632285884,-0.993135257897256,0.8822356021340464,0.44441740976581784,-0.7402824647675827,0.6939702533871275,-0.3839054241429028,-0.7354660904204392,0.998713087469097,-0.08033446250594593,-0.9939446840753058,0.1393319220885583,0.23107250212644517,-0.5697046777603683,-0.1729403981836055,-0.582146423044116,-0.7954486058848846,0.9615836488549508,0.7580916519089134,-0.9436026994105001,0.9993692760141896,0.9222972114648879,-0.9997156769762837,0.9396741907106725,-0.7504283997452846,-0.9583141533553703,0.874968196511468,-0.5099348057620544,-0.8234365256813063,0.5600735691843428,-0.21970103127868218,-0.1508801888157673,0.277195125874847,0.09196287275926729,-0.44847606412878194,-0.03272154945760295,0.3946565126797837,-0.7023265819417872,0.9134274162614856,0.658854474418629,-0.8876705954701387,0.994432856551933,-0.1348389694400919,-0.9864292354479036,0.1933903354082967,-0.8359145101977423,-0.9889693634367251,0.8670061952650078,-0.6258305024363208,-0.7610418422141894,0.6710035749886226,-0.3547015889302175,-0.010371527192933135,0.4095497665229995,-0.04897428979183654,-0.9969065854916501,0.6418737266834865,0.26153007101518627,-0.5952475654000373,0.8471190874552866,-0.5563101878569527,-0.8140982480169026,0.6046325233482241,-0.9920332940467178,-0.9535399682651446,0.9977599553426658,0.037254546415645684,-0.3988200418279803,0.9284616155688983,-0.7292893756795774,0.429840542433627,0.7685990549888345,-0.48265333541794647,-0.8611012895313226,0.9871638015430293,-0.1889382102391614,-0.18186802817236622,0.9882873521748158,-0.8647371182654676,-0.47633948517443175,0.8930111459598012,-0.667633612921773,-0.7243477243215924,0.9257652017009359,-0.4054076330196611,0.04444346632485968,0.9972528214119089,-0.9556828635912038,-0.9911012349832925,0.9714661723716519,-0.8182554379138961,-0.5503170262557907,0.8167239141570831,-0.6010135482753828,0.2684677651242903,0.6473742203282484,-0.9974462675107791,-0.041786776926719206,0.9999266003928,-0.01756575057045851,-0.3479653433758122,0.665651534594161,0.2917293554829692,0.4786758977205569,0.8633985650261902,-0.9878780584738622,-0.8319438950527701,0.9769277699975946,-0.9875850086335296,-0.1277063075784525,0.9951652571529065,-0.8909607101049329,0.6642499154639875,0.9163321012398703,-0.9274706455644985,0.40125715896512776,0.9036532708176305,-0.45489520158050467,0.09912488249552748,0.2702750133596657,-0.15798879575729166,-0.2126762565260508,0.5540985264469047,-0.8193327776347993,-0.503732478220616,0.783874031026185,-0.9562336524430121,-0.7456535083037092,0.9371887109038664,-0.99986135990634,0.9250540258679165,0.9990879095939278,-0.6690295576515239,0.7627641558729844,0.9635338409306324,-0.7997882649357126,0.5260725655729193,-0.18002239035837286,-0.575603039286498,0.23806668161787306,0.13220361763890728,-0.2952722068910351,-0.07316075846736661,0.431534189337612,-0.7305720808914271,-0.3772519346800983,0.688771951863273,-0.9055864828077571,0.4508512218038682,0.8788253590125321,-0.5030155569315848,0.969274654781922,0.9831561767416394,-0.982161394375319,0.8461203573414605,0.507645558903907,-0.8762526160310766,0.6404335894293772,-0.3165555553050558,-0.6848721993663761,0.37227749803394006,0.9166640152114773,-0.9992713125368595,0.06780862755554311,0.3003941843816057,-0.627293082565916,0.7970573003254694,0.5799822446346019,-0.8314832392984176,0.9788249584148165,0.8029975406655303,-0.964955695384425,0.2909356423862891,0.0776836131994792,-0.9988444198697343,0.9126620228538382,-0.7009894684467517,-0.9353036275335086,0.7420675898505539,0.6480063749506801,-0.7805312292541843,0.9928207003734674,-0.1490247925484821,-0.9839750530089304,0.20743048589368132,0.971662625663842,-0.511548195669945,0.8740580361415766,0.4596668339741535,-0.9013424272081553,0.9403144708861044,-0.3680639300649719,-0.9184673427855828,0.4225812898357057,0.8933842340704893,-0.3047173732400767,0.9610668024422572,0.24767144227257257,-0.9757678075780081,0.8394168041362898,-0.5681613803781093,-0.8056925148349758,0.6159847777377035,0.7691295776712299,-0.08220486972746309,-0.729856812637187,0.022930126274899668,-0.9999772143506084,0.036425405509114085,-0.7390195212423489,-0.6514543041633492,0.7776878189812241,0.6052931782945392,0.14453814593746891,-0.556999459463683,-0.20299124363176632,0.8412505433173816,0.26072915451568884,0.9572486877087477,-0.46369027732559726,0.8993686841685377,0.41030655442409175,0.36384278982601753,0.9202517745045801,-0.4184660679037821,0.2993954604605749,0.4716149897137605,-0.9598036120110519,-0.2520633411536251,0.9747653065804074,-0.8418733027490293,-0.9862926693135486,-0.13566104983335933,-0.6124053579493087,-0.7720204393360397,0.08672443503439294,0.7329499523095133,-0.027464460236290192,0.9999975471397364,0.7427689536849358,-0.9981045208593684,0.6548888308459904,-0.7748284091450105,-0.6088974306359066,-0.14004852570754078,0.5607607388188023,0.19854782518094477,-0.5106483524988021,-0.25634759307230864,0.8696149752476838,0.3132441869441605,-0.8973764381952245,0.943362849980492,0.9219762288407687,0.3597130753605772,0.41434223676626286,0.8974232094613519,-0.46761048235072533,-0.8696673081774102,0.2564500542734092,-0.9737427514958078,-0.5690225898115077,0.985534098558602,-0.8110326809382161,0.6088133389944849,0.774895418033995,-0.0912422161381373,-0.7360280128217482,0.698497046219363,0.69456740448695,0.027358495240647374,-0.7328778349549138,-0.08661882910902154,0.7719530585728872,0.6124891559802986,0.9845911497564458,-0.5645104815049757,-0.1941003219567601,-0.9747889647904538,0.25196075772668886,0.959833359253699,-0.30893347534959714,-0.9414960307105011,0.3648177462843611,-0.9202102868028816,0.9237638039205386,0.9418127219064334,-0.8994150234722976,0.4635963547219387,0.8718973882974594,-0.5153494670937006,-0.8413078496210015,0.20309504035774587,-0.9847552521676439,-0.144643036821376,0.9933408121645912,-0.7777544546174501,-0.9984265943664142,0.7390909308481939,-0.036531339785388244,-0.6978234125619667,-0.02282414918949171,0.6540972951179332,0.08209922321559701,0.993748568661643,-0.1410850419982972,0.8056297200437921,-0.9870479602439879,-0.8393591870461039,-0.5184268642520644,-0.24756873873027474,0.46677857601136813,0.30461640799047207,0.94301500701039,-0.42267736229033953,0.9184254130518691,0.4152948252920739,-0.9402783914424647,-0.3123504956763077,0.9588185436657405,-0.8741095306575567,0.26520756234199405,0.8437510303094881,-0.5615395399189265,0.9839561461640731,0.14912961283242082,-0.9928080153340729,-0.09019962236473421,-0.6479256343317675,-0.7421386433746826,-0.9999991884869641,0.7010650641438553,0.018289333571487047,-0.657521464639642,-0.07757792827461017,0.7661547721688321,0.13659319734020553,0.9861369782004509,-0.19512721582879644,0.8368850159087402,0.5223001614960003,-0.8678871261484259,0.9623390436514488,-0.47968782978848423,0.41761132137581464,0.35635651644271665,-0.916621644308379,-0.41116442977285733,0.9387247163993057,0.3166561069476282,0.45553956919788197,-0.25982067722525004,0.9729425821613171,-0.8461768522999856,0.5577806473880433,0.8130687309653921,-0.15361312076317019,-0.5979624274132567,0.6521678697252996,-0.9978768379607741,-0.035485107850795124,-0.6886950968177519,-0.7042922925413185,0.7304996929177937,-0.999056745504862,0.07305503730377666,-0.6152432988345283,-0.1320985425165854,0.8002224792860203,0.19067663289874764,-0.8343936273295945,-0.5261627133299309,0.8656250066114705,0.4747819099919964,-0.8938065814959598,0.9459947261182613,-0.352114860849278,-0.9250942850733767,0.37658161028031867,0.39776251959223596,-0.460502241013793,0.9562026296152716,0.2641979947508355,-0.9718845994138431,0.8485852656854601,-0.5540102794983703,0.982297221496381,0.6024277458896269,0.77994270764804,-0.09923036469333708,0.9975711624754166,0.04001764865202471,0.6853993530432305,0.7075050313597909,0.9987987571895084,-0.6643291514614285,0.766827155869438,0.6188126807160312,0.1276011699970787,0.9876016549050348,-0.5793925462660912,-0.9765480896565432,0.24418697907233558,-0.863345078357818,-0.47876896638818445,0.8917633124873906,-0.9474554076237479,0.34786596110998663,-0.37140405823640293,-0.4028783469225166,-0.9028935646161262,0.32524769711139717,-0.9548651507455533,-0.268569876865932,-0.49971721675782993,0.5586492654745331,-0.9833277085032308,0.8183163707007014,-0.5988012239298626,-0.7827733957516606,0.10374272005939844,-0.9972449637125637,-0.04454936616030147,0.9998892752840054,-0.014800945834713189,0.7242746368317895,0.07409911054961531,-0.7639079721232226,0.995610425465692,0.8008498765123759,0.5748333781745517,0.18176379017014505,0.9775145911701978,-0.23978601062965724,0.8610473882929949,0.48274617295237765,-0.8897016970123127,-0.3530945310897627,0.9152213733825348,-0.9285009835521533,0.398722830063018,0.9048340386726277,-0.32953349924694275,-0.8779791465769613,0.5045450659734241,-0.9697086716318933,-0.21537734822986818,-0.5464354281519771,0.1570596368070567,0.5951623826848726,0.7855879796652031,0.9976435380365961,-0.7474931802290473,0.04908016714348375,-0.9998114941842301,0.01026552800779322,-0.7211397256733846,-0.06957505524314754,0.7609730723099409,0.1286394528810338,-0.7981253283997851,0.9889850593381978,0.8324655976389399,-0.9784609820351439,0.23538010901025852,0.9644895521453579,-0.2926292037357719,0.8876217774848496,0.43402698473956347,-0.9133842669877317,-0.3798113405106941,0.9359286847705425,-0.9067558973553477,-0.9551756014453073,0.8801413795300534,-0.2772969752030977,0.9685907713633163,0.21980444488310147,0.5426311005345413,-0.1615374908144271,0.991226040507495,0.10270140144343838,0.6383074574096794,-0.9965310236203344,-0.682854707620697,0.9997131437160627,-0.005729898985634392,0.6669328223272323,0.06504956855191324,-0.7580225168100105,-0.6294441480213788,0.7953843602580204,0.5822326106000375,-0.8299438739431422,-0.5329697281244897,0.8615792964143973,-0.9656776209214587,0.4906707094929004,0.9485656853206416,-0.4381087878462167,0.9115283693131919,0.38400330392083043,-0.9343216089829987,-0.32854488430624407,-0.4443224460415974,-0.8822855051175293,0.49669216466122273,0.8528034057823307,-0.2242270194452933,-0.8203166756229343,0.16601202147116884,0.5878480420422366,-0.107212123350636,-0.6348093452855417,0.048034491219705405,0.6795340630351665,0.7131532740564092,-0.7218646193895107,0.9995233447560289,-0.6777799613362052,-0.9959309032697063,0.11963809894533352,-0.7926270284776953,-0.17833194060975086,0.8274050756073877,0.5368021098689838,0.22655386891572799,0.9668458225737586,0.8881034699734451,-0.9499918612001175,0.3403313814742734,0.929790850776783,-0.3881873671363121,-0.3862074041578932,0.33282547949299973,-0.952450794634715,-0.2762909679037901,-0.49275034570667153,-0.8551633539840612,0.5435101779403367,-0.9798668667364462,-0.17048313672165952,-0.7877419305198982,0.11172063955638478,0.6312981730722191,-0.05256452379738236,-0.6761994382278054,-0.7163255444816425,0.7187182906706507,0.6736646660801707,-0.758704926291399,0.9963294219545711,-0.11513368365141614,-0.989495445218591,0.5895839296117253,0.16389396598005823,-0.2319878416090077,0.8569389782903094,0.48975822009119635,-0.8860095002801361,0.9513984926627946,-0.3360628779776396,0.9077603532380762,0.39135089812368984,0.9082214773389498,-0.3370992273791014,0.9510589846063962,0.2806473292966674,0.48879838927776137,-0.9651176022616962,0.9809661865522598,-0.8254709611113741,0.58869464069542,-0.9893357442478998,-0.11622685730586915,0.9962346083659733,-0.7594214108735321,-0.9996234991512328,0.002241061399709695,-0.7155571755831833,0.9997622717479138,0.755742369907802,-0.9967074429085744,0.11062689968383665,-0.5850655878932371,-0.16939858293680282,-0.9800860027442433,0.5444336634541489,-0.8545923502453981,-0.49370772422331677,-0.27523307890618254,0.8791199202951566,-0.9100880726685946,0.9330916808702937,-0.38717287549049584,-0.9101103053076435,0.3413660400396802,-0.9496476082070856,0.8886087984380888,0.9665641965752672,0.22762567770800113,0.5358732315132823,0.8280226563521881,-0.5850220764986279,0.9886649200949157,0.12073068389156028,0.7557775034770415,-0.061621251508780936,0.9994887628207325,0.0022947126856971258,0.7123813391615087,0.680341072241124,0.04693517041987648,-0.6356593308548381,0.7904950227862537,-0.9907661340209644,0.16492663051666592,0.9809766031004828,-0.5482326782889861,0.8522281404613495,0.2805958336680972,-0.8817669200725496,-0.44530813415756704,-0.3275052172302349,-0.9347133177078532,0.3829868874542697,-0.9277014220998825,0.9513819686662723,-0.8860343754042855,0.28934264109659796,-0.9653911721350842,-0.23204002901769966,-0.5320381819852695,-0.8305573164787285,0.581337476498408,0.7960509351648826,-0.6285885797293526,0.9954071388077181,0.6736250147148521,-0.999333463761472,0.7257536733667265,0.9997388973720265,-0.05251094646928263,0.7497706741875299,0.6391542632156905,-0.7877088798193688,0.9913709099389775,-0.16045128502029363,-0.9818470215831887,-0.8551355420762855,0.968863850811672,-0.5015761799301712,0.8796183968419209,0.44936477254779456,0.3232162360383285,-0.3955701453544379,0.9297711009788224,-0.9138317509997719,0.4330352256199597,-0.9467662728438146,-0.4857517442027489,0.9641982864642817,0.2364496065106674,0.8274352053562543,-0.1783847317653711,-0.5776409164989443,-0.7987879243150439,0.625054478878121,-0.9949626815325289,-0.6702658244963114,0.9991576051684573,0.7131156629452844,-0.9998322570531646,0.6869614913915173,0.9969842602263399,-0.6426360460982903,0.7849065311234749,0.5960464399682803,-0.8202859906797215,0.9826972402850268,-0.2143024848833012,-0.9699769124912136,0.27187729222180673,0.9538391235213892,-0.4534121660457571,-0.9343407306744859,0.3997318827178137,0.37459135981227937,0.9156642921609868,-0.4289423392314884,-0.8902036113730772,0.4817820519677553,0.861606529871465,-0.532924331046895,0.9772819260707569,-0.8355753231557782,-0.9881350895471853,-0.1241932891308922,-0.6215075186269767,0.065103106250337,0.6668928447336968,-0.9989611906596706,-0.01590137842815978,0.9999050469387512,-0.043449869723140355,-0.9973259980500843,0.10264803356803137,0.9912331306011289,-0.5996822989277284,-0.15149078315630088,0.5511471654953447,0.20986989581830665,0.9710700185965687,-0.2675095865294017,-0.9551914830280501,0.3242067768423923,-0.9024199255797042,-0.40388539629860504,0.9263933043058074,0.34889757614719336,0.42484062810650836,-0.29268050620072716,-0.4778024479118142,0.9617530300050474,0.5290808551590334,-0.9763105478860562,-0.5784951837274797,0.987428289675321,0.12869265835318922,-0.9950670849034828,0.7675330912780071,-0.07971874913537659,-0.7281494338280357,0.7067268264945433,-0.9999572655312617,-0.7474575401496047,0.9976472176401614,-0.09813517432265005,0.7792534474905219,0.6033058204753777,0.9825027938411662,-0.5549261727522734,0.848002489869383,0.5045913871011304,0.26313637729631345,-0.8730644261820528,-0.3199126730107552,-0.937535171636671,0.37556183969186735,-0.9246758001212297,-0.3531447261912569,0.9456373707640311,-0.8942995902050828,0.4738130139083011,-0.23983809646932552,-0.5252264943602838,0.9753190838237261,0.574789475970517,-0.9867011751977843,-0.13318937994969435,0.9946068818093405,0.07415261437281956,-0.9990083499589242,0.7312508387143012,-0.7035105658363878,-0.6894926434758141,-0.03438521737585585,0.7376426775992687,-0.7827400069766334,0.9923909033061125,-0.15252552811544604,-0.9833374631856703,0.5586937633762227,-0.8455898478891596,0.9731962745407671,0.8757729532132106,0.456519030805939,0.31561198753681585,0.9391034762353527,-0.3713542438924908,0.92293927235342,0.35738461090179413,0.891787588588541,-0.301342659672319,0.9620392707178324,-0.8684333173685771,0.5213613279473615,0.8374869333631859,-0.19620650469904652,-0.8035898821374434,0.6187705345618466,-0.9941262164225799,-0.0786751266311048,0.9987961268088845,-0.7343371993967583,0.7002798316818977,0.039964040146723584,-0.7414005461298416,-0.648763544057857,-0.08910349184017474,-0.9929391704543215,0.14804126726715527,-0.8097745381418398,0.8485568797146431,-0.9718972306556037,0.51240252062981,-0.873574426496753,-0.4605498644957376,-0.31130480889963685,-0.9406524604266644,0.3671390081306902,0.918860232810354,-0.4216796886291549,0.9426482236381946,0.4747346905036804,-0.9607915148937786,0.8706732422710852,-0.5174854354392878,0.19072929970037247,0.567342661081473,0.806281226493961,-0.6152010025308777,0.9936250986320485,0.08319602028661105,0.6532644223308001,-0.7042542038393126,0.9999834336616003,-0.6960346449234769,0.7383491383638173,0.6522085405673761,0.0845848544141114,0.993467009620149,0.8130374956687558,-0.9849460937867551,0.2020172920296399,-0.8407124243371843,-0.5162923148403378,0.8713579275182229,-0.9604041349992015,0.9387432069676402,-0.4112133357371995,-0.36291621912755045,-0.9206405163248144,0.4175625717085492,-0.9411245445997574,-0.3099800148841004,0.9595239924689878,0.2530256603096289,-0.9745428073051161,0.8424096243334801,0.9861280742233125,-0.8089559830280021,0.14666273414660672,0.7726521958793617,-0.6574810407891241,0.9983100398607073,0.02845862882911821,-0.9999992553985766,0.6992841996829997,-0.7352825403589158,-0.6556401190297759,-0.9928144369116629,0.6096860610736233,0.1390637008205561,0.9857200219485819,-0.19757297008515953,0.8382477431098699,0.25538614241590796,0.9588337803291912,-0.4685830241251728,0.8969371302116951,-0.9436923405147819,-0.9215906340305257,0.9224018592749313,-0.413436864170198,0.30466750919822505,0.4667311274033636,-0.9582367295205113,-0.2574112242827258,0.9735158577698458,-0.8448449983973114,-0.9853650562906314,0.8116140967111413,0.9937425775161061,-0.7755236840101263,0.09223257978666041,0.73670091546945,-0.032992261394079986,0.999994503904303,-0.026364296643971486,-0.9984296013995688,0.6590582088463467,-0.7713204570341514,-0.613275029743729,0.8077225519998202,0.5653311357030789,0.19312458342325028,-0.5153954445557393,-0.2509981627252431,0.8668711955460754,0.4725851847966356,-0.8949223796673725,-0.4194653806768312,0.9198205377231295,0.3648676994707958,-0.941477947534175,0.8998492953440249,-0.3185918610459731,-0.8723839804933872,0.5144968963451488,-0.9724688798527952,-0.5644661954176219,0.9845817661996871,-0.8142555128573501,0.6044167613943645,0.7783792171009197,0.9983703313897724,-0.7397605047772491,0.6945288051703133,0.6985354388671514,0.021829839645938546,-0.7291040263032028,-0.08110798273508371,-0.9938591108665429,0.6168513813554334,-0.8050401265303578,-0.5690667077329349,0.8388181532426979,-0.9760080290453009,0.2466050191874882,0.9613703234611933,-0.3036689662169866,0.8928892176642733,0.35966301468597106,-0.918031517721012,0.925867578926378,0.9399393726793528,-0.9018185426908487,-0.9585355959147425,0.8745921835543674,-0.5106022228242886,-0.8442844265066064,0.20850698489289507,0.5523095837178842,-0.15011297493795128,0.9926884585459921,-0.7812187364041558,-0.9981012176297344,0.7428048748097814,-0.6912583389675226,0.9999232820362774,-0.01729493353723202,0.6582704745670516,0.076586329870483,0.9943507827491425,-0.13560789420508015,0.8023411387718747,-0.9879200680652382,-0.836340202477198,-0.5231480236050072,0.8673926391699641,-0.9626089402087699,0.2993442696443066,0.9448407970388542,-0.42768290673519044,0.9162236108301225,0.4102576265431378,-0.9383814602200568,0.9037692367024337,0.9572331667860815,-0.8767823934147084,0.5066970445579997,0.84670643558135,-0.5569549004647614,-0.8136473280113172,0.1545957978000571,-0.9921307592975397,-0.09570600714055158,-0.6437032711145656,0.9970914522507206,-0.9999768507313888,0.7049979905318557,-0.7298201354704769,-0.6616781412134263,-0.07206310137643408,-0.9948219976079128,0.6239659393560717,0.9870395600729381,-0.18970022849320875,0.833845045478497,0.5270082086687019,-0.8651266107293466,0.9638277529652702,-0.2950134145881584,0.42262991485573087,0.35118382399902787,0.9254714982593949,-0.3775027654924965,0.9368042422076043,0.3218969845049144,0.4506094374950444,-0.26515708327894916,0.9716499425687952,-0.849111025155823,0.553182026740326,0.8162758636148139,-0.15907544012469632,0.9915526486983479,0.6479655112205334,-0.9975013935213045,-0.041011389535544236,-0.6846748098538791,-0.7082075433826327,0.7267118030449936,-0.9992816141658166,0.994239114679906,-0.619593637834364,-0.1266146794960786,-0.9877572928708079,0.18524487481503754,-0.8313327335800755,-0.530857551462576,0.8628427838256534,0.4796418922005502,-0.891312832111646,0.9477730858702592,0.9166425716333826,-0.927180203312416,0.3816990366250503,0.9033206426438037,-0.45558617438776056,0.9545692555472203,0.26952776154752156,-0.9705675836967244,0.8514981457598114,-0.5493977722656572,-0.8188876057737002,-0.9922612951609793,0.783391928456783,-0.10473185962765519,0.997170695513242,0.045542914057470234,0.681361882387594,0.7114025261049979,0.9990544707562509,-0.6684525660768258,0.7632657814024523,-0.9957030178973547,-0.8002538746960718,0.9884547042943415,-0.5838911554493786,0.5261181921157869,0.23882035014382585,-0.8605412054446185,-0.48361692805272466,0.8892471994736546,-0.9492099971134227,0.34267573349511804,0.9288698332585008,0.9371699947170782,-0.9052570383214884,0.3304723415004427,0.8784548058391749,-0.2738928947549985,-0.49491928577917654,0.21634845768642735,-0.9823070274631487,0.8214825007559611,-0.5943628566216734,-0.7862029734615764,0.6410294155295078,-0.9968194824665897,-0.050073501613795875,-0.7074680318042733,-0.009271017993536775,0.7204503499867783,0.6718191849219374,-0.7603274435959962,0.9961128052025786,0.797525721363225,0.5793498749010964,0.1763228259327359,0.9786658064226196,-0.5385233936916384,-0.9647517586175699,0.4875820143345936,-0.8871632721337678,-0.347915044268192,0.9129789324605915,-0.9305403533364759,0.3936450455789377,0.9071748099229157,-0.33474986573597615,-0.8806130721949932,0.27825239309641825,0.850948723521842,-0.2207745705760606,-0.541795432715758,0.16251890632165952,0.5907090961587237,0.7889978437187439,-0.63754154985696,-0.7511553637270986,0.05460305899562626,-0.9996888290604861,0.004735355136096776,0.9994077531336993,-0.06405708547656268,0.7573734633855702,0.12315312734976151,-0.7947811603370678,0.989788506044703,0.829388652743592,-0.979587650686815,0.23000158509744015,0.9659354732184611,-0.28733650519275206,-0.9488800735334277,0.4390026006051844,0.33413944332681544,-0.38492142034360133,0.9339666557231812,-0.9090739179932974,-0.9535238035138462,0.8827532214809457,-0.28260616688274653,0.9672007918473281,0.22519614141601732,0.8208850667750842,-0.16699269596128014,0.9904798992791918,0.10820089520882828,0.6340405678849094,-0.9960555405817982,-0.6788040759713164,-0.7138501141399598,-0.0001995948570279728,-0.9995535544405388,0.05952997950879024,0.9960200403362897,-0.6337318240528474,0.7920202480821308,0.1773532374404599,-0.8268461174308436,0.9804893416527372,0.8587588097044462,-0.9670993153906923,0.49548201209499676,0.9503019664170105,-0.33939602535461755,-0.9301564758186209,0.3891037397754706,-0.9323361475620214,-0.33376317096467,-0.4393612319059749,0.949005996902141,0.4918846673188472,0.8556784683953905,-0.22961307924023036,-0.8234669667646023,0.17146305001899156,-0.9898453291694629,0.7945388303259311,-0.6305265416399211,0.0535576801968929,0.6754663948891321,0.7170191587360256,-0.7180264181130024,0.9996787916856442,-0.6818358368208931,-0.9964140651822553,0.11414568316726519,0.9896387330766708,-0.5903869490654414,0.824286571209047,0.5414598664535569,0.22116389263111902,0.9682432611902516,0.8855479185809301,-0.9517043085039234,0.44713508961430876,0.9318122734055597,-0.3932780540801606,0.930686458219413,0.33803540568874935,-0.9507511866737612,-0.28160177753258103,-0.48793049891269563,-0.8580169589422519,0.5388597122456141,-0.9787477454073229,0.8316925464324937,-0.7911365833067994,0.11721461674507244,-0.9961478891685043,-0.058086381772721844,-0.6721148172702569,-0.7201734519201443,0.00887184470465318,0.6777414667918448,-0.7550906913183874,0.9967875905559734,-0.10963839221444269,-0.9902797971978432,0.5940417821060099,-0.8217100667363777,-0.22660486074998354,0.8540754545105441,0.49457237486140954,0.2742767977038096,0.953087070943437,-0.3308490766722392,0.9054265676590245,0.38625569503567286,0.9105219660003027,-0.3423006859270785,0.9493355238346518,0.2859510871062154,0.4839662921920816,0.860337797294657,0.9798773178558481,-0.8285798898072676,0.584215183885541,-0.9885151094280673,-0.12171790663382956,0.9957399051256168,-0.7630078102554304,0.7162890130620932,-0.0032892662746166344,-0.7116830138725948,-0.6810696425074964,0.7521091858221557,-0.9971406087728146,0.10512884564394379,0.9909004880485758,-0.16394561123530488,-0.9811691873760439,0.5490641811648455,0.9679809924601795,-0.49850948382467053,-0.2699121568134416,0.4461984180752015,-0.9077823136788835,0.9350663236977332,-0.3820679719362435,-0.912387959304558,0.3465589239289955,-0.9479003300817342,-0.29029451373762816,-0.8574787730350529,0.23300732638782362,0.5311958069001208,0.8311108076709883,-0.5805279549259021,0.9878194871633393,0.6278147638080402,0.7593873487576063,-0.06714010670250767,0.9992966630235034,-0.7264375247811542,-0.9997611288814856,0.6843838064094623,-0.7491122069981976,-0.11067893159202345,0.7870957955158873,-0.9915007928592429,0.15946953404631606,0.9820351781823976,-0.5528494335249812,0.8493218152584812,0.502436336829404,0.9527696526654321,-0.45025303648009063,-0.32227490157136995,0.39648338675303796,0.3778723884582214,-0.9256226444664503,-0.43213854034069016,-0.8885847844991109,0.2946319680684322,-0.9639340705722385,-0.23741584499836815,0.9780263354074732,-0.833624626887137,0.5768287826215068,-0.12067871327100813,-0.624277837050689,0.9948624890470946,0.0716649437919492,-0.9991162968219097,0.7295471755857298,0.9998499783847106,-0.046987466063459375,-0.9970609487994804,0.6433977298531504,0.09610335679846743,-0.5968447249604346,-0.1549901760512831,-0.9828809653368914,-0.8522555290415161,0.9702183061467385,-0.5063528530874949,0.8769742888322736,0.454298391718242,-0.9039400258931622,-0.4006433282150331,-0.3736690309183801,0.34557670222825304,0.4280437117433719,-0.944971468342061,-0.48091029196547225,0.962717001953534,0.24181947919419422,-0.9770706527940942,-0.18382360953349505,0.9879818495111146,-0.8021028121899022,0.6207280668714685,0.7652583281619882,-0.6661514168921965,0.9989153755543908,0.7092277557879615,-0.9999182577277985,0.6909698263295635,0.9973981881886823,-0.6468633830921132,-0.9913640457461147,0.6004778850963151,-0.8171103676145246,-0.5519767595706826,-0.20889738414658793,0.844498283137415,0.266551143328863,0.9554853882176312,-0.4583344005635648,-0.9362973387890154,0.4047950271430508,-0.9260183382496745,0.917873162896106,-0.42394007689722973,0.29363136741515694,0.4769285254873833,0.8644004095226356,-0.5282366405576395,0.9760948686652604,-0.8386007628598665,-0.9872705940077994,-0.12967888183228404,-0.6171655263006764,-0.7681702322073792,0.6627617178728296,0.7288307616215669,-0.021430743327159715,0.9999659655060218,0.7467964765017627,-0.9977149078590316,0.6503157282511994,0.9919486614292704,-0.6040986914526063,-0.14602198632843175,0.5557532701554416,-0.8474749627946349,-0.5054497968678233,-0.2621767393603985,-0.9568137837059165,0.318970224386975,-0.9000233505658974,0.9413433158171708,-0.915643247774146,0.3540750282608069,0.41982772022735526,-0.2979641671985098,-0.4729369470411438,-0.8666721175643095,0.2506117320558347,0.8355465603118982,-0.5739753441046576,0.9865390271431238,0.13417501051693184,-0.9945032377141917,0.7710663324971763,-0.08523023656814205,-0.7319288732243922,0.702803401114467,0.6902126530804633,0.033391231155469075,0.9980111012945763,-0.09263006059435583,0.7757756380554062,0.6077070695375665,0.9835177769668069,-0.5595183470911425,-0.20001749512608696,0.5093583073856931,0.25779694156523053,0.9581224944283093,-0.3146681075826979,-0.9394447759833252,0.37043062242801433,-0.9225559654402681,-0.3583133082403157,0.9438243270095912,-0.8967605537855776,0.31192027955679286,-0.24520332246230003,-0.5205123784907537,-0.8380300023360696,0.5702552283535061,-0.9857871639677931,-0.13866837878600494,-0.6100024274176994,0.07966656224165754,-0.9987468457942876,0.7350119266740378,-0.6995695022390634,-0.6934876606913944,-0.02885765458441861,-0.9982867624016557,-0.7792862567680279,0.9930566583748048,-0.14705759555161546,0.8091905899138309,0.5632719129179288,-0.842624655660973,0.9744532307226672,0.8730899527605446,0.46143243946693246,0.3103595170338563,0.940989519525968,-0.3662137230428589,0.9207962911726728,0.3625442165517852,0.8942761624692718,-0.30661128748073196,0.9605152769836075,-0.8711619965005672,0.5166341447292796,0.840496203362371,-0.20162631673889841,0.133137492799659,0.6144166188013319,-0.9935124858649875,-0.0841870885528688,0.9985095691371783,-0.738079858542085,0.6963212109477983,0.6967484010096898,-0.7376780251512581,-0.6529621318428784,-0.08359381945380075,0.6068753205639383,0.1425696335256543,-0.8065172958986319,-0.2010431406032097,0.8401734737708728,-0.975461896125007,-0.8708695190969153,0.9606807542832376,-0.47438331426059827,-0.9425149038592071,-0.9229594243002941,0.9210283474984978,-0.36676766615169554,-0.8962967874897142,0.3109254300802635,0.46090416208997764,-0.25398772918667933,-0.8374583233126557,0.19615516863973548,0.5627798776231673,-0.13763150641329025,-0.6108316647072628,0.9929864450734471,-0.7796592166441716,-0.9982517498965019,-0.7003172041657759,0.9999999745136013,-0.6999948069513351,-0.998224959510352,0.6563907586907098,0.07907307270360645,-0.6104740884436943,-0.1380787383794694,0.5624065716462605,0.19659791956114733,-0.8377050067847364,-0.25442443914569585,0.8686311688199404,0.3113545604430153,-0.8964969350276899,0.9440208976009344,-0.4254269003195328,-0.9227855325041738,0.3709835701499768,0.8982989727753489,-0.31523317593425765,-0.8706474904340606,0.2583721396751323,0.5088458706879248,-0.2006007964335088,-0.5590247964362136,0.983409953346423,0.6072341438227437,-0.08314384826666447,-0.6533040597604025,0.9979733933764374,0.6970722288919156,-0.9999907119367315,0.70322681172722,0.015253735838114912,-0.6598058814496172,-0.9934610337050102,0.6140602968895049,0.9849370425346353,-0.5661512307069692,-0.19214865386161095,0.8352193054869435,-0.977419001336715,-0.4645248617311068,0.9631599572566556,0.8944781438519653,0.36296500267254894,0.42952735640920303,-0.4176101419616622,0.9411422419041342,-0.9002826771347242,0.3195344364183966,0.4528347564486706,-0.2627512346098492,-0.8423814131929205,0.20504229721763526,0.5552582142942849,-0.1466109466616051,0.8206562850348298,0.08766305059635504,0.7335905918995203,-0.997674505303682,-0.6938129125792141,0.9999608763043786,-0.7064443488445136,-0.9987241454370898,0.663207429859438,0.9939686700011181,-0.6176338721214196,-0.12908851835404409,0.5698842421988134,0.973980842492553,-0.83271642101644,-0.24564105571669048,0.46853677346635414,-0.9643698484019633,-0.4152960060828617,0.9469745897766966,0.9176367143242806,-0.9262429126722318,0.3793923945593438,-0.46677742807615075,0.958251700033482,-0.8750739713530847,0.2671249238986303,0.844816987584384,-0.9687032756365441,-0.8115835110572222,-0.9937484237482274,0.6000016979901094,-0.09218044941249073,0.7881077416794123,0.03293993644506209,0.6905393222823897,-0.9999104682303585,-0.7322364715195964,0.998942920365126,-0.6665953339392783,-0.9944558571346965,-0.807753416511987,0.12458937843281692,-0.5736055293216273,-0.18323835471480585,0.5239953682449969,0.9600972880416186,-0.861809080647587,-0.2983951695109832,0.8903853964539893,-0.9484222274436939,-0.36481895484252047,-0.4093504175093221,0.938037275845899,-0.9041944802107938,0.32811714744878484,0.8772602298181374,0.9724810785796378,-0.8472351813476564,0.21391255233937026,0.8142251202424208,-0.9808506578034295,-0.7783463488605508,0.09669595177751185,0.6429418427091268,-0.037472898618558126,-0.6872515253498226,-0.021882180544862666,0.7291398561255492,-0.9991411437941535,0.6699695239889519,0.9949225850827246,-0.6247428291248025,-0.9871986756110136,-0.8388466538994817,0.17877750458131844,-0.5278531827201746,-0.23683745785562824,0.4765315966294106,0.9433281069885399,-0.888311524432839,-0.3502524397772116,0.9139937863374938,-0.9296240699370304,-0.9364558290393001,-0.45873567624111355,0.95561851337744,-0.8794284401921774,-0.9714143246215002,0.8496359447326415,0.983787610342052,-0.5438902382203693,0.16005725452747785,0.7811860533339446,-0.9900500379437059,-0.7427698227703147,0.04200508985287124,0.6839495894221697,-0.9997479393287682,-0.7260282399574589,-0.07663852940578668,0.7655489189670445,0.13565976381371378,0.6282780646419455,0.9879119538018362,-0.7901310343178484,-0.9769744127348194,-0.8674186903110318,0.23242830484679708,-0.48051434357775147,-0.28972473264604826,0.42763558239724414,0.34600039076223016,-0.37325015855136456,-0.4010570065619535,0.9348551162960299,-0.9080318748056219,-0.9542724161419087,-0.5067421789997325,-0.2802126586466403,-0.8520192283478419,-0.9829640582108344,0.8194580308484852,0.9921373129011948,-0.7840096862740473,0.1057208956009636,0.6359674425648962,-0.04653641690611368,-0.7049608600441747,-0.012812020740747634,0.7229016870313723,-0.9994759202656796,-0.7626228357014927,0.9957946254348019,0.7996570813130075,-0.988604907436445,0.5846982801017988,0.9779320973705654,-0.5355361535651395,-0.9638137981054061,0.4844872047860222,0.28538052872016306,-0.8841089970767385,-0.34174122339589674,0.37745428527972963,0.396897881822769,-0.3218474171848516,0.9099225699985922,0.9529066864246665,-0.8837105386109374,-0.9692208836237145,-0.5532256395308988,-0.22718470090732099,-0.8220492246113908,0.16900514897320087,0.786817189589562,-0.11023015138699967,-0.7488130090007478,0.05106678655417669,0.6773035725972624,0.00827649880890339,-0.7197602616706332,-0.06759062408271899,0.759681062808303,-0.99619991989815,-0.7969253254584427,0.9892775222585342,0.8313618291559083,-0.9788696627681448,0.5393611518712732,0.2235957442236286,-0.4884500985195695,-0.9477563866930336,0.4358181183843382,0.9271605896380922,-0.9083884618124527,-0.3927305916055993,0.931596025122592,0.4466024738923539,-0.2694773452358781,0.8858243385589909,0.9680942417102687,-0.8567331605019876,-0.9812563030217751,0.8246235061529069,0.9909611631606468,-0.7896085055210308,0.11473713938095197,-0.6887710108271541,-0.055596105592648444,-0.7113657319541566,0.9993498923442988,0.7166040285045607,0.06306453903949502,-0.7567236608092948,-0.12216607998813578,0.7941771742626604,-0.9899297844302332,0.5920334283670834,0.9797870896387935,0.8605678720861921,-0.9661923700656526,0.49240294324880346,0.2766745967516112,-0.4398959791271215,-0.3332018842534204,0.3858391560234464,0.9052347939869774,-0.9299377137425107,-0.4425395858503627,0.9501164423383519,0.4949647770134135,-0.9669476829552865,0.8590637120600443,0.980372135098002,-0.8271808225117047,-0.9903425012036222,0.7923835766420229,0.996823653282359,-0.6254078940263066,0.060124280838731586,0.7145462481225591,-0.0007949625642231368,-0.6717804050395485,0.9998238605235208,0.7537506905478283,-0.9969490157085223,-0.7914126842640529,-0.17637435884318037,0.8262863413839672,-0.9806843591080623,0.5469777807892953,0.9673518516066071,-0.49634565765087485,-0.9506111316478909,-0.913000291749368,0.3289218881592072,-0.39001972753478475,-0.384371857842287,0.33470053229631813,0.4384675933323553,-0.9486919853736592,-0.4910185023859841,0.965781230947204,0.5418394355535914,-0.9794677977365646,-0.5907513385053347,-0.18240068359483372,-0.7951423458603156,-0.04444476306157124,0.7577620935569956,0.9996901336377843,-0.6672302125641353,0.005330715376093855,0.7102473987955759,0.054008569769069086,-0.6301760041917814,-0.11315756977653359,0.7886319123371545,-0.9911731975648544,-0.5337667226515099,0.981561452716205,0.8559120582576958,-0.9684914315793999,0.5002781606113481,0.9520091829719205,-0.44802446663871365,-0.9321727778065734,0.3941922750741019,0.3801805862624352,-0.3389712496325174,-0.8827286227077719,0.28255594722363064,0.4870621259138353,-0.9645949096837257,0.8636717464040526,0.978543309542618,0.5870855650803048,-0.9890440667552348,-0.6340810518925606,-0.12824356962127728,-0.7607140239981498,-0.9995669437221156,0.7208631137198165,0.9995519888583851,-0.7070471330291741,-0.04947887185255583,0.7477582902111531,0.1086497762968304,-0.7858349156914716,-0.16743788153475778,0.8211428563912085,-0.9824183524185588,-0.48662197733575946,0.969611086539171,0.8829652831192424,-0.9533876483762932,0.4520749261781449,0.9338051969914959,-0.39835671279854856,-0.9109327260551198,0.34323499322961826,0.43029663015030195,-0.9457845481291214,-0.8556513739256822,0.2295621242996773,0.5341927657784628,-0.1714114717044465,0.8347504561204191,0.988364320976884,-0.8006107518979969,-0.995647707994127,-0.6755049988808531,-0.07370101235914751,-0.7239993331902379,-0.9996774634760007,0.6817975390975426,0.044948155995012014,-0.6371936088408208,-0.10413974753848981,0.7830217518703059,0.9793660875106278,-0.818545746991442,-0.22121494928721153,-0.5583181314237584,-0.9707107934509832,-0.4380146621945567,0.9547464995015004,0.9073647059739777,-0.9354184047718536,0.40251295503212053,0.3717746648448846,0.950767412577017,-0.8869548145681905,0.2912460992354216,0.4791193932235675,-0.9621627574247748,-0.8260024166328878,0.9766339571502696,0.5797178591273326,-0.11716262407238746,0.8033202762145197,0.9952147476456843,0.6721535812674668,-0.9992588738366849,0.727120657643862,-0.0189369425435323,-0.6851086215125555,-0.9967833961759479,0.6406827834801744,0.09962757628744554,-0.5939996664234307,0.9928853505330292,0.815931797448195,0.9668190792556809,-0.8487963928372814,-0.27432714302074446,0.8786704750692971,-0.9560857083915627,-0.9054487905914181,0.937012367958725,-0.4066609162674215,-0.9146377083421996,0.35174120847560875,0.4220902567556962,0.9663221631241069,-0.4751332004132466,0.2383818486474793,0.5265021359114934,-0.9756491322334451,-0.7938708624443835,0.9869438422344683,0.6235005777222354,-0.9947613124988495,0.7694756718664734,-0.08274474053993083,0.711719791202693,-0.9998667107200977,0.6884056090189717,0.9971366511352154,-0.7386544671708709,-0.9908934401046142,0.7773471545365985,0.15400756027480558,-0.549020424473956,0.984867713878236,0.8463895139448775,0.26996256674895375,-0.8764959332050796,0.9574052474946056,0.9035142471876345,-0.9385870537591126,-0.9273492638958175,-0.43627158742390226,-0.35598350512403465,-0.8911080166436389,0.9412775355933652,0.4711372325704406,0.9789725778555625,-0.522640533579192,0.18480112795542009,0.5723024467059067,-0.9862031384942627,-0.619948001126175,0.06708787133833301,0.6654093301306514,-0.9988685723774096,0.7333183649453681,-0.02800596819968425,0.7491468871248422,-0.031350832984747286,0.6476215184717753,0.9914939802887557,-0.774485837768947,-0.9820252978574935,0.5528058076612161,0.20792466584515978,-0.84396522207231,0.9738900017080155,0.8743033589739119,0.322324461277379,-0.9015611155624651,0.940142429776617,0.9256424562275475,-0.35910863528498904,-0.9464625366334544,-0.48492795110702486,-0.3042361654587104,-0.8649000494929558,0.24718195594197956,0.5187681788343265,-0.18925686514244305,-0.5685770411154438,0.13066497704021943,0.6163826701870275,-0.9937930555455772,-0.662016635358364,0.012308163967979189,-0.7363946202862895,-0.9999736763698951,-0.7461346741642546,0.026816977659082173,0.7843223797841484,-0.08607913608713791,0.6048909648889055,0.14503801708471661,-0.8079894474574918,-0.9702056231367662,0.5063077066716034,0.2612168420937901,-0.8720927974841641,-0.31802746025553513,-0.47218605425233856,0.3737175914403918,-0.3455275738167751,0.9200539609095644,0.9449885946075038,-0.4097157805685323,-0.962731162784063,0.8671678518913135,-0.2515744268222435,-0.8360925764150103,0.19370870870131462,0.5648399380493209,-0.13516050836568871,-0.7652246260066867,0.9932782536593286,0.6586103207546048,-0.998396071463197,-0.702095541218391,-0.04250853628404603,-0.6982113252475284,-0.9980733030238674,0.6545069590287568,0.0815593235775238,0.8171405472515683,-0.9836971179066928,0.5603423773615375,0.1990429365514058,-0.8390645992461178,-0.2568358736383668,0.45828786928564863,0.3137239163763358,-0.8975992487585966,-0.36950663455410593,-0.42316824707768025,0.4239874922838536,-0.943495211098192,0.8972002179207355,0.9614945164164035,-0.8694178138316376,-0.9761062460732917,0.8385722423761421,-0.1981565670431596,-0.5610912143918806,0.13965325900069303,0.6092140389420911,-0.08065791905046428,-0.7287949145665626,0.9981290080973731,0.6988584808208674,-0.9999983516229154,-0.7400642592920122,-0.09719747473042166,-0.6579295166527478,-0.9931731640187048,0.6120897321630839,0.13605653834446693,-0.564093408822892,-0.9723635563674681,0.5141096491845053,0.2524496212351875,-0.46231455801474375,-0.30941391817765035,0.40889062183560726,-0.9446923811307547,-0.9204079148163187,-0.4198752358017798,-0.3728785838461832,0.4729830747827585,-0.9602380889849834,0.8716498890249067,-0.2603437512137257,-0.841034656183766,-0.9865475869332153,0.8074562566443519,0.9945087180578045,-0.6056108861183204,0.08517807354592659,-0.7837610212094697,-0.02591290780593684,-0.6901747688661037,0.9999798294515395,0.7370061822684993,-0.9985950802812544,-0.7758086724535079,0.9936920412697687,0.8118778027162548,-0.9852879869988279,0.5678328350514592,0.1901448275042528,-0.5179947951579259,-0.9581075012641451,0.865353646092367,0.30509755433013447,-0.4130256772185875,-0.36106200171768094,0.3582644305374451,0.41575434112295184,-0.940450242923815,0.901169463464916,0.9589619063385939,0.5205570799478275,-0.9740949170844461,0.8434797671780354,-0.2070399621320957,-0.8101237213955594,0.1486300485365499,0.7739134155477334,0.9987494645751351,-0.6483103601363633,0.030446880582332678,0.6923412935549321,0.028909986145931904,-0.7339329426350761,0.9988251549737582,0.7729387700271458,-0.9941904750494543,-0.8092213488511466,0.9860530237640098,0.8426528468845791,-0.18568985934970733,0.5218692842967043,0.95939672796693,-0.47033931889236946,-0.9409717999751723,0.891518053833069,0.3568284995010554,-0.9168234818175156,-0.411624893027552,0.3065614552672443,0.46497103338525037,-0.9576659947324555,0.8760601958550794,0.9730591816995848,-0.845907525055079,-0.9850240479174306,0.8127745192716955,-0.15311390275569792,-0.7767779140266212,0.09421303241012267,0.738044533988886,-0.03498022696754705,-0.689061300766221,0.999881067418314,0.7308446036182592,0.08364598950230642,-0.7700529657408854,-0.14262145193305362,-0.622793254518285,-0.9867977742172039,0.5752765643220198,0.9754503682270443,0.8708952503490611,-0.2392600632660339,0.47433722594551586,0.2964460850242173,-0.4212702112505608,-0.3525876561637269,0.36671896061862724,0.40748697647173404,-0.9373278826885585,-0.868381398345569,0.956350380827677,0.5127902289564584,0.27345734210094885,0.8483178798680354,0.9842318727552699,-0.8154085957372419,-0.992992633364207,0.7796264316619547,-0.09872765090042,-0.6413769127532372,-0.9999999613232521,0.6999574179163366,0.019841156763768592,-0.7277412287552085,0.999223652819567,0.76715131896509,-0.9951259715978857,-0.8038585511843047,-0.19664925097754543,-0.5789807142223357,-0.9764391969642147,-0.8686571066093988,0.9619159415386688,-0.4783253743419562,-0.29211115755462735,0.42537952028272236,0.3483395589536111,-0.3709349522057467,-0.40334067658587563,0.3151834913752796,-0.9069841822277684,-0.9550150916907076,-0.8399000950909992,0.9709276756907443,0.5590682045446221,-0.9834194487481103,0.8180258966006939,-0.16207206886113887,-0.7824589098504782,-0.9979767233913432,0.7441351327975215,-0.04404466751662521,-0.6824588542764254,-0.998481941250653,0.7246228818924206,0.07460290677828493,-0.614018975646134,0.9955630151204304,0.8011523177127298,-0.9882263553175611,-0.8352480943697668,0.9774079371770266,-0.5334280147030471,-0.9631458765792207,-0.8945015504445846,0.94549042218239,-0.42948007787712794,-0.9245037783845662,0.9113054616574716,0.3991860786728267,0.9595534754626215,-0.45288143383367757,0.2627007203547085,-0.8825403694815482,-0.9698319489187638,-0.5553017547088092,0.982586792610151,0.603665869081457,-0.9918797474951518,0.7852752903189194,-0.10775070159752725,0.6938506142096965,0.04857557519551858,0.7064072937808182,0.010770694601961988,-0.7214896271844142,-0.9939629273336585,0.7613007370547753,0.1291404335447221,-0.7984296019369835,0.9889101565741727,0.8327454079398934,0.24569180472124394,-0.8641272522531099,0.9643559965821722,-0.48627206717053273,-0.28342336289800807,0.433571799671995,0.9262231779839473,-0.3793439547916545,-0.9022252827996439,0.9324997960294188,0.44883282209627373,-0.2670744725507059,-0.5010610303643677,0.20942838748816622,-0.8554440318304436,-0.9817339214718325,0.8232099564820476,0.9912926894517726,-0.7880755151251886,-0.9973588956638615,0.7501644948188488,-0.05310548351712624,0.7322721258272074,-0.006235084484991799,0.66655630776196,0.06555368478985622,-0.7583519222857202,-0.1246413237493228,0.7956904598721689,0.18328982144743092,-0.8302255892334136,0.9792850727227462,-0.5410790953575593,0.2984451374119718,-0.8904092268949237,0.9484056295962265,0.9158456938130792,-0.3355526187934405,0.3835367927899593,0.390852330828385,-0.3280676920339378,-0.8772350981915347,0.9508914496194991,0.49713057313375286,-0.21386141047559526,-0.5477346596805618,0.9808608528794827,0.5964089457237622,-0.9906852372994716,0.7908595266595705,0.03742058193329433,-0.7531560567826617,-0.9998404253650891,0.6724500531825138,0.001699346092091123,0.7684927522296311,-0.06102700426707667,0.6247019491292403,0.12013964967723736,-0.792934947871331,0.9902167101604925,0.5278087163847287,0.23688832144402988,-0.859526286650461,0.9667166922990569,-0.4941787434243787,0.35030147639328796,0.44172839932662106,0.9296047759476544,0.9364741925721499,-0.3866733523492415,0.3323490444243669,0.8794035171376101,-0.2758054033065318,-0.4931898883132801,0.9664251452745345,0.5439341701678391,-0.1600055758576111,-0.5927620415543589,0.9900574035355116,0.6395014701774087,0.12126842002280207,0.7561321238812139,-0.017399624590681458,-0.7159729453915451,-0.9993168782212211,0.6732912225892846,0.056499068220690986,-0.6282373334151066,-0.11563550394251644,0.5809700135204459,0.17436452806494918,-0.8251347627054408,0.981081620389908,0.4804684296709173,-0.9678672194458151,-0.8862436292878485,-0.3460495100515645,-0.44579310937864425,0.40110496451079963,0.3918987108975954,0.9080099426635115,-0.3366235593159582,-0.43663191731465373,0.2801624022427692,0.8519918196236247,-0.22271416586870935,-0.5401224901633165,0.16448125410144937,-0.8308588944047174,-0.105668835448165,-0.7457642103009662,0.996278280770861,0.6806719368589532,0.0666882805033302,0.7191321233165868,0.9994742241613354,-0.6766379368923221,-0.0519699698050439,0.6317597928194089,0.11112897921006083,-0.5846558075571623,-0.9779211582008914,0.8225638596187773,0.2280653440196956,0.5524720328584949,0.9689978344216218,0.431684067966563,-0.9526320298851122,-0.9102973166639338,0.9329098743517569,-0.39606761897512377,-0.9099008537031006,-0.9529225620038209,0.8836860342343841,-0.284513637328826,-0.48527816040222954,0.9640544913919331,0.8220194125959919,-0.97812064407221,-0.5854317233761901,0.11017811686830241,-0.7991137105446957,-0.05101450138817454,-0.6773420882602826,0.9995047873877961,-0.7222765063591401,0.011907705591874032,0.6799707305562461,0.9961953587588722,-0.6352692548737213,-0.106620168193715,0.5883295733257922,-0.9920237197653101,-0.53931706566247,-0.9649992823209291,0.8524923344947793,0.28108069670740915,-0.8820051004210625,0.9540016707565598,0.908410350952993,-0.9345336509771105,-0.9316150540633409,0.9117730451280732,-0.3451517249825109,-0.8858000442798025,-0.9681073594342555,0.48130728008158086,-0.23154859354229407,-0.8245938896465841,0.9771669694319671,0.7895763798161453,-0.9880517438344435,-0.6289814084935166,0.9954553750973658,-0.7649667453131322,0.0037931596357959124,-0.7166405429870114,0.999727225938525,-0.683289535014671,-0.9965803947622424,0.7433750465659326,0.989922371964783,0.8288619015774736,-0.16094991364756692,0.5431310960850049,-0.9836250180292431,-0.4923573758794229,-0.27672490609208283,0.8798585955314316,0.33325124549256957,-0.9065046962919168,0.9361382012112358,0.9299569637089948,0.4425865331055531,0.3494052003054172,0.8878958305424994,-0.29319845799469135,-0.8590369128149868,-0.9803824555407613,0.5286210925267134,-0.17788761738563988,-0.5780532285210337,0.9873425169787577,0.754760230650698,-0.06007202206430885,-0.6706406544780492,0.9991782096077961,-0.7285206293418203,-0.9998228765705325,-0.7537850941033709,0.9969449278714257,-0.6422488983971472,-0.9905545032136164,0.7789138346926557,0.9806741175950234,-0.5469339525375808,-0.2147959150494159,0.49630020767210425,0.27236342234703187,-0.4439178782068049,-0.3289713280194442,0.9045803918862081,-0.9377234920433253,-0.9282797411207361,0.9154611154518624,0.948708538309226,0.49106410933667194,0.2975318648995429,0.8613499949114765,-0.24036396648865344,-0.8296918974112016,-0.9897109568289912,0.5743461044345992,-0.1236919899521686,-0.6219032128473524,0.9945505508496857,0.6672692071647359,-0.005278362708022162,-0.7102842521140807,0.9998979575999752,0.7507967953808878,-0.9972889505867926,-0.7886641015639606,0.0930809452738741,-0.599277946456899,-0.981551444183164,0.8121115533151081,0.9684783918002179,-0.5002328289582411,-0.2679963352021366,0.8755113256416578,0.3246846425380735,-0.39414416028955523,-0.3802290080481465,0.3389219952559726,-0.9172769184750986,-0.9472647887809627,0.4161185421375392,0.964608715837593,0.5380657646638263,0.24476428067635236,0.8322153232426562,-0.1868070475114252,-0.7978531961689354,0.12819164833857116,0.7606800410316072,-0.06912459925978194,-0.6638840319574959,0.9987694068920177,0.7070841546301563,0.04953116106537699,0.6931613318185652,0.9976124558306788,0.7858672918615698,-0.9917576163594485,-0.8211727345427398,0.9824085770714235,-0.554505830815937,-0.2059273821556851,0.504155158831046,0.9533718495227607,-0.452028227370488,-0.3203912772394948,0.9006759925805206,0.376030004705678,-0.9248680376590386,-0.4303438883270768,0.28685382167617046,-0.8940734173429123,-0.96340277864004,0.8659229495839392,0.977609707412879,-0.8347216277030675,0.19126104358925766,0.8005793814365568,-0.13268866940658444,-0.7636165021022467,0.07364880123477185,0.7239632187844094,-0.9985341814319116,-0.7038695101295737,-0.04500045642554394,0.7447739207499262,0.1041918161378793,0.6526190873013971,0.992328573504504,-0.6065153415505786,-0.9832454986257958,-0.8512132865079941,0.9706982141615094,-0.5080671165954594,-0.2592457102068877,0.4560694940867137,0.316091320452171,-0.4024650294258166,-0.9127732234015479,0.9231336269754162,0.4262451874651139,-0.9443188548917927,-0.4791653457542877,0.9621770211195771,-0.8681827280793885,-0.9766452070583657,0.8372107592296159,0.9876724378209251,-0.8032890961871662,-0.9952198618299396,0.6111901437894193,-0.07817148801481447,-0.727084715528009,0.01888459850096903,0.6850704842113267,-0.9999997697424097,-0.7417394687515324,0.9981978877040447,0.7802252268041718,0.15853931682476044,-0.8159620643548791,0.9840621916280873,-0.5620320773882678,0.2743774875857818,0.5119686217698098,0.9560703629675152,-0.8688554440922663,-0.3117848606401733,0.40661308673019503,0.36760887609301796,-0.35169220011377317,-0.42213771735581057,0.9428167311383102,-0.8980999091874396,-0.23833100418597536,-0.5265466446832336,0.9756606139411974,-0.8396826666127847,0.20015713961088963,0.8059822846731338,-0.1416744295703116,-0.7694422339424505,-0.9990762513358061,0.6536468368161924,-0.023419357802592283,-0.6883676347931972,-0.03593636295977111,0.7386897567641584,-0.9984598022892901,-0.7773800875247601,0.9934092302069248,0.8133315218911198,-0.9848586392762716,-0.8464173943420413,0.19259303696738972,-0.5158595940874691,0.32666431280547914,0.46412379607976095,0.9385689883220295,-0.41075277868328214,-0.3633869240727817,0.9196078661141837,0.41802156250316214,-0.2998623400392691,-0.4711834107648352,0.9596661463884182,-0.8726486549347782,-0.18474967603585804,0.8421372989974139,0.9862118037060441,0.6199890790036474,0.14616298379976606,0.7723313848577971,-0.08721194383774349,-0.7332827696242442,0.027953635291992983,0.6941389573728445,0.031403160611661124,-0.6475816262697587,-0.09064931565282422,0.7745189550131302,0.14957609142538197,0.6172776647517527,0.9856348251848347,0.5023458030804213,-0.9738781150822046,-0.8743287690654479,0.24607999699184735,-0.46813666565344164,-0.9401245874025487,0.41488402011817466,0.9182466915946013,-0.36016963872812335,-0.4138968075898373,0.9397543245307267,0.8648737698238009,-0.958381080834567,-0.5188129358318312,0.9736312308569607,-0.844574605883746,-0.1306130723042483,0.8113188615617595,0.9937988782176046,-0.7752046464091302,0.09172952688910313,0.7363591994627846,0.9999732951338979,-0.6949193825439625,-0.026869312198584842,0.7325448041050328,-0.99892200181485,-0.6048492746089121,-0.14508981671001495,0.8080202928168237,0.20353715216245002,0.5732345340001767,0.9748980390509775,0.8721184149316867,-0.959970545232317,-0.899612299312612,0.29882734969273494,-0.4190067260418239,-0.9200334480211038,0.36439728681156797,0.409763537475436,-0.3085039885901491,-0.4631627008848602,0.9570762982704331,0.836063854800101,-0.9725864826408909,-0.5648831393302528,0.9846700116941596,-0.8139621401737054,-0.07608390360997964,0.7780619594841316,0.9983990340951008,-0.7394204800019515,0.03702037170672314,0.6875804075237902,0.9980700533469877,-0.6544673760273056,-0.0816115024544248,0.6084550616842634,-0.9948769076998761,-0.5602990143060576,0.9871263483256197,0.8390930800131295,0.2568864704978676,0.5274685144943235,0.9612311418222309,0.8976223255594188,-0.9431777297129537,0.4231208116367843,0.9218012763726288,-0.36861743805978203,-0.8971770961705271,-0.9615089030768943,0.4591380115017579,-0.25591111229766783,0.8792127835582332,0.9715217251633043,0.8047411026602547,-0.9838687208656163,-0.6092555546625615,0.9927493112210066,-0.7809032652985949,-0.9981322077808857,-0.6988959261577109,0.9999984453103381,-0.7014139435976485,-0.01780005029283127,0.7263395684564532,0.9931670556680299,-0.7658401883506682,-0.13610840473220598,0.564050179268684,-0.9878416548723682,-0.5140647436836501,-0.25250027856914065,0.8676439255858942,-0.9624719627668546,0.4801171585895695,0.9446752101297898,0.9204283816118126,-0.9235501402792077,0.3728300056505534,0.8991711819000853,-0.9350157923793139,-0.871624227906676,-0.9751222185801145,0.5071325203135674,-0.20254908070954275,-0.557374415034125,0.9830471886632874,0.6056525460822164,-0.9921938861048126,-0.6517968180294016,0.9978448466466519,-0.7454973415732128,-0.9999801606002238,-0.7370415661918028,0.013264823384315366,-0.6612992679870688,-0.9936861688226901,0.7629156748101336,0.9852790383333506,-0.7999289109243206,-0.19019622551547335,0.8341238057342474,-0.9778373881818793,-0.8653798824286354,-0.3051474111640285,0.8935870183568916,-0.9461532555106007,-0.9186458330176042,0.3421667657705833,0.9404680381998715,0.46902811661592375,0.3214186380339722,0.8738385776770299,-0.9530439189773616,-0.5032180747305381,0.20698874281184051,0.5536028137050684,-0.1485782764243011,-0.6020370772627058,0.9916180483391559,0.6483502198827527,-0.030394551407742148,0.7485127975845357,0.9999413030517016,-0.7078507835001806,-0.008729323575317286,-0.7729719861885301,0.06804242269292346,-0.6191970200924611,-0.12711579204492354,0.7971987950322567,0.9744297092243726,-0.5218246247940024,-0.2437124008052987,0.8630980355976798,-0.9648941760167451,0.48805490297153864,-0.3568774059873614,0.9168443848961638,-0.926990831229194,-0.9389167393205119,0.3931470082937861,0.9576810650043677,-0.876034949750864,0.26904122855487544,0.49929327631797965,-0.9682076182721903,-0.5498198229688243,0.15306216646394097,0.5984092225859612,-0.9910218097708887,-0.6448902830671672,-0.11428727710530345,0.6890992404943854,0.02442816001496476,0.7110473923005051,0.9990323794180735,-0.6680767399351487,-0.0635164722959909,0.6227522930702298,0.12261551665874743,-0.5752337405967831,-0.1812825571641321,0.8290858892695186,0.23931089576535977,-0.47429113633033254,0.9660755184892214,0.8894781755883457,0.35263664688618224,0.4394892606245553,-0.40753478561924633,-0.385421340607091,-0.9050422836706399,0.32999548881726315,0.4429456252881843,0.9720157273014675,-0.8482901582439012,0.21585520047445425,0.546025520653794,-0.15754290751788985,0.826926270041241,0.09867555313350697,0.7410623058246437,-0.9968596155549535,-0.6858052347181575,-0.0596722527841702,0.7277771344351532,-0.999221588904347,0.6714448939362584,0.9951208075670624,-0.626294754011522,-0.11811271867331392,0.5789380275391978,0.9764278981428882,-0.8265413195549431,-0.23490446732335568,0.8584811190599819,0.29216122713243525,-0.4253321390799982,0.9504704793579154,0.913184938706195,-0.930355237727786,0.38960270849310435,-0.45696729644530343,0.9550306161611589,-0.8803735804337454,0.2777671142099651,0.491412944198987,-0.22028181362295055,-0.8179957827755474,0.1620204074027572,0.5911166544610469,-0.10318816444934886,0.7948676511352619,0.04399236485733577,0.6824971197017377,-0.9997013034860907,-0.7246589600186086,0.9993902411584953,0.7642676531112307,-0.9955580874473204,0.6298243300364152,0.11360749072579628,-0.582630403846824,-0.17235397060653168,0.5333837310820626,0.9631317932619194,-0.8561461443382018,-0.2878203588443499,0.885296135380984,0.3441334514372065,-0.3750947820732482,0.9320087475414517,0.9341470729362955,-0.9088633203329075,0.33854518342599554,0.8825157497830737,0.9698447100129856,-0.8530588646987772,0.22470389485938058,0.8205964487472841,-0.16649457400183393,-0.7852428748015621,0.9891108140130865,0.6344311537914307,-0.048523283526998445,0.7604200126290104,-0.01082304495503256,0.7215258770146012,-0.9995383327107938,0.6781396915247291,0.9959748854655721],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],31:[function(require,module,exports){
module.exports={"expected":[-6.420676210313675e-11,-0.872101131199922,0.8095983013279411,0.2548357065241723,-0.8837532652862997,0.8314010833251086,0.3377457489312408,-0.9210102827059491,0.6010236488212364,0.1803713303686036,-0.9979980384803384,0.9656512638715452,0.8511682798822809,-0.7154307062423485,0.4538623885513716,-0.14444283110261608,-0.9250606976775017,0.5925751860667804,0.6379961685151007,-0.8510797756590359,0.7155484877347008,0.5044425985476721,0.14460965188661998,0.9249966504812456,0.9790167962824384,-0.43484670551177834,-0.7683615617895581,0.20104291018423115,-0.9991085039302812,0.28296083989951776,0.8620321932998887,-0.7005599421079199,-0.5226560016201628,0.9537531276256253,0.06062401149197215,0.5754821187113868,0.6540693837303029,-0.8923366278013464,0.9789480298997485,-0.4351503143772189,-0.7681457164571306,0.8072674627284683,0.3770766005961805,-0.9899368004825175,0.10248404961812378,0.940289876105621,-0.5579939611148452,-0.6699777241809122,0.8825550370145306,0.5757578379879984,-0.99999997456668,-0.8924887709279896,0.8827670457043919,0.9997723379808147,-0.5583682247463044,0.940136246716298,0.10293273679843956,0.5403502229901095,0.3766587868198501,-0.08146074541833026,-0.5220809586611415,-0.396545766570962,0.05995087483395125,0.7814917617588655,0.41604531516037485,-0.9830389330122974,0.06017376233181375,0.9538886189966753,-0.5222713893066875,-0.7008817533844839,-0.9471945950451103,0.28339344909590275,0.6853386863791969,-0.8725405684109716,-0.26264895293200213,-0.6375188806589102,-0.2216786779729173,-0.8923880290662991,0.6539832283784597,0.5755752566978446,-0.9328123861739306,-0.6701434742368061,0.9927311178495242,-0.4733680662769646,-0.8196778229397198,-0.989905177908368,0.4542642805028312,0.8071356596579117,0.9866189325741165,-0.43494926207442697,-0.4856076398109074,0.9943131525590182,0.4154319924652796,0.5043442566108404,-0.9963783005407689,-0.8510199732043524,-0.5228463535936478,0.9979801331307656,0.8621453474476589,-0.9107364387334729,-0.9991179054776865,0.60976305459247,0.29674132296875727,0.9997910885179819,-0.7107618205907688,-0.3172636993356654,0.9579822463854177,0.5750236660754464,0.3376385482473215,-0.12301849462400076,-0.7404295050767173,-0.3578563954095742,0.9694580410050561,-0.7588472497170117,0.37790783953400386,0.3637021114515288,0.7446277770353766,0.11679586451063086,0.9791308553050291,-0.7300620528245374,-0.9597612123804801,0.8892337396378035,0.7151568501386795,0.15950733420583213,-0.8988908685263286,-0.6999190998893029,0.9993614843709795,0.9081300136283045,-0.8653040733218573,0.20192215508050554,-0.916946878746062,0.854294698638729,-0.06710190277021978,0.925337364041905,-0.8428880773648646,0.04557230776943546,0.7903940445646417,0.4292968272494215,-0.02402152166923049,-0.8034194962285797,-0.8189044935898433,0.0024595655739376417,0.8160713582444532,-0.9424794755539634,-0.9919572643416622,-0.8283437475030024,0.9350527501482344,-0.24872897798974164,-0.658712045984076,-0.9271912256998018,0.22778620035527244,0.6423353053907473,0.9188985578134472,-0.20673750225605958,-0.6807608431431292,0.9908953335834039,0.1855926713257764,0.6963972899118968,-0.9877618825839201,-0.9519885274440588,-0.7117099123028985,0.9841691228225526,-0.42193919925390316,0.7266915899546832,-0.9801187249307226,-0.12167990096013977,0.5167249038242955,-0.997499314359573,0.6322790481175462,-0.535065611684008,-0.9706527604130285,0.36244542155828885,0.5531575143124576,-0.9996189622733547,-0.342264708491463,-0.5709921989843275,-0.9593815936583825,-0.580871226449707,-0.3308852103447893,-0.999879537138163,0.5631843209743078,0.3511562737175539,-0.9676757731911825,-0.5452355350824439,0.6228706351809007,-0.998280554341634,0.5270332149502238,-0.1096764515855427,-0.9776494774649015,0.7349400455276209,0.13108346524291098,0.9819555267048419,0.48990194219981104,0.4305145570004881,-0.9858049671353637,0.7050188581875279,-0.44987650617320374,0.989196008768668,0.868873524219612,-0.1948991130878238,0.9140642553918006,0.673786489679669,0.21600289276807189,-0.9225968636303813,0.8467220906982619,-0.23700623121547845,-0.9966040426352224,0.6413010253913168,0.031184292637842427,0.7991324625956014,0.8229959389310636,-0.009624936064091576,-0.811909124719137,0.944850433957164,0.2993161944964565,-0.9524005521217893,0.7977391943807897,0.033497176683462436,0.9587524639486215,0.9298515187280139,-0.23475743646717995,0.8479510030536539,-0.9217016961009482,0.07655699199495411,-0.8591836379147967,0.91312328266437,-0.19262887492394914,0.8700167528309817,-0.9041202673760677,0.11947442801403559,0.7066580987616017,-0.9854138041141854,-0.15014206572502084,-0.7217505254056567,0.9815152747779352,-0.40884165984831716,0.7365073384306217,0.8746064498023622,-0.1073760250604631,-0.750921675926112,0.9723510288697108,-0.36911435694406075,-0.5471739397811913,0.9993955111840765,0.3489886091904723,-0.7786962760585784,0.961378422315944,-0.32870058191504264,-0.5827533323644298,-0.9552202304979928,0.30825970903990735,-0.34443812211426045,-0.9995524096726935,0.5512282162991677,-0.6172489309668755,0.9986749426809095,-0.5331092089606468,-0.38459473320663456,-0.9973330923599703,-0.2461153955845904,-0.6505965813056565,0.9955274826695771,0.725099945987879,-0.4240360820538273,0.9845766187351367,-0.7100824177092809,-0.1666437215318864,0.990528558868148,-0.45824018303556374,-0.4626888163571885,0.9912042371061445,0.43896819700824397,-0.20900104907677458,0.9198089930283266,0.663077402081978,0.23003884865898055,0.9959884319800213,-0.6467825395497854,-0.25096968029615274,0.9358706124202913,0.6301869234729515,0.27178381116246136,0.9989203057987109,0.8147317404777334,0.004773644986220049,0.9501917167774874,-0.8020395030873592,-0.026334882597596716,0.8323742449192273,-0.5786734011606559,-0.333429511840701,0.962745671972165,-0.775542259755089,-0.06941060043016659,0.8554952512537564,-0.9160210789781966,0.1996551881064196,-0.8664616893339305,-0.7476026771236806,-0.11235722969855062,0.8770252231790205,-0.8978744896408757,0.13375716287874187,-0.8871809407512804,-0.7182727167175047,-0.13589146404369012,-0.7316415049324376,-0.8780580497624486,0.11449729657605114,0.7461703939428511,-0.9739993725376623,-0.09304988792502916,0.9151549330552291,-0.8566086135950806,0.07155921112449683,-0.5591688275823041,-0.9633258895667711,0.3354594443799068,0.5769153710230114,-0.8335660724075442,0.028488041161915646,0.8007511407009108,-0.9508608307392165,0.29453066705402514,0.6115955344714027,-0.999018054645662,-0.014636110338172309,0.3779705317204718,-0.936627378343245,0.7445825772271808,0.6451382637394514,-0.7828759744855752,0.5023446807257715,0.8493777678293846,-0.9832977178304948,0.21110696148183428,0.15957418141909516,-0.9914869959919624,0.46459727921535926,0.45632461322620843,-0.9029644168984932,0.1687671831161576,0.7085641225152768,-0.9169738953773089,0.4259858281890681,-0.06703434069068977,-0.9953216828876009,0.6522308450411335,0.24402711281385733,-0.9765835692138197,0.38658213651677137,0.5312856164096399,-0.9985617780832038,0.6189421709771719,0.28561191411981257,-0.9479340944012334,0.8062986315498022,0.019171236362753006,-0.9999447663616394,0.5845023995927674,0.3266655396157389,-0.9544185912447569,0.7800458706726913,0.06226064501913498,-0.8517629396948025,0.9188718427312677,0.36711163852038603,-0.9718457702172013,0.2643569870215539,0.10523426246753152,-0.9971325925387802,0.9010060418134276,0.406874989919338,-0.7117574783442544,0.9841571193902945,0.14801216716080282,-0.8937326404245519,0.474926991550806,-0.12161268929563639,-0.9885311235426193,0.9755977067836517,0.19051480153480863,-0.5351228164168828,0.8602837592225749,0.48405905288206386,-0.7696253157773297,0.6610558113195829,-0.34220108287792034,-0.9290568419630097,0.9999821520598898,-0.035649856898291137,-0.7964384961977838,0.95305497832176,0.2743787357895691,-0.944142813380513,0.813164692215883,-0.5451787698870884,-0.8217704748810492,0.9729044800623432,-0.25997986547017654,-0.6396468219304954,0.9967790949684392,0.050578055999050964,-0.8455741398768479,0.9234256494592331,-0.21810550910048473,-0.6721933044449007,0.9923945258021273,-0.4709305209225198,-0.4499369803777379,0.9892059333830459,-0.17582552409717916,-0.7034896541555506,0.9861643194615548,0.13642988726410635,-0.4880230259290347,0.994603829591799,-0.6576456621253369,-0.23707201590372146,0.978100062770436,-0.3931805889552375,-0.90738725673574,0.998151979803543,-0.09036380250179092,-0.2787376009668718,0.9682167534857568,-0.8105163610856859,-0.012006605792112138,0.9998437852334591,-0.5903013870947251,-0.7893081325114382,0.9587717090920637,-0.3125070966660537,-0.055107492872092885,0.9996760994927758,-0.9216754275528035,-0.3604370730302134,0.9430698491829754,-0.7570434838274229,-0.6306088156199147,0.8700501356078848,-0.5185678269321609,0.17135861410027203,0.9796890786202229,-0.7281696014443546,-0.14092183567665417,0.9937669596027492,-0.4812205803672123,-0.43945645468509015,0.7365531408619437,-0.6979414825649636,-0.18347569545723572,0.9092842836384573,-0.8639147340890453,0.08584566714893382,0.993321805420558,-0.666415344891445,-0.2256883304977518,0.9263822239820468,-0.8413969507061098,0.042809842213840106,0.7920849590309178,-0.9552001918598805,0.3081952913342237,0.9417572956220092,-0.8173143526752121,-0.00030559968220996434,0.9995685210627031,-0.9415515774653896,-0.3087766818227204,0.6341225378336216,-0.9973281479771353,-0.04342047322956477,0.8417270964199961,-0.5646465480618633,0.2250928582207127,0.9672277130226039,-0.9932511017020608,-0.08645459417557719,0.4435262457810091,-0.9090297475781656,-0.38956907225678117,0.6983790655354294,-0.7361396004759875,0.43890735430653294,0.8851104305769468,-0.993834908950369,0.14031670934522547,0.23010474667108416,-0.9795663363575747,-0.171960741009935,0.5190903278111391,-0.8697486742895582,0.6301343455122694,0.7574426783706325,-0.9432729547170045,0.3598668890320469,0.5554589933918462,-0.9996914677172258,0.05449721200477067,0.7848882990931058,-0.9585978409559787,0.7889327103468327,0.5907946265037853,-0.999832795540602,0.5608972261315076,0.3537440011116136,-0.9683694413018202,0.278150573048003,0.6250315105832793,-0.9981146526318084,0.5246812399475954,0.3937424896327902,-0.9782270921830514,0.7330620892119967,0.1338242686441646,-0.887212183677569,0.48748946119741365,0.43300870307882483,-0.9862654542237456,0.19436602174990628,0.17642716892854893,-0.9891161883675832,0.8675013517642335,-0.09298246694914812,-0.9924695778253139,0.6717406617614033,0.7205238609785707,-0.9236600414534635,0.410456886478358,-0.04996762948334946,-0.9968279246722427,0.9572963612088567,0.2605699995690093,-0.9727629845172915,0.8214220486122932,0.5456910485702855,-0.8135202789185667,0.6054243937706095,-0.2737909419911563,-0.9532398698200356,0.9978259937616862,0.03626066106155046,-0.9999783136238403,0.9288305631825319,0.342775318202984,-0.6615142931595158,0.769234923822364,-0.4835241414542205,-0.8605951974375309,0.9119924797836155,-0.1899147611436329,-0.975731722994176,0.7409704953574614,0.12221932936948501,-0.47546477366065387,0.8934582894639418,-0.14740767220948922,-0.7236616836146506,0.9809823146902851,-0.40631659320036817,-0.9012710157894881,0.8732624617714166,-0.1046264371847258,-0.9909683590230691,0.9717015791842497,-0.3665430464536,-0.5494863426731484,0.9994878216335925,-0.6018081398820204,-0.7804281660490763,0.9606136908673092,-0.3260878096582549,-0.9352452820937117,0.9999381557646347,-0.018560145775319743,-0.3470327664164074,0.9665566510475323,-0.2850261207232308,-0.619422113673247,0.8030957794415106,-0.5307677135149524,-0.8313916437461161,0.976714879254152,-0.2434343454260143,-0.1267198304837174,0.9952624450400379,0.06764415271602701,-0.42653871889669137,0.9167298878338801,-0.7081326995385874,-0.6847520674867559,0.9032268899628584,-0.4557806746472472,-0.4651384229488229,0.9915663924663366,-0.1589707842223879,-0.7155366208319505,0.9831862932053409,-0.8490550271067803,-0.5028730710758652,0.7832561029132697,-0.6446711466999248,-0.2536453858132219,0.9368413231559544,-0.37740460200392,-0.5396724850699279,0.9990449471882543,-0.6111118572970902,-0.2951146998139077,0.9510498918209692,-0.8003848844617388,-0.029098987111330958,0.8339035553090368,-0.5764160332478686,-0.33603516489767005,0.963489715305228,-0.29622227403996887,-0.072168830195348,0.8569238121282987,-0.9149083862743539,0.19694493380551842,0.6880505789557083,-0.7457633455469073,-0.1151044550099487,0.8783503777269296,-0.5038748815450707,0.15449106651396963,0.9829739178140326,-0.9823479250659969,0.41285347054666066,0.898143403370422,-0.8767314121084415,-0.4547483860734275,0.7480084632296893,-0.6855965579910811,0.37320038393913035,0.9162660783519763,-0.9992328574386469,0.06880086223494657,0.9951490526213481,-0.9625802186365894,-0.24230964932021928,0.5791717624232986,-0.8320353542405188,0.5727036766514153,0.8024044049129748,-0.620331902050905,0.2918870339007953,0.947368728622497,-0.998891724929068,-0.017400922413486855,0.3805291244828346,-0.6913349349904483,-0.3249915538698936,0.647248564871528,-0.7811525577176168,0.49995181269642386,0.8508339338428839,-0.983797230638214,0.20840330878606744,0.16230330259265005,-0.99112316518907,-0.10347331958003127,0.4587833487756248,-0.9017727313545519,0.682287553465498,0.7105126418805533,-0.9180735442638436,0.423482473048276,-0.06427513996655347,-0.4764844279001362,0.12336996585796045,0.24670774878505308,-0.9759849426496855,0.8295107054563053,0.5336262124048747,-0.8051030062296292,-0.4825089483991509,-0.28754578869770314,-0.9488110827274606,0.34386425832846074,0.928400371741555,-0.999970005917603,0.9340447183298621,0.997748913758925,-0.6506994233768465,0.7783126634911411,-0.496018458215862,-0.8141939717756153,0.5466622521681206,-0.20396499444621002,-0.5953800239655042,0.2616891831480604,0.10798367068021876,-0.4628088728148662,-0.048809633590411086,-0.6789645120698466,-0.7136970785276622,0.7213273469632562,0.6708813346737784,-0.8949696763092853,0.9960005413235903,0.8669240374933069,-0.98894493188409,0.9749868416719063,-0.8269689909438173,-0.9864562888177644,0.8588707466903902,-0.6131912963231997,-0.8877464949163432,0.6589784797669928,-0.33960155236687933,-0.02647026447714096,0.39480797931463296,-0.032886314088566994,-0.33355718794855177,0.09212702628655786,0.2770367287566549,-0.6081081979106139,0.8555653700348196,0.5599369899877996,-0.8233429753152849,0.973540087070748,0.7882197459300518,-0.9582670389915509,0.9965535284536892,-0.8978148585437392,-0.9997195942549991,0.9223609116832481,-0.7181784837597639,-0.6742379949636645,0.7581991503966978,0.6292336557405864,0.11436275707638117,0.5200809496405427,-0.17310276522480525,-0.1976768842557167,0.9857021659908883,0.13916867486512763,-0.4904346805509942,0.7742663855742826,0.43786529140989716,-0.7353543821359475,0.699208418863432,-0.39063662439798374,-0.9085459739984202,0.9983161944587932,-0.9508188906530978,-0.281392108623921,0.9675214494789449,0.2239630499192619,0.5390437668264217,0.8423525002066019,-0.588067136991632,-0.7910029182633412,0.9595538408885514,-0.30987922978618093,-0.057868244541690886,0.4176588904559281,-0.0014650100234304083,-0.36301499469573306,0.9421465646897691,-0.755233929471494,-0.632752451041246,0.8714099336689805,-0.5162015280871347,0.16863369508008563,0.9802398110879603,-0.2268176761028645,-0.14365886680528125,0.993454906801509,-0.8835340912144551,-0.4419386217894561,0.7384206258513712,-0.695958528676919,0.3864572328177421,0.7373368475826977,-0.44049761600080783,0.08309038248811096,0.9936370434957604,-0.966364906405777,-0.2283812894306411,0.5674299509426934,0.17021623749135253,0.5843925081543133,0.7937698170985568,-0.6315082113241908,-0.7562854572839577,0.9426836014653097,-0.9994636498393364,-0.9212250009840481,0.3672376081643255,-0.9406164801343285,0.7522531709324424,0.9591005430065999,-0.7900194769709604,0.5123114865924102,0.8250023550164277,-0.5623622085753746,0.22239779499289875,0.14814610321614632,-0.2798508736502528,0.881400601857026,0.44600286005678075,0.02995774087060861,-0.39211429155018895,0.7003555012494327,-0.9122984977210045,-0.656771804328458,0.8863939017729171,-0.9941376834129628,0.9651884820691143,0.9859714603020564,-0.9790064578754758,0.8374290015400284,0.9893751592529635,-0.8683807546610651,0.6279848248066766,-0.3012415806881888,-0.6730512520753956,-0.7192949376661052,0.007606472051268737,-0.41207082630152125,0.05173594868865776,0.31571257250873996,-0.6397509162007631,-0.2588601475819697,0.5930233631240418,-0.8456464320273981,-0.5442064465853192,0.8124893296769615,-0.9690557051166211,0.9923778456579572,0.9527032713515693,-0.997941119189865,0.9059630152537186,0.3962827807487339,-0.9294851264084851,-0.34111143967059276,-0.43233557921200866,-0.7703650772862867,0.4850732527785632,-0.133084318811748,-0.9867184001807313,0.19165284869753396,0.1791482834475809,-0.5253166975401786,-0.12046180253011972,0.4739063617985903,-0.8942521513370364,0.6696896976147797,0.7224385545860503,-0.9247161568353865,0.9998461697716593,-0.047205728375091766,-0.9970441848156572,0.10638716466444137,0.2632386448927147,-0.9721182949245346,0.8198418775791636,0.54800613248097,-0.815125212821736,0.6032212771825055,-0.2711303901092362,-0.09824066692437775,0.3277611253970281,0.039023868185266035,-0.9999562799150562,0.9278025056613175,0.34537165117073704,-0.6635854508130434,0.7674651368821823,-0.48110185887533957,-0.8620001767222218,0.5322675036050426,-0.1871991952469907,-0.9763334790909086,0.9880156001950983,0.12496329621788264,-0.477895567004104,0.8922129107803131,-0.6663143654628904,-0.9174358226865601,0.7093817802289212,-0.40378841979570923,-0.9024655934961985,0.9973824125419108,-0.10187604931978993,-0.26761172652991194,0.16071862801066739,-0.8172363120179206,-0.551794544111336,0.8499891169130952,0.5013418384686733,-0.7821540887704985,0.9554208981027787,0.743808135001467,-0.04355577419736989,0.9999035805407499,-0.9261007970044339,-0.9989660155877614,0.9468534332584396,-0.7645494072285841,-0.9642700778967036,0.8014450861723879,-0.5284221597408931,0.18274169050124617,0.5778619943999187,-0.9873053235360755,-0.12946221900494043,0.29791295235137427,0.07040272474651496,-0.4290380943614843,0.7286811353377703,0.3746896443254663,-0.686764635226954,0.9044101440121073,0.6424284986817838,-0.8775026188664582,0.9919209661633757,-0.9699511269832947,-0.9826470361155727,0.9826776006393987,-0.8475909326268769,0.5959613200464438,0.8775816659694398,0.4531707332572699,0.31917730789434623,0.6868844544780205,-0.3748424830694366,0.011260027867958567,0.3538706704224133,-0.07056716808438711,-0.29775558043933925,0.6251372207348536,0.24059142617134455,-0.5777274440392242,0.8330162470099832,-0.9782551898083186,-0.8013464817058944,0.96422639165356,-0.9945260926965289,-0.07492650814698991,0.9989734967693027,0.01563055391128865,0.7029588251671497,0.9362784946142797,-0.7439183117533981,-0.6458978519714945,0.8796688162780634,-0.5014844709059026,0.15175850971522062,0.2188341017717732,-0.21013471410401147,-0.16055591552326567,0.9913570085474207,-0.8753980708365094,-0.4572093579689452,0.74984081313329,-0.6835809479495063,0.37063357396158725,0.9173702177428984,-0.42508581180813365,0.06604198728383746,0.9954172812759923,-0.9618271876758228,-0.2449914824169335,0.5814237253907103,-0.8304982742082312,0.5704347093288005,0.8040515338223935,-0.618160703168343,0.2892411689361743,0.9482503588392756,-0.9987577575387464,-0.020165601438777422,0.3830848076632836,-0.934675638063687,0.7408795428379802,0.6493539170454385,-0.779423168141777,0.49755512196164214,0.8522835942544036,-0.9842892211869394,0.20569806260780746,0.165031182771171,-0.9907517561120054,0.873196465923222,0.9970568369985296,-0.9005741507230586,0.6802633779416003,0.712455728561183,-0.919166173424402,0.4209758798979201,-0.06151544778519953,-0.4740515211409372,0.9605760480370983,0.24938649839234744,-0.9753788535604658,-0.19149104866296543,0.5359627282152396,-0.8067400439884332,-0.4849290862947413,-0.2848963066509952,-0.9496808163039506,0.998521470618582,0.9294243060373907,-0.9999875995551432,0.9330535522007308,0.9979305324713007,-0.952753357683634,0.7765735052159605,-0.49361553669317604,-0.812585424195449,0.9850799470275625,-0.20125717923464273,-0.5931560925548773,0.2590193783604047,0.11073225323380405,-0.4652583056556266,-0.05157131540395949,0.4119206142695883,-0.7156312216777498,-0.35713162781792873,0.67292931807472,-0.8961998691236306,0.9962437932130673,0.8682989924065576,-0.9893511786064825,0.974368521666703,0.19594090410174858,-0.9859989632350665,-0.13741507775148543,-0.6110046535747746,-0.886470205587872,0.656896109567574,-0.3369994252121885,-0.029234358585967422,0.3922659375433212,-0.030122519825225968,-0.3361627156295893,0.08937326937840154,0.27969260345997704,-0.9679675232987341,0.8569936102591552,0.5622258851774846,-0.8249091803474723,0.9741682502477944,-0.2546357474365618,-0.9590538656564094,0.3115621967482272,-0.8965937221535026,-0.9996502937213252,0.921289121399442,0.36136460147796967,-0.6762775301590916,0.7563933009587688,-0.46604464646594784,0.11161529772723552,0.5177171876381796,-0.17037868278311036,-0.9798880253076839,0.985232475695811,0.14190639836189697,-0.4928425852369184,0.8843620009597101,-0.6534694731777974,-0.7372254749595286,0.6972288803752522,-0.38808967297537844,-0.9096977443843342,0.9984727758409069,-0.08485473881090577,-0.28404446471532846,0.966818747660167,-0.8072647770084225,-0.980272407875305,0.8408590582926565,-0.5858283904403153,-0.7926916558900506,0.9603286357945857,-0.3072489935239287,-0.060628553742140365,0.36316859736427054,-0.9195157847335356,-0.36559014069496326,0.9412160764047153,-0.7534186004853453,-0.6348912483438395,0.8727630688009614,-0.5138312822889496,0.16590748666174893,0.9807830484972594,-0.9844457187259055,-0.9674797632285884,0.993135257897256,-0.8822356021340464,-0.44441740976581784,0.7402824647675827,-0.6939702533871275,0.3839054241429028,0.7354660904204392,-0.998713087469097,0.08033446250594593,0.9939446840753058,-0.1393319220885583,-0.23107250212644517,0.5697046777603683,0.1729403981836055,0.582146423044116,0.7954486058848846,-0.9615836488549508,-0.7580916519089134,0.9436026994105001,-0.9993692760141896,-0.9222972114648879,0.9997156769762837,-0.9396741907106725,0.7504283997452846,0.9583141533553703,-0.874968196511468,0.5099348057620544,0.8234365256813063,-0.5600735691843428,0.21970103127868218,0.1508801888157673,-0.277195125874847,-0.09196287275926729,0.44847606412878194,0.03272154945760295,-0.3946565126797837,0.7023265819417872,-0.9134274162614856,-0.658854474418629,0.8876705954701387,-0.994432856551933,0.1348389694400919,0.9864292354479036,-0.1933903354082967,0.8359145101977423,0.9889693634367251,-0.8670061952650078,0.6258305024363208,0.7610418422141894,-0.6710035749886226,0.3547015889302175,0.010371527192933135,-0.4095497665229995,0.04897428979183654,0.9969065854916501,-0.6418737266834865,-0.26153007101518627,0.5952475654000373,-0.8471190874552866,0.5563101878569527,0.8140982480169026,-0.6046325233482241,0.9920332940467178,0.9535399682651446,-0.9977599553426658,-0.037254546415645684,0.3988200418279803,-0.9284616155688983,0.7292893756795774,-0.429840542433627,-0.7685990549888345,0.48265333541794647,0.8611012895313226,-0.9871638015430293,0.1889382102391614,0.18186802817236622,-0.9882873521748158,0.8647371182654676,0.47633948517443175,-0.8930111459598012,0.667633612921773,0.7243477243215924,-0.9257652017009359,0.4054076330196611,-0.04444346632485968,-0.9972528214119089,0.9556828635912038,0.9911012349832925,-0.9714661723716519,0.8182554379138961,0.5503170262557907,-0.8167239141570831,0.6010135482753828,-0.2684677651242903,-0.6473742203282484,0.9974462675107791,0.041786776926719206,-0.9999266003928,0.01756575057045851,0.3479653433758122,-0.665651534594161,-0.2917293554829692,-0.4786758977205569,-0.8633985650261902,0.9878780584738622,0.8319438950527701,-0.9769277699975946,0.9875850086335296,0.1277063075784525,-0.9951652571529065,0.8909607101049329,-0.6642499154639875,-0.9163321012398703,0.9274706455644985,-0.40125715896512776,-0.9036532708176305,0.45489520158050467,-0.09912488249552748,-0.2702750133596657,0.15798879575729166,0.2126762565260508,-0.5540985264469047,0.8193327776347993,0.503732478220616,-0.783874031026185,0.9562336524430121,0.7456535083037092,-0.9371887109038664,0.99986135990634,-0.9250540258679165,-0.9990879095939278,0.6690295576515239,-0.7627641558729844,-0.9635338409306324,0.7997882649357126,-0.5260725655729193,0.18002239035837286,0.575603039286498,-0.23806668161787306,-0.13220361763890728,0.2952722068910351,0.07316075846736661,-0.431534189337612,0.7305720808914271,0.3772519346800983,-0.688771951863273,0.9055864828077571,-0.4508512218038682,-0.8788253590125321,0.5030155569315848,-0.969274654781922,-0.9831561767416394,0.982161394375319,-0.8461203573414605,-0.507645558903907,0.8762526160310766,-0.6404335894293772,0.3165555553050558,0.6848721993663761,-0.37227749803394006,-0.9166640152114773,0.9992713125368595,-0.06780862755554311,-0.3003941843816057,0.627293082565916,-0.7970573003254694,-0.5799822446346019,0.8314832392984176,-0.9788249584148165,-0.8029975406655303,0.964955695384425,-0.2909356423862891,-0.0776836131994792,0.9988444198697343,-0.9126620228538382,0.7009894684467517,0.9353036275335086,-0.7420675898505539,-0.6480063749506801,0.7805312292541843,-0.9928207003734674,0.1490247925484821,0.9839750530089304,-0.20743048589368132,-0.971662625663842,0.511548195669945,-0.8740580361415766,-0.4596668339741535,0.9013424272081553,-0.9403144708861044,0.3680639300649719,0.9184673427855828,-0.4225812898357057,-0.8933842340704893,0.3047173732400767,-0.9610668024422572,-0.24767144227257257,0.9757678075780081,-0.8394168041362898,0.5681613803781093,0.8056925148349758,-0.6159847777377035,-0.7691295776712299,0.08220486972746309,0.729856812637187,-0.022930126274899668,0.9999772143506084,-0.036425405509114085,0.7390195212423489,0.6514543041633492,-0.7776878189812241,-0.6052931782945392,-0.14453814593746891,0.556999459463683,0.20299124363176632,-0.8412505433173816,-0.26072915451568884,-0.9572486877087477,0.46369027732559726,-0.8993686841685377,-0.41030655442409175,-0.36384278982601753,-0.9202517745045801,0.4184660679037821,-0.2993954604605749,-0.4716149897137605,0.9598036120110519,0.2520633411536251,-0.9747653065804074,0.8418733027490293,0.9862926693135486,0.13566104983335933,0.6124053579493087,0.7720204393360397,-0.08672443503439294,-0.7329499523095133,0.027464460236290192,-0.9999975471397364,-0.7427689536849358,0.9981045208593684,-0.6548888308459904,0.7748284091450105,0.6088974306359066,0.14004852570754078,-0.5607607388188023,-0.19854782518094477,0.5106483524988021,0.25634759307230864,-0.8696149752476838,-0.3132441869441605,0.8973764381952245,-0.943362849980492,-0.9219762288407687,-0.3597130753605772,-0.41434223676626286,-0.8974232094613519,0.46761048235072533,0.8696673081774102,-0.2564500542734092,0.9737427514958078,0.5690225898115077,-0.985534098558602,0.8110326809382161,-0.6088133389944849,-0.774895418033995,0.0912422161381373,0.7360280128217482,-0.698497046219363,-0.69456740448695,-0.027358495240647374,0.7328778349549138,0.08661882910902154,-0.7719530585728872,-0.6124891559802986,-0.9845911497564458,0.5645104815049757,0.1941003219567601,0.9747889647904538,-0.25196075772668886,-0.959833359253699,0.30893347534959714,0.9414960307105011,-0.3648177462843611,0.9202102868028816,-0.9237638039205386,-0.9418127219064334,0.8994150234722976,-0.4635963547219387,-0.8718973882974594,0.5153494670937006,0.8413078496210015,-0.20309504035774587,0.9847552521676439,0.144643036821376,-0.9933408121645912,0.7777544546174501,0.9984265943664142,-0.7390909308481939,0.036531339785388244,0.6978234125619667,0.02282414918949171,-0.6540972951179332,-0.08209922321559701,-0.993748568661643,0.1410850419982972,-0.8056297200437921,0.9870479602439879,0.8393591870461039,0.5184268642520644,0.24756873873027474,-0.46677857601136813,-0.30461640799047207,-0.94301500701039,0.42267736229033953,-0.9184254130518691,-0.4152948252920739,0.9402783914424647,0.3123504956763077,-0.9588185436657405,0.8741095306575567,-0.26520756234199405,-0.8437510303094881,0.5615395399189265,-0.9839561461640731,-0.14912961283242082,0.9928080153340729,0.09019962236473421,0.6479256343317675,0.7421386433746826,0.9999991884869641,-0.7010650641438553,-0.018289333571487047,0.657521464639642,0.07757792827461017,-0.7661547721688321,-0.13659319734020553,-0.9861369782004509,0.19512721582879644,-0.8368850159087402,-0.5223001614960003,0.8678871261484259,-0.9623390436514488,0.47968782978848423,-0.41761132137581464,-0.35635651644271665,0.916621644308379,0.41116442977285733,-0.9387247163993057,-0.3166561069476282,-0.45553956919788197,0.25982067722525004,-0.9729425821613171,0.8461768522999856,-0.5577806473880433,-0.8130687309653921,0.15361312076317019,0.5979624274132567,-0.6521678697252996,0.9978768379607741,0.035485107850795124,0.6886950968177519,0.7042922925413185,-0.7304996929177937,0.999056745504862,-0.07305503730377666,0.6152432988345283,0.1320985425165854,-0.8002224792860203,-0.19067663289874764,0.8343936273295945,0.5261627133299309,-0.8656250066114705,-0.4747819099919964,0.8938065814959598,-0.9459947261182613,0.352114860849278,0.9250942850733767,-0.37658161028031867,-0.39776251959223596,0.460502241013793,-0.9562026296152716,-0.2641979947508355,0.9718845994138431,-0.8485852656854601,0.5540102794983703,-0.982297221496381,-0.6024277458896269,-0.77994270764804,0.09923036469333708,-0.9975711624754166,-0.04001764865202471,-0.6853993530432305,-0.7075050313597909,-0.9987987571895084,0.6643291514614285,-0.766827155869438,-0.6188126807160312,-0.1276011699970787,-0.9876016549050348,0.5793925462660912,0.9765480896565432,-0.24418697907233558,0.863345078357818,0.47876896638818445,-0.8917633124873906,0.9474554076237479,-0.34786596110998663,0.37140405823640293,0.4028783469225166,0.9028935646161262,-0.32524769711139717,0.9548651507455533,0.268569876865932,0.49971721675782993,-0.5586492654745331,0.9833277085032308,-0.8183163707007014,0.5988012239298626,0.7827733957516606,-0.10374272005939844,0.9972449637125637,0.04454936616030147,-0.9998892752840054,0.014800945834713189,-0.7242746368317895,-0.07409911054961531,0.7639079721232226,-0.995610425465692,-0.8008498765123759,-0.5748333781745517,-0.18176379017014505,-0.9775145911701978,0.23978601062965724,-0.8610473882929949,-0.48274617295237765,0.8897016970123127,0.3530945310897627,-0.9152213733825348,0.9285009835521533,-0.398722830063018,-0.9048340386726277,0.32953349924694275,0.8779791465769613,-0.5045450659734241,0.9697086716318933,0.21537734822986818,0.5464354281519771,-0.1570596368070567,-0.5951623826848726,-0.7855879796652031,-0.9976435380365961,0.7474931802290473,-0.04908016714348375,0.9998114941842301,-0.01026552800779322,0.7211397256733846,0.06957505524314754,-0.7609730723099409,-0.1286394528810338,0.7981253283997851,-0.9889850593381978,-0.8324655976389399,0.9784609820351439,-0.23538010901025852,-0.9644895521453579,0.2926292037357719,-0.8876217774848496,-0.43402698473956347,0.9133842669877317,0.3798113405106941,-0.9359286847705425,0.9067558973553477,0.9551756014453073,-0.8801413795300534,0.2772969752030977,-0.9685907713633163,-0.21980444488310147,-0.5426311005345413,0.1615374908144271,-0.991226040507495,-0.10270140144343838,-0.6383074574096794,0.9965310236203344,0.682854707620697,-0.9997131437160627,0.005729898985634392,-0.6669328223272323,-0.06504956855191324,0.7580225168100105,0.6294441480213788,-0.7953843602580204,-0.5822326106000375,0.8299438739431422,0.5329697281244897,-0.8615792964143973,0.9656776209214587,-0.4906707094929004,-0.9485656853206416,0.4381087878462167,-0.9115283693131919,-0.38400330392083043,0.9343216089829987,0.32854488430624407,0.4443224460415974,0.8822855051175293,-0.49669216466122273,-0.8528034057823307,0.2242270194452933,0.8203166756229343,-0.16601202147116884,-0.5878480420422366,0.107212123350636,0.6348093452855417,-0.048034491219705405,-0.6795340630351665,-0.7131532740564092,0.7218646193895107,-0.9995233447560289,0.6777799613362052,0.9959309032697063,-0.11963809894533352,0.7926270284776953,0.17833194060975086,-0.8274050756073877,-0.5368021098689838,-0.22655386891572799,-0.9668458225737586,-0.8881034699734451,0.9499918612001175,-0.3403313814742734,-0.929790850776783,0.3881873671363121,0.3862074041578932,-0.33282547949299973,0.952450794634715,0.2762909679037901,0.49275034570667153,0.8551633539840612,-0.5435101779403367,0.9798668667364462,0.17048313672165952,0.7877419305198982,-0.11172063955638478,-0.6312981730722191,0.05256452379738236,0.6761994382278054,0.7163255444816425,-0.7187182906706507,-0.6736646660801707,0.758704926291399,-0.9963294219545711,0.11513368365141614,0.989495445218591,-0.5895839296117253,-0.16389396598005823,0.2319878416090077,-0.8569389782903094,-0.48975822009119635,0.8860095002801361,-0.9513984926627946,0.3360628779776396,-0.9077603532380762,-0.39135089812368984,-0.9082214773389498,0.3370992273791014,-0.9510589846063962,-0.2806473292966674,-0.48879838927776137,0.9651176022616962,-0.9809661865522598,0.8254709611113741,-0.58869464069542,0.9893357442478998,0.11622685730586915,-0.9962346083659733,0.7594214108735321,0.9996234991512328,-0.002241061399709695,0.7155571755831833,-0.9997622717479138,-0.755742369907802,0.9967074429085744,-0.11062689968383665,0.5850655878932371,0.16939858293680282,0.9800860027442433,-0.5444336634541489,0.8545923502453981,0.49370772422331677,0.27523307890618254,-0.8791199202951566,0.9100880726685946,-0.9330916808702937,0.38717287549049584,0.9101103053076435,-0.3413660400396802,0.9496476082070856,-0.8886087984380888,-0.9665641965752672,-0.22762567770800113,-0.5358732315132823,-0.8280226563521881,0.5850220764986279,-0.9886649200949157,-0.12073068389156028,-0.7557775034770415,0.061621251508780936,-0.9994887628207325,-0.0022947126856971258,-0.7123813391615087,-0.680341072241124,-0.04693517041987648,0.6356593308548381,-0.7904950227862537,0.9907661340209644,-0.16492663051666592,-0.9809766031004828,0.5482326782889861,-0.8522281404613495,-0.2805958336680972,0.8817669200725496,0.44530813415756704,0.3275052172302349,0.9347133177078532,-0.3829868874542697,0.9277014220998825,-0.9513819686662723,0.8860343754042855,-0.28934264109659796,0.9653911721350842,0.23204002901769966,0.5320381819852695,0.8305573164787285,-0.581337476498408,-0.7960509351648826,0.6285885797293526,-0.9954071388077181,-0.6736250147148521,0.999333463761472,-0.7257536733667265,-0.9997388973720265,0.05251094646928263,-0.7497706741875299,-0.6391542632156905,0.7877088798193688,-0.9913709099389775,0.16045128502029363,0.9818470215831887,0.8551355420762855,-0.968863850811672,0.5015761799301712,-0.8796183968419209,-0.44936477254779456,-0.3232162360383285,0.3955701453544379,-0.9297711009788224,0.9138317509997719,-0.4330352256199597,0.9467662728438146,0.4857517442027489,-0.9641982864642817,-0.2364496065106674,-0.8274352053562543,0.1783847317653711,0.5776409164989443,0.7987879243150439,-0.625054478878121,0.9949626815325289,0.6702658244963114,-0.9991576051684573,-0.7131156629452844,0.9998322570531646,-0.6869614913915173,-0.9969842602263399,0.6426360460982903,-0.7849065311234749,-0.5960464399682803,0.8202859906797215,-0.9826972402850268,0.2143024848833012,0.9699769124912136,-0.27187729222180673,-0.9538391235213892,0.4534121660457571,0.9343407306744859,-0.3997318827178137,-0.37459135981227937,-0.9156642921609868,0.4289423392314884,0.8902036113730772,-0.4817820519677553,-0.861606529871465,0.532924331046895,-0.9772819260707569,0.8355753231557782,0.9881350895471853,0.1241932891308922,0.6215075186269767,-0.065103106250337,-0.6668928447336968,0.9989611906596706,0.01590137842815978,-0.9999050469387512,0.043449869723140355,0.9973259980500843,-0.10264803356803137,-0.9912331306011289,0.5996822989277284,0.15149078315630088,-0.5511471654953447,-0.20986989581830665,-0.9710700185965687,0.2675095865294017,0.9551914830280501,-0.3242067768423923,0.9024199255797042,0.40388539629860504,-0.9263933043058074,-0.34889757614719336,-0.42484062810650836,0.29268050620072716,0.4778024479118142,-0.9617530300050474,-0.5290808551590334,0.9763105478860562,0.5784951837274797,-0.987428289675321,-0.12869265835318922,0.9950670849034828,-0.7675330912780071,0.07971874913537659,0.7281494338280357,-0.7067268264945433,0.9999572655312617,0.7474575401496047,-0.9976472176401614,0.09813517432265005,-0.7792534474905219,-0.6033058204753777,-0.9825027938411662,0.5549261727522734,-0.848002489869383,-0.5045913871011304,-0.26313637729631345,0.8730644261820528,0.3199126730107552,0.937535171636671,-0.37556183969186735,0.9246758001212297,0.3531447261912569,-0.9456373707640311,0.8942995902050828,-0.4738130139083011,0.23983809646932552,0.5252264943602838,-0.9753190838237261,-0.574789475970517,0.9867011751977843,0.13318937994969435,-0.9946068818093405,-0.07415261437281956,0.9990083499589242,-0.7312508387143012,0.7035105658363878,0.6894926434758141,0.03438521737585585,-0.7376426775992687,0.7827400069766334,-0.9923909033061125,0.15252552811544604,0.9833374631856703,-0.5586937633762227,0.8455898478891596,-0.9731962745407671,-0.8757729532132106,-0.456519030805939,-0.31561198753681585,-0.9391034762353527,0.3713542438924908,-0.92293927235342,-0.35738461090179413,-0.891787588588541,0.301342659672319,-0.9620392707178324,0.8684333173685771,-0.5213613279473615,-0.8374869333631859,0.19620650469904652,0.8035898821374434,-0.6187705345618466,0.9941262164225799,0.0786751266311048,-0.9987961268088845,0.7343371993967583,-0.7002798316818977,-0.039964040146723584,0.7414005461298416,0.648763544057857,0.08910349184017474,0.9929391704543215,-0.14804126726715527,0.8097745381418398,-0.8485568797146431,0.9718972306556037,-0.51240252062981,0.873574426496753,0.4605498644957376,0.31130480889963685,0.9406524604266644,-0.3671390081306902,-0.918860232810354,0.4216796886291549,-0.9426482236381946,-0.4747346905036804,0.9607915148937786,-0.8706732422710852,0.5174854354392878,-0.19072929970037247,-0.567342661081473,-0.806281226493961,0.6152010025308777,-0.9936250986320485,-0.08319602028661105,-0.6532644223308001,0.7042542038393126,-0.9999834336616003,0.6960346449234769,-0.7383491383638173,-0.6522085405673761,-0.0845848544141114,-0.993467009620149,-0.8130374956687558,0.9849460937867551,-0.2020172920296399,0.8407124243371843,0.5162923148403378,-0.8713579275182229,0.9604041349992015,-0.9387432069676402,0.4112133357371995,0.36291621912755045,0.9206405163248144,-0.4175625717085492,0.9411245445997574,0.3099800148841004,-0.9595239924689878,-0.2530256603096289,0.9745428073051161,-0.8424096243334801,-0.9861280742233125,0.8089559830280021,-0.14666273414660672,-0.7726521958793617,0.6574810407891241,-0.9983100398607073,-0.02845862882911821,0.9999992553985766,-0.6992841996829997,0.7352825403589158,0.6556401190297759,0.9928144369116629,-0.6096860610736233,-0.1390637008205561,-0.9857200219485819,0.19757297008515953,-0.8382477431098699,-0.25538614241590796,-0.9588337803291912,0.4685830241251728,-0.8969371302116951,0.9436923405147819,0.9215906340305257,-0.9224018592749313,0.413436864170198,-0.30466750919822505,-0.4667311274033636,0.9582367295205113,0.2574112242827258,-0.9735158577698458,0.8448449983973114,0.9853650562906314,-0.8116140967111413,-0.9937425775161061,0.7755236840101263,-0.09223257978666041,-0.73670091546945,0.032992261394079986,-0.999994503904303,0.026364296643971486,0.9984296013995688,-0.6590582088463467,0.7713204570341514,0.613275029743729,-0.8077225519998202,-0.5653311357030789,-0.19312458342325028,0.5153954445557393,0.2509981627252431,-0.8668711955460754,-0.4725851847966356,0.8949223796673725,0.4194653806768312,-0.9198205377231295,-0.3648676994707958,0.941477947534175,-0.8998492953440249,0.3185918610459731,0.8723839804933872,-0.5144968963451488,0.9724688798527952,0.5644661954176219,-0.9845817661996871,0.8142555128573501,-0.6044167613943645,-0.7783792171009197,-0.9983703313897724,0.7397605047772491,-0.6945288051703133,-0.6985354388671514,-0.021829839645938546,0.7291040263032028,0.08110798273508371,0.9938591108665429,-0.6168513813554334,0.8050401265303578,0.5690667077329349,-0.8388181532426979,0.9760080290453009,-0.2466050191874882,-0.9613703234611933,0.3036689662169866,-0.8928892176642733,-0.35966301468597106,0.918031517721012,-0.925867578926378,-0.9399393726793528,0.9018185426908487,0.9585355959147425,-0.8745921835543674,0.5106022228242886,0.8442844265066064,-0.20850698489289507,-0.5523095837178842,0.15011297493795128,-0.9926884585459921,0.7812187364041558,0.9981012176297344,-0.7428048748097814,0.6912583389675226,-0.9999232820362774,0.01729493353723202,-0.6582704745670516,-0.076586329870483,-0.9943507827491425,0.13560789420508015,-0.8023411387718747,0.9879200680652382,0.836340202477198,0.5231480236050072,-0.8673926391699641,0.9626089402087699,-0.2993442696443066,-0.9448407970388542,0.42768290673519044,-0.9162236108301225,-0.4102576265431378,0.9383814602200568,-0.9037692367024337,-0.9572331667860815,0.8767823934147084,-0.5066970445579997,-0.84670643558135,0.5569549004647614,0.8136473280113172,-0.1545957978000571,0.9921307592975397,0.09570600714055158,0.6437032711145656,-0.9970914522507206,0.9999768507313888,-0.7049979905318557,0.7298201354704769,0.6616781412134263,0.07206310137643408,0.9948219976079128,-0.6239659393560717,-0.9870395600729381,0.18970022849320875,-0.833845045478497,-0.5270082086687019,0.8651266107293466,-0.9638277529652702,0.2950134145881584,-0.42262991485573087,-0.35118382399902787,-0.9254714982593949,0.3775027654924965,-0.9368042422076043,-0.3218969845049144,-0.4506094374950444,0.26515708327894916,-0.9716499425687952,0.849111025155823,-0.553182026740326,-0.8162758636148139,0.15907544012469632,-0.9915526486983479,-0.6479655112205334,0.9975013935213045,0.041011389535544236,0.6846748098538791,0.7082075433826327,-0.7267118030449936,0.9992816141658166,-0.994239114679906,0.619593637834364,0.1266146794960786,0.9877572928708079,-0.18524487481503754,0.8313327335800755,0.530857551462576,-0.8628427838256534,-0.4796418922005502,0.891312832111646,-0.9477730858702592,-0.9166425716333826,0.927180203312416,-0.3816990366250503,-0.9033206426438037,0.45558617438776056,-0.9545692555472203,-0.26952776154752156,0.9705675836967244,-0.8514981457598114,0.5493977722656572,0.8188876057737002,0.9922612951609793,-0.783391928456783,0.10473185962765519,-0.997170695513242,-0.045542914057470234,-0.681361882387594,-0.7114025261049979,-0.9990544707562509,0.6684525660768258,-0.7632657814024523,0.9957030178973547,0.8002538746960718,-0.9884547042943415,0.5838911554493786,-0.5261181921157869,-0.23882035014382585,0.8605412054446185,0.48361692805272466,-0.8892471994736546,0.9492099971134227,-0.34267573349511804,-0.9288698332585008,-0.9371699947170782,0.9052570383214884,-0.3304723415004427,-0.8784548058391749,0.2738928947549985,0.49491928577917654,-0.21634845768642735,0.9823070274631487,-0.8214825007559611,0.5943628566216734,0.7862029734615764,-0.6410294155295078,0.9968194824665897,0.050073501613795875,0.7074680318042733,0.009271017993536775,-0.7204503499867783,-0.6718191849219374,0.7603274435959962,-0.9961128052025786,-0.797525721363225,-0.5793498749010964,-0.1763228259327359,-0.9786658064226196,0.5385233936916384,0.9647517586175699,-0.4875820143345936,0.8871632721337678,0.347915044268192,-0.9129789324605915,0.9305403533364759,-0.3936450455789377,-0.9071748099229157,0.33474986573597615,0.8806130721949932,-0.27825239309641825,-0.850948723521842,0.2207745705760606,0.541795432715758,-0.16251890632165952,-0.5907090961587237,-0.7889978437187439,0.63754154985696,0.7511553637270986,-0.05460305899562626,0.9996888290604861,-0.004735355136096776,-0.9994077531336993,0.06405708547656268,-0.7573734633855702,-0.12315312734976151,0.7947811603370678,-0.989788506044703,-0.829388652743592,0.979587650686815,-0.23000158509744015,-0.9659354732184611,0.28733650519275206,0.9488800735334277,-0.4390026006051844,-0.33413944332681544,0.38492142034360133,-0.9339666557231812,0.9090739179932974,0.9535238035138462,-0.8827532214809457,0.28260616688274653,-0.9672007918473281,-0.22519614141601732,-0.8208850667750842,0.16699269596128014,-0.9904798992791918,-0.10820089520882828,-0.6340405678849094,0.9960555405817982,0.6788040759713164,0.7138501141399598,0.0001995948570279728,0.9995535544405388,-0.05952997950879024,-0.9960200403362897,0.6337318240528474,-0.7920202480821308,-0.1773532374404599,0.8268461174308436,-0.9804893416527372,-0.8587588097044462,0.9670993153906923,-0.49548201209499676,-0.9503019664170105,0.33939602535461755,0.9301564758186209,-0.3891037397754706,0.9323361475620214,0.33376317096467,0.4393612319059749,-0.949005996902141,-0.4918846673188472,-0.8556784683953905,0.22961307924023036,0.8234669667646023,-0.17146305001899156,0.9898453291694629,-0.7945388303259311,0.6305265416399211,-0.0535576801968929,-0.6754663948891321,-0.7170191587360256,0.7180264181130024,-0.9996787916856442,0.6818358368208931,0.9964140651822553,-0.11414568316726519,-0.9896387330766708,0.5903869490654414,-0.824286571209047,-0.5414598664535569,-0.22116389263111902,-0.9682432611902516,-0.8855479185809301,0.9517043085039234,-0.44713508961430876,-0.9318122734055597,0.3932780540801606,-0.930686458219413,-0.33803540568874935,0.9507511866737612,0.28160177753258103,0.48793049891269563,0.8580169589422519,-0.5388597122456141,0.9787477454073229,-0.8316925464324937,0.7911365833067994,-0.11721461674507244,0.9961478891685043,0.058086381772721844,0.6721148172702569,0.7201734519201443,-0.00887184470465318,-0.6777414667918448,0.7550906913183874,-0.9967875905559734,0.10963839221444269,0.9902797971978432,-0.5940417821060099,0.8217100667363777,0.22660486074998354,-0.8540754545105441,-0.49457237486140954,-0.2742767977038096,-0.953087070943437,0.3308490766722392,-0.9054265676590245,-0.38625569503567286,-0.9105219660003027,0.3423006859270785,-0.9493355238346518,-0.2859510871062154,-0.4839662921920816,-0.860337797294657,-0.9798773178558481,0.8285798898072676,-0.584215183885541,0.9885151094280673,0.12171790663382956,-0.9957399051256168,0.7630078102554304,-0.7162890130620932,0.0032892662746166344,0.7116830138725948,0.6810696425074964,-0.7521091858221557,0.9971406087728146,-0.10512884564394379,-0.9909004880485758,0.16394561123530488,0.9811691873760439,-0.5490641811648455,-0.9679809924601795,0.49850948382467053,0.2699121568134416,-0.4461984180752015,0.9077823136788835,-0.9350663236977332,0.3820679719362435,0.912387959304558,-0.3465589239289955,0.9479003300817342,0.29029451373762816,0.8574787730350529,-0.23300732638782362,-0.5311958069001208,-0.8311108076709883,0.5805279549259021,-0.9878194871633393,-0.6278147638080402,-0.7593873487576063,0.06714010670250767,-0.9992966630235034,0.7264375247811542,0.9997611288814856,-0.6843838064094623,0.7491122069981976,0.11067893159202345,-0.7870957955158873,0.9915007928592429,-0.15946953404631606,-0.9820351781823976,0.5528494335249812,-0.8493218152584812,-0.502436336829404,-0.9527696526654321,0.45025303648009063,0.32227490157136995,-0.39648338675303796,-0.3778723884582214,0.9256226444664503,0.43213854034069016,0.8885847844991109,-0.2946319680684322,0.9639340705722385,0.23741584499836815,-0.9780263354074732,0.833624626887137,-0.5768287826215068,0.12067871327100813,0.624277837050689,-0.9948624890470946,-0.0716649437919492,0.9991162968219097,-0.7295471755857298,-0.9998499783847106,0.046987466063459375,0.9970609487994804,-0.6433977298531504,-0.09610335679846743,0.5968447249604346,0.1549901760512831,0.9828809653368914,0.8522555290415161,-0.9702183061467385,0.5063528530874949,-0.8769742888322736,-0.454298391718242,0.9039400258931622,0.4006433282150331,0.3736690309183801,-0.34557670222825304,-0.4280437117433719,0.944971468342061,0.48091029196547225,-0.962717001953534,-0.24181947919419422,0.9770706527940942,0.18382360953349505,-0.9879818495111146,0.8021028121899022,-0.6207280668714685,-0.7652583281619882,0.6661514168921965,-0.9989153755543908,-0.7092277557879615,0.9999182577277985,-0.6909698263295635,-0.9973981881886823,0.6468633830921132,0.9913640457461147,-0.6004778850963151,0.8171103676145246,0.5519767595706826,0.20889738414658793,-0.844498283137415,-0.266551143328863,-0.9554853882176312,0.4583344005635648,0.9362973387890154,-0.4047950271430508,0.9260183382496745,-0.917873162896106,0.42394007689722973,-0.29363136741515694,-0.4769285254873833,-0.8644004095226356,0.5282366405576395,-0.9760948686652604,0.8386007628598665,0.9872705940077994,0.12967888183228404,0.6171655263006764,0.7681702322073792,-0.6627617178728296,-0.7288307616215669,0.021430743327159715,-0.9999659655060218,-0.7467964765017627,0.9977149078590316,-0.6503157282511994,-0.9919486614292704,0.6040986914526063,0.14602198632843175,-0.5557532701554416,0.8474749627946349,0.5054497968678233,0.2621767393603985,0.9568137837059165,-0.318970224386975,0.9000233505658974,-0.9413433158171708,0.915643247774146,-0.3540750282608069,-0.41982772022735526,0.2979641671985098,0.4729369470411438,0.8666721175643095,-0.2506117320558347,-0.8355465603118982,0.5739753441046576,-0.9865390271431238,-0.13417501051693184,0.9945032377141917,-0.7710663324971763,0.08523023656814205,0.7319288732243922,-0.702803401114467,-0.6902126530804633,-0.033391231155469075,-0.9980111012945763,0.09263006059435583,-0.7757756380554062,-0.6077070695375665,-0.9835177769668069,0.5595183470911425,0.20001749512608696,-0.5093583073856931,-0.25779694156523053,-0.9581224944283093,0.3146681075826979,0.9394447759833252,-0.37043062242801433,0.9225559654402681,0.3583133082403157,-0.9438243270095912,0.8967605537855776,-0.31192027955679286,0.24520332246230003,0.5205123784907537,0.8380300023360696,-0.5702552283535061,0.9857871639677931,0.13866837878600494,0.6100024274176994,-0.07966656224165754,0.9987468457942876,-0.7350119266740378,0.6995695022390634,0.6934876606913944,0.02885765458441861,0.9982867624016557,0.7792862567680279,-0.9930566583748048,0.14705759555161546,-0.8091905899138309,-0.5632719129179288,0.842624655660973,-0.9744532307226672,-0.8730899527605446,-0.46143243946693246,-0.3103595170338563,-0.940989519525968,0.3662137230428589,-0.9207962911726728,-0.3625442165517852,-0.8942761624692718,0.30661128748073196,-0.9605152769836075,0.8711619965005672,-0.5166341447292796,-0.840496203362371,0.20162631673889841,-0.133137492799659,-0.6144166188013319,0.9935124858649875,0.0841870885528688,-0.9985095691371783,0.738079858542085,-0.6963212109477983,-0.6967484010096898,0.7376780251512581,0.6529621318428784,0.08359381945380075,-0.6068753205639383,-0.1425696335256543,0.8065172958986319,0.2010431406032097,-0.8401734737708728,0.975461896125007,0.8708695190969153,-0.9606807542832376,0.47438331426059827,0.9425149038592071,0.9229594243002941,-0.9210283474984978,0.36676766615169554,0.8962967874897142,-0.3109254300802635,-0.46090416208997764,0.25398772918667933,0.8374583233126557,-0.19615516863973548,-0.5627798776231673,0.13763150641329025,0.6108316647072628,-0.9929864450734471,0.7796592166441716,0.9982517498965019,0.7003172041657759,-0.9999999745136013,0.6999948069513351,0.998224959510352,-0.6563907586907098,-0.07907307270360645,0.6104740884436943,0.1380787383794694,-0.5624065716462605,-0.19659791956114733,0.8377050067847364,0.25442443914569585,-0.8686311688199404,-0.3113545604430153,0.8964969350276899,-0.9440208976009344,0.4254269003195328,0.9227855325041738,-0.3709835701499768,-0.8982989727753489,0.31523317593425765,0.8706474904340606,-0.2583721396751323,-0.5088458706879248,0.2006007964335088,0.5590247964362136,-0.983409953346423,-0.6072341438227437,0.08314384826666447,0.6533040597604025,-0.9979733933764374,-0.6970722288919156,0.9999907119367315,-0.70322681172722,-0.015253735838114912,0.6598058814496172,0.9934610337050102,-0.6140602968895049,-0.9849370425346353,0.5661512307069692,0.19214865386161095,-0.8352193054869435,0.977419001336715,0.4645248617311068,-0.9631599572566556,-0.8944781438519653,-0.36296500267254894,-0.42952735640920303,0.4176101419616622,-0.9411422419041342,0.9002826771347242,-0.3195344364183966,-0.4528347564486706,0.2627512346098492,0.8423814131929205,-0.20504229721763526,-0.5552582142942849,0.1466109466616051,-0.8206562850348298,-0.08766305059635504,-0.7335905918995203,0.997674505303682,0.6938129125792141,-0.9999608763043786,0.7064443488445136,0.9987241454370898,-0.663207429859438,-0.9939686700011181,0.6176338721214196,0.12908851835404409,-0.5698842421988134,-0.973980842492553,0.83271642101644,0.24564105571669048,-0.46853677346635414,0.9643698484019633,0.4152960060828617,-0.9469745897766966,-0.9176367143242806,0.9262429126722318,-0.3793923945593438,0.46677742807615075,-0.958251700033482,0.8750739713530847,-0.2671249238986303,-0.844816987584384,0.9687032756365441,0.8115835110572222,0.9937484237482274,-0.6000016979901094,0.09218044941249073,-0.7881077416794123,-0.03293993644506209,-0.6905393222823897,0.9999104682303585,0.7322364715195964,-0.998942920365126,0.6665953339392783,0.9944558571346965,0.807753416511987,-0.12458937843281692,0.5736055293216273,0.18323835471480585,-0.5239953682449969,-0.9600972880416186,0.861809080647587,0.2983951695109832,-0.8903853964539893,0.9484222274436939,0.36481895484252047,0.4093504175093221,-0.938037275845899,0.9041944802107938,-0.32811714744878484,-0.8772602298181374,-0.9724810785796378,0.8472351813476564,-0.21391255233937026,-0.8142251202424208,0.9808506578034295,0.7783463488605508,-0.09669595177751185,-0.6429418427091268,0.037472898618558126,0.6872515253498226,0.021882180544862666,-0.7291398561255492,0.9991411437941535,-0.6699695239889519,-0.9949225850827246,0.6247428291248025,0.9871986756110136,0.8388466538994817,-0.17877750458131844,0.5278531827201746,0.23683745785562824,-0.4765315966294106,-0.9433281069885399,0.888311524432839,0.3502524397772116,-0.9139937863374938,0.9296240699370304,0.9364558290393001,0.45873567624111355,-0.95561851337744,0.8794284401921774,0.9714143246215002,-0.8496359447326415,-0.983787610342052,0.5438902382203693,-0.16005725452747785,-0.7811860533339446,0.9900500379437059,0.7427698227703147,-0.04200508985287124,-0.6839495894221697,0.9997479393287682,0.7260282399574589,0.07663852940578668,-0.7655489189670445,-0.13565976381371378,-0.6282780646419455,-0.9879119538018362,0.7901310343178484,0.9769744127348194,0.8674186903110318,-0.23242830484679708,0.48051434357775147,0.28972473264604826,-0.42763558239724414,-0.34600039076223016,0.37325015855136456,0.4010570065619535,-0.9348551162960299,0.9080318748056219,0.9542724161419087,0.5067421789997325,0.2802126586466403,0.8520192283478419,0.9829640582108344,-0.8194580308484852,-0.9921373129011948,0.7840096862740473,-0.1057208956009636,-0.6359674425648962,0.04653641690611368,0.7049608600441747,0.012812020740747634,-0.7229016870313723,0.9994759202656796,0.7626228357014927,-0.9957946254348019,-0.7996570813130075,0.988604907436445,-0.5846982801017988,-0.9779320973705654,0.5355361535651395,0.9638137981054061,-0.4844872047860222,-0.28538052872016306,0.8841089970767385,0.34174122339589674,-0.37745428527972963,-0.396897881822769,0.3218474171848516,-0.9099225699985922,-0.9529066864246665,0.8837105386109374,0.9692208836237145,0.5532256395308988,0.22718470090732099,0.8220492246113908,-0.16900514897320087,-0.786817189589562,0.11023015138699967,0.7488130090007478,-0.05106678655417669,-0.6773035725972624,-0.00827649880890339,0.7197602616706332,0.06759062408271899,-0.759681062808303,0.99619991989815,0.7969253254584427,-0.9892775222585342,-0.8313618291559083,0.9788696627681448,-0.5393611518712732,-0.2235957442236286,0.4884500985195695,0.9477563866930336,-0.4358181183843382,-0.9271605896380922,0.9083884618124527,0.3927305916055993,-0.931596025122592,-0.4466024738923539,0.2694773452358781,-0.8858243385589909,-0.9680942417102687,0.8567331605019876,0.9812563030217751,-0.8246235061529069,-0.9909611631606468,0.7896085055210308,-0.11473713938095197,0.6887710108271541,0.055596105592648444,0.7113657319541566,-0.9993498923442988,-0.7166040285045607,-0.06306453903949502,0.7567236608092948,0.12216607998813578,-0.7941771742626604,0.9899297844302332,-0.5920334283670834,-0.9797870896387935,-0.8605678720861921,0.9661923700656526,-0.49240294324880346,-0.2766745967516112,0.4398959791271215,0.3332018842534204,-0.3858391560234464,-0.9052347939869774,0.9299377137425107,0.4425395858503627,-0.9501164423383519,-0.4949647770134135,0.9669476829552865,-0.8590637120600443,-0.980372135098002,0.8271808225117047,0.9903425012036222,-0.7923835766420229,-0.996823653282359,0.6254078940263066,-0.060124280838731586,-0.7145462481225591,0.0007949625642231368,0.6717804050395485,-0.9998238605235208,-0.7537506905478283,0.9969490157085223,0.7914126842640529,0.17637435884318037,-0.8262863413839672,0.9806843591080623,-0.5469777807892953,-0.9673518516066071,0.49634565765087485,0.9506111316478909,0.913000291749368,-0.3289218881592072,0.39001972753478475,0.384371857842287,-0.33470053229631813,-0.4384675933323553,0.9486919853736592,0.4910185023859841,-0.965781230947204,-0.5418394355535914,0.9794677977365646,0.5907513385053347,0.18240068359483372,0.7951423458603156,0.04444476306157124,-0.7577620935569956,-0.9996901336377843,0.6672302125641353,-0.005330715376093855,-0.7102473987955759,-0.054008569769069086,0.6301760041917814,0.11315756977653359,-0.7886319123371545,0.9911731975648544,0.5337667226515099,-0.981561452716205,-0.8559120582576958,0.9684914315793999,-0.5002781606113481,-0.9520091829719205,0.44802446663871365,0.9321727778065734,-0.3941922750741019,-0.3801805862624352,0.3389712496325174,0.8827286227077719,-0.28255594722363064,-0.4870621259138353,0.9645949096837257,-0.8636717464040526,-0.978543309542618,-0.5870855650803048,0.9890440667552348,0.6340810518925606,0.12824356962127728,0.7607140239981498,0.9995669437221156,-0.7208631137198165,-0.9995519888583851,0.7070471330291741,0.04947887185255583,-0.7477582902111531,-0.1086497762968304,0.7858349156914716,0.16743788153475778,-0.8211428563912085,0.9824183524185588,0.48662197733575946,-0.969611086539171,-0.8829652831192424,0.9533876483762932,-0.4520749261781449,-0.9338051969914959,0.39835671279854856,0.9109327260551198,-0.34323499322961826,-0.43029663015030195,0.9457845481291214,0.8556513739256822,-0.2295621242996773,-0.5341927657784628,0.1714114717044465,-0.8347504561204191,-0.988364320976884,0.8006107518979969,0.995647707994127,0.6755049988808531,0.07370101235914751,0.7239993331902379,0.9996774634760007,-0.6817975390975426,-0.044948155995012014,0.6371936088408208,0.10413974753848981,-0.7830217518703059,-0.9793660875106278,0.818545746991442,0.22121494928721153,0.5583181314237584,0.9707107934509832,0.4380146621945567,-0.9547464995015004,-0.9073647059739777,0.9354184047718536,-0.40251295503212053,-0.3717746648448846,-0.950767412577017,0.8869548145681905,-0.2912460992354216,-0.4791193932235675,0.9621627574247748,0.8260024166328878,-0.9766339571502696,-0.5797178591273326,0.11716262407238746,-0.8033202762145197,-0.9952147476456843,-0.6721535812674668,0.9992588738366849,-0.727120657643862,0.0189369425435323,0.6851086215125555,0.9967833961759479,-0.6406827834801744,-0.09962757628744554,0.5939996664234307,-0.9928853505330292,-0.815931797448195,-0.9668190792556809,0.8487963928372814,0.27432714302074446,-0.8786704750692971,0.9560857083915627,0.9054487905914181,-0.937012367958725,0.4066609162674215,0.9146377083421996,-0.35174120847560875,-0.4220902567556962,-0.9663221631241069,0.4751332004132466,-0.2383818486474793,-0.5265021359114934,0.9756491322334451,0.7938708624443835,-0.9869438422344683,-0.6235005777222354,0.9947613124988495,-0.7694756718664734,0.08274474053993083,-0.711719791202693,0.9998667107200977,-0.6884056090189717,-0.9971366511352154,0.7386544671708709,0.9908934401046142,-0.7773471545365985,-0.15400756027480558,0.549020424473956,-0.984867713878236,-0.8463895139448775,-0.26996256674895375,0.8764959332050796,-0.9574052474946056,-0.9035142471876345,0.9385870537591126,0.9273492638958175,0.43627158742390226,0.35598350512403465,0.8911080166436389,-0.9412775355933652,-0.4711372325704406,-0.9789725778555625,0.522640533579192,-0.18480112795542009,-0.5723024467059067,0.9862031384942627,0.619948001126175,-0.06708787133833301,-0.6654093301306514,0.9988685723774096,-0.7333183649453681,0.02800596819968425,-0.7491468871248422,0.031350832984747286,-0.6476215184717753,-0.9914939802887557,0.774485837768947,0.9820252978574935,-0.5528058076612161,-0.20792466584515978,0.84396522207231,-0.9738900017080155,-0.8743033589739119,-0.322324461277379,0.9015611155624651,-0.940142429776617,-0.9256424562275475,0.35910863528498904,0.9464625366334544,0.48492795110702486,0.3042361654587104,0.8649000494929558,-0.24718195594197956,-0.5187681788343265,0.18925686514244305,0.5685770411154438,-0.13066497704021943,-0.6163826701870275,0.9937930555455772,0.662016635358364,-0.012308163967979189,0.7363946202862895,0.9999736763698951,0.7461346741642546,-0.026816977659082173,-0.7843223797841484,0.08607913608713791,-0.6048909648889055,-0.14503801708471661,0.8079894474574918,0.9702056231367662,-0.5063077066716034,-0.2612168420937901,0.8720927974841641,0.31802746025553513,0.47218605425233856,-0.3737175914403918,0.3455275738167751,-0.9200539609095644,-0.9449885946075038,0.4097157805685323,0.962731162784063,-0.8671678518913135,0.2515744268222435,0.8360925764150103,-0.19370870870131462,-0.5648399380493209,0.13516050836568871,0.7652246260066867,-0.9932782536593286,-0.6586103207546048,0.998396071463197,0.702095541218391,0.04250853628404603,0.6982113252475284,0.9980733030238674,-0.6545069590287568,-0.0815593235775238,-0.8171405472515683,0.9836971179066928,-0.5603423773615375,-0.1990429365514058,0.8390645992461178,0.2568358736383668,-0.45828786928564863,-0.3137239163763358,0.8975992487585966,0.36950663455410593,0.42316824707768025,-0.4239874922838536,0.943495211098192,-0.8972002179207355,-0.9614945164164035,0.8694178138316376,0.9761062460732917,-0.8385722423761421,0.1981565670431596,0.5610912143918806,-0.13965325900069303,-0.6092140389420911,0.08065791905046428,0.7287949145665626,-0.9981290080973731,-0.6988584808208674,0.9999983516229154,0.7400642592920122,0.09719747473042166,0.6579295166527478,0.9931731640187048,-0.6120897321630839,-0.13605653834446693,0.564093408822892,0.9723635563674681,-0.5141096491845053,-0.2524496212351875,0.46231455801474375,0.30941391817765035,-0.40889062183560726,0.9446923811307547,0.9204079148163187,0.4198752358017798,0.3728785838461832,-0.4729830747827585,0.9602380889849834,-0.8716498890249067,0.2603437512137257,0.841034656183766,0.9865475869332153,-0.8074562566443519,-0.9945087180578045,0.6056108861183204,-0.08517807354592659,0.7837610212094697,0.02591290780593684,0.6901747688661037,-0.9999798294515395,-0.7370061822684993,0.9985950802812544,0.7758086724535079,-0.9936920412697687,-0.8118778027162548,0.9852879869988279,-0.5678328350514592,-0.1901448275042528,0.5179947951579259,0.9581075012641451,-0.865353646092367,-0.30509755433013447,0.4130256772185875,0.36106200171768094,-0.3582644305374451,-0.41575434112295184,0.940450242923815,-0.901169463464916,-0.9589619063385939,-0.5205570799478275,0.9740949170844461,-0.8434797671780354,0.2070399621320957,0.8101237213955594,-0.1486300485365499,-0.7739134155477334,-0.9987494645751351,0.6483103601363633,-0.030446880582332678,-0.6923412935549321,-0.028909986145931904,0.7339329426350761,-0.9988251549737582,-0.7729387700271458,0.9941904750494543,0.8092213488511466,-0.9860530237640098,-0.8426528468845791,0.18568985934970733,-0.5218692842967043,-0.95939672796693,0.47033931889236946,0.9409717999751723,-0.891518053833069,-0.3568284995010554,0.9168234818175156,0.411624893027552,-0.3065614552672443,-0.46497103338525037,0.9576659947324555,-0.8760601958550794,-0.9730591816995848,0.845907525055079,0.9850240479174306,-0.8127745192716955,0.15311390275569792,0.7767779140266212,-0.09421303241012267,-0.738044533988886,0.03498022696754705,0.689061300766221,-0.999881067418314,-0.7308446036182592,-0.08364598950230642,0.7700529657408854,0.14262145193305362,0.622793254518285,0.9867977742172039,-0.5752765643220198,-0.9754503682270443,-0.8708952503490611,0.2392600632660339,-0.47433722594551586,-0.2964460850242173,0.4212702112505608,0.3525876561637269,-0.36671896061862724,-0.40748697647173404,0.9373278826885585,0.868381398345569,-0.956350380827677,-0.5127902289564584,-0.27345734210094885,-0.8483178798680354,-0.9842318727552699,0.8154085957372419,0.992992633364207,-0.7796264316619547,0.09872765090042,0.6413769127532372,0.9999999613232521,-0.6999574179163366,-0.019841156763768592,0.7277412287552085,-0.999223652819567,-0.76715131896509,0.9951259715978857,0.8038585511843047,0.19664925097754543,0.5789807142223357,0.9764391969642147,0.8686571066093988,-0.9619159415386688,0.4783253743419562,0.29211115755462735,-0.42537952028272236,-0.3483395589536111,0.3709349522057467,0.40334067658587563,-0.3151834913752796,0.9069841822277684,0.9550150916907076,0.8399000950909992,-0.9709276756907443,-0.5590682045446221,0.9834194487481103,-0.8180258966006939,0.16207206886113887,0.7824589098504782,0.9979767233913432,-0.7441351327975215,0.04404466751662521,0.6824588542764254,0.998481941250653,-0.7246228818924206,-0.07460290677828493,0.614018975646134,-0.9955630151204304,-0.8011523177127298,0.9882263553175611,0.8352480943697668,-0.9774079371770266,0.5334280147030471,0.9631458765792207,0.8945015504445846,-0.94549042218239,0.42948007787712794,0.9245037783845662,-0.9113054616574716,-0.3991860786728267,-0.9595534754626215,0.45288143383367757,-0.2627007203547085,0.8825403694815482,0.9698319489187638,0.5553017547088092,-0.982586792610151,-0.603665869081457,0.9918797474951518,-0.7852752903189194,0.10775070159752725,-0.6938506142096965,-0.04857557519551858,-0.7064072937808182,-0.010770694601961988,0.7214896271844142,0.9939629273336585,-0.7613007370547753,-0.1291404335447221,0.7984296019369835,-0.9889101565741727,-0.8327454079398934,-0.24569180472124394,0.8641272522531099,-0.9643559965821722,0.48627206717053273,0.28342336289800807,-0.433571799671995,-0.9262231779839473,0.3793439547916545,0.9022252827996439,-0.9324997960294188,-0.44883282209627373,0.2670744725507059,0.5010610303643677,-0.20942838748816622,0.8554440318304436,0.9817339214718325,-0.8232099564820476,-0.9912926894517726,0.7880755151251886,0.9973588956638615,-0.7501644948188488,0.05310548351712624,-0.7322721258272074,0.006235084484991799,-0.66655630776196,-0.06555368478985622,0.7583519222857202,0.1246413237493228,-0.7956904598721689,-0.18328982144743092,0.8302255892334136,-0.9792850727227462,0.5410790953575593,-0.2984451374119718,0.8904092268949237,-0.9484056295962265,-0.9158456938130792,0.3355526187934405,-0.3835367927899593,-0.390852330828385,0.3280676920339378,0.8772350981915347,-0.9508914496194991,-0.49713057313375286,0.21386141047559526,0.5477346596805618,-0.9808608528794827,-0.5964089457237622,0.9906852372994716,-0.7908595266595705,-0.03742058193329433,0.7531560567826617,0.9998404253650891,-0.6724500531825138,-0.001699346092091123,-0.7684927522296311,0.06102700426707667,-0.6247019491292403,-0.12013964967723736,0.792934947871331,-0.9902167101604925,-0.5278087163847287,-0.23688832144402988,0.859526286650461,-0.9667166922990569,0.4941787434243787,-0.35030147639328796,-0.44172839932662106,-0.9296047759476544,-0.9364741925721499,0.3866733523492415,-0.3323490444243669,-0.8794035171376101,0.2758054033065318,0.4931898883132801,-0.9664251452745345,-0.5439341701678391,0.1600055758576111,0.5927620415543589,-0.9900574035355116,-0.6395014701774087,-0.12126842002280207,-0.7561321238812139,0.017399624590681458,0.7159729453915451,0.9993168782212211,-0.6732912225892846,-0.056499068220690986,0.6282373334151066,0.11563550394251644,-0.5809700135204459,-0.17436452806494918,0.8251347627054408,-0.981081620389908,-0.4804684296709173,0.9678672194458151,0.8862436292878485,0.3460495100515645,0.44579310937864425,-0.40110496451079963,-0.3918987108975954,-0.9080099426635115,0.3366235593159582,0.43663191731465373,-0.2801624022427692,-0.8519918196236247,0.22271416586870935,0.5401224901633165,-0.16448125410144937,0.8308588944047174,0.105668835448165,0.7457642103009662,-0.996278280770861,-0.6806719368589532,-0.0666882805033302,-0.7191321233165868,-0.9994742241613354,0.6766379368923221,0.0519699698050439,-0.6317597928194089,-0.11112897921006083,0.5846558075571623,0.9779211582008914,-0.8225638596187773,-0.2280653440196956,-0.5524720328584949,-0.9689978344216218,-0.431684067966563,0.9526320298851122,0.9102973166639338,-0.9329098743517569,0.39606761897512377,0.9099008537031006,0.9529225620038209,-0.8836860342343841,0.284513637328826,0.48527816040222954,-0.9640544913919331,-0.8220194125959919,0.97812064407221,0.5854317233761901,-0.11017811686830241,0.7991137105446957,0.05101450138817454,0.6773420882602826,-0.9995047873877961,0.7222765063591401,-0.011907705591874032,-0.6799707305562461,-0.9961953587588722,0.6352692548737213,0.106620168193715,-0.5883295733257922,0.9920237197653101,0.53931706566247,0.9649992823209291,-0.8524923344947793,-0.28108069670740915,0.8820051004210625,-0.9540016707565598,-0.908410350952993,0.9345336509771105,0.9316150540633409,-0.9117730451280732,0.3451517249825109,0.8858000442798025,0.9681073594342555,-0.48130728008158086,0.23154859354229407,0.8245938896465841,-0.9771669694319671,-0.7895763798161453,0.9880517438344435,0.6289814084935166,-0.9954553750973658,0.7649667453131322,-0.0037931596357959124,0.7166405429870114,-0.999727225938525,0.683289535014671,0.9965803947622424,-0.7433750465659326,-0.989922371964783,-0.8288619015774736,0.16094991364756692,-0.5431310960850049,0.9836250180292431,0.4923573758794229,0.27672490609208283,-0.8798585955314316,-0.33325124549256957,0.9065046962919168,-0.9361382012112358,-0.9299569637089948,-0.4425865331055531,-0.3494052003054172,-0.8878958305424994,0.29319845799469135,0.8590369128149868,0.9803824555407613,-0.5286210925267134,0.17788761738563988,0.5780532285210337,-0.9873425169787577,-0.754760230650698,0.06007202206430885,0.6706406544780492,-0.9991782096077961,0.7285206293418203,0.9998228765705325,0.7537850941033709,-0.9969449278714257,0.6422488983971472,0.9905545032136164,-0.7789138346926557,-0.9806741175950234,0.5469339525375808,0.2147959150494159,-0.49630020767210425,-0.27236342234703187,0.4439178782068049,0.3289713280194442,-0.9045803918862081,0.9377234920433253,0.9282797411207361,-0.9154611154518624,-0.948708538309226,-0.49106410933667194,-0.2975318648995429,-0.8613499949114765,0.24036396648865344,0.8296918974112016,0.9897109568289912,-0.5743461044345992,0.1236919899521686,0.6219032128473524,-0.9945505508496857,-0.6672692071647359,0.005278362708022162,0.7102842521140807,-0.9998979575999752,-0.7507967953808878,0.9972889505867926,0.7886641015639606,-0.0930809452738741,0.599277946456899,0.981551444183164,-0.8121115533151081,-0.9684783918002179,0.5002328289582411,0.2679963352021366,-0.8755113256416578,-0.3246846425380735,0.39414416028955523,0.3802290080481465,-0.3389219952559726,0.9172769184750986,0.9472647887809627,-0.4161185421375392,-0.964608715837593,-0.5380657646638263,-0.24476428067635236,-0.8322153232426562,0.1868070475114252,0.7978531961689354,-0.12819164833857116,-0.7606800410316072,0.06912459925978194,0.6638840319574959,-0.9987694068920177,-0.7070841546301563,-0.04953116106537699,-0.6931613318185652,-0.9976124558306788,-0.7858672918615698,0.9917576163594485,0.8211727345427398,-0.9824085770714235,0.554505830815937,0.2059273821556851,-0.504155158831046,-0.9533718495227607,0.452028227370488,0.3203912772394948,-0.9006759925805206,-0.376030004705678,0.9248680376590386,0.4303438883270768,-0.28685382167617046,0.8940734173429123,0.96340277864004,-0.8659229495839392,-0.977609707412879,0.8347216277030675,-0.19126104358925766,-0.8005793814365568,0.13268866940658444,0.7636165021022467,-0.07364880123477185,-0.7239632187844094,0.9985341814319116,0.7038695101295737,0.04500045642554394,-0.7447739207499262,-0.1041918161378793,-0.6526190873013971,-0.992328573504504,0.6065153415505786,0.9832454986257958,0.8512132865079941,-0.9706982141615094,0.5080671165954594,0.2592457102068877,-0.4560694940867137,-0.316091320452171,0.4024650294258166,0.9127732234015479,-0.9231336269754162,-0.4262451874651139,0.9443188548917927,0.4791653457542877,-0.9621770211195771,0.8681827280793885,0.9766452070583657,-0.8372107592296159,-0.9876724378209251,0.8032890961871662,0.9952198618299396,-0.6111901437894193,0.07817148801481447,0.727084715528009,-0.01888459850096903,-0.6850704842113267,0.9999997697424097,0.7417394687515324,-0.9981978877040447,-0.7802252268041718,-0.15853931682476044,0.8159620643548791,-0.9840621916280873,0.5620320773882678,-0.2743774875857818,-0.5119686217698098,-0.9560703629675152,0.8688554440922663,0.3117848606401733,-0.40661308673019503,-0.36760887609301796,0.35169220011377317,0.42213771735581057,-0.9428167311383102,0.8980999091874396,0.23833100418597536,0.5265466446832336,-0.9756606139411974,0.8396826666127847,-0.20015713961088963,-0.8059822846731338,0.1416744295703116,0.7694422339424505,0.9990762513358061,-0.6536468368161924,0.023419357802592283,0.6883676347931972,0.03593636295977111,-0.7386897567641584,0.9984598022892901,0.7773800875247601,-0.9934092302069248,-0.8133315218911198,0.9848586392762716,0.8464173943420413,-0.19259303696738972,0.5158595940874691,-0.32666431280547914,-0.46412379607976095,-0.9385689883220295,0.41075277868328214,0.3633869240727817,-0.9196078661141837,-0.41802156250316214,0.2998623400392691,0.4711834107648352,-0.9596661463884182,0.8726486549347782,0.18474967603585804,-0.8421372989974139,-0.9862118037060441,-0.6199890790036474,-0.14616298379976606,-0.7723313848577971,0.08721194383774349,0.7332827696242442,-0.027953635291992983,-0.6941389573728445,-0.031403160611661124,0.6475816262697587,0.09064931565282422,-0.7745189550131302,-0.14957609142538197,-0.6172776647517527,-0.9856348251848347,-0.5023458030804213,0.9738781150822046,0.8743287690654479,-0.24607999699184735,0.46813666565344164,0.9401245874025487,-0.41488402011817466,-0.9182466915946013,0.36016963872812335,0.4138968075898373,-0.9397543245307267,-0.8648737698238009,0.958381080834567,0.5188129358318312,-0.9736312308569607,0.844574605883746,0.1306130723042483,-0.8113188615617595,-0.9937988782176046,0.7752046464091302,-0.09172952688910313,-0.7363591994627846,-0.9999732951338979,0.6949193825439625,0.026869312198584842,-0.7325448041050328,0.99892200181485,0.6048492746089121,0.14508981671001495,-0.8080202928168237,-0.20353715216245002,-0.5732345340001767,-0.9748980390509775,-0.8721184149316867,0.959970545232317,0.899612299312612,-0.29882734969273494,0.4190067260418239,0.9200334480211038,-0.36439728681156797,-0.409763537475436,0.3085039885901491,0.4631627008848602,-0.9570762982704331,-0.836063854800101,0.9725864826408909,0.5648831393302528,-0.9846700116941596,0.8139621401737054,0.07608390360997964,-0.7780619594841316,-0.9983990340951008,0.7394204800019515,-0.03702037170672314,-0.6875804075237902,-0.9980700533469877,0.6544673760273056,0.0816115024544248,-0.6084550616842634,0.9948769076998761,0.5602990143060576,-0.9871263483256197,-0.8390930800131295,-0.2568864704978676,-0.5274685144943235,-0.9612311418222309,-0.8976223255594188,0.9431777297129537,-0.4231208116367843,-0.9218012763726288,0.36861743805978203,0.8971770961705271,0.9615089030768943,-0.4591380115017579,0.25591111229766783,-0.8792127835582332,-0.9715217251633043,-0.8047411026602547,0.9838687208656163,0.6092555546625615,-0.9927493112210066,0.7809032652985949,0.9981322077808857,0.6988959261577109,-0.9999984453103381,0.7014139435976485,0.01780005029283127,-0.7263395684564532,-0.9931670556680299,0.7658401883506682,0.13610840473220598,-0.564050179268684,0.9878416548723682,0.5140647436836501,0.25250027856914065,-0.8676439255858942,0.9624719627668546,-0.4801171585895695,-0.9446752101297898,-0.9204283816118126,0.9235501402792077,-0.3728300056505534,-0.8991711819000853,0.9350157923793139,0.871624227906676,0.9751222185801145,-0.5071325203135674,0.20254908070954275,0.557374415034125,-0.9830471886632874,-0.6056525460822164,0.9921938861048126,0.6517968180294016,-0.9978448466466519,0.7454973415732128,0.9999801606002238,0.7370415661918028,-0.013264823384315366,0.6612992679870688,0.9936861688226901,-0.7629156748101336,-0.9852790383333506,0.7999289109243206,0.19019622551547335,-0.8341238057342474,0.9778373881818793,0.8653798824286354,0.3051474111640285,-0.8935870183568916,0.9461532555106007,0.9186458330176042,-0.3421667657705833,-0.9404680381998715,-0.46902811661592375,-0.3214186380339722,-0.8738385776770299,0.9530439189773616,0.5032180747305381,-0.20698874281184051,-0.5536028137050684,0.1485782764243011,0.6020370772627058,-0.9916180483391559,-0.6483502198827527,0.030394551407742148,-0.7485127975845357,-0.9999413030517016,0.7078507835001806,0.008729323575317286,0.7729719861885301,-0.06804242269292346,0.6191970200924611,0.12711579204492354,-0.7971987950322567,-0.9744297092243726,0.5218246247940024,0.2437124008052987,-0.8630980355976798,0.9648941760167451,-0.48805490297153864,0.3568774059873614,-0.9168443848961638,0.926990831229194,0.9389167393205119,-0.3931470082937861,-0.9576810650043677,0.876034949750864,-0.26904122855487544,-0.49929327631797965,0.9682076182721903,0.5498198229688243,-0.15306216646394097,-0.5984092225859612,0.9910218097708887,0.6448902830671672,0.11428727710530345,-0.6890992404943854,-0.02442816001496476,-0.7110473923005051,-0.9990323794180735,0.6680767399351487,0.0635164722959909,-0.6227522930702298,-0.12261551665874743,0.5752337405967831,0.1812825571641321,-0.8290858892695186,-0.23931089576535977,0.47429113633033254,-0.9660755184892214,-0.8894781755883457,-0.35263664688618224,-0.4394892606245553,0.40753478561924633,0.385421340607091,0.9050422836706399,-0.32999548881726315,-0.4429456252881843,-0.9720157273014675,0.8482901582439012,-0.21585520047445425,-0.546025520653794,0.15754290751788985,-0.826926270041241,-0.09867555313350697,-0.7410623058246437,0.9968596155549535,0.6858052347181575,0.0596722527841702,-0.7277771344351532,0.999221588904347,-0.6714448939362584,-0.9951208075670624,0.626294754011522,0.11811271867331392,-0.5789380275391978,-0.9764278981428882,0.8265413195549431,0.23490446732335568,-0.8584811190599819,-0.29216122713243525,0.4253321390799982,-0.9504704793579154,-0.913184938706195,0.930355237727786,-0.38960270849310435,0.45696729644530343,-0.9550306161611589,0.8803735804337454,-0.2777671142099651,-0.491412944198987,0.22028181362295055,0.8179957827755474,-0.1620204074027572,-0.5911166544610469,0.10318816444934886,-0.7948676511352619,-0.04399236485733577,-0.6824971197017377,0.9997013034860907,0.7246589600186086,-0.9993902411584953,-0.7642676531112307,0.9955580874473204,-0.6298243300364152,-0.11360749072579628,0.582630403846824,0.17235397060653168,-0.5333837310820626,-0.9631317932619194,0.8561461443382018,0.2878203588443499,-0.885296135380984,-0.3441334514372065,0.3750947820732482,-0.9320087475414517,-0.9341470729362955,0.9088633203329075,-0.33854518342599554,-0.8825157497830737,-0.9698447100129856,0.8530588646987772,-0.22470389485938058,-0.8205964487472841,0.16649457400183393,0.7852428748015621,-0.9891108140130865,-0.6344311537914307,0.048523283526998445,-0.7604200126290104,0.01082304495503256,-0.7215258770146012,0.9995383327107938,-0.6781396915247291,-0.9959748854655721],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],32:[function(require,module,exports){
module.exports={"expected":[3.135095805817224e-14,0.19975924546521834,0.39146619978763,0.5673931595176209,0.7204485124679824,0.844462600458311,0.9344364181110172,0.98674312265705,0.9992742318945281,0.9715246170636294,0.9046128645766713,0.8012361858226548,0.6655616926302876,0.5030584210748672,0.3202768747448853,0.124584974074305,-0.07612894438013779,-0.2737741066271227,-0.4603834401756131,-0.6284347265659114,-0.7711538218441553,-0.8827877221672955,-0.958836467272162,-0.9962345337824432,-0.9934744063937264,-0.9506673457851993,-0.8695389037038822,-0.7533593660085821,-0.6068119275127992,-0.43580391249727973,-0.24722865058693883,-0.04868760677396403,0.15181603348292447,0.3461999725019611,0.5266285976344522,0.6858288346521817,0.8173833252220423,0.9159891104911325,0.9776713932504442,0.9999437619300285,0.9819084177990489,0.9242923652145185,0.829418106090318,0.7011100198919773,0.5445402029782067,0.3660199815004213,0.1727455019744958,-0.027492345240689983,-0.22662197657561428,-0.4166164806200265,-0.5898171827606637,-0.7392423661984733,-0.8588687048126487,-0.9438740633142088,-0.9908318774218579,-0.9978492785991192,-0.9646433955465273,-0.8925527567380446,-0.7844833343652887,-0.6447914046575512,-0.4791079464747739,-0.2941116566638662,-0.09725973192389181,0.10351273064209479,0.30011259713026145,0.4846149309006835,0.6495824466120003,0.7883653070441347,0.8953691779011502,0.966280735313796,0.998241535837669,0.9899632402503264,0.9417795464794113,0.8556327382458149,0.7349953916464363,0.5847303956815909,0.41089492929832944,0.22049629662920914,0.021209462704269093,-0.178932324233017,-0.37186135280109145,-0.5498006577618828,-0.7055775093328759,-0.8329125457794704,-0.9266728943587621,-0.9830790773167677,-0.9998573625597087,-0.9763314177489768,-0.9134495732438686,-0.8137465949240341,-0.6812415078280731,-0.5212755893358658,-0.3402970623850175,-0.14560116773499812,0.05496390704032573,0.25331338783510343,0.4414518110916764,0.6117953207754777,0.7574773734579571,0.8726255285429942,0.9525981662292726,0.9941715911096599,0.9956699792684799,0.9570329307093359,0.8798179040779627,0.7671374355353319,0.6235336724885809,0.4547952797203925,0.26772409842889094,0.06986096414695006,-0.13081826418607526,-0.32622421093695686,-0.508480066345676,-0.6702391005686685,-0.8049808102092547,-0.9072737596782356,-0.9729945222524533,-0.9994938953221931,-0.9857036896952306,-0.9321797882813732,-0.8410797384635533,-0.7160757814067914,-0.5622068240905339,-0.3856753210707721,-0.1935972536624941,0.006284715123673178,0.2059133471703701,0.39724161635907906,0.5725570840302316,0.7247927872291383,0.8478121078402922,0.9366561395390696,0.9877435812052446,0.9990150990990697,0.9700163385622601,0.9019162390453115,0.7974599141817464,0.6608579963134495,0.4976169059853876,0.314316888245918,0.11834676310114187,-0.08239391766972684,-0.27981330128637405,-0.4659534163899085,-0.6333109587068648,-0.7751397490927582,-0.885722671876949,-0.9606021316794163,-0.996759738990705,-0.99273798139171,-0.9486989758498705,-0.8664179337874363,-0.7492116023451626,-0.6018045663718083,-0.430138800505095,-0.24113414829335683,-0.04240938344290703,0.15802490279590478,0.35208920840059516,0.5319608051387166,0.6903890725853064,0.8209877704854726,0.9184924679691496,0.9789727526537855,0.999990665487432,0.9806989748291085,0.9218753283388381,0.8258909060164723,0.6966148379835733,0.5392582399269217,0.3601641531301644,0.1665518566082899,-0.033774141883455386,-0.23273870539937497,-0.4223215764097659,-0.5948806732203318,-0.7434601421301987,-0.8620707477539662,-0.9459312989789432,-0.9916613786819907,-0.9974176082756384,-0.9629679542614074,-0.8897010814956479,-0.7805703761369043,-0.6399748947101911,-0.4735820382269589,-0.28809909936514566,-0.0910028916375325,0.10976164081085939,0.30610168373896884,0.49010277398922036,0.6543478313367894,0.7922161408431442,0.8981502337418092,0.9678799088915092,0.9985943644978698,0.9890555014768577,0.9396478312038515,0.8523629758678477,0.730719386221319,0.5796205129015813,0.4051571484347156,0.21436190751248682,0.014925742435713757,-0.18511207901641277,-0.37768803630905823,-0.555039396500318,-0.710017129849209,-0.8363740870604237,-0.9290168217452998,-0.9842109071434068,-0.9997314707890791,-0.974952879075785,-0.9108739565340906,-0.8100777232351516,-0.6766272733037958,-0.5159019916762728,-0.33438071120312135,-0.1393805510271171,0.06123803634045773,0.25938811970212905,0.4470822732072806,0.6167545493255974,0.7615654620400815,0.8756776863891521,0.9544913609183339,0.9948295080020712,0.9950660977476201,0.9551915932270914,0.8768133349109316,0.763090748805949,0.6186079900569728,0.4491891557457111,0.26166351565512114,0.0635902245430731,-0.13704638723362192,-0.3321586619140328,-0.5138816276533755,-0.6748900353800802,-0.8086936394362378,-0.9098988192498237,-0.974425996070363,-0.9996740807057866,-0.9846253233753658,-0.9298863391825851,-0.8376636554726699,-0.7116747667598536,-0.5569982825990335,-0.3798692089369468,-0.1874276151488834,0.012569182013422057,0.21205931570320233,0.40300134266768,0.5776983936635506,0.7291084340999899,0.851128128310635,0.9388388648908398,0.9887050258236961,0.998716507171046,0.968469746322367,0.8991839895954397,0.7936521444419354,0.6561281974047799,0.49215573600623347,0.30834448684774635,0.11210387766336845,-0.08865563656142379,-0.2858414438701698,-0.47150498836032384,-0.6381621763099938,-0.779095059845107,-0.8886226372822091,-0.9623298541907801,-0.9972455741487065,-0.9919623451909297,-0.9466931341699043,-0.8632627420658023,-0.7450342462963185,-0.5967734351335581,-0.4244566988757504,-0.23503012167471596,-0.03612948502457202,0.16422753043586857,0.3579645374675245,0.5372720012368051,0.6949220415073889,0.8245597883458591,0.9209595468002463,0.9802354445578288,0.9999980713793202,0.979450796177467,0.919421879199858,0.8223310848753679,0.6920921411584681,0.533954977235324,0.3542940989838664,0.16035163277104186,-0.040054604514009294,-0.23884624150167763,-0.4280099913273297,-0.5999206670628188,-0.7476485528478729,-0.8652387405954554,-0.9479511722168351,-0.9924517112670644,-0.9969465419173452,-0.9612544776351177,-0.8868142648094459,-0.7766265869131722,-0.6351331070125468,-0.46803742441959717,-0.28207516271845146,-0.0847424569157329,0.11600621561069334,0.3120786799329004,0.49557125898172366,0.6590873706084655,0.7960356836618518,0.9008958144138111,0.9694408531154709,0.9989077506437074,0.9881086969553731,0.9374790016861487,0.8490595468279012,0.7264145188168094,0.5744877362506329,0.39940336466019294,0.20821905152191933,0.008641432629900445,-0.19128452223669062,-0.38349980188215205,-0.5602562122736828,-0.7144287060845778,-0.8398025932089502,-0.9313240547936729,-0.9853038625740069,-0.9995660915906163,-0.9735358316804232,-0.9082623620937114,-0.8063768550687108,-0.6719863133321634,-0.5105080169021642,-0.3284511526404553,-0.13315442906168873,0.06750974685842194,0.26545260624854883,0.45269507645206475,0.6216894172834292,0.7656234702834606,0.8786952566880414,0.9563468550749695,0.9954481310845539,0.9944229130719912,0.9533125275546556,0.8737741333408574,0.759013921492065,0.6136578738257217,0.4435652896822878,0.2555925976869687,0.05731697325033179,-0.14326909721816472,-0.3380799932768102,-0.5192628916470639,-0.6795143133617036,-0.8123745268541859,-0.9124879396066745,-0.9758189819769194,-0.9998147809283445,-0.9835080662907953,-0.9275561614013614,-0.8342144864140054,-0.7072456423587122,-0.5517677407704068,-0.3740480927161119,-0.18125057361291783,0.01885315244518979,0.21819690830981733,0.40874515121535765,0.5828168853459542,0.7333952826210466,0.8544105308930495,0.9409845079530079,0.9896274185371973,0.9983784679042683,0.9668849014312743,0.8964162241455867,0.7898130270025732,0.651372482722209,0.4866751268431803,0.3023599064483766,0.10585656434268706,-0.09491385372975504,-0.29185829627883714,-0.47703793681037865,-0.6429881877615641,-0.7830195978742007,-0.8914875038401429,-0.9640195665646426,-0.9976920200668886,-0.9911475284275186,-0.9446498999721018,-0.8600734531627928,-0.7408274628593273,-0.5917187325178435,-0.41875783204129596,-0.22891681182839935,-0.029848159562487923,0.17042367141121717,0.36382572763880144,0.5425619761470091,0.6994275623748212,0.8280992377155818,0.9233902495397018,0.9814594190887284,0.999965979313176,0.9781639311447943,0.9169321147040845,0.8187387832728767,0.6875421080543781,0.5286306243717694,0.34841005091712657,0.15414507535962926,-0.04633348506653744,-0.24494434364718354,-0.43368150069161426,-0.6049369652182753,-0.7518074329173543,-0.8683725582075119,-0.9499336032469707,-0.9932028439604959,-0.9964360981304349,-0.9595030333465869,-0.8838924207031273,-0.7726521224657994,-0.6302662328056261,-0.46247432405403466,-0.2760400846573307,-0.0784786750335843,0.12224620839282879,0.3180433496325639,0.5010201698836867,0.6638008772246304,0.7998237846358947,0.9036058114721164,0.9709635063314797,0.9991816818970432,0.9871228640827738,0.9352731435907671,0.8457225816049285,0.7220809594668631,0.5693322684633317,0.39363380523790964,0.2020679712881319,0.0023567815043718287,-0.1974494100942538,-0.3892964199670567,-0.5654508990281032,-0.7188120637904737,-0.8431979288059838,-0.9335945023726279,-0.9863579004389168,-0.9993612314964697,-0.9720803315334781,-0.9056148930754364,-0.8026441366016632,-0.6673188112222227,-0.5050938780648417,-0.3225086209028187,-0.12692304775795357,0.0737787908740953,0.2715066079387363,0.4582899991311313,0.6265997297314785,0.769651237904893,0.8816781202516227,0.9581645754108077,0.9960274359226903,0.9937404506461108,0.951395807911326,0.8707004194101736,0.754907114620345,0.6086835193148669,0.4379239036619803,0.2495115843134294,0.05104145804982027,-0.1494861483550045,-0.3439879711444478,-0.5246236457771968,-0.6841117518638993,-0.8160233270753474,-0.9150410184836715,-0.9771734249519197,-0.9999159904324799,-0.9823519625709777,-0.9251893469751009,-0.8307323675230189,-0.7027885831450755,-0.5465154052006796,-0.3682122023309151,-0.17506637303548334,0.025136378214610944,0.22432588256737282,0.4144728151330698,0.5879123569070828,0.7376531634700637,0.8576591859391448,0.9430929839768529,0.9905107229130667,0.9980009946506062,0.9652618664872971,0.8936130520169958,0.7859427135012517,0.6465910401070328,0.48117529496921946,0.2963633834271867,0.099605069895919,-0.10116832198744476,-0.2978636208585339,-0.4825520431997866,-0.6477888024436981,-0.78691320816836,-0.8943171583941532,-0.9656712020607164,-0.9980990591115405,-0.9902935632851236,-0.9425693539602713,-0.856850193049224,-0.7365914181937883,-0.5866406581752985,-0.41304242509566624,-0.2227944602180181,-0.023565655157003613,0.17661308098667425,0.3696725474092538,0.5478305209257188,0.7039054572284681,0.8316059787931573,0.9257844801794486,0.9826446279019616,0.999894390556573,0.9768384305597072,0.9144061331923233,0.8151141430979802,0.682964918388419,0.5232853916376325,0.3425122413382769,0.1479324295208694,-0.05261053553737382,-0.25103277097251436,-0.4393358804892509,-0.6099293695527854,-0.7559366180710573,-0.8714720768105582,-0.9518785137671127,-0.9939147470940326,-0.9958862970764232,-0.9577136905744541,-0.8809356645837387,-0.7686471397785334,-0.6253744643215691,-0.45689295686169873,-0.2699941035556126,-0.07221179339804455,0.12848137269015614,0.32399545724501566,0.5064492914739382,0.6684881650110389,0.8035802941427307,0.9062801178771687,0.9724478083976719,0.9994161474381209,0.9860980417975206,0.933030344044765,0.8423522120024963,0.7177188793384783,0.5641543131707076,0.3878486980541213,0.19590890976659045,-0.003927962709393271,-0.20360649908826253,-0.39507766160854313,-0.5706232515833828,-0.7231670298329628,-0.8465599597423802,-0.9358280748039909,-0.9873729791057327,-0.9991168985982224,-0.9705864361243167,-0.9029316540490856,-0.7988797152690505,-0.662624951331048,-0.499659789012441,-0.3165533507087483,-0.12068665324322334,0.08004492077256282,0.2775498856516355,0.46386682025603376,0.6314852927218784,0.7736486058154736,0.884626159262702,0.9599444501294684,0.9965673996350801,0.993018737425928,0.9494415100038636,0.8675923145244816,0.750770490401587,0.6036851230016343,0.43226522050834504,0.24342071572290727,0.04476392681193906,-0.15569729508295507,-0.3498823621633271,-0.529963678304622,-0.6886821692966336,-0.8196398959791545,-0.9175579550392629,-0.9784892714975781,-0.9999777052206189,-0.9811570578797371,-0.9227859893884062,-0.8272174363364977,-0.6983037651637783,-0.5412414833467821,-0.36236176828755445,-0.16887525768056966,0.03141861114639182,0.23044599639376628,0.42018410818935115,0.5929846070858265,0.7418819084691958,0.8608739651333152,0.9451642096818301,0.9913549040625332,0.9975841023195167,0.9636007055970965,0.8907745839295572,0.7820413568077459,0.641784058416748,0.4756564576169974,0.29035515463493994,0.09334964124469279,-0.10741879429529173,-0.3038571804108527,-0.48804708973218386,-0.652563830741553,-0.7907757369377034,-0.8971114891784474,-0.9672846954425863,-0.998466675205418,-0.989400483493689,-0.9404515783118538,-0.8535930890373603,-0.7323262796152917,-0.5815394126798762,-0.4073107037860966,-0.2166633086644256,-0.01728221995435212,0.1827955146925047,0.37550476584067655,0.553077427475867,0.7083555492002854,0.8350798730693978,0.928142144152127,0.9837910241840448,0.9997833079371242,0.9754743467768481,0.911844034435787,0.8114573075167755,0.6783607529508324,0.5179194901592922,0.3366009031990948,0.14171394064183537,-0.05888550799547778,-0.25711128299686975,-0.44497290738314815,-0.6148976828762815,-0.7600359452145087,-0.8745371739797024,-0.9537858269571552,-0.9945873925488745,-0.9952971604713908,-0.9558865199941431,-0.87794411323728,-0.7646117970402457,-0.620457994775616,-0.45129354329582366,-0.2639374582173371,-0.06594205953850543,0.13471146222582978,0.3299347676737063,0.5118584093126517,0.6731490488290375,0.8073050638076862,0.9089186279991696,0.9738937006870356,0.9996111380060182,0.985034270578079,0.9307506916342744,0.8389485711435166,0.7133284507253245,0.5589540748917228,0.3820482716091893,0.18974211022834056,-0.010212551776466584,-0.2097555460258051,-0.40084329845903605,-0.5757730656420446,-0.7274934321992896,-0.8498885532245868,-0.9380246838660415,-0.988349058480843,-0.9988331025465315,-0.9690542044589252,-0.9002127509974232,-0.7950837397581152,-0.6579049190567924,-0.4942059643805029,-0.3105855772796027,-0.11444549184304749,0.0863078890540114,0.28358220068976553,0.46942531955350236,0.6363459132845838,0.7776154161268833,0.8875392572793747,0.9616864089294304,0.9970680008942463,0.9922578019176842,0.9474497110231596,0.864449941447984,0.7466042122242404,0.5986628823125808,0.42658946372824275,0.23732023249262832,0.038484627487172435,-0.16190229207370582,-0.3557629335169095,-0.5352827783086481,-0.6932253851374859,-0.8232240907182466,-0.9200386498593115,-0.9797664696405405,-0.999999922855149,-0.97992339941346,-0.9203461835691794,-0.8236698316874409,-0.6937913655565574,-0.535946183518164,-0.3564970216665677,-0.16267747208506322,0.037699603104794845,0.23655700805620006,0.425878804799456,0.598033435538365,0.7460813505912524,0.864054741498161,0.9471981032584824,0.9921599286420703,0.9971278073774188,0.9619014843732626,0.88790093199713,0.7781091110179761,0.6369517275178559,0.4701188327696403,0.2843354573848626,0.0870905254661433,-0.11366502377192696,-0.30983873820175645,-0.49352285936383566,-0.6573130840508977,-0.7946070316200068,-0.8998703858224527,-0.9688599829804657,-0.9987948538283946,-0.9884683243281109,-0.9382966566747849,-0.8503022697764652,-0.7280322155883507,-0.57641519752093,-0.4015628945046227,-0.2105235993359445,-0.010998102137871982,0.1889707283348426,0.38132215257201246,0.558302488554675,0.7127776625204681,0.8385207833323065,0.9304631483346448,0.9848985626546004,0.9996327358423815,0.9740717336748944,0.9092459196323379,0.8077684209670122,0.6737297935970197,0.5125331318793096,0.3306762699860301,0.13548985434061334,-0.06515815459188597,-0.26317963963097385,-0.45059235872182607,-0.6198417089499743,-0.7641052524321215,-0.8775677286496864,-0.9556554674820099,-0.9952207537568506,-0.994668711585066,-0.9540215937753981,-0.874917884824257,-0.7605462536389682,-0.6155170183584713,-0.44567630452213713,-0.2578703878684173,-0.059669721097356236,0.1409362309236726,0.33586104632787117,0.517247309750404,0.6777833445828775,0.8109979465095465,0.9115212376220605,0.9753011260897454,0.9997666458989908,0.983931592441321,0.9284342764011664,0.8355117934652355,0.7089098470404624,0.5537317590254719,0.37623275500855574,0.18356781624972998,-0.016496737467706784,-0.2158963080316152,-0.40659310278731786,-0.580900137796463,-0.7317911000051446,-0.8531835777795836,-0.9401842427970399,-0.9892861000110474,-0.9985098545507808,-0.9674836970574157,-0.8974582913117263,-0.7912563600024278,-0.6531589008316226,-0.4887326195843782,-0.3046055363307008,-0.10819981007091976,0.09256744834350564,0.2896033147883224,0.47496527747374073,0.6411813994347249,0.7815515121579855,0.8904172992401543,0.9633903830066821,0.9975292199273951,0.9914576741768212,0.9454204896413582,0.8612734242980707,0.742408444648254,0.5936169956166126,0.4208968575028058,0.2312103755795773,0.03220380809515923,-0.1681008942421857,-0.3616294529338671,-0.5405807356950886,-0.697741219938443,-0.8267757697241069,-0.9224830049612944,-0.9810049689339446,-0.9999826424585164,-0.9786510358992072,-0.917870025884821,-0.8200896936991953,-0.6892515625542457,-0.5306297148690471,-0.3506181941141298,-0.15647326104897502,0.04397910600298476,0.24265867618183723,0.4315566800337543,0.6030586428457171,0.750251323966752,0.8672013893993253,0.9491945843720494,0.9929257648547913,0.9966321278470822,0.9601642699316931,0.8849922097232636,0.774146131447921,0.6320942382779288,0.4645626391526441,0.27830452944316264,0.08082796978292636,-0.11990676370367773,-0.31580805797147155,-0.4989791358127054,-0.6620363747855625,-0.7984069408865229,-0.9025937393552242,-0.9703970024535662,-0.9990835820180669,-0.987497122606844,-0.9361046741643111,-0.84697786524737,-0.7237093957200532,-0.5712682150947934,-0.3957992242781007,-0.204375574739246,-0.004713549918091038,0.19513847800488823,0.3871244778279214,0.5635054977827859,0.7171716225240728,0.8419285736725676,0.9327474010518996,0.9859671995680548,0.9994426802196399,0.972630646654282,0.9066118914024974,0.8040476291526586,0.6690722232406874,0.5071265295480536,0.3247385757103415,0.12926041645660213,-0.07142822756904821,-0.2692376011867781,-0.4561940125483079,-0.6247612524946426,-0.7681443789943345,-0.8805636211193942,-0.9574873614944839,-0.9958148057014714,-0.9940009752399445,-0.952118985579106,-0.8718570988747447,-0.7564506701558201,-0.6105517302289893,-0.4400414624104264,-0.25179313214609605,-0.05339502581963542,0.14715543291733246,0.3417740591308314,0.5226157799363181,0.682390869226987,0.8146587963867064,0.9140878439479256,0.976670029015187,0.9998826649747843,0.9827900509408445,0.9260811898392912,0.8320420147135541,0.7044632428102904,0.5484875718433546,0.3704023779535887,0.1773862717033454,-0.022780271570246147,-0.22202854255766508,-0.4123268474872125,-0.5860042655374589,-0.7360598635010978,-0.8564449032604389,-0.9423066662986536,-0.9901840666850139,-0.9981471673786426,-0.965874975951743,-0.894668383787738,-0.787397727175965,-0.6483870841138439,-0.48323997081062486,-0.2986134640619047,-0.10194985461887934,0.09882335140075854,0.2956129901252448,0.480486475199101,0.6459915601798424,0.7854567384407947,0.8932601714679883,0.9650563050576294,0.9979510385172907,0.9906183858068563,0.9433539260086774,0.8580628885409227,0.7381833533981237,0.5885476622162445,0.41518762667909903,0.2250913863113126,0.025921716715918572,-0.17429285675579423,-0.36748168869832176,-0.5458573412050426,-0.7022294953327438,-0.8302947927123949,-0.9248909237980334,-0.9822047204595266,-0.999925864713265,-0.9773400175928825,-0.9153576141388253,-0.8164771637801078,-0.6846845354701376,-0.5252922873892041,-0.3447255178322664,-0.15026286962678126,0.05025687181305484,0.2487507597668916,0.43721750962764433,0.608060030522164,0.7543916638897166,0.8703137845502879,0.9511535741654871,0.9936523824516994,0.9960970833068662,0.9583891308889437,0.8820485319968752,0.7701525746274107,0.6272117825579786,0.4589880962246345,0.27226260901963817,0.07456222155390714,-0.1261437675538609,-0.32176490394392515,-0.5044157035665993,-0.6667335163848485,-0.8021753146483751,-0.9052814422095522,-0.9718956931527224,-0.9993328483702432,-0.9864869166904471,-0.9338757173593939,-0.8436200067576387,-0.7193579907532861,-0.5660986686970608,-0.39001992076027836,-0.19821947770910497,0.0015711884776458168,0.20129852008865412,0.3929115124280666,0.5686862496515619,0.7215372556583974,0.8453031094892242,0.9349948120803993,0.986996892715312,0.9992131485757203,0.9711511426351153,0.903942053785156,0.8002950790374761,0.6643882258468773,0.5016998967156869,0.31878805489917267,0.12302587304023986,-0.07769547927174789,-0.2752849283864907,-0.4617776476079746,-0.629656119198076,-0.7721531653635886,-0.8835247330571264,-0.9592814366383987,-0.9963695249188197,-0.9932939778102859,-0.9501787705545152,-0.8687618762836606,-0.7523252083582249,-0.6055623265064699,-0.43438923952608177,-0.24570593108991745,-0.0471182215432447,0.15336882256066892,0.3476735725303124,0.5279636078260843,0.6869714407732824,0.8182874688429895,0.9166183456008604,0.9780003553944115,0.9999591906508682,0.981609691165336,0.9236915248908135,0.8285393719379122,0.699988813666855,0.543221720480457,0.36455737073293154,0.17119772074770906,-0.029062905896953376,-0.22815200739274563,-0.4180443060870765,-0.5910852472618354,-0.7402995540793824,-0.8596724008512651,-0.9443918705393264,-0.991042923034826,-0.9977450553555416,-0.9642281046832286,-0.8918431386212698,-0.7835079936870675,-0.6435896573809232,-0.47772823500797335,-0.29260959714828977,-0.09569587234810661,0.10507535113001024,0.3016109893300621,0.4859886946532268,0.6507762055283044,0.7893309407264083,0.8960677616750626,0.9666841092816258,0.9983334400029281,0.9897399699579861,0.9412501017503929,0.8548184609865075,0.7339291053566483,0.5834550823401806,0.40946199676020734,0.21896350637577122,0.019638601479937942,-0.18047793504418427,-0.37331940965857047,-0.5511123864231561,-0.7066900340424155,-0.8337810206884928,-0.9272623112613381,-0.9833656768294803,-0.9998295918620019,-0.975990396277109,-0.9128090475664729,-0.8128323846182057,-0.6800904646927419,-0.5199341118965268,-0.33881922557010696,-0.14404654311662266,0.05653265257525572,0.2548330181858169,0.44286106998948427,0.6130374010227242,0.7585022068249337,0.8733918040175602,0.9530749952624785,0.9943397527328256,0.9955226948899674,0.9565761373595169,0.8790700150874502,0.7661285982942336,0.6223045532056729,0.45339542416899736,0.2662099347582689,0.0682935282638237,-0.13237578897319796,-0.3277090408350876,-0.5098323478918758,-0.6714043233209803,-0.8059120040621404,-0.9079333882265069,-0.9733559958825154,-0.9995426430393833,-0.9854377464800486,-0.9316098742994867,-0.8402288269360212,-0.7149781725599917,-0.5609067625148397,-0.38422521222217865,-0.1920555513992525,0.007855864814526433,0.20745061127658734,0.3986830277957479,0.573844539531301,0.725874389489515,0.8486442574947453,0.9372052926518261,0.9879876014255365,0.9989441499766801,0.9696332800548946,0.901236512233602,0.7965109188398845,0.6596779864241945,0.49625344772373503,0.31282494258672155,0.11678647034362273,-0.08395966215574939,-0.2813213823726846,-0.4673430433583191,-0.6345261157223966,-0.7761314532007741,-0.8864509475047805,-0.9610376220513133,-0.996884889498588,-0.9925477472211385,-0.948201025336375,-0.8656323393062108,-0.7481700311937381,-0.6005490042624625,-0.428719859120797,-0.23960902513257734,-0.04083955618961401,0.1595761544371175,0.353559353507132,0.5332905821913044,0.6915248782980264,0.8218838205527698,0.9191126426310688,0.9792920526821653,0.9999962199046339,0.9803905597366659,0.9212653759429301,0.8250040034857496,0.6954867363412297,0.5379344129273657,0.358697964212774,0.16500240781875405,-0.035344392295895616,-0.23426646067214385,-0.42374525275884434,-0.5961428822808952,-0.7445100042805551,-0.8628659430721352,-0.9464397731576266,-0.9918626351373918,-0.9973035343641123,-0.9625431483000502,-0.8889826674040542,-0.7795873131727024,-0.6387668101215247,-0.47219762987905267,-0.28659417273079685,-0.0894381102784942,0.11132320058933534,0.30759707549392185,0.4914717185093651,0.655535146495938,0.7931739659915229,0.8988399589669817,0.9682737313836045,0.9986764092802061,0.9888224613259075,0.9391090999633903,0.8515402697832777,0.7296458685582627,0.5783394571352222,0.40372019389725633,0.21282697781216448,0.01335471055780424,-0.18665588480892192,-0.3791423852358999,-0.5563456637854721,-0.7111226598850273,-0.8372343159533128,-0.929597073686195,-0.9844877921882693,-0.9996938277073135,-0.9746022252592503,-0.9102244268311332,-0.8091555001749042,-0.6754695316789893,-0.5145554000286082,-0.3328995506144781,-0.1378245270510637,0.0628062004089248,0.26090521120147225,0.4484871382095296,0.6179905577511368,0.7625827904141118,0.8764353262255355,0.9549587717707033,0.9949878485483703,0.9949089852836316,0.9547253609530592,0.8760567766403887,0.7620743613874725,0.6173727440468362,0.4477848438855888,0.26014674572767993,0.062022137513397815,-0.1386025818090937,-0.3336402338633446,-0.515228854841439,-0.6760486111060967,-0.8096168615361344,-0.9105494726594812,-0.9747778529638854,-0.9997129577390128,-0.9843496534158475,-0.9293072344808125,-0.8368044597273917,-0.710570114134379,-0.5556927016182193,-0.3784153275436073,-0.18588403927266084,0.014140230860303539,0.21359450857329074,0.4044387959674548,0.5789801636797871,0.7301828527091649,0.851951885720412,0.9393787554565819,0.9889392865676649,0.9986356950474312,0.9680771188662082,0.898495373611506,0.7926952980267034,0.6549416910178371,0.4907873976961286,0.30684947430387893,0.11054245481111764,-0.09022052879825612,-0.2873467247172939,-0.47288997997714977,-0.6393710497125802,-0.7800790853711983,-0.8893421488825322,-0.9627558483673558,-0.9973608790848967,-0.9917623129471042,-0.9461858280416989,-0.8624686115530668,-0.743985302783916,-0.5955119615132491,-0.4230335451237482,-0.23350265508976575,-0.03455927775390943,0.16577718336893474,0.35943116958461796,0.5385964926269615,0.6960510019494711,0.82544770946729,0.9215706365185872,0.980545069858898,0.9999937512734967,0.9791327048081291,0.9188028388237122,0.8214360489973634,0.6909571886567817,0.5326258580223341,0.3528243898280489,0.15880057761905042,-0.04162448266070827,-0.24037166088675374,-0.4294294623260196,-0.601176970828088,-0.7486910478001099,-0.8660254037844112,-0.9484502932653526,-0.9926431706156492,-0.9968226218435569,-0.960820173354641,-0.8860870831190828,-0.7756358404919727,-0.6339187328288955,-0.46664837387209346,-0.28056742840675614,-0.08317681557945572,0.11756665300107531,0.31357101217786276,0.49693533019865355,0.6602681951140156,0.796985662444195,0.9015766538474529,0.9698251085766174,0.9989799328025,0.987865896150441,0.9369310052130313,0.8482284444133417,0.7253338121824002,0.5732009886586938,0.39796244488037963,0.20668204300130752,0.007070292150742392,-0.1928264620331361,-0.3849503854343272,-0.5615569665876331,-0.7155271977803324,-0.8406545421085418,-0.931895118854035,-0.985571022214564,-0.9995185776116219,-0.9731755593694091,-0.9076038540201972,-0.805446655679909,-0.6708219189465673,-0.5091563642338969,-0.3269667267812253,-0.13159706718773298,0.06907726752125501,0.2669670989741703,0.4540954920692477,0.6229193050671797,0.7666332534820727,0.8794442309610678,0.9568048292847257,0.9955966442998354,0.9942559787281493,0.9528368747716676,0.8730089356728487,0.7579900240414414,0.6124165498782354,0.44215657698099686,0.2540732814121384,0.055748297010576126,-0.14482390011558421,-0.339558248758231,-0.520605011264263,-0.6806661963000447,-0.813289740735568,-0.9131295921781875,-0.976161208236273,-0.9998437857420437,-0.9832226804753621,-0.9269678888532413,-0.8333470403876473,-0.7061339895860902,-0.5504566919520716,-0.3725904962034834,-0.17970518509192707,0.020424038394644718,0.2197299693066764,0.41017858960197107,0.5840929192499619,0.7344624751415969,0.855225863521292,0.9415151146470797,0.9898519105520557,0.9982877959713369,0.9664827205343346,0.8957187461884064,0.7888483673075922,0.6501795267021628,0.4853019625310986,0.30086188606989483,0.10429407306895087,-0.09647783190711674,-0.29336071743114045,-0.47841823837137415,-0.644190729803257,-0.7839959059512226,-0.8921982229936638,-0.9644360477199647,-0.9977974748770755,-0.9909377060112905,-0.9441332582668189,-0.8592708179851994,-0.7397711884170781,-0.590451397212299,-0.41733052213315924,-0.22738706215109555,-0.028277634294669875,0.17197166442800443,0.36528878883736554,0.5438811295598319,0.7005496329546296,0.8289789948199439,0.9239922301776664,0.9817593574329179,0.9999517848549624,0.9778361760625227,0.916304010798535,0.8178356493996837,0.6864003495216591,0.5272962654430376,0.3469368795737174,0.1525924751086996,-0.04790292894050803,-0.24646736689327906,-0.4350967102736015,-0.6061873140665849,-0.7528425194950841,-0.8691506581957764,-0.9504233514509496,-0.9933844986399962,-0.9963023367889968,-0.9590592479011868,-0.8831565001360848,-0.7716537317202814,-0.629045616992427,-0.46108068617174996,-0.27452960222093925,-0.07691223555948351,0.1238054617611332,0.3195325634232916,0.502379313919221,0.6649751644362496,0.8007658795299419,0.9042777382224084,0.9713381795843284,0.9992439985812339,0.9868703122140144,0.9347159035297568,0.844883115687291,0.7209931065467718,0.5680398798699068,0.39218897712924117,0.20052894465599,0.0007855944812098249,-0.1989894229912122,-0.3907431808492618,-0.5667460889935643,-0.7199034737579819,-0.844041564061816,-0.9341563559966115,-0.986615324122908,-0.9993038484969571,-0.9717104549580071,-0.904947432641258,-0.8017059976254209,-0.6661478100670426,-0.5037372177636441,-0.3210209884048518,-0.12536440949899708,0.07534560621719615,0.27301844207126036,0.4596859100497364,0.6278234482953352,0.7706534360435257,0.882418399378226,0.9586130948888195,0.9961661159409905,0.9935637010160004,0.9509107534068006,0.8699266125685026,0.7538757475796216,0.6074361664597522,0.43651084576075044,0.24798978170143612,0.04947225455961202,-0.1510394981625449,-0.3454628517698986,-0.5259606048123968,-0.6852568965172863,-0.8169304965890329,-0.9156736448730018,-0.9775060070598881,-0.9999351218810183,-0.9820568721718081,-0.924591929816264,-0.8298567054780254,-0.7016699741332435,-0.545198940328769,-0.36675094827119453,-0.173519232909589,0.0267070392196187,0.22585675113821768,0.4159021819884195,0.5891826042980308,0.7387130877499446,0.8584660615817583,0.943614285841371,0.9907254373318047,0.9979004664897233,0.9648501480349464,0.8929067396356283,0.7849702786286482,0.6453916815733011,0.479797358892501,0.2948624143830051,0.09804157191591824,-0.10273132433132881,-0.2993631229733343,-0.4839276001857029,-0.6489849656263634,-0.787881760234134,-0.8950190570288877,-0.966078153744583,-0.9981946596304546,-0.9900739589840803,-0.9420433970842059,-0.8560390849091392,-0.7355278545424947,-0.5853675112419091,-0.4116110154074336,-0.2212624878704104,-0.02199487392440677,0.17815935294444551,0.3711319799010354,0.5491442842572413,0.7050205936264607,0.8324775371319647,0.9263773279599639,0.9829348674422529,0.9998703223066225,0.9765010247101711,0.9137689905661472,0.8142029469016445,0.68181639892205,0.5219458456977619,0.3410356659944882,0.14637834549543444,-0.054179483148668196,-0.2525533379233154,-0.44074677275648777,-0.611173714097859,-0.7569642553904316,-0.8722415828646545,-0.9523588697824978,-0.9940865899294395,-0.995742699750646,-0.9572604414927669,-0.8801910342074852,-0.7676411441430607,-0.6241476550907036,-0.45549478669059,-0.26848093265555717,-0.07064461765751337,0.13003938044888355,0.32548149376054547,0.5078034546445597,0.6696558685466905,0.8045144679375177,0.9069431054043492,0.972812884643393,0.9994685961863288,0.9858357488402362,0.9324638824057893,0.8415044157390038,0.7166239231007561,0.5628563346225125,0.38640001868446766,0.1943679258116122,-0.005499134217817277,-0.2051445242582516,-0.39652054267672443,-0.5719128260429909,-0.724251314963637,-0.8473952480325498,-0.9363806957994817,-0.9876206566654375,-0.9990496488447034,-0.9702069698938001,-0.9022552676176185,-0.7979336737600132,-0.661447389658485,-0.49829817466358073,-0.3150625703305503,-0.11912680016241337,0.0816109689098054,0.2790590014766404,0.4652581713403739,0.6327027937314084,0.7746431793092708,0.8853577140032852,0.9603834971601148,0.996696240978815,0.9928321794907992,0.9489470729364659,0.8668099290730257,0.7497316945076975,0.6024317905068313,0.4308478732201853,0.2418964868818527,0.04319425805178813,-0.15724913044635258,-0.35135380967786894,-0.5312954239506659,-0.6898205304342284,-0.8205389852937641,-0.9181815302589126,-0.9788121963177605,-0.9999869625483434,-0.9808522745523109,-0.9221794512156347,-0.8263335928597986,-0.6971782440958356,-0.5399196544190707,-0.3608969143973516,-0.16732642705865344,0.032988985169043965,0.23197461207207618,0.42160934705625613,0.5942490177914855,0.7429345226435583,0.8616723519203568,0.94567618612632,0.9915598324043456,0.9974737219013504,0.9631794658513747,0.8900594650218766,0.7810611851668563,0.6405783447416785,0.4742738042014582,0.28885129621027644,0.09178519831346756,-0.10898075907006503,-0.3053537042607102,-0.48941784781112446,-0.6537535678190964,-0.7917364947363619,-0.8978045395707537,-0.967682101581221,-0.9985524176570272,-0.9891711059817689,-0.9399163270392686,-0.8527735399720481,-0.7312554687635892,-0.5802605044054431,-0.40587525085568865,-0.215129174156521,-0.015711244799917805,0.18434000451666918,0.3769605119810671,0.5543857488349727,0.7094637073706862,0.835943198217651,0.9287258356589138,0.9840715534565684,0.9997493668460864,0.9751273034869522,0.91119787825498,0.8105380849876894,0.6772055179149503,0.5165748101176659,0.33512098217691044,0.14015843422544005,-0.06045389737374953,-0.25862933359302576,-0.446379426608215,-0.6161359739688662,-0.7610560926857615,-0.8752980557056541,-0.9542567718108452,-0.9947494167527463,-0.9951437328330874,-0.9554238251786492,-0.877190802463306,-0.7635982362497047,-0.6192250405835031,-0.4498908960608645,-0.2624216586210031,-0.06437420943196158,0.13626816283668003,0.331417568218678,0.5132075381316262,0.6743101225667273,0.8082312796051847,0.9095726501164628,0.9742491655058475,0.9996537167466206,0.9847622468923258,0.9301750307914548,0.838092478020516,0.71222643441855,0.5576505576563585,0.38059579819848516,0.18819922981625153,-0.011783645711909764,-0.2112915227197984,-0.40228224272212354,-0.5770569736601432,-0.7285705496660384,-0.8507154615568182,-0.9385680504055959,-0.9885869801334667,-0.9987559886952382,-0.9686651635615057,-0.8995274652845777,-0.7941298330830282,-0.6567208433783885,-0.4928394497651682,-0.30909170790401375,-0.11288448555145805,0.08787310812962945,0.2850885385999791,0.47081205584784375,0.6375571486509343,0.7786023256922194,0.8882620587390428,0.9621159661711856,0.9971869984744174,0.992061443046215,0.9469459109221635,0.8636590082893455,0.7455580285076561,0.5974036196823947,0.4251678830356359,0.23579363762650013,0.03691455545568205,-0.16345255169851433,-0.3572308898011516,-0.5366092579640565,-0.69435691779622,-0.8241150643216166,-0.9206531492792859,-0.9800797244180418,-0.9999993056964124,-0.9796089351961302,-0.9197305483394944,-0.8227778416890845,-0.6926589768882927,-0.534619042744344,-0.3550286258048908,-0.16112701214288994,0.039269628118404495,0.2380833104647714,0.4272998593837313,0.5992919596169064,0.7471266130839055,0.8648446078949223,0.9477007340609368,0.9923550628126983,0.9970075790617828,0.9614707399723419,0.8871770348089794,0.7771212413235823,0.6357397063247253,0.46873151662742235,0.2828287689792231,0.08552519937622721,-0.11522588928316439,-0.3113322246770291,-0.49488876439360097,-0.6584963480310435,-0.7955599572033666,-0.9005545605982027,-0.9692478278771214,-0.9988707348260443,-0.9882291826652747,-0.9377521321470725,-0.8494743121565025,-0.7269541998311239,-0.5751305784197236,-0.40012345502950475,-0.2089873632630404,-0.009426995112144261,0.19051337502103244,0.38277415486195365,0.5596053162653369,0.713878798693208,0.8393758411903597,0.9310376605130147,0.9851693705790112,0.999588923250859,0.9737150666521421,0.9085907754187993,0.8068412084127589,0.672567888621179,0.5111833708480483,0.3291930617393145,0.1339329869727034,-0.06672592378878105,-0.2646951139124154,-0.45199444935007993,-0.6210738976801407,-0.7651178697614704,-0.8783199559941336,-0.9561169825725748,-0.9953729529295492,-0.9945054596943155,-0.953549471501617,-0.8741559234067757,-0.7595251677270543,-0.614277967904556,-0.4442692356250346,-0.2563520194467994,-0.058101258551740184,0.14249156289997542,0.3373405523343098,0.5185913509297952,0.6789377426625172,0.8119161677260873,0.9121662684969498,0.9756469654414347,0.9997993529502113,0.9836498487714896,0.9278494390919331,0.8346474372966918,0.7078008141922729,0.5524227545893542,0.3747765449266981,0.1820231003212176,-0.01806769177510397,-0.2174301755815527,-0.408028053409842,-0.5821783286611627,-0.732861007263984,-0.8540020734926833,-0.9407183334187084,-0.989514256359153,-0.9984228796475644,-0.9670850968594576,-0.8967641333849412,-0.7902946258387987,-0.6519683579158687,-0.48736125867725966,-0.3031086369626787,-0.10663771222523075,0.0941317765343659,0.29110681528646765,0.47634734420467567,0.6423863213163922,0.7825307188138012,0.8911313188696178,0.9638104334929114,0.9976383690438452,0.9912515221248086,0.944907346405914,0.860473974672611,0.7413549144310617,0.5923518525893968,0.4194710995554462,0.22968147498603747,0.030633394807315372,-0.1696495168963097,-0.36309386000647514,-0.5419018969666667,-0.6988658794249193,-0.827658592424402,-0.9230884043101187,-0.9813085412958398,-0.9999721508376958,-0.9783269032127158,-0.9172453179146701,-0.8191895924110331,-0.6881123510127442,-0.529297314668426,-0.3491463142796228,-0.1549212330267766,0.04554871999465024,0.24418260503478043,0.4329734942067427,0.6043112305879142,0.7512891934918061,0.867982704207608,0.9496878496795214,0.9931110971468391,0.9965020563827597,0.9597240378890994,0.8842595628471592,0.7731506027189695,0.6308759574390596,0.463170715079958,0.2767950705677773,0.0792618223616229,-0.121466468300147,-0.31729844808243324,-0.5003401338427318,-0.6632131189317095,-0.7993519966160352,-0.9032690114908346,-0.9707752707891449,-0.9991495985646068,-0.9872482262387083,-0.9355508978891008,-0.8461415317754855,-0.7226242176368046,-0.569977935906836,-0.394355855113302,-0.2028372977795919,-0.0031423730765384483,0.19667922062164758,0.3885726789160721,0.5648027803858701,0.7182656932065175,0.8427753304673475,0.9333127112097712,0.986228275447943,0.9993889978581463,0.9722643699863063,0.9059477850331127,0.8031124631961434,0.667903694217935,0.5057717408401619,0.32325213882285087,0.1277022496302655,-0.07299531466093538,-0.2707504392951408,-0.45759161919977265,-0.6259872901933135,-0.7691494261854218,-0.8813071643708903,-0.9579394285929855,-0.9959571738314175,-0.993827905544881,-0.9516374544949218,-0.8710865169096782,-0.7554220994534203,-0.6093066324533291,-0.43863002742773766,-0.250272254871817,-0.05182601278602091,0.14870933482653237,0.34325021216126544,0.5239546803890932,0.6835385460520796,0.8155689867544222,0.9147238581029358,0.9770062292398051,0.9999054990447578,0.9824985984152764,0.9254871991635677,0.8311694296398368,0.7033472372252235,0.5471731319095385,0.36894248871806595,0.17583978127165215,-0.02435102419999037,-0.22356024037884922,-0.4137577477914966,-0.5872766887626869,-0.7371225182927552,-0.8572549540253759,-0.9428314599069451,-0.990402448716883,-0.998050334858838,-0.9654668321971708,-0.8939653810648868,-0.786428203510333,-0.6471901209848443,-0.48186381777773324,-0.2971135938260318,-0.10038672691894145,0.10038672691897264,0.29711359382606173,0.4818638177777607,0.6471901209848682,0.7864282035103525,0.8939653810648753,0.965466832197179,0.9980503348588434,0.9904024487168864,0.9428314599069345,0.8572549540253598,0.737122518292734,0.5872766887626155,0.4137577477915198,0.22356024037881866,0.024351024199959027,-0.17583978127162705,-0.3689424887181479,-0.5471731319095647,-0.7033472372252054,-0.8311694296398542,-0.9254871991635796,-0.9824985984152929,-0.9999054990447573,-0.9770062292398105,-0.9147238581029231,-0.815568986754404,-0.6835385460520568,-0.5239546803890666,-0.343250212161236,-0.1487093348265576,0.05182601278605222,0.25027225487190236,0.43863002742776586,0.6093066324533539,0.7554220994534036,0.8710865169097215,0.9516374544949489,0.9938279055448782,0.9959571738314146,0.9579394285929765,0.8813071643709024,0.7691494261853655,0.625987290193289,0.4575916191997448,0.2707504392951106,0.07299531466090411,-0.12770224963035298,-0.3232521388228805,-0.5057717408401399,-0.6679036942179585,-0.8031124631961959,-0.9059477850331259,-0.9722643699863136,-0.9993889978581473,-0.9862282754479378,-0.9333127112097395,-0.8427753304673613,-0.7182656932064956,-0.5648027803858442,-0.38857267891609565,-0.1966792206215611,0.003142373076569799,0.20283729777956694,0.3943558551133308,0.5699779359068617,0.7226242176368656,0.8461415317755022,0.9355508978890917,0.9872482262387133,0.9991495985646055,0.9707752707891374,0.9032690114908212,0.7993519966160163,0.6632131189317286,0.5003401338427046,0.3172984480823496,0.12146646830011588,-0.07926182236165415,-0.27679507056780744,-0.46317071507998575,-0.6308759574391279,-0.7731506027189534,-0.8842595628471739,-0.9597240378891082,-0.9965020563827576,-0.9931110971468288,-0.9496878496795116,-0.8679827042075924,-0.7512891934917855,-0.6043112305878893,-0.4329734942066632,-0.24418260503475003,-0.045548719994675704,0.15492123302680758,0.3491463142796522,0.5292973146684526,0.6881123510127669,0.819189592411051,0.9172453179146827,0.9783269032127222,0.9999721508376964,0.9813085412958338,0.9230884043101066,0.8276585924244163,0.6988658794248968,0.5419018969665926,0.3630938600064989,0.16964951689627877,-0.030633394807346708,-0.229681474986068,-0.4194710995555263,-0.5923518525894221,-0.7413549144310827,-0.860473974672627,-0.9449073464059057,-0.9912515221248203,-0.997638369043843,-0.9638104334929182,-0.8911313188696036,-0.7825307188137817,-0.6423863213163246,-0.4763473442046481,-0.2911068152864376,-0.09413177653433469,0.10663771222526192,0.30310863696270857,0.4873612586772871,0.6519683579158925,0.7902946258387831,0.8967641333849551,0.9670850968594801,0.9984228796475662,0.9895142563591486,0.9407183334186977,0.8540020734926375,0.7328610072639239,0.5821783286611834,0.40802805340981335,0.21743017558152208,0.018067691775072624,-0.18202310032130434,-0.3747765449267272,-0.5524227545893804,-0.707800814192295,-0.8346474372967403,-0.9278494390919659,-0.9836498487714953,-0.9997993529502118,-0.9756469654414279,-0.9121662684969136,-0.8119161677261022,-0.6789377426624942,-0.5185913509297685,-0.33734055233428034,-0.14249156289988812,0.058101258551828225,0.2563520194468297,0.4442692356250627,0.6142779679045359,0.7595251677271116,0.874155923406791,0.9535494715016092,0.9945054596943187,0.9953729529295462,0.956116982572549,0.8783199559941186,0.7651178697614502,0.6210738976801161,0.45199444935005195,0.2646951139123852,0.06672592378874977,-0.13393298697273448,-0.32919306173929047,-0.5111833708480753,-0.6725678886212443,-0.8068412084127439,-0.9085907754188124,-0.9737150666521492,-0.99958892325086,-0.985169370578996,-0.931037660513024,-0.8393758411903426,-0.713878798693186,-0.5596053162653581,-0.3827741548618722,-0.19051337502100166,0.00942699511211877,0.20898736326307105,0.40012345502953345,0.5751305784197958,0.7269541998311454,0.849474312156489,0.9377521321470834,0.9882291826652796,0.9988707348260428,0.9692478278771137,0.9005545605981892,0.795559957203382,0.65849634803102,0.4948887643935243,0.3113322246769993,0.11522588928313325,-0.0855251993762018,-0.28282876897925313,-0.4687315166275003,-0.6357397063247057,-0.777121241323602,-0.8871770348089938,-0.9614707399723349,-0.9970075790617896,-0.9923550628126944,-0.9477007340609268,-0.8648446078949067,-0.7471266130839224,-0.5992919596168358,-0.4272998593837029,-0.23808331046479617,-0.03926962811837317,0.16112701214292088,0.3550286258049201,0.5346190427443704,0.6926589768883153,0.8227778416891024,0.9197305483395067,0.9796089351961366,0.9999993056964125,0.9800797244180356,0.9206531492792959,0.8241150643215667,0.6943569177961566,0.5366092579640779,0.35723088980112233,0.16345255169848338,-0.03691455545577018,-0.23579363762658584,-0.4251678830356128,-0.59740361968242,-0.7455580285076769,-0.8636590082893614,-0.9469459109221918,-0.992061443046219,-0.9971869984744193,-0.962115966171177,-0.8882620587390023,-0.7786023256921997,-0.6375571486509102,-0.47081205584786623,-0.2850885385999491,-0.0878731081295416,0.11288448555143271,0.30909170790404356,0.4928394497651955,0.6567208433783693,0.7941298330830818,0.8995274652845915,0.9686651635615134,0.9987559886952397,0.9885869801334705,0.9385680504055655,0.8507154615568018,0.7285705496660558,0.5770569736601177,0.40228224272209484,0.21129152271976775,0.011783645711878414,-0.18819922981628234,-0.3805957981985142,-0.5576505576563846,-0.7122264344185721,-0.8380924780205331,-0.9301750307914662,-0.9847622468923214,-0.9996537167466198,-0.9742491655058276,-0.9095726501164734,-0.8082312796051663,-0.6743101225667041,-0.5132075381315993,-0.3314175682185948,-0.1362681628367053,0.06437420943199287,0.26242165862103334,0.44989089606084176,0.6192250405835724,0.7635982362497249,0.8771908024632938,0.9554238251786584,0.9951437328330905,0.9947494167527373,0.9542567718108359,0.8752980557056664,0.7610560926857411,0.6161359739688416,0.44637942660818697,0.2586293335929955,0.060453897373718236,-0.14015843422541482,-0.33512098217694003,-0.5165748101177414,-0.6772055179149734,-0.8105380849877079,-0.9111978782549695,-0.9751273034869592,-0.9997493668460884,-0.9840715534565729,-0.9287258356589021,-0.8359431982176337,-0.7094637073707042,-0.5543857488348992,-0.3769605119810381,-0.18434000451663837,0.01571124479994915,0.2151291741564961,0.40587525085576925,0.5802605044054686,0.7312554687635717,0.8527735399720644,0.9399163270392794,0.9891711059817735,0.9985524176570255,0.9676821015812131,0.8978045395707399,0.791736494736308,0.6537535678190728,0.4894178478110971,0.3053537042606803,0.10898075907009037,-0.09178519831355537,-0.2888512962103609,-0.4742738042014357,-0.6405783447417026,-0.7810611851668758,-0.8900594650219168,-0.9631794658513984,-0.9974737219013485,-0.9915598324043416,-0.9456761861263098,-0.861672351920341,-0.7429345226434992,-0.5942490177914603,-0.4216093470562792,-0.23197461207204567,-0.03298898516895581,0.16732642705868436,0.36089691439738086,0.5399196544190971,0.6971782440958582,0.8263335928598482,0.9221794512156248,0.980852274552317,0.9999869625483432,0.9788121963177657,0.9181815302588776,0.8205389852937462,0.6898205304342058,0.5312954239506393,0.3513538096778396,0.15724913044626548,-0.04319425805181945,-0.24189648688182797,-0.43084787322021356,-0.6024317905068564,-0.7497316945077181,-0.8668099290730413,-0.9489470729364757,-0.9928321794908029,-0.9966962409788125,-0.9603834971600903,-0.8853577140032707,-0.7746431793092511,-0.6327027937314281,-0.46525817134034614,-0.27905900147655577,-0.08161096890983081,0.1191268001624445,0.31506257033058005,0.49829817466360793,0.6614473896585512,0.7979336737600321,0.9022552676176321,0.9702069698938076,0.9990496488447023,0.9876206566654236,0.9363806957994707,0.8473952480325634,0.7242513149636155,0.5719128260429652,0.3965205426766435,0.20514452425822094,0.005499134217785927,-0.19436792581164294,-0.3864000186844965,-0.5628563346225384,-0.7166239231007779,-0.8415044157390207,-0.93246388240578,-0.9858357488402414,-0.9994685961863259,-0.9728128846433858,-0.906943105404336,-0.804514467937499,-0.6696558685466671,-0.5078034546444837,-0.32548149376056956,-0.13003938044885247,0.07064461765754465,0.26848093265553263,0.4554947866906685,0.624147655090728,0.7676411441430808,0.8801910342075001,0.957260441492776,0.9957426997506541,0.9940865899294361,0.9523588697825056,0.8722415828646392,0.7569642553904111,0.6111737140978343,0.4407467727564596,0.25255333792328505,0.054179483148636895,-0.14637834549552167,-0.34103566599457114,-0.5219458456977887,-0.681816398922073,-0.8142029469016296,-0.9137689905661831,-0.9765010247101901,-0.9998703223066221,-0.9829348674422471,-0.926377327959952,-0.8324775371319159,-0.7050205936263982,-0.5491442842572151,-0.3711319799010063,-0.17815935294441465,0.021994873924438118,0.22126248787044095,0.4116110154074622,0.5853675112418885,0.7355278545425159,0.8560390849091848,0.9420433970841974,0.9900739589840848,0.9981946596304527,0.9660781537445748,0.8950190570288483,0.7878817602341498,0.6489849656263396,0.48392760018567543,0.2993631229733586,0.10273132433124109,-0.09804157191594944,-0.2948624143829807,-0.4797973588925285,-0.6453916815733249,-0.7849702786287028,-0.8929067396356424,-0.9648501480349397,-0.9979004664897253,-0.9907254373318005,-0.9436142858413606,-0.8584660615817422,-0.7387130877499235,-0.5891826042980514,-0.41590218198839096,-0.22585675113813178,-0.02670703921958736,0.17351923290961987,0.36675094827117083,0.5451989403287953,0.7016699741333063,0.8298567054780112,0.9245919298162759,0.9820568721718141,0.9999351218810186,0.9775060070598695,0.9156736448729893,0.8169304965890148,0.6852568965172634,0.5259606048124185,0.34546285176981584,0.15103949816251389,-0.04947225455958656,-0.2479897817014665,-0.4365108457607787,-0.607436166459777,-0.7538757475796422,-0.8699266125685181,-0.9509107534068103,-0.9935637010160039,-0.9961661159409878,-0.9586130948888106,-0.8824183993782112,-0.7706534360435419,-0.6278234482953109,-0.4596859100496581,-0.2730184420712849,-0.07534560621716488,0.12536440949902816,0.3210209884048815,0.5037372177637203,0.6661478100670236,0.8017059976254397,0.9049474326412713,0.971710454958001,0.9993038484969604,0.9866153241229029,0.9341563559966206,0.8440415640617992,0.7199034737579603,0.5667460889934917,0.39074318084923293,0.19898942299123717,-0.0007855944812411758,-0.2005289446560764,-0.39218897712927003,-0.5680398798699325,-0.7209931065467936,-0.8448831156872775,-0.9347159035297881,-0.9868703122140287,-0.9992439985812327,-0.971338179584321,-0.9042777382224193,-0.8007658795298891,-0.6649751644361837,-0.5023793139192431,-0.3195325634232619,-0.1238054617611021,0.07691223555951478,0.2745296022209694,0.4610806861717778,0.6290456169924514,0.7716537317203014,0.8831565001360995,0.9590592479011957,0.9963023367889995,0.9933844986399992,0.9504233514509398,0.8691506581957328,0.7528425194951008,0.6061873140665599,0.4350967102735732,0.24646736689324866,0.047902928940419934,-0.15259247510861823,-0.34693687957369346,-0.5272962654430643,-0.6864003495216819,-0.8178356493997344,-0.9163040107985247,-0.9778361760625174,-0.9999517848549626,-0.9817593574329011,-0.9239922301776327,-0.8289789948199581,-0.7005496329546478,-0.5438811295598056,-0.36528878883728344,-0.17197166442802955,0.02827763429464439,0.22738706215112608,0.4173305221331877,0.5904513972123702,0.7397711884170991,0.8592708179851865,0.9441332582668293,0.9909377060112947,0.9977974748770697,0.9644360477199564,0.8921982229936753,0.7839959059512032,0.6441907298031895,0.4784182383713965,0.2933607174311105,0.09647783190708553,-0.10429407306898206,-0.30086188606997893,-0.4853019625310763,-0.6501795267021867,-0.7888483673076115,-0.8957187461884204,-0.9664827205343572,-0.9982877959713388,-0.9898519105520512,-0.9415151146470692,-0.8552258635212464,-0.7344624751415371,-0.5840929192499363,-0.41017858960189063,-0.21972996930664582,-0.020424038394556542,0.17970518509190198,0.3725904962035125,0.5504566919521452,0.7061339895860319,0.833347040387696,0.9269678888532531,0.9832226804753678,0.9998437857420421,0.9761612082362785,0.9131295921781515,0.8132897407355497,0.6806661963000217,0.5206050112641876,0.33955824875825497,0.14482390011549695,-0.05574829701060743,-0.25407328141222374,-0.442156576980974,-0.6124165498782153,-0.757990024041536,-0.873008935672864,-0.9528368747716943,-0.9942559787281466,-0.9955966442998377,-0.9568048292846835,-0.879444230961053,-0.766633253482016,-0.6229193050671552,-0.45409549206927047,-0.2669670989741401,-0.06907726752116702,0.1315970671878204,0.32696672678125493,0.5091563642338749,0.6708219189465906,0.8054466556799612,0.9076038540202341,0.9731755593694033,0.9995185776116229,0.9855710222145587,0.9318951188540443,0.8406545421084632,0.7155271977803502,0.5615569665876071,0.3849503854342982,0.19282646203316112,-0.007070292150887426,-0.20668204300128257,-0.39796244488040844,-0.5732009886587661,-0.7253338121823827,-0.8482284444133582,-0.9369310052130423,-0.9878658961504458,-0.998979932802496,-0.9698251085766236,-0.9015766538474393,-0.7969856624441761,-0.660268195113992,-0.496935330198577,-0.313571012177833,-0.11756665300104419,0.08317681557937368,0.2805674284068408,0.4666483738721715,0.6339187328289198,0.7756358404919924,0.8860870831190446,0.9608201733546654,0.996822621843564,0.9926431706156454,0.9484502932653246,0.8660254037844524,0.7486910478001269,0.6011769708279721,0.4294294623259913,0.24037166088666814,0.04162448266079054,-0.15880057761902525,-0.3528243898281846,-0.5326258580223607,-0.6909571886568454,-0.8214360489973489,-0.9188028388237021,-0.9791327048081355,-0.9999937512734969,-0.9805450698588807,-0.921570636518597,-0.8254477094673043,-0.6960510019494486,-0.5385964926268872,-0.35943116958453564,-0.16577718336895989,0.034559277753940756,0.23350265508979626,0.4230335451237251,0.5955119615133656,0.743985302783899,0.8624686115530826,0.9461858280417091,0.9917623129471008,0.9973608790848861,0.9627558483673474,0.8893421488825178,0.7800790853711786,0.6393710497125998,0.4728899799771221,0.28734672471726386,0.0902205287982249,-0.1105424548112053,-0.3068494743038547,-0.4907873976961559,-0.6549416910178607,-0.7926952980267572,-0.8984953736115447,-0.9680771188662017,-0.9986356950474328,-0.9889392865676772,-0.9393787554565516,-0.8519518857203658,-0.7301828527091435,-0.5789801636797616,-0.40443879596753013,-0.21359450857320456,-0.014140230860215354,0.18588403927269162,0.37841532754363627,0.5556927016181981,0.710570114134361,0.83680445972744,0.9293072344808241,0.984349653415853,0.9997129577390134,0.9747778529638912,0.9105494726594329,0.809616861536116,0.6760486111060526,0.5152288548414607,0.33364023386334185,0.13860258180906268,-0.06202213751342911,-0.2601467457277376,-0.4477848438855914,-0.6173727440468384,-0.7620743613874928,-0.8760567766404038,-0.9547253609530855,-0.9949089852836318,-0.99498784854837,-0.9549587717706856,-0.8764353262255615,-0.7625827904140547,-0.6179905577510674,-0.4484871382095016,-0.2609052112014146,-0.06280620040897861,0.13782452705115106,0.3328995506145881,0.5145554000286351,0.6754695316790333,0.8091555001748892,0.9102244268311345,0.9746022252592765,0.9996938277073143,0.9844877921882538,0.9295970736862045,0.8372343159533112,0.7111226598849454,0.5563456637854225,0.3791423852358183,0.186655884808947,-0.013354710557835589,-0.21282697781219512,-0.40372019389731106,-0.5783394571352941,-0.7296458685582646,-0.8515402697832941,-0.9391090999634011,-0.9888224613259163,-0.9986764092802001,-0.9682737313836038,-0.8988399589669679,-0.7931739659914865,-0.6555351464959573,-0.4914717185092635,-0.30759707549391907,-0.11132320058927594,0.08943811027855374,0.2865941727307724,0.4721976298791805,0.6387668101215489,0.7795873131727398,0.8889826674040815,0.9625431483000509,0.9973035343641147,0.9918626351373878,0.9464397731576074,0.8628659430720906,0.7445100042805533,0.5961428822808928,0.4237452527587902,0.2342664606720581,0.03534439229580748,-0.16500240781875694,-0.35869796421280326,-0.5379344129273202,-0.6954867363412931,-0.8250040034857995,-0.9212653759429423,-0.9803905597366721,-0.9999962199046342,-0.9792920526821417,-0.9191126426310229,-0.8218838205527519,-0.6915248782980038,-0.533290582191326,-0.35355935350712925,-0.1595761544370024,0.04083955618964534,0.23960902513263538,0.428719859120774,0.6005490042624648,0.7481700311938344,0.8656323393062406,0.9482010253363939,0.9925477472211354,0.9968848894985856,0.9610376220513046,0.8864509475047528,0.7761314532007364,0.6345261157223943,0.4673430433582914,0.2813213823726546,0.0839596621557748,-0.11678647034371031,-0.31282494258672433,-0.49625344772376223,-0.6596779864242395,-0.7965109188398691,-0.9012365122336402,-0.9696332800548954,-0.9989441499766828,-0.9879876014255272,-0.9372052926518349,-0.8486442574947437,-0.7258743894894933,-0.5738445395312753,-0.3986830277956931,-0.20745061127658446,-0.007855864814523503,0.19205555139928326,0.38422521222220757,0.5609067625149128,0.7149781725599939,0.8402288269360227,0.9316098742994672,0.9854377464800588,0.9995426430393807,0.9733559958825148,0.9079333882264938,0.8059120040621723,0.671404323320936,0.5098323478918,0.32770904083505803,0.13237578897316687,-0.06829352826376991,-0.2662099347582443,-0.4533954241691013,-0.6223045532056974,-0.7661285982942537,-0.879070015087438,-0.9565761373595094,-0.9955226948899785,-0.9943397527328223,-0.9530749952624604,-0.8733918040175727,-0.7585022068249504,-0.6130374010226994,-0.44286106998943064,-0.25483301818575904,-0.05653265257528117,0.14404654311662554,0.3388192255701365,0.5199341118965779,0.6800904646927857,0.8128323846182075,0.9128090475664741,0.9759903962771159,0.9998295918620015,0.9833656768294643,0.927262311261337,0.8337810206884912,0.7066900340423732,0.5511123864232012,0.3733194096584887,0.1804779350441814,-0.01963860147996929,-0.21896350637582954,-0.40946199676015815,-0.583455082340183,-0.7339291053566697,-0.8548184609865237,-0.9412501017504131,-0.9897399699579824,-0.9983334400029279,-0.9666841092816177,-0.8960677616750488,-0.7893309407263541,-0.6507762055283237,-0.48598869465322425,-0.3016109893301135,-0.1050753511299508,0.09569587234819439,0.2926095971482654,0.4777282350080009,0.643589657380882,0.7835079936871047,0.8918431386213098,0.9642281046832294,0.9977450553555437,0.9910429230348332,0.9443918705393348,0.8596724008512054,0.7402995540793804,0.5910852472618101,0.4180443060870997,0.22815200739277045,0.02906290589683681,-0.17119772074773995,-0.3645573707329872,-0.5432217204804356,-0.6999888136668367,-0.8285393719379297,-0.9236915248908256,-0.9816096911653474,-0.9999591906508685,-0.9780003553944109,-0.9166183456008479,-0.8182874688429715,-0.6869714407732183,-0.527963607826106,-0.34767357253030967,-0.15336882256063794,0.04711822154319085,0.24570593109000294,0.4343892395261612,0.6055623265064722,0.7523252083582643,0.8687618762836339,0.9501787705545426,0.9932939778102994,0.996369524918817,0.9592814366383818,0.8835247330571517,0.7721531653635867,0.6296561191979854,0.46177764760794676,0.2752849283864332,0.0776954792717733,-0.12302587304024276,-0.3187880548992832,-0.5016998967157386,-0.6643882258469431,-0.8002950790374609,-0.9039420537851572,-0.9711511426351227,-0.9992131485757227,-0.9869968927152978,-0.9349948120804082,-0.8453031094892075,-0.7215372556583758,-0.5686862496515127,-0.39291151242795935,-0.20129852008865126,-0.0015711884776144658,0.1982194777091357,0.3900199207602549,0.566098668697157,0.7193579907532882,0.8436200067576556,0.9338757173594152,0.9864869166904429,0.9993328483702388,0.9718956931527151,0.9052814422095268,0.8021753146483394,0.6667335163848676,0.5044157035665722,0.32176490394389545,0.1261437675538016,-0.07456222155396675,-0.272262609019641,-0.4589880962246371,-0.627211782558003,-0.770152574627467,-0.8820485319969168,-0.9583891308889445,-0.9960970833068664,-0.9936523824517055,-0.9511535741654599,-0.8703137845502443,-0.7543916638897147,-0.6080600305221391,-0.4372175096276928,-0.24875075976680616,-0.05025687181293837,0.15026286962681226,0.3447255178322958,0.5252922873891581,0.6846845354701397,0.8164771637801751,0.915357614138838,0.9773400175928891,0.9999258647132646,0.9822047204595261,0.924890923797989,0.8302947927123616,0.7022294953327013,0.545857341205064,0.36748168869831904,0.17429285675576336,-0.025921716715978326,-0.22509138631137082,-0.4151876266790758,-0.5885476622162699,-0.7381833533981448,-0.8580628885409535,-0.9433539260087066,-0.9906183858068568,-0.9979510385172887,-0.9650563050576212,-0.8932601714679999,-0.78545673844074,-0.6459915601798402,-0.48048647519909843,-0.29561299012518766,-0.09882335140078391,0.10194985461896708,0.2986134640619346,0.48323997081065234,0.6483870841138895,0.7873977271759494,0.8946683837877394,0.9658749759517511,0.9981471673786445,0.9901840666850016,0.9423066662986527,0.8564449032604373,0.7360598635010766,0.5860042655374105,0.41232684748713216,0.22202854255766222,0.02278027157024322,-0.17738627170329233,-0.3704023779536443,-0.5484875718434284,-0.7044632428103127,-0.8320420147135714,-0.9260811898392708,-0.9827900509408556,-0.9998826649747825,-0.9766700290151802,-0.9140878439479129,-0.8146587963867375,-0.6823908692270056,-0.5226157799362187,-0.341774059130802,-0.14715543291727334,0.05339502581960996,0.25179313214607135,0.4400414624105311,0.6105517302290366,0.7564506701558593,0.8718570988747322,0.9521189855790982,0.9940009752399479,0.995814805701466,0.9574873614944666,0.8805636211193928,0.7681443789943326,0.6247612524946182,0.45619401254827996,0.26923760118669315,0.0714282275690453,-0.12926041645660505,-0.3247385757103711,-0.5071265295480072,-0.6690722232407529,-0.8040476291526604,-0.9066118914025106,-0.9726306466542959,-0.999442680219638,-0.98596719956804,-0.9327474010518884,-0.8419285736725507,-0.7171716225240312,-0.5635054977828304,-0.38712447782791876,-0.19513847800485748,0.004713549918122389,0.20437557473933235,0.3957992242780773,0.5712682150947959,0.7237093957200749,0.8469778652474017,0.9361046741643421,0.98749712260684,0.9990835820180668,0.9703970024535793,0.9025937393551985,0.7984069408864697,0.6620363747855604,0.4989791358126782,0.3158080579715227,0.11990676370361839,-0.0808279697830426,-0.2783045294431654,-0.4645626391526719,-0.6320942382778869,-0.7741461314479049,-0.8849922097233179,-0.960164269931694,-0.9966321278470871,-0.9929257648547943,-0.9491945843720575,-0.8672013893992673,-0.7502513239667313,-0.6030586428456695,-0.43155668003380293,-0.24265867618186196,-0.04397910600295344,0.15647326104900597,0.35061819411418577,0.5306297148690255,0.6892515625542478,0.8200896936992133,0.9178700258848335,0.9786510358992253,0.999982642458517,0.9810049689339441,0.9224830049612823,0.8267757697241374,0.6977412199383797,0.5405807356950144,0.3616294529338379,0.16810089424212676,-0.03220380809510534,-0.23121037557966312,-0.4208968575029116,-0.5936169956166378,-0.742408444648294,-0.8612734242980433,-0.9454204896413592,-0.9914576741768364,-0.9975292199273929,-0.9633903830066586,-0.8904172992401659,-0.7815515121579837,-0.6411813994346354,-0.47496527747368816,-0.289603314788238,-0.09256744834353102,0.10819981007092268,0.3046055363307307,0.4887326195844303,0.6531589008316894,0.7912563600024296,0.8974582913117402,0.9674836970574235,0.9985098545507841,0.9892861000110305,0.9401842427970389,0.8531835777795673,0.7317911000051233,0.5809001377964838,0.40659310278721134,0.21589630803161233,0.01649673746764702,-0.18356781624978874,-0.37623275500853215,-0.5537317590255453,-0.7089098470404845,-0.8355117934652684,-0.9284342764011886,-0.9839315924413216,-0.9997666458989907,-0.9753011260897385,-0.911521237622036,-0.810997946509495,-0.6777833445828754,-0.5172473097504015,-0.33586104632784164,-0.1409362309235853,0.05966972109744427,0.25787038786842015,0.4456763045221652,0.6155170183584289,0.7605462536390255,0.8749178848242997,0.9540215937754075,0.9946687115850693,0.9952207537568558,0.9556554674819839,0.8775677286496304,0.7641052524321013,0.6198417089499497,0.45059235872184883,0.263179639630971,0.0651581545917696,-0.13548985434064442,-0.33067626998608657,-0.5125331318792877,-0.6737297935970219,-0.8077684209670809,-0.9092459196323628,-0.974071733674908,-0.9996327358423809,-0.984898562654595,-0.9304631483346334,-0.8385207833322739,-0.7127776625204262,-0.5583024885546726,-0.3813221525719835,-0.18897072833481182,0.010998102137931752,0.2105235993360307,0.40156289450462535,0.5764151975209323,0.7280322155883917,0.8503022697764517,0.9382966566748154,0.9884683243281114,0.9987948538283931,0.968859982980451,0.8998703858224639,0.7946070316199533,0.6573130840508741,0.4935228593638084,0.3098387382016996,0.11366502377192404,-0.08709052546614622,-0.28433545738489263,-0.4701188327696679,-0.6369517275179238,-0.778109111017978,-0.8879009319971314,-0.9619014843732712,-0.9971278073774232,-0.9921599286420592,-0.9471981032584814,-0.8640547414981452,-0.7460813505912882,-0.5980334355383171,-0.42587880479937623,-0.23655700805616958,-0.037699603104763516,0.16267747208501004,0.35649702166662356,0.5359461835182625,0.6937913655565799,0.8236698316874587,0.9203461835691695,0.9799233994134549,0.999999922855149,0.9797664696405342,0.9200386498592881,0.8232240907182611,0.6932253851375042,0.5352827783085495,0.3557629335168537,0.16190229207364681,-0.03848462748714696,-0.23732023249263118,-0.4265894637282711,-0.5986628823126059,-0.7466042122242802,-0.8644499414479855,-0.9474497110231604,-0.9922578019176881,-0.997068000894244,-0.9616864089294062,-0.8875392572793732,-0.7776154161268815,-0.6363459132845377,-0.46942531955355,-0.28358220068968093,-0.08630788905400849,0.11444549184307863,0.31058557727965946,0.494205964380456,0.6579049190568588,0.7950837397581342,0.9002127509974368,0.96905420445894,0.9988331025465302,0.9883490584808425,0.9380246838660307,0.8498885532245702,0.7274934321992291,0.5757730656420654,0.4008432984590334,0.20975554602574664,0.010212551776406816,-0.18974211022842716,-0.3820482716091657,-0.5589540748917488,-0.7133284507252867,-0.8389485711435491,-0.9307506916343067,-0.9850342705780795,-0.9996111380060173,-0.973893700687048,-0.9089186279991328,-0.8073050638076174,-0.6731490488290353,-0.5118584093126248,-0.3299347676737303,-0.13471146222585503,0.0659420595386218,0.2639374582173399,0.451293543295877,0.6204579947755737,0.7646117970402293,0.8779441132373496,0.9558865199941523,0.9952971604713966,0.9945873925488683,0.9537858269571543,0.8745371739796872,0.7600359452144884,0.6148976828762344,0.44497290738306916,0.2571112829968669,0.058885507995446486,-0.141713940641782,-0.33660090319917785,-0.5179194901593677,-0.6783607529508346,-0.8114573075168103,-0.9118440344357649,-0.9754743467768675,-0.9997833079371261,-0.9837910241840393,-0.9281421441521047,-0.8350798730694274,-0.7083555492002833,-0.5530774274757698,-0.37550476584064746,-0.18279551469244595,0.017282219954326633,0.21666330866442846,0.40731070378620304,0.5815394126799017,0.7323262796153518,0.8535930890373471,0.9404515783118548,0.9894004834936936,0.9984666752054147,0.9672846954425639,0.8971114891784461,0.7907757369377016,0.6525638307415292,0.4880470897321317,0.3038571804107687,0.10741879429528882,-0.093349641244724,-0.2903551546349971,-0.47565645761694997,-0.6417840584168157,-0.7820413568077478,-0.8907745839295714,-0.9636007055971125,-0.9975841023195149,-0.9913549040625198,-0.9451642096818246,-0.8608739651332993,-0.7418819084691463,-0.5929846070858354,-0.4201841081893485,-0.23044599639373578,-0.03141861114634629,0.16887525768064257,0.36236176828754396,0.5412414833467964,0.6983037651638008,0.8272174363365312,0.9227859893884347,0.9811570578797376,0.9999777052206188,0.9784892714975921,0.9175579550392334,0.819639895979104,0.6886821692966212,0.5299636783045955,0.3498823621633776,0.155697295082882,-0.04476392681204136,-0.24342071572293766,-0.4322652205083861,-0.6036851230016027,-0.7507704904015702,-0.8675923145245396,-0.949441510003869,-0.993018737425935,-0.9965673996350833,-0.9599444501294716,-0.8846261592626476,-0.7736486058154537,-0.631485292721821,-0.46386682025605636,-0.2775498856516327,-0.08004492077254574,0.12068665324326856,0.31655335070881846,0.49965978901243124,0.6626249513310503,0.7988797152690693,0.9029316540491052,0.9705864361243379,0.9991168985982226,0.9873729791057301,0.9358280748039749,0.8465599597424089,0.723167029832892,0.5706232515833803,0.3950776616085143,0.20360649908821793,0.003927962709432974,-0.19590890976667694,-0.3878486980541371,-0.5641543131707453,-0.71771887933852,-0.8423522120024827,-0.933030344044761,-0.9860980417975258,-0.9994161474381194,-0.9724478083976547,-0.9062801178771794,-0.803580294142729,-0.6684881650110156,-0.5064492914738867,-0.32399545724493223,-0.12848137269016735,0.07221179339806165,0.26999410355554704,0.45689295686176457,0.6253744643216379,0.7686471397785353,0.8809356645837468,0.9577136905744346,0.9958862970764298,0.9939147470940213,0.9518785137671075,0.8714720768105428,0.7559366180710926,0.6099293695528056,0.43933588048914607,0.25103277097249777,0.05261053553732832,-0.1479324295208161,-0.3425122413382663,-0.5232853916377319,-0.682964918388442,-0.8151141430980149,-0.9144061331923072,-0.9768384305597078,-0.9998943905565734,-0.9826446279019532,-0.9257844801794259,-0.8316059787931714,-0.703905457228466,-0.5478305209256926,-0.36967254740919825,-0.17661308098660142,0.023565655156992337,0.22279446021802096,0.41304242509570777,0.5866406581752549,0.7365914181938479,0.8568501930492183,0.9425693539602771,0.99029356328513,0.9980990591115431,0.9656712020606898,0.8943171583941518,0.7869132081683406,0.6477888024436526,0.48255204319980893,0.2978636208585447,0.1011683219874277,-0.0996050698959502,-0.2963633834272574,-0.4811752949691971,-0.646591040107035,-0.785942713501271,-0.8936130520170164,-0.96526186648732,-0.9980009946506054,-0.9905107229130644,-0.9430929839768802,-0.8576591859391142,-0.7376531634700139,-0.5879123569070804,-0.41447281513305423,-0.2243258825674392,-0.025136378214536986,0.17506637303557018,0.36821220233093105,0.5465154052007059,0.7027885831450372,0.8307323675229968,0.9251893469751398,0.9823519625709809,0.9999159904324793,0.9771734249519313,0.9150410184836817,0.81602332707528,0.6841117518638764,0.5246236457771459,0.3439879711443783,0.14948614835501567,-0.0510414580498232,-0.24951158431345977,-0.43792390366203404,-0.6086835193149369,-0.754907114620347,-0.8707004194101821,-0.95139580791134,-0.9937404506461192,-0.9960274359226812,-0.9581645754108068,-0.881678120251608,-0.7696512379049364,-0.6265997297314098,-0.4582899991310403,-0.27150660793871984,-0.07377879087404987,0.12692304775790011,0.3225086209029156,0.5050938780649424,0.6673188112222461,0.8026441366016904,0.9056148930754195,0.9720803315334721,0.9993612314964744,0.9863579004389117,0.9335945023726064,0.8431979288059974,0.7188120637904816,0.5654508990279836,0.38929641996701475,0.19744941009418127,-0.0023567815043463365,-0.20206797128813475,-0.3936338052379385,-0.5693322684633809,-0.7220809594669144,-0.8457225816049225,-0.9352731435907732,-0.9871228640827812,-0.9991816818970402,-0.9709635063314586,-0.903605811472115,-0.7998237846358843,-0.6638008772245858,-0.5010201698837211,-0.31804334963246683,-0.12224620839282589,0.07847867503361555,0.27604008465738816,0.46247432405401206,0.6302662328057166,0.7726521224658103,0.8838924207031487,0.9595030333466038,0.9964360981304339,0.9932028439604955,0.9499336032469609,0.8683725582074893,0.7518074329173055,0.604936965218273,0.43368150069159883,0.24494434364713935,0.046333485066477734,-0.15414507535971642,-0.3484100509171293,-0.528630624371796,-0.6875421080543287,-0.8187387832729192,-0.9169321147041198,-0.9781639311447978,-0.9999659793131763,-0.9814594190887387,-0.923390249539668,-0.8280992377155244,-0.699427562374809,-0.5425619761469708,-0.3638257276388384,-0.1704236714112423,0.029848159562604486,0.22891681182842985,0.41875783204135025,0.5917187325178229,0.7408274628593198,0.8600734531628597,0.9446498999721121,0.9911475284275285,0.9976920200668904,0.9640195665646418,0.8914875038401351,0.7830195978741723,0.6429881877614965,0.4770379368103886,0.29185829627882076,0.09491385372972383,-0.1058565643427465,-0.3023599064484472,-0.48667512684318287,-0.651372482722222,-0.7898130270026011,-0.8964162241455628,-0.9668849014312968,-0.9983784679042693,-0.9896274185371927,-0.9409845079529877,-0.8544105308930702,-0.733395282620977,-0.5828168853459402,-0.40874515121531607,-0.21819690830975902,-0.01885315244521528,0.18125057361290672,0.374048092716141,0.5517677407704566,0.7072456423587645,0.8342144864139992,0.9275561614013625,0.9835080662908036,0.9998147809283434,0.9758189819769001,0.9124879396066792,0.8123745268541759,0.679514313361764,0.5192628916470006,0.33807999327671384,0.14326909721816183,-0.057316973250363085,-0.25559259768690284,-0.44356528968236686,-0.6136578738258025,-0.7590139214920762,-0.8737741333408727,-0.9533125275546394,-0.99442291307199,-0.9954481310845428,-0.9563468550749603,-0.8786952566880196,-0.7656234702834862,-0.6216894172834381,-0.4526950764519481,-0.2654526062485186,-0.06750974685836231,0.13315442906164937,0.32845115264044467,0.5105080169021912,0.6719863133321972,0.8063768550687546,0.9082623620937007,0.9735358316804239,0.9995660915906173,0.9853038625739967,0.9313240547936459,0.8398025932089563,0.7144287060845758,0.5602562122736451,0.38349980188218874,0.19128452223660405,-0.008641432629903375,-0.2082190515219361,-0.39940336466024773,-0.5744877362506003,-0.7264145188168798,-0.8490595468279102,-0.9374790016861596,-0.9881086969553823,-0.9989077506437086,-0.9694408531154736,-0.9008958144138036,-0.7960356836618243,-0.6590873706084152,-0.4955712589817458,-0.3120786799328909,-0.11600621561054927,0.08474245691578539,0.2820751627185293,0.4680374244195872,0.63513310701256,0.7766265869131248,0.8868142648094735,0.961254477635142,0.9969465419173449,0.9924517112670607,0.9479511722168545,0.8652387405954183,0.7476485528478048,0.5999206670628108,0.4280099913273014,0.23884624150172998,0.040054604514041865,-0.16035163277114994,-0.35429409898388237,-0.5339549772353566,-0.6920921411585215,-0.8223310848753574,-0.9194218791999066,-0.9794507961774733,-0.9999980713793203,-0.9802354445578128,-0.9209595468002506,-0.8245597883458534,-0.6949220415073613,-0.5372720012367546,-0.35796453746744217,-0.1642275304358657,0.03612948502459625,0.23503012167476714,0.4244566988758174,0.5967734351336345,0.7450342462963252,0.8632627420658181,0.9466931341698869,0.99196234519094,0.997245574148699,0.9623298541907754,0.8886226372821882,0.7790950598451318,0.6381621763099204,0.471504988360221,0.28584144387013977,0.08865563656137133,-0.112103877663329,-0.30834448684773563,-0.49215573600634116,-0.656128197404809,-0.7936521444419761,-0.8991839895954286,-0.9684697463223677,-0.9987165071710529,-0.9887050258236881,-0.9388388648908144,-0.8511281283106447,-0.729108434099983,-0.577698393663525,-0.40300134266763177,-0.21205931570312309,-0.012569182013426232,0.1874276151489072,0.37986920893698894,0.5569982825990891,0.7116747667599206,0.8376636554726715,0.9298863391825967,0.984625323375375,0.9996740807057876,0.97442599607034,0.9098988192498166,0.8086936394362152,0.6748900353800308,0.5138816276533974,0.3321586619139228,0.1370463872335979,-0.06359022454311858,-0.2616635156551925,-0.4491891557456947,-0.6186079900569751,-0.7630907488059692,-0.8768133349109604,-0.9551915932271174,-0.9950660977476197,-0.9948295080020694,-0.9544913609183203,-0.8756776863891198,-0.7615654620400196,-0.616754549325595,-0.4470822732072589,-0.25938811970218795,-0.06123803634038388,0.13938055102721852,0.3343807112031375,0.5159019916763058,0.6766272733037614,0.8100777232352033,0.9108739565341358,0.9749528790757903,0.9997314707890801,0.9842109071434139,0.9290168217453065,0.8363740870603599,0.7100171298491819,0.5550393965002682,0.3776880363090884,0.18511207901641685,-0.014925742435844571,-0.2143619075125313,-0.40515714843477674,-0.5796205129015606,-0.730719386221321,-0.8523629758678604,-0.9396478312038721,-0.9890555014768697,-0.9985943644978703,-0.967879908891505,-0.8981502337417924,-0.7922161408431078,-0.6543478313367228,-0.49010277398922397,-0.30610168373894575,-0.1097616408108141,0.09100289163748589,0.2880990993652437,0.4735820382269677,0.6399748947102206,0.7805703761369417,0.889701081495633,0.9629679542614369,0.9974176082756396,0.9916613786819857,0.9459312989789216,0.8620707477539791,0.7434601421301921,0.5948806732203067,0.4223215764097182,0.2327387053992961,0.03377414188346666,-0.1665518566082998,-0.36016415313020034,-0.5392582399269721,-0.6966148379836365,-0.82589090601647,-0.9218753283388448,-0.9806989748290965,-0.9999906654874317,-0.9789727526537646,-0.9184924679691456,-0.8209877704854547,-0.6903890725853453,-0.5319608051386479,-0.35208920840049596,-0.15802490279588433,0.042409383442949006,0.24113414829331142,0.4301388005050752,0.6018045663719015,0.7492116023451832,0.8664179337874626,0.9486989758498591,0.9927379813917087,0.9967597389907039,0.9606021316794067,0.8857226718769197,0.7751397490927743,0.6333109587068653,0.4659534163898902,0.2798133012863303,0.08239391766965311,-0.11834676310112713,-0.3143168882459242,-0.4976169059854148,-0.6608579963134064,-0.7974599141817954,-0.9019162390453097,-0.9700163385622642,-0.9990150990990716,-0.9877435812052519,-0.9366561395390374,-0.8478121078402906,-0.7247927872291192,-0.5725570840301885,-0.3972416163591122,-0.20591334717038462,-0.006284715123659591,0.19359725366253186,0.3856753210708306,0.5622068240905128,0.7160757814067884,0.8410797384636279,0.9321797882813909,0.985703689695243,0.9994938953221937,0.9729945222524519,0.9072737596782703,0.8049808102092192,0.6702391005686084,0.5084800663456827,0.32622421093694065,0.1308182641861463,-0.06986096414701677,-0.2677240984289793,-0.45479527972039513,-0.6235336724886027,-0.7671374355353656,-0.8798179040779438,-0.9570329307093656,-0.9956699792684812,-0.9941715911096558,-0.9525981662292544,-0.8726255285430085,-0.7574773734578834,-0.6117953207754585,-0.44145181109163556,-0.2533133878350353,-0.05496390704034409,0.14560116773500806,0.3402970623850503,0.5212755893359138,0.6812415078281324,0.8137465949240296,0.913449573243877,0.9763314177489858,0.9998573625597098,0.9830790773167508,0.926672894358761,0.832912545779457,0.7055775093329191,0.5498006577618181,0.3718613528009964,0.17893232423300537,-0.021209462704305765,-0.2204962966291583,-0.4108949292984098,-0.5847303956816812,-0.7349953916464517,-0.8556327382458394,-0.9417795464793974,-0.9899632402503239,-0.9982415358376617,-0.966280735313788,-0.8953691779011252,-0.7883653070441546,-0.6495824466120061,-0.4846149309005691,-0.30011259713022137,-0.10351273064203004,0.09725973192386997,0.29411165666386896,0.47910794647479826,0.6447914046575915,0.7844833343653357,0.8925527567380395,0.9646433955465304,0.9978492785991216,0.9908318774218496,0.9438740633141802,0.8588687048126508,0.7392423661984582,0.589817182760627,0.41661648062006423,0.22662197657552147,0.027492345240683506,-0.17274550197452845,-0.36601998150047366,-0.5445402029781808,-0.7011100198920529,-0.8294181060903275,-0.9242923652145346,-0.9819084177990617,-0.9999437619300288,-0.9776713932504436,-0.9159891104911217,-0.8173833252220125,-0.685828834652126,-0.5266285976344633,-0.34619997250195006,-0.1518160334828882,0.04868760677402551,0.24722865058702256,0.43580391249727674,0.6068119275128164,0.7533593660085379,0.869538903703917,0.9506673457852289,0.9934744063937271,0.9962345337824404,0.9588364672721781,0.8827877221672573,0.7711538218440879,0.628434726565898,0.4603834401755762,0.27377410662716856,0.07612894438016055,-0.12458497407441982,-0.3202768747449104,-0.5030584210749112,-0.6655616926302593,-0.8012361858226472,-0.9046128645767249,-0.9715246170636379,-0.9992742318945305,-0.9867431226570545,-0.9344364181110183,-0.8444626004582995,-0.7204485124679503,-0.5673931595175625,-0.3914661997876466,-0.19975924546521184,0.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],33:[function(require,module,exports){
module.exports={"expected":[0.0,0.19975924546521184,0.3914661997876466,0.5673931595175625,0.7204485124679503,0.8444626004582995,0.9344364181110183,0.9867431226570545,0.9992742318945305,0.9715246170636379,0.9046128645767249,0.8012361858226472,0.6655616926302593,0.5030584210749112,0.3202768747449104,0.12458497407441982,-0.07612894438016055,-0.27377410662716856,-0.4603834401755762,-0.628434726565898,-0.7711538218440879,-0.8827877221672573,-0.9588364672721781,-0.9962345337824404,-0.9934744063937271,-0.9506673457852289,-0.869538903703917,-0.7533593660085379,-0.6068119275128164,-0.43580391249727674,-0.24722865058702256,-0.04868760677402551,0.1518160334828882,0.34619997250195006,0.5266285976344633,0.685828834652126,0.8173833252220125,0.9159891104911217,0.9776713932504436,0.9999437619300288,0.9819084177990617,0.9242923652145346,0.8294181060903275,0.7011100198920529,0.5445402029781808,0.36601998150047366,0.17274550197452845,-0.027492345240683506,-0.22662197657552147,-0.41661648062006423,-0.589817182760627,-0.7392423661984582,-0.8588687048126508,-0.9438740633141802,-0.9908318774218496,-0.9978492785991216,-0.9646433955465304,-0.8925527567380395,-0.7844833343653357,-0.6447914046575915,-0.47910794647479826,-0.29411165666386896,-0.09725973192386997,0.10351273064203004,0.30011259713022137,0.4846149309005691,0.6495824466120061,0.7883653070441546,0.8953691779011252,0.966280735313788,0.9982415358376617,0.9899632402503239,0.9417795464793974,0.8556327382458394,0.7349953916464517,0.5847303956816812,0.4108949292984098,0.2204962966291583,0.021209462704305765,-0.17893232423300537,-0.3718613528009964,-0.5498006577618181,-0.7055775093329191,-0.832912545779457,-0.926672894358761,-0.9830790773167508,-0.9998573625597098,-0.9763314177489858,-0.913449573243877,-0.8137465949240296,-0.6812415078281324,-0.5212755893359138,-0.3402970623850503,-0.14560116773500806,0.05496390704034409,0.2533133878350353,0.44145181109163556,0.6117953207754585,0.7574773734578834,0.8726255285430085,0.9525981662292544,0.9941715911096558,0.9956699792684812,0.9570329307093656,0.8798179040779438,0.7671374355353656,0.6235336724886027,0.45479527972039513,0.2677240984289793,0.06986096414701677,-0.1308182641861463,-0.32622421093694065,-0.5084800663456827,-0.6702391005686084,-0.8049808102092192,-0.9072737596782703,-0.9729945222524519,-0.9994938953221937,-0.985703689695243,-0.9321797882813909,-0.8410797384636279,-0.7160757814067884,-0.5622068240905128,-0.3856753210708306,-0.19359725366253186,0.006284715123659591,0.20591334717038462,0.3972416163591122,0.5725570840301885,0.7247927872291192,0.8478121078402906,0.9366561395390374,0.9877435812052519,0.9990150990990716,0.9700163385622642,0.9019162390453097,0.7974599141817954,0.6608579963134064,0.4976169059854148,0.3143168882459242,0.11834676310112713,-0.08239391766965311,-0.2798133012863303,-0.4659534163898902,-0.6333109587068653,-0.7751397490927743,-0.8857226718769197,-0.9606021316794067,-0.9967597389907039,-0.9927379813917087,-0.9486989758498591,-0.8664179337874626,-0.7492116023451832,-0.6018045663719015,-0.4301388005050752,-0.24113414829331142,-0.042409383442949006,0.15802490279588433,0.35208920840049596,0.5319608051386479,0.6903890725853453,0.8209877704854547,0.9184924679691456,0.9789727526537646,0.9999906654874317,0.9806989748290965,0.9218753283388448,0.82589090601647,0.6966148379836365,0.5392582399269721,0.36016415313020034,0.1665518566082998,-0.03377414188346666,-0.2327387053992961,-0.4223215764097182,-0.5948806732203067,-0.7434601421301921,-0.8620707477539791,-0.9459312989789216,-0.9916613786819857,-0.9974176082756396,-0.9629679542614369,-0.889701081495633,-0.7805703761369417,-0.6399748947102206,-0.4735820382269677,-0.2880990993652437,-0.09100289163748589,0.1097616408108141,0.30610168373894575,0.49010277398922397,0.6543478313367228,0.7922161408431078,0.8981502337417924,0.967879908891505,0.9985943644978703,0.9890555014768697,0.9396478312038721,0.8523629758678604,0.730719386221321,0.5796205129015606,0.40515714843477674,0.2143619075125313,0.014925742435844571,-0.18511207901641685,-0.3776880363090884,-0.5550393965002682,-0.7100171298491819,-0.8363740870603599,-0.9290168217453065,-0.9842109071434139,-0.9997314707890801,-0.9749528790757903,-0.9108739565341358,-0.8100777232352033,-0.6766272733037614,-0.5159019916763058,-0.3343807112031375,-0.13938055102721852,0.06123803634038388,0.25938811970218795,0.4470822732072589,0.616754549325595,0.7615654620400196,0.8756776863891198,0.9544913609183203,0.9948295080020694,0.9950660977476197,0.9551915932271174,0.8768133349109604,0.7630907488059692,0.6186079900569751,0.4491891557456947,0.2616635156551925,0.06359022454311858,-0.1370463872335979,-0.3321586619139228,-0.5138816276533974,-0.6748900353800308,-0.8086936394362152,-0.9098988192498166,-0.97442599607034,-0.9996740807057876,-0.984625323375375,-0.9298863391825967,-0.8376636554726715,-0.7116747667599206,-0.5569982825990891,-0.37986920893698894,-0.1874276151489072,0.012569182013426232,0.21205931570312309,0.40300134266763177,0.577698393663525,0.729108434099983,0.8511281283106447,0.9388388648908144,0.9887050258236881,0.9987165071710529,0.9684697463223677,0.8991839895954286,0.7936521444419761,0.656128197404809,0.49215573600634116,0.30834448684773563,0.112103877663329,-0.08865563656137133,-0.28584144387013977,-0.471504988360221,-0.6381621763099204,-0.7790950598451318,-0.8886226372821882,-0.9623298541907754,-0.997245574148699,-0.99196234519094,-0.9466931341698869,-0.8632627420658181,-0.7450342462963252,-0.5967734351336345,-0.4244566988758174,-0.23503012167476714,-0.03612948502459625,0.1642275304358657,0.35796453746744217,0.5372720012367546,0.6949220415073613,0.8245597883458534,0.9209595468002506,0.9802354445578128,0.9999980713793203,0.9794507961774733,0.9194218791999066,0.8223310848753574,0.6920921411585215,0.5339549772353566,0.35429409898388237,0.16035163277114994,-0.040054604514041865,-0.23884624150172998,-0.4280099913273014,-0.5999206670628108,-0.7476485528478048,-0.8652387405954183,-0.9479511722168545,-0.9924517112670607,-0.9969465419173449,-0.961254477635142,-0.8868142648094735,-0.7766265869131248,-0.63513310701256,-0.4680374244195872,-0.2820751627185293,-0.08474245691578539,0.11600621561054927,0.3120786799328909,0.4955712589817458,0.6590873706084152,0.7960356836618243,0.9008958144138036,0.9694408531154736,0.9989077506437086,0.9881086969553823,0.9374790016861596,0.8490595468279102,0.7264145188168798,0.5744877362506003,0.39940336466024773,0.2082190515219361,0.008641432629903375,-0.19128452223660405,-0.38349980188218874,-0.5602562122736451,-0.7144287060845758,-0.8398025932089563,-0.9313240547936459,-0.9853038625739967,-0.9995660915906173,-0.9735358316804239,-0.9082623620937007,-0.8063768550687546,-0.6719863133321972,-0.5105080169021912,-0.32845115264044467,-0.13315442906164937,0.06750974685836231,0.2654526062485186,0.4526950764519481,0.6216894172834381,0.7656234702834862,0.8786952566880196,0.9563468550749603,0.9954481310845428,0.99442291307199,0.9533125275546394,0.8737741333408727,0.7590139214920762,0.6136578738258025,0.44356528968236686,0.25559259768690284,0.057316973250363085,-0.14326909721816183,-0.33807999327671384,-0.5192628916470006,-0.679514313361764,-0.8123745268541759,-0.9124879396066792,-0.9758189819769001,-0.9998147809283434,-0.9835080662908036,-0.9275561614013625,-0.8342144864139992,-0.7072456423587645,-0.5517677407704566,-0.374048092716141,-0.18125057361290672,0.01885315244521528,0.21819690830975902,0.40874515121531607,0.5828168853459402,0.733395282620977,0.8544105308930702,0.9409845079529877,0.9896274185371927,0.9983784679042693,0.9668849014312968,0.8964162241455628,0.7898130270026011,0.651372482722222,0.48667512684318287,0.3023599064484472,0.1058565643427465,-0.09491385372972383,-0.29185829627882076,-0.4770379368103886,-0.6429881877614965,-0.7830195978741723,-0.8914875038401351,-0.9640195665646418,-0.9976920200668904,-0.9911475284275285,-0.9446498999721121,-0.8600734531628597,-0.7408274628593198,-0.5917187325178229,-0.41875783204135025,-0.22891681182842985,-0.029848159562604486,0.1704236714112423,0.3638257276388384,0.5425619761469708,0.699427562374809,0.8280992377155244,0.923390249539668,0.9814594190887387,0.9999659793131763,0.9781639311447978,0.9169321147041198,0.8187387832729192,0.6875421080543287,0.528630624371796,0.3484100509171293,0.15414507535971642,-0.046333485066477734,-0.24494434364713935,-0.43368150069159883,-0.604936965218273,-0.7518074329173055,-0.8683725582074893,-0.9499336032469609,-0.9932028439604955,-0.9964360981304339,-0.9595030333466038,-0.8838924207031487,-0.7726521224658103,-0.6302662328057166,-0.46247432405401206,-0.27604008465738816,-0.07847867503361555,0.12224620839282589,0.31804334963246683,0.5010201698837211,0.6638008772245858,0.7998237846358843,0.903605811472115,0.9709635063314586,0.9991816818970402,0.9871228640827812,0.9352731435907732,0.8457225816049225,0.7220809594669144,0.5693322684633809,0.3936338052379385,0.20206797128813475,0.0023567815043463365,-0.19744941009418127,-0.38929641996701475,-0.5654508990279836,-0.7188120637904816,-0.8431979288059974,-0.9335945023726064,-0.9863579004389117,-0.9993612314964744,-0.9720803315334721,-0.9056148930754195,-0.8026441366016904,-0.6673188112222461,-0.5050938780649424,-0.3225086209029156,-0.12692304775790011,0.07377879087404987,0.27150660793871984,0.4582899991310403,0.6265997297314098,0.7696512379049364,0.881678120251608,0.9581645754108068,0.9960274359226812,0.9937404506461192,0.95139580791134,0.8707004194101821,0.754907114620347,0.6086835193149369,0.43792390366203404,0.24951158431345977,0.0510414580498232,-0.14948614835501567,-0.3439879711443783,-0.5246236457771459,-0.6841117518638764,-0.81602332707528,-0.9150410184836817,-0.9771734249519313,-0.9999159904324793,-0.9823519625709809,-0.9251893469751398,-0.8307323675229968,-0.7027885831450372,-0.5465154052007059,-0.36821220233093105,-0.17506637303557018,0.025136378214536986,0.2243258825674392,0.41447281513305423,0.5879123569070804,0.7376531634700139,0.8576591859391142,0.9430929839768802,0.9905107229130644,0.9980009946506054,0.96526186648732,0.8936130520170164,0.785942713501271,0.646591040107035,0.4811752949691971,0.2963633834272574,0.0996050698959502,-0.1011683219874277,-0.2978636208585447,-0.48255204319980893,-0.6477888024436526,-0.7869132081683406,-0.8943171583941518,-0.9656712020606898,-0.9980990591115431,-0.99029356328513,-0.9425693539602771,-0.8568501930492183,-0.7365914181938479,-0.5866406581752549,-0.41304242509570777,-0.22279446021802096,-0.023565655156992337,0.17661308098660142,0.36967254740919825,0.5478305209256926,0.703905457228466,0.8316059787931714,0.9257844801794259,0.9826446279019532,0.9998943905565734,0.9768384305597078,0.9144061331923072,0.8151141430980149,0.682964918388442,0.5232853916377319,0.3425122413382663,0.1479324295208161,-0.05261053553732832,-0.25103277097249777,-0.43933588048914607,-0.6099293695528056,-0.7559366180710926,-0.8714720768105428,-0.9518785137671075,-0.9939147470940213,-0.9958862970764298,-0.9577136905744346,-0.8809356645837468,-0.7686471397785353,-0.6253744643216379,-0.45689295686176457,-0.26999410355554704,-0.07221179339806165,0.12848137269016735,0.32399545724493223,0.5064492914738867,0.6684881650110156,0.803580294142729,0.9062801178771794,0.9724478083976547,0.9994161474381194,0.9860980417975258,0.933030344044761,0.8423522120024827,0.71771887933852,0.5641543131707453,0.3878486980541371,0.19590890976667694,-0.003927962709432974,-0.20360649908821793,-0.3950776616085143,-0.5706232515833803,-0.723167029832892,-0.8465599597424089,-0.9358280748039749,-0.9873729791057301,-0.9991168985982226,-0.9705864361243379,-0.9029316540491052,-0.7988797152690693,-0.6626249513310503,-0.49965978901243124,-0.31655335070881846,-0.12068665324326856,0.08004492077254574,0.2775498856516327,0.46386682025605636,0.631485292721821,0.7736486058154537,0.8846261592626476,0.9599444501294716,0.9965673996350833,0.993018737425935,0.949441510003869,0.8675923145245396,0.7507704904015702,0.6036851230016027,0.4322652205083861,0.24342071572293766,0.04476392681204136,-0.155697295082882,-0.3498823621633776,-0.5299636783045955,-0.6886821692966212,-0.819639895979104,-0.9175579550392334,-0.9784892714975921,-0.9999777052206188,-0.9811570578797376,-0.9227859893884347,-0.8272174363365312,-0.6983037651638008,-0.5412414833467964,-0.36236176828754396,-0.16887525768064257,0.03141861114634629,0.23044599639373578,0.4201841081893485,0.5929846070858354,0.7418819084691463,0.8608739651332993,0.9451642096818246,0.9913549040625198,0.9975841023195149,0.9636007055971125,0.8907745839295714,0.7820413568077478,0.6417840584168157,0.47565645761694997,0.2903551546349971,0.093349641244724,-0.10741879429528882,-0.3038571804107687,-0.4880470897321317,-0.6525638307415292,-0.7907757369377016,-0.8971114891784461,-0.9672846954425639,-0.9984666752054147,-0.9894004834936936,-0.9404515783118548,-0.8535930890373471,-0.7323262796153518,-0.5815394126799017,-0.40731070378620304,-0.21666330866442846,-0.017282219954326633,0.18279551469244595,0.37550476584064746,0.5530774274757698,0.7083555492002833,0.8350798730694274,0.9281421441521047,0.9837910241840393,0.9997833079371261,0.9754743467768675,0.9118440344357649,0.8114573075168103,0.6783607529508346,0.5179194901593677,0.33660090319917785,0.141713940641782,-0.058885507995446486,-0.2571112829968669,-0.44497290738306916,-0.6148976828762344,-0.7600359452144884,-0.8745371739796872,-0.9537858269571543,-0.9945873925488683,-0.9952971604713966,-0.9558865199941523,-0.8779441132373496,-0.7646117970402293,-0.6204579947755737,-0.451293543295877,-0.2639374582173399,-0.0659420595386218,0.13471146222585503,0.3299347676737303,0.5118584093126248,0.6731490488290353,0.8073050638076174,0.9089186279991328,0.973893700687048,0.9996111380060173,0.9850342705780795,0.9307506916343067,0.8389485711435491,0.7133284507252867,0.5589540748917488,0.3820482716091657,0.18974211022842716,-0.010212551776406816,-0.20975554602574664,-0.4008432984590334,-0.5757730656420654,-0.7274934321992291,-0.8498885532245702,-0.9380246838660307,-0.9883490584808425,-0.9988331025465302,-0.96905420445894,-0.9002127509974368,-0.7950837397581342,-0.6579049190568588,-0.494205964380456,-0.31058557727965946,-0.11444549184307863,0.08630788905400849,0.28358220068968093,0.46942531955355,0.6363459132845377,0.7776154161268815,0.8875392572793732,0.9616864089294062,0.997068000894244,0.9922578019176881,0.9474497110231604,0.8644499414479855,0.7466042122242802,0.5986628823126059,0.4265894637282711,0.23732023249263118,0.03848462748714696,-0.16190229207364681,-0.3557629335168537,-0.5352827783085495,-0.6932253851375042,-0.8232240907182611,-0.9200386498592881,-0.9797664696405342,-0.999999922855149,-0.9799233994134549,-0.9203461835691695,-0.8236698316874587,-0.6937913655565799,-0.5359461835182625,-0.35649702166662356,-0.16267747208501004,0.037699603104763516,0.23655700805616958,0.42587880479937623,0.5980334355383171,0.7460813505912882,0.8640547414981452,0.9471981032584814,0.9921599286420592,0.9971278073774232,0.9619014843732712,0.8879009319971314,0.778109111017978,0.6369517275179238,0.4701188327696679,0.28433545738489263,0.08709052546614622,-0.11366502377192404,-0.3098387382016996,-0.4935228593638084,-0.6573130840508741,-0.7946070316199533,-0.8998703858224639,-0.968859982980451,-0.9987948538283931,-0.9884683243281114,-0.9382966566748154,-0.8503022697764517,-0.7280322155883917,-0.5764151975209323,-0.40156289450462535,-0.2105235993360307,-0.010998102137931752,0.18897072833481182,0.3813221525719835,0.5583024885546726,0.7127776625204262,0.8385207833322739,0.9304631483346334,0.984898562654595,0.9996327358423809,0.974071733674908,0.9092459196323628,0.8077684209670809,0.6737297935970219,0.5125331318792877,0.33067626998608657,0.13548985434064442,-0.0651581545917696,-0.263179639630971,-0.45059235872184883,-0.6198417089499497,-0.7641052524321013,-0.8775677286496304,-0.9556554674819839,-0.9952207537568558,-0.9946687115850693,-0.9540215937754075,-0.8749178848242997,-0.7605462536390255,-0.6155170183584289,-0.4456763045221652,-0.25787038786842015,-0.05966972109744427,0.1409362309235853,0.33586104632784164,0.5172473097504015,0.6777833445828754,0.810997946509495,0.911521237622036,0.9753011260897385,0.9997666458989907,0.9839315924413216,0.9284342764011886,0.8355117934652684,0.7089098470404845,0.5537317590255453,0.37623275500853215,0.18356781624978874,-0.01649673746764702,-0.21589630803161233,-0.40659310278721134,-0.5809001377964838,-0.7317911000051233,-0.8531835777795673,-0.9401842427970389,-0.9892861000110305,-0.9985098545507841,-0.9674836970574235,-0.8974582913117402,-0.7912563600024296,-0.6531589008316894,-0.4887326195844303,-0.3046055363307307,-0.10819981007092268,0.09256744834353102,0.289603314788238,0.47496527747368816,0.6411813994346354,0.7815515121579837,0.8904172992401659,0.9633903830066586,0.9975292199273929,0.9914576741768364,0.9454204896413592,0.8612734242980433,0.742408444648294,0.5936169956166378,0.4208968575029116,0.23121037557966312,0.03220380809510534,-0.16810089424212676,-0.3616294529338379,-0.5405807356950144,-0.6977412199383797,-0.8267757697241374,-0.9224830049612823,-0.9810049689339441,-0.999982642458517,-0.9786510358992253,-0.9178700258848335,-0.8200896936992133,-0.6892515625542478,-0.5306297148690255,-0.35061819411418577,-0.15647326104900597,0.04397910600295344,0.24265867618186196,0.43155668003380293,0.6030586428456695,0.7502513239667313,0.8672013893992673,0.9491945843720575,0.9929257648547943,0.9966321278470871,0.960164269931694,0.8849922097233179,0.7741461314479049,0.6320942382778869,0.4645626391526719,0.2783045294431654,0.0808279697830426,-0.11990676370361839,-0.3158080579715227,-0.4989791358126782,-0.6620363747855604,-0.7984069408864697,-0.9025937393551985,-0.9703970024535793,-0.9990835820180668,-0.98749712260684,-0.9361046741643421,-0.8469778652474017,-0.7237093957200749,-0.5712682150947959,-0.3957992242780773,-0.20437557473933235,-0.004713549918122389,0.19513847800485748,0.38712447782791876,0.5635054977828304,0.7171716225240312,0.8419285736725507,0.9327474010518884,0.98596719956804,0.999442680219638,0.9726306466542959,0.9066118914025106,0.8040476291526604,0.6690722232407529,0.5071265295480072,0.3247385757103711,0.12926041645660505,-0.0714282275690453,-0.26923760118669315,-0.45619401254827996,-0.6247612524946182,-0.7681443789943326,-0.8805636211193928,-0.9574873614944666,-0.995814805701466,-0.9940009752399479,-0.9521189855790982,-0.8718570988747322,-0.7564506701558593,-0.6105517302290366,-0.4400414624105311,-0.25179313214607135,-0.05339502581960996,0.14715543291727334,0.341774059130802,0.5226157799362187,0.6823908692270056,0.8146587963867375,0.9140878439479129,0.9766700290151802,0.9998826649747825,0.9827900509408556,0.9260811898392708,0.8320420147135714,0.7044632428103127,0.5484875718434284,0.3704023779536443,0.17738627170329233,-0.02278027157024322,-0.22202854255766222,-0.41232684748713216,-0.5860042655374105,-0.7360598635010766,-0.8564449032604373,-0.9423066662986527,-0.9901840666850016,-0.9981471673786445,-0.9658749759517511,-0.8946683837877394,-0.7873977271759494,-0.6483870841138895,-0.48323997081065234,-0.2986134640619346,-0.10194985461896708,0.09882335140078391,0.29561299012518766,0.48048647519909843,0.6459915601798402,0.78545673844074,0.8932601714679999,0.9650563050576212,0.9979510385172887,0.9906183858068568,0.9433539260087066,0.8580628885409535,0.7381833533981448,0.5885476622162699,0.4151876266790758,0.22509138631137082,0.025921716715978326,-0.17429285675576336,-0.36748168869831904,-0.545857341205064,-0.7022294953327013,-0.8302947927123616,-0.924890923797989,-0.9822047204595261,-0.9999258647132646,-0.9773400175928891,-0.915357614138838,-0.8164771637801751,-0.6846845354701397,-0.5252922873891581,-0.3447255178322958,-0.15026286962681226,0.05025687181293837,0.24875075976680616,0.4372175096276928,0.6080600305221391,0.7543916638897147,0.8703137845502443,0.9511535741654599,0.9936523824517055,0.9960970833068664,0.9583891308889445,0.8820485319969168,0.770152574627467,0.627211782558003,0.4589880962246371,0.272262609019641,0.07456222155396675,-0.1261437675538016,-0.32176490394389545,-0.5044157035665722,-0.6667335163848676,-0.8021753146483394,-0.9052814422095268,-0.9718956931527151,-0.9993328483702388,-0.9864869166904429,-0.9338757173594152,-0.8436200067576556,-0.7193579907532882,-0.566098668697157,-0.3900199207602549,-0.1982194777091357,0.0015711884776144658,0.20129852008865126,0.39291151242795935,0.5686862496515127,0.7215372556583758,0.8453031094892075,0.9349948120804082,0.9869968927152978,0.9992131485757227,0.9711511426351227,0.9039420537851572,0.8002950790374609,0.6643882258469431,0.5016998967157386,0.3187880548992832,0.12302587304024276,-0.0776954792717733,-0.2752849283864332,-0.46177764760794676,-0.6296561191979854,-0.7721531653635867,-0.8835247330571517,-0.9592814366383818,-0.996369524918817,-0.9932939778102994,-0.9501787705545426,-0.8687618762836339,-0.7523252083582643,-0.6055623265064722,-0.4343892395261612,-0.24570593109000294,-0.04711822154319085,0.15336882256063794,0.34767357253030967,0.527963607826106,0.6869714407732183,0.8182874688429715,0.9166183456008479,0.9780003553944109,0.9999591906508685,0.9816096911653474,0.9236915248908256,0.8285393719379297,0.6999888136668367,0.5432217204804356,0.3645573707329872,0.17119772074773995,-0.02906290589683681,-0.22815200739277045,-0.4180443060870997,-0.5910852472618101,-0.7402995540793804,-0.8596724008512054,-0.9443918705393348,-0.9910429230348332,-0.9977450553555437,-0.9642281046832294,-0.8918431386213098,-0.7835079936871047,-0.643589657380882,-0.4777282350080009,-0.2926095971482654,-0.09569587234819439,0.1050753511299508,0.3016109893301135,0.48598869465322425,0.6507762055283237,0.7893309407263541,0.8960677616750488,0.9666841092816177,0.9983334400029279,0.9897399699579824,0.9412501017504131,0.8548184609865237,0.7339291053566697,0.583455082340183,0.40946199676015815,0.21896350637582954,0.01963860147996929,-0.1804779350441814,-0.3733194096584887,-0.5511123864232012,-0.7066900340423732,-0.8337810206884912,-0.927262311261337,-0.9833656768294643,-0.9998295918620015,-0.9759903962771159,-0.9128090475664741,-0.8128323846182075,-0.6800904646927857,-0.5199341118965779,-0.3388192255701365,-0.14404654311662554,0.05653265257528117,0.25483301818575904,0.44286106998943064,0.6130374010226994,0.7585022068249504,0.8733918040175727,0.9530749952624604,0.9943397527328223,0.9955226948899785,0.9565761373595094,0.879070015087438,0.7661285982942537,0.6223045532056974,0.4533954241691013,0.2662099347582443,0.06829352826376991,-0.13237578897316687,-0.32770904083505803,-0.5098323478918,-0.671404323320936,-0.8059120040621723,-0.9079333882264938,-0.9733559958825148,-0.9995426430393807,-0.9854377464800588,-0.9316098742994672,-0.8402288269360227,-0.7149781725599939,-0.5609067625149128,-0.38422521222220757,-0.19205555139928326,0.007855864814523503,0.20745061127658446,0.3986830277956931,0.5738445395312753,0.7258743894894933,0.8486442574947437,0.9372052926518349,0.9879876014255272,0.9989441499766828,0.9696332800548954,0.9012365122336402,0.7965109188398691,0.6596779864242395,0.49625344772376223,0.31282494258672433,0.11678647034371031,-0.0839596621557748,-0.2813213823726546,-0.4673430433582914,-0.6345261157223943,-0.7761314532007364,-0.8864509475047528,-0.9610376220513046,-0.9968848894985856,-0.9925477472211354,-0.9482010253363939,-0.8656323393062406,-0.7481700311938344,-0.6005490042624648,-0.428719859120774,-0.23960902513263538,-0.04083955618964534,0.1595761544370024,0.35355935350712925,0.533290582191326,0.6915248782980038,0.8218838205527519,0.9191126426310229,0.9792920526821417,0.9999962199046342,0.9803905597366721,0.9212653759429423,0.8250040034857995,0.6954867363412931,0.5379344129273202,0.35869796421280326,0.16500240781875694,-0.03534439229580748,-0.2342664606720581,-0.4237452527587902,-0.5961428822808928,-0.7445100042805533,-0.8628659430720906,-0.9464397731576074,-0.9918626351373878,-0.9973035343641147,-0.9625431483000509,-0.8889826674040815,-0.7795873131727398,-0.6387668101215489,-0.4721976298791805,-0.2865941727307724,-0.08943811027855374,0.11132320058927594,0.30759707549391907,0.4914717185092635,0.6555351464959573,0.7931739659914865,0.8988399589669679,0.9682737313836038,0.9986764092802001,0.9888224613259163,0.9391090999634011,0.8515402697832941,0.7296458685582646,0.5783394571352941,0.40372019389731106,0.21282697781219512,0.013354710557835589,-0.186655884808947,-0.3791423852358183,-0.5563456637854225,-0.7111226598849454,-0.8372343159533112,-0.9295970736862045,-0.9844877921882538,-0.9996938277073143,-0.9746022252592765,-0.9102244268311345,-0.8091555001748892,-0.6754695316790333,-0.5145554000286351,-0.3328995506145881,-0.13782452705115106,0.06280620040897861,0.2609052112014146,0.4484871382095016,0.6179905577510674,0.7625827904140547,0.8764353262255615,0.9549587717706856,0.99498784854837,0.9949089852836318,0.9547253609530855,0.8760567766404038,0.7620743613874928,0.6173727440468384,0.4477848438855914,0.2601467457277376,0.06202213751342911,-0.13860258180906268,-0.33364023386334185,-0.5152288548414607,-0.6760486111060526,-0.809616861536116,-0.9105494726594329,-0.9747778529638912,-0.9997129577390134,-0.984349653415853,-0.9293072344808241,-0.83680445972744,-0.710570114134361,-0.5556927016181981,-0.37841532754363627,-0.18588403927269162,0.014140230860215354,0.21359450857320456,0.40443879596753013,0.5789801636797616,0.7301828527091435,0.8519518857203658,0.9393787554565516,0.9889392865676772,0.9986356950474328,0.9680771188662017,0.8984953736115447,0.7926952980267572,0.6549416910178607,0.4907873976961559,0.3068494743038547,0.1105424548112053,-0.0902205287982249,-0.28734672471726386,-0.4728899799771221,-0.6393710497125998,-0.7800790853711786,-0.8893421488825178,-0.9627558483673474,-0.9973608790848861,-0.9917623129471008,-0.9461858280417091,-0.8624686115530826,-0.743985302783899,-0.5955119615133656,-0.4230335451237251,-0.23350265508979626,-0.034559277753940756,0.16577718336895989,0.35943116958453564,0.5385964926268872,0.6960510019494486,0.8254477094673043,0.921570636518597,0.9805450698588807,0.9999937512734969,0.9791327048081355,0.9188028388237021,0.8214360489973489,0.6909571886568454,0.5326258580223607,0.3528243898281846,0.15880057761902525,-0.04162448266079054,-0.24037166088666814,-0.4294294623259913,-0.6011769708279721,-0.7486910478001269,-0.8660254037844524,-0.9484502932653246,-0.9926431706156454,-0.996822621843564,-0.9608201733546654,-0.8860870831190446,-0.7756358404919924,-0.6339187328289198,-0.4666483738721715,-0.2805674284068408,-0.08317681557937368,0.11756665300104419,0.313571012177833,0.496935330198577,0.660268195113992,0.7969856624441761,0.9015766538474393,0.9698251085766236,0.998979932802496,0.9878658961504458,0.9369310052130423,0.8482284444133582,0.7253338121823827,0.5732009886587661,0.39796244488040844,0.20668204300128257,0.007070292150887426,-0.19282646203316112,-0.3849503854342982,-0.5615569665876071,-0.7155271977803502,-0.8406545421084632,-0.9318951188540443,-0.9855710222145587,-0.9995185776116229,-0.9731755593694033,-0.9076038540202341,-0.8054466556799612,-0.6708219189465906,-0.5091563642338749,-0.32696672678125493,-0.1315970671878204,0.06907726752116702,0.2669670989741401,0.45409549206927047,0.6229193050671552,0.766633253482016,0.879444230961053,0.9568048292846835,0.9955966442998377,0.9942559787281466,0.9528368747716943,0.873008935672864,0.757990024041536,0.6124165498782153,0.442156576980974,0.25407328141222374,0.05574829701060743,-0.14482390011549695,-0.33955824875825497,-0.5206050112641876,-0.6806661963000217,-0.8132897407355497,-0.9131295921781515,-0.9761612082362785,-0.9998437857420421,-0.9832226804753678,-0.9269678888532531,-0.833347040387696,-0.7061339895860319,-0.5504566919521452,-0.3725904962035125,-0.17970518509190198,0.020424038394556542,0.21972996930664582,0.41017858960189063,0.5840929192499363,0.7344624751415371,0.8552258635212464,0.9415151146470692,0.9898519105520512,0.9982877959713388,0.9664827205343572,0.8957187461884204,0.7888483673076115,0.6501795267021867,0.4853019625310763,0.30086188606997893,0.10429407306898206,-0.09647783190708553,-0.2933607174311105,-0.4784182383713965,-0.6441907298031895,-0.7839959059512032,-0.8921982229936753,-0.9644360477199564,-0.9977974748770697,-0.9909377060112947,-0.9441332582668293,-0.8592708179851865,-0.7397711884170991,-0.5904513972123702,-0.4173305221331877,-0.22738706215112608,-0.02827763429464439,0.17197166442802955,0.36528878883728344,0.5438811295598056,0.7005496329546478,0.8289789948199581,0.9239922301776327,0.9817593574329011,0.9999517848549626,0.9778361760625174,0.9163040107985247,0.8178356493997344,0.6864003495216819,0.5272962654430643,0.34693687957369346,0.15259247510861823,-0.047902928940419934,-0.24646736689324866,-0.4350967102735732,-0.6061873140665599,-0.7528425194951008,-0.8691506581957328,-0.9504233514509398,-0.9933844986399992,-0.9963023367889995,-0.9590592479011957,-0.8831565001360995,-0.7716537317203014,-0.6290456169924514,-0.4610806861717778,-0.2745296022209694,-0.07691223555951478,0.1238054617611021,0.3195325634232619,0.5023793139192431,0.6649751644361837,0.8007658795298891,0.9042777382224193,0.971338179584321,0.9992439985812327,0.9868703122140287,0.9347159035297881,0.8448831156872775,0.7209931065467936,0.5680398798699325,0.39218897712927003,0.2005289446560764,0.0007855944812411758,-0.19898942299123717,-0.39074318084923293,-0.5667460889934917,-0.7199034737579603,-0.8440415640617992,-0.9341563559966206,-0.9866153241229029,-0.9993038484969604,-0.971710454958001,-0.9049474326412713,-0.8017059976254397,-0.6661478100670236,-0.5037372177637203,-0.3210209884048815,-0.12536440949902816,0.07534560621716488,0.2730184420712849,0.4596859100496581,0.6278234482953109,0.7706534360435419,0.8824183993782112,0.9586130948888106,0.9961661159409878,0.9935637010160039,0.9509107534068103,0.8699266125685181,0.7538757475796422,0.607436166459777,0.4365108457607787,0.2479897817014665,0.04947225455958656,-0.15103949816251389,-0.34546285176981584,-0.5259606048124185,-0.6852568965172634,-0.8169304965890148,-0.9156736448729893,-0.9775060070598695,-0.9999351218810186,-0.9820568721718141,-0.9245919298162759,-0.8298567054780112,-0.7016699741333063,-0.5451989403287953,-0.36675094827117083,-0.17351923290961987,0.02670703921958736,0.22585675113813178,0.41590218198839096,0.5891826042980514,0.7387130877499235,0.8584660615817422,0.9436142858413606,0.9907254373318005,0.9979004664897253,0.9648501480349397,0.8929067396356424,0.7849702786287028,0.6453916815733249,0.4797973588925285,0.2948624143829807,0.09804157191594944,-0.10273132433124109,-0.2993631229733586,-0.48392760018567543,-0.6489849656263396,-0.7878817602341498,-0.8950190570288483,-0.9660781537445748,-0.9981946596304527,-0.9900739589840848,-0.9420433970841974,-0.8560390849091848,-0.7355278545425159,-0.5853675112418885,-0.4116110154074622,-0.22126248787044095,-0.021994873924438118,0.17815935294441465,0.3711319799010063,0.5491442842572151,0.7050205936263982,0.8324775371319159,0.926377327959952,0.9829348674422471,0.9998703223066221,0.9765010247101901,0.9137689905661831,0.8142029469016296,0.681816398922073,0.5219458456977887,0.34103566599457114,0.14637834549552167,-0.054179483148636895,-0.25255333792328505,-0.4407467727564596,-0.6111737140978343,-0.7569642553904111,-0.8722415828646392,-0.9523588697825056,-0.9940865899294361,-0.9957426997506541,-0.957260441492776,-0.8801910342075001,-0.7676411441430808,-0.624147655090728,-0.4554947866906685,-0.26848093265553263,-0.07064461765754465,0.13003938044885247,0.32548149376056956,0.5078034546444837,0.6696558685466671,0.804514467937499,0.906943105404336,0.9728128846433858,0.9994685961863259,0.9858357488402414,0.93246388240578,0.8415044157390207,0.7166239231007779,0.5628563346225384,0.3864000186844965,0.19436792581164294,-0.005499134217785927,-0.20514452425822094,-0.3965205426766435,-0.5719128260429652,-0.7242513149636155,-0.8473952480325634,-0.9363806957994707,-0.9876206566654236,-0.9990496488447023,-0.9702069698938076,-0.9022552676176321,-0.7979336737600321,-0.6614473896585512,-0.49829817466360793,-0.31506257033058005,-0.1191268001624445,0.08161096890983081,0.27905900147655577,0.46525817134034614,0.6327027937314281,0.7746431793092511,0.8853577140032707,0.9603834971600903,0.9966962409788125,0.9928321794908029,0.9489470729364757,0.8668099290730413,0.7497316945077181,0.6024317905068564,0.43084787322021356,0.24189648688182797,0.04319425805181945,-0.15724913044626548,-0.3513538096778396,-0.5312954239506393,-0.6898205304342058,-0.8205389852937462,-0.9181815302588776,-0.9788121963177657,-0.9999869625483432,-0.980852274552317,-0.9221794512156248,-0.8263335928598482,-0.6971782440958582,-0.5399196544190971,-0.36089691439738086,-0.16732642705868436,0.03298898516895581,0.23197461207204567,0.4216093470562792,0.5942490177914603,0.7429345226434992,0.861672351920341,0.9456761861263098,0.9915598324043416,0.9974737219013485,0.9631794658513984,0.8900594650219168,0.7810611851668758,0.6405783447417026,0.4742738042014357,0.2888512962103609,0.09178519831355537,-0.10898075907009037,-0.3053537042606803,-0.4894178478110971,-0.6537535678190728,-0.791736494736308,-0.8978045395707399,-0.9676821015812131,-0.9985524176570255,-0.9891711059817735,-0.9399163270392794,-0.8527735399720644,-0.7312554687635717,-0.5802605044054686,-0.40587525085576925,-0.2151291741564961,-0.01571124479994915,0.18434000451663837,0.3769605119810381,0.5543857488348992,0.7094637073707042,0.8359431982176337,0.9287258356589021,0.9840715534565729,0.9997493668460884,0.9751273034869592,0.9111978782549695,0.8105380849877079,0.6772055179149734,0.5165748101177414,0.33512098217694003,0.14015843422541482,-0.060453897373718236,-0.2586293335929955,-0.44637942660818697,-0.6161359739688416,-0.7610560926857411,-0.8752980557056664,-0.9542567718108359,-0.9947494167527373,-0.9951437328330905,-0.9554238251786584,-0.8771908024632938,-0.7635982362497249,-0.6192250405835724,-0.44989089606084176,-0.26242165862103334,-0.06437420943199287,0.1362681628367053,0.3314175682185948,0.5132075381315993,0.6743101225667041,0.8082312796051663,0.9095726501164734,0.9742491655058276,0.9996537167466198,0.9847622468923214,0.9301750307914662,0.8380924780205331,0.7122264344185721,0.5576505576563846,0.3805957981985142,0.18819922981628234,-0.011783645711878414,-0.21129152271976775,-0.40228224272209484,-0.5770569736601177,-0.7285705496660558,-0.8507154615568018,-0.9385680504055655,-0.9885869801334705,-0.9987559886952397,-0.9686651635615134,-0.8995274652845915,-0.7941298330830818,-0.6567208433783693,-0.4928394497651955,-0.30909170790404356,-0.11288448555143271,0.0878731081295416,0.2850885385999491,0.47081205584786623,0.6375571486509102,0.7786023256921997,0.8882620587390023,0.962115966171177,0.9971869984744193,0.992061443046219,0.9469459109221918,0.8636590082893614,0.7455580285076769,0.59740361968242,0.4251678830356128,0.23579363762658584,0.03691455545577018,-0.16345255169848338,-0.35723088980112233,-0.5366092579640779,-0.6943569177961566,-0.8241150643215667,-0.9206531492792959,-0.9800797244180356,-0.9999993056964125,-0.9796089351961366,-0.9197305483395067,-0.8227778416891024,-0.6926589768883153,-0.5346190427443704,-0.3550286258049201,-0.16112701214292088,0.03926962811837317,0.23808331046479617,0.4272998593837029,0.5992919596168358,0.7471266130839224,0.8648446078949067,0.9477007340609268,0.9923550628126944,0.9970075790617896,0.9614707399723349,0.8871770348089938,0.777121241323602,0.6357397063247057,0.4687315166275003,0.28282876897925313,0.0855251993762018,-0.11522588928313325,-0.3113322246769993,-0.4948887643935243,-0.65849634803102,-0.795559957203382,-0.9005545605981892,-0.9692478278771137,-0.9988707348260428,-0.9882291826652796,-0.9377521321470834,-0.849474312156489,-0.7269541998311454,-0.5751305784197958,-0.40012345502953345,-0.20898736326307105,-0.00942699511211877,0.19051337502100166,0.3827741548618722,0.5596053162653581,0.713878798693186,0.8393758411903426,0.931037660513024,0.985169370578996,0.99958892325086,0.9737150666521492,0.9085907754188124,0.8068412084127439,0.6725678886212443,0.5111833708480753,0.32919306173929047,0.13393298697273448,-0.06672592378874977,-0.2646951139123852,-0.45199444935005195,-0.6210738976801161,-0.7651178697614502,-0.8783199559941186,-0.956116982572549,-0.9953729529295462,-0.9945054596943187,-0.9535494715016092,-0.874155923406791,-0.7595251677271116,-0.6142779679045359,-0.4442692356250627,-0.2563520194468297,-0.058101258551828225,0.14249156289988812,0.33734055233428034,0.5185913509297685,0.6789377426624942,0.8119161677261022,0.9121662684969136,0.9756469654414279,0.9997993529502118,0.9836498487714953,0.9278494390919659,0.8346474372967403,0.707800814192295,0.5524227545893804,0.3747765449267272,0.18202310032130434,-0.018067691775072624,-0.21743017558152208,-0.40802805340981335,-0.5821783286611834,-0.7328610072639239,-0.8540020734926375,-0.9407183334186977,-0.9895142563591486,-0.9984228796475662,-0.9670850968594801,-0.8967641333849551,-0.7902946258387831,-0.6519683579158925,-0.4873612586772871,-0.30310863696270857,-0.10663771222526192,0.09413177653433469,0.2911068152864376,0.4763473442046481,0.6423863213163246,0.7825307188137817,0.8911313188696036,0.9638104334929182,0.997638369043843,0.9912515221248203,0.9449073464059057,0.860473974672627,0.7413549144310827,0.5923518525894221,0.4194710995555263,0.229681474986068,0.030633394807346708,-0.16964951689627877,-0.3630938600064989,-0.5419018969665926,-0.6988658794248968,-0.8276585924244163,-0.9230884043101066,-0.9813085412958338,-0.9999721508376964,-0.9783269032127222,-0.9172453179146827,-0.819189592411051,-0.6881123510127669,-0.5292973146684526,-0.3491463142796522,-0.15492123302680758,0.045548719994675704,0.24418260503475003,0.4329734942066632,0.6043112305878893,0.7512891934917855,0.8679827042075924,0.9496878496795116,0.9931110971468288,0.9965020563827576,0.9597240378891082,0.8842595628471739,0.7731506027189534,0.6308759574391279,0.46317071507998575,0.27679507056780744,0.07926182236165415,-0.12146646830011588,-0.3172984480823496,-0.5003401338427046,-0.6632131189317286,-0.7993519966160163,-0.9032690114908212,-0.9707752707891374,-0.9991495985646055,-0.9872482262387133,-0.9355508978890917,-0.8461415317755022,-0.7226242176368656,-0.5699779359068617,-0.3943558551133308,-0.20283729777956694,-0.003142373076569799,0.1966792206215611,0.38857267891609565,0.5648027803858442,0.7182656932064956,0.8427753304673613,0.9333127112097395,0.9862282754479378,0.9993889978581473,0.9722643699863136,0.9059477850331259,0.8031124631961959,0.6679036942179585,0.5057717408401399,0.3232521388228805,0.12770224963035298,-0.07299531466090411,-0.2707504392951106,-0.4575916191997448,-0.625987290193289,-0.7691494261853655,-0.8813071643709024,-0.9579394285929765,-0.9959571738314146,-0.9938279055448782,-0.9516374544949489,-0.8710865169097215,-0.7554220994534036,-0.6093066324533539,-0.43863002742776586,-0.25027225487190236,-0.05182601278605222,0.1487093348265576,0.343250212161236,0.5239546803890666,0.6835385460520568,0.815568986754404,0.9147238581029231,0.9770062292398105,0.9999054990447573,0.9824985984152929,0.9254871991635796,0.8311694296398542,0.7033472372252054,0.5471731319095647,0.3689424887181479,0.17583978127162705,-0.024351024199959027,-0.22356024037881866,-0.4137577477915198,-0.5872766887626155,-0.737122518292734,-0.8572549540253598,-0.9428314599069345,-0.9904024487168864,-0.9980503348588434,-0.965466832197179,-0.8939653810648753,-0.7864282035103525,-0.6471901209848682,-0.4818638177777607,-0.29711359382606173,-0.10038672691897264,0.10038672691894145,0.2971135938260318,0.48186381777773324,0.6471901209848443,0.786428203510333,0.8939653810648868,0.9654668321971708,0.998050334858838,0.990402448716883,0.9428314599069451,0.8572549540253759,0.7371225182927552,0.5872766887626869,0.4137577477914966,0.22356024037884922,0.02435102419999037,-0.17583978127165215,-0.36894248871806595,-0.5471731319095385,-0.7033472372252235,-0.8311694296398368,-0.9254871991635677,-0.9824985984152764,-0.9999054990447578,-0.9770062292398051,-0.9147238581029358,-0.8155689867544222,-0.6835385460520796,-0.5239546803890932,-0.34325021216126544,-0.14870933482653237,0.05182601278602091,0.250272254871817,0.43863002742773766,0.6093066324533291,0.7554220994534203,0.8710865169096782,0.9516374544949218,0.993827905544881,0.9959571738314175,0.9579394285929855,0.8813071643708903,0.7691494261854218,0.6259872901933135,0.45759161919977265,0.2707504392951408,0.07299531466093538,-0.1277022496302655,-0.32325213882285087,-0.5057717408401619,-0.667903694217935,-0.8031124631961434,-0.9059477850331127,-0.9722643699863063,-0.9993889978581463,-0.986228275447943,-0.9333127112097712,-0.8427753304673475,-0.7182656932065175,-0.5648027803858701,-0.3885726789160721,-0.19667922062164758,0.0031423730765384483,0.2028372977795919,0.394355855113302,0.569977935906836,0.7226242176368046,0.8461415317754855,0.9355508978891008,0.9872482262387083,0.9991495985646068,0.9707752707891449,0.9032690114908346,0.7993519966160352,0.6632131189317095,0.5003401338427318,0.31729844808243324,0.121466468300147,-0.0792618223616229,-0.2767950705677773,-0.463170715079958,-0.6308759574390596,-0.7731506027189695,-0.8842595628471592,-0.9597240378890994,-0.9965020563827597,-0.9931110971468391,-0.9496878496795214,-0.867982704207608,-0.7512891934918061,-0.6043112305879142,-0.4329734942067427,-0.24418260503478043,-0.04554871999465024,0.1549212330267766,0.3491463142796228,0.529297314668426,0.6881123510127442,0.8191895924110331,0.9172453179146701,0.9783269032127158,0.9999721508376958,0.9813085412958398,0.9230884043101187,0.827658592424402,0.6988658794249193,0.5419018969666667,0.36309386000647514,0.1696495168963097,-0.030633394807315372,-0.22968147498603747,-0.4194710995554462,-0.5923518525893968,-0.7413549144310617,-0.860473974672611,-0.944907346405914,-0.9912515221248086,-0.9976383690438452,-0.9638104334929114,-0.8911313188696178,-0.7825307188138012,-0.6423863213163922,-0.47634734420467567,-0.29110681528646765,-0.0941317765343659,0.10663771222523075,0.3031086369626787,0.48736125867725966,0.6519683579158687,0.7902946258387987,0.8967641333849412,0.9670850968594576,0.9984228796475644,0.989514256359153,0.9407183334187084,0.8540020734926833,0.732861007263984,0.5821783286611627,0.408028053409842,0.2174301755815527,0.01806769177510397,-0.1820231003212176,-0.3747765449266981,-0.5524227545893542,-0.7078008141922729,-0.8346474372966918,-0.9278494390919331,-0.9836498487714896,-0.9997993529502113,-0.9756469654414347,-0.9121662684969498,-0.8119161677260873,-0.6789377426625172,-0.5185913509297952,-0.3373405523343098,-0.14249156289997542,0.058101258551740184,0.2563520194467994,0.4442692356250346,0.614277967904556,0.7595251677270543,0.8741559234067757,0.953549471501617,0.9945054596943155,0.9953729529295492,0.9561169825725748,0.8783199559941336,0.7651178697614704,0.6210738976801407,0.45199444935007993,0.2646951139124154,0.06672592378878105,-0.1339329869727034,-0.3291930617393145,-0.5111833708480483,-0.672567888621179,-0.8068412084127589,-0.9085907754187993,-0.9737150666521421,-0.999588923250859,-0.9851693705790112,-0.9310376605130147,-0.8393758411903597,-0.713878798693208,-0.5596053162653369,-0.38277415486195365,-0.19051337502103244,0.009426995112144261,0.2089873632630404,0.40012345502950475,0.5751305784197236,0.7269541998311239,0.8494743121565025,0.9377521321470725,0.9882291826652747,0.9988707348260443,0.9692478278771214,0.9005545605982027,0.7955599572033666,0.6584963480310435,0.49488876439360097,0.3113322246770291,0.11522588928316439,-0.08552519937622721,-0.2828287689792231,-0.46873151662742235,-0.6357397063247253,-0.7771212413235823,-0.8871770348089794,-0.9614707399723419,-0.9970075790617828,-0.9923550628126983,-0.9477007340609368,-0.8648446078949223,-0.7471266130839055,-0.5992919596169064,-0.4272998593837313,-0.2380833104647714,-0.039269628118404495,0.16112701214288994,0.3550286258048908,0.534619042744344,0.6926589768882927,0.8227778416890845,0.9197305483394944,0.9796089351961302,0.9999993056964124,0.9800797244180418,0.9206531492792859,0.8241150643216166,0.69435691779622,0.5366092579640565,0.3572308898011516,0.16345255169851433,-0.03691455545568205,-0.23579363762650013,-0.4251678830356359,-0.5974036196823947,-0.7455580285076561,-0.8636590082893455,-0.9469459109221635,-0.992061443046215,-0.9971869984744174,-0.9621159661711856,-0.8882620587390428,-0.7786023256922194,-0.6375571486509343,-0.47081205584784375,-0.2850885385999791,-0.08787310812962945,0.11288448555145805,0.30909170790401375,0.4928394497651682,0.6567208433783885,0.7941298330830282,0.8995274652845777,0.9686651635615057,0.9987559886952382,0.9885869801334667,0.9385680504055959,0.8507154615568182,0.7285705496660384,0.5770569736601432,0.40228224272212354,0.2112915227197984,0.011783645711909764,-0.18819922981625153,-0.38059579819848516,-0.5576505576563585,-0.71222643441855,-0.838092478020516,-0.9301750307914548,-0.9847622468923258,-0.9996537167466206,-0.9742491655058475,-0.9095726501164628,-0.8082312796051847,-0.6743101225667273,-0.5132075381316262,-0.331417568218678,-0.13626816283668003,0.06437420943196158,0.2624216586210031,0.4498908960608645,0.6192250405835031,0.7635982362497047,0.877190802463306,0.9554238251786492,0.9951437328330874,0.9947494167527463,0.9542567718108452,0.8752980557056541,0.7610560926857615,0.6161359739688662,0.446379426608215,0.25862933359302576,0.06045389737374953,-0.14015843422544005,-0.33512098217691044,-0.5165748101176659,-0.6772055179149503,-0.8105380849876894,-0.91119787825498,-0.9751273034869522,-0.9997493668460864,-0.9840715534565684,-0.9287258356589138,-0.835943198217651,-0.7094637073706862,-0.5543857488349727,-0.3769605119810671,-0.18434000451666918,0.015711244799917805,0.215129174156521,0.40587525085568865,0.5802605044054431,0.7312554687635892,0.8527735399720481,0.9399163270392686,0.9891711059817689,0.9985524176570272,0.967682101581221,0.8978045395707537,0.7917364947363619,0.6537535678190964,0.48941784781112446,0.3053537042607102,0.10898075907006503,-0.09178519831346756,-0.28885129621027644,-0.4742738042014582,-0.6405783447416785,-0.7810611851668563,-0.8900594650218766,-0.9631794658513747,-0.9974737219013504,-0.9915598324043456,-0.94567618612632,-0.8616723519203568,-0.7429345226435583,-0.5942490177914855,-0.42160934705625613,-0.23197461207207618,-0.032988985169043965,0.16732642705865344,0.3608969143973516,0.5399196544190707,0.6971782440958356,0.8263335928597986,0.9221794512156347,0.9808522745523109,0.9999869625483434,0.9788121963177605,0.9181815302589126,0.8205389852937641,0.6898205304342284,0.5312954239506659,0.35135380967786894,0.15724913044635258,-0.04319425805178813,-0.2418964868818527,-0.4308478732201853,-0.6024317905068313,-0.7497316945076975,-0.8668099290730257,-0.9489470729364659,-0.9928321794907992,-0.996696240978815,-0.9603834971601148,-0.8853577140032852,-0.7746431793092708,-0.6327027937314084,-0.4652581713403739,-0.2790590014766404,-0.0816109689098054,0.11912680016241337,0.3150625703305503,0.49829817466358073,0.661447389658485,0.7979336737600132,0.9022552676176185,0.9702069698938001,0.9990496488447034,0.9876206566654375,0.9363806957994817,0.8473952480325498,0.724251314963637,0.5719128260429909,0.39652054267672443,0.2051445242582516,0.005499134217817277,-0.1943679258116122,-0.38640001868446766,-0.5628563346225125,-0.7166239231007561,-0.8415044157390038,-0.9324638824057893,-0.9858357488402362,-0.9994685961863288,-0.972812884643393,-0.9069431054043492,-0.8045144679375177,-0.6696558685466905,-0.5078034546445597,-0.32548149376054547,-0.13003938044888355,0.07064461765751337,0.26848093265555717,0.45549478669059,0.6241476550907036,0.7676411441430607,0.8801910342074852,0.9572604414927669,0.995742699750646,0.9940865899294395,0.9523588697824978,0.8722415828646545,0.7569642553904316,0.611173714097859,0.44074677275648777,0.2525533379233154,0.054179483148668196,-0.14637834549543444,-0.3410356659944882,-0.5219458456977619,-0.68181639892205,-0.8142029469016445,-0.9137689905661472,-0.9765010247101711,-0.9998703223066225,-0.9829348674422529,-0.9263773279599639,-0.8324775371319647,-0.7050205936264607,-0.5491442842572413,-0.3711319799010354,-0.17815935294444551,0.02199487392440677,0.2212624878704104,0.4116110154074336,0.5853675112419091,0.7355278545424947,0.8560390849091392,0.9420433970842059,0.9900739589840803,0.9981946596304546,0.966078153744583,0.8950190570288877,0.787881760234134,0.6489849656263634,0.4839276001857029,0.2993631229733343,0.10273132433132881,-0.09804157191591824,-0.2948624143830051,-0.479797358892501,-0.6453916815733011,-0.7849702786286482,-0.8929067396356283,-0.9648501480349464,-0.9979004664897233,-0.9907254373318047,-0.943614285841371,-0.8584660615817583,-0.7387130877499446,-0.5891826042980308,-0.4159021819884195,-0.22585675113821768,-0.0267070392196187,0.173519232909589,0.36675094827119453,0.545198940328769,0.7016699741332435,0.8298567054780254,0.924591929816264,0.9820568721718081,0.9999351218810183,0.9775060070598881,0.9156736448730018,0.8169304965890329,0.6852568965172863,0.5259606048123968,0.3454628517698986,0.1510394981625449,-0.04947225455961202,-0.24798978170143612,-0.43651084576075044,-0.6074361664597522,-0.7538757475796216,-0.8699266125685026,-0.9509107534068006,-0.9935637010160004,-0.9961661159409905,-0.9586130948888195,-0.882418399378226,-0.7706534360435257,-0.6278234482953352,-0.4596859100497364,-0.27301844207126036,-0.07534560621719615,0.12536440949899708,0.3210209884048518,0.5037372177636441,0.6661478100670426,0.8017059976254209,0.904947432641258,0.9717104549580071,0.9993038484969571,0.986615324122908,0.9341563559966115,0.844041564061816,0.7199034737579819,0.5667460889935643,0.3907431808492618,0.1989894229912122,-0.0007855944812098249,-0.20052894465599,-0.39218897712924117,-0.5680398798699068,-0.7209931065467718,-0.844883115687291,-0.9347159035297568,-0.9868703122140144,-0.9992439985812339,-0.9713381795843284,-0.9042777382224084,-0.8007658795299419,-0.6649751644362496,-0.502379313919221,-0.3195325634232916,-0.1238054617611332,0.07691223555948351,0.27452960222093925,0.46108068617174996,0.629045616992427,0.7716537317202814,0.8831565001360848,0.9590592479011868,0.9963023367889968,0.9933844986399962,0.9504233514509496,0.8691506581957764,0.7528425194950841,0.6061873140665849,0.4350967102736015,0.24646736689327906,0.04790292894050803,-0.1525924751086996,-0.3469368795737174,-0.5272962654430376,-0.6864003495216591,-0.8178356493996837,-0.916304010798535,-0.9778361760625227,-0.9999517848549624,-0.9817593574329179,-0.9239922301776664,-0.8289789948199439,-0.7005496329546296,-0.5438811295598319,-0.36528878883736554,-0.17197166442800443,0.028277634294669875,0.22738706215109555,0.41733052213315924,0.590451397212299,0.7397711884170781,0.8592708179851994,0.9441332582668189,0.9909377060112905,0.9977974748770755,0.9644360477199647,0.8921982229936638,0.7839959059512226,0.644190729803257,0.47841823837137415,0.29336071743114045,0.09647783190711674,-0.10429407306895087,-0.30086188606989483,-0.4853019625310986,-0.6501795267021628,-0.7888483673075922,-0.8957187461884064,-0.9664827205343346,-0.9982877959713369,-0.9898519105520557,-0.9415151146470797,-0.855225863521292,-0.7344624751415969,-0.5840929192499619,-0.41017858960197107,-0.2197299693066764,-0.020424038394644718,0.17970518509192707,0.3725904962034834,0.5504566919520716,0.7061339895860902,0.8333470403876473,0.9269678888532413,0.9832226804753621,0.9998437857420437,0.976161208236273,0.9131295921781875,0.813289740735568,0.6806661963000447,0.520605011264263,0.339558248758231,0.14482390011558421,-0.055748297010576126,-0.2540732814121384,-0.44215657698099686,-0.6124165498782354,-0.7579900240414414,-0.8730089356728487,-0.9528368747716676,-0.9942559787281493,-0.9955966442998354,-0.9568048292847257,-0.8794442309610678,-0.7666332534820727,-0.6229193050671797,-0.4540954920692477,-0.2669670989741703,-0.06907726752125501,0.13159706718773298,0.3269667267812253,0.5091563642338969,0.6708219189465673,0.805446655679909,0.9076038540201972,0.9731755593694091,0.9995185776116219,0.985571022214564,0.931895118854035,0.8406545421085418,0.7155271977803324,0.5615569665876331,0.3849503854343272,0.1928264620331361,-0.007070292150742392,-0.20668204300130752,-0.39796244488037963,-0.5732009886586938,-0.7253338121824002,-0.8482284444133417,-0.9369310052130313,-0.987865896150441,-0.9989799328025,-0.9698251085766174,-0.9015766538474529,-0.796985662444195,-0.6602681951140156,-0.49693533019865355,-0.31357101217786276,-0.11756665300107531,0.08317681557945572,0.28056742840675614,0.46664837387209346,0.6339187328288955,0.7756358404919727,0.8860870831190828,0.960820173354641,0.9968226218435569,0.9926431706156492,0.9484502932653526,0.8660254037844112,0.7486910478001099,0.601176970828088,0.4294294623260196,0.24037166088675374,0.04162448266070827,-0.15880057761905042,-0.3528243898280489,-0.5326258580223341,-0.6909571886567817,-0.8214360489973634,-0.9188028388237122,-0.9791327048081291,-0.9999937512734967,-0.980545069858898,-0.9215706365185872,-0.82544770946729,-0.6960510019494711,-0.5385964926269615,-0.35943116958461796,-0.16577718336893474,0.03455927775390943,0.23350265508976575,0.4230335451237482,0.5955119615132491,0.743985302783916,0.8624686115530668,0.9461858280416989,0.9917623129471042,0.9973608790848967,0.9627558483673558,0.8893421488825322,0.7800790853711983,0.6393710497125802,0.47288997997714977,0.2873467247172939,0.09022052879825612,-0.11054245481111764,-0.30684947430387893,-0.4907873976961286,-0.6549416910178371,-0.7926952980267034,-0.898495373611506,-0.9680771188662082,-0.9986356950474312,-0.9889392865676649,-0.9393787554565819,-0.851951885720412,-0.7301828527091649,-0.5789801636797871,-0.4044387959674548,-0.21359450857329074,-0.014140230860303539,0.18588403927266084,0.3784153275436073,0.5556927016182193,0.710570114134379,0.8368044597273917,0.9293072344808125,0.9843496534158475,0.9997129577390128,0.9747778529638854,0.9105494726594812,0.8096168615361344,0.6760486111060967,0.515228854841439,0.3336402338633446,0.1386025818090937,-0.062022137513397815,-0.26014674572767993,-0.4477848438855888,-0.6173727440468362,-0.7620743613874725,-0.8760567766403887,-0.9547253609530592,-0.9949089852836316,-0.9949878485483703,-0.9549587717707033,-0.8764353262255355,-0.7625827904141118,-0.6179905577511368,-0.4484871382095296,-0.26090521120147225,-0.0628062004089248,0.1378245270510637,0.3328995506144781,0.5145554000286082,0.6754695316789893,0.8091555001749042,0.9102244268311332,0.9746022252592503,0.9996938277073135,0.9844877921882693,0.929597073686195,0.8372343159533128,0.7111226598850273,0.5563456637854721,0.3791423852358999,0.18665588480892192,-0.01335471055780424,-0.21282697781216448,-0.40372019389725633,-0.5783394571352222,-0.7296458685582627,-0.8515402697832777,-0.9391090999633903,-0.9888224613259075,-0.9986764092802061,-0.9682737313836045,-0.8988399589669817,-0.7931739659915229,-0.655535146495938,-0.4914717185093651,-0.30759707549392185,-0.11132320058933534,0.0894381102784942,0.28659417273079685,0.47219762987905267,0.6387668101215247,0.7795873131727024,0.8889826674040542,0.9625431483000502,0.9973035343641123,0.9918626351373918,0.9464397731576266,0.8628659430721352,0.7445100042805551,0.5961428822808952,0.42374525275884434,0.23426646067214385,0.035344392295895616,-0.16500240781875405,-0.358697964212774,-0.5379344129273657,-0.6954867363412297,-0.8250040034857496,-0.9212653759429301,-0.9803905597366659,-0.9999962199046339,-0.9792920526821653,-0.9191126426310688,-0.8218838205527698,-0.6915248782980264,-0.5332905821913044,-0.353559353507132,-0.1595761544371175,0.04083955618961401,0.23960902513257734,0.428719859120797,0.6005490042624625,0.7481700311937381,0.8656323393062108,0.948201025336375,0.9925477472211385,0.996884889498588,0.9610376220513133,0.8864509475047805,0.7761314532007741,0.6345261157223966,0.4673430433583191,0.2813213823726846,0.08395966215574939,-0.11678647034362273,-0.31282494258672155,-0.49625344772373503,-0.6596779864241945,-0.7965109188398845,-0.901236512233602,-0.9696332800548946,-0.9989441499766801,-0.9879876014255365,-0.9372052926518261,-0.8486442574947453,-0.725874389489515,-0.573844539531301,-0.3986830277957479,-0.20745061127658734,-0.007855864814526433,0.1920555513992525,0.38422521222217865,0.5609067625148397,0.7149781725599917,0.8402288269360212,0.9316098742994867,0.9854377464800486,0.9995426430393833,0.9733559958825154,0.9079333882265069,0.8059120040621404,0.6714043233209803,0.5098323478918758,0.3277090408350876,0.13237578897319796,-0.0682935282638237,-0.2662099347582689,-0.45339542416899736,-0.6223045532056729,-0.7661285982942336,-0.8790700150874502,-0.9565761373595169,-0.9955226948899674,-0.9943397527328256,-0.9530749952624785,-0.8733918040175602,-0.7585022068249337,-0.6130374010227242,-0.44286106998948427,-0.2548330181858169,-0.05653265257525572,0.14404654311662266,0.33881922557010696,0.5199341118965268,0.6800904646927419,0.8128323846182057,0.9128090475664729,0.975990396277109,0.9998295918620019,0.9833656768294803,0.9272623112613381,0.8337810206884928,0.7066900340424155,0.5511123864231561,0.37331940965857047,0.18047793504418427,-0.019638601479937942,-0.21896350637577122,-0.40946199676020734,-0.5834550823401806,-0.7339291053566483,-0.8548184609865075,-0.9412501017503929,-0.9897399699579861,-0.9983334400029281,-0.9666841092816258,-0.8960677616750626,-0.7893309407264083,-0.6507762055283044,-0.4859886946532268,-0.3016109893300621,-0.10507535113001024,0.09569587234810661,0.29260959714828977,0.47772823500797335,0.6435896573809232,0.7835079936870675,0.8918431386212698,0.9642281046832286,0.9977450553555416,0.991042923034826,0.9443918705393264,0.8596724008512651,0.7402995540793824,0.5910852472618354,0.4180443060870765,0.22815200739274563,0.029062905896953376,-0.17119772074770906,-0.36455737073293154,-0.543221720480457,-0.699988813666855,-0.8285393719379122,-0.9236915248908135,-0.981609691165336,-0.9999591906508682,-0.9780003553944115,-0.9166183456008604,-0.8182874688429895,-0.6869714407732824,-0.5279636078260843,-0.3476735725303124,-0.15336882256066892,0.0471182215432447,0.24570593108991745,0.43438923952608177,0.6055623265064699,0.7523252083582249,0.8687618762836606,0.9501787705545152,0.9932939778102859,0.9963695249188197,0.9592814366383987,0.8835247330571264,0.7721531653635886,0.629656119198076,0.4617776476079746,0.2752849283864907,0.07769547927174789,-0.12302587304023986,-0.31878805489917267,-0.5016998967156869,-0.6643882258468773,-0.8002950790374761,-0.903942053785156,-0.9711511426351153,-0.9992131485757203,-0.986996892715312,-0.9349948120803993,-0.8453031094892242,-0.7215372556583974,-0.5686862496515619,-0.3929115124280666,-0.20129852008865412,-0.0015711884776458168,0.19821947770910497,0.39001992076027836,0.5660986686970608,0.7193579907532861,0.8436200067576387,0.9338757173593939,0.9864869166904471,0.9993328483702432,0.9718956931527224,0.9052814422095522,0.8021753146483751,0.6667335163848485,0.5044157035665993,0.32176490394392515,0.1261437675538609,-0.07456222155390714,-0.27226260901963817,-0.4589880962246345,-0.6272117825579786,-0.7701525746274107,-0.8820485319968752,-0.9583891308889437,-0.9960970833068662,-0.9936523824516994,-0.9511535741654871,-0.8703137845502879,-0.7543916638897166,-0.608060030522164,-0.43721750962764433,-0.2487507597668916,-0.05025687181305484,0.15026286962678126,0.3447255178322664,0.5252922873892041,0.6846845354701376,0.8164771637801078,0.9153576141388253,0.9773400175928825,0.999925864713265,0.9822047204595266,0.9248909237980334,0.8302947927123949,0.7022294953327438,0.5458573412050426,0.36748168869832176,0.17429285675579423,-0.025921716715918572,-0.2250913863113126,-0.41518762667909903,-0.5885476622162445,-0.7381833533981237,-0.8580628885409227,-0.9433539260086774,-0.9906183858068563,-0.9979510385172907,-0.9650563050576294,-0.8932601714679883,-0.7854567384407947,-0.6459915601798424,-0.480486475199101,-0.2956129901252448,-0.09882335140075854,0.10194985461887934,0.2986134640619047,0.48323997081062486,0.6483870841138439,0.787397727175965,0.894668383787738,0.965874975951743,0.9981471673786426,0.9901840666850139,0.9423066662986536,0.8564449032604389,0.7360598635010978,0.5860042655374589,0.4123268474872125,0.22202854255766508,0.022780271570246147,-0.1773862717033454,-0.3704023779535887,-0.5484875718433546,-0.7044632428102904,-0.8320420147135541,-0.9260811898392912,-0.9827900509408445,-0.9998826649747843,-0.976670029015187,-0.9140878439479256,-0.8146587963867064,-0.682390869226987,-0.5226157799363181,-0.3417740591308314,-0.14715543291733246,0.05339502581963542,0.25179313214609605,0.4400414624104264,0.6105517302289893,0.7564506701558201,0.8718570988747447,0.952118985579106,0.9940009752399445,0.9958148057014714,0.9574873614944839,0.8805636211193942,0.7681443789943345,0.6247612524946426,0.4561940125483079,0.2692376011867781,0.07142822756904821,-0.12926041645660213,-0.3247385757103415,-0.5071265295480536,-0.6690722232406874,-0.8040476291526586,-0.9066118914024974,-0.972630646654282,-0.9994426802196399,-0.9859671995680548,-0.9327474010518996,-0.8419285736725676,-0.7171716225240728,-0.5635054977827859,-0.3871244778279214,-0.19513847800488823,0.004713549918091038,0.204375574739246,0.3957992242781007,0.5712682150947934,0.7237093957200532,0.84697786524737,0.9361046741643111,0.987497122606844,0.9990835820180669,0.9703970024535662,0.9025937393552242,0.7984069408865229,0.6620363747855625,0.4989791358127054,0.31580805797147155,0.11990676370367773,-0.08082796978292636,-0.27830452944316264,-0.4645626391526441,-0.6320942382779288,-0.774146131447921,-0.8849922097232636,-0.9601642699316931,-0.9966321278470822,-0.9929257648547913,-0.9491945843720494,-0.8672013893993253,-0.750251323966752,-0.6030586428457171,-0.4315566800337543,-0.24265867618183723,-0.04397910600298476,0.15647326104897502,0.3506181941141298,0.5306297148690471,0.6892515625542457,0.8200896936991953,0.917870025884821,0.9786510358992072,0.9999826424585164,0.9810049689339446,0.9224830049612944,0.8267757697241069,0.697741219938443,0.5405807356950886,0.3616294529338671,0.1681008942421857,-0.03220380809515923,-0.2312103755795773,-0.4208968575028058,-0.5936169956166126,-0.742408444648254,-0.8612734242980707,-0.9454204896413582,-0.9914576741768212,-0.9975292199273951,-0.9633903830066821,-0.8904172992401543,-0.7815515121579855,-0.6411813994347249,-0.47496527747374073,-0.2896033147883224,-0.09256744834350564,0.10819981007091976,0.3046055363307008,0.4887326195843782,0.6531589008316226,0.7912563600024278,0.8974582913117263,0.9674836970574157,0.9985098545507808,0.9892861000110474,0.9401842427970399,0.8531835777795836,0.7317911000051446,0.580900137796463,0.40659310278731786,0.2158963080316152,0.016496737467706784,-0.18356781624972998,-0.37623275500855574,-0.5537317590254719,-0.7089098470404624,-0.8355117934652355,-0.9284342764011664,-0.983931592441321,-0.9997666458989908,-0.9753011260897454,-0.9115212376220605,-0.8109979465095465,-0.6777833445828775,-0.517247309750404,-0.33586104632787117,-0.1409362309236726,0.059669721097356236,0.2578703878684173,0.44567630452213713,0.6155170183584713,0.7605462536389682,0.874917884824257,0.9540215937753981,0.994668711585066,0.9952207537568506,0.9556554674820099,0.8775677286496864,0.7641052524321215,0.6198417089499743,0.45059235872182607,0.26317963963097385,0.06515815459188597,-0.13548985434061334,-0.3306762699860301,-0.5125331318793096,-0.6737297935970197,-0.8077684209670122,-0.9092459196323379,-0.9740717336748944,-0.9996327358423815,-0.9848985626546004,-0.9304631483346448,-0.8385207833323065,-0.7127776625204681,-0.558302488554675,-0.38132215257201246,-0.1889707283348426,0.010998102137871982,0.2105235993359445,0.4015628945046227,0.57641519752093,0.7280322155883507,0.8503022697764652,0.9382966566747849,0.9884683243281109,0.9987948538283946,0.9688599829804657,0.8998703858224527,0.7946070316200068,0.6573130840508977,0.49352285936383566,0.30983873820175645,0.11366502377192696,-0.0870905254661433,-0.2843354573848626,-0.4701188327696403,-0.6369517275178559,-0.7781091110179761,-0.88790093199713,-0.9619014843732626,-0.9971278073774188,-0.9921599286420703,-0.9471981032584824,-0.864054741498161,-0.7460813505912524,-0.598033435538365,-0.425878804799456,-0.23655700805620006,-0.037699603104794845,0.16267747208506322,0.3564970216665677,0.535946183518164,0.6937913655565574,0.8236698316874409,0.9203461835691794,0.97992339941346,0.999999922855149,0.9797664696405405,0.9200386498593115,0.8232240907182466,0.6932253851374859,0.5352827783086481,0.3557629335169095,0.16190229207370582,-0.038484627487172435,-0.23732023249262832,-0.42658946372824275,-0.5986628823125808,-0.7466042122242404,-0.864449941447984,-0.9474497110231596,-0.9922578019176842,-0.9970680008942463,-0.9616864089294304,-0.8875392572793747,-0.7776154161268833,-0.6363459132845838,-0.46942531955350236,-0.28358220068976553,-0.0863078890540114,0.11444549184304749,0.3105855772796027,0.4942059643805029,0.6579049190567924,0.7950837397581152,0.9002127509974232,0.9690542044589252,0.9988331025465315,0.988349058480843,0.9380246838660415,0.8498885532245868,0.7274934321992896,0.5757730656420446,0.40084329845903605,0.2097555460258051,0.010212551776466584,-0.18974211022834056,-0.3820482716091893,-0.5589540748917228,-0.7133284507253245,-0.8389485711435166,-0.9307506916342744,-0.985034270578079,-0.9996111380060182,-0.9738937006870356,-0.9089186279991696,-0.8073050638076862,-0.6731490488290375,-0.5118584093126517,-0.3299347676737063,-0.13471146222582978,0.06594205953850543,0.2639374582173371,0.45129354329582366,0.620457994775616,0.7646117970402457,0.87794411323728,0.9558865199941431,0.9952971604713908,0.9945873925488745,0.9537858269571552,0.8745371739797024,0.7600359452145087,0.6148976828762815,0.44497290738314815,0.25711128299686975,0.05888550799547778,-0.14171394064183537,-0.3366009031990948,-0.5179194901592922,-0.6783607529508324,-0.8114573075167755,-0.911844034435787,-0.9754743467768481,-0.9997833079371242,-0.9837910241840448,-0.928142144152127,-0.8350798730693978,-0.7083555492002854,-0.553077427475867,-0.37550476584067655,-0.1827955146925047,0.01728221995435212,0.2166633086644256,0.4073107037860966,0.5815394126798762,0.7323262796152917,0.8535930890373603,0.9404515783118538,0.989400483493689,0.998466675205418,0.9672846954425863,0.8971114891784474,0.7907757369377034,0.652563830741553,0.48804708973218386,0.3038571804108527,0.10741879429529173,-0.09334964124469279,-0.29035515463493994,-0.4756564576169974,-0.641784058416748,-0.7820413568077459,-0.8907745839295572,-0.9636007055970965,-0.9975841023195167,-0.9913549040625332,-0.9451642096818301,-0.8608739651333152,-0.7418819084691958,-0.5929846070858265,-0.42018410818935115,-0.23044599639376628,-0.03141861114639182,0.16887525768056966,0.36236176828755445,0.5412414833467821,0.6983037651637783,0.8272174363364977,0.9227859893884062,0.9811570578797371,0.9999777052206189,0.9784892714975781,0.9175579550392629,0.8196398959791545,0.6886821692966336,0.529963678304622,0.3498823621633271,0.15569729508295507,-0.04476392681193906,-0.24342071572290727,-0.43226522050834504,-0.6036851230016343,-0.750770490401587,-0.8675923145244816,-0.9494415100038636,-0.993018737425928,-0.9965673996350801,-0.9599444501294684,-0.884626159262702,-0.7736486058154736,-0.6314852927218784,-0.46386682025603376,-0.2775498856516355,-0.08004492077256282,0.12068665324322334,0.3165533507087483,0.499659789012441,0.662624951331048,0.7988797152690505,0.9029316540490856,0.9705864361243167,0.9991168985982224,0.9873729791057327,0.9358280748039909,0.8465599597423802,0.7231670298329628,0.5706232515833828,0.39507766160854313,0.20360649908826253,0.003927962709393271,-0.19590890976659045,-0.3878486980541213,-0.5641543131707076,-0.7177188793384783,-0.8423522120024963,-0.933030344044765,-0.9860980417975206,-0.9994161474381209,-0.9724478083976719,-0.9062801178771687,-0.8035802941427307,-0.6684881650110389,-0.5064492914739382,-0.32399545724501566,-0.12848137269015614,0.07221179339804455,0.2699941035556126,0.45689295686169873,0.6253744643215691,0.7686471397785334,0.8809356645837387,0.9577136905744541,0.9958862970764232,0.9939147470940326,0.9518785137671127,0.8714720768105582,0.7559366180710573,0.6099293695527854,0.4393358804892509,0.25103277097251436,0.05261053553737382,-0.1479324295208694,-0.3425122413382769,-0.5232853916376325,-0.682964918388419,-0.8151141430979802,-0.9144061331923233,-0.9768384305597072,-0.999894390556573,-0.9826446279019616,-0.9257844801794486,-0.8316059787931573,-0.7039054572284681,-0.5478305209257188,-0.3696725474092538,-0.17661308098667425,0.023565655157003613,0.2227944602180181,0.41304242509566624,0.5866406581752985,0.7365914181937883,0.856850193049224,0.9425693539602713,0.9902935632851236,0.9980990591115405,0.9656712020607164,0.8943171583941532,0.78691320816836,0.6477888024436981,0.4825520431997866,0.2978636208585339,0.10116832198744476,-0.099605069895919,-0.2963633834271867,-0.48117529496921946,-0.6465910401070328,-0.7859427135012517,-0.8936130520169958,-0.9652618664872971,-0.9980009946506062,-0.9905107229130667,-0.9430929839768529,-0.8576591859391448,-0.7376531634700637,-0.5879123569070828,-0.4144728151330698,-0.22432588256737282,-0.025136378214610944,0.17506637303548334,0.3682122023309151,0.5465154052006796,0.7027885831450755,0.8307323675230189,0.9251893469751009,0.9823519625709777,0.9999159904324799,0.9771734249519197,0.9150410184836715,0.8160233270753474,0.6841117518638993,0.5246236457771968,0.3439879711444478,0.1494861483550045,-0.05104145804982027,-0.2495115843134294,-0.4379239036619803,-0.6086835193148669,-0.754907114620345,-0.8707004194101736,-0.951395807911326,-0.9937404506461108,-0.9960274359226903,-0.9581645754108077,-0.8816781202516227,-0.769651237904893,-0.6265997297314785,-0.4582899991311313,-0.2715066079387363,-0.0737787908740953,0.12692304775795357,0.3225086209028187,0.5050938780648417,0.6673188112222227,0.8026441366016632,0.9056148930754364,0.9720803315334781,0.9993612314964697,0.9863579004389168,0.9335945023726279,0.8431979288059838,0.7188120637904737,0.5654508990281032,0.3892964199670567,0.1974494100942538,-0.0023567815043718287,-0.2020679712881319,-0.39363380523790964,-0.5693322684633317,-0.7220809594668631,-0.8457225816049285,-0.9352731435907671,-0.9871228640827738,-0.9991816818970432,-0.9709635063314797,-0.9036058114721164,-0.7998237846358947,-0.6638008772246304,-0.5010201698836867,-0.3180433496325639,-0.12224620839282879,0.0784786750335843,0.2760400846573307,0.46247432405403466,0.6302662328056261,0.7726521224657994,0.8838924207031273,0.9595030333465869,0.9964360981304349,0.9932028439604959,0.9499336032469707,0.8683725582075119,0.7518074329173543,0.6049369652182753,0.43368150069161426,0.24494434364718354,0.04633348506653744,-0.15414507535962926,-0.34841005091712657,-0.5286306243717694,-0.6875421080543781,-0.8187387832728767,-0.9169321147040845,-0.9781639311447943,-0.999965979313176,-0.9814594190887284,-0.9233902495397018,-0.8280992377155818,-0.6994275623748212,-0.5425619761470091,-0.36382572763880144,-0.17042367141121717,0.029848159562487923,0.22891681182839935,0.41875783204129596,0.5917187325178435,0.7408274628593273,0.8600734531627928,0.9446498999721018,0.9911475284275186,0.9976920200668886,0.9640195665646426,0.8914875038401429,0.7830195978742007,0.6429881877615641,0.47703793681037865,0.29185829627883714,0.09491385372975504,-0.10585656434268706,-0.3023599064483766,-0.4866751268431803,-0.651372482722209,-0.7898130270025732,-0.8964162241455867,-0.9668849014312743,-0.9983784679042683,-0.9896274185371973,-0.9409845079530079,-0.8544105308930495,-0.7333952826210466,-0.5828168853459542,-0.40874515121535765,-0.21819690830981733,-0.01885315244518979,0.18125057361291783,0.3740480927161119,0.5517677407704068,0.7072456423587122,0.8342144864140054,0.9275561614013614,0.9835080662907953,0.9998147809283445,0.9758189819769194,0.9124879396066745,0.8123745268541859,0.6795143133617036,0.5192628916470639,0.3380799932768102,0.14326909721816472,-0.05731697325033179,-0.2555925976869687,-0.4435652896822878,-0.6136578738257217,-0.759013921492065,-0.8737741333408574,-0.9533125275546556,-0.9944229130719912,-0.9954481310845539,-0.9563468550749695,-0.8786952566880414,-0.7656234702834606,-0.6216894172834292,-0.45269507645206475,-0.26545260624854883,-0.06750974685842194,0.13315442906168873,0.3284511526404553,0.5105080169021642,0.6719863133321634,0.8063768550687108,0.9082623620937114,0.9735358316804232,0.9995660915906163,0.9853038625740069,0.9313240547936729,0.8398025932089502,0.7144287060845778,0.5602562122736828,0.38349980188215205,0.19128452223669062,-0.008641432629900445,-0.20821905152191933,-0.39940336466019294,-0.5744877362506329,-0.7264145188168094,-0.8490595468279012,-0.9374790016861487,-0.9881086969553731,-0.9989077506437074,-0.9694408531154709,-0.9008958144138111,-0.7960356836618518,-0.6590873706084655,-0.49557125898172366,-0.3120786799329004,-0.11600621561069334,0.0847424569157329,0.28207516271845146,0.46803742441959717,0.6351331070125468,0.7766265869131722,0.8868142648094459,0.9612544776351177,0.9969465419173452,0.9924517112670644,0.9479511722168351,0.8652387405954554,0.7476485528478729,0.5999206670628188,0.4280099913273297,0.23884624150167763,0.040054604514009294,-0.16035163277104186,-0.3542940989838664,-0.533954977235324,-0.6920921411584681,-0.8223310848753679,-0.919421879199858,-0.979450796177467,-0.9999980713793202,-0.9802354445578288,-0.9209595468002463,-0.8245597883458591,-0.6949220415073889,-0.5372720012368051,-0.3579645374675245,-0.16422753043586857,0.03612948502457202,0.23503012167471596,0.4244566988757504,0.5967734351335581,0.7450342462963185,0.8632627420658023,0.9466931341699043,0.9919623451909297,0.9972455741487065,0.9623298541907801,0.8886226372822091,0.779095059845107,0.6381621763099938,0.47150498836032384,0.2858414438701698,0.08865563656142379,-0.11210387766336845,-0.30834448684774635,-0.49215573600623347,-0.6561281974047799,-0.7936521444419354,-0.8991839895954397,-0.968469746322367,-0.998716507171046,-0.9887050258236961,-0.9388388648908398,-0.851128128310635,-0.7291084340999899,-0.5776983936635506,-0.40300134266768,-0.21205931570320233,-0.012569182013422057,0.1874276151488834,0.3798692089369468,0.5569982825990335,0.7116747667598536,0.8376636554726699,0.9298863391825851,0.9846253233753658,0.9996740807057866,0.974425996070363,0.9098988192498237,0.8086936394362378,0.6748900353800802,0.5138816276533755,0.3321586619140328,0.13704638723362192,-0.0635902245430731,-0.26166351565512114,-0.4491891557457111,-0.6186079900569728,-0.763090748805949,-0.8768133349109316,-0.9551915932270914,-0.9950660977476201,-0.9948295080020712,-0.9544913609183339,-0.8756776863891521,-0.7615654620400815,-0.6167545493255974,-0.4470822732072806,-0.25938811970212905,-0.06123803634045773,0.1393805510271171,0.33438071120312135,0.5159019916762728,0.6766272733037958,0.8100777232351516,0.9108739565340906,0.974952879075785,0.9997314707890791,0.9842109071434068,0.9290168217452998,0.8363740870604237,0.710017129849209,0.555039396500318,0.37768803630905823,0.18511207901641277,-0.014925742435713757,-0.21436190751248682,-0.4051571484347156,-0.5796205129015813,-0.730719386221319,-0.8523629758678477,-0.9396478312038515,-0.9890555014768577,-0.9985943644978698,-0.9678799088915092,-0.8981502337418092,-0.7922161408431442,-0.6543478313367894,-0.49010277398922036,-0.30610168373896884,-0.10976164081085939,0.0910028916375325,0.28809909936514566,0.4735820382269589,0.6399748947101911,0.7805703761369043,0.8897010814956479,0.9629679542614074,0.9974176082756384,0.9916613786819907,0.9459312989789432,0.8620707477539662,0.7434601421301987,0.5948806732203318,0.4223215764097659,0.23273870539937497,0.033774141883455386,-0.1665518566082899,-0.3601641531301644,-0.5392582399269217,-0.6966148379835733,-0.8258909060164723,-0.9218753283388381,-0.9806989748291085,-0.999990665487432,-0.9789727526537855,-0.9184924679691496,-0.8209877704854726,-0.6903890725853064,-0.5319608051387166,-0.35208920840059516,-0.15802490279590478,0.04240938344290703,0.24113414829335683,0.430138800505095,0.6018045663718083,0.7492116023451626,0.8664179337874363,0.9486989758498705,0.99273798139171,0.996759738990705,0.9606021316794163,0.885722671876949,0.7751397490927582,0.6333109587068648,0.4659534163899085,0.27981330128637405,0.08239391766972684,-0.11834676310114187,-0.314316888245918,-0.4976169059853876,-0.6608579963134495,-0.7974599141817464,-0.9019162390453115,-0.9700163385622601,-0.9990150990990697,-0.9877435812052446,-0.9366561395390696,-0.8478121078402922,-0.7247927872291383,-0.5725570840302316,-0.39724161635907906,-0.2059133471703701,-0.006284715123673178,0.1935972536624941,0.3856753210707721,0.5622068240905339,0.7160757814067914,0.8410797384635533,0.9321797882813732,0.9857036896952306,0.9994938953221931,0.9729945222524533,0.9072737596782356,0.8049808102092547,0.6702391005686685,0.508480066345676,0.32622421093695686,0.13081826418607526,-0.06986096414695006,-0.26772409842889094,-0.4547952797203925,-0.6235336724885809,-0.7671374355353319,-0.8798179040779627,-0.9570329307093359,-0.9956699792684799,-0.9941715911096599,-0.9525981662292726,-0.8726255285429942,-0.7574773734579571,-0.6117953207754777,-0.4414518110916764,-0.25331338783510343,-0.05496390704032573,0.14560116773499812,0.3402970623850175,0.5212755893358658,0.6812415078280731,0.8137465949240341,0.9134495732438686,0.9763314177489768,0.9998573625597087,0.9830790773167677,0.9266728943587621,0.8329125457794704,0.7055775093328759,0.5498006577618828,0.37186135280109145,0.178932324233017,-0.021209462704269093,-0.22049629662920914,-0.41089492929832944,-0.5847303956815909,-0.7349953916464363,-0.8556327382458149,-0.9417795464794113,-0.9899632402503264,-0.998241535837669,-0.966280735313796,-0.8953691779011502,-0.7883653070441347,-0.6495824466120003,-0.4846149309006835,-0.30011259713026145,-0.10351273064209479,0.09725973192389181,0.2941116566638662,0.4791079464747739,0.6447914046575512,0.7844833343652887,0.8925527567380446,0.9646433955465273,0.9978492785991192,0.9908318774218579,0.9438740633142088,0.8588687048126487,0.7392423661984733,0.5898171827606637,0.4166164806200265,0.22662197657561428,0.027492345240689983,-0.1727455019744958,-0.3660199815004213,-0.5445402029782067,-0.7011100198919773,-0.829418106090318,-0.9242923652145185,-0.9819084177990489,-0.9999437619300285,-0.9776713932504442,-0.9159891104911325,-0.8173833252220423,-0.6858288346521817,-0.5266285976344522,-0.3461999725019611,-0.15181603348292447,0.04868760677396403,0.24722865058693883,0.43580391249727973,0.6068119275127992,0.7533593660085821,0.8695389037038822,0.9506673457851993,0.9934744063937264,0.9962345337824432,0.958836467272162,0.8827877221672955,0.7711538218441553,0.6284347265659114,0.4603834401756131,0.2737741066271227,0.07612894438013779,-0.124584974074305,-0.3202768747448853,-0.5030584210748672,-0.6655616926302876,-0.8012361858226548,-0.9046128645766713,-0.9715246170636294,-0.9992742318945281,-0.98674312265705,-0.9344364181110172,-0.844462600458311,-0.7204485124679824,-0.5673931595176209,-0.39146619978763,-0.19975924546521834,-3.135095805817224e-14],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],34:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var sin = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof sin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the sine (medium negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the sine (medium positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the sine (large negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the sine (large positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the sine (huge negative values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the sine (huge positive values)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = sin( x[ i ] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[ i ] );
			tol = EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = sin( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = sin( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = sin( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/sin/test/test.js")
},{"./../lib":26,"./fixtures/julia/huge_negative.json":28,"./fixtures/julia/huge_positive.json":29,"./fixtures/julia/large_negative.json":30,"./fixtures/julia/large_positive.json":31,"./fixtures/julia/medium_negative.json":32,"./fixtures/julia/medium_positive.json":33,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":54,"@stdlib/math/constants/float64-ninf":60,"@stdlib/math/constants/float64-pinf":61,"tape":119}],35:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],36:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":35}],37:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":35,"./factory.js":36,"@stdlib/utils/define-read-only-property":64}],38:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":45,"@stdlib/math/constants/float64-exponent-bias":55,"@stdlib/math/constants/float64-high-word-exponent-mask":56}],39:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":38}],40:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":42}],41:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":40}],42:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],43:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":44}],44:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],45:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":43}],46:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":48}],47:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":46}],48:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":2}],49:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":50}],50:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":62}],51:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":53}],52:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":42}],53:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":52}],54:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],55:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],56:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],57:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],58:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],59:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],60:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],61:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],62:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],63:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],64:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":63}],65:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],66:[function(require,module,exports){

},{}],67:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"dup":66}],68:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],69:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":65,"ieee754":88}],70:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":90}],71:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":72,"./lib/keys.js":73}],72:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],73:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],74:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":84,"object-keys":93}],75:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],76:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":77,"./helpers/isNaN":78,"./helpers/mod":79,"./helpers/sign":80,"es-to-primitive/es5":81,"has":87,"is-callable":91}],77:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],78:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],79:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],80:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],81:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":82,"is-callable":91}],82:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],83:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],84:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],85:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],86:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":85}],87:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":86}],88:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],89:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],90:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],91:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],92:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],93:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":94}],94:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],95:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":68}],96:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":68}],97:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":98}],98:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":100,"./_stream_writable":102,"core-util-is":70,"inherits":89,"process-nextick-args":96}],99:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":101,"core-util-is":70,"inherits":89}],100:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":98,"./internal/streams/BufferList":103,"./internal/streams/destroy":104,"./internal/streams/stream":105,"_process":68,"core-util-is":70,"events":83,"inherits":89,"isarray":106,"process-nextick-args":96,"safe-buffer":113,"string_decoder/":107,"util":66}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":98,"core-util-is":70,"inherits":89}],102:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":98,"./internal/streams/destroy":104,"./internal/streams/stream":105,"_process":68,"core-util-is":70,"inherits":89,"process-nextick-args":96,"safe-buffer":113,"util-deprecate":125}],103:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":113}],104:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":96}],105:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":83}],106:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],107:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":113}],108:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":109}],109:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":98,"./lib/_stream_passthrough.js":99,"./lib/_stream_readable.js":100,"./lib/_stream_transform.js":101,"./lib/_stream_writable.js":102}],110:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":109}],111:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":102}],112:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":68,"through":124}],113:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":69}],114:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":83,"inherits":89,"readable-stream/duplex.js":97,"readable-stream/passthrough.js":108,"readable-stream/readable.js":109,"readable-stream/transform.js":110,"readable-stream/writable.js":111}],115:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":76,"function-bind":86}],116:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":115,"./polyfill":117,"./shim":118,"define-properties":74,"function-bind":86}],117:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":115}],118:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":117,"define-properties":74}],119:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":120,"./lib/results":122,"./lib/test":123,"_process":68,"defined":75,"through":124}],120:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":68,"fs":67,"through":124}],121:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":68}],122:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":68,"events":83,"function-bind":86,"has":87,"inherits":89,"object-inspect":92,"resumer":112,"through":124}],123:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":121,"deep-equal":71,"defined":75,"events":83,"has":87,"inherits":89,"path":95,"string.prototype.trim":116}],124:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":68,"stream":114}],125:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[34]);
