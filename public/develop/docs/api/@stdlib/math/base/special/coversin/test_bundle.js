// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-to-words":53}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

// MODULES //

var sin = require( '@stdlib/math/base/special/sin' );


// MAIN //

/**
* Computes the coversed sine.
*
* @param {number} x - input value (in radians)
* @returns {number} coversed sine
*
* @example
* var v = coversin( 0.0 );
* // returns 1.0
*
* @example
* var v = coversin( Math.PI/2.0 );
* // returns 0.0
*
* @example
* var v = coversin( -Math.PI/6.0 );
* // returns 1.5
*
* @example
* var v = coversin( NaN );
* // returns NaN
*/
function coversin( x ) {
	return 1.0 - sin( x );
} // end FUNCTION coversin()


// EXPORTS //

module.exports = coversin;

},{"@stdlib/math/base/special/sin":35}],13:[function(require,module,exports){
'use strict';

/**
* Compute the coversed sine.
*
* @module @stdlib/math/base/special/coversin
*
* @example
* var coversin = require( '@stdlib/math/base/special/coversin' );
*
* var v = coversin( 0.0 );
* // returns 1.0
*
* v = coversin( Math.PI/2.0 );
* // returns 0.0
*
* v = coversin( -Math.PI/6.0 );
* // returns 1.5
*
* v = coversin( NaN );
* // returns NaN
*/

// MODULES //

var coversin = require( './coversin.js' );


// EXPORTS //

module.exports = coversin;

},{"./coversin.js":12}],14:[function(require,module,exports){
module.exports={"expected":[0.004025114534427887,1.9973897635197664,1.144034403935851,0.42668109926594255,0.7149349775545103,1.0323966809718823,0.06052259869500343,0.2169061593337317,0.4535256877576612,0.7461370948499386,1.0647593512449607,1.9247319000324112,0.3562496488838053,1.5261909117677754,0.02598230690010339,1.0970540358255594,0.08468190426394229,0.3317964672358098,0.5089071802166185,1.9824392195464893,1.129246831092774,0.09820953295106483,0.29605871946333606,1.455178503900705,1.9852413403473896,1.1447637052683828,0.10508978915193501,0.2850195201859026,1.441175326956526,1.9902695484196156,1.1931917095112863,0.12808974913228033,0.26274486218046933,1.4118702898502005,1.9942581512503326,1.2248766620203488,0.14441096776381546,0.24124418970940875,1.3666127242873716,1.9972029615226474,1.2563255344066786,0.16163040127422856,0.22054007461877267,1.3519942650148058,1.9999600968585507,1.2714348707876209,0.1894179313184169,0.21082288879185063,1.3372894335479857,1.9999773449553957,1.2864776026021898,0.19869067969021936,0.20129935088912843,1.2906405049832141,1.9997492190616029,1.333193183208699,0.20816005298222817,0.1543681136048194,1.2756169148559409,1.99744239197578,1.3791043527107791,0.23911499866980412,0.14611088365093416,1.2605256939742042,1.9962004234802282,1.3935526907545341,0.24937258812131857,0.13806318062393186,1.2127873068126458,1.9947140077733292,1.4382338985705112,0.2598143661891694,0.11419894736726943,1.164535198239283,1.9884693994520892,1.4522599933627078,0.31782637031767036,0.10703845571325565,1.1490643794064126,1.985976252185617,1.4955236597506354,0.329363513710096,0.08600576312704611,1.1666512537500784,1.976588603205723,1.5090686272241176,0.34106521758155506,0.07976254387709703,1.0178659812883804,1.9730991910600504,1.5224886796670738,0.35292861057322067,0.05060565612685053,1.002202174512031,1.9693710002730396,1.5357805240730782,0.3649507816510623,0.04580224881190342,0.9865378273670917,1.9654049456664677,1.548940898895335,0.43086201904534893,0.04123298211148929,0.9708767835640113,1.961202000429028,1.6160448894695572,0.4438115401509005,0.036898977230213736,0.9552228860026664,1.9351605436586692,1.6283081034485942,0.456897538530291,0.03280129764424289,0.939579975829392,1.90274000191312,1.6404171434681198,0.4701168031471301,0.02894094884034859,0.8574156231202033,1.8958907529945015,1.7016114028595513,0.4834660902642187,0.01254360822763445,0.8419290475575677,1.8888216708063121,1.7126869406043936,0.4969421242394949,0.010191521055589292,0.8264812593740667,1.8815344899567563,1.7235875995486574,0.5699770614901846,0.00808231264241932,0.811076049141009,1.8740309985709902,1.778078478523156,0.5841716652355675,0.006216500544735215,0.7957171969819449,1.8663130378523507,1.7878226976049827,0.6606382550255955,0.004594542594669293,0.7804084716451014,1.8221388572483606,1.7973736011080095,0.6754144340790179,0.0032168367875331505,0.70065042598136,1.8131206120618129,1.8067288454358357,0.6902702597924526,0.002402626202952174,0.6857413395428076,1.803902843705607,1.8158861350028206,0.7052020868500751,0.0036102041087143766,0.6709093657528549,1.7944878140315916,1.860818192310607,0.7202062512868856,0.005062275693940799,0.533874870767257,1.7416645868367535,1.8998782820357414,0.6713584273224574,0.0012188310164593652,0.579841209919886,1.7750752595901051,1.8763371388705956,0.7504168485909205,0.008698414761780904,0.506390338328669,1.7202891428333067,1.9130985386010657,0.964273740579678,0.0032550596282758804,0.5516220609447543,1.754902001343973,1.8909959973456623,0.9130902944129033,0.013307474688739829,0.47939026303536747,1.5963840453355937,1.9254226273120607,0.9955956616555559,0.0062695515235872135,0.5238429760794472,1.6367487959246598,1.9047803806820647,0.9443388043236637,0.01888493187613627,0.45290114432691964,1.5709473213598553,1.9368384525934195,1.0269219054044827,0.08334528049950596,0.4965312193286985,1.612282989184219,1.9176767600866713,0.9756419433595291,0.06406166048545636,0.42694898016047067,1.5449502365749734,1.9473348102922325,1.0582217264343046,0.09631484113116406,0.4697135960343314,1.587216252413269,1.9705307302295867,1.006968988804651,0.07555227112673502,0.4015592414948417,1.5184183060274692,1.987106291725655,1.0894644052856557,0.11017133078042107,0.33748707848600223,1.561573187560841,1.9776029314456658,1.0382891944800439,0.08795018837579016,0.27793416754800504,1.4913775696925096,1.9916358636071547,1.1206192785818183,0.12490114988482826,0.22330674168754538,1.417830078936441,1.9837156564558125,1.069571820919669,0.1012432441977058,0.2566175329900032,1.463854566916765,1.9951921865493603,1.282255084970381,0.1404898417457674,0.2039573138206937,1.3891660435753372,1.9998801330486875,1.2327052157706668,0.11541839201666393,0.2360304970922148,1.3118228709565636,1.997771770170713,1.3121672918260432,0.1569221067170926,0.18538916840679664,1.232352636193725,1.9998744545510965,1.2630554683408877,0.1304617195206096,0.2161932651654661,1.2819072902262438,1.9993720827182626,1.341773119599623,0.256860056897929,0.16762052930048887,1.2017715257457795,1.9988874412833217,1.418159406701748,0.22353513415620052,0.1971253066194869,1.2517150293341217,1.9999915535524762,1.3710435114149673,0.2781850126208302,0.15066883567455291,1.1709923850221866,1.9775265727988725,1.4464084512017372,0.24365556026939794,0.17884533585450269,1.2212757207158182,1.9870482002742276,1.399949739612224,0.30021839942878503,0.13455072490410425,1.1400454224564662,1.970443308217959,1.4742193645614878,0.36155471446286414,0.09615967190959906,1.1906192392739192,1.9815386446887673,1.4284634339428326,0.32293859247831347,0.06393405681342001,1.1089610111922257,1.96240759430052,1.6125695683904464,0.3859773710974149,0.03809370276622337,1.1597756730570126,1.9750657501601745,1.5712449049296127,0.3463232928544633,0.05337272181810826,1.0777696592731953,1.953427317762166,1.637028280029097,0.41100266514577233,0.030002297365403163,0.8617763437475671,1.9676358695624883,1.5966749977323116,0.37034954945625875,0.043740461726406776,0.9127291554832255,1.9435112923670386,1.660861775173879,0.4366060353331962,0.022862903957949987,0.8308204693886726,1.9592562950113694,1.621519479092385,0.5067056452592495,0.03504673019692306,1.0151886603891107,1.8761624577988185,1.6840466622506063,0.46276235302750246,0.0012010036953189474,0.8000306376314635,1.899720114626012,1.8247793346184769,0.4202318017739991,0.005025910569202652,0.8505213013848416,1.784947845573678,1.7947079107791382,0.3792258314878425,0.011467239945029184,0.901405040128586,1.8156764698794579,1.762546692157883,0.562142774988319,0.02050805345294493,0.6899255906848807,1.8442601596660697,1.8837221209850057,0.5166306281296169,0.03212457701868099,0.7390697850049373,1.8706237501529022,1.858568419808707,0.7159805353921493,0.000708368420189398,0.7889001315506667,1.7446116954519268,1.8311569937761458,0.928593095488119,0.003951437212361575,0.8392855945078035,1.7778507065702045,1.8015599250376453,0.8775546982544892,0.009813753983339168,0.6310023616323643,1.809044251265345,1.911293861993506,0.826838287941069,0.01827990295729831,0.6791330492098565,1.8381103017809242,1.8889877366887002,0.7765772303898146,0.04256595969657895,0.7281075009809042,1.7013530421995287,1.8643438947107356,0.9911914087477456,0.02902759587667103,0.7777969318253766,1.7369719813762368,1.8374271404634355,0.9399418338295112,0.018042538794998952,0.5735273998578367,1.7706529504129613,1.9352888942545041,0.8888501901971898,0.08159384519146684,0.6204556740640014,1.8023073805256398,1.9159178934340242,0.838050830420844,0.06251968924291407,0.6683820127679377,1.6553416703502615,1.8941383593544683,1.0538242945713925,0.04591076792333171,0.2672628310888667,1.6932007379262082,1.8700075643243852,1.002564689820592,0.031810756697171705,0.30311142094369703,1.7292369379236525,1.9556130404171324,0.9512983408618485,0.10817028469832246,0.3407925760672702,1.5652120095495305,1.9392531927156176,0.900160059677135,0.08615290590963964,0.3802072086308558,1.6067581684969392,1.9204234483458902,1.1162459271064455,0.06653861492566615,0.22608847527763698,1.421827478683416,1.8991733227349332,1.0651774797408933,0.0493789902476266,0.2595706579095026,1.467751921304004,1.97218653087644,1.0139376391436723,0.13824703873272692,0.29499990229134065,1.266952794677061,1.9589020465479279,0.9626611475893393,0.11337285242458583,0.3322830423063523,1.316004585682692,1.943095996162171,1.1782113096417086,0.09083017529280613,0.18795162057961778,1.3642253987588675,1.9925112501349904,1.1275344566115821,0.07067828643654017,0.21893598281819093,1.4114884305830335,1.9955799195101807,1.0765222340219907,0.171706059984435,0.25197426132626355,1.2060833213656619,1.999085452841939,1.2889338562486468,0.14407269407189782,0.28697957736374347,1.2559751127160628,1.9999637522708782,1.2394772361873252,0.118690107840004,0.15300194914179766,1.305193781970158,1.9784455800477616,1.1893908774864559,0.24078169432868168,0.18136688143380864,1.3536099018040402,1.987745188195427,1.1388064891798086,0.20841602618849453,0.2118845231631853,1.1444049980784377,1.9944473832405474,1.5839398809355982,0.1781319380042663,0.0980529222465728,1.194940971043785,1.998534540830776,1.5415568426101807,0.1500090659902641,0.12137663383537367,1.2449643196618179,1.963594519110086,1.49774970538195,0.28302568100958037,0.14701080754613893,1.0309620457388615,1.9760336867165536,1.4526336662000594,0.24823285554789298,0.17488803476026427,1.0821599041353898,1.985906238239541,1.6336270593305526,0.40744907805386754,0.07278155252525809,1.1331417116576081,1.9931862124341966,1.593134803897195,0.366934020459342,0.0931997998702443,1.183773404564754,1.9449614762132574,1.5510828181511718,0.5480129618625589,0.11600260423393938,0.9683132773911096,1.960491381179043,1.5075816836271443,0.5028792612557988,0.14113000247652063,1.0195923433569216,1.9734955407115211,1.680827334718387,0.4590528086476041,0.0014264842190309102,1.0708198885358418,1.9016337378328574,1.642384788962679,0.41664885177960176,0.005476579339989351,1.1218612029858224,1.9226195836039655,1.6022530032211248,0.6047567729735766,0.012141911866790811,0.9057888752688548,1.94117927309129,1.7596899834860034,0.5581873255724781,0.021404954382197472,0.956947885203423,1.9572640010146536,1.7253554522160113,0.5127796859363203,4.268373674598536e-5,1.0082201066508403,1.8727820177817716,1.6891134980822033,0.7117603289894456,0.0008838087129556804,0.7932072634093642,1.896656530277016,1.6510594243345005,0.6630518618517944,0.004352248422993532,0.5878508719806708,1.9181731599416905,1.7989187330635907,0.6152294466224325,0.010438882123113058,0.635099466245725,1.9372753258109052,1.7670366448091772,0.5684188389814652,0.002583584417688134,0.6833076171239889,1.8405047429147743,1.7331375272083602,0.7722863935268615,0.0002124379440644475,0.7323485545899164,1.8671742178075423,1.697310522697137,0.7226694279280182,0.0004703716669132163,0.5316073744567614,1.7399418282573773,1.8350118315188926,0.6737817415706686,0.01721919400978178,0.5775152624314486,1.7734521626980886,1.8057073192900606,0.6257518914132418,0.009039213560326997,0.6245341326777787,1.619223647878357,1.7742840878075676,0.833706204068904,0.003465102075426829,0.4341900264793431,1.658662054308206,1.7408247688211331,0.7833754800837047,0.0005115174550931467,0.47720225648407744,1.6963684174231843,1.9683704058237197,0.7336144003479408,0.030718097806452516,0.5215892557362023,1.525930658889589,1.9543061449006738,0.6845538185291847,0.01938423366795816,0.5672343024588691,1.5688398673915631,1.9377324034818204,0.8957786959241523,0.010629034827430162,0.38366959289036706,1.610253232489317,1.990460492463246,0.8449317550353761,0.0044755242957176256,0.4248490510067956,1.6500618519898445,1.9820943081867652,0.7944925876250976,0.04802130579407582,0.46754094839269345,1.471640202103673,1.9711455705812426,1.2737937059243445,0.033578041895050315,0.5116330207769024,1.516223465118887,1.9576430708722423,1.2241294158645126,0.021676118704709868,0.335568175219745,1.559449246864473,1.9971453552253666,1.1738757463894332,0.012346833982445737,0.3747532374819825,1.6012038791462286,1.9919636193477155,1.123164846499785,0.06906090515336216,0.41558247291023154,1.415498619454967,1.9841733774171533,1.333481700185995,0.16924637023410272,0.4579485153615481,1.4615809535302573,1.9737951149563677,1.284714564653986,0.1418035293545722,0.2900745652156991,1.5064494964062454,1.9608561230473296,0.9696261833780394,0.27211671316370845,0.15535149292313832,1.309385030395883,1.99793960355619,1.185064412919233,0.09375431821950908,0.36591775948248484,1.0978734339549763,1.9884230155486975,1.3918608225634679,0.20573238712603004,0.21460315819321152,1.405126797308621,1.9327507482961175,1.0834689306387726,0.05523123573810751,0.09996366881481933,1.1992589212920983,1.9987632104044812,1.2955985947622866,0.14769711655729323,0.027352529199253794,1.4966100170417185,1.964762751833414,1.4939249037326698,0.026639222697652065,0.14931783084872807,1.2985498705168963,1.885711460348959,1.19622914085216,0.09862094734792537,0.056248723045889015,1.0865485552359109,1.9866335163237343,1.4022990575493428,0.212693721860443,0.2076140578763036,1.3947025708835148,1.9285901507398204,1.5895831042609498,0.05901975053722219,0.09506529087285487,1.1881009485667153,1.8271850782010126,1.3064443883696593,0.1537009515100739,0.02477360966685982,1.4867062997893474,1.961707835456049,1.5037819665642747,0.7459357326853695,0.14339420688047333,1.2876760923812496,1.880374347076318,1.6775948002998669,0.4553537577183744,0.05254915797159554,1.075212481220348,1.9847163933074863,1.412685254032465,0.648239298639546,0.005946540164825875,1.3842272885823483,1.9243094374631196,1.5987311553264483,0.8575507562457994,0.09028396875408462,1.1769186444601218,1.8207406680554858,1.3172505425425158,0.5542404465671652,0.02232083838225629,0.9613485575368657,1.9585285194935915,1.5135738637964036,0.7569521338430006,0.13758138725562052,1.2767651025424076,1.874923354931669,1.6859151954029858,0.4649272585922476,0.04897214830061569,1.063866678261012,1.7504625232120525,1.4230180685294136,0.658908343191191,0.004772373497772708,1.3737023054120416,1.9199091621881919,1.607801758850647,0.8688171397689002,0.08562032093583183,1.1657134554344766,1.8141900928203023,1.764203367224368,0.5644499853538776,0.01999453261823525,0.44726922891841236,1.955225215199409,1.5232993288198977,0.7679999739185577,0.00013135534809094462,0.7365948001793728,1.8693591890160173,1.6941468654665752,0.9823835009786185,0.045518156729105974,0.5355032403680661,1.742897321532109,1.4332961644618751,0.6696215088979534,0.0037269422940748864,0.356101951939253,1.9153898941028902,1.6167937415257352,0.8801004921600736,0.008457974881459385,0.6286198746874576,1.8075341998305996,1.7714893444890267,0.5747158637471852,0.017794993288921757,0.43782704842753106,1.6619696613483945,1.5329571036187888,0.7790778238431791,0.0003803572587770532,0.2732856084919497,1.8636825690697099,1.702288745701202,0.9937560280375165,0.04218763004048898,0.5254615047836173,1.7352360240160314,1.8388261149124745,0.6803774099820323,0.00281038178316817,0.3474418693517317,1.5724566907126993,1.6257059402137277,0.8913993538862842,0.009998180515771504,0.6180841391221515,1.8007738500446604,1.9898439812377284,1.1074925441182548,0.0157225049108497,0.42845758657254707,1.65340232128804,1.9972725055741267,0.790184250666146,0.0007586627523425982,0.2655199393743388,1.8578942293793355,1.9700857717223186,1.0051293627715658,0.03245567523291204,0.5154811520742362,1.7274796216739754,1.999588282115873,1.2198349527097638,0.002022810524705654,0.33886619697457654,1.5630944208651334,1.9401303694894139,0.9027122634083216,0.011666445640757028,0.1931237319631679,1.7939099179325444,1.9913967461621598,1.1187928472005375,0.06746158249702161,0.41916205531942796,1.6447504618189106,1.9963685814283778,0.8013178177402377,0.001266222893919311,0.2578492772967378,1.4654835567277598,1.9727840041926483,1.0165020340082647,0.0353922636895736,0.13119217823917795,1.7196291178181715,1.9998499578617146,1.2309156666530905,0.00136433039322148,0.33037604409487686,1.5536593131870522,1.9802266365722638,0.9140377573698534,0.23507820052098805,0.18645756361941346,1.7869432913629741,1.9928212711582696,1.1300777840974168,0.39131350586515123,0.40994165707101204,1.636015202083108,1.9953357742335784,1.340043662018986,0.17314576391659475,0.2502746144806347,1.4553875679721742,1.975356404344632,1.027872570660937,0.31327413722453357,0.12561695944151963,1.7116855279331422,1.9999823002327748,1.2419665110122629,0.4854700546436088,0.32197250893753715,1.5441525881358937,1.9779127412658046,0.9253743707867151,0.24245338385581772,0.17989662925401506,1.3512097459756958,1.9941173719597851,1.1413458950708968,0.40037645600504923,0.0761165273220401,1.6271976720107904,1.9941742175862138,1.3507170916685762,0.179595688046016,0.2427969307297465,1.4452326735672596,1.9478068242190045,1.039239501919021,0.3215858843918299,0.12015484452369618,1.2424769649244165,1.9999852921101997,1.252986056329807,0.4952554971643931,0.3136566785232183,1.534575475433002,1.9754723502245852,1.4549191026719281,0.24992655795381113,0.173441777542093,0.8129938988943968,1.9054084770057662,1.1525957225594627,0.409516969119205,0.07182407188424622,1.1305994173636122,1.9928840617368688,1.3613451550862612,0.5966807420378879,0.23541719330327782,0.9145619430792828,1.9441192490481893,1.5532211125800348,0.32998538631310814,0.11480654002547419,0.7025141083404945,1.9998589331069816,1.2639728771968666,0.5051062297913985,0.0355311296201295,1.0170280813886523,1.972905779119979,1.4650178452081937,0.7033367720108297,0.167093843436681,0.8018334777745748,1.9005215431262243,1.163825811366619,0.4187338628568077,0.06765167858600651,0.5958925138401376,1.9914654735707935,1.371926477502458,0.6071139366644909,0.011746713285457178,0.9032359024148979,1.940309549424885,1.5626595601964757,0.3384715564894176,0.10957273776492571,0.691675101725965,1.8452446659856165,1.2749255524375849,0.5150209783049438,0.032588760714492016,0.49451192723972703,1.9702133599451015,1.8576237756690526,0.7142171169753251,0.16085364806072278,0.7906986900459296,1.8955181242787933,1.9480811764482882,0.4280259449870004,0.06359988713800646,0.5855154965067706,1.7790055223106398,1.800458610015608,0.6175979521968469,0.010072529358917226,0.8919223784558447,1.9363782181443403,1.9105348282274401,0.8250267130267708,0.10445411474893951,0.6808759777951415,1.8391124189606347,1.9780924559046142,0.5249984602047144,0.029771529145106168,0.48473148226673946,1.967395440971866,1.8634172653881755,0.7251344287511163,0.00039500520796831307,0.779590976024244,1.8903988676696257,1.951636843855419,0.9381055973510485,0.05966922165074662,0.5751920938975026,1.7718239783125591,1.8072237708040881,0.6281314324983683,0.008526395305820889,0.3906301612816544,1.9323257637351983,1.9151779675828617,0.8362357307037669,0.09945133308564857,0.6701181334447601,1.8328716304088848,1.980396756485204,0.535037384875658,0.04536136314279027,0.47501768871059,1.6945254890852204,1.8690990696810013,0.7360872951535404,0.13161910130237353,0.7685117725232409,1.8851644354888122,1.9550694143882499,0.949460947353635,0.019889985601870497,0.5649236413731931,1.764542596734782,1.996441568994849,0.6387130150340619,0.08540744319673221,0.3816519582823318,1.928152710393715,1.9197027261210993,0.8474659317447771,0.19363297216154518,0.6594029602319281,1.8265231075937354,1.9825742400167516,1.0633416222250085,0.048809653092836136,0.46537180307751014,1.6862979492040548,1.874668453590331,0.7470742993988451,0.13731518624778538,0.2963057946340778,1.879815504824723,1.9583784440342282,0.9608228347233391,0.2661048921979742,0.5547114671867543,1.7571623194442814,1.9973357249980714,0.6493413310467765,0.09006563281069546,0.37275374032316044,1.1066359368796912,1.924108518552043,0.8587158634920412,0.20041138306148554,0.22008608128872742,1.4131644269712043,1.984624624835702,1.0746878397285764,0.052380982161559286,0.4557950730896524,1.2078831422556366,1.9991624225957545,0.7580940202874524,0.14312286187483703,0.2882706483742703,0.9928944878375476,1.9615635047611606,0.9721897897684075,0.2738777175281768,0.5445568923113396,1.3069451548103992,1.9981008728495306,1.187584192651252,0.09484152496753784,0.3639366584133984,1.0953207356551873,1.98803064174525,0.8699840707355775,0.20729322297440156,0.21301821728232473,1.4027806702980563,1.9865476457190723,1.0860243961522078,0.35676137968390875,0.44628873752369425,1.1967450061840312,1.998632410016111,1.2980477021615657,0.14904137694452224,0.28032756628694466,0.9815220819034046,1.964624184572577,0.9835603421415695,0.28174446879652404,0.14797242150795797,1.2961011639719768,1.998736913575223,1.1987433227843007,0.44798742302802985,0.3552018530671299,1.0839932044282343,1.9862123426485294,1.404645729306201,0.21427760171514731,0.2060521515598045,0.8679630745774755,1.9883430539187594,1.5916526849978876,0.3655110157257595,0.09397686217509704,1.1855814205983053,1.9979732215548887,1.7510316604385299,0.15506996588044475,0.2724775758318758,0.9701520661393942,1.961001750839139,1.5059957678918356,0.289704128416845,0.14207371743394537,1.285218871623901,1.99924376490151,1.679478735597963,0.45750646682752183,0.34655045415573693,1.072654808446523,1.9842664742405107,1.8212325730827472,0.22136361583489406,0.19918878520115557,0.8566980358911575,1.9900106171937155,1.600783374679779,0.37434272468360374,0.08922202205581031,1.1743938295393241,1.9971849424799497,1.758492394586699,0.556537701700689,0.2647216924271768,0.9587859112886999,1.9577944391157849,1.5157727950132571,0.29775566678501475,0.13628598851231966,0.7451025377208818,1.9996213612657625,1.6877792168489214,0.46709568367537024,0.024964556416925632,1.06130701436313,1.9821932882246887,1.827668906855254,0.22855034873799418,0.004525382680057755,0.8454515337127277,1.9189004410384976,1.6098363513600857,0.3832553641513079,0.0073532110858701705,0.6368128917291341,1.996267674757386,1.7658550156326307,0.5667600606126781,0.019487457911286254,0.9474250875950854,1.9544632340160462,1.8861110986077758,0.3058980424121369,0.00017621177041349245,0.7341215479396229,1.8680889095432773,1.6959907319439878,0.47675383317968756,0.027553018563552523,1.0499512900468027,1.9799930527734437,1.8339981793511329,0.6720432741780287,0.0035090005059781326,0.8342250228085437,1.9143544203906389,1.9330610131145445,0.3922477812541516,0.008794096785569971,0.6262398305490611,1.9952215370383306,1.773118571200801,0.5770384603165986,0.06036482281570521,0.9360710646127144,1.9510085664405734,1.891324936058578,0.781579870444123,0.00045437495096045666,0.7231749502761177,1.4832498496060982,1.704112218700831,0.48647966603195547,0.030267269433693622,0.5232055363512553,1.7334952305344953,1.840219571861371,0.682808620008027,0.10536307635512054,0.823019955359036,1.570351929161029,1.937091795483016,0.40131881279795545,0.010363197727524809,0.6157151162871369,1.380575313624436,1.7802821217300822,0.5873715712728421,0.06431723681044543,0.4263549522707256,1.6514586743775084,1.8964234781482103,0.7926925429561826,0.0008618321399924689,0.7122641607032397,1.4732615988385676,1.970705191605469,0.496271924168626,0.03310695793144447,0.5132392041020011,1.2729649665193912,1.8463322796315322,0.6936149954258184,0.11050239326850075,0.8118377807708644,1.5609731283457076,1.9410013624196754,0.9052651070636724,0.012060310944160824,0.6052401103444434,1.370033377328233,1.9917291808201996,0.5977580568647483,0.06839068397474934,0.41707625879834587,1.6427879100952536,1.9014060653660638,1.3317467853439426,0.16822374775189775,0.7013905905619866,1.4632121303660692,1.9733750788813145,1.526663243538906,0.036071716735194936,0.5033358357164244,1.262006066664044,1.8523355119658538,1.2334102831331903,0.11575676917291655,0.3284734504318608,1.5515217640949623,1.9447892082111582,1.4368548536825692,0.013885216909160003,0.5948161676921524,1.3594435761848138,1.9931247617559842,1.132620255977805,0.07258463739688914,0.40787296813425444,1.150580709905067,1.906272053200614,1.3424544027297527,0.17459090660213172,0.690555646378919,1.4531027441153195,1.9759190573816583,1.5362972023359764,0.03916116234514211,0.49349671222278824,1.2510132755947718,1.999994270666402,1.2444541942674636,0.12112552440022084,0.3200895981067339,1.541999058969064,1.9484548428890691,1.4470571143060538,0.2441300562554325,0.5844446366962577,1.3488072800144302,1.994391879239821,1.628784129547253,0.07689855457731731,0.0751381259038747,1.1393274981688881,1.9110208122227925,1.3531177226854678,0.18106483441583376,0.015032090684664379,1.4429347477635657,1.9783367980358015,1.5458617895973294,0.32347234116896495,0.11893884252083553,1.239988015259694,1.999968093454648,1.2554664845713561,0.12660796448698308,0.03789574663605377,1.5324062447564235,1.9749045974220902,0.9392803951557157,0.251625194076324,0.0017793416721118005,1.3381258646515939,1.904316682000941,1.1551298746561405,0.4115887441721163,0.38969734720842886,1.1280562640330518,1.7915005403509165,1.363735365880974,0.5990289118303949,0.23376669986834908,0.9120069120782333,1.980627988102261,1.555355768116983,0.8051929382424442,0.11361629830507258,0.7000665101154859,1.999812567586945,1.7210431211454242,0.13220338026431955,0.03485671947652713,0.5021318867881991,1.972309618099903,0.9506364898528513,0.2592171362612007,0.0011657428361492306,0.32744585295981654,1.8994034251088432,1.1663553115923362,0.4208226972961354,0.380727368013847,0.18416559681712263,1.7844984367151775,1.3743059588945736,0.6094736846203344,0.2265082960285587,0.900683566040794,1.6329602885875714,1.5647779098223924,0.049173543397595276,0.10840841028806225,0.6892363747631924,1.451865248729041,1.7288768325624748,0.1379110479496266,0.031942536286474366,0.49230068916872005,1.969588867822531,1.8589399176462944,0.26690490077121143,0.553657894572653,0.31907267344338,1.8943738278805338,1.948893702657132,0.4301315686161963,0.37183749345774075,0.17764143175037617,1.7773948560232729,1.384828134390641,0.6199689730760614,0.21934994549342013,0.8893730668604999,1.6241144352347843,1.5741269959333053,0.8275524132978975,0.1033158521246138,0.6784464375507249,1.4416901911724773,1.7366162617326601,0.14373022924020373,0.029153574023601636,0.48253516386810025,1.966742698526596,1.8647082873135903,0.27468749317262076,0.0003262137955117872,0.3107875737717559,1.8892285409084115,1.9524216514085175,0.4395141540038856,0.363028873470126,0.17122364105317955,1.7701907171431355,1.3953005312964906,0.630513419602804,0.21229257421549774,0.07036048238348158,1.6151878509427957,1.5834018171194124,0.8387663345218065,0.09833928255129909,0.6676980941864918,1.4314579997603953,1.7442604075392771,0.14966017140875543,0.3329246480152871,0.4728365740842161,1.2275806644225262,1.8703648045573098,0.2825639067654413,0.5085445148921803,0.3025916256456458,1.8839682297496672,1.9558264017685616,0.4489692397956706,0.02040218435121688,0.16491305488462127,1.76288695195018,1.9966544603834606,0.6411056602470575,0.08644755174360763,0.06622993907980179,1.606181690390128,1.592601173656781,0.8500011117690826,0.1951524213045911,0.6569927349986217,1.4211699980552321,1.7518082811907907,1.0659009535808892,0.3414406798590298,0.4632061743566487,1.2164912329872106,1.8759087376912045,0.2905331227136536,0.5184812097245689,0.2944858892337501,1.8785935748401887,1.9591075133233289,0.4584956029498889,0.7180068765049925,0.1587104895365855,1.755484505206761,1.9975195346507382,0.6517443248730147,0.091132336354103,0.06222018153232378,1.5970971185487142,1.6017238755830394,0.8612552917900206,0.20195423241488542,0.6463317447551199,1.4108275168386415,1.7592589063487376,1.0772451206399793,0.3500418981837018,0.45364521040440575,1.205373797808381,1.8813393695920937,0.29859411017699533,0.5284801903526185,0.2864714130356334,1.8731052714065475,1.9622645616519083,0.46809201120495336,0.7289367042236149,0.15261674732816266,1.7479843344399673,1.9982555769899628,0.6624280373397972,0.0959346855264056,0.058331728414345974,1.5879353105332052,1.6107687428513036,0.8725274188251128,0.20885927296629747,0.008019116066210086,1.4004318939393534,1.7666113192540172,1.08857929582773,0.35872719039777423,0.4441549189647841,1.1942297969572186,1.886655997792627,0.30674582644430304,0.5385401633803562,0.2785492337460971,0.9789578907262378,1.9652971383813118,0.4777572232387479,0.7399015947339556,0.1466326165018672,1.7403874098177616,1.9988624921920088,0.673155415679463,0.10085397806328422,0.05456508270810134,1.5786974514489671,1.9857846820189433,0.8838160347933552,0.21586664977261427,0.006645843827730369,1.3899844740601224,1.7738645688515575,1.9212473015082625,0.3674954330345269,0.4347365276333943,1.1830606719412493,1.8918579345721498,1.983301193422539,0.5486598275222722,0.27072037612108113,0.9675886171779151,1.9682048512392996,1.5082062409590198,0.7509001296969102,0.14075887112167618,1.732694714023487,1.9993402017507065,1.6813582015263604,0.9647724695040591,0.05092073163969524,1.5693847362387827,1.9838100810183854,1.8226932678025431,0.22297545641014338,0.005401064714004589,1.3794866086037865,1.7810177169133359,1.9256116177655107,0.3763454918973713,0.006325469519163351,1.1718678675178793,1.8969445070456614,1.985307347187418,0.5588378737716454,0.2629858528451082,0.956223536132166,1.9709873241051206,1.5179683336599235,0.7619308864213707,0.13499627097290212,0.7426234028205398,1.9996886438729946,1.6896387143275413,0.9761408413838949,0.04739914661608091,1.5599983695282829,1.9817082214457575,1.8291055315483626,0.23018477333496123,0.004284939740675675,1.36893965549846,1.9178856756881946,1.9298562035838853,0.38527622220656255,0.007666923481916554,1.1606528315075118,1.901915057250856,1.9871860487046806,0.5690729855698664,0.2553466644002903,0.9448641176938548,1.973644197058166,1.9984179763321799,0.7729924380482546,0.1293455614639124,0.731650044553862,1.9999077734869148,1.6978300204416565,0.9875122995123012,0.04400078316408251,1.5505395654701253,1.9794793751824447,1.8354105481861516,1.202615290151966,0.0032976132816151527,1.3583449790218804,1.9133129323798874,1.9339805099143974,0.39428646874727946,0.009136738489928686,1.1494170146062679,1.906768942233231,1.9889370549590568,0.5793638389767384,0.061245493355350455,0.9335118312353713,1.9761751264245242,1.9977139170296878,0.7840833537350729,0.12380747352970889,0.7207113981007791,1.9999975622474415,1.705931060300462,0.9988853729595208,0.04072608087147045,0.5209527041034664,1.281428452427545,1.8416075021444605,1.2137394411218718,0.002439213050248301,1.3477039496249366,1.0687123233915699,1.937984003266545,0.4033750660190554,0.010734724418537844,1.138161870198335,0.852787584369024,1.9905601394530144,0.5897091028417318,0.06522524544339026,0.922168145206564,1.6495107424032847,1.9968808006552412,0.7952021988410138,0.118382723537379,0.7098088784056538,1.471000750840719,1.9566508354992913,1.0102585905868502,0.037575463330100534,0.5110004578693315,1.2704967756921566,1.8476955918300473,1.2248359443001997,0.00170985008303437,1.337017943754397,1.0573616069966216,1.94186616577732,1.4289142954967717,0.012460674563816498,1.1268888541679665,0.8415478645610277,1.9920550922360567,0.6001074389761738,0.06932591324754989,0.910834526944792,1.6408211303411115,1.9959187349747614,0.8063475351125176,0.16965017094857626,0.6989438957397518,1.460937657159568,1.953276676245,1.0216304812369361,0.03454933808112015,0.5011114650869298,1.2595301094459994,1.8536740297315673,1.23590336432338,0.0011096187251028455,0.3265752738318891,1.0460034707181625,1.9456264952781974,1.439160437533622,0.014314365669309992,1.115599424711161,0.8303286409777463,1.9934217199318809,0.6105575023263449,0.07354696633503599,0.8995124424851203,0.622576832758396,1.9948278444341216,0.8175179208693183,0.17604147853541086,0.6881178555188203,1.450814939909605,1.9497792079995246,1.032999573924073,0.03164809656225254,0.49128700492500066,1.2485298722578742,1.8603794144303034,1.246940269589831,0.0006385966180505465,0.3182111594849767,1.0346393837627312,1.949264505360091,1.4493497729456282,0.016295557954914552,1.1042950421470383,0.8191313648569751,1.9946598457633904,1.6307763128711188,0.0778878587008841,0.8882033563706853,0.6120692386285804,1.9936082701430502,0.8287119111909295,0.1825393674501966,0.014592312156398113,1.4406339084924793,1.946158883170117,1.0443643980244801,0.028872114057162723,0.0010336910684420886,1.2374974870390767,1.8545273947694392,1.257945232445139,0.0002968446898978794,0.034123081819929624,1.023270816106604,1.952779725436271,1.4594809837138962,0.01840399514789426,0.17056558300186953,0.8079574845975444,1.9957693095755635,1.6395606816837092,0.08234802883858505,0.069927432494433,0.6016118244224176,1.9922601698568752,0.8399280581035485,0.18914299717291783,0.01272021229228859,1.43039587985294,1.94241617005587,1.05572348346653,0.33380197226082053,0.0016152868463008563,1.2264343808593396,1.848564839611784,1.26891682936673,8.440714720792108e-5,0.03713121487967108,1.0118992383056469,1.9561717008032373,1.4695527593381166,0.02063940451603008,0.11760953462389234,0.7968084455719637,1.9967499678561684,1.6482623215421306,0.0869268998127185,0.06580936456549735,0.5912059428355395,1.9907837179561205,0.851164910767356,0.19585151350569097,0.010975819816466337,0.40469260241420635,1.9385515527871409,1.0670753609209067,0.3423268711859937,0.002326026465459985,1.2153419847622378,1.8424925202304423,1.2798536411480064,1.311469367992757e-6,0.04026389769657557,1.0005261213050978,1.7070922198982705,1.4795637970060809,0.023001496902898544,0.12301787600028602,0.7856856899394609,1.9976016937543266,1.6568801068650498,0.09162387933358007,0.06181213679524744,0.5808529398976906,1.9891791054239492,1.8035225584285284,0.2026640486832577,0.009359360370952974,0.3955927989092053,1.9345655312629297,1.0784185619906677,0.35093684196078156,0.0031658179897715577,1.204221733580078,1.836311222096826,1.290754253081926,0.5295184710919824,0.04352072504940219,0.9891529362492935,1.699004288792119,1.4895128017622048,0.025489966765275707,0.12853965745519158,0.7745906564594333,1.9983243770969232,1.6654129229179504,0.09643835983379634,0.25425254721787616,0.5705541547986148,1.987446539821458,1.8102407349989345,1.1590331791124393,0.00787104304927666,0.38657117715782097,1.9304586210862138,1.0897516194011845,1.3674141602956351,0.004134552789864854,0.2312330444279661,1.8300217447790526,1.3016172551439968,1.5586382664709229,0.046901275658468355,0.9777811542913744,1.6908259395357788,1.4993984866750336,0.7410382762595049,0.13417416473080968,0.7635247803053404,1.5193711318433367,1.673859665957328,0.9545844200931453,0.26187790062293137,0.5603109197148279,1.9855862452608295,1.8168541046752473,1.1702513026246262,0.00651106036942517,0.3776289041319354,1.926231353497255,1.9217044942842993,1.377968082425407,0.005232105557197109,0.22400930435727195,1.823624901838517,1.312441242174669,1.5680351583009675,0.050405112240144434,0.9664122464029861,1.6825582300214874,1.5092195730037101,1.7315771045973491,0.13992066898794253,0.752489492879061,1.5096186270450414,1.6822192433734617,0.9659487749674558,0.2695987321758452,0.5501245596372963,1.9835984623763427,1.823361811999693,1.181447403656984,0.43338381847791785,0.36876713653945214,1.921884275304881,1.9260564457847718,1.3884731133317756,0.006458334320263326,0.21688594084275725,1.8171215207246578,1.323224814061095,1.5773585732023592,0.054031781563416814,0.10157325959603725,1.6742022297004815,1.5189747903633846,1.7392835346882138,0.14577842690027132,0.7414862216257363,1.499800201658993,1.690490573831747,0.9773175344624939,0.27741404316556806,0.5399963922000464,1.3020593627728416,1.829763015182218,1.1926200339626833,0.442791736584077,0.3599870206746729,1.9174179488157548,1.9302886093066283,1.3989278941597558,0.007813080462960253,0.209863875311318,1.810512442667921,1.6120670797175864,1.586607305165432,0.05778081450851491,0.09663714874578166,1.6657590194446583,1.5286628768895412,1.74689433639633,0.1517466807505068,0.7305163898491269,1.4899171257258417,1.962709739547841,1.8723041795423834,0.2853228226598721,0.5299277275097241,1.2911979240569218,1.8821134100262125,1.2037677483308993,0.45227173112990293,0.35128969227002127,1.9128329517616378,1.76032566451114,1.4093310725543506,0.6447975129565312,0.20294401608667434,1.8037985225709483,1.603033537834422,1.5957801578409656,0.061651726127593176,0.09181789039452959,1.6572296914067628,1.9976336845057527,1.7544085252433148,0.157824658528403,0.023100492026290387,1.4799706776489647,1.9595706229070737,1.877808819884165,0.29332404763611863,0.5199198679761298,1.280298818079078,1.8766991815082528,1.2148891047737524,0.4618225758517168,0.34267627634913234,1.0675380460329338,1.7528891484542557,1.4196813028354809,0.6554519884914766,0.19612725827187572,1.7969806288979893,1.593921991884806,1.6048759446949372,0.06564401570746037,0.08711610792676161,1.6486153488791153,1.407220886871409,1.7618251292479277,0.1640115740306184,0.02073324066260107,1.469962144029104,1.9563073831356053,1.8831999132120214,0.30141668311358827,0.5099741081437474,1.269363454669002,1.8711715495111803,1.9633325455241992,0.4714430353211725,0.3341478870813277,1.0561864936393057,1.745355244090616,1.4299772461720535,0.6661510322706392,0.18941448363351765,1.7900596435625662,1.5847336204725662,1.6138934891620025,0.8764485345517539,0.08253240953112562,1.639917106150897,1.3968071111873523,1.769143189051799,0.17030662696241372,0.018492660179677767,1.4598928194979381,1.9529204423425814,1.8884767621730263,0.3095996822873589,0.5000917345242922,1.2583932483463858,1.8655312290495778,1.9663217744185162,0.48113186510506245,0.3257056276374952,1.0448276733663497,1.7377249259517178,1.440217570755143,0.6768932603429292,0.1828065604876823,1.7830364618133943,1.5754696121391167,1.622831624797687,0.8877425388078565,0.07806738812176628,0.6214871332959659,1.3863420073990902,1.7763617580435263,0.1767090030411722,0.016379040402841993,0.431480597179405,1.9494102386382206,1.8936386841920807,0.31787198666371297,0.0006221337731452392,0.26802180306036283,1.8597789497145951,1.969186006901894,0.4908878119262886,0.31735059004738986,0.13874366878116529,1.7299991810404491,1.4504009519702639,0.6876772831712481,0.17630434358761937,0.04968300247489854,1.5661311652097196,1.6316891954292707,0.8990510638789935,0.07372162126162973,0.6109846692513488,1.3758269291969234,1.7834799024811194,0.1832178741017293,0.014392654734694199,0.4221610171725553,1.1679729731525172,1.8986850115602047,0.32623252619705634,0.0010878861210523727,0.2603202968215157,1.8539154555795734,1.9719248724778895,0.5007096138259776,0.3090838550583771,0.13301986801261056,1.722179008703416,1.9997794560813777,0.6985017058122298,0.16990867401318155,0.046204187387821616,1.5567194876384747,1.6404650553053401,0.9103726469759739,0.06949567108775412,0.6005325254224518,1.3652632367354824,1.790496701612785,1.126428852234835,0.01253376011974916,0.4129161822463464,1.1567505509563492,1.9036150915209085,0.3346802194283317,0.0016828505310114705,0.25271447021091387,1.847941505103798,1.974538016866618,0.5105960003267178,0.03744963944880031,0.12740821353706389,1.714265420501675,1.9999536407724983,0.7093651280966794,0.1636203790620283,0.04284874844366249,1.5472357968520702,1.6491580692439958,0.9217058236205141,0.06539008423855608,0.0029846875050746347,1.3546522964577878,1.7974112477960267,1.1377025660340743,0.010802597011198678,0.4037472882459061,1.145507852640155,1.9084282863546282,0.34321397362490846,0.0024069500427202906,0.2452053070633975,0.9295687331943223,1.9770251020505796,0.5205456925969003,0.787944174134114,0.12190943123764941,1.7062594400798843,1.9999984786771643,0.72026614481069,0.15744027214261302,0.03961711967778714,1.5376813195923038,1.9762756449754446,0.9330491278346735,0.24749830552517427,0.0021711173188678767,1.3439954809184957,1.804222646615051,1.1489584676231506,0.40655157728722946,0.3946555211931916,1.1342463324782515,1.9131239734612164,1.3579120008952876,0.5933166835739274,0.23779377871011909,0.9182283795239237,1.9793858063183842,0.5305574036161385,0.7990723884323008,0.11652423239716181,1.698162103033894,1.9999139639954682,0.7312033458774105,1.0142106655751248,0.0365097191103706,1.5280572917574007,1.973749857865604,0.9444010923304819,0.2550372227466561,0.0014866190757429898,1.333294168606356,1.8109300169964637,1.160195101019866,0.415743891705602,0.013090380826890291,1.1229674471796143,1.9177015454404769,1.3685085941981834,0.6037331482886832,0.23048084385289835,0.9068986032402163,1.9816198243063643,0.5406298383417478,0.8102265932762555,0.11125331360605872,0.6951772483197065,1.999700107659619,0.7421753165394431,1.0255817506604439,0.03352694869232464,1.5183649582421463,1.971098113501557,0.9557602486997372,0.2626725029767185,0.0009312813174526813,1.3225497437658995,1.8971494485990812,1.1714110127344175,0.4250117812776545,0.01498840793657119,1.1116726556994476,1.9221604101707337,1.3790575198888049,0.6142008712235778,0.22326744844021218,0.895580869881295,1.9837268670380754,1.5690034504396482,0.8214053458385376,0.10609735667235565,0.6843650691434116,1.9993569373325295,0.7531806375418458,1.0369495266751174,0.030669194253304388,1.5086055727768564,1.9683207548938175,0.9671251276039491,1.2507683020176457,0.0005051758784815341,1.311763596218383,1.8920675940296996,1.1826047519574094,0.43435404717607695,0.01701384903712011,1.1003634190504645,1.926499990885425,1.3895574134342552,0.6247184983495163,0.07942432008238487,0.8842766434274685,1.9857066619616766,1.9931543542542012,0.8326072001163911,0.10105702853343168,0.6735937182238819,1.998884497404236,1.7400756154886534,1.0483125231656791,0.027936825451799985,0.4781527525945338,1.965418141301451,1.8672732594783192,1.2617618310396042,0.00020835787675399509,1.3009371211820107,1.886870348034273,1.953972467320076,0.44376948095277446,0.019166442132093398,1.089041200113901,1.7669090074579747,1.9961247084101252,0.6352846691821579,0.08392580618122436,0.8729873861118902,1.9875589529851836,1.9917616298382161,0.8438307071187888,0.09613298116975955,0.6628645888653375,1.9982828489861584,1.9410869711489758,1.0596692702969086,0.025330195727320537,0.4684847616363883,1.9623906481856042,1.8728790911707183,1.2727215004401955,4.086570650474464e-5,1.2900717190914606,1.8815583828910354,1.9573215103319703,0.45325686469518334,0.021445908777583345,1.0777074634502875,1.7595606193062943,1.9970605748867167,0.645898016957898,0.08854578902660581,0.8617145582314132,1.9892835005095981,1.9902406182951906,0.8550744150538632,0.09132585152057027,0.6521790689105217,1.9975520699031941,1.9371801071693109,1.0710182990419568,0.022849642254675562,0.45888552365361146,1.9592386671609372,1.8783720135233215,1.2836458925556802,2.721033312225174e-6,1.279168795416733,1.8761323857174619,1.9605467211421348,1.483028277661626,0.023851954118235263,1.0663636751100054,1.7521139798745355,1.997867468802978,0.6565571688106633,0.09328367101088997,0.8504596179576982,1.9908800814598977,1.988591516372201,0.8663368695167,0.20505566872336423,0.64153854056118,1.9966922546836514,1.9331520163344713,1.082358141372369,0.020495485900360433,0.4493562803343526,1.9559626059449688,1.8837513160113346,1.2945335942855336,9.392879129588305e-5,0.28288703417478755,1.8705930583813886,1.963647682560574,1.492955423607488,0.026384266925387867,1.0550113024436476,0.7707417713912601,1.9985452857849355,0.6672607459494957,0.09813883927585598,0.8392240211485935,0.5669881591285402,1.9868145373851707,0.8776166136774691,0.21200697414275171,0.6309443801992685,1.3957264549925235,1.9290032196892173,1.09368733044798,0.01826803118105158,0.43989826431275614,1.1891955623323702,1.8278109062544847,1.3053831972752354,0.00031447718247845646,0.2750068166708378,0.9738299404598875,1.9666239934692986,1.5028188043973378,0.029042519637331843,1.0436518139122142,0.7596863630511181,1.9990939381550756,1.6767746431519677,0.10311066579197603,0.8280092211598169,0.5567645388499831,1.9849099111912771,0.8889121884698704,0.21906020865313613,0.6203979582089151,1.3852561165363795,1.9247342538919416,1.1050044008066515,0.37147673574282736,0.43051269900951783,1.178015578891475,1.821376945681849,1.3161932980984425,0.0006643376783117549,0.2672203790529162,0.9624623756866916,1.9694752688742088,1.5126171441754188,0.03182636840168063,0.13814614245710632,0.7486620399487445,1.9995133549436879,1.6851036758537021,0.10819850743965309,0.8168166686569593,0.5465982523119163,1.9828778841592194,0.9002221327798672,0.22621445989900346,0.6099006387991567,0.365706640258066,1.9203456711452516,1.1163078885538358,0.3803633196577276,0.4212007984736308,1.1668125686400064,1.8148367377152743,1.3269624984385273,0.0011434650233669297,0.25952872851839925,0.9510996665096734,1.6712779587116162,1.522349175499211,0.0347354531198486,0.1324339134015068,0.7376702281110143,1.9998034818980428,1.693344088488219,0.11340170609240963,0.8056478114278376,0.5364906145517978,1.9807187191373496,1.8319624108360482,0.2334688024580438,0.5994537798274744,0.3569551656723756,1.915838039124539,1.1275963315519335,0.3893300553017718,0.411963767225346,1.1555879807185199,1.8081911283488634,1.3376894052694537,0.5737073237063679,0.05911220369760828,0.9397432827268891,1.6628046972443458,1.532013639503376,0.03776939749363106,0.15384644085670107,0.7267123493593812,1.9999642814894119,1.7014948151352094,0.11871958870201882,0.2880929026944423,0.526442933020703,1.9784326954196727,1.838218791500999,0.24082229796085708,0.002894508042687427,0.34828687072569553,1.9112119409045516,1.1388682696094252,0.3983757828027483,0.009841572241419017,0.20056338808677665,1.8014409772106843,1.3483726310359683,0.5840228813689401,0.06302535298208123,0.9283946933181876,1.6542457001448023,1.5416092860625978,0.04092780907387927,0.15996236547497145,0.7157898211259588,1.4764995817808775,1.7095548014754973,0.12415146738556448,0.2961260117097073,0.516456507414202,1.9760201087097187,1.8443667462323812,0.24827399521233418,0.002094290675830335,0.3397028766861021,1.9064679748839692,1.9397499038290573,0.4074993320706295,0.01149729642045949,0.1937826662150285,1.7945871574515726,1.3590107938330853,0.5943922468295337,0.06705970254488636,0.9170553662551937,1.6456020745430817,1.5511348739532882,0.8002255353557001,0.1661869512992179,0.704904056270173,1.466469775509689,1.7175230049274175,0.12969663951442123,0.3042501687843442,0.5065326295042409,1.9734812710822933,1.8504054797751393,0.2558229303146963,0.47480231614994994,0.3312042939171149,1.9016067547079996,1.943577181062032,0.4166995229489253,0.01328088617535883,0.18710623079922883,1.7876305556321896,1.3696025175848394,0.604814078781867,0.0712147305316796,0.08096728385058016,1.6368749385162116,1.5605891710141415,0.8113823475848503,0.1725193931619402,0.694056462896005,1.4563796300747829,1.725398394781676,0.13535438780514109,0.31246432303602456,0.49667258297204697,1.254573090016565,1.856334211002283,0.26346812679217835,0.4845146123324483,0.3227922217340681,1.896628909189002,1.94728240396052,0.42597516536734015,0.015192110793818214,0.18053494545488002,1.7805720716083424,1.99399603124806,1.6259189147133761,0.07548989947802698,0.07654363993432156,1.6280654209435264,1.569970954305521,1.778846819506024,0.17895887194415916,0.6832484441698479,1.446230450664554,1.7331799523346778,1.8954054740721171,0.32076741194103486,0.48687764324208094,1.2435581777061913,1.8621521730159272,1.251907531036669,0.4942935879845145,0.3144677482619104,1.8915350822251487,1.9508650932436271,1.4539262081744773,0.01723072305361406,0.17406966019603054,1.7734126184145835,1.9951761495338103,1.6347482193748686,0.07988465637892661,0.07223944766835455,1.619174661360642,1.5792790102676464,1.7859298491252251,0.1855045546813725,0.6724813981390043,1.4360235501036056,1.7408666710202954,1.9004114775049876,0.3291583614717164,0.4771490773170578,1.232511760467672,1.8678586132464936,1.2628976218832748,0.5041379781684313,0.3062319502944537,1.886325932717134,1.9543247854805235,1.4640307755651287,0.7022725073565086,0.1677112113253223,1.7661531221461102,1.9962275390148942,1.6434954175875858,0.0843984327603422,0.06805526381192795,1.610203809812055,1.5885121348775737,1.7929112165310817,0.19215559467130028,0.011917669919393137,1.4257602486829324,1.748457556540074,1.9053010102072632,0.3376360862353941,0.467488143614056,1.2214352671858215,1.8734527935500562,1.2738537061908066,0.5140465094849302,0.2980858931550867,1.0067700821473096,1.9576610331503892,1.474075319283494,0.7131491536595256,0.16146042132581317,1.758794521838968,1.9971500636911566,1.652159377877094,0.08903064475273625,0.0639916296008688,1.6011540267023805,1.9900758942912602,1.7997900186642892,0.19891113158340912,0.010230948103281956,1.415441873989138,1.7559516269918447,1.9100734397042802,0.3461994896147751,0.45789609180173774,1.2103301306358731,1.8789339903038234,1.977859815337911,0.5240179002379084,0.29003063055897194,0.9953967523221785,1.7034558360232608,1.4840585400398874,0.7240629049178655,0.15531809875458658,1.7513377693485879,1.5343446923514166,1.660738979536017,0.9369931458297633,0.060049070677572036,1.5920264826462507,1.340281638577807,1.8065653657326475,0.20577029157019777,0.008672255668708773,1.4050697607327058,1.9327282554619285,1.9147281486690009,0.35484746390979904,0.0035867599374640458,1.1991977872981467,1.8334880214369167,1.9801765285994897,0.5340508606002203,0.28206720447674527,0.9840240179399461,1.695326996245676,1.4939791464769192,0.7350123494074285,0.14928503813816218,0.7695962675351584,1.5246967859946867,0.6683709205909454,0.09864796356993744,0.05622809702300713,0.5659275146498841,1.3295651869917817,0.8787848623478427,0.2127321873802318,0.007241794236878207,0.3825283326748097,1.1190441192878717,1.0948591002786574,0.36357889048092207,0.004613607957875354,0.22796278141418191,1.8895546118361999,1.3065037709725043,0.5441440927805197,0.04846626471197146,0.10944849733953266,1.9669248734009446,1.5038358553365365,0.745996070787096,0.1367520085006244,0.03251965680618896,1.9991433390152311,1.6776406788362732,0.9597090877408831,0.2653482233910588,1.5735428442934034,1.9847055261434767,1.819802202530382,1.1753035404701127,0.42824994434983643,1.3841696919564823,1.9242856269578845,1.9236820119086786,1.3827119697486687,0.6178502667796659,1.1768572435907407,1.8207050260710775,1.984429306163936,1.5722491732047774,0.8252955606768201,0.9612862196162422,1.678800552366376,1.9992074125512405,1.7350644682560683,0.13754981010816225,0.7475229852233788,1.505198617075333,0.6899144126937452,1.863554986073743,0.04895286674305288,0.5455494885515841,1.3080057850144018,0.9013933399086891,1.9517206972846133,0.004766287907142619,0.3647971408304088,1.0964302281533358,1.1174768314680572,1.9954445910309289,0.007053422518461083,0.2137064045470437,1.899714982793513,1.3280745918509222,1.992684924067789,0.05570746989567055,0.09933265523513934,1.9724760605864269,1.5233524887828858,1.9435705625801876,0.1484564669527323,0.027016721673725708,1.9998261226301408,1.694191770643779,0.9824458759443951,0.2809693804264308,0.00013548904380700222,1.9804880227320178,1.8326148782590463,1.1976508073378722,0.44705835002424865,0.019944210947799856,1.9153647782460315,1.9321579672475933,1.4036261810192037,0.41101216684434805,0.08551789373412666,1.8074974025203236,1.988172745517729,1.5907537129840006,0.25115228613637786,0.19379449026103324,1.6619229008822556,1.998043531222561,1.7502952433478554,0.12626080897708414,0.7255803331052884,1.4854390612203867,1.9613093953754897,1.8748007759189491,0.04216970292441513,0.5254065926031919,1.2862870225685472,1.8796856855198554,1.9584563653164162,0.0028057099271884267,0.3473945993884956,1.798829540349842,1.756983925377411,1.9973556065997113,0.010006982078187066,0.19985685158330702,1.9094098462567226,1.5989338308641696,1.9896820498528518,0.06343724674683748,0.08968281337160044,1.9775240941035848,1.5425983425820744,1.9357940216407852,0.16060150926058292,0.022017202641205436,1.9999916018077726,1.7103836915163113,1.8382078924912921,0.29696255987812636,1.9751789754662852e-5,1.975763220307884,1.844996763711963,1.2198958107846696,0.4661528446121369,0.024717659971595474,1.9059703249235396,1.940151629273914,1.4243315583638023,0.6602718063218717,0.09495762671705721,1.7938719843351234,1.9914049098263082,1.6089526001000771,0.23627205167999155,0.20745970677568493,1.6447027741956854,1.9963632677594165,1.765137819882046,0.11542387561089973,0.35697047136252824,1.4654283419134027,1.9547951661960692,1.8855939487411804,0.035882115138070936,0.5055092486262798,1.2644201368202928,1.8686416809028197,1.9646961333917234,0.0013610746890841963,0.3303297123265658,1.0510644946187455,1.7419258592697915,1.9987505959623761,0.013472758481876013,0.18642128820412385,1.9186341861577603,1.5805648589577919,1.9861671196870894,0.07165159592221282,0.08050396452306163,1.9820663621281434,1.3920936386392802,1.9275333061146063,0.17318085164729302,0.017523686431780483,1.9996396909301266,1.7262080638446782,1.8255871363012115,0.3133194869646515,0.00042139871669233386,1.9705335634573924,1.8569414525709327,1.6850891172769442,0.485523548728922,0.029995714616984803,1.8961071276279533,1.9476588621116693,1.4448173889361666,0.6817517476191748,0.10486562355609919,1.7798358212305496,1.994124126785959,1.6268364185507194,0.8928409564476117,0.22153497920018628,1.6271490819037884,1.9941674915207135,1.7795845183926526,0.10504461697825096,0.37455575649101724,0.006070731560666287,1.947786931344077,1.8959289202132557,0.030093356546733285,0.5567824541570043,0.0529127319895949,1.8571482459440827,1.9704367730894727,0.00043312963901265267,0.3136113089216298,0.14398018596598894,1.7264839248770327,1.9996288373592386,0.017448958556223193,0.17340666589475373,0.27502058203546076,1.5618955060442883,1.9821419521756876,0.0803462673635299,0.0718008577745195,0.6062644574172318,1.371068656561647,1.9187926900496077,0.18618798563155015,0.013538497965575824,0.41798228532745774,1.1629142806852,1.8125392259497208,0.330031698703523,0.0013402220147492594,0.25687817620343967,1.8684427647208235,1.6683432015320045,0.505160440080761,0.03577564404804923,0.1304750928544418,1.9546757815606257,1.4929380349248769,0.7033963487802146,0.11523675790916865,0.044675589226365275,1.9963289894890532,1.6443959153484018,0.9154825450319292,0.23601302506740007,0.0034861830818978534,1.9914573385887828,1.7936278642387613,1.1315153921413756,0.39246464296889483,0.008830266519759822,1.9402883168409824,1.9058003430788064,0.024806422221683055,0.5772859028435798,0.06045829071608044,1.845211327282534,1.9756753142348291,2.2354890546805173e-5,0.7818463391374801,0.15595941892649245,1.7106661117695214,1.9999898763931174,0.021933525037575063,0.16081971834790354,0.29087410359708077,1.542935431542316,1.9776086299177775,0.089516762496471,0.06357799606467252,0.45890233065173536,1.3498516856389242,1.909576695791598,0.19961618139506487,0.01006369915678873,0.3996372960856993,1.14043116698572,1.799070912352573,0.3470905482899681,0.002775746289895742,0.24185057411715272,1.879494749447132,1.6512514887570093,0.5250533586500261,0.04205445776166605,0.11946661105894019,1.9611987571059524,1.4730210424008439,0.7251944110095502,0.12606566380942463,0.03820028288501098,1.9980183571519743,1.6616220053078063,0.9381678624741877,0.2508863535174648,0.0018464249215535133,1.9882342111815758,1.8072605914718671,1.1540286448303416,0.4106878648385791,0.012102627148856904,1.9323032024279405,1.9152031099189175,0.020024047593135363,0.5980080614370177,0.06848996306194377,1.8328371010130478,1.980409046435938,0.00012896297624120923,0.8040997867064312,0.16837535375740065,1.6944806039951874,1.9998335262644382,0.026924137636345824,0.1486669579797527,0.3070945229267178,1.523694445288255,1.972569498428911,0.09915833655820505,0.055839633856125004,0.4781698012151705,1.328453703413062,1.8998900916444008,0.21345849126454108,0.0071010878468654726,0.3816029311451885,1.117875394986792,1.7851891639398074,0.36448720957073244,0.004727228809910389,0.22721523429852608,0.9017927439498044,1.6338228221084434,0.5451920119520408,0.04882890713477828,0.10891371230829083,1.9672244137966275,1.4528593114381751,0.7471346561118433,0.1373467384415915,0.03222260633165164,1.9991913557053531,1.2507489549406794,0.9608851715181703,0.2661472691735244,0.0007231058317492822,1.9844997769271648,1.8204756465952372,1.1764622039609625,0.4292159935071165,0.015886120346891963,1.9238357195584355,1.9241323557946772,1.3837991076767016,0.6189382084084962,0.07700359348488706,1.8200319694910057,1.9846355204862651,0.0007528987376693719,0.8264545919487885,0.1812215665235556,1.6779357758451212,1.9991598678678821,0.032418214237522,1.0420749006936378,0.3236734476702373,1.5041825024606523,1.9670271649275035,0.109266001052301,0.0485897749341524,0.4977072638014455,1.306885781080245,1.8897378894027614,0.22770775330636284,0.004652196874308734,0.6951962828714966,1.095258634918546,1.7709011630503206,0.38221268161068267,0.007193659888664605,0.21297972899043072,0.8791832647379189,1.6160662190808373,0.5655659803603539,0.05609548710521417,0.09882185661321585,0.6687495868211042,1.432463273603574,0.7692057323271334,0.1490741450408234,0.026745652382663798,1.9998473782463064,1.228665901420609,1.8497750969619775,0.2817878761232727,0.00011680701149241468,1.9802559680009222,1.0141906819655429,1.716688740663312,0.4480394426244827,0.020178788555670013,1.9148902492606905,1.9325834607642691,1.5501356852770516,0.6400655146171718,0.08599477708020176,1.8068025580197544,1.9883525496318029,1.3578933391402834,0.8488991886134961,0.19449141066640496,1.661040187520764,1.9979692497505313,1.7510728494276515,1.0647887086133216,0.34060229998481173,1.4844096984294688,1.9609844969858743,1.8753704118678085,1.2776528368462428,0.517504609836819,1.2851590777627175,1.8791253417592721,1.9587914312537937,0.002718293281594897,0.7169376601868536,1.0725925885659986,1.7562143022157672,1.9974404561923182,0.010173763408529157,0.9295886692016071,0.8566362954283393,1.5979908668411689,1.9895127209402375,0.06385043798518641,0.08919626544334203,0.647374554177378,1.411843481692808,1.935378421253497,0.16124181591261388,0.021772254783352096,0.4545791099622156,1.2064645374435685,1.8375654276219517,0.297800082004254,2.7842156397284157e-5,1.9755049801258227,0.9914444670612625,1.7006412431177074,0.4671484730435074,0.024978410772696913,1.9054714198709464,0.7768239082523208,1.530999717986517,0.6613790489131153,0.0954588618598422,1.7931557114227106,1.9915582107024852,1.3365624806176744,0.8714219639919194,0.20817802044289435,1.6438025807049077,1.9962622879315326,1.1264090269558542,1.0874689952179564,0.35787232097704724,1.4643862635327913,1.95444462104658,1.8861400104601995,1.2994315496322821,0.5375515962853087,1.2632848347351167,1.8680579395866577,1.965005449382675,1.4974117641543958,0.7388254923718096,1.0498889832146123,1.741136180335703,1.998808722318715,0.013665997480630021,0.9522952667527761,0.8341635016967337,1.5796061174754736,1.9859713421241245,0.07208974740653407,1.1679926747800604,0.6261819679647787,1.39101060427075,1.9270927667165039,0.1738434555721875,0.01730498674178571,0.4356563462373305,1.184156349870962,1.824922406619659,0.31417560219080665,0.00045625729638187895,0.2714834745544683,0.9687026787418177,1.6842312377161854,0.4865331978588535,0.03028250370031338,1.8955841046387887,0.7547104761322235,1.5115890144152524,0.6828677837930279,0.10539095115933816,1.7790984905018874,0.5521723821458856,1.31505748655219,0.8940112649261949,0.22227431447776425,1.6262318740387958,1.9940398655833733,1.1038139456498584,1.1101040258542516,0.3754745752347868,1.4441225577837136,1.9474109208048112,0.8877226795314948,1.321055338211222,0.5578378509483799,1.241274369608299,1.8565414090968306,1.9707201790956366,1.5170145601602467,0.7608484547845542,1.0271595655826664,1.725674598745958,1.9996602104050578,1.6888311247364567,0.9750265464658023,0.8117765108407414,1.5609214831501266,1.9819198272565868,0.08080915239669884,1.1903708055600246,0.6051827931087436,1.3699754201515233,1.9183274395733085,0.1868725440017478,1.3968254559534825,0.41702557075883495,1.161752880834124,1.8118525753833712,0.33090596408048156,0.001401830771851742,0.2560910863873678,0.9459770834811411,1.6674672149036525,0.5061835875224472,0.03608832303053888,0.1298943819584345,0.7327239554382657,1.4919136175525949,0.7045206011058103,0.11578590617130102,1.7646381683846752,0.5319516247752845,1.2933894835073423,0.916655403838509,0.2367729994274137,1.6083371585076696,0.35303541273582995,1.0811651515896943,1.1326820892841023,0.39339995545024187,1.4236290655101227,1.9398870354576878,0.8651507089161031,1.342513014555935,0.5783528778314637,1.2191390704736726,1.8445817088781782,0.6554332266812981,1.5363498557277167,0.7829951528676536,1.0044160957435693,1.7098375571822693,1.9999944798961788,1.7051411531245235,0.9977707473038473,0.7894869057640743,1.5419466311903025,1.9773602725687305,1.841004980830573,1.212650439551182,0.4598925248572019,1.3487488128216043,1.9090869749550934,0.20032234002389815,1.4176001470401154,0.6533015759847427,1.1392657217624846,1.7983626961705845,0.3479825114777194,1.6030494805633688,0.862900154270089,0.9232794393749676,1.6503578482916406,0.5260894750327099,0.04239286486496219,1.0789007855272068,0.7108757218731401,1.4719837073387079,0.7263262978050303,0.12663834860421475,1.2912170435031565,0.5119730330131669,1.2715696823865752,0.9393426647781852,0.25166657375343593,0.001775623735006504,0.3358593887189891,1.0584743631345854,1.1551915037439167,0.41163918713206304,0.012285876457858946,0.1907586412773863,0.8426485085688238,1.3637934765848334,0.5990860625745258,0.06891870580520121,1.8321850268126252,0.6341703835206733,1.555407646883148,0.805254128043531,0.1690295692431396,1.6936332496412612,0.44277514117654415,1.7210863454284329,1.0205161015447546,0.3079436617245406,1.5226913790781549,1.9722950371486192,1.8530929930966633,1.234820049395661,0.47917421170085317,1.3273417648087658,1.8993761538265095,1.9452633703258218,1.4381587741490405,0.6747253892315137,1.1167065073862301,1.7844597485692666,0.3653964090725177,1.6210371135007131,0.885465681508624,0.9006214900572612,1.6329119901706304,0.5462405611949076,1.7749153290601225,1.1015543005483481,0.6891770795905531,1.4518095953975376,0.748273591745318,0.13794266346513318,1.3129007113954934,0.4922469436710396,1.2496093726328077,0.9620613094834517,0.26694733160387174,1.5096358225829345,0.31902698733554025,1.0357533203714204,1.1776206229886956,0.4301828334039096,0.016095766741259565,0.17760593840372352,0.8202277210021142,1.3848857139060249,0.6200266779438763,0.07745715697684086,0.07458763396792711,0.6130968185551358,1.5741780732321118,0.8276138636430705,0.18189786738465707,1.677070060140919,0.42403285593124496,1.7366584516949726,1.0432508408696033,0.32454090516518663,1.5031656893733059,0.26186441712575614,1.8647396198250576,1.2568681646614681,0.49872537089098323,1.30576535199978,1.8892000005120326,1.9524406633573683,1.4584907003617105,0.6963174977405067,1.0940869097165573,1.7701509258866563,1.9956662696868155,1.6387034253130568,0.9080904681622064,0.8780149586241249,1.6151386669299246,0.5666264199498969,1.789091075405009,1.1241552719430439,0.6676392553465191,1.4314017197016364,0.7703511275196835,1.9026311066145365,1.3344224862118557,0.472783562917071,1.227519916387339,0.984799583454752,0.28260736680017473,1.5290734139685909,0.3025469175757052,1.0130137790404978,1.1999578423177348,0.44902129988703643,1.6990185807220965,0.1648787376124985,0.7978999466059151,1.405778813514026,0.6411638893823812,0.08647292664964101,0.06620761509449158,0.5922234351291962,1.5926514230611208,0.8500627908642772,0.1951894469885903,0.011141124521723555,0.4055885728611335,1.751849415003557,1.065963202451571,0.341487627359237,1.4833796645582737,0.2467105138433534,1.8759388351163024,1.278783377777224,0.5185358867673048,1.2840307379098164,0.12300827262301928,1.959125168922928,1.478585406053352,0.7180667298756851,1.071418632006641,1.7554436314274864,1.9975239239739917,1.6560392755495918,0.9307628082929101,0.8554715415683358,1.5970470743874459,1.9893420211994322,1.802858550446031,1.146692006095249,0.6462733926907,1.4107706391716148,0.7925474823347411,1.9121873165717975,1.3557712327064655,0.4535929609954773,1.205312742611139,1.0075457220364576,1.9789203271022204,1.5482372657324301,0.2864277061352969,0.9902675044531707,1.2221916045788317,0.4681448396643719,1.7151026571410979,0.1525836238861341,0.7756767376456741,1.4264619654360913,0.662486760615201,1.8485754136645978,0.058310735172194095,0.5715610330145577,1.3354539013954239,0.8725892947579107,0.20889743106607928,0.008011233330277312,0.38745183493499025,1.125241369529624,1.0886414350419542,0.35877506016752236,1.463343541811505,0.23194635832301003,0.9091805314333018,1.300554349934378,0.5385955094798331,1.2621491679065007,0.112306130668821,0.6973606247949009,1.4984324943357623,0.7399618327061279,1.0487134026964362,1.7403454746635565,0.49967285157424135,1.6730356947384786,0.9534709713589065,0.8330029027276458,1.5786465730318704,0.32534849565273183,1.8162106309686945,1.169152842624909,0.6250905462007951,1.3899270282130143,1.9266509429641192,1.921271565919298,1.37693590515743,0.434685067016234,1.18299934117157,1.824256534126229,1.9833125446110054,1.5671174626048583,0.2706776930040544,0.967526265404542,1.6833724102510188,0.4875435583235185,1.7308167434495436,0.1407269586476253,0.753569592285267,1.5105773360273094,0.683984259308158,1.8603896000133542,0.05090108000248761,0.5511203028223745,1.3139401988601285,0.8951817202369945,0.2230147271829206,0.005394591572020713,0.3696320259994611,1.1026432218341162,1.1112738050501985,0.3763942591691094,0.006332477144062598,0.21757958945611988,0.8865531880407767,1.3221698169538432,0.5588938602921018,1.2401319633916263,0.10206327655193326,0.6757606984990355,1.5180216964365978,0.7619914778282333,1.0259829693444493,0.02847726953691787,0.48010897861088453,1.689683889027601,0.9762032082837803,0.8106206672499767,1.5599466831795659,0.30873423613843687,1.8291404086813028,1.1915261604209735,0.6041016757629636,1.3688816711934302,0.16963903427562688,1.9298791545172926,1.3979055530817353,0.4160696638178104,1.160591256897592,1.8111648001115237,1.9871960017153114,1.585704236077734,0.255305027150579,0.944801828084355,1.6665903035950458,1.998414466651449,1.7461527092671696,0.1293148764691746,0.7315899486379135,1.4908885187044307,0.7056452627758047,1.8717586256008536,0.0439824832994663,0.5309118204719891,1.2922640654238648,0.9178283781070931,1.9566566558681302,0.0032925530827476734,0.35213836592390624,1.079991967110387,1.1338486026147923,0.3943361082890944,0.009145154249280085,0.20361764052844733,0.8639845413935087,1.343618595114021,0.5794204369510618,0.061266992088253924,0.09228500986772104,0.6543285318021743,1.5373428770123827,0.784144267226971,1.0032390925496162,0.023339293788547377,0.46081409435084164,1.7059752447344563,0.9989477575354367,0.7883364155786345,8.48107029050027e-10,0.29247763365959034,1.8416411937892678,1.2138003836540956,0.5833176409012419,1.3476454568627398,0.15717983646142375,1.9380056288476397,1.418669326900966,0.39775638290558357,1.138100083606533,0.0612386067628351,1.9905686891361776,1.6039879694585402,0.24031766230610319,0.9221059499892323,1.6494633068485947,1.9968758752020617,1.761102619851136,0.11835328189819871,0.7097491788481607,1.4709457184107264,1.9566326649101171,1.8826766081569184,0.03755852470632315,0.5109460417190114,1.2704367161966965,0.9405175511142353,1.96303288121088,0.0017062054454017872,0.3349799058300923,1.0572993249907932,1.1563541476618844,1.9984190998767744,0.012470494103353102,0.19006773537418675,0.8414862683828991,1.3648895869371942,0.6001646191208893,0.06934873842827449,0.08297638983661271,0.6330752135873559,1.5563860393924767,0.8064087391731517,0.16968493591942757,0.018706636820715605,0.4417981818591862,1.7219013328028256,1.0216928512114525,0.7661616774606522,0.00025963479680513046,0.27658709929128555,1.8537065184563737,1.2359639877658999,0.5627491951588868,0.028496790161793406,0.14515670908042644,1.9456467843180256,1.4392164835548156,0.37975469946855145,1.1155374581055133,0.05364432170825684,1.9934288618640181,1.6219592028460061,0.22572335284927514,0.8994503738394142,0.006323225364203822,1.9948215057568957,1.7756587402014192,1.1027251566630252,0.6880585832079995,1.450759253439398,1.9497596847055905,1.8931378987785097,1.3140184036203983,0.4912332967455688,1.2484694445268905,1.8603476181848877,1.9689108387334364,1.5106481588474505,0.31816552340919224,1.0345770365212994,1.1787787959484883,1.9994392455419514,1.6834325439686944,0.17693688463839186,0.8190700094894235,1.3859717869313015,1.9832975561299944,1.824303170720439,0.07414223268648834,0.6120117402024157,1.5751413307512974,0.8287733741536614,1.926681904679338,0.014581695544196971,0.4230710798625609,1.7374539131639213,1.0444267211277214,1.985788039678304,0.0010365288123687089,0.2610708547070246,1.8653301401511977,1.258005505431725,0.49974417242474456,0.03413924140789504,0.1335758728314178,1.9527986674373963,1.4595363920594862,0.6974391333181409,0.11234405974935735,0.04653967578246598,1.9957750400614793,1.6396086380246078,0.9092625615731873,0.8768468215031393,0.004026530306804443,1.9922524212351984,1.7898135390628578,1.1253230907836622,0.6665293843101567,0.008021642207421409,1.9423953041584188,1.9031370848524385,1.3355314976849428,0.4717837848155284,1.226373616157802,1.848531830798377,1.9742874872134917,1.5300718313623587,0.30170391832851795,1.0118368580867252,1.7150450763173104,1.9999422869378893,1.6998597816570022,0.16423188214970663,0.7967473627599126,1.406854287284117,1.9789035002792508,1.8369668826689471,0.06578710916079034,0.5911490097705372,1.593599047206117,1.9121535603390374,1.9349907426317305,0.010966604180510209,0.40464247765867545,1.7526249389997521,1.0671376049072483,1.9893540117997113,0.0023302809341843034,0.24593692792487165,1.8765060448769622,1.2799135324937527,1.9975181276597143,0.04028142360211184,0.12244331957422583,1.9594575778614736,1.4796185390080998,0.7191961901426938,0.12304785494801807,0.039928344889481715,1.9976060098290995,1.6569271432754122,0.9319370433024287,0.2467646904059142,0.0022451463456265586,1.9891699508669154,1.8035596928217814,1.14785618343888,0.6451727212415882,0.011153389184726192,1.9345433335578601,1.9126689928558207,1.3568709896314086,0.45260756899745413,0.06623709159266777,1.8362770177940027,1.979160044803229,1.5492212476798808,0.2856036077303603,0.9890905553280579,1.6989596751052902,1.9999279637937872,1.715924915813177,0.15195930140527625,0.7745298778067875,1.5290035147626795,1.974002965238876,1.8491975526389959,0.05791534215364591,0.5704978165516241,1.611749638837796,1.9025956501654915,1.9428158216094076,0.007863233157683891,0.38652191010311854,1.767406560906501,1.789040474650064,1.992408097695345,0.004140221782148679,0.23119314915380063,1.8872284502831418,1.3016767338614568,1.9956586060189987,0.046920158813770096,0.11176480922956855,1.9656200703072906,1.4994525340102758,1.9524155599290969,0.13420538027599616,0.03381374969488782,1.998920823833373,1.673905758100779,0.9546467404243437,0.26191999090812157,0.0009799951587566857,1.9855756895049552,1.8168900892952073,1.1703127761327141,0.42410019331720994,0.014796759861376185,1.9262078354695356,1.92172869103283,1.378025838526154,0.43371457095803234,0.07461885227059128,1.823589519743392,1.9835259904686349,1.5680864999992423,0.2698729218252688,0.17765280312721365,1.6825126360712264,1.9993962835203591,1.7316196344267631,0.1401254921696573,0.7524290498323551,1.5095649503075743,1.96859848651826,1.8609888525504286,0.050531004473226226,0.5500688453574107,0.03194754744419581,1.8925707420566746,1.9501530929603232,0.005273188142507879,0.36871875267607634,1.7817911309557644,1.7748632630827883,1.9949487171982647,0.006465414903001787,0.21684714674238925,1.8974918086572203,1.6209725511539337,1.9932839361907637,0.05405201219844513,0.10154586679890332,1.971282956335763,1.5190281150680618,1.9452364890201639,0.14581086289216405,0.028199053855998857,0.4791038970447882,1.6905356978604695,1.8530500127985774,0.2774571698741213,0.00023173132833476107,0.30788420565271224,1.8297978314106442,1.192681249949851,0.4428435401523736,0.018949869177784517,0.16898374813300732,1.9303114919463598,1.3989850989688186,0.6342470452459055,0.08347939997263709,0.0688886593322161,1.9873830652938702,1.5866578275445298,0.25451999958204563,0.19080703458632386,0.012273007680577819,1.9983475212060018,1.7469358171382336,0.12873657718948417,0.33592097159431655,0.001780533577473986,1.9626928603644294,1.8723346816506972,0.04363791673449824,0.5298726660231998,0.037901196545874094,1.8820840228439073,1.9569987604213654,0.003197809209769864,0.3512422166315122,0.11894829594459166,1.760285141602075,1.9969745558061653,0.009304657254843085,0.20290634323195422,0.8628185623008566,1.6029837714677608,1.9903953468158813,0.061673293775130866,0.09179177950582251,0.6532243158013746,1.4175253014803948,1.9375683580447056,0.15785829818480135,0.02308716238500208,0.4598232042229591,1.7068083583167726,1.8409604134241433,0.2933681884545174,7.420018767190228e-7,0.29164634028884173,1.8422762407745992,1.7050827447186214,0.4618751566200401,0.023610568338446436,0.15654695815694908,1.9384129549032771,1.4197379267554113,0.6555105538833721,0.09281415030103923,0.06083369658801241,1.9907292736500177,1.6049256216148624,0.8652323272510187,0.20437993795462706,0.008976008974943994,1.9967822194744635,1.761865539440417,0.11779844902559489,0.3530982238878482,0.003395456489639681,1.956289142315288,1.8832291696713566,0.03723964538245972,0.5320244171761354,0.04435263018114444,1.8711409182969891,1.9633492820825231,0.0016381701489084355,0.3341013442313149,0.1299349823427044,1.7453136528463475,1.9984845653614953,0.01265647982957796,0.18937795151616954,0.2561461353776119,1.584683011354665,1.986994332434319,0.06978006033541528,0.08250759406047303,0.6319805519757917,1.3967498474534281,1.9294151344507506,0.170341452878348,0.018480720145920504,0.44082199585052095,1.1902899410426269,1.8284357058407985,0.3096448143773908,0.0002871466919665,0.2757749731420479,1.8543188611279406,1.6887714104152562,0.48118519586841724,0.028776445923713978,0.14454656606178773,1.9460288882520125,1.5169440514104369,0.6769522994312757,0.10261827350824804,0.053264653230290504,1.9935628842276114,1.6228804305558793,0.8878045293153134,0.21836449068792263,0.006191760532983648,1.9947011882040955,1.776401076778594,1.1038958704667061,0.37061017953798503,0.005526017012086215,1.949390645618696,1.8936666798653088,0.03133950084688086,0.5522460325347632,0.05129851041436917,1.8597470903169366,1.9692013722194481,0.0005950779084405999,0.754790330780126,0.14137183550898536,1.7299565429800539,1.999477964593766,0.016519148412975082,0.17626897110915607,0.27153990296352704,1.566079739525453,1.983082652711874,0.07836811748367412,0.07369811404841708,0.6109271993518753,1.3757691172770077,1.9207810366705322,0.18325386825846535,0.014382110486174549,0.4221101030462877,1.1679114745986308,1.8154823702621146,0.3262786262076308,0.0010907972144212907,0.26027831596882,1.8659194616863308,1.6721037096409481,0.5007636669913256,0.03444482913745117,0.13298878078319643,1.9531553515512972,1.4973403050856269,0.6985611880505335,0.11288669699581477,0.04618544543970049,1.9958824309324055,1.640512964649973,0.9104347806878968,0.23275345725693342,0.00392170290924998,1.9921055041088245,1.7905349085471383,1.765842164457248,0.3884477779569325,0.008171112804729264,1.9420009395182163,1.903641811923225,0.025940535829506395,0.5726993132889393,0.058735243486009336,1.8479084340065461,1.974552002993473,6.907217845053548e-5,0.7769042017165264,0.15325293807964735,1.7142217576858467,1.999954239523777,1.7007000130363905,0.16358618452397233,0.28731057172460406,1.547183581208799,1.9786623315297307,1.8376104266916728,0.06536789744528393,0.45464815144060966,1.3545939662634439,1.9116705319378948,1.9354075481850357,0.010793454003451775,0.4036972072388182,1.1454461316979054,1.8021071086713865,1.9895246156142028,0.002411277764960862,0.2451643866528055,0.9295065036426529,1.6550882661707464,1.9974345631716681,0.040612785189923395,0.12187958225455997,1.9597886576089252,1.4774792376718446,1.9587680257206785,0.12361410793892547,0.03959973595871302,1.997686713643923,1.277573704343038,1.8753305867735879,0.2475393928909284,0.002167010618846388,1.9889965101810665,1.8042597219806353,1.751018464456131,0.40660179007115127,0.011329375309817258,1.934123847406406,1.913149404767635,1.591636572609549,0.5933736770257305,0.0666589816720159,1.8356310746203013,1.9793984060181966,1.5502044687599335,0.7991335011697238,0.1655721428387491,1.6981174380535293,1.999913143729547,1.7167461826737949,1.0142730438605856,0.30344998200513473,1.5280043131712064,1.9737356559373174,1.8498185151717772,0.05752125425849852,0.47385411679898914,1.3332353503173,1.9020883339769727,1.9432074831732025,0.00771660744852154,0.6688273077956356,1.1229055357830715,1.7883168413540664,1.9925521691515695,0.004247905134342367,0.2304410050564012,0.90683648976818,1.637733883699824,1.9955483597663952,0.04727712281520702,0.11122471831299063,0.6951178332403435,1.4573711251741572,1.9520561440576971,0.13479495603522684,0.03351093219653656,1.9989747988363922,1.2556508358975655,1.8641064467675443,0.26271464742960493,0.0009285915297383429,1.9853758149968705,1.0419926032558282,1.7358061917068657,0.4250628230964275,0.014999170460014755,1.9257634448466154,1.9221845392232386,1.573146523685615,0.6142584269451065,0.0750656252746208,1.8229213643952016,1.983738073791831,1.383723044329007,0.821466727824655,0.1783230758987301,1.6816519163679027,1.9993546984738093,1.7324215118497361,1.037011868615329,0.3199497833646131,1.508551858658563,1.9683051749689984,1.8615869123107287],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],15:[function(require,module,exports){
module.exports={"expected":[1.9959748854655721,0.0026102364802336187,0.855965596064149,1.5733189007340576,1.2850650224454898,0.9676033190281177,1.9394774013049965,1.7830938406662682,1.5464743122423388,1.2538629051500614,0.9352406487550393,0.07526809996758865,1.6437503511161946,0.47380908823222456,1.9740176930998965,0.9029459641744406,1.9153180957360578,1.6682035327641902,1.4910928197833815,0.017560780453510727,0.8707531689072262,1.9017904670489352,1.703941280536664,0.544821496099295,0.014758659652610362,0.8552362947316172,1.894910210848065,1.7149804798140975,0.558824673043474,0.009730451580384436,0.8068082904887138,1.8719102508677197,1.7372551378195307,0.5881297101497995,0.005741848749667433,0.7751233379796512,1.8555890322361845,1.7587558102905914,0.6333872757126284,0.002797038477352576,0.7436744655933214,1.8383695987257713,1.7794599253812273,0.6480057349851942,3.990314144930451e-5,0.7285651292123793,1.8105820686815832,1.7891771112081494,0.6627105664520144,2.2655044604191765e-5,0.7135223973978102,1.8013093203097807,1.7987006491108715,0.7093594950167859,0.00025078093839714377,0.666806816791301,1.7918399470177717,1.8456318863951806,0.7243830851440591,0.002557608024220004,0.6208956472892209,1.760885001330196,1.8538891163490658,0.7394743060257959,0.003799576519771808,0.606447309245466,1.7506274118786815,1.8619368193760681,0.7872126931873541,0.00528599222667081,0.5617661014294887,1.7401856338108306,1.8858010526327305,0.8354648017607168,0.011530600547910774,0.5477400066372922,1.6821736296823295,1.8929615442867442,0.8509356205935874,0.01402374781438298,0.5044763402493646,1.670636486289904,1.913994236872954,0.8333487462499216,0.023411396794277062,0.4909313727758823,1.658934782418445,1.920237456122903,0.9821340187116196,0.026900808939949727,0.4775113203329261,1.6470713894267792,1.9493943438731494,0.9977978254879689,0.030628999726960315,0.4642194759269219,1.6350492183489376,1.9541977511880966,1.0134621726329083,0.03459505433353227,0.45105910110466496,1.569137980954651,1.9587670178885106,1.0291232164359887,0.038797999570972075,0.38395511053044273,1.5561884598490994,1.9631010227697863,1.0447771139973336,0.06483945634133081,0.3716918965514058,1.5431024614697089,1.9671987023557571,1.0604200241706079,0.0972599980868799,0.35958285653188027,1.5298831968528699,1.9710590511596515,1.1425843768797967,0.10410924700549862,0.29838859714044863,1.5165339097357813,1.9874563917723655,1.1580709524424324,0.11117832919368786,0.28731305939560625,1.503057875760505,1.9898084789444108,1.1735187406259333,0.11846551004324357,0.27641240045134263,1.4300229385098153,1.9919176873575806,1.188923950858991,0.1259690014290099,0.22192152147684385,1.4158283347644325,1.9937834994552648,1.2042828030180552,0.1336869621476493,0.2121773023950173,1.3393617449744046,1.9954054574053308,1.2195915283548986,0.17786114275163933,0.2026263988919904,1.324585565920982,1.9967831632124668,1.29934957401864,0.18687938793818715,0.19327115456416422,1.3097297402075474,1.9975973737970478,1.3142586604571924,0.19609715629439306,0.1841138649971794,1.294797913149925,1.9963897958912855,1.3290906342471451,0.20551218596840826,0.13918180768939292,1.2797937487131144,1.9949377243060593,1.466125129232743,0.2583354131632465,0.10012171796425862,1.3286415726775425,1.9987811689835406,1.420158790080114,0.22492474040989485,0.12366286112940439,1.2495831514090794,1.9913015852382192,1.493609661671331,0.2797108571666934,0.0869014613989344,1.035726259420322,1.9967449403717241,1.4483779390552458,0.24509799865602722,0.10900400265433785,1.0869097055870967,1.9866925253112602,1.5206097369646325,0.40361595466440625,0.07457737268793918,1.004404338344444,1.9937304484764127,1.4761570239205528,0.3632512040753403,0.09521961931793532,1.0556611956763364,1.9811150681238638,1.5470988556730805,0.42905267864014474,0.06316154740658042,0.9730780945955173,1.9166547195004942,1.5034687806713016,0.38771701081578114,0.08232323991332868,1.0243580566404709,1.9359383395145437,1.5730510198395293,0.45504976342502657,0.052665189707767346,0.9417782735656955,1.903685158868836,1.5302864039656687,0.4127837475867311,0.02946926977041331,0.993031011195349,1.924447728873265,1.5984407585051583,0.4815816939725307,0.012893708274344995,0.9105355947143444,1.889828669219579,1.6625129215139978,0.43842681243915904,0.02239706855433421,0.9617108055199561,1.9120498116242097,1.722065832451995,0.5086224303074904,0.008364136392845278,0.8793807214181817,1.8750988501151717,1.7766932583124546,0.5821699210635589,0.01628434354418762,0.930428179080331,1.8987567558022942,1.7433824670099969,0.5361454330832349,0.004807813450639742,0.717744915029619,1.8595101582542326,1.7960426861793062,0.6108339564246628,0.00011986695131249725,0.7672947842293332,1.884581607983336,1.763969502907785,0.6881771290434363,0.002228229829287054,0.6878327081739568,1.8430778932829073,1.8146108315932032,0.767647363806275,0.00012554544890341912,0.7369445316591123,1.8695382804793903,1.783806734834534,0.7180927097737562,0.0006279172817375001,0.6582268804003771,1.7431399431020709,1.8323794706995111,0.7982284742542205,0.001112558716678369,0.581840593298252,1.7764648658437996,1.802874693380513,0.7482849706658784,8.4464475238466e-6,0.6289564885850327,1.7218149873791697,1.849331164325447,0.8290076149778134,0.02247342720112766,0.5535915487982627,1.756344439730602,1.8211546641454972,0.7787242792841818,0.012951799725772317,0.600050260387776,1.699781600571215,1.8654492750958958,0.8599545775435338,0.02955669178204079,0.5257806354385122,1.6384452855371359,1.9038403280904008,0.8093807607260808,0.018461355311232608,0.5715365660571673,1.6770614075216865,1.93606594318658,0.8910389888077743,0.03759240569948008,0.3874304316095536,1.614022628902585,1.9619062972337766,0.8402243269429874,0.024934249839825506,0.4287550950703872,1.6536767071455367,1.9466272781818916,0.9222303407268048,0.04657268223783395,0.36297171997090305,1.5889973348542277,1.969997702634597,1.138223656252433,0.03236413043751174,0.4033250022676883,1.6296504505437412,1.9562595382735932,1.0872708445167745,0.05648870763296143,0.3391382248261209,1.5633939646668038,1.97713709604205,1.1691795306113273,0.04074370498863067,0.3784805209076151,1.4932943547407505,1.964953269803077,0.9848113396108893,0.12383754220118148,0.3159533377493936,1.5372376469724975,1.998798996304681,1.1999693623685366,0.10027988537398791,0.17522066538152314,1.579768198226001,1.9949740894307975,1.1494786986151584,0.21505215442632197,0.20529208922086195,1.6207741685121575,1.9885327600549707,1.098594959871414,0.18432353012054215,0.23745330784211705,1.437857225011681,1.979491946547055,1.3100744093151193,0.1557398403339303,0.11627787901499442,1.483369371870383,1.9678754229813191,1.2609302149950627,0.12937624984709784,0.1414315801912931,1.2840194646078507,1.9992916315798106,1.2110998684493333,0.25538830454807315,0.16884300622385418,1.071406904511881,1.9960485627876383,1.1607144054921965,0.2221492934297954,0.1984400749623546,1.1224453017455107,1.9901862460166608,1.3689976383676357,0.19095574873465504,0.08870613800649407,1.173161712058931,1.9817200970427016,1.3208669507901436,0.16188969821907573,0.11101226331129976,1.2234227696101854,1.9574340403034212,1.2718924990190958,0.29864695780047135,0.13565610528926442,1.0088085912522544,1.970972404123329,1.2222030681746234,0.26302801862376324,0.16257285953656442,1.0600581661704889,1.981957461205001,1.4264726001421633,0.22934704958703855,0.06471110574549588,1.1111498098028103,1.9184061548085332,1.3795443259359987,0.19769261947436023,0.08408210656597581,1.161949169579156,1.937480310757086,1.3316179872320624,0.34465832964973864,0.10586164064553161,0.9461757054286074,1.9540892320766683,1.7327371689111333,0.3067992620737918,0.1299924356756148,0.9974353101794079,1.9681892433028283,1.6968885790563029,0.2707630620763475,0.044386959582867536,1.0487016591381515,1.8918297153016774,1.6592074239327297,0.43478799045046945,0.06074680728438253,1.0998399403228651,1.9138470940903605,1.6197927913691443,0.3932418315030608,0.07957655165410982,0.8837540728935545,1.9334613850743338,1.773911524722363,0.5781725213165841,0.10082667726506678,0.9348225202591067,1.9506210097523735,1.7404293420904975,0.532248078695996,0.027813469123559975,0.9860623608563277,1.861752961267273,1.7050000977086595,0.7330472053229391,0.04109795345207201,1.0373388524106608,1.8866271475754142,1.6677169576936477,0.6839954143173079,0.05690400383782901,0.8217886903582914,1.909169824707194,1.812048379420382,0.6357746012411326,0.007488749865009581,0.8724655433884179,1.9293217135634597,1.781064017181809,0.5885115694169665,0.004420080489819345,0.9234777659780093,1.828293940015565,1.7480257386737366,0.7939166786343382,0.000914547158060941,0.7110661437513531,1.8559273059281023,1.7130204226362564,0.7440248872839372,3.6247729121696715e-5,0.7605227638126747,1.881309892159996,1.8469980508582022,0.694806218029842,0.0215544199522385,0.8106091225135442,1.7592183056713182,1.8186331185661913,0.6463900981959598,0.012254811804573107,0.8611935108201914,1.7915839738115054,1.7881154768368148,0.8555950019215623,0.005552616759452511,0.4160601190644019,1.8218680619957337,1.901947077753427,0.805059028956215,0.001465459169223915,0.4584431573898192,1.8499909340097358,1.8786233661646263,0.7550356803381821,0.03640548088991402,0.5022502946180502,1.7169743189904196,1.852989192453861,0.9690379542611385,0.02396631328344645,0.5473663337999406,1.751767144452107,1.8251119652397358,0.9178400958646101,0.014093761760459178,0.3663729406694475,1.5925509219461325,1.927218447474742,0.8668582883423919,0.00681378756580342,0.406865196102805,1.6330659795406581,1.9068002001297557,0.8162265954352459,0.055038523786742455,0.44891718184882823,1.4519870381374411,1.8839973957660607,1.0316867226088904,0.03950861882095702,0.4924183163728558,1.4971207387442012,1.8588699975234793,0.9804076566430783,0.026504459288478777,0.31917266528161303,1.5409471913523958,1.998573515780969,0.9291801114641584,0.09836626216714273,0.35761521103732086,1.5833511482203981,1.9945234206600106,0.8781387970141775,0.07738041639603455,0.39774699677887515,1.3952432270264234,1.9878580881332093,1.0942111247311452,0.0588207269087101,0.24031001651399664,1.441812674427522,1.9785950456178025,1.043052114796577,0.042735998985346524,0.2746445477839886,1.4872203140636797,1.999957316263254,0.9917798933491597,0.12721798221822833,0.31088650191779665,1.2882396710105544,1.9991161912870443,1.206792736590636,0.10334346972298403,0.3489405756654995,1.3369481381482056,1.9956477515770064,1.4121491280193292,0.08182684005830942,0.20108126693640926,1.3847705533775674,1.989561117876887,1.364900533754275,0.06272467418909478,0.23296335519082267,1.431581161018535,1.997416415582312,1.316692382876011,0.15949525708522583,0.2668624727916399,1.2277136064731387,1.9997875620559356,1.2676514454100836,0.13282578219245766,0.302689477302863,1.2773305720719819,1.9995296283330868,1.4683926255432387,0.2600581717426227,0.16498816848110742,1.3262182584293314,1.982780805990218,1.4224847375685514,0.22654783730191153,0.19429268070993955,1.3742481085867582,1.990960786439673,1.3754658673222213,0.38077635212164285,0.22571591219243237,1.166293795931096,1.9965348979245732,1.5658099735206568,0.3413379456917941,0.25917523117886687,1.2166245199162953,1.9994884825449069,1.5227977435159226,0.30363158257681566,0.03162959417628031,1.2663855996520592,1.9692819021935475,1.4784107442637977,0.4740693411104111,0.04569385509932622,1.3154461814708154,1.9806157663320418,1.432765697541131,0.4311601326084368,0.06226759651817959,1.1042213040758477,1.98937096517257,1.616330407109633,0.38974676751068293,0.009539507536753922,1.155068244964624,1.9955244757042823,1.5751509489932043,0.34993814801015544,0.01790569181323476,1.2055074123749026,1.9519786942059243,1.5324590516073067,0.528359797896327,0.028854429418757266,0.7262062940756555,1.9664219581049496,1.4883669792230976,0.48377653488111283,0.04235692912775779,0.7758705841354875,1.9783238812952901,1.664431824780255,0.44055075313552705,0.0028546447746334858,0.826124253610567,1.9876531660175543,1.6252467625180174,0.3987961208537715,0.008036380652284514,0.876835153500215,1.9309390948466378,1.5844175270897685,0.584501380545033,0.015826622582846728,0.6665182998140049,1.8307536297658973,1.5420514846384519,0.5384190464697427,0.026204885043632276,0.715285435346014,1.858196470645428,1.709925434784301,0.49355050359375474,0.03914387695267041,1.0303738166219607,1.7278832868362914,1.8446485070768617,0.6906149696041171,0.002060396443809953,0.8149355870807671,1.906245681780491,1.634082240517515,0.9021265660450237,0.011576984451302397,0.6081391774365321,1.7942676128739699,1.7853968418067885,0.594873202691379,0.06724925170388252,0.9165310693612274,1.9447687642618925,1.9000363311851807,0.8007410787079017,0.0012367895955188724,0.7044014052377136,1.8523028834427069,1.9726474708007462,0.5033899829582815,0.03523724816658602,0.50607509626733,1.9733607773023478,1.850682169151272,0.7014501294831036,0.11428853965104102,0.8037708591478402,1.9013790526520746,1.943751276954111,0.9134514447640891,0.013366483676265584,0.5977009424506573,1.787306278139557,1.7923859421236963,0.6052974291164853,0.07140984926017968,0.41041689573905016,1.9409802494627777,1.9049347091271451,0.8118990514332848,0.1728149217989874,0.6935556116303407,1.846299048489926,1.9752263903331402,0.5132937002106526,0.0382921645439509,0.49621803343572535,1.2540642673146305,1.8566057931195266,0.7123239076187504,0.1196256529236821,0.32240519970013315,1.5446462422816256,1.9474508420284045,0.9247875187796519,0.015283606692513718,0.587314745967535,1.351760701360454,1.994053459835174,0.6157727114176517,0.07569056253688033,0.40126884467355173,1.1424492437542006,1.9097160312459154,0.823081355539878,0.17925933194451404,0.682749457457484,1.445759553432835,1.9776791616177438,1.0386514424631343,0.04147148050640859,0.4864261362035964,1.2430478661569992,1.8624186127443796,0.7232348974575924,0.12507664506833094,0.31408480459701404,1.5350727414077525,1.9510278516993842,0.936133321738988,0.24953747678794758,0.5769819314705864,1.3410916568088092,1.9952276265022273,0.6262976945879583,0.08009083781180815,0.392198241149353,1.1311828602310998,1.9143796790641683,0.8342865445655234,0.1858099071796977,0.23579663277563212,1.4355500146461224,1.9800054673817646,1.5527307710815876,0.04477478480059094,0.4767006711801023,1.2320000260814423,1.999868644651909,1.2634051998206273,0.1306408109839826,0.3058531345334248,1.0176164990213814,1.954481843270894,1.4644967596319338,0.2571026784678908,0.5667038355381249,1.3303784911020466,1.9962730577059251,1.643898048060747,0.08461010589710982,0.3832062584742648,1.1198995078399263,1.9915420251185405,1.3713801253125424,0.1924658001694004,0.22851065551097327,1.4252841362528148,1.9822050067110784,1.562172951572469,0.3380303386516055,0.4670428963812113,1.2209221761568207,1.999619642741223,1.7267143915080503,0.13631743093029025,0.2977112542987981,1.0062439719624834,1.9578123699595111,1.4745384952163827,0.2647639759839685,0.1611738850875255,1.3196225900179677,1.9971896182168318,1.6525581306482682,0.42754330928730055,0.3742940597862723,1.1086006461137157,1.9900018194842284,1.3819158608778483,0.1992261499553396,0.010156018762271568,0.8925074558817452,1.9842774950891502,1.571542413427453,0.34659767871196,0.002727494425873278,1.209815749333854,1.9992413372476574,1.7344800606256612,0.14210577062066465,0.02991422827768131,0.9948706372284343,1.967544324767088,1.4845188479257638,0.2725203783260246,0.000411717884127083,0.7801650472902362,1.9979771894752942,1.6611338030254235,0.4369055791348667,0.059869630510586136,1.0972877365916784,1.9883335543592429,1.8068762680368322,0.2060900820674555,0.008603253837840219,0.8812071527994625,1.9325384175029785,1.580837944680572,0.3552495381810894,0.0036314185716221914,1.1986821822597624,1.9987337771060807,1.7421507227032622,0.5345164432722402,0.02721599580735179,0.9834979659917352,1.9646077363104264,1.868807821760822,0.2803708821818286,0.00015004213828540003,0.7690843333469094,1.9986356696067786,1.6696239559051231,0.4463406868129478,0.019773363427736057,1.0859622426301467,1.764921799479012,1.8135424363805865,0.21305670863702586,0.007178728841730431,0.8699222159025833,1.6086864941348487,1.5900583429289878,0.3639847979168921,0.004664225766421448,0.659956337981014,1.8268542360834052,1.7497253855193653,0.5446124320278258,0.024643595655368,0.9721274293390629,1.6867258627754664,1.8743830405584805,0.2883144720668579,1.7699767225098917e-5,0.758033488987737,1.5145299453563912,1.6780274910624629,0.45584741186410627,0.02208725873419537,1.074625629213285,1.7575466161441824,1.820103370745985,0.6487902540243041,0.005882628040214888,0.8586541049291032,1.5996235439949507,1.92388347267796,0.37280232798920965,0.0058257824137861736,0.6492829083314238,1.820404311953984,1.7572030692702536,0.5547673264327404,0.05219317578099558,0.9607604980809791,1.6784141156081702,1.8798451554763038,0.7575230350755834,1.4707889800180673e-5,0.7470139436701931,1.504744502835607,1.6863433214767816,0.465424524566998,0.02452764977541466,0.5450808973280717,1.750073442046189,1.826558222457907,1.1870061011056032,0.09459152299423379,0.8474042774405373,1.5904830308807951,1.9281759281157538,0.8694005826363878,0.007115938263131172,0.6386548449137388,1.403319257962112,1.7645828066967222,1.0854380569207172,0.055880750951810554,0.4467788874199652,1.6700146136868919,1.8851934599745257,1.2974858916595053,0.00014106689301829345,0.7360271228031334,1.4948937702086016,1.9644688703798705,0.9829719186113477,0.027094220880021003,0.5349821547918063,1.2966632279891703,1.8329061565633191,1.1981665222254252,0.09947845687377554,0.836174188633381,1.5812661371431922,1.9323483214139934,1.4041074861598624,0.008534526429206601,0.628073522497542,1.3928860633355091,1.9882532867145428,1.096764097585102,0.05969045057511502,0.43734043980352433,1.6615284435105824,1.8904272622350744,1.308324898274035,0.15475533401438346,0.7250744475624151,1.4849790216950562,1.967411239285508,1.505488072760273,0.029786640054898617,0.14237622433094743,1.285782883024675,1.8391463519392772,1.2093013099540704,0.10448187572120671,0.05191882355171196,1.5719740550129995,1.9364001128619934,1.4144845034932294,0.2209944776893602,0.19954138998439208,1.3824020478031531,1.9899274706410828,1.1080776215441552,0.06362178185565959,0.08946517177255997,1.1749732869732292,1.8955458852510605,1.3191240222048584,0.1608875810393654,0.021907544095385645,1.4750015397952856,1.9702284708548938,1.5152685177332605,0.032604559028134084,0.13658273461182446,1.2748655712488837,1.9996049947920316,1.2204090239757561,0.10960113233037416,0.04836315614458098,1.0618944026489516,1.9403307783492534,1.4248079061024974,0.2281760216874409,0.19277622919591197,1.3718685675016316,1.9914736046941792,1.6093698387183455,0.06767423626480173,0.08482203241713826,1.1637642692962331,1.9005486669143514,1.3298818665552399,0.1671283695911152,0.01960324351479592,1.464962615124342,1.9546386368572097,1.5249823112894099,0.3054745109147796,0.13090093031899874,1.2639127048464596,1.8683808986976265,1.2314882274767591,0.11483556451118793,0.04493058561175023,1.050539052646365,1.9801100143981296,1.435076358626807,0.2354574032652178,0.0035584310051509638,1.3612869849659381,1.9145925568032678,1.618348041717668,0.07184728960628495,0.08029727387890062,1.152534068255223,1.806367027838455,1.3405970397680718,0.17347689240626463,0.017425759983248357,0.9366583777749915,1.9511903469071639,1.53462819692249,0.31370205079594515,0.12533154640966893,1.252925700601155,1.8626848137522147,1.703694205365922,0.12018449517527707,0.04162155596577166,1.039177165276661,1.733895107802026,1.4452885328132457,0.24283768055571875,0.002664275001928673,1.3506586689532236,1.9099343671893045,1.6272462596768396,0.8933640631203088,0.07589148144795688,1.141284136507959,1.7995886169385145,1.7799139187112725,0.5868355730287957,0.015375375164297989,0.9253121602714237,1.9476190178384407,1.5442049269103477,0.7921168577443634,0.0008375774042455042,1.2419059797125476,1.856877138125163,1.7117293516257297,1.0071055121624524,0.03843649523883941,1.0278102102315925,1.7261222824718232,1.4554431076886605,0.6930548451896008,0.0018991271504693596,0.8124158073487479,1.9051584750324622,1.6360633415866017,0.9046792643448128,0.011969358254750095,1.1300159292644225,1.7927067770255984,1.7869817827176753,0.5972193297019437,0.013452354280927614,0.9139756038477923,1.6432386203160911,1.5537112624763059,0.8032549938159687,0.0013675899838889727,0.7019522978384343,1.8509586230554778,1.7196724337130553,1.0184779180965953,0.03537581542742296,1.0164396578584305,1.718255531203476,1.852027578492042,0.7038988360280232,0.0012630864247770157,0.8012566772156993,1.5520125769719701,1.64479814693287,0.9160067955717657,0.013787657351470584,0.5953542706937991,1.7857223982848527,1.7939478484401956,1.1320369254225244,0.011656946081240571,0.4083473150021123,1.6344889842742405,1.9060231378249028,0.8144185794016946,0.0020267784451112325,0.24896833956147002,1.8449300341195554,1.7275224241681242,1.0298479338606057,0.03899824916086092,0.49400423210816435,1.7102958715831549,1.8579262825660545,0.714781128376099,0.0007562350984898769,0.3205212644020371,1.542493533172478,1.653449545844263,0.9273451915534769,0.015733525759489164,0.1787674269172529,1.778636384165106,1.8008112147988444,1.1433019641088427,0.009989382806284475,0.39921662532022095,1.6256572753163963,1.9107779779441896,0.8256061704606759,0.0028150575200502903,0.24150760541330096,1.443462298299311,1.7352783075728233,1.0412140887113002,0.04220556088421512,0.48422720498674277,1.7022443332149853,1.8637140114876805,1.2548974622791182,0.0003786387342373798,0.3122207831510787,1.5329043163246299,1.9750354435830744,0.9386929856368699,0.017806711775311346,0.17233109314474593,1.7714496512620057,1.9954746173199422,1.1545484662872723,0.08109955896150245,0.39016364863991426,1.616744635848692,1.9926467889141297,1.363187108270866,0.0037323252426139097,0.2341449843673693,1.4332399393873219,1.9805125420887137,1.0525749124049146,0.04553676598395395,0.11388890139222407,1.694101957587863,1.9998237882295866,1.265878452060377,0.13191109045672267,0.30400926805601225,1.5232461668203126,1.9724469814364474,0.9500487099531973,0.02000694722655627,0.16600182064886715,1.3279567258219713,1.9964909994940219,1.1657749771914563,0.08564557960936114,0.06693898688545541,1.6077522187458484,1.99120590321443,1.373760169450939,0.004778462961669394,0.22688142879919881,1.4229615396834014,1.9396351771842948,1.0639289353872856,0.04899143355942659,0.10867506394142201,1.218420129555877,1.9995456250490395,1.2768250497238824,0.5167501503939018,0.29588778129916893,1.5135203339680445,1.9697327305663064,1.4767944636487447,0.2665047694655047,0.15978042813862892,1.317191379991973,1.8946369236448795,1.176980044640964,0.42964807083897105,0.06290820451698387,1.5986811872020446,1.989636802272475,1.384284883712863,0.6194246863755638,0.21971787826991773,1.412628428727158,1.9356827631895546,1.5736450477292743,0.34854132562249174,0.10357652185178956,1.2073074570438174,1.9991381678600075,1.2877358392967602,0.5267384011614324,0.029294808394531135,1.503728075831374,1.9668930420685555,1.486760795897999,0.7270350334806089,0.15366772036846776,1.3063850045741816,1.8894976067314992,1.1881622192291355,0.43902687165429255,0.05899863758032464,1.0947348929363276,1.9879396890558392,1.3947598896555566,0.6299666226717671,0.008270819179800548,1.4022419431352517,1.9316093160252508,1.5829237412016541,0.3572120899047464,0.09859393463393618,0.6682532146560572,1.8317762522481023,1.2986094094380134,0.5367878696339308,0.02662492111868553,0.47333675646109397,1.963928283264805,1.4966641642835756,0.737993933335956,0.1476644880341461,0.7665897168668097,1.8842432308270833,1.671526549568139,0.44847823590503766,0.055210791788841806,0.5631451463174308,1.9861147830908399,1.4051838323078476,0.6405564238151861,0.006875238244015813,0.8673797440221951,1.927415362603111,1.5921270318657457,0.849419290094933,0.09372794679938579,0.6575455972702473,1.8254090933978682,1.309444353621081,0.5468972558846805,0.024080942618341594,0.46370279766402356,1.9608388376548578,1.5065032877772118,0.7489867244052282,5.7293335979924365e-6,0.7555458057325363,1.8788744755997793,1.6799104018932662,0.458000941030936,0.05154515711093077,0.5529428856939462,1.7558699437445675,1.4155553633037423,0.6511927199855698,0.005608120760179025,0.3712158704527472,1.9231014454226827,1.9248618740961252,0.8606725018311119,0.08897918777720748,0.6468822773145322,1.8189351655841661,1.9849679093153356,0.5570652522364343,0.021663201964198575,0.45413821040267055,1.6765276588310352,1.8810611574791645,0.760011984740306,3.190654535201176e-5,0.7445335154286439,1.873392035513017,1.9621042533639463,0.4675937552435764,0.025095402577909764,1.0607196048442842,1.748374805923676,1.998220658327888,0.6618741353484061,0.09568331799905905,0.8448701253438594,1.5884112558278836,1.6103026527915711,0.8719437359669482,0.20849945964908356,0.636264634119026,1.4009710881696051,1.7662333001316508,1.0879930879217667,0.019372011897739072,0.44464423188301694,1.1948070617575557,1.8863837016949274,1.299933489884514,0.00018743241305518854,0.27895687885457565,1.8677966197356803,1.9651432805234728,1.4978681132118008,0.027690381900097205,1.0493635101471486,1.7407828637387994,1.9988342571638507,1.6725541470401835,0.1005965748911567,0.8336446884076638,1.5791773027038647,1.619272631986153,1.8158344031828775,0.21550156328482262,0.6256940411054264,1.3905263153796656,1.7734917039714413,1.099316433959206,0.36703971141242875,0.4352220901776075,1.9508264566024047,1.8915915897119377,1.3107636252368076,0.5481347512709588,0.2711231674375252,1.8620889520503734,1.9680574637135257,1.50769931083128,0.030411132177468825,0.1410600823537056,1.7330950992287886,1.4463421054273469,1.68092732655662,0.10562617211946634,0.05110629734286787,1.5698684313838038,1.6281625065422594,1.8223585682496237,0.22260514397672715,0.6151718656093591,1.3800310269239386,1.7806500545065798,1.1106269331395002,0.37588556476521584,0.4258730040666948,1.1724475867021025,1.8966841478753862,1.3215535624492751,0.5583098088275228,0.26338373826733996,1.8562697707597962,1.9708464259763985,1.5174648361318996,0.03325730147340411,0.13529171268640972,1.7253125068273794,1.9996737862044882,1.6892124262282442,0.11077145909158836,0.047578348591482356,1.5604858459961144,1.636971126529874,1.8287763589468204,0.22980928285686442,0.6046994687035095,1.3694865803971958,1.7877074257845023,1.9296395176165184,0.3848121490572043,0.4165981828805875,1.1612336654781934,1.901660717448701,1.3323019058135082,0.5685420002396048,0.255739592460723,1.8503398285912445,1.667075351984713,1.5271634259157838,0.7724193355774739,0.1296351954426902,1.7174360932345587,1.4914554851078197,1.6974083743543542,0.11603177025033284,0.044173598231438516,1.5510307602043294,1.9795978156487832,1.8350869451153788,0.23711304804982014,0.0033455396165393836,1.3588943397529425,1.9135524482563924,1.9337700609201982,0.39381830960987196,0.4073988263432189,1.1499988882309176,1.804847578695409,1.3430072650013782,0.5788300019447679,0.2481917188092092,0.9340990464191108,1.65855932014097,1.5367938256433513,0.7835087670127893,0.12409126230879564,1.7094668772863464,1.4815187902754312,1.70551411076625,0.12140642515981126,0.040892486676671114,1.5415043970501112,1.2819931234950075,1.8412895104634144,0.24451549479323909,0.002480465349261829,1.3482556751269854,1.908867663645897,1.9377798184676762,0.40290288145128594,0.3982761244169606,1.1387447082099795,1.7980457675851147,1.3536682552448802,0.5891724831613585,0.2407410936512624,0.9227548793600207,1.6499581018162983,1.5463547895955942,0.7946262021916191,0.11866063040790631,1.7014058898230047,1.4715198096473814,1.7135285869643666,0.12689472859345252,0.03773543834809168,1.5319079887950466,1.271063295776385,1.8473832526718375,0.25201566556003274,0.0017444230100372993,1.3375719626602027,1.9040653144735944,1.941668271585654,0.41206468946679464,0.38923125714869644,1.1274725811748871,1.7911407270337025,1.99198088393379,0.5995681060606466,0.23338868074598274,0.9114207041722698,1.6412728096022258,1.555845081035216,0.8057702030427814,0.11334400220737295,1.693254173555697,1.4614598366196438,1.721450766253903,1.0210421092737623,0.034702861618688075,1.522242776761252,1.2600984052660444,1.8533673834981328,0.2596125901822385,0.001137507807991045,1.326844584320537,1.8991460219367158,1.9454349172918985,0.4213025485510328,0.014215317981056685,1.1161839652066448,1.7841333502273857,1.9933541561722696,0.6100155259398776,0.2261354311484426,0.0787526984917376,1.6325045669654732,1.5652634723666057,0.8169393280587507,0.10814206542785032,0.016698806577460923,1.4513401724777277,1.7292796238789188,1.0324113828220849,0.03179514876070033,0.4917937590409803,1.2490998703030898,1.859241128878324,0.26730528597651304,0.0006597982492934085,0.3186417984736396,1.0352275304959409,1.9490792683603049,0.4306152637612173,0.01618991898161448,0.17730673219745685,1.7770245435898566,1.9945989352859954,0.6205133913962134,0.21898228308666412,0.0743883822344894,1.6236545081026286,1.9936745304808365,0.8281321324821207,0.10305549295433858,0.01469265281258203,1.4411621262283547,1.7370141471548917,1.043776463867834,0.029012675894879325,0.48203166634007666,1.2380691135786293,1.865003729027098,1.2573765971794602,0.00031135612700539106,0.3103612856724587,1.0238591586161052,1.952600853383919,0.44000163047171714,0.018291778554242577,0.17089446845163736,1.7698152266650387,1.9957150602593243,0.63106034450154,0.08211432431180543,0.07014379641611479,1.6147237777934373,1.9923330765180833,0.8393471684924882,0.09808494274914392,0.012813951295319481,1.4309270144301336,1.7446533355997098,1.0551358823061452,0.02635580294183415,0.0015820236678201205,1.2270075619517455,1.8706544385360875,1.268349955446138,9.222651308526952e-5,0.30216997955834357,1.0124877004876989,1.9559992168359175,0.4494604345298747,0.020520624817555344,0.16458945181384832,0.7973847098480339,1.9967023867183848,0.6416550209781196,0.08668706762011258,0.0660194900856026,1.6057135312527206,1.9908632615100714,0.8505829853937321,0.09323105776676899,0.011062945040943184,1.4206361610232616,1.9387545066446497,1.0664881687646286,0.023824873575475802,0.0022860829703120755,1.2159166462649271,1.876192526470291,1.279288601899221,2.4377525585927984e-6,0.29406893969953785,1.0011146270404792,1.9592739191285296,1.4790472958965335,0.718571547572455,0.15839249785553955,0.7862605588781282,1.9975607869497516,0.6522960503750633,0.93128767660843,0.06201599673345515,1.5966249339809446,1.9892652755814622,0.8618381298016651,1.147212415630976,0.009439860546985535,1.4102908971582682,1.9347747545566096,1.077831854793436,0.35048925759671534,0.003119199344758905,1.2047978011589862,1.8816172764626211,1.2901911215943462,0.5289992491592809,0.04334916450070858,0.9897414094131498,1.9624245366698996,1.4889995421306685,0.7295032243078434,0.15230440816995272,0.7751640556998004,1.9982901499169656,0.662982056245603,0.9426383930033783,0.058133834222679925,0.5710857045032283,1.9875393254361835,0.8731111458320335,1.1584521354389723,0.007944907763943188,1.3998925610238262,1.9306740867524501,1.089165473055208,0.35917886965888834,0.004081265025238645,1.1936524648874824,1.8303498290514237,1.3010561042602482,0.539062342840432,0.04672332375499999,0.978369518763064,1.9654506619188798,1.4988885349130703,0.7404698905540006,0.14632597026843264,0.7640966356766199,1.9988903812748973,1.6734247261681108,0.9539965292818375,0.05437350472180247,0.560839562466378,1.98568563433069,0.8844005752888391,1.1696713590222538,0.006578280068119113,1.389442497673655,1.9264530336649641,1.1004875575148796,1.377423167241604,0.005172155565878245,1.1824820791306816,1.823958521464589,1.3118821444811797,0.549185060090395,0.050220792000475245,0.967000426075927,1.9683519034377475,1.5087129950749993,0.7514701277421258,0.1396205855696966,0.7530597304101689,1.9993614033819496,1.6817888405150234,0.9653606162372687,0.05073549463990901,0.5506502270543718,1.9837044420450853,0.8957049578529617,1.1808686351430249,0.005340154236609496,0.3692236871288812,1.9221121412991158,1.1117966436293147,1.3879307613714196,0.006391729856949913,1.1712880888090704,1.8174606325498033,1.985407687843602,0.5593660915075207,0.053841116829882796,0.9556356019755199,1.9711278859428374,1.998966308931558,0.7625025129609233,0.14547260523056083,0.742054767554861,1.9997031553101021,1.9658769181800704,0.9767291838933961,0.047220274563729014,0.5405190162861039,1.9815960048521057,1.8294344169981305,1.1920425154024556,0.004230690424436356,0.36043931831629084,1.917651971161415,1.930072567505567,1.3983881755775824,0.007739830143124959,1.1600719418964516,1.810857002827082,1.9872797877077115,0.5696041201470601,0.05758382994413003,0.9442765165334699,1.6661980277391795,1.9983847131536991,0.7735656191406604,0.15143516038821603,0.7310831706332701,1.999915592852792,1.962868785120329,0.9881007616943531,0.04382829919676268,0.5304472406618835,1.97936059548397,1.8823904653761077,1.2031915544280363,0.0032500321438316826,0.3517376784578693,1.9130731001872814,1.9341906354345026,1.4087940571644606,0.009216282043879476,1.148835089232644,1.804148486494309,1.9890241801835336,1.5953073975857937,0.061448447212859025,0.9329246390790932,1.6576731288140063,1.99767397353454,0.7846580152377622,0.1575074797695577,0.7201463588519936,1.999998688530632,1.9597361023034243,0.9994738786949022,0.29290778010172946,0.5204362029939191,1.9769985030971013,1.876982123999714,1.2143143100605391,0.0023983062456733872,0.34311989313495017,1.90837612066642,1.9381878632047527,1.4191470601023095,0.010820894576050732,0.19647744157147162,1.7973359513167422,1.990640639629047,1.6044072010907948,0.06543446873707037,0.9215814380093323,1.6490631580392185,1.9968341820102284,0.795778266419922,0.16368877790317393,0.709245746918074,1.4704815289080178,1.9564792749505977,1.0108470637507065,0.30099571120788104,0.5104871982377952,1.9745100332347243,1.8714603425448084,1.2254093435405669,0.0016756229030768788,0.3345870770820495,1.9035616401662037,1.745747452782124,1.4294458452013852,0.012553460178541975,0.18975926500106566,0.8409668208875607,1.9921289569507232,1.6134288228421791,0.06954137891378609,0.9102483805988155,0.6325858397043649,1.9958654472101351,1.7687669555720338,0.16997825522094756,0.6983827448560032,0.44136173352907704,1.9530987243415316,1.0222188457086256,0.30917406046422136,0.5006015133249664,1.258961723740495,1.8658258352691903,1.2364752196946596,0.4806288681566634,0.32614033404267206,1.0454155799068547,1.7381220993770685,1.439689080285172,0.014413754739170503,0.18314589532475278,0.8297486973753737,1.9934889396305748,1.6223710958680646,0.07376864650274484,0.07829550571570076,0.622031917574593,1.994767894442803,1.775990695642728,0.1763750981614829,0.687558757825331,0.4319648416990325,1.9495948877598557,1.033587753597014,0.3174417699785125,0.49078042699628976,0.26842289540265096,1.8600793310120576,1.2475105071209391,0.49038137295495854,0.31778075662653826,1.0340512250325442,1.730401267824155,1.4498754403627037,0.01640153762365737,0.17663818800030695,0.8185525963430161,1.566616181522082,1.6312328634605477,0.07811572469511885,0.07394355421522825,0.6115268866682244,1.9935416656797367,1.7831140591572427,0.1828784792753423,0.6767751859389051,0.42264142679764083,1.9459682184365832,1.8984267404039628,0.3257977702995185,0.48102520963661544,0.26071646531178616,1.8542215730997287,1.2585137783742637,0.5001997983410069,0.30950942616825305,1.0226824655375062,1.722585956834432,1.4600036077999536,0.6979406372271584,0.17023698481778216,0.8073799660373168,1.557208263415923,1.640012979325327,0.08258205118424522,0.06971139069337162,0.6010721058402442,1.9921869195370396,1.790136124688682,0.18948755733207878,0.38793292028241344,0.4133926948345682,1.942219185491485,1.9033628512542182,0.3342409805553418,0.47133712311045894,0.25310566360366993,1.8482533192494932,1.269483610150873,0.5100828742741583,0.037290260452158996,0.12769582045761674,1.714677177340128,1.470072272490276,0.7088020759430782,0.11788658997378765,0.7962322516691008,1.547728268870097,1.6487103077299787,0.0871670482383623,0.23967433548885997,0.5906689274456494,1.355202487043469,1.7970559839133258,0.1962014774290517,0.39696646216557796,0.4042198421590345,1.938348273872407,1.9081821096054705,0.3427703085932372,0.002366315494247262,0.2455914747566852,1.842175341471597,1.9768995079737097,0.5200293223510352,0.040429377092926155,0.12219118011583507,1.7066759523638813,1.4800801320238701,0.719701181920922,0.12330081849174723,0.7851108952262476,1.5381774241482833,1.6573237236508676,0.9324619539670662,0.2471108515457442,0.5803186971645191,1.3445480115085235,1.8038727417281244,0.20301937110201063,0.406078008115194,0.3951240553050628,1.9343559842925395,1.9128838920732383,0.3513846511208847,0.5927791131285911,0.23817487075207233,1.8359884259693815,1.979266759337399,0.530037855970896,0.04369261686439485,0.11680008678797871,1.6985833168864117,1.4900258918562526,0.730636545330998,0.12882845048881975,0.036667454475800776,1.5285569646788275,1.6658521129186723,0.9438135063606944,0.25464475590938407,0.5700227538279464,1.3338489677293608,1.8105855163664824,0.2099403564374337,0.41526637952743395,0.38610651083799763,1.1235514654482461,1.9174675904688745,0.36008289384910297,0.6031928888126477,0.23085681094820099,1.8296933730375864,1.9815073398203222,0.5401071805020619,0.04707955765741856,0.1115232378269736,1.690400317712641,1.4999082654757077,0.7416067516536142,0.1344687709504221,0.03367822558148392,1.5188681348949375,1.6742943723625048,0.9551723266336503,0.2622750740482822,0.559782429244857,1.3231067396570708,1.8171934395123177,0.21696353818660574,0.42453038786088315,0.37716837520231283,1.1122574611921436,1.9219326118782338,1.378512866704034,0.6136579926009098,0.22363824195647386,1.8232909969588278,1.983620959597158,1.5685194028205949,0.050589761361779395,0.1063613158079193,1.682128013336287,1.9993778662268546,1.7319781969396373,0.14022105028540488,0.030813993098105952,1.5091121880737113,1.6826494099526101,1.8612563312188346,0.27000081895955097,0.5495990480297361,1.312322716828752,1.8236956564123807,1.9503169975251016,0.4338688347902805,0.3683108045707293,1.1009489361210065,1.9262783787383704,1.3890153307486512,0.6241730708030766,0.21652009751888057,1.8167821258982708,1.9856073452653058,1.5778389828274446,0.8320270268474828,0.10131498843979536,1.6737674738029438,1.9989121138789476,1.7396797031784843,0.14608454442042673,0.028075127522110388,1.4992903861740223,1.6909161449416228,1.8669801319873893,0.2778209912965841,0.0002205439186221403,1.3014982941877702,1.8300913259868183,1.9537958126121784,0.4432805123615253,0.35953494469465985,1.0896273530240261,1.9305043289122459,1.3994674745775482,0.6347367632645174,0.20950329838721493,0.8735711477651651,1.9874662398802507,1.5870838177536535,0.8432494490436507,0.09638490847909142,1.6653197805716684,1.9983171494689884,1.7472855297890861,0.15205849489620205,0.025461983133381993,1.4894039996732822,1.9625503605511998,1.872591786462936,0.28573457949832515,4.635922750173549e-5,1.2906348719033205,1.8363796209379717,1.9571512515563376,0.45276420314792987,0.3508419307560042,1.0782941763794858,1.934609915761444,1.9970153124949253,0.6453477035422123,0.20258875220397343,0.8622974339659256,1.9891974029888013,1.596252711754094,0.8544921473598451,0.09157171364537164,1.6567860263750915,1.9975930499572798,1.7547946929366025,1.0704312668056777,0.022974897949420425,1.4794543074030997,1.212055825865886,1.8780905687623506,0.2937405599201156,1.5213228357069397e-6,1.27973385518931,1.8425597278573869,1.960382880322213,0.4623186804076962,0.023724355024555388,1.0669508721653265,1.7525016944748257,1.9978288826811321,0.6560045190815043,0.19577735338494906,0.8510415323768494,1.5934484227127705,1.6053444788068085,0.8657536675217486,0.08687602653878357,0.6420879991047124,1.4066833164260726,1.762206221289881,1.0817716204760763,0.020614193681615878,1.4694425963838615,1.2009276115676992,1.8834757676028382,0.30183789696610597,8.603600453183091e-5,1.2687966541225895,0.9857893344248752,1.9634902808896295,0.4719427082425993,0.026250142134395915,1.0555989076695182,1.744962777253344,1.998513380924257,0.666705831393644,0.18906998300353617,0.8398048989801341,1.584256108294398,1.9869096191731097,0.8770325528203858,0.08229845455952323,0.6314914058018166,1.3962668517113168,1.7695191561471018,1.0931013967597836,0.018380175693635814,1.4593701616582522,1.1897734067237447,1.8887466863939413,1.3048227516802935,0.00029989234038096946,1.2578246834605569,0.974418249339556,1.9664730513076754,0.48163504175785365,0.02890188649844294,1.0442397513002628,1.7373274970232815,1.9990687186825473,0.6774502562341004,0.10285055140091881,0.8285889872655825,1.5749882187223454,1.9850115920634288,0.8883273443005525,0.0778395898292662,0.620942480111195,1.3857991287764222,1.7767325515597878,1.104419130118705,0.016273132961924452,0.43099654956035194,1.1785946541614625,1.8939026433276442,1.3156349308565884,0.0006430626674706064,1.246819362458154,0.9630504733248827,1.9693308057466956,0.49139442722314375,0.031679245106182474,1.0328748723960508,0.7492316979823543,1.9994948241215185,0.6882364037816171,0.1079324059703003,0.8173952480425906,1.565645952823923,1.98298615096288,0.8996365809495355,0.073500009114575,0.6104425865657448,1.3752815016504836,1.920575679917615,1.1157233565725315,0.014293338038323555,0.006845645745798823,1.167392799883609,1.8989429714665684,1.326406281776118,0.0011155025957639841,0.2599243845113467,0.9516874768343208,1.9720631745482,1.521847247405466,0.03458185869854902,0.13272674052168065,0.7382381689603958,1.999791642123246,0.6990628788179893,0.113129651965727,0.04602753267992399,1.5562305190472254,1.9808335578679066,0.9109587998860992,0.23309099254202514,0.003875291589874874,1.3647153308178421,1.9160741938187758,1.1270126138881098,0.012441047014816298,0.008238370161783859,1.156169292881211,1.9038670188302405,1.3371354111346625,0.0017171510138415114,0.05891302885102434,0.9403307297030914,1.9746698042726796,1.5315152383636117,0.03760935181439584,0.12712090882928162,0.7272784995598045,1.9999591342934953,0.7099282809085394,0.11844161710896473,0.04267848966802956,1.5467431353048167,1.9785540912224167,0.9222925365497125,0.24043938069370585,0.002939425113283267,1.354101983042102,1.9114542109733943,1.1382854417685868,0.010716499490401876,0.009759381704809278,1.1449255849461368,1.9086741484794296,1.3478209310894784,0.0024479300968057727,0.06281989283068923,0.9289817009580433,1.9771503577453244,1.5411144763463884,0.04076133283906269,0.1216279864766785,0.7163541074443198,1.9999972789666878,0.720831204583267,0.12386761428253812,0.039453278857865315,0.5169717223383741,1.9761480458817648,0.9336363248899947,0.24788602012546446,0.0021325311970218364,1.3434428311893367,1.90671632898911,1.1495403820423018,0.0091199185401023,0.011408483627798893,1.1336631304833,1.7949443312766358,1.35846145943882,0.003307745316348698,0.06684798366552869,0.9176418586276309,1.9795045140996397,1.5506437196656475,0.044037394055031265,0.11624868398866528,0.7054664057144663,1.999906071208704,1.7171129658252124,0.12940694161861155,0.03635231743942602,0.507044576392512,1.9736157330746122,0.9449886975563523,1.22925822860874,0.0014547142150644898,1.3327392540505043,1.901861160724144,1.1607759788514065,1.4330118408714598,0.013185462614829335,1.1223833863225308,1.7879930258572483,1.3690556198007315,0.6042735450074765,0.07099678031078271,0.9063126695520201,1.9817319688189485,1.560101735687244,0.8108044376676298,0.17218909374551516,0.6946168027247646,1.9996855228175217,1.724993183329162,1.0261700595401126,0.033376006530701385,0.49718119560266216,1.9709574803626682,0.9563481860877857,1.2403136369488819,0.0009060618449242552,0.32322535684803233,1.896889334208024,1.171990778840183,1.4432354611500169,0.015090088808722757,1.1110878115301295,1.7809397913468639,1.379602041791085,0.6147438834636205,0.07526574610805825,0.8949955991933485,1.6285232642571725,1.5694873009904822,0.821984421108525,0.17862305431815106,0.6838067019015575,1.9993356623216882,1.7327796209470838,1.0375376243133085,0.030524731125791238,0.4873828558245811,1.9681736315983194,1.8618538575428936,1.2513379600512555,0.0004866450563121294,0.31489632414629787,1.8918014925603468,1.1831833313430407,1.4534017476880838,0.017122115840780494,1.0997778672201328,1.7737855401009965,1.3900993612008432,1.634293359741934,0.07965432885474855,0.8836921114461641,1.6196366803422724,1.5787992015263692,0.8331874313599936,0.1851632622847258,0.6730375015614726,1.9988565349766332,1.7404712714816006,1.0489003334903266,0.3287220412883839,0.4776508245007892,1.9652645468801513,1.8675660865984933,1.2623297718889857,0.0001965181019570883,0.30665591151178107,1.8865982939075905,1.1943521885721624,1.4635093854482022,0.01928128086265024,0.16803758916395195,1.7665311975419562,1.4005462201725256,1.6430448343276245,0.08416196087546102,0.8724036684480665,1.6106699446982282,1.588036232774654,0.8444120192814802,0.19180887165113647,0.6623105947305463,1.426292676293632,1.9408877963023916,1.060256717273111,0.33719530275565424,0.467986360496624,1.962230602506369,1.846153559143299,1.2732876506406188,3.5718510588145236e-5,0.2985051848647905,1.8812804112979813,1.7119070973055577,1.473557066979297,0.021567304580327185,0.1617812084990009,1.759177702039143,1.9971054919573126,1.6517131292743046,0.0887880590954484,0.8611317303905748,1.6016242171972517,1.990158427758581,1.7994366119132232,0.1985590227893158,0.6516273689640317,1.41597711863106,1.9369746470179188,1.0716053066818123,0.3457542998551977,0.45839071393740205,1.9590721909261206,1.8400376345250287,1.2842101788740412,0.5235004182191225,0.29044519852450257,1.8758485326144356,1.7038739882902927,1.483543492585798,0.02397989129028122,0.15563325376761883,1.751726004787666,1.9979057093241697,1.660297123313898,0.09353202511603087,0.06025009617094257,1.5925006679293705,1.9885027035795404,1.8062173337849714,0.2054128425484274,0.6409892061669147,1.4056077531704663,1.9329402974551138,1.0829446337448063,0.3543979254569184,0.4488651260467119,1.1997744646443,1.8338130487007822,1.295095943729827,0.5335302244903112,0.2824769950725826,1.8703033604855788,1.6957498312156558,1.493467370495759,0.02651872891770668,0.14959452022486075,1.7441770696853038,1.52519768385005,1.668795706082885,0.09839324529200044,0.05642281893796797,1.5833004770510746,1.9867191138246412,1.8128937692007712,0.21236944436781025,0.6303974824151607,1.395185921218133,1.9287852694683205,1.9190327161494198,0.3631250614837884,0.4394108289858585,1.1886176524151497,1.8274806068380598,1.3059435371039951,0.5436203699252171,0.2746016052183239,1.864645612194859,1.6875356769639756,1.5033274170279531,0.745426909983435,0.1436657889977171,1.7365318732078217,1.5154853876675518,1.6772077782659318,0.10337109081099793,0.05271759603948001,1.57402483463266,1.9848078892061818,1.81946505454512,0.2194279283916576,0.006003968751939981,0.374081085286624,1.9245101005219731,1.9234563600656784,0.37193457905647365,0.4300290456944791,0.22115318049397592,1.8210411280558407,1.3167515558301521,0.553769549335446,0.2668200476653222,0.10459452592788288,1.6792325880589651,1.513122356757919,0.7564418222938089,0.13784782698407283,0.748092468963331,1.5057064120154855,1.6855322517380897,0.10846491777485134,0.04913490675637289,0.5460737918255227,1.982769276946386,1.8259303398039695,0.22658738158541636,0.004823850466189716,0.3652517806251314,1.9201153436210734,1.9277605523316454,0.38082533863935797,0.4207209897323535,0.21407015087477488,1.8144954453186275,1.3275186018609957,0.5639764498963944,0.25913332897970454,0.09958852249501238,1.6708416385282836,1.522850922682942,0.7674882395323279,0.1321413867535065,0.7371023781167252,1.4958620218315688,1.6937680497055463,0.113674067282866,0.04567521451947665,0.5359692244348712,1.2977274926434914,1.8322887886746777,0.2338468778538899,0.0037724609851057522,0.35650458241241423,1.9156015672396578,1.931944736188072,0.38979619018794487,0.4114878651224262,0.20708878346891846,1.8078444053286997,1.9880823300806068,0.5742397513170675,0.25154244345992605,0.09469898979273694,1.6623639137646058,1.532511856385944,0.7785647328141784,0.12654720644994388,0.7261462938091934,1.4859534905150698,1.7019141068449133,0.9932299178526904,0.042338966849610804,0.5259246807165061,1.2868508463404744,1.8385395786741867,0.24120547816103188,0.002849936308843448,0.347840622122906,1.9109693552472637,1.936008370399131,0.3988459732976194,0.009924105708739805,0.20020998133571077,1.8010888684165909,1.989769051896718,0.5845581260108621,0.24404837300815518,0.08992656029571988,1.653800510385225,1.5421039081982624,0.7896698693641269,0.12106600969617676,0.022140184662089113,1.4759820997620916,1.709969369441028,1.0046032476778215,0.2965441639767392,0.5159414599601126,1.2759370950821345,1.8446819012454134,0.24866223065141224,0.4656553076485834,0.3392610204639831,1.0630068541702367,1.939950929322428,0.4079735173537494,0.6597183614221931,0.19343463426735252,1.7942297084298022,1.9913277443312913,0.5949302392672942,0.06727174453807161,0.08527185133099902,1.645152536090201,1.996413240062536,0.8008022127018533,0.1665119785630833,0.01982347140051033,1.4659491393997797,1.7179327955232546,1.015975982060054,0.30467300375432393,0.5060208535230808,1.2649876505925715,1.8507149618618377,1.2304037324648416,0.4753032140053134,1.3316290794090546,1.9013520364300627,1.9437719029769929,1.4340724853501159,0.6704348130082182,1.1212151376521573,1.7872678126197683,1.992758205763122,1.6174716673251903,0.8809558807121284,0.9051408997213426,1.636421109519078,1.9953863920421246,1.772037218585818,0.11044538816380023,0.6934962290274956,1.4558559072194803,1.9515337352880286,1.8905515026604673,0.03307512659905554,0.4961641446634635,1.254003929212904,1.8632479914993756,1.967480343193811,0.0008566609847687756,0.3223593211637267,1.0402909122591169,1.734651776608941,0.4264571557065965,0.015294473856523383,0.18019779746961795,0.8246964595298875,1.5717500556501636,0.6158303080435177,0.07571437304211537,0.0763179880913214,0.6172880302513313,1.382149733220334,0.8231427564092593,0.17929497392892235,0.015570693836063909,0.42775082679522247,1.17470443932318,1.0387137803837578,0.32119944763362385,0.0007925874487595408,0.2649355317439317,1.8624501898918377,1.252477014776621,0.4948013829246669,1.3100855873062547,0.13644501392625696,1.9510471332569472,1.4544505114484159,0.6919942149855982,1.098606660091311,0.04827930271538672,1.9952337120928574,1.635202859169591,0.9035697718466642,0.8825231685319427,0.00455540896907114,1.992946577481539,1.7862935954529564,0.10028501720648708,0.6719254081490778,0.007315075932211035,1.9442925301043295,1.9006673447648605,0.027523939413573117,0.47664751121711424,0.056429437419812545,1.8515435330472676,1.9729832783262742,0.00017387736985907676,0.305808229356221,1.017554124055605,1.7190306195735692,1.999864510956193,0.01951197726798204,0.16738512174095377,0.8023491926621279,1.5529416499757513,1.9800557890522001,0.08463522175396854,0.06784203275240674,0.5963738189807962,1.588987833155652,1.9144821062658735,0.19250259747967635,0.011827254482271066,0.4092462870159995,1.748847713863622,1.8062055097389669,0.3380770991177443,0.0019564687774388245,0.24970475665214464,1.8737391910229158,1.2744196668947116,0.5145609387796133,0.03869060462451035,0.125199224081051,1.957830297075585,1.474593407396808,0.7137129774314528,0.12031431448014474,0.04154363468358391,1.9971942900728115,1.6526054006115043,0.201170459650158,0.2430160746225889,0.002644393400288658,1.989993017921813,1.800143148416693,0.09059015374327728,0.4010661691358304,0.010317950147148203,1.9365627532531624,1.9103171866283994,0.022475905896415127,0.4574016574179256,0.06420597835921471,1.8393984907394172,1.9779827973587945,8.398192227310197e-6,0.2896163084836887,0.16179210750870798,1.7030374401218737,1.9999802482102453,0.024236779692115906,0.1550032362880368,0.7801041892153304,1.5338471553878632,1.9752823400284045,0.09402967507646043,0.059848370726086064,0.5756684416361977,1.3397281936781282,1.9050423732829427,0.2061280156648766,0.008595090173691866,0.39104739989992277,1.7637279483200086,1.792540293224315,0.35529722580431455,0.0036367322405834734,0.23486218011795412,1.8845761243891004,1.6430295286374719,0.5345716580865973,0.0452048338039307,0.11440605125881975,1.964117884861929,1.4944907513737202,0.7355798631797072,0.13135831909718032,0.03530386660827667,1.9986389253109158,1.6696702876734342,0.9489355053812546,0.2580741407302084,0.001249404037623747,1.9865272415181239,1.8135787117958762,0.08136581384223973,0.419435141042208,0.013832880312910634,1.9283484040777872,1.9194960354769384,0.017933637871856645,0.6079063613607198,0.07246669388539373,1.826819148352707,1.9824763135682195,0.000360309069873499,0.2737919361553218,0.1744128636987885,1.6866805130353484,1.9995786012833077,0.0294664365426075,0.14305854742906743,0.3149108827230557,1.514476451271078,1.9700042853830153,0.10389287237204659,0.052341137888330835,0.5551826110638334,1.3182482523808252,1.8951343764439008,0.2201641787694505,0.0058758732140409276,0.37316358144928075,1.1071590435523881,1.7784650207998136,0.3728509180962116,0.005832508479286402,0.22041548160734747,1.894955383021749,1.6254442435089826,1.9939292684393337,0.05221306865592301,0.10407107978674435,1.9699066434532666,1.4432175458429957,1.9470872680104052,0.14285175405591732,0.029563226910527374,1.9995668703609875,1.68638869107837,1.8560198140340112,0.2735160751229673,0.00037116264076142436,1.9825510414437768,1.8265933341052463,1.7249794179645392,0.4381044939557117,0.01785804782431255,1.91965373263647,1.9281991422254805,1.3937355425827682,0.628931343438353,0.08120730995039227,1.81381201436845,1.986461502034424,1.5820177146725423,0.8370857193147999,0.18746077405027928,1.669968301296477,1.9986597779852509,1.7431218237965602,0.1315572352791764,0.33165679846799556,1.494839559919239,1.9642243559519508,1.8695249071455582,0.045324218439374286,0.5070619650751232,1.2966036512197854,1.8847632420908313,1.9553244107736347,0.0036710105109467595,0.3556040846515983,1.084517454968071,1.7639869749326,1.9965138169181023,0.008542661411217067,0.2063721357612388,0.8684846078586244,1.607535357031105,1.9911697334802403,0.05971168315901765,0.09419965692119359,1.975193577778317,1.4227140971564203,1.9395417092839196,0.1547886727174661,0.024324685765170773,1.9999776451094533,1.2181536608625199,1.8440405810735077,0.28933388823047845,1.0123606882572744e-5,1.978066474962425,1.8391802816520966,1.7091258964029192,0.45706456845768384,0.022391370082222473,1.910483237503529,1.9364220039353275,1.5410976693482645,0.6501483143610758,0.09042330420840206,1.800383818604935,1.9899363008432114,1.6003627039143007,0.8595688330142801,0.200929087647427,1.6529094517100318,1.9972242537101041,1.7581494258828472,0.12050525055286809,0.34874851124299056,1.4749466413499739,1.9579455422383338,1.8805333889410598,0.03880124289404763,0.5269789575991561,1.27480558899045,1.8739343361905754,1.961799717114989,0.001981642848025711,0.33837799469219365,1.0618321375258124,1.7491136464825352,1.9981535750784465,0.011765788818424161,0.19273940852813287,0.8459713551696584,1.5893121351614208,1.987897372851143,0.06769679757205949,0.08479689008108238,1.9799759524068645,1.4019919385629822,1.9315100369380562,0.16716289898695236,0.01959095356406193,1.999871037023759,1.1959002132935688,1.8316246462425994,0.3055193960048126,0.00016647373556177847,1.9730758623636542,1.8513330420202472,1.6929054770732823,0.47630555471174496,0.02743050157108895,1.900841663441795,1.9441603661438749,1.5218301987848295,0.6715462965869381,0.10010990835559919,1.7865415087354588,1.9928989121531346,1.6183970688548115,0.8821246050132082,0.2148108360601927,1.6355127904292677,1.9952727711900895,1.772784765701474,1.0982072560501956,0.3661771778915567,1.4548079880479592,1.9511710928652217,1.8910862876917092,0.0327755862033724,0.5471406885618249,1.2528653438881567,1.8626532615584086,1.9677773936683485,0.0008086442946468875,0.7492510450593206,1.0391148284818297,1.7338527308264755,1.9992768941682506,0.015500223072835051,0.1795243534047628,0.8235377960390375,1.5707840064928835,1.984113879653108,0.07616428044156442,0.07586764420532277,0.6162008923232986,1.3810617915915038,1.922996406515113,0.17996803050899435,0.015364479513734874,1.9992471012623305,1.1735454080512115,1.8187784334764445,0.3220642241548789,0.0008401321321178656,1.967581785762478,0.9579250993063622,1.6763265523297628,0.4958174975393477,0.032972835072496376,1.890733998947699,1.9514102250658476,1.5022927361985545,0.693114218919755,0.11026211059723845,1.7722922466936373,1.9953478031256913,1.3048037171285034,0.9047413650814539,0.22909883694967925,1.6177873183893174,1.9928063401113354,1.7870202710095693,1.120816735262081,0.38393378091916275,1.4344340196396461,1.9439045128947858,1.901178143386784,1.3312504131788958,0.5675367263964259,1.2307942676728667,1.8509258549591765,1.973254347617336,0.00015262175369357145,0.7713340985793911,0.1502249030380225,1.7182121238767274,1.9998831929885075,0.019744031999077816,0.9858093180344571,0.2833112593366879,1.5519605573755173,1.9798212114443299,0.0851097507393096,0.06741653923573099,0.4498643147229483,1.3599344853828281,1.9140052229197981,0.19319744198024558,0.011647450368197143,0.6421066608597166,1.151100811386504,1.805508589333595,0.3389598124792359,0.002030750249468749,0.2489271505723486,0.9352112913866782,1.6593977000151883,0.5155903015705313,0.03901550301412571,0.1246295881321915,0.7223471631537571,1.482495390163181,0.7148409222372825,0.12087465824072796,0.041208568746206264,1.9972817067184052,1.2830623398131464,0.9274074114340015,0.24378569778423276,0.0025595438076817523,1.9898262365914707,1.070411330798393,1.1433637045716607,0.402009133158831,0.010487279059762544,1.9361495620148137,1.910803734556658,1.3526254458226221,0.588156518307192,0.06462157874650287,1.8387581840873861,1.978227745216648,1.5454208900377844,0.7935354625564316,0.16243457237804837,1.7021999179957459,1.9999721578436027,0.02449501987417735,1.0085555329387375,0.2993587568822925,1.5328515269564926,1.975021589227303,0.09452858012905352,1.2231760917476793,0.4690002820134831,1.3386209510868847,1.9045411381401578,0.20684428857728943,0.008441789297514823,0.6634375193823256,1.1285780360080806,1.7918219795571058,0.3561974192950923,0.0037377120684672915,0.8735909730441458,0.9125310047820437,1.6421276790229529,0.5356137364672087,0.04555537895341999,0.11385998953980037,0.7005684503677179,1.4624484037146912,0.7367151652648833,0.13194206041334222,0.03499455061732504,0.5025882358456042,1.2611745076281904,0.9501110167853877,0.25886381966429695,0.00119127768128513,1.9863340025193699,1.047704733247224,1.1658364983032663,0.42039388252452636,0.014028657875875483,1.927910252593466,0.8320073252199396,1.3738180320352213,0.60898939572925,0.07290723328349613,1.8261565444278125,1.9826950132582142,1.5643436537626694,0.815843650129038,0.175077593380341,1.6858243978091934,1.9995437427036182,1.7285165254455317,1.0312973212581822,0.31576876228381445,1.5134668021411466,1.9697174962996866,0.10441589536121132,1.2452895238677766,0.4884109855847476,1.317132216206972,1.8946090488406617,0.2209015094981126,1.4478276178541143,0.6849425134478099,1.1059887350738051,1.7777256855222356,0.3737681259612041,0.005960134416626572,0.8961860543501415,0.8898959741457484,1.6245254247652132,0.5558774422162864,0.05258907919518874,1.1122773204685052,0.6789446617887781,1.44216214905162,0.7587256303917009,0.14345859090316948,0.02927982090436343,0.4829854398397533,1.2391515452154458,0.9728404344173336,0.2743254012540419,0.0003397895949422969,0.3111688752635432,1.0249734535341977,1.1882234891592587,0.4390785168498734,0.018080172743413114,1.9191908476033013,0.8096291944399754,1.3948172068912563,0.6300245798484767,0.08167256042669135,1.8131274559982522,0.6031745440465175,1.582974429241165,0.8382471191658761,0.1881474246166288,1.6690940359195183,1.9985981692281483,1.7439089136126322,1.0540229165188588,0.33253278509634754,1.4938164124775528,1.9639116769694611,1.8701056180415656,1.2672760445617341,0.5080863824474051,1.2954793988941897,1.884214093828699,0.23536183161532487,1.4680483752247155,0.7066105164926577,1.0833445961614911,1.7632270005725863,0.39166284149233044,1.64696458726417,0.9188348484103057,0.8673179107158977,1.6066000445497581,0.5763709344898773,0.060112964542312186,1.1348492910838968,0.6574869854440651,1.4216471221685363,0.7808609295263274,0.15541829112182182,1.344566773318702,0.46365014427228335,1.2170048471323462,0.9955839042564307,0.29016244281773074,5.520103821154976e-6,0.2948588468754765,1.0022292526961527,1.2105130942359257,0.4580533688096975,0.02263972743126952,0.15899501916942693,0.7873495604488181,1.540107475142798,0.6512511871783957,0.0909130250449065,1.7996776599761017,0.5823998529598845,1.3466984240152573,0.8607342782375152,0.20163730382941547,1.6520174885222807,0.3969505194366312,1.1370998457299109,1.0767205606250325,0.34964215170835933,1.4739105249672901,1.9576071351350377,0.9210992144727932,1.28912427812686,0.5280162926612921,1.2736737021949698,1.8733616513957854,0.7087829564968435,1.4880269669868331,0.7284303176134249,1.060657335221815,1.748333426246564,1.9982243762649934,1.6641406112810109,0.9415256368654146,0.8448084962560833,1.588360812867937,1.987714123542141,1.8092413587226137,1.1573514914311762,0.6362065234151666,1.4009139374254742,1.9310812941947988,0.16781497318737482,1.3658296164793267,0.4445923531168521,1.194745871956469,1.8309704307568604,0.30636675035873884,1.5572248588234558,0.27891365457156714,0.9794838984552455,1.6920563382754594,0.4773086209218451,0.027704962851380688,0.14690700690333658,0.7651799506043391,1.5208257882991467,0.6726582351912342,0.1006238461734904,0.05473662967417836,0.5618412258509595,1.3252746107684863,0.8832934926137698,0.2155402514307334,1.6346035909274823,0.378962886499287,1.114534318491376,1.0993785099427387,0.3670880098293696,1.4537594388050925,0.2250846709398775,0.8984456994516518,1.3108229204094468,0.5481904046024624,1.251726408254682,1.8620573365348667,0.6870992886045066,1.5077530563289603,0.7503906273671923,1.0379386905165484,1.7330526683961283,0.4903641774170654,1.6809730126644598,0.9642466796285795,0.8223793770113044,1.5698171665960903,1.9839042332587404,1.8223940615962766,1.179772278997886,0.6151142860939751,1.3799733220561237,1.9225428430231593,1.9254123660320728,1.3869031814448642,0.4258219267678883,1.1723861363569295,1.8181021326153428,0.322929939859081,1.575967144068755,0.26334154830502743,0.9567491591303968,1.6754590948348134,0.49683431062669414,1.7381355828742437,0.13526038017494224,0.7431318353385319,1.5012746291090169,0.69423464800022,0.11079999948796737,0.04755933664263157,0.5415092996382895,1.3036825022594933,0.9059130902834426,0.22984907411334377,0.004333730313184514,0.3612965746869432,1.0919095318377936,1.121985041375875,0.3848613330700753,1.433373580050103,0.21090892459499122,0.8758447280569562,1.3323607446534809,0.5685982802983636,1.2296488724803165,0.0973688933854635,0.6655775137881443,1.527216437082929,0.7724800836126612,1.015200416545248,1.7173926331998253,0.470926586031409,1.6974530824242948,0.9869862209595022,0.8000421576822652,1.5509787001129636,0.30098141927790345,1.8351212623875015,1.2021000533940849,0.5942211864859741,1.3588361106176188,1.9135270733503589,1.9337923849055083,1.4077765648708038,0.40734857693887916,1.1499372091357227,1.8048105530114098,1.9888588754782766,1.5944114271388665,0.24815058499644294,0.9340367975484289,1.6585123726407631,0.5166203354417263,1.7532894861566466,0.12406116488369745,0.721216622222776,1.4814641132326951,0.7159692620901837,1.8769917273769807,0.040874831077071905,0.5214145939466479,1.281933270124315,0.928581367993359,0.2445563685725135,0.0024760760260081893,0.34396072445040815,1.0692371917070898,1.1445284584316642,0.40295292561255414,0.010657978800567958,0.19714144955396906,0.853307993904751,1.3537266073093,0.5892293608283852,1.2074525176652589,0.08781268342820236,0.6442287672935345,1.5464070390045226,0.7946872573888609,0.9924542779635424,0.021079672897779678,0.45176273426756985,1.7135722938647031,1.0097324955468292,0.7778083954211683,1.531855160335628,0.2848973428589021,1.8474163761138658,1.2243232623543259,0.5735380345639087,1.337513239384799,0.15142458633540223,1.941689264827806,1.4284389669854423,0.664546098604576,1.1274107052420894,1.7911025689339208,1.9919887666697227,1.6125481650650098,0.874758630470376,0.9113585649580458,1.6412249398324776,0.536656458188495,1.7680536416769899,1.090819468566698,0.6994456500656221,1.4614044905201669,0.7378508320934993,1.887693869331179,1.302639375205099,0.5015675056642378,1.260038167293872,0.9512865973035637,0.2596545253364436,1.5003271484257588,0.3269643052615214,1.0465290286410935,1.1669970972723542,0.4213534269681295,1.6746515043472683,0.18378936903130538,0.8308471573750911,1.374909453799205,0.6100729717869856,0.0733490570358809,0.07872843408070207,0.6230640948425701,1.5653149329837661,0.8170006588284299,0.1757434658737711,0.01668745538899452,0.4328825373951417,1.7293223069959456,1.032473734595458,0.3166275897489812,1.5124564416764814,0.2691832565504563,1.8592730413523748,1.246430407714733,0.48942266397269063,1.316015740691842,0.1396103999866457,1.9490989199975124,1.4488796971776257,0.6860598011398715,1.1048182797630055,1.7769852728170794,1.9946054084279794,1.630367974000539,0.8973567781658838,0.8887261949498015,1.6236057408308906,1.9936675228559375,1.7824204105438801,1.1134468119592233,0.6778301830461568,1.4411061397078981,0.7598680366083738,1.8979367234480669,1.3242393015009646,0.4819783035634021,1.2380085221717667,0.9740170306555508,1.9715227304630822,1.5198910213891155,0.310316110972399,1.0237967917162198,1.1893793327500233,0.44005331682043425,1.6912657638615631,0.1708595913186972,0.8084738395790264,1.3958983242370364,0.6311183288065698,1.8303609657243731,0.07012084548270736,0.6020944469182647,1.5839303361821897,0.839408743102408,0.1888351998884763,0.0128039982846887,0.41429576392226586,1.744694972849421,1.0551981719156451,0.3334096964049542,0.0015855333485509382,0.2538472907328304,1.8706851235308255,1.2684100513620864,0.5091114812955693,1.2943547372241953,0.1282413743991463,1.9560175167005336,1.4690881795280109,0.7077359345761352,1.082171621892907,0.0433433441318698,1.9967074469172523,1.6478616340760937,0.9200080328896131,0.8661513973852077,1.6056638917109056,1.9908548457507198,1.7963823594715527,1.1360154586064914,0.6563814048859791,1.4205795630489382,1.938733007911746,1.907714990132279,1.3456714681978257,0.4626571229876173,1.215855732773029,0.9967609074503838,1.9766607062114527,1.5391859056491584,0.29402475526554384,1.0010522424645631,1.2116635844213655,1.999999999151893,1.7075223663404095,0.15835880621073217,0.7861996163459043,1.416682359098758,0.6523545431372602,1.8428201635385761,0.06199437115236017,0.581330673099034,1.6022436170944165,0.8618999163934671,1.938761393237165,0.00943131086382254,0.3960120305414597,1.7596823376938968,1.0778940500107677,0.35053669315140534,0.0031241247979382214,0.2388973801488642,1.8816467181018013,1.2902508211518393,0.5290542815892736,0.043367335089883,0.1173233918430816,1.962441475293677,1.4890539582809885,0.7295632838033035,1.0594824488857646,0.03696711878912018,1.9982937945545982,1.6650200941699076,0.9427006750092067,0.8436458523381156,0.001580900123225648,1.987529505896647,1.8099322646258131,1.1585137316171008,0.6351104130628059,1.3998353808791109,1.9306512615717255,1.9170236101633873,1.3669247864126441,0.44361396060752323,1.1935912608268484,1.8303150640805725,1.9812933631792844,1.5582018181408137,0.27809866719717447,0.9783071487885475,1.2338383225393477,1.9997403652031949,1.7234129007087144,0.14629348154362642,0.7640360122341001,1.4372508048411132,1.9715032098382066,1.8548432909195736,0.05435321568197449,0.5607835164451844,1.6202453005314486,0.8844625418944867,1.9463556782917433,0.006571138135981869,0.37804079715399386,1.774276647150725,1.1005496261605858,1.9936767746357962,0.005178494243104348,0.22434125979858088,0.8972748433369749,1.3119414167920005,0.549240746560602,0.05024031529440953,0.10686210122149031,0.6859815963796017,1.5087667032544312,0.7515305554731094,0.1396523818151122,0.03108916126656358,0.4893518411525496,1.6818344765908078,0.9654229634787005,0.8212212040515117,0.0005607544580485957,0.31656745603130554,1.8230631153616081,1.1809299905105766,0.6140282130686985,0.016702443870005634,0.1756968292795611,1.9258577673135115,1.3879882597975843,0.4248586692487025,1.1712266258463386,0.07331809532066191,1.985418304455803,1.5769289201374392,0.2625460868360787,0.9555732788722786,0.014211960321695805,1.9989634711876314,1.7389291452929754,0.1346698598488023,0.741994494568275,1.5002558275752556,1.9658607585921049,1.8664241271685822,0.047201332562603726,0.5404636079405137,1.302560866681859,1.8876559402506428,1.953460324217534,0.004224959938520678,0.36039136197539234,1.0907374384268127,1.1231531784968607,1.9959734696931957,0.007747578764801699,0.21018646093714222,0.8746769092163378,1.3334706156898433,1.9919783577925787,0.05760469584158112,0.09686291514756162,0.6644685023150572,1.5282162151844716,0.773626383842198,0.1514681692016231,0.025712512786508324,0.4699281686376413,1.698296081671482,0.9881631419132748,0.2849549236826896,5.7713062110553714e-5,0.30014021834299764,1.8357681178502934,1.2032526372400874,0.5931457127158831,0.02109649972074934,0.16303311733105286,1.9342128908392096,1.4088509902294628,0.4064009527938831,0.08784643966096273,0.06500925736826946,1.9890333958194897,1.5953575223413246,0.24737506100024798,0.9328623950927517,0.010645988200288725,1.9976697190658157,1.7540630720751285,0.12349395512303785,0.7200864675062472,0.002481872340285851,1.9597185763978882,1.8775566804257742,0.040542422138526435,0.5203814609919002,1.2808038098573062,1.876952145051982,1.9600716551105184,0.002393990170900584,0.34307285672458776,1.0680629566975715,1.7532353095940858,1.9977548536543734,0.010830049133084607,0.1964403071782186,0.8521438165611198,1.3548272787584117,1.9888466108152738,0.06545666644213977,0.0873310071441793,0.6431290103685914,1.547392431002546,1.9337629084073322,0.16372298220599735,0.020839955196771176,0.4507787523201191,1.7143963922696397,1.0109094446719422,0.30104032489470967,7.203620621276663e-5,0.28407508418682303,1.8480406985947238,1.2254701221932125,0.47099648523732063,0.025997034761123916,0.15080244736100412,1.9420846578463542,1.4295021834483759,0.3882503611622038,0.09740434983450852,0.05718417839059242,1.9921367668423162,1.6134780898968815,0.23259343909349883,0.210959525349936,0.007591902304654896,1.9958597782178513,1.7688068508461994,0.11277154971685821,0.6983232661385432,0.004341393981001307,1.9530798411862298,1.8882351907704313,0.03437992969270942,0.5005474659897242,0.04758444007090312,1.8657946197240038,1.9661862503051122,0.001079176166626894,0.326094241899221,1.0453532595756563,1.7380800090918784,1.9990200048412432,0.01442431049504489,0.18310991070479266,0.8296872238672859,1.57589980668279,1.985203240138624,0.07379216453046444,0.07827130896716994,0.6219741614738461,1.5662854290419677,1.9253811477294087,0.17641048025660788,0.01647400953136502,0.4319135000007577,1.730127078174731,1.8223471968727862,0.3174873639287735,0.000603716479640859,0.26838036557323686,1.8598745078303427,1.2475709501676449,0.4904350496924257,0.03140151348174014,0.13901114744957144,1.9494689955267739,1.4499311546425893,1.968052452555804,0.10742925794332536,0.04984690703967687,1.9947268118574921,1.6312812473239235,0.21820886904423564,0.2251367369172116,0.005051282801735391,1.9935345850969983,1.7831528532576106,0.10250819134277978,0.37902744884606643,0.006716063809236283,1.9459479878015549,1.8984541332010967,0.028717043664236885,0.4809718849319383,0.05476351097983623,1.854189137107836,1.9718009461440011,1.520896102955212,0.30946430213953047,0.1469499872014225,1.7225428301258787,1.9997682686716653,1.6921157943472878,0.17020216858935577,0.8073187500501491,1.5571564598476264,1.9810501308222155,1.8310162518669926,0.06968850805364024,0.6010149010311815,1.3657529547540945,1.916520600027363,1.9311113406677838,0.01261693470612979,0.4133421724554702,1.7454800004179543,1.809192965413676,1.987726992319422,0.0016524787939983243,0.25306418286176635,1.8712634228105158,1.6640790284056834,1.9982194664225261,0.03730713963557064,0.12766531834930295,1.9563620832655018,1.4701273339768002,1.962098803454126,0.1179159771560927,0.04300123957863444,1.99680219079023,1.6487577833684877,1.8810517040554084,0.23971485839792483,0.00302544419383477,1.9906953427451568,1.7970936567680458,1.1371814376991434,0.39701622853223917,0.009604653184118739,1.9383267062248692,1.9082082204941775,1.3467756841986254,0.5824746985196053,0.06243164195529449,1.8421417018151987,1.9769128376149978,1.540176795777041,0.2931916416832274,0.1590395865758567,1.7066318115454826,1.9999992579981232,1.7083536597111584,0.15772375922540083,0.2949172552813786,1.53812484337996,1.9763894316615536,1.843453041843051,0.06158704509672286,0.5802620732445887,1.344489446116628,1.9071858496989607,1.9391663034119877,0.009270726349982161,0.3950743783851377,1.1347676727489813,1.7956200620453728,1.991023991025056,0.003217780525536451,0.23813446055958287,1.882201550974405,1.6469017761121518,1.9966045435103603,0.04371085768471217,0.11677083032864355,1.9627603546175403,1.4679755828238648,1.9556473698188555,0.12885908170301086,0.03665071791747698,1.9983618298510915,1.665898655768685,1.8700650176572955,0.25468634715365257,0.0015154346385047868,1.987343520170422,1.8106220484838305,1.743853864622388,0.41531698864533495,0.01300566756568089,1.9302199396645847,1.917492405939527,1.3680194480242083,0.6032501525465719,0.07058486554924948,1.829658547121652,1.9815192798540795,1.5591780041494792,0.8097100589573732,0.17156429415920138,1.6903551856226091,1.9997128533080335,1.724225026857952,0.14568113887205936,0.31122858958474375,1.5188148041315828,1.971223554076286,1.8554534339382123,0.05397111174798752,0.483055948589563,1.3230477005687242,1.8973817264917519,1.9467353467697095,0.00643711577238848,0.37711956944412084,1.1121954706846866,1.7816355093120775,1.9938082394670165,0.005298811795904412,0.22359892322140595,0.8961041295332939,1.629389820462015,1.994473982987914,0.050609354381303984,0.10633332013469121,1.9686604991531191,1.4477539674652369,1.948701489585631,0.14025290968306348,0.030798627780551868,1.9994049220915593,1.245209669219874,1.8586281644910145,0.27004345701994603,0.0005220354062340782,1.983480851587025,1.823731028890844,1.728460097036473,0.433920260474547,0.016917347288125995,1.9216318825163259,1.9263018859515828,1.3890728006481248,0.6242308827229924,0.07921896332946776,1.8167461317415348,1.9856178895138255,1.5778898969537123,0.8320885254013691,0.18451762973788544,1.673721373792369,1.9989092027855788,1.73972168403118,0.13408053831366906,0.32789629035905177,1.4992363330086744,1.9655551708625487,1.8670112192168036,0.04684464844870284,0.5026596949143731,1.3014388119494664,1.8871133030041851,1.9538145545602994,0.004117569067594529,0.3594870353500269,1.089565219312103,1.7672465427430666,1.99607829709075,0.007894495891175524,0.20946509145286174,0.23415783554275216,1.6115522220430676,1.9918288871952707,0.057999060481783826,0.09635818807677488,1.9740594641704936,1.4273006867110607,1.9412647565139907,0.15209156599345397,0.02544799700652689,1.9999309278215494,1.2230957982834736,1.8467470619203525,0.2857782423141533,4.576047622284474e-5,0.2992999869636096,1.8364138154760277,1.712689428275396,0.45281641879120094,0.02133766847026919,0.16238957330832715,1.934632102554716,1.5453518485593905,0.6454060337365561,0.08832946806210518,0.06459245181496442,1.9892065459965482,1.5963027927611817,0.8545538683020946,0.19789289132861343,0.010475384385797204,1.9975887222350392,1.7548356133471945,1.0704934963573471,0.34491173382925344,0.0025654368283319906,1.9593872148100766,1.87812041774544,0.04021134239107493,0.5225207623281554,0.04123197427932157,1.8763858920610745,1.960400264041287,0.0023132863560770822,0.722426295656962,0.12466941322641201,1.7524606071090716,1.9978329893811537,0.01100348981893362,0.19574027801936456,0.24898153554386904,1.5933982099288486,1.9886706246901826,0.06587615259359414,0.08685059523236505,0.40836342739045095,1.4066263229742695,1.933341018327984,0.1643689253796986,0.02060159398180339,0.44979553124006655,1.2008664988302762,1.834427857161251,0.3018825619464707,8.685627045301736e-5,0.283253817326205,0.9857269561394143,1.6965500179948654,0.47199568682879345,0.02626434406268252,0.1501814848282227,1.9424787457415014,1.5261458832010109,0.6667646496827,0.09791166602302737,0.05679251682679742,1.9922833925514785,1.3311726922043645,0.8770944642169285,0.21168315864593346,0.007447830848430592,1.9957520948656575,1.7695589949435988,1.09316351023182,0.3622661163001759,0.00445164023360467,1.9527228771847929,1.8887752816870094,1.3048821667596564,0.5426288748258428,0.04794385594230277,1.8652050439647732,1.9664890678034634,0.001025201163607825,0.7443491641024346,0.13589355323245556,1.737285352570395,1.9990714084702617,0.014624185003129453,0.9580073967441718,0.2641938082931342,1.5749371769035725,1.9850008295399852,0.07423655515338456,0.07781546077676127,0.42685347631438497,1.3857415730548936,1.924934374725379,0.1770786356047983,0.016261926208168798,0.6162769556709929,1.178533272175345,1.8216769241012698,0.3183480836320973,0.0006453015261908002,0.26757848815026386,0.9629881313846712,1.680050216635387,0.4914481413414371,0.03169482503100174,0.1384130876892713],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],16:[function(require,module,exports){
module.exports={"expected":[0.9999999999357932,0.12789886880007795,1.809598301327941,1.2548357065241724,0.11624673471370028,1.8314010833251086,1.3377457489312408,0.07898971729405091,1.6010236488212364,1.1803713303686036,0.002001961519661588,1.9656512638715453,1.8511682798822808,0.2845692937576515,1.4538623885513715,0.855557168897384,0.07493930232249835,1.5925751860667803,1.6379961685151008,0.14892022434096408,1.7155484877347007,1.5044425985476721,1.14460965188662,1.9249966504812455,1.9790167962824383,0.5651532944882216,0.23163843821044194,1.2010429101842313,0.0008914960697188334,1.2829608398995178,1.8620321932998887,0.29944005789208006,0.4773439983798372,1.9537531276256253,1.060624011491972,1.5754821187113868,1.6540693837303029,0.10766337219865363,1.9789480298997484,0.5648496856227812,0.2318542835428694,1.8072674627284684,1.3770766005961805,0.010063199517482468,1.1024840496181239,1.9402898761056209,0.4420060388851548,0.33002227581908783,1.8825550370145305,1.5757578379879984,2.5433320005596727e-8,0.10751122907201038,1.882767045704392,1.9997723379808146,0.44163177525369557,1.940136246716298,1.1029327367984396,1.5403502229901096,1.37665878681985,0.9185392545816697,0.47791904133885854,0.603454233429038,1.0599508748339512,1.7814917617588655,1.416045315160375,0.01696106698770261,1.0601737623318137,1.9538886189966753,0.4777286106933125,0.2991182466155161,0.05280540495488972,1.2833934490959027,1.6853386863791968,0.1274594315890284,0.7373510470679978,0.36248111934108984,0.7783213220270827,0.1076119709337009,1.6539832283784597,1.5755752566978445,0.06718761382606941,0.3298565257631939,1.9927311178495242,0.5266319337230354,0.1803221770602802,0.010094822091632039,1.4542642805028312,1.8071356596579116,1.9866189325741166,0.565050737925573,0.5143923601890926,1.9943131525590183,1.4154319924652796,1.5043442566108403,0.003621699459231076,0.1489800267956476,0.47715364640635216,1.9979801331307656,1.862145347447659,0.08926356126652712,0.0008820945223134702,1.6097630545924702,1.2967413229687572,1.999791088517982,0.28923817940923124,0.6827363006643345,1.9579822463854177,1.5750236660754464,1.3376385482473214,0.8769815053759993,0.25957049492328266,0.6421436045904259,1.9694580410050562,0.24115275028298833,1.3779078395340039,1.3637021114515289,1.7446277770353766,1.1167958645106308,1.979130855305029,0.2699379471754626,0.04023878761951993,1.8892337396378034,1.7151568501386794,1.1595073342058322,0.1011091314736714,0.3000809001106971,1.9993614843709795,1.9081300136283046,0.13469592667814267,1.2019221550805055,0.08305312125393804,1.854294698638729,0.9328980972297802,1.925337364041905,0.1571119226351354,1.0455723077694354,1.7903940445646418,1.4292968272494215,0.9759784783307696,0.19658050377142033,0.1810955064101567,1.0024595655739377,1.8160713582444532,0.057520524446036614,0.008042735658337796,0.17165625249699756,1.9350527501482344,0.7512710220102583,0.34128795401592404,0.07280877430019816,1.2277862003552724,1.6423353053907475,1.9188985578134472,0.7932624977439404,0.31923915685687076,1.9908953335834039,1.1855926713257765,1.6963972899118969,0.012238117416079941,0.04801147255594118,0.2882900876971015,1.9841691228225526,0.5780608007460968,1.726691589954683,0.019881275069277393,0.8783200990398602,1.5167249038242954,0.0025006856404270472,1.6322790481175462,0.464934388315992,0.029347239586971496,1.3624454215582888,1.5531575143124576,0.000381037726645328,0.657735291508537,0.4290078010156725,0.04061840634161751,0.419128773550293,0.6691147896552108,0.00012046286183697852,1.5631843209743077,1.351156273717554,0.032324226808817524,0.45476446491755607,1.6228706351809006,0.0017194456583660145,1.5270332149502237,0.8903235484144573,0.022350522535098505,1.734940045527621,1.131083465242911,1.9819555267048419,1.489901942199811,1.430514557000488,0.014195032864636303,1.7050188581875279,0.5501234938267963,1.989196008768668,1.868873524219612,0.8051008869121762,1.9140642553918006,1.673786489679669,1.216002892768072,0.07740313636961871,1.846722090698262,0.7629937687845215,0.003395957364777602,1.641301025391317,1.0311842926378425,1.7991324625956016,1.8229959389310637,0.9903750639359085,0.188090875280863,1.944850433957164,1.2993161944964564,0.04759944787821069,1.7977391943807897,1.0334971766834624,1.9587524639486213,1.9298515187280139,0.76524256353282,1.847951003053654,0.07829830389905179,1.076556991994954,0.14081636208520332,1.91312328266437,0.8073711250760509,1.8700167528309817,0.09587973262393235,1.1194744280140356,1.7066580987616016,0.014586195885814557,0.8498579342749791,0.27824947459434335,1.9815152747779352,0.5911583401516829,1.7365073384306218,1.8746064498023622,0.8926239749395369,0.24907832407388797,1.9723510288697108,0.6308856430559393,0.45282606021880867,1.9993955111840767,1.3489886091904724,0.22130372394142162,1.9613784223159438,0.6712994180849574,0.41724666763557017,0.04477976950200724,1.3082597090399073,0.6555618778857395,0.0004475903273064574,1.5512282162991677,0.3827510690331245,1.9986749426809096,0.46689079103935316,0.6154052667933654,0.0026669076400297476,0.7538846044154096,0.34940341869434355,1.9955274826695772,1.7250999459878789,0.5759639179461726,1.9845766187351366,0.28991758229071907,0.8333562784681137,1.990528558868148,0.5417598169644362,0.5373111836428115,1.9912042371061445,1.438968197008244,0.7909989509232254,1.9198089930283266,1.6630774020819779,1.2300388486589806,1.9959884319800212,0.3532174604502146,0.7490303197038473,1.9358706124202913,1.6301869234729516,1.2717838111624613,1.9989203057987108,1.8147317404777334,1.0047736449862201,1.9501917167774874,0.19796049691264084,0.9736651174024032,1.8323742449192273,0.4213265988393441,0.666570488159299,1.962745671972165,0.22445774024491105,0.9305893995698334,1.8554952512537564,0.08397892102180338,1.1996551881064197,0.13353831066606947,0.25239732287631944,0.8876427703014493,1.8770252231790205,0.10212551035912432,1.133757162878742,0.1128190592487196,0.2817272832824953,0.8641085359563099,0.2683584950675624,0.12194195023755139,1.1144972965760511,1.746170393942851,0.026000627462337667,0.9069501120749708,1.915154933055229,0.14339138640491944,1.071559211124497,0.44083117241769587,0.03667411043322888,1.3354594443799068,1.5769153710230115,0.1664339275924558,1.0284880411619157,1.800751140700911,0.049139169260783544,1.294530667054025,1.6115955344714026,0.000981945354338043,0.9853638896618276,1.3779705317204718,0.06337262165675495,1.7445825772271808,1.6451382637394514,0.21712402551442478,1.5023446807257717,1.8493777678293846,0.0167022821695052,1.2111069614818342,1.1595741814190952,0.008513004008037561,1.4645972792153592,1.4563246132262084,0.09703558310150684,1.1687671831161577,1.7085641225152768,0.08302610462269111,1.425985828189068,0.9329656593093102,0.0046783171123990774,1.6522308450411334,1.2440271128138574,0.023416430786180276,1.3865821365167714,1.5312856164096398,0.0014382219167962118,1.6189421709771719,1.2856119141198126,0.05206590559876656,1.8062986315498022,1.019171236362753,5.523363836057449e-5,1.5845023995927674,1.326665539615739,0.04558140875524308,1.7800458706726912,1.062260645019135,0.14823706030519745,1.9188718427312677,1.367111638520386,0.02815422978279869,1.2643569870215539,1.1052342624675315,0.0028674074612198286,1.9010060418134276,1.406874989919338,0.2882425216557456,1.9841571193902945,1.1480121671608028,0.10626735957544808,1.4749269915508059,0.8783873107043636,0.011468876457380706,1.9755977067836517,1.1905148015348086,0.46487718358311725,1.860283759222575,1.4840590528820639,0.23037468422267027,1.6610558113195828,0.6577989171220797,0.07094315803699025,1.9999821520598897,0.9643501431017089,0.20356150380221616,1.95305497832176,1.274378735789569,0.05585718661948702,1.8131646922158828,0.45482123011291165,0.17822952511895085,1.9729044800623432,0.7400201345298234,0.3603531780695046,1.9967790949684392,1.050578055999051,0.15442586012315207,1.923425649459233,0.7818944908995152,0.32780669555509934,1.9923945258021272,0.5290694790774801,0.5500630196222621,1.9892059333830459,0.8241744759028209,0.29651034584444935,1.9861643194615548,1.1364298872641063,0.5119769740709653,1.994603829591799,0.3423543378746631,0.7629279840962786,1.978100062770436,0.6068194110447624,0.09261274326425994,1.998151979803543,0.9096361974982091,0.7212623990331282,1.9682167534857569,0.18948363891431408,0.9879933942078879,1.999843785233459,0.4096986129052749,0.21069186748856183,1.9587717090920638,0.6874929033339463,0.9448925071279071,1.9996760994927758,0.07832457244719648,0.6395629269697867,1.9430698491829754,0.24295651617257707,0.36939118438008534,1.870050135607885,0.48143217306783914,1.171358614100272,1.9796890786202228,0.2718303985556454,0.8590781643233458,1.9937669596027492,0.5187794196327877,0.5605435453149099,1.7365531408619437,0.3020585174350364,0.8165243045427643,1.9092842836384571,0.1360852659109547,1.0858456671489338,1.9933218054205581,0.33358465510855495,0.7743116695022482,1.926382223982047,0.15860304929389024,1.04280984221384,1.7920849590309178,0.044799808140119524,1.3081952913342236,1.941757295622009,0.18268564732478787,0.99969440031779,1.9995685210627032,0.058448422534610356,0.6912233181772796,1.6341225378336217,0.0026718520228646847,0.9565795267704352,1.841727096419996,0.4353534519381367,1.2250928582207128,1.967227713022604,0.006748898297939232,0.9135454058244228,1.4435262457810092,0.09097025242183443,0.6104309277432188,1.6983790655354294,0.2638603995240125,1.438907354306533,1.8851104305769468,0.006165091049631033,1.1403167093452256,1.2301047466710842,0.02043366364242527,0.828039258990065,1.519090327811139,0.13025132571044185,1.6301343455122694,1.7574426783706325,0.05672704528299555,1.3598668890320469,1.5554589933918463,0.00030853228277416545,1.0544972120047706,1.7848882990931059,0.041402159044021336,1.7889327103468327,1.5907946265037853,0.000167204459397996,1.5608972261315075,1.3537440011116135,0.03163055869817977,1.278150573048003,1.6250315105832793,0.00188534736819157,1.5246812399475953,1.3937424896327901,0.021772907816948628,1.7330620892119968,1.1338242686441646,0.11278781632243096,1.4874894611974137,1.4330087030788248,0.013734545776254437,1.1943660217499064,1.1764271689285488,0.010883811632416807,1.8675013517642336,0.9070175330508519,0.0075304221746861355,1.6717406617614032,1.7205238609785707,0.07633995854653652,1.410456886478358,0.9500323705166506,0.0031720753277573177,1.9572963612088567,1.2605699995690092,0.027237015482708515,1.8214220486122932,1.5456910485702855,0.1864797210814333,1.6054243937706096,0.7262090580088437,0.04676013017996439,1.9978259937616862,1.0362606610615503,2.1686376159735232e-5,1.9288305631825318,1.342775318202984,0.3384857068404842,1.769234923822364,0.5164758585457795,0.13940480256246912,1.9119924797836156,0.8100852388563671,0.024268277005824013,1.7409704953574614,1.122219329369485,0.5245352263393461,1.8934582894639418,0.8525923277905108,0.27633831638534945,1.980982314690285,0.5936834067996318,0.0987289842105119,1.8732624617714166,0.8953735628152741,0.009031640976930877,1.9717015791842498,0.6334569535464001,0.45051365732685156,1.9994878216335925,0.3981918601179796,0.21957183395092372,1.960613690867309,0.6739121903417451,0.06475471790628828,1.9999381557646347,0.9814398542246803,0.6529672335835925,1.9665566510475323,0.7149738792767693,0.38057788632675305,1.8030957794415106,0.46923228648504756,0.16860835625388393,1.976714879254152,0.7565656545739857,0.8732801695162826,1.995262445040038,1.067644152716027,0.5734612811033086,1.91672988783388,0.2918673004614126,0.3152479325132441,1.9032268899628584,0.5442193253527527,0.5348615770511771,1.9915663924663365,0.8410292157776121,0.28446337916804953,1.9831862932053408,0.15094497289321973,0.4971269289241348,1.7832561029132696,0.35532885330007524,0.7463546141867781,1.9368413231559543,0.62259539799608,0.46032751493007207,1.9990449471882543,0.38888814270290983,0.7048853001860923,1.9510498918209693,0.19961511553826117,0.970901012888669,1.8339035553090368,0.4235839667521314,0.66396483510233,1.963489715305228,0.7037777259600311,0.927831169804652,1.8569238121282987,0.08509161372564611,1.1969449338055185,1.6880505789557083,0.25423665445309274,0.8848955449900513,1.8783503777269295,0.49612511845492935,1.1544910665139696,1.9829739178140326,0.017652074934003115,1.4128534705466607,1.898143403370422,0.12326858789155848,0.5452516139265725,1.7480084632296893,0.3144034420089189,1.3732003839391305,1.9162660783519763,0.0007671425613531291,1.0688008622349465,1.9951490526213482,0.03741978136341062,0.7576903506797807,1.5791717624232986,0.16796464575948122,1.5727036766514153,1.8024044049129748,0.37966809794909495,1.2918870339007953,1.947368728622497,0.00110827507093203,0.9825990775865131,1.3805291244828346,0.3086650650095517,0.6750084461301065,1.647248564871528,0.21884744228238318,1.4999518126964237,1.8508339338428839,0.016202769361785996,1.2084033087860675,1.1623033025926501,0.008876834810930045,0.8965266804199687,1.4587833487756248,0.09822726864544806,1.682287553465498,1.7105126418805532,0.08192645573615642,1.423482473048276,0.9357248600334466,0.5235155720998639,1.1233699658579606,1.246707748785053,0.024015057350314506,1.8295107054563053,1.5336262124048747,0.19489699377037084,0.5174910516008491,0.7124542113022969,0.05118891727253938,1.3438642583284608,1.928400371741555,2.999408239701129e-5,1.9340447183298621,1.997748913758925,0.3493005766231535,1.7783126634911413,0.503981541784138,0.18580602822438474,1.5466622521681206,0.7960350055537899,0.40461997603449584,1.2616891831480603,1.1079836706802189,0.5371911271851337,0.9511903664095889,0.32103548793015335,0.2863029214723378,1.7213273469632562,1.6708813346737785,0.10503032369071474,1.9960005413235904,1.866924037493307,0.01105506811590995,1.9749868416719063,0.17303100905618274,0.01354371118223563,1.8588707466903902,0.3868087036768003,0.11225350508365683,1.6589784797669926,0.6603984476331206,0.973529735522859,1.394807979314633,0.967113685911433,0.6664428120514483,1.092127026286558,1.2770367287566549,0.3918918020893861,1.8555653700348196,1.5599369899877997,0.1766570246847151,1.973540087070748,1.7882197459300517,0.04173296100844914,1.9965535284536893,0.10218514145626079,0.0002804057450008779,1.922360911683248,0.2818215162402361,0.32576200503633546,1.7581991503966978,1.6292336557405864,1.1143627570763812,1.5200809496405427,0.8268972347751947,0.8023231157442833,1.9857021659908884,1.1391686748651275,0.5095653194490057,1.7742663855742826,1.437865291409897,0.2646456178640525,1.699208418863432,0.6093633756020163,0.09145402600157981,1.998316194458793,0.04918110934690223,0.7186078913760789,1.9675214494789448,1.223963049919262,1.5390437668264219,1.842352500206602,0.41193286300836796,0.20899708173665876,1.9595538408885513,0.690120770213819,0.9421317554583091,1.417658890455928,0.9985349899765696,0.6369850053042669,1.942146564689769,0.24476607052850596,0.367247548958754,1.8714099336689805,0.4837984719128653,1.1686336950800857,1.9802398110879604,0.7731823238971355,0.8563411331947187,1.993454906801509,0.11646590878554486,0.5580613782105439,1.7384206258513712,0.304041471323081,1.386457232817742,1.7373368475826978,0.5595023839991922,1.0830903824881108,1.9936370434957604,0.03363509359422301,0.7716187105693589,1.5674299509426934,1.1702162374913525,1.5843925081543133,1.7937698170985568,0.36849178867580923,0.24371454271604232,1.9426836014653097,0.0005363501606635568,0.07877499901595186,1.3672376081643254,0.059383519865671475,1.7522531709324425,1.9591005430066,0.20998052302903958,1.5123114865924103,1.8250023550164278,0.43763779142462544,1.2223977949928988,1.1481461032161464,0.7201491263497473,1.881400601857026,1.4460028600567807,1.0299577408706087,0.607885708449811,1.7003555012494327,0.08770150227899554,0.34322819567154195,1.8863939017729172,0.005862316587037175,1.9651884820691143,1.9859714603020564,0.0209935421245242,1.8374290015400283,1.9893751592529636,0.13161924533893488,1.6279848248066766,0.6987584193118113,0.3269487479246044,0.2807050623338948,1.0076064720512687,0.5879291736984787,1.0517359486886577,1.31571257250874,0.3602490837992369,0.7411398524180304,1.5930233631240418,0.1543535679726019,0.45579355341468075,1.8124893296769615,0.03094429488337891,1.9923778456579573,1.9527032713515693,0.0020588808101350553,1.9059630152537186,1.396282780748734,0.07051487359151487,0.6588885603294072,0.5676644207879913,0.22963492271371333,1.4850732527785633,0.866915681188252,0.013281599819268686,1.191652848697534,1.1791482834475808,0.4746833024598214,0.8795381974698803,1.4739063617985904,0.1057478486629636,1.6696896976147797,1.7224385545860503,0.07528384316461345,1.9998461697716592,0.9527942716249083,0.002955815184342847,1.1063871646644414,1.2632386448927146,0.02788170507546539,1.8198418775791636,1.54800613248097,0.184874787178264,1.6032212771825054,0.7288696098907639,0.9017593330756223,1.327761125397028,1.039023868185266,4.372008494379909e-5,1.9278025056613175,1.345371651170737,0.33641454918695657,1.7674651368821823,0.5188981411246605,0.13799982327777816,1.5322675036050426,0.8128008047530093,0.023666520909091382,1.9880156001950984,1.1249632962178826,0.5221044329958959,1.8922129107803132,0.33368563453710964,0.0825641773134399,1.709381780228921,0.5962115802042908,0.09753440650380152,1.9973824125419108,0.8981239506802101,0.7323882734700881,1.1607186280106674,0.18276368798207943,0.448205455888664,1.849989116913095,1.5013418384686732,0.21784591122950148,1.9554208981027787,1.743808135001467,0.9564442258026301,1.99990358054075,0.07389920299556607,0.0010339844122385644,1.9468534332584397,0.2354505927714159,0.035729922103296397,1.8014450861723879,0.4715778402591069,1.1827416905012462,1.5778619943999188,0.012694676463924526,0.8705377809950596,1.2979129523513744,1.0704027247465149,0.5709619056385157,1.7286811353377702,1.3746896443254664,0.31323536477304603,1.9044101440121073,1.6424284986817836,0.1224973811335418,1.9919209661633757,0.030048873016705335,0.017352963884427308,1.9826776006393987,0.1524090673731231,1.5959613200464438,1.8775816659694398,1.4531707332572699,1.3191773078943463,1.6868844544780206,0.6251575169305634,1.0112600278679587,1.3538706704224133,0.9294328319156129,0.7022444195606607,1.6251372207348536,1.2405914261713447,0.42227255596077584,1.8330162470099833,0.021744810191681396,0.1986535182941056,1.96422639165356,0.005473907303471082,0.9250734918530101,1.9989734967693027,1.0156305539112886,1.7029588251671497,1.9362784946142797,0.25608168824660194,0.3541021480285055,1.8796688162780635,0.49851552909409735,1.1517585097152205,1.2188341017717732,0.7898652858959885,0.8394440844767344,1.9913570085474208,0.12460192916349055,0.5427906420310549,1.7498408131332899,0.3164190520504937,1.3706335739615874,1.9173702177428984,0.5749141881918663,1.0660419872838374,1.9954172812759923,0.03817281232417724,0.7550085175830665,1.5814237253907102,0.1695017257917688,1.5704347093288005,1.8040515338223935,0.38183929683165696,1.2892411689361742,1.9482503588392754,0.0012422424612535954,0.9798343985612226,1.3830848076632836,0.06532436193631297,1.7408795428379802,1.6493539170454385,0.22057683185822297,1.497555121961642,1.8522835942544036,0.0157107788130606,1.2056980626078075,1.165031182771171,0.009248243887994612,1.8731964659232219,1.9970568369985298,0.09942584927694142,1.6802633779416003,1.712455728561183,0.08083382657559801,1.4209758798979202,0.9384845522148004,0.5259484788590628,1.9605760480370984,1.2493864983923475,0.02462114643953417,0.8085089513370346,1.5359627282152397,0.19325995601156676,0.5150709137052587,0.7151036933490048,0.050319183696049374,1.998521470618582,1.9294243060373906,1.2400444856841553e-5,1.9330535522007308,1.9979305324713006,0.047246642316365994,1.7765735052159606,0.506384463306824,0.187414575804551,1.9850799470275624,0.7987428207653573,0.40684390744512267,1.2590193783604047,1.110732253233804,0.5347416943443735,0.9484286845960405,1.4119206142695884,0.28436877832225016,0.6428683721820713,1.67292931807472,0.10380013087636941,1.9962437932130674,1.8682989924065576,0.010648821393517527,1.9743685216667028,1.1959409041017486,0.014001036764933472,0.8625849222485146,0.3889953464252254,0.11352979441212796,1.656896109567574,0.6630005747878115,0.9707656414140325,1.3922659375433213,0.969877480174774,0.6638372843704107,1.0893732693784015,1.279692603459977,0.032032476701265855,1.8569936102591553,1.5622258851774846,0.1750908196525277,1.9741682502477944,0.7453642525634382,0.04094613434359062,1.3115621967482272,0.10340627784649736,0.00034970627867481063,1.9212891213994419,1.3613646014779697,0.32372246984090836,1.7563933009587687,0.5339553535340522,1.1116152977272356,1.5177171876381796,0.8296213172168896,0.02011197469231607,1.985232475695811,1.141906398361897,0.5071574147630816,1.88436200095971,0.34653052682220264,0.2627745250404714,1.6972288803752522,0.6119103270246216,0.09030225561566585,1.9984727758409069,0.9151452611890942,0.7159555352846716,1.966818747660167,0.19273522299157753,0.019727592124694993,1.8408590582926565,0.4141716095596847,0.20730834410994936,1.9603286357945857,0.6927510064760714,0.9393714462578596,1.3631685973642704,0.08048421526646443,0.6344098593050367,1.9412160764047153,0.24658139951465474,0.3651087516561605,1.8727630688009613,0.4861687177110504,1.165907486661749,1.9807830484972593,0.015554281274094528,0.03252023677141158,1.993135257897256,0.11776439786595361,0.5555825902341822,1.7402824647675827,0.3060297466128725,1.3839054241429027,1.7354660904204393,0.0012869125309029616,1.080334462505946,1.9939446840753057,0.8606680779114417,0.7689274978735549,1.5697046777603683,1.1729403981836055,1.582146423044116,1.7954486058848846,0.038416351145049155,0.24190834809108663,1.9436026994105,0.000630723985810433,0.07770278853511214,1.9997156769762836,0.060325809289327514,1.7504283997452847,1.9583141533553703,0.12503180348853205,1.5099348057620543,1.8234365256813063,0.4399264308156572,1.2197010312786822,1.1508801888157674,0.7228048741251529,0.9080371272407327,1.448476064128782,1.032721549457603,0.6053434873202164,1.7023265819417872,0.0865725837385144,0.341145525581371,1.8876705954701387,0.005567143448066969,1.134838969440092,1.9864292354479036,0.8066096645917034,1.8359145101977423,1.9889693634367251,0.13299380473499223,1.6258305024363207,1.7610418422141894,0.3289964250113774,1.3547015889302174,1.0103715271929332,0.5904502334770005,1.0489742897918366,1.9969065854916501,0.3581262733165135,0.7384699289848138,1.5952475654000373,0.15288091254471337,1.5563101878569527,1.8140982480169026,0.39536747665177585,1.9920332940467178,1.9535399682651446,0.0022400446573341837,0.9627454535843543,1.3988200418279804,0.07153838443110172,1.7292893756795773,0.570159457566373,0.23140094501116548,1.4826533354179465,1.8611012895313226,0.012836198456970704,1.1889382102391615,1.1818680281723661,0.01171264782518422,1.8647371182654675,1.4763394851744318,0.10698885404019876,1.667633612921773,1.7243477243215923,0.0742347982990641,1.405407633019661,0.9555565336751404,0.002747178588091148,1.9556828635912038,1.9911012349832924,0.028533827628348107,1.818255437913896,1.5503170262557906,0.18327608584291688,1.601013548275383,0.7315322348757096,0.35262577967175157,1.9974462675107791,1.0417867769267193,7.33996071999865e-5,1.0175657505704585,1.347965343375812,0.33434846540583896,0.7082706445170308,0.521324102279443,0.13660143497380983,1.9878780584738622,1.83194389505277,0.023072230002405436,1.9875850086335296,1.1277063075784526,0.004834742847093509,1.8909607101049328,0.3357500845360125,0.0836678987601297,1.9274706455644985,0.5987428410348723,0.09634672918236953,1.4548952015805048,0.9008751175044725,0.7297249866403344,1.1579887957572916,1.2126762565260507,0.4459014735530953,1.8193327776347994,1.5037324782206158,0.21612596897381497,1.9562336524430122,1.7456535083037092,0.06281128909613365,1.99986135990634,0.07494597413208348,0.0009120904060722079,1.669029557651524,0.2372358441270156,0.036466159069367565,1.7997882649357126,0.47392743442708074,1.1800223903583729,1.5756030392864981,0.761933318382127,0.8677963823610927,1.2952722068910352,1.0731607584673666,0.568465810662388,1.7305720808914271,1.3772519346800984,0.311228048136727,1.905586482807757,0.5491487781961317,0.12117464098746789,1.5030155569315848,0.030725345218078015,0.016843823258360646,1.9821613943753191,0.15387964265853948,0.49235444109609305,1.8762526160310766,0.3595664105706228,1.3165555553050559,1.6848721993663762,0.6277225019660599,0.08333598478852267,1.9992713125368595,0.9321913724444569,0.6996058156183943,1.627293082565916,0.2029426996745306,0.4200177553653981,1.8314832392984175,0.021175041585183463,0.1970024593344697,1.964955695384425,0.7090643576137109,0.9223163868005209,1.9988444198697342,0.08733797714616176,1.7009894684467517,1.9353036275335085,0.2579324101494461,0.35199362504931986,1.7805312292541844,0.007179299626532631,1.1490247925484822,1.9839750530089304,0.7925695141063187,0.028337374336158017,1.511548195669945,0.12594196385842338,0.5403331660258466,1.9013424272081552,0.059685529113895575,1.368063930064972,1.9184673427855827,0.5774187101642942,0.10661576592951072,1.3047173732400767,0.03893319755774283,0.7523285577274275,1.975767807578008,0.16058319586371017,1.5681613803781094,1.8056925148349758,0.38401522226229645,0.2308704223287701,1.082204869727463,1.7298568126371872,0.9770698737251003,1.9999772143506083,0.9635745944908859,1.739019521242349,1.6514543041633492,0.22231218101877592,0.3947068217054608,0.8554618540625311,1.556999459463683,1.2029912436317662,0.15874945668261842,0.7392708454843111,0.042751312291252286,1.4636902773255973,0.10063131583146234,0.5896934455759082,0.6361572101739825,0.07974822549541993,1.4184660679037822,0.7006045395394251,0.5283850102862395,1.959803612011052,1.252063341153625,0.025234693419592613,1.8418733027490293,1.9862926693135488,1.1356610498333592,1.6124053579493087,1.7720204393360397,0.913275564965607,0.2670500476904867,1.0274644602362901,2.4528602635687236e-6,0.2572310463150642,1.9981045208593684,0.34511116915400963,1.7748284091450106,1.6088974306359067,1.1400485257075408,0.4392392611811977,0.8014521748190553,1.5106483524988021,1.2563475930723087,0.13038502475231617,0.6867558130558395,1.8973764381952245,0.056637150019507976,0.07802377115923131,0.6402869246394228,0.5856577632337372,0.1025767905386481,1.4676104823507252,1.8696673081774102,0.7435499457265908,1.973742751495808,1.5690225898115076,0.014465901441398032,1.811032680938216,0.39118666100551513,0.22510458196600502,1.0912422161381372,1.7360280128217482,0.30150295378063696,0.30543259551305,0.9726415047593526,1.7328778349549139,1.0866188291090215,0.2280469414271128,0.3875108440197014,0.015408850243554206,1.5645104815049757,1.19410032195676,1.974788964790454,0.7480392422733111,0.04016664074630105,1.3089334753495971,1.9414960307105011,0.6351822537156389,1.9202102868028816,0.07623619607946142,0.05818727809356661,1.8994150234722977,0.5364036452780613,0.12810261170254056,1.5153494670937007,1.8413078496210016,0.7969049596422542,1.984755252167644,1.144643036821376,0.006659187835408753,1.7777544546174502,1.9984265943664141,0.2609090691518061,1.0365313397853881,1.6978234125619667,1.0228241491894916,0.34590270488206676,0.917900776784403,0.006251431338357039,1.1410850419982972,0.19437027995620793,1.9870479602439879,1.839359187046104,1.5184268642520644,1.2475687387302747,0.5332214239886319,0.6953835920095279,0.05698499298961002,1.4226773622903395,0.08157458694813091,0.5847051747079262,1.9402783914424648,1.3123504956763077,0.041181456334259514,1.8741095306575568,0.734792437658006,0.15624896969051194,1.5615395399189265,0.01604385383592688,0.8508703871675791,1.9928080153340728,1.0901996223647341,1.6479256343317674,1.7421386433746826,1.9999991884869641,0.2989349358561447,0.9817106664285129,1.657521464639642,1.07757792827461,0.2338452278311679,0.8634068026597945,0.013863021799549125,1.1951272158287964,0.1631149840912598,0.47769983850399966,1.867887126148426,0.037660956348551156,1.4796878297884843,0.5823886786241854,0.6436434835572833,1.916621644308379,1.4111644297728574,0.06127528360069434,0.6833438930523719,0.544460430802118,1.25982067722525,0.027057417838682873,1.8461768522999855,0.44221935261195666,0.18693126903460788,1.1536131207631701,1.5979624274132567,0.3478321302747004,1.997876837960774,1.0354851078507952,1.6886950968177519,1.7042922925413184,0.2695003070822063,1.999056745504862,0.9269449626962234,1.6152432988345282,1.1320985425165855,0.1997775207139797,0.8093233671012523,1.8343936273295944,1.526162713329931,0.13437499338852954,0.5252180900080037,1.89380658149596,0.0540052738817387,1.352114860849278,1.9250942850733765,0.6234183897196813,0.602237480407764,1.460502241013793,0.04379737038472842,0.7358020052491645,1.9718845994138432,0.1514147343145399,1.5540102794983703,0.01770277850361901,0.3975722541103731,0.22005729235196003,1.099230364693337,0.0024288375245834493,0.9599823513479753,0.3146006469567695,0.2924949686402091,0.0012012428104916095,1.6643291514614285,0.23317284413056205,0.38118731928396876,0.8723988300029213,0.01239834509496518,1.5793925462660912,1.9765480896565433,0.7558130209276644,1.863345078357818,1.4787689663881844,0.1082366875126094,1.9474554076237478,0.6521340388900134,1.3714040582364029,1.4028783469225166,1.9028935646161262,0.6747523028886029,1.9548651507455532,1.268569876865932,1.4997172167578299,0.4413507345254669,1.9833277085032308,0.1816836292992986,1.5988012239298626,1.7827733957516605,0.8962572799406016,1.9972449637125638,1.0445493661603016,0.00011072471599460343,1.0148009458347131,0.2757253631682105,0.9259008894503847,1.7639079721232225,0.004389574534307994,0.19915012348762406,0.4251666218254483,0.818236209829855,0.02248540882980221,1.2397860106296572,0.13895261170700512,0.5172538270476223,1.8897016970123128,1.3530945310897626,0.08477862661746516,1.9285009835521532,0.601277169936982,0.09516596132737232,1.3295334992469428,1.8779791465769613,0.4954549340265759,1.9697086716318934,1.2153773482298682,1.5464354281519772,0.8429403631929433,0.40483761731512735,0.2144120203347969,0.0023564619634038886,1.7474931802290472,0.9509198328565163,1.9998114941842302,0.9897344719922068,1.7211397256733845,1.0695750552431476,0.23902692769005907,0.8713605471189663,1.7981253283997851,0.011014940661802197,0.1675344023610601,1.978460982035144,0.7646198909897415,0.03551044785464208,1.2926292037357718,0.1123782225151504,0.5659730152604365,1.9133842669877317,1.379811340510694,0.06407131522945753,1.9067558973553478,1.9551756014453074,0.11985862046994655,1.2772969752030976,0.03140922863668372,0.7801955551168985,0.45736889946545867,1.1615374908144271,0.008773959492505035,0.8972985985565616,0.3616925425903206,1.9965310236203344,1.682854707620697,0.0002868562839373201,1.0057298989856345,0.3330671776727677,0.9349504314480868,1.7580225168100105,1.6294441480213788,0.2046156397419796,0.4177673893999625,1.8299438739431422,1.5329697281244896,0.13842070358560266,1.9656776209214586,0.5093292905070996,0.05143431467935844,1.4381087878462167,0.08847163068680808,0.6159966960791696,1.9343216089829987,1.3285448843062442,1.4443224460415973,1.8822855051175293,0.5033078353387772,0.14719659421766929,1.2242270194452933,1.8203166756229343,0.8339879785288311,0.4121519579577634,1.107212123350636,1.6348093452855417,0.9519655087802946,0.3204659369648335,0.28684672594359084,1.7218646193895109,0.0004766552439711136,1.6777799613362052,1.9959309032697063,0.8803619010546665,1.7926270284776953,1.1783319406097508,0.17259492439261226,0.4631978901310162,0.773446131084272,0.03315417742624138,0.11189653002655486,1.9499918612001175,0.6596686185257266,0.07020914922321697,1.388187367136312,1.3862074041578931,0.6671745205070003,1.9524507946347152,1.2762909679037902,1.4927503457066715,1.8551633539840613,0.45648982205966326,1.979866866736446,1.1704831367216595,1.787741930519898,0.8882793604436152,0.36870182692778086,1.0525645237973824,1.6761994382278054,1.7163255444816425,0.28128170932934926,0.3263353339198293,1.758704926291399,0.0036705780454289183,1.115133683651416,1.9894954452185911,0.41041607038827466,0.8361060340199418,1.2319878416090078,0.1430610217096906,0.5102417799088037,1.886009500280136,0.04860150733720536,1.3360628779776396,0.09223964676192375,0.6086491018763102,0.09177852266105024,1.3370992273791014,0.04894101539360385,0.7193526707033326,0.5112016107222386,1.9651176022616963,0.019033813447740244,1.8254709611113742,0.41130535930458,1.9893357442478998,1.1162268573058691,0.0037653916340266713,1.7594214108735322,1.999623499151233,0.9977589386002903,1.7155571755831833,0.00023772825208623338,0.24425763009219803,1.9967074429085745,0.8893731003161633,1.5850655878932371,1.1693985829368028,1.9800860027442433,0.4555663365458511,1.8545923502453983,1.4937077242233168,1.2752330789061825,0.12088007970484338,1.9100880726685947,0.0669083191297063,1.3871728754904957,1.9101103053076436,0.6586339599603198,1.9496476082070857,0.11139120156191118,0.033435803424732846,0.7723743222919989,0.46412676848671774,0.17197734364781192,1.5850220764986278,0.011335079905084311,0.8792693161084397,0.24422249652295847,1.0616212515087808,0.0005112371792674875,0.9977052873143029,0.2876186608384913,0.31965892775887605,0.9530648295801235,1.6356593308548382,0.20950497721374628,1.9907661340209644,0.8350733694833341,0.019023396899517153,1.5482326782889861,0.14777185953865046,0.7194041663319029,1.8817669200725495,1.445308134157567,1.3275052172302348,1.9347133177078533,0.6170131125457303,1.9277014220998825,0.04861803133372766,1.8860343754042854,0.710657358903402,1.9653911721350843,1.2320400290176996,1.5320381819852695,1.8305573164787285,0.41866252350159205,0.20394906483511743,1.6285885797293527,0.004592861192281861,0.32637498528514786,1.999333463761472,0.27424632663327353,0.0002611026279735196,1.0525109464692826,0.25022932581247015,0.36084573678430953,1.7877088798193688,0.008629090061022526,1.1604512850202937,1.9818470215831887,1.8551355420762854,0.031136149188327966,1.5015761799301712,0.12038160315807911,0.5506352274522055,0.6767837639616715,1.395570145354438,0.07022889902117757,1.9138317509997718,0.5669647743800403,1.9467662728438146,1.4857517442027488,0.03580171353571826,0.7635503934893326,0.17256479464374574,1.178384731765371,1.5776409164989444,1.798787924315044,0.37494552112187896,1.9949626815325288,1.6702658244963113,0.0008423948315426921,0.2868843370547156,1.9998322570531646,0.3130385086084827,0.0030157397736600977,1.6426360460982903,0.21509346887652514,0.40395356003171967,1.8202859906797215,0.017302759714973193,1.2143024848833013,1.9699769124912136,0.7281227077781933,0.04616087647861078,1.453412166045757,1.934340730674486,0.6002681172821863,0.6254086401877206,0.08433570783901323,1.4289423392314884,1.8902036113730771,0.5182179480322446,0.13839347012853498,1.532924331046895,0.022718073929243077,1.835575323155778,1.9881350895471854,1.1241932891308921,1.6215075186269767,0.934896893749663,0.3331071552663032,1.9989611906596707,1.0159013784281599,9.495306124884806e-5,1.0434498697231405,1.9973259980500844,0.8973519664319687,0.008766869398871058,1.5996822989277284,1.1514907831563008,0.4488528345046553,0.7901301041816934,0.028929981403431282,1.2675095865294017,1.9551914830280501,0.6757932231576077,1.902419925579704,1.403885396298605,0.07360669569419265,0.6511024238528067,0.5751593718934916,1.2926805062007272,1.4778024479118141,0.038246969994952584,0.47091914484096664,1.9763105478860563,1.5784951837274797,0.012571710324678964,0.8713073416468108,1.9950670849034828,0.23246690872199294,1.0797187491353766,1.7281494338280357,0.2932731735054567,1.9999572655312616,1.7474575401496049,0.002352782359838601,1.09813517432265,0.22074655250947806,0.39669417952462227,0.017497206158833767,1.5549261727522734,0.15199751013061702,0.4954086128988696,0.7368636227036865,1.8730644261820528,1.319912673010755,1.937535171636671,0.6244381603081326,1.9246758001212299,1.3531447261912568,0.05436262923596891,1.8942995902050828,0.5261869860916989,1.2398380964693256,1.5252264943602838,0.02468091617627388,0.425210524029483,1.9867011751977843,1.1331893799496944,0.005393118190659463,0.9258473856271805,1.9990083499589242,0.2687491612856988,1.7035105658363878,1.689492643475814,1.0343852173758559,0.2623573224007313,1.7827400069766335,0.00760909669388754,1.152525528115446,1.9833374631856704,0.4413062366237773,1.8455898478891597,0.02680372545923293,0.12422704678678942,0.543480969194061,0.6843880124631841,0.06089652376464727,1.3713542438924908,0.07706072764658001,0.6426153890982058,0.10821241141145899,1.301342659672319,0.03796072928216765,1.8684333173685772,0.47863867205263855,0.16251306663681409,1.1962065046990464,1.8035898821374434,0.3812294654381534,1.99412621642258,1.0786751266311048,0.0012038731911154787,1.7343371993967582,0.29972016831810233,0.9600359598532764,1.7414005461298416,1.648763544057857,1.0891034918401747,1.9929391704543216,0.8519587327328447,1.8097745381418398,0.1514431202853569,1.9718972306556037,0.48759747937019005,1.873574426496753,1.4605498644957375,1.3113048088996369,1.9406524604266644,0.6328609918693098,0.081139767189646,1.421679688629155,0.05735177636180544,0.5252653094963196,1.9607915148937787,0.12932675772891478,1.517485435439288,0.8092707002996276,0.432657338918527,0.19371877350603905,1.6152010025308776,0.006374901367951491,0.9168039797133889,0.34673557766919993,1.7042542038393127,1.6566338399748304e-5,1.6960346449234769,0.2616508616361827,0.3477914594326239,0.9154151455858885,0.006532990379851,0.18696250433124417,1.9849460937867551,0.7979827079703601,1.8407124243371844,1.5162923148403378,0.12864207248177706,1.9604041349992016,0.06125679303235976,1.4112133357371994,1.3629162191275506,1.9206405163248144,0.5824374282914508,1.9411245445997574,1.3099800148841003,0.040476007531012215,0.7469743396903711,1.974542807305116,0.1575903756665199,0.0138719257766875,1.8089559830280022,0.8533372658533933,0.22734780412063826,1.657481040789124,0.0016899601392926789,0.9715413711708818,1.9999992553985766,0.3007158003170003,1.7352825403589158,1.6556401190297758,1.992814436911663,0.39031393892637667,0.8609362991794439,0.014279978051418118,1.1975729700851596,0.16175225689013006,0.744613857584092,0.0411662196708088,1.4685830241251727,0.10306286978830492,1.943692340514782,1.9215906340305255,0.07759814072506865,1.413436864170198,0.695332490801775,0.5332688725966364,1.9582367295205114,1.2574112242827258,0.026484142230154162,1.8448449983973114,1.9853650562906315,0.18838590328885874,0.006257422483893937,1.7755236840101263,0.9077674202133396,0.26329908453054995,1.03299226139408,5.496095696999603e-6,1.0263642966439714,1.9984296013995688,0.3409417911536533,1.7713204570341514,1.613275029743729,0.19227744800017976,0.4346688642969211,0.8068754165767498,1.5153954445557392,1.2509981627252431,0.1331288044539246,0.5274148152033644,1.8949223796673724,1.4194653806768311,0.08017946227687045,0.6351323005292042,1.941477947534175,0.10015070465597509,1.318591861045973,1.872383980493387,0.48550310365485116,1.9724688798527952,1.564466195417622,0.01541823380031293,1.81425551285735,0.3955832386056355,0.22162078289908027,0.0016296686102276192,1.739760504777249,0.30547119482968665,0.3014645611328486,0.9781701603540615,1.7291040263032027,1.0811079827350838,1.9938591108665429,0.3831486186445666,1.8050401265303577,1.5690667077329348,0.16118184675730207,1.976008029045301,0.7533949808125118,0.03862967653880667,1.3036689662169865,0.10711078233572668,0.6403369853140289,1.9180315177210119,0.07413242107362195,0.06006062732064721,1.9018185426908487,1.9585355959147424,0.1254078164456326,1.5106022228242886,1.8442844265066065,0.7914930151071049,0.4476904162821158,1.1501129749379513,0.007311541454007919,1.7812187364041558,1.9981012176297344,0.2571951251902186,1.6912583389675226,7.671796372255013e-5,1.017294933537232,0.34172952543294843,0.923413670129517,0.005649217250857541,1.1356078942050802,0.19765886122812526,1.9879200680652382,1.836340202477198,1.5231480236050072,0.13260736083003588,1.9626089402087699,0.7006557303556934,0.05515920296114585,1.4276829067351904,0.08377638916987751,0.5897423734568622,1.9383814602200569,0.0962307632975663,0.0427668332139185,1.8767823934147083,0.4933029554420003,0.15329356441865005,1.5569549004647614,1.8136473280113172,0.8454042021999428,1.9921307592975397,1.0957060071405516,1.6437032711145656,0.0029085477492794,1.9999768507313886,0.29500200946814426,1.7298201354704767,1.6616781412134263,1.0720631013764341,1.9948219976079127,0.3760340606439283,0.012960439927061862,1.1897002284932088,0.16615495452150297,0.4729917913312981,1.8651266107293467,0.036172247034729765,1.2950134145881584,0.5773700851442691,0.6488161760009721,0.0745285017406051,1.3775027654924965,0.06319575779239572,0.6781030154950856,0.5493905625049555,1.2651570832789492,0.028350057431204778,1.849111025155823,0.446817973259674,0.18372413638518614,1.1590754401246963,0.008447351301652084,0.35203448877946664,1.9975013935213046,1.0410113895355442,1.684674809853879,1.7082075433826327,0.2732881969550064,1.9992816141658167,0.005760885320094,1.619593637834364,1.1266146794960785,1.9877572928708078,0.8147551251849625,1.8313327335800755,1.530857551462576,0.13715721617434662,0.5203581077994498,1.891312832111646,0.05222691412974079,0.08335742836661741,1.9271802033124161,0.6183009633749497,0.09667935735619626,1.4555861743877605,0.045430744452779726,0.7304722384524784,1.9705675836967242,0.14850185424018858,1.5493977722656571,1.8188876057737002,1.9922612951609793,0.21660807154321704,1.1047318596276552,0.0028293044867579997,0.9544570859425298,0.318638117612406,0.2885974738950021,0.0009455292437491325,1.6684525660768257,0.23673421859754773,1.9957030178973547,1.8002538746960717,0.011545295705658543,1.5838911554493786,0.4738818078842131,0.7611796498561741,1.8605412054446187,1.4836169280527247,0.1107528005263454,1.9492099971134227,0.657324266504882,0.07113016674149919,0.06283000528292182,1.9052570383214884,0.6695276584995573,0.1215451941608251,1.2738928947549986,1.4949192857791767,0.7836515423135726,1.9823070274631487,0.17851749924403892,1.5943628566216734,1.7862029734615765,0.35897058447049224,1.9968194824665897,1.0500735016137959,1.7074680318042734,1.0092710179935367,0.27954965001322174,0.3281808150780626,1.7603274435959961,0.0038871947974213894,0.20247427863677503,0.42065012509890365,0.8236771740672642,0.021334193577380423,1.5385233936916385,1.9647517586175698,0.5124179856654064,1.8871632721337677,1.347915044268192,0.08702106753940853,1.9305403533364758,0.6063549544210622,0.09282519007708434,1.3347498657359762,1.8806130721949932,0.7217476069035818,0.14905127647815797,1.2207745705760606,1.541795432715758,0.8374810936783404,0.4092909038412763,0.21100215628125607,1.63754154985696,1.7511553637270985,0.9453969410043738,1.999688829060486,0.9952646448639032,0.0005922468663006608,1.0640570854765627,0.2426265366144298,0.8768468726502385,1.7947811603370678,0.010211493955296969,0.17061134725640803,1.979587650686815,0.7699984149025598,0.03406452678153893,1.2873365051927521,1.9488800735334277,0.5609973993948156,0.6658605566731846,1.3849214203436013,0.06603334427681884,1.9090739179932974,1.9535238035138462,0.1172467785190543,1.2826061668827466,0.0327992081526719,0.7748038585839827,0.17911493322491578,1.1669926959612802,0.009520100720808222,0.8917991047911717,0.36595943211509063,1.9960555405817981,1.6788040759713163,1.7138501141399598,1.000199594857028,1.999553554440539,0.9404700204912098,0.003979959663710342,1.6337318240528473,0.20797975191786922,0.8226467625595402,1.8268461174308435,0.019510658347262844,0.14124119029555382,1.9670993153906924,0.5045179879050032,0.04969803358298952,1.3393960253546175,1.930156475818621,0.6108962602245294,1.9323361475620215,1.33376317096467,1.439361231905975,0.05099400309785895,0.5081153326811527,0.14432153160460948,1.2296130792402304,1.8234669667646024,0.8285369499810085,1.9898453291694629,0.2054611696740689,1.630526541639921,0.9464423198031071,0.32453360511086793,0.2829808412639744,1.7180264181130025,0.0003212083143557809,1.681835836820893,1.9964140651822553,0.8858543168327349,0.010361266923329171,1.5903869490654414,0.17571342879095297,0.4585401335464431,0.778836107368881,0.031756738809748386,0.11445208141906993,1.9517043085039234,0.5528649103856913,0.06818772659444028,1.3932780540801606,0.06931354178058702,0.6619645943112507,1.9507511866737612,1.281601777532581,1.4879304989126956,1.858016958942252,0.46114028775438587,1.9787477454073228,0.16830745356750632,1.7911365833067994,0.8827853832549275,1.9961478891685043,1.0580863817727217,1.672114817270257,1.7201734519201444,0.9911281552953468,0.32225853320815523,1.7550906913183875,0.003212409444026565,1.1096383922144426,1.9902797971978432,0.4059582178939901,1.8217100667363777,1.2266048607499835,0.14592454548945588,0.5054276251385905,0.7257232022961904,0.04691292905656297,1.3308490766722392,0.09457343234097548,0.6137443049643272,0.08947803399969734,1.3423006859270785,0.05066447616534819,0.7140489128937846,0.5160337078079185,0.13966220270534302,0.020122682144151915,1.8285798898072676,0.41578481611445905,1.9885151094280673,1.1217179066338296,0.004260094874383169,1.7630078102554303,0.28371098693790675,1.0032892662746167,1.711683013872595,1.6810696425074965,0.2478908141778443,1.9971406087728147,0.8948711543560562,0.009099511951424222,1.1639456112353048,1.981169187376044,0.45093581883515454,0.032019007539820454,1.4985094838246704,1.2699121568134415,0.5538015819247986,1.9077823136788834,0.06493367630226676,1.3820679719362434,1.9123879593045578,0.6534410760710045,1.9479003300817341,1.2902945137376283,1.8574787730350528,0.7669926736121764,0.4688041930998792,0.16888919232901167,1.5805279549259021,0.012180512836660662,0.37218523619195976,0.24061265124239373,1.0671401067025077,0.0007033369764966046,1.7264375247811543,1.9997611288814856,0.3156161935905377,1.7491122069981975,1.1106789315920234,0.21290420448411274,1.991500792859243,0.840530465953684,0.017964821817602394,1.5528494335249812,0.15067818474151884,0.49756366317059597,0.04723034733456788,1.4502530364800905,1.32227490157137,0.603516613246962,0.6221276115417786,1.9256226444664502,1.43213854034069,1.8885847844991108,0.7053680319315678,1.9639340705722383,1.237415844998368,0.02197366459252681,1.833624626887137,0.42317121737849317,1.120678713271008,1.624277837050689,0.0051375109529053775,0.9283350562080508,1.9991162968219096,0.2704528244142702,0.0001500216152894307,1.0469874660634593,1.9970609487994804,0.35660227014684964,0.9038966432015325,1.5968447249604347,1.154990176051283,1.9828809653368915,1.8522555290415161,0.02978169385326146,1.506352853087495,0.12302571116772643,0.5457016082817581,1.9039400258931622,1.400643328215033,1.37366903091838,0.654423297771747,0.571956288256628,1.944971468342061,1.4809102919654722,0.037282998046465954,0.7581805208058058,1.9770706527940942,1.183823609533495,0.012018150488885437,1.802102812189902,0.37927193312853147,0.23474167183801176,1.6661514168921965,0.0010846244456091947,0.2907722442120385,1.9999182577277985,0.3090301736704365,0.002601811811317689,1.6468633830921133,1.9913640457461148,0.39952211490368494,1.8171103676145246,1.5519767595706826,1.208897384146588,0.15550171686258496,0.733448856671137,0.04451461178236882,1.4583344005635648,1.9362973387890154,0.5952049728569492,1.9260183382496745,0.08212683710389401,1.4239400768972297,0.7063686325848431,0.5230714745126167,0.13559959047736436,1.5282366405576395,0.023905131334739593,1.8386007628598664,1.9872705940077995,1.129678881832284,1.6171655263006763,1.7681702322073791,0.33723828212717044,0.2711692383784331,1.0214307433271597,3.403449397820779e-5,0.25320352349823727,1.9977149078590317,0.34968427174880057,0.008051338570729594,1.6040986914526063,1.1460219863284318,0.4442467298445584,1.8474749627946347,1.5054497968678233,1.2621767393603984,1.9568137837059165,0.681029775613025,1.9000233505658974,0.05865668418282921,1.9156432477741459,0.645924971739193,0.5801722797726447,1.2979641671985098,1.4729369470411438,1.8666721175643095,0.7493882679441652,0.16445343968810178,1.5739753441046576,0.013460972856876197,0.8658249894830682,1.9945032377141918,0.22893366750282373,1.085230236568142,1.7319288732243923,0.29719659888553296,0.3097873469195367,0.966608768844531,0.001988898705423736,1.0926300605943557,0.22422436194459383,0.3922929304624335,0.016482223033193133,1.5595183470911425,1.200017495126087,0.4906416926143069,0.7422030584347694,0.041877505571690676,1.314668107582698,1.939444775983325,0.6295693775719857,1.9225559654402682,1.3583133082403158,0.05617567299040882,1.8967605537855776,0.6880797204432072,1.2452033224623,1.5205123784907537,1.8380300023360696,0.42974477164649394,1.985787163967793,1.138668378786005,1.6100024274176994,0.9203334377583424,1.9987468457942876,0.2649880733259622,1.6995695022390636,1.6934876606913944,1.0288576545844186,1.9982867624016558,1.7792862567680279,0.006943341625195165,1.1470575955516153,0.19080941008616914,0.4367280870820712,1.8426246556609729,0.025546769277332793,0.12691004723945543,0.5385675605330675,0.6896404829661438,0.05901048047403201,1.3662137230428588,0.07920370882732719,0.6374557834482149,0.10572383753072823,1.3066112874807319,0.0394847230163925,1.8711619965005672,0.4833658552707204,0.15950379663762904,1.2016263167388983,0.866862507200341,0.3855833811986681,1.9935124858649875,1.0841870885528688,0.0014904308628217455,1.738079858542085,0.3036787890522017,0.3032515989903102,1.7376780251512582,1.6529621318428784,1.0835938194538008,0.39312467943606166,0.8574303664743457,1.8065172958986317,1.2010431406032098,0.15982652622912719,1.975461896125007,1.8708695190969153,0.039319245716762374,1.4743833142605982,1.942514903859207,1.922959424300294,0.07897165250150218,1.3667676661516954,1.8962967874897143,0.6890745699197365,0.5390958379100224,1.2539877291866794,1.8374583233126556,0.8038448313602645,0.4372201223768327,1.1376315064132902,1.6108316647072627,0.007013554926552867,1.7796592166441716,1.998251749896502,1.700317204165776,2.548639865818103e-8,1.699994806951335,1.998224959510352,0.34360924130929016,0.9209269272963936,1.6104740884436943,1.1380787383794695,0.4375934283537395,0.8034020804388526,1.8377050067847365,1.2544244391456958,0.1313688311800596,0.6886454395569848,1.89649693502769,0.05597910239906556,1.4254269003195328,1.9227855325041738,0.6290164298500232,0.10170102722465113,1.3152331759342577,1.8706474904340606,0.7416278603248677,0.49115412931207525,1.2006007964335088,1.5590247964362136,0.016590046653576995,0.39276585617725635,1.0831438482666644,1.6533040597604025,0.002026606623562577,0.30292777110808444,1.9999907119367315,0.29677318827278,0.984746264161885,1.6598058814496173,1.9934610337050103,0.3859397031104951,0.01506295746536468,1.5661512307069692,1.192148653861611,0.16478069451305655,1.977419001336715,1.4645248617311069,0.0368400427433444,0.10552185614803467,0.6370349973274511,0.570472643590797,1.4176101419616622,0.0588577580958658,1.900282677134724,0.6804655635816035,0.5471652435513294,1.2627512346098493,1.8423814131929204,0.7949577027823648,0.4447417857057151,1.146610946661605,0.1793437149651702,0.912336949403645,0.26640940810047975,1.997674505303682,1.693812912579214,3.912369562142359e-5,1.7064443488445136,1.9987241454370896,0.33679257014056196,0.006031329998881896,1.6176338721214196,1.129088518354044,0.4301157578011866,0.02601915750744699,1.83271642101644,1.2456410557166904,0.5314632265336459,1.9643698484019634,1.4152960060828617,0.053025410223303426,0.08236328567571938,1.9262429126722318,0.6206076054406562,1.4667774280761507,0.041748299966517965,1.8750739713530846,0.7328750761013697,0.15518301241561605,1.9687032756365441,1.811583511057222,1.9937484237482272,0.3999983020098906,1.0921804494124907,0.21189225832058767,0.9670600635549379,0.3094606777176103,1.9999104682303583,1.7322364715195964,0.001057079634874003,1.6665953339392783,1.9944558571346964,1.807753416511987,0.8754106215671831,1.5736055293216273,1.1832383547148058,0.47600463175500307,0.039902711958381354,1.8618090806475869,1.2983951695109832,0.10961460354601071,1.948422227443694,1.3648189548425205,1.409350417509322,0.06196272415410098,1.9041944802107937,0.6718828525512152,0.12273977018186255,0.027518921420362163,1.8472351813476564,0.7860874476606298,0.18577487975757923,1.9808506578034295,1.7783463488605507,0.9033040482224881,0.3570581572908732,1.0374728986185582,1.6872515253498226,1.0218821805448626,0.2708601438744508,1.9991411437941535,0.33003047601104807,0.005077414917275425,1.6247428291248025,1.9871986756110136,1.8388466538994817,0.8212224954186815,1.5278531827201745,1.2368374578556283,0.5234684033705894,0.05667189301146014,1.888311524432839,1.3502524397772115,0.08600621366250616,1.9296240699370304,1.9364558290393001,1.4587356762411137,0.04438148662256003,1.8794284401921773,1.9714143246215001,0.15036405526735852,0.016212389657948023,1.5438902382203694,0.8399427454725221,0.21881394666605536,1.990050037943706,1.7427698227703146,0.9579949101471288,0.31605041057783034,1.9997479393287683,1.726028239957459,1.0766385294057867,0.23445108103295553,0.8643402361862862,0.37172193535805453,0.012088046198163838,1.7901310343178483,1.9769744127348194,1.8674186903110317,0.7675716951532029,1.4805143435777515,1.2897247326460484,0.5723644176027558,0.6539996092377698,1.3732501585513646,1.4010570065619534,0.06514488370397009,1.908031874805622,1.9542724161419087,1.5067421789997324,1.2802126586466402,1.8520192283478418,1.9829640582108343,0.18054196915151477,0.007862687098805221,1.7840096862740473,0.8942791043990364,0.36403255743510377,1.0465364169061138,1.7049608600441748,1.0128120207407476,0.27709831296862775,1.9994759202656796,1.7626228357014928,0.0042053745651980945,0.2003429186869925,1.9886049074364451,0.4153017198982012,0.022067902629434588,1.5355361535651395,1.9638137981054062,0.5155127952139777,0.7146194712798369,1.8841089970767384,1.3417412233958967,0.6225457147202704,0.6031021181772309,1.3218474171848515,0.09007743000140778,0.04709331357533353,1.8837105386109374,1.9692208836237146,1.5532256395308988,1.227184700907321,1.8220492246113908,0.8309948510267992,0.21318281041043796,1.1102301513869997,1.7488130090007479,0.9489332134458233,0.32269642740273763,0.9917235011910966,1.7197602616706331,1.0675906240827189,0.24031893719169695,1.99619991989815,1.7969253254584427,0.010722477741465841,0.16863817084409172,1.9788696627681448,0.4606388481287268,0.7764042557763714,1.4884500985195694,1.9477563866930336,0.5641818816156619,0.07283941036190777,1.9083884618124527,1.3927305916055994,0.06840397487740801,0.553397526107646,1.269477345235878,0.1141756614410091,0.0319057582897313,1.8567331605019874,1.9812563030217751,0.17537649384709308,0.009038836839353248,1.7896085055210307,0.885262860619048,1.688771010827154,1.0555961055926484,1.7113657319541566,0.0006501076557011709,0.28339597149543927,0.936935460960505,1.7567236608092949,1.1221660799881357,0.20582282573733957,1.9899297844302333,0.4079665716329166,0.020212910361206538,0.13943212791380788,1.9661923700656527,0.5075970567511965,0.7233254032483888,1.4398959791271215,1.3332018842534203,0.6141608439765536,0.09476520601302263,1.9299377137425107,1.4425395858503627,0.04988355766164809,0.5050352229865864,1.9669476829552865,0.14093628793995572,0.01962786490199797,1.8271808225117048,1.9903425012036222,0.20761642335797714,0.0031763467176409987,1.6254078940263066,0.9398757191612684,0.28545375187744093,1.0007949625642232,1.6717804050395486,0.00017613947647920902,0.24624930945217172,1.9969490157085223,1.7914126842640528,1.1763743588431803,0.17371365861603283,1.9806843591080623,0.45302221921070474,0.03264814839339292,1.496345657650875,1.950611131647891,1.913000291749368,0.6710781118407928,1.3900197275347848,1.384371857842287,0.6652994677036819,0.5615324066676447,1.9486919853736593,1.491018502385984,0.03421876905279597,0.4581605644464086,1.9794677977365644,1.5907513385053347,1.1824006835948337,1.7951423458603157,1.0444447630615712,0.24223790644300436,0.00030986636221574937,1.6672302125641352,0.9946692846239061,0.28975260120442414,0.9459914302309309,1.6301760041917814,1.1131575697765337,0.21136808766284554,1.9911731975648546,1.53376672265151,0.018438547283795015,0.14408794174230422,1.9684914315794,0.4997218393886519,0.0479908170280795,1.4480244666387136,1.9321727778065734,0.6058077249258981,0.6198194137375648,1.3389712496325175,1.8827286227077717,0.7174440527763694,0.5129378740861648,1.9645949096837256,0.13632825359594736,0.021456690457381966,0.41291443491969515,1.989044066755235,1.6340810518925606,1.1282435696212774,1.7607140239981498,1.9995669437221157,0.2791368862801835,0.0004480111416148569,1.707047133029174,1.0494788718525558,0.25224170978884686,0.8913502237031696,1.7858349156914715,1.1674378815347577,0.17885714360879146,1.9824183524185588,1.4866219773357594,0.030388913460828948,0.11703471688075762,1.9533876483762933,0.5479250738218551,0.06619480300850411,1.3983567127985486,1.9109327260551199,0.6567650067703817,0.569703369849698,1.9457845481291214,1.8556513739256824,0.7704378757003227,0.46580723422153725,1.1714114717044466,0.1652495438795809,0.011635679023116019,1.800610751897997,1.995647707994127,1.6755049988808532,1.0737010123591475,1.723999333190238,1.9996774634760008,0.3182024609024574,0.955051844004988,1.6371936088408208,1.1041397475384898,0.21697824812969413,0.020633912489372186,1.818545746991442,1.2212149492872115,1.5583181314237584,1.970710793450983,1.4380146621945566,0.04525350049849963,0.09263529402602233,1.9354184047718537,0.5974870449678795,0.6282253351551155,0.049232587422982976,1.8869548145681905,0.7087539007645784,0.5208806067764324,1.9621627574247746,1.8260024166328876,0.02336604284973043,0.42028214087266735,1.1171626240723875,0.19667972378548026,0.0047852523543157055,0.3278464187325332,1.999258873836685,0.272879342356138,1.0189369425435324,1.6851086215125555,1.9967833961759478,0.3593172165198256,0.9003724237125544,1.5939996664234308,0.007114649466970824,0.184068202551805,0.03318092074431911,1.8487963928372815,1.2743271430207446,0.12132952493070293,1.9560857083915626,1.9054487905914181,0.062987632041275,1.4066609162674215,1.9146377083421995,0.6482587915243913,0.5779097432443038,0.0336778368758931,1.4751332004132465,0.7616181513525206,0.4734978640885066,1.975649132233445,1.7938708624443835,0.013056157765531706,0.37649942227776456,1.9947613124988495,0.23052432813352663,1.0827447405399309,0.288280208797307,1.9998667107200978,0.31159439098102826,0.002863348864784565,1.7386544671708708,1.9908934401046143,0.22265284546340147,0.8459924397251944,1.549020424473956,0.015132286121763983,0.1536104860551225,0.7300374332510462,1.8764959332050797,0.04259475250539435,0.09648575281236549,1.9385870537591126,1.9273492638958176,1.4362715874239023,1.3559835051240348,1.891108016643639,0.058722464406634756,0.5288627674295594,0.021027422144437535,1.522640533579192,0.81519887204458,0.4276975532940933,1.9862031384942627,1.619948001126175,0.932912128661667,0.3345906698693486,1.9988685723774096,0.26668163505463194,1.0280059681996843,0.25085311287515777,1.0313508329847474,0.3523784815282247,0.008506019711244317,1.774485837768947,1.9820252978574935,0.4471941923387839,0.7920753341548402,1.84396522207231,0.02610999829198446,0.12569664102608813,0.677675538722621,1.901561115562465,0.059857570223383005,0.07435754377245252,1.359108635284989,1.9464625366334545,1.4849279511070248,1.3042361654587105,1.864900049492956,0.7528180440580204,0.48123182116567353,1.189256865142443,1.5685770411154438,0.8693350229597806,0.3836173298129725,1.9937930555455772,1.662016635358364,0.9876918360320208,1.7363946202862897,1.999973676369895,1.7461346741642547,0.9731830223409178,0.21567762021585157,1.0860791360871378,0.3951090351110945,0.8549619829152834,1.8079894474574918,1.9702056231367662,0.4936922933283966,0.7387831579062099,1.8720927974841641,1.318027460255535,1.4721860542523386,0.6262824085596082,1.3455275738167751,0.07994603909043563,0.05501140539249616,1.4097157805685323,1.962731162784063,0.1328321481086865,1.2515744268222435,1.8360925764150102,0.8062912912986854,0.43516006195067913,1.1351605083656886,1.7652246260066868,0.006721746340671353,0.3413896792453952,1.998396071463197,1.702095541218391,1.042508536284046,1.6982113252475284,1.9980733030238675,0.3454930409712432,0.9184406764224762,0.18285945274843174,1.9836971179066927,0.43965762263846253,0.8009570634485942,1.8390645992461176,1.2568358736383667,0.5417121307143513,0.6862760836236642,1.8975992487585966,1.369506634554106,1.4231682470776803,0.5760125077161464,1.943495211098192,0.10279978207926455,0.03850548358359651,1.8694178138316375,1.9761062460732917,0.16142775762385786,1.1981565670431595,1.5610912143918805,0.860346740999307,0.39078596105790886,1.0806579190504644,1.7287949145665626,0.0018709919026268507,0.30114151917913257,1.9999983516229154,1.7400642592920121,1.0971974747304216,1.657929516652748,1.993173164018705,0.38791026783691607,0.863943461655533,1.5640934088228922,1.9723635563674682,0.4858903508154947,0.7475503787648126,1.4623145580147439,1.3094139181776503,0.5911093781643928,1.9446923811307548,1.9204079148163187,1.4198752358017799,1.3728785838461832,0.5270169252172415,1.9602380889849833,0.1283501109750933,1.2603437512137257,1.841034656183766,1.9865475869332152,0.19254374335564806,0.005491281942195503,1.6056108861183205,0.9148219264540735,1.7837610212094697,1.0259129078059368,1.6901747688661037,2.017054846048527e-5,0.26299381773150066,1.9985950802812544,1.775808672453508,0.006307958730231267,0.18812219728374524,1.985287986998828,0.4321671649485408,0.8098551724957472,1.517994795157926,1.9581075012641451,0.13464635390763302,0.6949024456698656,1.4130256772185876,1.3610620017176809,0.6417355694625548,0.5842456588770482,1.940450242923815,0.098830536535084,0.041038093661406094,0.4794429200521725,1.9740949170844462,0.1565202328219646,1.2070399621320957,1.8101237213955594,0.8513699514634501,0.2260865844522666,0.0012505354248648626,1.6483103601363633,0.9695531194176673,0.3076587064450679,0.9710900138540681,1.733932942635076,0.0011748450262417665,0.22706122997285416,1.9941904750494543,1.8092213488511466,0.013946976235990172,0.1573471531154209,1.1856898593497074,0.4781307157032957,0.040603272033070015,1.4703393188923695,1.9409717999751723,0.10848194616693096,0.6431715004989447,1.9168234818175156,1.4116248930275521,0.6934385447327557,0.5350289666147496,1.9576659947324555,0.12393980414492056,0.02694081830041517,1.845907525055079,1.9850240479174306,0.18722548072830447,1.153113902755698,1.776777914026621,0.9057869675898773,0.26195546601111397,1.034980226967547,1.689061300766221,0.0001189325816860487,0.2691553963817408,0.9163540104976936,1.7700529657408854,1.1426214519330535,1.622793254518285,1.9867977742172038,0.4247234356779802,0.02454963177295566,0.12910474965093888,1.239260063266034,0.5256627740544841,0.7035539149757827,1.4212702112505609,1.352587656163727,0.6332810393813728,0.592513023528266,1.9373278826885585,1.868381398345569,0.04364961917232302,0.4872097710435416,0.7265426578990511,0.15168212013196458,0.01576812724473009,1.815408595737242,1.992992633364207,0.22037356833804533,1.09872765090042,1.6413769127532372,1.999999961323252,0.3000425820836634,0.9801588432362314,1.7277412287552085,0.0007763471804329569,0.23284868103490997,1.9951259715978857,1.8038585511843048,1.1966492509775455,1.5789807142223355,1.9764391969642148,1.8686571066093989,0.03808405846133123,1.4783253743419562,1.2921111575546274,0.5746204797172776,0.6516604410463889,1.3709349522057468,1.4033406765858756,0.6848165086247204,1.9069841822277684,1.9550150916907076,1.8399000950909992,0.02907232430925566,0.44093179545537786,1.9834194487481103,0.1819741033993061,1.1620720688611388,1.7824589098504782,1.9979767233913432,0.2558648672024785,1.0440446675166253,1.6824588542764254,1.998481941250653,0.27537711810757937,0.925397093221715,1.6140189756461338,0.004436984879569561,0.19884768228727023,1.9882263553175612,1.8352480943697667,0.022592062822973435,1.533428014703047,1.9631458765792207,1.8945015504445846,0.05450957781761001,1.429480077877128,1.9245037783845662,0.08869453834252838,0.6008139213271733,0.040446524537378514,1.4528814338336775,0.7372992796452915,1.8825403694815481,1.9698319489187637,1.5553017547088093,0.017413207389848973,0.39633413091854297,1.991879747495152,0.2147247096810806,1.1077507015975272,0.3061493857903035,0.9514244248044814,0.29359270621918176,0.989229305398038,1.7214896271844142,1.9939629273336585,0.2386992629452247,0.8708595664552778,1.7984296019369834,0.011089843425827306,0.16725459206010662,0.754308195278756,1.8641272522531098,0.03564400341782781,1.4862720671705327,1.283423362898008,0.566428200328005,0.07377682201605273,1.3793439547916546,1.9022252827996438,0.06750020397058121,0.5511671779037263,1.267074472550706,1.5010610303643677,0.7905716125118338,1.8554440318304435,1.9817339214718324,0.17679004351795236,0.008707310548227376,1.7880755151251886,1.9973588956638615,0.24983550518115116,1.0531054835171263,0.26772787417279265,1.0062350844849919,0.33344369223804005,0.9344463152101438,1.7583519222857202,1.124641323749323,0.2043095401278311,0.8167101785525691,1.8302255892334136,0.02071492727725377,1.5410790953575593,0.7015548625880281,1.8904092268949237,0.05159437040377346,0.08415430618692077,1.3355526187934406,0.6164632072100407,0.609147669171615,1.3280676920339378,1.8772350981915347,0.04910855038050088,0.5028694268662471,1.2138614104755954,1.547734659680562,0.01913914712051734,0.40359105427623776,1.9906852372994717,0.2091404733404295,0.9625794180667057,1.7531560567826618,1.9998404253650892,0.32754994681748617,0.9983006539079089,0.2315072477703689,1.0610270042670766,0.37529805087075974,0.8798603503227627,1.792934947871331,0.009783289839507492,0.4721912836152713,0.7631116785559702,1.859526286650461,0.03328330770094312,1.4941787434243787,0.6496985236067121,0.558271600673379,0.07039522405234555,0.06352580742785008,1.3866733523492414,0.6676509555756331,0.12059648286238989,1.2758054033065318,1.4931898883132801,0.03357485472546551,0.45606582983216093,1.160005575857611,1.5927620415543589,0.009942596464488362,0.36049852982259134,0.878731579977198,0.24386787611878613,1.0173996245906816,1.715972945391545,1.999316878221221,0.32670877741071536,0.943500931779309,1.6282373334151066,1.1156355039425165,0.41902998647955414,0.8256354719350508,1.8251347627054408,0.018918379610092018,0.5195315703290827,1.967867219445815,1.8862436292878484,1.3460495100515644,1.4457931093786442,0.5988950354892004,0.6081012891024046,0.09199005733648846,1.3366235593159583,1.4366319173146538,0.7198375977572308,0.1480081803763753,1.2227141658687093,1.5401224901633164,0.8355187458985507,1.8308588944047175,1.105668835448165,1.7457642103009663,0.0037217192291389978,0.3193280631410468,0.9333117194966698,0.2808678766834132,0.0005257758386646438,1.676637936892322,1.051969969805044,0.36824020718059114,0.8888710207899392,1.5846558075571622,1.9779211582008913,0.17743614038122268,0.7719346559803044,0.4475279671415051,0.031002165578378205,0.568315932033437,1.952632029885112,1.9102973166639337,0.06709012564824313,1.3960676189751238,1.9099008537031006,1.9529225620038209,0.11631396576561592,1.284513637328826,1.4852781604022296,0.03594550860806689,0.17798058740400813,1.9781206440722099,1.58543172337619,0.8898218831316976,1.7991137105446957,1.0510145013881744,1.6773420882602825,0.0004952126122038658,1.72227650635914,0.988092294408126,0.32002926944375387,0.003804641241127782,1.6352692548737213,1.106620168193715,0.41167042667420783,1.9920237197653101,1.53931706566247,1.964999282320929,0.14750766550522065,0.7189193032925909,1.8820051004210625,0.04599832924344016,0.09158964904700695,1.9345336509771105,1.9316150540633408,0.08822695487192678,1.345151724982511,1.8858000442798026,1.9681073594342555,0.5186927199184191,1.231548593542294,1.824593889646584,0.022833030568032875,0.21042362018385474,1.9880517438344434,1.6289814084935166,0.004544624902634187,1.7649667453131324,0.996206840364204,1.7166405429870113,0.0002727740614749674,1.683289535014671,1.9965803947622422,0.25662495343406744,0.010077628035216946,0.17113809842252636,1.160949913647567,0.45686890391499513,1.983625018029243,1.4923573758794229,1.276724906092083,0.12014140446856836,0.6667487545074304,1.9065046962919168,0.06386179878876419,0.07004303629100517,0.5574134668944468,0.6505947996945828,0.11210416945750057,1.2931984579946914,1.8590369128149868,1.9803824555407612,0.4713789074732866,1.1778876173856399,1.5780532285210338,0.012657483021242255,0.24523976934930203,1.060072022064309,1.6706406544780492,0.0008217903922038694,1.7285206293418203,1.9998228765705326,1.753785094103371,0.0030550721285742544,1.6422488983971473,1.9905545032136165,0.22108616530734426,0.01932588240497657,1.546933952537581,1.2147959150494159,0.5036997923278957,0.7276365776529681,1.443917878206805,1.3289713280194442,0.09541960811379191,1.9377234920433253,1.9282797411207362,0.08453888454813763,0.05129146169077403,0.5089358906633281,0.7024681351004571,0.13865000508852354,1.2403639664886534,1.8296918974112018,1.9897109568289912,0.4256538955654008,1.1236919899521687,1.6219032128473523,0.005449449150314312,0.3327307928352641,1.0052783627080222,1.7102842521140809,0.00010204240002475995,0.24920320461911216,1.9972889505867926,1.7886641015639606,0.9069190547261259,1.599277946456899,1.981551444183164,0.1878884466848919,0.031521608199782114,1.5002328289582412,1.2679963352021366,0.12448867435834221,0.6753153574619265,1.3941441602895552,1.3802290080481465,0.6610780047440274,1.9172769184750986,1.9472647887809627,0.5838814578624608,0.035391284162407,0.4619342353361737,0.7552357193236476,0.16778467675734376,1.1868070475114252,1.7978531961689352,0.8718083516614288,0.23931995896839275,1.069124599259782,1.663884031957496,0.0012305931079823473,0.2929158453698437,0.950468838934623,0.3068386681814348,0.0023875441693211874,0.21413270813843022,1.9917576163594486,1.8211727345427398,0.017591422928576517,1.554505830815937,1.205927382155685,0.495844841168954,0.04662815047723934,1.452028227370488,1.3203912772394948,0.09932400741947944,0.6239699952943221,1.9248680376590386,1.430343888327077,0.7131461783238295,1.8940734173429123,1.9634027786400399,0.13407705041606077,0.022390292587120997,1.8347216277030673,0.8087389564107423,0.19942061856344317,1.1326886694065845,1.7636165021022467,0.9263511987652282,0.2760367812155906,1.9985341814319115,1.7038695101295738,1.045000456425544,0.2552260792500738,0.8958081838621207,0.34738091269860294,0.007671426495496014,1.6065153415505786,1.983245498625796,1.8512132865079942,0.029301785838490635,1.5080671165954596,1.2592457102068877,0.5439305059132863,0.6839086795478291,1.4024650294258165,1.912773223401548,0.07686637302458377,0.5737548125348861,1.9443188548917927,1.4791653457542877,0.03782297888042285,1.8681827280793883,1.9766452070583655,0.16278924077038415,0.012327562179074936,1.8032890961871662,1.9952198618299395,0.38880985621058073,1.0781714880148145,1.727084715528009,0.981115401499031,0.31492951578867334,1.9999997697424097,1.7417394687515324,0.0018021122959552827,0.21977477319582817,0.8414606831752396,1.815962064354879,0.01593780837191272,1.5620320773882677,0.7256225124142182,0.48803137823019016,0.04392963703248476,1.8688554440922664,1.3117848606401732,0.593386913269805,0.632391123906982,1.3516922001137732,1.4221377173558105,0.057183268861689784,1.8980999091874398,1.2383310041859754,1.5265466446832336,0.024339386058802592,1.8396826666127848,0.7998428603891103,0.19401771532686618,1.1416744295703116,1.7694422339424505,1.999076251335806,0.3463531631838076,1.0234193578025923,1.688367634793197,1.035936362959771,0.2613102432358416,1.99845980228929,1.77738008752476,0.006590769793075157,0.1866684781088802,1.9848586392762715,1.8464173943420414,0.8074069630326103,1.515859594087469,0.6733356871945209,0.535876203920239,0.06143101167797049,1.410752778683282,1.3633869240727816,0.08039213388581634,0.5819784374968379,1.299862340039269,1.4711834107648352,0.040333853611581816,1.8726486549347783,1.184749676035858,0.15786270100258615,0.01378819629395589,0.3800109209963526,0.853837016200234,0.22766861514220293,1.0872119438377434,1.7332827696242443,0.972046364708007,0.3058610426271555,0.9685968393883388,1.6475816262697587,1.0906493156528243,0.22548104498686983,0.850423908574618,0.3827223352482473,0.014365174815165305,0.4976541969195787,1.9738781150822047,1.874328769065448,0.7539200030081527,1.4681366656534416,1.9401245874025488,0.5851159798818253,0.08175330840539874,1.3601696387281232,1.4138968075898373,0.060245675469273285,0.13512623017619907,1.958381080834567,1.5188129358318312,0.026368769143039317,1.844574605883746,1.1306130723042482,0.18868113843824053,0.006201121782395402,1.7752046464091302,0.9082704731108968,0.2636408005372154,2.670486610212297e-5,1.6949193825439623,1.0268693121985848,0.26745519589496725,1.99892200181485,1.6048492746089122,1.145089816710015,0.19197970718317625,0.79646284783755,0.42676546599982335,0.025101960949022506,0.12788158506831326,1.9599705452323168,1.8996122993126119,0.701172650307265,1.419006726041824,1.9200334480211039,0.6356027131884321,0.590236462524564,1.308503988590149,1.4631627008848602,0.04292370172956694,0.16393614519989896,1.972586482640891,1.5648831393302527,0.015329988305840425,1.8139621401737054,1.0760839036099796,0.2219380405158684,0.0016009659048992209,1.7394204800019515,0.9629796282932769,0.31241959247620976,0.001929946653012271,1.6544673760273056,1.0816115024544248,0.39154493831573656,1.9948769076998762,1.5602990143060576,0.01287365167438026,0.16090691998687046,0.7431135295021324,0.4725314855056765,0.038768858177769094,0.10237767444058121,1.9431777297129535,0.5768791883632157,0.07819872362737124,1.368617438059782,1.8971770961705272,1.9615089030768944,0.5408619884982421,1.2559111122976678,0.12078721644176682,0.02847827483669574,0.19525889733974533,1.9838687208656163,1.6092555546625615,0.007250688778993375,1.780903265298595,1.9981322077808858,1.6988959261577108,1.5546896618978678e-6,1.7014139435976485,1.0178000502928313,0.2736604315435468,0.0068329443319701255,1.7658401883506682,1.136108404732206,0.43594982073131605,1.9878416548723683,1.51406474368365,1.2525002785691406,0.1323560744141058,1.9624719627668545,0.5198828414104305,0.05532478987021017,0.07957161838818738,1.9235501402792077,0.6271699943494466,0.10082881809991473,1.9350157923793139,1.871624227906676,1.9751222185801145,0.49286747968643263,1.2025490807095427,1.557374415034125,0.01695281133671256,0.3943474539177836,1.9921938861048125,1.6517968180294016,0.0021551533533481493,1.7454973415732127,1.9999801606002237,1.7370415661918028,0.9867351766156847,1.6612992679870688,1.9936861688226901,0.23708432518986644,0.01472096166664938,1.7999289109243206,1.1901962255154734,0.16587619426575262,1.9778373881818792,1.8653798824286354,1.3051474111640284,0.10641298164310842,1.9461532555106007,1.9186458330176042,0.6578332342294166,0.05953196180012854,0.5309718833840762,0.6785813619660278,0.12616142232297012,1.9530439189773616,1.5032180747305381,0.7930112571881595,0.44639718629493164,1.148578276424301,1.6020370772627057,0.0083819516608441,0.35164978011724735,1.0303945514077422,0.2514872024154643,5.869694829840899e-5,1.7078507835001806,1.0087293235753172,1.77297198618853,0.9319575773070765,1.6191970200924612,1.1271157920449235,0.20280120496774334,0.025570290775627447,1.5218246247940024,1.2437124008052987,0.13690196440232016,1.964894176016745,0.5119450970284614,1.3568774059873614,0.08315561510383618,1.926990831229194,1.9389167393205118,0.6068529917062139,0.04231893499563233,1.876034949750864,0.7309587714451246,0.5007067236820204,1.9682076182721904,1.5498198229688243,0.846937833536059,0.4015907774140388,1.9910218097708887,1.6448902830671672,1.1142872771053034,0.3109007595056146,0.9755718399850353,0.28895260769949493,0.0009676205819264538,1.6680767399351488,1.0635164722959909,0.37724770692977017,0.8773844833412525,1.5752337405967831,1.181282557164132,0.17091411073048135,0.7606891042346402,1.4742911363303326,0.03392448151077865,0.11052182441165426,0.6473633531138178,0.5605107393754447,1.4075347856192464,1.385421340607091,1.9050422836706398,0.6700045111827369,0.5570543747118157,0.027984272698532542,1.848290158243901,0.7841447995255457,0.45397447934620605,1.1575429075178898,0.17307372995875903,0.901324446866493,0.2589376941753563,1.9968596155549534,1.6858052347181576,1.0596722527841702,0.27222286556484676,1.999221588904347,0.3285551060637416,0.004879192432937551,1.626294754011522,1.118112718673314,0.42106197246080224,0.023572101857111782,1.8265413195549431,1.2349044673233558,0.14151888094001808,0.7078387728675648,1.4253321390799982,0.0495295206420846,0.08681506129380501,1.930355237727786,0.6103972915068956,1.4569672964453035,0.04496938383884108,1.8803735804337454,0.7222328857900349,0.508587055801013,1.2202818136229505,1.8179957827755473,0.8379795925972429,0.4088833455389531,1.1031881644493489,0.20513234886473808,0.9560076351426642,0.31750288029826235,1.9997013034860907,1.7246589600186086,0.000609758841504715,0.23573234688876932,1.9955580874473204,0.37017566996358475,0.8863925092742038,1.582630403846824,1.1723539706065318,0.4666162689179374,0.036868206738080556,1.8561461443382017,1.28782035884435,0.11470386461901605,0.6558665485627935,1.3750947820732482,0.06799125245854831,0.06585292706370449,1.9088633203329075,0.6614548165740044,0.11748425021692632,0.030155289987014444,1.8530588646987773,0.7752961051406194,0.1794035512527159,1.166494574001834,1.785242874801562,0.010889185986913463,0.36556884620856933,1.0485232835269984,0.23957998737098962,1.0108230449550326,0.27847412298539875,1.9995383327107938,0.3218603084752709,0.004025114534427887],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],17:[function(require,module,exports){
module.exports={"expected":[1.0000000000642069,1.872101131199922,0.19040169867205892,0.7451642934758277,1.8837532652862996,0.16859891667489135,0.6622542510687592,1.9210102827059492,0.3989763511787636,0.8196286696313964,1.9979980384803384,0.03434873612845479,0.14883172011771906,1.7154307062423486,0.5461376114486284,1.144442831102616,1.9250606976775018,0.4074248139332196,0.36200383148489934,1.851079775659036,0.2844515122652992,0.49555740145232785,0.85539034811338,0.07500334951875443,0.02098320371756157,1.4348467055117784,1.768361561789558,0.7989570898157689,1.9991085039302812,0.7170391601004822,0.13796780670011133,1.7005599421079198,1.5226560016201627,0.04624687237437475,0.9393759885080278,0.42451788128861323,0.3459306162696971,1.8923366278013463,0.021051970100251505,1.4351503143772188,1.7681457164571306,0.19273253727153172,0.6229233994038195,1.9899368004825175,0.8975159503818763,0.05971012389437902,1.5579939611148452,1.6699777241809122,0.11744496298546936,0.4242421620120016,1.99999997456668,1.8924887709279896,0.1172329542956081,0.00022766201918533735,1.5583682247463044,0.05986375328370197,0.8970672632015604,0.4596497770098905,0.6233412131801499,1.0814607454183303,1.5220809586611415,1.396545766570962,0.9400491251660488,0.21850823824113452,0.5839546848396251,1.9830389330122973,0.9398262376681863,0.04611138100332468,1.5222713893066875,1.700881753384484,1.9471945950451102,0.7166065509040973,0.3146613136208031,1.8725405684109715,1.2626489529320022,1.6375188806589103,1.2216786779729172,1.892388029066299,0.3460167716215403,0.4244247433021554,1.9328123861739306,1.6701434742368062,0.0072688821504758305,1.4733680662769646,1.81967782293972,1.9899051779083679,0.5457357194971688,0.19286434034208833,0.01338106742588352,1.434949262074427,1.4856076398109073,0.0056868474409818015,0.5845680075347204,0.49565574338915963,1.996378300540769,1.8510199732043524,1.5228463535936478,0.002019866869234388,0.13785465255234108,1.9107364387334729,1.9991179054776866,0.39023694540752996,0.7032586770312428,0.00020891148201807042,1.7107618205907689,1.3172636993356655,0.042017753614582265,0.4249763339245536,0.6623614517526786,1.1230184946240007,1.7404295050767173,1.3578563954095741,0.03054195899494394,1.7588472497170118,0.6220921604659961,0.6362978885484711,0.25537222296462336,0.8832041354893692,0.02086914469497092,1.7300620528245374,1.9597612123804802,0.1107662603621965,0.28484314986132053,0.8404926657941678,1.8988908685263286,1.699919099889303,0.0006385156290205085,0.09186998637169552,1.8653040733218573,0.7980778449194945,1.916946878746062,0.14570530136127102,1.0671019027702198,0.07466263595809497,1.8428880773648646,0.9544276922305646,0.20960595543535832,0.5707031727505785,1.0240215216692305,1.8034194962285797,1.8189044935898433,0.9975404344260623,0.1839286417555468,1.9424794755539634,1.991957264341662,1.8283437475030024,0.06494724985176559,1.2487289779897417,1.658712045984076,1.9271912256998018,0.7722137996447276,0.35766469460925265,0.0811014421865528,1.2067375022560596,1.6807608431431293,0.00910466641659613,0.8144073286742236,0.30360271008810324,1.98776188258392,1.9519885274440587,1.7117099123028985,0.015830877177447356,1.4219391992539032,0.2733084100453168,1.9801187249307226,1.1216799009601397,0.4832750961757045,1.997499314359573,0.3677209518824538,1.535065611684008,1.9706527604130284,0.6375545784417112,0.44684248568754237,1.9996189622733547,1.342264708491463,1.5709921989843276,1.9593815936583825,1.5808712264497071,1.3308852103447892,1.999879537138163,0.4368156790256922,0.648843726282446,1.9676757731911825,1.545235535082444,0.3771293648190993,1.998280554341634,0.4729667850497762,1.1096764515855426,1.9776494774649014,0.26505995447237907,0.8689165347570891,0.018044473295158125,0.510098057800189,0.569485442999512,1.9858049671353637,0.29498114181247215,1.4498765061732037,0.010803991231332022,0.13112647578038805,1.1948991130878237,0.08593574460819942,0.32621351032033097,0.7839971072319281,1.9225968636303814,0.15327790930173812,1.2370062312154784,1.9966040426352225,0.35869897460868316,0.9688157073621576,0.20086753740439856,0.1770040610689364,1.0096249360640916,1.811909124719137,0.05514956604283605,0.7006838055035435,1.9524005521217893,0.20226080561921034,0.9665028233165376,0.04124753605137854,0.07014848127198614,1.2347574364671798,0.1520489969463461,1.921701696100948,0.9234430080050459,1.8591836379147968,0.08687671733562996,1.192628874923949,0.12998324716901832,1.9041202673760678,0.8805255719859644,0.2933419012383983,1.9854138041141853,1.1501420657250208,1.7217505254056567,0.01848472522206479,1.408841659848317,0.26349266156937834,0.12539355019763776,1.1073760250604632,1.750921675926112,0.02764897113028919,1.3691143569440607,1.5471739397811914,0.000604488815923454,0.6510113908095276,1.7786962760585783,0.03862157768405605,1.3287005819150426,1.5827533323644298,1.9552202304979929,0.6917402909600927,1.3444381221142605,1.9995524096726935,0.44877178370083226,1.6172489309668756,0.0013250573190904946,1.5331092089606468,1.3845947332066346,1.9973330923599701,1.2461153955845905,1.6505965813056565,0.004472517330422865,0.27490005401212103,1.4240360820538274,0.015423381264863312,1.7100824177092808,1.1666437215318863,0.009471441131852054,1.4582401830355638,1.4626888163571885,0.00879576289385553,0.561031802991756,1.2090010490767746,0.08019100697167336,0.33692259791802204,0.7699611513410194,0.004011568019978706,1.6467825395497853,1.2509696802961527,0.06412938757970865,0.36981307652704853,0.7282161888375387,0.001079694201289061,0.18526825952226655,0.99522635501378,0.04980828322251263,1.802039503087359,1.0263348825975966,0.1676257550807727,1.578673401160656,1.3334295118407011,0.037254328027835015,1.775542259755089,1.0694106004301667,0.14450474874624364,1.9160210789781966,0.8003448118935804,1.8664616893339305,1.7476026771236806,1.1123572296985507,0.12297477682097946,1.8978744896408757,0.8662428371212582,1.8871809407512803,1.7182727167175047,1.1358914640436901,1.7316415049324376,1.8780580497624486,0.8855027034239489,0.2538296060571489,1.9739993725376623,1.0930498879250292,0.0848450669447709,1.8566086135950806,0.9284407888755032,1.5591688275823041,1.9633258895667711,0.6645405556200932,0.4230846289769886,1.8335660724075442,0.9715119588380844,0.1992488592990892,1.9508608307392166,0.7054693329459749,0.3884044655285973,1.999018054645662,1.0146361103381722,0.6220294682795282,1.936627378343245,0.2554174227728192,0.3548617362605486,1.782875974485575,0.49765531927422846,0.15062223217061543,1.983297717830495,0.7888930385181657,0.8404258185809048,1.9914869959919623,0.5354027207846408,0.5436753867737916,1.9029644168984932,0.8312328168838424,0.2914358774847232,1.9169738953773088,0.574014171810932,1.0670343406906897,1.9953216828876008,0.3477691549588665,0.7559728871861426,1.9765835692138198,0.6134178634832286,0.4687143835903601,1.9985617780832037,0.38105782902282814,0.7143880858801874,1.9479340944012336,0.1937013684501978,0.980828763637247,1.9999447663616394,0.4154976004072326,0.673334460384261,1.954418591244757,0.21995412932730873,0.937739354980865,1.8517629396948025,0.08112815726873235,0.6328883614796139,1.9718457702172012,0.7356430129784461,0.8947657375324685,1.9971325925387802,0.09899395818657242,0.593125010080662,1.7117574783442544,0.015842880609705512,0.8519878328391972,1.893732640424552,0.525073008449194,1.1216126892956364,1.9885311235426193,0.024402293216348347,0.8094851984651914,1.5351228164168829,0.13971624077742506,0.5159409471179361,1.7696253157773296,0.3389441886804171,1.3422010828779203,1.9290568419630096,1.7847940110171656e-5,1.035649856898291,1.796438496197784,0.046945021678239995,0.7256212642104309,1.944142813380513,0.18683530778411706,1.5451787698870882,1.821770474881049,0.027095519937656798,1.2599798654701766,1.6396468219304954,0.0032209050315608057,0.949421944000949,1.845574139876848,0.07657435054076689,1.2181055091004847,1.6721933044449007,0.007605474197872719,1.4709305209225199,1.4499369803777378,0.010794066616954145,1.175825524097179,1.7034896541555506,0.013835680538445194,0.8635701127358937,1.4880230259290346,0.005396170408200951,1.6576456621253368,1.2370720159037214,0.02189993722956396,1.3931805889552376,1.9073872567357402,0.001848020196457023,1.090363802501791,1.2787376009668718,0.031783246514243246,1.810516361085686,1.0120066057921122,0.0001562147665409297,1.5903013870947251,1.7893081325114382,0.04122829090793634,1.3125070966660537,1.055107492872093,0.00032390050722419517,1.9216754275528034,1.3604370730302133,0.05693015081702457,1.757043483827423,1.6306088156199148,0.1299498643921152,1.518567826932161,0.8286413858997279,0.02031092137977708,1.7281696014443546,1.1409218356766542,0.006233040397250811,1.4812205803672123,1.43945645468509,0.2634468591380563,1.6979414825649637,1.1834756954572356,0.09071571636154274,1.8639147340890454,0.9141543328510662,0.006678194579441965,1.666415344891445,1.2256883304977517,0.07361777601795316,1.8413969507061099,0.9571901577861599,0.2079150409690822,1.9552001918598805,0.6918047086657764,0.05824270437799084,1.8173143526752122,1.00030559968221,0.0004314789372968919,1.9415515774653898,1.3087766818227204,0.3658774621663784,1.9973281479771354,1.0434204732295647,0.1582729035800039,1.5646465480618632,0.7749071417792873,0.03277228697739609,1.9932511017020609,1.0864545941755772,0.5564737542189909,1.9090297475781655,1.3895690722567813,0.3016209344645706,1.7361396004759875,0.5610926456934671,0.11488956942305317,1.9938349089503689,0.8596832906547746,0.7698952533289158,1.9795663363575748,1.171960741009935,0.48090967218886094,1.8697486742895582,0.36986565448773057,0.2425573216293675,1.9432729547170045,0.6401331109679531,0.44454100660815377,1.9996914677172257,0.9455027879952294,0.21511170090689424,1.9585978409559788,0.21106728965316734,0.40920537349621466,1.999832795540602,0.4391027738684924,0.6462559988883865,1.9683694413018202,0.721849426951997,0.3749684894167207,1.9981146526318083,0.4753187600524046,0.6062575103672099,1.9782270921830514,0.26693791078800333,0.8661757313558354,1.887212183677569,0.5125105388025863,0.5669912969211752,1.9862654542237457,0.8056339782500938,0.8235728310714511,1.9891161883675832,0.13249864823576651,1.0929824669491481,1.9924695778253139,0.32825933823859665,0.2794761390214293,1.9236600414534635,0.589543113521642,1.0499676294833495,1.9968279246722427,0.04270363879114325,0.7394300004309907,1.9727629845172916,0.17857795138770682,0.4543089514297145,1.8135202789185667,0.3945756062293905,1.2737909419911562,1.9532398698200355,0.0021740062383137637,0.9637393389384495,1.9999783136238403,0.07116943681746812,0.657224681797016,1.6615142931595157,0.23076507617763597,1.4835241414542204,1.8605951974375308,0.08800752021638447,1.189914761143633,1.975731722994176,0.2590295046425386,0.877780670630515,1.4754647736606539,0.10654171053605821,1.1474076722094892,1.7236616836146506,0.019017685309714927,1.4063165932003683,1.901271015789488,0.12673753822858336,1.1046264371847259,1.9909683590230691,0.02829842081575029,1.3665430464536,1.5494863426731484,0.0005121783664074897,1.6018081398820203,1.7804281660490764,0.03938630913269081,1.326087809658255,1.9352452820937116,6.18442353652604e-5,1.0185601457753197,1.3470327664164075,0.0334433489524677,1.2850261207232307,1.619422113673247,0.19690422055848944,1.5307677135149524,1.831391643746116,0.023285120745847987,1.2434343454260144,1.1267198304837174,0.004737554959962087,0.932355847283973,1.4265387188966914,0.0832701121661199,1.7081326995385875,1.6847520674867558,0.09677311003714162,1.4557806746472473,1.465138422948823,0.008433607533663401,1.158970784222388,1.7155366208319505,0.0168137067946591,1.8490550271067803,1.5028730710758653,0.21674389708673025,1.6446711466999249,1.253645385813222,0.06315867684404564,1.37740460200392,1.539672485069928,0.0009550528117456825,1.6111118572970902,1.2951146998139076,0.04895010817903078,1.8003848844617387,1.029098987111331,0.16609644469096319,1.5764160332478685,1.33603516489767,0.03651028469477202,1.296222274039969,1.072168830195348,0.1430761878717013,1.914908386274354,0.8030550661944815,0.3119494210442917,1.7457633455469073,1.1151044550099487,0.12164962227307041,1.5038748815450707,0.8455089334860304,0.01702608218596735,1.982347925065997,0.5871465294533393,0.10185659662957802,1.8767314121084415,1.4547483860734274,0.2519915367703107,1.6855965579910812,0.6267996160608696,0.08373392164802373,1.9992328574386469,0.9311991377650535,0.004850947378651882,1.9625802186365893,1.2423096493202193,0.4208282375767014,1.8320353542405188,0.4272963233485847,0.19759559508702518,1.620331902050905,0.7081129660992047,0.05263127137750301,1.9988917249290679,1.0174009224134868,0.6194708755171654,1.6913349349904483,1.3249915538698935,0.35275143512847196,1.7811525577176168,0.5000481873035761,0.14916606615711614,1.983797230638214,0.7915966912139325,0.83769669740735,1.99112316518907,1.1034733195800313,0.5412166512243752,1.9017727313545518,0.31771244653450204,0.2894873581194467,1.9180735442638435,0.576517526951724,1.0642751399665535,1.4764844279001361,0.8766300341420395,0.7532922512149469,1.9759849426496854,0.17048929454369466,0.46637378759512527,1.8051030062296292,1.482508948399151,1.287545788697703,1.9488110827274605,0.6561357416715392,0.07159962825844501,1.999970005917603,0.06595528167013787,0.002251086241074951,1.6506994233768464,0.22168733650885886,1.496018458215862,1.8141939717756153,0.4533377478318794,1.20396499444621,1.5953800239655043,0.7383108168519397,0.8920163293197813,1.4628088728148663,1.0488096335904111,1.6789645120698466,1.7136970785276622,0.2786726530367438,0.3291186653262216,1.8949696763092851,0.003999458676409717,0.13307596250669307,1.98894493188409,0.0250131583280937,1.8269689909438172,1.9864562888177644,0.1411292533096098,1.6131912963231998,1.8877464949163432,0.34102152023300725,1.3396015523668794,1.0264702644771408,0.605192020685367,1.032886314088567,1.3335571879485517,0.9078729737134421,0.7229632712433451,1.6081081979106138,0.14443462996518042,0.4400630100122004,1.8233429753152848,0.026459912929251983,0.21178025406994816,1.9582670389915509,0.0034464715463108364,1.897814858543739,1.9997195942549992,0.07763908831675193,1.7181784837597638,1.6742379949636645,0.24180084960330217,0.37076634425941357,0.8856372429236188,0.47991905035945726,1.1731027652248052,1.1976768842557166,0.014297834009111665,0.8608313251348724,1.4904346805509943,0.22573361442571738,0.5621347085901028,1.7353543821359474,0.300791581136568,1.3906366243979837,1.9085459739984203,0.0016838055412068398,1.9508188906530979,1.281392108623921,0.03247855052105508,0.7760369500807381,0.46095623317357826,0.1576474997933981,1.588067136991632,1.7910029182633411,0.040446159111448554,1.309879229786181,1.057868244541691,0.5823411095440719,1.0014650100234304,1.363014994695733,0.057853435310230905,1.755233929471494,1.6327524510412461,0.12859006633101955,1.5162015280871346,0.8313663049199144,0.019760188912039678,1.2268176761028644,1.1436588668052812,0.006545093198490948,1.8835340912144551,1.441938621789456,0.26157937414862875,1.695958528676919,0.613542767182258,0.2626631524173023,1.4404976160008078,0.916909617511889,0.00636295650423957,1.966364906405777,1.2283812894306412,0.43257004905730656,0.8297837625086475,0.4156074918456867,0.20623018290144324,1.6315082113241908,1.7562854572839577,0.05731639853469028,1.9994636498393366,1.9212250009840481,0.6327623918356745,1.9406164801343286,0.24774682906755763,0.04089945699340014,1.7900194769709605,0.4876885134075898,0.1749976449835723,1.5623622085753746,0.7776022050071012,0.8518538967838537,1.2798508736502527,0.11859939814297404,0.5539971399432193,0.9700422591293913,1.392114291550189,0.2996444987505673,1.9122984977210045,1.656771804328458,0.1136060982270829,1.994137683412963,0.03481151793088566,0.014028539697943598,1.9790064578754758,0.16257099845997158,0.010624840747036512,1.8683807546610651,0.3720151751933234,1.3012415806881887,1.6730512520753957,1.7192949376661053,0.9923935279487313,1.4120708263015214,0.9482640513113423,0.68428742749126,1.639750916200763,1.2588601475819696,0.4069766368759582,1.8456464320273982,1.5442064465853194,0.18751067032303848,1.969055705116621,0.007622154342042831,0.04729672864843071,1.997941119189865,0.09403698474628142,0.6037172192512661,1.9294851264084851,1.3411114396705928,1.4323355792120087,1.7703650772862867,0.5149267472214367,1.133084318811748,1.9867184001807314,0.808347151302466,0.8208517165524191,1.5253166975401786,1.1204618025301196,0.5260936382014096,1.8942521513370365,0.3303103023852203,0.27756144541394967,1.9247161568353865,0.00015383022834070115,1.0472057283750917,1.9970441848156573,0.8936128353355586,0.7367613551072854,1.9721182949245346,0.1801581224208364,0.45199386751903003,1.815125212821736,0.3967787228174945,1.2711303901092361,1.0982406669243778,0.6722388746029719,0.960976131814734,1.999956279915056,0.0721974943386825,0.654628348829263,1.6635854508130434,0.23253486311781768,1.4811018588753395,1.8620001767222218,0.4677324963949574,1.1871991952469907,1.9763334790909086,0.011984399804901735,0.8750367037821174,1.477895567004104,0.10778708921968694,1.6663143654628905,1.91743582268656,0.2906182197710788,1.4037884197957093,1.9024655934961985,0.0026175874580891545,1.1018760493197899,1.2676117265299118,0.8392813719893326,1.8172363120179207,1.551794544111336,0.1500108830869048,0.4986581615313267,1.7821540887704985,0.04457910189722125,0.25619186499853297,1.0435557741973698,9.641945925009665e-5,1.926100797004434,1.9989660155877615,0.053146566741560375,1.764549407228584,1.9642700778967037,0.19855491382761215,1.5284221597408931,0.8172583094987538,0.4221380056000813,1.9873053235360754,1.1294622190049404,0.7020870476486257,0.929597275253485,1.4290380943614842,0.27131886466222965,0.6253103556745336,1.6867646352269539,0.09558985598789271,0.35757150131821624,1.8775026188664583,0.008079033836624339,1.9699511269832946,1.9826470361155728,0.017322399360601315,1.847590932626877,0.40403867995355625,0.12241833403056024,0.5468292667427301,0.6808226921056537,0.3131155455219795,1.3748424830694366,0.9887399721320415,0.6461293295775867,1.0705671680843871,1.2977555804393393,0.37486277926514644,0.7594085738286555,1.5777274440392242,0.16698375299001678,1.9782551898083187,1.8013464817058944,0.035773608346439945,1.994526092696529,1.0749265081469899,0.0010265032306973065,0.9843694460887114,0.2970411748328503,0.0637215053857203,1.743918311753398,1.6458978519714944,0.12033118372193663,1.5014844709059028,0.8482414902847794,0.7811658982282268,1.2101347141040115,1.1605559155232656,0.008642991452579296,1.8753980708365094,1.4572093579689451,0.25015918686671,1.6835809479495063,0.6293664260384128,0.0826297822571016,1.4250858118081338,0.9339580127161625,0.004582718724007728,1.9618271876758229,1.2449914824169335,0.4185762746092897,1.8304982742082312,0.42956529067119953,0.19594846617760653,1.6181607031683432,0.7107588310638258,0.05174964116072445,1.9987577575387463,1.0201656014387774,0.6169151923367164,1.9346756380636871,0.2591204571620198,0.35064608295456146,1.779423168141777,0.5024448780383579,0.1477164057455964,1.9842892211869394,0.7943019373921926,0.834968817228829,1.9907517561120054,0.12680353407677802,0.0029431630014703503,1.9005741507230587,0.3197366220583997,0.287544271438817,1.919166173424402,0.5790241201020798,1.0615154477851996,1.4740515211409373,0.039423951962901715,0.7506135016076525,1.975378853560466,1.1914910486629655,0.4640372717847604,1.8067400439884334,1.4849290862947413,1.284896306650995,1.9496808163039505,0.0014785293814180145,0.07057569396260932,1.9999875995551433,0.06694644779926917,0.002069467528699298,1.952753357683634,0.22342649478403953,1.493615536693176,1.8125854241954489,0.01492005297243748,1.2012571792346427,1.5931560925548773,0.7409806216395953,0.8892677467661959,1.4652583056556265,1.0515713154039594,0.5880793857304116,1.7156312216777498,1.3571316278179286,0.32707068192528,1.8961998691236306,0.00375620678693267,0.1317010075934424,1.9893511786064826,0.025631478333297042,0.8040590958982514,1.9859989632350665,1.1374150777514855,1.6110046535747746,1.8864702055878722,0.34310389043242595,1.3369994252121886,1.0292343585859673,0.6077340624566788,1.030122519825226,1.3361627156295892,0.9106267306215985,0.720307396540023,1.9679675232987341,0.14300638974084479,0.4377741148225154,1.8249091803474724,0.02583174975220559,1.254635747436562,1.9590538656564094,0.6884378032517728,1.8965937221535025,1.9996502937213252,0.07871087860055803,0.6386353985220303,1.6762775301590915,0.24360669904123122,1.4660446464659478,0.8883847022727644,0.48228281236182036,1.1703786827831104,1.9798880253076838,0.01476752430418904,0.858093601638103,1.4928425852369185,0.11563799904028993,1.6534694731777972,1.7372254749595286,0.3027711196247478,1.3880896729753784,1.9096977443843342,0.0015272241590931213,1.0848547388109058,1.2840444647153284,0.033181252339833045,1.8072647770084225,1.980272407875305,0.1591409417073435,1.5858283904403154,1.7926916558900508,0.03967136420541428,1.3072489935239286,1.0606285537421403,0.6368314026357295,1.9195157847335356,1.3655901406949633,0.058783923595284726,1.7534186004853454,1.6348912483438394,0.12723693119903856,1.5138312822889497,0.8340925133382511,0.01921695150274061,1.9844457187259055,1.9674797632285883,0.006864742102744015,1.8822356021340463,1.4444174097658178,0.25971753523241725,1.6939702533871275,0.6160945758570973,0.2645339095795608,1.998713087469097,0.9196655374940541,0.006055315924694216,1.1393319220885583,1.2310725021264453,0.43029532223963174,0.8270596018163945,0.417853576955884,0.20455139411511536,1.9615836488549507,1.7580916519089134,0.05639730058949988,1.9993692760141895,1.9222972114648877,0.00028432302371628193,1.9396741907106725,0.24957160025471536,0.04168584664462971,1.874968196511468,0.4900651942379456,0.17656347431869368,1.5600735691843428,0.7802989687213178,0.8491198111842326,1.277195125874847,1.0919628727592672,0.5515239358712181,0.967278450542397,1.3946565126797836,0.2976734180582128,1.9134274162614857,1.658854474418629,0.11232940452986129,1.9944328565519331,0.8651610305599081,0.013570764552096382,1.1933903354082966,0.16408548980225768,0.011030636563274854,1.8670061952650077,0.37416949756367923,0.23895815778581064,1.6710035749886227,0.6452984110697825,0.9896284728070669,1.4095497665229995,0.9510257102081635,0.0030934145083498787,1.6418737266834866,1.2615300710151862,0.4047524345999627,1.8471190874552867,0.44368981214304726,0.18590175198309744,1.6046325233482241,0.007966705953282194,0.046460031734855356,1.9977599553426657,1.0372545464156457,0.6011799581720196,1.9284616155688983,0.2707106243204226,1.429840542433627,1.7685990549888344,0.5173466645820535,0.1388987104686774,1.9871638015430293,0.8110617897608385,0.8181319718276338,1.9882873521748157,0.13526288173453238,0.5236605148255682,1.8930111459598011,0.33236638707822697,0.27565227567840755,1.925765201700936,0.5945923669803389,1.0444434663248596,1.9972528214119087,0.0443171364087962,0.0088987650167075,1.971466172371652,0.1817445620861039,0.4496829737442093,1.816723914157083,0.3989864517246172,1.2684677651242904,1.6473742203282484,0.0025537324892208613,0.9582132230732808,1.9999266003928,0.9824342494295415,0.6520346566241878,1.665651534594161,1.2917293554829692,1.478675897720557,1.8633985650261902,0.01212194152613777,0.1680561049472299,1.9769277699975945,0.012414991366470396,0.8722936924215475,1.9951652571529066,0.10903928989506706,1.6642499154639876,1.9163321012398704,0.07252935443550146,1.4012571589651277,1.9036532708176304,0.5451047984194953,1.0991248824955275,1.2702750133596656,0.8420112042427084,0.7873237434739492,1.5540985264469047,0.18066722236520072,0.49626752177938405,1.7838740310261851,0.04376634755698794,0.25434649169629076,1.9371887109038664,0.00013864009366004737,1.9250540258679165,1.9990879095939278,0.33097044234847606,1.7627641558729845,1.9635338409306324,0.20021173506428736,1.5260725655729193,0.8199776096416271,0.42439696071350197,1.2380666816178731,1.1322036176389072,0.7047277931089648,0.9268392415326334,1.431534189337612,0.2694279191085729,0.6227480653199017,1.6887719518632731,0.09441351719224289,1.4508512218038683,1.8788253590125321,0.49698444306841516,1.969274654781922,1.9831561767416392,0.01783860562468098,1.8461203573414604,1.5076455589039068,0.12374738396892337,1.6404335894293771,0.6834444446949441,0.3151278006336239,1.37227749803394,1.9166640152114773,0.0007286874631404761,1.0678086275555432,1.3003941843816058,0.372706917434084,1.7970573003254695,1.579982244634602,0.1685167607015824,1.9788249584148165,1.8029975406655303,0.03504430461557495,1.2909356423862892,1.0776836131994791,0.001155580130265732,1.9126620228538382,0.2990105315532483,0.0646963724664914,1.7420675898505538,1.6480063749506801,0.21946877074581572,1.9928207003734673,0.8509752074515179,0.0160249469910696,1.2074304858936813,1.9716626256638419,0.488451804330055,1.8740580361415766,1.4596668339741534,0.09865757279184473,1.9403144708861044,0.631936069935028,0.08153265721441716,1.4225812898357058,1.8933842340704894,0.6952826267599233,1.9610668024422573,1.2476714422725725,0.024232192421991927,1.83941680413629,0.43183861962189074,0.19430748516502416,1.6159847777377037,1.76912957767123,0.9177951302725369,0.27014318736281295,1.0229301262748998,2.27856493916212e-5,1.036425405509114,0.26098047875765107,0.34854569583665085,1.777687818981224,1.6052931782945392,1.1445381459374688,0.443000540536317,0.7970087563682337,1.8412505433173816,1.260729154515689,1.9572486877087476,0.5363097226744027,1.8993686841685378,1.4103065544240918,1.3638427898260175,1.92025177450458,0.5815339320962178,1.2993954604605749,1.4716149897137605,0.04019638798894809,0.747936658846375,1.9747653065804074,0.15812669725097073,0.013707330686451358,0.8643389501666406,0.3875946420506913,0.2279795606639603,1.086724435034393,1.7329499523095133,0.9725355397637098,1.9999975471397364,1.7427689536849358,0.0018954791406315952,1.6548888308459904,0.2251715908549895,0.3911025693640934,0.8599514742924592,1.5607607388188023,1.1985478251809447,0.48935164750119786,0.7436524069276913,1.8696149752476838,1.3132441869441605,0.1026235618047755,1.943362849980492,1.9219762288407687,1.359713075360577,1.4143422367662628,1.897423209461352,0.5323895176492747,0.13033269182258977,1.2564500542734092,0.0262572485041922,0.43097741018849234,1.985534098558602,0.18896731906178388,1.608813338994485,1.7748954180339949,0.9087577838618627,0.26397198717825177,1.6984970462193631,1.6945674044869499,1.0273584952406474,0.26712216504508624,0.9133811708909785,1.7719530585728873,1.6124891559802985,1.984591149756446,0.43548951849502426,0.8058996780432399,0.02521103520954615,1.251960757726689,1.959833359253699,0.6910665246504029,0.05850396928949886,1.3648177462843611,0.07978971319711836,1.9237638039205387,1.9418127219064334,0.10058497652770237,1.4635963547219388,1.8718973882974594,0.48465053290629945,0.15869215037899853,1.2030950403577458,0.015244747832356076,0.855356963178624,1.9933408121645912,0.22224554538254992,0.0015734056335857671,1.7390909308481939,0.9634686602146117,0.30217658743803333,0.9771758508105083,1.6540972951179334,1.082099223215597,1.993748568661643,0.8589149580017028,1.805629720043792,0.012952039756012113,0.1606408129538961,0.4815731357479356,0.7524312612697253,1.466778576011368,1.304616407990472,1.94301500701039,0.5773226377096605,1.9184254130518692,1.4152948252920738,0.05972160855753528,0.6876495043236923,1.9588185436657404,0.1258904693424433,1.265207562341994,1.843751030309488,0.43846046008107353,1.9839561461640731,1.1491296128324209,0.007191984665927076,0.9098003776352658,0.35207436566823247,0.2578613566253174,8.115130358810063e-7,1.7010650641438554,1.018289333571487,0.342478535360358,0.9224220717253898,1.7661547721688322,1.1365931973402055,1.986136978200451,0.8048727841712036,1.8368850159087402,1.5223001614960003,0.1321128738515741,1.9623390436514487,0.5203121702115158,1.4176113213758146,1.3563565164427167,0.083378355691621,0.5888355702271426,1.9387247163993058,1.3166561069476281,1.455539569197882,0.74017932277475,1.9729425821613171,0.15382314770001437,1.5577806473880433,1.8130687309653921,0.8463868792368299,0.40203757258674333,1.6521678697252997,0.002123162039225912,0.9645148921492048,0.3113049031822481,0.29570770745868147,1.7304996929177938,0.0009432544951379906,1.0730550373037766,0.38475670116547167,0.8679014574834146,1.8002224792860204,1.1906766328987477,0.16560637267040546,0.4738372866700691,1.8656250066114706,1.4747819099919963,0.10619341850404018,1.9459947261182613,0.647885139150722,0.07490571492662335,1.3765816102803186,1.397762519592236,0.539497758986207,1.9562026296152717,1.2641979947508355,0.028115400586156913,1.8485852656854602,0.44598972050162966,1.982297221496381,1.602427745889627,1.7799427076480399,0.9007696353066629,1.9975711624754164,1.0400176486520247,1.6853993530432305,1.707505031359791,1.9987987571895083,0.33567084853857154,1.766827155869438,1.6188126807160312,1.1276011699970787,1.9876016549050348,0.42060745373390884,0.02345191034345684,1.2441869790723357,0.13665492164218196,0.5212310336118156,1.8917633124873907,0.052544592376252086,1.3478659611099866,0.6285959417635971,0.5971216530774834,0.09710643538387376,1.3252476971113971,0.04513484925444666,0.7314301231340681,0.5002827832421701,1.558649265474533,0.016672291496769187,1.8183163707007015,0.40119877607013743,0.2172266042483394,1.1037427200593983,0.002755036287436341,0.9554506338396985,1.9998892752840054,0.9851990541652869,1.7242746368317894,1.0740991105496154,0.2360920278767774,1.9956104254656921,1.800849876512376,1.5748333781745516,1.181763790170145,1.977514591170198,0.7602139893703428,1.8610473882929948,1.4827461729523777,0.11029830298768728,0.6469054689102374,1.915221373382535,0.07149901644784673,1.3987228300630181,1.9048340386726277,0.6704665007530572,0.1220208534230387,1.504545065973424,0.030291328368106663,0.7846226517701318,0.4535645718480229,1.1570596368070567,1.5951623826848726,1.7855879796652032,1.9976435380365962,0.2525068197709527,1.0490801671434837,0.00018850581576990155,1.0102655280077932,0.2788602743266154,0.9304249447568524,1.760973072309941,1.1286394528810337,0.20187467160021488,1.988985059338198,1.83246559763894,0.021539017964856133,1.2353801090102585,1.9644895521453578,0.7073707962642282,1.8876217774848496,1.4340269847395635,0.08661573301226833,0.6201886594893059,1.9359286847705426,0.09324410264465233,0.04482439855469267,1.8801413795300534,0.7227030247969023,1.9685907713633162,1.2198044448831014,1.5426311005345412,0.8384625091855729,1.9912260405074949,1.1027014014434384,1.6383074574096794,0.0034689763796655892,0.317145292379303,1.9997131437160627,0.9942701010143656,1.6669328223272322,1.0650495685519132,0.24197748318998946,0.3705558519786212,1.7953843602580204,1.5822326106000375,0.17005612605685783,0.46703027187551027,1.8615792964143973,0.0343223790785413,1.4906707094929004,1.9485656853206414,0.5618912121537833,1.911528369313192,1.3840033039208304,0.06567839101700135,0.6714551156937559,0.5556775539584027,0.11771449488247065,1.4966921646612228,1.8528034057823306,0.7757729805547067,0.1796833243770657,1.166012021471169,1.5878480420422365,0.892787876649364,0.36519065471445833,1.0480344912197055,1.6795340630351665,1.7131532740564093,0.27813538061048926,1.999523344756029,0.3222200386637948,0.004069096730293653,1.1196380989453336,0.20737297152230472,0.8216680593902491,1.8274050756073876,1.536802109868984,1.226553868915728,1.9668458225737586,1.8881034699734451,0.05000813879988253,1.3403313814742734,1.929790850776783,0.6118126328636879,0.6137925958421069,1.3328254794929997,0.04754920536528495,0.7237090320962098,0.5072496542933285,0.14483664601593882,1.5435101779403366,0.020133133263553815,0.8295168632783405,0.21225806948010184,1.1117206395563848,1.6312981730722191,0.9474354762026176,0.32380056177219463,0.28367445551835746,1.7187182906706506,1.6736646660801706,0.24129507370860104,1.996329421954571,0.8848663163485838,0.010504554781408992,1.5895839296117253,1.1638939659800582,0.7680121583909922,1.8569389782903094,1.4897582200911963,0.11399049971986386,1.9513984926627947,0.6639371220223604,1.9077603532380762,1.3913508981236897,1.9082214773389499,0.6629007726208986,1.9510589846063962,1.2806473292966674,1.4887983892777614,0.034882397738303816,1.9809661865522599,0.17452903888862592,1.58869464069542,0.010664255752100171,0.8837731426941309,1.9962346083659734,0.2405785891264679,0.0003765008487671695,1.0022410613997097,0.2844428244168167,1.9997622717479138,1.7557423699078019,0.0032925570914256186,1.1106268996838367,0.41493441210676285,0.8306014170631972,0.01991399725575671,1.544433663454149,0.14540764975460185,0.5062922757766832,0.7247669210938175,1.8791199202951567,0.0899119273314054,1.9330916808702936,0.6128271245095042,0.08988969469235653,1.3413660400396803,0.0503523917929144,1.8886087984380888,1.9665641965752672,1.227625677708001,1.5358732315132824,1.828022656352188,0.4149779235013721,1.9886649200949158,1.1207306838915603,1.7557775034770415,0.938378748491219,1.9994887628207325,1.0022947126856971,1.7123813391615088,1.680341072241124,1.0469351704198764,0.36434066914516194,1.7904950227862537,0.009233865979035638,1.164926630516666,1.980976603100483,0.45176732171101386,1.8522281404613494,1.2805958336680971,0.11823307992745036,0.5546918658424329,0.6724947827697652,0.06528668229214685,1.3829868874542697,0.07229857790011751,1.9513819686662723,0.11396562459571447,1.289342641096598,0.034608827864915814,0.7679599709823004,0.46796181801473047,0.16944268352127145,1.5813374764984078,1.7960509351648826,0.37141142027064744,1.9954071388077181,1.6736250147148521,0.0006665362385279705,1.7257536733667265,1.9997388973720265,0.9474890535307173,1.7497706741875299,1.6391542632156906,0.21229112018063123,1.9913709099389774,0.8395487149797064,0.018152978416811294,0.1448644579237145,1.968863850811672,0.49842382006982877,1.879618396841921,1.4493647725477945,1.3232162360383284,0.6044298546455621,1.9297711009788223,0.08616824900022813,1.4330352256199597,0.05323372715618535,0.5142482557972511,1.9641982864642817,1.2364496065106674,1.8274352053562541,0.8216152682346289,0.42235908350105567,0.20121207568495614,1.6250544788781212,0.00503731846747113,0.32973417550368855,1.9991576051684574,1.7131156629452844,0.00016774294683541413,1.6869614913915174,1.99698426022634,0.3573639539017097,1.7849065311234749,1.5960464399682803,0.17971400932027848,1.982697240285027,0.7856975151166988,0.03002308750878635,1.2718772922218067,1.9538391235213892,0.5465878339542429,0.06565926932551414,1.3997318827178136,1.3745913598122794,1.9156642921609868,0.5710576607685116,0.10979638862692276,1.4817820519677554,1.861606529871465,0.46707566895310504,1.977281926070757,0.1644246768442218,0.011864910452814681,0.8758067108691078,0.37849248137302327,1.065103106250337,1.6668928447336968,0.0010388093403294052,0.9840986215718402,1.9999050469387512,0.9565501302768596,0.0026740019499157386,1.1026480335680313,1.9912331306011288,0.4003177010722716,0.8485092168436992,1.5511471654953448,1.2098698958183067,1.9710700185965688,0.7324904134705983,0.044808516971949874,1.3242067768423924,0.09758007442029581,0.5961146037013949,1.9263933043058072,1.3488975761471933,1.4248406281065082,0.7073194937992728,0.5221975520881859,1.9617530300050474,1.5290808551590334,0.0236894521139438,0.42150481627252034,1.987428289675321,1.1286926583531893,0.004932915096517165,1.7675330912780072,0.9202812508646234,0.27185056617196435,1.7067268264945432,4.2734468738259146e-5,0.25254245985039525,1.9976472176401614,0.9018648256773499,1.779253447490522,1.6033058204753776,1.9825027938411663,0.4450738272477266,1.848002489869383,1.5045913871011303,1.2631363772963136,0.12693557381794718,0.6800873269892448,0.062464828363329006,1.3755618396918674,0.07532419987877026,0.6468552738087431,1.945637370764031,0.10570040979491724,1.473813013908301,0.7601619035306745,0.4747735056397162,1.975319083823726,1.574789475970517,0.01329882480221567,0.8668106200503056,1.9946068818093405,1.0741526143728195,0.00099165004107582,1.7312508387143013,0.2964894341636122,0.31050735652418593,0.9656147826241441,1.7376426775992688,0.21725999302336663,1.9923909033061125,0.8474744718845539,0.01666253681432972,1.5586937633762226,0.15441015211084042,1.9731962745407672,1.8757729532132106,1.456519030805939,1.315611987536816,1.9391034762353527,0.6286457561075092,1.92293927235342,1.3573846109017942,1.891787588588541,0.698657340327681,1.9620392707178325,0.1315666826314229,1.5213613279473615,1.837486933363186,0.8037934953009535,0.19641011786255658,1.6187705345618466,0.0058737835774200775,0.9213248733688952,1.9987961268088845,0.26566280060324166,1.7002798316818977,1.0399640401467236,0.25859945387015837,0.35123645594214303,0.9108965081598253,0.007060829545678549,1.1480412672671552,0.19022546185816025,1.8485568797146432,0.02810276934439626,1.51240252062981,0.126425573503247,0.5394501355042625,0.6886951911003631,0.059347539573335606,1.3671390081306902,1.9188602328103541,0.578320311370845,1.9426482236381946,1.4747346905036804,0.039208485106221436,1.8706732422710852,0.4825145645607122,1.1907292997003724,1.5673426610814731,1.806281226493961,0.3847989974691223,1.9936250986320485,1.083196020286611,1.6532644223308002,0.2957457961606874,1.9999834336616003,0.3039653550765231,1.7383491383638172,1.652208540567376,1.0845848544141115,1.993467009620149,1.8130374956687558,0.015053906213244872,1.20201729202964,0.1592875756628157,0.4837076851596622,1.8713579275182228,0.03959586500079848,1.9387432069676402,0.5887866642628006,0.6370837808724495,0.07935948367518564,1.4175625717085492,0.05887545540024264,0.6900199851158997,1.9595239924689878,1.2530256603096288,0.02545719269488389,1.84240962433348,1.9861280742233125,0.1910440169719979,1.1466627341466067,1.7726521958793617,0.34251895921087594,1.9983100398607072,1.0284586288291182,7.446014234080423e-7,1.6992841996829997,0.2647174596410842,0.3443598809702241,0.007185563088337066,1.6096860610736234,1.1390637008205562,1.9857200219485818,0.8024270299148405,1.83824774310987,1.255386142415908,1.9588337803291913,0.5314169758748273,1.896937130211695,0.0563076594852181,0.07840936596947434,1.9224018592749315,0.586563135829802,1.3046675091982252,1.4667311274033636,0.04176327047948869,0.7425887757172742,1.9735158577698457,0.15515500160268858,0.014634943709368575,1.8116140967111414,1.9937425775161062,0.22447631598987372,1.0922325797866603,1.73670091546945,0.96700773860592,1.999994503904303,0.9736357033560286,0.0015703986004311776,1.6590582088463468,0.22867954296584858,0.38672497025627095,1.8077225519998201,1.565331135703079,1.1931245834232502,0.48460455544426073,0.7490018372747569,1.8668711955460755,1.4725851847966356,0.10507762033262746,0.5805346193231689,1.9198205377231297,1.3648676994707958,0.05852205246582498,1.899849295344025,0.681408138954027,0.12761601950661283,1.5144968963451488,0.027531120147204824,0.4355338045823781,1.9845817661996872,0.1857444871426499,1.6044167613943645,1.7783792171009196,1.9983703313897725,0.2602394952227509,1.6945288051703133,1.6985354388671514,1.0218298396459387,0.2708959736967972,0.9188920172649163,0.006140889133457117,1.6168513813554335,0.19495987346964216,0.4309332922670651,1.838818153242698,0.02399197095469907,1.2466050191874882,1.9613703234611934,0.6963310337830134,1.8928892176642733,1.359663014685971,0.08196848227898801,1.9258675789263782,1.9399393726793528,0.09818145730915129,0.041464404085257534,1.8745921835543675,0.4893977771757114,0.1557155734933936,1.208506984892895,1.5523095837178842,0.8498870250620487,1.992688458545992,0.21878126359584416,0.0018987823702656392,1.7428048748097815,0.30874166103247735,1.9999232820362773,0.982705066462768,1.6582704745670516,1.076586329870483,1.9943507827491425,0.8643921057949199,1.8023411387718746,0.012079931934761756,0.16365979752280202,0.47685197639499277,1.8673926391699642,0.03739105979123014,1.2993442696443065,1.9448407970388542,0.5723170932648096,1.9162236108301225,1.410257626543138,0.06161853977994325,1.9037692367024337,1.9572331667860814,0.12321760658529157,1.5066970445579997,1.8467064355813498,0.44304509953523863,0.18635267198868277,1.1545957978000572,0.007869240702460312,0.9042939928594484,0.3562967288854344,1.9970914522507206,2.3149268611244445e-5,1.7049979905318557,0.27017986452952314,0.3383218587865737,0.9279368986235659,0.005178002392087211,1.6239659393560717,1.987039560072938,0.8102997715067912,1.8338450454784971,1.5270082086687018,0.1348733892706534,1.9638277529652703,0.7049865854118416,1.4226299148557309,1.351183823999028,1.925471498259395,0.6224972345075035,1.9368042422076042,1.3218969845049144,1.4506094374950445,0.7348429167210508,1.9716499425687952,0.15088897484417696,1.553182026740326,1.816275863614814,0.8409245598753037,1.991552648698348,1.6479655112205334,0.0024986064786954865,0.9589886104644557,0.3153251901461209,0.2917924566173673,1.7267118030449935,0.0007183858341833771,1.9942391146799059,0.38040636216563595,0.8733853205039214,0.012242707129192065,1.1852448748150375,0.16866726641992447,0.46914244853742404,1.8628427838256534,1.4796418922005503,0.10868716788835397,1.947773085870259,1.9166425716333826,0.07281979668758398,1.3816990366250503,1.9033206426438039,0.5444138256122395,1.9545692555472203,1.2695277615475216,0.029432416303275644,1.8514981457598114,0.4506022277343428,0.18111239422629977,0.007738704839020727,1.783391928456783,0.8952681403723448,1.997170695513242,1.0455429140574701,1.681361882387594,1.7114025261049979,1.999054470756251,0.3315474339231742,1.7632657814024522,0.004296982102645286,0.1997461253039282,1.9884547042943415,0.41610884455062136,1.526118192115787,1.238820350143826,0.13945879455538146,0.5163830719472753,1.8892471994736546,0.05079000288657731,1.342675733495118,1.9288698332585008,1.9371699947170782,0.0947429616785116,1.3304723415004427,1.878454805839175,0.7261071052450014,0.5050807142208235,1.2163484576864274,0.017692972536851315,1.8214825007559612,0.40563714337832657,0.21379702653842358,1.6410294155295078,0.0031805175334103097,0.9499264983862041,0.2925319681957267,0.9907289820064632,1.7204503499867783,1.6718191849219375,0.23967255640400376,1.9961128052025785,1.797525721363225,1.5793498749010964,1.1763228259327358,1.9786658064226197,0.4614766063083616,0.0352482413824301,1.4875820143345937,0.11283672786623222,0.652084955731808,1.9129789324605915,0.06945964666352411,1.3936450455789378,1.9071748099229158,0.6652501342640238,0.11938692780500682,1.2782523930964182,1.850948723521842,0.7792254294239394,0.45820456728424197,1.1625189063216594,1.5907090961587236,1.788997843718744,0.36245845014304,0.24884463627290143,1.0546030589956263,0.00031117093951393837,1.0047353551360967,1.9994077531336993,0.9359429145234374,1.7573734633855702,1.1231531273497615,0.2052188396629322,1.989788506044703,1.8293886527435919,0.02041234931318503,1.2300015850974402,1.965935473218461,0.7126634948072479,0.05111992646657226,1.4390026006051844,1.3341394433268154,0.6150785796563987,1.9339666557231812,0.0909260820067026,0.046476196486153754,1.8827532214809457,0.7173938331172535,1.9672007918473282,1.2251961414160173,1.8208850667750842,0.8330073040387198,1.9904798992791917,1.1082008952088283,1.6340405678849095,0.003944459418201762,0.3211959240286836,0.2861498858600402,0.9998004051429721,0.0004464455594611616,1.0595299795087902,1.9960200403362895,0.36626817594715255,1.7920202480821308,1.1773532374404598,0.17315388256915643,1.9804893416527372,1.858758809704446,0.03290068460930773,1.4954820120949968,1.9503019664170105,0.6606039746453825,0.06984352418137907,1.3891037397754706,0.06766385243797857,0.66623682903533,0.560638768094025,1.949005996902141,1.4918846673188473,1.8556784683953906,0.7703869207597697,0.1765330332353977,1.1714630500189915,0.010154670830537116,1.794538830325931,0.36947345836007894,1.0535576801968929,1.6754663948891322,1.7170191587360257,0.2819735818869976,1.9996787916856442,0.3181641631791069,0.003585934817744718,1.1141456831672651,1.9896387330766707,0.4096130509345586,1.824286571209047,1.541459866453557,1.221163892631119,1.9682432611902516,1.88554791858093,0.0482956914960766,1.4471350896143087,1.9318122734055598,0.6067219459198394,1.930686458219413,1.3380354056887493,0.04924881332623876,0.718398222467419,0.5120695010873044,0.14198304105774806,1.538859712245614,0.0212522545926771,1.8316925464324938,0.20886341669320063,1.1172146167450725,0.0038521108314957253,0.9419136182272781,0.3278851827297431,0.27982654807985574,1.0088718447046532,1.6777414667918449,0.24490930868161265,1.9967875905559733,0.8903616077855573,0.009720202802156797,1.59404178210601,0.1782899332636223,0.7733951392500165,1.8540754545105442,1.4945723748614095,1.2742767977038096,1.953087070943437,0.6691509233277608,1.9054265676590245,1.3862556950356728,1.9105219660003026,0.6576993140729215,1.9493355238346517,1.2859510871062154,1.4839662921920815,1.8603377972946569,1.979877317855848,0.1714201101927324,1.584215183885541,0.011484890571932693,0.8782820933661705,1.9957399051256168,0.2369921897445696,1.7162890130620934,0.9967107337253833,0.2883169861274052,0.31893035749250365,1.7521091858221558,0.0028593912271853705,1.1051288456439439,1.9909004880485757,0.8360543887646952,0.01883081262395614,1.5490641811648453,1.9679809924601797,0.5014905161753295,0.7300878431865584,1.4461984180752014,0.09221768632111649,1.9350663236977332,0.6179320280637566,0.08761204069544204,1.3465589239289955,0.052099669918265756,0.7097054862623718,0.14252122696494707,1.2330073263878236,1.5311958069001208,1.8311108076709883,0.41947204507409785,1.9878194871633394,1.6278147638080402,1.7593873487576062,0.9328598932974923,1.9992966630235034,0.2735624752188458,0.00023887111851439435,1.6843838064094623,0.2508877930018024,0.8893210684079765,1.7870957955158873,0.008499207140757137,1.1594695340463161,1.9820351781823975,0.44715056647501883,1.8493218152584812,1.502436336829404,1.9527696526654321,0.5497469635199094,0.67772509842863,1.396483386753038,1.3778723884582214,0.07437735553354974,0.5678614596593099,0.11141521550088906,1.2946319680684322,0.036065929427761545,0.7625841550016319,1.9780263354074732,0.166375373112863,1.5768287826215068,0.8793212867289919,0.37572216294931104,1.9948624890470947,1.0716649437919492,0.0008837031780902782,1.7295471755857297,1.9998499783847106,0.9530125339365406,0.0029390512005196268,1.6433977298531504,1.0961033567984675,0.4031552750395654,0.8450098239487169,0.0171190346631086,0.14774447095848386,1.9702183061467387,0.4936471469125051,1.8769742888322736,1.454298391718242,0.09605997410683775,0.5993566717849669,0.6263309690816199,1.345576702228253,1.428043711743372,0.05502853165793897,0.5190897080345278,1.962717001953534,1.241819479194194,0.02292934720590578,0.8161763904665049,1.9879818495111146,0.1978971878100978,1.6207280668714685,1.7652583281619882,0.3338485831078035,1.998915375554391,1.7092277557879614,8.174227220147934e-5,1.6909698263295634,1.9973981881886824,0.3531366169078868,0.008635954253885303,1.600477885096315,0.1828896323854754,0.4480232404293174,0.791102615853412,1.844498283137415,1.266551143328863,1.9554853882176313,0.5416655994364352,0.06370266121098456,1.404795027143051,0.0739816617503255,1.917873162896106,0.5760599231027703,1.293631367415157,1.4769285254873834,1.8644004095226356,0.4717633594423605,1.9760948686652604,0.1613992371401335,0.012729405992200626,0.870321118167716,0.38283447369932355,0.23182976779262077,1.6627617178728296,1.728830761621567,0.9785692566728403,1.9999659655060218,1.7467964765017627,0.002285092140968392,1.6503157282511993,1.9919486614292703,0.3959013085473937,0.8539780136715682,1.5557532701554417,0.15252503720536514,0.4945502031321767,0.7378232606396016,0.04318621629408348,1.318970224386975,0.09997664943410256,1.941343315817171,0.08435675222585404,1.354075028260807,1.4198277202273553,0.7020358328014902,0.5270630529588562,0.1333278824356905,1.2506117320558348,1.8355465603118981,0.42602465589534244,1.9865390271431238,1.134175010516932,0.00549676228580831,1.7710663324971763,0.9147697634318579,0.26807112677560785,1.702803401114467,1.6902126530804633,1.0333912311554692,1.9980111012945763,0.9073699394056441,1.7757756380554062,1.6077070695375664,1.9835177769668069,0.44048165290885755,0.7999825048739131,1.509358307385693,1.2577969415652306,1.9581224944283093,0.6853318924173021,0.06055522401667479,1.3704306224280143,0.07744403455973192,0.6416866917596843,1.9438243270095912,0.10323944621442238,1.3119202795567928,0.7547966775377,0.4794876215092463,0.1619699976639304,1.570255228353506,0.01421283603220691,0.8613316212139951,0.3899975725823006,1.0796665622416575,0.0012531542057123701,1.7350119266740378,0.30043049776093655,0.30651233930860555,0.9711423454155814,0.0017132375983442971,0.22071374323197213,1.9930566583748048,0.8529424044483845,1.8091905899138307,1.5632719129179287,0.157375344339027,1.9744532307226672,1.8730899527605445,1.4614324394669325,1.3103595170338562,1.940989519525968,0.6337862769571412,1.9207962911726728,1.3625442165517851,1.8942761624692719,0.693388712519268,1.9605152769836076,0.12883800349943275,1.5166341447292795,1.8404962033623709,0.7983736832611016,1.133137492799659,1.6144166188013318,0.006487514135012473,0.9158129114471312,1.9985095691371781,0.261920141457915,1.6963212109477983,1.6967484010096898,0.26232197484874187,0.34703786815712157,0.9164061805461993,1.6068753205639383,1.1425696335256543,0.19348270410136814,0.7989568593967903,1.8401734737708728,0.024538103874993,0.12913048090308465,1.9606807542832376,0.5256166857394018,0.05748509614079289,0.0770405756997059,1.9210283474984977,0.6332323338483045,0.1037032125102858,1.3109254300802635,1.4609041620899776,0.7460122708133207,0.16254167668734432,1.1961551686397356,1.5627798776231674,0.8623684935867098,0.3891683352927372,1.9929864450734471,0.2203407833558284,0.0017482501034981057,0.2996827958342241,1.9999999745136012,0.3000051930486649,0.0017750404896480498,1.6563907586907098,1.0790730727036064,0.38952591155630567,0.8619212616205306,1.5624065716462605,1.1965979195611474,0.16229499321526364,0.7455755608543042,1.8686311688199404,1.3113545604430152,0.1035030649723101,1.9440208976009345,0.5745730996804672,0.07721446749582617,1.3709835701499768,1.8982989727753488,0.6847668240657423,0.12935250956593936,1.2583721396751324,1.5088458706879249,0.7993992035664912,0.4409752035637864,1.9834099533464231,1.6072341438227435,0.9168561517333356,0.3466959402395975,1.9979733933764374,1.6970722288919156,9.288063268497737e-6,1.70322681172722,1.0152537358381148,0.34019411855038284,0.006538966294989845,1.6140602968895048,1.9849370425346353,0.43384876929303084,0.807851346138389,1.8352193054869435,0.022580998663285,0.5354751382688931,1.9631599572566556,1.8944781438519653,1.3629650026725488,1.429527356409203,0.5823898580383378,1.9411422419041342,0.09971732286527579,1.3195344364183965,1.4528347564486706,0.7372487653901507,0.15761858680707952,1.2050422972176353,1.5552582142942848,0.8533890533383949,1.8206562850348298,1.0876630505963552,1.7335905918995203,0.0023254946963180423,0.30618708742078593,1.9999608763043786,0.29355565115548643,0.0012758545629102391,1.6632074298594381,1.993968670001118,0.3823661278785804,0.8709114816459559,1.5698842421988135,1.9739808424925531,0.16728357898356006,0.7543589442833095,1.4685367734663541,0.03563015159803673,0.5847039939171383,1.9469745897766966,1.9176367143242805,0.0737570873277682,1.3793923945593438,0.5332225719238493,1.958251700033482,0.12492602864691527,1.2671249238986304,1.8448169875843838,0.031296724363455874,0.18841648894277785,0.006251576251772639,1.6000016979901095,0.9078195505875093,1.7881077416794122,1.032939936445062,1.6905393222823897,8.953176964154874e-5,0.26776352848040363,1.9989429203651259,0.3334046660607217,0.00554414286530347,0.19224658348801305,1.124589378432817,0.42639447067837266,0.8167616452851941,1.523995368244997,1.9600972880416188,0.138190919352413,0.7016048304890168,1.8903853964539894,0.051577772556306134,0.6351810451574795,0.5906495824906779,1.938037275845899,0.09580551978920615,1.328117147448785,1.8772602298181376,1.9724810785796378,0.1527648186523436,1.2139125523393703,1.8142251202424209,0.019149342196570496,0.22165365113944924,1.096695951777512,1.642941842709127,0.9625271013814418,0.3127484746501774,0.9781178194551373,1.729139856125549,0.0008588562058464699,1.6699695239889518,1.9949225850827246,0.3752571708751975,0.012801324388986401,0.16115334610051835,1.1787775045813185,0.47214681727982544,0.7631625421443717,1.4765315966294106,1.94332810698854,0.111688475567161,0.6497475602227885,1.9139937863374938,0.0703759300629696,0.06354417096069986,0.5412643237588864,1.95561851337744,0.12057155980782264,0.028585675378499764,1.8496359447326416,1.983787610342052,0.4561097617796307,1.1600572545274779,1.7811860533339448,0.00994996205629406,0.25723017722968533,1.0420050898528712,1.6839495894221697,0.0002520606712318463,0.2739717600425411,0.9233614705942134,1.7655489189670446,1.1356597638137138,1.6282780646419455,1.9879119538018362,0.20986896568215163,0.023025587265180558,0.1325813096889682,1.232428304846797,0.5194856564222485,0.7102752673539517,1.4276355823972442,1.3460003907622302,0.6267498414486354,0.5989429934380466,1.93485511629603,0.09196812519437814,0.04572758385809128,0.4932578210002675,0.7197873413533598,0.14798077165215806,0.017035941789165565,1.8194580308484851,1.9921373129011948,0.21599031372595268,1.1057208956009636,1.6359674425648962,0.9534635830938863,0.2950391399558253,0.9871879792592524,1.7229016870313723,0.0005240797343204484,0.2373771642985073,1.9957946254348018,1.7996570813130075,0.011395092563554976,1.5846982801017988,1.9779320973705654,0.4644638464348605,0.03618620189459387,1.4844872047860223,1.2853805287201632,0.11589100292326149,0.6582587766041033,1.3774542852797296,1.396897881822769,0.6781525828151485,1.9099225699985922,1.9529066864246665,0.1162894613890626,0.030779116376285498,0.44677436046910124,0.772815299092679,0.17795077538860915,1.169005148973201,1.786817189589562,0.8897698486130003,0.25118699099925224,1.0510667865541767,1.6773035725972623,1.0082764988089035,0.28023973832936677,0.932409375917281,1.759681062808303,0.0038000801018499564,0.20307467454155725,1.9892775222585342,1.8313618291559082,0.0211303372318552,1.5393611518712733,1.2235957442236285,0.5115499014804306,0.05224361330696636,1.4358181183843381,1.9271605896380923,0.0916115381875473,0.6072694083944007,1.9315960251225919,1.446602473892354,0.7305226547641219,1.885824338558991,1.9680942417102687,0.14326683949801244,0.018743696978224866,1.824623506152907,1.9909611631606468,0.2103914944789692,1.114737139380952,0.3112289891728459,0.9444038944073515,0.28863426804584336,1.999349892344299,1.7166040285045607,1.063064539039495,0.24327633919070524,0.8778339200118642,1.7941771742626604,0.010070215569766838,1.5920334283670834,1.9797870896387935,1.8605678720861922,0.03380762993434738,1.4924029432488035,1.276674596751611,0.5601040208728785,0.6667981157465797,1.3858391560234464,1.9052347939869774,0.07006228625748934,0.5574604141496373,1.950116442338352,1.4949647770134136,0.03305231704471345,1.8590637120600442,1.9803721350980021,0.17281917748829534,0.009657498796377784,1.7923835766420229,1.996823653282359,0.3745921059736934,1.0601242808387317,1.714546248122559,0.9992050374357768,0.3282195949604515,1.9998238605235208,1.7537506905478284,0.003050984291477654,0.20858731573594713,0.8236256411568197,1.8262863413839672,0.019315640891937713,1.5469777807892953,1.967351851606607,0.5036543423491251,0.049388868352109094,0.08699970825063197,1.3289218881592073,0.6099802724652152,0.615628142157713,1.3347005322963181,1.4384675933323554,0.051308014626340825,0.5089814976140159,1.965781230947204,1.5418394355535914,0.02053220226343544,0.4092486614946653,0.8175993164051663,0.20485765413968438,0.9555552369384288,1.7577620935569955,1.9996901336377841,0.3327697874358647,1.0053307153760938,1.710247398795576,1.054008569769069,0.36982399580821856,0.8868424302234664,1.7886319123371544,0.008826802435145553,0.46623327734849007,1.981561452716205,1.8559120582576958,0.031508568420600125,1.500278160611348,1.9520091829719206,0.5519755333612864,0.06782722219342663,1.394192275074102,1.3801805862624352,0.6610287503674825,0.11727137729222814,1.2825559472236305,1.4870621259138352,0.03540509031627426,1.8636717464040526,1.978543309542618,1.5870855650803048,0.010955933244765181,0.3659189481074394,0.8717564303787227,0.2392859760018502,0.0004330562778843694,1.7208631137198165,1.9995519888583853,0.2929528669708259,0.9505211281474442,1.747758290211153,1.1086497762968304,0.21416508430852843,0.8325621184652422,1.8211428563912087,0.017581647581441207,0.5133780226642406,1.969611086539171,1.8829652831192423,0.046612351623706805,1.452074926178145,1.933805196991496,0.6016432872014514,0.08906727394488023,1.3432349932296184,1.430296630150302,0.05421545187087862,0.14434862607431775,1.2295621242996773,1.5341927657784629,0.8285885282955535,1.834750456120419,1.988364320976884,0.1993892481020031,0.004352292005872949,0.32449500111914686,0.9262989876408525,0.2760006668097621,0.0003225365239992728,1.6817975390975426,1.044948155995012,0.36280639115917923,0.8958602524615102,1.7830217518703058,1.9793660875106278,0.181454253008558,0.7787850507127885,0.4416818685762416,0.02928920654901679,0.5619853378054434,1.9547464995015003,1.9073647059739778,0.06458159522814644,1.4025129550321205,1.3717746648448845,1.950767412577017,0.11304518543180953,1.2912460992354216,1.4791193932235676,0.03783724257522525,0.17399758336711224,1.9766339571502696,1.5797178591273326,0.8828373759276126,1.8033202762145197,1.9952147476456843,1.6721535812674668,0.00074112616331512,1.727120657643862,0.9810630574564677,0.31489137848744453,0.003216603824052089,1.6406827834801745,1.0996275762874455,0.4060003335765693,1.992885350533029,1.815931797448195,1.9668190792556808,0.15120360716271863,0.7256728569792555,1.878670475069297,0.043914291608437295,0.09455120940858186,1.937012367958725,0.5933390837325785,0.0853622916578004,1.3517412084756089,1.4220902567556961,1.966322163124107,0.5248667995867534,1.2383818486474794,1.5265021359114934,0.02435086776655493,0.20612913755561646,1.9869438422344683,1.6235005777222353,0.00523868750115053,1.7694756718664735,0.9172552594600691,1.7117197912026931,0.00013328927990230444,1.6884056090189716,1.9971366511352153,0.2613455328291291,0.00910655989538578,1.7773471545365984,1.1540075602748057,0.45097957552604395,1.984867713878236,1.8463895139448776,1.2699625667489538,0.12350406679492043,1.9574052474946058,1.9035142471876345,0.061412946240887445,0.07265073610418249,0.5637284125760977,0.6440164948759654,0.10889198335636108,1.9412775355933651,1.4711372325704406,1.9789725778555625,0.47735946642080795,1.18480112795542,1.5723024467059066,0.013796861505737334,0.380051998873825,1.067087871338333,1.6654093301306514,0.0011314276225904418,1.733318364945368,0.9719940318003157,1.7491468871248421,0.9686491670152527,1.6476215184717753,1.9914939802887557,0.22551416223105303,0.017974702142506516,1.5528058076612161,1.2079246658451597,0.15603477792769005,1.9738900017080154,1.8743033589739118,1.322324461277379,0.0984388844375349,1.940142429776617,1.9256424562275476,0.640891364715011,0.053537463366545635,0.5150720488929752,0.6957638345412895,0.13509995050704415,1.2471819559419797,1.5187681788343266,0.8107431348575569,0.4314229588845562,1.1306649770402195,1.6163826701870274,0.006206944454422825,0.33798336464163603,1.0123081639679792,0.26360537971371045,2.632363010490746e-5,0.2538653258357454,1.026816977659082,1.7843223797841485,0.9139208639128621,1.6048909648889054,1.1450380170847165,0.1920105525425082,0.02979437686323383,1.5063077066716035,1.2612168420937901,0.12790720251583587,0.6819725397444649,0.5278139457476614,1.3737175914403918,0.6544724261832249,1.9200539609095644,1.9449885946075038,0.5902842194314677,0.03726883721593699,1.8671678518913135,0.7484255731777565,0.16390742358498966,1.1937087087013145,1.564839938049321,0.8648394916343113,0.23477537399331327,1.9932782536593288,1.6586103207546048,0.0016039285368030232,0.297904458781609,0.957491463715954,0.3017886747524716,0.0019266969761325692,1.6545069590287569,1.0815593235775238,1.8171405472515683,0.016302882093307214,1.5603423773615375,1.1990429365514057,0.16093540075388224,0.7431641263616332,1.4582878692856487,1.3137239163763357,0.10240075124140335,0.6304933654458941,0.5768317529223197,1.4239874922838536,0.05650478890180799,1.8972002179207355,1.9614945164164035,0.13058218616836237,0.02389375392670834,1.8385722423761421,0.8018434329568405,0.4389087856081194,1.139653259000693,1.609214038942091,0.9193420809495357,0.27120508543343735,1.998129008097373,1.6988584808208675,1.6483770846065227e-6,0.25993574070798775,0.9028025252695784,0.3420704833472522,0.006826835981295187,1.612089732163084,1.136056538344467,0.43590659117710795,0.027636443632531926,1.5141096491845052,1.2524496212351874,0.5376854419852563,0.6905860818223497,1.4088906218356072,0.05530761886924529,0.07959208518368133,0.5801247641982201,0.6271214161538168,1.4729830747827584,0.03976191101501658,1.8716498890249067,0.7396562487862743,0.15896534381623395,0.013452413066784685,1.807456256644352,1.9945087180578045,0.39438911388167963,1.0851780735459267,0.21623897879053033,0.9740870921940632,0.30982523113389626,1.9999798294515396,1.7370061822684995,0.0014049197187455675,0.22419132754649207,1.9936920412697687,1.8118778027162548,0.014712013001172086,1.5678328350514592,1.1901448275042528,0.4820052048420741,0.04189249873585488,1.865353646092367,1.3050975543301344,0.5869743227814125,0.6389379982823191,1.3582644305374452,1.4157543411229518,0.05954975707618504,1.901169463464916,1.958961906338594,1.5205570799478276,0.025905082915553934,1.8434797671780354,0.7929600378679043,0.18987627860444056,1.14863004853655,1.7739134155477334,1.9987494645751351,0.35168963986363666,1.0304468805823326,1.6923412935549322,1.0289099861459319,0.26606705736492386,1.9988251549737583,1.772938770027146,0.0058095249505456525,0.1907786511488534,1.98605302376401,1.842652846884579,0.8143101406502926,1.5218692842967043,1.95939672796693,0.5296606811076305,0.05902820002482767,1.8915180538330691,1.3568284995010553,0.0831765181824844,0.588375106972448,1.3065614552672442,1.4649710333852504,0.042334005267544494,1.8760601958550795,1.9730591816995848,0.15409247494492095,0.01497595208256941,1.8127745192716955,0.8468860972443021,0.22322208597337878,1.0942130324101227,1.738044533988886,0.9650197730324529,0.31093869923377904,1.9998810674183138,1.7308446036182592,1.0836459895023065,0.22994703425911456,0.8573785480669464,0.37720674548171496,0.013202225782796062,1.57527656432202,1.9754503682270443,1.870895250349061,0.7607399367339661,1.4743372259455159,1.2964460850242174,0.5787297887494391,0.6474123438362731,1.3667189606186272,1.4074869764717342,0.06267211731144151,0.13161860165443096,1.956350380827677,1.5127902289564585,1.273457342100949,1.8483178798680355,1.98423187275527,0.1845914042627581,0.007007366635793044,1.7796264316619546,0.90127234909958,0.35862308724676284,3.867674791546705e-8,1.6999574179163366,1.0198411567637686,0.2722587712447915,1.999223652819567,1.76715131896509,0.004874028402114261,0.19614144881569529,0.8033507490224545,0.42101928577766434,0.023560803035785338,0.13134289339060123,1.9619159415386687,0.5216746256580438,0.7078888424453726,1.4253795202827224,1.3483395589536111,0.6290650477942533,0.5966593234141244,1.3151834913752796,0.09301581777223156,0.04498490830929236,0.16009990490900083,1.9709276756907443,1.559068204544622,0.01658055125188973,1.818025896600694,0.8379279311388611,0.21754109014952183,0.0020232766086567544,1.7441351327975214,0.9559553324833748,0.3175411457235746,0.0015180587493469622,1.7246228818924205,1.074602906778285,0.38598102435386605,1.9955630151204304,1.8011523177127298,0.01177364468243891,0.16475190563023323,1.9774079371770266,0.4665719852969529,0.03685412342077932,0.10549844955541543,1.9454904221823899,0.5705199221228721,0.07549622161543379,1.9113054616574716,1.3991860786728267,1.9595534754626214,0.5471185661663225,1.2627007203547085,0.11745963051845176,0.030168051081236213,0.44469824529119084,1.982586792610151,1.603665869081457,0.008120252504848158,1.7852752903189195,0.8922492984024728,1.6938506142096965,1.0485755751955186,1.7064072937808183,1.010770694601962,0.27851037281558577,0.006037072666341459,1.7613007370547753,1.1291404335447222,0.20157039806301646,1.9889101565741727,1.8327454079398935,1.245691804721244,0.13587274774689007,1.9643559965821722,0.5137279328294673,0.7165766371019919,1.433571799671995,1.9262231779839474,0.6206560452083455,0.09777471720035613,1.9324997960294188,1.4488328220962736,0.7329255274492941,0.49893896963563233,1.2094283874881662,0.1445559681695564,0.01826607852816753,1.8232099564820476,1.9912926894517726,0.21192448487481141,0.002641104336138511,1.7501644948188488,0.9468945164828737,1.7322721258272074,0.9937649155150082,1.6665563077619598,1.0655536847898561,0.24164807771427976,0.8753586762506772,1.7956904598721688,1.183289821447431,0.1697744107665864,1.9792850727227462,0.45892090464244073,1.2984451374119719,0.10959077310507626,1.9484056295962264,1.9158456938130792,0.6644473812065594,1.3835367927899593,1.3908523308283849,0.6719323079660622,0.12276490180846533,1.9508914496194991,1.4971305731337528,0.7861385895244047,0.4522653403194382,1.9808608528794827,1.5964089457237622,0.009314762700528445,1.7908595266595704,1.0374205819332942,0.24684394321733827,0.0001595746349108973,1.672450053182514,1.001699346092091,1.7684927522296312,0.9389729957329234,1.6247019491292403,1.1201396496772373,0.207065052128669,1.9902167101604924,1.5278087163847287,1.2368883214440298,0.14047371334953895,1.9667166922990569,0.5058212565756213,1.350301476393288,1.441728399326621,1.9296047759476544,1.9364741925721498,0.6133266476507585,1.3323490444243669,1.87940351713761,0.7241945966934682,0.5068101116867199,1.9664251452745345,1.543934170167839,0.8399944241423889,0.40723795844564115,1.9900574035355116,1.6395014701774087,1.121268420022802,1.7561321238812138,0.9826003754093185,0.2840270546084549,0.000683121778778939,1.6732912225892846,1.056499068220691,0.37176266658489343,0.8843644960574836,1.5809700135204459,1.1743645280649493,0.17486523729455916,1.981081620389908,1.4804684296709172,0.03213278055418489,0.1137563707121515,0.6539504899484355,0.5542068906213558,1.4011049645107996,1.3918987108975953,1.9080099426635115,0.6633764406840418,0.5633680826853462,1.2801624022427691,1.8519918196236247,0.7772858341312907,0.4598775098366835,1.1644812541014493,0.16914110559528261,0.894331164551835,0.2542357896990338,1.996278280770861,1.6806719368589533,1.0666882805033302,1.7191321233165868,1.9994742241613355,0.3233620631076779,0.9480300301949561,1.631759792819409,1.111128979210061,0.4153441924428377,0.022078841799108573,1.8225638596187772,1.2280653440196956,1.5524720328584949,1.968997834421622,1.431684067966563,0.0473679701148878,0.08970268333606624,1.9329098743517568,0.6039323810248762,0.09009914629689941,0.04707743799617914,1.8836860342343842,0.715486362671174,0.5147218395977704,1.964054491391933,1.8220194125959919,0.02187935592779,0.4145682766238099,1.1101781168683025,0.2008862894553043,0.9489854986118255,0.32265791173971736,1.9995047873877962,0.2777234936408599,1.011907705591874,1.6799707305562461,1.996195358758872,0.3647307451262787,0.893379831806285,1.588329573325792,0.007976280234689881,0.46068293433753005,0.03500071767907087,1.8524923344947792,1.281080696707409,0.1179948995789375,1.95400167075656,1.908410350952993,0.0654663490228895,0.06838494593665911,1.9117730451280732,0.6548482750174891,0.11419995572019748,0.03189264056574448,1.4813072800815807,0.7684514064577059,0.1754061103534159,1.9771669694319671,1.7895763798161453,0.011948256165556503,0.3710185915064834,1.9954553750973658,0.23503325468686775,1.0037931596357959,0.2833594570129886,1.999727225938525,0.31671046498532895,0.003419605237757639,1.7433750465659326,1.989922371964783,1.8288619015774736,0.839050086352433,1.5431310960850049,0.01637498197075693,0.5076426241205771,0.7232750939079171,1.8798585955314318,1.3332512454925696,0.09349530370808323,1.9361382012112358,1.9299569637089948,1.4425865331055532,1.349405200305417,1.8878958305424995,0.7068015420053086,0.14096308718501316,0.01961754445923869,1.5286210925267134,0.8221123826143601,0.4219467714789663,1.9873425169787577,1.754760230650698,0.9399279779356912,0.3293593455219508,1.9991782096077961,0.27147937065817973,0.00017712342946751836,0.2462149058966291,1.9969449278714257,0.35775110160285284,0.009445496786383623,1.7789138346926556,1.9806741175950235,0.4530660474624192,0.7852040849505841,1.4963002076721041,1.272363422347032,0.556082121793195,0.6710286719805558,1.904580391886208,0.06227650795667472,0.07172025887926392,1.9154611154518624,1.948708538309226,1.4910641093366719,1.2975318648995429,1.8613499949114765,0.7596360335113466,0.17030810258879836,0.01028904317100876,1.5743461044345992,0.8763080100478314,0.3780967871526476,1.9945505508496857,1.667269207164736,0.9947216372919778,0.28971574788591925,1.9998979575999751,1.7507967953808878,0.0027110494132074336,0.2113358984360394,1.0930809452738741,0.400722053543101,0.01844855581683602,1.8121115533151082,1.9684783918002178,0.49976717104175894,0.7320036647978634,1.8755113256416578,1.3246846425380734,0.6058558397104448,0.6197709919518535,1.3389219952559726,0.08272308152490138,0.05273521121903735,1.4161185421375393,1.964608715837593,1.5380657646638263,1.2447642806763524,1.8322153232426563,0.8131929524885748,0.20214680383106465,1.1281916483385712,1.7606800410316072,0.930875400740218,0.3361159680425041,1.9987694068920177,1.7070841546301563,1.049531161065377,1.6931613318185652,1.9976124558306787,1.7858672918615697,0.00824238364055152,0.17882726545726024,1.9824085770714235,0.44549416918406304,0.7940726178443149,1.504155158831046,1.9533718495227608,0.547971772629512,0.6796087227605052,1.9006759925805206,1.376030004705678,0.07513196234096142,0.5696561116729232,1.2868538216761705,0.10592658265708765,0.03659722135996002,1.8659229495839393,1.9776097074128791,0.16527837229693254,1.1912610435892577,1.800579381436557,0.8673113305934156,0.23638349789775326,1.0736488012347718,1.7239632187844094,0.0014658185680883618,0.29613048987042634,0.954999543574456,1.7447739207499262,1.1041918161378792,1.652619087301397,1.992328573504504,0.3934846584494214,0.0167545013742042,0.1487867134920059,1.9706982141615095,0.49193288340454056,0.7407542897931123,1.4560694940867136,1.316091320452171,0.5975349705741835,0.08722677659845213,1.9231336269754162,1.4262451874651139,0.05568114510820732,0.5208346542457123,1.9621770211195773,0.13181727192061155,0.02335479294163434,1.8372107592296159,1.9876724378209252,0.19671090381283385,0.0047801381700603995,1.6111901437894192,0.9218285119851856,0.272915284471991,1.0188845985009691,1.6850704842113267,2.3025759032790916e-7,0.2582605312484676,1.9981978877040447,1.7802252268041718,1.1585393168247604,0.18403793564512094,1.9840621916280874,0.43796792261173223,1.2743774875857818,1.5119686217698098,1.9560703629675151,0.13114455590773366,0.6882151393598267,1.4066130867301951,1.3676088760930178,0.6483077998862268,0.5778622826441895,1.9428167311383102,0.10190009081256035,0.7616689958140246,0.47345335531676636,1.9756606139411974,0.16031733338721532,1.2001571396108897,1.8059822846731337,0.8583255704296884,0.23055776605754952,0.0009237486641938686,1.6536468368161925,0.9765806421974077,0.3116323652068028,0.9640636370402289,1.7386897567641584,0.0015401977107099007,0.22261991247523993,1.9934092302069248,1.81333152189112,0.015141360723728403,0.15358260565795867,1.1925930369673896,0.48414040591253094,1.3266643128054791,1.464123796079761,1.9385689883220296,0.5892472213167179,0.6366130759272183,1.9196078661141835,1.4180215625031622,0.700137659960731,0.5288165892351648,1.9596661463884182,0.12735134506522183,0.815250323964142,1.8421372989974139,1.986211803706044,1.6199890790036475,1.146162983799766,1.772331384857797,0.9127880561622566,0.2667172303757558,1.027953635291993,1.6941389573728445,1.0314031606116612,0.3524183737302413,0.9093506843471758,1.7745189550131302,1.149576091425382,1.6172776647517528,1.9856348251848348,1.5023458030804213,0.026121884917795435,0.12567123093455213,1.2460799969918472,0.5318633343465584,0.05987541259745133,1.4148840201181747,1.9182466915946013,0.6398303612718766,0.5861031924101627,1.9397543245307267,1.864873769823801,0.04161891916543303,0.4811870641681688,1.9736312308569608,0.155425394116254,0.8693869276957518,1.8113188615617595,1.9937988782176046,0.22479535359086977,1.0917295268891032,1.7363591994627847,1.999973295133898,0.30508061745603754,0.9731306878014152,1.7325448041050326,0.0010779981851499754,0.39515072539108786,0.854910183289985,1.8080202928168236,1.20353715216245,1.5732345340001768,1.9748980390509776,1.8721184149316867,0.04002945476768305,0.100387700687388,1.298827349692735,0.5809932739581761,0.07996655197889624,1.364397286811568,1.409763537475436,0.691496011409851,0.5368372991151398,1.957076298270433,1.8360638548001011,0.02741351735910913,0.4351168606697472,1.9846700116941596,0.18603785982629462,0.9239160963900204,1.7780619594841316,1.9983990340951008,0.2605795199980485,1.0370203717067232,1.6875804075237903,1.9980700533469877,0.34553262397269435,0.9183884975455752,1.6084550616842634,0.005123092300123866,0.43970098569394245,1.9871263483256199,1.8390930800131295,1.2568864704978675,1.5274685144943234,1.961231141822231,1.8976223255594187,0.05682227028704634,1.4231208116367844,1.9218012763726287,0.631382561940218,0.1028229038294729,0.038491096923105705,1.459138011501758,0.7440888877023322,1.8792127835582333,1.9715217251633042,1.8047411026602547,0.016131279134383725,0.39074444533743846,1.9927493112210066,0.21909673470140512,0.0018677922191142615,0.3011040738422891,1.999998445310338,0.2985860564023515,0.9821999497071687,1.7263395684564533,1.9931670556680299,0.23415981164933175,0.863891595267794,1.5640501792686838,0.012158345127631809,0.48593525631634993,0.7474997214308594,1.8676439255858943,0.03752803723314535,1.4801171585895694,1.9446752101297897,1.9204283816118126,0.07644985972079232,1.3728300056505534,1.8991711819000852,0.06498420762068613,0.12837577209332396,0.024877781419885503,1.5071325203135673,0.7974509192904573,0.442625584965875,1.9830471886632874,1.6056525460822164,0.007806113895187372,0.3482031819705984,1.9978448466466519,0.2545026584267872,1.9839399776233613e-5,0.26295843380819717,1.0132648233843153,0.33870073201293116,0.006313831177309881,1.7629156748101336,1.9852790383333505,0.2000710890756794,0.8098037744845267,1.8341238057342473,0.022162611818120737,0.1346201175713646,0.6948525888359716,1.8935870183568917,0.0538467444893993,0.08135416698239584,1.3421667657705834,1.9404680381998713,1.4690281166159238,1.3214186380339723,1.8738385776770299,0.046956081022638374,0.49678192526946185,1.2069887428118404,1.5536028137050684,0.8514217235756989,0.39796292273729417,1.991618048339156,1.6483502198827527,0.9696054485922578,1.7485127975845356,1.9999413030517017,0.2921492164998194,0.9912706764246827,0.22702801381146986,1.0680424226929235,0.38080297990753886,0.8728842079550765,1.7971987950322568,1.9744297092243726,0.4781753752059976,0.7562875991947013,1.8630980355976798,0.0351058239832549,1.4880549029715386,0.6431225940126386,1.9168443848961638,0.07300916877080599,0.061083260679488105,1.393147008293786,1.9576810650043677,0.12396505024913596,1.2690412285548756,1.4992932763179796,0.03179238172780974,0.45018017703117574,1.1530621664639409,1.5984092225859612,0.008978190229111283,0.3551097169328328,0.8857127228946966,1.6890992404943854,1.0244281600149647,1.7110473923005052,1.9990323794180735,0.3319232600648513,0.9364835277040091,1.6227522930702298,1.1226155166587475,0.4247662594032169,0.8187174428358679,1.8290858892695185,1.2393108957653598,0.5257088636696674,1.9660755184892214,1.8894781755883456,1.3526366468861823,1.4394892606245553,0.5924652143807536,0.614578659392909,0.09495771632936012,1.3299954888172631,1.4429456252881843,1.9720157273014673,0.1517098417560988,1.2158552004744543,1.546025520653794,0.8424570924821102,1.826926270041241,1.098675553133507,1.7410623058246437,0.0031403844450464957,0.31419476528184254,0.9403277472158298,1.7277771344351534,0.0007784110956530199,1.6714448939362585,1.9951208075670626,0.373705245988478,0.881887281326686,1.5789380275391978,1.9764278981428882,0.17345868044505686,0.7650955326766443,1.858481119059982,1.2921612271324352,0.5746678609200018,1.9504704793579153,1.913184938706195,0.06964476227221394,1.3896027084931044,0.5430327035546966,1.9550306161611588,0.11962641956625464,1.2777671142099651,1.491412944198987,0.7797181863770495,0.1820042172244526,1.1620204074027571,1.5911166544610469,0.8968118355506511,1.794867651135262,1.0439923648573357,1.6824971197017375,0.0002986965139093467,0.27534103998139137,1.9993902411584954,1.7642676531112307,0.004441912552679561,1.6298243300364152,1.1136074907257962,0.41736959615317604,0.8276460293934683,1.5333837310820626,1.9631317932619194,0.1438538556617982,0.71217964115565,1.885296135380984,1.3441334514372065,0.6249052179267518,1.9320087475414516,1.9341470729362955,0.09113667966709249,1.3385451834259956,1.8825157497830736,1.9698447100129854,0.14694113530122277,1.2247038948593807,1.820596448747284,0.833505425998166,0.21475712519843793,1.9891108140130864,1.6344311537914307,0.9514767164730016,1.7604200126290104,0.9891769550449674,1.7215258770146011,0.00046166728920615796,1.678139691524729,1.9959748854655721],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],18:[function(require,module,exports){
module.exports={"expected":[0.9999999999999687,0.8002407545347816,0.60853380021237,0.4326068404823791,0.27955148753201764,0.155537399541689,0.06556358188898281,0.013256877342950002,0.000725768105471869,0.02847538293637064,0.09538713542332866,0.19876381417734523,0.33443830736971236,0.4969415789251328,0.6797231252551147,0.875415025925695,1.0761289443801378,1.2737741066271226,1.460383440175613,1.6284347265659114,1.7711538218441554,1.8827877221672955,1.958836467272162,1.9962345337824432,1.9934744063937264,1.9506673457851993,1.8695389037038823,1.7533593660085822,1.6068119275127992,1.4358039124972797,1.2472286505869388,1.048687606773964,0.8481839665170755,0.6538000274980389,0.47337140236554776,0.3141711653478183,0.18261667477795773,0.08401088950886748,0.022328606749555835,5.6238069971459304e-5,0.018091582200951084,0.07570763478548148,0.17058189390968204,0.2988899801080227,0.4554597970217933,0.6339800184995787,0.8272544980255042,1.0274923452406899,1.2266219765756143,1.4166164806200265,1.5898171827606637,1.7392423661984733,1.8588687048126487,1.9438740633142086,1.9908318774218579,1.9978492785991193,1.9646433955465272,1.8925527567380445,1.7844833343652886,1.6447914046575511,1.4791079464747738,1.2941116566638662,1.097259731923892,0.8964872693579052,0.6998874028697386,0.5153850690993165,0.35041755338799974,0.21163469295586534,0.10463082209884977,0.03371926468620401,0.0017584641623310526,0.010036759749673552,0.05822045352058869,0.14436726175418513,0.26500460835356365,0.4152696043184091,0.5891050707016705,0.7795037033707909,0.978790537295731,1.178932324233017,1.3718613528010914,1.5498006577618828,1.7055775093328758,1.8329125457794704,1.926672894358762,1.9830790773167677,1.9998573625597087,1.9763314177489768,1.9134495732438686,1.8137465949240341,1.6812415078280731,1.5212755893358658,1.3402970623850174,1.1456011677349982,0.9450360929596743,0.7466866121648965,0.5585481889083236,0.3882046792245223,0.24252262654204293,0.12737447145700576,0.047401833770727375,0.005828408890340087,0.004330020731520112,0.04296706929066407,0.12018209592203732,0.23286256446466813,0.37646632751141906,0.5452047202796075,0.7322759015711091,0.9301390358530499,1.1308182641860753,1.3262242109369569,1.508480066345676,1.6702391005686685,1.8049808102092548,1.9072737596782356,1.9729945222524532,1.999493895322193,1.9857036896952307,1.9321797882813732,1.8410797384635533,1.7160757814067913,1.5622068240905338,1.3856753210707722,1.1935972536624941,0.9937152848763269,0.7940866528296299,0.6027583836409209,0.42744291596976836,0.2752072127708617,0.15218789215970785,0.06334386046093043,0.012256418794755364,0.0009849009009302856,0.029983661437739895,0.09808376095468851,0.20254008581825356,0.33914200368655045,0.5023830940146123,0.685683111754082,0.8816532368988581,1.0823939176697268,1.279813301286374,1.4659534163899086,1.6333109587068648,1.7751397490927583,1.885722671876949,1.9606021316794164,1.996759738990705,1.99273798139171,1.9486989758498705,1.8664179337874363,1.7492116023451625,1.6018045663718083,1.430138800505095,1.2411341482933569,1.0424093834429071,0.8419750972040952,0.6479107915994049,0.4680391948612834,0.30961092741469365,0.17901222951452744,0.08150753203085037,0.021027247346214528,9.33451256801554e-6,0.019301025170891495,0.07812467166116188,0.1741090939835277,0.30338516201642673,0.4607417600730783,0.6398358468698355,0.8334481433917101,1.0337741418834554,1.232738705399375,1.4223215764097659,1.5948806732203318,1.7434601421301987,1.8620707477539662,1.9459312989789432,1.9916613786819908,1.9974176082756383,1.9629679542614074,1.8897010814956479,1.7805703761369043,1.639974894710191,1.4735820382269589,1.2880990993651458,1.0910028916375325,0.8902383591891406,0.6938983162610312,0.5098972260107797,0.3456521686632106,0.20778385915685582,0.10184976625819075,0.03212009110849079,0.0014056355021302425,0.010944498523142276,0.060352168796148464,0.1476370241321523,0.26928061377868096,0.42037948709841866,0.5948428515652844,0.7856380924875132,0.9850742575642862,1.1851120790164127,1.3776880363090582,1.555039396500318,1.7100171298492088,1.8363740870604237,1.9290168217452996,1.9842109071434066,1.999731470789079,1.974952879075785,1.9108739565340906,1.8100777232351515,1.676627273303796,1.5159019916762728,1.3343807112031214,1.139380551027117,0.9387619636595422,0.740611880297871,0.5529177267927194,0.38324545067440263,0.23843453795991854,0.12432231361084789,0.045508639081666136,0.00517049199792885,0.004933902252379885,0.04480840677290865,0.12318666508906839,0.23690925119405104,0.38139200994302724,0.550810844254289,0.7383364843448789,0.9364097754569269,1.1370463872336218,1.3321586619140329,1.5138816276533755,1.6748900353800802,1.8086936394362378,1.9098988192498236,1.974425996070363,1.9996740807057867,1.984625323375366,1.9298863391825851,1.83766365547267,1.7116747667598537,1.5569982825990336,1.3798692089369469,1.1874276151488834,0.987430817986578,0.7879406842967976,0.59699865733232,0.4223016063364494,0.27089156590001007,0.148871871689365,0.061161135109160214,0.011294974176303874,0.0012834928289540137,0.03153025367763296,0.10081601040456034,0.20634785555806456,0.3438718025952201,0.5078442639937666,0.6916555131522537,0.8878961223366315,1.0886556365614237,1.2858414438701697,1.4715049883603237,1.6381621763099938,1.779095059845107,1.888622637282209,1.96232985419078,1.9972455741487065,1.9919623451909296,1.9466931341699043,1.8632627420658023,1.7450342462963184,1.596773435133558,1.4244566988757503,1.235030121674716,1.036129485024572,0.8357724695641314,0.6420354625324756,0.4627279987631949,0.3050779584926111,0.17544021165414092,0.07904045319975372,0.01976455544217115,1.9286206798252437e-6,0.020549203822533002,0.08057812080014204,0.17766891512463212,0.30790785884153193,0.46604502276467596,0.6457059010161337,0.8396483672289581,1.0400546045140093,1.2388462415016777,1.4280099913273296,1.5999206670628188,1.747648552847873,1.8652387405954554,1.9479511722168352,1.9924517112670643,1.996946541917345,1.9612544776351177,1.886814264809446,1.776626586913172,1.6351331070125468,1.468037424419597,1.2820751627184515,1.084742456915733,0.8839937843893066,0.6879213200670996,0.5044287410182764,0.34091262939153455,0.20396431633814815,0.09910418558618894,0.030559146884529098,0.0010922493562925961,0.011891303044626933,0.06252099831385127,0.1509404531720988,0.2735854811831906,0.4255122637493671,0.6005966353398071,0.7917809484780807,0.9913585673700995,1.1912845222366906,1.383499801882152,1.560256212273683,1.7144287060845778,1.8398025932089501,1.9313240547936728,1.985303862574007,1.9995660915906162,1.9735358316804232,1.9082623620937114,1.8063768550687107,1.6719863133321633,1.5105080169021643,1.3284511526404552,1.1331544290616886,0.9324902531415781,0.7345473937514512,0.5473049235479353,0.3783105827165708,0.23437652971653944,0.12130474331195862,0.043653144925030474,0.004551868915446122,0.005577086928008845,0.046687472445344436,0.1262258666591426,0.24098607850793496,0.3863421261742783,0.5564347103177122,0.7444074023130314,0.9426830267496682,1.1432690972181647,1.3380799932768102,1.5192628916470639,1.6795143133617036,1.8123745268541858,1.9124879396066745,1.9758189819769194,1.9998147809283444,1.9835080662907953,1.9275561614013614,1.8342144864140053,1.7072456423587123,1.5517677407704067,1.3740480927161118,1.1812505736129177,0.9811468475548102,0.7818030916901827,0.5912548487846423,0.4171831146540458,0.2666047173789534,0.14558946910695048,0.05901549204699208,0.010372581462802732,0.0016215320957316814,0.03311509856872574,0.10358377585441325,0.21018697299742684,0.34862751727779095,0.5133248731568196,0.6976400935516234,0.8941434356573129,1.0949138537297551,1.2918582962788372,1.4770379368103788,1.642988187761564,1.7830195978742007,1.8914875038401429,1.9640195665646427,1.9976920200668886,1.9911475284275186,1.9446498999721018,1.860073453162793,1.7408274628593272,1.5917187325178435,1.418757832041296,1.2289168118283993,1.029848159562488,0.8295763285887828,0.6361742723611985,0.4574380238529909,0.3005724376251788,0.1719007622844182,0.07660975046029816,0.018540580911271642,3.402068682401005e-5,0.021836068855205726,0.08306788529591547,0.18126121672712325,0.3124578919456219,0.47136937562823056,0.6515899490828734,0.8458549246403707,1.0463334850665373,1.2449443436471834,1.4336815006916144,1.6049369652182754,1.7518074329173543,1.868372558207512,1.9499336032469707,1.9932028439604959,1.996436098130435,1.959503033346587,1.8838924207031273,1.7726521224657994,1.630266232805626,1.4624743240540345,1.2760400846573308,1.0784786750335842,0.8777537916071712,0.6819566503674361,0.4989798301163133,0.33619912277536956,0.20017621536410535,0.09639418852788362,0.029036493668520347,0.0008183181029568498,0.012877135917226168,0.06472685640923292,0.15427741839507148,0.2779190405331369,0.43066773153666826,0.6063661947620904,0.7979320287118681,0.9976432184956282,1.1974494100942539,1.3892964199670568,1.5654508990281033,1.7188120637904736,1.8431979288059837,1.9335945023726278,1.9863579004389167,1.9993612314964697,1.972080331533478,1.9056148930754364,1.8026441366016632,1.6673188112222226,1.5050938780648417,1.3225086209028187,1.1269230477579535,0.9262212091259047,0.7284933920612637,0.5417100008688687,0.3734002702685215,0.23034876209510702,0.11832187974837727,0.041835424589192316,0.003972564077309726,0.006259549353889171,0.04860419208867395,0.12929958058982638,0.245092885379655,0.39131648068513314,0.5620760963380197,0.7504884156865705,0.9489585419501797,1.1494861483550045,1.3439879711444478,1.5246236457771967,1.6841117518638993,1.8160233270753474,1.9150410184836715,1.9771734249519197,1.99991599043248,1.9823519625709776,1.925189346975101,1.830732367523019,1.7027885831450755,1.5465154052006795,1.3682122023309151,1.1750663730354833,0.9748636217853891,0.7756741174326272,0.5855271848669301,0.41208764309291723,0.2623468365299363,0.1423408140608552,0.05690701602314707,0.009489277086933257,0.00199900534939379,0.03473813351270294,0.10638694798300419,0.21405728649874833,0.35340895989296717,0.5188247050307806,0.7036366165728133,0.900394930104081,1.1011683219874449,1.297863620858534,1.4825520431997865,1.647788802443698,1.78691320816836,1.8943171583941532,1.9656712020607165,1.9980990591115404,1.9902935632851237,1.9425693539602713,1.856850193049224,1.7365914181937883,1.5866406581752985,1.4130424250956661,1.222794460218018,1.0235656551570036,0.8233869190133257,0.6303274525907462,0.4521694790742812,0.2960945427715319,0.16839402120684266,0.07421551982055141,0.01735537209803839,0.00010560944342696832,0.023161569440292795,0.08559386680767667,0.18488585690201975,0.317035081611581,0.47671460836236745,0.6574877586617232,0.8520675704791306,1.0526105355373738,1.2510327709725144,1.4393358804892509,1.6099293695527854,1.7559366180710572,1.8714720768105582,1.9518785137671126,1.9939147470940326,1.995886297076423,1.957713690574454,1.8809356645837387,1.7686471397785333,1.625374464321569,1.4568929568616986,1.2699941035556126,1.0722117933980446,0.8715186273098439,0.6760045427549843,0.49355070852606175,0.3315118349889611,0.1964197058572693,0.09371988212283133,0.027552191602328135,0.0005838525618790946,0.013901958202479414,0.06696965595523496,0.15764778799750367,0.28228112066152167,0.43584568682929237,0.6121513019458786,0.8040910902334095,1.0039279627093933,1.2036064990882624,1.3950776616085432,1.570623251583383,1.7231670298329629,1.8465599597423803,1.9358280748039909,1.9873729791057326,1.9991168985982224,1.9705864361243166,1.9029316540490857,1.7988797152690505,1.662624951331048,1.499659789012441,1.3165533507087483,1.1206866532432234,0.9199550792274371,0.7224501143483645,0.5361331797439662,0.36851470727812163,0.22635139418452643,0.11537384073729795,0.040055549870531615,0.00343260036491988,0.006981262574071945,0.050558489996136435,0.1324076854755184,0.24922950959841295,0.39631487699836565,0.567734779491655,0.7565792842770928,0.9552360731880609,1.1556972950829552,1.3498823621633271,1.529963678304622,1.6886821692966336,1.8196398959791544,1.9175579550392627,1.9784892714975781,1.999977705220619,1.981157057879737,1.922785989388406,1.8272174363364977,1.6983037651637782,1.541241483346782,1.3623617682875544,1.1688752576805697,0.9685813888536082,0.7695540036062337,0.5798158918106489,0.40701539291417355,0.25811809153080423,0.13912603486668484,0.054835790318169875,0.008645095937466762,0.0024158976804833365,0.03639929440290346,0.10922541607044278,0.2179586431922541,0.358215941583252,0.5243435423830026,0.7096448453650601,0.9066503587553072,1.1074187942952918,1.3038571804108527,1.4880470897321838,1.652563830741553,1.7907757369377033,1.8971114891784473,1.9672846954425864,1.9984666752054179,1.989400483493689,1.9404515783118539,1.8535930890373602,1.7323262796152918,1.5815394126798763,1.4073107037860966,1.2166633086644256,1.017282219954352,0.8172044853074953,0.6244952341593235,0.44692257252413303,0.29164445079971457,0.1649201269306022,0.07185785584787296,0.01620897581595515,0.00021669206287577847,0.024525653223151922,0.08815596556421301,0.18854269248322453,0.3216392470491676,0.4820805098407078,0.6633990968009051,0.8582860593581646,1.0588855079954778,1.2571112829968698,1.444972907383148,1.6148976828762815,1.7600359452145087,1.8745371739797023,1.953785826957155,1.9945873925488744,1.9952971604713907,1.955886519994143,1.87794411323728,1.7646117970402457,1.6204579947756161,1.4512935432958236,1.263937458217337,1.0659420595385054,0.8652885377741703,0.6700652323262937,0.4881415906873483,0.3268509511709625,0.19269493619231381,0.09108137200083044,0.026106299312964376,0.0003888619939818039,0.014965729421920981,0.06924930836572563,0.16105142885648338,0.28667154927467553,0.4410459251082772,0.6179517283908107,0.8102578897716595,1.0102125517764666,1.2097555460258052,1.400843298459036,1.5757730656420446,1.7274934321992896,1.8498885532245868,1.9380246838660415,1.988349058480843,1.9988331025465316,1.9690542044589252,1.9002127509974232,1.7950837397581152,1.6579049190567923,1.494205964380503,1.3105855772796027,1.1144454918430475,0.9136921109459886,0.7164177993102345,0.5305746804464977,0.3636540867154162,0.22238458387311666,0.11246074272062534,0.03831359107056964,0.002931999105753702,0.007742198082315799,0.05255028897684044,0.13555005855201596,0.25339578777575955,0.4013371176874192,0.5734105362717572,0.7626797675073717,0.9615153725128276,1.1619022920737059,1.3557629335169095,1.5352827783086482,1.6932253851374859,1.8232240907182466,1.9200386498593116,1.9797664696405404,1.999999922855149,1.97992339941346,1.9203461835691793,1.823669831687441,1.6937913655565575,1.535946183518164,1.3564970216665677,1.1626774720850632,0.9623003968952052,0.7634429919437999,0.574121195200544,0.40196656446163503,0.25391864940874764,0.13594525850183903,0.052801896741517584,0.007840071357929745,0.0028721926225812044,0.038098515626737384,0.11209906800286995,0.22189088898202391,0.3630482724821441,0.5298811672303597,0.7156645426151373,0.9129094745338567,1.113665023771927,1.3098387382017564,1.4935228593638357,1.6573130840508976,1.7946070316200067,1.8998703858224526,1.9688599829804656,1.9987948538283946,1.988468324328111,1.938296656674785,1.8503022697764653,1.7280322155883507,1.57641519752093,1.4015628945046226,1.2105235993359444,1.010998102137872,0.8110292716651574,0.6186778474279875,0.441697511445325,0.28722233747953185,0.1614792166676935,0.06953685166535517,0.015101437345399593,0.0003672641576184521,0.025928266325105587,0.09075408036766208,0.19223157903298782,0.3262702064029803,0.4874668681206904,0.6693237300139698,0.8645101456593867,1.065158154591886,1.2631796396309738,1.4505923587218261,1.6198417089499744,1.7641052524321215,1.8775677286496864,1.95565546748201,1.9952207537568505,1.9946687115850659,1.9540215937753982,1.874917884824257,1.7605462536389682,1.6155170183584713,1.445676304522137,1.2578703878684174,1.0596697210973562,0.8590637690763274,0.6641389536721288,0.482752690249596,0.3222166554171225,0.18900205349045351,0.0884787623779395,0.024698873910254604,0.00023335410100921994,0.016068407558679,0.07156572359883362,0.16448820653476448,0.29109015295953755,0.4462682409745281,0.6237672449914442,0.81643218375027,1.0164967374677067,1.2158963080316152,1.4065931027873178,1.5809001377964629,1.7317911000051445,1.8531835777795838,1.94018424279704,1.9892861000110473,1.9985098545507807,1.9674836970574157,1.8974582913117262,1.7912563600024278,1.6531589008316225,1.4887326195843782,1.3046055363307008,1.1081998100709198,0.9074325516564944,0.7103966852116776,0.5250347225262593,0.35881860056527515,0.21844848784201454,0.10958270075984566,0.036609616993317884,0.002470780072604928,0.00854232582317882,0.054579510358641836,0.13872657570192926,0.25759155535174605,0.40638300438338737,0.5791031424971942,0.7687896244204226,0.9677961919048408,1.1681008942421858,1.361629452933867,1.5405807356950887,1.697741219938443,1.826775769724107,1.9224830049612944,1.9810049689339446,1.9999826424585163,1.9786510358992073,1.9178700258848211,1.8200896936991953,1.6892515625542457,1.530629714869047,1.3506181941141298,1.156473261048975,0.9560208939970153,0.7573413238181628,0.5684433199662458,0.3969413571542829,0.24974867603324802,0.13279861060067466,0.0508054156279506,0.007074235145208663,0.0033678721529177835,0.039835730068306874,0.11500779027673635,0.225853868552079,0.36790576172207123,0.5354373608473559,0.7216954705568374,0.9191720302170736,1.1199067637036777,1.3158080579714715,1.4989791358127054,1.6620363747855627,1.7984069408865229,1.9025937393552241,1.9703970024535662,1.9990835820180668,1.987497122606844,1.936104674164311,1.84697786524737,1.723709395720053,1.5712682150947934,1.3957992242781008,1.204375574739246,1.004713549918091,0.8048615219951117,0.6128755221720785,0.4364945022172141,0.28282837747592715,0.15807142632743243,0.06725259894810043,0.014032800431945214,0.0005573197803601104,0.027369353345717995,0.09338810859750257,0.1959523708473414,0.3309277767593126,0.4928734704519464,0.6752614242896585,0.8707395835433979,1.071428227569048,1.269237601186778,1.456194012548308,1.6247612524946426,1.7681443789943345,1.8805636211193941,1.9574873614944839,1.9958148057014715,1.9940009752399446,1.952118985579106,1.8718570988747447,1.7564506701558202,1.6105517302289893,1.4400414624104263,1.251793132146096,1.0533950258196354,0.8528445670826675,0.6582259408691686,0.47738422006368186,0.317609130773013,0.18534120361329365,0.08591215605207436,0.023329970984813042,0.0001173350252157146,0.017209949059155516,0.07391881016070878,0.1679579852864459,0.2955367571897096,0.4515124281566454,0.6295976220464112,0.8226137282966546,1.022780271570246,1.2220285425576651,1.4123268474872126,1.5860042655374589,1.7360598635010978,1.8564449032604389,1.9423066662986535,1.990184066685014,1.9981471673786426,1.9658749759517429,1.894668383787738,1.7873977271759651,1.648387084113844,1.483239970810625,1.2986134640619047,1.1019498546188793,0.9011766485992414,0.7043870098747552,0.5195135248008991,0.3540084398201576,0.21454326155920533,0.1067398285320117,0.034943694942370596,0.0020489614827092772,0.00938161419314365,0.0566460739913226,0.14193711145907728,0.2618166466018763,0.41145233778375545,0.584812373320901,0.7749086136886874,0.9740782832840814,1.1742928567557942,1.3674816886983217,1.5458573412050427,1.7022294953327437,1.830294792712395,1.9248909237980334,1.9822047204595266,1.999925864713265,1.9773400175928826,1.9153576141388253,1.8164771637801078,1.6846845354701376,1.525292287389204,1.3447255178322663,1.1502628696267814,0.9497431281869452,0.7512492402331084,0.5627824903723557,0.39193996947783605,0.24560833611028343,0.12968621544971215,0.04884642583451293,0.006347617548300599,0.0039029166931338066,0.04161086911105627,0.11795146800312484,0.2298474253725893,0.3727882174420214,0.5410119037753656,0.7277373909803618,0.9254377784460929,1.1261437675538608,1.3217649039439252,1.5044157035665993,1.6667335163848485,1.802175314648375,1.905281442209552,1.9718956931527223,1.9993328483702433,1.986486916690447,1.933875717359394,1.8436200067576387,1.719357990753286,1.5660986686970608,1.3900199207602784,1.198219477709105,0.9984288115223542,0.7987014799113459,0.6070884875719333,0.4313137503484381,0.27846274434160256,0.15469689051077584,0.06500518791960075,0.01300310728468801,0.0007868514242796998,0.02884885736488474,0.09605794621484398,0.1997049209625239,0.3356117741531227,0.49830010328431307,0.6812119451008274,0.8769741269597602,1.077695479271748,1.2752849283864907,1.4617776476079745,1.629656119198076,1.7721531653635885,1.8835247330571265,1.9592814366383986,1.9963695249188196,1.993293977810286,1.950178770554515,1.8687618762836606,1.7523252083582248,1.6055623265064698,1.4343892395260818,1.2457059310899175,1.0471182215432446,0.8466311774393311,0.6523264274696876,0.4720363921739157,0.3130285592267176,0.18171253115701047,0.08338165439913958,0.021999644605588453,4.080934913175405e-5,0.01839030883466397,0.07630847510918648,0.17146062806208784,0.30001118633314505,0.456778279519543,0.6354426292670685,0.8288022792522909,1.0290629058969534,1.2281520073927457,1.4180443060870764,1.5910852472618355,1.7402995540793824,1.859672400851265,1.9443918705393264,1.991042923034826,1.9977450553555416,1.9642281046832286,1.8918431386212697,1.7835079936870675,1.6435896573809232,1.4777282350079735,1.2926095971482898,1.0956958723481067,0.8949246488699898,0.698389010669938,0.5140113053467732,0.3492237944716956,0.2106690592735917,0.10393223832493736,0.03331589071837415,0.0016665599970718814,0.010260030042013923,0.05874989824960708,0.1451815390134925,0.26607089464335165,0.4165449176598194,0.5905380032397927,0.7810364936242288,0.9803613985200621,1.1804779350441843,1.3733194096585706,1.551112386423156,1.7066900340424156,1.8337810206884928,1.927262311261338,1.9833656768294803,1.999829591862002,1.975990396277109,1.9128090475664727,1.8128323846182057,1.680090464692742,1.5199341118965268,1.338819225570107,1.1440465431166227,0.9434673474247443,0.7451669818141831,0.5571389300105157,0.3869625989772758,0.24149779317506626,0.12660819598243978,0.04692500473752148,0.005660247267174401,0.004477305110032637,0.043423862640483146,0.1209299849125498,0.23387140170576637,0.3776954467943271,0.5466045758310026,0.7337900652417311,0.9317064717361763,1.132375788973198,1.3277090408350876,1.5098323478918758,1.6714043233209803,1.8059120040621404,1.9079333882265068,1.9733559958825153,1.9995426430393834,1.9854377464800486,1.9316098742994867,1.8402288269360212,1.7149781725599917,1.5609067625148398,1.3842252122221788,1.1920555513992526,0.9921441351854736,0.7925493887234126,0.6013169722042522,0.426155460468699,0.274125610510485,0.15135574250525474,0.06279470734817394,0.012012398574463456,0.0010558500233198709,0.030366719945105425,0.09876348776639798,0.20348908116011555,0.3403220135758055,0.503746552276265,0.6871750574132784,0.8832135296563772,1.0839596621557495,1.2813213823726846,1.4673430433583192,1.6345261157223967,1.7761314532007741,1.8864509475047804,1.9610376220513133,1.996884889498588,1.9925477472211384,1.9482010253363748,1.8656323393062109,1.7481700311937383,1.6005490042624624,1.428719859120797,1.2396090251325773,1.040839556189614,0.8404238455628825,0.646440646492868,0.46670941780869557,0.30847512170197355,0.17811617944723024,0.08088735736893116,0.020707947317834652,3.780095366057168e-6,0.01960944026333411,0.07873462405706988,0.17499599651425035,0.3045132636587703,0.46206558707263434,0.641302035787226,0.8349975921812459,1.0353443922958956,1.2342664606721439,1.4237452527588443,1.5961428822808952,1.744510004280555,1.8628659430721353,1.9464397731576266,1.9918626351373918,1.9973035343641123,1.9625431483000502,1.8889826674040542,1.7795873131727022,1.6387668101215247,1.4721976298790527,1.2865941727307968,1.0894381102784942,0.8886767994106647,0.6924029245060781,0.5085282814906349,0.344464853504062,0.2068260340084771,0.10116004103301834,0.03172626861639549,0.0013235907197939323,0.011177538674092546,0.060890900036609685,0.14845973021672232,0.27035413144173726,0.42166054286477783,0.5962798061027437,0.7871730221878355,0.9866452894421958,1.186655884808922,1.3791423852359,1.5563456637854722,1.7111226598850273,1.8372343159533129,1.9295970736861952,1.9844877921882693,1.9996938277073135,1.9746022252592503,1.9102244268311332,1.8091555001749042,1.6754695316789894,1.5145554000286081,1.332899550614478,1.1378245270510636,0.9371937995910752,0.7390947887985277,0.5515128617904703,0.38200944224886324,0.2374172095858882,0.12356467377446445,0.04504122822929668,0.005012151451629698,0.005091014716368414,0.045274639046940846,0.12394322335961128,0.23792563861252747,0.3826272559531638,0.5522151561144112,0.7398532542723201,0.9379778624866022,1.1386025818090937,1.3336402338633446,1.515228854841439,1.6760486111060966,1.8096168615361345,1.9105494726594812,1.9747778529638853,1.9997129577390127,1.9843496534158476,1.9293072344808126,1.8368044597273916,1.710570114134379,1.5556927016182192,1.3784153275436073,1.1858840392726608,0.9858597691396964,0.7864054914267092,0.5955612040325452,0.4210198363202129,0.26981714729083506,0.14804811427958797,0.06062124454341811,0.011060713432335056,0.0013643049525687845,0.031922881133791825,0.101504626388494,0.20730470197329665,0.34505830898216294,0.5092126023038714,0.693150525696121,0.8894575451888823,1.090220528798256,1.2873467247172938,1.4728899799771498,1.6393710497125802,1.7800790853711983,1.8893421488825322,1.962755848367356,1.9973608790848967,1.9917623129471043,1.946185828041699,1.8624686115530666,1.743985302783916,1.5955119615132491,1.4230335451237481,1.2335026550897656,1.0345592777539094,0.8342228166310652,0.640568830415382,0.4614035073730385,0.3039489980505289,0.17455229053271004,0.07842936348141283,0.019454930141102,6.24872650334396e-6,0.020867295191870916,0.08119716117628784,0.17856395100263656,0.3090428113432183,0.4673741419776659,0.647175610171951,0.8411994223809496,1.0416244826607082,1.2403716608867537,1.4294294623260195,1.6011769708280879,1.7486910478001099,1.8660254037844113,1.9484502932653527,1.9926431706156493,1.996822621843557,1.9608201733546409,1.8860870831190828,1.7756358404919728,1.6339187328288955,1.4666483738720935,1.280567428406756,1.0831768155794557,0.8824333469989247,0.6864289878221372,0.5030646698013465,0.3397318048859844,0.203014337555805,0.09842334615254711,0.030174891423382588,0.0010200671975000297,0.012134103849559041,0.0630689947869687,0.15177155558665834,0.27466618781759977,0.42679901134130616,0.6020375551196204,0.7933179569986925,0.9929297078492576,1.1928264620331361,1.3849503854343272,1.561556966587633,1.7155271977803324,1.8406545421085418,1.931895118854035,1.9855710222145642,1.9995185776116218,1.9731755593694091,1.9076038540201972,1.805446655679909,1.6708219189465674,1.5091563642338968,1.3269667267812253,1.131597067187733,0.930922732478745,0.7330329010258296,0.5459045079307523,0.37708069493282026,0.23336674651792733,0.12055576903893217,0.043195170715274345,0.004403355700164591,0.005744021271850697,0.047163125228332436,0.12699106432715135,0.24200997595855855,0.38758345012176465,0.5578434230190031,0.7459267185878615,0.9442517029894238,1.1448239001155842,1.339558248758231,1.520605011264263,1.6806661963000447,1.8132897407355681,1.9131295921781875,1.976161208236273,1.9998437857420437,1.983222680475362,1.9269678888532413,1.8333470403876473,1.7061339895860903,1.5504566919520717,1.3725904962034834,1.1797051850919271,0.9795759616053553,0.7802700306933236,0.5898214103980289,0.4159070807500381,0.2655375248584031,0.14477413647870796,0.05848488535292029,0.01014808944794432,0.0017122040286631224,0.033517279465665406,0.10428125381159359,0.21115163269240778,0.34982047329783716,0.5146980374689014,0.6991381139301052,0.8957059269310491,1.0964778319071167,1.2933607174311406,1.4784182383713742,1.644190729803257,1.7839959059512225,1.8921982229936638,1.9644360477199647,1.9977974748770755,1.9909377060112905,1.944133258266819,1.8592708179851996,1.7397711884170781,1.590451397212299,1.4173305221331591,1.2273870621510956,1.0282776342946698,0.8280283355719955,0.6347112111626345,0.4561188704401681,0.2994503670453704,0.17102100518005614,0.07600776982233359,0.018240642567082133,4.821514503761115e-5,0.02216382393747729,0.08369598920146504,0.18216435060031633,0.31359965047834093,0.47270373455696235,0.6530631204262827,0.8474075248913004,1.047902928940508,1.246467366893279,1.4350967102736014,1.606187314066585,1.752842519495084,1.8691506581957764,1.9504233514509495,1.9933844986399962,1.9963023367889967,1.9590592479011868,1.8831565001360848,1.7716537317202814,1.629045616992427,1.46108068617175,1.2745296022209391,1.0769122355594836,0.8761945382388668,0.6804674365767084,0.49762068608077903,0.3350248355637504,0.19923412047005806,0.09572226177759158,0.028661820415671557,0.0007560014187660835,0.013129687785985555,0.06528409647024325,0.15511688431270898,0.27900689345322816,0.4319601201300932,0.6078110228707588,0.79947105534401,0.9992144055187901,1.1989894229912121,1.3907431808492619,1.5667460889935643,1.719903473757982,1.844041564061816,1.9341563559966115,1.986615324122908,1.999303848496957,1.9717104549580071,1.9049474326412579,1.801705997625421,1.6661478100670426,1.503737217763644,1.3210209884048518,1.1253644094989972,0.9246543937828039,0.7269815579287396,0.5403140899502636,0.3721765517046648,0.22934656395647435,0.11758160062177403,0.04138690511118048,0.003833884059009529,0.0064362989839995555,0.049089246593199354,0.13007338743149743,0.2461242524203784,0.3925638335402478,0.5634891542392495,0.7520102182985638,0.950527745440388,1.151039498162545,1.3454628517698985,1.5259606048123968,1.6852568965172863,1.816930496589033,1.9156736448730018,1.9775060070598882,1.9999351218810184,1.9820568721718081,1.924591929816264,1.8298567054780253,1.7016699741332435,1.5451989403287691,1.3667509482711946,1.173519232909589,0.9732929607803813,0.7741432488617823,0.5840978180115806,0.4108173957019692,0.2612869122500554,0.1415339384182417,0.05638571415862903,0.009274562668195263,0.0020995335102766965,0.0351498519650536,0.10709326036437172,0.2150297213713518,0.35460831842669893,0.5202026411074989,0.7051375856169949,0.9019584280840818,1.1027313243313288,1.2993631229733342,1.483927600185703,1.6489849656263633,1.787881760234134,1.8950190570288878,1.9660781537445828,1.9981946596304545,1.9900739589840803,1.942043397084206,1.8560390849091393,1.7355278545424948,1.585367511241909,1.4116110154074337,1.2212624878704104,1.0219948739244067,0.8218406470555545,0.6288680200989646,0.45085571574275873,0.29497940637353925,0.1675224628680353,0.07362267204003614,0.01706513255774711,0.00012967769337746127,0.023498975289828916,0.08623100943385276,0.18579705309835548,0.31818360107794996,0.4780541543022381,0.6589643340055118,0.8536216545045656,1.0541794831486682,1.2525533379233154,1.4407467727564878,1.611173714097859,1.7569642553904314,1.8722415828646546,1.9523588697824978,1.9940865899294395,1.995742699750646,1.957260441492767,1.8801910342074852,1.7676411441430608,1.6241476550907037,1.45549478669059,1.268480932655557,1.0706446176575133,0.8699606195511165,0.6745185062394545,0.49219654535544033,0.33034413145330954,0.19548553206248231,0.09305689459565081,0.027187115356607006,0.0005314038136712274,0.01416425115976383,0.06753611759421074,0.1584955842609962,0.28337607689924393,0.4371436653774875,0.6135999813155324,0.8056320741883878,1.0054991342178172,1.2051445242582517,1.3965205426767244,1.5719128260429909,1.7242513149636371,1.8473952480325497,1.9363806957994818,1.9876206566654375,1.9990496488447034,1.9702069698938,1.9022552676176185,1.7979336737600131,1.661447389658485,1.4982981746635806,1.3150625703305503,1.1191268001624133,0.9183890310901945,0.7209409985233596,0.5347418286596262,0.36729720626859164,0.22535682069072915,0.11464228599671478,0.03961650283988516,0.00330375902118496,0.00716782050920084,0.05105292706353415,0.13319007092697432,0.2502683054923025,0.39756820949316873,0.5691521267798147,0.7581035131181473,0.9568057419482119,1.1572491304463526,1.351353809677869,1.5312954239506658,1.6898205304342284,1.8205389852937641,1.9181815302589125,1.9788121963177605,1.9999869625483435,1.980852274552311,1.9221794512156347,1.8263335928597986,1.6971782440958356,1.5399196544190707,1.3608969143973515,1.1673264270586534,0.9670110148309561,0.7680253879279239,0.5783906529437439,0.40575098220851447,0.2570654773564417,0.13832764807964315,0.054323813873680016,0.008440167595654358,0.0025262780986495814,0.036820534148625295,0.1099405349781234,0.2189388148331437,0.3594216552583215,0.5257261957985417,0.7111487037897235,0.9082148016865325,1.108980759070065,1.3053537042607102,1.4894178478111244,1.6537535678190964,1.7917364947363619,1.8978045395707537,1.9676821015812211,1.9985524176570273,1.989171105981769,1.9399163270392688,1.852773539972048,1.7312554687635893,1.5802605044054432,1.4058752508556887,1.2151291741565209,1.0157112447999177,0.8156599954833308,0.6230394880189329,0.4456142511650273,0.2905362926293138,0.16405680178234905,0.07127416434108624,0.015928446543431618,0.0002506331539136042,0.0248726965130478,0.08880212174502,0.18946191501231058,0.3227944820850497,0.48342518988233407,0.6648790178230896,0.85984156577456,1.0604538973737496,1.2586293335930256,1.446379426608215,1.6161359739688663,1.7610560926857615,1.8752980557056542,1.9542567718108452,1.9947494167527462,1.9951437328330874,1.955423825178649,1.8771908024633062,1.7635982362497047,1.6192250405835031,1.4498908960608645,1.262421658621003,1.0643742094319615,0.86373183716332,0.668582431781322,0.48679246186837377,0.3256898774332727,0.1917687203948153,0.09042734988353718,0.025750834494152497,0.0003462832533793758,0.015237753107674168,0.0698249692085452,0.161907521979484,0.28777356558144995,0.4423494423436415,0.6194042018015149,0.8118007701837484,1.0117836457119098,1.2112915227197985,1.4022822427221235,1.5770569736601432,1.7285705496660384,1.8507154615568182,1.9385680504055958,1.9885869801334666,1.9987559886952382,1.9686651635615058,1.8995274652845777,1.7941298330830282,1.6567208433783884,1.4928394497651682,1.3090917079040136,1.1128844855514581,0.9121268918703705,0.7149114614000209,0.5291879441521563,0.36244285134906573,0.22139767430778057,0.11173794126095715,0.037884033828814445,0.0028130015255826146,0.007938556953784981,0.053054089077836486,0.1363409917106545,0.25444197149234393,0.40259638031760525,0.5748321169643641,0.7642063623734998,0.963085444544318,1.1634525516985144,1.3572308898011516,1.5366092579640565,1.6943569177962199,1.8241150643216166,1.920653149279286,1.980079724418042,1.9999993056964125,1.9796089351961301,1.9197305483394944,1.8227778416890845,1.6926589768882927,1.534619042744344,1.355028625804891,1.1611270121428898,0.9607303718815955,0.7619166895352286,0.5727001406162687,0.4007080403830936,0.2528733869160945,0.13515539210507765,0.0522992659390632,0.007644937187301748,0.0029924209382171663,0.03852926002765811,0.11282296519102064,0.2228787586764177,0.3642602936752747,0.5312684833725776,0.717171231020777,0.9144748006237728,1.1152258892831644,1.3113322246770291,1.4948887643936009,1.6584963480310435,1.7955599572033667,1.9005545605982026,1.9692478278771213,1.9988707348260442,1.9882291826652747,1.9377521321470725,1.8494743121565025,1.7269541998311237,1.5751305784197236,1.4001234550295047,1.2089873632630403,1.0094269951121442,0.8094866249789676,0.6172258451380463,0.44039468373466306,0.286121201306792,0.16062415880964032,0.06896233948698527,0.014830629420988783,0.0004110767491409817,0.026284933347857864,0.09140922458120071,0.19315879158724114,0.327432111378821,0.4888166291519517,0.6708069382606855,0.8660670130272966,1.066725923788781,1.2646951139124154,1.4519944493500798,1.6210738976801407,1.7651178697614704,1.8783199559941335,1.9561169825725748,1.9953729529295492,1.9945054596943155,1.953549471501617,1.8741559234067757,1.7595251677270543,1.614277967904556,1.4442692356250346,1.2563520194467994,1.0581012585517402,0.8575084371000246,0.6626594476656902,0.48140864907020475,0.32106225733748284,0.18808383227391268,0.08783373150305018,0.0243530345585653,0.00020064704978872694,0.016350151228510357,0.07215056090806693,0.16535256270330823,0.2921991858077271,0.4475772454106458,0.6252234550733019,0.8179768996787824,1.018067691775104,1.2174301755815526,1.408028053409842,1.5821783286611626,1.7328610072639838,1.8540020734926834,1.9407183334187084,1.989514256359153,1.9984228796475643,1.9670850968594578,1.8967641333849412,1.7902946258387988,1.6519683579158686,1.4873612586772595,1.3031086369626788,1.1066377122252307,0.9058682234656341,0.7088931847135324,0.5236526557953243,0.3576136786836078,0.2174692811861988,0.10886868113038217,0.0361895665070886,0.0023616309561548254,0.008748477875191396,0.055092653594085994,0.139526025327389,0.2586450855689383,0.4076481474106032,0.5805289004445537,0.7703185250139626,0.9693666051926846,1.1696495168963097,1.363093860006475,1.5419018969666667,1.6988658794249192,1.827658592424402,1.9230884043101186,1.9813085412958398,1.9999721508376958,1.9783269032127158,1.91724531791467,1.819189592411033,1.688112351012744,1.529297314668426,1.3491463142796227,1.1549212330267766,0.9544512800053497,0.7558173949652196,0.5670265057932573,0.39568876941208575,0.24871080650819388,0.13201729579239196,0.050312150320478644,0.006888902853160905,0.0034979436172403178,0.040275962110900565,0.11574043715284077,0.22684939728103048,0.36912404256094045,0.536829284920042,0.7232049294322227,0.9207381776383771,1.121466468300147,1.3172984480824332,1.5003401338427318,1.6632131189317096,1.7993519966160352,1.9032690114908346,1.970775270789145,1.9991495985646068,1.9872482262387083,1.935550897889101,1.8461415317754855,1.7226242176368047,1.569977935906836,1.394355855113302,1.2028372977795918,1.0031423730765385,0.8033207793783524,0.6114273210839278,0.43519721961412994,0.28173430679348255,0.15722466953265246,0.06668728879022878,0.013771724552056996,0.0006110021418537226,0.027735630013693724,0.09405221496688732,0.19688753680385662,0.33209630578206495,0.49422825915983815,0.6767478611771491,0.8722977503697344,1.0729953146609355,1.2707504392951408,1.4575916191997726,1.6259872901933135,1.7691494261854217,1.8813071643708903,1.9579394285929856,1.9959571738314175,1.9938279055448809,1.9516374544949218,1.8710865169096782,1.7554220994534204,1.609306632453329,1.4386300274277377,1.250272254871817,1.0518260127860208,0.8512906651734676,0.6567497878387345,0.4760453196109068,0.31646145394792036,0.18443101324557776,0.08527614189706423,0.02299377076019493,9.450095524221602e-5,0.017501401584723575,0.0745128008364323,0.16883057036016325,0.2966527627747765,0.45282686809046147,0.6310575112819341,0.8241602187283479,1.0243510241999905,1.2235602403788493,1.4137577477914967,1.587276688762687,1.7371225182927552,1.8572549540253758,1.942831459906945,1.990402448716883,1.998050334858838,1.9654668321971709,1.8939653810648869,1.786428203510333,1.6471901209848443,1.4818638177777332,1.2971135938260319,1.1003867269189413,0.8996132730810273,0.7028864061739383,0.5181361822222392,0.35280987901513183,0.21357179648964753,0.10603461893512467,0.03453316780282101,0.0019496651411565757,0.00959755128311357,0.05716854009306549,0.14274504597464022,0.262877481707266,0.4127233112373845,0.5862422522084803,0.7764397596211814,0.975648975800041,1.175839781271627,1.3689424887181478,1.5471731319095647,1.7033472372252054,1.8311694296398542,1.9254871991635796,1.982498598415293,1.9999054990447573,1.9770062292398105,1.9147238581029231,1.815568986754404,1.6835385460520569,1.5239546803890667,1.343250212161236,1.1487093348265576,0.9481739872139477,0.7497277451280977,0.5613699725722341,0.3906933675466461,0.24457790054659645,0.1289134830902785,0.04836254550505115,0.0061720944551217904,0.004042826168585423,0.04206057140702346,0.1186928356290976,0.23085057381463447,0.374012709806711,0.5424083808002552,0.7292495607048894,0.9270046853390959,1.127702249630353,1.3232521388228804,1.5057717408401399,1.6679036942179586,1.803112463196196,1.905947785033126,1.9722643699863136,1.9993889978581474,1.986228275447938,1.9333127112097395,1.8427753304673613,1.7182656932064955,1.5648027803858442,1.3885726789160957,1.196679220621561,0.9968576269234302,0.7971627022204331,0.6056441448866692,0.43002206409313826,0.2773757823631344,0.15385846822449778,0.06444910211090826,0.012751773761286667,0.0008504014353944989,0.02922472921086261,0.09673098850917883,0.2006480033839837,0.33678688106827137,0.4996598661572954,0.6827015519176505,0.8785335316998841,1.0792618223616541,1.2767950705678075,1.4631707150799858,1.630875957439128,1.7731506027189534,1.8842595628471739,1.9597240378891083,1.9965020563827576,1.9931110971468287,1.9496878496795116,1.8679827042075923,1.7512891934917856,1.6043112305878893,1.4329734942066632,1.24418260503475,1.0455487199946758,0.8450787669731924,0.6508536857203477,0.47070268533154735,0.3118876489872331,0.18081040758894895,0.08275468208531733,0.0216730967872778,2.7849162303583697e-5,0.01869145870416622,0.07691159568989336,0.1723414075755837,0.30113412057510325,0.45809810303340737,0.6369061399935011,0.8303504831037212,1.0306333948073467,1.229681474986068,1.4194710995555262,1.592351852589422,1.7413549144310827,1.8604739746726269,1.9449073464059057,1.9912515221248204,1.9976383690438428,1.963810433492918,1.8911313188696037,1.7825307188137818,1.6423863213163246,1.476347344204648,1.2911068152864376,1.0941317765343346,0.893362287774738,0.6968913630372915,0.5126387413227129,0.34803164208410753,0.20970537416121693,0.10323586661504491,0.032914903140519924,0.0015771203524338473,0.01048574364085142,0.059281666581302295,0.14599792650736254,0.2671389927360761,0.41782167133881665,0.5919719465901867,0.7825698244184779,0.9819323082249274,1.1820231003213044,1.374776544926727,1.5524227545893803,1.7078008141922951,1.8346474372967403,1.927849439091966,1.9836498487714953,1.9997993529502118,1.975646965441428,1.9121662684969136,1.8119161677261022,1.678937742662494,1.5185913509297686,1.3373405523342803,1.1424915628998882,0.9418987414481718,0.7436479805531703,0.5557307643749373,0.3857220320954641,0.24047483227288835,0.12584407659320895,0.04645052849839082,0.005494540305681306,0.004627047070453805,0.04388301742745104,0.1216800440058814,0.23488213023854976,0.3789261023198839,0.548005550649948,0.7353048860876148,0.9332740762112502,1.1339329869727344,1.3291930617392904,1.5111833708480753,1.6725678886212443,1.8068412084127439,1.9085907754188125,1.9737150666521492,1.99958892325086,1.985169370578996,1.931037660513024,1.8393758411903427,1.713878798693186,1.5596053162653583,1.3827741548618722,1.1905133750210017,0.9905730048878812,0.791012636736929,0.5998765449704666,0.42486942158020424,0.2730458001688546,0.15052568784351095,0.06224786785291658,0.011770817334720407,0.0011292651739571724,0.03075217212288628,0.09944543940181083,0.20444004279661798,0.34150365196898,0.5051112356064758,0.6886677753230007,0.8847741107168667,1.0855251993762018,1.282828768979253,1.4687315166275003,1.6357397063247057,1.7771212413236022,1.8871770348089938,1.9614707399723348,1.9970075790617896,1.9923550628126945,1.947700734060927,1.8648446078949066,1.7471266130839225,1.5992919596168358,1.427299859383703,1.2380833104647961,1.039269628118373,0.8388729878570791,0.6449713741950799,0.46538095725562956,0.30734102311168465,0.1772221583108976,0.08026945166049326,0.020391064803863435,6.943035875117687e-7,0.01992027558196441,0.07934685072070413,0.17588493567843333,0.3056430822038434,0.4633907420359221,0.6427691101988777,0.8365474483015166,1.0369145554557702,1.235793637626586,1.4251678830356127,1.59740361968242,1.745558028507677,1.8636590082893614,1.9469459109221918,1.992061443046219,1.9971869984744193,1.9621159661711771,1.8882620587390022,1.7786023256921997,1.6375571486509102,1.4708120558478663,1.285088538599949,1.0878731081295416,0.8871155144485673,0.6909082920959564,0.5071605502348044,0.34327915662163067,0.20587016691691817,0.10047253471540851,0.03133483643848656,0.001244011304760262,0.011413019866529539,0.06143194959443454,0.14928453844319822,0.27142945033394417,0.42294302633988234,0.5977177572779051,0.7887084772802322,0.9882163542881216,1.1881992298162825,1.3805957981985142,1.5576505576563846,1.712226434418572,1.838092478020533,1.9301750307914662,1.9847622468923214,1.9996537167466197,1.9742491655058276,1.9095726501164734,1.8082312796051663,1.674310122566704,1.5132075381315993,1.331417568218595,1.1362681628367053,0.9356257905680071,0.7375783413789667,0.5501091039391582,0.3807749594164276,0.2364017637502751,0.12280919753670616,0.044576174821341574,0.004856267166909456,0.005250583247262686,0.0457432281891641,0.12470194429433357,0.23894390731425885,0.38386402603115843,0.553620573391813,0.7413706664070046,0.9395461026262818,1.1401584342254147,1.33512098217694,1.5165748101177414,1.6772055179149734,1.8105380849877077,1.9111978782549695,1.9751273034869592,1.9997493668460884,1.984071553456573,1.928725835658902,1.8359431982176337,1.7094637073707042,1.5543857488348993,1.376960511981038,1.1843400045166383,0.9842887552000509,0.7848708258435039,0.5941247491442307,0.4197394955945314,0.2687445312364283,0.1472264600279356,0.06008367296072059,0.01082889401822651,0.001447582342974485,0.03231789841878685,0.10219546042926009,0.20826350526369197,0.3462464321809272,0.5105821521889029,0.6946462957393197,0.8910192409299096,1.0917851983135554,1.2888512962103609,1.4742738042014358,1.6405783447417026,1.7810611851668758,1.890059465021917,1.9631794658513984,1.9974737219013485,1.9915598324043415,1.9456761861263097,1.8616723519203409,1.7429345226434991,1.5942490177914603,1.4216093470562792,1.2319746120720456,1.0329889851689558,0.8326735729413156,0.6391030856026192,0.46008034558090294,0.30282175590414184,0.1736664071401518,0.07782054878437517,0.01914772544768295,1.3037451656816579e-5,0.021187803682234274,0.08181846974112239,0.17946101470625375,0.31017946956579423,0.46870457604936067,0.6486461903221604,0.8427508695537345,1.0431942580518194,1.2418964868818279,1.4308478732202135,1.6024317905068564,1.7497316945077181,1.8668099290730413,1.9489470729364757,1.992832179490803,1.9966962409788125,1.9603834971600902,1.8853577140032707,1.7746431793092512,1.6327027937314282,1.465258171340346,1.2790590014765557,1.0816109689098308,0.8808731998375555,0.68493742966942,0.5017018253363921,0.3385526103414488,0.2020663262399679,0.09774473238236792,0.029793030106192386,0.0009503511552977351,0.012379343334576354,0.0636193042005293,0.1526047519674366,0.2757486850363845,0.4280871739570348,0.6034794573233565,0.7948554757417791,0.9945008657822141,1.1943679258116429,1.3864000186844965,1.5628563346225384,1.7166239231007778,1.8415044157390206,1.93246388240578,1.9858357488402414,1.9994685961863259,1.9728128846433859,1.906943105404336,1.8045144679374991,1.6696558685466671,1.5078034546444838,1.3254814937605697,1.1300393804488524,0.9293553823424554,0.7315190673444674,0.5445052133093315,0.375852344909272,0.23235885585691918,0.11980896579249989,0.042739558507223996,0.004257300249345897,0.005913410070563896,0.04764113021749439,0.12775841713536085,0.24303574460958888,0.3888262859021657,0.5592532272435404,0.747446662076715,0.9458205168513631,1.1463783454955216,1.3410356659945712,1.5219458456977888,1.6818163989220731,1.8142029469016296,1.913768990566183,1.9765010247101902,1.999870322306622,1.9829348674422471,1.926377327959952,1.8324775371319157,1.7050205936263982,1.5491442842572152,1.3711319799010062,1.1781593529444145,0.9780051260755619,0.778737512129559,0.5883889845925379,0.41463248875811154,0.2644721454574841,0.1439609150908152,0.057956602915802624,0.00992604101591521,0.0018053403695472703,0.03392184625542516,0.10498094297115168,0.2121182397658502,0.35101503437366044,0.5160723998143246,0.7006368770266413,0.8972686756687589,1.0980415719159495,1.2948624143829808,1.4797973588925286,1.645391681573325,1.7849702786287027,1.8929067396356425,1.9648501480349396,1.9979004664897253,1.9907254373318004,1.9436142858413605,1.8584660615817423,1.7387130877499235,1.5891826042980512,1.415902181988391,1.2258567511381318,1.0267070392195874,0.8264807670903801,0.6332490517288292,0.45480105967120465,0.29833002586669366,0.17014329452198884,0.07540807018372409,0.017943127828185856,6.487811898137075e-5,0.022493992940130547,0.0843263551270107,0.18306950341098516,0.3147431034827366,0.47403939518758154,0.6545371482301842,0.8489605018374862,1.0494722545595865,1.2479897817014665,1.4365108457607787,1.607436166459777,1.753875747579642,1.869926612568518,1.9509107534068102,1.9935637010160039,1.9961661159409878,1.9586130948888107,1.8824183993782113,1.770653436043542,1.627823448295311,1.4596859100496582,1.273018442071285,1.075345606217165,0.8746355905009718,0.6789790115951184,0.49626278223627973,0.3338521899329764,0.1982940023745603,0.09505256735872869,0.028289545041998987,0.0006961515030395882,0.01338467587709713,0.06584364400337939,0.1559584359382008,0.28009652624203973,0.43325391100650834,0.609256819150767,0.8010105770087628,1.0007855944812412,1.2005289446560763,1.39218897712927,1.5680398798699327,1.7209931065467936,1.8448831156872774,1.934715903529788,1.9868703122140285,1.9992439985812327,1.971338179584321,1.9042777382224192,1.800765879529889,1.6649751644361837,1.502379313919243,1.319532563423262,1.1238054617611022,0.9230877644404852,0.7254703977790307,0.5389193138282222,0.37095438300754857,0.22834626827969862,0.11684349986390052,0.04094075209880432,0.0036976632110005125,0.006615501360000775,0.04957664854906019,0.13084934180426722,0.24715748050489916,0.3938126859334401,0.5649032897264268,0.7535326331067513,0.9520970710595801,1.1525924751086183,1.3469368795736933,1.5272962654430642,1.686400349521682,1.8178356493997345,1.9163040107985247,1.9778361760625174,1.9999517848549626,1.981759357432901,1.9239922301776327,1.8289789948199582,1.700549632954648,1.5438811295598056,1.3652887888372836,1.1719716644280296,0.9717223657053556,0.772612937848874,0.5826694778668122,0.40954860278762983,0.2602288115829009,0.14072918201481355,0.055866741733170744,0.009062293988705283,0.002202525122930288,0.03556395228004361,0.10780177700632465,0.21600409404879684,0.3558092701968105,0.5215817616286035,0.7066392825688895,0.9035221680929144,1.104294073068982,1.300861886069979,1.4853019625310764,1.6501795267021868,1.7888483673076117,1.8957187461884204,1.9664827205343571,1.9982877959713388,1.9898519105520514,1.941515114647069,1.8552258635212464,1.734462475141537,1.5840929192499362,1.4101785896018906,1.219729969306646,1.0204240383945566,0.820294814908098,0.6274095037964875,0.4495433080478548,0.2938660104139681,0.16665295961230397,0.0730321111467469,0.01677731952463224,0.00015621425795786514,0.0238387917637215,0.08687040782184852,0.18671025926445028,0.3193338036999783,0.47939498873581243,0.6604417512417451,0.855176099884503,1.0557482970106074,1.2540732814122237,1.4421565769809739,1.6124165498782153,1.757990024041536,1.873008935672864,1.9528368747716942,1.9942559787281466,1.9955966442998379,1.9568048292846836,1.8794442309610528,1.766633253482016,1.622919305067155,1.4540954920692704,1.2669670989741402,1.069077267521167,0.8684029328121796,0.6730332732187451,0.4908436357661251,0.3291780810534094,0.1945533443200388,0.09239614597976586,0.026824440630596746,0.00048142238837711737,0.014428977785441277,0.0681048811459557,0.15934545789153676,0.28447280221964977,0.4384430334123929,0.6150496145657018,0.8071735379668389,1.0070702921508874,1.2066820430012826,1.3979624448804084,1.5732009886587661,1.7253338121823827,1.8482284444133583,1.9369310052130424,1.9878658961504458,1.998979932802496,1.9698251085766236,1.9015766538474392,1.7969856624441762,1.660268195113992,1.496935330198577,1.313571012177833,1.1175666530010442,0.9168231844206263,0.7194325715931592,0.5333516261278285,0.36608126717108025,0.2243641595080076,0.1139129168809554,0.03917982664533459,0.0031773781564360393,0.007356829384354557,0.051549706734675405,0.13397459621554764,0.25130895219987315,0.39882302917202794,0.5705705376740087,0.7596283391133318,0.9583755173392094,1.1588005776190253,1.3528243898281846,1.5326258580223606,1.6909571886568453,1.821436048997349,1.918802838823702,1.9791327048081355,1.9999937512734969,1.9805450698588807,1.921570636518597,1.8254477094673043,1.6960510019494486,1.5385964926268874,1.3594311695845356,1.1657771833689599,0.9654407222460593,0.7664973449102037,0.576966454876275,0.4044880384866344,0.25601469721610104,0.13753138844691737,0.05381417195829086,0.008237687052899179,0.0026391209151138684,0.0372441516326526,0.11065785111748216,0.21992091462882135,0.36062895028740016,0.5271100200228779,0.7126532752827361,0.909779471201775,1.1105424548112053,1.3068494743038546,1.4907873976961559,1.6549416910178607,1.7926952980267572,1.8984953736115449,1.9680771188662018,1.9986356950474327,1.9889392865676772,1.9393787554565516,1.8519518857203658,1.7301828527091434,1.5789801636797616,1.4044387959675302,1.2135945085732045,1.0141402308602154,0.8141159607273084,0.6215846724563637,0.44430729838180194,0.289429885865639,0.16319554027256,0.07069276551917592,0.01565034658414699,0.0002870422609866363,0.02522214703610881,0.08945052734056713,0.190383138463884,0.32395138889394737,0.48477114515853925,0.6663597661366581,0.8613974181909373,1.062022137513429,1.2601467457277375,1.4477848438855914,1.6173727440468384,1.762074361387493,1.8760567766404037,1.9547253609530855,1.9949089852836317,1.9949878485483699,1.9549587717706856,1.8764353262255615,1.7625827904140547,1.6179905577510674,1.4484871382095017,1.2609052112014145,1.0628062004089787,0.8621754729488489,0.6671004493854119,0.4854445999713649,0.32453046832096666,0.19084449982511076,0.08977557316886553,0.025397774740723467,0.00030617229268570245,0.015512207811746226,0.07040292631379552,0.16276568404668879,0.2888773401150546,0.4436543362145775,0.6208576147641818,0.813344115191053,1.0133547105578355,1.2128269778121952,1.403720193897311,1.5783394571352942,1.7296458685582645,1.8515402697832941,1.939109099963401,1.9888224613259164,1.9986764092802,1.9682737313836038,1.8988399589669678,1.7931739659914865,1.6555351464959573,1.4914717185092634,1.307597075493919,1.111323200589276,0.9105618897214462,0.7134058272692276,0.5278023701208194,0.3612331898784511,0.22041268682726023,0.1110173325959185,0.037456851699949056,0.0026964656358853256,0.008137364862612184,0.05356022684239259,0.13713405692790936,0.25548999571944675,0.40385711771910715,0.5762547472412098,0.7657335393279419,0.9646556077041926,1.1650024078187569,1.3586979642128032,1.5379344129273202,1.695486736341293,1.8250040034857995,1.9212653759429423,1.980390559736672,1.9999962199046342,1.9792920526821418,1.9191126426310228,1.8218838205527519,1.691524878298004,1.5332905821913259,1.3535593535071293,1.1595761544370025,0.9591604438103547,0.7603909748673646,0.5712801408792261,0.3994509957375352,0.2518299688061656,0.13436766069375938,0.05179897466360606,0.007452252778864632,0.003115110501414442,0.03896237794869539,0.11354905249524716,0.2238685467992636,0.36547388427760574,0.5326569566417085,0.7186786176273454,0.9160403378442252,1.1167864703437103,1.3128249425867242,1.4962534477237623,1.6596779864242395,1.7965109188398691,1.9012365122336403,1.9696332800548952,1.998944149976683,1.987987601425527,1.9372052926518348,1.8486442574947437,1.7258743894894932,1.5738445395312755,1.398683027795693,1.2074506112765844,1.0078558648145235,0.8079444486007168,0.6157747877777924,0.4390932374850872,0.28502182744000615,0.15977117306397726,0.06839012570053282,0.014562253519941226,0.0004573569606193262,0.026644004117485243,0.09206661177350617,0.19408799593782766,0.328595676679064,0.4901676521082,0.672290959164942,0.8676242110268331,1.06829352826377,1.2662099347582443,1.4533954241691012,1.6223045532056974,1.7661285982942538,1.879070015087438,1.9565761373595094,1.9955226948899785,1.9943397527328224,1.9530749952624604,1.8733918040175728,1.7585022068249505,1.6130374010226993,1.4428610699894306,1.254833018185759,1.0565326525752812,0.8559534568833744,0.6611807744298634,0.4800658881034221,0.31990953530721433,0.1871676153817925,0.08719095243352593,0.024009603722884076,0.0001704081379985123,0.016634323170535703,0.07273768873866304,0.16621897931150875,0.2933099659576268,0.44888761357679885,0.6266805903415114,0.8195220649558186,1.0196386014799692,1.2189635063758295,1.4094619967601583,1.583455082340183,1.7339291053566697,1.8548184609865237,1.9412501017504131,1.9897399699579825,1.998333440002928,1.9666841092816179,1.8960677616750488,1.7893309407263542,1.6507762055283237,1.4859886946532241,1.3016109893301135,1.1050753511299507,0.9043041276518056,0.7073904028517346,0.5222717649919991,0.35641034261911797,0.21649200631289534,0.10815686137869018,0.03577189531677061,0.0022549446444563026,0.008957076965166788,0.05560812946066518,0.14032759914879456,0.2597004459206196,0.4089147527381899,0.5819556939129003,0.7718479926072296,0.9709370941031632,1.17119772074774,1.3645573707329872,1.5432217204804357,1.6999888136668369,1.8285393719379297,1.9236915248908257,1.9816096911653474,1.9999591906508685,1.978000355394411,1.9166183456008479,1.8182874688429715,1.6869714407732181,1.527963607826106,1.3476735725303097,1.153368822560638,0.9528817784568091,0.7542940689099971,0.5656107604738387,0.39443767349352776,0.24767479164173567,0.13123812371636612,0.049821229445457416,0.006706022189700622,0.003630475081182971,0.040718563361618165,0.11647526694284827,0.2278468346364133,0.37034388080201464,0.5382223523920533,0.7247150716135669,0.9223045207282267,1.1230258730402427,1.3187880548992832,1.5016998967157384,1.6643882258469431,1.8002950790374608,1.9039420537851572,1.9711511426351227,1.9992131485757227,1.9869968927152977,1.9349948120804084,1.8453031094892074,1.721537255658376,1.5686862496515128,1.3929115124279594,1.2012985200886512,1.0015711884776144,0.8017805222908643,0.6099800792397452,0.43390133130284303,0.2806420092467118,0.15637999324234442,0.06612428264058479,0.013513083309557139,0.0006671516297611646,0.028104306847284932,0.09471855779047322,0.19782468535166065,0.33326648361513245,0.49558429643342783,0.6782350960561045,0.8738562324461984,1.0745622215539667,1.272262609019641,1.458988096224637,1.627211782558003,1.770152574627467,1.882048531996917,1.9583891308889445,1.9960970833068665,1.9936523824517054,1.9511535741654598,1.8703137845502442,1.7543916638897148,1.608060030522139,1.437217509627693,1.2487507597668062,1.0502568718129384,0.8497371303731878,0.6552744821677041,0.4747077126108419,0.31531546452986026,0.1835228362198249,0.08464238586116202,0.022659982407110868,7.413528673538838e-5,0.017795279540473885,0.07510907620201102,0.16970520728763838,0.2977705046672987,0.454142658794936,0.632518311301681,0.8257071432442367,1.0259217167159784,1.2250913863113708,1.4151876266790757,1.58854766221627,1.7381833533981448,1.8580628885409536,1.9433539260087067,1.9906183858068567,1.9979510385172887,1.965056305057621,1.893260171468,1.78545673844074,1.6459915601798403,1.4804864751990985,1.2956129901251876,1.098823351400784,0.8980501453810329,0.7013865359380653,0.5167600291893477,0.35161291588611054,0.21260227282405064,0.10533161621226061,0.03412502404824891,0.0018528326213554935,0.009815933314998415,0.05769333370134733,0.14355509673956268,0.26394013649892345,0.4139957344625895,0.5876731525128678,0.7779714574423378,0.9772197284297568,1.1773862717032924,1.3704023779536443,1.5484875718434283,1.7044632428103128,1.8320420147135714,1.926081189839271,1.9827900509408556,1.9998826649747825,1.9766700290151802,1.9140878439479128,1.8146587963867375,1.6823908692270058,1.5226157799362188,1.341774059130802,1.1471554329172733,0.94660497418039,0.7482068678539286,0.5599585375894689,0.38944826977096336,0.24354932984414068,0.12814290112526783,0.04788101442090176,0.005999024760052096,0.004185194298534034,0.04251263850553344,0.11943637888060721,0.23185562100566737,0.3752387475053818,0.54380598745172,0.7307623988133068,0.9285717724309547,1.1292604164566051,1.3247385757103711,1.5071265295480072,1.6690722232407529,1.8040476291526604,1.9066118914025108,1.972630646654296,1.9994426802196381,1.98596719956804,1.9327474010518884,1.8419285736725506,1.7171716225240312,1.5635054977828304,1.3871244778279188,1.1951384780048575,0.9952864500818777,0.7956244252606677,0.6042007757219228,0.42873178490520414,0.27629060427992513,0.1530221347525983,0.06389532583565793,0.012502877393160028,0.0009164179819332041,0.029602997546420706,0.09740626064480151,0.20159305911353032,0.33796362521443957,0.5010208641873217,0.6841919420284772,0.8800932362963816,1.0808279697830425,1.2783045294431654,1.4645626391526718,1.632094238277887,1.774146131447905,1.8849922097233178,1.9601642699316941,1.996632127847087,1.9929257648547942,1.9491945843720575,1.8672013893992672,1.7502513239667312,1.6030586428456695,1.4315566800338029,1.2426586761818619,1.0439791060029535,0.8435267389509941,0.6493818058858143,0.46937028513097445,0.3107484374457522,0.17991030630078675,0.08212997411516654,0.021348964100774692,1.735754148302071e-5,0.018995031066055934,0.07751699503871767,0.17322423027586265,0.3022587800616203,0.4594192643049856,0.638370547066162,0.8318991057578733,1.0322038080951053,1.231210375579663,1.4208968575029117,1.593616995616638,1.742408444648294,1.8612734242980433,1.9454204896413592,1.9914576741768364,1.9975292199273929,1.9633903830066586,1.8904172992401658,1.7815515121579837,1.6411813994346354,1.474965277473688,1.289603314788238,1.092567448343531,0.8918001899290773,0.6953944636692693,0.5112673804155696,0.34684109916831063,0.2087436399975704,0.10254170868825985,0.03251630294257646,0.001490145449215885,0.010713899988969544,0.05981575720296106,0.14681642222043267,0.26820889999487674,0.41909986220351625,0.5934068972127886,0.7841036919683877,0.983503262532353,1.1835678162497887,1.376232755008532,1.5537317590255453,1.7089098470404847,1.8355117934652685,1.9284342764011886,1.9839315924413214,1.9997666458989907,1.9753011260897386,1.9115212376220359,1.810997946509495,1.6777833445828754,1.5172473097504016,1.3358610463278415,1.1409362309235853,0.9403302789025557,0.7421296121315799,0.5543236954778348,0.38448298164157113,0.2394537463609745,0.12508211517570034,0.04597840622459248,0.0053312884149306905,0.004779246243144186,0.04434453251801607,0.1224322713503696,0.23589474756789874,0.3801582910500503,0.5494076412781512,0.736820360369029,0.9348418454082303,1.1354898543406444,1.3306762699860866,1.5125331318792878,1.673729793597022,1.807768420967081,1.9092459196323628,1.9740717336749078,1.9996327358423809,1.984898562654595,1.9304631483346335,1.8385207833322739,1.712777662520426,1.5583024885546726,1.3813221525719834,1.1889707283348119,0.9890018978620683,0.7894764006639693,0.5984371054953747,0.4235848024790677,0.2719677844116083,0.14969773022354826,0.06170334332518457,0.01153167567188862,0.0012051461716069412,0.03114001701954905,0.10012961417753607,0.20539296838004673,0.3426869159491259,0.5064771406361916,0.6901612617983004,0.886334976228076,1.0870905254661463,1.2843354573848926,1.470118832769668,1.636951727517924,1.778109111017978,1.8879009319971314,1.9619014843732712,1.9971278073774232,1.9921599286420593,1.9471981032584815,1.8640547414981452,1.7460813505912882,1.598033435538317,1.4258788047993762,1.2365570080561696,1.0376996031047636,0.83732252791499,0.6435029783333764,0.4640538164817375,0.30620863444342006,0.17633016831254134,0.07965381643083047,0.020076600586545146,7.714485095178247e-8,0.020233530359465846,0.07996135014071193,0.17677590928173892,0.3067746148624958,0.46471722169145047,0.6442370664831463,0.8380977079263532,1.0384846274871469,1.2373202324926311,1.4265894637282712,1.598662882312606,1.7466042122242802,1.8644499414479854,1.9474497110231606,1.9922578019176882,1.9970680008942439,1.9616864089294062,1.8875392572793732,1.7776154161268813,1.6363459132845377,1.46942531955355,1.2835822006896809,1.0863078890540085,0.8855545081569214,0.6894144227203405,0.5057940356195441,0.3420950809431412,0.20491626024186582,0.0997872490025632,0.03094579554106003,0.0011668974534697618,0.011650941519157465,0.06197531613396934,0.15011144677542976,0.27250656780077087,0.42422693435793457,0.5991567015409667,0.7902444539742534,0.9897874482235932,1.1897421102284271,1.3820482716091658,1.5589540748917488,1.7133284507252866,1.8389485711435491,1.9307506916343067,1.9850342705780795,1.9996111380060173,1.9738937006870478,1.9089186279991328,1.8073050638076174,1.6731490488290353,1.5118584093126248,1.3299347676737303,1.134711462225855,0.9340579404613782,0.7360625417826601,0.548706456704123,0.37954200522442627,0.2353882029597707,0.12205588676265045,0.044113480005847694,0.0047028395286033975,0.005412607451131701,0.046214173042845696,0.12546282602031278,0.23996405478551164,0.38510231712376564,0.5550270926169308,0.7428887170031331,0.9411144920045535,1.141713940641782,1.336600903199178,1.5179194901593678,1.6783607529508346,1.8114573075168103,1.9118440344357648,1.9754743467768674,1.999783307937126,1.9837910241840393,1.9281421441521047,1.8350798730694273,1.7083555492002833,1.55307742747577,1.3755047658406474,1.182795514692446,0.9827177800456733,0.7833366913355715,0.592689296213797,0.4184605873200983,0.2676737203846482,0.1464069109626529,0.059548421688145226,0.010599516506306417,0.0015333247945853445,0.0327153045574361,0.10288851082155392,0.20922426306229835,0.34743616925847076,0.5119529102678684,0.6961428195892313,0.8925812057047112,1.093349641244724,1.2903551546349972,1.47565645761695,1.6417840584168157,1.7820413568077478,1.8907745839295713,1.9636007055971125,1.9975841023195149,1.9913549040625198,1.9451642096818245,1.8608739651332993,1.7418819084691464,1.5929846070858353,1.4201841081893485,1.2304459963937358,1.0314186111463464,0.8311247423193574,0.637638231712456,0.45875851665320355,0.30169623483619923,0.17278256366346878,0.0772140106115653,0.018842942120262385,2.22947793812045e-5,0.021510728502407872,0.08244204496076657,0.18036010402089597,0.3113178307033788,0.47003632169540455,0.6501176378366225,0.844302704917118,1.0447639268120414,1.2434207157229378,1.4322652205083861,1.6036851230016027,1.7507704904015702,1.8675923145245394,1.9494415100038691,1.9930187374259352,1.9965673996350835,1.9599444501294716,1.8846261592626476,1.7736486058154537,1.631485292721821,1.4638668202560563,1.2775498856516327,1.0800449207725458,0.8793133467567315,0.6834466492911815,0.5003402109875688,0.33737504866894974,0.2011202847309307,0.09706834595089475,0.029413563875662074,0.0008831014017773864,0.012627020894269925,0.0641719251960251,0.15344004025759106,0.27683297016710795,0.42937674841661966,0.6049223383914857,0.7963935009117821,0.996072037290567,1.1959089097666769,1.3878486980541371,1.5641543131707452,1.7177188793385199,1.8423522120024827,1.9330303440447612,1.9860980417975258,1.9994161474381194,1.9724478083976547,1.9062801178771793,1.803580294142729,1.6684881650110155,1.5064492914738867,1.3239954572449322,1.1284813726901675,0.9277882066019384,0.7300058964444529,0.5431070431382354,0.3746255356783621,0.23135286022146473,0.11906433541625316,0.04228630942556544,0.004113702923570162,0.006085252905978722,0.048121486232892474,0.12852792318945716,0.24406338192890742,0.39007063044719437,0.5606641195108539,0.7489672290275022,0.9473894644626717,1.1479324295208162,1.3425122413382664,1.523285391637732,1.6829649183884419,1.8151141430980149,1.9144061331923072,1.9768384305597078,1.9998943905565734,1.9826446279019532,1.925784480179426,1.8316059787931716,1.703905457228466,1.5478305209256926,1.3696725474091982,1.1766130809866013,0.9764343448430076,0.777205539781979,0.5869575749042922,0.4133593418247451,0.2634085818061521,0.14314980695078172,0.05743064603972292,0.009706436714870037,0.0019009408884569368,0.03432879793931021,0.10568284160584818,0.21308679183165935,0.35221119755634744,0.5174479568001911,0.7021363791414553,0.8988316780125722,1.0996050698959503,1.2963633834272574,1.481175294969197,1.646591040107035,1.7859427135012709,1.8936130520170162,1.96526186648732,1.9980009946506054,1.9905107229130645,1.9430929839768802,1.8576591859391143,1.7376531634700139,1.5879123569070805,1.4144728151330543,1.2243258825674392,1.025136378214537,0.8249336269644298,0.6317877976690689,0.45348459479929415,0.2972114168549628,0.16926763247700316,0.07481065302486023,0.017648037429019103,8.400956752074862e-5,0.02282657504806873,0.08495898151631831,0.18397667292471998,0.3158882481361236,0.47537635422285407,0.6560120288556217,0.8505138516449844,1.0510414580498233,1.2495115843134599,1.4379239036620342,1.608683519314937,1.754907114620347,1.870700419410182,1.95139580791134,1.9937404506461192,1.9960274359226813,1.9581645754108068,1.881678120251608,1.7696512379049363,1.6265997297314096,1.4582899991310403,1.2715066079387198,1.07377879087405,0.8730769522420999,0.6774913790970845,0.49490612193505756,0.3326811887777539,0.19735586339830957,0.09438510692458046,0.027919668466527936,0.0006387685035256219,0.013642099561088306,0.06640549762739356,0.15680207119400258,0.28118793620951843,0.4345491009720164,0.6107035800329852,0.8025505899058187,1.0023567815043464,1.2020679712881348,1.3936338052379385,1.569332268463381,1.7220809594669144,1.8457225816049225,1.935273143590773,1.9871228640827812,1.9991816818970403,1.9709635063314586,1.903605811472115,1.7998237846358842,1.6638008772245858,1.5010201698837211,1.3180433496324668,1.122246208392826,0.9215213249663845,0.7239599153426118,0.5375256759459879,0.3697337671942834,0.22734787753418972,0.11610757929685134,0.040496966653396194,0.0035639018695661218,0.006797156039504482,0.050066396753039144,0.13162744179251074,0.24819256708269455,0.395063034781727,0.5663184993084012,0.7550556563528606,0.9536665149335223,1.1541450753597164,1.3484100509171293,1.528630624371796,1.6875421080543287,1.8187387832729192,1.9169321147041198,1.9781639311447978,1.9999659793131763,1.9814594190887387,1.923390249539668,1.8280992377155245,1.699427562374809,1.5425619761469709,1.3638257276388384,1.1704236714112424,0.9701518404373956,0.7710831881715702,0.5812421679586497,0.4082812674821771,0.2591725371406802,0.13992654683714034,0.05535010002788787,0.008852471572471488,0.002307979933109605,0.03598043343535817,0.10851249615986491,0.2169804021258277,0.35701181223850353,0.5229620631896115,0.7081417037211792,0.9050861462702762,1.1058565643427465,1.3023599064484472,1.4866751268431828,1.651372482722222,1.7898130270026011,1.8964162241455629,1.9668849014312968,1.9983784679042693,1.9896274185371927,1.9409845079529877,1.85441053089307,1.733395282620977,1.5828168853459403,1.408745151215316,1.218196908309759,1.0188531524452153,0.8187494263870932,0.6259519072838591,0.44823225922954335,0.2927543576412355,0.1657855135860008,0.07244383859863746,0.016491933709196438,0.0001852190716565838,0.02418101802309991,0.08751206039332082,0.18762547314582412,0.32048568663823596,0.48073710835299943,0.6619200067232862,0.8567309027818382,1.0573169732503631,1.255592597686903,1.443565289682367,1.6136578738258025,1.7590139214920764,1.8737741333408726,1.9533125275546395,1.9944229130719902,1.9954481310845429,1.9563468550749603,1.8786952566880197,1.765623470283486,1.621689417283438,1.4526950764519482,1.2654526062485185,1.0675097468583623,0.8668455709383507,0.6715488473595553,0.48949198309780884,0.32801368666780284,0.19362314493124544,0.0917376379062993,0.026464168319576098,0.0004339084093827328,0.014696137426003286,0.06867594520635412,0.16019740679104366,0.28557129391542424,0.4397437877263549,0.6165001981178113,0.8087154777633959,1.0086414326299034,1.2082190515219362,1.3994033646602477,1.5744877362506005,1.7264145188168798,1.84905954682791,1.9374790016861596,1.9881086969553823,1.9989077506437085,1.9694408531154735,1.9008958144138037,1.7960356836618243,1.659087370608415,1.4955712589817458,1.312078679932891,1.1160062156105492,0.9152575430842146,0.7179248372814707,0.5319625755804128,0.36486689298744,0.2233734130868752,0.11318573519052655,0.038745522364857954,0.003053458082655114,0.0075482887329393344,0.05204882778314546,0.13476125940458172,0.25235144715219515,0.4000793329371892,0.5719900086726986,0.76115375849827,0.9599453954859581,1.16035163277115,1.3542940989838823,1.5339549772353567,1.6920921411585215,1.8223310848753576,1.9194218791999065,1.9794507961774732,1.9999980713793204,1.9802354445578128,1.9209595468002507,1.8245597883458533,1.6949220415073611,1.5372720012367544,1.357964537467442,1.1642275304358658,0.9638705149754038,0.7649698783252329,0.5755433011241826,0.40322656486636554,0.2549657537036748,0.1367372579341819,0.053306865830113126,0.008037654809060046,0.0027544258513010345,0.037670145809224564,0.11137736271781185,0.22090494015486817,0.36183782369007955,0.5284950116397791,0.7141585561298602,0.9113443634386287,1.112103877663329,1.3083444868477356,1.492155736006341,1.656128197404809,1.793652144441976,1.8991839895954286,1.9684697463223677,1.9987165071710529,1.988705025823688,1.9388388648908144,1.8511281283106447,1.7291084340999832,1.5776983936635252,1.4030013426676318,1.2120593157031232,1.0125691820134262,0.8125723848510928,0.620130791063011,0.4430017174009109,0.2883252332400794,0.16233634452732848,0.07011366081740333,0.015374676624624994,0.00032591929421244004,0.025574003929660027,0.09010118075018336,0.1913063605637848,0.3251099646199692,0.4861183723466026,0.6678413380860773,0.8629536127664021,1.0635902245431186,1.2616635156551925,1.4491891557456946,1.618607990056975,1.7630907488059693,1.8768133349109604,1.9551915932271173,1.9950660977476198,1.9948295080020695,1.9544913609183203,1.8756776863891198,1.7615654620400196,1.616754549325595,1.447082273207259,1.259388119702188,1.061238036340384,0.8606194489727814,0.6656192887968625,0.4840980083236942,0.3233727266962386,0.18992227676479667,0.08912604346586417,0.025047120924209687,0.00026852921091991,0.01578909285658614,0.07098317825469347,0.16362591293964013,0.28998287015081814,0.44496060349973177,0.6223119636909116,0.8148879209835831,1.0149257424358447,1.2143619075125314,1.4051571484347767,1.5796205129015606,1.730719386221321,1.8523629758678604,1.939647831203872,1.9890555014768698,1.9985943644978703,1.967879908891505,1.8981502337417924,1.7922161408431077,1.6543478313367228,1.490102773989224,1.3061016837389459,1.1097616408108142,0.9089971083625141,0.7119009006347563,0.5264179617730322,0.3600251052897794,0.2194296238630583,0.11029891850436702,0.03703204573856311,0.0025823917243603667,0.008338621318014328,0.054068701021078414,0.13792925224602093,0.25653985786980793,0.4051193267796933,0.5776784235902819,0.7672612946007039,0.9662258581165334,1.1665518566082997,1.3601641531302002,1.539258239926972,1.6966148379836365,1.82589090601647,1.9218753283388448,1.9806989748290964,1.9999906654874318,1.9789727526537646,1.9184924679691457,1.8209877704854547,1.6903890725853454,1.531960805138648,1.3520892084004958,1.1580249027958844,0.957590616557051,0.7588658517066886,0.5698611994949248,0.3981954336280985,0.25078839765481675,0.13358206621253743,0.05130102415014093,0.007262018608291343,0.003240261009296086,0.03939786832059333,0.11427732812308034,0.22486025090722572,0.36668904129313473,0.5340465836101098,0.7201866987136697,0.9176060823303469,1.118346763101127,1.3143168882459242,1.4976169059854147,1.6608579963134065,1.7974599141817955,1.9019162390453097,1.9700163385622642,1.9990150990990716,1.987743581205252,1.9366561395390374,1.8478121078402907,1.724792787229119,1.5725570840301883,1.3972416163591121,1.2059133471703847,1.0062847151236596,0.8064027463374681,0.6143246789291694,0.4377931759094872,0.2839242185932116,0.15892026153637206,0.06782021171860908,0.014296310304756976,0.0005061046778063183,0.027005477747548134,0.09272624032172971,0.1950191897907808,0.32976089943139164,0.49151993365431734,0.6737757890630593,0.8691817358138537,1.0698609641470167,1.2677240984289793,1.4547952797203951,1.6235336724886027,1.7671374355353655,1.8798179040779437,1.9570329307093655,1.9956699792684813,1.9941715911096558,1.9525981662292544,1.8726255285430085,1.7574773734578835,1.6117953207754585,1.4414518110916354,1.2533133878350353,1.054963907040344,0.8543988322649919,0.6597029376149497,0.4787244106640862,0.3187584921718676,0.18625340507597044,0.08655042675612301,0.023668582251014203,0.0001426374402901942,0.016920922683249184,0.07332710564123901,0.16708745422054305,0.2944224906670809,0.4501993422381819,0.6281386471990036,0.8210676757669946,1.0212094627043058,1.2204962966291584,1.4108949292984099,1.5847303956816812,1.7349953916464518,1.8556327382458395,1.9417795464793974,1.989963240250324,1.9982415358376617,1.9662807353137879,1.8953691779011252,1.7883653070441548,1.6495824466120061,1.4846149309005692,1.3001125971302214,1.10351273064203,0.9027402680761301,0.705888343336131,0.5208920535252017,0.35520859534240845,0.21551666563466432,0.10744724326196053,0.03535660445346955,0.0021507214008783526,0.009168122578150362,0.05612593668581978,0.14113129518734924,0.2607576338015418,0.410182817239373,0.5833835193799357,0.7733780234244785,0.9725076547593164,1.1727455019745285,1.3660199815004737,1.544540202978181,1.7011100198920528,1.8294181060903276,1.9242923652145345,1.9819084177990618,1.9999437619300289,1.9776713932504437,1.9159891104911217,1.8173833252220124,1.685828834652126,1.5266285976344633,1.34619997250195,1.1518160334828882,0.9513123932259745,0.7527713494129774,0.5641960875027232,0.39318807248718357,0.24664063399146208,0.13046109629608305,0.049332654214771066,0.006525593606272917,0.0037654662175595766,0.041163532727821917,0.11721227783274268,0.22884617815591213,0.37156527343410195,0.5396165598244238,0.7262258933728314,0.9238710556198395,1.1245849740744198,1.3202768747449105,1.5030584210749112,1.6655616926302592,1.8012361858226473,1.9046128645767249,1.971524617063638,1.9992742318945305,1.9867431226570544,1.9344364181110183,1.8444626004582996,1.7204485124679503,1.5673931595175625,1.3914661997876465,1.199759245465212,1.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],19:[function(require,module,exports){
module.exports={"expected":[1.0,0.8002407545347882,0.6085338002123535,0.43260684048243747,0.2795514875320497,0.15553739954170054,0.0655635818889817,0.01325687734294545,0.0007257681054695375,0.028475382936362093,0.09538713542327515,0.19876381417735278,0.3344383073697407,0.49694157892508883,0.6797231252550896,0.8754150259255802,1.0761289443801605,1.2737741066271686,1.4603834401755762,1.628434726565898,1.7711538218440879,1.8827877221672573,1.958836467272178,1.9962345337824403,1.993474406393727,1.950667345785229,1.869538903703917,1.7533593660085378,1.6068119275128163,1.4358039124972768,1.2472286505870225,1.0486876067740256,0.8481839665171118,0.65380002749805,0.47337140236553665,0.31417116534787404,0.1826166747779875,0.08401088950887825,0.02232860674955639,5.623806997123726e-5,0.018091582200938316,0.07570763478546538,0.1705818939096725,0.2988899801079471,0.45545979702181916,0.6339800184995263,0.8272544980254716,1.0274923452406834,1.2266219765755215,1.4166164806200643,1.5898171827606271,1.7392423661984582,1.8588687048126507,1.9438740633141802,1.9908318774218496,1.9978492785991215,1.9646433955465303,1.8925527567380396,1.7844833343653357,1.6447914046575915,1.4791079464747983,1.294111656663869,1.09725973192387,0.89648726935797,0.6998874028697786,0.5153850690994308,0.35041755338799385,0.21163469295584536,0.10463082209887475,0.033719264686212,0.001758464162338269,0.010036759749676105,0.058220453520602566,0.1443672617541606,0.26500460835354833,0.41526960431831883,0.5891050707015901,0.7795037033708417,0.9787905372956942,1.1789323242330054,1.3718613528009964,1.5498006577618182,1.705577509332919,1.832912545779457,1.926672894358761,1.9830790773167508,1.9998573625597098,1.9763314177489857,1.913449573243877,1.8137465949240297,1.6812415078281324,1.5212755893359138,1.3402970623850503,1.145601167735008,0.945036092959656,0.7466866121649647,0.5585481889083644,0.3882046792245415,0.24252262654211665,0.12737447145699154,0.04740183377074558,0.005828408890344194,0.00433002073151878,0.04296706929063443,0.1201820959220562,0.23286256446463438,0.3764663275113973,0.5452047202796049,0.7322759015710207,0.9301390358529832,1.1308182641861464,1.3262242109369407,1.5084800663456828,1.6702391005686084,1.8049808102092193,1.9072737596782703,1.9729945222524519,1.9994938953221937,1.9857036896952431,1.932179788281391,1.841079738463628,1.7160757814067884,1.562206824090513,1.3856753210708306,1.1935972536625319,0.9937152848763404,0.7940866528296153,0.6027583836408879,0.42744291596981154,0.2752072127708808,0.1521878921597094,0.06334386046096263,0.012256418794748147,0.0009849009009283982,0.029983661437735787,0.09808376095469029,0.2025400858182046,0.33914200368659364,0.5023830940145853,0.6856831117540758,0.8816532368988729,1.082393917669653,1.2798133012863304,1.4659534163898902,1.6333109587068653,1.7751397490927743,1.8857226718769198,1.9606021316794067,1.996759738990704,1.9927379813917088,1.948698975849859,1.8664179337874627,1.7492116023451834,1.6018045663719014,1.4301388005050752,1.2411341482933114,1.042409383442949,0.8419750972041157,0.647910791599504,0.46803919486135215,0.3096109274146547,0.17901222951454532,0.08150753203085437,0.0210272473462354,9.334512568348607e-6,0.019301025170903485,0.07812467166115522,0.17410909398353003,0.30338516201636345,0.4607417600730279,0.6398358468697997,0.8334481433917003,1.0337741418834667,1.2327387053992962,1.4223215764097181,1.5948806732203067,1.743460142130192,1.862070747753979,1.9459312989789215,1.9916613786819857,1.9974176082756396,1.9629679542614369,1.889701081495633,1.7805703761369416,1.6399748947102206,1.4735820382269678,1.2880990993652437,1.0910028916374859,0.8902383591891859,0.6938983162610542,0.509897226010776,0.3456521686632772,0.20778385915689224,0.10184976625820763,0.03212009110849501,0.0014056355021296874,0.010944498523130286,0.060352168796127925,0.14763702413213964,0.26928061377867896,0.4203794870984394,0.5948428515652233,0.7856380924874686,0.9850742575641555,1.185112079016417,1.3776880363090884,1.5550393965002682,1.7100171298491817,1.83637408706036,1.9290168217453065,1.9842109071434137,1.99973147078908,1.9749528790757904,1.910873956534136,1.8100777232352034,1.6766272733037613,1.515901991676306,1.3343807112031376,1.1393805510272186,0.9387619636596161,0.7406118802978121,0.5529177267927411,0.38324545067440496,0.23843453795998037,0.1243223136108802,0.04550863908167968,0.005170491997930626,0.004933902252380329,0.04480840677288256,0.12318666508903964,0.23690925119403083,0.3813920099430249,0.5508108442543054,0.7383364843448075,0.9364097754568814,1.1370463872335979,1.3321586619139227,1.5138816276533973,1.674890035380031,1.8086936394362152,1.9098988192498165,1.97442599607034,1.9996740807057876,1.984625323375375,1.9298863391825967,1.8376636554726715,1.7116747667599206,1.5569982825990891,1.3798692089369888,1.1874276151489072,0.9874308179865737,0.7879406842968769,0.5969986573323682,0.42230160633647496,0.27089156590001695,0.14887187168935534,0.06116113510918564,0.011294974176311867,0.0012834928289471303,0.03153025367763229,0.10081601040457144,0.20634785555802393,0.343871802595191,0.5078442639936589,0.6916555131522644,0.887896122336671,1.0886556365613713,1.2858414438701398,1.471504988360221,1.6381621763099203,1.7790950598451318,1.8886226372821882,1.9623298541907754,1.997245574148699,1.9919623451909398,1.946693134169887,1.863262742065818,1.745034246296325,1.5967734351336345,1.4244566988758174,1.2350301216747672,1.0361294850245963,0.8357724695641343,0.6420354625325578,0.46272799876324544,0.30507795849263875,0.17544021165414658,0.0790404531997494,0.019764555442187248,1.9286206797142214e-6,0.020549203822526674,0.08057812080009341,0.17766891512464256,0.30790785884147853,0.46604502276464344,0.6457059010161177,0.8396483672288501,1.040054604514042,1.23884624150173,1.4280099913273014,1.5999206670628108,1.7476485528478047,1.8652387405954183,1.9479511722168545,1.9924517112670608,1.9969465419173449,1.961254477635142,1.8868142648094735,1.7766265869131248,1.6351331070125599,1.4680374244195873,1.2820751627185292,1.0847424569157853,0.8839937843894508,0.687921320067109,0.5044287410182542,0.34091262939158484,0.2039643163381757,0.09910418558619638,0.030559146884526434,0.0010922493562913749,0.011891303044617718,0.06252099831384039,0.15094045317208982,0.2735854811831202,0.42551226374939966,0.6005966353397523,0.7917809484780639,0.9913585673700966,1.191284522236604,1.3834998018821887,1.5602562122736452,1.7144287060845758,1.8398025932089563,1.9313240547936459,1.9853038625739967,1.9995660915906173,1.973535831680424,1.9082623620937007,1.8063768550687547,1.671986313332197,1.5105080169021912,1.3284511526404446,1.1331544290616493,0.9324902531416377,0.7345473937514815,0.5473049235480518,0.3783105827165619,0.2343765297165138,0.12130474331198038,0.04365314492503969,0.0045518689154572245,0.0055770869280099555,0.046687472445360645,0.12622586665912727,0.24098607850792375,0.3863421261741975,0.5564347103176331,0.7444074023130971,0.9426830267496369,1.1432690972181618,1.3380799932767138,1.5192628916470006,1.679514313361764,1.812374526854176,1.9124879396066792,1.9758189819769,1.9998147809283435,1.9835080662908036,1.9275561614013625,1.834214486413999,1.7072456423587645,1.5517677407704566,1.374048092716141,1.1812505736129066,0.9811468475547848,0.781803091690241,0.5912548487846839,0.4171831146540598,0.266604717379023,0.14558946910692983,0.059015492047012286,0.010372581462807284,0.0016215320957306822,0.033115098568703205,0.10358377585443723,0.21018697299739886,0.34862751727777797,0.5133248731568172,0.6976400935515528,0.8941434356572535,1.0949138537297238,1.2918582962788208,1.4770379368103885,1.6429881877614965,1.7830195978741723,1.891487503840135,1.9640195665646418,1.9976920200668904,1.9911475284275286,1.944649899972112,1.8600734531628595,1.7408274628593197,1.591718732517823,1.4187578320413503,1.22891681182843,1.0298481595626046,0.8295763285887577,0.6361742723611616,0.45743802385302923,0.30057243762519104,0.1719007622844756,0.07660975046033203,0.018540580911261317,3.402068682367698e-5,0.021836068855202173,0.08306788529588016,0.18126121672708084,0.3124578919456713,0.471369375628204,0.6515899490828707,0.8458549246402836,1.0463334850664778,1.2449443436471395,1.4336815006915988,1.604936965218273,1.7518074329173055,1.8683725582074893,1.949933603246961,1.9932028439604954,1.9964360981304339,1.959503033346604,1.8838924207031487,1.7726521224658103,1.6302662328057167,1.4624743240540121,1.2760400846573883,1.0784786750336155,0.8777537916071741,0.6819566503675332,0.4989798301162789,0.3361991227754142,0.20017621536411567,0.09639418852788495,0.02903649366854144,0.0008183181029598474,0.01287713591721884,0.06472685640922682,0.15427741839507747,0.2779190405330856,0.4306677315366191,0.6063661947620615,0.7979320287118652,0.9976432184956536,1.1974494100941813,1.3892964199670148,1.5654508990279836,1.7188120637904816,1.8431979288059974,1.9335945023726064,1.9863579004389118,1.9993612314964744,1.972080331533472,1.9056148930754195,1.8026441366016903,1.6673188112222461,1.5050938780649425,1.3225086209029155,1.1269230477579002,0.9262212091259501,0.7284933920612802,0.5417100008689597,0.37340027026859024,0.2303487620950636,0.11832187974839203,0.041835424589193204,0.00397256407731883,0.0062595493538808444,0.04860419208865996,0.12929958058981794,0.245092885379653,0.3913164806850631,0.562076096337966,0.7504884156865402,0.9489585419501768,1.1494861483550156,1.3439879711443783,1.524623645777146,1.6841117518638764,1.8160233270752801,1.9150410184836817,1.9771734249519313,1.9999159904324793,1.982351962570981,1.9251893469751398,1.8307323675229967,1.7027885831450371,1.5465154052007057,1.368212202330931,1.1750663730355702,0.974863621785463,0.7756741174325608,0.5855271848669458,0.41208764309291956,0.26234683652998614,0.14234081406088583,0.05690701602311976,0.009489277086935588,0.001999005349394567,0.03473813351267996,0.10638694798298365,0.21405728649872902,0.35340895989296495,0.5188247050308029,0.7036366165727426,0.9003949301040498,1.1011683219874278,1.2978636208585446,1.482552043199809,1.6477888024436527,1.7869132081683405,1.8943171583941518,1.96567120206069,1.998099059111543,1.99029356328513,1.942569353960277,1.8568501930492183,1.7365914181938478,1.5866406581752548,1.4130424250957079,1.222794460218021,1.0235656551569923,0.8233869190133986,0.6303274525908018,0.4521694790743074,0.296094542771534,0.16839402120682856,0.07421551982057406,0.01735537209804683,0.00010560944342663525,0.02316156944029224,0.08559386680769276,0.1848858569019851,0.317035081611558,0.4767146083622681,0.6574877586617337,0.8520675704791839,1.0526105355373283,1.2510327709724978,1.439335880489146,1.6099293695528056,1.7559366180710927,1.8714720768105428,1.9518785137671075,1.9939147470940213,1.9958862970764297,1.9577136905744346,1.8809356645837467,1.7686471397785353,1.625374464321638,1.4568929568617646,1.269994103555547,1.0722117933980617,0.8715186273098326,0.6760045427550678,0.49355070852611327,0.3315118349889844,0.19641970585727098,0.09371988212282056,0.027552191602345344,0.0005838525618806489,0.013901958202474196,0.06696965595523896,0.15764778799751733,0.28228112066148003,0.43584568682925473,0.6121513019458629,0.804091090233323,1.003927962709433,1.203606499088218,1.3950776616085143,1.5706232515833802,1.723167029832892,1.846559959742409,1.935828074803975,1.98737297910573,1.9991168985982226,1.970586436124338,1.9029316540491052,1.7988797152690692,1.6626249513310503,1.4996597890124312,1.3165533507088185,1.1206866532432687,0.9199550792274542,0.7224501143483673,0.5361331797439437,0.36851470727817903,0.2263513941845463,0.11537384073735235,0.040055549870528395,0.0034326003649166603,0.00698126257406495,0.050558489996130995,0.13240768547546045,0.24922950959842982,0.3963148769983973,0.5677347794916139,0.7565792842770623,0.9552360731879587,1.155697295082882,1.3498823621633775,1.5299636783045956,1.6886821692966212,1.819639895979104,1.9175579550392334,1.9784892714975921,1.9999777052206187,1.9811570578797375,1.9227859893884347,1.8272174363365312,1.6983037651638009,1.5412414833467964,1.362361768287544,1.1688752576806425,0.9685813888536537,0.7695540036062642,0.5798158918106515,0.40701539291416455,0.25811809153085374,0.13912603486670072,0.054835790318175426,0.008645095937480196,0.002415897680485113,0.03639929440288747,0.10922541607042857,0.21795864319225222,0.35821594158318426,0.52434354238305,0.7096448453650028,0.906650358755276,1.1074187942952889,1.3038571804107688,1.4880470897321316,1.6525638307415291,1.7907757369377015,1.897111489178446,1.9672846954425638,1.9984666752054148,1.9894004834936936,1.9404515783118548,1.853593089037347,1.7323262796153518,1.5815394126799016,1.407310703786203,1.2166633086644285,1.0172822199543265,0.8172044853075541,0.6244952341593526,0.4469225725242302,0.2916444507997167,0.16492012693057256,0.07185785584789528,0.016208975815960702,0.0002166920628738911,0.024525653223132493,0.0881559655642351,0.18854269248318967,0.32163924704916536,0.48208050984063233,0.6633990968008221,0.858286059358218,1.0588855079954465,1.257111282996867,1.444972907383069,1.6148976828762343,1.7600359452144883,1.8745371739796872,1.9537858269571542,1.9945873925488682,1.9952971604713965,1.9558865199941522,1.8779441132373496,1.7646117970402293,1.6204579947755737,1.451293543295877,1.26393745821734,1.0659420595386218,0.8652885377741449,0.6700652323262697,0.48814159068737517,0.32685095117096474,0.19269493619238265,0.09108137200086719,0.026106299312952053,0.00038886199398269206,0.014965729421920537,0.06924930836569332,0.16105142885645085,0.2866715492747133,0.44104592510825125,0.6179517283908342,0.8102578897715729,1.010212551776407,1.2097555460257468,1.4008432984590333,1.5757730656420654,1.7274934321992292,1.8498885532245701,1.9380246838660307,1.9883490584808425,1.9988331025465302,1.9690542044589399,1.900212750997437,1.7950837397581343,1.6579049190568589,1.494205964380456,1.3105855772796595,1.1144454918430786,0.9136921109459915,0.7164177993103191,0.53057468044645,0.3636540867154623,0.22238458387311855,0.11246074272062678,0.038313591070593844,0.0029319991057560335,0.007742198082311913,0.052550288976839554,0.13555005855201452,0.2533957877757198,0.4013371176873941,0.5734105362717289,0.7626797675073689,0.961515372512853,1.1619022920736468,1.3557629335168537,1.5352827783085496,1.693225385137504,1.823224090718261,1.920038649859288,1.9797664696405342,1.999999922855149,1.9799233994134549,1.9203461835691695,1.8236698316874587,1.69379136555658,1.5359461835182624,1.3564970216666237,1.1626774720850102,0.9623003968952365,0.7634429919438304,0.5741211952006238,0.4019665644616829,0.2539186494087118,0.1359452585018548,0.052801896741518584,0.007840071357940848,0.0028721926225767636,0.038098515626728835,0.11209906800286862,0.22189088898202203,0.36304827248207616,0.5298811672303321,0.7156645426151074,0.9129094745338537,1.1136650237719241,1.3098387382016996,1.4935228593638084,1.657313084050874,1.7946070316199534,1.899870385822464,1.968859982980451,1.998794853828393,1.9884683243281114,1.9382966566748154,1.8503022697764517,1.7280322155883918,1.5764151975209324,1.4015628945046252,1.2105235993360308,1.0109981021379317,0.8110292716651881,0.6186778474280166,0.44169751144532743,0.2872223374795738,0.16147921666772613,0.0695368516653666,0.015101437345405033,0.00036726415761911824,0.025928266325092042,0.09075408036763721,0.1922315790329191,0.3262702064029781,0.48746686812071227,0.6693237300139134,0.8645101456593556,1.0651581545917697,1.263179639630971,1.4505923587218488,1.6198417089499497,1.7641052524321013,1.8775677286496304,1.955655467481984,1.9952207537568558,1.9946687115850694,1.9540215937754075,1.8749178848242996,1.7605462536390255,1.6155170183584289,1.4456763045221652,1.25787038786842,1.0596697210974442,0.8590637690764147,0.6641389536721584,0.48275269024959855,0.32221665541712463,0.18900205349050503,0.08847876237796404,0.024698873910261487,0.00023335410100933096,0.016068407558678444,0.07156572359881141,0.16448820653473162,0.29109015295951546,0.4462682409744547,0.6237672449914679,0.8164321837502113,1.016496737467647,1.2158963080316123,1.4065931027872114,1.5809001377964838,1.7317911000051232,1.8531835777795673,1.9401842427970388,1.9892861000110305,1.9985098545507842,1.9674836970574234,1.8974582913117402,1.7912563600024296,1.6531589008316894,1.4887326195844304,1.3046055363307307,1.1081998100709227,0.907432551656469,0.710396685211762,0.5250347225263119,0.35881860056536463,0.21844848784201631,0.10958270075983412,0.03660961699334142,0.0024707800726071483,0.00854232582316361,0.05457951035864084,0.13872657570195668,0.25759155535170597,0.40638300438336217,0.5791031424970884,0.7687896244203369,0.9677961919048946,1.1681008942421267,1.361629452933838,1.5405807356950145,1.6977412199383797,1.8267757697241374,1.9224830049612822,1.9810049689339442,1.999982642458517,1.9786510358992253,1.9178700258848336,1.8200896936992133,1.6892515625542477,1.5306297148690255,1.3506181941141857,1.156473261049006,0.9560208939970466,0.757341323818138,0.5684433199661971,0.39694135715433054,0.24974867603326867,0.13279861060073272,0.050805415627942496,0.007074235145205665,0.0033678721529128985,0.039835730068305986,0.11500779027668206,0.2258538685520951,0.3679057617221131,0.5354373608473282,0.7216954705568346,0.9191720302169574,1.1199067637036184,1.3158080579715228,1.4989791358126783,1.6620363747855604,1.7984069408864696,1.9025937393551984,1.9703970024535793,1.9990835820180668,1.98749712260684,1.936104674164342,1.8469778652474016,1.7237093957200749,1.5712682150947959,1.3957992242780772,1.2043755747393323,1.0047135499181223,0.8048615219951425,0.6128755221720812,0.43649450221716957,0.2828283774759688,0.1580714263274493,0.06725259894811164,0.01403280043195998,0.0005573197803619978,0.027369353345704117,0.09338810859748936,0.19595237084733963,0.3309277767592471,0.4928734704519928,0.6752614242896289,0.870739583543395,1.0714282275690452,1.2692376011866933,1.45619401254828,1.6247612524946182,1.7681443789943327,1.8805636211193928,1.9574873614944666,1.995814805701466,1.994000975239948,1.9521189855790984,1.8718570988747323,1.7564506701558593,1.6105517302290366,1.440041462410531,1.2517931321460714,1.0533950258196099,0.8528445670827267,0.658225940869198,0.47738422006378134,0.31760913077299435,0.18534120361326245,0.08591215605208713,0.023329970984819814,0.00011733502521749095,0.017209949059144414,0.07391881016072921,0.16795798528642858,0.2955367571896873,0.45151242815657155,0.6295976220463557,0.8226137282967076,1.0227802715702432,1.2220285425576622,1.4123268474871322,1.5860042655374105,1.7360598635010764,1.8564449032604373,1.9423066662986526,1.9901840666850017,1.9981471673786446,1.965874975951751,1.8946683837877394,1.7873977271759494,1.6483870841138895,1.4832399708106523,1.2986134640619347,1.101949854618967,0.9011766485992161,0.7043870098748124,0.5195135248009015,0.35400843982015984,0.21454326155925996,0.10673982853200015,0.03494369494237881,0.0020489614827112757,0.009381614193143206,0.0566460739912934,0.14193711145904653,0.2618166466018552,0.41145233778373014,0.5848123733209242,0.7749086136886292,0.9740782832840217,1.1742928567557633,1.367481688698319,1.545857341205064,1.7022294953327013,1.8302947927123616,1.924890923797989,1.9822047204595261,1.9999258647132647,1.9773400175928892,1.915357614138838,1.816477163780175,1.6846845354701396,1.5252922873891581,1.3447255178322959,1.1502628696268122,0.9497431281870616,0.7512492402331938,0.5627824903723072,0.3919399694778609,0.24560833611028532,0.12968621544975567,0.04884642583454013,0.006347617548294493,0.0039029166931335846,0.04161086911105549,0.1179514680030832,0.229847425372533,0.37278821744199697,0.5410119037753629,0.7277373909803591,0.9254377784460333,1.1261437675538015,1.3217649039438955,1.5044157035665722,1.6667335163848676,1.8021753146483395,1.9052814422095268,1.9718956931527152,1.9993328483702388,1.9864869166904429,1.9338757173594152,1.8436200067576556,1.7193579907532883,1.566098668697157,1.3900199207602548,1.1982194777091357,0.9984288115223855,0.7987014799113488,0.6070884875720406,0.4313137503484873,0.2784627443416242,0.1546968905107925,0.06500518791959176,0.01300310728470222,0.0007868514242772573,0.0288488573648773,0.09605794621484276,0.1997049209625391,0.3356117741530569,0.49830010328426144,0.6812119451007168,0.8769741269597573,1.0776954792717732,1.2752849283864331,1.4617776476079467,1.6296561191979855,1.7721531653635867,1.8835247330571518,1.9592814366383817,1.996369524918817,1.9932939778102994,1.9501787705545426,1.8687618762836338,1.7523252083582643,1.6055623265064722,1.4343892395261613,1.245705931090003,1.047118221543191,0.846631177439362,0.6523264274696903,0.47203639217389404,0.31302855922678174,0.18171253115702846,0.08338165439915213,0.02199964460558912,4.0809349131532e-5,0.018390308834652647,0.07630847510917438,0.1714606280620703,0.30001118633316326,0.4567782795195644,0.6354426292670128,0.82880227925226,1.0290629058968368,1.2281520073927705,1.4180443060870997,1.5910852472618102,1.7402995540793804,1.8596724008512053,1.9443918705393348,1.9910429230348332,1.9977450553555438,1.9642281046832295,1.8918431386213097,1.7835079936871048,1.6435896573808821,1.477728235008001,1.2926095971482654,1.0956958723481944,0.8949246488700492,0.6983890106698865,0.5140113053467757,0.3492237944716763,0.21066905927364588,0.10393223832495124,0.03331589071838226,0.0016665599970721034,0.010260030042017587,0.058749898249586874,0.1451815390134763,0.26607089464333034,0.41654491765981705,0.5905380032398418,0.7810364936241705,0.9803613985200307,1.1804779350441814,1.3733194096584886,1.5511123864232013,1.7066900340423732,1.8337810206884912,1.927262311261337,1.9833656768294643,1.9998295918620015,1.975990396277116,1.912809047566474,1.8128323846182075,1.6800904646927857,1.519934111896578,1.3388192255701366,1.1440465431166256,0.9434673474247188,0.745166981814241,0.5571389300105694,0.38696259897730056,0.2414977931750496,0.12660819598242734,0.04692500473753958,0.0056602472671777315,0.004477305110021534,0.043423862640490585,0.12092998491256202,0.23387140170574627,0.37769544679430256,0.5466045758308987,0.7337900652417557,0.9317064717362301,1.132375788973167,1.327709040835058,1.5098323478918,1.6714043233209361,1.8059120040621723,1.907933388226494,1.9733559958825149,1.9995426430393808,1.9854377464800588,1.9316098742994672,1.8402288269360227,1.7149781725599937,1.5609067625149127,1.3842252122222076,1.1920555513992832,0.9921441351854765,0.7925493887234155,0.6013169722043069,0.42615546046872466,0.27412561051050666,0.1513557425052563,0.06279470734816506,0.012012398574472782,0.0010558500233172063,0.030366719945104648,0.09876348776635979,0.20348908116013087,0.34032201357576053,0.5037465522762378,0.6871750574132757,0.8832135296562897,1.0839596621557748,1.2813213823726546,1.4673430433582915,1.6345261157223943,1.7761314532007364,1.8864509475047528,1.9610376220513046,1.9968848894985856,1.9925477472211353,1.948201025336394,1.8656323393062406,1.7481700311938344,1.6005490042624648,1.428719859120774,1.2396090251326353,1.0408395561896453,0.8404238455629975,0.6464406464928707,0.46670941780867403,0.3084751217019962,0.1781161794472481,0.08088735736897712,0.0207079473178583,3.7800953658351233e-6,0.019609440263327893,0.07873462405705767,0.1749959965142005,0.3045132636587069,0.46206558707267975,0.6413020357871968,0.834997592181243,1.0353443922958074,1.2342664606720581,1.4237452527587902,1.5961428822808927,1.7445100042805533,1.8628659430720906,1.9464397731576075,1.9918626351373878,1.9973035343641148,1.962543148300051,1.8889826674040815,1.7795873131727398,1.638766810121549,1.4721976298791806,1.2865941727307724,1.0894381102785538,0.8886767994107241,0.692402924506081,0.5085282814907365,0.34446485350404266,0.20682603400851352,0.10116004103303211,0.03172626861639616,0.0013235907197999275,0.011177538674083665,0.060890900036598916,0.1484597302167059,0.27035413144173537,0.4216605428647059,0.5962798061026889,0.7871730221878048,0.9866452894421645,1.186655884808947,1.3791423852358182,1.5563456637854225,1.7111226598849454,1.837234315953311,1.9295970736862045,1.9844877921882538,1.9996938277073144,1.9746022252592765,1.9102244268311344,1.8091555001748891,1.6754695316790333,1.5145554000286352,1.332899550614588,1.1378245270511511,0.9371937995910213,0.7390947887985855,0.5515128617904984,0.38200944224893263,0.23741720958594525,0.12356467377443847,0.045041228229314445,0.005012151451630031,0.005091014716368192,0.04527463904691453,0.12394322335959618,0.23792563861250715,0.3826272559531616,0.5522151561144086,0.7398532542722625,0.9379778624865709,1.1386025818090626,1.333640233863342,1.5152288548414607,1.6760486111060526,1.809616861536116,1.910549472659433,1.974777852963891,1.9997129577390134,1.984349653415853,1.9293072344808242,1.83680445972744,1.710570114134361,1.555692701618198,1.3784153275436362,1.1858840392726917,0.9858597691397847,0.7864054914267955,0.5955612040324698,0.4210198363202384,0.2698171472908565,0.14804811427963416,0.060621244543448416,0.011060713432322844,0.0013643049525672302,0.031922881133798264,0.10150462638845525,0.2073047019732428,0.3450583089821393,0.5092126023038441,0.6931505256961453,0.8894575451887947,1.090220528798225,1.2873467247172639,1.472889979977122,1.6393710497126,1.7800790853711788,1.889342148882518,1.9627558483673475,1.9973608790848862,1.9917623129471007,1.9461858280417093,1.8624686115530826,1.743985302783899,1.5955119615133655,1.423033545123725,1.2335026550897963,1.0345592777539407,0.8342228166310401,0.6405688304154644,0.46140350737311275,0.3039489980505514,0.17455229053269572,0.07842936348140295,0.01945493014111932,6.248726503121915e-6,0.020867295191864477,0.08119716117629794,0.1785639510026511,0.3090428113431546,0.46737414197763927,0.6471756101718154,0.8411994223809748,1.0416244826607906,1.2403716608866682,1.4294294623259913,1.601176970827972,1.748691047800127,1.8660254037844524,1.9484502932653247,1.9926431706156453,1.996822621843564,1.9608201733546653,1.8860870831190446,1.7756358404919923,1.6339187328289198,1.4666483738721716,1.2805674284068407,1.0831768155793737,0.8824333469989558,0.686428987822167,0.503064669801423,0.33973180488600796,0.20301433755582388,0.09842334615256065,0.03017489142337637,0.0010200671975040265,0.012134103849554156,0.06306899478695771,0.1517715555866418,0.2746661878176173,0.4267990113412339,0.6020375551195916,0.7933179569987174,0.9929297078491126,1.1928264620331612,1.3849503854342982,1.5615569665876072,1.7155271977803501,1.8406545421084632,1.9318951188540443,1.9855710222145588,1.9995185776116229,1.9731755593694031,1.907603854020234,1.8054466556799613,1.6708219189465905,1.509156364233875,1.3269667267812548,1.1315970671878204,0.930922732478833,0.7330329010258598,0.5459045079307295,0.3770806949328448,0.23336674651798395,0.12055576903894705,0.04319517071531653,0.004403355700162259,0.005744021271853361,0.04716312522830568,0.12699106432713603,0.24200997595846396,0.38758345012178474,0.557843423019026,0.7459267185877763,0.9442517029893925,1.144823900115497,1.339558248758255,1.5206050112641876,1.6806661963000216,1.8132897407355497,1.9131295921781515,1.9761612082362785,1.9998437857420421,1.9832226804753676,1.926967888853253,1.8333470403876961,1.706133989586032,1.5504566919521452,1.3725904962035125,1.179705185091902,0.9795759616054435,0.7802700306933542,0.5898214103981094,0.41590708075006366,0.26553752485846294,0.1447741364787536,0.05848488535293084,0.01014808944794876,0.001712204028661235,0.03351727946564276,0.1042812538115796,0.21115163269238846,0.3498204732978133,0.5146980374689236,0.699138113930021,0.8957059269310179,1.0964778319070856,1.2933607174311104,1.4784182383713964,1.6441907298031895,1.7839959059512032,1.8921982229936753,1.9644360477199565,1.9977974748770697,1.9909377060112947,1.9441332582668291,1.8592708179851865,1.739771188417099,1.5904513972123702,1.4173305221331878,1.227387062151126,1.0282776342946445,0.8280283355719704,0.6347112111627166,0.4561188704401944,0.2994503670453522,0.17102100518004193,0.07600776982236734,0.018240642567098897,4.821514503738911e-5,0.02216382393748262,0.08369598920147525,0.1821643506002656,0.31359965047831806,0.4727037345569357,0.6530631204263065,0.8474075248913817,1.04790292894042,1.2464673668932487,1.4350967102735732,1.60618731406656,1.752842519495101,1.869150658195733,1.9504233514509397,1.9933844986399993,1.9963023367889994,1.9590592479011957,1.8831565001360995,1.7716537317203014,1.6290456169924514,1.4610806861717778,1.2745296022209693,1.0769122355595149,0.8761945382388979,0.680467436576738,0.49762068608075694,0.33502483556381635,0.1992341204701109,0.0957222617775807,0.028661820415678996,0.0007560014187673048,0.013129687785971345,0.06528409647021194,0.15511688431272252,0.2790068934532064,0.43196012013006746,0.60781102287073,0.7994710553439236,0.9992144055187588,1.1989894229912372,1.390743180849233,1.5667460889934917,1.7199034737579604,1.8440415640617993,1.9341563559966206,1.9866153241229028,1.9993038484969605,1.971710454958001,1.9049474326412712,1.8017059976254397,1.6661478100670237,1.5037372177637203,1.3210209884048816,1.1253644094990283,0.9246543937828351,0.7269815579287151,0.5403140899503419,0.3721765517046891,0.22934656395645814,0.1175816006217888,0.041386905111189365,0.0038338840590121936,0.006436298983996114,0.049089246593189695,0.1300733874314819,0.24612425242035785,0.39256383354022295,0.5634891542392213,0.7520102182985335,0.9505277454404134,1.1510394981625138,1.345462851769816,1.5259606048124184,1.6852568965172634,1.816930496589015,1.9156736448729892,1.9775060070598696,1.9999351218810186,1.9820568721718141,1.924591929816276,1.829856705478011,1.7016699741333063,1.5451989403287953,1.3667509482711708,1.1735192329096198,0.9732929607804126,0.7741432488618682,0.584097818011609,0.41081739570194864,0.2612869122500765,0.1415339384182578,0.056385714158639355,0.009274562668199482,0.002099533510274698,0.035149851965060264,0.10709326036435762,0.21502972137129717,0.35460831842667506,0.5202026411074715,0.7051375856170192,0.9019584280840506,1.102731324331241,1.2993631229733587,1.4839276001856754,1.6489849656263396,1.78788176023415,1.8950190570288483,1.9660781537445748,1.9981946596304527,1.9900739589840848,1.9420433970841975,1.8560390849091848,1.735527854542516,1.5853675112418886,1.4116110154074621,1.221262487870441,1.0219948739244382,0.8218406470555853,0.6288680200989937,0.45085571574278493,0.29497940637360176,0.16752246286808414,0.07362267204004802,0.017065132557752882,0.00012967769337790536,0.02349897528980993,0.0862310094338169,0.18579705309837036,0.318183601077927,0.4780541543022113,0.6589643340054289,0.8536216545044784,1.0541794831486369,1.2525533379232852,1.4407467727564596,1.6111737140978342,1.756964255390411,1.872241582864639,1.9523588697825056,1.9940865899294362,1.9957426997506542,1.957260441492776,1.8801910342075001,1.7676411441430808,1.6241476550907281,1.4554947866906685,1.2684809326555326,1.0706446176575446,0.8699606195511476,0.6745185062394304,0.49219654535551627,0.33034413145333286,0.19548553206250097,0.09305689459566402,0.027187115356614222,0.0005314038136741139,0.014164251159758612,0.06753611759421996,0.15849558426097932,0.28337607689922206,0.43714366537746163,0.6135999813155035,0.805632074188357,1.005499134217786,1.205144524258221,1.3965205426766434,1.5719128260429653,1.7242513149636154,1.8473952480325635,1.9363806957994707,1.9876206566654235,1.9990496488447023,1.9702069698938076,1.902255267617632,1.7979336737600322,1.661447389658551,1.498298174663608,1.31506257033058,1.1191268001624446,0.9183890310901692,0.7209409985234443,0.5347418286596539,0.3672972062685719,0.22535682069074892,0.11464228599672932,0.039616502839909695,0.0033037590211875134,0.007167820509197065,0.05105292706352427,0.13319007092695867,0.25026830549228185,0.39756820949314364,0.5691521267797864,0.758103513118172,0.9568057419481806,1.1572491304462655,1.3513538096778395,1.5312954239506393,1.6898205304342058,1.8205389852937461,1.9181815302588776,1.9788121963177656,1.999986962548343,1.980852274552317,1.9221794512156247,1.8263335928598483,1.6971782440958583,1.539919654419097,1.3608969143973808,1.1673264270586843,0.9670110148310442,0.7680253879279544,0.5783906529437208,0.40575098220853967,0.25706547735650076,0.13832764807965903,0.05432381387369023,0.008440167595658354,0.002526278098651469,0.03682053414860165,0.1099405349780832,0.21893881483312416,0.3594216552582974,0.5257261957985643,0.7111487037896391,0.9082148016864446,1.1089807590700904,1.3053537042606802,1.489417847811097,1.6537535678190727,1.7917364947363081,1.89780453957074,1.9676821015812131,1.9985524176570255,1.9891711059817734,1.9399163270392794,1.8527735399720644,1.7312554687635717,1.5802605044054685,1.4058752508557693,1.215129174156496,1.0157112447999492,0.8156599954833617,0.6230394880189619,0.4456142511651008,0.2905362926292958,0.16405680178236626,0.0712741643410979,0.015928446543427066,0.0002506331539116058,0.024872696513040804,0.08880212174503055,0.18946191501229215,0.3227944820850266,0.4834251898822586,0.6648790178230599,0.8598415657745851,1.0604538973737183,1.2586293335929954,1.4463794266081869,1.6161359739688415,1.7610560926857413,1.8752980557056664,1.954256771810836,1.9947494167527373,1.9951437328330905,1.9554238251786584,1.8771908024632937,1.763598236249725,1.6192250405835724,1.4498908960608419,1.2624216586210333,1.0643742094319928,0.8637318371632947,0.6685824317814052,0.48679246186840075,0.3256898774332959,0.19176872039483372,0.09042734988352663,0.02575083449417237,0.000346283253380153,0.015237753107678609,0.06982496920853376,0.1619075219794669,0.28777356558142786,0.4423494423436154,0.6194042018014858,0.8118007701837177,1.0117836457118785,1.2112915227197678,1.402282242722095,1.5770569736601177,1.7285705496660557,1.8507154615568018,1.9385680504055656,1.9885869801334706,1.9987559886952397,1.9686651635615133,1.8995274652845915,1.794129833083082,1.6567208433783693,1.4928394497651956,1.3090917079040436,1.1128844855514326,0.9121268918704584,0.7149114614000509,0.5291879441521338,0.3624428513490898,0.22139767430780033,0.11173794126099768,0.037884033828822994,0.0028130015255807272,0.007938556953780984,0.053054089077808175,0.13634099171063863,0.25444197149232306,0.40259638031758005,0.5748321169643872,0.7642063623734141,0.9630854445442298,1.1634525516984833,1.3572308898011223,1.536609257964078,1.6943569177961566,1.8241150643215667,1.9206531492792958,1.9800797244180357,1.9999993056964125,1.9796089351961366,1.9197305483395066,1.8227778416891023,1.6926589768883153,1.5346190427443704,1.3550286258049202,1.161127012142921,0.9607303718816268,0.7619166895352039,0.572700140616297,0.4007080403831642,0.25287338691607764,0.1351553921050933,0.05229926593907319,0.007644937187305634,0.002992420938210394,0.0385292600276651,0.11282296519100621,0.22287875867639795,0.36426029367529433,0.5312684833724997,0.7171712310207469,0.9144748006237982,1.1152258892831333,1.3113322246769994,1.4948887643935242,1.65849634803102,1.795559957203382,1.9005545605981893,1.9692478278771137,1.9988707348260428,1.9882291826652796,1.9377521321470834,1.849474312156489,1.7269541998311455,1.5751305784197958,1.4001234550295334,1.208987363263071,1.0094269951121189,0.8094866249789984,0.6172258451381278,0.44039468373464186,0.28612120130681395,0.1606241588096574,0.06896233948697605,0.014830629421003994,0.0004110767491399825,0.02628493334785076,0.09140922458118761,0.19315879158725613,0.3274321113787557,0.4888166291519247,0.6708069382607096,0.8660670130272655,1.0667259237887499,1.2646951139123852,1.4519944493500518,1.621073897680116,1.7651178697614502,1.8783199559941186,1.9561169825725488,1.995372952929546,1.9945054596943188,1.953549471501609,1.874155923406791,1.7595251677271118,1.614277967904536,1.4442692356250628,1.2563520194468296,1.0581012585518281,0.8575084371001118,0.6626594476657197,0.4814086490702315,0.3210622573375058,0.1880838322738978,0.08783373150308638,0.024353034558572073,0.00020064704978817183,0.016350151228504695,0.07215056090803407,0.1653525627032597,0.292199185807705,0.4475772454106196,0.6252234550732728,0.8179768996786957,1.0180676917750726,1.217430175581522,1.4080280534098133,1.5821783286611835,1.732861007263924,1.8540020734926375,1.9407183334186977,1.9895142563591486,1.998422879647566,1.96708509685948,1.8967641333849552,1.790294625838783,1.6519683579158926,1.487361258677287,1.3031086369627085,1.106637712225262,0.9058682234656653,0.7088931847135624,0.5236526557953519,0.35761367868367544,0.21746928118621833,0.10886868113039638,0.03618956650708183,0.002361630956157046,0.008748477875179739,0.05509265359409432,0.13952602532737302,0.2586450855689173,0.40764814741057787,0.5805289004444737,0.7703185250139319,0.9693666051926533,1.1696495168962788,1.363093860006499,1.5419018969665927,1.6988658794248968,1.8276585924244162,1.9230884043101066,1.9813085412958338,1.9999721508376964,1.9783269032127222,1.9172453179146827,1.819189592411051,1.688112351012767,1.5292973146684528,1.3491463142796523,1.1549212330268075,0.9544512800053243,0.75581739496525,0.5670265057933368,0.39568876941211073,0.24871080650821453,0.13201729579240762,0.050312150320488414,0.00688890285317123,0.003497943617242427,0.040275962110891794,0.11574043715282611,0.22684939728104658,0.36912404256087206,0.5368292849200142,0.7232049294321925,0.9207381776383459,1.1214664683001159,1.3172984480823495,1.5003401338427045,1.6632131189317287,1.7993519966160163,1.903269011490821,1.9707752707891375,1.9991495985646055,1.9872482262387132,1.9355508978890916,1.846141531775502,1.7226242176368656,1.5699779359068617,1.3943558551133308,1.202837297779567,1.0031423730765698,0.8033207793784389,0.6114273210839043,0.4351972196141558,0.2817343067935044,0.1572246695326387,0.06668728879026053,0.013771724552062214,0.0006110021418527234,0.027735630013686396,0.0940522149668741,0.1968875368038041,0.3320963057820415,0.49422825915986013,0.6767478611771195,0.872297750369647,1.0729953146609041,1.2707504392951106,1.4575916191997447,1.625987290193289,1.7691494261853655,1.8813071643709023,1.9579394285929765,1.9959571738314146,1.9938279055448782,1.9516374544949489,1.8710865169097215,1.7554220994534036,1.6093066324533538,1.438630027427766,1.2502722548719023,1.0518260127860521,0.8512906651734424,0.656749787838764,0.47604531961093344,0.3164614539479432,0.18443101324559596,0.08527614189707688,0.02299377076018949,9.450095524266011e-5,0.017501401584707144,0.07451280083642042,0.16883057036014582,0.2966527627747946,0.45282686809043526,0.6310575112818522,0.824160218728373,1.024351024199959,1.2235602403788186,1.4137577477915197,1.5872766887626155,1.737122518292734,1.8572549540253598,1.9428314599069345,1.9904024487168863,1.9980503348588434,1.9654668321971789,1.8939653810648753,1.7864282035103525,1.647190120984868,1.4818638177777608,1.2971135938260616,1.1003867269189727,0.8996132730810585,0.7028864061739681,0.5181361822222668,0.3528098790151557,0.21357179648966695,0.10603461893511323,0.03453316780282922,0.0019496651411620158,0.009597551283117012,0.05716854009305494,0.14274504597462412,0.2628774817072448,0.4127233112373131,0.5862422522085033,0.7764397596211507,0.9756489758000096,1.1758397812716521,1.368942488718066,1.5471731319095385,1.7033472372252234,1.8311694296398366,1.9254871991635678,1.9824985984152765,1.9999054990447578,1.9770062292398052,1.9147238581029358,1.8155689867544222,1.6835385460520795,1.5239546803890933,1.3432502121612655,1.1487093348265325,0.948173987213979,0.749727745128183,0.5613699725722623,0.39069336754667094,0.24457790054657969,0.1289134830903218,0.048362545505078236,0.006172094455119015,0.004042826168582536,0.04206057140701447,0.1186928356291097,0.23085057381457819,0.37401270980668655,0.5424083808002274,0.7292495607048592,0.9270046853390647,1.1277022496302656,1.3232521388228509,1.5057717408401619,1.667903694217935,1.8031124631961433,1.9059477850331126,1.9722643699863063,1.9993889978581463,1.986228275447943,1.9333127112097712,1.8427753304673475,1.7182656932065175,1.56480278038587,1.3885726789160722,1.1966792206216477,0.9968576269234616,0.7971627022204081,0.605644144886698,0.430022064093164,0.2773757823631954,0.15385846822451454,0.06444910211089916,0.012751773761291663,0.0008504014353931666,0.02922472921085506,0.0967309885091654,0.20064800338396482,0.33678688106829047,0.4996598661572682,0.6827015519175668,0.878533531699853,1.0792618223616228,1.2767950705677773,1.463170715079958,1.6308759574390597,1.7731506027189696,1.8842595628471592,1.9597240378890994,1.9965020563827598,1.993111097146839,1.9496878496795214,1.867982704207608,1.751289193491806,1.6043112305879141,1.4329734942067427,1.2441826050347804,1.0455487199946503,0.8450787669732234,0.6508536857203773,0.470702685331574,0.31188764898725585,0.18081040758896694,0.08275468208532988,0.02167309678728424,2.784916230424983e-5,0.018691458704160224,0.07691159568988126,0.17234140757559802,0.3011341205750807,0.4580981030333333,0.6369061399935249,0.8303504831036903,1.0306333948073154,1.2296814749860374,1.4194710995554463,1.5923518525893967,1.7413549144310618,1.8604739746726109,1.944907346405914,1.9912515221248086,1.997638369043845,1.9638104334929114,1.891131318869618,1.7825307188138013,1.6423863213163923,1.4763473442046757,1.2911068152864678,1.0941317765343659,0.8933622877747692,0.6968913630373212,0.5126387413227403,0.3480316420841313,0.20970537416120127,0.10323586661505879,0.03291490314054235,0.0015771203524356237,0.010485743640846978,0.05928166658129164,0.1459979265073167,0.26713899273601605,0.4178216713388373,0.5919719465901581,0.7825698244184474,0.9819323082248961,1.1820231003212176,1.3747765449266982,1.552422754589354,1.707800814192273,1.8346474372966917,1.9278494390919332,1.9836498487714898,1.9997993529502112,1.9756469654414346,1.9121662684969498,1.8119161677260873,1.6789377426625172,1.5185913509297952,1.3373405523343098,1.1424915628999754,0.9418987414482598,0.7436479805532006,0.5557307643749654,0.385722032095444,0.24047483227294575,0.12584407659322427,0.04645052849838305,0.0054945403056845254,0.004627047070450807,0.043883017427425175,0.1216800440058664,0.23488213023852955,0.37892610231985935,0.5480055506499201,0.7353048860875846,0.9332740762112189,1.1339329869727033,1.3291930617393146,1.5111833708480482,1.672567888621179,1.806841208412759,1.9085907754187992,1.9737150666521421,1.999588923250859,1.9851693705790112,1.9310376605130148,1.8393758411903596,1.713878798693208,1.559605316265337,1.3827741548619537,1.1905133750210324,0.9905730048878557,0.7910126367369597,0.5998765449704953,0.4248694215802764,0.27304580016887614,0.1505256878434975,0.06224786785292746,0.011770817334725292,0.0011292651739557291,0.030752172122878618,0.09944543940179729,0.20444004279663341,0.3415036519689565,0.505111235606399,0.6886677753229709,0.8847741107168356,1.0855251993762272,1.282828768979223,1.4687315166274224,1.6357397063247254,1.7771212413235822,1.8871770348089794,1.961470739972342,1.997007579061783,1.9923550628126983,1.9477007340609367,1.8648446078949223,1.7471266130839056,1.5992919596169064,1.4272998593837314,1.2380833104647715,1.0392696281184044,0.8388729878571101,0.6449713741951092,0.465380957255656,0.3073410231117073,0.17722215831091548,0.08026945166050559,0.020391064803869763,6.94303587622791e-7,0.01992027558195819,0.07934685072071412,0.17588493567838337,0.30564308220378,0.46339074203594355,0.6427691101988484,0.8365474483014856,1.036914555455682,1.2357936376265002,1.4251678830356358,1.5974036196823946,1.7455580285076562,1.8636590082893454,1.9469459109221634,1.992061443046215,1.9971869984744175,1.9621159661711856,1.8882620587390428,1.7786023256922194,1.6375571486509344,1.4708120558478437,1.285088538599979,1.0878731081296293,0.887115514448542,0.6909082920959863,0.5071605502348318,0.34327915662161146,0.2058701669169718,0.10047253471542228,0.03133483643849433,0.0012440113047618162,0.011413019866533314,0.06143194959440412,0.1492845384431818,0.2714294503339616,0.4229430263398568,0.5977177572778765,0.7887084772802015,0.9882163542880902,1.1881992298162516,1.380595798198485,1.5576505576563586,1.71222643441855,1.8380924780205161,1.930175030791455,1.9847622468923258,1.9996537167466206,1.9742491655058476,1.9095726501164627,1.8082312796051847,1.6743101225667272,1.5132075381316263,1.331417568218678,1.13626816283668,0.9356257905680384,0.7375783413789969,0.5501091039391355,0.38077495941649686,0.2364017637502953,0.12280919753669395,0.04457617482135079,0.0048562671669125645,0.005250583247253693,0.04574322818915477,0.12470194429434589,0.23894390731423854,0.3838640260311338,0.5536205733917849,0.7413706664069742,0.9395461026262505,1.14015843422544,1.3351209821769103,1.516574810117666,1.6772055179149503,1.8105380849876895,1.9111978782549799,1.975127303486952,1.9997493668460864,1.9840715534565683,1.9287258356589136,1.835943198217651,1.7094637073706862,1.5543857488349726,1.376960511981067,1.1843400045166692,0.9842887552000822,0.784870825843479,0.5941247491443113,0.4197394955945569,0.26874453123641084,0.14722646002795192,0.06008367296073136,0.010828894018231061,0.0014475823429728196,0.03231789841877897,0.10219546042924632,0.20826350526363813,0.34624643218090356,0.5105821521888756,0.6946462957392898,0.891019240929935,1.0917851983134677,1.2888512962102765,1.4742738042014583,1.6405783447416784,1.7810611851668563,1.8900594650218765,1.9631794658513746,1.9974737219013505,1.9915598324043455,1.9456761861263199,1.8616723519203568,1.7429345226435582,1.5942490177914856,1.421609347056256,1.2319746120720763,1.032988985169044,0.8326735729413466,0.6391030856026484,0.46008034558092925,0.3028217559041644,0.17366640714020143,0.07782054878436528,0.019147725447689057,1.3037451656594534e-5,0.021187803682239492,0.08181846974108742,0.17946101470623588,0.3101794695657716,0.46870457604933413,0.648646190322131,0.8427508695536474,1.0431942580517881,1.2418964868818527,1.4308478732201853,1.6024317905068313,1.7497316945076975,1.8668099290730256,1.9489470729364657,1.992832179490799,1.9966962409788152,1.9603834971601148,1.8853577140032853,1.7746431793092707,1.6327027937314083,1.4652581713403738,1.2790590014766403,1.0816109689098055,0.8808731998375866,0.6849374296694497,0.5017018253364193,0.33855261034151496,0.20206632623998677,0.09774473238238146,0.029793030106199936,0.0009503511552966248,0.012379343334562476,0.06361930420051831,0.15260475196745016,0.27574868503636296,0.4280871739570091,0.6034794573232756,0.7948554757417484,0.9945008657821828,1.1943679258116122,1.3864000186844676,1.5628563346225124,1.716623923100756,1.8415044157390037,1.9324638824057891,1.9858357488402363,1.9994685961863288,1.972812884643393,1.9069431054043493,1.8045144679375178,1.6696558685466905,1.5078034546445598,1.3254814937605455,1.1300393804488835,0.9293553823424866,0.7315190673444428,0.5445052133094099,0.3758523449092964,0.23235885585693927,0.11980896579251477,0.0427395585072331,0.004257300249354001,0.005913410070560454,0.04764113021750216,0.12775841713534553,0.24303574460956845,0.38882628590214097,0.5592532272435122,0.7474466620766846,0.9458205168513318,1.1463783454954344,1.3410356659944882,1.521945845697762,1.68181639892205,1.8142029469016445,1.9137689905661472,1.976501024710171,1.9998703223066225,1.982934867442253,1.9263773279599639,1.8324775371319646,1.7050205936264606,1.5491442842572414,1.3711319799010355,1.1781593529444456,0.9780051260755932,0.7787375121295896,0.5883889845925664,0.4146324887580909,0.2644721454575053,0.14396091509086084,0.057956602915794075,0.009926041015919651,0.001805340369545383,0.033921846255417054,0.10498094297111227,0.21211823976586597,0.35101503437363657,0.5160723998142971,0.7006368770266658,0.8972686756686712,1.0980415719159182,1.294862414383005,1.479797358892501,1.645391681573301,1.784970278628648,1.8929067396356283,1.9648501480349463,1.9979004664897233,1.9907254373318048,1.943614285841371,1.8584660615817583,1.7387130877499446,1.5891826042980308,1.4159021819884194,1.2258567511382177,1.0267070392196187,0.826480767090411,0.6332490517288054,0.45480105967123097,0.2983300258667565,0.17014329452197463,0.07540807018373596,0.01794312782819185,6.487811898170381e-5,0.022493992940111895,0.08432635512699815,0.18306950341096706,0.3147431034827137,0.4740393951876032,0.6545371482301015,0.8489605018374551,1.049472254559612,1.247989781701436,1.4365108457607505,1.607436166459752,1.7538757475796216,1.8699266125685026,1.9509107534068006,1.9935637010160003,1.9961661159409905,1.9586130948888196,1.882418399378226,1.7706534360435255,1.6278234482953353,1.4596859100497364,1.2730184420712605,1.0753456062171962,0.8746355905010029,0.6789790115951482,0.4962627822363559,0.3338521899329574,0.19829400237457906,0.09505256735874201,0.02828954504199288,0.0006961515030429188,0.013384675877092023,0.06584364400338849,0.15595843593818404,0.2800965262420181,0.43325391100643573,0.6092568191507381,0.8010105770087879,1.0007855944812099,1.20052894465599,1.392188977129241,1.568039879869907,1.7209931065467718,1.8448831156872911,1.9347159035297568,1.9868703122140143,1.999243998581234,1.9713381795843286,1.9042777382224085,1.800765879529942,1.6649751644362496,1.502379313919221,1.3195325634232917,1.1238054617611333,0.9230877644405164,0.7254703977790607,0.53891931382825,0.370954383007573,0.2283462682797186,0.11684349986391518,0.040940752098813205,0.003697663211003177,0.006615501360003773,0.04957664854905042,0.13084934180422358,0.24715748050491593,0.3938126859334151,0.5649032897263986,0.7535326331067209,0.9520970710594919,1.1525924751086996,1.3469368795737173,1.5272962654430375,1.686400349521659,1.8178356493996837,1.916304010798535,1.9778361760625227,1.9999517848549624,1.9817593574329178,1.9239922301776664,1.828978994819944,1.7005496329546297,1.543881129559832,1.3652887888373655,1.1719716644280045,0.9717223657053301,0.7726129378489044,0.5826694778668408,0.409548602787701,0.2602288115829219,0.14072918201480056,0.05586674173318107,0.009062293988709502,0.0022025251229245146,0.03556395228003528,0.1078017770063362,0.2160040940487774,0.355809270196743,0.5215817616286258,0.7066392825688596,0.9035221680928832,1.1042940730689508,1.3008618860698948,1.4853019625310986,1.6501795267021628,1.7888483673075921,1.8957187461884064,1.9664827205343345,1.9982877959713368,1.9898519105520558,1.9415151146470797,1.8552258635212922,1.734462475141597,1.584092919249962,1.410178589601971,1.2197299693066763,1.0204240383946448,0.8202948149080729,0.6274095037965166,0.4495433080479284,0.2938660104139098,0.1666529596123527,0.07303211114675867,0.0167773195246379,0.00015621425795631083,0.023838791763727052,0.08687040782181255,0.18671025926443197,0.31933380369995534,0.47939498873573705,0.6604417512417691,0.8551760998844158,1.055748297010576,1.2540732814121385,1.442156576980997,1.6124165498782355,1.7579900240414414,1.8730089356728485,1.9528368747716676,1.9942559787281493,1.9955966442998354,1.9568048292847258,1.879444230961068,1.7666332534820728,1.6229193050671797,1.4540954920692477,1.2669670989741704,1.069077267521255,0.868402932812267,0.6730332732187747,0.4908436357661031,0.3291780810534327,0.19455334432009097,0.09239614597980284,0.026824440630590862,0.00048142238837811657,0.014428977785435948,0.06810488114596502,0.15934545789145815,0.28447280221966764,0.4384430334123669,0.6150496145656728,0.8071735379668639,1.0070702921507424,1.2066820430013074,1.3979624448803796,1.573200988658694,1.7253338121824002,1.8482284444133417,1.9369310052130313,1.987865896150441,1.9989799328025,1.9698251085766174,1.901576653847453,1.7969856624441949,1.6602681951140155,1.4969353301986534,1.3135710121778628,1.1175666530010753,0.9168231844205443,0.7194325715932439,0.5333516261279065,0.36608126717110445,0.22436415950802735,0.1139129168809172,0.03917982664535902,0.0031773781564431447,0.007356829384350783,0.05154970673464743,0.13397459621558883,0.25130895219989013,0.39882302917191204,0.5705705376739805,0.7596283391132462,0.9583755173392917,1.1588005776190504,1.352824389828049,1.532625858022334,1.6909571886567818,1.8214360489973633,1.9188028388237122,1.979132704808129,1.9999937512734967,1.980545069858898,1.9215706365185872,1.8254477094672898,1.696051001949471,1.5385964926269615,1.359431169584618,1.1657771833689348,0.9654407222460906,0.7664973449102342,0.5769664548762519,0.40448803848675086,0.25601469721608405,0.13753138844693324,0.05381417195830107,0.008237687052895848,0.0026391209151033213,0.03724415163264416,0.11065785111746784,0.2199209146288017,0.3606289502874198,0.5271100200228502,0.7126532752827062,0.9097794712017439,1.1105424548111176,1.306849474303879,1.4907873976961286,1.6549416910178372,1.7926952980267035,1.898495373611506,1.968077118866208,1.9986356950474313,1.988939286567665,1.9393787554565818,1.851951885720412,1.730182852709165,1.578980163679787,1.404438795967455,1.2135945085732907,1.0141402308603036,0.8141159607273392,0.6215846724563927,0.44430729838178074,0.289429885865621,0.1631955402726083,0.07069276551918746,0.01565034658415254,0.00028704226098719143,0.025222147036114584,0.08945052734051884,0.19038313846386556,0.3239513888939033,0.484771145158561,0.6663597661366554,0.8613974181909063,1.0620221375133978,1.2601467457276798,1.447784843885589,1.6173727440468362,1.7620743613874725,1.8760567766403886,1.9547253609530593,1.9949089852836317,1.9949878485483703,1.9549587717707033,1.8764353262255355,1.7625827904141118,1.6179905577511366,1.4484871382095297,1.2609052112014723,1.0628062004089247,0.8621754729489363,0.6671004493855219,0.4854445999713918,0.32453046832101073,0.19084449982509577,0.08977557316886675,0.025397774740749668,0.0003061722926864796,0.015512207811730683,0.07040292631380496,0.16276568404668723,0.2888773401149727,0.4436543362145279,0.6208576147641001,0.8133441151910781,1.0133547105578042,1.2128269778121645,1.4037201938972563,1.5783394571352223,1.7296458685582627,1.8515402697832777,1.9391090999633902,1.9888224613259076,1.998676409280206,1.9682737313836045,1.8988399589669815,1.793173965991523,1.655535146495938,1.491471718509365,1.307597075493922,1.1113232005893354,0.9105618897215058,0.7134058272692032,0.5278023701209473,0.3612331898784753,0.22041268682729764,0.11101733259594582,0.037456851699949834,0.002696465635887657,0.008137364862608187,0.05356022684237338,0.13713405692786484,0.25548999571944486,0.4038571177191048,0.5762547472411557,0.7657335393278561,0.9646556077041044,1.165002407818754,1.358697964212774,1.5379344129273655,1.6954867363412296,1.8250040034857498,1.9212653759429301,1.9803905597366658,1.999996219904634,1.9792920526821653,1.919112642631069,1.8218838205527699,1.6915248782980266,1.5332905821913045,1.353559353507132,1.1595761544371175,0.959160443810386,0.7603909748674227,0.571280140879203,0.3994509957375375,0.25182996880626185,0.13436766069378925,0.05179897466362504,0.007452252778861523,0.0031151105014119995,0.03896237794868673,0.11354905249521952,0.22386854679922585,0.3654738842776034,0.5326569566416809,0.7186786176273154,0.9160403378442507,1.1167864703436228,1.3128249425867216,1.496253447723735,1.6596779864241946,1.7965109188398845,1.9012365122336021,1.9696332800548946,1.9989441499766802,1.9879876014255364,1.937205292651826,1.8486442574947453,1.725874389489515,1.573844539531301,1.3986830277957478,1.2074506112765873,1.0078558648145264,0.8079444486007474,0.6157747877778214,0.43909323748516027,0.28502182744000826,0.1597711730639788,0.06839012570051328,0.01456225351995144,0.00045735696061666165,0.026644004117484577,0.09206661177349307,0.19408799593785964,0.3285956766790197,0.4901676521081242,0.6722909591649124,0.867624211026802,1.0682935282638237,1.266209934758269,1.4533954241689973,1.622304553205673,1.7661285982942336,1.8790700150874502,1.9565761373595167,1.9955226948899674,1.9943397527328255,1.9530749952624786,1.8733918040175603,1.7585022068249336,1.6130374010227242,1.4428610699894842,1.254833018185817,1.0565326525752556,0.8559534568833773,0.661180774429893,0.48006588810347317,0.3199095353072581,0.18716761538179427,0.08719095243352715,0.02400960372289096,0.0001704081379980682,0.016634323170519716,0.07273768873866193,0.1662189793115072,0.2933099659575845,0.4488876135768439,0.6266805903414295,0.8195220649558157,1.019638601479938,1.218963506375771,1.4094619967602073,1.5834550823401807,1.7339291053566483,1.8548184609865075,1.941250101750393,1.989739969957986,1.998333440002928,1.9666841092816258,1.8960677616750625,1.7893309407264084,1.6507762055283044,1.4859886946532268,1.301610989330062,1.1050753511300102,0.9043041276518934,0.7073904028517102,0.5222717649920267,0.3564103426190768,0.21649200631293253,0.10815686137873015,0.035771895316771385,0.002254944644458412,0.008957076965174005,0.055608129460673617,0.14032759914873494,0.2597004459206176,0.4089147527381646,0.5819556939129236,0.7718479926072543,0.9709370941030466,1.1711977207477091,1.3645573707329315,1.543221720480457,1.699988813666855,1.8285393719379122,1.9236915248908135,1.981609691165336,1.9999591906508682,1.9780003553944114,1.9166183456008605,1.8182874688429895,1.6869714407732825,1.5279636078260843,1.3476735725303124,1.1533688225606689,0.9528817784567553,0.7542940689100825,0.5656107604739182,0.3944376734935301,0.24767479164177508,0.13123812371633936,0.04982122944548484,0.006706022189714056,0.0036304750811803066,0.04071856336160129,0.11647526694287358,0.22784683463641142,0.37034388080192404,0.5382223523920254,0.7247150716135093,0.9223045207282521,1.1230258730402398,1.3187880548991726,1.501699896715687,1.6643882258468774,1.800295079037476,1.9039420537851561,1.9711511426351151,1.9992131485757203,1.9869968927153119,1.9349948120803993,1.8453031094892243,1.7215372556583974,1.568686249651562,1.3929115124280667,1.2012985200886541,1.001571188477646,0.801780522290895,0.6099800792397216,0.4339013313029392,0.2806420092467139,0.1563799932423613,0.0661242826406061,0.01351308330955292,0.0006671516297568347,0.028104306847277605,0.0947185577904478,0.1978246853516249,0.33326648361515154,0.49558429643340074,0.6782350960560748,0.8738562324461391,1.0745622215539072,1.2722626090196383,1.4589880962246344,1.6272117825579786,1.7701525746274107,1.8820485319968752,1.9583891308889436,1.996097083306866,1.9936523824516994,1.951153574165487,1.8703137845502877,1.7543916638897166,1.608060030522164,1.4372175096276443,1.2487507597668916,1.050256871813055,0.8497371303732187,0.6552744821677337,0.4747077126107959,0.31531546452986237,0.18352283621989218,0.08464238586117467,0.02265998240711753,7.413528673505532e-5,0.01779527954047344,0.07510907620196661,0.16970520728760508,0.2977705046672562,0.4541426587949574,0.6325183113016782,0.8257071432442058,1.0259217167159185,1.2250913863113126,1.415187626679099,1.5885476622162447,1.7381833533981237,1.8580628885409227,1.9433539260086774,1.9906183858068562,1.9979510385172907,1.9650563050576295,1.8932601714679884,1.7854567384407947,1.6459915601798425,1.480486475199101,1.2956129901252447,1.0988233514007586,0.8980501453811207,0.7013865359380953,0.5167600291893751,0.35161291588615606,0.212602272824035,0.10533161621226195,0.03412502404825701,0.001852832621357381,0.009815933314986092,0.05769333370134644,0.14355509673956113,0.26394013649890224,0.4139957344625411,0.5876731525127875,0.7779714574423349,0.9772197284297539,1.1773862717033454,1.3704023779535888,1.5484875718433546,1.7044632428102904,1.832042014713554,1.9260811898392913,1.9827900509408445,1.9998826649747843,1.976670029015187,1.9140878439479256,1.8146587963867065,1.682390869226987,1.5226157799363182,1.3417740591308314,1.1471554329173324,0.9466049741803646,0.748206867853904,0.5599585375895736,0.38944826977101066,0.24354932984417987,0.12814290112525528,0.047881014420893986,0.005999024760055538,0.004185194298528594,0.04251263850551612,0.11943637888060576,0.23185562100566548,0.37523874750535735,0.5438059874516921,0.7307623988132219,0.9285717724309518,1.129260416456602,1.3247385757103416,1.5071265295480536,1.6690722232406874,1.8040476291526586,1.9066118914024974,1.972630646654282,1.99944268021964,1.9859671995680548,1.9327474010518997,1.8419285736725675,1.7171716225240727,1.5635054977827858,1.3871244778279215,1.1951384780048881,0.995286450081909,0.795624425260754,0.6042007757218992,0.4287317849052066,0.2762906042799468,0.15302213475263005,0.06389532583568891,0.012502877393156031,0.0009164179819330931,0.029602997546433807,0.09740626064477576,0.20159305911347714,0.33796362521443746,0.5010208641872946,0.6841919420285285,0.8800932362963223,1.0808279697829264,1.2783045294431625,1.464562639152644,1.6320942382779289,1.774146131447921,1.8849922097232636,1.9601642699316932,1.9966321278470822,1.9929257648547913,1.9491945843720493,1.8672013893993253,1.750251323966752,1.603058642845717,1.4315566800337542,1.2426586761818372,1.0439791060029848,0.843526738951025,0.6493818058858702,0.4693702851309529,0.3107484374457543,0.17991030630080473,0.08212997411517897,0.02134896410079279,1.7357541483575822e-5,0.01899503106605538,0.07751699503870557,0.17322423027589307,0.30225878006155704,0.4594192643049114,0.6383705470661329,0.8318991057578143,1.0322038080951592,1.2312103755795774,1.4208968575028058,1.5936169956166126,1.742408444648254,1.8612734242980706,1.945420489641358,1.991457674176821,1.997529219927395,1.9633903830066821,1.8904172992401542,1.7815515121579855,1.6411813994347249,1.4749652774737407,1.2896033147883224,1.0925674483435057,0.8918001899290803,0.6953944636692992,0.5112673804156218,0.34684109916837735,0.20874363999757217,0.10254170868827372,0.03251630294258434,0.0014901454492192157,0.010713899988952558,0.05981575720296006,0.14681642222041635,0.2682088999948554,0.419099862203537,0.5934068972126821,0.7841036919683848,0.9835032625322933,1.18356781624973,1.3762327550085558,1.5537317590254718,1.7089098470404624,1.8355117934652356,1.9284342764011664,1.983931592441321,1.999766645898991,1.9753011260897453,1.9115212376220605,1.8109979465095465,1.6777833445828776,1.517247309750404,1.3358610463278713,1.1409362309236726,0.9403302789026438,0.7421296121315827,0.5543236954778629,0.3844829816415287,0.23945374636103178,0.12508211517574297,0.04597840622460192,0.005331288414934021,0.004779246243149404,0.04434453251799009,0.12243227135031365,0.23589474756787854,0.38015829105002574,0.5494076412781739,0.7368203603690262,0.934841845408114,1.1354898543406133,1.3306762699860302,1.5125331318793096,1.6737297935970197,1.8077684209670122,1.909245919632338,1.9740717336748945,1.9996327358423815,1.9848985626546005,1.9304631483346448,1.8385207833323065,1.7127776625204683,1.558302488554675,1.3813221525720125,1.1889707283348425,0.989001897862128,0.7894764006640556,0.5984371054953773,0.42358480247907004,0.27196778441164926,0.14969773022353483,0.0617033433252151,0.011531675671889063,0.0012051461716053868,0.031140017019534283,0.10012961417754729,0.2053929683799932,0.3426869159491023,0.5064771406361643,0.6901612617982436,0.886334976228073,1.0870905254661434,1.2843354573848627,1.4701188327696402,1.636951727517856,1.778109111017976,1.88790093199713,1.9619014843732625,1.9971278073774188,1.9921599286420704,1.9471981032584824,1.864054741498161,1.7460813505912522,1.598033435538365,1.425878804799456,1.2365570080562,1.037699603104795,0.8373225279149368,0.6435029783334323,0.46405381648183597,0.3062086344434426,0.1763301683125591,0.07965381643082059,0.02007660058654004,7.714485095178247e-8,0.020233530359459517,0.0799613501406885,0.17677590928175335,0.3067746148625141,0.4647172216913519,0.6442370664830905,0.8380977079262941,1.0384846274871724,1.2373202324926282,1.4265894637282428,1.5986628823125808,1.7466042122242404,1.864449941447984,1.9474497110231597,1.9922578019176842,1.9970680008942463,1.9616864089294304,1.8875392572793745,1.7776154161268833,1.636345913284584,1.4694253195535023,1.2835822006897655,1.0863078890540114,0.8855545081569525,0.6894144227203973,0.5057940356194971,0.3420950809432076,0.2049162602418848,0.09978724900257685,0.030945795541074794,0.0011668974534685406,0.011650941519157021,0.06197531613395846,0.15011144677541322,0.27250656780071036,0.42422693435795544,0.599156701540964,0.7902444539741948,0.9897874482235334,1.1897421102283405,1.3820482716091893,1.5589540748917228,1.7133284507253244,1.8389485711435167,1.9307506916342745,1.985034270578079,1.9996111380060182,1.9738937006870356,1.9089186279991694,1.8073050638076862,1.6731490488290375,1.5118584093126517,1.3299347676737063,1.1347114622258299,0.9340579404614946,0.736062541782663,0.5487064567041764,0.37954200522438397,0.23538820295975427,0.12205588676271995,0.04411348000585691,0.004702839528609171,0.005412607451125484,0.04621417304284481,0.12546282602029757,0.23996405478549132,0.38510231712371845,0.5550270926168519,0.7428887170031302,0.9411144920045222,1.1417139406418353,1.3366009031990949,1.5179194901592923,1.6783607529508324,1.8114573075167755,1.911844034435787,1.975474346776848,1.999783307937124,1.9837910241840448,1.928142144152127,1.8350798730693978,1.7083555492002853,1.553077427475867,1.3755047658406765,1.1827955146925047,0.9827177800456479,0.7833366913355744,0.5926892962139034,0.4184605873201238,0.26767372038470827,0.1464069109626397,0.059548421688146225,0.010599516506310969,0.0015333247945820139,0.03271530455741367,0.10288851082155259,0.20922426306229658,0.347436169258447,0.5119529102678162,0.6961428195891473,0.8925812057047082,1.0933496412446928,1.2903551546349399,1.4756564576169975,1.641784058416748,1.782041356807746,1.890774583929557,1.9636007055970965,1.9975841023195167,1.9913549040625331,1.9451642096818302,1.8608739651333153,1.7418819084691957,1.5929846070858265,1.4201841081893511,1.2304459963937662,1.0314186111463919,0.8311247423194303,0.6376382317124456,0.4587585166532179,0.30169623483622166,0.1727825636635023,0.07721401061159383,0.01884294212026294,2.2294779381093477e-5,0.02151072850242186,0.08244204496073715,0.18036010402084546,0.3113178307033664,0.470036321695378,0.6501176378366729,0.844302704917045,1.044763926811939,1.2434207157229074,1.432265220508345,1.6036851230016342,1.750770490401587,1.8675923145244817,1.9494415100038636,1.993018737425928,1.9965673996350801,1.9599444501294685,1.884626159262702,1.7736486058154735,1.6314852927218784,1.4638668202560337,1.2775498856516356,1.0800449207725629,0.8793133467567766,0.6834466492912517,0.500340210987559,0.33737504866895196,0.20112028473094945,0.0970683459509144,0.02941356387568328,0.0008831014017776084,0.01262702089426726,0.06417192519600912,0.15344004025761981,0.27683297016703723,0.4293767484166172,0.6049223383914568,0.7963935009117374,0.9960720372906068,1.1959089097665905,1.3878486980541214,1.5641543131707076,1.7177188793384783,1.8423522120024964,1.9330303440447651,1.9860980417975207,1.999416147438121,1.9724478083976718,1.9062801178771687,1.8035802941427308,1.668488165011039,1.5064492914739382,1.3239954572450157,1.1284813726901561,0.9277882066019555,0.7300058964443874,0.5431070431383013,0.37462553567843093,0.23135286022146662,0.11906433541626127,0.0422863094255459,0.004113702923576823,0.006085252905967398,0.048121486232887256,0.12852792318944184,0.24406338192894272,0.3900706304472146,0.5606641195107491,0.7489672290274856,0.9473894644626262,1.1479324295208695,1.3425122413382768,1.5232853916376325,1.682964918388419,1.8151141430979802,1.9144061331923234,1.9768384305597073,1.9998943905565731,1.9826446279019616,1.9257844801794486,1.8316059787931573,1.7039054572284682,1.5478305209257188,1.369672547409254,1.1766130809866742,0.9764343448429964,0.7772055397819819,0.5869575749043338,0.41335934182470147,0.26340858180621174,0.14314980695077595,0.057430646039728694,0.009706436714876365,0.0019009408884594903,0.03432879793928356,0.10568284160584684,0.21308679183164003,0.3522111975563019,0.5174479568002134,0.7021363791414661,0.8988316780125553,1.099605069895919,1.2963633834271868,1.4811752949692194,1.6465910401070327,1.7859427135012518,1.8936130520169958,1.965261866487297,1.998000994650606,1.9905107229130667,1.943092983976853,1.857659185939145,1.7376531634700636,1.5879123569070828,1.4144728151330699,1.2243258825673728,1.025136378214611,0.8249336269645167,0.6317877976690849,0.45348459479932035,0.29721141685492447,0.16926763247698107,0.07481065302489909,0.017648037429022323,8.400956752008248e-5,0.022826575048080278,0.08495898151632852,0.18397667292465258,0.3158882481361007,0.4753763542228032,0.6560120288555522,0.8505138516449955,1.0510414580498202,1.2495115843134295,1.4379239036619804,1.6086835193148667,1.754907114620345,1.8707004194101735,1.951395807911326,1.993740450646111,1.9960274359226902,1.9581645754108077,1.8816781202516228,1.769651237904893,1.6265997297314785,1.4582899991311313,1.2715066079387363,1.0737787908740952,0.8730769522420464,0.6774913790971813,0.49490612193515826,0.3326811887777773,0.19735586339833677,0.09438510692456359,0.02791966846652194,0.0006387685035302848,0.013642099561083199,0.06640549762737213,0.15680207119401623,0.2811879362095263,0.4345491009718968,0.6107035800329432,0.8025505899057462,1.002356781504372,1.202067971288132,1.3936338052379096,1.5693322684633317,1.7220809594668631,1.8457225816049285,1.935273143590767,1.9871228640827738,1.9991816818970432,1.9709635063314797,1.9036058114721164,1.7998237846358947,1.6638008772246304,1.5010201698836867,1.3180433496325639,1.1222462083928288,0.9215213249664157,0.7239599153426692,0.5375256759459653,0.3697337671943739,0.2273478775342006,0.11610757929687265,0.04049696665341307,0.0035639018695651226,0.006797156039504149,0.05006639675302926,0.1316274417924881,0.2481925670826457,0.39506303478172466,0.5663184993083857,0.7550556563528165,0.9536665149334626,1.1541450753596292,1.3484100509171266,1.5286306243717696,1.687542108054378,1.8187387832728767,1.9169321147040845,1.9781639311447943,1.9999659793131759,1.9814594190887282,1.9233902495397017,1.8280992377155818,1.6994275623748212,1.542561976147009,1.3638257276388015,1.1704236714112173,0.9701518404375121,0.7710831881716007,0.5812421679587041,0.40828126748215654,0.2591725371406727,0.13992654683720718,0.0553501000278982,0.008852471572481369,0.0023079799331113815,0.035980433435357395,0.10851249615985714,0.21698040212579928,0.3570118122384359,0.5229620631896214,0.7081417037211628,0.905086146270245,1.105856564342687,1.3023599064483766,1.4866751268431804,1.6513724827222092,1.7898130270025732,1.8964162241455869,1.9668849014312744,1.9983784679042684,1.9896274185371974,1.940984507953008,1.8544105308930496,1.7333952826210466,1.582816885345954,1.4087451512153577,1.2181969083098174,1.0188531524451898,0.8187494263870821,0.6259519072838882,0.4482322592295932,0.29275435764128777,0.16578551358599458,0.07244383859863857,0.016491933709204654,0.00018521907165547358,0.02418101802308059,0.08751206039332549,0.18762547314581413,0.32048568663829635,0.48073710835293615,0.6619200067231898,0.8567309027818353,1.0573169732503318,1.2555925976869686,1.443565289682288,1.6136578738257217,1.759013921492065,1.8737741333408575,1.9533125275546555,1.994422913071991,1.995448131084554,1.9563468550749694,1.8786952566880415,1.7656234702834606,1.621689417283429,1.4526950764520647,1.265452606248549,1.067509746858422,0.8668455709383113,0.6715488473595447,0.4894919830978358,0.3280136866678366,0.19362314493128918,0.09173763790628864,0.026464168319576764,0.000433908409383732,0.014696137425993072,0.06867594520632714,0.16019740679104977,0.28557129391542224,0.43974378772631717,0.616500198117848,0.8087154777633094,1.0086414326299005,1.2082190515219193,1.3994033646601929,1.5744877362506329,1.7264145188168094,1.8490595468279012,1.9374790016861487,1.988108696955373,1.9989077506437074,1.9694408531154708,1.900895814413811,1.7960356836618518,1.6590873706084655,1.4955712589817236,1.3120786799329003,1.1160062156106934,0.9152575430842671,0.7179248372815485,0.5319625755804028,0.36486689298745323,0.2233734130868278,0.11318573519055408,0.03874552236488227,0.003053458082654781,0.00754828873293556,0.052048827783164886,0.13476125940454464,0.2523514471521271,0.40007933293718123,0.5719900086726704,0.7611537584983223,0.9599453954859907,1.160351632771042,1.3542940989838663,1.533954977235324,1.6920921411584682,1.8223310848753678,1.919421879199858,1.979450796177467,1.9999980713793202,1.9802354445578287,1.9209595468002463,1.824559788345859,1.694922041507389,1.537272001236805,1.3579645374675244,1.1642275304358685,0.963870514975428,0.7649698783252841,0.5755433011242497,0.4032265648664419,0.25496575370368146,0.13673725793419766,0.053306865830095695,0.00803765480907026,0.002754425851293485,0.0376701458092199,0.11137736271779086,0.22090494015489304,0.36183782369000617,0.5284950116396762,0.7141585561298303,0.9113443634385762,1.1121038776633685,1.3083444868477463,1.4921557360062334,1.65612819740478,1.7936521444419355,1.8991839895954397,1.968469746322367,1.998716507171046,1.988705025823696,1.93883886489084,1.8511281283106351,1.7291084340999898,1.5776983936635505,1.40300134266768,1.2120593157032022,1.0125691820134222,0.8125723848511166,0.6201307910630531,0.4430017174009665,0.28832523324014636,0.16233634452733015,0.07011366081741488,0.01537467662463421,0.00032591929421343924,0.025574003929637046,0.09010118075017626,0.19130636056376216,0.3251099646199198,0.48611837234662447,0.6678413380859671,0.862953612766378,1.063590224543073,1.2616635156551212,1.449189155745711,1.6186079900569728,1.7630907488059488,1.8768133349109317,1.9551915932270914,1.9950660977476202,1.9948295080020713,1.9544913609183339,1.8756776863891522,1.7615654620400814,1.6167545493255973,1.4470822732072806,1.259388119702129,1.0612380363404577,0.8606194489728829,0.6656192887968786,0.4840980083237272,0.3233727266962042,0.1899222767648484,0.08912604346590935,0.025047120924215016,0.0002685292109209092,0.015789092856593245,0.07098317825470024,0.1636259129395763,0.28998287015079105,0.44496060349968203,0.6223119636909418,0.8148879209835872,1.0149257424357137,1.2143619075124867,1.4051571484347156,1.5796205129015815,1.730719386221319,1.8523629758678477,1.9396478312038514,1.9890555014768578,1.9985943644978699,1.967879908891509,1.8981502337418092,1.792216140843144,1.6543478313367894,1.4901027739892203,1.306101683738969,1.1097616408108595,0.9089971083624675,0.7119009006348543,0.5264179617730411,0.3600251052898089,0.21942962386309572,0.11029891850435214,0.037032045738592645,0.002582391724361588,0.008338621318009332,0.054068701021056764,0.1379292522460338,0.25653985786980127,0.4051193267796682,0.5776784235902341,0.767261294600625,0.9662258581165446,1.16655185660829,1.3601641531301645,1.5392582399269217,1.6966148379835733,1.8258909060164723,1.9218753283388381,1.9806989748291084,1.999990665487432,1.9789727526537855,1.9184924679691497,1.8209877704854724,1.6903890725853064,1.5319608051387166,1.352089208400595,1.1580249027959049,0.957590616557093,0.7588658517066431,0.569861199494905,0.39819543362819165,0.2507883976548374,0.13358206621256374,0.05130102415012949,0.007262018608290011,0.0032402610092949757,0.03939786832058367,0.11427732812305103,0.22486025090724182,0.3666890412931352,0.5340465836100915,0.720186698713626,0.9176060823302732,1.118346763101142,1.314316888245918,1.4976169059853877,1.6608579963134495,1.7974599141817464,1.9019162390453115,1.9700163385622602,1.9990150990990698,1.9877435812052446,1.9366561395390696,1.847812107840292,1.7247927872291382,1.5725570840302316,1.397241616359079,1.20591334717037,1.0062847151236731,0.8064027463375059,0.6143246789292278,0.4377931759094661,0.2839242185932086,0.15892026153644667,0.06782021171862684,0.01429631030476941,0.0005061046778068734,0.02700547774754669,0.09272624032176435,0.19501918979074528,0.32976089943133147,0.491519933654324,0.6737757890630431,0.8691817358139248,1.06986096414695,1.2677240984288909,1.4547952797203925,1.623533672488581,1.7671374355353318,1.8798179040779628,1.957032930709336,1.99566997926848,1.99417159110966,1.9525981662292726,1.8726255285429942,1.7574773734579572,1.6117953207754776,1.4414518110916763,1.2533133878351035,1.0549639070403258,0.8543988322650019,0.6597029376149826,0.4787244106641342,0.31875849217192687,0.18625340507596588,0.08655042675613145,0.023668582251023196,0.00014263744029130443,0.01692092268323231,0.0733271056412379,0.16708745422052962,0.2944224906671241,0.4501993422381172,0.6281386471989086,0.821067675766983,1.0212094627042692,1.2204962966292092,1.4108949292983295,1.584730395681591,1.7349953916464362,1.8556327382458149,1.9417795464794114,1.9899632402503264,1.998241535837669,1.9662807353137959,1.8953691779011503,1.7883653070441348,1.6495824466120004,1.4846149309006835,1.3001125971302614,1.1035127306420949,0.9027402680761082,0.7058883433361338,0.5208920535252262,0.35520859534244875,0.21551666563471128,0.10744724326195543,0.03535660445347266,0.002150721400880795,0.009168122578142146,0.056125936685791245,0.14113129518735135,0.2607576338015267,0.41018281723933625,0.5833835193799735,0.7733780234243857,0.97250765475931,1.172745501974496,1.3660199815004213,1.5445402029782067,1.7011100198919773,1.8294181060903179,1.9242923652145185,1.981908417799049,1.9999437619300284,1.9776713932504442,1.9159891104911324,1.8173833252220422,1.6858288346521817,1.5266285976344522,1.346199972501961,1.1518160334829244,0.951312393226036,0.7527713494130612,0.5641960875027203,0.3931880724872008,0.2466406339914179,0.1304610962961178,0.04933265421480071,0.006525593606273583,0.003765466217556801,0.041163532727838015,0.11721227783270449,0.22884617815584474,0.3715652734340886,0.5396165598243869,0.7262258933728774,0.9238710556198622,1.124584974074305,1.3202768747448852,1.5030584210748672,1.6655616926302876,1.8012361858226549,1.9046128645766713,1.9715246170636294,1.9992742318945282,1.98674312265705,1.9344364181110172,1.8444626004583111,1.7204485124679825,1.567393159517621,1.3914661997876299,1.1997592454652184,1.0000000000000313],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],20:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var coversin = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof coversin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the coversine (for -256*pi < x < 0)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the coversine (for 0 < x < 256*pi)', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the coversine (for -2**60 (pi/2) < x < -2**20 (pi/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the coversine (for 2**20 (pi/2) < x < 2**60 (pi/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the coversine (for x <= -2**60 (PI/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function computes the coversine (for x >= 2**60 (PI/2))', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = coversin( x[i] );
		if ( y === expected[ i ] ) {
			t.equal( y, expected[ i ], 'x: '+x[i]+'. E: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. Value: '+y+'. E: '+expected[i]+'. tol: '+tol+'. Δ: '+delta+'.' );
		}
	}
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN`', function test( t ) {
	var v = coversin( NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = coversin( PINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = coversin( NINF );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/coversin/test/test.js")
},{"./../lib":13,"./fixtures/julia/huge_negative.json":14,"./fixtures/julia/huge_positive.json":15,"./fixtures/julia/large_negative.json":16,"./fixtures/julia/large_positive.json":17,"./fixtures/julia/medium_negative.json":18,"./fixtures/julia/medium_positive.json":19,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":56,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63,"tape":121}],21:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],22:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":21}],23:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":24}],24:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;


// VARIABLES //

var C13 = [
	4.16666666666666019037e-02,  // 0x3FA55555, 0x5555554C
	-1.38888888888741095749e-03, // 0xBF56C16C, 0x16C15177
	2.48015872894767294178e-05   // 0x3EFA01A0, 0x19CB1590
];
var C46 = [
	-2.75573143513906633035e-07, // 0xBE927E4F, 0x809C52AD
	2.08757232129817482790e-09,  // 0x3E21EE9E, 0xBDB4B1C4
	-1.13596475577881948265e-11  // 0xBDA8FAE9, 0xBE8838D4
];


// FUNCTIONS //

// Create polynomial functions based on above coefficients...
var polyval13 = evalpoly( C13 );
var polyval46 = evalpoly( C46 );


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
*
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
*
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{"@stdlib/math/base/tools/evalpoly":39}],25:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number on `[-π/4, π/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":26}],26:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
*
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
*
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0.0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],27:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":28}],28:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":41,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-normalize":51,"@stdlib/math/base/utils/float64-to-words":53,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-max-base2-exponent":60,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":59,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":61,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],29:[function(require,module,exports){
'use strict';

/**
* Compute `x - nπ/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":31}],30:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/π` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
*
* ``` tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	for ( i = 0; j > 0; i++ ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
		j -= 1;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
*
* ## Method
*
* * The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	for ( i = 0; i <= m; i++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
		j += 1;
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
} // end FUNCTION kernelRempio2()


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":22,"@stdlib/math/base/special/ldexp":27}],31:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - nπ/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
*
*
* @param {number} x - input value
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*
* @example
* var y = new Array( 2 );
* var n = rempio2( 128.0, y );
* // returns 81
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0
*
* var y1 = y[ 0 ];
* // returns NaN
*
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= π/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5π/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= π/2 or π
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3π/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9π/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7π/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3π/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4π/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*π/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION rempio2()


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":30,"./rempio2_medium.js":32,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-get-low-word":49}],32:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/π:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of π/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = π/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of π/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of π/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - nπ/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {(Array|TypedArray|Object)} y - remainder elements
* @returns {integer} factor of `π/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION rempio2Medium()


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":33,"@stdlib/math/base/utils/float64-get-high-word":47}],33:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":34}],34:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],35:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number.
*
* @module @stdlib/math/base/special/sin
*
* @example
* var sin = require( '@stdlib/math/base/special/sin' );
*
* var v = sin( 0.0 );
* // returns ~0.0
*
* v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* v = sin( NaN );
* // returns NaN
*/

// MODULES //

var sin = require( './sin.js' );


// EXPORTS //

module.exports = sin;

},{"./sin.js":36}],36:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// VARIABLES //

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
var SMALL_HIGH_WORD = 0x3e500000;

// Array for storing remainder elements: (note that, in c, this is not thread safe)
var Y = [ 0.0, 0.0 ];


// MAIN //

/**
* Computes the sine of a number.
*
* ## Method
*
* * Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\([-\pi/4, +\pi/4]\\).
*
* * Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\([-\pi/4, +\pi/4]\\), and let \\(n = k \mod 4\\).
*
* * We have
*
*   | n   |  sin(x)  |  cos(x)  |  tan(x)  |
*   |:---:|:--------:|:--------:|:--------:|
*   |  0  |     S    |     C    |    T     |
*   |  1  |     C    |    -S    |   -1/T   |
*   |  2  |    -S    |    -C    |    T     |
*   |  3  |    -C    |     S    |   -1/T   |
*
*
* @param {number} x - input value (in radians)
* @returns {number} sine
*
* @example
* var v = sin( 0.0 );
* // returns ~0.0
*
* @example
* var v = sin( Math.PI/2.0 );
* // returns ~1.0
*
* @example
* var v = sin( -Math.PI/6.0 );
* // returns ~-0.5
*
* @example
* var v = sin( NaN );
* // returns NaN
*/
function sin( x ) {
	var ix;
	var n;

	ix = getHighWord( x );
	ix &= ABS_MASK;

	// Case: |x| ~< π/4
	if ( ix <= PIO4_HIGH_WORD ) {
		// Case: |x| ~< 2^-26
		if ( ix < SMALL_HIGH_WORD ) {
			return x;
		}
		return kernelSin( x, 0.0 );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		return NaN;
	}
	// Argument reduction...
	n = rempio2( x, Y );
	switch ( n & 3 ) {
	case 0:
		return kernelSin( Y[ 0 ], Y[ 1 ] );
	case 1:
		return kernelCos( Y[ 0 ], Y[ 1 ] );
	case 2:
		return -kernelSin( Y[ 0 ], Y[ 1 ] );
	default:
		return -kernelCos( Y[ 0 ], Y[ 1 ] );
	}
} // end FUNCTION sin()


// EXPORTS //

module.exports = sin;

},{"@stdlib/math/base/special/kernel-cos":23,"@stdlib/math/base/special/kernel-sin":25,"@stdlib/math/base/special/rempio2":29,"@stdlib/math/base/utils/float64-get-high-word":47}],37:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],38:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":37}],39:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":37,"./factory.js":38,"@stdlib/utils/define-read-only-property":66}],40:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-high-word-exponent-mask":58}],41:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":40}],42:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":44}],43:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":42}],44:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],45:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":46}],46:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],47:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":45}],48:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":50}],49:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":48}],50:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":2}],51:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":52}],52:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":64}],53:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":55}],54:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":44}],55:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":54}],56:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],57:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],58:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],59:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],60:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],61:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],62:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],63:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],64:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],65:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],66:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":65}],67:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],68:[function(require,module,exports){

},{}],69:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"dup":68}],70:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],71:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":67,"ieee754":90}],72:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":92}],73:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":74,"./lib/keys.js":75}],74:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],75:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],76:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":86,"object-keys":95}],77:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],78:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":79,"./helpers/isNaN":80,"./helpers/mod":81,"./helpers/sign":82,"es-to-primitive/es5":83,"has":89,"is-callable":93}],79:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],80:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],81:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],82:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],83:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":84,"is-callable":93}],84:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],85:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],86:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],87:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],88:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":87}],89:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":88}],90:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],91:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],92:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],93:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],94:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],95:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":96}],96:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],97:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":70}],98:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":70}],99:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":100}],100:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":102,"./_stream_writable":104,"core-util-is":72,"inherits":91,"process-nextick-args":98}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":103,"core-util-is":72,"inherits":91}],102:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/BufferList":105,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"events":85,"inherits":91,"isarray":108,"process-nextick-args":98,"safe-buffer":115,"string_decoder/":109,"util":68}],103:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":100,"core-util-is":72,"inherits":91}],104:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"inherits":91,"process-nextick-args":98,"safe-buffer":115,"util-deprecate":127}],105:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":115}],106:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":98}],107:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":85}],108:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],109:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":115}],110:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":111}],111:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":100,"./lib/_stream_passthrough.js":101,"./lib/_stream_readable.js":102,"./lib/_stream_transform.js":103,"./lib/_stream_writable.js":104}],112:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":111}],113:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":104}],114:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":70,"through":126}],115:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":71}],116:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":85,"inherits":91,"readable-stream/duplex.js":99,"readable-stream/passthrough.js":110,"readable-stream/readable.js":111,"readable-stream/transform.js":112,"readable-stream/writable.js":113}],117:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":78,"function-bind":88}],118:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":117,"./polyfill":119,"./shim":120,"define-properties":76,"function-bind":88}],119:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":117}],120:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":119,"define-properties":76}],121:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":122,"./lib/results":124,"./lib/test":125,"_process":70,"defined":77,"through":126}],122:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":70,"fs":69,"through":126}],123:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":70}],124:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":70,"events":85,"function-bind":88,"has":89,"inherits":91,"object-inspect":94,"resumer":114,"through":126}],125:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":123,"deep-equal":73,"defined":77,"events":85,"has":89,"inherits":91,"path":97,"string.prototype.trim":118}],126:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":70,"stream":116}],127:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[20]);
