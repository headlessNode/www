// modules are defined as an array
// [ module function, map of requireuires ]
//
// map of requireuires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the requireuire for previous bundles

(function outer (modules, cache, entry) {
    // Save the require from previous bundle to this closure if any
    var previousRequire = typeof require == "function" && require;

    function findProxyquireifyName() {
        var deps = Object.keys(modules)
            .map(function (k) { return modules[k][1]; });

        for (var i = 0; i < deps.length; i++) {
            var pq = deps[i]['proxyquireify'];
            if (pq) return pq;
        }
    }

    var proxyquireifyName = findProxyquireifyName();

    function newRequire(name, jumped){
        // Find the proxyquireify module, if present
        var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];

        // Proxyquireify provides a separate cache that is used when inside
        // a proxyquire call, and is set to null outside a proxyquire call.
        // This allows the regular caching semantics to work correctly both
        // inside and outside proxyquire calls while keeping the cached
        // modules isolated.
        // When switching from one proxyquire call to another, it clears
        // the cache to prevent contamination between different sets
        // of stubs.
        var currentCache = (pqify && pqify.exports._cache) || cache;

        if(!currentCache[name]) {
            if(!modules[name]) {
                // if we cannot find the the module within our internal map or
                // cache jump to the current global require ie. the last bundle
                // that was added to the page.
                var currentRequire = typeof require == "function" && require;
                if (!jumped && currentRequire) return currentRequire(name, true);

                // If there are other bundles on this page the require from the
                // previous one is saved to 'previousRequire'. Repeat this as
                // many times as there are bundles until the module is found or
                // we exhaust the require chain.
                if (previousRequire) return previousRequire(name, true);
                var err = new Error('Cannot find module \'' + name + '\'');
                err.code = 'MODULE_NOT_FOUND';
                throw err;
            }
            var m = currentCache[name] = {exports:{}};

            // The normal browserify require function
            var req = function(x){
                var id = modules[name][1][x];
                return newRequire(id ? id : x);
            };

            // The require function substituted for proxyquireify
            var moduleRequire = function(x){
                var pqify = (proxyquireifyName != null) && cache[proxyquireifyName];
                // Only try to use the proxyquireify version if it has been `require`d
                if (pqify && pqify.exports._proxy) {
                    return pqify.exports._proxy(req, x);
                } else {
                    return req(x);
                }
            };

            modules[name][0].call(m.exports,moduleRequire,m,m.exports,outer,modules,currentCache,entry);
        }
        return currentCache[name].exports;
    }
    for(var i=0;i<entry.length;i++) newRequire(entry[i]);

    // Override the current require with this new one
    return newRequire;
})
({1:[function(require,module,exports){
'use strict';

var ctors = {
	'uint16': Uint16Array,
	'uint8': Uint8Array
};


// EXPORTS //

module.exports = ctors;

},{}],2:[function(require,module,exports){
'use strict';

/**
* Returns a boolean indicating if an environment is little endian.
*
* @module @stdlib/assert/is-little-endian
*
* @example
* var IS_LITTLE_ENDIAN = require( '@stdlib/assert/is-little-endian' );
*
* var bool = IS_LITTLE_ENDIAN;
* // returns <boolean>
*/

// MODULES //

var IS_LITTLE_ENDIAN = require( './is_little_endian.js' );


// EXPORTS //

module.exports = IS_LITTLE_ENDIAN;

},{"./is_little_endian.js":3}],3:[function(require,module,exports){
'use strict';

// MODULES //

var ctors = require( './ctors.js' );


// MAIN //

/**
* Returns a boolean indicating if an environment is little endian.
*
* @returns {boolean} boolean indicating if an environment is little endian
*
* @example
* var bool = isLittleEndian();
* // returns <boolean>
*/
function isLittleEndian() {
	var uint16view;
	var uint8view;

	uint16view = new ctors[ 'uint16' ]( 1 );

	// Set the uint16 view to a value having distinguishable lower and higher order words.
	// 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
	uint16view[ 0 ] = 0x1234;

	// Create a uint8 view on top of the uint16 buffer:
	uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

	// If little endian, the least significant byte will be first...
	return ( uint8view[ 0 ] === 0x34 );
} // end FUNCTION isLittleEndian()


// EXPORTS //

module.exports = isLittleEndian();

},{"./ctors.js":1}],4:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is infinite.
*
* @module @stdlib/assert/is-infinite
*
* @example
* var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
*
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* bool = isInfinite( 5.0 );
* // returns false
*
* bool = isInfinite( NaN );
* // returns false
*/

// MODULES //

var isInfinite = require( './is_infinite.js' );


// EXPORTS //

module.exports = isInfinite;

},{"./is_infinite.js":5}],5:[function(require,module,exports){
'use strict';

// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );


// MAIN //

/**
* Tests if a numeric value is infinite.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is infinite
*
* @example
* var bool = isInfinite( Number.POSITIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( Number.NEGATIVE_INFINITY );
* // returns true
*
* @example
* var bool = isInfinite( 5.0 );
* // returns false
*
* @example
* var bool = isInfinite( NaN );
* // returns false
*/
function isInfinite( x ) {
	return (x === PINF || x === NINF);
} // end FUNCTION isInfinite()


// EXPORTS //

module.exports = isInfinite;

},{"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],6:[function(require,module,exports){
'use strict';

/**
* Test if a numeric value is `NaN`.
*
* @module @stdlib/math/base/assert/is-nan
*
* @example
* var isnan = require( '@stdlib/math/base/assert/is-nan' );
*
* var bool = isnan( NaN );
* // returns true
*
* bool = isnan( 7.0 );
* // returns false
*/

// MODULES //

var isnan = require( './is_nan.js' );


// EXPORTS //

module.exports = isnan;

},{"./is_nan.js":7}],7:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Tests if a numeric value is `NaN`.
*
* @param {number} x - value to test
* @returns {boolean} boolean indicating whether the value is `NaN`
*
* @example
* var bool = isnan( NaN );
* // returns true
*
* @example
* var bool = isnan( 7.0 );
* // returns false
*/
function isnan( x ) {
	return (x !== x);
} // end FUNCTION isnan()


// EXPORTS //

module.exports = isnan;

},{}],8:[function(require,module,exports){
'use strict';

/**
* Computes the absolute value of `x`.
*
* @param {number} x - input value
* @returns {number} absolute value
*
* @example
* var v = abs( -1.0 );
* // returns 1.0
*
* @example
* var v = abs( 2.0 );
* // returns 2.0
*
* @example
* var v = abs( 0.0 );
* // returns 0.0
*
* @example
* var v = abs( -0.0 );
* // returns 0.0
*
* @example
* var v = abs( NaN );
* // returns NaN
*/
function abs( x ) {
	if ( x < 0.0 ) {
		return -x;
	}
	if ( x === 0.0 ) {
		return 0.0; // handle negative zero
	}
	return x;
} // end FUNCTION abs()


// EXPORTS //

module.exports = abs;

},{}],9:[function(require,module,exports){
'use strict';

/**
* Compute an absolute value.
*
* @module @stdlib/math/base/special/abs
*
* @example
* var abs = require( '@stdlib/math/base/special/abs' );
*
* var v = abs( -1.0 );
* // returns 1.0
*
* v = abs( 2.0 );
* // returns 2.0
*
* v = abs( 0.0 );
* // returns 0.0
*
* v = abs( -0.0 );
* // returns 0.0
*
* v = abs( NaN );
* // returns NaN
*/

// MODULES //

var abs = require( './abs.js' );


// EXPORTS //

module.exports = abs;

},{"./abs.js":8}],10:[function(require,module,exports){
'use strict';

// MODULES //

var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 10000000000000000000000000000000 => 2147483648 => 0x80000000
var SIGN_MASK = 0x80000000;

// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
var MAGNITUDE_MASK = 0x7fffffff;


// MAIN //

/**
* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @param {number} x - number from which to derive a magnitude
* @param {number} y - number from which to derive a sign
* @returns {number} a double-precision floating-point number
*
* @example
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* @example
* var z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* @example
* var z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* @example
* var z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* @example
* var z = copysign( -0.0, 1.0 );
* // returns 0.0
*/
function copysign( x, y ) {
	var hx;
	var hy;

	// Split `x` into higher and lower order words:
	x = toWords( x );
	hx = x[ 0 ];

	// Turn off the sign bit of `x`:
	hx &= MAGNITUDE_MASK;

	// Extract the higher order word from `y`:
	hy = getHighWord( y );

	// Leave only the sign bit of `y` turned on:
	hy &= SIGN_MASK;

	// Copy the sign bit of `y` to `x`:
	hx |= hy;

	// Return a new value having the same magnitude as `x`, but with the sign of `y`:
	return fromWords( hx, x[ 1 ] );
} // end FUNCTION copysign()


// EXPORTS //

module.exports = copysign;

},{"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-to-words":53}],11:[function(require,module,exports){
'use strict';

/**
* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
*
* @module @stdlib/math/base/special/copysign
*
* @example
* var copysign = require( '@stdlib/math/base/special/copysign' );
*
* var z = copysign( -3.14, 10.0 );
* // returns 3.14
*
* z = copysign( 3.14, -1.0 );
* // returns -3.14
*
* z = copysign( 1.0, -0.0 );
* // returns -1.0
*
* z = copysign( -3.14, -0.0 );
* // returns -3.14
*
* z = copysign( -0.0, 1.0 );
* // returns 0.0
*/

// MODULES //

var copysign = require( './copysign.js' );


// EXPORTS //

module.exports = copysign;

},{"./copysign.js":10}],12:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c?view=log}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );


// MAIN //

/**
* Computes the cosine of a number.
*
* @param {number} x - input value (in radians)
* @returns {number} cosine
*
* @example
* var v = cos( 0.0 );
* // returns 1.0
*
* @example
* var v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* @example
* var v = cos( -Math.PI/6.0 );
* // returns ~0.866
*
* @example
* var v = cos( NaN );
* // returns NaN
*/
function cos( x ) {
	var ix;
	var n;
	var y;
	var z;

	y = new Array( 2 );
	z = 0.0;
	ix = getHighWord( x );

	// Case: |x| ~< pi/4
	ix &= 0x7fffffff;
	if ( ix <= 0x3fe921fb ) {
		// Case: x < 2**-27
		if ( ix<0x3e400000 ) {
			if ( (x|0) === 0 ) {
				// Generate inexact...
				return 1.0;
			}
		}
		return kernelCos( x, z );
	}
	// Case: cos(Inf or NaN) is NaN */
	else if ( ix >= 0x7ff00000 ) {
		return NaN;
	}
	// Case: Argument reduction needed...
	n = rempio2( x, y );
	switch ( n & 3 ) {
	case 0:
		return kernelCos( y[0], y[1] );
	case 1:
		return -kernelSin( y[0], y[1] );
	case 2:
		return -kernelCos( y[0], y[1] );
	default:
		return kernelSin( y[0], y[1] );
	}
} // end FUNCTION cos()


// EXPORTS //

module.exports = cos;

},{"@stdlib/math/base/special/kernel-cos":16,"@stdlib/math/base/special/kernel-sin":18,"@stdlib/math/base/special/rempio2":22,"@stdlib/math/base/utils/float64-get-high-word":47}],13:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number.
*
* @module @stdlib/math/base/special/cos
*
* @example
* var cos = require( '@stdlib/math/base/special/cos' );
*
* var v = cos( 0.0 );
* // returns 1.0
*
* v = cos( Math.PI/4.0 );
* // returns ~0.707
*
* v = cos( -Math.PI/6.0 );
* // returns ~0.866
*/

// MODULES //

var cos = require( './cos.js' );


// EXPORTS //

module.exports = cos;

},{"./cos.js":12}],14:[function(require,module,exports){
'use strict';

// TODO: implementation (?)

/**
* Rounds a numeric value toward negative infinity.
*
* @param {number} x - input value
* @returns {number} rounded value
*
* @example
* var v = floor( -4.2 );
* // returns -5.0
*
* @example
* var v = floor( 9.99999 );
* // returns 9.0
*
* @example
* var v = floor( 0.0 );
* // returns 0.0
*
* @example
* var v = floor( NaN );
* // returns NaN
*/
var floor = Math.floor;


// EXPORTS //

module.exports = floor;

},{}],15:[function(require,module,exports){
'use strict';

/**
* Round a numeric value toward negative infinity.
*
* @module @stdlib/math/base/special/floor
*
* @example
* var floor = require( '@stdlib/math/base/special/floor' );
*
* var v = floor( -4.2 );
* // returns -5.0
*
* v = floor( 9.99999 );
* // returns 9.0
*
* v = floor( 0.0 );
* // returns 0.0
*
* v = floor( NaN );
* // returns NaN
*/

// MODULES //

var floor = require( './floor.js' );


// EXPORTS //

module.exports = floor;

},{"./floor.js":14}],16:[function(require,module,exports){
'use strict';

/**
* Compute the cosine of a number on `[-pi/4, pi/4]`.
*
* @module @stdlib/math/base/special/kernel-cos
*
* @example
* var kernelCos = require( '@stdlib/math/base/special/kernel-cos' );
*
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* v = kernelCos( NaN, 0.0 );
* // returns NaN
*/

// MODULES //

var kernelCos = require( './kernel_cos.js' );


// EXPORTS //

module.exports = kernelCos;

},{"./kernel_cos.js":17}],17:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var evalpoly = require( '@stdlib/math/base/tools/evalpoly' ).factory;


// VARIABLES //

var C13 = [
	4.16666666666666019037e-02,  // 0x3FA55555, 0x5555554C
	-1.38888888888741095749e-03, // 0xBF56C16C, 0x16C15177
	2.48015872894767294178e-05  // 0x3EFA01A0, 0x19CB1590
];
var C46 = [
	-2.75573143513906633035e-07, // 0xBE927E4F, 0x809C52AD
	2.08757232129817482790e-09, // 0x3E21EE9E, 0xBDB4B1C4
	-1.13596475577881948265e-11 // 0xBDA8FAE9, 0xBE8838D4
];


// FUNCTIONS //

// Create polynomial functions based on above coefficients...
var polyval13 = evalpoly( C13 );
var polyval46 = evalpoly( C46 );


// MAIN //

/**
* Computes the cosine on \\( [-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
*
* ## Method
*
* * Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
* * If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
* * \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( [0,\pi/4] \\).
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
*   ```
*
*   where the Remez error is
*
*   ``` tex
*   \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
*   ```
*
* * Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
*
*   ``` tex
*   \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
*   ```
*
*   Since
*
*   ``` tex
*   \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
*   ```

*   a correction term is necessary in \\( \cos(x) \\). Hence,
*
*   ``` tex
*   \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
*   ```
*
*   For better accuracy, rearrange to
*
*   ``` tex
*   \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
*   ```
*
*   where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
*
*
* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
* @param {number} y - tail of `x`
* @returns {number} cosine
*
* @example
* var v = kernelCos( 0.0, 0.0 );
* // returns ~1.0
*
* @example
* var v = kernelCos( Math.PI/6.0, 0.0 );
* // returns ~0.866
*
* @example
* var v = kernelCos( 0.785, -1.144e-17 );
* // returns ~0.707
*
* @example
* var v = kernelCos( NaN, 0.0 );
* // returns NaN
*/
function kernelCos( x, y ) {
	var hz;
	var r;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = z * polyval13( z );
	r += w * w * polyval46( z );
	hz = 0.5 * z;
	w = 1.0 - hz;
	return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
} // end FUNCTION kernelCos()


// EXPORTS //

module.exports = kernelCos;

},{"@stdlib/math/base/tools/evalpoly":39}],18:[function(require,module,exports){
'use strict';

/**
* Compute the sine of a number on `[-pi/4, pi/4]`.
*
* @module @stdlib/math/base/special/kernel-sin
*
* @example
* var kernelSin = require( '@stdlib/math/base/special/kernel-sin' );
*
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* v = kernelSin( 3.0, NaN );
* // returns NaN
*
* v = kernelSin( NaN, NaN );
* // returns NaN
*/

// MODULES //

var kernelSin = require( './kernel_sin.js' );


// EXPORTS //

module.exports = kernelSin;

},{"./kernel_sin.js":19}],19:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// VARIABLES //

var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


// MAIN //

/**
* Computes the sine on \\( \approx [-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
*
* ## Method
*
* * Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
* * Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
* * \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left[0,\tfrac{pi}{4}\right] \\)
*
*   ``` tex
*   \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
*   ```
*
*   where
*
*   ``` tex
*   \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
*   ```
*
* * We have
*
*   ``` tex
*   \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
*   ```
*
*   For better accuracy, let
*
*   ``` tex
*   r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
*   ```
*
*   then
*
*   ``` tex
*   \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
*   ```
*
*
* @param {number} x - input value (assumed to be bounded by `~pi/4` in magnitude)
* @param {number} y - tail of `x`
* @returns {number} sine (in radians)
*
* @example
* var v = kernelSin( 0.0, 0.0 );
* // returns ~0.0
*
* @example
* var v = kernelSin( Math.PI/6.0, 0.0 );
* // returns ~0.5
*
* @example
* var v = kernelSin( 0.619, 9.279e-18 );
* // returns ~0.581
*
* @example
* var v = kernelSin( NaN, 0.0 );
* // returns NaN
*
* @example
* var v = kernelSin( 3.0, NaN );
* // returns NaN
*
* @example
* var v = kernelSin( NaN, NaN );
* // returns NaN
*/
function kernelSin( x, y ) {
	var r;
	var v;
	var w;
	var z;

	z = x * x;
	w = z * z;
	r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
	v = z * x;
	if ( y === 0 ) {
		return x + (v * (S1 + (z*r)));
	}
	return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
} // end FUNCTION kernelSin()


// EXPORTS //

module.exports = kernelSin;

},{}],20:[function(require,module,exports){
'use strict';

/**
* Multiply a double-precision floating-point number by an integer power of two.
*
* @module @stdlib/math/base/special/ldexp
*
* @example
* var ldexp = require( '@stdlib/math/base/special/ldexp' );
*
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* x = ldexp( 0.0, 20 );
* // returns 0.0
*
* x = ldexp( -0.0, 39 );
* // returns -0.0
*
* x = ldexp( NaN, -101 );
* // returns NaN
*
* x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var ldexp = require( './ldexp.js' );


// EXPORTS //

module.exports = ldexp;

},{"./ldexp.js":21}],21:[function(require,module,exports){
'use strict';

// NOTES //

/*
* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
*/


// MODULES //

var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
var MAX_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var copysign = require( '@stdlib/math/base/special/copysign' );
var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
var floatExp = require( '@stdlib/math/base/utils/float64-exponent' );
var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );


// VARIABLES //

// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
var TWO52_INV = 2.220446049250313e-16;

// Exponent all 0s: 1 00000000000 11111111111111111111
var CLEAR_EXP_MASK = 0x800fffff; // 2148532223


// MAIN //

/**
* Multiplies a double-precision floating-point number by an integer power of two.
*
* @param {number} frac - fraction
* @param {integer} exp - exponent
* @returns {number} double-precision floating-point number
*
* @example
* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
* // returns 4.0
*
* @example
* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
* // returns 1.0
*
* @example
* var x = ldexp( 0.0, 20 );
* // returns 0.0
*
* @example
* var x = ldexp( -0.0, 39 );
* // returns -0.0
*
* @example
* var x = ldexp( NaN, -101 );
* // returns NaN
*
* @example
* var x = ldexp( Number.POSITIVE_INFINITY, 11 );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var x = ldexp( Number.NEGATIVE_INFINITY, -118 );
* // returns Number.NEGATIVE_INFINITY
*/
function ldexp( frac, exp ) {
	var high;
	var tmp;
	var w;
	var m;
	if (
		frac === 0.0 || // handles +-0
		isnan( frac ) ||
		isInfinite( frac )
	) {
		return frac;
	}
	// Normalize the input fraction:
	tmp = normalize( frac );
	frac = tmp[ 0 ];
	exp += tmp[ 1 ];

	// Extract the exponent from `frac` and add it to `exp`:
	exp += floatExp( frac );

	// Check for underflow/overflow...
	if ( exp < MIN_SUBNORMAL_EXPONENT ) {
		return copysign( 0.0, frac );
	}
	if ( exp > MAX_EXPONENT ) {
		if ( frac < 0.0 ) {
			return NINF;
		}
		return PINF;
	}
	// Check for a subnormal and scale accordingly to retain precision...
	if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
		exp += 52;
		m = TWO52_INV;
	} else {
		m = 1.0;
	}
	// Split the fraction into higher and lower order words:
	w = toWords( frac );
	high = w[ 0 ];

	// Clear the exponent bits within the higher order word:
	high &= CLEAR_EXP_MASK;

	// Set the exponent bits to the new exponent:
	high |= ((exp+BIAS) << 20);

	// Create a new floating-point number:
	return m * fromWords( high, w[ 1 ] );
} // end FUNCTION ldexp()


// EXPORTS //

module.exports = ldexp;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/copysign":11,"@stdlib/math/base/utils/float64-exponent":41,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-normalize":51,"@stdlib/math/base/utils/float64-to-words":53,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-max-base2-exponent":60,"@stdlib/math/constants/float64-max-base2-exponent-subnormal":59,"@stdlib/math/constants/float64-min-base2-exponent-subnormal":61,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63}],22:[function(require,module,exports){
'use strict';

/**
* Compute `x - n*pi/2 = r`.
*
* @module @stdlib/math/base/special/rempio2
*
* @example
* var rempio2 = require( '@stdlib/math/base/special/rempio2' );
*
* var x = 128.0;
* var y = new Array( 2 );
* var n = rempio2( x, y );
* // returns 81.0
*
* var y1 = y[ 0 ];
* // returns ~0.765
*
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*/

// MODULES //

var rempio2 = require( './rempio2.js' );


// EXPORTS //

module.exports = rempio2;

},{"./rempio2.js":24}],23:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var floor = require( '@stdlib/math/base/special/floor' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );


// VARIABLES //

/*
* Table of constants for `2/pi` (`396` hex digits, `476` decimal).
*
* Integer array which contains the (24*i)-th to (24*i+23)-th bit of `2/pi` after binary point. The corresponding floating value is
*
* ``` tex
* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
* ```
*
* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (e0 <= 16360, jk = 6), this is `686`.
*/
var IPIO2 = [
	0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
	0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
	0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
	0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
	0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
	0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
	0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
	0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
	0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
	0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
	0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
];

// Double precision array, obtained by cutting `pi/2` into `24` bits chunks...
var PIO2 = [
	1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
	7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
	5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
	3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
	1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
	1.22933308981111328932e-36, // 0x387A2520, 0x40000000
	2.73370053816464559624e-44, // 0x36E38222, 0x80000000
	2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
];
var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

// Arrays for storing temporary values (note that, in C, this is not thread safe):
var F = zero( new Array( 20 ) );
var Q = zero( new Array( 20 ) );
var FQ = zero( new Array( 20 ) );
var IQ = zero( new Array( 20 ) );


// FUNCTIONS //

/**
* Zeros an array.
*
* @private
* @param {Array<number>} arr - array to zero
* @returns {Array<number>} input array
*/
function zero( arr ) {
	var len = arr.length;
	var i;
	for ( i = 0; i < len; i++ ) {
		arr[ i ] = 0.0;
	}
	return arr;
} // end FUNCTION zero()

/**
* Performs the computation for `kernelRempio2()`.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Collection} y - output result in an array of double precision numbers
* @param {integer} jz - number of terms of `ipio2[]` used
* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/pi`
* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
* @param {integer} jx - `nx - 1`
* @param {Array<number>} f - `IPIO2[]` in floating point
* @returns {number} last three binary digits of `N`
*/
function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
	var carry;
	var fw;
	var ih;
	var jp;
	var i;
	var k;
	var n;
	var j;
	var z;

	// `jp+1` is the number of terms in `PIO2[]` needed:
	jp = jk;

	// Distill `q[]` into `IQ[]` in reverse order...
	z = q[ jz ];
	j = jz;
	// eslint-disable-next-line no-plusplus
	for ( i = 0; j > 0; i++, j-- ) {
		fw = ( TWON24 * z )|0;
		IQ[ i ] = ( z - (TWO24*fw) )|0;
		z = q[ j-1 ] + fw;
	}
	// Compute `n`...
	z = ldexp( z, q0 );
	z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
	n = z|0;
	z -= n;
	ih = 0;
	if ( q0 > 0 ) {
		// Need `IQ[jz-1]` to determine `n`...
		i = ( IQ[ jz-1 ] >> (24-q0) );
		n += i;
		IQ[ jz-1 ] -= ( i << (24-q0) );
		ih = ( IQ[ jz-1 ] >> (23-q0) );
	}
	else if ( q0 === 0 ) {
		ih = ( IQ[ jz-1 ] >> 23 );
	}
	else if ( z >= 0.5 ) {
		ih = 2;
	}
	// Case: q > 0.5
	if ( ih > 0 ) {
		n += 1;
		carry = 0;

		// Compute `1-q`:
		for ( i = 0; i < jz; i++ ) {
			j = IQ[ i ];
			if ( carry === 0 ) {
				if ( j !== 0 ) {
					carry = 1;
					IQ[ i ] = 0x1000000 - j;
				}
			} else {
				IQ[ i ] = 0xffffff - j;
			}
		}
		if ( q0 > 0 ) {
			// Rare case: chance is 1 in 12...
			switch ( q0 ) { // eslint-disable-line default-case
			case 1:
				IQ[ jz-1 ] &= 0x7fffff;
				break;
			case 2:
				IQ[ jz-1 ] &= 0x3fffff;
				break;
			}
		}
		if ( ih === 2 ) {
			z = 1.0 - z;
			if ( carry !== 0 ) {
				z -= ldexp( 1.0, q0 );
			}
		}
	}
	// Check if re-computation is needed...
	if ( z === 0.0 ) {
		j = 0;
		for ( i = jz-1; i >= jk; i-- ) {
			j |= IQ[ i ];
		}
		if ( j === 0 ) {
			// Need re-computation...
			for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
				// `k` is the number of terms needed...
			}
			for ( i = jz+1; i <= jz+k; i++ ) {
				// Add `q[jz+1]` to `q[jz+k]`...
				f[ jx+i ] = IPIO2[ jv+i ];
				fw = 0.0;
				for ( j = 0; j <= jx; j++ ) {
					fw += x[ j ] * f[ jx + (i-j) ];
				}
				q[ i ] = fw;
			}
			jz += k;
			return compute( x, y, jz, q, q0, jk, jv, jx, f );
		}
	}
	// Chop off zero terms...
	if ( z === 0.0 ) {
		jz -= 1;
		q0 -= 24;
		while ( IQ[ jz ] === 0 ) {
			jz -= 1;
			q0 -= 24;
		}
	} else {
		// Break `z` into 24-bit if necessary...
		z = ldexp( z, -q0 );
		if ( z >= TWO24 ) {
			fw = (TWON24*z)|0;
			IQ[ jz ] = ( z - (TWO24*fw) )|0;
			jz += 1;
			q0 += 24;
			IQ[ jz ] = fw;
		} else {
			IQ[ jz ] = z|0;
		}
	}
	// Convert integer "bit" chunk to floating-point value...
	fw = ldexp( 1.0, q0 );
	for ( i = jz; i >= 0; i-- ) {
		q[ i ] = fw * IQ[i];
		fw *= TWON24;
	}
	// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
	for ( i = jz; i >= 0; i-- ) {
		fw = 0.0;
		for ( k = 0; k <= jp && k <= jz-i; k++ ) {
			fw += PIO2[ k ] * q[ i+k ];
		}
		FQ[ jz-i ] = fw;
	}
	// Compress `FQ[]` into `y[]`...
	fw = 0.0;
	for ( i = jz; i >= 0; i-- ) {
		fw += FQ[ i ];
	}
	if ( ih === 0 ) {
		y[ 0 ] = fw;
	} else {
		y[ 0 ] = -fw;
	}
	fw = FQ[ 0 ] - fw;
	for ( i = 1; i <= jz; i++ ) {
		fw += FQ[i];
	}
	if ( ih === 0 ) {
		y[ 1 ] = fw;
	} else {
		y[ 1 ] = -fw;
	}
	return ( n & 7 );
} // end FUNCTION compute()


// MAIN //

/**
* Returns the last three binary digits of `N` with `y = x - N*pi/2` so that `|y| < pi/2`.
*
* ## Method
*
* * The method is to compute the integer (mod 8) and fraction parts of `(2/pi)*x` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals 0 mod 8 ). Thus, the number of operations is independent of the exponent of the input.
*
* @private
* @param {PositiveNumber} x - input value
* @param {Collection} y - output result in an array of double precision numbers
* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
* @param {PositiveInteger} nx - dimension of `x[]`
* @returns {number} last three binary digits of `N`
*/
function kernelRempio2( x, y, e0, nx ) {
	var fw;
	var jk;
	var jv;
	var jx;
	var jz;
	var q0;
	var i;
	var j;
	var m;

	// Initialize `jk` for double-precision floating-point numbers:
	jk = 4;

	// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
	jx = nx - 1;
	jv = ( (e0 - 3) / 24 )|0;
	if ( jv < 0 ) {
		jv = 0;
	}
	q0 = e0 - (24 * (jv + 1));

	// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
	j = jv - jx;
	m = jx + jk;
	// eslint-disable-next-line no-plusplus
	for ( i = 0; i <= m; i++, j++ ) {
		if ( j < 0 ) {
			F[ i ] = 0.0;
		} else {
			F[ i ] = IPIO2[ j ];
		}
	}
	// Compute `Q[0],Q[1],...,Q[jk]`:
	for ( i = 0; i <= jk; i++ ) {
		fw = 0.0;
		for ( j = 0; j <= jx; j++ ) {
			fw += x[ j ] * F[ jx + (i-j) ];
		}
		Q[ i ] = fw;
	}
	jz = jk;
	return compute( x, y, jz, Q, q0, jk, jv, jx, F );
} // end FUNCTION kernelRempio2()


// EXPORTS //

module.exports = kernelRempio2;

},{"@stdlib/math/base/special/floor":15,"@stdlib/math/base/special/ldexp":20}],24:[function(require,module,exports){
'use strict';

/*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*
* Optimized by Bruce D. Evans.
*/

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
var rempio2Kernel = require( './kernel_rempio2.js' );
var rempio2Medium = require( './rempio2_medium.js' );


// VARIABLES //

var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

// 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
var TWO_PIO2_1T = 2.0 * PIO2_1T;
var THREE_PIO2_1T = 3.0 * PIO2_1T;
var FOUR_PIO2_1T = 4.0 * PIO2_1T;

// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
var ABS_MASK = 0x7fffffff;

// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
var EXPONENT_MASK = 0x7ff00000;

// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
var SIGNIFICAND_MASK = 0xfffff;

// High word significand for PI and PI/2: 0x921fb = 598523 => 00000000000010010010000111111011
var PI_HIGH_WORD_SIGNIFICAND = 0x921fb;

// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
var PIO4_HIGH_WORD = 0x3fe921fb;

// High word for 3*PI/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
var THREE_PIO4_HIGH_WORD = 0x4002d97c;

// High word for 5*PI/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
var FIVE_PIO4_HIGH_WORD = 0x400f6a7a;

// High word for 6*PI/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
var THREE_PIO2_HIGH_WORD = 0x4012d97c;

// High word for 7*PI/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc;

// High word for 8*PI/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
var TWO_PI_HIGH_WORD = 0x401921fb;

// High word for 9*PI/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
var NINE_PIO4_HIGH_WORD = 0x401c463b;

// 2^20*pi/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
var MEDIUM = 0x413921fb;

// Arrays for storing temporary values (note that, in C, this would not be thread-safe):
var TX = new Array( 3 );
var TY = new Array( 2 );


// MAIN //

/**
* Computes `x - n*pi/2 = r`.
*
* ## Notes
*
* * Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
* * The function does not perform input validation for `y` due to performance considerations. You should ensure to only supply an array, typed array, or an array-like object for `y`.
*
*
* @param {number} x - input value
* @param {Collection} y - remainder elements
* @returns {integer} factor of `pi/2`
*
* @example
* var x = 128.0;
* var y = new Array( 2 );
* var n = rempio2( x, y );
* // returns 81.0
*
* var y1 = y[ 0 ];
* // returns ~0.765
* var y2 = y[ 1 ];
* // returns ~3.618e-17
*
* @example
* var y = new Array( 2 );
* var n = rempio2( NaN, y );
* // returns 0.0
*
* var y1 = y[ 0 ];
* // returns NaN
* var y2 = y[ 1 ];
* // returns NaN
*/
function rempio2( x, y ) {
	var low;
	var e0;
	var hx;
	var ix;
	var nx;
	var i;
	var n;
	var z;

	hx = getHighWord( x );
	ix = hx & ABS_MASK;

	// Case: |x| ~<= pi/4 (no need for reduction)
	if ( ix <= PIO4_HIGH_WORD ) {
		y[ 0 ] = x;
		y[ 1 ] = 0.0;
		return 0;
	}
	// Case: |x| ~<= 5pi/4
	if ( ix <= FIVE_PIO4_HIGH_WORD ) {
		// Case: |x| ~= pi/2 or pi
		if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
			// Cancellation => use medium case
			return rempio2Medium( x, ix, y );
		}
		// Case: |x| ~<= 3pi/4
		if ( ix <= THREE_PIO4_HIGH_WORD ) {
			if ( x > 0.0 ) {
				z = x - PIO2_1;
				y[ 0 ] = z - PIO2_1T;
				y[ 1 ] = (z - y[0]) - PIO2_1T;
				return 1;
			}
			z = x + PIO2_1;
			y[ 0 ] = z + PIO2_1T;
			y[ 1 ] = (z - y[0]) + PIO2_1T;
			return -1;
		}
		if ( x > 0.0 ) {
			z = x - ( 2.0*PIO2_1 );
			y[ 0 ] = z - TWO_PIO2_1T;
			y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
			return 2;
		}
		z = x + ( 2.0*PIO2_1 );
		y[ 0 ] = z + TWO_PIO2_1T;
		y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
		return -2;
	}
	// Case: |x| ~<= 9pi/4
	if ( ix <= NINE_PIO4_HIGH_WORD ) {
		// Case: |x| ~<= 7pi/4
		if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
			// Case: |x| ~= 3pi/2
			if ( ix === THREE_PIO2_HIGH_WORD ) {
				return rempio2Medium( x, ix, y );
			}
			if ( x > 0.0 ) {
				z = x - ( 3.0*PIO2_1 );
				y[ 0 ] = z - THREE_PIO2_1T;
				y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
				return 3;
			}
			z = x + ( 3.0*PIO2_1 );
			y[ 0 ] = z + THREE_PIO2_1T;
			y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
			return -3;
		}
		// Case: |x| ~= 4pi/2
		if ( ix === TWO_PI_HIGH_WORD ) {
			return rempio2Medium( x, ix, y );
		}
		if ( x > 0.0 ) {
			z = x - ( 4.0*PIO2_1 );
			y[ 0 ] = z - FOUR_PIO2_1T;
			y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
			return 4;
		}
		z = x + ( 4.0*PIO2_1 );
		y[ 0 ] = z + FOUR_PIO2_1T;
		y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
		return -4;
	}
	// Case: |x| ~< 2^20*pi/2 (medium size)
	if ( ix < MEDIUM ) {
		return rempio2Medium( x, ix, y );
	}
	// Case: x is NaN or infinity
	if ( ix >= EXPONENT_MASK ) {
		y[ 0 ] = NaN;
		y[ 1 ] = NaN;
		return 0.0;
	}
	// Set z = scalbn(|x|, ilogb(x)-23)...
	low = getLowWord( x );
	e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
	z = fromWords( ix - ((e0 << 20)|0), low );
	for ( i = 0; i < 2; i++ ) {
		TX[ i ] = z|0;
		z = (z - TX[i]) * TWO24;
	}
	TX[ 2 ] = z;
	nx = 3;
	while ( TX[ nx-1 ] === ZERO ) {
		// Skip zero term...
		nx -= 1;
	}
	n = rempio2Kernel( TX, TY, e0, nx, 1 );
	if ( x < 0.0 ) {
		y[ 0 ] = -TY[ 0 ];
		y[ 1 ] = -TY[ 1 ];
		return -n;
	}
	y[ 0 ] = TY[ 0 ];
	y[ 1 ] = TY[ 1 ];
	return n;
} // end FUNCTION rempio2()


// EXPORTS //

module.exports = rempio2;

},{"./kernel_rempio2.js":23,"./rempio2_medium.js":25,"@stdlib/math/base/utils/float64-from-words":43,"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/base/utils/float64-get-low-word":49}],25:[function(require,module,exports){
'use strict';

/*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c?view=co}.
*
* The implementation follows the original, but has been modified for JavaScript.
*/

/*
* ====================================================
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunSoft, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ====================================================
*/

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );


// VARIABLES //

// 53 bits of 2/PI:
var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

// First 33 bits of PI/2:
var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

// PIO2_1T = PI/2 - PIO2_1:
var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

// Another 33 bits of PI/2:
var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

// PIO2_2T = PI/2 - ( PIO2_1 + PIO2_2 ):
var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

// Another 33 bits of PI/2:
var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

// PIO2_3T = PI/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

// Exponent mask (2047 => 0x7ff):
var EXPONENT_MASK = 0x7ff;


// MAIN //

/**
* Computes `x - n*pi/2 = r` for medium-sized inputs.
*
* @private
* @param {number} x - input value
* @param {uint32} ix - high word of `x`
* @param {Collection} y - remainder elements
* @returns {integer} factor of `pi/2`
*/
function rempio2Medium( x, ix, y ) {
	var high;
	var n;
	var t;
	var r;
	var w;
	var i;
	var j;

	n = round( x * INVPIO2 );
	r = x - ( n * PIO2_1 );
	w = n * PIO2_1T;

	// First rounding (good to 85 bits)...
	j = ix >> 20;
	y[ 0 ] = r - w;
	high = getHighWord( y[0] );
	i = j - ( (high >> 20) & EXPONENT_MASK );

	// Check if a second iteration is needed (good to 118 bits)...
	if ( i > 16 ) {
		t = r;
		w = n * PIO2_2;
		r = t - w;
		w = (n * PIO2_2T) - ((t-r) - w);
		y[ 0 ] = r - w;
		high = getHighWord( y[0] );
		i = j - ( (high >> 20) & EXPONENT_MASK );

		// Check if a third iteration is needed (151 bits accumulated)...
		if ( i > 49 ) {
			t = r;
			w = n * PIO2_3;
			r = t - w;
			w = (n * PIO2_3T) - ((t-r) - w);
			y[ 0 ] = r - w;
		}
	}
	y[ 1 ] = (r - y[0]) - w;
	return n;
} // end FUNCTION rempio2Medium()


// EXPORTS //

module.exports = rempio2Medium;

},{"@stdlib/math/base/special/round":26,"@stdlib/math/base/utils/float64-get-high-word":47}],26:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Round a numeric value to the nearest integer.
*
* @module @stdlib/math/base/special/round
*
* @example
* var round = require( '@stdlib/math/base/special/round' );
*
* var v = round( -4.2 );
* // returns -4.0
*
* v = round( -4.5 );
* // returns -4.0
*
* v = round( -4.6 );
* // returns -5.0
*
* v = round( 9.99999 );
* // returns 10.0
*
* v = round( 9.5 );
* // returns 10.0
*
* v = round( 9.2 );
* // returns 9.0
*
* v = round( 0.0 );
* // returns 0.0
*
* v = round( -0.0 );
* // returns -0.0
*
* v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* v = round( NaN );
* // returns NaN
*/

// MODULES //

var round = require( './round.js' );


// EXPORTS //

module.exports = round;

},{"./round.js":27}],27:[function(require,module,exports){
'use strict';

// TODO: implementation

/**
* Rounds a numeric value to the nearest integer.
*
* @param {number} x - input value
* @returns {number} function value
*
* @example
* var v = round( -4.2 );
* // returns -4.0
*
* @example
* var v = round( -4.5 );
* // returns -4.0
*
* @example
* var v = round( -4.6 );
* // returns -5.0
*
* @example
* var v = round( 9.99999 );
* // returns 10.0
*
* @example
* var v = round( 9.5 );
* // returns 10.0
*
* @example
* var v = round( 9.2 );
* // returns 9.0
*
* @example
* var v = round( 0.0 );
* // returns 0.0
*
* @example
* var v = round( -0.0 );
* // returns -0.0
*
* @example
* var v = round( Number.POSITIVE_INFINITY );
* // returns Number.POSITIVE_INFINITY
*
* @example
* var v = round( Number.NEGATIVE_INFINITY );
* // returns Number.NEGATIVE_INFINITY
*
* @example
* var v = round( NaN );
* // returns NaN
*/
var round = Math.round;


// EXPORTS //

module.exports = round;

},{}],28:[function(require,module,exports){
'use strict';

/**
* Compute the versed cosine.
*
* @module @stdlib/math/base/special/vercos
*
* @example
* var vercos = require( '@stdlib/math/base/special/vercos' );
*
* var v = vercos( 0.0 );
* // returns 0.0
*
* v = vercos( Math.PI/2.0 );
* // returns 1.0
*
* v = vercos( -Math.PI/6.0 );
* // returns ~1.8660
*
* v = vercos( NaN );
* // returns NaN
*/

// MODULES //

var vercos = require( './vercos.js' );


// EXPORTS //

module.exports = vercos;

},{"./vercos.js":29}],29:[function(require,module,exports){
'use strict';

// MODULES //

var cos = require( '@stdlib/math/base/special/cos' );


// MAIN //

/**
* Computes the versed cosine.
*
* @param {number} x - input value (in radians)
* @returns {number} versed cosine
*
* @example
* var v = vercos( 0.0 );
* // returns 0.0
*
* @example
* var v = vercos( Math.PI/2.0 );
* // returns 1.0
*
* @example
* var v = vercos( -Math.PI/6.0 );
* // returns ~1.8660
*
* @example
* var v = vercos( NaN );
* // returns NaN
*/
function vercos( x ) {
	return 1.0 + cos( x );
} // end FUNCTION vercos()


// EXPORTS //

module.exports = vercos;

},{"@stdlib/math/base/special/cos":13}],30:[function(require,module,exports){
module.exports={"expected":[1.089632736886924,1.0722056758571277,0.010427319251969158,1.8193323123501792,1.9585081809656884,1.999475089765626,1.3426108761221838,1.6219035590110038,1.8374758659563049,1.9672402108001772,1.9979009101240122,0.6193808819010185,0.23476442487442084,0.14963353524906853,0.7735280734211065,1.9952791136811678,1.4027316521185256,0.25602147961015986,1.871107250777542,1.1865829035492934,1.9916124528526638,1.4321735224879741,0.28974182612489296,0.10959979246031404,1.171170970875552,1.9894662549258406,1.4462462487459944,0.3008555846716624,0.10257906705671149,1.1391625720975675,1.9811610282599421,1.4896657170272287,0.32438556723623435,0.0887575161688785,1.1070080776029116,1.9743872366151898,1.5176556847144145,0.3486248236613032,0.06962635979376985,1.0747412438380666,1.966590513304952,1.5451022068680231,0.37354790707932695,0.06399784327348546,1.0089333471128037,1.9624568098987651,1.5856250591734318,0.3858343162100635,0.05859900254095807,0.9932687611870303,1.9580869392739375,1.598250259661187,0.39827142903974355,0.04316767568026725,0.977605826969606,1.942858580415565,1.6107286617696048,0.46623346609989835,0.03873244294562139,0.9285250065433057,1.9253539267522135,1.6488867503276268,0.4795450288635802,0.03453308561128865,0.9129097235174097,1.9193020611310878,1.6607257286774235,0.49298430063373055,0.02290145734454152,0.8973158106643422,1.8988609737571718,1.6724025784454275,0.5359348158342985,0.013628787656310482,0.8485792407005366,1.8918861465476204,1.7311902207811833,0.5498670413921762,0.011172507060922654,0.8331143201889251,1.8685944408222612,1.7417861573639208,0.5942728318647781,0.013984097682229635,0.7848844494493832,1.8607259336026494,1.7522000747933735,0.6086395212231461,0.0001596093812756827,0.7696134457953854,1.8526462218410154,1.762429417707172,0.6859134198637706,2.4247892305151453e-6,0.7543989742903207,1.8443572881333932,1.7724716760337582,0.7008233772040682,9.061915191443948e-5,0.7392447682543559,1.8358611664146036,1.8222420316639518,0.7158067463693549,0.000424170828234538,0.7241545462197447,1.7877110473761562,1.8310561937262044,0.7308598507472519,0.0010029979714304416,0.6457758370974358,1.7779646053265088,1.8396664315938462,0.7459789966137848,0.0018269585491585971,0.5698134254234567,1.768027266672306,1.848070632490586,0.7611604740397486,0.010217349379268992,0.5557255817639899,1.7125597795114822,1.8562667341973924,0.8421080295014957,0.012572243658331095,0.5417467539612231,1.7014822340529725,1.8642527255585186,0.8575950316535548,0.015169432515628078,0.5278803721336284,1.6902325591997323,1.9028179619144623,0.8731169770726249,0.018008278654127574,0.5141298388077347,1.6281670806872088,1.9094431241188419,0.8886700569907284,0.021088085479042507,0.5004985280832182,1.6159021002873817,1.9406559445663047,0.9042504550001182,0.024408097268760698,0.43071299030949284,1.6034859901075125,1.9458563370807196,0.9198543479897463,0.04585649269365211,0.417904758445645,1.5909217968071268,1.950824635793039,1.0692782779320715,0.05066260248126164,0.4052393608500656,1.5782126033823194,1.9555596215843623,1.084896258125563,0.05570166025200929,0.3927199053523136,1.508912605254673,1.9600601325860076,1.1004934065134626,0.11528119501292466,0.32922906992605316,1.4361411211069217,1.9444547192470538,1.049357638556479,0.09254940017739,0.36813107215868646,1.4816982655523043,1.9683533706931124,1.1316099050383133,0.13031643576257346,0.3063260486968965,1.407738959144939,1.9993616134252066,1.0806196244308297,0.10615592871655155,0.3441623917715114,1.4540111592395157,1.9962161929394462,1.1625972339705946,0.14620523439317323,0.19730075964334404,1.3789366185245793,1.999990300854837,1.1118024855308122,0.1206397276592932,0.22892868624977625,1.4258784600479555,1.9984497139545288,1.1934249805488064,0.16293199671639225,0.17901330325515863,1.349762367533111,1.9996375398160036,1.3996800285446729,0.1359865817654491,0.20936130808337128,1.3973277790399632,1.9997032985224665,1.3521639172697264,0.18048030611773858,0.16153161081834433,1.3202448394722068,1.998303676528845,1.428197540441566,0.15218142874246987,0.19056990857658618,1.2409773883168818,1.9999757163026715,1.3813087942613733,0.19883293966877869,0.1448728398795831,1.160066138941458,1.9959900201241396,1.4562947944420506,0.25094951516804453,0.17257293069856805,1.2104578542816613,1.9992666999285373,1.4100794326910864,0.30817564829979605,0.12905334032267912,1.1290670911119194,1.9926988413584463,1.483944214271753,0.37012097789179965,0.09147480764924987,1.1797317647042673,1.9975769452698482,1.4384475953859654,0.33113341558863096,0.11408863832183513,1.097941369354851,1.9593393909396002,1.5111186631867244,0.3947595173978905,0.07883237653078645,1.0154828787549046,1.9725473163569613,1.4663854401861356,0.3547476473294874,0.04985974869580112,1.0667195222584962,1.9500271479878846,1.5377914706070137,0.41999207501015157,0.027368388106870922,0.9841546493838986,1.96478071113386,1.4938655472706563,0.37899516714599824,0.04055835001950414,1.035432192754081,1.9397824933031802,1.6691360287462114,0.44579388603336245,0.020567382920999355,0.9528419715588238,1.9083736624246885,1.630160544710767,0.40385217711615584,0.0321986030143776,1.0041100880410632,1.9286154815836591,1.6920860668983366,0.4721396270739957,0.014727649700640222,0.7891877625181809,1.894829310369115,1.6541735920140783,0.4292942811289733,0.02478871242089531,0.8395760294238794,1.9165370727821731,1.714356851651882,0.4990034408940631,0.009854919898609094,0.7586707942768158,1.8804067209391913,1.7696672120958545,0.572130088324224,0.018335950735368756,0.8087360750623953,1.9035591213495195,1.7359265251672564,0.6481753988047191,0.005953975894492314,0.7283906805120894,1.790416677380951,1.7892884207915116,0.7266206384124703,0.012846651072297322,0.778083838207813,1.8207796650697174,1.756773917716096,0.6776697404804457,0.0030286463009425724,0.6983771398835267,1.7708404312457737,1.8081349760619303,0.7568859179652396,0.009598959586466727,0.7476494027428364,1.8024829886553022,1.7768785684584585,0.7074804357640769,0.003815378708680872,0.6686596294203185,1.750507637612056,1.8261883808048986,0.7873898037757607,0.014414749287444462,0.7174626387872558,1.7833987089016234,1.8698624486554793,0.7375782267106059,0.00011535435552156859,0.5179840795741975,1.7294382522625233,1.8434309163621252,0.9510044391729043,0.020197849505360077,0.5635326869771855,1.5654547277955173,1.8147814653793841,0.8998672812645352,0.01123505388777124,0.38043815504080525,1.6069920399354982,1.783989433416063,0.8489934362416606,0.00487235296774402,0.42149166256225323,1.6469331822368294,1.8990445208692783,0.7985166839426622,0.04928770877416344,0.46406643807219683,1.4680119794212143,1.8754165010654251,0.7485697599954755,0.03464233420838758,0.508050525287711,1.5126990038094283,1.9588185144874237,0.9623671014329208,0.022535501646901657,0.33250211760919646,1.5560378149883332,1.9974472687756637,0.9111897496418346,0.012999047686736098,0.3715508944327842,1.5979144475371407,1.9924752632083336,0.860245936733729,0.07056966754946736,0.41225226542801763,1.4117565993314023,1.9848934061495282,0.8096696265372538,0.05287572098977655,0.4544992006892309,1.4579310035552324,1.9747216351449854,1.288652140938305,0.03767236921246464,0.2871859217176851,1.5029012146299479,1.9999612036074952,1.2391915350319964,0.024999591541735033,0.3240767065218245,1.546548977142244,1.9981948791074005,1.1891019417769921,0.09549951833734083,0.3627449254656362,1.3538851286564428,1.9938036625917612,1.3956388944603457,0.0748264462006123,0.4030888950990388,1.401365684242412,1.9867991013740445,1.3480383124640125,0.05658624636686804,0.24466742748473402,1.44779079303945,1.9985504220187842,1.2995225154063603,0.3194882504349412,0.27925542878315035,1.4930383737787059,1.999996711177654,1.2502190823112755,0.2828205884293059,0.31573872799365965,1.2946247053197069,1.9988133701533992,1.4523712622447726,0.2480388492535175,0.1750543143570109,1.3432250573217508,1.9950035107055286,1.406058479313761,0.21523449631954106,0.20511351441715908,1.3909228513851044,1.993220461142018,1.35867790923767,0.36670626728041333,0.09332388460509655,1.4375926595383195,1.9978736874648142,1.3103541458034322,0.3278657951186882,0.11614020336005049,1.2342079187013812,1.9999028663900813,1.5073281322251761,0.2907927931621248,0.036290393627775974,1.2837373171195416,1.9993026619101215,1.4624849199512182,0.2555847500162698,0.0512423376712523,1.3325205888706477,1.9839922403737678,1.4164255393727554,0.41640987886982617,0.06868917170530864,1.122153257653975,1.9918341405581823,1.3692711100255133,0.37554904030515357,0.08858501685768194,0.9060818235478227,1.9970678751721387,1.560293805903199,0.3363302822324866,0.02146555264778882,0.9572418672108151,1.9573490621049807,1.5170961680061659,0.2988567358209778,0.03331662801618496,1.008514349320154,1.9709019792688034,1.4725387539461037,0.4684040050542084,0.04770973151735314,0.7934951649839654,1.9819017748863224,1.650836050271935,0.4256831735125707,0.06460701448742034,0.84392487963554,1.990319523467843,1.6110603999645092,0.3844725877994708,0.010481330883562179,0.894765015484262,1.8117969052989298,1.5696778815009207,0.5681534196823447,0.019185023662206646,0.9458818813347031,1.840664134016726,1.526797315958668,0.5224845757155681,0.03046790558918433,0.7326320835608688,1.8673207196834296,1.6970995810558374,0.47807142485114884,0.0004794390690781025,0.7823805100766649,1.8916965651062547,1.659428662193512,0.4350307576352309,0.0033808399631966024,0.8327011972536631,1.773638642832761,1.8055329942968124,0.6254790384203719,0.00890298930080391,0.8834618198588332,1.805103163827988,1.7740978397775227,0.5784393317153093,0.017031365823568456,0.6728183861020594,1.8344505542802176,1.892024504907653,0.5325081773134177,0.0005021502722943882,0.7216902684404042,1.8616036411519126,1.8676813764916358,0.48780635756188995,0.0001919483811982925,0.7712940048560535,1.7324439502789668,1.8410565594345925,0.946605865670144,0.0025108805667246603,0.5674995921371283,1.7663822694382838,1.8122200673893394,0.8954860499325014,0.007452848874750839,0.6142888335160033,1.7983052800220827,1.9185765027964405,0.8446410681363937,0.004447759292917519,0.6620923559560228,1.6502854211736842,1.8971073295404517,0.7942046242203411,0.0009271721182972925,0.7107844534582943,1.6883745113965984,1.8732790880146446,1.0092393534184267,3.37856474106335e-5,0.5118898183434613,1.724653425273702,1.957558296948926,0.9579662479896178,0.02161522697184426,0.5572731466111608,1.7590267623642983,1.9415232085288485,0.9068036761473307,0.08888359894418185,0.6038206866042968,1.6014389893913321,1.9230122541188281,0.8558861769772034,0.06895349178150867,0.6514100351041908,1.6416032929465683,1.9020741108433905,1.0718365779177497,0.05147170067081608,0.45819581291967726,1.6800804115682286,1.9737281517071366,1.0206114230039773,0.036484196408853364,0.501995104471977,1.7167691643310596,1.9607745592979797,0.9693320674919004,0.11647957106996587,0.3273291363563233,1.5502319885497975,1.9452944767993379,1.18477523475081,0.0936299615931514,0.36614532263487265,1.5923138658198241,1.9273286112372647,1.1341518532815138,0.07316377796507534,0.21478533259482457,1.6328381715478317,1.9860762513288854,1.0831757008895055,0.1754643283249938,0.24756110001243692,1.6716983414458566,1.9762549960799354,1.0319808264445975,0.14754324486537174,0.28231550997981725,1.2495170477638844,1.9638665427838093,1.2459524223911167,0.12186381479125963,0.14947255068401066,1.2988306908682814,1.9489434685983573,1.195940600236455,0.09849356572915224,0.1775517005513667,1.3473585171839153,1.9945541311445696,1.1454135250707365,0.2125123307174428,0.2077935924038865,1.1377969987679848,1.9879037601930623,1.0945040648528608,0.1819526994896833,0.24011870098841526,1.1883899408863408,1.9786555591519275,1.3061642790692334,0.1535442372093816,0.11820891376720843,1.2384874855006707,1.9617884417044185,1.2569603060641756,0.12736164787209436,0.14354607008861875,1.2879578941622918,1.974559390157538,1.2070806202601272,0.2526511188078351,0.1711353909215486,1.075505897468195,1.984767599394658,1.1566563872157836,0.2195728823517613,0.20090432631659993,1.1265234282280585,1.9923862255123679,1.3651744811540405,0.18854688734944158,0.09040619107701897,1.177208248067954,1.942756572844262,1.5566402847717602,0.1596547209621213,0.11290190884091145,1.2274270742174611,1.95861233909954,1.5133213591618133,0.2957231531234884,0.1377303741927004,1.2770478493012625,1.9995386091911684,1.685701043272064,0.4646786950878672,0.04906314459532146,1.0641603277276095,1.9827263927822738,1.4227514213509083,0.22673438440579285,0.004801129961523265,0.848276757437698,1.9200245082278418,1.607568069552281,0.3810074306747112,0.08573949111729673,0.6394780983726053,1.9965103800854358,1.327737672651553,0.5641851281258066,0.020053122722711425,0.9502802902006249,1.9553122373206373,1.5230485588119402,0.7677137594584826,0.1320262152727053,0.736878673090115,1.869504565527216,1.229278863416079,0.4743196341044429,0.04560596459620281,0.535763843495022,1.9805580677759085,1.4330309497484544,0.6693437929699717,0.003752366333261259,0.8370450845581416,1.915508311428635,1.6165621010101403,0.3899799030156941,0.08119105329892218,0.6288930990280592,1.8077077213757597,1.3384614750912849,0.5744495656012448,0.01785030003145549,0.4380704257635263,1.9518885632450604,1.5327081006752625,0.7787908510079347,0.1264343311774656,0.7259232968265258,1.8638308458052606,1.9671873386649972,0.48402857133939414,0.042272238121785044,0.5257205370143602,1.7354354401350154,1.8386658874477397,0.6800986059116538,0.002832470109120133,0.8258344903504256,1.9108736910813484,1.9360899577382515,0.891106845992414,0.07676146597498601,0.6183561033939999,1.8009500631384308,1.9898021079760622,0.584769049209743,0.015774521137359998,0.4286990672160297,1.9483417597345798,1.8951527358631932,0.7898965565764671,0.0007472461906752326,0.7150033731472885,1.8580453871592302,1.9700142961609015,0.4938042509146683,0.03906239639886577,0.5157385799022262,1.727681485758215,1.8448059903921092,0.6908947989889948,0.0020415602802367205,0.3390869941859219,1.9061212466870228,1.9400300429536397,0.9024194105021742,0.07245130212493689,0.6078684744601386,1.7940887997812713,1.9913581881346358,0.5951422440973759,0.013826054548202071,0.41940160803420445,1.6449753588494198,1.900164532039428,0.8010294396101556,0.16664011693653402,0.7041203145749227,1.852148937954302,1.9727157796079027,1.0162078203949323,0.03531471416453358,0.5058192633525538,1.719833403755986,1.9998448174403014,0.7017309756843724,0.11442518086192555,0.33059461485552866,1.9012515929875673,1.9438485326667276,0.9137445973327674,0.23488869848657967,0.5974315688304666,1.7871248188277922,1.992786033352476,1.1297860255336583,0.07151908876765789,0.4101792508702723,1.636242242655965,1.9050598894281512,0.8121880600395952,0.1729803070541195,0.2504693685683741,1.8461422609125913,1.9752914395615981,1.0275784308094167,0.3130602696196091,0.49596387045654555,1.711892209299577,1.999980506217062,0.7126057343081725,0.11976524917623765,0.3221888249747592,1.5443994387771207,1.9475449329452434,0.9250809415397573,0.24226133388559512,0.18006504083661323,1.7800590210883116,1.9940854589338302,1.1410545902050588,0.07580290240126164,0.40103318866179927,1.1421579853805035,1.994205890627784,0.8233709744661776,0.17942747447070684,0.24298916352842026,0.9261924825921947,1.9777409428532047,1.0389454738771209,0.3213697320754658,0.4861736760367017,1.2427624260504773,1.9999868447322484,1.2527013644818716,0.12521917830539364,0.3138707118559291,1.028692616761774,1.975537079544953,0.9364269767354699,0.2497319848899724,0.1736074339694481,1.3408150354131962,1.9952562967943828,1.1523049090726405,0.4092795178098577,0.391964604477387,1.1308911444639485,1.9929190598704356,1.3610707685219627,0.18598078522724737,0.23560687994703833,0.9148551238041771,1.9800639726326534,1.050307479239388,0.329766977245208,0.11494347162676977,1.2317137915336889,1.9998638321659556,1.26368904992448,0.5048505590761353,0.3056413514701207,1.0173222909549406,1.972973768862326,0.947781235278675,0.2572996851502123,0.16725672328067298,0.8021219038038145,1.9962983954829978,1.6441231564551846,0.4184944504065853,0.38297467136363905,1.1196073724135673,1.991503792269251,1.7934108342200947,0.19263939163475607,0.22832347274315556,0.9035287787428665,1.9404096489938403,1.5624162802328256,0.33825091892180215,0.10970669836486557,1.2206351841930716,1.9996114844302015,1.7269164941004511,0.5147636674941716,0.29750180830800366,1.0059497244615614,1.970284601314765,1.8574724108282137,0.264963455763224,0.16101373025239063,0.7909864347225296,1.99721162020131,1.6527810692479514,0.4277846023645696,0.06370319111315603,1.1083081288166792,1.9899602708930328,1.8002822036550201,0.6173260801772438,0.22113988404576457,0.8922149125025193,1.9364814582315741,1.571783844584044,0.3468204596837805,0.10458508701934721,0.6811548589614619,1.9992298341668682,1.734679717797888,0.5247395425823028,0.029842836710956777,0.9945763883547644,1.967469924753577,1.863268780193768,0.27272230539894937,0.15487926243312433,0.7798780021276294,1.890532767518505,1.661354542992624,0.43714877197679913,0.01764124773620457,0.5754584946485222,1.9882886954005674,1.807050054359598,0.6278582978669831,0.008564781650215458,0.8809149885632218,1.932432130986318,1.9150593293097948,0.3554744910371951,0.003656515839235097,0.6703959290653665,1.8330344534265726,1.7423479086291043,0.534776893933322,0.04527378570422136,0.9832037538072282,1.9645301032650084,1.868953483339998,0.7358034858894302,0.00014498828869125013,0.7687980429257864,1.8853013066961601,1.9549821616967753,0.44658574796187267,0.019831632080957173,0.5651886036848122,1.9864892820147966,1.8137135108935034,0.6384386531216195,0.08528849376999925,0.8696304686015851,1.9282621910498206,1.9195871580425243,0.8471751286671453,0.004692655799958034,0.6596796343731839,1.8266887076279128,1.7499200746922743,0.5448744231878961,0.04871888639356137,0.4656204956934973,1.9614655171231514,1.8745257849347303,0.7467896248095716,0.13716640752859832,0.7577479903405604,1.514277609280395,1.9582943930599328,0.45609430962068176,0.022148803932055205,0.5549749567853606,1.318028430905839,1.8202717113200881,0.6490657773427537,0.08994363011735862,0.3729829378641063,1.5993880326231755,1.9239960356170123,0.8584245682678375,0.005857541535742361,0.6490073610674576,1.4134323724441837,1.9845731810514564,0.5550308242025137,0.05228703794250389,0.4560419608590821,1.2081709578747235,1.8799849641852455,0.7578085171964661,0.14297120548200448,0.7467292737270076,1.5044904615843642,1.9614826663762717,0.9718956518164481,0.024592463556870725,0.5448188751138201,1.3072251900754506,1.9980827034473294,0.6597382958822912,0.09471648478898509,0.36416374238191307,1.5902455284445867,1.928285391732674,0.8696923210446498,0.2071138797655886,0.6383804896364422,1.4030499815790871,1.986499500304927,0.5652447832184362,0.05597777880071553,0.4465337885109463,1.197033499368233,1.8853303149315135,1.297766809801577,0.14888686249522087,0.28053190132505845,1.494638056643055,1.9645465692337647,1.495897786622508,0.02716229486123012,0.5347216723876207,1.2963822088116723,1.9987220855461283,1.1984549310964543,0.09960644040284361,0.35542679408927014,1.0842864139650248,1.9324546715493585,1.4043766252394683,0.21409561694572232,0.6278003946955336,1.392615455077125,1.9882982131024578,1.5914154347114866,0.059790631560594165,0.4370972085576458,1.1858705540302255,1.9979919032206146,1.3086048022157615,0.1549126133615486,0.27267948955202115,1.4847216688924674,1.9674857053080501,1.5057419422208393,0.2894970335498779,0.524684654708037,1.285500889684308,1.999232280163569,1.67926281419216,0.10461286442956585,0.34677322313475534,1.072948280600515,1.936503335759117,1.4147522723359087,0.22117901304509346,0.005701867161669427,1.3821301426733412,1.989969086775542,1.6005481193562707,0.3741132056031007,0.08934355748967748,1.1746835658187484,1.9972069627698548,1.319402875739886,0.16104767863334257,0.021846331517423212,0.9590799160242439,1.9702996944136963,1.5155206786913888,0.2975462079008909,2.5244470187035795e-5,1.2745826402222717,1.9996132213045577,1.6875655829794782,0.10973510927427033,0.04827279541960128,1.0616007111728838,1.9822485279537851,1.4250742700716048,0.2283631518067024,0.004553387994035152,0.8457422579820719,1.9915119051920196,1.609603121430401,0.38302376571661223,0.08470347338458206,1.1634739818018625,1.9962930308230846,1.7656657739078137,0.16729126472283506,0.019545308266799344,0.9477189358810113,1.9545509767614355,1.5252327311273788,0.3056862466049459,0.00017073130318123741,1.263628872731518,1.9998648596932975,1.6957794132450403,0.4765030988735586,0.04484341561477967,1.0502451735218181,1.9800515760145765,1.833835784111455,0.235647103942206,0.0035336726161405707,0.8345152115519385,1.9144735281867118,1.6185792696441577,0.3920141334231655,0.008755201615177843,1.1522432519704577,1.8061929671826653,1.7729319043969154,0.5767718419978217,0.01737110955930321,0.9363647184389285,1.660266192545813,1.534876843247796,0.31391609672538157,0.0004455488347556713,0.723457715920134,1.8625359603376266,1.703903242507041,0.4862271964356325,0.04153758797249185,1.0388831365177178,1.7336952009316904,1.8400599778980316,0.2430299272521229,0.0026428529310079663,0.8233095710397598,1.5705936039843862,1.6274754029077871,0.401083145793676,0.010320987853865815,1.140992829050695,1.799411869256628,1.7800980539929985,0.5871035542755387,0.015324016633588733,0.9250187323976221,1.6516818912277178,1.8962930268539933,0.3222346937081798,0.0008496615164977905,0.712545982113871,1.856725407539786,1.7119360199255556,0.49601775193975406,0.03303191173458808,1.0275160698716912,1.7259199328236445,1.8461755075884545,1.2220492822703048,0.0018810441686427648,0.8121267859263228,1.5612166966734229,1.6362903704816927,0.9049721815902598,0.012014791827199556,0.605510482446929,1.7925273651804194,1.787163295734668,1.1210469018953682,0.06828377475443392,0.9136824453919642,1.6430132930432644,1.9012786222471214,0.8035435040352994,0.0013830170753075244,0.7016714312848491,1.4634728912505244,1.7198767064384681,1.0187721200251583,0.035993439477729594,0.5035912519626959,1.7180507649519443,1.8521815821219383,1.2331241478164405,0.0012483448711285705,0.8009683027360057,1.5517671944207951,1.944692746869654,0.9163000123810917,0.013836394436920973,0.5950852016632402,1.3597181477291072,1.794126715713241,1.132328596428988,0.072474617203386,0.9023573238022294,1.6342615192997536,1.9061476347420692,1.3421779271049477,0.0020455465201589806,0.6908354700864836,1.4533650387493193,1.9758548288576503,1.0301420544310593,0.03907966415244901,0.12451751424960911,1.7100887152153548,1.8580774245960257,1.244168858105237,0.1209851881601165,0.32030540182877154,1.5422463195459186,1.9483615494413447,1.4467938840799257,0.015785560053662717,0.1785995636096286,1.3490830371679738,1.800987413190963,1.1435931738903693,0.07678543764204449,0.07525007128431638,1.6254277020634769,1.9108994345185186,1.3528424105318975,0.1808960021977194,0.24131587892041673,1.4431985422185691,1.9782758395534594,1.04150808987833,0.042290186546995345,0.11907806301309376,1.2402736585441483,1.8638622723670837,1.255181984472679,0.12646469586126818,0.037976025738928,1.532655303600456,1.9519076788071827,1.4569398293199392,0.017862036547427462,0.17216598929856086,1.338402771744433,1.995502536440939,1.1548391771750668,0.08121567845378819,0.07098153965431797,1.1283480888431774,1.9155334069179437,1.3634612528110317,0.187473131555967,0.23395580895396373,1.4329747167228954,1.9433684701186276,1.555111039519213,0.045624591371361434,0.1137525614808651,1.2292181402350058,1.8500740131924274,1.2661621023402199,0.13205719778518965,0.03493377375890072,1.5229953872090132,1.9723783418647722,1.467026668121298,0.25901950550293873,0.16583949762076322,1.3276787329805413,1.899532009888465,1.1660651515812561,0.08576476657463805,0.06683317914776254,1.1170607004383613,1.9911669222206627,1.3740330803655478,0.19415536352603158,0.011402281104955225,1.42269488474258,1.939534449635035,1.5645350551879922,0.049082447311002975,0.10854169852136808,1.2181329719214755,1.8440292120339228,1.2771077913990543,0.1377619705261922,0.032016355781161354,1.0033850604677954,1.969660841173369,1.4770530957233305,0.26670480337224545,0.15962090692554165,1.3169123080605596,1.8945054144879974,1.654721794462033,0.09043211356738479,0.06280552636662717,1.1057581699061458,1.7775799112821162,1.3845565257001289,0.6196968132615729,0.009753642645428107,1.4123603760025003,1.9355788977555175,1.573886046676197,0.8272625760902499,0.10344614817422904,1.2070195875009306,1.8378752333477824,1.736417223343261,0.5269976355434627,0.029224149181844905,0.9920117540926428,1.9668179121534484,1.487017815179721,0.7273181237063904,0.15351102160491004,0.7773769420628849,1.998154862527631,1.6632760736365366,0.9403718414887939,0.05889910229900852,0.5731377989856573,1.9878940843983073,1.808561805933877,0.2078316643568926,0.008233095308228577,0.38883153335254017,1.9315023261417192,1.9160907086375687,0.35743752850842636,0.0038789147508260235,1.1958794245205762,1.8316128731682764,1.9808415818517218,0.5370486706255204,0.046039884667238296,0.9806394810193305,1.6928901914797647,1.4969195375262747,0.7382779182789708,0.13274724454348297,0.766303601759845,1.9987808788047317,1.671744556204919,0.951728613900796,0.25995208310606577,0.562880475267369,1.9860658752360396,1.8152016020793114,0.2148239641501133,0.42171440742204347,0.37986920509343935,1.9273052621095244,1.9205917645710187,0.36619357538176045,0.004944099085068099,0.22581573700369073,1.8252429415491231,1.309724150535465,0.5471595897504955,0.049512772716183706,0.10791379508982335,1.6846448443928386,1.506756981947648,0.7492715673312337,0.1384656653496371,0.7552604907363296,1.5120763789453453,1.6801261467453905,0.10513759441873793,0.26764900768248145,0.5526796941761737,1.315595850824497,1.821735949628689,0.22191782864883347,0.43103041801302877,0.37098709247857653,1.9229882485608465,1.924973739397577,0.37503160688009685,0.0061379966694830035,0.21866705449496981,1.818766262458706,1.985018695173153,0.5573290850428588,0.05310860893332647,0.10283235957708525,1.6763109365898212,1.516528875943026,0.7602976488040769,0.1442955280197572,0.7442490374494841,1.5022744049333963,1.6884197610758882,0.9744594210014126,0.2754406638979957,0.542536775211496,1.3047835263400438,1.8281640033459676,0.22911234024193683,0.4404200264029715,0.3621863444339385,1.9185518439134028,1.929236066296604,0.38395047977946384,0.6315296928031693,0.21161943957731644,1.8121836736734909,1.9869162604377668,0.5675558410500913,0.056826928187243886,0.09786697519558751,1.6678895460848817,1.5262339554907236,1.7449902514627098,0.1502360784448814,0.02624076837187239,1.492407460329264,1.6966243263943153,1.87090269614776,0.28332604388019167,0.5324530303881334,1.2939317772582006,1.8344849317445096,1.2009679565904294,0.4498820180198938,0.3534680993607786,1.0817305732131672,1.9333781939242525,1.4067209415370097,0.6421264562319682,0.20467380387933465,1.8054960266696574,1.9886861653373575,1.5934815709591474,0.06066724950299207,0.09301828423161929,1.6593817622083196,1.9978261693888015,1.752528817956803,0.1562865481982788,0.023715437979439646,1.482476821449695,1.7047387814173138,1.8764357675333003,0.29130412763322255,0.5224297640665432,1.2830420072829127,1.840697917194634,1.9594164259077127,0.4594151689288457,0.3448334849883615,1.0703901839049643,1.937399586484786,1.4170846076983046,0.6527695115996692,0.19783104583833278,1.7987041865129587,1.9903281809298004,1.6025968410467195,0.06462907612432045,0.08828691387685139,1.650788685465658,1.9970121319910379,1.7599700427538933,0.16244615463484746,0.021316392712250276,1.4724837728504663,1.7127620765175424,1.8818554695130587,0.29937388316975067,0.5124682727841201,1.2721156250362349,1.8468021560293812,1.962561525141559,0.4690182459902251,0.3362836182280874,1.059040689430567,1.9412997237998844,1.4273943228047852,0.6634574821974392,0.19109205058410794,1.791809031746821,1.9918420948158087,1.611634163555785,0.8736120025083993,0.08367347614720744,1.6421114273952888,1.9960691282991676,1.7673129633108433,0.16871410099235162,0.01904394289348632,1.462429607160226,1.7206931738594502,1.8871611010334997,0.30753426664443795,0.00022140969247042008,1.26115404387612,1.852796858648469,1.9655821143631755,0.4786900070192873,0.3278196050290175,1.0476835578786727,1.9450781013759313,1.4376487532661084,0.674188985506535,0.18445768982445176,0.8319864270458757,1.9932277111664076,1.620592369483525,0.8849021267995011,0.07917856780369747,1.633351110424694,1.3889773893991073,1.7745566298004423,0.1750895764944853,0.01689838247085651,1.4523156249132891,1.1819856121065906,1.8923519757964202,0.3157842224889704,0.0005253868839087961,1.2501586817135988,1.8612354014149108,1.9684778028509398,0.4884292009468253,0.31944254023481555,1.0363202583258566,1.7319501357420215,1.9993793179244594,0.6849626333771364,0.17792882173239288,0.8207858139359562,1.5684855205828667,1.629470300061071,0.896207139320836,0.07480277027522586,1.6245088677252553,1.3784747456006998,1.7817001052342696,1.1122983858908433,0.0148799889785729,1.4421431343814077,1.17079060740712,1.8974274223477225,0.32412268354859886,0.0009586488982409325,1.2391309608293692,1.8553997926850125,1.9712482160394869,0.49823456798099874,0.03368882484764679,1.024952260646541,1.7241536050456807,1.999715329756492,0.6957770322079064,0.17150629083518998,0.8096083826797839,1.5590921369111777,1.6382668069033945,0.9075255777375707,0.07054664958338142,0.6031550852456007,1.367923145040597,1.7887424655838968,1.1235923349085837,0.012989023501451147,1.4319134514045435,1.1595735104672455,1.9023867841642692,0.3325485712201778,0.0015211396918195508,1.228072307689819,0.9437723863501684,1.9738929955681601,0.5081048397702921,0.03667850568356168,1.0135810353228651,1.7162634030650996,1.9999220256282635,0.7066307831262585,0.16519092790508938,0.7984555791092002,1.549626433115542,1.9792584154331454,0.9188559779781953,0.06641075626922088,0.5927414978816881,1.3573239525976983,1.7956827999004124,1.1348702969138278,0.01122573064113852,1.4216278992206604,1.1483357722496752,1.907229419738807,1.3445866745165294,0.0022127865048949813,1.2169841527625098,0.9324208629436788,1.976411799327367,0.5180387395675788,0.0397927948358342,1.0022080532544722,1.7082805504198637,1.9999993788030874,0.7175224821693036,0.12221090899110676,0.04041778561488696,1.5400896336110905,1.9768907059179701,0.9301968744239043,0.06239562532205545,0.0023634847229516698,1.346678539307045,1.8025202104322566,1.146130813070802,0.009590338484474104,0.010895099251806983,1.1370788463871238,1.9119547026629466,1.3552409861539487,0.003033499871026968,0.23964758466699543,0.9210780810866502,1.9788043015028307,0.5280349823952728,0.04303128946249479,0.11786719100382692,0.7087626759178904,1.9999473792751155,0.7284507204654571,0.12771595922199952,0.03727911919386151,1.530482972009381,1.9743966328711515,0.9415468000981791,0.05850177611024765,0.0016465325132760666,1.3359882821824742,1.9033451871341918,1.1573724268004013,0.008083058573984947,0.01263334025559204,1.1258041889942811,1.9165620217081905,1.3658493463811203,0.0039831736286575214,0.2323097767273964,0.9097455079994847,1.9810701926177363,1.5572424619447727,0.046393570655250516,0.11256748075572054,0.6979013761579085,1.999766033770631,0.7394140844166808,0.13333384182126373,0.03426498339816442,1.5208076909588288,1.9717765189079794,0.9529042868565453,0.26074419976208174,0.001058720103186861,1.3252545640384974,1.8984086542911738,1.168593683968603,0.0067040858805224035,0.014499299884804029,1.1145132584794601,1.9210507809049973,1.376410382977124,0.005061684934842936,0.07395909764777875,0.8984246095820512,1.983209179572762,1.566650116832149,0.049879203493671254,0.1073825623738357,0.6870791536957062,1.9994553657471803,0.7504111558813347,0.13906383010014978,0.031375768114649816,0.4903459376944316,1.9690307029474874,0.9642678655764809,0.26845097433652465,0.000600123527855212,1.3144787733114303,1.8933559097883175,1.1797931330745621,0.00545359877804219,0.01649273677237173,1.1032075153559475,1.7759647177035283,1.386922729842483,0.006268894281144077,0.07831148190845372,0.8871168502240676,1.9852209856839917,1.5759844739498412,0.8297892813635805,0.1023131065417957,0.6762974084158786,1.9990154153905362,0.7614405123576183,1.045456722491389,0.028611847071355556,0.48059367390398966,1.9661595401686118,0.975636066347452,1.2590015037156534,0.0002708021080245482,1.3036623038797936,1.888187607212187,1.1909693254383669,0.44139589341021535,0.018613393061685635,1.0918884220530816,1.7687406158414354,1.3973850271758734,0.6326241445418568,0.08278308914414068,0.8758236926156784,1.9871053507187058,1.585244325872777,0.8410074819879367,0.09735976900782128,0.6655575349671853,1.9984462396095022,1.745774890859452,1.0568151787905824,0.025973577789161095,0.4709085967674137,1.9631634019642488,0.9870074186610497,1.2699698180184256,7.079844233703891e-5,1.2928065548840126,1.882904415097105,1.20212081538843,1.4705178706630984,0.020860994439952707,1.0805574427270839,1.7614170752411633,1.4077959216500167,0.643225762327939,0.08737334093999871,0.8645465975582505,1.9888620309290426,1.5944284748133388,0.8522462487369978,0.19650195869583498,0.6548609225821473,1.9977479120285495,1.7533034286633744,1.068166285888274,0.023461301535540713,0.4612919590763863,1.960042675893214,0.9983804516012038,1.2809032109738707,1.3840182344626584e-7,0.29287865782502664,1.877507016838675,1.2132461604484899,1.480523000682538,0.02323525017367911,1.069216043071666,1.753995043223071,1.4181540665867374,0.6538735298546203,0.09208164353418258,0.8532870237754155,1.595274304918726,1.6035357327763,0.8635041278450056,0.2033244479277705,0.6442089548973471,1.9969205229782943,1.760734524572243,1.079508575487169,0.021075343280419934,0.45174500476975754,1.9567977656301103,1.8824098429620864,1.2918002683171808,5.883112655669098e-5,0.28488252416108306,1.8719961106053837,1.2243439215242,1.490465973714472,0.02573585314627802,1.0578656901284382,1.746475479847657,1.4284581221311599,1.6662287420015547,0.09690738789464792,0.8420464277243793,1.5860972200483352,1.9872732387446703,0.874779663073965,0.2102499893596338,0.6336030097744504,1.995964179483813,1.9300574362985619,1.0908405804305403,0.36047097953219776,0.4422689687726373,1.953429090913111,1.829411410118261,1.30265958048366,0.0002468690244694649,0.2769788929329181,1.86637240924829,1.96588758436857,1.500345503607666,0.028362479897795168,0.14545121414411244,1.7388593577913718,1.9989681802248378,1.6746671523137828,0.10184994979793072,0.8308262634075254,1.576844321871335,1.9854006768592245,0.8860713959020127,0.21727768715336582,0.623044459121977,1.387892801191417,1.925818626226358,1.10216083489201,0.36925564586283055,0.4328650768366552,1.9499370874896664,1.8230042885270978,1.3134797427910572,0.0005642277723364453,0.2691687864972282,1.8606366402088161,1.6817587110033574,1.5101603124174319,0.031114790666750047,0.13959959613635298,1.7311476622208004,1.999420088888443,1.6830182925521595,0.1069086899098931,0.8196279821843355,1.5675168072758567,1.9834006506537096,1.8239818583180911,0.22440663225669777,0.6125346687178399,1.3773850278170507,1.92146005893816,1.1134678745651578,0.37812190073112684,0.42353454538140556,1.9463222070601378,1.8164907090406701,1.3242593556212632,0.5608765639058756,0.26145321511301733,1.8547895454246506,1.6733942792591132,1.5199091305709342,0.03399242943408454,0.1338592733154561,1.7233413906652273,1.9997427197820148,1.6912810824734525,0.11208295386842226,0.046710882595807246,1.5581158828018733,1.9812734188370817,1.8303727784441222,0.2316359025207395,0.602074998032678,1.3668284386390173,1.9169822982267775,1.1247602368529324,0.3870685972623432,0.4142785813371004,0.2091941515605834,1.809871514208612,1.3349970246013572,0.5711229092457271,0.25383317681091766,1.8488318812337776,1.66494274209069,1.5295906970314124,0.03699502396921528,0.12823098820815504,0.7294635747635301,1.48896361659421,1.6994544532627893,0.11737207236807434,0.0433371706682969,0.5289629188143173,1.9790192565726965,1.83665628754021,0.23896456281926248,0.5916668000540055,0.35045794294311217,1.9123859233030203,1.9347893844059925,0.3960945781763835,0.4050983819884496,0.2022841657288601,1.8031475602421976,1.3456913607839724,0.5814247310308965,0.24630965726409138,0.9312465888884327,1.656405192727942,1.5392037594612995,0.7863007924190545,0.1227154688487927,0.7185320273037619,1.4790111436423685,1.70753734767191,0.12277536124665123,0.04008720574029645,0.5189609733683144,1.9766384554427168,1.8428315728169649,0.24639166516966005,0.002283300561700896,0.34185265316965263,1.9076715287207775,1.938768697691568,0.4051986759374957,0.39599513481978865,0.19547736666046223,1.7963197169035858,1.3563409808269593,0.5917806966920648,0.23888362966073096,0.08667029540495985,1.6477827355266412,1.5487470743842155,0.7974250408939231,0.11731342868514893,0.7076368885096294,1.4689967092659373,1.7155287201559273,0.12829212157369807,0.03696140820381422,0.5090212516592096,1.2683102807084863,1.8488978354840495,0.2539162488555726,0.0015797087736446613,0.33333249658722797,1.9028397243001094,1.9426265786333632,0.4143797129052964,0.3869700173614746,0.18877463483379353,1.789388867393316,1.992338165841459,0.6021894666562513,0.2315560545781744,0.08209798098536236,1.6390764858256235,1.5582194073458149,0.8085754930035485,0.11202556648615325,0.6967795676976585,1.4589216088598744,1.7234275370085688,0.13392163974091276,0.03396018238946119,0.4991450394176702,1.257336799320755,1.8548542908535048,0.2615373405511585,0.0010052654290114704,0.3248985753018051,1.8978911350483647,1.9463625282037418,0.4236365014871015,0.37802419703756907,0.18217683726587053,1.7823559082360618,1.9936791546604438,0.6126496945200919,0.07440397054681891,0.07764439974658288,1.630287569802519,1.567619533073466,0.8197507064059169,0.17733014603881703,0.6859614692925136,1.4487871456664583,1.7312327764958915,1.0352686900218708,0.3186719445047065,0.48933361415923626,1.2463300307018246,1.8607001684412512,0.26925395444699596,0.49182922955420505,0.3165519802645752,1.8928264010793363,1.9499760631472287,0.4329678442915452,0.6887161998836491,0.17568482740017133,1.7752217491646636,1.994891608315216,0.6231600272240003,0.07876871935299679,0.07331012777174983,1.6214171243280762,1.576946235634744,0.8309492355560725,0.18384921128204257,0.014208399158167073,1.4385946306067083,1.738943428988444,1.0466324859501654,0.3270409100801228,0.4795882450190717,1.2352913986078498,1.8664347120667522,0.27706509237760113,0.5016572958905399,0.308293791130836,1.021000933256029,1.953466716043022,0.442372534283465,0.6995444328299534,0.1692994449962404,1.767987313002453,1.9959753699715201,0.6337191052271891,0.08325263198925081,0.06909572571100586,1.6124662968191046,1.9919756777878086,0.8421696318931023,0.19047384790125843,0.012361774345038379,1.428345382110815,1.746558497091867,1.0579902498366172,0.33549692478676607,0.46991019258779765,1.2242223309166138,1.8720571799508299,1.271102938757136,0.5115498242426136,0.3001250761203359,1.0096289306688466,1.9568340353654547,0.45184935494003586,0.710411530540084,0.16302151602106296,1.7606535355438817,1.9969302994417704,0.6443255626835314,0.9227959414885057,0.06500173870898696,1.6034362450900541,1.9904736257506463,0.8534104440275124,0.19720319898128058,0.010642903285142946,1.4180407259475962,1.7540769957759073,1.069340512522857,0.34403889481559957,0.002483365223342582,1.2131242594428295,1.8775668448116156,1.977257553931581,0.5215055349843514,0.29204689187909616,0.9982556825526834,1.9600775855424009,0.4613970804081303,0.7213160873247073,0.15685185254222445,0.783468558800853,1.9977562732031817,1.6585903125711128,0.9341401420642017,0.061028696334306076,1.594328137203248,1.988843453193357,1.8048720206217412,0.20403639406181806,0.00905200831923636,1.4076819950530066,1.9337553210638918,1.9135691983318455,0.35266571523902646,0.0033489065451658417,1.2019986197529295,1.882962993958625,1.9796060917071208,0.5315231403168605,0.28406028334273115,0.9868826600688366,1.9631969470116175,1.9998990233938185,0.7322566926490541,0.15079125262286697,0.7723792313809745,1.9984531844137492,1.6671060339308772,0.9454928617958196,0.05717711251105173,1.5851431513177907,1.9870853709832978,1.81156934387684,1.161274311604755,0.007589295234010085,1.3972705293577168,1.9296243413347558,1.9181353833911432,0.36137627015381535,0.0043433674597566085,1.1908468509793724,1.888244929384948,1.9818279147083078,0.541601344435011,0.04759090194493931,0.9755113343494175,1.9661917162750173,1.999672733464881,0.7432319313153763,0.1448405002184575,0.7613193473410195,1.9990209429260686,1.675535463268497,0.9568526321774656,0.05344748545231126,0.5582728592463843,1.9851996065332962,1.8181616883785896,1.1724881546677028,0.006254953235472649,1.3868076756137913,1.9253731121097846,1.922582805083291,0.3701694328254451,0.0054666193308275934,1.1796703956344854,1.822335134472421,1.9839227355361535,0.5517388436950507,0.05111929600019971,0.9641431763070558,1.9690615059508607,1.999317133085631,0.754240383646007,0.13900036507538172,0.7502903373077698,1.9994594752989956,1.9680471366122556,0.9682179837912251,0.049840297595724614,0.5480980109779744,1.9831864037722313,1.824648201388881,1.183679685907784,0.005049154924475219,1.3762947872204814,1.9210021832973105,1.9269108881219155,1.3905642297295295,0.006718516862623258,1.1684706994238738,0.883190631257931,1.9858902832197538,0.5619343267832362,0.05477043041539931,0.9527796564446338,1.6725236675085056,1.9988322682539676,0.7652806256669986,0.14696104990725178,0.7392936279143688,1.497832394881904,1.9651325006499334,0.9795874464972354,0.0463560155410806,0.5379816174895553,1.2998942006695806,1.8310280438592033,1.1948474576692851,0.003972056274385349,0.35824414745183353,1.087952062482032,1.9311190726574297,1.401008817134088,0.008098898118713671,1.1572492110594126,0.8719028900378893,1.9877303032513391,0.5721864748854546,0.05854383290613996,0.941422244665072,0.6618353762830194,1.998218201688506,0.7763512292923195,0.1529512697682187,0.7283306416157818,1.4879365657511032,1.962093022112544,0.9909595496238524,0.042995089989959934,0.5279249873647802,1.2890251301456588,1.8373003905391774,1.205990025369847,0.0030237966109110115,0.349563480730795,1.0766172957403872,1.9352068143494523,1.4114015329320826,0.009607584542941527,1.1460073820718526,0.8606317185355348,1.989442557619198,0.5824939618578155,0.06243901537230745,0.9300724100811932,0.6511541218157808,1.9974750128204652,0.7874507625085793,0.15905105773990436,0.7174027965047982,1.4779776206675224,1.958929094165096,1.0023328221578864,0.03975795568743701,0.5179294214567449,1.2781186734167522,1.8756047527162258,1.2171059476873263,0.0022044985940787853,0.34096694978378606,1.0652726183383008,1.9391735844372184,1.4217410327968005,0.011244380982518787,1.1347466666230612,0.8493785747082705,1.9910268248384624,1.6066823799741858,0.06645547396120888,0.9187316208256896,0.6405179915337755,1.9966027977833942,0.7985777895602649,0.1652596247977579,0.7065115061285971,1.467956847848425,1.9556411260704745,1.0137057929348816,0.30304304706433427,0.5079962127197186,1.2671762412633938,1.870054567447331,1.2281937867462338,0.0015142682023675524,0.026634362320518967,1.053919497741369,1.943018869807977,1.4320259792851577,0.013009075713270701,0.09861176751351497,0.8381449141815696,1.992482899979758,1.6156841651369134,0.07059268913274741,0.08163157021865663,0.6299283612500577,1.9956016694007352,0.809730871135459,0.1715761678463512,0.018060572543429076,0.43899277768808664,1.9522295431365038,1.0250769908294155,0.3112439589185094,0.0003424946594623446,1.256199249119636,1.8643918381986446,1.2392521083037285,0.0009531947189994616,0.02930470491693382,1.0425594025073386,1.7361902487716927,1.4422550420107016,0.014901440467022464,0.10359477579660892,0.8269321900606861,1.993810594695713,1.6246063098393393,0.0748501257266262,0.07719030961345685,0.6193866007627767,1.9944717571712312,1.7777907856792265,0.177999869823261,0.015972330840268945,0.42961424184824093,1.948694786660931,1.0364449449453927,0.31953396328350947,0.0007047849804778794,1.2451891168899643,1.8586172974599555,1.2502794819351395,0.4928432902559273,0.03210060965135775,1.0311938020961444,1.7284455733489947,1.4524268978156996,0.01692123046112637,0.10869373659028325,0.8157418527426918,1.9950097372453204,1.633447659977215,0.07922723303157253,0.2269075515908272,0.6088940736779911,1.9932132072521733,1.7848887719762647,0.1845298998047583,0.014011375854810826,0.42030948699368087,1.9450373138743444,1.0478081848063094,0.3279119878241976,0.0011963369187441009,0.2587942916113194,1.8527316921841797,1.2612744812189969,0.5026780867645426,0.03502171486573191,1.019824166679832,1.7206066714640107,1.4625402309422932,0.019068184430125368,0.11390799032976828,0.8045753497288635,1.5548319988571953,1.6422070718972928,0.08372344485657457,0.23417146759567775,0.5984521372332816,1.9918261824404966,1.7918852307261848,0.19116541311329116,0.012177961242039514,0.4110797167203435,1.9412575978810278,1.9045852940095878,1.338718400399549,0.001817086890649855,0.251207683459004,1.84673578369074,1.2722356839215427,1.532939165711367,0.038067642706967164,1.0084519669523861,1.712674557100517,1.4725937332026962,1.702273653788874,0.11923686253683075,0.7934341254374435,1.5453340788678118,1.6508834125452623,0.9239694935662954,0.24153444565260995,0.5880621421221887,1.9903108621517205,1.7987792569175756,1.1399510197842622,0.3992495497024523,0.4019261249247017,1.9373561275977647,1.9093750803576053,1.3493973538045851,0.0025669546004586374,0.24371793367683414,1.840630347567088,1.2831616721807009,1.5425281306822667,0.04123799917581972,0.12082530259188606,1.7046502562995824,1.4825861041484099,1.710324861319324,0.12467966390701946,0.7823196210168021,1.5357656183975803,1.6594755596123134,0.9353146438656651,0.24899553333992008,0.5777254323194968,1.341862718431357,1.805569958788962,1.1512031911565994,0.4083805186569227,0.3928498956493297,1.9333334076905948,1.9140472365080516,1.3600311116894817,0.0034458430506950632,0.23632601108478934,1.834416173568378,1.9798419072871314,1.5520469181295256,0.04453237417785694,0.11546286198037992,1.6965348070268487,1.492516051238443,1.7182841863520222,0.1302356903988292,0.7712332741590191,1.5261278551534931,1.6679824016803098,1.8509802541061355,0.2565537655451504,0.5674433449073877,1.331152688920125,1.8122564579441574,1.1624358039753395,0.41758801523787026,0.3838522029297451,1.9291899585095336,1.9186011581045257,1.3706182985480608,0.6058187388433844,0.22903287184862953,1.828094065515312,1.9820506001206852,1.5614942967714955,0.047950341576503464,0.11021483870947568,1.6883292590382655,1.5023822900065027,1.7261505993261232,0.13590422332476992,0.03294646381939237,1.5164220358070497,1.6764028383655538,1.856898369178769,0.26420816458992946,0.5572172099024847,1.3203998238869339,1.8188378894658865,1.1736474052707524,0.42687084842998635,0.37493421064254295,1.1094161316402005,1.77988814082792,1.3811575448982367,0.6162965323922025,0.22183945935621285,1.8216648411901617,1.627214183310096,1.5708690445634554,0.051491459248163673,0.10508191162558955,1.6800346737443022,1.4452516558101578,1.7339230826992158,0.1416845294443314,0.030113710751389466,1.5066494158329946,1.967751308863496,1.862705642062473,0.2719577403564375,0.5470483500838115,1.3096055142448022,1.8910392794553679,1.1848365447910065,0.43622781747296224,0.3660970723548458,1.098104186450219,1.7727190291434745,1.3916474874591613,0.6268239590524598,0.2147467040954656,1.8151293322309878,1.6183156736279622,1.580169948855687,0.055155269139411156,0.10006474468712556,1.671652124072652,1.4350392754422125,1.7416006310789438,0.14757586105882947,0.027406415174239473,1.4968112593469207,1.964823735408763,1.8684013215703374,0.27980149041548086,0.5369380808216871,1.2987711562677244,1.885819078214296,1.9546508996089722,0.44565771201681037,0.35734193117508606,1.0867795512106815,1.7654499641020167,1.4020867693275698,0.6373996570722185,0.20775552353402094,1.8084883840240629,1.6093371830925798,1.5893958065503346,0.8460736897652691,0.09516398687859051,1.663182694329445,1.4247706215332094,1.749182251353056,0.15357745610812346,0.02482492728415997,1.48690883894175,1.9617713593186061,1.8739846709503662,0.28773840015615915,2.2917268741262653e-5,1.287898151410059,1.88048429381009,1.957975256441289,0.45515931227842643,0.3486699196051424,1.0754436907946747,1.7580818859773406,1.412474040153298,0.6480222584555057,0.20086682200054196,0.8594662903664698,1.6002798730966878,1.5985454242570283,0.8573212562871688,0.09038027212664668,1.6546274800589895,1.4144470223621108,1.7566669628178697,0.15968853826919027,0.02236958100379438,1.4769434355231223,1.2092610368590073,1.8794549679807775,0.29576744291710777,1.0595000718649494e-5,0.28926102768680584,1.8750356163119606,1.961175696507997,0.4647313891993724,0.3400821593938468,0.1547333262479409,1.7506157478508582,1.9980130942665886,0.6586903891392684,0.19408149056774437,0.05967643523795341,1.5911449152285424,1.6076176184472528,0.8685872787016642,0.08571421921811095,0.6394199097801603,1.4040698133152016,1.7640537973051256,1.0846206536731973,0.02004069393901753,0.44746247356294977,1.198126153706808,1.8848115050634258,0.3038875801192995,0.00012762414535283373,0.2813064851468565,1.8694737505215062,1.9642518058232659,0.47437270460485803,0.02690487614711079,0.1487108113180069,1.9434098545649727,1.4330871810887262,0.6694026691711115,0.09912205185054423,0.05586717696974863,1.992626259175108,1.6166112156074406,0.8798702997174006,0.21340687769937283,0.0071110345748750525,1.9954907086931166,1.771341799307224,1.0959475405487904,0.3644226773096182,1.4568288438364503,1.9518694439783402,1.8900535893153312,1.3075443880301054,0.545117574411603,1.2550613439911418,1.8637994158815463,1.9672031864837947,1.5047800562346874,0.7470537892484145,1.0413834278606149,1.735393167214868,1.9991879915157749,1.6784443729041654,0.18082443532547143,0.8257730595387186,1.5726467922955079,1.9845144329559843,1.820427860243687,0.07673749790102413,0.618298441450562,1.3831599416383915,1.9238677114236076,1.9241004173787757,0.01576348605150535,0.42864786673919575,1.1757809465374203,1.8200798032913923,1.9846209214112673,0.0007496593904017246,0.265677312003025,0.9601936348977297,1.6779972179201206,0.4938580535506537,0.03239710779189697,0.13699689612077814,1.9507086454560802,1.5042546836938429,0.6909541290944938,0.10922801310084218,0.04861551599909819,1.9951264877319046,1.3069653308764517,0.902481497581887,0.22765465774514027,0.004660253431876815,1.9930756235394291,1.0953418385981029,1.1185626174968237,0.38214695780496255,1.4364778914640106,1.9446518206100334,0.8792662369983939,1.329107304065352,0.5654906973674607,1.2330028145458853,1.8521162904702382,0.6688284531664768,1.524283903362841,0.7691244055828855,1.0186473726400906,1.7197900982720276,1.9998459144931484,1.6949783939919638,0.9835391455163139,0.8034211677747124,1.553852385118701,1.9802724918912533,1.8332199779902627,1.1987225461422772,0.5973744633700023,1.362051825153299,1.9149239891902785,0.19185809884983074,1.404626342839331,0.4101288743098792,1.1533447912905872,1.806851938459354,0.33725789220751434,1.5916355939820834,0.2504280733060906,0.9374771259073882,1.6611029025874735,0.5136052775053779,0.03838997175497616,0.1257294938970721,0.7245290462447802,1.4844828195628867,0.7126654876209666,0.11979485478924445,0.0418560960331501,0.524444435747554,1.2852391904778244,0.9251431509734653,0.24230204494620822,1.6015574498453662,0.3465665016849794,1.0726759518969082,1.141116350810461,0.40019091200464296,1.415901107874605,0.19920148211527622,0.8567190166174959,1.350499941824326,0.5860886330034465,1.2108237307490923,1.8399922848617039,0.6474527704528575,1.543516488935146,0.7913144756571098,0.9959016693733792,1.7038146139628378,0.45464916891481066,1.711152837150273,1.0062851562730057,0.7811709847977476,1.5347714178191545,1.9755233633282971,1.8455809923858784,1.220962343463133,0.5766588014875753,1.3407563850811972,1.9055068904081,1.9405236596812419,1.4253214108910792,0.39191507789798496,1.1308292963074016,1.7932066129523603,0.35446175871997276,1.609819550044041,0.2355666589267662,0.9147929659020025,1.6438665363149028,0.5336041593659319,1.7658413839041809,0.1149144343377072,0.7027354871354126,1.4644602867339722,0.7345255114152018,0.13081710969103078,0.035592414357945024,0.5045591557023946,1.2633654689192535,0.9478435348795659,0.2573414608264577,0.0013046423511661187,0.32951806933610706,1.0499724630651546,1.163597071314376,0.4185452040677946,1.3951091393808417,0.18578599585654443,0.8342459290150919,1.37171123287604,0.6069007240630011,1.1885355679345266,0.08007468860857536,0.6262594937017022,1.562467862119521,0.8136125184530851,0.9731580865599851,1.6874749799134248,0.4357253502291949,1.726959333812773,1.0290279151250359,0.7590340227279055,1.5154137627825048,0.27154073457145367,1.8575045079109018,1.2430878161047691,0.5561621739707409,1.3192846395635351,1.8956212874312506,1.9480074102329321,1.4457964200264386,0.3740159012197879,1.1082461109788908,1.7791508867854207,1.9942418917873745,1.6276879888855176,0.22110075807763463,0.8921528915389386,1.626297037101802,0.5538443518228258,1.7802688628040184,1.1100209495489428,0.6810957310204551,1.4441974447534676,0.7565228902232946,1.896414082362003,1.3209761778895548,0.4849302139758318,1.2413554835417904,0.9705709042486671,0.2727651240763259,1.5169430123148753,0.31281654058376684,1.027243118760834,1.1859931476096621,0.43720033758647947,1.6887705303856997,0.17279177936432888,0.8118586016408681,1.3927302026172776,0.6279162024867486,0.0807762391522655,0.07139456596596716,0.605259588195729,1.5811282175815986,0.8360069970883279,0.18682389373066843,0.013359773195505742,0.4170934840876894,1.7423897057865991,1.0517556550963234,0.3308438485695032,1.4957894355510737,0.2561469466581787,1.8689843554051673,1.265087516471534,0.5061109073349479,1.2976476979612113,0.12993558070427857,1.9550006670589775,1.4660407765903332,0.7044407501362753,1.0856069197186884,1.7646920323125483,1.9964219988567695,1.6452316654763117,0.9165721108302792,0.8695686166658978,1.608403495308683,1.9913141286342588,1.7942926349633916,1.1325992437109262,0.659620974188549,1.4237047775023508,0.778646242724625,1.9062630920793544,1.3424344849980077,0.4655677664724017,1.2192206221886235,0.9933135000671206,1.9759144328537623,1.5362793092233709,0.2964705567054141,1.0044996790194154,1.208292992091852,0.4561466604990754,1.7050818839331758,0.16022555577348097,0.7895686175726492,1.4135459759507913,0.6491241949838297,1.8409597566030589,0.0631948985751607,0.5844639191684569,1.5994879005579532,0.8584863247849911,0.20027215645026475,0.009909555980349372,0.39876321051350616,1.7574359694836954,1.0744566169814724,0.3479191399576974,1.4759085896418835,0.2411380241494645,1.8800145952598624,1.2869500620416459,0.526015874780629,1.2758567551066538,0.11894887012953725,1.9614998118874554,1.486044006266036,0.7262459056789705,1.0629234359175834,1.7498375304640845,1.9980865627634654,1.6624415028163915,0.9392592347914847,0.8470518262602377,1.5901951689538736,1.98806638267463,1.8079054445611116,1.155108931766709,0.6383223275586304,1.4029928877719078,0.8008841224204895,1.9156432063475246,1.3637156184213997,0.44648183121402174,1.1969723373130718,1.016059555443198,1.980623835337248,1.5553381382201943,0.28048857502157776,0.9817539111692685,1.2304850669462792,0.47537437008419814,1.7210284320620421,0.14809382677772154,0.7673875095233782,1.434147782912017,0.6705137286576814,1.853049379365688,0.05547992889814968,0.563883246182594,1.617537411851418,0.8810388708647984,0.21413419387800214,0.0069716060168733,0.38074401348755105,1.7720903400514771,1.0971190554299182,0.36533181433152173,0.004834016427866739,0.22652173257777386,1.8905895204906509,1.3086641412564468,0.5461660789586035,1.2539230855116763,0.10841801047590582,1.9675014820972234,1.5057957594945217,0.7481927000571691,1.0402073958830773,0.031947851819873696,1.9992347222714177,1.679308596632285,0.9619777856844883,0.8246141703832305,1.5716814789234714,1.984307416701327,1.8211002484057182,1.177538367329735,0.6172108109312027,1.3820724917779086,1.923416615047925,1.924549571947915,1.384808567420462,0.4276822831567221,1.1746221400531498,1.0387973016952152,1.9848258685393771,1.574109638373943,0.2648788645200889,0.9590175837433128,1.25255789011768,1.999114459274622,1.7366019241175907,0.13640286926570078,0.7453267538741559,1.454524964241394,0.6920737366833527,1.864697639156121,0.04825364861704462,0.5435282175631013,1.6352674127459195,0.9036529667666922,1.9524151899380056,0.004547443383937533,0.3630452160414659,1.7863452354006708,1.1197312450229069,0.3830728624707581,0.007325170823490601,0.21230563433052163,1.9007036596904332,1.3302185193729403,0.5665510942660614,0.05645712139362169,0.09834845035120121,1.9730025724577223,1.525285816829271,0.7702697781223521,1.0174705527670844,0.026495040830556205,0.4728545887677085,1.6958242199840994,0.9847160090582717,0.8022672581523862,0.00010069279684321586,0.3026068189274893,1.8338702195795866,1.1998759455356387,0.596297347286754,1.3609544136160951,0.1649247172950521,1.9329775807768366,1.405702418621494,0.40917884908139857,1.1521815942757685,0.0662375260276209,1.9885183583517,1.5925840974155498,0.2496495015777539,0.9363024603900454,1.660219338441876,1.9978990045271205,1.751794302462236,0.12515873207337136,0.723397764736425,1.4834528333006056,1.9606814780098727,1.8758985092299678,0.041519796568799006,0.5234093648878073,1.2841108786271687,0.9263169120840813,1.9591015127605143,0.002638322329713949,0.34567597543394435,1.0715020024255273,1.1422814863401614,1.9975180421903151,0.01032992961720336,0.19849708473733718,0.8555542486002179,1.3516020442765837,0.5871603736102298,0.06423544897319544,0.08874539968944695,0.6463515742247461,1.5445040942237538,0.7924657173179499,0.1618376930985317,0.021545915855928688,0.45366296624477553,1.711979827780793,1.007462140283385,0.7800226517349605,3.65992416851979e-5,0.2864862661150288,1.8462087509711385,1.2221101090465365,0.5755927571342683,0.025221854947377498,0.15262800406300925,1.9409228722297134,1.4263863616628796,0.390981102561231,1.1296623105936567,0.058338863156986,1.9916993943006644,1.6107519567633548,0.23480836578168163,0.9136202937870951,0.00802179565069372,1.9961672424224566,1.7665977066444927,0.11436723285435457,0.7016118880463729,1.4634176106511245,1.954117784702083,1.8866461943197714,0.03528185681075624,0.50353709753843,1.2622298279405713,1.8675145744486439,1.9652916018308522,0.001245230622745841,0.32864527841281677,1.0487968874013116,1.1647581120130948,1.998861481100263,0.01384673816363069,0.18510322826445835,0.833085313678057,1.3728036522513296,1.985788243600136,0.07249793589161524,0.07961382705528275,0.6251680351118141,1.5634406482488603,0.8147690335893101,0.17446003097499863,0.0171030375455401,0.43475401544386894,1.7277670612013554,1.0302044106389003,0.31497177273285304,0.0004898811507398904,0.2707348813131285,1.8581094586933213,1.244229354030729,0.5551077529127539,0.030550130496311056,0.14076971635676694,1.948381335457238,1.4468496947883105,0.3730984590083699,0.10588008372080804,0.05092741048568017,1.9943673305360825,1.628603816468663,0.22036313585242928,0.8909828195604522,0.005403265293612458,1.9939200689646457,1.7810044774659297,0.10403395506991897,0.6799803956946082,0.006323089073509536,1.9470604361951132,1.8969351336334488,0.029543056818017388,0.48392169731482015,1.2402131010093647,1.8559766028241116,1.970982254431596,0.00036888904088183683,0.31196193656535787,1.0260665251407945,1.7249218451628479,1.999688114673059,0.017873776885723114,0.1721309948182247,0.8107027394799529,1.3938123737039312,1.9817122574310801,0.08124030718441566,0.07095845707325676,0.604178431958627,1.5820856812375739,1.9178940883932691,0.1875094986087913,0.013168704619750282,0.4161375197502517,1.7431777520196161,1.052931053401482,0.3317189750953021,0.0014603039984858457,0.2553608142000843,1.8695661853865981,1.2662222361147193,0.5071346903539413,0.03637999397924818,0.12935598958798356,1.9553491114923007,1.4670818303838127,0.3555401708024547,0.11629715489339754,0.044007002657814986,1.9965207866826853,1.6461304400792254,0.20632128567107555,0.23747995250872123,0.0032993337177796844,1.9911586468286524,1.795007160943995,0.09416424510012844,0.6585144796941469,0.009133879530554112,1.939513083921563,1.9067600037314127,0.024306365813564046,0.4645733131152162,0.06123818850320806,1.843995753698357,1.9761705262509552,9.75099834921167e-6,0.2956345817592202,1.0033226762061305,1.7090669602866977,1.9999975152131213,0.02240896221619526,0.1595870961595829,0.7884181066244633,1.541027376588438,1.977128338837171,1.841596052328474,0.06278376798333163,0.583393624668324,1.6004295463542297,1.9086309026178196,1.9379766536462073,0.009744952680384333,0.39782311123455183,1.758203926830439,1.7977037821097823,1.9905572332282646,0.0029473656935754544,0.2403720192321328,1.8805730034047305,1.2880773763044668,1.996882473535968,0.0427084290574673,0.11839272915497745,1.961822595246597,1.4870723004557196,1.9566570093681857,0.12717144896971178,0.037581220253649295,1.998158648554321,1.663322759418127,0.940434115213785,0.25239231648726,0.0017110894856116055,1.987884404758827,1.808598512168666,1.156271591005468,0.41252368274731444,0.012457338569930698,1.9314796328392374,1.9161157212808888,1.3648117646136684,0.44550195568526085,0.06931815763571014,1.8315782258956306,1.9808537329061426,1.5563165854149577,0.2796716616763548,0.1696383578770153,1.6928452081357472,1.9997895226383426,1.7218434904137896,0.1474780224314587,0.7662429450558441,1.521758895591993,1.972038859512221,1.8536629886802944,0.05509398932386789,0.5628243671838118,1.3263083828531972,1.898897596301275,1.9456195998335746,0.00683355315752443,0.3798202656691828,1.7728378111751164,1.783781158012045,1.9934192920855303,0.004950296838614698,0.22577625152785974,1.8911242178817091,1.632065054237016,1.99482999755744,0.049532161434095334,0.10788560738730746,1.967798437375881,1.506810762046754,1.9497858415496592,0.13849733965088673,0.03165338793701755,1.9992800687304282,1.6801718792756108,1.8603902186451307,0.2676914884949858,0.0006393543457804407,1.984099036829682,1.8217714990509244,1.17869655781668,0.4310817216408145,0.016291746652542183,1.9229642394107422,1.9249974456860048,1.385894678360232,0.6210383227885428,0.07787965634205729,1.8187304441752852,1.9850294513322586,1.575072952424497,0.2640814354422275,0.182527157054571,1.6762649817537247,1.9990642445629172,1.7373974580949778,0.13581003880079356,0.32534759965230964,1.5022204594645807,1.9664464527243344,1.8652882445818952,0.04789309974328482,0.5424813019237342,1.3047241092912996,1.8886992054018212,1.952773287735027,0.004436012392981192,0.36213829762563254,1.0929982763708097,1.7694530099319703,1.9957673613637663,0.0074680611282446074,0.21158106285574596,1.9012143696782453,1.6142762202105554,1.9922628021087703,0.056847660548210444,0.09784006061094097,1.9732735460128974,1.430415015272257,1.942423259855083,0.15026896698450398,0.026226572735167375,1.9998844669944877,1.69666908201141,1.8485760558910558,0.2833695528259703,8.468280804641015e-5,1.9798045015693875,1.8345193059611198,1.7151035056586323,0.4499341156658543,0.020635119877117525,1.9139713094529551,1.9334005815922872,1.4067779323610463,0.6421847098117763,0.086918254950759,1.805459055907641,1.9886955210359711,1.5935317799085986,0.8511439474262517,0.19583891210359106,1.6593348596569188,1.9978220562416593,1.7525699004604376,0.1245891822169829,0.34231090168237144,1.4824221772836474,1.960354011953468,1.8764658051909695,0.04118482494152953,0.5194945264491365,1.282982173181571,1.878041006509803,1.959434016072502,0.002553570860920895,0.3447863556551559,1.07032795389836,1.7547267511731426,1.9976002261850765,0.010499355885319916,0.19779379772692374,0.854389680691846,1.5961695631074249,1.9891822154425096,0.06465114140153438,0.08826128633552965,1.978245088367095,1.4097734733795528,1.9345730736429987,0.16248024039649667,0.02130358245189634,1.9999715306342218,1.204242486241433,1.8363228446373019,0.29941839773751855,4.736185635723089e-5,1.97500302094644,1.8468353372553388,1.6990194487635815,0.46907111069933016,0.025485211006671116,1.9045054958574803,1.941320781264272,1.5290744440283963,0.6635162284625505,0.09642927694150738,0.05794337747745271,1.9918500452133445,1.6116835173732829,0.8736738870973919,0.20956673559655292,0.00787369787998049,1.996063600375851,1.7673529673734476,0.11382125828839129,0.35961448836914345,0.004132627239318287,1.9537646893943619,1.8871898873002473,0.034972635742421376,0.5395658631771101,0.046894859642721665,1.8669285141176464,1.9655983386224545,0.001187202526051534,0.32777341755536527,0.13416355785393919,1.739610001019384,1.9989169382354652,0.014042612734907367,0.1844215895951683,0.26186359818664406,1.5777544512106205,1.9855898314369487,0.07293856651676967,0.079154240565247,0.6240770957979429,1.388919916986267,1.9262393445557953,0.1751248418423791,0.016886964214810507,0.4337834637259198,1.1819242688885385,1.82363692462676,0.31582971964713946,0.0005274108003643363,0.2699300383472052,1.858713220687954,1.6825737231199307,0.48848280536717037,0.030839510631211042,0.1401681653164637,1.9487539468349981,1.5096368669836007,0.6850218419325624,0.10640780136478178,0.05055724156763253,1.9944913917312328,1.6295187732112273,0.8962691871919795,0.223703524834451,0.005281764009771206,1.9937897867807108,1.7817390101579658,1.112360375672855,0.37724940693376596,0.006455929082011647,1.9466818943256108,1.897454942329695,0.02925974629786643,0.5598754259492545,0.05402490764176737,1.8553674777666902,1.9712630659989143,0.00033761433969847765,0.7630536259117742,0.14576740528180365,1.7241105807925774,1.9997168162554908,0.01809599841575349,0.17147135716608874,0.27739938851887924,1.5590404123959218,1.9814875087714563,0.08170564802656743,0.07052363523457894,0.44277413322667214,1.3678651356057068,1.9174263844182367,0.18819622907616707,0.012979003157454816,0.4151823642706799,1.1595119249376142,1.8105248594834076,0.3325950274287731,0.001524581265431979,0.2545757133329605,0.9437101005410161,1.6657748376540396,0.5081591561672503,0.03669524846609307,0.12877760462430154,1.955696232426222,1.489935606677562,0.7066904233378243,0.11684866538792082,0.04366234202457819,1.996618193971738,1.2912182047592595,0.9189181570282685,0.23824196552169297,0.0032044917848943477,1.9910017919146603,1.7957205855560106,1.134932111271991,0.3952065331681215,0.009293285063603829,1.9391092913457233,1.9072556591973204,1.3446452376821212,0.5804127067115157,0.06164439785656972,1.8433638790724056,1.9764252673036573,5.245874032056008e-6,0.7852120465609241,0.15781322787086183,1.7082365098059578,1.9999994463927446,0.022657415728804198,1.0000411851186715,0.2933090483612605,1.5400371292022208,1.9768773699648086,0.0909478498920463,0.062373935770396294,0.46180470836990084,1.3466200228638612,1.9081387530065501,0.20168763903529974,0.00958172123699741,0.6554320871476609,1.1370170504099213,1.7969934333163287,0.3497056468060513,0.003038357321145435,0.23960706667060083,0.9210158912177683,1.6486314840151821,0.5280899826658445,0.04304939478535097,0.11783780952105827,0.7087029961929445,1.4699808564320445,0.7285107614756511,0.12774646696634295,0.037262246230705176,1.9982293515392904,1.2693838705391833,0.9416090781560896,0.2531745355504761,0.001642955974367144,1.9877010582706316,1.0562076596315093,1.1574340337523132,0.4134765761556478,0.012643227151997616,1.9310507984770777,1.9165869670670954,1.3659074054114728,0.6011670795898265,0.06974938800555719,1.8309239286295427,1.981082271642634,1.5572942619127483,0.8074815972944687,0.17029479317995733,1.6919960012149668,1.9997646824159763,0.027724504622283486,1.0227860085004479,0.3095843461448723,1.5207544338218326,1.9717618002770094,0.10066039024971296,1.237026397842227,0.4811137427433704,1.3251955708631002,1.8983812556892214,0.21559209133980994,0.0066968761880809025,0.6768731980089322,1.1144512840275793,1.7830496472096522,0.3671527248403198,0.005067955748249919,0.8877214733379478,0.8983625478301294,1.631152532078536,1.9947097778691818,0.04989866198925941,0.10735444019546225,0.6870199026967733,1.4497829407230876,1.9494168958827816,0.13909556763853426,0.031360265559739475,0.4902922642498052,1.247410158612917,1.8597897753903037,0.268493508892683,0.0005979645080741447,1.9838892936297299,1.0334842421227513,1.7300136696285067,0.4320500830784072,0.01650402210591495,1.9225105851387605,0.8179947360410131,1.5661486401469413,0.6221278063878748,0.07833568461221074,1.8180540627988022,1.9852316695078767,1.3758465744687243,0.8298507559715578,0.18320564331709033,1.6753974577678092,1.9990126457907524,1.1679938713977573,1.0455190425290173,0.3262168611217755,1.5012023030133728,1.9661434464751704,1.865877651274703,1.2590617590689206,0.5006912459608177,1.3036028644949218,1.888158940940725,1.9531300656010817,1.460507254815543,0.6984814928681907,1.0918263011917566,1.7687007156002306,1.9958748502034482,0.007612326443883988,0.9103515328223777,0.8757617910911196,1.6133470253559592,1.9921159825929777,0.05723950630531993,1.1264078228241388,0.6654987433504007,1.4293523098391803,1.9420289879092358,0.15089009544335663,0.025959453663431886,0.47085566040828275,1.2253084380559685,1.8479527425488729,0.2841909595972857,7.0058058748379e-5,0.3009216504322483,1.0107435000546152,1.7142802573353215,0.450917444107921,0.020873672371665042,1.9134930699893313,0.79567688055183,1.5472535402493297,0.643284042142986,0.08739884517474572,1.8047609403766998,0.5901513909248706,1.3546721178679895,0.8523079489147489,0.1965390982806947,1.6584494674579209,1.9977437256166124,1.145528826477151,1.0682285252598682,0.3431979877218556,1.481390852939838,1.9600252154640883,0.9295898800579189,1.2809630831921002,0.5205270887317035,1.2818530757046913,1.877477097729471,1.9597651902260376,1.480577709937454,0.720245791714673,1.0691538079418828,1.7539540625449312,1.997681028147566,1.6577511447201758,0.9330279759217346,0.853225314505722,1.595224176316927,1.9890088720627779,0.06506812962178876,1.1489375046089678,0.644150653081164,1.4086995344743396,1.9341536794122791,0.16312394795816798,1.3578922056746698,0.45169283288509776,1.2030901441747945,1.8356769837065965,0.30025876589118805,5.9509762231013674e-5,0.2848389184409521,0.9879971993597098,1.698177280436635,0.4700688973772411,0.02574991711666874,0.151380367085034,0.7734647407005331,1.5280752944343636,0.6646248407372455,0.09693418046463653,1.7910514391503412,0.5695106362494728,1.333314155899472,0.8748415568981633,0.2102882594158335,1.6411607990805868,0.38565878425422107,1.1229884857566204,1.0909027069337982,0.3605189400052964,1.461330333934562,1.9534102727822287,0.9069197106778012,1.3027190385893013,0.5406110081020497,1.2599574577113402,1.8663412527813241,0.6951974389790255,1.5003995168432596,0.7421548338220259,1.0464455348990096,1.7388173178794704,1.9989710115142798,1.674713198462082,0.9557390699713368,0.8307647783207279,1.5767933616220529,1.9853900538801719,1.8175202827225299,1.1713901269628944,0.622986677271429,1.387835300258893,1.9257950450324295,0.17579079545618115,1.3790379023620227,0.43281369641990775,1.1807667725902369,1.8229688502723604,0.3166886143813863,1.568986017223157,0.2691262067886785,0.9652571088466453,1.6817130705225254,0.4894945340316855,0.031130233399199514,0.1395678054500522,0.7513698089239033,1.5086238254190383,0.6861391605609595,0.10693675695279758,1.250747779851971,0.5490926143603355,1.3117837390531,0.8974399211592083,0.22444601298352462,1.6235403976960168,0.3678711179476978,1.1003845114822388,1.1135298560561746,0.3781707562083757,1.441031125197748,0.21616768967248146,0.8842977005181716,1.324318368851025,0.5609326127644345,1.2379273391850125,1.8547571677201047,0.6736137566856812,1.5199624198410597,0.7641972835745439,0.1463799147594561,1.7232983132707793,0.478170836705779,1.6913261593731903,0.9784730643782948,0.27821351687980267,1.5580641172716554,1.9812614004014235,1.8304075380498785,1.193754073024837,0.4437518637038548,1.3667704022307936,1.9169574094803106,1.9307119726793296,1.399987486961133,0.6352649300110529,1.1583498732897526,1.8098349173632444,0.333472004356271,1.5875429726624437,0.8438097677713865,0.9425349941109192,1.6648961460830098,0.5091843033556238,1.7476623863962688,1.0596481085628668,0.7294035170159205,1.4889091972845028,0.7078158702255213,0.11740139936216398,1.2727011044938015,0.5289078894276521,1.2900920070459885,0.9200913494307559,0.23900503384134908,1.4730199729198135,0.3504105115851146,1.077728598823724,1.1360982654667429,0.39614430338023243,0.009454063078952357,0.20224654726756885,0.8617355540804136,1.3457498986047405,0.5814813884343979,0.0620519071672595,0.09133470264144805,0.6521989448070133,1.539256297194387,0.7863617363321526,0.15844843930746044,1.707405078164943,0.45890335146713945,1.7075814320005502,1.0012181967012026,0.2941422999117963,1.5390461336718866,0.2908749594746669,1.842865145166944,1.216017771814331,0.4627970902855192,1.345515739250327,1.9076453452990705,1.9387901903589848,1.4207301202742377,0.6565372588832052,1.1358510446515155,1.7962819804025911,1.9908772246761066,1.605795936657648,0.8663158602796511,0.9198426114474624,1.647735208100627,0.5291280179726616,1.762573335531045,1.082337013878974,0.7075772302130167,1.4689416102689612,0.7296437543227305,1.8837413953644269,1.2945133351111688,0.5089669049150776,1.2682501830588147,0.9427841219906559,0.2539577892334388,1.4929369787802593,0.333285999186432,1.0550324698234226,1.158596258396847,0.4144302821082033,1.6683422985913265,0.1887381580320442,0.8392449448927566,1.3670025392969596,0.6022467032904715,0.07018190710442884,0.08207322811365747,0.6309640832467749,1.5582711663591353,0.808636724331106,0.17095237792066176,0.018272065010884186,0.43991582660455597,1.7234706059571272,1.0239626987359582,0.310436289765334,1.5197492506209687,0.27502141811321157,1.854886658577561,1.2381697042182895,0.4821202626445782,1.3240823083611033,0.1439808134677334,1.9463826832509457,1.4412550701790092,0.6779872934543765,1.1132819274434795,1.7823170516040938,1.9936861558650405,1.6237354652274067,0.8888911202132368,0.8971917017679977,1.6302391355485946,1.9945881801529541,1.7770897334920805,1.10498331848515,0.6859022413137663,1.448731395490126,0.7516115192275814,1.8941568009130947,1.31617318617809,0.4892799781763384,1.246269567929005,0.965506497725455,1.9694700707711816,1.5125989418081072,0.3165064408784757,1.032307867331391,1.1810121945109233,0.43301923132928777,1.6850882330222965,0.1756495111308568,0.816837509470457,1.3880652949303935,0.6232178134750255,0.07879298971630455,0.073286683757669,0.6099201588034315,1.5769971891484738,0.8310107226173433,0.18388526113123782,0.014197922147597963,0.4212180861570711,1.7389854602732875,1.0466948026045684,0.3270870560213044,1.5001834522181385,0.25954297661047476,1.8664658584180058,1.2601984089509273,0.5017113830798543,1.3024811991002467,0.13244445656930093,1.9534855230419046,1.4615517171812977,0.69960393559679,1.0906541988005114,1.7679473563437158,1.9959809594011197,1.6413522765600912,0.911523867259065,0.8745939845263586,1.6124169807968816,0.35697140099414104,1.7912040695763558,1.1275753053102007,0.6643897648360557,1.4282890095999552,0.7737077989415215,1.9041095747398409,1.3376694510089089,0.4698572951170913,1.2241615343037462,0.9882467202051832,1.9747965248133887,1.5319956890137836,0.3000805183107562,1.0095665489297119,1.713456019478988,0.4519015332252483,1.7014797066376826,0.16298737855662326,0.7945248412951308,1.5462680414388104,0.644383868653079,1.8382072305061892,0.0649796156823319,0.589078059485654,1.3535713772330282,0.8534721550094355,0.19724039753783384,0.010633827759349956,0.4028198042308935,1.1443642445121516,1.0694027468437803,0.34408598366648335,0.002487760991717658,0.24444764342541747,0.9284158384099955,1.2820924884837666,0.5215603152553356,1.2807235877607326,0.12135696805112373,0.715810146458969,1.481609559909596,0.7213760009808445,1.0679795661827063,0.03929565491911935,0.5164750638709457,1.6586372558161644,0.9342023913605473,0.852061151654909,1.59427796492856,0.33971879774905367,1.8049090411054145,1.1501012853866475,0.6430509312147547,1.407625029374441,0.19379520842975273,1.9135945673352186,1.3589910075565705,0.4507089049247929,1.2019375207558411,1.8350299650650865,1.979618624592074,1.551117184628898,0.2840167301636325,0.9868202808491846,1.6973341448850352,1.9998981349212297,1.7175082385808214,0.15075831162583497,0.7723184848163512,1.527075413267623,0.6657339176262028,1.8503943259398126,0.057156321918152564,0.5684485688789227,1.332204219849888,0.8760094000880366,1.9435701605806075,0.0075816258886194365,0.3847304999940697,1.121820324710265,1.0920747824903991,0.3614242775508937,0.004349177491784761,0.22974322879890297,0.9057478734115786,1.3038406149426536,0.5416567894446596,0.04760992004749598,0.11072408451767601,0.6940766459356376,1.501418220548391,0.7432922248618241,1.0452697613180129,0.03323081859997412,0.4966909014782578,1.6755814598441465,0.9569149587763031,0.829604861515203,0.0008820783952483424,0.32280782030073685,1.8181975572037294,1.1725496038985337,0.6218967810428908,1.386750146241243,0.18054709568694882,1.9226068712171704,1.3801268241671085,0.43184471486930653,1.1796090258654552,0.07655177446113481,1.9839338751798132,1.5699535352986909,0.26832338775114195,0.9640808318815455,1.6808514735092719,1.9993148260591362,1.7331655357790376,0.13896863758924494,0.750229929478615,1.5076100792289933],"x":[-1.8110048645192806e18,-4.208856674911989e297,-8.417713349823978e297,-1.2626570024735968e298,-1.6835426699647956e298,-2.1044283374559944e298,-2.5253140049471936e298,-2.9461996724383924e298,-3.367085339929591e298,-3.78797100742079e298,-4.208856674911989e298,-4.629742342403187e298,-5.050628009894387e298,-5.4715136773855865e298,-5.892399344876785e298,-6.313285012367983e298,-6.734170679859182e298,-7.155056347350382e298,-7.57594201484158e298,-7.996827682332778e298,-8.417713349823977e298,-8.838599017315177e298,-9.259484684806374e298,-9.680370352297573e298,-1.0101256019788774e299,-1.0522141687279974e299,-1.0943027354771173e299,-1.136391302226237e299,-1.178479868975357e299,-1.2205684357244769e299,-1.2626570024735966e299,-1.3047455692227165e299,-1.3468341359718365e299,-1.3889227027209564e299,-1.4310112694700763e299,-1.473099836219196e299,-1.515188402968316e299,-1.557276969717436e299,-1.5993655364665556e299,-1.6414541032156758e299,-1.6835426699647955e299,-1.7256312367139154e299,-1.7677198034630353e299,-1.8098083702121553e299,-1.851896936961275e299,-1.893985503710395e299,-1.9360740704595147e299,-1.978162637208635e299,-2.020251203957755e299,-2.0623397707068744e299,-2.1044283374559947e299,-2.1465169042051143e299,-2.1886054709542346e299,-2.230694037703354e299,-2.272782604452474e299,-2.314871171201594e299,-2.356959737950714e299,-2.3990483046998335e299,-2.4411368714489538e299,-2.4832254381980733e299,-2.5253140049471932e299,-2.567402571696313e299,-2.609491138445433e299,-2.6515797051945534e299,-2.693668271943673e299,-2.735756838692793e299,-2.7778454054419128e299,-2.8199339721910327e299,-2.8620225389401526e299,-2.9041111056892726e299,-2.946199672438392e299,-2.9882882391875124e299,-3.030376805936632e299,-3.072465372685752e299,-3.114553939434872e299,-3.1566425061839917e299,-3.1987310729331113e299,-3.2408196396822316e299,-3.2829082064313515e299,-3.3249967731804714e299,-3.367085339929591e299,-3.409173906678711e299,-3.451262473427831e299,-3.4933510401769515e299,-3.535439606926071e299,-3.5775281736751906e299,-3.6196167404243105e299,-3.6617053071734305e299,-3.70379387392255e299,-3.74588244067167e299,-3.78797100742079e299,-3.83005957416991e299,-3.872148140919029e299,-3.914236707668149e299,-3.95632527441727e299,-3.99841384116639e299,-4.04050240791551e299,-4.082590974664629e299,-4.124679541413749e299,-4.1667681081628696e299,-4.2088566749119895e299,-4.250945241661109e299,-4.2930338084102286e299,-4.3351223751593485e299,-4.377210941908469e299,-4.419299508657588e299,-4.461388075406708e299,-4.503476642155828e299,-4.545565208904948e299,-4.587653775654068e299,-4.629742342403188e299,-4.671830909152308e299,-4.713919475901428e299,-4.756008042650548e299,-4.798096609399667e299,-4.8401851761487876e299,-4.8822737428979075e299,-4.9243623096470275e299,-4.966450876396147e299,-5.0085394431452666e299,-5.0506280098943865e299,-5.092716576643507e299,-5.134805143392626e299,-5.176893710141746e299,-5.218982276890866e299,-5.261070843639986e299,-5.303159410389107e299,-5.345247977138226e299,-5.387336543887346e299,-5.429425110636466e299,-5.471513677385586e299,-5.513602244134706e299,-5.5556908108838256e299,-5.5977793776329455e299,-5.6398679443820654e299,-5.6819565111311846e299,-5.724045077880305e299,-5.766133644629425e299,-5.808222211378545e299,-5.850310778127665e299,-5.892399344876784e299,-5.934487911625904e299,-5.976576478375025e299,-6.018665045124145e299,-6.060753611873264e299,-6.102842178622384e299,-6.144930745371504e299,-6.1870193121206245e299,-6.229107878869744e299,-6.2711964456188636e299,-6.3132850123679835e299,-6.3553735791171034e299,-6.3974621458662226e299,-6.439550712615343e299,-6.481639279364463e299,-6.523727846113583e299,-6.565816412862703e299,-6.607904979611822e299,-6.649993546360943e299,-6.692082113110063e299,-6.734170679859182e299,-6.776259246608303e299,-6.818347813357422e299,-6.860436380106541e299,-6.902524946855662e299,-6.944613513604781e299,-6.986702080353903e299,-7.028790647103022e299,-7.070879213852141e299,-7.112967780601262e299,-7.155056347350381e299,-7.197144914099502e299,-7.239233480848621e299,-7.28132204759774e299,-7.323410614346861e299,-7.36549918109598e299,-7.4075877478451e299,-7.449676314594221e299,-7.49176488134334e299,-7.533853448092461e299,-7.57594201484158e299,-7.6180305815907e299,-7.66011914833982e299,-7.70220771508894e299,-7.744296281838059e299,-7.78638484858718e299,-7.828473415336299e299,-7.87056198208542e299,-7.91265054883454e299,-7.954739115583659e299,-7.99682768233278e299,-8.038916249081899e299,-8.08100481583102e299,-8.123093382580139e299,-8.165181949329258e299,-8.207270516078379e299,-8.249359082827498e299,-8.291447649576617e299,-8.333536216325739e299,-8.375624783074858e299,-8.417713349823979e299,-8.459801916573098e299,-8.501890483322217e299,-8.543979050071338e299,-8.586067616820457e299,-8.628156183569578e299,-8.670244750318697e299,-8.712333317067816e299,-8.754421883816938e299,-8.796510450566058e299,-8.838599017315177e299,-8.880687584064297e299,-8.922776150813417e299,-8.964864717562537e299,-9.006953284311656e299,-9.049041851060776e299,-9.091130417809896e299,-9.133218984559015e299,-9.175307551308136e299,-9.217396118057257e299,-9.259484684806376e299,-9.301573251555497e299,-9.343661818304616e299,-9.385750385053735e299,-9.427838951802856e299,-9.469927518551975e299,-9.512016085301096e299,-9.554104652050215e299,-9.596193218799334e299,-9.638281785548455e299,-9.680370352297575e299,-9.722458919046696e299,-9.764547485795815e299,-9.806636052544934e299,-9.848724619294055e299,-9.890813186043174e299,-9.932901752792293e299,-9.974990319541414e299,-1.0017078886290533e300,-1.0059167453039654e300,-1.0101256019788773e300,-1.0143344586537894e300,-1.0185433153287014e300,-1.0227521720036133e300,-1.0269610286785253e300,-1.0311698853534373e300,-1.0353787420283493e300,-1.0395875987032613e300,-1.0437964553781732e300,-1.0480053120530852e300,-1.0522141687279972e300,-1.0564230254029093e300,-1.0606318820778214e300,-1.0648407387527333e300,-1.0690495954276452e300,-1.0732584521025573e300,-1.0774673087774692e300,-1.0816761654523811e300,-1.0858850221272932e300,-1.0900938788022051e300,-1.0943027354771171e300,-1.098511592152029e300,-1.1027204488269411e300,-1.1069293055018532e300,-1.1111381621767651e300,-1.1153470188516772e300,-1.1195558755265891e300,-1.123764732201501e300,-1.1279735888764131e300,-1.132182445551325e300,-1.1363913022262369e300,-1.140600158901149e300,-1.144809015576061e300,-1.1490178722509731e300,-1.153226728925885e300,-1.157435585600797e300,-1.161644442275709e300,-1.165853298950621e300,-1.170062155625533e300,-1.174271012300445e300,-1.1784798689753568e300,-1.1826887256502689e300,-1.1868975823251808e300,-1.1911064390000929e300,-1.195315295675005e300,-1.1995241523499169e300,-1.203733009024829e300,-1.2079418656997409e300,-1.2121507223746528e300,-1.2163595790495649e300,-1.2205684357244768e300,-1.2247772923993887e300,-1.2289861490743008e300,-1.2331950057492127e300,-1.2374038624241249e300,-1.2416127190990368e300,-1.2458215757739487e300,-1.2500304324488608e300,-1.2542392891237727e300,-1.2584481457986848e300,-1.2626570024735967e300,-1.2668658591485086e300,-1.2710747158234207e300,-1.2752835724983326e300,-1.2794924291732445e300,-1.2837012858481567e300,-1.2879101425230687e300,-1.2921189991979807e300,-1.2963278558728926e300,-1.3005367125478046e300,-1.3047455692227166e300,-1.3089544258976285e300,-1.3131632825725406e300,-1.3173721392474525e300,-1.3215809959223644e300,-1.3257898525972767e300,-1.3299987092721886e300,-1.3342075659471005e300,-1.3384164226220126e300,-1.3426252792969246e300,-1.3468341359718364e300,-1.3510429926467485e300,-1.3552518493216605e300,-1.3594607059965723e300,-1.3636695626714844e300,-1.3678784193463964e300,-1.3720872760213082e300,-1.3762961326962206e300,-1.3805049893711323e300,-1.3847138460460444e300,-1.3889227027209562e300,-1.3931315593958682e300,-1.3973404160707806e300,-1.4015492727456924e300,-1.4057581294206044e300,-1.4099669860955162e300,-1.4141758427704283e300,-1.4183846994453403e300,-1.4225935561202524e300,-1.4268024127951642e300,-1.4310112694700762e300,-1.435220126144988e300,-1.4394289828199004e300,-1.4436378394948124e300,-1.4478466961697242e300,-1.4520555528446363e300,-1.456264409519548e300,-1.46047326619446e300,-1.4646821228693722e300,-1.4688909795442843e300,-1.473099836219196e300,-1.477308692894108e300,-1.48151754956902e300,-1.4857264062439322e300,-1.4899352629188443e300,-1.494144119593756e300,-1.498352976268668e300,-1.50256183294358e300,-1.5067706896184923e300,-1.510979546293404e300,-1.515188402968316e300,-1.519397259643228e300,-1.52360611631814e300,-1.5278149729930523e300,-1.532023829667964e300,-1.536232686342876e300,-1.540441543017788e300,-1.5446503996927e300,-1.5488592563676117e300,-1.553068113042524e300,-1.557276969717436e300,-1.561485826392348e300,-1.5656946830672597e300,-1.5699035397421718e300,-1.574112396417084e300,-1.578321253091996e300,-1.582530109766908e300,-1.5867389664418197e300,-1.5909478231167318e300,-1.595156679791644e300,-1.599365536466556e300,-1.6035743931414677e300,-1.6077832498163798e300,-1.6119921064912916e300,-1.616200963166204e300,-1.620409819841116e300,-1.6246186765160278e300,-1.6288275331909398e300,-1.6330363898658516e300,-1.637245246540764e300,-1.6414541032156757e300,-1.6456629598905878e300,-1.6498718165654996e300,-1.6540806732404116e300,-1.6582895299153234e300,-1.6624983865902358e300,-1.6667072432651478e300,-1.6709160999400596e300,-1.6751249566149717e300,-1.6793338132898834e300,-1.6835426699647958e300,-1.6877515266397076e300,-1.6919603833146196e300,-1.6961692399895314e300,-1.7003780966644435e300,-1.7045869533393555e300,-1.7087958100142676e300,-1.7130046666891797e300,-1.7172135233640914e300,-1.7214223800390035e300,-1.7256312367139156e300,-1.7298400933888276e300,-1.7340489500637394e300,-1.7382578067386515e300,-1.7424666634135632e300,-1.7466755200884753e300,-1.7508843767633877e300,-1.7550932334382994e300,-1.7593020901132115e300,-1.7635109467881233e300,-1.7677198034630353e300,-1.7719286601379474e300,-1.7761375168128595e300,-1.7803463734877712e300,-1.7845552301626833e300,-1.788764086837595e300,-1.7929729435125074e300,-1.7971818001874195e300,-1.8013906568623313e300,-1.8055995135372434e300,-1.809808370212155e300,-1.8140172268870675e300,-1.8182260835619793e300,-1.8224349402368913e300,-1.826643796911803e300,-1.8308526535867152e300,-1.8350615102616272e300,-1.8392703669365393e300,-1.8434792236114514e300,-1.847688080286363e300,-1.8518969369612752e300,-1.856105793636187e300,-1.8603146503110993e300,-1.864523506986011e300,-1.8687323636609232e300,-1.872941220335835e300,-1.877150077010747e300,-1.881358933685659e300,-1.885567790360571e300,-1.8897766470354832e300,-1.893985503710395e300,-1.898194360385307e300,-1.902403217060219e300,-1.9066120737351312e300,-1.910820930410043e300,-1.915029787084955e300,-1.9192386437598668e300,-1.923447500434779e300,-1.927656357109691e300,-1.931865213784603e300,-1.936074070459515e300,-1.9402829271344268e300,-1.9444917838093392e300,-1.948700640484251e300,-1.952909497159163e300,-1.9571183538340748e300,-1.9613272105089869e300,-1.9655360671838986e300,-1.969744923858811e300,-1.9739537805337228e300,-1.9781626372086348e300,-1.982371493883547e300,-1.9865803505584587e300,-1.990789207233371e300,-1.9949980639082828e300,-1.999206920583195e300,-2.0034157772581066e300,-2.0076246339330187e300,-2.0118334906079308e300,-2.0160423472828428e300,-2.0202512039577546e300,-2.0244600606326667e300,-2.0286689173075787e300,-2.0328777739824908e300,-2.037086630657403e300,-2.0412954873323146e300,-2.0455043440072267e300,-2.0497132006821385e300,-2.0539220573570505e300,-2.0581309140319626e300,-2.0623397707068747e300,-2.0665486273817867e300,-2.0707574840566985e300,-2.0749663407316106e300,-2.0791751974065226e300,-2.0833840540814347e300,-2.0875929107563465e300,-2.0918017674312585e300,-2.0960106241061703e300,-2.1002194807810827e300,-2.1044283374559944e300,-2.1086371941309065e300,-2.1128460508058186e300,-2.1170549074807303e300,-2.1212637641556427e300,-2.1254726208305545e300,-2.1296814775054665e300,-2.1338903341803783e300,-2.1380991908552904e300,-2.1423080475302022e300,-2.1465169042051145e300,-2.1507257608800263e300,-2.1549346175549384e300,-2.1591434742298504e300,-2.1633523309047622e300,-2.1675611875796746e300,-2.1717700442545863e300,-2.1759789009294984e300,-2.1801877576044102e300,-2.1843966142793222e300,-2.1886054709542343e300,-2.1928143276291464e300,-2.197023184304058e300,-2.2012320409789702e300,-2.2054408976538823e300,-2.2096497543287943e300,-2.2138586110037064e300,-2.2180674676786182e300,-2.2222763243535302e300,-2.226485181028442e300,-2.2306940377033544e300,-2.234902894378266e300,-2.2391117510531782e300,-2.24332060772809e300,-2.247529464403002e300,-2.251738321077914e300,-2.2559471777528262e300,-2.2601560344277382e300,-2.26436489110265e300,-2.268573747777562e300,-2.2727826044524738e300,-2.2769914611273862e300,-2.281200317802298e300,-2.28540917447721e300,-2.289618031152122e300,-2.293826887827034e300,-2.2980357445019462e300,-2.302244601176858e300,-2.30645345785177e300,-2.310662314526682e300,-2.314871171201594e300,-2.319080027876506e300,-2.323288884551418e300,-2.3274977412263298e300,-2.331706597901242e300,-2.335915454576154e300,-2.340124311251066e300,-2.344333167925978e300,-2.34854202460089e300,-2.352750881275802e300,-2.3569597379507137e300,-2.3611685946256258e300,-2.3653774513005378e300,-2.36958630797545e300,-2.3737951646503617e300,-2.3780040213252737e300,-2.3822128780001858e300,-2.386421734675098e300,-2.39063059135001e300,-2.3948394480249217e300,-2.3990483046998338e300,-2.4032571613747455e300,-2.407466018049658e300,-2.4116748747245697e300,-2.4158837313994817e300,-2.4200925880743935e300,-2.4243014447493056e300,-2.428510301424218e300,-2.4327191580991297e300,-2.4369280147740418e300,-2.4411368714489535e300,-2.4453457281238656e300,-2.4495545847987774e300,-2.4537634414736897e300,-2.4579722981486015e300,-2.4621811548235136e300,-2.4663900114984254e300,-2.4705988681733374e300,-2.4748077248482498e300,-2.4790165815231616e300,-2.4832254381980736e300,-2.4874342948729854e300,-2.4916431515478975e300,-2.4958520082228095e300,-2.5000608648977216e300,-2.5042697215726334e300,-2.5084785782475454e300,-2.5126874349224572e300,-2.5168962915973696e300,-2.5211051482722816e300,-2.5253140049471934e300,-2.5295228616221055e300,-2.5337317182970172e300,-2.5379405749719296e300,-2.5421494316468414e300,-2.5463582883217534e300,-2.5505671449966652e300,-2.5547760016715773e300,-2.558984858346489e300,-2.5631937150214014e300,-2.5674025716963135e300,-2.5716114283712252e300,-2.5758202850461373e300,-2.580029141721049e300,-2.5842379983959614e300,-2.5884468550708732e300,-2.5926557117457853e300,-2.596864568420697e300,-2.601073425095609e300,-2.6052822817705215e300,-2.6094911384454332e300,-2.6136999951203453e300,-2.617908851795257e300,-2.622117708470169e300,-2.6263265651450812e300,-2.6305354218199933e300,-2.634744278494905e300,-2.638953135169817e300,-2.643161991844729e300,-2.647370848519641e300,-2.6515797051945533e300,-2.655788561869465e300,-2.6599974185443772e300,-2.664206275219289e300,-2.668415131894201e300,-2.672623988569113e300,-2.676832845244025e300,-2.681041701918937e300,-2.685250558593849e300,-2.689459415268761e300,-2.693668271943673e300,-2.697877128618585e300,-2.702085985293497e300,-2.706294841968409e300,-2.710503698643321e300,-2.714712555318233e300,-2.7189214119931446e300,-2.7231302686680567e300,-2.727339125342969e300,-2.731547982017881e300,-2.735756838692793e300,-2.739965695367705e300,-2.7441745520426164e300,-2.748383408717529e300,-2.752592265392441e300,-2.7568011220673526e300,-2.7610099787422647e300,-2.765218835417177e300,-2.769427692092089e300,-2.773636548767001e300,-2.7778454054419123e300,-2.782054262116825e300,-2.7862631187917365e300,-2.7904719754666485e300,-2.794680832141561e300,-2.7988896888164727e300,-2.803098545491385e300,-2.807307402166296e300,-2.811516258841209e300,-2.815725115516121e300,-2.8199339721910324e300,-2.8241428288659445e300,-2.8283516855408566e300,-2.8325605422157686e300,-2.8367693988906807e300,-2.840978255565593e300,-2.845187112240505e300,-2.849395968915416e300,-2.8536048255903284e300,-2.857813682265241e300,-2.8620225389401525e300,-2.8662313956150646e300,-2.870440252289976e300,-2.8746491089648887e300,-2.878857965639801e300,-2.883066822314712e300,-2.887275678989625e300,-2.8914845356645364e300,-2.8956933923394484e300,-2.89990224901436e300,-2.9041111056892726e300,-2.9083199623641846e300,-2.912528819039096e300,-2.916737675714008e300,-2.92094653238892e300,-2.9251553890638323e300,-2.9293642457387444e300,-2.9335731024136564e300,-2.9377819590885685e300,-2.94199081576348e300,-2.946199672438392e300,-2.950408529113305e300,-2.954617385788216e300,-2.958826242463128e300,-2.96303509913804e300,-2.9672439558129524e300,-2.9714528124878644e300,-2.975661669162776e300,-2.9798705258376886e300,-2.9840793825126e300,-2.988288239187512e300,-2.992497095862424e300,-2.996705952537336e300,-3.0009148092122483e300,-3.00512366588716e300,-3.0093325225620725e300,-3.0135413792369845e300,-3.017750235911896e300,-3.021959092586808e300,-3.02616794926172e300,-3.030376805936632e300,-3.034585662611544e300,-3.038794519286456e300,-3.0430033759613684e300,-3.04721223263628e300,-3.051421089311192e300,-3.0556299459861046e300,-3.059838802661016e300,-3.064047659335928e300,-3.0682565160108396e300,-3.072465372685752e300,-3.0766742293606643e300,-3.080883086035576e300,-3.085091942710488e300,-3.0893007993854e300,-3.093509656060312e300,-3.0977185127352235e300,-3.101927369410136e300,-3.106136226085048e300,-3.1103450827599597e300,-3.114553939434872e300,-3.118762796109784e300,-3.122971652784696e300,-3.127180509459608e300,-3.1313893661345194e300,-3.135598222809432e300,-3.1398070794843435e300,-3.1440159361592556e300,-3.148224792834168e300,-3.15243364950908e300,-3.156642506183992e300,-3.160851362858903e300,-3.165060219533816e300,-3.169269076208728e300,-3.1734779328836395e300,-3.1776867895585516e300,-3.1818956462334636e300,-3.1861045029083757e300,-3.190313359583288e300,-3.1945222162582e300,-3.198731072933112e300,-3.2029399296080234e300,-3.2071487862829354e300,-3.211357642957848e300,-3.2155664996327596e300,-3.2197753563076716e300,-3.223984212982583e300,-3.228193069657496e300,-3.232401926332408e300,-3.2366107830073193e300,-3.240819639682232e300,-3.2450284963571434e300,-3.2492373530320555e300,-3.2534462097069676e300,-3.2576550663818796e300,-3.261863923056792e300,-3.266072779731703e300,-3.270281636406615e300,-3.274490493081528e300,-3.2786993497564394e300,-3.2829082064313514e300,-3.2871170631062635e300,-3.2913259197811756e300,-3.295534776456087e300,-3.299743633130999e300,-3.303952489805912e300,-3.308161346480823e300,-3.3123702031557353e300,-3.316579059830647e300,-3.3207879165055594e300,-3.3249967731804715e300,-3.329205629855383e300,-3.3334144865302956e300,-3.337623343205207e300,-3.341832199880119e300,-3.346041056555031e300,-3.3502499132299433e300,-3.3544587699048554e300,-3.358667626579767e300,-3.362876483254679e300,-3.3670853399295916e300,-3.371294196604503e300,-3.375503053279415e300,-3.379711909954327e300,-3.383920766629239e300,-3.3881296233041513e300,-3.392338479979063e300,-3.3965473366539755e300,-3.400756193328887e300,-3.404965050003799e300,-3.409173906678711e300,-3.413382763353623e300,-3.417591620028535e300,-3.4218004767034467e300,-3.4260093333783593e300,-3.4302181900532714e300,-3.434427046728183e300,-3.438635903403095e300,-3.442844760078007e300,-3.447053616752919e300,-3.451262473427831e300,-3.4554713301027426e300,-3.459680186777655e300,-3.463889043452567e300,-3.468097900127479e300,-3.4723067568023915e300,-3.476515613477303e300,-3.480724470152215e300,-3.4849333268271265e300,-3.489142183502039e300,-3.4933510401769506e300,-3.4975598968518627e300,-3.5017687535267753e300,-3.505977610201687e300,-3.510186466876599e300,-3.5143953235515104e300,-3.518604180226423e300,-3.522813036901335e300,-3.5270218935762466e300,-3.5312307502511586e300,-3.5354396069260707e300,-3.539648463600983e300,-3.543857320275895e300,-3.548066176950807e300,-3.552275033625719e300,-3.5564838903006304e300,-3.5606927469755425e300,-3.564901603650455e300,-3.5691104603253666e300,-3.5733193170002787e300,-3.57752817367519e300,-3.581737030350103e300,-3.585945887025015e300,-3.5901547436999264e300,-3.594363600374839e300,-3.5985724570497505e300,-3.6027813137246626e300,-3.6069901703995746e300,-3.611199027074487e300,-3.615407883749399e300,-3.61961674042431e300,-3.6238255970992223e300,-3.628034453774135e300,-3.6322433104490464e300,-3.6364521671239585e300,-3.6406610237988706e300,-3.6448698804737826e300,-3.649078737148695e300,-3.653287593823606e300,-3.657496450498519e300,-3.6617053071734303e300,-3.6659141638483424e300,-3.6701230205232545e300,-3.6743318771981665e300,-3.6785407338730786e300,-3.68274959054799e300,-3.686958447222903e300,-3.691167303897815e300,-3.695376160572726e300,-3.6995850172476383e300,-3.7037938739225504e300,-3.7080027305974625e300,-3.712211587272374e300,-3.716420443947286e300,-3.7206293006221987e300,-3.72483815729711e300,-3.729047013972022e300,-3.733255870646934e300,-3.7374647273218463e300,-3.7416735839967584e300,-3.74588244067167e300,-3.7500912973465825e300,-3.754300154021494e300,-3.758509010696406e300,-3.762717867371318e300,-3.76692672404623e300,-3.771135580721142e300,-3.775344437396054e300,-3.7795532940709664e300,-3.7837621507458785e300,-3.78797100742079e300,-3.792179864095702e300,-3.796388720770614e300,-3.800597577445526e300,-3.804806434120438e300,-3.8090152907953497e300,-3.8132241474702623e300,-3.817433004145174e300,-3.821641860820086e300,-3.8258507174949985e300,-3.83005957416991e300,-3.834268430844822e300,-3.8384772875197336e300,-3.842686144194646e300,-3.846895000869558e300,-3.85110385754447e300,-3.855312714219382e300,-3.859521570894294e300,-3.863730427569206e300,-3.867939284244118e300,-3.87214814091903e300,-3.876356997593942e300,-3.8805658542688536e300,-3.8847747109437657e300,-3.8889835676186784e300,-3.89319242429359e300,-3.897401280968502e300,-3.9016101376434134e300,-3.905818994318326e300,-3.9100278509932375e300,-3.9142367076681496e300,-3.918445564343062e300,-3.9226544210179737e300,-3.926863277692886e300,-3.931072134367797e300,-3.93528099104271e300,-3.939489847717622e300,-3.9436987043925334e300,-3.9479075610674455e300,-3.9521164177423576e300,-3.9563252744172696e300,-3.960534131092182e300,-3.964742987767094e300,-3.968951844442006e300,-3.9731607011169173e300,-3.9773695577918294e300,-3.981578414466742e300,-3.9857872711416535e300,-3.9899961278165656e300,-3.994204984491477e300,-3.99841384116639e300,-4.002622697841302e300,-4.006831554516213e300,-4.011040411191126e300,-4.0152492678660374e300,-4.0194581245409495e300,-4.0236669812158615e300,-4.0278758378907736e300,-4.0320846945656857e300,-4.036293551240597e300,-4.040502407915509e300,-4.044711264590422e300,-4.0489201212653333e300,-4.0531289779402454e300,-4.0573378346151575e300,-4.0615466912900695e300,-4.0657555479649816e300,-4.069964404639893e300,-4.074173261314806e300,-4.078382117989717e300,-4.082590974664629e300,-4.086799831339542e300,-4.0910086880144534e300,-4.0952175446893655e300,-4.099426401364277e300,-4.1036352580391896e300,-4.107844114714101e300,-4.112052971389013e300,-4.116261828063925e300,-4.120470684738837e300,-4.1246795414137493e300,-4.128888398088661e300,-4.1330972547635735e300,-4.1373061114384855e300,-4.141514968113397e300,-4.145723824788309e300,-4.149932681463221e300,-4.154141538138133e300,-4.158350394813045e300,-4.162559251487957e300,-4.1667681081628694e300,-4.170976964837781e300,-4.175185821512693e300,-4.1793946781876056e300,-4.183603534862517e300,-4.187812391537429e300,-4.1920212482123406e300,-4.196230104887253e300,-4.2004389615621654e300,-4.204647818237077e300,-4.208856674911989e300,-4.213065531586901e300,-4.217274388261813e300,-4.221483244936725e300,-4.225692101611637e300,-4.229900958286549e300,-4.2341098149614607e300,-4.238318671636373e300,-4.2425275283112854e300,-4.246736384986197e300,-4.250945241661109e300,-4.2551540983360204e300,-4.259362955010933e300,-4.263571811685845e300,-4.2677806683607566e300,-4.2719895250356693e300,-4.276198381710581e300,-4.280407238385493e300,-4.2846160950604043e300,-4.288824951735317e300,-4.293033808410229e300,-4.2972426650851405e300,-4.3014515217600526e300,-4.3056603784349646e300,-4.309869235109877e300,-4.314078091784789e300,-4.318286948459701e300,-4.322495805134613e300,-4.3267046618095244e300,-4.3309135184844364e300,-4.335122375159349e300,-4.3393312318342606e300,-4.3435400885091726e300,-4.347748945184084e300,-4.351957801858997e300,-4.356166658533909e300,-4.3603755152088203e300,-4.364584371883733e300,-4.3687932285586445e300,-4.3730020852335565e300,-4.3772109419084686e300,-4.3814197985833807e300,-4.385628655258293e300,-4.389837511933204e300,-4.394046368608116e300,-4.398255225283029e300,-4.4024640819579404e300,-4.4066729386328525e300,-4.4108817953077645e300,-4.4150906519826766e300,-4.4192995086575887e300,-4.4235083653325e300,-4.427717222007413e300,-4.431926078682324e300,-4.4361349353572363e300,-4.4403437920321484e300,-4.4445526487070605e300,-4.4487615053819725e300,-4.452970362056884e300,-4.4571792187317967e300,-4.461388075406709e300,-4.46559693208162e300,-4.469805788756532e300,-4.4740146454314443e300,-4.4782235021063564e300,-4.4824323587812685e300,-4.48664121545618e300,-4.4908500721310926e300,-4.495058928806004e300,-4.499267785480916e300,-4.503476642155828e300,-4.50768549883074e300,-4.5118943555056523e300,-4.516103212180564e300,-4.5203120688554765e300,-4.524520925530388e300,-4.5287297822053e300,-4.532938638880212e300,-4.537147495555124e300,-4.541356352230036e300,-4.5455652089049477e300,-4.5497740655798604e300,-4.5539829222547724e300,-4.558191778929684e300,-4.562400635604596e300,-4.566609492279508e300,-4.57081834895442e300,-4.575027205629332e300,-4.579236062304244e300,-4.583444918979156e300,-4.587653775654068e300,-4.59186263232898e300,-4.5960714890038925e300,-4.600280345678804e300,-4.604489202353716e300,-4.6086980590286275e300,-4.61290691570354e300,-4.617115772378452e300,-4.621324629053364e300,-4.6255334857282764e300,-4.629742342403188e300,-4.6339511990781e300,-4.638160055753012e300,-4.642368912427924e300,-4.646577769102836e300,-4.6507866257777476e300,-4.6549954824526596e300,-4.6592043391275723e300,-4.663413195802484e300,-4.667622052477396e300,-4.671830909152308e300,-4.67603976582722e300,-4.680248622502132e300,-4.6844574791770435e300,-4.688666335851956e300,-4.6928751925268677e300,-4.69708404920178e300,-4.701292905876691e300,-4.705501762551604e300,-4.709710619226516e300,-4.7139194759014274e300,-4.71812833257634e300,-4.7223371892512515e300,-4.7265460459261636e300,-4.7307549026010757e300,-4.734963759275988e300,-4.7391726159509e300,-4.743381472625811e300,-4.7475903293007233e300,-4.751799185975636e300,-4.7560080426505475e300,-4.7602168993254595e300,-4.7644257560003716e300,-4.7686346126752837e300,-4.772843469350196e300,-4.777052326025107e300,-4.78126118270002e300,-4.7854700393749313e300,-4.7896788960498434e300,-4.7938877527247555e300,-4.7980966093996675e300,-4.8023054660745796e300,-4.806514322749491e300,-4.810723179424404e300,-4.814932036099316e300,-4.819140892774227e300,-4.8233497494491393e300,-4.8275586061240514e300,-4.8317674627989635e300,-4.8359763194738755e300,-4.840185176148787e300,-4.8443940328236997e300,-4.848602889498611e300,-4.852811746173523e300,-4.857020602848436e300,-4.8612294595233474e300,-4.8654383161982594e300,-4.869647172873171e300,-4.8738560295480836e300,-4.8780648862229956e300,-4.882273742897907e300,-4.886482599572819e300,-4.890691456247731e300,-4.894900312922643e300,-4.899109169597555e300,-4.9033180262724674e300,-4.9075268829473795e300,-4.911735739622291e300,-4.915944596297203e300,-4.920153452972115e300,-4.924362309647027e300,-4.928571166321939e300,-4.9327800229968507e300,-4.9369888796717634e300,-4.941197736346675e300,-4.945406593021587e300,-4.9496154496964996e300,-4.953824306371411e300,-4.958033163046323e300,-4.9622420197212346e300,-4.966450876396147e300,-4.9706597330710593e300,-4.974868589745971e300,-4.979077446420883e300,-4.983286303095795e300,-4.987495159770707e300,-4.991704016445619e300,-4.995912873120531e300,-5.000121729795443e300,-5.0043305864703546e300,-5.008539443145267e300,-5.0127482998201794e300,-5.016957156495091e300,-5.021166013170003e300,-5.0253748698449144e300,-5.029583726519827e300,-5.033792583194739e300,-5.0380014398696506e300,-5.042210296544563e300,-5.046419153219475e300,-5.050628009894387e300,-5.054836866569299e300,-5.059045723244211e300,-5.063254579919123e300,-5.0674634365940345e300,-5.0716722932689465e300,-5.075881149943859e300,-5.0800900066187707e300,-5.084298863293683e300,-5.088507719968595e300,-5.092716576643507e300,-5.0969254333184183e300,-5.1011342899933304e300,-5.105343146668243e300,-5.1095520033431545e300,-5.1137608600180666e300,-5.117969716692978e300,-5.122178573367891e300,-5.126387430042803e300,-5.130596286717714e300,-5.134805143392627e300,-5.1390140000675384e300,-5.1432228567424505e300,-5.1474317134173625e300,-5.1516405700922746e300,-5.1558494267671867e300,-5.160058283442098e300,-5.164267140117011e300,-5.168475996791923e300,-5.1726848534668343e300,-5.1768937101417464e300,-5.1811025668166585e300,-5.1853114234915705e300,-5.1895202801664826e300,-5.193729136841394e300,-5.197937993516307e300,-5.202146850191218e300,-5.20635570686613e300,-5.210564563541043e300,-5.2147734202159544e300,-5.2189822768908665e300,-5.223191133565778e300,-5.2273999902406906e300,-5.2316088469156027e300,-5.235817703590514e300,-5.240026560265426e300,-5.244235416940338e300,-5.2484442736152504e300,-5.2526531302901624e300,-5.2568619869650745e300,-5.2610708436399866e300,-5.265279700314898e300,-5.26948855698981e300,-5.273697413664723e300,-5.277906270339634e300,-5.2821151270145463e300,-5.286323983689458e300,-5.2905328403643704e300,-5.294741697039282e300,-5.298950553714194e300,-5.3031594103891066e300,-5.307368267064018e300,-5.31157712373893e300,-5.3157859804138416e300,-5.3199948370887543e300,-5.3242036937636664e300,-5.328412550438578e300,-5.33262140711349e300,-5.336830263788402e300,-5.341039120463314e300,-5.345247977138226e300,-5.349456833813138e300,-5.35366569048805e300,-5.357874547162962e300,-5.362083403837874e300,-5.366292260512786e300,-5.370501117187699e300,-5.37470997386261e300,-5.378918830537521e300,-5.383127687212434e300,-5.387336543887346e300,-5.391545400562258e300,-5.39575425723717e300,-5.399963113912082e300,-5.404171970586994e300,-5.408380827261905e300,-5.412589683936818e300,-5.41679854061173e300,-5.421007397286642e300,-5.425216253961554e300,-5.429425110636466e300,-5.433633967311378e300,-5.437842823986289e300,-5.442051680661202e300,-5.446260537336113e300,-5.450469394011026e300,-5.454678250685937e300,-5.45888710736085e300,-5.463095964035762e300,-5.467304820710673e300,-5.471513677385586e300,-5.475722534060498e300,-5.47993139073541e300,-5.484140247410321e300,-5.488349104085233e300,-5.492557960760145e300,-5.496766817435058e300,-5.50097567410997e300,-5.505184530784882e300,-5.509393387459793e300,-5.513602244134705e300,-5.517811100809618e300,-5.522019957484529e300,-5.526228814159442e300,-5.530437670834353e300,-5.534646527509265e300,-5.538855384184178e300,-5.54306424085909e300,-5.547273097534002e300,-5.551481954208913e300,-5.555690810883825e300,-5.559899667558737e300,-5.56410852423365e300,-5.568317380908561e300,-5.572526237583473e300,-5.576735094258386e300,-5.580943950933297e300,-5.58515280760821e300,-5.589361664283122e300,-5.593570520958033e300,-5.597779377632945e300,-5.601988234307857e300,-5.60619709098277e300,-5.610405947657682e300,-5.614614804332592e300,-5.618823661007505e300,-5.623032517682418e300,-5.627241374357329e300,-5.631450231032242e300,-5.635659087707153e300,-5.639867944382065e300,-5.644076801056978e300,-5.648285657731889e300,-5.652494514406802e300,-5.656703371081713e300,-5.660912227756625e300,-5.665121084431537e300,-5.66932994110645e300,-5.673538797781361e300,-5.677747654456273e300,-5.681956511131186e300,-5.686165367806097e300,-5.69037422448101e300,-5.694583081155921e300,-5.698791937830833e300,-5.703000794505745e300,-5.707209651180657e300,-5.711418507855569e300,-5.715627364530482e300,-5.719836221205392e300,-5.724045077880305e300,-5.728253934555218e300,-5.732462791230129e300,-5.736671647905042e300,-5.740880504579952e300,-5.745089361254865e300,-5.749298217929777e300,-5.753507074604689e300,-5.757715931279602e300,-5.761924787954513e300,-5.766133644629424e300,-5.770342501304337e300,-5.77455135797925e300,-5.77876021465416e300,-5.782969071329073e300,-5.787177928003984e300,-5.791386784678897e300,-5.79559564135381e300,-5.79980449802872e300,-5.804013354703632e300,-5.808222211378545e300,-5.812431068053457e300,-5.816639924728369e300,-5.820848781403281e300,-5.825057638078192e300,-5.829266494753105e300,-5.833475351428016e300,-5.837684208102929e300,-5.84189306477784e300,-5.846101921452752e300,-5.850310778127665e300,-5.854519634802577e300,-5.858728491477489e300,-5.8629373481524e300,-5.867146204827313e300,-5.871355061502224e300,-5.875563918177137e300,-5.879772774852048e300,-5.88398163152696e300,-5.888190488201873e300,-5.892399344876784e300,-5.896608201551697e300,-5.90081705822661e300,-5.90502591490152e300,-5.909234771576432e300,-5.913443628251345e300,-5.917652484926256e300,-5.921861341601169e300,-5.92607019827608e300,-5.930279054950992e300,-5.934487911625905e300,-5.938696768300816e300,-5.942905624975729e300,-5.94711448165064e300,-5.951323338325552e300,-5.955532195000464e300,-5.959741051675377e300,-5.963949908350289e300,-5.9681587650252e300,-5.972367621700113e300,-5.976576478375024e300,-5.980785335049937e300,-5.984994191724848e300,-5.98920304839976e300,-5.993411905074673e300,-5.997620761749584e300,-6.001829618424497e300,-6.006038475099409e300,-6.01024733177432e300,-6.014456188449232e300,-6.018665045124145e300,-6.022873901799056e300,-6.027082758473969e300,-6.031291615148879e300,-6.035500471823792e300,-6.039709328498705e300,-6.043918185173616e300,-6.048127041848529e300,-6.05233589852344e300,-6.056544755198352e300,-6.060753611873264e300,-6.064962468548177e300,-6.069171325223089e300,-6.073380181898e300,-6.077589038572911e300,-6.081797895247824e300,-6.086006751922737e300,-6.090215608597648e300,-6.09442446527256e300,-6.098633321947472e300,-6.102842178622384e300,-6.107051035297297e300,-6.111259891972209e300,-6.11546874864712e300,-6.119677605322032e300,-6.123886461996944e300,-6.128095318671856e300,-6.132304175346769e300,-6.136513032021679e300,-6.140721888696592e300,-6.144930745371505e300,-6.149139602046416e300,-6.153348458721329e300,-6.15755731539624e300,-6.161766172071152e300,-6.165975028746064e300,-6.170183885420976e300,-6.174392742095888e300,-6.1786015987708e300,-6.182810455445711e300,-6.187019312120624e300,-6.191228168795537e300,-6.195437025470447e300,-6.19964588214536e300,-6.203854738820272e300,-6.208063595495184e300,-6.212272452170096e300,-6.216481308845007e300,-6.220690165519919e300,-6.224899022194832e300,-6.229107878869743e300,-6.233316735544656e300,-6.237525592219568e300,-6.241734448894479e300,-6.245943305569392e300,-6.250152162244304e300,-6.254361018919216e300,-6.258569875594127e300,-6.262778732269039e300,-6.266987588943951e300,-6.271196445618864e300,-6.275405302293776e300,-6.279614158968687e300,-6.2838230156436e300,-6.288031872318511e300,-6.292240728993424e300,-6.296449585668337e300,-6.300658442343247e300,-6.30486729901816e300,-6.309076155693071e300,-6.313285012367984e300,-6.317493869042896e300,-6.321702725717807e300,-6.325911582392719e300,-6.330120439067632e300,-6.334329295742543e300,-6.338538152417456e300,-6.342747009092368e300,-6.346955865767279e300,-6.351164722442192e300,-6.355373579117103e300,-6.359582435792016e300,-6.363791292466927e300,-6.368000149141839e300,-6.372209005816751e300,-6.376417862491664e300,-6.380626719166576e300,-6.384835575841487e300,-6.3890444325164e300,-6.393253289191311e300,-6.397462145866224e300,-6.401671002541135e300,-6.405879859216047e300,-6.410088715890959e300,-6.414297572565871e300,-6.418506429240784e300,-6.422715285915696e300,-6.426924142590606e300,-6.431132999265519e300,-6.435341855940432e300,-6.439550712615343e300,-6.443759569290256e300,-6.447968425965166e300,-6.452177282640079e300,-6.456386139314992e300,-6.460594995989903e300,-6.464803852664816e300,-6.469012709339727e300,-6.473221566014639e300,-6.477430422689551e300,-6.481639279364464e300,-6.485848136039375e300,-6.490056992714287e300,-6.494265849389198e300,-6.498474706064111e300,-6.502683562739024e300,-6.506892419413935e300,-6.511101276088847e300,-6.515310132763759e300,-6.519518989438671e300,-6.523727846113583e300,-6.527936702788496e300,-6.532145559463406e300,-6.536354416138319e300,-6.54056327281323e300,-6.544772129488143e300,-6.548980986163056e300,-6.553189842837966e300,-6.557398699512879e300,-6.561607556187791e300,-6.565816412862703e300,-6.570025269537616e300,-6.574234126212527e300,-6.578442982887438e300,-6.582651839562351e300,-6.586860696237263e300,-6.591069552912174e300,-6.595278409587087e300,-6.599487266261998e300,-6.603696122936911e300,-6.607904979611824e300,-6.612113836286734e300,-6.616322692961646e300,-6.620531549636559e300,-6.624740406311471e300,-6.628949262986383e300,-6.633158119661294e300,-6.637366976336206e300,-6.641575833011119e300,-6.64578468968603e300,-6.649993546360943e300,-6.654202403035855e300,-6.658411259710766e300,-6.662620116385679e300,-6.666828973060591e300,-6.671037829735503e300,-6.675246686410414e300,-6.679455543085326e300,-6.683664399760238e300,-6.687873256435151e300,-6.692082113110063e300,-6.696290969784974e300,-6.700499826459887e300,-6.704708683134798e300,-6.708917539809711e300,-6.713126396484623e300,-6.717335253159534e300,-6.721544109834446e300,-6.725752966509358e300,-6.72996182318427e300,-6.734170679859183e300,-6.738379536534093e300,-6.742588393209006e300,-6.746797249883919e300,-6.75100610655883e300,-6.755214963233743e300,-6.759423819908654e300,-6.763632676583566e300,-6.767841533258479e300,-6.77205038993339e300,-6.776259246608303e300,-6.780468103283214e300,-6.784676959958126e300,-6.788885816633038e300,-6.793094673307951e300,-6.797303529982862e300,-6.801512386657774e300,-6.805721243332687e300,-6.809930100007598e300,-6.814138956682511e300,-6.818347813357422e300,-6.822556670032334e300,-6.826765526707246e300,-6.830974383382158e300,-6.83518324005707e300,-6.839392096731983e300,-6.843600953406893e300,-6.847809810081806e300,-6.852018666756719e300,-6.85622752343163e300,-6.860436380106543e300,-6.864645236781453e300,-6.868854093456366e300,-6.873062950131278e300,-6.87727180680619e300,-6.881480663481103e300,-6.885689520156014e300,-6.889898376830925e300,-6.894107233505838e300,-6.898316090180751e300,-6.902524946855662e300,-6.906733803530574e300,-6.910942660205485e300,-6.915151516880398e300,-6.91936037355531e300,-6.923569230230222e300,-6.927778086905133e300,-6.931986943580046e300,-6.936195800254958e300,-6.94040465692987e300,-6.944613513604783e300,-6.948822370279693e300,-6.953031226954606e300,-6.957240083629517e300,-6.96144894030443e300,-6.965657796979343e300,-6.969866653654253e300,-6.974075510329166e300,-6.978284367004078e300,-6.98249322367899e300,-6.986702080353901e300,-6.990910937028814e300,-6.995119793703725e300,-6.999328650378638e300,-7.003537507053551e300,-7.007746363728461e300,-7.011955220403374e300,-7.016164077078285e300,-7.020372933753198e300,-7.02458179042811e300,-7.028790647103021e300,-7.032999503777933e300,-7.037208360452846e300,-7.041417217127758e300,-7.04562607380267e300,-7.049834930477582e300,-7.054043787152493e300,-7.058252643827406e300,-7.062461500502317e300,-7.06667035717723e300,-7.070879213852141e300,-7.075088070527053e300,-7.079296927201966e300,-7.083505783876878e300,-7.08771464055179e300,-7.091923497226701e300,-7.096132353901614e300,-7.100341210576525e300,-7.104550067251438e300,-7.108758923926349e300,-7.112967780601261e300,-7.117176637276174e300,-7.121385493951085e300,-7.125594350625998e300,-7.12980320730091e300,-7.134012063975821e300,-7.138220920650733e300,-7.142429777325646e300,-7.146638634000557e300,-7.15084749067547e300,-7.15505634735038e300,-7.159265204025293e300,-7.163474060700206e300,-7.167682917375117e300,-7.17189177405003e300,-7.176100630724941e300,-7.180309487399853e300,-7.184518344074765e300,-7.188727200749678e300,-7.19293605742459e300,-7.197144914099501e300,-7.201353770774412e300,-7.205562627449325e300,-7.209771484124238e300,-7.213980340799149e300,-7.218189197474061e300,-7.222398054148973e300,-7.226606910823885e300,-7.230815767498798e300,-7.23502462417371e300,-7.23923348084862e300,-7.243442337523533e300,-7.247651194198445e300,-7.251860050873357e300,-7.25606890754827e300,-7.26027776422318e300,-7.264486620898093e300,-7.268695477573006e300,-7.272904334247917e300,-7.27711319092283e300,-7.281322047597741e300,-7.285530904272653e300,-7.289739760947565e300,-7.293948617622477e300,-7.29815747429739e300,-7.302366330972301e300,-7.306575187647212e300,-7.310784044322125e300,-7.314992900997038e300,-7.319201757671949e300,-7.323410614346861e300,-7.327619471021773e300,-7.331828327696685e300,-7.336037184371597e300,-7.340246041046509e300,-7.34445489772142e300,-7.348663754396333e300,-7.352872611071245e300,-7.357081467746157e300,-7.36129032442107e300,-7.36549918109598e300,-7.369708037770893e300,-7.373916894445805e300,-7.378125751120717e300,-7.38233460779563e300,-7.38654346447054e300,-7.390752321145453e300,-7.394961177820365e300,-7.399170034495277e300,-7.403378891170188e300,-7.407587747845101e300,-7.411796604520012e300,-7.416005461194925e300,-7.420214317869838e300,-7.424423174544748e300,-7.42863203121966e300,-7.432840887894572e300,-7.437049744569485e300,-7.441258601244397e300,-7.445467457919308e300,-7.44967631459422e300,-7.453885171269133e300,-7.458094027944044e300,-7.462302884618957e300,-7.466511741293869e300,-7.47072059796878e300,-7.474929454643693e300,-7.479138311318604e300,-7.483347167993517e300,-7.487556024668428e300,-7.49176488134334e300,-7.495973738018252e300,-7.500182594693165e300,-7.504391451368077e300,-7.508600308042988e300,-7.512809164717901e300,-7.517018021392812e300,-7.521226878067725e300,-7.525435734742636e300,-7.529644591417548e300,-7.53385344809246e300,-7.538062304767372e300,-7.542271161442285e300,-7.546480018117197e300,-7.550688874792107e300,-7.55489773146702e300,-7.559106588141933e300,-7.563315444816844e300,-7.567524301491757e300,-7.571733158166667e300,-7.57594201484158e300,-7.580150871516493e300,-7.584359728191404e300,-7.588568584866317e300,-7.592777441541228e300,-7.59698629821614e300,-7.601195154891052e300,-7.605404011565965e300,-7.609612868240876e300,-7.613821724915788e300,-7.618030581590699e300,-7.622239438265612e300,-7.626448294940525e300,-7.630657151615436e300,-7.634866008290348e300,-7.63907486496526e300,-7.643283721640172e300,-7.647492578315084e300,-7.651701434989997e300,-7.655910291664907e300,-7.66011914833982e300,-7.664328005014732e300,-7.668536861689644e300,-7.672745718364557e300,-7.676954575039467e300,-7.68116343171438e300,-7.685372288389292e300,-7.689581145064204e300,-7.693790001739117e300,-7.697998858414028e300,-7.70220771508894e300,-7.706416571763852e300,-7.710625428438764e300,-7.714834285113676e300,-7.719043141788588e300,-7.723251998463499e300,-7.727460855138412e300,-7.731669711813325e300,-7.735878568488236e300,-7.740087425163148e300,-7.74429628183806e300,-7.748505138512972e300,-7.752713995187884e300,-7.756922851862795e300,-7.761131708537707e300,-7.76534056521262e300,-7.769549421887531e300,-7.773758278562444e300,-7.777967135237357e300,-7.782175991912267e300,-7.78638484858718e300,-7.790593705262092e300,-7.794802561937004e300,-7.799011418611915e300,-7.803220275286827e300,-7.807429131961739e300,-7.811637988636652e300,-7.815846845311564e300,-7.820055701986475e300,-7.824264558661388e300,-7.828473415336299e300,-7.832682272011212e300,-7.836891128686124e300,-7.841099985361035e300,-7.845308842035947e300,-7.849517698710859e300,-7.853726555385772e300,-7.857935412060684e300,-7.862144268735594e300,-7.866353125410507e300,-7.87056198208542e300,-7.874770838760331e300,-7.878979695435244e300,-7.883188552110155e300,-7.887397408785067e300,-7.89160626545998e300,-7.895815122134891e300,-7.900023978809804e300,-7.904232835484715e300,-7.908441692159627e300,-7.912650548834539e300,-7.916859405509452e300,-7.921068262184363e300,-7.925277118859275e300,-7.929485975534188e300,-7.933694832209099e300,-7.937903688884012e300,-7.942112545558923e300,-7.946321402233835e300,-7.950530258908747e300,-7.954739115583659e300,-7.958947972258571e300,-7.963156828933484e300,-7.967365685608394e300,-7.971574542283307e300,-7.97578339895822e300,-7.979992255633131e300,-7.984201112308044e300,-7.988409968982954e300,-7.992618825657867e300,-7.99682768233278e300,-8.001036539007691e300,-8.005245395682604e300,-8.009454252357515e300,-8.013663109032427e300,-8.017871965707339e300,-8.022080822382252e300,-8.026289679057163e300,-8.030498535732075e300,-8.034707392406986e300,-8.038916249081899e300,-8.043125105756812e300,-8.047333962431723e300,-8.051542819106635e300,-8.055751675781547e300,-8.059960532456459e300,-8.064169389131371e300,-8.068378245806284e300,-8.072587102481194e300,-8.076795959156107e300,-8.081004815831018e300,-8.085213672505931e300,-8.089422529180844e300,-8.093631385855754e300,-8.097840242530667e300,-8.102049099205579e300,-8.106257955880491e300,-8.110466812555403e300,-8.114675669230315e300,-8.118884525905226e300,-8.123093382580139e300,-8.127302239255052e300,-8.131511095929963e300,-8.135719952604875e300,-8.139928809279786e300,-8.144137665954699e300,-8.148346522629611e300,-8.152555379304523e300,-8.156764235979434e300,-8.160973092654347e300,-8.165181949329259e300,-8.169390806004171e300,-8.173599662679084e300,-8.177808519353994e300,-8.182017376028907e300,-8.186226232703818e300,-8.190435089378731e300,-8.194643946053642e300,-8.198852802728554e300,-8.203061659403467e300,-8.207270516078379e300,-8.211479372753291e300,-8.215688229428202e300,-8.219897086103115e300,-8.224105942778026e300,-8.228314799452939e300,-8.23252365612785e300,-8.236732512802762e300,-8.240941369477675e300,-8.245150226152586e300,-8.249359082827499e300,-8.253567939502411e300,-8.257776796177322e300,-8.261985652852234e300,-8.266194509527147e300,-8.270403366202058e300,-8.274612222876971e300,-8.278821079551881e300,-8.283029936226794e300,-8.287238792901707e300,-8.291447649576618e300,-8.295656506251531e300,-8.299865362926442e300,-8.304074219601354e300,-8.308283076276266e300,-8.312491932951179e300,-8.31670078962609e300,-8.320909646301002e300,-8.325118502975914e300,-8.329327359650826e300,-8.333536216325739e300,-8.33774507300065e300,-8.341953929675562e300,-8.346162786350474e300,-8.350371643025386e300,-8.354580499700299e300,-8.358789356375211e300,-8.362998213050122e300,-8.367207069725034e300,-8.371415926399946e300,-8.375624783074858e300,-8.379833639749771e300,-8.384042496424681e300,-8.388251353099594e300,-8.392460209774507e300,-8.396669066449418e300,-8.400877923124331e300,-8.405086779799242e300,-8.409295636474154e300,-8.413504493149066e300,-8.417713349823978e300,-8.42192220649889e300,-8.426131063173802e300,-8.430339919848713e300,-8.434548776523626e300,-8.438757633198539e300,-8.44296648987345e300,-8.447175346548362e300,-8.451384203223274e300,-8.455593059898186e300,-8.459801916573098e300,-8.46401077324801e300,-8.468219629922921e300,-8.472428486597834e300,-8.476637343272746e300,-8.480846199947658e300,-8.485055056622571e300,-8.489263913297481e300,-8.493472769972394e300,-8.497681626647306e300,-8.501890483322218e300,-8.50609933999713e300,-8.510308196672041e300,-8.514517053346954e300,-8.518725910021866e300,-8.522934766696778e300,-8.52714362337169e300,-8.531352480046602e300,-8.535561336721513e300,-8.539770193396426e300,-8.543979050071339e300,-8.54818790674625e300,-8.552396763421162e300,-8.556605620096073e300,-8.560814476770986e300,-8.565023333445898e300,-8.569232190120809e300,-8.573441046795721e300,-8.577649903470634e300,-8.581858760145545e300,-8.586067616820458e300,-8.590276473495371e300,-8.594485330170281e300,-8.598694186845194e300,-8.602903043520105e300,-8.607111900195018e300,-8.611320756869929e300,-8.615529613544841e300,-8.619738470219753e300,-8.623947326894666e300,-8.628156183569578e300,-8.632365040244489e300,-8.636573896919402e300,-8.640782753594313e300,-8.644991610269226e300,-8.649200466944137e300,-8.653409323619049e300,-8.657618180293961e300,-8.661827036968873e300,-8.666035893643786e300,-8.670244750318698e300,-8.674453606993609e300,-8.678662463668521e300,-8.682871320343434e300,-8.687080177018345e300,-8.691289033693258e300,-8.695497890368168e300,-8.699706747043081e300,-8.703915603717994e300,-8.708124460392905e300,-8.712333317067818e300,-8.716542173742729e300,-8.720751030417641e300,-8.724959887092553e300,-8.729168743767466e300,-8.733377600442377e300,-8.737586457117289e300,-8.7417953137922e300,-8.746004170467113e300,-8.750213027142026e300,-8.754421883816937e300,-8.758630740491849e300,-8.762839597166761e300,-8.767048453841673e300,-8.771257310516585e300,-8.775466167191498e300,-8.779675023866408e300,-8.783883880541321e300,-8.788092737216233e300,-8.792301593891145e300,-8.796510450566058e300,-8.800719307240968e300,-8.804928163915881e300,-8.809137020590793e300,-8.813345877265705e300,-8.817554733940618e300,-8.821763590615529e300,-8.82597244729044e300,-8.830181303965353e300,-8.834390160640265e300,-8.838599017315177e300,-8.842807873990089e300,-8.847016730665e300,-8.851225587339913e300,-8.855434444014826e300,-8.859643300689737e300,-8.863852157364649e300,-8.868061014039561e300,-8.872269870714473e300,-8.876478727389385e300,-8.880687584064297e300,-8.884896440739208e300,-8.889105297414121e300,-8.893314154089032e300,-8.897523010763945e300,-8.901731867438858e300,-8.905940724113768e300,-8.910149580788681e300,-8.914358437463593e300,-8.918567294138505e300,-8.922776150813417e300,-8.926985007488328e300,-8.93119386416324e300,-8.935402720838153e300,-8.939611577513065e300,-8.943820434187977e300,-8.948029290862889e300,-8.9522381475378e300,-8.956447004212713e300,-8.960655860887625e300,-8.964864717562537e300,-8.969073574237448e300,-8.97328243091236e300,-8.977491287587273e300,-8.981700144262185e300,-8.985909000937095e300,-8.990117857612008e300,-8.994326714286921e300,-8.998535570961832e300,-9.002744427636745e300,-9.006953284311656e300,-9.011162140986568e300,-9.01537099766148e300,-9.019579854336392e300,-9.023788711011305e300,-9.027997567686216e300,-9.032206424361128e300,-9.03641528103604e300,-9.040624137710953e300,-9.044832994385864e300,-9.049041851060776e300,-9.053250707735689e300,-9.0574595644106e300,-9.061668421085513e300,-9.065877277760424e300,-9.070086134435336e300,-9.074294991110248e300,-9.07850384778516e300,-9.082712704460072e300,-9.086921561134985e300,-9.091130417809895e300,-9.095339274484808e300,-9.099548131159721e300,-9.103756987834632e300,-9.107965844509545e300,-9.112174701184455e300,-9.116383557859368e300,-9.12059241453428e300,-9.124801271209192e300,-9.129010127884105e300,-9.133218984559016e300,-9.137427841233928e300,-9.14163669790884e300,-9.145845554583753e300,-9.150054411258664e300,-9.154263267933576e300,-9.158472124608488e300,-9.1626809812834e300,-9.166889837958313e300,-9.171098694633224e300,-9.175307551308136e300,-9.179516407983048e300,-9.18372526465796e300,-9.187934121332872e300,-9.192142978007785e300,-9.196351834682695e300,-9.200560691357608e300,-9.20476954803252e300,-9.208978404707432e300,-9.213187261382345e300,-9.217396118057255e300,-9.221604974732168e300,-9.22581383140708e300,-9.230022688081992e300,-9.234231544756904e300,-9.238440401431816e300,-9.242649258106727e300,-9.24685811478164e300,-9.251066971456553e300,-9.255275828131464e300,-9.259484684806376e300,-9.263693541481287e300,-9.2679023981562e300,-9.272111254831112e300,-9.276320111506024e300,-9.280528968180935e300,-9.284737824855848e300,-9.28894668153076e300,-9.293155538205672e300,-9.297364394880585e300,-9.301573251555495e300,-9.305782108230408e300,-9.309990964905319e300,-9.314199821580232e300,-9.318408678255145e300,-9.322617534930055e300,-9.326826391604968e300,-9.33103524827988e300,-9.335244104954792e300,-9.339452961629704e300,-9.343661818304616e300,-9.347870674979527e300,-9.35207953165444e300,-9.356288388329351e300,-9.360497245004264e300,-9.364706101679176e300,-9.368914958354087e300,-9.373123815029e300,-9.377332671703912e300,-9.381541528378823e300,-9.385750385053735e300,-9.389959241728648e300,-9.39416809840356e300,-9.398376955078472e300,-9.402585811753382e300,-9.406794668428295e300,-9.411003525103208e300,-9.415212381778119e300,-9.419421238453032e300,-9.423630095127943e300,-9.427838951802855e300,-9.432047808477767e300,-9.43625666515268e300,-9.440465521827592e300,-9.444674378502503e300,-9.448883235177415e300,-9.453092091852327e300,-9.45730094852724e300,-9.461509805202151e300,-9.465718661877063e300,-9.469927518551975e300,-9.474136375226887e300,-9.4783452319018e300,-9.482554088576712e300,-9.486762945251623e300,-9.490971801926535e300,-9.495180658601447e300,-9.499389515276359e300,-9.503598371951272e300,-9.507807228626182e300,-9.512016085301095e300,-9.516224941976008e300,-9.520433798650919e300,-9.524642655325832e300,-9.528851512000743e300,-9.533060368675655e300,-9.537269225350567e300,-9.541478082025479e300,-9.545686938700391e300,-9.549895795375303e300,-9.554104652050214e300,-9.558313508725127e300,-9.56252236540004e300,-9.566731222074951e300,-9.570940078749863e300,-9.575148935424775e300,-9.579357792099687e300,-9.5835666487746e300,-9.587775505449511e300,-9.591984362124422e300,-9.596193218799335e300,-9.600402075474247e300,-9.604610932149159e300,-9.608819788824072e300,-9.613028645498982e300,-9.617237502173895e300,-9.621446358848807e300,-9.625655215523719e300,-9.629864072198632e300,-9.634072928873542e300,-9.638281785548455e300,-9.642490642223367e300,-9.646699498898279e300,-9.650908355573191e300,-9.655117212248103e300,-9.659326068923014e300,-9.663534925597927e300,-9.66774378227284e300,-9.671952638947751e300,-9.676161495622663e300,-9.680370352297574e300,-9.684579208972487e300,-9.688788065647399e300,-9.692996922322311e300,-9.697205778997222e300,-9.701414635672135e300,-9.705623492347046e300,-9.709832349021959e300,-9.714041205696872e300,-9.718250062371782e300,-9.722458919046695e300,-9.726667775721606e300,-9.730876632396519e300,-9.735085489071431e300,-9.739294345746342e300,-9.743503202421254e300,-9.747712059096167e300,-9.751920915771079e300,-9.756129772445991e300,-9.760338629120903e300,-9.764547485795814e300,-9.768756342470727e300,-9.772965199145638e300,-9.77717405582055e300,-9.781382912495462e300,-9.785591769170374e300,-9.789800625845287e300,-9.794009482520199e300,-9.79821833919511e300,-9.802427195870022e300,-9.806636052544935e300,-9.810844909219846e300,-9.815053765894759e300,-9.819262622569669e300,-9.823471479244582e300,-9.827680335919495e300,-9.831889192594406e300,-9.836098049269319e300,-9.84030690594423e300,-9.844515762619142e300,-9.848724619294054e300,-9.852933475968967e300,-9.857142332643878e300,-9.86135118931879e300,-9.865560045993701e300,-9.869768902668614e300,-9.873977759343527e300,-9.878186616018438e300,-9.88239547269335e300,-9.886604329368262e300,-9.890813186043174e300,-9.895022042718086e300,-9.899230899392999e300,-9.90343975606791e300,-9.907648612742822e300,-9.911857469417734e300,-9.916066326092646e300,-9.920275182767559e300,-9.924484039442469e300,-9.928692896117382e300,-9.932901752792294e300,-9.937110609467206e300,-9.941319466142119e300,-9.94552832281703e300,-9.949737179491942e300,-9.953946036166854e300,-9.958154892841766e300,-9.962363749516678e300,-9.96657260619159e300,-9.970781462866501e300,-9.974990319541414e300,-9.979199176216327e300,-9.983408032891238e300,-9.98761688956615e300,-9.991825746241062e300,-9.996034602915974e300,-1.0000243459590886e301,-1.0004452316265798e301,-1.0008661172940709e301,-1.0012870029615622e301,-1.0017078886290533e301,-1.0021287742965446e301,-1.0025496599640359e301,-1.0029705456315269e301,-1.0033914312990182e301,-1.0038123169665094e301,-1.0042332026340006e301,-1.0046540883014918e301,-1.0050749739689829e301,-1.0054958596364741e301,-1.0059167453039654e301,-1.0063376309714566e301,-1.0067585166389478e301,-1.007179402306439e301,-1.0076002879739301e301,-1.0080211736414214e301,-1.0084420593089126e301,-1.0088629449764038e301,-1.009283830643895e301,-1.0097047163113861e301,-1.0101256019788774e301,-1.0105464876463686e301,-1.0109673733138598e301,-1.0113882589813509e301,-1.0118091446488422e301,-1.0122300303163333e301,-1.0126509159838246e301,-1.0130718016513159e301,-1.0134926873188069e301,-1.0139135729862982e301,-1.0143344586537893e301,-1.0147553443212806e301,-1.0151762299887718e301,-1.0155971156562629e301,-1.0160180013237541e301,-1.0164388869912454e301,-1.0168597726587365e301,-1.0172806583262278e301,-1.017701543993719e301,-1.0181224296612101e301,-1.0185433153287014e301,-1.0189642009961925e301,-1.0193850866636837e301,-1.0198059723311749e301,-1.0202268579986661e301,-1.0206477436661573e301,-1.0210686293336486e301,-1.0214895150011396e301,-1.0219104006686309e301,-1.0223312863361222e301,-1.0227521720036133e301,-1.0231730576711046e301,-1.0235939433385956e301,-1.0240148290060869e301,-1.0244357146735781e301,-1.0248566003410693e301,-1.0252774860085606e301,-1.0256983716760517e301,-1.0261192573435429e301,-1.0265401430110341e301,-1.0269610286785254e301,-1.0273819143460165e301,-1.0278028000135077e301,-1.028223685680999e301,-1.0286445713484901e301,-1.0290654570159814e301,-1.0294863426834725e301,-1.0299072283509637e301,-1.0303281140184549e301,-1.0307489996859461e301,-1.0311698853534373e301,-1.0315907710209286e301,-1.0320116566884196e301,-1.0324325423559109e301,-1.0328534280234022e301,-1.0332743136908933e301,-1.0336951993583846e301,-1.0341160850258756e301,-1.0345369706933669e301,-1.0349578563608581e301,-1.0353787420283493e301,-1.0357996276958405e301,-1.0362205133633317e301,-1.0366413990308228e301,-1.0370622846983141e301,-1.0374831703658054e301,-1.0379040560332965e301,-1.0383249417007877e301,-1.0387458273682788e301,-1.0391667130357701e301,-1.0395875987032613e301,-1.0400084843707525e301,-1.0404293700382436e301,-1.0408502557057349e301,-1.041271141373226e301,-1.0416920270407173e301,-1.0421129127082086e301,-1.0425337983756996e301,-1.0429546840431909e301,-1.043375569710682e301,-1.0437964553781733e301,-1.0442173410456646e301,-1.0446382267131556e301,-1.0450591123806469e301,-1.0454799980481381e301,-1.0459008837156293e301,-1.0463217693831205e301,-1.0467426550506117e301,-1.0471635407181028e301,-1.0475844263855941e301,-1.0480053120530852e301,-1.0484261977205765e301,-1.0488470833880677e301,-1.0492679690555588e301,-1.0496888547230501e301,-1.0501097403905413e301,-1.0505306260580325e301,-1.0509515117255236e301,-1.0513723973930149e301,-1.051793283060506e301,-1.0522141687279973e301,-1.0526350543954885e301,-1.0530559400629796e301,-1.0534768257304709e301,-1.053897711397962e301,-1.0543185970654533e301,-1.0547394827329446e301,-1.0551603684004356e301,-1.0555812540679268e301,-1.0560021397354181e301,-1.0564230254029093e301,-1.0568439110704005e301,-1.0572647967378916e301,-1.0576856824053828e301,-1.0581065680728741e301,-1.0585274537403652e301,-1.0589483394078564e301,-1.0593692250753476e301,-1.0597901107428388e301,-1.0602109964103301e301,-1.0606318820778213e301,-1.0610527677453124e301,-1.0614736534128036e301,-1.0618945390802948e301,-1.062315424747786e301,-1.0627363104152773e301,-1.0631571960827683e301,-1.0635780817502596e301,-1.0639989674177509e301,-1.064419853085242e301,-1.0648407387527333e301,-1.0652616244202244e301,-1.0656825100877156e301,-1.0661033957552068e301,-1.066524281422698e301,-1.0669451670901892e301,-1.0673660527576804e301,-1.0677869384251715e301,-1.0682078240926628e301,-1.0686287097601541e301,-1.0690495954276452e301,-1.0694704810951364e301,-1.0698913667626276e301,-1.0703122524301188e301,-1.07073313809761e301,-1.0711540237651012e301,-1.0715749094325923e301,-1.0719957951000837e301,-1.0724166807675749e301,-1.072837566435066e301,-1.0732584521025572e301,-1.0736793377700483e301,-1.0741002234375397e301,-1.0745211091050308e301,-1.074941994772522e301,-1.0753628804400131e301,-1.0757837661075043e301,-1.0762046517749957e301,-1.0766255374424868e301,-1.077046423109978e301,-1.077467308777469e301,-1.0778881944449605e301,-1.0783090801124517e301,-1.0787299657799428e301,-1.079150851447434e301,-1.079571737114925e301,-1.0799926227824165e301,-1.0804135084499076e301,-1.0808343941173988e301,-1.08125527978489e301,-1.081676165452381e301,-1.0820970511198725e301,-1.0825179367873636e301,-1.0829388224548547e301,-1.083359708122346e301,-1.0837805937898373e301,-1.0842014794573284e301,-1.0846223651248196e301,-1.0850432507923107e301,-1.0854641364598019e301,-1.0858850221272933e301,-1.0863059077947844e301,-1.0867267934622755e301,-1.0871476791297667e301,-1.0875685647972578e301,-1.0879894504647492e301,-1.0884103361322404e301,-1.0888312217997315e301,-1.0892521074672227e301,-1.0896729931347138e301,-1.0900938788022052e301,-1.0905147644696963e301,-1.0909356501371875e301,-1.0913565358046786e301,-1.09177742147217e301,-1.0921983071396612e301,-1.0926191928071523e301,-1.0930400784746437e301,-1.0934609641421346e301,-1.093881849809626e301,-1.0943027354771171e301,-1.0947236211446083e301,-1.0951445068120997e301,-1.0955653924795906e301,-1.095986278147082e301,-1.0964071638145731e301,-1.0968280494820643e301,-1.0972489351495557e301,-1.0976698208170466e301,-1.098090706484538e301,-1.098511592152029e301,-1.0989324778195205e301,-1.0993533634870116e301,-1.0997742491545025e301,-1.100195134821994e301,-1.100616020489485e301,-1.1010369061569765e301,-1.1014577918244676e301,-1.1018786774919585e301,-1.10229956315945e301,-1.102720448826941e301,-1.1031413344944324e301,-1.1035622201619236e301,-1.1039831058294147e301,-1.1044039914969059e301,-1.104824877164397e301,-1.1052457628318884e301,-1.1056666484993795e301,-1.1060875341668707e301,-1.1065084198343618e301,-1.106929305501853e301,-1.1073501911693444e301,-1.1077710768368355e301,-1.1081919625043267e301,-1.108612848171818e301,-1.109033733839309e301,-1.1094546195068003e301,-1.1098755051742915e301,-1.1102963908417826e301,-1.110717276509274e301,-1.111138162176765e301,-1.1115590478442563e301,-1.1119799335117475e301,-1.1124008191792386e301,-1.11282170484673e301,-1.1132425905142212e301,-1.1136634761817123e301,-1.1140843618492034e301,-1.1145052475166946e301,-1.114926133184186e301,-1.1153470188516771e301,-1.1157679045191683e301,-1.1161887901866594e301,-1.1166096758541506e301,-1.117030561521642e301,-1.117451447189133e301,-1.1178723328566245e301,-1.1182932185241154e301,-1.1187141041916065e301,-1.119134989859098e301,-1.119555875526589e301,-1.1199767611940805e301,-1.1203976468615714e301,-1.1208185325290625e301,-1.121239418196554e301,-1.121660303864045e301,-1.1220811895315364e301,-1.1225020751990276e301,-1.1229229608665185e301,-1.1233438465340099e301,-1.123764732201501e301,-1.1241856178689924e301,-1.1246065035364836e301,-1.1250273892039745e301,-1.1254482748714658e301,-1.125869160538957e301,-1.1262900462064484e301,-1.1267109318739395e301,-1.1271318175414307e301,-1.1275527032089218e301,-1.127973588876413e301,-1.1283944745439044e301,-1.1288153602113955e301,-1.1292362458788866e301,-1.1296571315463778e301,-1.130078017213869e301,-1.1304989028813603e301,-1.1309197885488515e301,-1.1313406742163426e301,-1.131761559883834e301,-1.132182445551325e301,-1.1326033312188163e301,-1.1330242168863074e301,-1.1334451025537986e301,-1.13386598822129e301,-1.134286873888781e301,-1.1347077595562723e301,-1.1351286452237634e301,-1.1355495308912546e301,-1.135970416558746e301,-1.136391302226237e301,-1.1368121878937282e301,-1.1372330735612194e301,-1.1376539592287105e301,-1.138074844896202e301,-1.138495730563693e301,-1.1389166162311842e301,-1.1393375018986754e301,-1.1397583875661665e301,-1.140179273233658e301,-1.140600158901149e301,-1.1410210445686404e301,-1.1414419302361313e301,-1.1418628159036225e301,-1.1422837015711139e301,-1.142704587238605e301,-1.1431254729060964e301,-1.1435463585735873e301,-1.1439672442410785e301,-1.1443881299085699e301,-1.144809015576061e301,-1.1452299012435524e301,-1.1456507869110435e301,-1.1460716725785344e301,-1.1464925582460258e301,-1.146913443913517e301,-1.1473343295810084e301,-1.1477552152484995e301,-1.1481761009159904e301,-1.1485969865834818e301,-1.149017872250973e301,-1.1494387579184643e301,-1.1498596435859555e301,-1.1502805292534466e301,-1.1507014149209378e301,-1.151122300588429e301,-1.1515431862559203e301,-1.1519640719234115e301,-1.1523849575909026e301,-1.1528058432583937e301,-1.153226728925885e301,-1.1536476145933763e301,-1.1540685002608674e301,-1.1544893859283586e301,-1.15491027159585e301,-1.1553311572633409e301,-1.155752042930832e301,-1.1561729285983234e301,-1.1565938142658145e301,-1.157014699933306e301,-1.1574355856007968e301,-1.157856471268288e301,-1.1582773569357794e301,-1.1586982426032705e301,-1.159119128270762e301,-1.159540013938253e301,-1.159960899605744e301,-1.1603817852732353e301,-1.1608026709407265e301,-1.1612235566082179e301,-1.161644442275709e301,-1.1620653279432e301,-1.1624862136106913e301,-1.1629070992781825e301,-1.1633279849456739e301,-1.163748870613165e301,-1.1641697562806561e301,-1.1645906419481473e301,-1.1650115276156384e301,-1.1654324132831298e301,-1.165853298950621e301,-1.1662741846181121e301,-1.1666950702856033e301,-1.1671159559530944e301,-1.1675368416205858e301,-1.167957727288077e301,-1.168378612955568e301,-1.1687994986230595e301,-1.1692203842905504e301,-1.1696412699580418e301,-1.170062155625533e301,-1.170483041293024e301,-1.1709039269605155e301,-1.1713248126280064e301,-1.1717456982954977e301,-1.172166583962989e301,-1.17258746963048e301,-1.1730083552979714e301,-1.1734292409654626e301,-1.1738501266329537e301,-1.1742710123004449e301,-1.174691897967936e301,-1.1751127836354274e301,-1.1755336693029185e301,-1.1759545549704097e301,-1.1763754406379008e301,-1.176796326305392e301,-1.1772172119728834e301,-1.1776380976403745e301,-1.178058983307866e301,-1.1784798689753568e301,-1.178900754642848e301,-1.1793216403103394e301,-1.1797425259778305e301,-1.180163411645322e301,-1.1805842973128128e301,-1.181005182980304e301,-1.1814260686477953e301,-1.1818469543152865e301,-1.1822678399827779e301,-1.182688725650269e301,-1.18310961131776e301,-1.1835304969852513e301,-1.1839513826527424e301,-1.1843722683202338e301,-1.184793153987725e301,-1.185214039655216e301,-1.1856349253227073e301,-1.1860558109901984e301,-1.1864766966576898e301,-1.186897582325181e301,-1.187318467992672e301,-1.1877393536601632e301,-1.1881602393276544e301,-1.1885811249951458e301,-1.189002010662637e301,-1.189422896330128e301,-1.1898437819976195e301,-1.1902646676651104e301,-1.1906855533326018e301,-1.191106439000093e301,-1.191527324667584e301,-1.1919482103350754e301,-1.1923690960025663e301,-1.1927899816700577e301,-1.1932108673375489e301,-1.19363175300504e301,-1.1940526386725314e301,-1.1944735243400226e301,-1.1948944100075137e301,-1.1953152956750048e301,-1.195736181342496e301,-1.1961570670099874e301,-1.1965779526774785e301,-1.1969988383449697e301,-1.1974197240124608e301,-1.197840609679952e301,-1.1982614953474434e301,-1.1986823810149345e301,-1.199103266682426e301,-1.1995241523499168e301,-1.199945038017408e301,-1.2003659236848993e301,-1.2007868093523905e301,-1.2012076950198819e301,-1.2016285806873728e301,-1.202049466354864e301,-1.2024703520223553e301,-1.2028912376898464e301,-1.2033121233573378e301,-1.203733009024829e301,-1.20415389469232e301,-1.2045747803598113e301,-1.2049956660273024e301,-1.2054165516947938e301,-1.205837437362285e301,-1.2062583230297759e301,-1.2066792086972672e301,-1.2071000943647584e301,-1.2075209800322498e301,-1.207941865699741e301,-1.208362751367232e301,-1.2087836370347232e301,-1.2092045227022144e301,-1.2096254083697058e301,-1.210046294037197e301,-1.210467179704688e301,-1.2108880653721792e301,-1.2113089510396703e301,-1.2117298367071617e301,-1.2121507223746529e301,-1.212571608042144e301,-1.2129924937096354e301,-1.2134133793771263e301,-1.2138342650446177e301,-1.2142551507121089e301,-1.2146760363796e301,-1.2150969220470914e301,-1.2155178077145823e301,-1.2159386933820737e301,-1.2163595790495648e301,-1.216780464717056e301,-1.2172013503845474e301,-1.2176222360520385e301,-1.2180431217195297e301,-1.2184640073870208e301,-1.218884893054512e301,-1.2193057787220033e301,-1.2197266643894945e301,-1.2201475500569856e301,-1.2205684357244768e301,-1.220989321391968e301,-1.2214102070594593e301,-1.2218310927269505e301,-1.2222519783944418e301,-1.2226728640619327e301,-1.223093749729424e301,-1.2235146353969153e301,-1.2239355210644064e301,-1.2243564067318978e301,-1.2247772923993887e301,-1.2251981780668799e301,-1.2256190637343713e301,-1.2260399494018624e301,-1.2264608350693538e301,-1.226881720736845e301,-1.2273026064043358e301,-1.2277234920718272e301,-1.2281443777393184e301,-1.2285652634068098e301,-1.228986149074301e301,-1.2294070347417918e301,-1.2298279204092832e301,-1.2302488060767743e301,-1.2306696917442657e301,-1.2310905774117569e301,-1.231511463079248e301,-1.2319323487467392e301,-1.2323532344142303e301,-1.2327741200817217e301,-1.2331950057492129e301,-1.233615891416704e301,-1.2340367770841951e301,-1.2344576627516863e301,-1.2348785484191777e301,-1.2352994340866688e301,-1.23572031975416e301,-1.2361412054216514e301,-1.2365620910891423e301,-1.2369829767566334e301,-1.2374038624241248e301,-1.237824748091616e301,-1.2382456337591073e301,-1.2386665194265982e301,-1.2390874050940894e301,-1.2395082907615808e301,-1.239929176429072e301,-1.2403500620965633e301,-1.2407709477640545e301,-1.2411918334315454e301,-1.2416127190990367e301,-1.242033604766528e301,-1.2424544904340193e301,-1.2428753761015104e301,-1.2432962617690013e301,-1.2437171474364927e301,-1.2441380331039839e301,-1.2445589187714753e301,-1.2449798044389664e301,-1.2454006901064576e301,-1.2458215757739487e301,-1.2462424614414398e301,-1.2466633471089312e301,-1.2470842327764224e301,-1.2475051184439135e301,-1.2479260041114047e301,-1.2483468897788958e301,-1.2487677754463872e301,-1.2491886611138784e301,-1.2496095467813695e301,-1.250030432448861e301,-1.2504513181163518e301,-1.2508722037838432e301,-1.2512930894513343e301,-1.2517139751188255e301,-1.2521348607863169e301,-1.2525557464538078e301,-1.2529766321212992e301,-1.2533975177887903e301,-1.2538184034562814e301,-1.2542392891237728e301,-1.254660174791264e301,-1.2550810604587551e301,-1.2555019461262463e301,-1.2559228317937374e301,-1.2563437174612288e301,-1.25676460312872e301,-1.257185488796211e301,-1.2576063744637022e301,-1.2580272601311934e301,-1.2584481457986848e301,-1.258869031466176e301,-1.2592899171336673e301,-1.2597108028011582e301,-1.2601316884686494e301,-1.2605525741361408e301,-1.260973459803632e301,-1.2613943454711233e301,-1.2618152311386142e301,-1.2622361168061053e301,-1.2626570024735967e301,-1.2630778881410879e301,-1.2634987738085793e301,-1.2639196594760704e301,-1.2643405451435613e301,-1.2647614308110527e301,-1.2651823164785438e301,-1.2656032021460352e301,-1.2660240878135264e301,-1.2664449734810173e301,-1.2668658591485087e301,-1.2672867448159998e301,-1.2677076304834912e301,-1.2681285161509824e301,-1.2685494018184735e301,-1.2689702874859646e301,-1.2693911731534558e301,-1.2698120588209472e301,-1.2702329444884383e301,-1.2706538301559295e301,-1.2710747158234206e301,-1.2714956014909118e301,-1.2719164871584032e301,-1.2723373728258943e301,-1.2727582584933854e301,-1.2731791441608768e301,-1.2736000298283677e301,-1.2740209154958591e301,-1.2744418011633503e301,-1.2748626868308414e301,-1.2752835724983328e301,-1.2757044581658237e301,-1.276125343833315e301,-1.2765462295008062e301,-1.2769671151682974e301,-1.2773880008357888e301,-1.27780888650328e301,-1.278229772170771e301,-1.2786506578382622e301,-1.2790715435057534e301,-1.2794924291732448e301,-1.279913314840736e301,-1.280334200508227e301,-1.2807550861757182e301,-1.2811759718432093e301,-1.2815968575107007e301,-1.2820177431781919e301,-1.2824386288456833e301,-1.2828595145131742e301,-1.2832804001806653e301,-1.2837012858481567e301,-1.2841221715156479e301,-1.2845430571831392e301,-1.2849639428506301e301,-1.2853848285181213e301,-1.2858057141856127e301,-1.2862265998531038e301,-1.2866474855205952e301,-1.2870683711880864e301,-1.2874892568555773e301,-1.2879101425230687e301,-1.2883310281905598e301,-1.2887519138580512e301,-1.2891727995255423e301,-1.2895936851930332e301,-1.2900145708605246e301,-1.2904354565280158e301,-1.2908563421955072e301,-1.2912772278629983e301,-1.2916981135304895e301,-1.2921189991979806e301,-1.2925398848654717e301,-1.2929607705329631e301,-1.2933816562004543e301,-1.2938025418679454e301,-1.2942234275354366e301,-1.2946443132029277e301,-1.295065198870419e301,-1.2954860845379103e301,-1.2959069702054014e301,-1.2963278558728928e301,-1.2967487415403837e301,-1.297169627207875e301,-1.2975905128753662e301,-1.2980113985428574e301,-1.2984322842103488e301,-1.2988531698778397e301,-1.299274055545331e301,-1.2996949412128222e301,-1.3001158268803133e301,-1.3005367125478047e301,-1.3009575982152959e301,-1.301378483882787e301,-1.3017993695502782e301,-1.3022202552177693e301,-1.3026411408852607e301,-1.3030620265527519e301,-1.303482912220243e301,-1.3039037978877341e301,-1.3043246835552253e301,-1.3047455692227167e301,-1.3051664548902078e301,-1.3055873405576992e301,-1.3060082262251901e301,-1.3064291118926813e301,-1.3068499975601727e301,-1.3072708832276638e301,-1.3076917688951552e301,-1.308112654562646e301,-1.3085335402301372e301,-1.3089544258976286e301,-1.3093753115651198e301,-1.3097961972326112e301,-1.3102170829001023e301,-1.3106379685675932e301,-1.3110588542350846e301,-1.3114797399025758e301,-1.3119006255700671e301,-1.3123215112375583e301,-1.3127423969050492e301,-1.3131632825725406e301,-1.3135841682400317e301,-1.314005053907523e301,-1.3144259395750143e301,-1.3148468252425054e301,-1.3152677109099966e301,-1.3156885965774877e301,-1.316109482244979e301,-1.3165303679124702e301,-1.3169512535799614e301,-1.3173721392474525e301,-1.3177930249149437e301,-1.3182139105824348e301,-1.3186347962499262e301,-1.3190556819174174e301,-1.3194765675849087e301,-1.3198974532523996e301,-1.3203183389198908e301,-1.3207392245873822e301,-1.3211601102548733e301,-1.3215809959223647e301,-1.3220018815898556e301,-1.3224227672573468e301,-1.3228436529248382e301,-1.3232645385923293e301,-1.3236854242598207e301,-1.3241063099273118e301,-1.3245271955948027e301,-1.3249480812622941e301,-1.3253689669297853e301,-1.3257898525972767e301,-1.3262107382647678e301,-1.3266316239322587e301,-1.32705250959975e301,-1.3274733952672412e301,-1.3278942809347326e301,-1.3283151666022238e301,-1.328736052269715e301,-1.329156937937206e301,-1.3295778236046972e301,-1.3299987092721886e301,-1.3304195949396798e301,-1.330840480607171e301,-1.331261366274662e301,-1.3316822519421532e301,-1.3321031376096446e301,-1.3325240232771357e301,-1.3329449089446269e301,-1.3333657946121183e301,-1.3337866802796092e301,-1.3342075659471006e301,-1.3346284516145917e301,-1.3350493372820828e301,-1.3354702229495742e301,-1.3358911086170651e301,-1.3363119942845565e301,-1.3367328799520477e301,-1.3371537656195388e301,-1.3375746512870302e301,-1.3379955369545214e301,-1.3384164226220125e301,-1.3388373082895036e301,-1.3392581939569948e301,-1.3396790796244862e301,-1.3400999652919773e301,-1.3405208509594685e301,-1.3409417366269596e301,-1.3413626222944508e301,-1.3417835079619422e301,-1.3422043936294333e301,-1.3426252792969247e301,-1.3430461649644156e301,-1.3434670506319067e301,-1.3438879362993981e301,-1.3443088219668893e301,-1.3447297076343807e301,-1.3451505933018716e301,-1.3455714789693627e301,-1.345992364636854e301,-1.3464132503043453e301,-1.3468341359718366e301,-1.3472550216393278e301,-1.3476759073068187e301,-1.34809679297431e301,-1.3485176786418012e301,-1.3489385643092926e301,-1.3493594499767838e301,-1.3497803356442747e301,-1.350201221311766e301,-1.3506221069792572e301,-1.3510429926467486e301,-1.3514638783142397e301,-1.3518847639817309e301,-1.352305649649222e301,-1.3527265353167132e301,-1.3531474209842046e301,-1.3535683066516957e301,-1.3539891923191869e301,-1.354410077986678e301,-1.3548309636541691e301,-1.3552518493216605e301,-1.3556727349891517e301,-1.3560936206566428e301,-1.3565145063241342e301,-1.3569353919916251e301,-1.3573562776591165e301,-1.3577771633266077e301,-1.3581980489940988e301,-1.3586189346615902e301,-1.359039820329081e301,-1.3594607059965725e301,-1.3598815916640636e301,-1.3603024773315548e301,-1.3607233629990462e301,-1.3611442486665373e301,-1.3615651343340285e301,-1.3619860200015196e301,-1.3624069056690107e301,-1.3628277913365021e301,-1.3632486770039933e301,-1.3636695626714844e301,-1.3640904483389756e301,-1.3645113340064667e301,-1.364932219673958e301,-1.3653531053414493e301,-1.3657739910089406e301,-1.3661948766764315e301,-1.3666157623439227e301,-1.367036648011414e301,-1.3674575336789052e301,-1.3678784193463966e301,-1.3682993050138875e301,-1.3687201906813787e301,-1.36914107634887e301,-1.3695619620163612e301,-1.3699828476838526e301,-1.3704037333513437e301,-1.3708246190188346e301,-1.371245504686326e301,-1.3716663903538172e301,-1.3720872760213086e301,-1.3725081616887997e301,-1.3729290473562906e301,-1.373349933023782e301,-1.3737708186912731e301,-1.3741917043587645e301,-1.3746125900262557e301,-1.3750334756937468e301,-1.375454361361238e301,-1.3758752470287291e301,-1.3762961326962205e301,-1.3767170183637117e301,-1.3771379040312028e301,-1.377558789698694e301,-1.377979675366185e301,-1.3784005610336765e301,-1.3788214467011676e301,-1.3792423323686588e301,-1.3796632180361502e301,-1.380084103703641e301,-1.3805049893711325e301,-1.3809258750386236e301,-1.3813467607061148e301,-1.3817676463736061e301,-1.382188532041097e301,-1.3826094177085884e301,-1.3830303033760796e301,-1.3834511890435707e301,-1.383872074711062e301,-1.3842929603785533e301,-1.3847138460460444e301,-1.3851347317135356e301,-1.3855556173810267e301,-1.385976503048518e301,-1.3863973887160092e301,-1.3868182743835004e301,-1.3872391600509915e301,-1.3876600457184827e301,-1.388080931385974e301,-1.3885018170534652e301,-1.3889227027209566e301,-1.3893435883884475e301,-1.3897644740559386e301,-1.39018535972343e301,-1.3906062453909212e301,-1.3910271310584126e301,-1.3914480167259035e301,-1.3918689023933946e301,-1.392289788060886e301,-1.3927106737283772e301,-1.3931315593958685e301,-1.3935524450633597e301,-1.3939733307308506e301,-1.394394216398342e301,-1.3948151020658331e301,-1.3952359877333245e301,-1.3956568734008157e301,-1.3960777590683066e301,-1.396498644735798e301,-1.396919530403289e301,-1.3973404160707802e301,-1.3977613017382716e301,-1.3981821874057628e301,-1.398603073073254e301,-1.399023958740745e301,-1.3994448444082362e301,-1.3998657300757276e301,-1.4002866157432188e301,-1.4007075014107101e301,-1.401128387078201e301,-1.4015492727456922e301,-1.4019701584131836e301,-1.4023910440806747e301,-1.402811929748166e301,-1.403232815415657e301,-1.4036537010831482e301,-1.4040745867506396e301,-1.4044954724181307e301,-1.404916358085622e301,-1.4053372437531132e301,-1.4057581294206041e301,-1.4061790150880955e301,-1.4065999007555867e301,-1.407020786423078e301,-1.4074416720905692e301,-1.40786255775806e301,-1.4082834434255515e301,-1.4087043290930426e301,-1.409125214760534e301,-1.4095461004280252e301,-1.4099669860955163e301,-1.4103878717630075e301,-1.4108087574304986e301,-1.41122964309799e301,-1.4116505287654812e301,-1.4120714144329723e301,-1.4124923001004635e301,-1.4129131857679546e301,-1.413334071435446e301,-1.4137549571029371e301,-1.4141758427704283e301,-1.4145967284379197e301,-1.4150176141054106e301,-1.415438499772902e301,-1.415859385440393e301,-1.4162802711078843e301,-1.4167011567753756e301,-1.4171220424428665e301,-1.417542928110358e301,-1.417963813777849e301,-1.4183846994453402e301,-1.4188055851128316e301,-1.4192264707803228e301,-1.419647356447814e301,-1.420068242115305e301,-1.4204891277827962e301,-1.4209100134502876e301,-1.4213308991177787e301,-1.4217517847852699e301,-1.422172670452761e301,-1.4225935561202522e301,-1.4230144417877436e301,-1.4234353274552347e301,-1.423856213122726e301,-1.424277098790217e301,-1.4246979844577081e301,-1.4251188701251995e301,-1.4255397557926907e301,-1.425960641460182e301,-1.426381527127673e301,-1.4268024127951641e301,-1.4272232984626555e301,-1.4276441841301467e301,-1.428065069797638e301,-1.4284859554651292e301,-1.42890684113262e301,-1.4293277268001115e301,-1.4297486124676026e301,-1.430169498135094e301,-1.4305903838025852e301,-1.431011269470076e301,-1.4314321551375675e301,-1.4318530408050586e301,-1.43227392647255e301,-1.4326948121400411e301,-1.4331156978075323e301,-1.4335365834750234e301,-1.4339574691425146e301,-1.434378354810006e301,-1.434799240477497e301,-1.4352201261449883e301,-1.4356410118124794e301,-1.4360618974799705e301,-1.436482783147462e301,-1.436903668814953e301,-1.4373245544824442e301,-1.4377454401499356e301,-1.4381663258174265e301,-1.438587211484918e301,-1.439008097152409e301,-1.4394289828199002e301,-1.4398498684873916e301,-1.4402707541548825e301,-1.440691639822374e301,-1.441112525489865e301,-1.4415334111573562e301,-1.4419542968248476e301,-1.4423751824923387e301,-1.4427960681598299e301,-1.443216953827321e301,-1.4436378394948121e301,-1.4440587251623035e301,-1.4444796108297947e301,-1.4449004964972858e301,-1.445321382164777e301,-1.4457422678322681e301,-1.4461631534997595e301,-1.4465840391672507e301,-1.447004924834742e301,-1.447425810502233e301,-1.447846696169724e301,-1.4482675818372155e301,-1.4486884675047066e301,-1.449109353172198e301,-1.449530238839689e301,-1.44995112450718e301,-1.4503720101746715e301,-1.4507928958421626e301,-1.451213781509654e301,-1.4516346671771451e301,-1.452055552844636e301,-1.4524764385121274e301,-1.4528973241796186e301,-1.45331820984711e301,-1.453739095514601e301,-1.454159981182092e301,-1.4545808668495834e301,-1.4550017525170746e301,-1.455422638184566e301,-1.455843523852057e301,-1.4562644095195482e301,-1.4566852951870394e301,-1.4571061808545305e301,-1.457527066522022e301,-1.457947952189513e301,-1.4583688378570042e301,-1.4587897235244954e301,-1.4592106091919865e301,-1.459631494859478e301,-1.460052380526969e301,-1.4604732661944602e301,-1.4608941518619516e301,-1.4613150375294425e301,-1.4617359231969339e301,-1.462156808864425e301,-1.4625776945319162e301,-1.4629985801994075e301,-1.4634194658668984e301,-1.4638403515343898e301,-1.464261237201881e301,-1.4646821228693721e301,-1.4651030085368635e301,-1.4655238942043547e301,-1.4659447798718458e301,-1.466365665539337e301,-1.466786551206828e301,-1.4672074368743195e301,-1.4676283225418106e301,-1.4680492082093018e301,-1.468470093876793e301,-1.468890979544284e301,-1.4693118652117755e301,-1.4697327508792666e301,-1.470153636546758e301,-1.470574522214249e301,-1.47099540788174e301,-1.4714162935492314e301,-1.4718371792167226e301,-1.472258064884214e301,-1.4726789505517049e301,-1.473099836219196e301,-1.4735207218866874e301,-1.4739416075541786e301,-1.47436249322167e301,-1.474783378889161e301,-1.475204264556652e301,-1.4756251502241434e301,-1.4760460358916345e301,-1.476466921559126e301,-1.476887807226617e301,-1.477308692894108e301,-1.4777295785615994e301,-1.4781504642290905e301,-1.4785713498965816e301,-1.478992235564073e301,-1.4794131212315642e301,-1.4798340068990553e301,-1.4802548925665465e301,-1.4806757782340376e301,-1.481096663901529e301,-1.4815175495690202e301,-1.4819384352365113e301,-1.4823593209040025e301,-1.4827802065714936e301,-1.483201092238985e301,-1.4836219779064761e301,-1.4840428635739675e301,-1.4844637492414584e301,-1.4848846349089496e301,-1.485305520576441e301,-1.485726406243932e301,-1.4861472919114235e301,-1.4865681775789144e301,-1.4869890632464055e301,-1.487409948913897e301,-1.487830834581388e301,-1.4882517202488795e301,-1.4886726059163706e301,-1.4890934915838615e301,-1.489514377251353e301,-1.489935262918844e301,-1.4903561485863354e301,-1.4907770342538266e301,-1.4911979199213175e301,-1.4916188055888089e301,-1.4920396912563e301,-1.4924605769237914e301,-1.4928814625912826e301,-1.4933023482587737e301,-1.4937232339262649e301,-1.494144119593756e301,-1.4945650052612474e301,-1.4949858909287385e301,-1.4954067765962297e301,-1.4958276622637208e301,-1.496248547931212e301,-1.4966694335987034e301,-1.4970903192661945e301,-1.4975112049336857e301,-1.497932090601177e301,-1.498352976268668e301,-1.4987738619361593e301,-1.4991947476036505e301,-1.4996156332711416e301,-1.500036518938633e301,-1.500457404606124e301,-1.5008782902736153e301,-1.5012991759411065e301,-1.5017200616085976e301,-1.502140947276089e301,-1.5025618329435801e301,-1.5029827186110713e301,-1.5034036042785624e301,-1.5038244899460536e301,-1.504245375613545e301,-1.504666261281036e301,-1.5050871469485273e301,-1.5055080326160184e301,-1.5059289182835095e301,-1.506349803951001e301,-1.506770689618492e301,-1.5071915752859835e301,-1.5076124609534744e301,-1.5080333466209655e301,-1.508454232288457e301,-1.508875117955948e301,-1.5092960036234394e301,-1.5097168892909303e301,-1.5101377749584215e301,-1.510558660625913e301,-1.510979546293404e301,-1.5114004319608954e301,-1.5118213176283866e301,-1.5122422032958775e301,-1.5126630889633689e301,-1.51308397463086e301,-1.5135048602983514e301,-1.5139257459658425e301,-1.5143466316333334e301,-1.5147675173008248e301,-1.515188402968316e301,-1.5156092886358074e301,-1.5160301743032985e301,-1.5164510599707897e301,-1.5168719456382808e301,-1.517292831305772e301,-1.5177137169732633e301,-1.5181346026407545e301,-1.5185554883082456e301,-1.5189763739757368e301,-1.519397259643228e301,-1.5198181453107193e301,-1.5202390309782105e301,-1.5206599166457016e301,-1.521080802313193e301,-1.521501687980684e301,-1.5219225736481753e301,-1.5223434593156664e301,-1.5227643449831576e301,-1.523185230650649e301,-1.5236061163181399e301,-1.5240270019856313e301,-1.5244478876531224e301,-1.5248687733206136e301,-1.525289658988105e301,-1.525710544655596e301,-1.5261314303230872e301,-1.5265523159905784e301,-1.5269732016580695e301,-1.527394087325561e301,-1.527814972993052e301,-1.5282358586605432e301,-1.5286567443280344e301,-1.5290776299955255e301,-1.529498515663017e301,-1.529919401330508e301,-1.5303402869979994e301,-1.5307611726654903e301,-1.5311820583329815e301,-1.5316029440004729e301,-1.532023829667964e301,-1.5324447153354554e301,-1.5328656010029463e301,-1.5332864866704374e301,-1.5337073723379288e301,-1.53412825800542e301,-1.5345491436729114e301,-1.5349700293404025e301,-1.5353909150078934e301,-1.5358118006753848e301,-1.536232686342876e301,-1.5366535720103673e301,-1.5370744576778585e301,-1.5374953433453494e301,-1.5379162290128408e301,-1.538337114680332e301,-1.5387580003478233e301,-1.5391788860153145e301,-1.5395997716828056e301,-1.5400206573502968e301,-1.540441543017788e301,-1.5408624286852793e301,-1.5412833143527704e301,-1.5417042000202616e301,-1.5421250856877527e301,-1.5425459713552439e301,-1.5429668570227353e301,-1.5433877426902264e301,-1.5438086283577176e301,-1.544229514025209e301,-1.5446503996926998e301,-1.5450712853601912e301,-1.5454921710276824e301,-1.5459130566951735e301,-1.546333942362665e301,-1.5467548280301558e301,-1.5471757136976472e301,-1.5475965993651384e301,-1.5480174850326295e301,-1.548438370700121e301,-1.548859256367612e301,-1.5492801420351032e301,-1.5497010277025943e301,-1.5501219133700855e301,-1.5505427990375769e301,-1.550963684705068e301,-1.551384570372559e301,-1.5518054560400503e301,-1.5522263417075415e301,-1.5526472273750328e301,-1.553068113042524e301,-1.5534889987100154e301,-1.5539098843775063e301,-1.5543307700449974e301,-1.5547516557124888e301,-1.55517254137998e301,-1.5555934270474713e301,-1.5560143127149623e301,-1.5564351983824534e301,-1.5568560840499448e301,-1.557276969717436e301,-1.5576978553849273e301,-1.5581187410524185e301,-1.5585396267199094e301,-1.5589605123874008e301,-1.559381398054892e301,-1.559802283722383e301,-1.5602231693898744e301,-1.5606440550573653e301,-1.5610649407248567e301,-1.5614858263923479e301,-1.561906712059839e301,-1.5623275977273304e301,-1.5627484833948216e301,-1.5631693690623127e301,-1.5635902547298039e301,-1.564011140397295e301,-1.5644320260647864e301,-1.5648529117322775e301,-1.5652737973997687e301,-1.5656946830672598e301,-1.566115568734751e301,-1.5665364544022424e301,-1.5669573400697335e301,-1.567378225737225e301,-1.5677991114047158e301,-1.568219997072207e301,-1.5686408827396983e301,-1.5690617684071895e301,-1.5694826540746809e301,-1.5699035397421718e301,-1.570324425409663e301,-1.5707453110771543e301,-1.5711661967446455e301,-1.5715870824121368e301,-1.572007968079628e301,-1.572428853747119e301,-1.5728497394146103e301,-1.5732706250821014e301,-1.5736915107495928e301,-1.574112396417084e301,-1.5745332820845749e301,-1.5749541677520663e301,-1.5753750534195574e301,-1.5757959390870488e301,-1.57621682475454e301,-1.576637710422031e301,-1.5770585960895222e301,-1.5774794817570134e301,-1.5779003674245048e301,-1.578321253091996e301,-1.578742138759487e301,-1.5791630244269782e301,-1.5795839100944694e301,-1.5800047957619607e301,-1.580425681429452e301,-1.580846567096943e301,-1.5812674527644344e301,-1.5816883384319253e301,-1.5821092240994167e301,-1.5825301097669079e301,-1.582950995434399e301,-1.5833718811018904e301,-1.5837927667693813e301,-1.5842136524368727e301,-1.5846345381043638e301,-1.585055423771855e301,-1.5854763094393464e301,-1.5858971951068375e301,-1.5863180807743287e301,-1.5867389664418198e301,-1.587159852109311e301,-1.5875807377768023e301,-1.5880016234442935e301,-1.5884225091117846e301,-1.5888433947792758e301,-1.589264280446767e301,-1.5896851661142583e301,-1.5901060517817495e301,-1.5905269374492408e301,-1.5909478231167318e301,-1.591368708784223e301,-1.5917895944517143e301,-1.5922104801192054e301,-1.5926313657866968e301,-1.5930522514541877e301,-1.5934731371216789e301,-1.5938940227891703e301,-1.5943149084566614e301,-1.5947357941241528e301,-1.595156679791644e301,-1.5955775654591348e301,-1.5959984511266262e301,-1.5964193367941174e301,-1.5968402224616088e301,-1.5972611081291e301,-1.5976819937965908e301,-1.5981028794640822e301,-1.5985237651315734e301,-1.5989446507990647e301,-1.599365536466556e301,-1.599786422134047e301,-1.6002073078015382e301,-1.6006281934690293e301,-1.6010490791365207e301,-1.6014699648040119e301,-1.601890850471503e301,-1.6023117361389942e301,-1.6027326218064853e301,-1.6031535074739767e301,-1.6035743931414678e301,-1.603995278808959e301,-1.6044161644764504e301,-1.6048370501439413e301,-1.6052579358114327e301,-1.6056788214789238e301,-1.606099707146415e301,-1.6065205928139063e301,-1.6069414784813972e301,-1.6073623641488886e301,-1.6077832498163798e301,-1.608204135483871e301,-1.6086250211513623e301,-1.6090459068188535e301,-1.6094667924863446e301,-1.6098876781538358e301,-1.610308563821327e301,-1.6107294494888183e301,-1.6111503351563094e301,-1.6115712208238006e301,-1.6119921064912917e301,-1.6124129921587829e301,-1.6128338778262743e301,-1.6132547634937654e301,-1.6136756491612568e301,-1.6140965348287477e301,-1.6145174204962389e301,-1.6149383061637302e301,-1.6153591918312214e301,-1.6157800774987128e301,-1.6162009631662037e301,-1.6166218488336948e301,-1.6170427345011862e301,-1.6174636201686774e301,-1.6178845058361687e301,-1.61830539150366e301,-1.6187262771711508e301,-1.6191471628386422e301,-1.6195680485061333e301,-1.6199889341736247e301,-1.6204098198411159e301,-1.620830705508607e301,-1.6212515911760982e301,-1.6216724768435893e301,-1.6220933625110807e301,-1.6225142481785718e301,-1.622935133846063e301,-1.6233560195135541e301,-1.6237769051810453e301,-1.6241977908485367e301,-1.6246186765160278e301,-1.625039562183519e301,-1.6254604478510103e301,-1.6258813335185013e301,-1.6263022191859926e301,-1.6267231048534838e301,-1.627143990520975e301,-1.6275648761884663e301,-1.6279857618559572e301,-1.6284066475234486e301,-1.6288275331909398e301,-1.629248418858431e301,-1.6296693045259223e301,-1.6300901901934134e301,-1.6305110758609046e301,-1.6309319615283957e301,-1.6313528471958869e301,-1.6317737328633783e301,-1.6321946185308694e301,-1.6326155041983603e301,-1.6330363898658517e301,-1.6334572755333429e301,-1.6338781612008342e301,-1.6342990468683254e301,-1.6347199325358168e301,-1.6351408182033077e301,-1.6355617038707988e301,-1.6359825895382902e301,-1.6364034752057814e301,-1.6368243608732727e301,-1.6372452465407637e301,-1.6376661322082548e301,-1.6380870178757462e301,-1.6385079035432373e301,-1.6389287892107285e301,-1.6393496748782199e301,-1.6397705605457108e301,-1.6401914462132022e301,-1.6406123318806933e301,-1.6410332175481845e301,-1.6414541032156758e301,-1.6418749888831667e301,-1.6422958745506581e301,-1.6427167602181493e301,-1.6431376458856404e301,-1.6435585315531318e301,-1.643979417220623e301,-1.644400302888114e301,-1.6448211885556053e301,-1.6452420742230964e301,-1.6456629598905878e301,-1.646083845558079e301,-1.64650473122557e301,-1.6469256168930612e301,-1.6473465025605524e301,-1.6477673882280438e301,-1.648188273895535e301,-1.6486091595630263e301,-1.6490300452305172e301,-1.6494509308980084e301,-1.6498718165654997e301,-1.650292702232991e301,-1.6507135879004823e301,-1.6511344735679732e301,-1.6515553592354643e301,-1.6519762449029557e301,-1.6523971305704469e301,-1.6528180162379382e301,-1.6532389019054294e301,-1.6536597875729203e301,-1.6540806732404117e301,-1.6545015589079028e301,-1.6549224445753942e301,-1.6553433302428854e301,-1.6557642159103763e301,-1.6561851015778677e301,-1.6566059872453588e301,-1.6570268729128502e301,-1.6574477585803413e301,-1.6578686442478325e301,-1.6582895299153236e301,-1.6587104155828148e301,-1.6591313012503062e301,-1.6595521869177973e301,-1.6599730725852885e301,-1.6603939582527796e301,-1.6608148439202708e301,-1.6612357295877621e301,-1.6616566152552533e301,-1.6620775009227444e301,-1.6624983865902358e301,-1.6629192722577267e301,-1.663340157925218e301,-1.6637610435927093e301,-1.6641819292602004e301,-1.6646028149276918e301,-1.6650237005951827e301,-1.665444586262674e301,-1.6658654719301652e301,-1.6662863575976564e301,-1.6667072432651478e301,-1.667128128932639e301,-1.66754901460013e301,-1.6679699002676212e301,-1.6683907859351124e301,-1.6688116716026037e301,-1.669232557270095e301,-1.669653442937586e301,-1.6700743286050772e301,-1.6704952142725683e301,-1.6709160999400597e301,-1.6713369856075509e301,-1.6717578712750422e301,-1.6721787569425332e301,-1.6725996426100243e301,-1.6730205282775157e301,-1.6734414139450068e301,-1.6738622996124982e301,-1.6742831852799891e301,-1.6747040709474803e301,-1.6751249566149717e301,-1.6755458422824628e301,-1.6759667279499542e301,-1.6763876136174453e301,-1.6768084992849362e301,-1.6772293849524276e301,-1.6776502706199188e301,-1.6780711562874102e301,-1.6784920419549013e301,-1.6789129276223922e301,-1.6793338132898836e301,-1.6797546989573748e301,-1.6801755846248661e301,-1.6805964702923573e301,-1.6810173559598484e301,-1.6814382416273396e301,-1.6818591272948307e301,-1.682280012962322e301,-1.6827008986298133e301,-1.6831217842973044e301]}
},{}],31:[function(require,module,exports){
module.exports={"expected":[1.089632736886924,1.0722056758571277,0.010427319251969158,1.8193323123501792,1.9585081809656884,1.999475089765626,1.3426108761221838,1.6219035590110038,1.8374758659563049,1.9672402108001772,1.9979009101240122,0.6193808819010185,0.23476442487442084,0.14963353524906853,0.7735280734211065,1.9952791136811678,1.4027316521185256,0.25602147961015986,1.871107250777542,1.1865829035492934,1.9916124528526638,1.4321735224879741,0.28974182612489296,0.10959979246031404,1.171170970875552,1.9894662549258406,1.4462462487459944,0.3008555846716624,0.10257906705671149,1.1391625720975675,1.9811610282599421,1.4896657170272287,0.32438556723623435,0.0887575161688785,1.1070080776029116,1.9743872366151898,1.5176556847144145,0.3486248236613032,0.06962635979376985,1.0747412438380666,1.966590513304952,1.5451022068680231,0.37354790707932695,0.06399784327348546,1.0089333471128037,1.9624568098987651,1.5856250591734318,0.3858343162100635,0.05859900254095807,0.9932687611870303,1.9580869392739375,1.598250259661187,0.39827142903974355,0.04316767568026725,0.977605826969606,1.942858580415565,1.6107286617696048,0.46623346609989835,0.03873244294562139,0.9285250065433057,1.9253539267522135,1.6488867503276268,0.4795450288635802,0.03453308561128865,0.9129097235174097,1.9193020611310878,1.6607257286774235,0.49298430063373055,0.02290145734454152,0.8973158106643422,1.8988609737571718,1.6724025784454275,0.5359348158342985,0.013628787656310482,0.8485792407005366,1.8918861465476204,1.7311902207811833,0.5498670413921762,0.011172507060922654,0.8331143201889251,1.8685944408222612,1.7417861573639208,0.5942728318647781,0.013984097682229635,0.7848844494493832,1.8607259336026494,1.7522000747933735,0.6086395212231461,0.0001596093812756827,0.7696134457953854,1.8526462218410154,1.762429417707172,0.6859134198637706,2.4247892305151453e-6,0.7543989742903207,1.8443572881333932,1.7724716760337582,0.7008233772040682,9.061915191443948e-5,0.7392447682543559,1.8358611664146036,1.8222420316639518,0.7158067463693549,0.000424170828234538,0.7241545462197447,1.7877110473761562,1.8310561937262044,0.7308598507472519,0.0010029979714304416,0.6457758370974358,1.7779646053265088,1.8396664315938462,0.7459789966137848,0.0018269585491585971,0.5698134254234567,1.768027266672306,1.848070632490586,0.7611604740397486,0.010217349379268992,0.5557255817639899,1.7125597795114822,1.8562667341973924,0.8421080295014957,0.012572243658331095,0.5417467539612231,1.7014822340529725,1.8642527255585186,0.8575950316535548,0.015169432515628078,0.5278803721336284,1.6902325591997323,1.9028179619144623,0.8731169770726249,0.018008278654127574,0.5141298388077347,1.6281670806872088,1.9094431241188419,0.8886700569907284,0.021088085479042507,0.5004985280832182,1.6159021002873817,1.9406559445663047,0.9042504550001182,0.024408097268760698,0.43071299030949284,1.6034859901075125,1.9458563370807196,0.9198543479897463,0.04585649269365211,0.417904758445645,1.5909217968071268,1.950824635793039,1.0692782779320715,0.05066260248126164,0.4052393608500656,1.5782126033823194,1.9555596215843623,1.084896258125563,0.05570166025200929,0.3927199053523136,1.508912605254673,1.9600601325860076,1.1004934065134626,0.11528119501292466,0.32922906992605316,1.4361411211069217,1.9444547192470538,1.049357638556479,0.09254940017739,0.36813107215868646,1.4816982655523043,1.9683533706931124,1.1316099050383133,0.13031643576257346,0.3063260486968965,1.407738959144939,1.9993616134252066,1.0806196244308297,0.10615592871655155,0.3441623917715114,1.4540111592395157,1.9962161929394462,1.1625972339705946,0.14620523439317323,0.19730075964334404,1.3789366185245793,1.999990300854837,1.1118024855308122,0.1206397276592932,0.22892868624977625,1.4258784600479555,1.9984497139545288,1.1934249805488064,0.16293199671639225,0.17901330325515863,1.349762367533111,1.9996375398160036,1.3996800285446729,0.1359865817654491,0.20936130808337128,1.3973277790399632,1.9997032985224665,1.3521639172697264,0.18048030611773858,0.16153161081834433,1.3202448394722068,1.998303676528845,1.428197540441566,0.15218142874246987,0.19056990857658618,1.2409773883168818,1.9999757163026715,1.3813087942613733,0.19883293966877869,0.1448728398795831,1.160066138941458,1.9959900201241396,1.4562947944420506,0.25094951516804453,0.17257293069856805,1.2104578542816613,1.9992666999285373,1.4100794326910864,0.30817564829979605,0.12905334032267912,1.1290670911119194,1.9926988413584463,1.483944214271753,0.37012097789179965,0.09147480764924987,1.1797317647042673,1.9975769452698482,1.4384475953859654,0.33113341558863096,0.11408863832183513,1.097941369354851,1.9593393909396002,1.5111186631867244,0.3947595173978905,0.07883237653078645,1.0154828787549046,1.9725473163569613,1.4663854401861356,0.3547476473294874,0.04985974869580112,1.0667195222584962,1.9500271479878846,1.5377914706070137,0.41999207501015157,0.027368388106870922,0.9841546493838986,1.96478071113386,1.4938655472706563,0.37899516714599824,0.04055835001950414,1.035432192754081,1.9397824933031802,1.6691360287462114,0.44579388603336245,0.020567382920999355,0.9528419715588238,1.9083736624246885,1.630160544710767,0.40385217711615584,0.0321986030143776,1.0041100880410632,1.9286154815836591,1.6920860668983366,0.4721396270739957,0.014727649700640222,0.7891877625181809,1.894829310369115,1.6541735920140783,0.4292942811289733,0.02478871242089531,0.8395760294238794,1.9165370727821731,1.714356851651882,0.4990034408940631,0.009854919898609094,0.7586707942768158,1.8804067209391913,1.7696672120958545,0.572130088324224,0.018335950735368756,0.8087360750623953,1.9035591213495195,1.7359265251672564,0.6481753988047191,0.005953975894492314,0.7283906805120894,1.790416677380951,1.7892884207915116,0.7266206384124703,0.012846651072297322,0.778083838207813,1.8207796650697174,1.756773917716096,0.6776697404804457,0.0030286463009425724,0.6983771398835267,1.7708404312457737,1.8081349760619303,0.7568859179652396,0.009598959586466727,0.7476494027428364,1.8024829886553022,1.7768785684584585,0.7074804357640769,0.003815378708680872,0.6686596294203185,1.750507637612056,1.8261883808048986,0.7873898037757607,0.014414749287444462,0.7174626387872558,1.7833987089016234,1.8698624486554793,0.7375782267106059,0.00011535435552156859,0.5179840795741975,1.7294382522625233,1.8434309163621252,0.9510044391729043,0.020197849505360077,0.5635326869771855,1.5654547277955173,1.8147814653793841,0.8998672812645352,0.01123505388777124,0.38043815504080525,1.6069920399354982,1.783989433416063,0.8489934362416606,0.00487235296774402,0.42149166256225323,1.6469331822368294,1.8990445208692783,0.7985166839426622,0.04928770877416344,0.46406643807219683,1.4680119794212143,1.8754165010654251,0.7485697599954755,0.03464233420838758,0.508050525287711,1.5126990038094283,1.9588185144874237,0.9623671014329208,0.022535501646901657,0.33250211760919646,1.5560378149883332,1.9974472687756637,0.9111897496418346,0.012999047686736098,0.3715508944327842,1.5979144475371407,1.9924752632083336,0.860245936733729,0.07056966754946736,0.41225226542801763,1.4117565993314023,1.9848934061495282,0.8096696265372538,0.05287572098977655,0.4544992006892309,1.4579310035552324,1.9747216351449854,1.288652140938305,0.03767236921246464,0.2871859217176851,1.5029012146299479,1.9999612036074952,1.2391915350319964,0.024999591541735033,0.3240767065218245,1.546548977142244,1.9981948791074005,1.1891019417769921,0.09549951833734083,0.3627449254656362,1.3538851286564428,1.9938036625917612,1.3956388944603457,0.0748264462006123,0.4030888950990388,1.401365684242412,1.9867991013740445,1.3480383124640125,0.05658624636686804,0.24466742748473402,1.44779079303945,1.9985504220187842,1.2995225154063603,0.3194882504349412,0.27925542878315035,1.4930383737787059,1.999996711177654,1.2502190823112755,0.2828205884293059,0.31573872799365965,1.2946247053197069,1.9988133701533992,1.4523712622447726,0.2480388492535175,0.1750543143570109,1.3432250573217508,1.9950035107055286,1.406058479313761,0.21523449631954106,0.20511351441715908,1.3909228513851044,1.993220461142018,1.35867790923767,0.36670626728041333,0.09332388460509655,1.4375926595383195,1.9978736874648142,1.3103541458034322,0.3278657951186882,0.11614020336005049,1.2342079187013812,1.9999028663900813,1.5073281322251761,0.2907927931621248,0.036290393627775974,1.2837373171195416,1.9993026619101215,1.4624849199512182,0.2555847500162698,0.0512423376712523,1.3325205888706477,1.9839922403737678,1.4164255393727554,0.41640987886982617,0.06868917170530864,1.122153257653975,1.9918341405581823,1.3692711100255133,0.37554904030515357,0.08858501685768194,0.9060818235478227,1.9970678751721387,1.560293805903199,0.3363302822324866,0.02146555264778882,0.9572418672108151,1.9573490621049807,1.5170961680061659,0.2988567358209778,0.03331662801618496,1.008514349320154,1.9709019792688034,1.4725387539461037,0.4684040050542084,0.04770973151735314,0.7934951649839654,1.9819017748863224,1.650836050271935,0.4256831735125707,0.06460701448742034,0.84392487963554,1.990319523467843,1.6110603999645092,0.3844725877994708,0.010481330883562179,0.894765015484262,1.8117969052989298,1.5696778815009207,0.5681534196823447,0.019185023662206646,0.9458818813347031,1.840664134016726,1.526797315958668,0.5224845757155681,0.03046790558918433,0.7326320835608688,1.8673207196834296,1.6970995810558374,0.47807142485114884,0.0004794390690781025,0.7823805100766649,1.8916965651062547,1.659428662193512,0.4350307576352309,0.0033808399631966024,0.8327011972536631,1.773638642832761,1.8055329942968124,0.6254790384203719,0.00890298930080391,0.8834618198588332,1.805103163827988,1.7740978397775227,0.5784393317153093,0.017031365823568456,0.6728183861020594,1.8344505542802176,1.892024504907653,0.5325081773134177,0.0005021502722943882,0.7216902684404042,1.8616036411519126,1.8676813764916358,0.48780635756188995,0.0001919483811982925,0.7712940048560535,1.7324439502789668,1.8410565594345925,0.946605865670144,0.0025108805667246603,0.5674995921371283,1.7663822694382838,1.8122200673893394,0.8954860499325014,0.007452848874750839,0.6142888335160033,1.7983052800220827,1.9185765027964405,0.8446410681363937,0.004447759292917519,0.6620923559560228,1.6502854211736842,1.8971073295404517,0.7942046242203411,0.0009271721182972925,0.7107844534582943,1.6883745113965984,1.8732790880146446,1.0092393534184267,3.37856474106335e-5,0.5118898183434613,1.724653425273702,1.957558296948926,0.9579662479896178,0.02161522697184426,0.5572731466111608,1.7590267623642983,1.9415232085288485,0.9068036761473307,0.08888359894418185,0.6038206866042968,1.6014389893913321,1.9230122541188281,0.8558861769772034,0.06895349178150867,0.6514100351041908,1.6416032929465683,1.9020741108433905,1.0718365779177497,0.05147170067081608,0.45819581291967726,1.6800804115682286,1.9737281517071366,1.0206114230039773,0.036484196408853364,0.501995104471977,1.7167691643310596,1.9607745592979797,0.9693320674919004,0.11647957106996587,0.3273291363563233,1.5502319885497975,1.9452944767993379,1.18477523475081,0.0936299615931514,0.36614532263487265,1.5923138658198241,1.9273286112372647,1.1341518532815138,0.07316377796507534,0.21478533259482457,1.6328381715478317,1.9860762513288854,1.0831757008895055,0.1754643283249938,0.24756110001243692,1.6716983414458566,1.9762549960799354,1.0319808264445975,0.14754324486537174,0.28231550997981725,1.2495170477638844,1.9638665427838093,1.2459524223911167,0.12186381479125963,0.14947255068401066,1.2988306908682814,1.9489434685983573,1.195940600236455,0.09849356572915224,0.1775517005513667,1.3473585171839153,1.9945541311445696,1.1454135250707365,0.2125123307174428,0.2077935924038865,1.1377969987679848,1.9879037601930623,1.0945040648528608,0.1819526994896833,0.24011870098841526,1.1883899408863408,1.9786555591519275,1.3061642790692334,0.1535442372093816,0.11820891376720843,1.2384874855006707,1.9617884417044185,1.2569603060641756,0.12736164787209436,0.14354607008861875,1.2879578941622918,1.974559390157538,1.2070806202601272,0.2526511188078351,0.1711353909215486,1.075505897468195,1.984767599394658,1.1566563872157836,0.2195728823517613,0.20090432631659993,1.1265234282280585,1.9923862255123679,1.3651744811540405,0.18854688734944158,0.09040619107701897,1.177208248067954,1.942756572844262,1.5566402847717602,0.1596547209621213,0.11290190884091145,1.2274270742174611,1.95861233909954,1.5133213591618133,0.2957231531234884,0.1377303741927004,1.2770478493012625,1.9995386091911684,1.685701043272064,0.4646786950878672,0.04906314459532146,1.0641603277276095,1.9827263927822738,1.4227514213509083,0.22673438440579285,0.004801129961523265,0.848276757437698,1.9200245082278418,1.607568069552281,0.3810074306747112,0.08573949111729673,0.6394780983726053,1.9965103800854358,1.327737672651553,0.5641851281258066,0.020053122722711425,0.9502802902006249,1.9553122373206373,1.5230485588119402,0.7677137594584826,0.1320262152727053,0.736878673090115,1.869504565527216,1.229278863416079,0.4743196341044429,0.04560596459620281,0.535763843495022,1.9805580677759085,1.4330309497484544,0.6693437929699717,0.003752366333261259,0.8370450845581416,1.915508311428635,1.6165621010101403,0.3899799030156941,0.08119105329892218,0.6288930990280592,1.8077077213757597,1.3384614750912849,0.5744495656012448,0.01785030003145549,0.4380704257635263,1.9518885632450604,1.5327081006752625,0.7787908510079347,0.1264343311774656,0.7259232968265258,1.8638308458052606,1.9671873386649972,0.48402857133939414,0.042272238121785044,0.5257205370143602,1.7354354401350154,1.8386658874477397,0.6800986059116538,0.002832470109120133,0.8258344903504256,1.9108736910813484,1.9360899577382515,0.891106845992414,0.07676146597498601,0.6183561033939999,1.8009500631384308,1.9898021079760622,0.584769049209743,0.015774521137359998,0.4286990672160297,1.9483417597345798,1.8951527358631932,0.7898965565764671,0.0007472461906752326,0.7150033731472885,1.8580453871592302,1.9700142961609015,0.4938042509146683,0.03906239639886577,0.5157385799022262,1.727681485758215,1.8448059903921092,0.6908947989889948,0.0020415602802367205,0.3390869941859219,1.9061212466870228,1.9400300429536397,0.9024194105021742,0.07245130212493689,0.6078684744601386,1.7940887997812713,1.9913581881346358,0.5951422440973759,0.013826054548202071,0.41940160803420445,1.6449753588494198,1.900164532039428,0.8010294396101556,0.16664011693653402,0.7041203145749227,1.852148937954302,1.9727157796079027,1.0162078203949323,0.03531471416453358,0.5058192633525538,1.719833403755986,1.9998448174403014,0.7017309756843724,0.11442518086192555,0.33059461485552866,1.9012515929875673,1.9438485326667276,0.9137445973327674,0.23488869848657967,0.5974315688304666,1.7871248188277922,1.992786033352476,1.1297860255336583,0.07151908876765789,0.4101792508702723,1.636242242655965,1.9050598894281512,0.8121880600395952,0.1729803070541195,0.2504693685683741,1.8461422609125913,1.9752914395615981,1.0275784308094167,0.3130602696196091,0.49596387045654555,1.711892209299577,1.999980506217062,0.7126057343081725,0.11976524917623765,0.3221888249747592,1.5443994387771207,1.9475449329452434,0.9250809415397573,0.24226133388559512,0.18006504083661323,1.7800590210883116,1.9940854589338302,1.1410545902050588,0.07580290240126164,0.40103318866179927,1.1421579853805035,1.994205890627784,0.8233709744661776,0.17942747447070684,0.24298916352842026,0.9261924825921947,1.9777409428532047,1.0389454738771209,0.3213697320754658,0.4861736760367017,1.2427624260504773,1.9999868447322484,1.2527013644818716,0.12521917830539364,0.3138707118559291,1.028692616761774,1.975537079544953,0.9364269767354699,0.2497319848899724,0.1736074339694481,1.3408150354131962,1.9952562967943828,1.1523049090726405,0.4092795178098577,0.391964604477387,1.1308911444639485,1.9929190598704356,1.3610707685219627,0.18598078522724737,0.23560687994703833,0.9148551238041771,1.9800639726326534,1.050307479239388,0.329766977245208,0.11494347162676977,1.2317137915336889,1.9998638321659556,1.26368904992448,0.5048505590761353,0.3056413514701207,1.0173222909549406,1.972973768862326,0.947781235278675,0.2572996851502123,0.16725672328067298,0.8021219038038145,1.9962983954829978,1.6441231564551846,0.4184944504065853,0.38297467136363905,1.1196073724135673,1.991503792269251,1.7934108342200947,0.19263939163475607,0.22832347274315556,0.9035287787428665,1.9404096489938403,1.5624162802328256,0.33825091892180215,0.10970669836486557,1.2206351841930716,1.9996114844302015,1.7269164941004511,0.5147636674941716,0.29750180830800366,1.0059497244615614,1.970284601314765,1.8574724108282137,0.264963455763224,0.16101373025239063,0.7909864347225296,1.99721162020131,1.6527810692479514,0.4277846023645696,0.06370319111315603,1.1083081288166792,1.9899602708930328,1.8002822036550201,0.6173260801772438,0.22113988404576457,0.8922149125025193,1.9364814582315741,1.571783844584044,0.3468204596837805,0.10458508701934721,0.6811548589614619,1.9992298341668682,1.734679717797888,0.5247395425823028,0.029842836710956777,0.9945763883547644,1.967469924753577,1.863268780193768,0.27272230539894937,0.15487926243312433,0.7798780021276294,1.890532767518505,1.661354542992624,0.43714877197679913,0.01764124773620457,0.5754584946485222,1.9882886954005674,1.807050054359598,0.6278582978669831,0.008564781650215458,0.8809149885632218,1.932432130986318,1.9150593293097948,0.3554744910371951,0.003656515839235097,0.6703959290653665,1.8330344534265726,1.7423479086291043,0.534776893933322,0.04527378570422136,0.9832037538072282,1.9645301032650084,1.868953483339998,0.7358034858894302,0.00014498828869125013,0.7687980429257864,1.8853013066961601,1.9549821616967753,0.44658574796187267,0.019831632080957173,0.5651886036848122,1.9864892820147966,1.8137135108935034,0.6384386531216195,0.08528849376999925,0.8696304686015851,1.9282621910498206,1.9195871580425243,0.8471751286671453,0.004692655799958034,0.6596796343731839,1.8266887076279128,1.7499200746922743,0.5448744231878961,0.04871888639356137,0.4656204956934973,1.9614655171231514,1.8745257849347303,0.7467896248095716,0.13716640752859832,0.7577479903405604,1.514277609280395,1.9582943930599328,0.45609430962068176,0.022148803932055205,0.5549749567853606,1.318028430905839,1.8202717113200881,0.6490657773427537,0.08994363011735862,0.3729829378641063,1.5993880326231755,1.9239960356170123,0.8584245682678375,0.005857541535742361,0.6490073610674576,1.4134323724441837,1.9845731810514564,0.5550308242025137,0.05228703794250389,0.4560419608590821,1.2081709578747235,1.8799849641852455,0.7578085171964661,0.14297120548200448,0.7467292737270076,1.5044904615843642,1.9614826663762717,0.9718956518164481,0.024592463556870725,0.5448188751138201,1.3072251900754506,1.9980827034473294,0.6597382958822912,0.09471648478898509,0.36416374238191307,1.5902455284445867,1.928285391732674,0.8696923210446498,0.2071138797655886,0.6383804896364422,1.4030499815790871,1.986499500304927,0.5652447832184362,0.05597777880071553,0.4465337885109463,1.197033499368233,1.8853303149315135,1.297766809801577,0.14888686249522087,0.28053190132505845,1.494638056643055,1.9645465692337647,1.495897786622508,0.02716229486123012,0.5347216723876207,1.2963822088116723,1.9987220855461283,1.1984549310964543,0.09960644040284361,0.35542679408927014,1.0842864139650248,1.9324546715493585,1.4043766252394683,0.21409561694572232,0.6278003946955336,1.392615455077125,1.9882982131024578,1.5914154347114866,0.059790631560594165,0.4370972085576458,1.1858705540302255,1.9979919032206146,1.3086048022157615,0.1549126133615486,0.27267948955202115,1.4847216688924674,1.9674857053080501,1.5057419422208393,0.2894970335498779,0.524684654708037,1.285500889684308,1.999232280163569,1.67926281419216,0.10461286442956585,0.34677322313475534,1.072948280600515,1.936503335759117,1.4147522723359087,0.22117901304509346,0.005701867161669427,1.3821301426733412,1.989969086775542,1.6005481193562707,0.3741132056031007,0.08934355748967748,1.1746835658187484,1.9972069627698548,1.319402875739886,0.16104767863334257,0.021846331517423212,0.9590799160242439,1.9702996944136963,1.5155206786913888,0.2975462079008909,2.5244470187035795e-5,1.2745826402222717,1.9996132213045577,1.6875655829794782,0.10973510927427033,0.04827279541960128,1.0616007111728838,1.9822485279537851,1.4250742700716048,0.2283631518067024,0.004553387994035152,0.8457422579820719,1.9915119051920196,1.609603121430401,0.38302376571661223,0.08470347338458206,1.1634739818018625,1.9962930308230846,1.7656657739078137,0.16729126472283506,0.019545308266799344,0.9477189358810113,1.9545509767614355,1.5252327311273788,0.3056862466049459,0.00017073130318123741,1.263628872731518,1.9998648596932975,1.6957794132450403,0.4765030988735586,0.04484341561477967,1.0502451735218181,1.9800515760145765,1.833835784111455,0.235647103942206,0.0035336726161405707,0.8345152115519385,1.9144735281867118,1.6185792696441577,0.3920141334231655,0.008755201615177843,1.1522432519704577,1.8061929671826653,1.7729319043969154,0.5767718419978217,0.01737110955930321,0.9363647184389285,1.660266192545813,1.534876843247796,0.31391609672538157,0.0004455488347556713,0.723457715920134,1.8625359603376266,1.703903242507041,0.4862271964356325,0.04153758797249185,1.0388831365177178,1.7336952009316904,1.8400599778980316,0.2430299272521229,0.0026428529310079663,0.8233095710397598,1.5705936039843862,1.6274754029077871,0.401083145793676,0.010320987853865815,1.140992829050695,1.799411869256628,1.7800980539929985,0.5871035542755387,0.015324016633588733,0.9250187323976221,1.6516818912277178,1.8962930268539933,0.3222346937081798,0.0008496615164977905,0.712545982113871,1.856725407539786,1.7119360199255556,0.49601775193975406,0.03303191173458808,1.0275160698716912,1.7259199328236445,1.8461755075884545,1.2220492822703048,0.0018810441686427648,0.8121267859263228,1.5612166966734229,1.6362903704816927,0.9049721815902598,0.012014791827199556,0.605510482446929,1.7925273651804194,1.787163295734668,1.1210469018953682,0.06828377475443392,0.9136824453919642,1.6430132930432644,1.9012786222471214,0.8035435040352994,0.0013830170753075244,0.7016714312848491,1.4634728912505244,1.7198767064384681,1.0187721200251583,0.035993439477729594,0.5035912519626959,1.7180507649519443,1.8521815821219383,1.2331241478164405,0.0012483448711285705,0.8009683027360057,1.5517671944207951,1.944692746869654,0.9163000123810917,0.013836394436920973,0.5950852016632402,1.3597181477291072,1.794126715713241,1.132328596428988,0.072474617203386,0.9023573238022294,1.6342615192997536,1.9061476347420692,1.3421779271049477,0.0020455465201589806,0.6908354700864836,1.4533650387493193,1.9758548288576503,1.0301420544310593,0.03907966415244901,0.12451751424960911,1.7100887152153548,1.8580774245960257,1.244168858105237,0.1209851881601165,0.32030540182877154,1.5422463195459186,1.9483615494413447,1.4467938840799257,0.015785560053662717,0.1785995636096286,1.3490830371679738,1.800987413190963,1.1435931738903693,0.07678543764204449,0.07525007128431638,1.6254277020634769,1.9108994345185186,1.3528424105318975,0.1808960021977194,0.24131587892041673,1.4431985422185691,1.9782758395534594,1.04150808987833,0.042290186546995345,0.11907806301309376,1.2402736585441483,1.8638622723670837,1.255181984472679,0.12646469586126818,0.037976025738928,1.532655303600456,1.9519076788071827,1.4569398293199392,0.017862036547427462,0.17216598929856086,1.338402771744433,1.995502536440939,1.1548391771750668,0.08121567845378819,0.07098153965431797,1.1283480888431774,1.9155334069179437,1.3634612528110317,0.187473131555967,0.23395580895396373,1.4329747167228954,1.9433684701186276,1.555111039519213,0.045624591371361434,0.1137525614808651,1.2292181402350058,1.8500740131924274,1.2661621023402199,0.13205719778518965,0.03493377375890072,1.5229953872090132,1.9723783418647722,1.467026668121298,0.25901950550293873,0.16583949762076322,1.3276787329805413,1.899532009888465,1.1660651515812561,0.08576476657463805,0.06683317914776254,1.1170607004383613,1.9911669222206627,1.3740330803655478,0.19415536352603158,0.011402281104955225,1.42269488474258,1.939534449635035,1.5645350551879922,0.049082447311002975,0.10854169852136808,1.2181329719214755,1.8440292120339228,1.2771077913990543,0.1377619705261922,0.032016355781161354,1.0033850604677954,1.969660841173369,1.4770530957233305,0.26670480337224545,0.15962090692554165,1.3169123080605596,1.8945054144879974,1.654721794462033,0.09043211356738479,0.06280552636662717,1.1057581699061458,1.7775799112821162,1.3845565257001289,0.6196968132615729,0.009753642645428107,1.4123603760025003,1.9355788977555175,1.573886046676197,0.8272625760902499,0.10344614817422904,1.2070195875009306,1.8378752333477824,1.736417223343261,0.5269976355434627,0.029224149181844905,0.9920117540926428,1.9668179121534484,1.487017815179721,0.7273181237063904,0.15351102160491004,0.7773769420628849,1.998154862527631,1.6632760736365366,0.9403718414887939,0.05889910229900852,0.5731377989856573,1.9878940843983073,1.808561805933877,0.2078316643568926,0.008233095308228577,0.38883153335254017,1.9315023261417192,1.9160907086375687,0.35743752850842636,0.0038789147508260235,1.1958794245205762,1.8316128731682764,1.9808415818517218,0.5370486706255204,0.046039884667238296,0.9806394810193305,1.6928901914797647,1.4969195375262747,0.7382779182789708,0.13274724454348297,0.766303601759845,1.9987808788047317,1.671744556204919,0.951728613900796,0.25995208310606577,0.562880475267369,1.9860658752360396,1.8152016020793114,0.2148239641501133,0.42171440742204347,0.37986920509343935,1.9273052621095244,1.9205917645710187,0.36619357538176045,0.004944099085068099,0.22581573700369073,1.8252429415491231,1.309724150535465,0.5471595897504955,0.049512772716183706,0.10791379508982335,1.6846448443928386,1.506756981947648,0.7492715673312337,0.1384656653496371,0.7552604907363296,1.5120763789453453,1.6801261467453905,0.10513759441873793,0.26764900768248145,0.5526796941761737,1.315595850824497,1.821735949628689,0.22191782864883347,0.43103041801302877,0.37098709247857653,1.9229882485608465,1.924973739397577,0.37503160688009685,0.0061379966694830035,0.21866705449496981,1.818766262458706,1.985018695173153,0.5573290850428588,0.05310860893332647,0.10283235957708525,1.6763109365898212,1.516528875943026,0.7602976488040769,0.1442955280197572,0.7442490374494841,1.5022744049333963,1.6884197610758882,0.9744594210014126,0.2754406638979957,0.542536775211496,1.3047835263400438,1.8281640033459676,0.22911234024193683,0.4404200264029715,0.3621863444339385,1.9185518439134028,1.929236066296604,0.38395047977946384,0.6315296928031693,0.21161943957731644,1.8121836736734909,1.9869162604377668,0.5675558410500913,0.056826928187243886,0.09786697519558751,1.6678895460848817,1.5262339554907236,1.7449902514627098,0.1502360784448814,0.02624076837187239,1.492407460329264,1.6966243263943153,1.87090269614776,0.28332604388019167,0.5324530303881334,1.2939317772582006,1.8344849317445096,1.2009679565904294,0.4498820180198938,0.3534680993607786,1.0817305732131672,1.9333781939242525,1.4067209415370097,0.6421264562319682,0.20467380387933465,1.8054960266696574,1.9886861653373575,1.5934815709591474,0.06066724950299207,0.09301828423161929,1.6593817622083196,1.9978261693888015,1.752528817956803,0.1562865481982788,0.023715437979439646,1.482476821449695,1.7047387814173138,1.8764357675333003,0.29130412763322255,0.5224297640665432,1.2830420072829127,1.840697917194634,1.9594164259077127,0.4594151689288457,0.3448334849883615,1.0703901839049643,1.937399586484786,1.4170846076983046,0.6527695115996692,0.19783104583833278,1.7987041865129587,1.9903281809298004,1.6025968410467195,0.06462907612432045,0.08828691387685139,1.650788685465658,1.9970121319910379,1.7599700427538933,0.16244615463484746,0.021316392712250276,1.4724837728504663,1.7127620765175424,1.8818554695130587,0.29937388316975067,0.5124682727841201,1.2721156250362349,1.8468021560293812,1.962561525141559,0.4690182459902251,0.3362836182280874,1.059040689430567,1.9412997237998844,1.4273943228047852,0.6634574821974392,0.19109205058410794,1.791809031746821,1.9918420948158087,1.611634163555785,0.8736120025083993,0.08367347614720744,1.6421114273952888,1.9960691282991676,1.7673129633108433,0.16871410099235162,0.01904394289348632,1.462429607160226,1.7206931738594502,1.8871611010334997,0.30753426664443795,0.00022140969247042008,1.26115404387612,1.852796858648469,1.9655821143631755,0.4786900070192873,0.3278196050290175,1.0476835578786727,1.9450781013759313,1.4376487532661084,0.674188985506535,0.18445768982445176,0.8319864270458757,1.9932277111664076,1.620592369483525,0.8849021267995011,0.07917856780369747,1.633351110424694,1.3889773893991073,1.7745566298004423,0.1750895764944853,0.01689838247085651,1.4523156249132891,1.1819856121065906,1.8923519757964202,0.3157842224889704,0.0005253868839087961,1.2501586817135988,1.8612354014149108,1.9684778028509398,0.4884292009468253,0.31944254023481555,1.0363202583258566,1.7319501357420215,1.9993793179244594,0.6849626333771364,0.17792882173239288,0.8207858139359562,1.5684855205828667,1.629470300061071,0.896207139320836,0.07480277027522586,1.6245088677252553,1.3784747456006998,1.7817001052342696,1.1122983858908433,0.0148799889785729,1.4421431343814077,1.17079060740712,1.8974274223477225,0.32412268354859886,0.0009586488982409325,1.2391309608293692,1.8553997926850125,1.9712482160394869,0.49823456798099874,0.03368882484764679,1.024952260646541,1.7241536050456807,1.999715329756492,0.6957770322079064,0.17150629083518998,0.8096083826797839,1.5590921369111777,1.6382668069033945,0.9075255777375707,0.07054664958338142,0.6031550852456007,1.367923145040597,1.7887424655838968,1.1235923349085837,0.012989023501451147,1.4319134514045435,1.1595735104672455,1.9023867841642692,0.3325485712201778,0.0015211396918195508,1.228072307689819,0.9437723863501684,1.9738929955681601,0.5081048397702921,0.03667850568356168,1.0135810353228651,1.7162634030650996,1.9999220256282635,0.7066307831262585,0.16519092790508938,0.7984555791092002,1.549626433115542,1.9792584154331454,0.9188559779781953,0.06641075626922088,0.5927414978816881,1.3573239525976983,1.7956827999004124,1.1348702969138278,0.01122573064113852,1.4216278992206604,1.1483357722496752,1.907229419738807,1.3445866745165294,0.0022127865048949813,1.2169841527625098,0.9324208629436788,1.976411799327367,0.5180387395675788,0.0397927948358342,1.0022080532544722,1.7082805504198637,1.9999993788030874,0.7175224821693036,0.12221090899110676,0.04041778561488696,1.5400896336110905,1.9768907059179701,0.9301968744239043,0.06239562532205545,0.0023634847229516698,1.346678539307045,1.8025202104322566,1.146130813070802,0.009590338484474104,0.010895099251806983,1.1370788463871238,1.9119547026629466,1.3552409861539487,0.003033499871026968,0.23964758466699543,0.9210780810866502,1.9788043015028307,0.5280349823952728,0.04303128946249479,0.11786719100382692,0.7087626759178904,1.9999473792751155,0.7284507204654571,0.12771595922199952,0.03727911919386151,1.530482972009381,1.9743966328711515,0.9415468000981791,0.05850177611024765,0.0016465325132760666,1.3359882821824742,1.9033451871341918,1.1573724268004013,0.008083058573984947,0.01263334025559204,1.1258041889942811,1.9165620217081905,1.3658493463811203,0.0039831736286575214,0.2323097767273964,0.9097455079994847,1.9810701926177363,1.5572424619447727,0.046393570655250516,0.11256748075572054,0.6979013761579085,1.999766033770631,0.7394140844166808,0.13333384182126373,0.03426498339816442,1.5208076909588288,1.9717765189079794,0.9529042868565453,0.26074419976208174,0.001058720103186861,1.3252545640384974,1.8984086542911738,1.168593683968603,0.0067040858805224035,0.014499299884804029,1.1145132584794601,1.9210507809049973,1.376410382977124,0.005061684934842936,0.07395909764777875,0.8984246095820512,1.983209179572762,1.566650116832149,0.049879203493671254,0.1073825623738357,0.6870791536957062,1.9994553657471803,0.7504111558813347,0.13906383010014978,0.031375768114649816,0.4903459376944316,1.9690307029474874,0.9642678655764809,0.26845097433652465,0.000600123527855212,1.3144787733114303,1.8933559097883175,1.1797931330745621,0.00545359877804219,0.01649273677237173,1.1032075153559475,1.7759647177035283,1.386922729842483,0.006268894281144077,0.07831148190845372,0.8871168502240676,1.9852209856839917,1.5759844739498412,0.8297892813635805,0.1023131065417957,0.6762974084158786,1.9990154153905362,0.7614405123576183,1.045456722491389,0.028611847071355556,0.48059367390398966,1.9661595401686118,0.975636066347452,1.2590015037156534,0.0002708021080245482,1.3036623038797936,1.888187607212187,1.1909693254383669,0.44139589341021535,0.018613393061685635,1.0918884220530816,1.7687406158414354,1.3973850271758734,0.6326241445418568,0.08278308914414068,0.8758236926156784,1.9871053507187058,1.585244325872777,0.8410074819879367,0.09735976900782128,0.6655575349671853,1.9984462396095022,1.745774890859452,1.0568151787905824,0.025973577789161095,0.4709085967674137,1.9631634019642488,0.9870074186610497,1.2699698180184256,7.079844233703891e-5,1.2928065548840126,1.882904415097105,1.20212081538843,1.4705178706630984,0.020860994439952707,1.0805574427270839,1.7614170752411633,1.4077959216500167,0.643225762327939,0.08737334093999871,0.8645465975582505,1.9888620309290426,1.5944284748133388,0.8522462487369978,0.19650195869583498,0.6548609225821473,1.9977479120285495,1.7533034286633744,1.068166285888274,0.023461301535540713,0.4612919590763863,1.960042675893214,0.9983804516012038,1.2809032109738707,1.3840182344626584e-7,0.29287865782502664,1.877507016838675,1.2132461604484899,1.480523000682538,0.02323525017367911,1.069216043071666,1.753995043223071,1.4181540665867374,0.6538735298546203,0.09208164353418258,0.8532870237754155,1.595274304918726,1.6035357327763,0.8635041278450056,0.2033244479277705,0.6442089548973471,1.9969205229782943,1.760734524572243,1.079508575487169,0.021075343280419934,0.45174500476975754,1.9567977656301103,1.8824098429620864,1.2918002683171808,5.883112655669098e-5,0.28488252416108306,1.8719961106053837,1.2243439215242,1.490465973714472,0.02573585314627802,1.0578656901284382,1.746475479847657,1.4284581221311599,1.6662287420015547,0.09690738789464792,0.8420464277243793,1.5860972200483352,1.9872732387446703,0.874779663073965,0.2102499893596338,0.6336030097744504,1.995964179483813,1.9300574362985619,1.0908405804305403,0.36047097953219776,0.4422689687726373,1.953429090913111,1.829411410118261,1.30265958048366,0.0002468690244694649,0.2769788929329181,1.86637240924829,1.96588758436857,1.500345503607666,0.028362479897795168,0.14545121414411244,1.7388593577913718,1.9989681802248378,1.6746671523137828,0.10184994979793072,0.8308262634075254,1.576844321871335,1.9854006768592245,0.8860713959020127,0.21727768715336582,0.623044459121977,1.387892801191417,1.925818626226358,1.10216083489201,0.36925564586283055,0.4328650768366552,1.9499370874896664,1.8230042885270978,1.3134797427910572,0.0005642277723364453,0.2691687864972282,1.8606366402088161,1.6817587110033574,1.5101603124174319,0.031114790666750047,0.13959959613635298,1.7311476622208004,1.999420088888443,1.6830182925521595,0.1069086899098931,0.8196279821843355,1.5675168072758567,1.9834006506537096,1.8239818583180911,0.22440663225669777,0.6125346687178399,1.3773850278170507,1.92146005893816,1.1134678745651578,0.37812190073112684,0.42353454538140556,1.9463222070601378,1.8164907090406701,1.3242593556212632,0.5608765639058756,0.26145321511301733,1.8547895454246506,1.6733942792591132,1.5199091305709342,0.03399242943408454,0.1338592733154561,1.7233413906652273,1.9997427197820148,1.6912810824734525,0.11208295386842226,0.046710882595807246,1.5581158828018733,1.9812734188370817,1.8303727784441222,0.2316359025207395,0.602074998032678,1.3668284386390173,1.9169822982267775,1.1247602368529324,0.3870685972623432,0.4142785813371004,0.2091941515605834,1.809871514208612,1.3349970246013572,0.5711229092457271,0.25383317681091766,1.8488318812337776,1.66494274209069,1.5295906970314124,0.03699502396921528,0.12823098820815504,0.7294635747635301,1.48896361659421,1.6994544532627893,0.11737207236807434,0.0433371706682969,0.5289629188143173,1.9790192565726965,1.83665628754021,0.23896456281926248,0.5916668000540055,0.35045794294311217,1.9123859233030203,1.9347893844059925,0.3960945781763835,0.4050983819884496,0.2022841657288601,1.8031475602421976,1.3456913607839724,0.5814247310308965,0.24630965726409138,0.9312465888884327,1.656405192727942,1.5392037594612995,0.7863007924190545,0.1227154688487927,0.7185320273037619,1.4790111436423685,1.70753734767191,0.12277536124665123,0.04008720574029645,0.5189609733683144,1.9766384554427168,1.8428315728169649,0.24639166516966005,0.002283300561700896,0.34185265316965263,1.9076715287207775,1.938768697691568,0.4051986759374957,0.39599513481978865,0.19547736666046223,1.7963197169035858,1.3563409808269593,0.5917806966920648,0.23888362966073096,0.08667029540495985,1.6477827355266412,1.5487470743842155,0.7974250408939231,0.11731342868514893,0.7076368885096294,1.4689967092659373,1.7155287201559273,0.12829212157369807,0.03696140820381422,0.5090212516592096,1.2683102807084863,1.8488978354840495,0.2539162488555726,0.0015797087736446613,0.33333249658722797,1.9028397243001094,1.9426265786333632,0.4143797129052964,0.3869700173614746,0.18877463483379353,1.789388867393316,1.992338165841459,0.6021894666562513,0.2315560545781744,0.08209798098536236,1.6390764858256235,1.5582194073458149,0.8085754930035485,0.11202556648615325,0.6967795676976585,1.4589216088598744,1.7234275370085688,0.13392163974091276,0.03396018238946119,0.4991450394176702,1.257336799320755,1.8548542908535048,0.2615373405511585,0.0010052654290114704,0.3248985753018051,1.8978911350483647,1.9463625282037418,0.4236365014871015,0.37802419703756907,0.18217683726587053,1.7823559082360618,1.9936791546604438,0.6126496945200919,0.07440397054681891,0.07764439974658288,1.630287569802519,1.567619533073466,0.8197507064059169,0.17733014603881703,0.6859614692925136,1.4487871456664583,1.7312327764958915,1.0352686900218708,0.3186719445047065,0.48933361415923626,1.2463300307018246,1.8607001684412512,0.26925395444699596,0.49182922955420505,0.3165519802645752,1.8928264010793363,1.9499760631472287,0.4329678442915452,0.6887161998836491,0.17568482740017133,1.7752217491646636,1.994891608315216,0.6231600272240003,0.07876871935299679,0.07331012777174983,1.6214171243280762,1.576946235634744,0.8309492355560725,0.18384921128204257,0.014208399158167073,1.4385946306067083,1.738943428988444,1.0466324859501654,0.3270409100801228,0.4795882450190717,1.2352913986078498,1.8664347120667522,0.27706509237760113,0.5016572958905399,0.308293791130836,1.021000933256029,1.953466716043022,0.442372534283465,0.6995444328299534,0.1692994449962404,1.767987313002453,1.9959753699715201,0.6337191052271891,0.08325263198925081,0.06909572571100586,1.6124662968191046,1.9919756777878086,0.8421696318931023,0.19047384790125843,0.012361774345038379,1.428345382110815,1.746558497091867,1.0579902498366172,0.33549692478676607,0.46991019258779765,1.2242223309166138,1.8720571799508299,1.271102938757136,0.5115498242426136,0.3001250761203359,1.0096289306688466,1.9568340353654547,0.45184935494003586,0.710411530540084,0.16302151602106296,1.7606535355438817,1.9969302994417704,0.6443255626835314,0.9227959414885057,0.06500173870898696,1.6034362450900541,1.9904736257506463,0.8534104440275124,0.19720319898128058,0.010642903285142946,1.4180407259475962,1.7540769957759073,1.069340512522857,0.34403889481559957,0.002483365223342582,1.2131242594428295,1.8775668448116156,1.977257553931581,0.5215055349843514,0.29204689187909616,0.9982556825526834,1.9600775855424009,0.4613970804081303,0.7213160873247073,0.15685185254222445,0.783468558800853,1.9977562732031817,1.6585903125711128,0.9341401420642017,0.061028696334306076,1.594328137203248,1.988843453193357,1.8048720206217412,0.20403639406181806,0.00905200831923636,1.4076819950530066,1.9337553210638918,1.9135691983318455,0.35266571523902646,0.0033489065451658417,1.2019986197529295,1.882962993958625,1.9796060917071208,0.5315231403168605,0.28406028334273115,0.9868826600688366,1.9631969470116175,1.9998990233938185,0.7322566926490541,0.15079125262286697,0.7723792313809745,1.9984531844137492,1.6671060339308772,0.9454928617958196,0.05717711251105173,1.5851431513177907,1.9870853709832978,1.81156934387684,1.161274311604755,0.007589295234010085,1.3972705293577168,1.9296243413347558,1.9181353833911432,0.36137627015381535,0.0043433674597566085,1.1908468509793724,1.888244929384948,1.9818279147083078,0.541601344435011,0.04759090194493931,0.9755113343494175,1.9661917162750173,1.999672733464881,0.7432319313153763,0.1448405002184575,0.7613193473410195,1.9990209429260686,1.675535463268497,0.9568526321774656,0.05344748545231126,0.5582728592463843,1.9851996065332962,1.8181616883785896,1.1724881546677028,0.006254953235472649,1.3868076756137913,1.9253731121097846,1.922582805083291,0.3701694328254451,0.0054666193308275934,1.1796703956344854,1.822335134472421,1.9839227355361535,0.5517388436950507,0.05111929600019971,0.9641431763070558,1.9690615059508607,1.999317133085631,0.754240383646007,0.13900036507538172,0.7502903373077698,1.9994594752989956,1.9680471366122556,0.9682179837912251,0.049840297595724614,0.5480980109779744,1.9831864037722313,1.824648201388881,1.183679685907784,0.005049154924475219,1.3762947872204814,1.9210021832973105,1.9269108881219155,1.3905642297295295,0.006718516862623258,1.1684706994238738,0.883190631257931,1.9858902832197538,0.5619343267832362,0.05477043041539931,0.9527796564446338,1.6725236675085056,1.9988322682539676,0.7652806256669986,0.14696104990725178,0.7392936279143688,1.497832394881904,1.9651325006499334,0.9795874464972354,0.0463560155410806,0.5379816174895553,1.2998942006695806,1.8310280438592033,1.1948474576692851,0.003972056274385349,0.35824414745183353,1.087952062482032,1.9311190726574297,1.401008817134088,0.008098898118713671,1.1572492110594126,0.8719028900378893,1.9877303032513391,0.5721864748854546,0.05854383290613996,0.941422244665072,0.6618353762830194,1.998218201688506,0.7763512292923195,0.1529512697682187,0.7283306416157818,1.4879365657511032,1.962093022112544,0.9909595496238524,0.042995089989959934,0.5279249873647802,1.2890251301456588,1.8373003905391774,1.205990025369847,0.0030237966109110115,0.349563480730795,1.0766172957403872,1.9352068143494523,1.4114015329320826,0.009607584542941527,1.1460073820718526,0.8606317185355348,1.989442557619198,0.5824939618578155,0.06243901537230745,0.9300724100811932,0.6511541218157808,1.9974750128204652,0.7874507625085793,0.15905105773990436,0.7174027965047982,1.4779776206675224,1.958929094165096,1.0023328221578864,0.03975795568743701,0.5179294214567449,1.2781186734167522,1.8756047527162258,1.2171059476873263,0.0022044985940787853,0.34096694978378606,1.0652726183383008,1.9391735844372184,1.4217410327968005,0.011244380982518787,1.1347466666230612,0.8493785747082705,1.9910268248384624,1.6066823799741858,0.06645547396120888,0.9187316208256896,0.6405179915337755,1.9966027977833942,0.7985777895602649,0.1652596247977579,0.7065115061285971,1.467956847848425,1.9556411260704745,1.0137057929348816,0.30304304706433427,0.5079962127197186,1.2671762412633938,1.870054567447331,1.2281937867462338,0.0015142682023675524,0.026634362320518967,1.053919497741369,1.943018869807977,1.4320259792851577,0.013009075713270701,0.09861176751351497,0.8381449141815696,1.992482899979758,1.6156841651369134,0.07059268913274741,0.08163157021865663,0.6299283612500577,1.9956016694007352,0.809730871135459,0.1715761678463512,0.018060572543429076,0.43899277768808664,1.9522295431365038,1.0250769908294155,0.3112439589185094,0.0003424946594623446,1.256199249119636,1.8643918381986446,1.2392521083037285,0.0009531947189994616,0.02930470491693382,1.0425594025073386,1.7361902487716927,1.4422550420107016,0.014901440467022464,0.10359477579660892,0.8269321900606861,1.993810594695713,1.6246063098393393,0.0748501257266262,0.07719030961345685,0.6193866007627767,1.9944717571712312,1.7777907856792265,0.177999869823261,0.015972330840268945,0.42961424184824093,1.948694786660931,1.0364449449453927,0.31953396328350947,0.0007047849804778794,1.2451891168899643,1.8586172974599555,1.2502794819351395,0.4928432902559273,0.03210060965135775,1.0311938020961444,1.7284455733489947,1.4524268978156996,0.01692123046112637,0.10869373659028325,0.8157418527426918,1.9950097372453204,1.633447659977215,0.07922723303157253,0.2269075515908272,0.6088940736779911,1.9932132072521733,1.7848887719762647,0.1845298998047583,0.014011375854810826,0.42030948699368087,1.9450373138743444,1.0478081848063094,0.3279119878241976,0.0011963369187441009,0.2587942916113194,1.8527316921841797,1.2612744812189969,0.5026780867645426,0.03502171486573191,1.019824166679832,1.7206066714640107,1.4625402309422932,0.019068184430125368,0.11390799032976828,0.8045753497288635,1.5548319988571953,1.6422070718972928,0.08372344485657457,0.23417146759567775,0.5984521372332816,1.9918261824404966,1.7918852307261848,0.19116541311329116,0.012177961242039514,0.4110797167203435,1.9412575978810278,1.9045852940095878,1.338718400399549,0.001817086890649855,0.251207683459004,1.84673578369074,1.2722356839215427,1.532939165711367,0.038067642706967164,1.0084519669523861,1.712674557100517,1.4725937332026962,1.702273653788874,0.11923686253683075,0.7934341254374435,1.5453340788678118,1.6508834125452623,0.9239694935662954,0.24153444565260995,0.5880621421221887,1.9903108621517205,1.7987792569175756,1.1399510197842622,0.3992495497024523,0.4019261249247017,1.9373561275977647,1.9093750803576053,1.3493973538045851,0.0025669546004586374,0.24371793367683414,1.840630347567088,1.2831616721807009,1.5425281306822667,0.04123799917581972,0.12082530259188606,1.7046502562995824,1.4825861041484099,1.710324861319324,0.12467966390701946,0.7823196210168021,1.5357656183975803,1.6594755596123134,0.9353146438656651,0.24899553333992008,0.5777254323194968,1.341862718431357,1.805569958788962,1.1512031911565994,0.4083805186569227,0.3928498956493297,1.9333334076905948,1.9140472365080516,1.3600311116894817,0.0034458430506950632,0.23632601108478934,1.834416173568378,1.9798419072871314,1.5520469181295256,0.04453237417785694,0.11546286198037992,1.6965348070268487,1.492516051238443,1.7182841863520222,0.1302356903988292,0.7712332741590191,1.5261278551534931,1.6679824016803098,1.8509802541061355,0.2565537655451504,0.5674433449073877,1.331152688920125,1.8122564579441574,1.1624358039753395,0.41758801523787026,0.3838522029297451,1.9291899585095336,1.9186011581045257,1.3706182985480608,0.6058187388433844,0.22903287184862953,1.828094065515312,1.9820506001206852,1.5614942967714955,0.047950341576503464,0.11021483870947568,1.6883292590382655,1.5023822900065027,1.7261505993261232,0.13590422332476992,0.03294646381939237,1.5164220358070497,1.6764028383655538,1.856898369178769,0.26420816458992946,0.5572172099024847,1.3203998238869339,1.8188378894658865,1.1736474052707524,0.42687084842998635,0.37493421064254295,1.1094161316402005,1.77988814082792,1.3811575448982367,0.6162965323922025,0.22183945935621285,1.8216648411901617,1.627214183310096,1.5708690445634554,0.051491459248163673,0.10508191162558955,1.6800346737443022,1.4452516558101578,1.7339230826992158,0.1416845294443314,0.030113710751389466,1.5066494158329946,1.967751308863496,1.862705642062473,0.2719577403564375,0.5470483500838115,1.3096055142448022,1.8910392794553679,1.1848365447910065,0.43622781747296224,0.3660970723548458,1.098104186450219,1.7727190291434745,1.3916474874591613,0.6268239590524598,0.2147467040954656,1.8151293322309878,1.6183156736279622,1.580169948855687,0.055155269139411156,0.10006474468712556,1.671652124072652,1.4350392754422125,1.7416006310789438,0.14757586105882947,0.027406415174239473,1.4968112593469207,1.964823735408763,1.8684013215703374,0.27980149041548086,0.5369380808216871,1.2987711562677244,1.885819078214296,1.9546508996089722,0.44565771201681037,0.35734193117508606,1.0867795512106815,1.7654499641020167,1.4020867693275698,0.6373996570722185,0.20775552353402094,1.8084883840240629,1.6093371830925798,1.5893958065503346,0.8460736897652691,0.09516398687859051,1.663182694329445,1.4247706215332094,1.749182251353056,0.15357745610812346,0.02482492728415997,1.48690883894175,1.9617713593186061,1.8739846709503662,0.28773840015615915,2.2917268741262653e-5,1.287898151410059,1.88048429381009,1.957975256441289,0.45515931227842643,0.3486699196051424,1.0754436907946747,1.7580818859773406,1.412474040153298,0.6480222584555057,0.20086682200054196,0.8594662903664698,1.6002798730966878,1.5985454242570283,0.8573212562871688,0.09038027212664668,1.6546274800589895,1.4144470223621108,1.7566669628178697,0.15968853826919027,0.02236958100379438,1.4769434355231223,1.2092610368590073,1.8794549679807775,0.29576744291710777,1.0595000718649494e-5,0.28926102768680584,1.8750356163119606,1.961175696507997,0.4647313891993724,0.3400821593938468,0.1547333262479409,1.7506157478508582,1.9980130942665886,0.6586903891392684,0.19408149056774437,0.05967643523795341,1.5911449152285424,1.6076176184472528,0.8685872787016642,0.08571421921811095,0.6394199097801603,1.4040698133152016,1.7640537973051256,1.0846206536731973,0.02004069393901753,0.44746247356294977,1.198126153706808,1.8848115050634258,0.3038875801192995,0.00012762414535283373,0.2813064851468565,1.8694737505215062,1.9642518058232659,0.47437270460485803,0.02690487614711079,0.1487108113180069,1.9434098545649727,1.4330871810887262,0.6694026691711115,0.09912205185054423,0.05586717696974863,1.992626259175108,1.6166112156074406,0.8798702997174006,0.21340687769937283,0.0071110345748750525,1.9954907086931166,1.771341799307224,1.0959475405487904,0.3644226773096182,1.4568288438364503,1.9518694439783402,1.8900535893153312,1.3075443880301054,0.545117574411603,1.2550613439911418,1.8637994158815463,1.9672031864837947,1.5047800562346874,0.7470537892484145,1.0413834278606149,1.735393167214868,1.9991879915157749,1.6784443729041654,0.18082443532547143,0.8257730595387186,1.5726467922955079,1.9845144329559843,1.820427860243687,0.07673749790102413,0.618298441450562,1.3831599416383915,1.9238677114236076,1.9241004173787757,0.01576348605150535,0.42864786673919575,1.1757809465374203,1.8200798032913923,1.9846209214112673,0.0007496593904017246,0.265677312003025,0.9601936348977297,1.6779972179201206,0.4938580535506537,0.03239710779189697,0.13699689612077814,1.9507086454560802,1.5042546836938429,0.6909541290944938,0.10922801310084218,0.04861551599909819,1.9951264877319046,1.3069653308764517,0.902481497581887,0.22765465774514027,0.004660253431876815,1.9930756235394291,1.0953418385981029,1.1185626174968237,0.38214695780496255,1.4364778914640106,1.9446518206100334,0.8792662369983939,1.329107304065352,0.5654906973674607,1.2330028145458853,1.8521162904702382,0.6688284531664768,1.524283903362841,0.7691244055828855,1.0186473726400906,1.7197900982720276,1.9998459144931484,1.6949783939919638,0.9835391455163139,0.8034211677747124,1.553852385118701,1.9802724918912533,1.8332199779902627,1.1987225461422772,0.5973744633700023,1.362051825153299,1.9149239891902785,0.19185809884983074,1.404626342839331,0.4101288743098792,1.1533447912905872,1.806851938459354,0.33725789220751434,1.5916355939820834,0.2504280733060906,0.9374771259073882,1.6611029025874735,0.5136052775053779,0.03838997175497616,0.1257294938970721,0.7245290462447802,1.4844828195628867,0.7126654876209666,0.11979485478924445,0.0418560960331501,0.524444435747554,1.2852391904778244,0.9251431509734653,0.24230204494620822,1.6015574498453662,0.3465665016849794,1.0726759518969082,1.141116350810461,0.40019091200464296,1.415901107874605,0.19920148211527622,0.8567190166174959,1.350499941824326,0.5860886330034465,1.2108237307490923,1.8399922848617039,0.6474527704528575,1.543516488935146,0.7913144756571098,0.9959016693733792,1.7038146139628378,0.45464916891481066,1.711152837150273,1.0062851562730057,0.7811709847977476,1.5347714178191545,1.9755233633282971,1.8455809923858784,1.220962343463133,0.5766588014875753,1.3407563850811972,1.9055068904081,1.9405236596812419,1.4253214108910792,0.39191507789798496,1.1308292963074016,1.7932066129523603,0.35446175871997276,1.609819550044041,0.2355666589267662,0.9147929659020025,1.6438665363149028,0.5336041593659319,1.7658413839041809,0.1149144343377072,0.7027354871354126,1.4644602867339722,0.7345255114152018,0.13081710969103078,0.035592414357945024,0.5045591557023946,1.2633654689192535,0.9478435348795659,0.2573414608264577,0.0013046423511661187,0.32951806933610706,1.0499724630651546,1.163597071314376,0.4185452040677946,1.3951091393808417,0.18578599585654443,0.8342459290150919,1.37171123287604,0.6069007240630011,1.1885355679345266,0.08007468860857536,0.6262594937017022,1.562467862119521,0.8136125184530851,0.9731580865599851,1.6874749799134248,0.4357253502291949,1.726959333812773,1.0290279151250359,0.7590340227279055,1.5154137627825048,0.27154073457145367,1.8575045079109018,1.2430878161047691,0.5561621739707409,1.3192846395635351,1.8956212874312506,1.9480074102329321,1.4457964200264386,0.3740159012197879,1.1082461109788908,1.7791508867854207,1.9942418917873745,1.6276879888855176,0.22110075807763463,0.8921528915389386,1.626297037101802,0.5538443518228258,1.7802688628040184,1.1100209495489428,0.6810957310204551,1.4441974447534676,0.7565228902232946,1.896414082362003,1.3209761778895548,0.4849302139758318,1.2413554835417904,0.9705709042486671,0.2727651240763259,1.5169430123148753,0.31281654058376684,1.027243118760834,1.1859931476096621,0.43720033758647947,1.6887705303856997,0.17279177936432888,0.8118586016408681,1.3927302026172776,0.6279162024867486,0.0807762391522655,0.07139456596596716,0.605259588195729,1.5811282175815986,0.8360069970883279,0.18682389373066843,0.013359773195505742,0.4170934840876894,1.7423897057865991,1.0517556550963234,0.3308438485695032,1.4957894355510737,0.2561469466581787,1.8689843554051673,1.265087516471534,0.5061109073349479,1.2976476979612113,0.12993558070427857,1.9550006670589775,1.4660407765903332,0.7044407501362753,1.0856069197186884,1.7646920323125483,1.9964219988567695,1.6452316654763117,0.9165721108302792,0.8695686166658978,1.608403495308683,1.9913141286342588,1.7942926349633916,1.1325992437109262,0.659620974188549,1.4237047775023508,0.778646242724625,1.9062630920793544,1.3424344849980077,0.4655677664724017,1.2192206221886235,0.9933135000671206,1.9759144328537623,1.5362793092233709,0.2964705567054141,1.0044996790194154,1.208292992091852,0.4561466604990754,1.7050818839331758,0.16022555577348097,0.7895686175726492,1.4135459759507913,0.6491241949838297,1.8409597566030589,0.0631948985751607,0.5844639191684569,1.5994879005579532,0.8584863247849911,0.20027215645026475,0.009909555980349372,0.39876321051350616,1.7574359694836954,1.0744566169814724,0.3479191399576974,1.4759085896418835,0.2411380241494645,1.8800145952598624,1.2869500620416459,0.526015874780629,1.2758567551066538,0.11894887012953725,1.9614998118874554,1.486044006266036,0.7262459056789705,1.0629234359175834,1.7498375304640845,1.9980865627634654,1.6624415028163915,0.9392592347914847,0.8470518262602377,1.5901951689538736,1.98806638267463,1.8079054445611116,1.155108931766709,0.6383223275586304,1.4029928877719078,0.8008841224204895,1.9156432063475246,1.3637156184213997,0.44648183121402174,1.1969723373130718,1.016059555443198,1.980623835337248,1.5553381382201943,0.28048857502157776,0.9817539111692685,1.2304850669462792,0.47537437008419814,1.7210284320620421,0.14809382677772154,0.7673875095233782,1.434147782912017,0.6705137286576814,1.853049379365688,0.05547992889814968,0.563883246182594,1.617537411851418,0.8810388708647984,0.21413419387800214,0.0069716060168733,0.38074401348755105,1.7720903400514771,1.0971190554299182,0.36533181433152173,0.004834016427866739,0.22652173257777386,1.8905895204906509,1.3086641412564468,0.5461660789586035,1.2539230855116763,0.10841801047590582,1.9675014820972234,1.5057957594945217,0.7481927000571691,1.0402073958830773,0.031947851819873696,1.9992347222714177,1.679308596632285,0.9619777856844883,0.8246141703832305,1.5716814789234714,1.984307416701327,1.8211002484057182,1.177538367329735,0.6172108109312027,1.3820724917779086,1.923416615047925,1.924549571947915,1.384808567420462,0.4276822831567221,1.1746221400531498,1.0387973016952152,1.9848258685393771,1.574109638373943,0.2648788645200889,0.9590175837433128,1.25255789011768,1.999114459274622,1.7366019241175907,0.13640286926570078,0.7453267538741559,1.454524964241394,0.6920737366833527,1.864697639156121,0.04825364861704462,0.5435282175631013,1.6352674127459195,0.9036529667666922,1.9524151899380056,0.004547443383937533,0.3630452160414659,1.7863452354006708,1.1197312450229069,0.3830728624707581,0.007325170823490601,0.21230563433052163,1.9007036596904332,1.3302185193729403,0.5665510942660614,0.05645712139362169,0.09834845035120121,1.9730025724577223,1.525285816829271,0.7702697781223521,1.0174705527670844,0.026495040830556205,0.4728545887677085,1.6958242199840994,0.9847160090582717,0.8022672581523862,0.00010069279684321586,0.3026068189274893,1.8338702195795866,1.1998759455356387,0.596297347286754,1.3609544136160951,0.1649247172950521,1.9329775807768366,1.405702418621494,0.40917884908139857,1.1521815942757685,0.0662375260276209,1.9885183583517,1.5925840974155498,0.2496495015777539,0.9363024603900454,1.660219338441876,1.9978990045271205,1.751794302462236,0.12515873207337136,0.723397764736425,1.4834528333006056,1.9606814780098727,1.8758985092299678,0.041519796568799006,0.5234093648878073,1.2841108786271687,0.9263169120840813,1.9591015127605143,0.002638322329713949,0.34567597543394435,1.0715020024255273,1.1422814863401614,1.9975180421903151,0.01032992961720336,0.19849708473733718,0.8555542486002179,1.3516020442765837,0.5871603736102298,0.06423544897319544,0.08874539968944695,0.6463515742247461,1.5445040942237538,0.7924657173179499,0.1618376930985317,0.021545915855928688,0.45366296624477553,1.711979827780793,1.007462140283385,0.7800226517349605,3.65992416851979e-5,0.2864862661150288,1.8462087509711385,1.2221101090465365,0.5755927571342683,0.025221854947377498,0.15262800406300925,1.9409228722297134,1.4263863616628796,0.390981102561231,1.1296623105936567,0.058338863156986,1.9916993943006644,1.6107519567633548,0.23480836578168163,0.9136202937870951,0.00802179565069372,1.9961672424224566,1.7665977066444927,0.11436723285435457,0.7016118880463729,1.4634176106511245,1.954117784702083,1.8866461943197714,0.03528185681075624,0.50353709753843,1.2622298279405713,1.8675145744486439,1.9652916018308522,0.001245230622745841,0.32864527841281677,1.0487968874013116,1.1647581120130948,1.998861481100263,0.01384673816363069,0.18510322826445835,0.833085313678057,1.3728036522513296,1.985788243600136,0.07249793589161524,0.07961382705528275,0.6251680351118141,1.5634406482488603,0.8147690335893101,0.17446003097499863,0.0171030375455401,0.43475401544386894,1.7277670612013554,1.0302044106389003,0.31497177273285304,0.0004898811507398904,0.2707348813131285,1.8581094586933213,1.244229354030729,0.5551077529127539,0.030550130496311056,0.14076971635676694,1.948381335457238,1.4468496947883105,0.3730984590083699,0.10588008372080804,0.05092741048568017,1.9943673305360825,1.628603816468663,0.22036313585242928,0.8909828195604522,0.005403265293612458,1.9939200689646457,1.7810044774659297,0.10403395506991897,0.6799803956946082,0.006323089073509536,1.9470604361951132,1.8969351336334488,0.029543056818017388,0.48392169731482015,1.2402131010093647,1.8559766028241116,1.970982254431596,0.00036888904088183683,0.31196193656535787,1.0260665251407945,1.7249218451628479,1.999688114673059,0.017873776885723114,0.1721309948182247,0.8107027394799529,1.3938123737039312,1.9817122574310801,0.08124030718441566,0.07095845707325676,0.604178431958627,1.5820856812375739,1.9178940883932691,0.1875094986087913,0.013168704619750282,0.4161375197502517,1.7431777520196161,1.052931053401482,0.3317189750953021,0.0014603039984858457,0.2553608142000843,1.8695661853865981,1.2662222361147193,0.5071346903539413,0.03637999397924818,0.12935598958798356,1.9553491114923007,1.4670818303838127,0.3555401708024547,0.11629715489339754,0.044007002657814986,1.9965207866826853,1.6461304400792254,0.20632128567107555,0.23747995250872123,0.0032993337177796844,1.9911586468286524,1.795007160943995,0.09416424510012844,0.6585144796941469,0.009133879530554112,1.939513083921563,1.9067600037314127,0.024306365813564046,0.4645733131152162,0.06123818850320806,1.843995753698357,1.9761705262509552,9.75099834921167e-6,0.2956345817592202,1.0033226762061305,1.7090669602866977,1.9999975152131213,0.02240896221619526,0.1595870961595829,0.7884181066244633,1.541027376588438,1.977128338837171,1.841596052328474,0.06278376798333163,0.583393624668324,1.6004295463542297,1.9086309026178196,1.9379766536462073,0.009744952680384333,0.39782311123455183,1.758203926830439,1.7977037821097823,1.9905572332282646,0.0029473656935754544,0.2403720192321328,1.8805730034047305,1.2880773763044668,1.996882473535968,0.0427084290574673,0.11839272915497745,1.961822595246597,1.4870723004557196,1.9566570093681857,0.12717144896971178,0.037581220253649295,1.998158648554321,1.663322759418127,0.940434115213785,0.25239231648726,0.0017110894856116055,1.987884404758827,1.808598512168666,1.156271591005468,0.41252368274731444,0.012457338569930698,1.9314796328392374,1.9161157212808888,1.3648117646136684,0.44550195568526085,0.06931815763571014,1.8315782258956306,1.9808537329061426,1.5563165854149577,0.2796716616763548,0.1696383578770153,1.6928452081357472,1.9997895226383426,1.7218434904137896,0.1474780224314587,0.7662429450558441,1.521758895591993,1.972038859512221,1.8536629886802944,0.05509398932386789,0.5628243671838118,1.3263083828531972,1.898897596301275,1.9456195998335746,0.00683355315752443,0.3798202656691828,1.7728378111751164,1.783781158012045,1.9934192920855303,0.004950296838614698,0.22577625152785974,1.8911242178817091,1.632065054237016,1.99482999755744,0.049532161434095334,0.10788560738730746,1.967798437375881,1.506810762046754,1.9497858415496592,0.13849733965088673,0.03165338793701755,1.9992800687304282,1.6801718792756108,1.8603902186451307,0.2676914884949858,0.0006393543457804407,1.984099036829682,1.8217714990509244,1.17869655781668,0.4310817216408145,0.016291746652542183,1.9229642394107422,1.9249974456860048,1.385894678360232,0.6210383227885428,0.07787965634205729,1.8187304441752852,1.9850294513322586,1.575072952424497,0.2640814354422275,0.182527157054571,1.6762649817537247,1.9990642445629172,1.7373974580949778,0.13581003880079356,0.32534759965230964,1.5022204594645807,1.9664464527243344,1.8652882445818952,0.04789309974328482,0.5424813019237342,1.3047241092912996,1.8886992054018212,1.952773287735027,0.004436012392981192,0.36213829762563254,1.0929982763708097,1.7694530099319703,1.9957673613637663,0.0074680611282446074,0.21158106285574596,1.9012143696782453,1.6142762202105554,1.9922628021087703,0.056847660548210444,0.09784006061094097,1.9732735460128974,1.430415015272257,1.942423259855083,0.15026896698450398,0.026226572735167375,1.9998844669944877,1.69666908201141,1.8485760558910558,0.2833695528259703,8.468280804641015e-5,1.9798045015693875,1.8345193059611198,1.7151035056586323,0.4499341156658543,0.020635119877117525,1.9139713094529551,1.9334005815922872,1.4067779323610463,0.6421847098117763,0.086918254950759,1.805459055907641,1.9886955210359711,1.5935317799085986,0.8511439474262517,0.19583891210359106,1.6593348596569188,1.9978220562416593,1.7525699004604376,0.1245891822169829,0.34231090168237144,1.4824221772836474,1.960354011953468,1.8764658051909695,0.04118482494152953,0.5194945264491365,1.282982173181571,1.878041006509803,1.959434016072502,0.002553570860920895,0.3447863556551559,1.07032795389836,1.7547267511731426,1.9976002261850765,0.010499355885319916,0.19779379772692374,0.854389680691846,1.5961695631074249,1.9891822154425096,0.06465114140153438,0.08826128633552965,1.978245088367095,1.4097734733795528,1.9345730736429987,0.16248024039649667,0.02130358245189634,1.9999715306342218,1.204242486241433,1.8363228446373019,0.29941839773751855,4.736185635723089e-5,1.97500302094644,1.8468353372553388,1.6990194487635815,0.46907111069933016,0.025485211006671116,1.9045054958574803,1.941320781264272,1.5290744440283963,0.6635162284625505,0.09642927694150738,0.05794337747745271,1.9918500452133445,1.6116835173732829,0.8736738870973919,0.20956673559655292,0.00787369787998049,1.996063600375851,1.7673529673734476,0.11382125828839129,0.35961448836914345,0.004132627239318287,1.9537646893943619,1.8871898873002473,0.034972635742421376,0.5395658631771101,0.046894859642721665,1.8669285141176464,1.9655983386224545,0.001187202526051534,0.32777341755536527,0.13416355785393919,1.739610001019384,1.9989169382354652,0.014042612734907367,0.1844215895951683,0.26186359818664406,1.5777544512106205,1.9855898314369487,0.07293856651676967,0.079154240565247,0.6240770957979429,1.388919916986267,1.9262393445557953,0.1751248418423791,0.016886964214810507,0.4337834637259198,1.1819242688885385,1.82363692462676,0.31582971964713946,0.0005274108003643363,0.2699300383472052,1.858713220687954,1.6825737231199307,0.48848280536717037,0.030839510631211042,0.1401681653164637,1.9487539468349981,1.5096368669836007,0.6850218419325624,0.10640780136478178,0.05055724156763253,1.9944913917312328,1.6295187732112273,0.8962691871919795,0.223703524834451,0.005281764009771206,1.9937897867807108,1.7817390101579658,1.112360375672855,0.37724940693376596,0.006455929082011647,1.9466818943256108,1.897454942329695,0.02925974629786643,0.5598754259492545,0.05402490764176737,1.8553674777666902,1.9712630659989143,0.00033761433969847765,0.7630536259117742,0.14576740528180365,1.7241105807925774,1.9997168162554908,0.01809599841575349,0.17147135716608874,0.27739938851887924,1.5590404123959218,1.9814875087714563,0.08170564802656743,0.07052363523457894,0.44277413322667214,1.3678651356057068,1.9174263844182367,0.18819622907616707,0.012979003157454816,0.4151823642706799,1.1595119249376142,1.8105248594834076,0.3325950274287731,0.001524581265431979,0.2545757133329605,0.9437101005410161,1.6657748376540396,0.5081591561672503,0.03669524846609307,0.12877760462430154,1.955696232426222,1.489935606677562,0.7066904233378243,0.11684866538792082,0.04366234202457819,1.996618193971738,1.2912182047592595,0.9189181570282685,0.23824196552169297,0.0032044917848943477,1.9910017919146603,1.7957205855560106,1.134932111271991,0.3952065331681215,0.009293285063603829,1.9391092913457233,1.9072556591973204,1.3446452376821212,0.5804127067115157,0.06164439785656972,1.8433638790724056,1.9764252673036573,5.245874032056008e-6,0.7852120465609241,0.15781322787086183,1.7082365098059578,1.9999994463927446,0.022657415728804198,1.0000411851186715,0.2933090483612605,1.5400371292022208,1.9768773699648086,0.0909478498920463,0.062373935770396294,0.46180470836990084,1.3466200228638612,1.9081387530065501,0.20168763903529974,0.00958172123699741,0.6554320871476609,1.1370170504099213,1.7969934333163287,0.3497056468060513,0.003038357321145435,0.23960706667060083,0.9210158912177683,1.6486314840151821,0.5280899826658445,0.04304939478535097,0.11783780952105827,0.7087029961929445,1.4699808564320445,0.7285107614756511,0.12774646696634295,0.037262246230705176,1.9982293515392904,1.2693838705391833,0.9416090781560896,0.2531745355504761,0.001642955974367144,1.9877010582706316,1.0562076596315093,1.1574340337523132,0.4134765761556478,0.012643227151997616,1.9310507984770777,1.9165869670670954,1.3659074054114728,0.6011670795898265,0.06974938800555719,1.8309239286295427,1.981082271642634,1.5572942619127483,0.8074815972944687,0.17029479317995733,1.6919960012149668,1.9997646824159763,0.027724504622283486,1.0227860085004479,0.3095843461448723,1.5207544338218326,1.9717618002770094,0.10066039024971296,1.237026397842227,0.4811137427433704,1.3251955708631002,1.8983812556892214,0.21559209133980994,0.0066968761880809025,0.6768731980089322,1.1144512840275793,1.7830496472096522,0.3671527248403198,0.005067955748249919,0.8877214733379478,0.8983625478301294,1.631152532078536,1.9947097778691818,0.04989866198925941,0.10735444019546225,0.6870199026967733,1.4497829407230876,1.9494168958827816,0.13909556763853426,0.031360265559739475,0.4902922642498052,1.247410158612917,1.8597897753903037,0.268493508892683,0.0005979645080741447,1.9838892936297299,1.0334842421227513,1.7300136696285067,0.4320500830784072,0.01650402210591495,1.9225105851387605,0.8179947360410131,1.5661486401469413,0.6221278063878748,0.07833568461221074,1.8180540627988022,1.9852316695078767,1.3758465744687243,0.8298507559715578,0.18320564331709033,1.6753974577678092,1.9990126457907524,1.1679938713977573,1.0455190425290173,0.3262168611217755,1.5012023030133728,1.9661434464751704,1.865877651274703,1.2590617590689206,0.5006912459608177,1.3036028644949218,1.888158940940725,1.9531300656010817,1.460507254815543,0.6984814928681907,1.0918263011917566,1.7687007156002306,1.9958748502034482,0.007612326443883988,0.9103515328223777,0.8757617910911196,1.6133470253559592,1.9921159825929777,0.05723950630531993,1.1264078228241388,0.6654987433504007,1.4293523098391803,1.9420289879092358,0.15089009544335663,0.025959453663431886,0.47085566040828275,1.2253084380559685,1.8479527425488729,0.2841909595972857,7.0058058748379e-5,0.3009216504322483,1.0107435000546152,1.7142802573353215,0.450917444107921,0.020873672371665042,1.9134930699893313,0.79567688055183,1.5472535402493297,0.643284042142986,0.08739884517474572,1.8047609403766998,0.5901513909248706,1.3546721178679895,0.8523079489147489,0.1965390982806947,1.6584494674579209,1.9977437256166124,1.145528826477151,1.0682285252598682,0.3431979877218556,1.481390852939838,1.9600252154640883,0.9295898800579189,1.2809630831921002,0.5205270887317035,1.2818530757046913,1.877477097729471,1.9597651902260376,1.480577709937454,0.720245791714673,1.0691538079418828,1.7539540625449312,1.997681028147566,1.6577511447201758,0.9330279759217346,0.853225314505722,1.595224176316927,1.9890088720627779,0.06506812962178876,1.1489375046089678,0.644150653081164,1.4086995344743396,1.9341536794122791,0.16312394795816798,1.3578922056746698,0.45169283288509776,1.2030901441747945,1.8356769837065965,0.30025876589118805,5.9509762231013674e-5,0.2848389184409521,0.9879971993597098,1.698177280436635,0.4700688973772411,0.02574991711666874,0.151380367085034,0.7734647407005331,1.5280752944343636,0.6646248407372455,0.09693418046463653,1.7910514391503412,0.5695106362494728,1.333314155899472,0.8748415568981633,0.2102882594158335,1.6411607990805868,0.38565878425422107,1.1229884857566204,1.0909027069337982,0.3605189400052964,1.461330333934562,1.9534102727822287,0.9069197106778012,1.3027190385893013,0.5406110081020497,1.2599574577113402,1.8663412527813241,0.6951974389790255,1.5003995168432596,0.7421548338220259,1.0464455348990096,1.7388173178794704,1.9989710115142798,1.674713198462082,0.9557390699713368,0.8307647783207279,1.5767933616220529,1.9853900538801719,1.8175202827225299,1.1713901269628944,0.622986677271429,1.387835300258893,1.9257950450324295,0.17579079545618115,1.3790379023620227,0.43281369641990775,1.1807667725902369,1.8229688502723604,0.3166886143813863,1.568986017223157,0.2691262067886785,0.9652571088466453,1.6817130705225254,0.4894945340316855,0.031130233399199514,0.1395678054500522,0.7513698089239033,1.5086238254190383,0.6861391605609595,0.10693675695279758,1.250747779851971,0.5490926143603355,1.3117837390531,0.8974399211592083,0.22444601298352462,1.6235403976960168,0.3678711179476978,1.1003845114822388,1.1135298560561746,0.3781707562083757,1.441031125197748,0.21616768967248146,0.8842977005181716,1.324318368851025,0.5609326127644345,1.2379273391850125,1.8547571677201047,0.6736137566856812,1.5199624198410597,0.7641972835745439,0.1463799147594561,1.7232983132707793,0.478170836705779,1.6913261593731903,0.9784730643782948,0.27821351687980267,1.5580641172716554,1.9812614004014235,1.8304075380498785,1.193754073024837,0.4437518637038548,1.3667704022307936,1.9169574094803106,1.9307119726793296,1.399987486961133,0.6352649300110529,1.1583498732897526,1.8098349173632444,0.333472004356271,1.5875429726624437,0.8438097677713865,0.9425349941109192,1.6648961460830098,0.5091843033556238,1.7476623863962688,1.0596481085628668,0.7294035170159205,1.4889091972845028,0.7078158702255213,0.11740139936216398,1.2727011044938015,0.5289078894276521,1.2900920070459885,0.9200913494307559,0.23900503384134908,1.4730199729198135,0.3504105115851146,1.077728598823724,1.1360982654667429,0.39614430338023243,0.009454063078952357,0.20224654726756885,0.8617355540804136,1.3457498986047405,0.5814813884343979,0.0620519071672595,0.09133470264144805,0.6521989448070133,1.539256297194387,0.7863617363321526,0.15844843930746044,1.707405078164943,0.45890335146713945,1.7075814320005502,1.0012181967012026,0.2941422999117963,1.5390461336718866,0.2908749594746669,1.842865145166944,1.216017771814331,0.4627970902855192,1.345515739250327,1.9076453452990705,1.9387901903589848,1.4207301202742377,0.6565372588832052,1.1358510446515155,1.7962819804025911,1.9908772246761066,1.605795936657648,0.8663158602796511,0.9198426114474624,1.647735208100627,0.5291280179726616,1.762573335531045,1.082337013878974,0.7075772302130167,1.4689416102689612,0.7296437543227305,1.8837413953644269,1.2945133351111688,0.5089669049150776,1.2682501830588147,0.9427841219906559,0.2539577892334388,1.4929369787802593,0.333285999186432,1.0550324698234226,1.158596258396847,0.4144302821082033,1.6683422985913265,0.1887381580320442,0.8392449448927566,1.3670025392969596,0.6022467032904715,0.07018190710442884,0.08207322811365747,0.6309640832467749,1.5582711663591353,0.808636724331106,0.17095237792066176,0.018272065010884186,0.43991582660455597,1.7234706059571272,1.0239626987359582,0.310436289765334,1.5197492506209687,0.27502141811321157,1.854886658577561,1.2381697042182895,0.4821202626445782,1.3240823083611033,0.1439808134677334,1.9463826832509457,1.4412550701790092,0.6779872934543765,1.1132819274434795,1.7823170516040938,1.9936861558650405,1.6237354652274067,0.8888911202132368,0.8971917017679977,1.6302391355485946,1.9945881801529541,1.7770897334920805,1.10498331848515,0.6859022413137663,1.448731395490126,0.7516115192275814,1.8941568009130947,1.31617318617809,0.4892799781763384,1.246269567929005,0.965506497725455,1.9694700707711816,1.5125989418081072,0.3165064408784757,1.032307867331391,1.1810121945109233,0.43301923132928777,1.6850882330222965,0.1756495111308568,0.816837509470457,1.3880652949303935,0.6232178134750255,0.07879298971630455,0.073286683757669,0.6099201588034315,1.5769971891484738,0.8310107226173433,0.18388526113123782,0.014197922147597963,0.4212180861570711,1.7389854602732875,1.0466948026045684,0.3270870560213044,1.5001834522181385,0.25954297661047476,1.8664658584180058,1.2601984089509273,0.5017113830798543,1.3024811991002467,0.13244445656930093,1.9534855230419046,1.4615517171812977,0.69960393559679,1.0906541988005114,1.7679473563437158,1.9959809594011197,1.6413522765600912,0.911523867259065,0.8745939845263586,1.6124169807968816,0.35697140099414104,1.7912040695763558,1.1275753053102007,0.6643897648360557,1.4282890095999552,0.7737077989415215,1.9041095747398409,1.3376694510089089,0.4698572951170913,1.2241615343037462,0.9882467202051832,1.9747965248133887,1.5319956890137836,0.3000805183107562,1.0095665489297119,1.713456019478988,0.4519015332252483,1.7014797066376826,0.16298737855662326,0.7945248412951308,1.5462680414388104,0.644383868653079,1.8382072305061892,0.0649796156823319,0.589078059485654,1.3535713772330282,0.8534721550094355,0.19724039753783384,0.010633827759349956,0.4028198042308935,1.1443642445121516,1.0694027468437803,0.34408598366648335,0.002487760991717658,0.24444764342541747,0.9284158384099955,1.2820924884837666,0.5215603152553356,1.2807235877607326,0.12135696805112373,0.715810146458969,1.481609559909596,0.7213760009808445,1.0679795661827063,0.03929565491911935,0.5164750638709457,1.6586372558161644,0.9342023913605473,0.852061151654909,1.59427796492856,0.33971879774905367,1.8049090411054145,1.1501012853866475,0.6430509312147547,1.407625029374441,0.19379520842975273,1.9135945673352186,1.3589910075565705,0.4507089049247929,1.2019375207558411,1.8350299650650865,1.979618624592074,1.551117184628898,0.2840167301636325,0.9868202808491846,1.6973341448850352,1.9998981349212297,1.7175082385808214,0.15075831162583497,0.7723184848163512,1.527075413267623,0.6657339176262028,1.8503943259398126,0.057156321918152564,0.5684485688789227,1.332204219849888,0.8760094000880366,1.9435701605806075,0.0075816258886194365,0.3847304999940697,1.121820324710265,1.0920747824903991,0.3614242775508937,0.004349177491784761,0.22974322879890297,0.9057478734115786,1.3038406149426536,0.5416567894446596,0.04760992004749598,0.11072408451767601,0.6940766459356376,1.501418220548391,0.7432922248618241,1.0452697613180129,0.03323081859997412,0.4966909014782578,1.6755814598441465,0.9569149587763031,0.829604861515203,0.0008820783952483424,0.32280782030073685,1.8181975572037294,1.1725496038985337,0.6218967810428908,1.386750146241243,0.18054709568694882,1.9226068712171704,1.3801268241671085,0.43184471486930653,1.1796090258654552,0.07655177446113481,1.9839338751798132,1.5699535352986909,0.26832338775114195,0.9640808318815455,1.6808514735092719,1.9993148260591362,1.7331655357790376,0.13896863758924494,0.750229929478615,1.5076100792289933],"x":[1.8110048645192806e18,4.208856674911989e297,8.417713349823978e297,1.2626570024735968e298,1.6835426699647956e298,2.1044283374559944e298,2.5253140049471936e298,2.9461996724383924e298,3.367085339929591e298,3.78797100742079e298,4.208856674911989e298,4.629742342403187e298,5.050628009894387e298,5.4715136773855865e298,5.892399344876785e298,6.313285012367983e298,6.734170679859182e298,7.155056347350382e298,7.57594201484158e298,7.996827682332778e298,8.417713349823977e298,8.838599017315177e298,9.259484684806374e298,9.680370352297573e298,1.0101256019788774e299,1.0522141687279974e299,1.0943027354771173e299,1.136391302226237e299,1.178479868975357e299,1.2205684357244769e299,1.2626570024735966e299,1.3047455692227165e299,1.3468341359718365e299,1.3889227027209564e299,1.4310112694700763e299,1.473099836219196e299,1.515188402968316e299,1.557276969717436e299,1.5993655364665556e299,1.6414541032156758e299,1.6835426699647955e299,1.7256312367139154e299,1.7677198034630353e299,1.8098083702121553e299,1.851896936961275e299,1.893985503710395e299,1.9360740704595147e299,1.978162637208635e299,2.020251203957755e299,2.0623397707068744e299,2.1044283374559947e299,2.1465169042051143e299,2.1886054709542346e299,2.230694037703354e299,2.272782604452474e299,2.314871171201594e299,2.356959737950714e299,2.3990483046998335e299,2.4411368714489538e299,2.4832254381980733e299,2.5253140049471932e299,2.567402571696313e299,2.609491138445433e299,2.6515797051945534e299,2.693668271943673e299,2.735756838692793e299,2.7778454054419128e299,2.8199339721910327e299,2.8620225389401526e299,2.9041111056892726e299,2.946199672438392e299,2.9882882391875124e299,3.030376805936632e299,3.072465372685752e299,3.114553939434872e299,3.1566425061839917e299,3.1987310729331113e299,3.2408196396822316e299,3.2829082064313515e299,3.3249967731804714e299,3.367085339929591e299,3.409173906678711e299,3.451262473427831e299,3.4933510401769515e299,3.535439606926071e299,3.5775281736751906e299,3.6196167404243105e299,3.6617053071734305e299,3.70379387392255e299,3.74588244067167e299,3.78797100742079e299,3.83005957416991e299,3.872148140919029e299,3.914236707668149e299,3.95632527441727e299,3.99841384116639e299,4.04050240791551e299,4.082590974664629e299,4.124679541413749e299,4.1667681081628696e299,4.2088566749119895e299,4.250945241661109e299,4.2930338084102286e299,4.3351223751593485e299,4.377210941908469e299,4.419299508657588e299,4.461388075406708e299,4.503476642155828e299,4.545565208904948e299,4.587653775654068e299,4.629742342403188e299,4.671830909152308e299,4.713919475901428e299,4.756008042650548e299,4.798096609399667e299,4.8401851761487876e299,4.8822737428979075e299,4.9243623096470275e299,4.966450876396147e299,5.0085394431452666e299,5.0506280098943865e299,5.092716576643507e299,5.134805143392626e299,5.176893710141746e299,5.218982276890866e299,5.261070843639986e299,5.303159410389107e299,5.345247977138226e299,5.387336543887346e299,5.429425110636466e299,5.471513677385586e299,5.513602244134706e299,5.5556908108838256e299,5.5977793776329455e299,5.6398679443820654e299,5.6819565111311846e299,5.724045077880305e299,5.766133644629425e299,5.808222211378545e299,5.850310778127665e299,5.892399344876784e299,5.934487911625904e299,5.976576478375025e299,6.018665045124145e299,6.060753611873264e299,6.102842178622384e299,6.144930745371504e299,6.1870193121206245e299,6.229107878869744e299,6.2711964456188636e299,6.3132850123679835e299,6.3553735791171034e299,6.3974621458662226e299,6.439550712615343e299,6.481639279364463e299,6.523727846113583e299,6.565816412862703e299,6.607904979611822e299,6.649993546360943e299,6.692082113110063e299,6.734170679859182e299,6.776259246608303e299,6.818347813357422e299,6.860436380106541e299,6.902524946855662e299,6.944613513604781e299,6.986702080353903e299,7.028790647103022e299,7.070879213852141e299,7.112967780601262e299,7.155056347350381e299,7.197144914099502e299,7.239233480848621e299,7.28132204759774e299,7.323410614346861e299,7.36549918109598e299,7.4075877478451e299,7.449676314594221e299,7.49176488134334e299,7.533853448092461e299,7.57594201484158e299,7.6180305815907e299,7.66011914833982e299,7.70220771508894e299,7.744296281838059e299,7.78638484858718e299,7.828473415336299e299,7.87056198208542e299,7.91265054883454e299,7.954739115583659e299,7.99682768233278e299,8.038916249081899e299,8.08100481583102e299,8.123093382580139e299,8.165181949329258e299,8.207270516078379e299,8.249359082827498e299,8.291447649576617e299,8.333536216325739e299,8.375624783074858e299,8.417713349823979e299,8.459801916573098e299,8.501890483322217e299,8.543979050071338e299,8.586067616820457e299,8.628156183569578e299,8.670244750318697e299,8.712333317067816e299,8.754421883816938e299,8.796510450566058e299,8.838599017315177e299,8.880687584064297e299,8.922776150813417e299,8.964864717562537e299,9.006953284311656e299,9.049041851060776e299,9.091130417809896e299,9.133218984559015e299,9.175307551308136e299,9.217396118057257e299,9.259484684806376e299,9.301573251555497e299,9.343661818304616e299,9.385750385053735e299,9.427838951802856e299,9.469927518551975e299,9.512016085301096e299,9.554104652050215e299,9.596193218799334e299,9.638281785548455e299,9.680370352297575e299,9.722458919046696e299,9.764547485795815e299,9.806636052544934e299,9.848724619294055e299,9.890813186043174e299,9.932901752792293e299,9.974990319541414e299,1.0017078886290533e300,1.0059167453039654e300,1.0101256019788773e300,1.0143344586537894e300,1.0185433153287014e300,1.0227521720036133e300,1.0269610286785253e300,1.0311698853534373e300,1.0353787420283493e300,1.0395875987032613e300,1.0437964553781732e300,1.0480053120530852e300,1.0522141687279972e300,1.0564230254029093e300,1.0606318820778214e300,1.0648407387527333e300,1.0690495954276452e300,1.0732584521025573e300,1.0774673087774692e300,1.0816761654523811e300,1.0858850221272932e300,1.0900938788022051e300,1.0943027354771171e300,1.098511592152029e300,1.1027204488269411e300,1.1069293055018532e300,1.1111381621767651e300,1.1153470188516772e300,1.1195558755265891e300,1.123764732201501e300,1.1279735888764131e300,1.132182445551325e300,1.1363913022262369e300,1.140600158901149e300,1.144809015576061e300,1.1490178722509731e300,1.153226728925885e300,1.157435585600797e300,1.161644442275709e300,1.165853298950621e300,1.170062155625533e300,1.174271012300445e300,1.1784798689753568e300,1.1826887256502689e300,1.1868975823251808e300,1.1911064390000929e300,1.195315295675005e300,1.1995241523499169e300,1.203733009024829e300,1.2079418656997409e300,1.2121507223746528e300,1.2163595790495649e300,1.2205684357244768e300,1.2247772923993887e300,1.2289861490743008e300,1.2331950057492127e300,1.2374038624241249e300,1.2416127190990368e300,1.2458215757739487e300,1.2500304324488608e300,1.2542392891237727e300,1.2584481457986848e300,1.2626570024735967e300,1.2668658591485086e300,1.2710747158234207e300,1.2752835724983326e300,1.2794924291732445e300,1.2837012858481567e300,1.2879101425230687e300,1.2921189991979807e300,1.2963278558728926e300,1.3005367125478046e300,1.3047455692227166e300,1.3089544258976285e300,1.3131632825725406e300,1.3173721392474525e300,1.3215809959223644e300,1.3257898525972767e300,1.3299987092721886e300,1.3342075659471005e300,1.3384164226220126e300,1.3426252792969246e300,1.3468341359718364e300,1.3510429926467485e300,1.3552518493216605e300,1.3594607059965723e300,1.3636695626714844e300,1.3678784193463964e300,1.3720872760213082e300,1.3762961326962206e300,1.3805049893711323e300,1.3847138460460444e300,1.3889227027209562e300,1.3931315593958682e300,1.3973404160707806e300,1.4015492727456924e300,1.4057581294206044e300,1.4099669860955162e300,1.4141758427704283e300,1.4183846994453403e300,1.4225935561202524e300,1.4268024127951642e300,1.4310112694700762e300,1.435220126144988e300,1.4394289828199004e300,1.4436378394948124e300,1.4478466961697242e300,1.4520555528446363e300,1.456264409519548e300,1.46047326619446e300,1.4646821228693722e300,1.4688909795442843e300,1.473099836219196e300,1.477308692894108e300,1.48151754956902e300,1.4857264062439322e300,1.4899352629188443e300,1.494144119593756e300,1.498352976268668e300,1.50256183294358e300,1.5067706896184923e300,1.510979546293404e300,1.515188402968316e300,1.519397259643228e300,1.52360611631814e300,1.5278149729930523e300,1.532023829667964e300,1.536232686342876e300,1.540441543017788e300,1.5446503996927e300,1.5488592563676117e300,1.553068113042524e300,1.557276969717436e300,1.561485826392348e300,1.5656946830672597e300,1.5699035397421718e300,1.574112396417084e300,1.578321253091996e300,1.582530109766908e300,1.5867389664418197e300,1.5909478231167318e300,1.595156679791644e300,1.599365536466556e300,1.6035743931414677e300,1.6077832498163798e300,1.6119921064912916e300,1.616200963166204e300,1.620409819841116e300,1.6246186765160278e300,1.6288275331909398e300,1.6330363898658516e300,1.637245246540764e300,1.6414541032156757e300,1.6456629598905878e300,1.6498718165654996e300,1.6540806732404116e300,1.6582895299153234e300,1.6624983865902358e300,1.6667072432651478e300,1.6709160999400596e300,1.6751249566149717e300,1.6793338132898834e300,1.6835426699647958e300,1.6877515266397076e300,1.6919603833146196e300,1.6961692399895314e300,1.7003780966644435e300,1.7045869533393555e300,1.7087958100142676e300,1.7130046666891797e300,1.7172135233640914e300,1.7214223800390035e300,1.7256312367139156e300,1.7298400933888276e300,1.7340489500637394e300,1.7382578067386515e300,1.7424666634135632e300,1.7466755200884753e300,1.7508843767633877e300,1.7550932334382994e300,1.7593020901132115e300,1.7635109467881233e300,1.7677198034630353e300,1.7719286601379474e300,1.7761375168128595e300,1.7803463734877712e300,1.7845552301626833e300,1.788764086837595e300,1.7929729435125074e300,1.7971818001874195e300,1.8013906568623313e300,1.8055995135372434e300,1.809808370212155e300,1.8140172268870675e300,1.8182260835619793e300,1.8224349402368913e300,1.826643796911803e300,1.8308526535867152e300,1.8350615102616272e300,1.8392703669365393e300,1.8434792236114514e300,1.847688080286363e300,1.8518969369612752e300,1.856105793636187e300,1.8603146503110993e300,1.864523506986011e300,1.8687323636609232e300,1.872941220335835e300,1.877150077010747e300,1.881358933685659e300,1.885567790360571e300,1.8897766470354832e300,1.893985503710395e300,1.898194360385307e300,1.902403217060219e300,1.9066120737351312e300,1.910820930410043e300,1.915029787084955e300,1.9192386437598668e300,1.923447500434779e300,1.927656357109691e300,1.931865213784603e300,1.936074070459515e300,1.9402829271344268e300,1.9444917838093392e300,1.948700640484251e300,1.952909497159163e300,1.9571183538340748e300,1.9613272105089869e300,1.9655360671838986e300,1.969744923858811e300,1.9739537805337228e300,1.9781626372086348e300,1.982371493883547e300,1.9865803505584587e300,1.990789207233371e300,1.9949980639082828e300,1.999206920583195e300,2.0034157772581066e300,2.0076246339330187e300,2.0118334906079308e300,2.0160423472828428e300,2.0202512039577546e300,2.0244600606326667e300,2.0286689173075787e300,2.0328777739824908e300,2.037086630657403e300,2.0412954873323146e300,2.0455043440072267e300,2.0497132006821385e300,2.0539220573570505e300,2.0581309140319626e300,2.0623397707068747e300,2.0665486273817867e300,2.0707574840566985e300,2.0749663407316106e300,2.0791751974065226e300,2.0833840540814347e300,2.0875929107563465e300,2.0918017674312585e300,2.0960106241061703e300,2.1002194807810827e300,2.1044283374559944e300,2.1086371941309065e300,2.1128460508058186e300,2.1170549074807303e300,2.1212637641556427e300,2.1254726208305545e300,2.1296814775054665e300,2.1338903341803783e300,2.1380991908552904e300,2.1423080475302022e300,2.1465169042051145e300,2.1507257608800263e300,2.1549346175549384e300,2.1591434742298504e300,2.1633523309047622e300,2.1675611875796746e300,2.1717700442545863e300,2.1759789009294984e300,2.1801877576044102e300,2.1843966142793222e300,2.1886054709542343e300,2.1928143276291464e300,2.197023184304058e300,2.2012320409789702e300,2.2054408976538823e300,2.2096497543287943e300,2.2138586110037064e300,2.2180674676786182e300,2.2222763243535302e300,2.226485181028442e300,2.2306940377033544e300,2.234902894378266e300,2.2391117510531782e300,2.24332060772809e300,2.247529464403002e300,2.251738321077914e300,2.2559471777528262e300,2.2601560344277382e300,2.26436489110265e300,2.268573747777562e300,2.2727826044524738e300,2.2769914611273862e300,2.281200317802298e300,2.28540917447721e300,2.289618031152122e300,2.293826887827034e300,2.2980357445019462e300,2.302244601176858e300,2.30645345785177e300,2.310662314526682e300,2.314871171201594e300,2.319080027876506e300,2.323288884551418e300,2.3274977412263298e300,2.331706597901242e300,2.335915454576154e300,2.340124311251066e300,2.344333167925978e300,2.34854202460089e300,2.352750881275802e300,2.3569597379507137e300,2.3611685946256258e300,2.3653774513005378e300,2.36958630797545e300,2.3737951646503617e300,2.3780040213252737e300,2.3822128780001858e300,2.386421734675098e300,2.39063059135001e300,2.3948394480249217e300,2.3990483046998338e300,2.4032571613747455e300,2.407466018049658e300,2.4116748747245697e300,2.4158837313994817e300,2.4200925880743935e300,2.4243014447493056e300,2.428510301424218e300,2.4327191580991297e300,2.4369280147740418e300,2.4411368714489535e300,2.4453457281238656e300,2.4495545847987774e300,2.4537634414736897e300,2.4579722981486015e300,2.4621811548235136e300,2.4663900114984254e300,2.4705988681733374e300,2.4748077248482498e300,2.4790165815231616e300,2.4832254381980736e300,2.4874342948729854e300,2.4916431515478975e300,2.4958520082228095e300,2.5000608648977216e300,2.5042697215726334e300,2.5084785782475454e300,2.5126874349224572e300,2.5168962915973696e300,2.5211051482722816e300,2.5253140049471934e300,2.5295228616221055e300,2.5337317182970172e300,2.5379405749719296e300,2.5421494316468414e300,2.5463582883217534e300,2.5505671449966652e300,2.5547760016715773e300,2.558984858346489e300,2.5631937150214014e300,2.5674025716963135e300,2.5716114283712252e300,2.5758202850461373e300,2.580029141721049e300,2.5842379983959614e300,2.5884468550708732e300,2.5926557117457853e300,2.596864568420697e300,2.601073425095609e300,2.6052822817705215e300,2.6094911384454332e300,2.6136999951203453e300,2.617908851795257e300,2.622117708470169e300,2.6263265651450812e300,2.6305354218199933e300,2.634744278494905e300,2.638953135169817e300,2.643161991844729e300,2.647370848519641e300,2.6515797051945533e300,2.655788561869465e300,2.6599974185443772e300,2.664206275219289e300,2.668415131894201e300,2.672623988569113e300,2.676832845244025e300,2.681041701918937e300,2.685250558593849e300,2.689459415268761e300,2.693668271943673e300,2.697877128618585e300,2.702085985293497e300,2.706294841968409e300,2.710503698643321e300,2.714712555318233e300,2.7189214119931446e300,2.7231302686680567e300,2.727339125342969e300,2.731547982017881e300,2.735756838692793e300,2.739965695367705e300,2.7441745520426164e300,2.748383408717529e300,2.752592265392441e300,2.7568011220673526e300,2.7610099787422647e300,2.765218835417177e300,2.769427692092089e300,2.773636548767001e300,2.7778454054419123e300,2.782054262116825e300,2.7862631187917365e300,2.7904719754666485e300,2.794680832141561e300,2.7988896888164727e300,2.803098545491385e300,2.807307402166296e300,2.811516258841209e300,2.815725115516121e300,2.8199339721910324e300,2.8241428288659445e300,2.8283516855408566e300,2.8325605422157686e300,2.8367693988906807e300,2.840978255565593e300,2.845187112240505e300,2.849395968915416e300,2.8536048255903284e300,2.857813682265241e300,2.8620225389401525e300,2.8662313956150646e300,2.870440252289976e300,2.8746491089648887e300,2.878857965639801e300,2.883066822314712e300,2.887275678989625e300,2.8914845356645364e300,2.8956933923394484e300,2.89990224901436e300,2.9041111056892726e300,2.9083199623641846e300,2.912528819039096e300,2.916737675714008e300,2.92094653238892e300,2.9251553890638323e300,2.9293642457387444e300,2.9335731024136564e300,2.9377819590885685e300,2.94199081576348e300,2.946199672438392e300,2.950408529113305e300,2.954617385788216e300,2.958826242463128e300,2.96303509913804e300,2.9672439558129524e300,2.9714528124878644e300,2.975661669162776e300,2.9798705258376886e300,2.9840793825126e300,2.988288239187512e300,2.992497095862424e300,2.996705952537336e300,3.0009148092122483e300,3.00512366588716e300,3.0093325225620725e300,3.0135413792369845e300,3.017750235911896e300,3.021959092586808e300,3.02616794926172e300,3.030376805936632e300,3.034585662611544e300,3.038794519286456e300,3.0430033759613684e300,3.04721223263628e300,3.051421089311192e300,3.0556299459861046e300,3.059838802661016e300,3.064047659335928e300,3.0682565160108396e300,3.072465372685752e300,3.0766742293606643e300,3.080883086035576e300,3.085091942710488e300,3.0893007993854e300,3.093509656060312e300,3.0977185127352235e300,3.101927369410136e300,3.106136226085048e300,3.1103450827599597e300,3.114553939434872e300,3.118762796109784e300,3.122971652784696e300,3.127180509459608e300,3.1313893661345194e300,3.135598222809432e300,3.1398070794843435e300,3.1440159361592556e300,3.148224792834168e300,3.15243364950908e300,3.156642506183992e300,3.160851362858903e300,3.165060219533816e300,3.169269076208728e300,3.1734779328836395e300,3.1776867895585516e300,3.1818956462334636e300,3.1861045029083757e300,3.190313359583288e300,3.1945222162582e300,3.198731072933112e300,3.2029399296080234e300,3.2071487862829354e300,3.211357642957848e300,3.2155664996327596e300,3.2197753563076716e300,3.223984212982583e300,3.228193069657496e300,3.232401926332408e300,3.2366107830073193e300,3.240819639682232e300,3.2450284963571434e300,3.2492373530320555e300,3.2534462097069676e300,3.2576550663818796e300,3.261863923056792e300,3.266072779731703e300,3.270281636406615e300,3.274490493081528e300,3.2786993497564394e300,3.2829082064313514e300,3.2871170631062635e300,3.2913259197811756e300,3.295534776456087e300,3.299743633130999e300,3.303952489805912e300,3.308161346480823e300,3.3123702031557353e300,3.316579059830647e300,3.3207879165055594e300,3.3249967731804715e300,3.329205629855383e300,3.3334144865302956e300,3.337623343205207e300,3.341832199880119e300,3.346041056555031e300,3.3502499132299433e300,3.3544587699048554e300,3.358667626579767e300,3.362876483254679e300,3.3670853399295916e300,3.371294196604503e300,3.375503053279415e300,3.379711909954327e300,3.383920766629239e300,3.3881296233041513e300,3.392338479979063e300,3.3965473366539755e300,3.400756193328887e300,3.404965050003799e300,3.409173906678711e300,3.413382763353623e300,3.417591620028535e300,3.4218004767034467e300,3.4260093333783593e300,3.4302181900532714e300,3.434427046728183e300,3.438635903403095e300,3.442844760078007e300,3.447053616752919e300,3.451262473427831e300,3.4554713301027426e300,3.459680186777655e300,3.463889043452567e300,3.468097900127479e300,3.4723067568023915e300,3.476515613477303e300,3.480724470152215e300,3.4849333268271265e300,3.489142183502039e300,3.4933510401769506e300,3.4975598968518627e300,3.5017687535267753e300,3.505977610201687e300,3.510186466876599e300,3.5143953235515104e300,3.518604180226423e300,3.522813036901335e300,3.5270218935762466e300,3.5312307502511586e300,3.5354396069260707e300,3.539648463600983e300,3.543857320275895e300,3.548066176950807e300,3.552275033625719e300,3.5564838903006304e300,3.5606927469755425e300,3.564901603650455e300,3.5691104603253666e300,3.5733193170002787e300,3.57752817367519e300,3.581737030350103e300,3.585945887025015e300,3.5901547436999264e300,3.594363600374839e300,3.5985724570497505e300,3.6027813137246626e300,3.6069901703995746e300,3.611199027074487e300,3.615407883749399e300,3.61961674042431e300,3.6238255970992223e300,3.628034453774135e300,3.6322433104490464e300,3.6364521671239585e300,3.6406610237988706e300,3.6448698804737826e300,3.649078737148695e300,3.653287593823606e300,3.657496450498519e300,3.6617053071734303e300,3.6659141638483424e300,3.6701230205232545e300,3.6743318771981665e300,3.6785407338730786e300,3.68274959054799e300,3.686958447222903e300,3.691167303897815e300,3.695376160572726e300,3.6995850172476383e300,3.7037938739225504e300,3.7080027305974625e300,3.712211587272374e300,3.716420443947286e300,3.7206293006221987e300,3.72483815729711e300,3.729047013972022e300,3.733255870646934e300,3.7374647273218463e300,3.7416735839967584e300,3.74588244067167e300,3.7500912973465825e300,3.754300154021494e300,3.758509010696406e300,3.762717867371318e300,3.76692672404623e300,3.771135580721142e300,3.775344437396054e300,3.7795532940709664e300,3.7837621507458785e300,3.78797100742079e300,3.792179864095702e300,3.796388720770614e300,3.800597577445526e300,3.804806434120438e300,3.8090152907953497e300,3.8132241474702623e300,3.817433004145174e300,3.821641860820086e300,3.8258507174949985e300,3.83005957416991e300,3.834268430844822e300,3.8384772875197336e300,3.842686144194646e300,3.846895000869558e300,3.85110385754447e300,3.855312714219382e300,3.859521570894294e300,3.863730427569206e300,3.867939284244118e300,3.87214814091903e300,3.876356997593942e300,3.8805658542688536e300,3.8847747109437657e300,3.8889835676186784e300,3.89319242429359e300,3.897401280968502e300,3.9016101376434134e300,3.905818994318326e300,3.9100278509932375e300,3.9142367076681496e300,3.918445564343062e300,3.9226544210179737e300,3.926863277692886e300,3.931072134367797e300,3.93528099104271e300,3.939489847717622e300,3.9436987043925334e300,3.9479075610674455e300,3.9521164177423576e300,3.9563252744172696e300,3.960534131092182e300,3.964742987767094e300,3.968951844442006e300,3.9731607011169173e300,3.9773695577918294e300,3.981578414466742e300,3.9857872711416535e300,3.9899961278165656e300,3.994204984491477e300,3.99841384116639e300,4.002622697841302e300,4.006831554516213e300,4.011040411191126e300,4.0152492678660374e300,4.0194581245409495e300,4.0236669812158615e300,4.0278758378907736e300,4.0320846945656857e300,4.036293551240597e300,4.040502407915509e300,4.044711264590422e300,4.0489201212653333e300,4.0531289779402454e300,4.0573378346151575e300,4.0615466912900695e300,4.0657555479649816e300,4.069964404639893e300,4.074173261314806e300,4.078382117989717e300,4.082590974664629e300,4.086799831339542e300,4.0910086880144534e300,4.0952175446893655e300,4.099426401364277e300,4.1036352580391896e300,4.107844114714101e300,4.112052971389013e300,4.116261828063925e300,4.120470684738837e300,4.1246795414137493e300,4.128888398088661e300,4.1330972547635735e300,4.1373061114384855e300,4.141514968113397e300,4.145723824788309e300,4.149932681463221e300,4.154141538138133e300,4.158350394813045e300,4.162559251487957e300,4.1667681081628694e300,4.170976964837781e300,4.175185821512693e300,4.1793946781876056e300,4.183603534862517e300,4.187812391537429e300,4.1920212482123406e300,4.196230104887253e300,4.2004389615621654e300,4.204647818237077e300,4.208856674911989e300,4.213065531586901e300,4.217274388261813e300,4.221483244936725e300,4.225692101611637e300,4.229900958286549e300,4.2341098149614607e300,4.238318671636373e300,4.2425275283112854e300,4.246736384986197e300,4.250945241661109e300,4.2551540983360204e300,4.259362955010933e300,4.263571811685845e300,4.2677806683607566e300,4.2719895250356693e300,4.276198381710581e300,4.280407238385493e300,4.2846160950604043e300,4.288824951735317e300,4.293033808410229e300,4.2972426650851405e300,4.3014515217600526e300,4.3056603784349646e300,4.309869235109877e300,4.314078091784789e300,4.318286948459701e300,4.322495805134613e300,4.3267046618095244e300,4.3309135184844364e300,4.335122375159349e300,4.3393312318342606e300,4.3435400885091726e300,4.347748945184084e300,4.351957801858997e300,4.356166658533909e300,4.3603755152088203e300,4.364584371883733e300,4.3687932285586445e300,4.3730020852335565e300,4.3772109419084686e300,4.3814197985833807e300,4.385628655258293e300,4.389837511933204e300,4.394046368608116e300,4.398255225283029e300,4.4024640819579404e300,4.4066729386328525e300,4.4108817953077645e300,4.4150906519826766e300,4.4192995086575887e300,4.4235083653325e300,4.427717222007413e300,4.431926078682324e300,4.4361349353572363e300,4.4403437920321484e300,4.4445526487070605e300,4.4487615053819725e300,4.452970362056884e300,4.4571792187317967e300,4.461388075406709e300,4.46559693208162e300,4.469805788756532e300,4.4740146454314443e300,4.4782235021063564e300,4.4824323587812685e300,4.48664121545618e300,4.4908500721310926e300,4.495058928806004e300,4.499267785480916e300,4.503476642155828e300,4.50768549883074e300,4.5118943555056523e300,4.516103212180564e300,4.5203120688554765e300,4.524520925530388e300,4.5287297822053e300,4.532938638880212e300,4.537147495555124e300,4.541356352230036e300,4.5455652089049477e300,4.5497740655798604e300,4.5539829222547724e300,4.558191778929684e300,4.562400635604596e300,4.566609492279508e300,4.57081834895442e300,4.575027205629332e300,4.579236062304244e300,4.583444918979156e300,4.587653775654068e300,4.59186263232898e300,4.5960714890038925e300,4.600280345678804e300,4.604489202353716e300,4.6086980590286275e300,4.61290691570354e300,4.617115772378452e300,4.621324629053364e300,4.6255334857282764e300,4.629742342403188e300,4.6339511990781e300,4.638160055753012e300,4.642368912427924e300,4.646577769102836e300,4.6507866257777476e300,4.6549954824526596e300,4.6592043391275723e300,4.663413195802484e300,4.667622052477396e300,4.671830909152308e300,4.67603976582722e300,4.680248622502132e300,4.6844574791770435e300,4.688666335851956e300,4.6928751925268677e300,4.69708404920178e300,4.701292905876691e300,4.705501762551604e300,4.709710619226516e300,4.7139194759014274e300,4.71812833257634e300,4.7223371892512515e300,4.7265460459261636e300,4.7307549026010757e300,4.734963759275988e300,4.7391726159509e300,4.743381472625811e300,4.7475903293007233e300,4.751799185975636e300,4.7560080426505475e300,4.7602168993254595e300,4.7644257560003716e300,4.7686346126752837e300,4.772843469350196e300,4.777052326025107e300,4.78126118270002e300,4.7854700393749313e300,4.7896788960498434e300,4.7938877527247555e300,4.7980966093996675e300,4.8023054660745796e300,4.806514322749491e300,4.810723179424404e300,4.814932036099316e300,4.819140892774227e300,4.8233497494491393e300,4.8275586061240514e300,4.8317674627989635e300,4.8359763194738755e300,4.840185176148787e300,4.8443940328236997e300,4.848602889498611e300,4.852811746173523e300,4.857020602848436e300,4.8612294595233474e300,4.8654383161982594e300,4.869647172873171e300,4.8738560295480836e300,4.8780648862229956e300,4.882273742897907e300,4.886482599572819e300,4.890691456247731e300,4.894900312922643e300,4.899109169597555e300,4.9033180262724674e300,4.9075268829473795e300,4.911735739622291e300,4.915944596297203e300,4.920153452972115e300,4.924362309647027e300,4.928571166321939e300,4.9327800229968507e300,4.9369888796717634e300,4.941197736346675e300,4.945406593021587e300,4.9496154496964996e300,4.953824306371411e300,4.958033163046323e300,4.9622420197212346e300,4.966450876396147e300,4.9706597330710593e300,4.974868589745971e300,4.979077446420883e300,4.983286303095795e300,4.987495159770707e300,4.991704016445619e300,4.995912873120531e300,5.000121729795443e300,5.0043305864703546e300,5.008539443145267e300,5.0127482998201794e300,5.016957156495091e300,5.021166013170003e300,5.0253748698449144e300,5.029583726519827e300,5.033792583194739e300,5.0380014398696506e300,5.042210296544563e300,5.046419153219475e300,5.050628009894387e300,5.054836866569299e300,5.059045723244211e300,5.063254579919123e300,5.0674634365940345e300,5.0716722932689465e300,5.075881149943859e300,5.0800900066187707e300,5.084298863293683e300,5.088507719968595e300,5.092716576643507e300,5.0969254333184183e300,5.1011342899933304e300,5.105343146668243e300,5.1095520033431545e300,5.1137608600180666e300,5.117969716692978e300,5.122178573367891e300,5.126387430042803e300,5.130596286717714e300,5.134805143392627e300,5.1390140000675384e300,5.1432228567424505e300,5.1474317134173625e300,5.1516405700922746e300,5.1558494267671867e300,5.160058283442098e300,5.164267140117011e300,5.168475996791923e300,5.1726848534668343e300,5.1768937101417464e300,5.1811025668166585e300,5.1853114234915705e300,5.1895202801664826e300,5.193729136841394e300,5.197937993516307e300,5.202146850191218e300,5.20635570686613e300,5.210564563541043e300,5.2147734202159544e300,5.2189822768908665e300,5.223191133565778e300,5.2273999902406906e300,5.2316088469156027e300,5.235817703590514e300,5.240026560265426e300,5.244235416940338e300,5.2484442736152504e300,5.2526531302901624e300,5.2568619869650745e300,5.2610708436399866e300,5.265279700314898e300,5.26948855698981e300,5.273697413664723e300,5.277906270339634e300,5.2821151270145463e300,5.286323983689458e300,5.2905328403643704e300,5.294741697039282e300,5.298950553714194e300,5.3031594103891066e300,5.307368267064018e300,5.31157712373893e300,5.3157859804138416e300,5.3199948370887543e300,5.3242036937636664e300,5.328412550438578e300,5.33262140711349e300,5.336830263788402e300,5.341039120463314e300,5.345247977138226e300,5.349456833813138e300,5.35366569048805e300,5.357874547162962e300,5.362083403837874e300,5.366292260512786e300,5.370501117187699e300,5.37470997386261e300,5.378918830537521e300,5.383127687212434e300,5.387336543887346e300,5.391545400562258e300,5.39575425723717e300,5.399963113912082e300,5.404171970586994e300,5.408380827261905e300,5.412589683936818e300,5.41679854061173e300,5.421007397286642e300,5.425216253961554e300,5.429425110636466e300,5.433633967311378e300,5.437842823986289e300,5.442051680661202e300,5.446260537336113e300,5.450469394011026e300,5.454678250685937e300,5.45888710736085e300,5.463095964035762e300,5.467304820710673e300,5.471513677385586e300,5.475722534060498e300,5.47993139073541e300,5.484140247410321e300,5.488349104085233e300,5.492557960760145e300,5.496766817435058e300,5.50097567410997e300,5.505184530784882e300,5.509393387459793e300,5.513602244134705e300,5.517811100809618e300,5.522019957484529e300,5.526228814159442e300,5.530437670834353e300,5.534646527509265e300,5.538855384184178e300,5.54306424085909e300,5.547273097534002e300,5.551481954208913e300,5.555690810883825e300,5.559899667558737e300,5.56410852423365e300,5.568317380908561e300,5.572526237583473e300,5.576735094258386e300,5.580943950933297e300,5.58515280760821e300,5.589361664283122e300,5.593570520958033e300,5.597779377632945e300,5.601988234307857e300,5.60619709098277e300,5.610405947657682e300,5.614614804332592e300,5.618823661007505e300,5.623032517682418e300,5.627241374357329e300,5.631450231032242e300,5.635659087707153e300,5.639867944382065e300,5.644076801056978e300,5.648285657731889e300,5.652494514406802e300,5.656703371081713e300,5.660912227756625e300,5.665121084431537e300,5.66932994110645e300,5.673538797781361e300,5.677747654456273e300,5.681956511131186e300,5.686165367806097e300,5.69037422448101e300,5.694583081155921e300,5.698791937830833e300,5.703000794505745e300,5.707209651180657e300,5.711418507855569e300,5.715627364530482e300,5.719836221205392e300,5.724045077880305e300,5.728253934555218e300,5.732462791230129e300,5.736671647905042e300,5.740880504579952e300,5.745089361254865e300,5.749298217929777e300,5.753507074604689e300,5.757715931279602e300,5.761924787954513e300,5.766133644629424e300,5.770342501304337e300,5.77455135797925e300,5.77876021465416e300,5.782969071329073e300,5.787177928003984e300,5.791386784678897e300,5.79559564135381e300,5.79980449802872e300,5.804013354703632e300,5.808222211378545e300,5.812431068053457e300,5.816639924728369e300,5.820848781403281e300,5.825057638078192e300,5.829266494753105e300,5.833475351428016e300,5.837684208102929e300,5.84189306477784e300,5.846101921452752e300,5.850310778127665e300,5.854519634802577e300,5.858728491477489e300,5.8629373481524e300,5.867146204827313e300,5.871355061502224e300,5.875563918177137e300,5.879772774852048e300,5.88398163152696e300,5.888190488201873e300,5.892399344876784e300,5.896608201551697e300,5.90081705822661e300,5.90502591490152e300,5.909234771576432e300,5.913443628251345e300,5.917652484926256e300,5.921861341601169e300,5.92607019827608e300,5.930279054950992e300,5.934487911625905e300,5.938696768300816e300,5.942905624975729e300,5.94711448165064e300,5.951323338325552e300,5.955532195000464e300,5.959741051675377e300,5.963949908350289e300,5.9681587650252e300,5.972367621700113e300,5.976576478375024e300,5.980785335049937e300,5.984994191724848e300,5.98920304839976e300,5.993411905074673e300,5.997620761749584e300,6.001829618424497e300,6.006038475099409e300,6.01024733177432e300,6.014456188449232e300,6.018665045124145e300,6.022873901799056e300,6.027082758473969e300,6.031291615148879e300,6.035500471823792e300,6.039709328498705e300,6.043918185173616e300,6.048127041848529e300,6.05233589852344e300,6.056544755198352e300,6.060753611873264e300,6.064962468548177e300,6.069171325223089e300,6.073380181898e300,6.077589038572911e300,6.081797895247824e300,6.086006751922737e300,6.090215608597648e300,6.09442446527256e300,6.098633321947472e300,6.102842178622384e300,6.107051035297297e300,6.111259891972209e300,6.11546874864712e300,6.119677605322032e300,6.123886461996944e300,6.128095318671856e300,6.132304175346769e300,6.136513032021679e300,6.140721888696592e300,6.144930745371505e300,6.149139602046416e300,6.153348458721329e300,6.15755731539624e300,6.161766172071152e300,6.165975028746064e300,6.170183885420976e300,6.174392742095888e300,6.1786015987708e300,6.182810455445711e300,6.187019312120624e300,6.191228168795537e300,6.195437025470447e300,6.19964588214536e300,6.203854738820272e300,6.208063595495184e300,6.212272452170096e300,6.216481308845007e300,6.220690165519919e300,6.224899022194832e300,6.229107878869743e300,6.233316735544656e300,6.237525592219568e300,6.241734448894479e300,6.245943305569392e300,6.250152162244304e300,6.254361018919216e300,6.258569875594127e300,6.262778732269039e300,6.266987588943951e300,6.271196445618864e300,6.275405302293776e300,6.279614158968687e300,6.2838230156436e300,6.288031872318511e300,6.292240728993424e300,6.296449585668337e300,6.300658442343247e300,6.30486729901816e300,6.309076155693071e300,6.313285012367984e300,6.317493869042896e300,6.321702725717807e300,6.325911582392719e300,6.330120439067632e300,6.334329295742543e300,6.338538152417456e300,6.342747009092368e300,6.346955865767279e300,6.351164722442192e300,6.355373579117103e300,6.359582435792016e300,6.363791292466927e300,6.368000149141839e300,6.372209005816751e300,6.376417862491664e300,6.380626719166576e300,6.384835575841487e300,6.3890444325164e300,6.393253289191311e300,6.397462145866224e300,6.401671002541135e300,6.405879859216047e300,6.410088715890959e300,6.414297572565871e300,6.418506429240784e300,6.422715285915696e300,6.426924142590606e300,6.431132999265519e300,6.435341855940432e300,6.439550712615343e300,6.443759569290256e300,6.447968425965166e300,6.452177282640079e300,6.456386139314992e300,6.460594995989903e300,6.464803852664816e300,6.469012709339727e300,6.473221566014639e300,6.477430422689551e300,6.481639279364464e300,6.485848136039375e300,6.490056992714287e300,6.494265849389198e300,6.498474706064111e300,6.502683562739024e300,6.506892419413935e300,6.511101276088847e300,6.515310132763759e300,6.519518989438671e300,6.523727846113583e300,6.527936702788496e300,6.532145559463406e300,6.536354416138319e300,6.54056327281323e300,6.544772129488143e300,6.548980986163056e300,6.553189842837966e300,6.557398699512879e300,6.561607556187791e300,6.565816412862703e300,6.570025269537616e300,6.574234126212527e300,6.578442982887438e300,6.582651839562351e300,6.586860696237263e300,6.591069552912174e300,6.595278409587087e300,6.599487266261998e300,6.603696122936911e300,6.607904979611824e300,6.612113836286734e300,6.616322692961646e300,6.620531549636559e300,6.624740406311471e300,6.628949262986383e300,6.633158119661294e300,6.637366976336206e300,6.641575833011119e300,6.64578468968603e300,6.649993546360943e300,6.654202403035855e300,6.658411259710766e300,6.662620116385679e300,6.666828973060591e300,6.671037829735503e300,6.675246686410414e300,6.679455543085326e300,6.683664399760238e300,6.687873256435151e300,6.692082113110063e300,6.696290969784974e300,6.700499826459887e300,6.704708683134798e300,6.708917539809711e300,6.713126396484623e300,6.717335253159534e300,6.721544109834446e300,6.725752966509358e300,6.72996182318427e300,6.734170679859183e300,6.738379536534093e300,6.742588393209006e300,6.746797249883919e300,6.75100610655883e300,6.755214963233743e300,6.759423819908654e300,6.763632676583566e300,6.767841533258479e300,6.77205038993339e300,6.776259246608303e300,6.780468103283214e300,6.784676959958126e300,6.788885816633038e300,6.793094673307951e300,6.797303529982862e300,6.801512386657774e300,6.805721243332687e300,6.809930100007598e300,6.814138956682511e300,6.818347813357422e300,6.822556670032334e300,6.826765526707246e300,6.830974383382158e300,6.83518324005707e300,6.839392096731983e300,6.843600953406893e300,6.847809810081806e300,6.852018666756719e300,6.85622752343163e300,6.860436380106543e300,6.864645236781453e300,6.868854093456366e300,6.873062950131278e300,6.87727180680619e300,6.881480663481103e300,6.885689520156014e300,6.889898376830925e300,6.894107233505838e300,6.898316090180751e300,6.902524946855662e300,6.906733803530574e300,6.910942660205485e300,6.915151516880398e300,6.91936037355531e300,6.923569230230222e300,6.927778086905133e300,6.931986943580046e300,6.936195800254958e300,6.94040465692987e300,6.944613513604783e300,6.948822370279693e300,6.953031226954606e300,6.957240083629517e300,6.96144894030443e300,6.965657796979343e300,6.969866653654253e300,6.974075510329166e300,6.978284367004078e300,6.98249322367899e300,6.986702080353901e300,6.990910937028814e300,6.995119793703725e300,6.999328650378638e300,7.003537507053551e300,7.007746363728461e300,7.011955220403374e300,7.016164077078285e300,7.020372933753198e300,7.02458179042811e300,7.028790647103021e300,7.032999503777933e300,7.037208360452846e300,7.041417217127758e300,7.04562607380267e300,7.049834930477582e300,7.054043787152493e300,7.058252643827406e300,7.062461500502317e300,7.06667035717723e300,7.070879213852141e300,7.075088070527053e300,7.079296927201966e300,7.083505783876878e300,7.08771464055179e300,7.091923497226701e300,7.096132353901614e300,7.100341210576525e300,7.104550067251438e300,7.108758923926349e300,7.112967780601261e300,7.117176637276174e300,7.121385493951085e300,7.125594350625998e300,7.12980320730091e300,7.134012063975821e300,7.138220920650733e300,7.142429777325646e300,7.146638634000557e300,7.15084749067547e300,7.15505634735038e300,7.159265204025293e300,7.163474060700206e300,7.167682917375117e300,7.17189177405003e300,7.176100630724941e300,7.180309487399853e300,7.184518344074765e300,7.188727200749678e300,7.19293605742459e300,7.197144914099501e300,7.201353770774412e300,7.205562627449325e300,7.209771484124238e300,7.213980340799149e300,7.218189197474061e300,7.222398054148973e300,7.226606910823885e300,7.230815767498798e300,7.23502462417371e300,7.23923348084862e300,7.243442337523533e300,7.247651194198445e300,7.251860050873357e300,7.25606890754827e300,7.26027776422318e300,7.264486620898093e300,7.268695477573006e300,7.272904334247917e300,7.27711319092283e300,7.281322047597741e300,7.285530904272653e300,7.289739760947565e300,7.293948617622477e300,7.29815747429739e300,7.302366330972301e300,7.306575187647212e300,7.310784044322125e300,7.314992900997038e300,7.319201757671949e300,7.323410614346861e300,7.327619471021773e300,7.331828327696685e300,7.336037184371597e300,7.340246041046509e300,7.34445489772142e300,7.348663754396333e300,7.352872611071245e300,7.357081467746157e300,7.36129032442107e300,7.36549918109598e300,7.369708037770893e300,7.373916894445805e300,7.378125751120717e300,7.38233460779563e300,7.38654346447054e300,7.390752321145453e300,7.394961177820365e300,7.399170034495277e300,7.403378891170188e300,7.407587747845101e300,7.411796604520012e300,7.416005461194925e300,7.420214317869838e300,7.424423174544748e300,7.42863203121966e300,7.432840887894572e300,7.437049744569485e300,7.441258601244397e300,7.445467457919308e300,7.44967631459422e300,7.453885171269133e300,7.458094027944044e300,7.462302884618957e300,7.466511741293869e300,7.47072059796878e300,7.474929454643693e300,7.479138311318604e300,7.483347167993517e300,7.487556024668428e300,7.49176488134334e300,7.495973738018252e300,7.500182594693165e300,7.504391451368077e300,7.508600308042988e300,7.512809164717901e300,7.517018021392812e300,7.521226878067725e300,7.525435734742636e300,7.529644591417548e300,7.53385344809246e300,7.538062304767372e300,7.542271161442285e300,7.546480018117197e300,7.550688874792107e300,7.55489773146702e300,7.559106588141933e300,7.563315444816844e300,7.567524301491757e300,7.571733158166667e300,7.57594201484158e300,7.580150871516493e300,7.584359728191404e300,7.588568584866317e300,7.592777441541228e300,7.59698629821614e300,7.601195154891052e300,7.605404011565965e300,7.609612868240876e300,7.613821724915788e300,7.618030581590699e300,7.622239438265612e300,7.626448294940525e300,7.630657151615436e300,7.634866008290348e300,7.63907486496526e300,7.643283721640172e300,7.647492578315084e300,7.651701434989997e300,7.655910291664907e300,7.66011914833982e300,7.664328005014732e300,7.668536861689644e300,7.672745718364557e300,7.676954575039467e300,7.68116343171438e300,7.685372288389292e300,7.689581145064204e300,7.693790001739117e300,7.697998858414028e300,7.70220771508894e300,7.706416571763852e300,7.710625428438764e300,7.714834285113676e300,7.719043141788588e300,7.723251998463499e300,7.727460855138412e300,7.731669711813325e300,7.735878568488236e300,7.740087425163148e300,7.74429628183806e300,7.748505138512972e300,7.752713995187884e300,7.756922851862795e300,7.761131708537707e300,7.76534056521262e300,7.769549421887531e300,7.773758278562444e300,7.777967135237357e300,7.782175991912267e300,7.78638484858718e300,7.790593705262092e300,7.794802561937004e300,7.799011418611915e300,7.803220275286827e300,7.807429131961739e300,7.811637988636652e300,7.815846845311564e300,7.820055701986475e300,7.824264558661388e300,7.828473415336299e300,7.832682272011212e300,7.836891128686124e300,7.841099985361035e300,7.845308842035947e300,7.849517698710859e300,7.853726555385772e300,7.857935412060684e300,7.862144268735594e300,7.866353125410507e300,7.87056198208542e300,7.874770838760331e300,7.878979695435244e300,7.883188552110155e300,7.887397408785067e300,7.89160626545998e300,7.895815122134891e300,7.900023978809804e300,7.904232835484715e300,7.908441692159627e300,7.912650548834539e300,7.916859405509452e300,7.921068262184363e300,7.925277118859275e300,7.929485975534188e300,7.933694832209099e300,7.937903688884012e300,7.942112545558923e300,7.946321402233835e300,7.950530258908747e300,7.954739115583659e300,7.958947972258571e300,7.963156828933484e300,7.967365685608394e300,7.971574542283307e300,7.97578339895822e300,7.979992255633131e300,7.984201112308044e300,7.988409968982954e300,7.992618825657867e300,7.99682768233278e300,8.001036539007691e300,8.005245395682604e300,8.009454252357515e300,8.013663109032427e300,8.017871965707339e300,8.022080822382252e300,8.026289679057163e300,8.030498535732075e300,8.034707392406986e300,8.038916249081899e300,8.043125105756812e300,8.047333962431723e300,8.051542819106635e300,8.055751675781547e300,8.059960532456459e300,8.064169389131371e300,8.068378245806284e300,8.072587102481194e300,8.076795959156107e300,8.081004815831018e300,8.085213672505931e300,8.089422529180844e300,8.093631385855754e300,8.097840242530667e300,8.102049099205579e300,8.106257955880491e300,8.110466812555403e300,8.114675669230315e300,8.118884525905226e300,8.123093382580139e300,8.127302239255052e300,8.131511095929963e300,8.135719952604875e300,8.139928809279786e300,8.144137665954699e300,8.148346522629611e300,8.152555379304523e300,8.156764235979434e300,8.160973092654347e300,8.165181949329259e300,8.169390806004171e300,8.173599662679084e300,8.177808519353994e300,8.182017376028907e300,8.186226232703818e300,8.190435089378731e300,8.194643946053642e300,8.198852802728554e300,8.203061659403467e300,8.207270516078379e300,8.211479372753291e300,8.215688229428202e300,8.219897086103115e300,8.224105942778026e300,8.228314799452939e300,8.23252365612785e300,8.236732512802762e300,8.240941369477675e300,8.245150226152586e300,8.249359082827499e300,8.253567939502411e300,8.257776796177322e300,8.261985652852234e300,8.266194509527147e300,8.270403366202058e300,8.274612222876971e300,8.278821079551881e300,8.283029936226794e300,8.287238792901707e300,8.291447649576618e300,8.295656506251531e300,8.299865362926442e300,8.304074219601354e300,8.308283076276266e300,8.312491932951179e300,8.31670078962609e300,8.320909646301002e300,8.325118502975914e300,8.329327359650826e300,8.333536216325739e300,8.33774507300065e300,8.341953929675562e300,8.346162786350474e300,8.350371643025386e300,8.354580499700299e300,8.358789356375211e300,8.362998213050122e300,8.367207069725034e300,8.371415926399946e300,8.375624783074858e300,8.379833639749771e300,8.384042496424681e300,8.388251353099594e300,8.392460209774507e300,8.396669066449418e300,8.400877923124331e300,8.405086779799242e300,8.409295636474154e300,8.413504493149066e300,8.417713349823978e300,8.42192220649889e300,8.426131063173802e300,8.430339919848713e300,8.434548776523626e300,8.438757633198539e300,8.44296648987345e300,8.447175346548362e300,8.451384203223274e300,8.455593059898186e300,8.459801916573098e300,8.46401077324801e300,8.468219629922921e300,8.472428486597834e300,8.476637343272746e300,8.480846199947658e300,8.485055056622571e300,8.489263913297481e300,8.493472769972394e300,8.497681626647306e300,8.501890483322218e300,8.50609933999713e300,8.510308196672041e300,8.514517053346954e300,8.518725910021866e300,8.522934766696778e300,8.52714362337169e300,8.531352480046602e300,8.535561336721513e300,8.539770193396426e300,8.543979050071339e300,8.54818790674625e300,8.552396763421162e300,8.556605620096073e300,8.560814476770986e300,8.565023333445898e300,8.569232190120809e300,8.573441046795721e300,8.577649903470634e300,8.581858760145545e300,8.586067616820458e300,8.590276473495371e300,8.594485330170281e300,8.598694186845194e300,8.602903043520105e300,8.607111900195018e300,8.611320756869929e300,8.615529613544841e300,8.619738470219753e300,8.623947326894666e300,8.628156183569578e300,8.632365040244489e300,8.636573896919402e300,8.640782753594313e300,8.644991610269226e300,8.649200466944137e300,8.653409323619049e300,8.657618180293961e300,8.661827036968873e300,8.666035893643786e300,8.670244750318698e300,8.674453606993609e300,8.678662463668521e300,8.682871320343434e300,8.687080177018345e300,8.691289033693258e300,8.695497890368168e300,8.699706747043081e300,8.703915603717994e300,8.708124460392905e300,8.712333317067818e300,8.716542173742729e300,8.720751030417641e300,8.724959887092553e300,8.729168743767466e300,8.733377600442377e300,8.737586457117289e300,8.7417953137922e300,8.746004170467113e300,8.750213027142026e300,8.754421883816937e300,8.758630740491849e300,8.762839597166761e300,8.767048453841673e300,8.771257310516585e300,8.775466167191498e300,8.779675023866408e300,8.783883880541321e300,8.788092737216233e300,8.792301593891145e300,8.796510450566058e300,8.800719307240968e300,8.804928163915881e300,8.809137020590793e300,8.813345877265705e300,8.817554733940618e300,8.821763590615529e300,8.82597244729044e300,8.830181303965353e300,8.834390160640265e300,8.838599017315177e300,8.842807873990089e300,8.847016730665e300,8.851225587339913e300,8.855434444014826e300,8.859643300689737e300,8.863852157364649e300,8.868061014039561e300,8.872269870714473e300,8.876478727389385e300,8.880687584064297e300,8.884896440739208e300,8.889105297414121e300,8.893314154089032e300,8.897523010763945e300,8.901731867438858e300,8.905940724113768e300,8.910149580788681e300,8.914358437463593e300,8.918567294138505e300,8.922776150813417e300,8.926985007488328e300,8.93119386416324e300,8.935402720838153e300,8.939611577513065e300,8.943820434187977e300,8.948029290862889e300,8.9522381475378e300,8.956447004212713e300,8.960655860887625e300,8.964864717562537e300,8.969073574237448e300,8.97328243091236e300,8.977491287587273e300,8.981700144262185e300,8.985909000937095e300,8.990117857612008e300,8.994326714286921e300,8.998535570961832e300,9.002744427636745e300,9.006953284311656e300,9.011162140986568e300,9.01537099766148e300,9.019579854336392e300,9.023788711011305e300,9.027997567686216e300,9.032206424361128e300,9.03641528103604e300,9.040624137710953e300,9.044832994385864e300,9.049041851060776e300,9.053250707735689e300,9.0574595644106e300,9.061668421085513e300,9.065877277760424e300,9.070086134435336e300,9.074294991110248e300,9.07850384778516e300,9.082712704460072e300,9.086921561134985e300,9.091130417809895e300,9.095339274484808e300,9.099548131159721e300,9.103756987834632e300,9.107965844509545e300,9.112174701184455e300,9.116383557859368e300,9.12059241453428e300,9.124801271209192e300,9.129010127884105e300,9.133218984559016e300,9.137427841233928e300,9.14163669790884e300,9.145845554583753e300,9.150054411258664e300,9.154263267933576e300,9.158472124608488e300,9.1626809812834e300,9.166889837958313e300,9.171098694633224e300,9.175307551308136e300,9.179516407983048e300,9.18372526465796e300,9.187934121332872e300,9.192142978007785e300,9.196351834682695e300,9.200560691357608e300,9.20476954803252e300,9.208978404707432e300,9.213187261382345e300,9.217396118057255e300,9.221604974732168e300,9.22581383140708e300,9.230022688081992e300,9.234231544756904e300,9.238440401431816e300,9.242649258106727e300,9.24685811478164e300,9.251066971456553e300,9.255275828131464e300,9.259484684806376e300,9.263693541481287e300,9.2679023981562e300,9.272111254831112e300,9.276320111506024e300,9.280528968180935e300,9.284737824855848e300,9.28894668153076e300,9.293155538205672e300,9.297364394880585e300,9.301573251555495e300,9.305782108230408e300,9.309990964905319e300,9.314199821580232e300,9.318408678255145e300,9.322617534930055e300,9.326826391604968e300,9.33103524827988e300,9.335244104954792e300,9.339452961629704e300,9.343661818304616e300,9.347870674979527e300,9.35207953165444e300,9.356288388329351e300,9.360497245004264e300,9.364706101679176e300,9.368914958354087e300,9.373123815029e300,9.377332671703912e300,9.381541528378823e300,9.385750385053735e300,9.389959241728648e300,9.39416809840356e300,9.398376955078472e300,9.402585811753382e300,9.406794668428295e300,9.411003525103208e300,9.415212381778119e300,9.419421238453032e300,9.423630095127943e300,9.427838951802855e300,9.432047808477767e300,9.43625666515268e300,9.440465521827592e300,9.444674378502503e300,9.448883235177415e300,9.453092091852327e300,9.45730094852724e300,9.461509805202151e300,9.465718661877063e300,9.469927518551975e300,9.474136375226887e300,9.4783452319018e300,9.482554088576712e300,9.486762945251623e300,9.490971801926535e300,9.495180658601447e300,9.499389515276359e300,9.503598371951272e300,9.507807228626182e300,9.512016085301095e300,9.516224941976008e300,9.520433798650919e300,9.524642655325832e300,9.528851512000743e300,9.533060368675655e300,9.537269225350567e300,9.541478082025479e300,9.545686938700391e300,9.549895795375303e300,9.554104652050214e300,9.558313508725127e300,9.56252236540004e300,9.566731222074951e300,9.570940078749863e300,9.575148935424775e300,9.579357792099687e300,9.5835666487746e300,9.587775505449511e300,9.591984362124422e300,9.596193218799335e300,9.600402075474247e300,9.604610932149159e300,9.608819788824072e300,9.613028645498982e300,9.617237502173895e300,9.621446358848807e300,9.625655215523719e300,9.629864072198632e300,9.634072928873542e300,9.638281785548455e300,9.642490642223367e300,9.646699498898279e300,9.650908355573191e300,9.655117212248103e300,9.659326068923014e300,9.663534925597927e300,9.66774378227284e300,9.671952638947751e300,9.676161495622663e300,9.680370352297574e300,9.684579208972487e300,9.688788065647399e300,9.692996922322311e300,9.697205778997222e300,9.701414635672135e300,9.705623492347046e300,9.709832349021959e300,9.714041205696872e300,9.718250062371782e300,9.722458919046695e300,9.726667775721606e300,9.730876632396519e300,9.735085489071431e300,9.739294345746342e300,9.743503202421254e300,9.747712059096167e300,9.751920915771079e300,9.756129772445991e300,9.760338629120903e300,9.764547485795814e300,9.768756342470727e300,9.772965199145638e300,9.77717405582055e300,9.781382912495462e300,9.785591769170374e300,9.789800625845287e300,9.794009482520199e300,9.79821833919511e300,9.802427195870022e300,9.806636052544935e300,9.810844909219846e300,9.815053765894759e300,9.819262622569669e300,9.823471479244582e300,9.827680335919495e300,9.831889192594406e300,9.836098049269319e300,9.84030690594423e300,9.844515762619142e300,9.848724619294054e300,9.852933475968967e300,9.857142332643878e300,9.86135118931879e300,9.865560045993701e300,9.869768902668614e300,9.873977759343527e300,9.878186616018438e300,9.88239547269335e300,9.886604329368262e300,9.890813186043174e300,9.895022042718086e300,9.899230899392999e300,9.90343975606791e300,9.907648612742822e300,9.911857469417734e300,9.916066326092646e300,9.920275182767559e300,9.924484039442469e300,9.928692896117382e300,9.932901752792294e300,9.937110609467206e300,9.941319466142119e300,9.94552832281703e300,9.949737179491942e300,9.953946036166854e300,9.958154892841766e300,9.962363749516678e300,9.96657260619159e300,9.970781462866501e300,9.974990319541414e300,9.979199176216327e300,9.983408032891238e300,9.98761688956615e300,9.991825746241062e300,9.996034602915974e300,1.0000243459590886e301,1.0004452316265798e301,1.0008661172940709e301,1.0012870029615622e301,1.0017078886290533e301,1.0021287742965446e301,1.0025496599640359e301,1.0029705456315269e301,1.0033914312990182e301,1.0038123169665094e301,1.0042332026340006e301,1.0046540883014918e301,1.0050749739689829e301,1.0054958596364741e301,1.0059167453039654e301,1.0063376309714566e301,1.0067585166389478e301,1.007179402306439e301,1.0076002879739301e301,1.0080211736414214e301,1.0084420593089126e301,1.0088629449764038e301,1.009283830643895e301,1.0097047163113861e301,1.0101256019788774e301,1.0105464876463686e301,1.0109673733138598e301,1.0113882589813509e301,1.0118091446488422e301,1.0122300303163333e301,1.0126509159838246e301,1.0130718016513159e301,1.0134926873188069e301,1.0139135729862982e301,1.0143344586537893e301,1.0147553443212806e301,1.0151762299887718e301,1.0155971156562629e301,1.0160180013237541e301,1.0164388869912454e301,1.0168597726587365e301,1.0172806583262278e301,1.017701543993719e301,1.0181224296612101e301,1.0185433153287014e301,1.0189642009961925e301,1.0193850866636837e301,1.0198059723311749e301,1.0202268579986661e301,1.0206477436661573e301,1.0210686293336486e301,1.0214895150011396e301,1.0219104006686309e301,1.0223312863361222e301,1.0227521720036133e301,1.0231730576711046e301,1.0235939433385956e301,1.0240148290060869e301,1.0244357146735781e301,1.0248566003410693e301,1.0252774860085606e301,1.0256983716760517e301,1.0261192573435429e301,1.0265401430110341e301,1.0269610286785254e301,1.0273819143460165e301,1.0278028000135077e301,1.028223685680999e301,1.0286445713484901e301,1.0290654570159814e301,1.0294863426834725e301,1.0299072283509637e301,1.0303281140184549e301,1.0307489996859461e301,1.0311698853534373e301,1.0315907710209286e301,1.0320116566884196e301,1.0324325423559109e301,1.0328534280234022e301,1.0332743136908933e301,1.0336951993583846e301,1.0341160850258756e301,1.0345369706933669e301,1.0349578563608581e301,1.0353787420283493e301,1.0357996276958405e301,1.0362205133633317e301,1.0366413990308228e301,1.0370622846983141e301,1.0374831703658054e301,1.0379040560332965e301,1.0383249417007877e301,1.0387458273682788e301,1.0391667130357701e301,1.0395875987032613e301,1.0400084843707525e301,1.0404293700382436e301,1.0408502557057349e301,1.041271141373226e301,1.0416920270407173e301,1.0421129127082086e301,1.0425337983756996e301,1.0429546840431909e301,1.043375569710682e301,1.0437964553781733e301,1.0442173410456646e301,1.0446382267131556e301,1.0450591123806469e301,1.0454799980481381e301,1.0459008837156293e301,1.0463217693831205e301,1.0467426550506117e301,1.0471635407181028e301,1.0475844263855941e301,1.0480053120530852e301,1.0484261977205765e301,1.0488470833880677e301,1.0492679690555588e301,1.0496888547230501e301,1.0501097403905413e301,1.0505306260580325e301,1.0509515117255236e301,1.0513723973930149e301,1.051793283060506e301,1.0522141687279973e301,1.0526350543954885e301,1.0530559400629796e301,1.0534768257304709e301,1.053897711397962e301,1.0543185970654533e301,1.0547394827329446e301,1.0551603684004356e301,1.0555812540679268e301,1.0560021397354181e301,1.0564230254029093e301,1.0568439110704005e301,1.0572647967378916e301,1.0576856824053828e301,1.0581065680728741e301,1.0585274537403652e301,1.0589483394078564e301,1.0593692250753476e301,1.0597901107428388e301,1.0602109964103301e301,1.0606318820778213e301,1.0610527677453124e301,1.0614736534128036e301,1.0618945390802948e301,1.062315424747786e301,1.0627363104152773e301,1.0631571960827683e301,1.0635780817502596e301,1.0639989674177509e301,1.064419853085242e301,1.0648407387527333e301,1.0652616244202244e301,1.0656825100877156e301,1.0661033957552068e301,1.066524281422698e301,1.0669451670901892e301,1.0673660527576804e301,1.0677869384251715e301,1.0682078240926628e301,1.0686287097601541e301,1.0690495954276452e301,1.0694704810951364e301,1.0698913667626276e301,1.0703122524301188e301,1.07073313809761e301,1.0711540237651012e301,1.0715749094325923e301,1.0719957951000837e301,1.0724166807675749e301,1.072837566435066e301,1.0732584521025572e301,1.0736793377700483e301,1.0741002234375397e301,1.0745211091050308e301,1.074941994772522e301,1.0753628804400131e301,1.0757837661075043e301,1.0762046517749957e301,1.0766255374424868e301,1.077046423109978e301,1.077467308777469e301,1.0778881944449605e301,1.0783090801124517e301,1.0787299657799428e301,1.079150851447434e301,1.079571737114925e301,1.0799926227824165e301,1.0804135084499076e301,1.0808343941173988e301,1.08125527978489e301,1.081676165452381e301,1.0820970511198725e301,1.0825179367873636e301,1.0829388224548547e301,1.083359708122346e301,1.0837805937898373e301,1.0842014794573284e301,1.0846223651248196e301,1.0850432507923107e301,1.0854641364598019e301,1.0858850221272933e301,1.0863059077947844e301,1.0867267934622755e301,1.0871476791297667e301,1.0875685647972578e301,1.0879894504647492e301,1.0884103361322404e301,1.0888312217997315e301,1.0892521074672227e301,1.0896729931347138e301,1.0900938788022052e301,1.0905147644696963e301,1.0909356501371875e301,1.0913565358046786e301,1.09177742147217e301,1.0921983071396612e301,1.0926191928071523e301,1.0930400784746437e301,1.0934609641421346e301,1.093881849809626e301,1.0943027354771171e301,1.0947236211446083e301,1.0951445068120997e301,1.0955653924795906e301,1.095986278147082e301,1.0964071638145731e301,1.0968280494820643e301,1.0972489351495557e301,1.0976698208170466e301,1.098090706484538e301,1.098511592152029e301,1.0989324778195205e301,1.0993533634870116e301,1.0997742491545025e301,1.100195134821994e301,1.100616020489485e301,1.1010369061569765e301,1.1014577918244676e301,1.1018786774919585e301,1.10229956315945e301,1.102720448826941e301,1.1031413344944324e301,1.1035622201619236e301,1.1039831058294147e301,1.1044039914969059e301,1.104824877164397e301,1.1052457628318884e301,1.1056666484993795e301,1.1060875341668707e301,1.1065084198343618e301,1.106929305501853e301,1.1073501911693444e301,1.1077710768368355e301,1.1081919625043267e301,1.108612848171818e301,1.109033733839309e301,1.1094546195068003e301,1.1098755051742915e301,1.1102963908417826e301,1.110717276509274e301,1.111138162176765e301,1.1115590478442563e301,1.1119799335117475e301,1.1124008191792386e301,1.11282170484673e301,1.1132425905142212e301,1.1136634761817123e301,1.1140843618492034e301,1.1145052475166946e301,1.114926133184186e301,1.1153470188516771e301,1.1157679045191683e301,1.1161887901866594e301,1.1166096758541506e301,1.117030561521642e301,1.117451447189133e301,1.1178723328566245e301,1.1182932185241154e301,1.1187141041916065e301,1.119134989859098e301,1.119555875526589e301,1.1199767611940805e301,1.1203976468615714e301,1.1208185325290625e301,1.121239418196554e301,1.121660303864045e301,1.1220811895315364e301,1.1225020751990276e301,1.1229229608665185e301,1.1233438465340099e301,1.123764732201501e301,1.1241856178689924e301,1.1246065035364836e301,1.1250273892039745e301,1.1254482748714658e301,1.125869160538957e301,1.1262900462064484e301,1.1267109318739395e301,1.1271318175414307e301,1.1275527032089218e301,1.127973588876413e301,1.1283944745439044e301,1.1288153602113955e301,1.1292362458788866e301,1.1296571315463778e301,1.130078017213869e301,1.1304989028813603e301,1.1309197885488515e301,1.1313406742163426e301,1.131761559883834e301,1.132182445551325e301,1.1326033312188163e301,1.1330242168863074e301,1.1334451025537986e301,1.13386598822129e301,1.134286873888781e301,1.1347077595562723e301,1.1351286452237634e301,1.1355495308912546e301,1.135970416558746e301,1.136391302226237e301,1.1368121878937282e301,1.1372330735612194e301,1.1376539592287105e301,1.138074844896202e301,1.138495730563693e301,1.1389166162311842e301,1.1393375018986754e301,1.1397583875661665e301,1.140179273233658e301,1.140600158901149e301,1.1410210445686404e301,1.1414419302361313e301,1.1418628159036225e301,1.1422837015711139e301,1.142704587238605e301,1.1431254729060964e301,1.1435463585735873e301,1.1439672442410785e301,1.1443881299085699e301,1.144809015576061e301,1.1452299012435524e301,1.1456507869110435e301,1.1460716725785344e301,1.1464925582460258e301,1.146913443913517e301,1.1473343295810084e301,1.1477552152484995e301,1.1481761009159904e301,1.1485969865834818e301,1.149017872250973e301,1.1494387579184643e301,1.1498596435859555e301,1.1502805292534466e301,1.1507014149209378e301,1.151122300588429e301,1.1515431862559203e301,1.1519640719234115e301,1.1523849575909026e301,1.1528058432583937e301,1.153226728925885e301,1.1536476145933763e301,1.1540685002608674e301,1.1544893859283586e301,1.15491027159585e301,1.1553311572633409e301,1.155752042930832e301,1.1561729285983234e301,1.1565938142658145e301,1.157014699933306e301,1.1574355856007968e301,1.157856471268288e301,1.1582773569357794e301,1.1586982426032705e301,1.159119128270762e301,1.159540013938253e301,1.159960899605744e301,1.1603817852732353e301,1.1608026709407265e301,1.1612235566082179e301,1.161644442275709e301,1.1620653279432e301,1.1624862136106913e301,1.1629070992781825e301,1.1633279849456739e301,1.163748870613165e301,1.1641697562806561e301,1.1645906419481473e301,1.1650115276156384e301,1.1654324132831298e301,1.165853298950621e301,1.1662741846181121e301,1.1666950702856033e301,1.1671159559530944e301,1.1675368416205858e301,1.167957727288077e301,1.168378612955568e301,1.1687994986230595e301,1.1692203842905504e301,1.1696412699580418e301,1.170062155625533e301,1.170483041293024e301,1.1709039269605155e301,1.1713248126280064e301,1.1717456982954977e301,1.172166583962989e301,1.17258746963048e301,1.1730083552979714e301,1.1734292409654626e301,1.1738501266329537e301,1.1742710123004449e301,1.174691897967936e301,1.1751127836354274e301,1.1755336693029185e301,1.1759545549704097e301,1.1763754406379008e301,1.176796326305392e301,1.1772172119728834e301,1.1776380976403745e301,1.178058983307866e301,1.1784798689753568e301,1.178900754642848e301,1.1793216403103394e301,1.1797425259778305e301,1.180163411645322e301,1.1805842973128128e301,1.181005182980304e301,1.1814260686477953e301,1.1818469543152865e301,1.1822678399827779e301,1.182688725650269e301,1.18310961131776e301,1.1835304969852513e301,1.1839513826527424e301,1.1843722683202338e301,1.184793153987725e301,1.185214039655216e301,1.1856349253227073e301,1.1860558109901984e301,1.1864766966576898e301,1.186897582325181e301,1.187318467992672e301,1.1877393536601632e301,1.1881602393276544e301,1.1885811249951458e301,1.189002010662637e301,1.189422896330128e301,1.1898437819976195e301,1.1902646676651104e301,1.1906855533326018e301,1.191106439000093e301,1.191527324667584e301,1.1919482103350754e301,1.1923690960025663e301,1.1927899816700577e301,1.1932108673375489e301,1.19363175300504e301,1.1940526386725314e301,1.1944735243400226e301,1.1948944100075137e301,1.1953152956750048e301,1.195736181342496e301,1.1961570670099874e301,1.1965779526774785e301,1.1969988383449697e301,1.1974197240124608e301,1.197840609679952e301,1.1982614953474434e301,1.1986823810149345e301,1.199103266682426e301,1.1995241523499168e301,1.199945038017408e301,1.2003659236848993e301,1.2007868093523905e301,1.2012076950198819e301,1.2016285806873728e301,1.202049466354864e301,1.2024703520223553e301,1.2028912376898464e301,1.2033121233573378e301,1.203733009024829e301,1.20415389469232e301,1.2045747803598113e301,1.2049956660273024e301,1.2054165516947938e301,1.205837437362285e301,1.2062583230297759e301,1.2066792086972672e301,1.2071000943647584e301,1.2075209800322498e301,1.207941865699741e301,1.208362751367232e301,1.2087836370347232e301,1.2092045227022144e301,1.2096254083697058e301,1.210046294037197e301,1.210467179704688e301,1.2108880653721792e301,1.2113089510396703e301,1.2117298367071617e301,1.2121507223746529e301,1.212571608042144e301,1.2129924937096354e301,1.2134133793771263e301,1.2138342650446177e301,1.2142551507121089e301,1.2146760363796e301,1.2150969220470914e301,1.2155178077145823e301,1.2159386933820737e301,1.2163595790495648e301,1.216780464717056e301,1.2172013503845474e301,1.2176222360520385e301,1.2180431217195297e301,1.2184640073870208e301,1.218884893054512e301,1.2193057787220033e301,1.2197266643894945e301,1.2201475500569856e301,1.2205684357244768e301,1.220989321391968e301,1.2214102070594593e301,1.2218310927269505e301,1.2222519783944418e301,1.2226728640619327e301,1.223093749729424e301,1.2235146353969153e301,1.2239355210644064e301,1.2243564067318978e301,1.2247772923993887e301,1.2251981780668799e301,1.2256190637343713e301,1.2260399494018624e301,1.2264608350693538e301,1.226881720736845e301,1.2273026064043358e301,1.2277234920718272e301,1.2281443777393184e301,1.2285652634068098e301,1.228986149074301e301,1.2294070347417918e301,1.2298279204092832e301,1.2302488060767743e301,1.2306696917442657e301,1.2310905774117569e301,1.231511463079248e301,1.2319323487467392e301,1.2323532344142303e301,1.2327741200817217e301,1.2331950057492129e301,1.233615891416704e301,1.2340367770841951e301,1.2344576627516863e301,1.2348785484191777e301,1.2352994340866688e301,1.23572031975416e301,1.2361412054216514e301,1.2365620910891423e301,1.2369829767566334e301,1.2374038624241248e301,1.237824748091616e301,1.2382456337591073e301,1.2386665194265982e301,1.2390874050940894e301,1.2395082907615808e301,1.239929176429072e301,1.2403500620965633e301,1.2407709477640545e301,1.2411918334315454e301,1.2416127190990367e301,1.242033604766528e301,1.2424544904340193e301,1.2428753761015104e301,1.2432962617690013e301,1.2437171474364927e301,1.2441380331039839e301,1.2445589187714753e301,1.2449798044389664e301,1.2454006901064576e301,1.2458215757739487e301,1.2462424614414398e301,1.2466633471089312e301,1.2470842327764224e301,1.2475051184439135e301,1.2479260041114047e301,1.2483468897788958e301,1.2487677754463872e301,1.2491886611138784e301,1.2496095467813695e301,1.250030432448861e301,1.2504513181163518e301,1.2508722037838432e301,1.2512930894513343e301,1.2517139751188255e301,1.2521348607863169e301,1.2525557464538078e301,1.2529766321212992e301,1.2533975177887903e301,1.2538184034562814e301,1.2542392891237728e301,1.254660174791264e301,1.2550810604587551e301,1.2555019461262463e301,1.2559228317937374e301,1.2563437174612288e301,1.25676460312872e301,1.257185488796211e301,1.2576063744637022e301,1.2580272601311934e301,1.2584481457986848e301,1.258869031466176e301,1.2592899171336673e301,1.2597108028011582e301,1.2601316884686494e301,1.2605525741361408e301,1.260973459803632e301,1.2613943454711233e301,1.2618152311386142e301,1.2622361168061053e301,1.2626570024735967e301,1.2630778881410879e301,1.2634987738085793e301,1.2639196594760704e301,1.2643405451435613e301,1.2647614308110527e301,1.2651823164785438e301,1.2656032021460352e301,1.2660240878135264e301,1.2664449734810173e301,1.2668658591485087e301,1.2672867448159998e301,1.2677076304834912e301,1.2681285161509824e301,1.2685494018184735e301,1.2689702874859646e301,1.2693911731534558e301,1.2698120588209472e301,1.2702329444884383e301,1.2706538301559295e301,1.2710747158234206e301,1.2714956014909118e301,1.2719164871584032e301,1.2723373728258943e301,1.2727582584933854e301,1.2731791441608768e301,1.2736000298283677e301,1.2740209154958591e301,1.2744418011633503e301,1.2748626868308414e301,1.2752835724983328e301,1.2757044581658237e301,1.276125343833315e301,1.2765462295008062e301,1.2769671151682974e301,1.2773880008357888e301,1.27780888650328e301,1.278229772170771e301,1.2786506578382622e301,1.2790715435057534e301,1.2794924291732448e301,1.279913314840736e301,1.280334200508227e301,1.2807550861757182e301,1.2811759718432093e301,1.2815968575107007e301,1.2820177431781919e301,1.2824386288456833e301,1.2828595145131742e301,1.2832804001806653e301,1.2837012858481567e301,1.2841221715156479e301,1.2845430571831392e301,1.2849639428506301e301,1.2853848285181213e301,1.2858057141856127e301,1.2862265998531038e301,1.2866474855205952e301,1.2870683711880864e301,1.2874892568555773e301,1.2879101425230687e301,1.2883310281905598e301,1.2887519138580512e301,1.2891727995255423e301,1.2895936851930332e301,1.2900145708605246e301,1.2904354565280158e301,1.2908563421955072e301,1.2912772278629983e301,1.2916981135304895e301,1.2921189991979806e301,1.2925398848654717e301,1.2929607705329631e301,1.2933816562004543e301,1.2938025418679454e301,1.2942234275354366e301,1.2946443132029277e301,1.295065198870419e301,1.2954860845379103e301,1.2959069702054014e301,1.2963278558728928e301,1.2967487415403837e301,1.297169627207875e301,1.2975905128753662e301,1.2980113985428574e301,1.2984322842103488e301,1.2988531698778397e301,1.299274055545331e301,1.2996949412128222e301,1.3001158268803133e301,1.3005367125478047e301,1.3009575982152959e301,1.301378483882787e301,1.3017993695502782e301,1.3022202552177693e301,1.3026411408852607e301,1.3030620265527519e301,1.303482912220243e301,1.3039037978877341e301,1.3043246835552253e301,1.3047455692227167e301,1.3051664548902078e301,1.3055873405576992e301,1.3060082262251901e301,1.3064291118926813e301,1.3068499975601727e301,1.3072708832276638e301,1.3076917688951552e301,1.308112654562646e301,1.3085335402301372e301,1.3089544258976286e301,1.3093753115651198e301,1.3097961972326112e301,1.3102170829001023e301,1.3106379685675932e301,1.3110588542350846e301,1.3114797399025758e301,1.3119006255700671e301,1.3123215112375583e301,1.3127423969050492e301,1.3131632825725406e301,1.3135841682400317e301,1.314005053907523e301,1.3144259395750143e301,1.3148468252425054e301,1.3152677109099966e301,1.3156885965774877e301,1.316109482244979e301,1.3165303679124702e301,1.3169512535799614e301,1.3173721392474525e301,1.3177930249149437e301,1.3182139105824348e301,1.3186347962499262e301,1.3190556819174174e301,1.3194765675849087e301,1.3198974532523996e301,1.3203183389198908e301,1.3207392245873822e301,1.3211601102548733e301,1.3215809959223647e301,1.3220018815898556e301,1.3224227672573468e301,1.3228436529248382e301,1.3232645385923293e301,1.3236854242598207e301,1.3241063099273118e301,1.3245271955948027e301,1.3249480812622941e301,1.3253689669297853e301,1.3257898525972767e301,1.3262107382647678e301,1.3266316239322587e301,1.32705250959975e301,1.3274733952672412e301,1.3278942809347326e301,1.3283151666022238e301,1.328736052269715e301,1.329156937937206e301,1.3295778236046972e301,1.3299987092721886e301,1.3304195949396798e301,1.330840480607171e301,1.331261366274662e301,1.3316822519421532e301,1.3321031376096446e301,1.3325240232771357e301,1.3329449089446269e301,1.3333657946121183e301,1.3337866802796092e301,1.3342075659471006e301,1.3346284516145917e301,1.3350493372820828e301,1.3354702229495742e301,1.3358911086170651e301,1.3363119942845565e301,1.3367328799520477e301,1.3371537656195388e301,1.3375746512870302e301,1.3379955369545214e301,1.3384164226220125e301,1.3388373082895036e301,1.3392581939569948e301,1.3396790796244862e301,1.3400999652919773e301,1.3405208509594685e301,1.3409417366269596e301,1.3413626222944508e301,1.3417835079619422e301,1.3422043936294333e301,1.3426252792969247e301,1.3430461649644156e301,1.3434670506319067e301,1.3438879362993981e301,1.3443088219668893e301,1.3447297076343807e301,1.3451505933018716e301,1.3455714789693627e301,1.345992364636854e301,1.3464132503043453e301,1.3468341359718366e301,1.3472550216393278e301,1.3476759073068187e301,1.34809679297431e301,1.3485176786418012e301,1.3489385643092926e301,1.3493594499767838e301,1.3497803356442747e301,1.350201221311766e301,1.3506221069792572e301,1.3510429926467486e301,1.3514638783142397e301,1.3518847639817309e301,1.352305649649222e301,1.3527265353167132e301,1.3531474209842046e301,1.3535683066516957e301,1.3539891923191869e301,1.354410077986678e301,1.3548309636541691e301,1.3552518493216605e301,1.3556727349891517e301,1.3560936206566428e301,1.3565145063241342e301,1.3569353919916251e301,1.3573562776591165e301,1.3577771633266077e301,1.3581980489940988e301,1.3586189346615902e301,1.359039820329081e301,1.3594607059965725e301,1.3598815916640636e301,1.3603024773315548e301,1.3607233629990462e301,1.3611442486665373e301,1.3615651343340285e301,1.3619860200015196e301,1.3624069056690107e301,1.3628277913365021e301,1.3632486770039933e301,1.3636695626714844e301,1.3640904483389756e301,1.3645113340064667e301,1.364932219673958e301,1.3653531053414493e301,1.3657739910089406e301,1.3661948766764315e301,1.3666157623439227e301,1.367036648011414e301,1.3674575336789052e301,1.3678784193463966e301,1.3682993050138875e301,1.3687201906813787e301,1.36914107634887e301,1.3695619620163612e301,1.3699828476838526e301,1.3704037333513437e301,1.3708246190188346e301,1.371245504686326e301,1.3716663903538172e301,1.3720872760213086e301,1.3725081616887997e301,1.3729290473562906e301,1.373349933023782e301,1.3737708186912731e301,1.3741917043587645e301,1.3746125900262557e301,1.3750334756937468e301,1.375454361361238e301,1.3758752470287291e301,1.3762961326962205e301,1.3767170183637117e301,1.3771379040312028e301,1.377558789698694e301,1.377979675366185e301,1.3784005610336765e301,1.3788214467011676e301,1.3792423323686588e301,1.3796632180361502e301,1.380084103703641e301,1.3805049893711325e301,1.3809258750386236e301,1.3813467607061148e301,1.3817676463736061e301,1.382188532041097e301,1.3826094177085884e301,1.3830303033760796e301,1.3834511890435707e301,1.383872074711062e301,1.3842929603785533e301,1.3847138460460444e301,1.3851347317135356e301,1.3855556173810267e301,1.385976503048518e301,1.3863973887160092e301,1.3868182743835004e301,1.3872391600509915e301,1.3876600457184827e301,1.388080931385974e301,1.3885018170534652e301,1.3889227027209566e301,1.3893435883884475e301,1.3897644740559386e301,1.39018535972343e301,1.3906062453909212e301,1.3910271310584126e301,1.3914480167259035e301,1.3918689023933946e301,1.392289788060886e301,1.3927106737283772e301,1.3931315593958685e301,1.3935524450633597e301,1.3939733307308506e301,1.394394216398342e301,1.3948151020658331e301,1.3952359877333245e301,1.3956568734008157e301,1.3960777590683066e301,1.396498644735798e301,1.396919530403289e301,1.3973404160707802e301,1.3977613017382716e301,1.3981821874057628e301,1.398603073073254e301,1.399023958740745e301,1.3994448444082362e301,1.3998657300757276e301,1.4002866157432188e301,1.4007075014107101e301,1.401128387078201e301,1.4015492727456922e301,1.4019701584131836e301,1.4023910440806747e301,1.402811929748166e301,1.403232815415657e301,1.4036537010831482e301,1.4040745867506396e301,1.4044954724181307e301,1.404916358085622e301,1.4053372437531132e301,1.4057581294206041e301,1.4061790150880955e301,1.4065999007555867e301,1.407020786423078e301,1.4074416720905692e301,1.40786255775806e301,1.4082834434255515e301,1.4087043290930426e301,1.409125214760534e301,1.4095461004280252e301,1.4099669860955163e301,1.4103878717630075e301,1.4108087574304986e301,1.41122964309799e301,1.4116505287654812e301,1.4120714144329723e301,1.4124923001004635e301,1.4129131857679546e301,1.413334071435446e301,1.4137549571029371e301,1.4141758427704283e301,1.4145967284379197e301,1.4150176141054106e301,1.415438499772902e301,1.415859385440393e301,1.4162802711078843e301,1.4167011567753756e301,1.4171220424428665e301,1.417542928110358e301,1.417963813777849e301,1.4183846994453402e301,1.4188055851128316e301,1.4192264707803228e301,1.419647356447814e301,1.420068242115305e301,1.4204891277827962e301,1.4209100134502876e301,1.4213308991177787e301,1.4217517847852699e301,1.422172670452761e301,1.4225935561202522e301,1.4230144417877436e301,1.4234353274552347e301,1.423856213122726e301,1.424277098790217e301,1.4246979844577081e301,1.4251188701251995e301,1.4255397557926907e301,1.425960641460182e301,1.426381527127673e301,1.4268024127951641e301,1.4272232984626555e301,1.4276441841301467e301,1.428065069797638e301,1.4284859554651292e301,1.42890684113262e301,1.4293277268001115e301,1.4297486124676026e301,1.430169498135094e301,1.4305903838025852e301,1.431011269470076e301,1.4314321551375675e301,1.4318530408050586e301,1.43227392647255e301,1.4326948121400411e301,1.4331156978075323e301,1.4335365834750234e301,1.4339574691425146e301,1.434378354810006e301,1.434799240477497e301,1.4352201261449883e301,1.4356410118124794e301,1.4360618974799705e301,1.436482783147462e301,1.436903668814953e301,1.4373245544824442e301,1.4377454401499356e301,1.4381663258174265e301,1.438587211484918e301,1.439008097152409e301,1.4394289828199002e301,1.4398498684873916e301,1.4402707541548825e301,1.440691639822374e301,1.441112525489865e301,1.4415334111573562e301,1.4419542968248476e301,1.4423751824923387e301,1.4427960681598299e301,1.443216953827321e301,1.4436378394948121e301,1.4440587251623035e301,1.4444796108297947e301,1.4449004964972858e301,1.445321382164777e301,1.4457422678322681e301,1.4461631534997595e301,1.4465840391672507e301,1.447004924834742e301,1.447425810502233e301,1.447846696169724e301,1.4482675818372155e301,1.4486884675047066e301,1.449109353172198e301,1.449530238839689e301,1.44995112450718e301,1.4503720101746715e301,1.4507928958421626e301,1.451213781509654e301,1.4516346671771451e301,1.452055552844636e301,1.4524764385121274e301,1.4528973241796186e301,1.45331820984711e301,1.453739095514601e301,1.454159981182092e301,1.4545808668495834e301,1.4550017525170746e301,1.455422638184566e301,1.455843523852057e301,1.4562644095195482e301,1.4566852951870394e301,1.4571061808545305e301,1.457527066522022e301,1.457947952189513e301,1.4583688378570042e301,1.4587897235244954e301,1.4592106091919865e301,1.459631494859478e301,1.460052380526969e301,1.4604732661944602e301,1.4608941518619516e301,1.4613150375294425e301,1.4617359231969339e301,1.462156808864425e301,1.4625776945319162e301,1.4629985801994075e301,1.4634194658668984e301,1.4638403515343898e301,1.464261237201881e301,1.4646821228693721e301,1.4651030085368635e301,1.4655238942043547e301,1.4659447798718458e301,1.466365665539337e301,1.466786551206828e301,1.4672074368743195e301,1.4676283225418106e301,1.4680492082093018e301,1.468470093876793e301,1.468890979544284e301,1.4693118652117755e301,1.4697327508792666e301,1.470153636546758e301,1.470574522214249e301,1.47099540788174e301,1.4714162935492314e301,1.4718371792167226e301,1.472258064884214e301,1.4726789505517049e301,1.473099836219196e301,1.4735207218866874e301,1.4739416075541786e301,1.47436249322167e301,1.474783378889161e301,1.475204264556652e301,1.4756251502241434e301,1.4760460358916345e301,1.476466921559126e301,1.476887807226617e301,1.477308692894108e301,1.4777295785615994e301,1.4781504642290905e301,1.4785713498965816e301,1.478992235564073e301,1.4794131212315642e301,1.4798340068990553e301,1.4802548925665465e301,1.4806757782340376e301,1.481096663901529e301,1.4815175495690202e301,1.4819384352365113e301,1.4823593209040025e301,1.4827802065714936e301,1.483201092238985e301,1.4836219779064761e301,1.4840428635739675e301,1.4844637492414584e301,1.4848846349089496e301,1.485305520576441e301,1.485726406243932e301,1.4861472919114235e301,1.4865681775789144e301,1.4869890632464055e301,1.487409948913897e301,1.487830834581388e301,1.4882517202488795e301,1.4886726059163706e301,1.4890934915838615e301,1.489514377251353e301,1.489935262918844e301,1.4903561485863354e301,1.4907770342538266e301,1.4911979199213175e301,1.4916188055888089e301,1.4920396912563e301,1.4924605769237914e301,1.4928814625912826e301,1.4933023482587737e301,1.4937232339262649e301,1.494144119593756e301,1.4945650052612474e301,1.4949858909287385e301,1.4954067765962297e301,1.4958276622637208e301,1.496248547931212e301,1.4966694335987034e301,1.4970903192661945e301,1.4975112049336857e301,1.497932090601177e301,1.498352976268668e301,1.4987738619361593e301,1.4991947476036505e301,1.4996156332711416e301,1.500036518938633e301,1.500457404606124e301,1.5008782902736153e301,1.5012991759411065e301,1.5017200616085976e301,1.502140947276089e301,1.5025618329435801e301,1.5029827186110713e301,1.5034036042785624e301,1.5038244899460536e301,1.504245375613545e301,1.504666261281036e301,1.5050871469485273e301,1.5055080326160184e301,1.5059289182835095e301,1.506349803951001e301,1.506770689618492e301,1.5071915752859835e301,1.5076124609534744e301,1.5080333466209655e301,1.508454232288457e301,1.508875117955948e301,1.5092960036234394e301,1.5097168892909303e301,1.5101377749584215e301,1.510558660625913e301,1.510979546293404e301,1.5114004319608954e301,1.5118213176283866e301,1.5122422032958775e301,1.5126630889633689e301,1.51308397463086e301,1.5135048602983514e301,1.5139257459658425e301,1.5143466316333334e301,1.5147675173008248e301,1.515188402968316e301,1.5156092886358074e301,1.5160301743032985e301,1.5164510599707897e301,1.5168719456382808e301,1.517292831305772e301,1.5177137169732633e301,1.5181346026407545e301,1.5185554883082456e301,1.5189763739757368e301,1.519397259643228e301,1.5198181453107193e301,1.5202390309782105e301,1.5206599166457016e301,1.521080802313193e301,1.521501687980684e301,1.5219225736481753e301,1.5223434593156664e301,1.5227643449831576e301,1.523185230650649e301,1.5236061163181399e301,1.5240270019856313e301,1.5244478876531224e301,1.5248687733206136e301,1.525289658988105e301,1.525710544655596e301,1.5261314303230872e301,1.5265523159905784e301,1.5269732016580695e301,1.527394087325561e301,1.527814972993052e301,1.5282358586605432e301,1.5286567443280344e301,1.5290776299955255e301,1.529498515663017e301,1.529919401330508e301,1.5303402869979994e301,1.5307611726654903e301,1.5311820583329815e301,1.5316029440004729e301,1.532023829667964e301,1.5324447153354554e301,1.5328656010029463e301,1.5332864866704374e301,1.5337073723379288e301,1.53412825800542e301,1.5345491436729114e301,1.5349700293404025e301,1.5353909150078934e301,1.5358118006753848e301,1.536232686342876e301,1.5366535720103673e301,1.5370744576778585e301,1.5374953433453494e301,1.5379162290128408e301,1.538337114680332e301,1.5387580003478233e301,1.5391788860153145e301,1.5395997716828056e301,1.5400206573502968e301,1.540441543017788e301,1.5408624286852793e301,1.5412833143527704e301,1.5417042000202616e301,1.5421250856877527e301,1.5425459713552439e301,1.5429668570227353e301,1.5433877426902264e301,1.5438086283577176e301,1.544229514025209e301,1.5446503996926998e301,1.5450712853601912e301,1.5454921710276824e301,1.5459130566951735e301,1.546333942362665e301,1.5467548280301558e301,1.5471757136976472e301,1.5475965993651384e301,1.5480174850326295e301,1.548438370700121e301,1.548859256367612e301,1.5492801420351032e301,1.5497010277025943e301,1.5501219133700855e301,1.5505427990375769e301,1.550963684705068e301,1.551384570372559e301,1.5518054560400503e301,1.5522263417075415e301,1.5526472273750328e301,1.553068113042524e301,1.5534889987100154e301,1.5539098843775063e301,1.5543307700449974e301,1.5547516557124888e301,1.55517254137998e301,1.5555934270474713e301,1.5560143127149623e301,1.5564351983824534e301,1.5568560840499448e301,1.557276969717436e301,1.5576978553849273e301,1.5581187410524185e301,1.5585396267199094e301,1.5589605123874008e301,1.559381398054892e301,1.559802283722383e301,1.5602231693898744e301,1.5606440550573653e301,1.5610649407248567e301,1.5614858263923479e301,1.561906712059839e301,1.5623275977273304e301,1.5627484833948216e301,1.5631693690623127e301,1.5635902547298039e301,1.564011140397295e301,1.5644320260647864e301,1.5648529117322775e301,1.5652737973997687e301,1.5656946830672598e301,1.566115568734751e301,1.5665364544022424e301,1.5669573400697335e301,1.567378225737225e301,1.5677991114047158e301,1.568219997072207e301,1.5686408827396983e301,1.5690617684071895e301,1.5694826540746809e301,1.5699035397421718e301,1.570324425409663e301,1.5707453110771543e301,1.5711661967446455e301,1.5715870824121368e301,1.572007968079628e301,1.572428853747119e301,1.5728497394146103e301,1.5732706250821014e301,1.5736915107495928e301,1.574112396417084e301,1.5745332820845749e301,1.5749541677520663e301,1.5753750534195574e301,1.5757959390870488e301,1.57621682475454e301,1.576637710422031e301,1.5770585960895222e301,1.5774794817570134e301,1.5779003674245048e301,1.578321253091996e301,1.578742138759487e301,1.5791630244269782e301,1.5795839100944694e301,1.5800047957619607e301,1.580425681429452e301,1.580846567096943e301,1.5812674527644344e301,1.5816883384319253e301,1.5821092240994167e301,1.5825301097669079e301,1.582950995434399e301,1.5833718811018904e301,1.5837927667693813e301,1.5842136524368727e301,1.5846345381043638e301,1.585055423771855e301,1.5854763094393464e301,1.5858971951068375e301,1.5863180807743287e301,1.5867389664418198e301,1.587159852109311e301,1.5875807377768023e301,1.5880016234442935e301,1.5884225091117846e301,1.5888433947792758e301,1.589264280446767e301,1.5896851661142583e301,1.5901060517817495e301,1.5905269374492408e301,1.5909478231167318e301,1.591368708784223e301,1.5917895944517143e301,1.5922104801192054e301,1.5926313657866968e301,1.5930522514541877e301,1.5934731371216789e301,1.5938940227891703e301,1.5943149084566614e301,1.5947357941241528e301,1.595156679791644e301,1.5955775654591348e301,1.5959984511266262e301,1.5964193367941174e301,1.5968402224616088e301,1.5972611081291e301,1.5976819937965908e301,1.5981028794640822e301,1.5985237651315734e301,1.5989446507990647e301,1.599365536466556e301,1.599786422134047e301,1.6002073078015382e301,1.6006281934690293e301,1.6010490791365207e301,1.6014699648040119e301,1.601890850471503e301,1.6023117361389942e301,1.6027326218064853e301,1.6031535074739767e301,1.6035743931414678e301,1.603995278808959e301,1.6044161644764504e301,1.6048370501439413e301,1.6052579358114327e301,1.6056788214789238e301,1.606099707146415e301,1.6065205928139063e301,1.6069414784813972e301,1.6073623641488886e301,1.6077832498163798e301,1.608204135483871e301,1.6086250211513623e301,1.6090459068188535e301,1.6094667924863446e301,1.6098876781538358e301,1.610308563821327e301,1.6107294494888183e301,1.6111503351563094e301,1.6115712208238006e301,1.6119921064912917e301,1.6124129921587829e301,1.6128338778262743e301,1.6132547634937654e301,1.6136756491612568e301,1.6140965348287477e301,1.6145174204962389e301,1.6149383061637302e301,1.6153591918312214e301,1.6157800774987128e301,1.6162009631662037e301,1.6166218488336948e301,1.6170427345011862e301,1.6174636201686774e301,1.6178845058361687e301,1.61830539150366e301,1.6187262771711508e301,1.6191471628386422e301,1.6195680485061333e301,1.6199889341736247e301,1.6204098198411159e301,1.620830705508607e301,1.6212515911760982e301,1.6216724768435893e301,1.6220933625110807e301,1.6225142481785718e301,1.622935133846063e301,1.6233560195135541e301,1.6237769051810453e301,1.6241977908485367e301,1.6246186765160278e301,1.625039562183519e301,1.6254604478510103e301,1.6258813335185013e301,1.6263022191859926e301,1.6267231048534838e301,1.627143990520975e301,1.6275648761884663e301,1.6279857618559572e301,1.6284066475234486e301,1.6288275331909398e301,1.629248418858431e301,1.6296693045259223e301,1.6300901901934134e301,1.6305110758609046e301,1.6309319615283957e301,1.6313528471958869e301,1.6317737328633783e301,1.6321946185308694e301,1.6326155041983603e301,1.6330363898658517e301,1.6334572755333429e301,1.6338781612008342e301,1.6342990468683254e301,1.6347199325358168e301,1.6351408182033077e301,1.6355617038707988e301,1.6359825895382902e301,1.6364034752057814e301,1.6368243608732727e301,1.6372452465407637e301,1.6376661322082548e301,1.6380870178757462e301,1.6385079035432373e301,1.6389287892107285e301,1.6393496748782199e301,1.6397705605457108e301,1.6401914462132022e301,1.6406123318806933e301,1.6410332175481845e301,1.6414541032156758e301,1.6418749888831667e301,1.6422958745506581e301,1.6427167602181493e301,1.6431376458856404e301,1.6435585315531318e301,1.643979417220623e301,1.644400302888114e301,1.6448211885556053e301,1.6452420742230964e301,1.6456629598905878e301,1.646083845558079e301,1.64650473122557e301,1.6469256168930612e301,1.6473465025605524e301,1.6477673882280438e301,1.648188273895535e301,1.6486091595630263e301,1.6490300452305172e301,1.6494509308980084e301,1.6498718165654997e301,1.650292702232991e301,1.6507135879004823e301,1.6511344735679732e301,1.6515553592354643e301,1.6519762449029557e301,1.6523971305704469e301,1.6528180162379382e301,1.6532389019054294e301,1.6536597875729203e301,1.6540806732404117e301,1.6545015589079028e301,1.6549224445753942e301,1.6553433302428854e301,1.6557642159103763e301,1.6561851015778677e301,1.6566059872453588e301,1.6570268729128502e301,1.6574477585803413e301,1.6578686442478325e301,1.6582895299153236e301,1.6587104155828148e301,1.6591313012503062e301,1.6595521869177973e301,1.6599730725852885e301,1.6603939582527796e301,1.6608148439202708e301,1.6612357295877621e301,1.6616566152552533e301,1.6620775009227444e301,1.6624983865902358e301,1.6629192722577267e301,1.663340157925218e301,1.6637610435927093e301,1.6641819292602004e301,1.6646028149276918e301,1.6650237005951827e301,1.665444586262674e301,1.6658654719301652e301,1.6662863575976564e301,1.6667072432651478e301,1.667128128932639e301,1.66754901460013e301,1.6679699002676212e301,1.6683907859351124e301,1.6688116716026037e301,1.669232557270095e301,1.669653442937586e301,1.6700743286050772e301,1.6704952142725683e301,1.6709160999400597e301,1.6713369856075509e301,1.6717578712750422e301,1.6721787569425332e301,1.6725996426100243e301,1.6730205282775157e301,1.6734414139450068e301,1.6738622996124982e301,1.6742831852799891e301,1.6747040709474803e301,1.6751249566149717e301,1.6755458422824628e301,1.6759667279499542e301,1.6763876136174453e301,1.6768084992849362e301,1.6772293849524276e301,1.6776502706199188e301,1.6780711562874102e301,1.6784920419549013e301,1.6789129276223922e301,1.6793338132898836e301,1.6797546989573748e301,1.6801755846248661e301,1.6805964702923573e301,1.6810173559598484e301,1.6814382416273396e301,1.6818591272948307e301,1.682280012962322e301,1.6827008986298133e301,1.6831217842973044e301]}
},{}],32:[function(require,module,exports){
module.exports={"expected":[2.0,0.5106743242381243,0.4130156812257143,1.9669843652719137,0.5320468334375723,0.4443272198084238,1.941237381896233,0.6104617359617828,0.20076876089731888,1.983598588439949,0.936755117286874,0.7401584394611067,1.5248929027165818,1.6986836942176156,0.10892821150120358,1.9895131472310315,0.6201806934706795,0.194484854979175,1.7700395372706854,0.47496360558132256,0.301436930763884,1.8634452297456232,0.01051121856726911,1.3799752578767155,1.2037795686443329,1.9005044934399566,0.35998397647847036,1.979582435665654,0.9577839204307721,0.04086853712154792,1.5068535268838357,1.7135935590472688,0.14745633310051243,0.6994089629673936,1.9981606730535026,0.18218563778602337,1.756434558482531,1.4513705159667847,1.2041096635522215,1.9003578199235056,0.3597249354468335,0.4098142295684002,1.9261820756648385,1.1415101800240404,0.0052653521798540215,1.3403747183521066,1.8298450092392944,0.2576187979876069,0.5297908905175481,0.18237972628157895,1.0002255363371273,1.4510696107780334,1.4698109651959395,1.021337108716405,0.1704067710054158,0.6592011772171271,1.994688318869375,1.841440215650844,0.07364792961239697,0.003323449179278626,0.14710406695572553,1.91801495358989,1.9982013286940887,0.37608443976526384,1.9093438820012505,1.183396990657,0.00181208265836319,1.3001607944895794,1.852779336001795,0.286722516987469,0.6793406806011566,1.959003729403347,1.728224474288002,1.4885416629900243,0.03510854106603112,1.7704347323449343,1.975119768916711,0.5487311160968816,0.24349095378859642,1.817748814659618,1.3603623901026547,1.7422315837646787,1.120353345002265,0.11913526927841678,0.4271751868321333,0.8582687799029363,1.890866972931001,1.590366010969964,1.1630431902482008,0.0995450375388498,1.8741768815046989,0.8935042036127873,1.9096242409018835,0.13649732436797923,1.0850310661551945,1.5251333213644545,1.8524269414640917,0.9364732034783797,0.4933389694535849,0.5870119382317798,1.0419929869606896,1.7925837604026849,0.045042101848070115,0.9795603493173464,1.703432750439227,1.9483373582664814,0.7131724985111281,1.8181367755168774,0.058724157997539383,0.007595621744621361,1.67213402533412,1.9337766329612593,0.7547427743559038,0.34873135220791773,0.0741567817288169,1.9315153107306933,1.6674799425206372,0.006844057545234095,0.796769175099735,0.31661914057706997,0.719182594538816,0.5425468807738141,1.698964004580867,0.01280325652150327,1.4381725761386517,0.28577786815994843,1.0357298692389507,0.5813117169689895,0.4987526950769692,0.020598425931607878,1.3990093000894275,1.5197889647518146,0.0022538726486501792,0.6208552219692601,0.4619110770177831,1.998961042666113,0.38740122892977724,0.09683654075600445,0.000288558384623272,1.5954133967923592,0.42607018688835974,1.9999969752640192,0.4220488444054694,0.6657359753734688,1.1265732425112267,1.560220167409816,1.354508609825239,0.031426876530130765,0.24760486413356408,0.6254116512953198,1.973711172231123,1.7664237440532329,1.3944939041967148,0.02160355419649762,1.7325057504505037,1.1346344602344984,1.982626765537232,0.28234352604929036,0.8440305692955506,1.3061337021872836,1.7024734875636236,1.177231875470208,0.09337587053234953,0.3130361486299773,0.8015880924939874,0.007430606102358905,0.14384851003588583,1.0706761476891733,1.7747407342534467,1.8448105060859614,0.759514618526265,1.9320049980506726,0.16692331423832096,1.0276030843121107,0.06039642969960257,1.8209554852116174,0.7178883948691541,0.18600453423694474,1.9436710113037723,0.9844786852240921,1.8263313019659293,0.06368313513597201,1.2521975376145593,0.16171710545701756,0.21767514942362898,0.941383152393191,1.8498446860098796,1.9939673414995103,1.2102415258996304,1.6781320885195292,0.00862866435431442,0.8108880131408469,1.8717775444623777,0.09741636608529536,1.167894510843102,1.7091885571552563,1.8930907732103113,0.8534010360332063,1.4950341391360715,1.9808232948485571,0.5944306014810372,1.7389260898934,0.023607276596233073,1.3857655080737308,1.5320354322068828,1.971508129850201,1.082343076230682,1.7672893814148907,1.9995136516789942,0.39884502228968477,1.568047255519272,4.6320769925833893e-5,1.5837838411585274,1.3275021487730407,0.04584602096298973,1.3048494518907832,1.6030026349434046,0.0005611878888047706,0.7157576511628726,1.36793498490794,0.027946016919143557,0.4699253859876873,0.6121005498784056,0.0029347930166830904,1.5116673492998118,1.4076835422926035,0.018728316649495147,0.5069778404641079,0.5727219381716071,0.007162721766190372,0.29244482091172685,0.829824694326087,0.011335567495308618,1.6921532916028492,1.1913838169166722,0.087394665163263,0.3235704468033337,1.4848335363442882,0.005781518356143822,1.6603912753999095,1.233524038711253,0.07061601504126802,1.8370189242928316,0.9652348993224777,1.937126966133885,1.6274010755908077,1.275229956773071,0.05556581624302037,1.812649096239055,0.7041042223225186,1.95130223997562,1.9388090221309133,0.970083778355015,1.8343545131151613,1.7867679182708516,1.0514622080878975,0.15395356432323792,1.9230855275594552,0.9270157353691966,0.03075946635716864,1.7594235237292775,1.0944723835285992,1.6886436439323136,1.9056452954200336,0.8250460579464263,0.295881430396739,1.9860171753443259,1.1373068609596402,0.11117159437181967,1.886520760737155,0.8676589242040619,1.8985025998934737,1.9779154163243402,0.6076335687852288,1.7485508391874363,0.026818553348014862,0.9105179159720869,0.23732553043022975,1.9679949481128747,0.6476561383987671,1.7764434567202536,0.037641667573867,0.9535433248821036,1.5798380731360466,1.1393908137757869e-5,0.6883339906767962,0.402729010006863,1.9996531768361319,0.44578603735096467,0.18444062460838662,1.9427750318255526,0.7295914736942186,0.3687043455448389,1.997588175826039,0.48218934437163974,0.5988698679136402,1.9798662183493163,1.4992435687283225,0.3358537531857114,1.9936678785864355,0.519555666171627,0.559748480011554,0.008985862170155623,1.4614216925629668,0.3042383278598517,0.009276269588709973,1.6816895981751503,0.5214458638279622,1.9934235597552414,0.33424498259256774,0.7734492942049392,0.004338552339632096,0.5968977195491458,0.4840332538673504,1.9974363535099569,1.8290538114382149,0.7316658231041204,1.9420546487207226,0.1831960732970359,0.44758022941692177,1.9995941333915266,0.40100282916678975,0.690381394993894,1.9556420282536298,0.20882941016830048,0.9556950737276639,1.9998928864004228,0.07418237370908531,0.6496727898979873,1.6675303631219551,0.23593415162091813,0.3778222050143054,1.8646674631015803,0.47221461983380775,1.1820043903573223,1.9774629664667134,0.012814059751443896,0.8697942521282791,1.8855220878926091,0.11018662217072095,0.5702846735161007,1.9856559429654128,0.294353569920349,1.398947208533365,1.9047298349132042,0.0022493311612542533,1.096616497420441,1.7580203986548968,0.0302315904239131,0.7848615972412255,1.9222549819470363,0.15280722748820086,1.0536132012783277,1.7854365594916404,0.04165463714127737,1.31846656444863,1.5915086785169903,0.00018378504030880372,1.0105101962858152,1.8113919797917015,0.05485999702289712,0.7015286400902532,1.6257223343037093,0.0019400759063605832,1.5239273752749212,1.3945561260906294,0.06982311098217597,1.2356179087228618,1.9644248977566299,0.00555254035071584,0.9243257448210361,1.4338065382353058,0.08651615089365783,1.7024252928397638,1.1772985176288782,0.011014459978123559,1.4486000082921964,1.8800252000349198,0.00742236887874459,1.1510172764539432,1.2195657407668146,0.018315676810435888,1.8447742724243343,1.5098155093932262,0.12496466738598533,1.6384957895825512,1.7503367339539015,0.06037325555453743,1.3699370005848552,0.9940254237245274,0.0006356581790946114,1.604719539765512,1.3027973056288802,0.03837829197416831,1.329536565409561,1.5820336616841404,0.1616801870023582,1.569818643617226,0.768792576514893,0.034385962431102146,1.7686689425196112,1.0801962332899697,0.0012798889321609108,1.533858009185522,1.383777370256238,0.02407480465969203,1.7403756894033224,1.1230979494466538,0.11782969645105135,1.8930603079795691,0.8534680193275985,0.015578654703204742,1.7107054991317456,1.1657707302901466,0.009350270851950837,1.8728307545928184,0.8962540499039723,0.24667259236920946,1.971492078853629,1.2081352137637191,0.08053873139277223,1.4202955701807816,0.9392330252993649,0.004091177267006363,1.9603672994262316,1.2501126111764487,0.41428400362255946,1.9999279181107772,0.9823250140020248,0.19281707624972422,1.6139972898566457,0.7158225733020247,0.05008457506294084,1.9984804275644827,1.0254498743201201,0.6120381381561367,1.9327835313648138,1.3325947377244565,0.34663550479503513,1.776100845033974,0.5070367543835532,0.1449635043632017,1.9852087217303924,0.7994774096709834,0.3146030117279697,1.9900207251515103,1.1114774865248938,0.12340046028357776,1.898263894652129,0.32362032061392787,0.2838452074341604,1.983024246484533,0.5838244462632416,0.49636190352212806,1.996308446933857,0.8846232654473054,0.2544192947150413,1.974199557317256,0.6234153812354031,0.45958241022107704,1.9990832384789698,0.38958914026945,0.7040395406969917,1.9513231114607765,0.663706681388524,0.4238079756616733,1.9999999533044162,0.9706270243162117,0.6631311427685302,1.951134565013043,0.2267674301922823,0.926948201579309,1.999056886520743,0.46009677241901714,0.1746671727346465,1.9743373159117072,0.746089481980239,0.884016169369853,1.996255792026293,0.10373861552368335,0.5832687700471961,1.920997251863973,0.2842719225698489,0.32317026615916644,1.898532322365556,0.5346189457187887,1.1108700759971406,1.9901066715655074,0.026834132555279,0.798878661810839,1.985103803439675,0.1452806123803414,0.5065050723953122,1.7764861277613553,0.34709833130652623,1.332018271936127,1.9330036560369934,0.16845607051694678,1.0248388681984286,1.9985139227290258,0.3803627206609246,0.7152366257494898,1.6144795997791959,0.1931780188329938,0.9817139134458819,1.8278854399722104,0.06465771950715993,1.249520791023114,1.9605374842831838,0.2194004799015158,0.9386229668223993,1.851298770377976,0.080779214846742,1.2075373607789495,1.6801617258859416,0.008994921747696338,1.461361616450783,1.873128870912797,0.09861026017710073,1.16516795634998,1.9809290746986323,0.015686303019277648,0.8528634446876516,1.497434824562201,0.0043322537914314285,1.122491375579031,1.7407863952154845,0.3065698551688617,1.3832129014297223,1.9118800054516452,0.0012491622011950865,1.079586987589867,1.2891084170623228,0.03454504231186084,0.7681979811282662,1.5703208027536637,0.16201355648777804,1.581536547250693,1.7959028228543295,0.0382107714870189,1.3022147425018864,1.0659036127500099,0.0006576340115569401,0.9934142364132422,1.370504770411962,0.060582584134803774,1.749932556931399,1.6389660648046982,0.12466897425547685,1.5092896093063919,1.4102069195151778,0.01819941765154931,1.2189694150853418,1.6715375827231997,0.007496883869640758,1.8797347605999342,1.4491461732979223,0.010924179764877806,1.6901548867232699,1.1940971361583947,0.08626763979267615,1.4332557629135294,1.4872501132487554,0.005488406984598959,1.1340959037969671,1.2362118562029336,0.0695989063331266,1.83550269850892,0.9679985249381211,0.20135930308320593,1.625245453911722,1.2778872737609368,0.054660515797482545,1.3540003705103338,1.0111213598998126,0.00017225434137957407,1.9378530050244416,0.7435468067740647,0.04148025033102931,1.7850581157421195,1.5958499551424272,0.15248266431293023,1.5556869034889442,0.7854585246542124,0.030082622350229293,1.9919385487832288,1.0972248193257539,0.002290488867961682,1.904469303670373,1.3995075878529488,0.29392062780152495,1.7287761014691778,0.5708366450312625,0.10990788307158894,1.885237960944221,0.8704002726418958,0.012716712506628647,1.6985752244736378,1.182605347274228,0.4716955792871834,1.8643602688617333,0.3783008145018063,0.2355399862565707,1.96729727501718,0.6502453213645304,0.07395153129749044,1.841875055372499,0.9563056811745726,0.20845575116049198,1.9554618328084838,0.6909626183334405,0.4005135224834767,1.999576534813165,0.4480898076290417,0.18284361556994977,1.9418494401719393,0.7322546573681425,0.044880968484770745,1.997392430264154,0.48455690885656033,0.5963384527542193,1.9804145516302478,0.2743372678725229,0.3337890480946113,1.9933533935296455,0.5219826217102981,0.13622334845867645,1.987994185391481,0.8162548588470122,0.8129370316750786,1.9107974592946433,0.5602973425345311,0.5190197186761831,1.8906199556284449,0.33631081149625575,0.27201829715934334,1.927750760402645,0.5994298143127846,1.039162438828511,1.9976304132070792,0.9016213281913543,0.7290030946864232,1.9701989661127826,0.18479446173894887,0.4452773942826429,1.8197624648335342,0.40321932757816725,0.2156605764734847,1.9564528004248802,0.6798555138250952,0.9529327941318888,1.9998485924874625,0.07523106376764177,1.7225344335474628,1.9457169184873622,0.23772098594297675,0.37565980301503465,1.8660532229496982,0.4745653066065745,1.1792847148771493,1.9780429749694126,0.013259082652635423,0.8670531255515962,1.9946322295879462,0.11145183648480628,0.5677894714547653,1.7310839174719037,0.29631556381577084,1.3964100999253481,1.905904296833234,0.0020677846755923213,0.12081708958335646,1.992360746666355,0.030910072960506296,0.7821620057907939,1.558490814188902,0.1542795583442319,1.5931350178163601,1.8758910404352505,0.0422331080047631,1.3158441534895713,1.9390193671294633,0.6284185826092181,1.0077451446177002,1.3571560781508394,0.9329395415100289,1.759335407061359,1.6278768970501507,0.1316880231684241,0.4194070476450402,1.8373532003010904,0.021021817893494887,0.19655577227611143,1.9651522011700024,0.005847332213796186,1.8864580910814865,1.9988080995210091,0.26582890866654585,1.7004544811057176,1.692594295762642,0.2584352794352136,1.4461269757444097,0.9106528026006683,0.5015597195086423,1.148283248213588,1.2222625892196912,0.4377524673087798,0.8359756412849502,1.5121923861982833,0.21006555074900424,0.5396673368489402,1.7521617932359919,0.059430605627630584,1.9996496011595815,1.9187636581131713,0.0005409011141735975,1.9427298671241164,1.9957472626262127,0.039140670587098025,1.7938541551405431,0.48230520806445987,0.1714648062735037,1.567544134846775,0.7714837010927222,0.38460611627514163,1.2858745913549603,1.0829521845794439,0.5596268857229297,0.9763202013813486,1.3863293266098853,0.3041410592192363,1.7385141340200454,1.6520230427965914,0.22278380968784672,1.993439056909828,1.854116974319672,0.015096231771080104,1.9802672336821994,1.1684970028245938,0.009731309221439388,1.8714779538880166,0.3671401702037518,0.10095940771368628,1.6776827669886987,1.7149178882854306,0.07945503766575934,1.4177848885865332,0.9419933117536177,0.6902526236152879,1.9595928726309837,1.2527889332984365,0.025402363910694614,1.8422777555210526,1.5389269573844742,0.19118788189687397,1.6118123758954848,0.7184748209555165,0.049224073218551045,1.9983242290326642,0.09139609772843094,1.0731277602094025e-6,1.931783297567657,1.335201209191236,0.3445446531036258,1.774354141011266,0.5094444705203873,0.14353284803180744,1.9856787899126351,0.802187177467587,0.026062762901378767,1.9896272682117355,1.1142249891748959,0.5316331462818416,1.8970452912594973,0.325659596852399,0.2819180225337373,1.9223073279568224,1.6755252572604593,0.10224621955816593,1.9965420153400353,0.8873704044533393,0.7428252196125098,1.9735717675847004,0.1765783274814947,0.014593265451119719,1.8114711309794767,0.3917817189007521,0.22463081114212358,1.6542417803081633,0.6663120806376215,0.9672522878687356,1.3890302013493816,0.0698728371078795,0.6605288859126505,1.6588741661516906,1.2830656256143536,0.38691825503728283,1.8587997093068178,1.565129289824327,0.17310898761310323,1.9749560096652035,0.0110345142008893,0.03995651738205619,1.472369536534769,0.10496846490127976,0.00044883384494542877,1.9199165083648047,0.28620579165304527,1.4095258856971051,1.7540893826590729,0.5370682005956124,1.108121535404875,1.2615553365563756,0.8330860117610557,0.7961707689311607,1.5465461255737443,1.1453849863403134,0.5041019611510054,1.7782255841415955,0.046452145896976216,0.26040415625847224,1.694704824114468,2.892962699507784e-5,0.08884818273177908,1.9986607990770864,0.05114512618635214,1.7685823086828658,1.965914811975591,0.19481474753380468,1.5337434889526347,1.8389513355940141,0.41702393774608393,1.2468421365588305,1.123232347406319,0.6960979158412727,0.9358632505494724,1.4233568412018287,0.08187149173873765,0.6311404064072587,1.9400228644697188,0.09828721482535419,0.3623969513108539,1.8744735212908532,0.008895280968548192,1.162440138958258,1.9814627785026389,0.0161779162176805,1.8509067911854273,1.9927179630344132,0.11942475605612013,0.5524364963169113,1.7426410363753306,0.30856487300136515,1.380657364683245,0.9824604220990844,0.001114811798384352,1.0768302904151847,1.994324781545075,0.03526925215630905,0.7655090179281607,1.5725899892309259,0.16352568553287328,1.5792848068284888,1.7975738779287513,0.037457371562582,1.9951626858771654,1.9447606282431935,0.0007617212537046614,0.9906491573405559,1.3730717229817624,0.06153400564133449,1.74810049423139,1.6410906828759977,0.12333529705668378,1.5069079752093653,1.8465762249236959,0.017678025645929574,1.216270519503335,1.154354053303176,0.00783863479857183,1.8784166591304072,1.4516150150702711,0.25432904952802016,0.602116208860634,1.7048244390479423,0.08514760095473106,1.4307619441821133,0.9276928554562024,0.005202899795645921,1.9635268360682434,1.9870002647468583,0.4236972928058137,1.8339800843479195,1.526800247844756,0.13475069430779052,1.6230850515135082,0.7047528027762504,0.33160680860317004,1.9990509969636525,1.0138863105895037,0.6227238229257614,1.0454631686171607,1.3216653166362602,0.3554348722538423,0.7350788478186667,1.5980683688761126,0.15101824454540247,1.9831609606533136,1.8161344959185026,0.841166130446541,1.991584355388041,1.9545930404215652,0.0024813503757102895,1.90328639621477,0.3151468748681525,0.07284970450565265,1.7268798633898101,0.5733358564303777,0.233654370351426,1.4795718443387886,0.8731426120183952,0.7567001618088567,1.185485315896651,1.18532332071705,0.46934982245484824,1.8030131412427197,1.4794271785728283,0.10857625871919452,1.9476950174635919,1.7267666380595852,0.07291148594843488,1.9999366038766722,0.0647056353132498,0.0024929700555740286,1.9546421393994884,0.21948513450934004,0.02937351898228202,1.816229747316223,1.55324852662922,1.2074048784698435,1.5982004816594388,0.734919888262519,0.8955114793588546,1.9971890584923697,1.0452984851017335,0.0001221645698779028,1.7112305463909863,1.3512585664760621,0.3317294369508903,1.7634238434962648,0.5244132322404766,0.1348333539483697,1.9884176013856771,0.0242379204428258,0.02232755898080807,1.9870267463399793,1.131191774147274,0.5165972511707059,1.8893590967576737,0.3383817150655474,0.27012529321776446,1.9287791738903606,0.6019649718952524,0.0948469452079278,1.99781684487465,0.9043734548511138,0.7263424383511072,1.9695252309987366,0.18639908336286404,0.44297880063937467,1.8213429505346515,0.40544038906274793,0.21394825548287233,1.9572562594166911,0.6824763678697521,0.9501708744189244,1.9997966535844238,0.07628682474613091,0.6444983099755508,1.6716379255254914,0.23951364876301318,0.37350217481316406,1.8674323608269034,0.4769200109306463,1.1765636685595546,1.978615505211007,0.013711650320684221,0.86431301550636,1.4873683739218162,1.076665923293779,0.5652975741389958,1.732967759612579,0.29828293818636986,1.3938699603071325,1.9070718320751516,0.0018938685271058242,0.11950289307462025,1.2780173662515173,0.031595965301876916,0.7794640799618543,1.9814943597810217,0.15575835570372554,1.5909065081935896,1.874553475360625,0.041441658292713957,1.313219327539445,1.0543587409135307,0.6309871826793618,1.004980033729065,1.3597374997489116,0.9356987374809316,0.6962549762999215,1.630026658957061,0.13031977029766406,0.4171578872583912,0.827902649746794,0.020461563895262547,0.19491252036500417,1.9658721248870314,0.006149725515072979,1.8851749595523224,1.9986693143516052,0.08878026385521864,1.6984783135932076,1.934054067178189,0.26029321155237994,1.4436505320438457,0.9134072492385242,0.5039588124099402,1.1455480861776064,1.2249577382199686,0.019384294384497736,0.8332485547307791,1.9905135518540638,0.2083729960960341,0.5372143318932663,1.7539811013778699,0.05849514743329409,1.9995725847971557,1.9198518545087895,0.00045378606120527465,1.9418039225977666,1.9959982021673612,0.039910396072439513,0.7489245654411514,0.48467296599636933,0.17301629155321696,1.565265286550007,0.7741765729399392,0.0329629603125724,1.2832237327087859,1.9502257613627505,0.5571459637816002,0.973555903061962,1.3888783290324165,0.06757540530149675,1.7366469318485749,1.6541170952243165,0.11523879634082634,1.993751490722535,1.8555518181992332,0.014621339558699264,1.1995481341897434,1.1712219870060598,0.010119919331662341,1.870118489734008,1.4668017258521415,0.24304712985237187,1.6756468005331613,1.716848581201548,0.0783783825615505,1.4152710125472936,0.9447540417355801,0.0036066673741071975,1.95881110864684,1.2554633225588878,0.409810556006343,0.8023487759755797,1.5412541400185193,0.1895648718409909,1.6096227839264947,0.7211292211921263,0.048370841147386434,1.9981603971662754,1.931723440667062,0.606946922635288,1.9307759392177244,1.3378051176600396,0.3424588131206505,1.7726015161623754,0.5118559375172855,0.1421087403748108,1.9861413214492036,0.8048984577702611,0.8243109938492579,1.2529484290189494,1.1169716184437526,0.5291918200294554,1.8958198289260184,0.32770402919723474,0.2799963281942194,1.923372419619331,1.6775615321442578,1.050716554673437,1.9967679640387128,0.8901184046419033,0.009754265100269222,1.9729365337785523,0.1781505124793501,0.015067708582921946,1.8130839699175856,0.3939789480589033,1.2745120876296683,1.6521480256092285,0.668920031313857,0.9644887319449922,1.3864813756497096,0.9761553945754875,0.6579292247030701,1.6609517507774159,1.2857166139355216,1.4841803951973573,1.8602130514427317,1.5674083962842809,0.17155712502242437,1.975567248760988,0.011447943392499771,0.03918635407732285,1.9957624365449136,0.10620515782224571,0.0005354932759774611,1.9188287310480838,0.2881451185122307,1.407001664888323,1.752270417827627,0.5395209951173784,1.1053721680993736,1.9908675251113712,0.8358130228865143,0.018878102287658405,1.5488596647968116,1.1481202153102632,0.5017026416163787,1.7799590900940268,0.3512972064194321,0.25854588654962063,1.9349795627768445,5.3785734609457236e-5,0.08771222262876033,1.9988000395171124,0.9214044543031906,1.7668103539946842,1.9651953283946164,0.19645763280003192,1.531403097157819,1.8309747137467913,0.419272832927708,0.20349544150108023,1.1259759639884461,0.6987334586766947,0.9331040246756087,1.9993058084347175,0.0829707887769725,0.6285716375730155,1.684205383288448,0.09709518326660516,0.3602692029687249,1.8758114853151513,0.49156655384653003,1.159711079525231,1.9819889778972177,0.01667705186510804,0.8473955782708392,1.5022247667070339,0.12073855147416057,0.549965453335455,1.7444899991920777,0.3105651776490178,1.3780989173743103,1.9141360134517158,0.0009880990193205097,1.0740730057847494,1.2943981389854842,0.8668897373806498,0.7628218476807532,1.5748547976005227,0.1650442103841765,1.577028637109055,1.7992388346354513,0.036711331381309775,0.23782769739750287,1.0714208893028863,0.0008734488193817835,0.9878841497657943,1.9998457103007925,0.06249260279752822,1.7462627114444609,1.9565009059846683,0.1220083229657476,1.504522465219058,0.8447681038384426,0.4451402380020466,1.2135699702849794,1.1570854885796626,0.008187971939905503,0.9017853831866689,1.4540804037274828,0.2524894316425449,0.5995808692915334,0.6261040230008188,0.0840345572134098,1.4282648317812219,1.8905449767299976,0.004924998972314687,1.962783162063729,1.9874409047710961,0.02287728001541922,1.8324510934519629,0.4266817642066105,0.1361402947319995,1.6209198849149216,0.7073958272076476,0.33366611555889625,1.3488227632399428,1.0166511551024124,0.6201644444953052,1.0427006897278672,0.2567642022960639,0.353323231810997,0.7324134955169398,1.6002822096906772,0.14956031621782462,1.9836625127398408,1.817729259085271,0.028751187849656024,1.9912225801923529,1.9554131691774495,0.0026798390584498177,1.9020965820979092,0.31716441611324175,0.07388932746667753,1.7249780674796011,0.5758383301665793,0.10740088740915765,1.477143572058237,1.8642773568044042,0.7540190178136001,1.1827674263504369,1.1880398771503777,0.46700812305218087,1.8615660082228986,1.4818520031074838,0.2319864470397649,1.9485739720261712,1.7286632078917274,0.0718785292551466,1.3996587084205379,0.9618313749152261,0.0023016537905690138,1.9538151466556348,0.22121672554878857,0.39609631562816705,1.8146291155541943,1.5555498382375883,1.2046990492997776,1.5959823400782192,0.7375871459985986,0.0432573742174559,1.9969780620656974,1.0480606376892145,0.5912849011348613,1.7131716238933938,1.3538461873790075,0.3296749355026398,1.7616349112424394,1.6251167892153848,1.1196121102143828,1.9888334597928419,0.8216938165512129,0.0217502397026047,1.2363720412571007,0.14074541403212537,0.514178479834075,1.8880914377158344,1.4331071794769874,1.3403067672588742,1.929800485795274,0.60450317291236,0.09367497359899013,1.4492934567899751,0.04755718153493971,0.7236838744419438,1.9688440827515148,1.2188085594633065,1.5434882049627368,1.8229171561262054,0.40766599663796754,0.21224194476004754,1.639092867079015,0.0033845478856496802,0.31639994657176473,1.9997370700884394,0.9932493867243465,0.0006636252825095168,1.673684011404998,0.2413121263740624,0.37134933690623784,1.7960026182809297,0.0105007709103766,0.16948714509818397,1.9791805528138458,0.45935453079840727,0.03458801126900546,1.2892662266492243,0.11400263729867077,0.5628090006222073,1.9119476582549186,0.06853962816895942,1.3913268091010014,1.9082324317118098,1.954129109846042,0.11819542897686819,1.280672453886266,0.03228926220359052,0.7767678403831463,0.46032478089276574,1.1650053649380983,0.009244692389634102,1.7905439124773392,0.3644022960650438,1.9962323385475726,1.680282564387389,0.00037721943528656876,1.0022148847623562,0.33045218136283516,0.9384584251087887,1.755725227336743,1.6321716035870422,0.20675103595088684,1.9901446411747852,1.8279778945113154,0.019908799592651683,0.14021033962354545,1.9665846634030741,0.5062695119551861,0.05032738307051743,1.4412658248403702,1.331762766561716,0.61275352364088,1.9330629686225018,0.08987884826714954,1.4411706961257587,1.8839346337799656,0.5063616981154548,1.9665574838896887,1.2276511671601391,1.8223218909187597,0.8305227431827982,0.4149991534620059,0.20668649434010866,1.632089464482616,0.004171270752745593,0.3230489202743906,0.2843870624263246,1.719427634042689,0.0003743136862841556,1.680360256799145,1.9962415261590847,0.3643204617419523,1.7904789901107692,1.174872147071168,0.17457410007256224,1.9809816843429249,0.7768711714664477,0.032262547709456024,1.2805707084921014,1.9510836492172599,0.6629759294110121,0.06892104953661449,1.391424358033782,1.3829627064953671,0.6638619378065092,0.5629043405016171,0.11395348886837187,1.4896886197167227,1.8569801204031742,0.45944371045552856,1.9791590292603574,1.173945661998913,0.010516098211249325,0.8847870194457663,0.37143177910213054,1.0560743761613418,1.6736056679823517,0.0006674921661536937,0.2837301591715792,1.999739495175506,1.7564104233281053,0.0033758393720351165,1.111641310825948,1.989997480261611,0.40758059266921287,0.8395745525853742,1.543577184143433,0.1448780283364416,1.968870331676794,1.884374219986539,0.04752488537338562,1.3327502014322368,0.09371977434830836,0.6044058131613869,0.09031312635301492,1.3404064432209988,0.05003307012782554,0.7159806338949604,0.5142711369358148,1.9641913445352106,1.5367347565154295,1.8274499048931243,0.8215895114463694,1.9888176568895057,1.1197173533303306,0.004076294023854787,1.761703598767773,0.32975360201640347,1.001273980146334,1.7130973116181074,0.00016726384984233622,0.24656418751287112,1.9969862913022522,0.357343898276127,0.009372775237637798,1.1659333005327246,1.9807779410462403,0.4526212735706404,1.8527617142562463,1.4967614480470746,1.2718521014522692,0.12256077933978005,1.9086257668912685,0.06564994076694586,1.3997558769866973,1.9115611947036584,0.6553321790171831,1.9485404102792734,0.10978446379822815,0.03434311699951498,0.7689529662227437,0.4670978188901004,0.1700115968283803,1.5821677067017088,0.011868931199205845,1.8015241327633533,0.24192541943555146,1.0651292273975905,0.0006297947603113307,1.7250510765588776,0.2900898883190254,0.3170869757816819,0.9565762822730104,0.0026720892682569053,0.21166270972431644,1.9912365888449608,0.4002967536811771,0.01834709715378713,1.551169007357781,0.1496160872280774,0.49930713213698386,1.8801034813840654,1.4484526673736107,1.3241820139311182,1.9359567964222992,0.6202625068227025,1.926383446958484,0.08251159243964501,1.8876585413441784,0.7072944634673958,1.9644684647875417,1.2354576934869483,1.529058642176401,1.8325098258940478,0.8126709615663127,0.2018265783788944,1.6258509189788284,0.00493551227931599,0.9303453102982572,1.999198973076115,0.2718326244276519,1.7067083065880726,1.0490004350663693,0.2525598495407553,0.3581463461027983,1.7855385835113633,0.00817444002719081,1.1569807989176906,0.18495136505157228,0.7847006070882777,0.03027183228931274,1.504613986801132,0.12205906985515846,0.5474978513846409,0.6801121281378151,0.06245572205840577,0.07152866197952523,1.9152535373222985,0.5701358226430295,1.945628857175865,1.297039633536792,0.036739795672935505,1.8661886072188945,0.17059599821030247,1.1818422879579584,1.5747680553433987,1.8008976802439238,0.3776931537389179,1.994604166507801,1.0741787189827894,0.0009928158543025534,0.9851192348306139,1.9998904600016933,0.3104883971663861,0.002749117916782229,1.6453251971886624,1.0935942343524623,0.4011348438169806,1.818270485436468,0.01665777850079908,1.2108677880790735,1.970825766606096,0.49147527580872474,1.8757603168103891,1.4565423204188315,1.935587650685119,0.5970485913862731,0.6286700610741385,0.08292851707920956,1.4257644448041449,0.055856116434541914,0.5213011195166728,0.13661464200400464,1.2442643898768482,0.023469100402107035,1.837501237527662,1.9875891202752465,0.19639453819870967,1.6187499706711463,0.9313897164134795,0.335730517401962,1.9987948423941564,1.0194158722981286,5.26919208586607e-5,1.6927896477688704,1.997576719700251,0.3512165359542758,0.008308570591401998,1.6024914606587675,1.1480153789503693,0.4459232645674044,0.7935681549885729,0.02809660753636689,1.2641210021987024,1.956225992703068,0.5394269003354233,1.9008998704172861,1.4070984903181096,0.074936031606749,0.6478104245953855,0.5783440471055838,1.2960398121935552,1.4747116514674297,0.03921574349742152,0.7513397546252801,1.9755439539096287,0.16002887625069362,0.013133423880725914,0.8678223293448017,1.9947122308193228,0.23021847916750415,1.0832221062110818,1.7305542062573127,0.9760494200206571,1.9999835839940645,1.7451178500765048,0.0021179660745415108,1.6522283833206104,0.2229542712802286,0.39389463007086,1.8130222550175765,1.5578469020298038,0.1538656909787267,0.4923769942269439,0.7402564101821347,1.8713450836756547,1.316580385735095,0.10107804008806265,0.5887628033151266,1.9233317186027383,1.3564311027217189,0.05551164168307676,1.8958669342841112,0.5292853439083225,0.1320732210813237,1.5222320854620648,0.025463061884938076,0.42809043398895874,1.9861237289139007,0.1910286287716303,0.005763830568084827,1.7726688133593473,1.9988456775965264,0.26635604195569196,1.7010081366878875,1.69203429920318,1.0308720470283483,0.26473520143346174,0.9098798806459574,0.007182431017285773,1.6097068096442904,1.983970385203925,0.43839440809485075,1.8437081810911917,0.02600136320459101,1.2553608336681101,0.5403564134885311,0.6877253393988926,0.0596944375450007,1.3680882690494034,0.07841952711888578,1.9224119692272112,1.9429884411806195,1.3046924413235415,0.0389259648420488,1.8701707285389206,0.4816414001844559,0.16059742288025858,1.1996520059305682,0.014639406058094884,0.3839946015652266,1.9937396533786464,0.22445979041981423,0.0013824701929400218,1.7367186163932606,0.30223376814073444,0.30469861307814294,1.739037155814978,1.6514344439935327,1.0856018863557937,1.9933500062358966,0.8554359522852852,1.8077071189135303,0.013522038809113845,1.9727186856155248,0.48458212343113216,1.8718582945944273,1.4636670846775126,1.30796251096353,1.9418395521772198,0.5805108570069029,0.0797584694560991,1.418489842290414,0.058530876289395795,0.6909906024091651,1.9598109587614885,0.12760322407779034,1.2618167561571154,0.805821368731992,0.4355554124966169,0.19164449651376136,1.145652961361773,0.006777307125536369,0.9133016430726877,0.3494009524239573,1.0274382933989212,2.5111812516076526e-6,1.6985541700336613,1.0218036691740302,0.34513095177269293,0.9189181077511702,0.006137992945528525,0.18901402116735655,1.9855476244702754,0.8014265193314799,1.8388039020521392,1.5192994462755056,0.13037210081424289,1.961377528484946,0.5233993645196877,1.4144148887122214,1.3596385895460192,1.9220071390636957,0.5856339394052307,1.93993043716417,1.3133199965315996,1.4586658951114808,0.7435752471019843,1.9737487103190294,0.155701545810066,1.5606946411082117,1.8110173672673313,0.8498611450233019,1.9926852985549228,1.6548285006305166,0.0019003950694642668,0.9680279341442944,1.999997367143379,0.29820741838171616,1.7328956442917354,0.001102062381918234,0.22803030169754757,0.3875315363627607,0.8644180407386274,0.013694161759944201,1.1941260007557921,0.16367414815989034,0.4768296676934076,0.040173985491065434,1.4716853810176544,0.10462261271958273,1.9448493703691487,0.6445973921035779,0.07624622109671964,1.3733230121943403,0.6919864455958343,0.5363804516611301,1.957225593077852,1.2608062207150135,0.02729376226248803,1.8467203628765576,0.44306684059606116,0.186337454211844,1.6052296329684428,1.7777380005077772,0.9042679363502897,0.26092670218007796,1.0365051805432957,1.6879546537343162,1.0228503190648348,1.9986203485313627,0.33830223203612286,1.7690785576345291,1.6160476610244658,1.1310866847805823,1.987043760496634,0.8103254729590148,1.5184044798011465,1.2475941004757145,0.13488651858460998,0.524319985770635,1.8933483649691585,0.053674863082874946,0.08156423191152395,0.6318618468772512,0.5939069923469612,0.09862300152917669,1.321921767834099,1.8740968155782214,0.7348176770986743,1.9716437534307265,1.5615611996363827,0.016039183974790316,1.8162909846288025,0.39838729071896783,0.21941887133085225,1.1002460091854014,1.7421210982799775,0.9589624557991944,0.2989536026323881,0.9816844941108749,1.7266938209075005,1.077604026061396,0.233828405476191,0.38038581568873564,1.8029499619535074,1.5719535763456576,1.1852191511053656,1.9767673443419587,0.7568029826786264,0.0376680728697929,1.3003180421485663,0.10869903641828438,0.6436190254760112,1.916632108284928,0.072809990803402,1.4019439066105108,1.9033318712492209,0.5444371280510985,0.12370892141837986,1.5075767800863749,1.8461629023883164,0.788056524102695,0.45062410015262155,1.1535872546976995,0.007741955469823036,1.7834081977424914,1.9978785424872896,0.254846369100306,1.0455690635827999,0.00012643491085106984,1.0137803159039966,1.9990556084728428,0.9269188559654178,0.005282260535876326,1.1321244897764422,0.19976182273478438,1.988458670162132,1.8344080548307566,0.022270678137751077,1.2387949308148305,1.963555198789809,0.7040114347636479,0.05401376022192206,1.4308576074722614,0.08519040961699642,0.6234426395124273,1.9371608620501677,0.09473184044170235,0.04378970864663556,1.8784673134325933,0.7260819296283825,0.15142858361585976,1.2163740143511432,1.81568579882459,0.8419323791889359,1.9916845262914964,1.0992043171524553,1.6410093242638726,0.0031826039658563454,0.31458158617096443,0.292513468175576,0.9907551575869686,1.6643095857155021,1.0685567584913727,1.9951730942708727,0.3732910846540186,1.797509929079589,1.1862478458782888,0.16810040101313062,0.4700077574385385,1.8633582871921468,0.03524135300927611,1.4876048684492424,1.9474470336895426,0.6521094971917201,0.07320266262399089,1.3807553869220548,0.06443129468579267,0.6747770564451356,0.5525312938774143,0.11937452464107534,0.029187099652064563,1.8509624725109837,0.7791998987109666,0.1816986751119497,1.162544734960291,0.008909394117462166,0.896283315433338,1.997246905125143,1.0445232154313633,1.6821086503480447,1.7106847991596315,0.2757073142763804,1.999408653567706,0.3248087084505745,1.6223488422727401,1.123127149870685,1.9882995311509077,0.8182104692355179,1.8293740282674116,1.5338331285587175,1.2299761101070543,0.517276751730133,1.8897136474799103,0.05111166446042725,1.3436344873883823,1.9284912630407658,0.6150544200179204,1.9339573008925908,1.4524543035925674,0.046484084316568475,0.7270889492953772,0.5041940164901111,0.14666397842294043,1.5464573509853505,0.019437402552094585,0.40481658177807933,0.21442821743774,1.108226918191944,0.0030996918198993306,0.9509459780285999,0.32121514632239645,0.28613155459876705,0.0007988813581366605,1.6710627617431717,0.23900994493916738,1.9960223731131184,0.881375366059642,0.011018815555151829,1.5867411672766536,0.47089583077720054,0.7645944498445965,1.8587453969904102,1.4866905807295527,0.11236616653433174,1.9503101156759095,0.6606285977085539,0.069833913374169,1.3945831630464003,1.9067448594823238,0.6662121534990282,0.11987104715708008,1.2772718249446167,1.4918618761330829,1.8556920147507574,1.9816426713605138,0.17651818179331202,1.5915324030037525,1.7883702978201317,0.8872650747618476,1.9965332017592137,0.24287016006710838,1.709947896943611,1.0057560752562746,0.28199180153270575,0.3255813244894471,1.7580395897385395,0.0035837203238078263,1.114119677516188,0.41778867184099044,0.8271382276666915,0.02061804502992237,1.5414818737179428,0.1435875726982907,0.5093520996160817,0.721389344287704,1.3446174565690343,0.08846086616542614,1.9318217736746464,0.6095886275975312,0.09135182897441396,1.3380600413416222,0.049256927255079686,0.7183731051970108,1.9674595677468263,1.224201509205142,1.5388376609242573,0.8340137920530112,0.41213078195639574,1.989186555919884,1.634829570989569,1.7534710883656057,0.9418874857426315,1.9995949711984182,0.998779671235902,1.7148437648001882,1.6777607142962325,0.2449264709191421,0.8803359124056941,1.792642988319792,0.009716562233776038,1.1683925126889172,1.9802881828787537,0.45471042447960774,0.03316086226201953,1.2839679237160992,0.11658053592774642,0.557841901072016,0.6691756259678967,1.3881632430656126,1.3862315497291098,1.9105327887259818,1.9524587701517317,0.11560073795101733,1.2859761706818147,0.0336980484272692,0.7713805024267588,0.46498885181423844,1.1704573431723047,1.584193938705083,0.8883053733089821,0.3686815260588663,1.995737491121981,1.6762187228600478,0.0005443928377285578,0.9966845571657968,1.9996524015188823,0.9439791909278512,1.752091934109285,1.636446975450923,0.21013055642541256,0.4104372136990856,1.8248640536504588,0.018825756923065096,0.1430475300629609,1.9679875630960102,0.5014678241752917,1.8812849953963418,1.4462218443448138,0.09222866623050874,0.6076606336566099,1.9310593761317745,1.3370745827066128,1.4362009235075757,0.05210800927781689,0.5111787744189973,0.14250775883906142,1.2330327824960465,1.8254561855306162,0.8250750284633301,0.41949335939938315,0.20333170105397824,1.6277943886220705,0.9429326590712678,0.32712973347627416,0.28053510246246416,1.7155754611825897,0.00023829934277208586,1.6844028921830025,1.9967053201105358,0.8893470843241592,1.787079648650563,1.5932203592898557,0.177708639136955,0.4555882938524285,0.7822654661311004,0.030883926192771027,1.2752582445052654,1.9527776020439958,0.5497235904703845,0.06691773360169417,1.3965074179266452,1.3778481524276744,0.6586585643565306,0.5678850661468018,1.2849728256595172,1.4848592707844244,1.8598170561502578,0.46410466772100845,1.9780208777172776,0.16636091518368845,0.01133115010369723,0.8792953013773612,0.37574261246574414,1.0615951245314248,1.6695079670615018,1.7226077143290552,0.9876133119116076,1.9998504314515961,1.7527814970582558,0.002937046081357253,1.1061438686225806,1.9907625845929307,0.40313427218992437,0.8450356843851625,1.5482107858482899,0.14775816495658067,0.5023756341237254,0.7291051343599347,0.04585482853440137,1.327529950158734,0.09607116912527991,0.5993326879349749,0.08803032952669343,1.3456012660788064,1.4280200541917405,0.7106824160119369,0.519112659141483,0.13787581808872307,1.5320603461498754,1.8305427375206453,0.41864122469851384,1.9879778030414266,1.1252060559864714,0.004590355583585559,1.7652751784530896,0.9237855929069249,1.0068042634673966,1.709209301508409,1.6836392103016435,0.2502120050038511,1.9974000749047545,0.8983673621546604,1.7814515381797484,1.160477122516017,1.981842056193166,0.4480014129266605,1.8498601932058036,1.5015535339402502,1.266525913588,1.9554931110233267,1.906302353008662,0.06369346805577625,1.3788172460560777,0.07399154321058321,0.6501460136259181,1.9467746993697301,0.10727880341038187,0.03579477226733496,0.7635758279996374,0.4717855861879313,0.1669395908510205,1.5776622841071501,0.012733569724395988,0.870295162544758,0.23833032338899507,1.0706467969766187,0.0008413209462854176,1.7288486843999613,0.2939956972539498,0.31305753129167035,0.9621020371238761,1.107184806948171,0.21507724968938569,1.9919519761238975,0.8440015051978609,0.017307608478237424,1.5557750318953516,0.15253893301511579,0.49452761658029554,1.8774643327487879,1.4533888345704122,1.3189454149223128,0.6002921118249741,0.6253843695391943,1.924286668431125,1.4289659853340186,1.8901916859343975,0.7020108452241496,1.9629926197823027,1.2408289132913697,1.5243576143888853,1.8355609420201096,0.4260460914757902,1.1241673150448859,1.6215280254572297,0.005499503479795553,0.9248295004031689,1.998962383165229,0.26805329071766815,1.7027847791830923,1.0434760216895183,0.2562452239445404,0.3539153716887361,0.907396003595416,1.5996613511257198,1.1515166576927633,0.18816804781531937,1.8504114580159512,0.02893623259994893,1.5093808336911811,0.124720235067184,0.5425730460190803,0.685356739497036,0.060546253574140674,1.3704063078057998,0.6511269557532544,0.5751356751039135,1.9438156766568433,1.477825443125476,0.03823980005267047,1.868938950999338,1.976316211509726,1.1872776115730677,1.5702337248459903,1.8041969874778965,0.3820316476386709,0.23248368849522305,1.0796926557158206,0.0012544646226781975,0.29325465408324913,1.9999570231891788,0.30649348005665533,1.7407151832997778,1.6495399745318045,1.0880867714895361,0.3967150559113317,1.815078967003863,0.015667606417885782,1.2054586073620759,0.15738944081690942,0.7368383685939265,1.8730771897704237,1.4614556626339157,1.93752606468933,0.5919932979923997,0.6338106353095072,0.08073748140634163,1.42075392361964,0.057692976047750144,0.5261639343831078,1.960507993582623,1.5252487695716646,0.02467513669190402,1.840510386068099,1.9867054297448714,0.1931153962831217,1.6143959656501436,1.7704159734883391,0.3398745425723908,1.9985081401512559,1.0249448401813743,1.1211856985382518e-5,1.0344113785868958,1.9979462359266897,0.34701804239370715,0.007612320096640146,1.6068961255217107,1.1425437241754084,0.4413279470922413,0.7989825017022483,0.026809745808834662,1.2587830395876587,1.9578296992595372,0.6843631738038214,1.8984857910183583,0.057476349149133577,0.07705065135693134,0.6426398371428946,0.5833651339310216,1.3013176996667937,1.4698369397620972,0.040763973549866495,0.7459869525990812,1.9743134495075685,1.5710934311876346,0.014041867270428443,0.8623425660420694,1.994129049105803,0.2267002144858815,1.08873195634213,1.734319430796113,0.299701481836234,1.9999999800809465,0.9701220515214853,0.0017734818490929838,1.0891295643908123,0.22644717363152833,0.3895051788688785,0.01585274009963944,1.5624282159436347,1.1965722536508703,0.48761995866837016,0.7456008762380375,1.868618199032402,1.3113296847779907,1.940643576480214,0.6328366433143373,1.9211939424967701,1.3615927376886996,0.0573430392196701,1.8983104741112975,0.6847419821102508,0.12933963334913023,1.51750783445714,0.02671800908379096,0.4326357830744828,1.9851905513545005,1.1421485994352307,1.6072133456243376,1.7761676882527389,1.998564757485426,0.2626092288511612,1.6970534599336569,1.6960158495981337,1.0253439036837324,0.2684947767604441,0.9153890627225281,0.006535977997049747,1.1435798662570829,0.19287965558214315,0.4338271919948533,1.840726598258968,0.024763345338040144,1.2500099741203663,0.5354519573854795,0.6929838617025663,1.8944664396362807,1.3629406110243967,0.08058041559964457,0.6341821266162562,1.9411333935743873,1.3099551274594998,0.04046863579636406,1.8728824824859345,0.4863786431937531,0.1576044809481867,1.2050679176762717,1.5552364435163044,0.3883604766256159,1.9931066073797443,1.0876891264931599,0.0016884392873367515,1.740446940979412,0.30620593894915504,1.999960644411337,1.7353002816474632,1.6556203534701464,1.0800905694424565,1.9939715403132183,0.8609103768723254,1.8044341869365796,1.5699057520538793,1.9739867745942346,0.4798508694589526,1.8691364484498079,0.038349211906243186,1.302696275498163,1.9436836803003041,0.5754970782465709,0.07760825130939664,1.4134606987743137,0.06040953580091524,0.6857356794263989,1.9582442151053006,0.1249133597055383,1.5097243122965371,0.8003992937095932,0.4401291522083184,0.1884011958377565,1.1511220646775848,0.007435265987815631,0.9077934853688335,0.3536107353233555,1.697803732984091,5.409650944865341e-6,1.7025007386225441,0.26778135638682965,0.3409614786661298,0.9244314461155918,0.005541390598094442,1.1345965184731546,1.9864693794318615,0.8068497327368308,1.8357801893810226,1.2510235013615376,0.13311575482255966,1.9628849503467776,1.8949340599771514,1.4194416180731393,1.354472806131029,1.924134224461212,0.5906734656584498,1.9380282043974888,1.3185670482503475,0.04306264818754513,0.4854806575119841,1.9724749795493959,0.15275091340755664,1.5561068470828943,1.8142403168288523,0.8443958201706739,0.22163721675258996,1.6506388049808387,0.002256442730910968,0.9625009430773168,0.3127674901535653,0.9781439898971113,1.7291219414641805,1.6624431306355962,1.9938562139976024,0.383169222005571,0.8698993552687273,0.01279714966423906,1.188697930068845,0.16671883265544307,0.472124584654638,1.8646142072817504,1.3036939066886126,0.1070989958901053,1.9466461259716663,1.918041896663132,0.07414231220944167,1.3784477771779555,1.901807231037885,0.5412875838211171,1.9556108012115194,1.2661411422347828,0.02859188980958638,0.7915186165399204,0.44766859454917685,0.1831349220713433,0.007308382143148218,1.781202395136698,0.8987644929532155,1.9974287622839522,1.0420312434371568,1.6839304925172471,1.0173211063184155,1.9988954790331845,0.923387570335617,1.7655320771984755,0.004628639746920182,0.19764323752653323,1.9879160112720071,0.8157582892545218,1.5231257145449508,1.2422321993826453,0.13767361853521276,0.5194626999627104,1.8908495783701191,1.4276592447127376,0.08376590133482742,1.927562103221406,1.9383905066000215,0.09624196776075222,1.3271527533423022,1.876769805069543,0.7294894195237475,1.9703212558128615,1.212915333991055,0.01704075334830024,0.8454300642537581,0.40281403342254385,0.21597406484350934,1.643723303274566,1.7458165255426559,0.9534374347675045,0.29502057447045194,0.9872141538174489,1.7228835999675831,1.0720892099965995,0.23739409678745205,0.868861413756685,1.7996413630561245,1.5764812634742404,0.16614050530449143,1.9779375659502567,0.4644417400712053,0.036179224134447296,1.29503842614582,0.11122017503768811,0.648791666703924,1.9144074507571867,1.377478525515441,1.3968738550661892,1.9056902402037745,1.9559187308918604,0.12105791910022279,1.5028040692129487,1.8490971979534376,0.7826550958376338,0.45525348965702406,1.1590495966907395,0.008443956396448349,1.7868333452174032,0.35975434843299325,0.2511696418264975,1.6846938884743508,0.00022966475272667708,1.0082503230003206,0.33494735344895277,0.9324354927802763,1.7596640399473389,1.126640645484294,0.20309048758014636,1.98928134497154,1.8313472816528198,1.5308353675446205,0.13714398486985313,1.9650198740639229,0.7092984635225201,0.05223526339364004,1.435841678176991,1.3374503841549663,0.5980081557971431,1.9352170199275185,0.09239618482032508,0.04542294440642536,1.8810962740378616,0.5011218178386674,1.9680876818532371,1.549419644307478,1.8188725812725322,0.8364740145313323,1.9909576512408496,1.1047058268483183,1.6367548279277935,0.003638716742496828,0.31861895789472416,0.2886158707266956,1.723606587537474,0.0005576426416968872,1.0630384144215816,1.9957005934889693,0.3689911574314292,1.7941612667676907,1.1808114553624032,0.17118203490247885,1.9797923257729089,1.8605545390602398,0.03380088132951953,1.286358666134752,1.9492017604652467,0.6572996748212223,0.0711398630753961,1.3858633056285279,0.06639860050561164,0.6695523645947934,0.5574838882320959,1.9501082776195628,0.030528323955026915,1.8538541232774475,0.45437584805600184,0.17853242636395528,1.1679990099861763,0.00966112833795063,1.792399544765464,1.9968215682159953,1.050047357732067,1.6780541775160145,1.7145645607899884,0.2795314965463255,1.999583531162797,0.9414889752814035,1.6266681179160747,1.117637040329423,1.9891279308515037,0.4124537556967056,1.8262715970658663,1.5385013367413554,1.2245905187984487,0.512440840114156,1.8871753512173317,0.04938074383772795,1.3384357016366446,1.9305307673876713,0.6099561689211708,1.9319665718494694,1.4475155251376566,0.04816518324374797,0.721772749930738,0.5090043015940511,0.1437937395114155,1.5418174343203068,0.020537479839935147,1.991097577441808,0.21101823941187414,1.1137230866199694,0.0035500343113100685,0.9454230786734303,0.3252866368490278,0.282269708606226,1.7173155969937084,1.6751526725185495,0.24260944395958872,1.9964999113643338,1.794797046603985,0.010215225619043644,1.5912104967068488,1.9795823883759844,0.45768225736955237,0.779831679826079,1.4915142731476956,1.2776553409351055,0.11968160808084305,0.6658358846266259,1.3848972604413674,1.3894955495306542,0.0696874293735259,0.5565453024990961,1.950434309633971,0.1125500840226894,0.03279255926011715,0.4534988044712478,1.9805728681826338,0.17339319544147658,0.009516497642485522,1.7917604924413406,0.881771746606837,0.3737959550579406,1.0591053620966129,1.7138317823895424,1.0002257715587584,0.285852066976902,0.9404438902331915,1.7544210839481056,0.003131177549819175,0.20796377144802247,1.9904212548241955,1.826860839663543,0.019515804296556416,1.546122991282902,1.9670926557292212,0.5045407256347862,0.04970618349305422,1.443049935657323,1.3298856542693636,0.09500720860080092,0.6146860228320439,1.9286394298535774,1.4393847465613174,0.05098575100770941,0.5080925418324375,1.9660454634434623,0.13914235794537566,0.020326931843973828,1.8291509373868244,0.81860302191275,0.20547706478927907,0.003462444011561705,1.7570956382786633,0.9363674131225318,0.2829990880705542,1.0043099930706423,1.7109655767109748,0.0001163449965886354,0.2485639090351771,0.8858283112598724,1.789259115743349,1.1729133373777914,0.1756986085363048,1.9813658312877878,0.4500829955875998,0.7886895747343765,0.11443992138664238,1.2689291667658185,0.55288832472061,0.06819722750202306,1.9030538467312574,1.9086263089580668,0.6619892301957522,0.5646942439489986,1.9475746640464684,0.1084055387385624,0.035136388544474095,0.4611182368022665,1.9787531130738307,0.16832198811155175,0.010805767142272549,1.5714221397818187,1.996150184239375,1.6795916740782744,1.068158502529424,1.7201552904327981,0.9911543309705071,0.2922314064712598,0.9495016701171743,1.7484356385015605,1.109664411074005,0.21353423468767452,1.991633074493362,1.8217249847080739,1.226630356434209,1.5536997039637743,1.9693608573417793,1.883443994778242,0.735442264348263,0.09031366541448826,1.3213084597660902,0.6025797431884748,0.6230728628442092,1.9252358677388848,1.884374825873404,0.7140739966653231,0.5160108010912426,1.9636619090906058,1.5350553779646057,1.2482216021441923,0.41576357133431696,1.1116426007306959,0.20000127349539765,0.004257681553047954,1.615537316094627,1.9994573330497882,0.2767051469962074,1.0133811630042135,1.681050475204688,1.0459678349761388,0.2545802117126337,0.8948451227450863,1.5895204984673668,0.007791611211775518,0.18086832759826965,1.983068515090078,1.8517211128402242,1.279666225159795,1.5072327951871418,1.954442414613114,0.5447925244666204,0.682990097172435,0.06892152307788202,1.9123772441731237,0.6534656306748134,0.5728790078252622,1.9446370401112123,1.4800150926579585,0.7670181298800605,0.46878201509474127,1.9768528138627928,1.5805492688533982,1.1947613593261757,0.3721648614361811,1.9953139670022928,0.23408500021621692,0.0007023557172151085,1.7264195350514346,1.999760556420687,0.3156352798330313,0.9585636056381514,1.7423886023680706,1.1006431800586047,0.21916941821087865,0.8405046242931768,1.5443677904153068,0.01611047172170965,0.15066436699489527,1.9715492877648995,1.8791573450832477,1.3318615412569192,1.4592413696084072,1.9366553413236434,0.594271816931025,0.6314907211565614,1.3507855188834297,1.888572776616304,0.7053930467719889,0.5239688890616981,1.2373904166560952,1.5273696629673268,0.8206625032585909,1.8391563672931226,1.9871077323540356,1.6242982861393545,1.1407157502473213,0.3304531454918519,1.9991173967189502,0.2704707277091306,1.022451231767585,1.6876648855251186,1.997058942997112,0.35662230947258555,0.009244516299804939,1.7779888646309607,1.1550160363815265,1.612937964730369,0.7866434981973726,1.4975789542365054,0.0273864677550264,0.12301313258632962,1.957110014205878,1.9039512202922069,0.06176563184224382,0.07226926366462272,1.9160530975263197,0.6449705483552999,0.58109892058269,1.2989383812605597,1.8620976534143932,0.040062050997992094,0.47648950867671425,1.1837978788389227,1.573139193981639,0.874845885608196,0.37925141012768304,1.99439584282786,0.22828411186663689,0.0010834059334381418,0.29075379041846294,1.9999179226939272,0.3090490966159781,0.9676289510662225,1.6468434203627753,1.0916136668579672,0.3995430470833383,0.849466492126909,1.8112508374393204,1.2089229832555692,0.15548769800277318,0.7334236271129202,1.8747983472770322,0.041585708669053645,1.4672807307047484,1.9397940924648738,1.9260282190754063,0.08213722626712916,0.053208449524690726,1.41477815348347,0.6967363408399181,0.5319661508523481,1.2461927674560447,1.8330314470448448,0.02614831125388961,0.43058356862853786,1.9856151681161092,1.6171861227914828,0.006093911013118292,0.3372186804448649,1.9986952404567822,0.264296343255666,3.4250802825597226e-5,1.6942227061396231,1.9977131389012117,0.3497041574710422,0.9129039633799598,1.6040778307825534,1.1460478824016813,0.4442684919652815,0.7955148335155373,1.8420745500560467,0.02531802973221997,0.12740817030170237,0.6810049663669275,1.900034759155409,1.3746641709877596,1.418127256282111,1.9196535665222618,0.6365046823193081,0.1052675090770262,0.0369932708414632,1.4640207336062971,0.7494136093730951,0.484240083278784,1.192707207389963,1.5656819540166422,0.8658509295324863,0.38638904181163425,1.9933958872708684,1.7249789615182913,0.0015466595564261887,0.29717797743573304,0.9639473624898497,0.30251977351968273,0.0019905491851612833,1.6537348859984293,1.9925096719429654,0.3923137191937144,0.8584407477488236,1.8059134070704603,1.2000431427896063,0.4906642192688174,0.7421777666163818,1.8703673600726969,0.03903633392706607,0.10195126660754583,1.942855505541528,1.9225660657530792,1.4249117176018502,1.3677170767850635,1.896748969865809,0.6881045912516294,0.13108696090111416,1.254974858422164,1.5118686732176696,0.8028440294503236,0.43806416125249703,1.1386424549326561,1.6100231696157086,0.9203595312870946,1.7802979982606517,1.998190899003605,1.6995882069431802,3.159827891563438e-7,0.259249645693706,1.0187682691754814,0.3428395199810993,0.9219445064213384,1.6112822287503266,1.984323161132896,0.4367497163406857,0.8044029964421509,1.8371471240605306,1.2534371622183076,0.1318750158352079,0.6896155989951875,1.4079589038929887,0.05564286867214163,0.07919349908154305,1.9231783548691275,1.9423245479560434,0.10125300022902317,1.3162017028540247,1.8711491435538607,0.7406419194432079,0.1595179799192814,1.2016006775709953,1.8068536769787664,0.01677571702884728,0.3935771691140296,0.0009881567086400533,1.6525309261392283,0.9751074969665755,1.7448515579909993,1.9999857916358508,0.2960478478588775,0.0014595279151177198,0.22354768096110378,1.993577055090479,0.38513439936564775,0.8674266526444249,0.15436823274556077,1.1911468402607095,0.4828785940138671,0.750953122972231,1.8658647481075357,1.306069461947997,0.10597870422841937,0.6379863092141724,1.9190279921046494,0.07508772208973724,0.05920326747879823,0.5301168457451999,1.959250820530562,0.12663267435729242,1.2637359668536792,1.5040546740814669,0.7939587629881341,0.19047511509877646,1.1476205745018855,1.7732665902719602,0.008257298060231455,0.3509128150297971,1.0294266039159954,1.693077464125166,1.0299302784692463,1.7071664243127112,1.9987751705164674,0.3360289619113701,0.005919909609568341,1.6184363227367697,1.9858826278148696,0.42927729202555187,0.8133072555475055,0.12638735633357756,1.244651468134422,0.530561709267175,0.6982517739513263,1.8919799667711292,1.3577818526304453,0.08276942409864319,0.5874450720185396,1.939249561843211,0.09731245157513424,1.3247946867179228,0.48244736857099035,1.973294010608829,0.15463730328931802,0.01480047332120804,1.5506284373393298,0.8478948751030952,0.40081520050545005,1.093196789462092,1.7373554071728088,0.0027196177717939696,0.3101993291246442,0.9746037597627262,1.7315409186645234,0.0010106790997973514,0.22929622756054258,1.9945626742355755,0.37800567840376775,1.2020942023763308,1.5744413460765356,1.9752250746426983,0.1703730572579728,0.7597489740339021,0.10103217204252057,1.297420782208694,0.5796557478057337,0.6464573462592091,1.9154142892872659,0.07167699663345961,0.6900946480268462,0.5381437919500196,1.95664816399769,0.12225025944915224,1.2724753717765225,0.43633342504932116,0.7850904521874251,0.1851827175318248,0.006887257396990032,1.5955472557426722,0.9022881477581309,0.25958824753430676,1.0384928962100828,1.6865096861862603,0.00017931997427511615,0.27155907807896595,0.9198572454432516,1.767805685673202,0.004975203302405529,0.19553471405606748,1.1190742654686723,0.42185183394482884,1.2554620676092585,1.5287198535201978,1.9616364274517037,0.5225712657982391,0.7069127805423723,1.4244555190082209,1.3492961813309485,0.08642083037071102,0.5957255109723971,1.936097282476623,0.09344618739320809,0.7426646603065428,1.8799138832096387,1.971171506087061,0.14982619372234518,1.2193371167224683,0.39191361324084006,0.8389352543991546,0.21817711111784488,1.1022249047716175,1.638676123246861,0.0034292258384357455,0.2975365213689789,0.9836733103853722,1.7253259387828472,1.0756207574866026,1.6740842515060834,0.8653516046971104,0.3709281429487934,0.01193033070627958,0.16419106638512349,1.173307778706719,0.4674356464387106,0.037129181793156274,1.4814092635948717,1.2887476269509293,0.5714419466058744,0.6549574772353577,1.3741969304415595,1.8998150376642016,0.06550776135935388,0.5462087454859446,0.6623661732182615,0.11794007681684882,0.7960081084777272,1.8525531494634557,1.9827759373867497,0.17995737336743722,1.165539631581281,1.784642897055508,1.9977470709149143,0.25352131753473517,1.0475560208250831,1.6798854136057428,0.0003922440551001882,0.33759608884672265,1.9995084418208595,1.7619621833216605,1.1301525529951697,1.6325912480388363,0.8112506573047173,1.8333101097526843,0.021855157283350635,1.5363978970246215,1.2270204056316558,0.514620111163498,0.053370747513976635,1.4326517709495288,1.3407817655534386,0.6216006828375178,1.9332957666590762,1.3228136718749177,1.8745541048072114,0.04740336152861624,0.49805587523402317,1.9689690813729288,0.14508504713690018,0.018072386070920654,1.8226300190951013,1.9914265801233488,0.21255323742292898,1.1112446077317253,1.7494891423555052,1.9999242516809648,0.32344773800288606,0.9927442045731522,1.6657950495533904,0.00035963981578235327,0.379646548675894,1.9962883028172578,1.7963083075014157,0.01057391706093913,1.5891969558622456,0.7577170067177654,1.8623528895788206,0.03471985340702877,1.489340528238,1.9480815020468514,0.11850108895721967,0.07245746089573213,0.06159140256906581,1.3917916653205142,0.6728967195796798,1.9122132311872693,1.2704601785927938,1.498015980312083,0.03216204467428552,0.45141162638667764,1.9810590890324953,0.17479951261257765,0.009176283601200486,0.35623663372872294,0.8842489274024883,0.24751581717918048,1.056615231933243,1.712082755725242,1.9990961036571946,0.284108286613059,0.9379541960240073,1.7560559771491322,0.0033315111143641385,0.4235615158254893,0.8201667988883415,1.8282610821068563,0.02000922993683607,1.5440317989713026,1.966455034656252,1.888803819110618,0.05048575350682927,1.4408124188677116,1.9292280920314981,0.09394887855860834,0.0943319557438006,1.3313861593892813,1.4416240131186084,0.7251758836979798,0.5059224099473689,1.217293801974899,1.5447904132014885,0.019829619434626133,1.8277539786266477,1.9902004682136267,0.20699416474034427,0.0032581577487333924,0.3152679556922162,0.9388568630625318,0.2847400306288983,1.0018156958589346,1.6725361641715375,1.9952651158892434,0.24692048818396228,0.8833506696415498,1.79078831540465,0.009298925823878701,0.17428901780188877,0.7665281296421134,1.8577244712699907,0.032389960398193085,0.11328400857567023,1.9509274563487766,1.9125833985860639,0.6720422206540836,1.3909594228861564,1.9075818345253501,0.07211985595721204,0.11892848702897696,1.279182399986939,1.4901290350130951,0.03448400779481353,0.4590187553178443,1.1634743365677012,1.5899274477475094,0.8953462389255772,1.7957609280525042,1.9963657439851115,0.37893747365286223,0.00033579577488074275,0.27635727847188274,0.9936485678725175,0.3241139982970417,0.9470107026082158,1.630968227207936,1.1121433329142674,0.41617259960102404,0.8290977394070006,1.823143894733735,0.018243948542522093,0.14461623104638088,0.7135911732830567,0.49883828239315164,0.04767889746064602,0.08928061953303801,1.9325418118859987,1.933620157136552,0.0905230471103623,1.3399313762872405,1.4334669515872638,0.716465060016495,0.14617312848787012,1.2261395421200065,1.537160946422287,0.021667513531140936,0.4137410503606703,1.9888928701694755,1.633291422044576,0.9500049301342532,1.761376173083883,1.999536386262554,0.27842981405917044,0.00041798100353862555,1.6792219340650139,1.0484593622703369,0.36551937950089997,0.8923649716823543,1.5875038796157273,1.1664314703589833,0.46154277826617085,1.98260840426626,1.853025468616058,1.2820601325362175,0.11751434849972664,0.6615150348220997,0.5470148350224955,0.06583008936070667,1.3992927537384163,1.911353360360325,1.9518508675966153,0.11467410626783747,1.28788164674584,1.4822017557396072,0.7694445209713411,0.46667040298217943,1.1724170090923731,1.5825783902812258,0.011791452787966117,0.37022537977427905,1.9955520601777132,1.6747520032197962,0.0006119954085406221,1.7247030590430563,0.9845775806562919,0.3174561073732549,0.0035044664223626842,1.6379799604640155,1.9897773090188053,0.21761354681556333,0.8380427439107091,1.8179589687397852,1.2202193886235353,0.5085313205102017,1.9709555201583302,1.8803432262943316,0.044950410358805204,0.09306482639997482,1.9357787904846795,1.9303317708875656,0.08678898166638149,1.3484486193609955,0.5041030883264203,0.7077775691519261,0.1414860623805907,1.9618841313022504,1.5294872752920523,0.8231169294345717,0.42111415460574675,1.1181762670099948,1.6262448618983214,0.004885508623412305,1.7672259483275616,0.9997218750382628,1.7141845791557633,0.00019685512683265127,1.6858518090446792,1.0393965943441996,0.35853382489010166,0.9013881312855094,1.5948205020742563,1.9804739017893187,0.1846587631190275,0.7842072878156456,1.4954137978871678,1.2733454250829461,0.12181731042986987,1.9563843744186205,1.905015062705611,0.06263158167772487,0.07134114916611045,1.9150498885914624,1.9490307512217342,0.5788353134596562,1.296557202986185,0.45725896574320946,0.7606269677307638,0.17087833060083846,1.181345492979459,1.5751813909460481,0.013221076180145452,0.3772977803190345,1.0635803394853978,1.6680291192279082,0.0009704372425458629,1.7309240126167076,0.944919940120517,0.31085438473576354,0.0027866796415971784,0.21070873719109728,1.0940971993436446,0.40153950521064363,0.8470010762921203,1.5498732770845236,1.211361596188498,0.15415453354057296,0.7310204088997743,1.4470648456904596,1.325649906435371,0.09692366728683666,0.6188271209114413,0.5882690738440182,0.08313006669767398,0.7184735754363291,1.8915707525983299,1.9648773660549392,0.5297633614493951,1.243774467195464,1.8316489410907209,0.8141958154720514,0.20276257080708437,1.1271792691791933,1.6191467664573054,0.005822055009647387,0.2798810340222757,1.9988195099688555,1.7078055773256247,5.800561342994559e-5,1.692425243521129,0.8902835514323207,0.35160105817494125,0.00837368508904468,1.6020881752291354,1.148514989898142,0.446343892334763,0.030652004132252775,1.503273376917049,1.2646082233340556,0.12619254026433435,1.9589948891227649,1.9011190235086526,1.376975628609221,0.07474427104555181,0.5687349549556528,0.6388294995364483,0.10638425606466917,0.03632410733080893,1.865411950374039,1.9778239874916683,0.482104732203822,1.1902590534811364,1.5677370584600103,0.8683231081796375,0.3844214246254434,1.0726308009054188,1.6612512614076296,0.0014110917797993672,0.31898786080092323,1.999980561671808,1.7454546858010507,0.0021509561008378197,1.651845351264817,1.9922018647503221,0.39429653123957065,0.016941079408884674,1.5574275477423332,1.2024864102659873,0.15902829264769835,0.04557320869793824,1.4551608602026147,1.3170595555257485,0.5984695962644427,1.9420214647346756,1.923525597141948,0.07954660330573027,0.055345783133571524,0.5199389804401022,0.6904754435581442,0.13232425799973735,0.02313598842551834,1.8366521036754877,0.8052899918120952,0.19731926056453153,1.1361718054403687,1.6119977198419944,1.9992996047471316,0.3421581085613413,1.0178640366591027,0.2598574961706128,1.4438896127622058e-6,0.3601415080109299,1.998136115342084,1.7808632881331585,0.007242998223920494,1.6093063010049131,1.1395380482840836,1.8493632667523978,0.028463112813810865,1.5110915402908458,1.2558492462962723,0.13063967795424314,0.06336299686768587,1.897148828917667,1.3685579473234992,0.6492635082482294,1.922216741651874,1.9431564624547777,1.476077151358896,0.038786506801469556,1.8699216827195047,0.7430516811086422,0.16087210836260235,0.012883889456526854,1.805377651845585,0.859336082435754,0.2312101264708718,1.9926197511157901,1.654418987526252,1.9998486150733537,0.3018719734408627,0.9630435810420813,1.7393773932060856,0.0015973481154040181,0.22197824393949217,1.9932917145672566,1.8139249617686222,0.01531882756260261,1.5649359462585433,1.1935945612177998,1.8770120227736693,0.7485381827747472,1.4632194183609992,1.9382162525735058,0.10486397478901555,0.08396790042881674,1.9200083697427992,1.4189486174033834,0.058360695747328384,1.8996402440876738,1.9599526177731694,1.5235550967132543,0.02511621188912727,1.8415864160142903,1.9863802091735288,0.4435168487828489,0.005598623686074777,0.3337900161104036,0.9138049464049279,0.26741163374465104,1.9977738587693652,1.6948733619978373,1.0324233748566791,0.26368410151749266,1.9986486480431758,1.7751642175544338,0.006194007876924812,0.1887185527268096,0.79102581895596,0.4313272497744768,0.026354171755880285,1.8335314348656575,1.2470692147682652,1.9020248696481932,0.6958746711683312,1.4139550643179064,1.3601099364596723,0.08177865348306335,0.5851742095404762,1.3032137708351554,1.4680801137616368,0.041328006994091226,1.8743598269800756,0.7342953940424797,1.5694594676667872,1.2080384715377543,1.8107217138234204,1.9939118585485107,0.3988200954626907,0.001302087391729878,1.7356681965881082,0.9685328744738813,0.30839559836447306,1.9999291007604176,1.733239255350397,1.0871481909581717,0.2277092685962191,1.9942998238631766,1.8086212420845071,0.8739486635414073,0.15789721370534404,0.7377474783341604,0.47726027544518745,0.040315863453772915,1.4712398570062082,1.2998012878452867,0.5819203015196027,0.644125225407318,1.3634465449588955,1.4106944292023944,0.06145309827286882,0.5359328911095941,1.2505357072539425,0.12344806078563109,0.02717666103830263,0.43427487491051175,0.7875271456135042,1.6136522960410318,1.1541225210853863,1.777420341751817,0.9047708228022386,0.35593022228563354,7.194055888559703e-6,1.6974427088638044,1.0233553787651009,0.2698524728937072,0.9173712109762397,0.3311251685531159,1.1416110782517301,0.44054674179751674,1.9869625754286941,1.839647909820242,0.8197728546889477,0.12960686214956363,1.9609491798988787,0.524764424869669,0.05716194000366581,1.4221957313861662,1.3516322912262067,0.6323316091242717,0.10327419981713082,1.9369717210244561,1.4600445566521194,0.0439483987621091,0.4880863525737015,1.1971046444604165,0.15114209638134146,0.015949190549156556,1.8159990594335325,0.8413974963436848,1.6560007577953741,0.0018059546535527105,1.7417823889532926,0.9594672299866014,0.31497613718688744,0.9811793866671181,1.6571210177034152,1.0781076871468986,0.23350384703662674,0.862880431144108,0.3728690422851204,1.1956483454548545,0.16282424093765158,1.9766589552541276,1.868150968360127,0.03780554659288726,0.10393252630822025,1.9443399098529741,0.5736969216449472,0.6526174263580978,1.3718826726601,1.4024064439042097,0.6838479648346829,0.12887656413032889,1.9547118881470995,1.5080119942147032,0.029317166313403087,0.4417783994055765,1.1430811725302903,0.181387422329219,0.007679340323062389,1.7830941155762448,0.8957445358526149,0.2551833748030695,1.3930653470217713e-5,1.7039149673069476,1.014285460699544,0.33946675174841556,0.9264150216586696,1.6148243122261112,0.004341455303615627,0.1994589686403313,0.8088017719173497,0.4164977935156351,1.2490975805102562,0.1341090618141133,1.9634199314516096,0.5168024020411659,0.054177668428196046,0.08095137184714685,1.9248923728946643,1.9408144775308842,0.6017500096260802,1.3204518995664687,0.09068962455642848,0.7363145333353585,0.1570971391098901,1.969582614791018,1.554452573048517,0.01760337592189165,0.3971482127728122,1.9917494145681358,1.6491270100497686,0.002391965861754608,1.7478355381444897,0.9504049210448521,0.2928705929810602,0.0012274212396919948,1.7207824693147806,1.069060755653859,0.38160481924406764,0.8718718204569151,1.5706797175680935,1.186744177142156,0.16782016150886736,1.9785672758060666,1.8636130938238735,1.3017981387244635,0.10799636678974545,1.9472852946545962,0.5655086233432313,0.073392512678077,1.38028819718303,1.9026650196942012,1.9579743655180841,0.5520795557236012,1.2680579901973639,1.5001774139081558,0.789573623392634,0.4493278613868851,1.9815392061477464,1.5992267133720426,0.008842234045906228,0.3543299312209607,1.9972842393604147,1.6898385737600625,1.0541247495338513,1.7103292987832854,1.9989869663421502,0.3326831285133106,0.005442779197752601,1.7576861664897225,1.123628484608185,0.20492821678556294,0.8177137157323396,1.5248199128008193,1.2403018456517894,0.13868251786325858,1.9658114007089202,1.8899441648572617,0.05127123099654929,0.08456463904365341,0.5915333028983292,0.6155207330073402,0.09539232804335007,1.3290317618344063,1.8777246558164888,0.7275750010930406,0.5037553520040436,1.2148584174053276,1.5468803750640263,0.8434651618045651,0.4044106885220272,1.097659749227591,0.20851619843823144,0.00306007279197118,0.3134522475125606,1.9998216700689464,1.7284767886916224,0.9993213873507353,1.6706881246124716,1.0600081409742328,0.37450132257663504,0.0126473350313282,1.578105448455318,1.1778246411724922,0.17288456429188304,0.03837793582607818,1.8590041503526753,1.2931372733979147,1.495065871648643,1.9501527249214137,1.9136004584607775,0.07001950868976392,0.06388430395643208,1.9065317135024156,0.66668841681443,0.5602085117723257,0.028816015142493878,1.850146240933187,0.7807139621319094,0.4569226395898618,1.9797638079980229,1.5919396563781443,0.010086692681663734,0.3612835929572098,1.042972596114189,0.24320028229379864,0.0002742707721711257,0.2746380218337747,1.999354080302484,0.3259544204939042,0.9445200647762483,1.6290311594189881,1.1146215570461553,0.4181994882279022,0.8266406603528647,1.5325200414587505,0.018721282146770712,0.14332685393557965,0.054859573005511475,1.8857703437756947,1.3450916605195813,0.08825323976228872,1.9316383114776476,0.6071624094095402,0.09156289525228278,0.0460175174427081,1.882035256336172,0.7188578874021126,0.5116514307991448,0.017214388991858787,1.5392631728918085,0.8345119997375308,0.21538956040834567,1.989260522899175,1.635219829636668,0.003810220463970948,0.3200761956129219,1.9996092207827827,0.2801589704265667,0.0004932008717508651,0.2380039125311636,1.9958828754284685,0.3674492997985309,0.011249782364673333,1.786745374691598,1.168890471557339,1.8646668110477507,0.7729286082221448,1.4853341154138031,0.030750478421323946,0.11634392308382902,0.6591690152565534,1.9098743044237385,1.3960088551731755,0.06711317334927858,1.9103238064924706,0.6581494339250007,1.501989404540342,1.2854920382398907,1.8548877924111187,0.7718723464812745,0.4645621090207427,0.008566580478928332,1.5846038871527717,0.8888074208706768,0.3682898163036349,1.9957839594493885,1.6765908138354577,1.0073081474433951,0.2809123476482731,1.9996389548541889,0.31928118141282513,0.9535798073009952,0.20366002548843953,1.9894184883491182,0.4108453459436865,0.02093277672592897,1.8193913405873903,1.2226517762214324,0.5107051294597068,0.7198990319788807,1.436689490285117,0.04569280885261273,0.0920168704586456,0.6081601672591225,1.9312435864822737,0.08780822007890421,0.04877695096051782,1.8862732719139403,0.710163909616202,1.5486321451544702,1.2325414668058585,1.8251709149627113,0.8255724561021863,0.4190820760521834,0.002898581080406193,1.6281875414266933,0.9434370375778476,0.32675609638580183,1.9993145110918265,0.27389175518424347,1.0620980564264388,0.24390975821934235,1.996664217611494,1.7935883302511442,0.8989062883976847,0.17170958319701635,1.1599424035124122,0.45601212966272875,0.03355841290063055,1.8495745795497602,1.275743888402137,0.5592345741130542,0.667711315008292,1.906073274498166,1.387662748891085,0.07041881239009429,0.5583290160005745,1.2747737784139301,0.11163504887112319,0.03329968314757936,1.4764293034940057,0.7630495040399425,1.5936259408829414,1.1788919788650571,1.7929739397438067,0.8797968175537069,0.3753480247001597,1.061090881401849,1.7152233807700608,0.9982366574618781,0.28724584902871675,1.999841566554208,0.3126639604280208,1.1167013261951055,1.6430309525264029,1.990693949795422,1.8257405132770013,0.844536612351908,0.14224861451498483,1.9675968216785886,0.5028138996372693,0.7286188641638511,1.8772043741499913,1.3280072367589433,0.6090887641376121,0.6165223104400259,1.9278996642345594,1.437597058537193,1.354606074399867,0.5098253318192678,1.2216679021225116,0.13813190867719838,0.020727887712654658,1.8302612609687188,0.8166472665564899,0.2042707788298027,1.1247048209823103,1.7583936365811275,0.9343824564562209,0.3334914001250452,1.0062990797701525,1.675847415993828,8.798164009304887e-5,0.24987782451138874,0.8878046440779114,0.353501992942748,1.1709538435394413,1.6000947737378075,1.9817460953829493,0.4484227373183195,0.7906341902944974,1.501116412710461,1.9523051283385442,0.5511099905054242,0.6762809596475797,1.3950820591717523,0.06036075837473731,0.66011785995071,0.1168167654310237,1.9469371991448992,1.4862161455190328,1.3028321127295985,1.864159458239329,1.9783433243750241,0.16721916168908435,0.011099349896672384,1.7984681318631188,0.8707961060647031,0.23865776921414228,0.00046202110939175256,1.6631203449240355,0.989165312590338,0.2936380047750442,1.9999618987291052,1.634440153653407,0.0023175712111205282,0.21476433454114152,1.9918878844974324,0.3962831117161638,1.2246925494557055,0.14694721091916085,1.9698475476556703,0.4949635845333267,0.7373610289980437,1.8728129305214503,1.9341512281722548,0.6007552456395012,0.6249160109828628,1.3441443833970532,0.08052437233516319,0.7121684907239999,0.5177523801873138,1.963128660843235,0.13356695340975266,1.2501479720479316,1.8352832826475882,1.9882165618918584,0.19880938452571384,1.133700308744716,1.764275161709151,0.006552256889243546,0.27533301665519416,0.00029841202572689074,1.7031440861606189,1.0439807329891446,0.2559076202798314,1.9979807902695685,1.7824190574594732,0.007545751646702681,0.1820109146944362,1.9834310522187273,0.4408787356805578,0.029057007251207856,0.11963194174340819,1.2582597385884646,0.543022347207188,0.06423966996197683,1.898247844303387,1.9131896837515603,0.0772593050024114,0.5746783984227546,1.9439825090330092,0.103451522204148,0.7650842153481394,0.4704683131043649,1.976425384977333,0.16223145750466783,0.012487857142602254,1.562310362625197,1.9951196587414985,1.671436265691586,1.0791890578023904,1.7277851194090004,0.0017819765964641743,0.31418629162624867,0.9605510929495867,1.7410544881497763,1.0986639668119904,0.22041364744010106,1.9930001942032027,1.815371547375197,1.2158438318049916,1.562876049471261,1.9720184623923203,0.48715483017042926,0.043630919905672805,0.09496266846851387,1.310814844994789,0.5924545820154974,0.6333405781485022,1.9209830234780862,1.8894834961816156,0.7034927957117446,0.5257191139480026,1.9606484425967015,0.12907329913839294,0.02456372704979659,0.4247757834014466,1.9867874074921328,0.19341392225083676,0.00533814654548348,1.6067828418624832,1.9990318672766445,0.2691117174295158,1.0244397996761685,1.6891076778448697,1.0349162695195904,0.3551008184158926,0.9058506796719521,1.7767376090380718,0.006474289184729698,0.18726276539505904,1.9850350799926684,1.8458733920729378,1.2690300146973925,1.516733760784827,1.95768441620124,0.5349723097712411,0.0610792538228182,0.07301353598802618,1.362435779837221,0.6431117175858088,0.5829059279329869,1.9409501361810089,1.4702828418992333,0.7562763071430517,0.47818530745212495,1.9744270930321184,1.5715080649503959,0.013957629293777307,0.3808121225561838,0.8528273204620864,0.2270206269900379,0.001177948303223264,1.6494316010122203,1.9999414291336775,0.3076125298661807,0.9696170863522544,1.7349330301318244,1.089632736886924],"x":[-1.6470993291652855e6,-4.5286443388456706e14,-9.057288661220349e14,-1.3585932983595028e15,-1.8114577305969702e15,-2.264322162834438e15,-2.717186595071906e15,-3.1700510273093735e15,-3.6229154595468415e15,-4.075779891784309e15,-4.528644324021777e15,-4.981508756259244e15,-5.434373188496713e15,-5.887237620734181e15,-6.340102052971648e15,-6.792966485209115e15,-7.245830917446583e15,-7.698695349684051e15,-8.151559781921519e15,-8.604424214158986e15,-9.057288646396454e15,-9.510153078633922e15,-9.963017510871388e15,-1.0415881943108856e16,-1.0868746375346326e16,-1.1321610807583794e16,-1.1774475239821262e16,-1.2227339672058728e16,-1.2680204104296196e16,-1.3133068536533664e16,-1.3585932968771132e16,-1.40387974010086e16,-1.4491661833246068e16,-1.4944526265483536e16,-1.5397390697721004e16,-1.585025512995847e16,-1.6303119562195938e16,-1.6755983994433406e16,-1.7208848426670872e16,-1.766171285890834e16,-1.811457729114581e16,-1.8567441723383276e16,-1.9020306155620744e16,-1.9473170587858212e16,-1.992603502009568e16,-2.0378899452333148e16,-2.0831763884570616e16,-2.1284628316808084e16,-2.173749274904555e16,-2.2190357181283016e16,-2.264322161352049e16,-2.309608604575795e16,-2.3548950477995424e16,-2.400181491023289e16,-2.445467934247036e16,-2.4907543774707828e16,-2.5360408206945296e16,-2.581327263918276e16,-2.626613707142023e16,-2.6719001503657696e16,-2.717186593589516e16,-2.762473036813263e16,-2.8077594800370096e16,-2.853045923260757e16,-2.8983323664845036e16,-2.9436188097082504e16,-2.9889052529319972e16,-3.034191696155744e16,-3.0794781393794908e16,-3.1247645826032376e16,-3.170051025826984e16,-3.215337469050731e16,-3.2606239122744776e16,-3.3059103554982244e16,-3.351196798721971e16,-3.3964832419457184e16,-3.441769685169465e16,-3.4870561283932116e16,-3.5323425716169584e16,-3.5776290148407052e16,-3.622915458064452e16,-3.668201901288198e16,-3.713488344511946e16,-3.758774787735693e16,-3.804061230959439e16,-3.849347674183186e16,-3.894634117406933e16,-3.939920560630679e16,-3.985207003854426e16,-4.030493447078173e16,-4.07577989030192e16,-4.121066333525667e16,-4.166352776749413e16,-4.21163921997316e16,-4.256925663196907e16,-4.3022121064206536e16,-4.3474985496444e16,-4.392784992868147e16,-4.4380714360918936e16,-4.483357879315641e16,-4.528644322539387e16,-4.573930765763134e16,-4.619217208986882e16,-4.664503652210627e16,-4.709790095434375e16,-4.755076538658122e16,-4.800362981881869e16,-4.845649425105614e16,-4.890935868329362e16,-4.936222311553108e16,-4.981508754776855e16,-5.026795198000602e16,-5.072081641224349e16,-5.117368084448096e16,-5.162654527671842e16,-5.2079409708955896e16,-5.253227414119336e16,-5.298513857343083e16,-5.343800300566829e16,-5.389086743790576e16,-5.4343731870143224e16,-5.47965963023807e16,-5.524946073461816e16,-5.570232516685563e16,-5.61551895990931e16,-5.660805403133056e16,-5.706091846356804e16,-5.75137828958055e16,-5.796664732804298e16,-5.841951176028043e16,-5.88723761925179e16,-5.932524062475538e16,-5.977810505699285e16,-6.02309694892303e16,-6.068383392146778e16,-6.113669835370525e16,-6.158956278594272e16,-6.2042427218180184e16,-6.249529165041765e16,-6.294815608265512e16,-6.340102051489258e16,-6.385388494713005e16,-6.430674937936752e16,-6.475961381160499e16,-6.5212478243842456e16,-6.566534267607992e16,-6.611820710831739e16,-6.657107154055486e16,-6.702393597279233e16,-6.747680040502979e16,-6.792966483726726e16,-6.838252926950473e16,-6.883539370174219e16,-6.928825813397966e16,-6.974112256621714e16,-7.019398699845461e16,-7.064685143069206e16,-7.109971586292954e16,-7.155258029516701e16,-7.200544472740447e16,-7.245830915964194e16,-7.291117359187941e16,-7.336403802411688e16,-7.381690245635434e16,-7.42697668885918e16,-7.472263132082926e16,-7.517549575306675e16,-7.562836018530422e16,-7.60812246175417e16,-7.653408904977915e16,-7.69869534820166e16,-7.743981791425408e16,-7.789268234649155e16,-7.834554677872902e16,-7.879841121096648e16,-7.925127564320395e16,-7.97041400754414e16,-8.01570045076789e16,-8.060986893991637e16,-8.106273337215382e16,-8.15155978043913e16,-8.196846223662877e16,-8.242132666886624e16,-8.28741911011037e16,-8.332705553334115e16,-8.377991996557862e16,-8.42327843978161e16,-8.468564883005358e16,-8.513851326229104e16,-8.559137769452851e16,-8.604424212676598e16,-8.649710655900344e16,-8.69499709912409e16,-8.740283542347837e16,-8.785569985571584e16,-8.830856428795331e16,-8.876142872019077e16,-8.921429315242824e16,-8.966715758466573e16,-9.012002201690318e16,-9.057288644914066e16,-9.102575088137811e16,-9.147861531361558e16,-9.193147974585306e16,-9.238434417809053e16,-9.283720861032798e16,-9.329007304256544e16,-9.374293747480291e16,-9.41958019070404e16,-9.464866633927787e16,-9.510153077151533e16,-9.55543952037528e16,-9.600725963599027e16,-9.646012406822774e16,-9.691298850046518e16,-9.736585293270266e16,-9.781871736494013e16,-9.82715817971776e16,-9.872444622941506e16,-9.917731066165254e16,-9.963017509389002e16,-1.0008303952612747e17,-1.0053590395836494e17,-1.009887683906024e17,-1.0144163282283987e17,-1.0189449725507734e17,-1.0234736168731482e17,-1.0280022611955227e17,-1.0325309055178974e17,-1.037059549840272e17,-1.0415881941626469e17,-1.0461168384850216e17,-1.0506454828073962e17,-1.0551741271297709e17,-1.0597027714521456e17,-1.0642314157745203e17,-1.0687600600968949e17,-1.0732887044192694e17,-1.0778173487416442e17,-1.0823459930640189e17,-1.0868746373863936e17,-1.0914032817087683e17,-1.095931926031143e17,-1.1004605703535178e17,-1.1049892146758923e17,-1.1095178589982669e17,-1.1140465033206416e17,-1.1185751476430163e17,-1.123103791965391e17,-1.1276324362877656e17,-1.1321610806101403e17,-1.1366897249325152e17,-1.1412183692548898e17,-1.1457470135772645e17,-1.150275657899639e17,-1.1548043022220138e17,-1.1593329465443885e17,-1.1638615908667632e17,-1.1683902351891378e17,-1.1729188795115123e17,-1.177447523833887e17,-1.1819761681562618e17,-1.1865048124786366e17,-1.1910334568010112e17,-1.195562101123386e17,-1.2000907454457606e17,-1.2046193897681354e17,-1.2091480340905098e17,-1.2136766784128845e17,-1.2182053227352592e17,-1.222733967057634e17,-1.2272626113800085e17,-1.2317912557023834e17,-1.236319900024758e17,-1.2408485443471326e17,-1.2453771886695074e17,-1.249905832991882e17,-1.2544344773142566e17,-1.2589631216366314e17,-1.263491765959006e17,-1.2680204102813806e17,-1.2725490546037554e17,-1.27707769892613e17,-1.2816063432485048e17,-1.2861349875708795e17,-1.290663631893254e17,-1.2951922762156288e17,-1.2997209205380035e17,-1.3042495648603782e17,-1.3087782091827526e17,-1.3133068535051274e17,-1.317835497827502e17,-1.3223641421498768e17,-1.3268927864722515e17,-1.3314214307946262e17,-1.335950075117001e17,-1.3404787194393757e17,-1.3450073637617502e17,-1.3495360080841248e17,-1.3540646524064995e17,-1.3585932967288742e17,-1.363121941051249e17,-1.3676505853736235e17,-1.3721792296959982e17,-1.3767078740183728e17,-1.3812365183407477e17,-1.3857651626631224e17,-1.390293806985497e17,-1.3948224513078717e17,-1.3993510956302464e17,-1.4038797399526211e17,-1.4084083842749957e17,-1.4129370285973702e17,-1.417465672919745e17,-1.4219943172421197e17,-1.4265229615644946e17,-1.4310516058868691e17,-1.4355802502092438e17,-1.4401088945316186e17,-1.444637538853993e17,-1.4491661831763677e17,-1.4536948274987424e17,-1.458223471821117e17,-1.462752116143492e17,-1.4672807604658666e17,-1.4718094047882413e17,-1.4763380491106157e17,-1.4808666934329907e17,-1.485395337755365e17,-1.48992398207774e17,-1.4944526264001146e17,-1.498981270722489e17,-1.503509915044864e17,-1.5080385593672384e17,-1.5125672036896134e17,-1.517095848011988e17,-1.521624492334363e17,-1.5261531366567373e17,-1.530681780979112e17,-1.5352104253014867e17,-1.539739069623861e17,-1.5442677139462358e17,-1.5487963582686106e17,-1.5533250025909856e17,-1.55785364691336e17,-1.562382291235735e17,-1.5669109355581094e17,-1.5714395798804842e17,-1.575968224202859e17,-1.5804968685252333e17,-1.585025512847608e17,-1.5895541571699827e17,-1.5940828014923574e17,-1.598611445814732e17,-1.603140090137107e17,-1.6076687344594816e17,-1.6121973787818563e17,-1.616726023104231e17,-1.6212546674266054e17,-1.6257833117489802e17,-1.630311956071355e17,-1.6348406003937293e17,-1.6393692447161043e17,-1.643897889038479e17,-1.6484265333608538e17,-1.6529551776832285e17,-1.657483822005603e17,-1.6620124663279776e17,-1.666541110650352e17,-1.671069754972727e17,-1.6755983992951014e17,-1.6801270436174765e17,-1.684655687939851e17,-1.689184332262226e17,-1.6937129765846006e17,-1.698241620906975e17,-1.7027702652293498e17,-1.707298909551724e17,-1.7118275538740992e17,-1.7163561981964736e17,-1.7208848425188486e17,-1.725413486841223e17,-1.729942131163598e17,-1.7344707754859725e17,-1.738999419808347e17,-1.743528064130722e17,-1.7480567084530963e17,-1.7525853527754714e17,-1.7571139970978458e17,-1.7616426414202208e17,-1.7661712857425952e17,-1.77069993006497e17,-1.7752285743873446e17,-1.779757218709719e17,-1.7842858630320938e17,-1.7888145073544685e17,-1.7933431516768435e17,-1.797871795999218e17,-1.802400440321593e17,-1.8069290846439674e17,-1.811457728966342e17,-1.8159863732887168e17,-1.8205150176110912e17,-1.825043661933466e17,-1.8295723062558406e17,-1.8341009505782154e17,-1.83862959490059e17,-1.8431582392229648e17,-1.8476868835453395e17,-1.8522155278677142e17,-1.856744172190089e17,-1.8612728165124634e17,-1.865801460834838e17,-1.8703301051572128e17,-1.8748587494795872e17,-1.8793873938019622e17,-1.883916038124337e17,-1.8884446824467117e17,-1.8929733267690864e17,-1.8975019710914608e17,-1.9020306154138355e17,-1.90655925973621e17,-1.911087904058585e17,-1.9156165483809594e17,-1.9201451927033344e17,-1.9246738370257088e17,-1.929202481348084e17,-1.9337311256704586e17,-1.938259769992833e17,-1.9427884143152077e17,-1.947317058637582e17,-1.951845702959957e17,-1.9563743472823315e17,-1.9609029916047066e17,-1.965431635927081e17,-1.969960280249456e17,-1.9744889245718304e17,-1.9790175688942048e17,-1.98354621321658e17,-1.9880748575389542e17,-1.9926035018613293e17,-1.9971321461837037e17,-2.0016607905060787e17,-2.006189434828453e17,-2.0107180791508278e17,-2.0152467234732026e17,-2.019775367795577e17,-2.0243040121179517e17,-2.0288326564403264e17,-2.0333613007627014e17,-2.037889945085076e17,-2.0424185894074506e17,-2.0469472337298253e17,-2.0514758780522e17,-2.0560045223745747e17,-2.060533166696949e17,-2.0650618110193238e17,-2.0695904553416986e17,-2.0741190996640733e17,-2.078647743986448e17,-2.0831763883088227e17,-2.0877050326311974e17,-2.0922336769535722e17,-2.096762321275947e17,-2.1012909655983213e17,-2.105819609920696e17,-2.1103482542430707e17,-2.114876898565445e17,-2.11940554288782e17,-2.1239341872101946e17,-2.1284628315325696e17,-2.1329914758549443e17,-2.1375201201773187e17,-2.1420487644996934e17,-2.146577408822068e17,-2.151106053144443e17,-2.1556346974668173e17,-2.1601633417891923e17,-2.1646919861115667e17,-2.1692206304339418e17,-2.173749274756316e17,-2.1782779190786906e17,-2.1828065634010656e17,-2.18733520772344e17,-2.191863852045815e17,-2.1963924963681894e17,-2.2009211406905645e17,-2.205449785012939e17,-2.209978429335314e17,-2.2145070736576883e17,-2.2190357179800627e17,-2.2235643623024378e17,-2.228093006624812e17,-2.2326216509471872e17,-2.2371502952695616e17,-2.2416789395919366e17,-2.246207583914311e17,-2.2507362282366858e17,-2.2552648725590605e17,-2.259793516881435e17,-2.2643221612038096e17,-2.2688508055261843e17,-2.2733794498485594e17,-2.2779080941709338e17,-2.2824367384933085e17,-2.2869653828156832e17,-2.291494027138058e17,-2.2960226714604326e17,-2.300551315782807e17,-2.3050799601051818e17,-2.3096086044275565e17,-2.3141372487499312e17,-2.318665893072306e17,-2.3231945373946806e17,-2.3277231817170554e17,-2.33225182603943e17,-2.3367804703618048e17,-2.3413091146841792e17,-2.345837759006554e17,-2.3503664033289286e17,-2.354895047651303e17,-2.359423691973678e17,-2.3639523362960525e17,-2.3684809806184275e17,-2.3730096249408022e17,-2.3775382692631766e17,-2.3820669135855514e17,-2.3865955579079258e17,-2.3911242022303008e17,-2.3956528465526752e17,-2.4001814908750502e17,-2.4047101351974246e17,-2.4092387795197997e17,-2.413767423842174e17,-2.4182960681645485e17,-2.4228247124869235e17,-2.427353356809298e17,-2.431882001131673e17,-2.4364106454540474e17,-2.4409392897764224e17,-2.4454679340987968e17,-2.449996578421172e17,-2.4545252227435462e17,-2.4590538670659206e17,-2.4635825113882957e17,-2.46811115571067e17,-2.472639800033045e17,-2.4771684443554195e17,-2.4816970886777946e17,-2.486225733000169e17,-2.4907543773225437e17,-2.4952830216449184e17,-2.4998116659672928e17,-2.5043403102896675e17,-2.5088689546120422e17,-2.5133975989344173e17,-2.5179262432567917e17,-2.5224548875791664e17,-2.526983531901541e17,-2.5315121762239158e17,-2.5360408205462906e17,-2.540569464868665e17,-2.5450981091910397e17,-2.5496267535134144e17,-2.5541553978357888e17,-2.558684042158164e17,-2.5632126864805386e17,-2.5677413308029133e17,-2.572269975125288e17,-2.5767986194476627e17,-2.581327263770037e17,-2.5858559080924118e17,-2.5903845524147866e17,-2.594913196737161e17,-2.599441841059536e17,-2.6039704853819104e17,-2.6084991297042854e17,-2.6130277740266602e17,-2.6175564183490346e17,-2.6220850626714093e17,-2.6266137069937837e17,-2.6311423513161587e17,-2.635670995638533e17,-2.640199639960908e17,-2.6447282842832826e17,-2.6492569286056576e17,-2.653785572928032e17,-2.6583142172504064e17,-2.6628428615727814e17,-2.667371505895156e17,-2.671900150217531e17,-2.6764287945399053e17,-2.6809574388622803e17,-2.6854860831846547e17,-2.6900147275070294e17,-2.694543371829404e17,-2.6990720161517786e17,-2.7036006604741533e17,-2.708129304796528e17,-2.712657949118903e17,-2.7171865934412774e17,-2.7217152377636525e17,-2.726243882086027e17,-2.7307725264084016e17,-2.7353011707307763e17,-2.7398298150531507e17,-2.7443584593755254e17,-2.7488871036979e17,-2.753415748020275e17,-2.7579443923426496e17,-2.7624730366650243e17,-2.767001680987399e17,-2.7715303253097738e17,-2.7760589696321485e17,-2.780587613954523e17,-2.7851162582768976e17,-2.7896449025992723e17,-2.7941735469216467e17,-2.7987021912440218e17,-2.8032308355663965e17,-2.8077594798887712e17,-2.812288124211146e17,-2.8168167685335206e17,-2.821345412855895e17,-2.8258740571782698e17,-2.8304027015006445e17,-2.834931345823019e17,-2.839459990145394e17,-2.8439886344677683e17,-2.8485172787901434e17,-2.853045923112518e17,-2.8575745674348925e17,-2.8621032117572672e17,-2.8666318560796416e17,-2.8711605004020166e17,-2.875689144724391e17,-2.880217789046766e17,-2.8847464333691405e17,-2.8892750776915155e17,-2.89380372201389e17,-2.8983323663362643e17,-2.9028610106586394e17,-2.907389654981014e17,-2.911918299303389e17,-2.916446943625763e17,-2.920975587948138e17,-2.9255042322705126e17,-2.930032876592887e17,-2.934561520915262e17,-2.9390901652376365e17,-2.9436188095600115e17,-2.948147453882386e17,-2.952676098204761e17,-2.957204742527136e17,-2.96173338684951e17,-2.966262031171885e17,-2.970790675494259e17,-2.975319319816634e17,-2.9798479641390086e17,-2.984376608461384e17,-2.988905252783758e17,-2.993433897106133e17,-2.9979625414285075e17,-3.002491185750882e17,-3.007019830073257e17,-3.0115484743956314e17,-3.0160771187180064e17,-3.020605763040381e17,-3.025134407362756e17,-3.02966305168513e17,-3.034191696007505e17,-3.038720340329879e17,-3.043248984652254e17,-3.047777628974629e17,-3.0523062732970035e17,-3.0568349176193786e17,-3.061363561941753e17,-3.065892206264128e17,-3.070420850586502e17,-3.0749494949088774e17,-3.079478139231252e17,-3.084006783553626e17,-3.0885354278760006e17,-3.093064072198376e17,-3.097592716520751e17,-3.1021213608431245e17,-3.1066500051655e17,-3.1111786494878746e17,-3.1157072938102496e17,-3.1202359381326234e17,-3.1247645824549984e17,-3.1292932267773734e17,-3.133821871099747e17,-3.138350515422122e17,-3.142879159744497e17,-3.147407804066872e17,-3.151936448389246e17,-3.156465092711622e17,-3.160993737033996e17,-3.1655223813563706e17,-3.170051025678745e17,-3.17457967000112e17,-3.179108314323495e17,-3.183636958645869e17,-3.188165602968244e17,-3.192694247290619e17,-3.197222891612994e17,-3.201751535935368e17,-3.206280180257743e17,-3.210808824580118e17,-3.2153374689024915e17,-3.2198661132248666e17,-3.2243947575472416e17,-3.2289234018696166e17,-3.2334520461919904e17,-3.2379806905143654e17,-3.2425093348367405e17,-3.247037979159114e17,-3.251566623481489e17,-3.256095267803864e17,-3.2606239121262394e17,-3.265152556448613e17,-3.269681200770988e17,-3.274209845093363e17,-3.278738489415737e17,-3.283267133738112e17,-3.287795778060487e17,-3.292324422382862e17,-3.296853066705236e17,-3.301381711027611e17,-3.305910355349986e17,-3.3104389996723603e17,-3.314967643994735e17,-3.319496288317109e17,-3.324024932639485e17,-3.3285535769618586e17,-3.3330822212842336e17,-3.3376108656066086e17,-3.342139509928983e17,-3.3466681542513574e17,-3.3511967985737325e17,-3.3557254428961075e17,-3.360254087218481e17,-3.364782731540856e17,-3.369311375863231e17,-3.373840020185606e17,-3.37836866450798e17,-3.382897308830355e17,-3.38742595315273e17,-3.3919545974751046e17,-3.396483241797479e17,-3.4010118861198534e17,-3.405540530442229e17,-3.410069174764603e17,-3.414597819086978e17,-3.4191264634093523e17,-3.4236551077317274e17,-3.428183752054102e17,-3.432712396376477e17,-3.437241040698852e17,-3.4417696850212256e17,-3.4462983293436006e17,-3.450826973665975e17,-3.45535561798835e17,-3.4598842623107245e17,-3.4644129066330995e17,-3.468941550955474e17,-3.473470195277849e17,-3.4779988396002234e17,-3.482527483922598e17,-3.487056128244973e17,-3.491584772567347e17,-3.496113416889722e17,-3.5006420612120966e17,-3.505170705534472e17,-3.509699349856846e17,-3.514227994179221e17,-3.518756638501595e17,-3.52328528282397e17,-3.527813927146345e17,-3.5323425714687194e17,-3.5368712157910944e17,-3.541399860113469e17,-3.545928504435844e17,-3.5504571487582176e17,-3.554985793080593e17,-3.5595144374029677e17,-3.564043081725342e17,-3.5685717260477165e17,-3.5731003703700915e17,-3.5776290146924666e17,-3.58215765901484e17,-3.586686303337216e17,-3.5912149476595904e17,-3.5957435919819654e17,-3.600272236304339e17,-3.604800880626714e17,-3.609329524949089e17,-3.613858169271463e17,-3.618386813593838e17,-3.622915457916213e17,-3.627444102238588e17,-3.631972746560962e17,-3.6365013908833376e17,-3.641030035205712e17,-3.645558679528086e17,-3.650087323850461e17,-3.654615968172836e17,-3.659144612495211e17,-3.6636732568175846e17,-3.6682019011399597e17,-3.672730545462335e17,-3.67725918978471e17,-3.6817878341070835e17,-3.6863164784294586e17,-3.6908451227518336e17,-3.6953737670742074e17,-3.6999024113965824e17,-3.7044310557189574e17,-3.7089597000413325e17,-3.713488344363706e17,-3.7180169886860806e17,-3.7225456330084563e17,-3.72707427733083e17,-3.731602921653205e17,-3.73613156597558e17,-3.740660210297955e17,-3.745188854620329e17,-3.749717498942704e17,-3.754246143265079e17,-3.758774787587453e17,-3.763303431909828e17,-3.767832076232203e17,-3.772360720554578e17,-3.7768893648769517e17,-3.781418009199327e17,-3.785946653521702e17,-3.790475297844076e17,-3.7950039421664506e17,-3.799532586488825e17,-3.8040612308112006e17,-3.8085898751335744e17,-3.8131185194559494e17,-3.8176471637783245e17,-3.822175808100699e17,-3.826704452423073e17,-3.8312330967454483e17,-3.8357617410678234e17,-3.840290385390197e17,-3.844819029712572e17,-3.8493476740349466e17,-3.8538763183573216e17,-3.858404962679696e17,-3.862933607002071e17,-3.867462251324446e17,-3.8719908956468205e17,-3.876519539969195e17,-3.881048184291569e17,-3.885576828613944e17,-3.890105472936319e17,-3.894634117258694e17,-3.899162761581068e17,-3.903691405903443e17,-3.9082200502258176e17,-3.9127486945481926e17,-3.917277338870568e17,-3.9218059831929414e17,-3.9263346275153165e17,-3.930863271837691e17,-3.935391916160066e17,-3.9399205604824403e17,-3.9444492048048154e17,-3.94897784912719e17,-3.953506493449565e17,-3.958035137771939e17,-3.9625637820943136e17,-3.9670924264166886e17,-3.971621070739063e17,-3.976149715061438e17,-3.9806783593838125e17,-3.9852070037061875e17,-3.989735648028562e17,-3.994264292350937e17,-3.998792936673311e17,-4.003321580995686e17,-4.007850225318061e17,-4.012378869640435e17,-4.01690751396281e17,-4.0214361582851846e17,-4.02596480260756e17,-4.0304934469299334e17,-4.035022091252309e17,-4.0395507355746835e17,-4.044079379897058e17,-4.0486080242194323e17,-4.0531366685418074e17,-4.0576653128641824e17,-4.062193957186556e17,-4.066722601508932e17,-4.071251245831306e17,-4.075779890153681e17,-4.080308534476055e17,-4.08483717879843e17,-4.089365823120805e17,-4.093894467443179e17,-4.098423111765554e17,-4.102951756087929e17,-4.107480400410304e17,-4.112009044732678e17,-4.1165376890550534e17,-4.121066333377428e17,-4.1255949776998016e17,-4.1301236220221766e17,-4.134652266344552e17,-4.139180910666927e17,-4.1437095549893005e17,-4.1482381993116755e17,-4.1527668436340506e17,-4.1572954879564243e17,-4.1618241322787994e17,-4.1663527766011744e17,-4.1708814209235494e17,-4.175410065245923e17,-4.179938709568298e17,-4.184467353890673e17,-4.188995998213048e17,-4.193524642535422e17,-4.1980532868577965e17,-4.202581931180172e17,-4.207110575502546e17,-4.211639219824921e17,-4.216167864147296e17,-4.220696508469671e17,-4.225225152792045e17,-4.22975379711442e17,-4.234282441436795e17,-4.2388110857591686e17,-4.243339730081544e17,-4.247868374403918e17,-4.252397018726294e17,-4.2569256630486675e17,-4.2614543073710426e17,-4.2659829516934176e17,-4.270511596015792e17,-4.2750402403381664e17,-4.279568884660541e17,-4.2840975289829165e17,-4.28862617330529e17,-4.293154817627665e17,-4.2976834619500397e17,-4.302212106272415e17,-4.306740750594789e17,-4.311269394917164e17,-4.315798039239539e17,-4.320326683561913e17,-4.324855327884288e17,-4.3293839722066624e17,-4.3339126165290374e17,-4.338441260851412e17,-4.342969905173787e17,-4.347498549496161e17,-4.3520271938185363e17,-4.356555838140911e17,-4.361084482463285e17,-4.36561312678566e17,-4.3701417711080346e17,-4.3746704154304096e17,-4.379199059752784e17,-4.383727704075159e17,-4.3882563483975334e17,-4.3927849927199085e17,-4.397313637042283e17,-4.401842281364657e17,-4.406370925687032e17,-4.410899570009407e17,-4.415428214331782e17,-4.419956858654156e17,-4.424485502976531e17,-4.4290141472989056e17,-4.4335427916212806e17,-4.438071435943655e17,-4.4426000802660294e17,-4.4471287245884045e17,-4.451657368910779e17,-4.456186013233154e17,-4.4607146575555283e17,-4.4652433018779034e17,-4.469771946200278e17,-4.474300590522653e17,-4.4788292348450266e17,-4.4833578791674016e17,-4.4878865234897766e17,-4.492415167812151e17,-4.496943812134526e17,-4.5014724564569005e17,-4.5060011007792755e17,-4.510529745101649e17,-4.515058389424025e17,-4.5195870337463994e17,-4.524115678068774e17,-4.528644322391148e17,-4.533172966713523e17,-4.537701611035898e17,-4.542230255358272e17,-4.546758899680648e17,-4.551287544003022e17,-4.555816188325397e17,-4.560344832647771e17,-4.564873476970146e17,-4.569402121292521e17,-4.573930765614895e17,-4.57845940993727e17,-4.582988054259645e17,-4.58751669858202e17,-4.5920453429043936e17,-4.596573987226769e17,-4.6011026315491437e17,-4.6056312758715174e17,-4.6101599201938925e17,-4.6146885645162675e17,-4.6192172088386426e17,-4.623745853161016e17,-4.6282744974833914e17,-4.6328031418057664e17,-4.63733178612814e17,-4.641860430450515e17,-4.64638907477289e17,-4.650917719095265e17,-4.655446363417639e17,-4.659975007740014e17,-4.664503652062389e17,-4.6690322963847635e17,-4.673560940707138e17,-4.6780895850295123e17,-4.682618229351888e17,-4.687146873674262e17,-4.691675517996637e17,-4.696204162319012e17,-4.700732806641387e17,-4.7052614509637606e17,-4.7097900952861357e17,-4.714318739608511e17,-4.7188473839308845e17,-4.7233760282532595e17,-4.727904672575634e17,-4.7324333168980096e17,-4.7369619612203834e17,-4.7414906055427584e17,-4.7460192498651334e17,-4.750547894187508e17,-4.755076538509882e17,-4.7596051828322566e17,-4.7641338271546323e17,-4.768662471477006e17,-4.773191115799381e17,-4.7777197601217555e17,-4.7822484044441306e17,-4.786777048766505e17,-4.79130569308888e17,-4.795834337411255e17,-4.800362981733629e17,-4.804891626056004e17,-4.809420270378378e17,-4.813948914700753e17,-4.8184775590231277e17,-4.823006203345503e17,-4.827534847667877e17,-4.832063491990252e17,-4.8365921363126266e17,-4.841120780635001e17,-4.845649424957376e17,-4.8501780692797504e17,-4.8547067136021254e17,-4.8592353579245e17,-4.863764002246875e17,-4.868292646569249e17,-4.8728212908916243e17,-4.877349935213998e17,-4.881878579536373e17,-4.886407223858748e17,-4.8909358681811226e17,-4.8954645125034976e17,-4.899993156825872e17,-4.904521801148247e17,-4.909050445470621e17,-4.9135790897929965e17,-4.918107734115371e17,-4.922636378437745e17,-4.92716502276012e17,-4.931693667082495e17,-4.93622231140487e17,-4.940750955727244e17,-4.945279600049619e17,-4.9498082443719936e17,-4.9543368886943686e17,-4.9588655330167424e17,-4.9633941773391174e17,-4.9679228216614925e17,-4.972451465983867e17,-4.976980110306242e17,-4.9815087546286163e17,-4.9860373989509914e17,-4.990566043273365e17,-4.995094687595741e17,-4.999623331918115e17,-5.0041519762404896e17,-5.008680620562864e17,-5.013209264885239e17,-5.017737909207614e17,-5.022266553529988e17,-5.0267951978523635e17,-5.031323842174738e17,-5.035852486497113e17,-5.040381130819487e17,-5.044909775141862e17,-5.049438419464237e17,-5.0539670637866106e17,-5.0584957081089856e17,-5.0630243524313606e17,-5.067552996753736e17,-5.0720816410761094e17,-5.076610285398485e17,-5.0811389297208595e17,-5.085667574043233e17,-5.0901962183656083e17,-5.0947248626879834e17,-5.0992535070103584e17,-5.103782151332732e17,-5.108310795655107e17,-5.112839439977482e17,-5.117368084299856e17,-5.121896728622231e17,-5.126425372944606e17,-5.130954017266981e17,-5.135482661589355e17,-5.14001130591173e17,-5.144539950234105e17,-5.1490685945564794e17,-5.153597238878854e17,-5.158125883201228e17,-5.162654527523604e17,-5.1671831718459776e17,-5.1717118161683526e17,-5.176240460490728e17,-5.180769104813102e17,-5.1852977491354765e17,-5.1898263934578515e17,-5.1943550377802266e17,-5.1988836821026003e17,-5.2034123264249754e17,-5.20794097074735e17,-5.2124696150697254e17,-5.216998259392099e17,-5.221526903714474e17,-5.226055548036849e17,-5.2305841923592237e17,-5.235112836681598e17,-5.2396414810039725e17,-5.244170125326348e17,-5.248698769648722e17,-5.253227413971097e17,-5.2577560582934714e17,-5.2622847026158464e17,-5.266813346938221e17,-5.271341991260596e17,-5.275870635582971e17,-5.2803992799053446e17,-5.28492792422772e17,-5.289456568550094e17,-5.293985212872469e17,-5.2985138571948435e17,-5.3030425015172186e17,-5.307571145839593e17,-5.312099790161968e17,-5.3166284344843424e17,-5.321157078806717e17,-5.325685723129092e17,-5.330214367451466e17,-5.334743011773841e17,-5.3392716560962157e17,-5.343800300418591e17,-5.348328944740965e17,-5.35285758906334e17,-5.357386233385714e17,-5.361914877708089e17,-5.366443522030464e17,-5.3709721663528384e17,-5.3755008106752134e17,-5.380029454997588e17,-5.384558099319963e17,-5.3890867436423366e17,-5.3936153879647123e17,-5.398144032287087e17,-5.402672676609461e17,-5.4072013209318355e17,-5.4117299652542106e17,-5.4162586095765856e17,-5.4207872538989594e17,-5.425315898221335e17,-5.4298445425437094e17,-5.4343731868660845e17,-5.438901831188458e17,-5.443430475510833e17,-5.447959119833208e17,-5.452487764155583e17,-5.457016408477957e17,-5.461545052800332e17,-5.466073697122707e17,-5.470602341445081e17,-5.4751309857674566e17,-5.479659630089831e17,-5.4841882744122054e17,-5.48871691873458e17,-5.493245563056955e17,-5.49777420737933e17,-5.502302851701704e17,-5.506831496024079e17,-5.511360140346454e17,-5.515888784668829e17,-5.5204174289912026e17,-5.5249460733135776e17,-5.5294747176359526e17,-5.5340033619583264e17,-5.5385320062807014e17,-5.5430606506030765e17,-5.5475892949254515e17,-5.552117939247825e17,-5.556646583570201e17,-5.5611752278925754e17,-5.565703872214949e17,-5.570232516537324e17,-5.574761160859699e17,-5.579289805182074e17,-5.583818449504448e17,-5.588347093826823e17,-5.592875738149198e17,-5.597404382471572e17,-5.601933026793947e17,-5.606461671116322e17,-5.610990315438697e17,-5.615518959761071e17,-5.620047604083446e17,-5.624576248405821e17,-5.629104892728195e17,-5.6336335370505696e17,-5.638162181372944e17,-5.6426908256953197e17,-5.6472194700176934e17,-5.6517481143400685e17,-5.6562767586624435e17,-5.660805402984818e17,-5.665334047307192e17,-5.6698626916295674e17,-5.6743913359519424e17,-5.678919980274316e17,-5.683448624596691e17,-5.6879772689190656e17,-5.6925059132414406e17,-5.697034557563815e17,-5.70156320188619e17,-5.706091846208565e17,-5.7106204905309395e17,-5.715149134853314e17,-5.7196777791756883e17,-5.724206423498064e17,-5.728735067820438e17,-5.733263712142813e17,-5.737792356465187e17,-5.742321000787562e17,-5.7468496451099366e17,-5.7513782894323117e17,-5.755906933754687e17,-5.7604355780770605e17,-5.764964222399436e17,-5.76949286672181e17,-5.774021511044184e17,-5.77855015536656e17,-5.783078799688934e17,-5.787607444011309e17,-5.792136088333683e17,-5.796664732656058e17,-5.801193376978433e17,-5.805722021300808e17,-5.810250665623182e17,-5.814779309945556e17,-5.819307954267932e17,-5.823836598590307e17,-5.828365242912681e17,-5.832893887235055e17,-5.83742253155743e17,-5.841951175879805e17,-5.84647982020218e17,-5.851008464524554e17,-5.855537108846929e17,-5.860065753169304e17,-5.864594397491679e17,-5.869123041814053e17,-5.873651686136428e17,-5.878180330458802e17,-5.882708974781178e17,-5.887237619103551e17,-5.891766263425926e17,-5.896294907748301e17,-5.900823552070675e17,-5.905352196393051e17,-5.909880840715425e17,-5.9144094850378e17,-5.918938129360174e17,-5.92346677368255e17,-5.927995418004923e17,-5.932524062327299e17,-5.937052706649674e17,-5.941581350972047e17,-5.946109995294422e17,-5.950638639616797e17,-5.955167283939172e17,-5.959695928261546e17,-5.964224572583922e17,-5.968753216906296e17,-5.973281861228671e17,-5.977810505551044e17,-5.98233914987342e17,-5.986867794195795e17,-5.99139643851817e17,-5.995925082840544e17,-6.00045372716292e17,-6.004982371485293e17,-6.009511015807667e17,-6.014039660130043e17,-6.018568304452417e17,-6.023096948774793e17,-6.027625593097166e17,-6.032154237419542e17,-6.036682881741916e17,-6.041211526064289e17,-6.045740170386665e17,-6.05026881470904e17,-6.054797459031415e17,-6.05932610335379e17,-6.063854747676165e17,-6.068383391998538e17,-6.072912036320914e17,-6.077440680643287e17,-6.081969324965663e17,-6.086497969288038e17,-6.091026613610412e17,-6.095555257932787e17,-6.100083902255163e17,-6.104612546577536e17,-6.10914119089991e17,-6.113669835222286e17,-6.11819847954466e17,-6.122727123867035e17,-6.127255768189409e17,-6.131784412511785e17,-6.136313056834159e17,-6.140841701156532e17,-6.145370345478908e17,-6.149898989801284e17,-6.154427634123658e17,-6.158956278446033e17,-6.163484922768408e17,-6.168013567090781e17,-6.172542211413156e17,-6.17707085573553e17,-6.181599500057906e17,-6.186128144380282e17,-6.190656788702655e17,-6.19518543302503e17,-6.199714077347405e17,-6.204242721669778e17,-6.208771365992154e17,-6.213300010314529e17,-6.217828654636904e17,-6.222357298959278e17,-6.226885943281652e17,-6.231414587604027e17,-6.235943231926401e17,-6.240471876248776e17,-6.245000520571151e17,-6.249529164893527e17,-6.2540578092159e17,-6.258586453538276e17,-6.26311509786065e17,-6.267643742183025e17,-6.272172386505399e17,-6.276701030827773e17,-6.281229675150149e17,-6.285758319472524e17,-6.290286963794898e17,-6.294815608117272e17,-6.299344252439648e17,-6.303872896762021e17,-6.308401541084397e17,-6.312930185406772e17,-6.317458829729146e17,-6.321987474051521e17,-6.326516118373894e17,-6.33104476269627e17,-6.335573407018644e17,-6.340102051341019e17,-6.344630695663395e17,-6.34915933998577e17,-6.353687984308143e17,-6.358216628630518e17,-6.362745272952893e17,-6.367273917275267e17,-6.371802561597642e17,-6.376331205920017e17,-6.380859850242392e17,-6.385388494564767e17,-6.38991713888714e17,-6.394445783209516e17,-6.39897442753189e17,-6.403503071854264e17,-6.40803171617664e17,-6.412560360499016e17,-6.417089004821389e17,-6.421617649143763e17,-6.426146293466139e17,-6.430674937788513e17,-6.435203582110888e17,-6.439732226433262e17,-6.444260870755638e17,-6.448789515078012e17,-6.453318159400385e17,-6.457846803722761e17,-6.462375448045137e17,-6.46690409236751e17,-6.471432736689885e17,-6.475961381012261e17,-6.480490025334634e17,-6.485018669657009e17,-6.489547313979383e17,-6.494075958301759e17,-6.498604602624133e17,-6.503133246946508e17,-6.507661891268883e17,-6.512190535591259e17,-6.516719179913631e17,-6.521247824236006e17,-6.525776468558382e17,-6.530305112880755e17,-6.534833757203131e17,-6.539362401525505e17,-6.543891045847881e17,-6.548419690170254e17,-6.552948334492628e17,-6.557476978815004e17,-6.562005623137379e17,-6.566534267459753e17,-6.571062911782129e17,-6.575591556104504e17,-6.580120200426876e17,-6.584648844749252e17,-6.589177489071626e17,-6.593706133394002e17,-6.598234777716376e17,-6.602763422038751e17,-6.607292066361126e17,-6.611820710683501e17,-6.616349355005874e17,-6.62087799932825e17,-6.625406643650625e17,-6.629935287972998e17,-6.634463932295374e17,-6.638992576617748e17,-6.643521220940123e17,-6.648049865262497e17,-6.652578509584872e17,-6.657107153907247e17,-6.661635798229622e17,-6.666164442551996e17,-6.670693086874372e17,-6.675221731196748e17,-6.67975037551912e17,-6.684279019841495e17,-6.68880766416387e17,-6.693336308486244e17,-6.69786495280862e17,-6.702393597130994e17,-6.70692224145337e17,-6.711450885775743e17,-6.715979530098117e17,-6.720508174420493e17,-6.725036818742867e17,-6.729565463065242e17,-6.734094107387617e17,-6.738622751709992e17,-6.743151396032365e17,-6.74768004035474e17,-6.752208684677115e17,-6.756737328999489e17,-6.761265973321865e17,-6.76579461764424e17,-6.770323261966615e17,-6.774851906288988e17,-6.779380550611363e17,-6.783909194933738e17,-6.788437839256113e17,-6.792966483578487e17,-6.797495127900863e17,-6.802023772223237e17,-6.80655241654561e17,-6.811081060867986e17,-6.81560970519036e17,-6.820138349512736e17,-6.82466699383511e17,-6.829195638157485e17,-6.83372428247986e17,-6.838252926802232e17,-6.842781571124608e17,-6.847310215446984e17,-6.851838859769358e17,-6.856367504091732e17,-6.860896148414108e17,-6.865424792736483e17,-6.869953437058857e17,-6.874482081381231e17,-6.879010725703606e17,-6.883539370025981e17,-6.888068014348355e17,-6.89259665867073e17,-6.897125302993106e17,-6.901653947315479e17,-6.906182591637853e17,-6.910711235960229e17,-6.915239880282604e17,-6.919768524604978e17,-6.924297168927354e17,-6.928825813249728e17,-6.933354457572102e17,-6.937883101894476e17,-6.942411746216851e17,-6.946940390539227e17,-6.951469034861601e17,-6.955997679183976e17,-6.960526323506351e17,-6.965054967828724e17,-6.969583612151099e17,-6.974112256473475e17,-6.978640900795849e17,-6.983169545118225e17,-6.987698189440598e17,-6.992226833762973e17,-6.996755478085348e17,-7.001284122407721e17,-7.005812766730097e17,-7.010341411052472e17,-7.014870055374847e17,-7.019398699697221e17,-7.023927344019597e17,-7.02845598834197e17,-7.032984632664346e17,-7.037513276986719e17,-7.042041921309094e17,-7.04657056563147e17,-7.051099209953843e17,-7.055627854276219e17,-7.060156498598593e17,-7.064685142920968e17,-7.069213787243342e17,-7.073742431565718e17,-7.078271075888092e17,-7.082799720210467e17,-7.087328364532841e17,-7.091857008855215e17,-7.096385653177591e17,-7.100914297499964e17,-7.10544294182234e17,-7.109971586144716e17,-7.11450023046709e17,-7.119028874789464e17,-7.12355751911184e17,-7.128086163434213e17,-7.132614807756588e17,-7.137143452078962e17,-7.141672096401338e17,-7.146200740723713e17,-7.150729385046086e17,-7.155258029368462e17,-7.159786673690836e17,-7.16431531801321e17,-7.168843962335585e17,-7.173372606657961e17,-7.177901250980335e17,-7.18242989530271e17,-7.186958539625084e17,-7.191487183947459e17,-7.196015828269833e17,-7.200544472592207e17,-7.205073116914583e17,-7.209601761236959e17,-7.214130405559332e17,-7.218659049881708e17,-7.223187694204082e17,-7.227716338526456e17,-7.232244982848831e17,-7.236773627171205e17,-7.241302271493581e17,-7.245830915815955e17,-7.25035956013833e17,-7.254888204460704e17,-7.25941684878308e17,-7.263945493105453e17,-7.268474137427828e17,-7.273002781750204e17,-7.277531426072577e17,-7.282060070394953e17,-7.286588714717326e17,-7.291117359039702e17,-7.295646003362076e17,-7.30017464768445e17,-7.304703292006826e17,-7.309231936329202e17,-7.313760580651575e17,-7.31828922497395e17,-7.322817869296325e17,-7.327346513618698e17,-7.331875157941074e17,-7.336403802263448e17,-7.340932446585824e17,-7.345461090908198e17,-7.349989735230572e17,-7.354518379552947e17,-7.359047023875322e17,-7.363575668197696e17,-7.368104312520072e17,-7.372632956842447e17,-7.37716160116482e17,-7.381690245487195e17,-7.386218889809569e17,-7.390747534131945e17,-7.395276178454319e17,-7.399804822776694e17,-7.40433346709907e17,-7.408862111421444e17,-7.413390755743817e17,-7.417919400066193e17,-7.422448044388568e17,-7.426976688710941e17,-7.431505333033317e17,-7.436033977355692e17,-7.440562621678066e17,-7.44509126600044e17,-7.449619910322815e17,-7.45414855464519e17,-7.458677198967565e17,-7.463205843289939e17,-7.467734487612315e17,-7.47226313193469e17,-7.476791776257062e17,-7.481320420579438e17,-7.485849064901812e17,-7.490377709224187e17,-7.494906353546563e17,-7.499434997868937e17,-7.503963642191313e17,-7.508492286513686e17,-7.51302093083606e17,-7.517549575158436e17,-7.52207821948081e17,-7.526606863803185e17,-7.53113550812556e17,-7.535664152447936e17,-7.540192796770308e17,-7.544721441092684e17,-7.549250085415058e17,-7.553778729737434e17,-7.558307374059808e17,-7.562836018382182e17,-7.567364662704558e17,-7.571893307026931e17,-7.576421951349306e17,-7.580950595671681e17,-7.585479239994057e17,-7.59000788431643e17,-7.594536528638806e17,-7.59906517296118e17,-7.603593817283553e17,-7.608122461605929e17,-7.612651105928303e17,-7.617179750250679e17,-7.621708394573053e17,-7.626237038895428e17,-7.630765683217804e17,-7.635294327540179e17,-7.639822971862551e17,-7.644351616184927e17,-7.648880260507301e17,-7.653408904829676e17,-7.657937549152051e17,-7.662466193474426e17,-7.666994837796801e17,-7.671523482119174e17,-7.676052126441549e17,-7.680580770763924e17,-7.685109415086299e17,-7.689638059408673e17,-7.694166703731049e17,-7.698695348053423e17,-7.703223992375796e17,-7.707752636698172e17,-7.712281281020547e17,-7.716809925342921e17,-7.721338569665297e17,-7.725867213987671e17,-7.730395858310047e17,-7.73492450263242e17,-7.739453146954794e17,-7.74398179127717e17,-7.748510435599544e17,-7.753039079921919e17,-7.757567724244294e17,-7.762096368566669e17,-7.766625012889042e17,-7.771153657211418e17,-7.775682301533792e17,-7.780210945856168e17,-7.784739590178542e17,-7.789268234500916e17,-7.793796878823292e17,-7.798325523145664e17,-7.80285416746804e17,-7.807382811790415e17,-7.81191145611279e17,-7.816440100435164e17,-7.82096874475754e17,-7.825497389079914e17,-7.830026033402289e17,-7.834554677724663e17,-7.839083322047037e17,-7.843611966369413e17,-7.848140610691786e17,-7.852669255014162e17,-7.857197899336538e17,-7.861726543658911e17,-7.866255187981285e17,-7.870783832303661e17,-7.875312476626035e17,-7.87984112094841e17,-7.884369765270785e17,-7.88889840959316e17,-7.893427053915534e17,-7.897955698237907e17,-7.902484342560283e17,-7.907012986882659e17,-7.911541631205033e17,-7.916070275527407e17,-7.920598919849783e17,-7.925127564172156e17,-7.92965620849453e17,-7.934184852816906e17,-7.938713497139281e17,-7.943242141461656e17,-7.94777078578403e17,-7.952299430106405e17,-7.95682807442878e17,-7.961356718751153e17,-7.965885363073528e17,-7.970414007395904e17,-7.974942651718278e17,-7.979471296040653e17,-7.983999940363028e17,-7.988528584685402e17,-7.993057229007777e17,-7.99758587333015e17,-8.002114517652526e17,-8.006643161974902e17,-8.011171806297275e17,-8.01570045061965e17,-8.020229094942025e17,-8.0247577392644e17,-8.029286383586774e17,-8.03381502790915e17,-8.038343672231524e17,-8.042872316553898e17,-8.047400960876273e17,-8.051929605198647e17,-8.056458249521023e17,-8.060986893843396e17,-8.065515538165772e17,-8.070044182488147e17,-8.074572826810522e17,-8.079101471132896e17,-8.08363011545527e17,-8.088158759777645e17,-8.092687404100019e17,-8.097216048422394e17,-8.101744692744769e17,-8.106273337067145e17,-8.110801981389518e17,-8.115330625711892e17,-8.119859270034268e17,-8.124387914356641e17,-8.128916558679017e17,-8.133445203001393e17,-8.137973847323767e17,-8.142502491646141e17,-8.147031135968516e17,-8.15155978029089e17,-8.156088424613265e17,-8.160617068935639e17,-8.165145713258015e17,-8.16967435758039e17,-8.174203001902764e17,-8.178731646225139e17,-8.183260290547514e17,-8.187788934869888e17,-8.192317579192262e17,-8.196846223514637e17,-8.201374867837012e17,-8.205903512159387e17,-8.210432156481761e17,-8.214960800804136e17,-8.219489445126511e17,-8.224018089448884e17,-8.22854673377126e17,-8.233075378093636e17,-8.237604022416009e17,-8.242132666738385e17,-8.246661311060758e17,-8.251189955383133e17,-8.255718599705508e17,-8.260247244027882e17,-8.264775888350258e17,-8.269304532672634e17,-8.273833176995007e17,-8.278361821317381e17,-8.282890465639757e17,-8.28741910996213e17,-8.291947754284506e17,-8.29647639860688e17,-8.301005042929256e17,-8.30553368725163e17,-8.310062331574003e17,-8.314590975896379e17,-8.319119620218753e17,-8.323648264541128e17,-8.328176908863503e17,-8.332705553185879e17,-8.337234197508252e17,-8.341762841830627e17,-8.346291486153001e17,-8.350820130475377e17,-8.355348774797751e17,-8.359877419120125e17,-8.364406063442501e17,-8.368934707764876e17,-8.373463352087249e17,-8.377991996409624e17,-8.382520640732e17,-8.387049285054373e17,-8.391577929376749e17,-8.396106573699123e17,-8.400635218021498e17,-8.405163862343872e17,-8.409692506666246e17,-8.414221150988622e17,-8.418749795310996e17,-8.423278439633371e17,-8.427807083955747e17,-8.432335728278122e17,-8.436864372600494e17,-8.44139301692287e17,-8.445921661245244e17,-8.450450305567619e17,-8.454978949889994e17,-8.459507594212369e17,-8.464036238534744e17,-8.468564882857117e17,-8.473093527179492e17,-8.477622171501868e17,-8.482150815824242e17,-8.486679460146616e17,-8.491208104468992e17,-8.495736748791366e17,-8.50026539311374e17,-8.504794037436115e17,-8.50932268175849e17,-8.513851326080865e17,-8.51837997040324e17,-8.522908614725614e17,-8.52743725904799e17,-8.531965903370363e17,-8.536494547692737e17,-8.541023192015113e17,-8.545551836337487e17,-8.550080480659862e17,-8.554609124982237e17,-8.559137769304612e17,-8.563666413626985e17,-8.56819505794936e17,-8.572723702271735e17,-8.577252346594111e17,-8.581780990916485e17,-8.58630963523886e17,-8.590838279561235e17,-8.595366923883607e17,-8.599895568205983e17,-8.604424212528358e17,-8.608952856850733e17,-8.613481501173107e17,-8.618010145495483e17,-8.622538789817857e17,-8.627067434140232e17,-8.631596078462606e17,-8.63612472278498e17,-8.640653367107356e17,-8.645182011429729e17,-8.649710655752105e17,-8.65423930007448e17,-8.658767944396855e17,-8.663296588719228e17,-8.667825233041604e17,-8.672353877363978e17,-8.676882521686353e17,-8.681411166008728e17,-8.685939810331103e17,-8.690468454653478e17,-8.69499709897585e17,-8.699525743298226e17,-8.704054387620602e17,-8.708583031942976e17,-8.71311167626535e17,-8.717640320587726e17,-8.7221689649101e17,-8.726697609232474e17,-8.731226253554849e17,-8.735754897877224e17,-8.740283542199599e17,-8.744812186521974e17,-8.749340830844348e17,-8.753869475166724e17,-8.758398119489096e17,-8.762926763811471e17,-8.767455408133847e17,-8.771984052456221e17,-8.776512696778596e17,-8.781041341100972e17,-8.785569985423346e17,-8.79009862974572e17,-8.794627274068095e17,-8.799155918390469e17,-8.803684562712845e17,-8.808213207035218e17,-8.812741851357594e17,-8.817270495679969e17,-8.821799140002342e17,-8.826327784324717e17,-8.830856428647092e17,-8.835385072969467e17,-8.839913717291841e17,-8.844442361614217e17,-8.848971005936591e17,-8.853499650258966e17,-8.858028294581339e17,-8.862556938903715e17,-8.86708558322609e17,-8.871614227548465e17,-8.876142871870839e17,-8.880671516193215e17,-8.885200160515588e17,-8.889728804837962e17,-8.894257449160338e17,-8.898786093482712e17,-8.903314737805088e17,-8.907843382127461e17,-8.912372026449837e17,-8.916900670772211e17,-8.921429315094584e17,-8.92595795941696e17,-8.930486603739336e17,-8.93501524806171e17,-8.939543892384084e17,-8.94407253670646e17,-8.948601181028833e17,-8.953129825351209e17,-8.957658469673582e17,-8.962187113995958e17,-8.966715758318333e17,-8.971244402640707e17,-8.975773046963082e17,-8.980301691285457e17,-8.984830335607831e17,-8.989358979930205e17,-8.993887624252581e17,-8.998416268574956e17,-9.00294491289733e17,-9.007473557219704e17,-9.012002201542079e17,-9.016530845864454e17,-9.021059490186828e17,-9.025588134509203e17,-9.030116778831579e17,-9.034645423153953e17,-9.039174067476328e17,-9.043702711798702e17,-9.048231356121076e17,-9.052760000443451e17,-9.057288644765825e17,-9.061817289088201e17,-9.066345933410577e17,-9.07087457773295e17,-9.075403222055324e17,-9.0799318663777e17,-9.084460510700073e17,-9.088989155022449e17,-9.093517799344824e17,-9.098046443667199e17,-9.102575087989573e17,-9.107103732311946e17,-9.111632376634322e17,-9.116161020956696e17,-9.120689665279071e17,-9.125218309601446e17,-9.129746953923822e17,-9.134275598246195e17,-9.13880424256857e17,-9.143332886890945e17,-9.14786153121332e17,-9.152390175535694e17,-9.156918819858068e17,-9.161447464180444e17,-9.165976108502819e17,-9.170504752825193e17,-9.175033397147567e17,-9.179562041469943e17,-9.184090685792316e17,-9.188619330114692e17,-9.193147974437068e17,-9.197676618759441e17,-9.202205263081816e17,-9.20673390740419e17,-9.211262551726565e17,-9.21579119604894e17,-9.220319840371314e17,-9.22484848469369e17,-9.229377129016065e17,-9.233905773338438e17,-9.238434417660813e17,-9.242963061983188e17,-9.247491706305562e17,-9.252020350627937e17,-9.256548994950312e17,-9.261077639272687e17,-9.265606283595062e17,-9.270134927917435e17,-9.27466357223981e17,-9.279192216562185e17,-9.28372086088456e17,-9.288249505206935e17,-9.292778149529311e17,-9.297306793851684e17,-9.301835438174058e17,-9.306364082496433e17,-9.310892726818808e17,-9.315421371141183e17,-9.319950015463557e17,-9.324478659785933e17,-9.329007304108307e17,-9.33353594843068e17,-9.338064592753056e17,-9.342593237075432e17,-9.347121881397805e17,-9.35165052572018e17,-9.356179170042555e17,-9.360707814364929e17,-9.365236458687304e17,-9.369765103009678e17,-9.374293747332054e17,-9.378822391654428e17,-9.383351035976803e17,-9.387879680299178e17,-9.392408324621554e17,-9.396936968943926e17,-9.401465613266301e17,-9.405994257588676e17,-9.41052290191105e17,-9.415051546233426e17,-9.4195801905558e17,-9.424108834878176e17,-9.428637479200549e17,-9.433166123522924e17,-9.437694767845299e17,-9.442223412167674e17,-9.446752056490048e17,-9.451280700812424e17,-9.455809345134798e17,-9.460337989457171e17,-9.464866633779547e17,-9.469395278101921e17,-9.473923922424297e17,-9.478452566746671e17,-9.482981211069046e17,-9.487509855391421e17,-9.492038499713795e17,-9.496567144036169e17,-9.501095788358545e17,-9.505624432680919e17,-9.510153077003293e17,-9.514681721325669e17,-9.519210365648044e17,-9.523739009970417e17,-9.528267654292792e17,-9.532796298615167e17,-9.537324942937542e17,-9.541853587259917e17,-9.546382231582291e17,-9.550910875904667e17,-9.555439520227039e17,-9.559968164549414e17,-9.56449680887179e17,-9.569025453194164e17,-9.573554097516539e17,-9.578082741838915e17,-9.582611386161289e17,-9.587140030483663e17,-9.591668674806038e17,-9.596197319128412e17,-9.600725963450788e17,-9.605254607773161e17,-9.609783252095537e17,-9.614311896417912e17,-9.618840540740285e17,-9.62336918506266e17,-9.627897829385036e17,-9.63242647370741e17,-9.636955118029784e17,-9.64148376235216e17,-9.646012406674534e17,-9.650541050996909e17,-9.655069695319282e17,-9.659598339641658e17,-9.664126983964033e17,-9.668655628286408e17,-9.673184272608782e17,-9.677712916931158e17,-9.682241561253532e17,-9.686770205575905e17,-9.691298849898281e17,-9.695827494220655e17,-9.700356138543031e17,-9.704884782865404e17,-9.70941342718778e17,-9.713942071510156e17,-9.718470715832527e17,-9.722999360154903e17,-9.727528004477279e17,-9.732056648799653e17,-9.736585293122028e17,-9.741113937444403e17,-9.745642581766778e17,-9.750171226089152e17,-9.754699870411525e17,-9.759228514733901e17,-9.763757159056276e17,-9.76828580337865e17,-9.772814447701025e17,-9.777343092023401e17,-9.781871736345774e17,-9.786400380668148e17,-9.790929024990524e17,-9.795457669312899e17,-9.799986313635273e17,-9.804514957957647e17,-9.809043602280023e17,-9.813572246602397e17,-9.81810089092477e17,-9.822629535247146e17,-9.827158179569522e17,-9.831686823891896e17,-9.836215468214271e17,-9.840744112536646e17,-9.84527275685902e17,-9.849801401181394e17,-9.85433004550377e17,-9.858858689826144e17,-9.86338733414852e17,-9.867915978470893e17,-9.872444622793268e17,-9.876973267115643e17,-9.881501911438016e17,-9.886030555760392e17,-9.890559200082767e17,-9.895087844405142e17,-9.899616488727516e17,-9.904145133049892e17,-9.908673777372265e17,-9.91320242169464e17,-9.917731066017014e17,-9.92225971033939e17,-9.926788354661765e17,-9.931316998984138e17,-9.935845643306514e17,-9.940374287628888e17,-9.944902931951263e17,-9.949431576273637e17,-9.953960220596013e17,-9.958488864918387e17,-9.963017509240762e17,-9.967546153563136e17,-9.97207479788551e17,-9.976603442207886e17,-9.981132086530259e17,-9.985660730852635e17,-9.99018937517501e17,-9.994718019497384e17,-9.999246663819759e17,-1.0003775308142134e18,-1.0008303952464508e18,-1.0012832596786883e18,-1.0017361241109257e18,-1.0021889885431633e18,-1.0026418529754008e18,-1.0030947174076381e18,-1.0035475818398756e18,-1.0040004462721132e18,-1.0044533107043505e18,-1.004906175136588e18,-1.0053590395688256e18,-1.005811904001063e18,-1.0062647684333005e18,-1.0067176328655378e18,-1.0071704972977754e18,-1.0076233617300128e18,-1.0080762261622502e18,-1.0085290905944878e18,-1.0089819550267254e18,-1.0094348194589627e18,-1.0098876838912001e18,-1.0103405483234377e18,-1.0107934127556751e18,-1.0112462771879126e18,-1.01169914162015e18,-1.0121520060523876e18,-1.012604870484625e18,-1.0130577349168623e18,-1.0135105993490999e18,-1.0139634637813375e18,-1.0144163282135748e18,-1.0148691926458124e18,-1.0153220570780499e18,-1.0157749215102872e18,-1.0162277859425247e18,-1.0166806503747621e18,-1.0171335148069997e18,-1.0175863792392371e18,-1.0180392436714746e18,-1.0184921081037121e18,-1.0189449725359497e18,-1.019397836968187e18,-1.0198507014004244e18,-1.020303565832662e18,-1.0207564302648993e18,-1.0212092946971369e18,-1.0216621591293743e18,-1.0221150235616119e18,-1.0225678879938493e18,-1.0230207524260867e18,-1.0234736168583242e18,-1.0239264812905617e18,-1.0243793457227991e18,-1.0248322101550367e18,-1.0252850745872742e18,-1.0257379390195116e18,-1.026190803451749e18,-1.0266436678839864e18,-1.027096532316224e18,-1.0275493967484614e18,-1.0280022611806989e18,-1.0284551256129364e18,-1.0289079900451739e18,-1.0293608544774112e18,-1.0298137189096488e18,-1.0302665833418863e18,-1.0307194477741236e18,-1.0311723122063612e18,-1.0316251766385987e18,-1.0320780410708361e18,-1.0325309055030735e18,-1.032983769935311e18,-1.0334366343675485e18,-1.033889498799786e18,-1.0343423632320234e18,-1.034795227664261e18,-1.0352480920964986e18,-1.0357009565287357e18,-1.0361538209609733e18,-1.0366066853932108e18,-1.0370595498254482e18,-1.0375124142576858e18,-1.0379652786899232e18,-1.0384181431221608e18,-1.0388710075543981e18,-1.0393238719866355e18,-1.0397767364188731e18,-1.0402296008511105e18,-1.040682465283348e18,-1.0411353297155855e18,-1.041588194147823e18,-1.0420410585800603e18,-1.0424939230122979e18,-1.0429467874445353e18,-1.0433996518767729e18,-1.0438525163090103e18,-1.0443053807412477e18,-1.0447582451734853e18,-1.0452111096057226e18,-1.0456639740379601e18,-1.0461168384701976e18,-1.0465697029024351e18,-1.0470225673346725e18,-1.0474754317669101e18,-1.0479282961991475e18,-1.0483811606313848e18,-1.0488340250636224e18,-1.0492868894958598e18,-1.0497397539280974e18,-1.0501926183603348e18,-1.0506454827925723e18,-1.0510983472248099e18,-1.051551211657047e18,-1.0520040760892846e18,-1.0524569405215222e18,-1.0529098049537596e18,-1.053362669385997e18,-1.0538155338182346e18,-1.0542683982504721e18,-1.0547212626827095e18,-1.055174127114947e18,-1.0556269915471844e18,-1.056079855979422e18,-1.0565327204116593e18,-1.0569855848438968e18,-1.0574384492761344e18,-1.0578913137083717e18,-1.0583441781406092e18,-1.0587970425728467e18,-1.0592499070050842e18,-1.0597027714373216e18,-1.0601556358695592e18,-1.0606085003017966e18,-1.061061364734034e18,-1.0615142291662714e18,-1.0619670935985089e18,-1.0624199580307465e18,-1.062872822462984e18,-1.0633256868952214e18,-1.063778551327459e18,-1.0642314157596963e18,-1.0646842801919337e18,-1.0651371446241713e18,-1.0655900090564087e18,-1.0660428734886463e18,-1.0664957379208836e18,-1.0669486023531212e18,-1.0674014667853586e18,-1.0678543312175959e18,-1.0683071956498335e18,-1.068760060082071e18,-1.0692129245143085e18,-1.0696657889465459e18,-1.0701186533787835e18,-1.0705715178110209e18,-1.0710243822432584e18,-1.0714772466754957e18,-1.0719301111077332e18,-1.0723829755399708e18,-1.0728358399722081e18,-1.0732887044044457e18,-1.0737415688366833e18,-1.0741944332689206e18,-1.074647297701158e18,-1.0751001621333956e18,-1.075553026565633e18,-1.0760058909978705e18,-1.0764587554301079e18,-1.0769116198623455e18,-1.0773644842945829e18,-1.0778173487268202e18,-1.0782702131590578e18,-1.0787230775912954e18,-1.0791759420235328e18,-1.0796288064557702e18,-1.0800816708880078e18,-1.0805345353202451e18,-1.0809873997524826e18,-1.08144026418472e18,-1.0818931286169576e18,-1.0823459930491951e18,-1.0827988574814324e18,-1.08325172191367e18,-1.0837045863459075e18,-1.0841574507781448e18,-1.0846103152103823e18,-1.0850631796426199e18,-1.0855160440748573e18,-1.0859689085070948e18,-1.0864217729393322e18,-1.0868746373715697e18,-1.0873275018038072e18,-1.0877803662360445e18,-1.0882332306682821e18,-1.0886860951005197e18,-1.089138959532757e18,-1.0895918239649946e18,-1.090044688397232e18,-1.0904975528294694e18,-1.0909504172617069e18,-1.0914032816939443e18,-1.0918561461261819e18,-1.0923090105584193e18,-1.0927618749906568e18,-1.0932147394228942e18,-1.0936676038551318e18,-1.0941204682873691e18,-1.0945733327196067e18,-1.0950261971518442e18,-1.0954790615840815e18,-1.0959319260163191e18,-1.0963847904485564e18,-1.096837654880794e18,-1.0972905193130314e18,-1.0977433837452689e18,-1.0981962481775064e18,-1.098649112609744e18,-1.0991019770419813e18,-1.0995548414742188e18,-1.1000077059064563e18,-1.1004605703386936e18,-1.1009134347709312e18,-1.1013662992031686e18,-1.1018191636354062e18,-1.1022720280676436e18,-1.102724892499881e18,-1.1031777569321185e18,-1.103630621364356e18,-1.1040834857965934e18,-1.104536350228831e18,-1.1049892146610685e18,-1.1054420790933059e18,-1.1058949435255433e18,-1.1063478079577809e18,-1.1068006723900183e18,-1.1072535368222557e18,-1.1077064012544932e18,-1.1081592656867308e18,-1.1086121301189682e18,-1.1090649945512055e18,-1.1095178589834431e18,-1.1099707234156806e18,-1.110423587847918e18,-1.1108764522801555e18,-1.1113293167123931e18,-1.1117821811446304e18,-1.1122350455768678e18,-1.1126879100091053e18,-1.1131407744413428e18,-1.1135936388735803e18,-1.1140465033058177e18,-1.1144993677380553e18,-1.1149522321702929e18,-1.11540509660253e18,-1.1158579610347676e18,-1.1163108254670052e18,-1.1167636898992425e18,-1.11721655433148e18,-1.1176694187637175e18,-1.1181222831959551e18,-1.1185751476281924e18,-1.1190280120604298e18,-1.1194808764926674e18,-1.1199337409249048e18,-1.1203866053571423e18,-1.1208394697893798e18,-1.1212923342216174e18,-1.1217451986538547e18,-1.1221980630860922e18,-1.1226509275183296e18,-1.1231037919505672e18,-1.1235566563828046e18,-1.124009520815042e18,-1.1244623852472796e18,-1.124915249679517e18,-1.1253681141117544e18,-1.1258209785439919e18,-1.1262738429762295e18,-1.1267267074084668e18,-1.1271795718407044e18,-1.1276324362729418e18,-1.1280853007051793e18,-1.1285381651374167e18,-1.1289910295696541e18,-1.1294438940018917e18,-1.1298967584341292e18,-1.1303496228663666e18,-1.1308024872986042e18,-1.1312553517308417e18,-1.1317082161630789e18,-1.1321610805953165e18,-1.1326139450275539e18,-1.1330668094597914e18,-1.1335196738920289e18,-1.1339725383242664e18,-1.1344254027565039e18,-1.1348782671887412e18,-1.1353311316209787e18,-1.1357839960532163e18,-1.1362368604854537e18,-1.1366897249176911e18,-1.1371425893499287e18,-1.1375954537821661e18,-1.1380483182144035e18,-1.138501182646641e18,-1.1389540470788785e18,-1.139406911511116e18,-1.1398597759433535e18,-1.1403126403755909e18,-1.1407655048078285e18,-1.1412183692400658e18,-1.1416712336723032e18,-1.1421240981045408e18,-1.1425769625367782e18,-1.1430298269690157e18,-1.1434826914012532e18,-1.1439355558334907e18,-1.144388420265728e18,-1.1448412846979656e18,-1.145294149130203e18,-1.1457470135624406e18,-1.146199877994678e18,-1.1466527424269155e18,-1.147105606859153e18,-1.1475584712913902e18,-1.1480113357236278e18,-1.1484642001558653e18,-1.1489170645881028e18,-1.1493699290203402e18,-1.1498227934525778e18,-1.1502756578848152e18,-1.1507285223170527e18,-1.1511813867492901e18,-1.1516342511815276e18,-1.1520871156137651e18,-1.1525399800460024e18,-1.15299284447824e18,-1.1534457089104776e18,-1.153898573342715e18,-1.1543514377749524e18,-1.15480430220719e18,-1.1552571666394273e18,-1.155710031071665e18,-1.1561628955039025e18,-1.1566157599361398e18,-1.157068624368377e18,-1.1575214888006147e18,-1.1579743532328522e18,-1.1584272176650895e18,-1.158880082097327e18,-1.1593329465295647e18,-1.159785810961802e18,-1.1602386753940393e18,-1.1606915398262769e18,-1.1611444042585144e18,-1.1615972686907517e18,-1.1620501331229893e18,-1.162502997555227e18,-1.1629558619874644e18,-1.1634087264197018e18,-1.163861590851939e18,-1.1643144552841766e18,-1.1647673197164142e18,-1.1652201841486515e18,-1.165673048580889e18,-1.1661259130131267e18,-1.166578777445364e18,-1.1670316418776015e18,-1.1674845063098388e18,-1.1679373707420764e18,-1.168390235174314e18,-1.1688430996065513e18,-1.1692959640387889e18,-1.1697488284710262e18,-1.1702016929032637e18,-1.1706545573355013e18,-1.171107421767739e18,-1.1715602861999762e18,-1.1720131506322138e18,-1.172466015064451e18,-1.1729188794966886e18,-1.173371743928926e18,-1.1738246083611635e18,-1.174277472793401e18,-1.1747303372256384e18,-1.175183201657876e18,-1.1756360660901135e18,-1.1760889305223508e18,-1.1765417949545882e18,-1.1769946593868257e18,-1.1774475238190633e18,-1.1779003882513006e18,-1.1783532526835382e18,-1.1788061171157757e18,-1.1792589815480133e18,-1.1797118459802506e18,-1.180164710412488e18,-1.1806175748447255e18,-1.1810704392769628e18,-1.1815233037092004e18,-1.181976168141438e18,-1.1824290325736755e18,-1.182881897005913e18,-1.1833347614381501e18,-1.183787625870388e18,-1.1842404903026253e18,-1.1846933547348626e18,-1.1851462191671004e18,-1.1855990835993375e18,-1.186051948031575e18,-1.1865048124638126e18,-1.1869576768960502e18,-1.1874105413282877e18,-1.187863405760525e18,-1.1883162701927624e18,-1.188769134625e18,-1.1892219990572375e18,-1.1896748634894748e18,-1.1901277279217126e18,-1.1905805923539497e18,-1.191033456786187e18,-1.1914863212184248e18,-1.1919391856506621e18,-1.1923920500828997e18,-1.1928449145151373e18,-1.1932977789473746e18,-1.1937506433796122e18,-1.1942035078118495e18,-1.194656372244087e18,-1.1951092366763246e18,-1.195562101108562e18,-1.1960149655407992e18,-1.196467829973037e18,-1.1969206944052744e18,-1.1973735588375117e18,-1.1978264232697495e18,-1.1982792877019866e18,-1.1987321521342244e18,-1.1991850165664617e18,-1.1996378809986993e18,-1.2000907454309368e18,-1.200543609863174e18,-1.2009964742954115e18,-1.201449338727649e18,-1.2019022031598866e18,-1.202355067592124e18,-1.2028079320243617e18,-1.2032607964565988e18,-1.203713660888836e18,-1.204166525321074e18,-1.2046193897533112e18,-1.205072254185549e18,-1.205525118617786e18,-1.2059779830500237e18,-1.2064308474822612e18,-1.2068837119144986e18,-1.207336576346736e18,-1.2077894407789737e18,-1.208242305211211e18,-1.2086951696434483e18,-1.2091480340756861e18,-1.2096008985079235e18,-1.210053762940161e18,-1.2105066273723983e18,-1.2109594918046356e18,-1.2114123562368735e18,-1.2118652206691108e18,-1.2123180851013484e18,-1.212770949533586e18,-1.213223813965823e18,-1.2136766783980605e18,-1.214129542830298e18,-1.2145824072625357e18,-1.2150352716947732e18,-1.2154881361270106e18,-1.215941000559248e18,-1.2163938649914854e18,-1.216846729423723e18,-1.2172995938559603e18,-1.2177524582881981e18,-1.2182053227204352e18,-1.2186581871526728e18,-1.2191110515849103e18,-1.2195639160171476e18,-1.2200167804493852e18,-1.2204696448816225e18,-1.22092250931386e18,-1.2213753737460977e18,-1.2218282381783352e18,-1.2222811026105725e18,-1.22273396704281e18,-1.2231868314750474e18,-1.2236396959072847e18,-1.2240925603395226e18,-1.2245454247717599e18,-1.2249982892039974e18,-1.2254511536362348e18,-1.225904018068472e18,-1.22635688250071e18,-1.2268097469329472e18,-1.2272626113651848e18,-1.2277154757974223e18,-1.2281683402296596e18,-1.228621204661897e18,-1.2290740690941345e18,-1.229526933526372e18,-1.2299797979586094e18,-1.230432662390847e18,-1.2308855268230843e18,-1.231338391255322e18,-1.2317912556875594e18,-1.2322441201197967e18,-1.2326969845520346e18,-1.2331498489842716e18,-1.2336027134165092e18,-1.2340555778487468e18,-1.2345084422809843e18,-1.2349613067132216e18,-1.235414171145459e18,-1.2358670355776965e18,-1.2363199000099338e18,-1.2367727644421716e18,-1.237225628874409e18,-1.2376784933066468e18,-1.2381313577388838e18,-1.2385842221711212e18,-1.239037086603359e18,-1.2394899510355963e18,-1.2399428154678339e18,-1.2403956799000712e18,-1.2408485443323087e18,-1.241301408764546e18,-1.2417542731967836e18,-1.2422071376290212e18,-1.2426600020612588e18,-1.243112866493496e18,-1.2435657309257334e18,-1.2440185953579712e18,-1.2444714597902085e18,-1.2449243242224458e18,-1.2453771886546834e18,-1.2458300530869207e18,-1.2462829175191583e18,-1.2467357819513958e18,-1.2471886463836334e18,-1.2476415108158707e18,-1.248094375248108e18,-1.2485472396803456e18,-1.2490001041125832e18,-1.2494529685448207e18,-1.249905832977058e18,-1.2503586974092956e18,-1.250811561841533e18,-1.2512644262737705e18,-1.251717290706008e18,-1.2521701551382454e18,-1.252623019570483e18,-1.2530758840027203e18,-1.2535287484349578e18,-1.2539816128671954e18,-1.254434477299433e18,-1.2548873417316703e18,-1.2553402061639076e18,-1.2557930705961452e18,-1.2562459350283825e18,-1.2566987994606203e18,-1.2571516638928576e18,-1.2576045283250952e18,-1.2580573927573325e18,-1.2585102571895698e18,-1.2589631216218076e18,-1.259415986054045e18,-1.2598688504862825e18,-1.2603217149185198e18,-1.2607745793507574e18,-1.2612274437829947e18,-1.2616803082152323e18,-1.2621331726474698e18,-1.2625860370797071e18,-1.2630389015119447e18,-1.263491765944182e18,-1.2639446303764196e18,-1.2643974948086572e18,-1.2648503592408945e18,-1.265303223673132e18,-1.2657560881053693e18,-1.266208952537607e18,-1.2666618169698445e18,-1.267114681402082e18,-1.2675675458343194e18,-1.2680204102665567e18,-1.2684732746987942e18,-1.2689261391310316e18,-1.2693790035632694e18,-1.2698318679955067e18,-1.2702847324277443e18,-1.2707375968599816e18,-1.271190461292219e18,-1.2716433257244567e18,-1.272096190156694e18,-1.2725490545889316e18,-1.273001919021169e18,-1.2734547834534065e18,-1.2739076478856438e18,-1.2743605123178813e18,-1.274813376750119e18,-1.275266241182356e18,-1.2757191056145938e18,-1.276171970046831e18,-1.276624834479069e18,-1.2770776989113062e18,-1.2775305633435436e18,-1.277983427775781e18,-1.2784362922080184e18,-1.278889156640256e18,-1.2793420210724936e18,-1.2797948855047311e18,-1.2802477499369684e18,-1.2807006143692058e18,-1.2811534788014433e18,-1.281606343233681e18,-1.2820592076659185e18,-1.2825120720981558e18,-1.2829649365303933e18,-1.2834178009626307e18,-1.283870665394868e18,-1.2843235298271058e18,-1.284776394259343e18,-1.2852292586915807e18,-1.285682123123818e18,-1.2861349875560556e18,-1.286587851988293e18,-1.2870407164205304e18,-1.287493580852768e18,-1.2879464452850053e18,-1.288399309717243e18,-1.2888521741494802e18,-1.289305038581718e18,-1.2897579030139553e18,-1.2902107674461926e18,-1.2906636318784302e18,-1.2911164963106675e18,-1.2915693607429053e18,-1.2920222251751427e18,-1.2924750896073802e18,-1.2929279540396175e18,-1.2933808184718548e18,-1.2938336829040924e18,-1.29428654733633e18,-1.2947394117685676e18,-1.2951922762008049e18,-1.2956451406330424e18,-1.2960980050652797e18,-1.296550869497517e18,-1.297003733929755e18,-1.2974565983619922e18,-1.2979094627942298e18,-1.298362327226467e18,-1.2988151916587046e18,-1.2992680560909422e18,-1.2997209205231795e18,-1.300173784955417e18,-1.3006266493876544e18,-1.301079513819892e18,-1.3015323782521293e18,-1.301985242684367e18,-1.3024381071166044e18,-1.3028909715488415e18,-1.3033438359810793e18,-1.3037967004133166e18,-1.3042495648455544e18,-1.3047024292777917e18,-1.3051552937100293e18,-1.3056081581422666e18,-1.306061022574504e18,-1.3065138870067415e18,-1.306966751438979e18,-1.3074196158712166e18,-1.3078724803034537e18,-1.3083253447356915e18,-1.3087782091679288e18,-1.3092310736001664e18,-1.309683938032404e18,-1.3101368024646413e18,-1.3105896668968788e18,-1.3110425313291162e18,-1.3114953957613537e18,-1.3119482601935913e18,-1.3124011246258286e18,-1.312853989058066e18,-1.3133068534903035e18,-1.313759717922541e18,-1.3142125823547786e18,-1.3146654467870162e18,-1.3151183112192535e18,-1.3155711756514908e18,-1.3160240400837284e18,-1.3164769045159657e18,-1.3169297689482035e18,-1.3173826333804408e18,-1.3178354978126781e18,-1.3182883622449157e18,-1.318741226677153e18,-1.3191940911093908e18,-1.3196469555416282e18,-1.3200998199738657e18,-1.320552684406103e18,-1.3210055488383406e18,-1.321458413270578e18,-1.3219112777028155e18,-1.322364142135053e18,-1.32281700656729e18,-1.323269870999528e18,-1.3237227354317652e18,-1.3241755998640028e18,-1.3246284642962404e18,-1.3250813287284777e18,-1.3255341931607153e18,-1.3259870575929526e18,-1.3264399220251901e18,-1.3268927864574277e18,-1.3273456508896653e18,-1.3277985153219023e18,-1.32825137975414e18,-1.3287042441863775e18,-1.3291571086186148e18,-1.3296099730508526e18,-1.33006283748309e18,-1.3305157019153275e18,-1.3309685663475648e18,-1.331421430779802e18,-1.33187429521204e18,-1.3323271596442772e18,-1.3327800240765146e18,-1.3332328885087521e18,-1.3336857529409897e18,-1.334138617373227e18,-1.3345914818054646e18,-1.3350443462377021e18,-1.3354972106699392e18,-1.335950075102177e18,-1.3364029395344143e18,-1.3368558039666522e18,-1.3373086683988895e18,-1.3377615328311265e18,-1.3382143972633644e18,-1.3386672616956017e18,-1.3391201261278392e18,-1.3395729905600768e18,-1.3400258549923144e18,-1.3404787194245514e18,-1.340931583856789e18,-1.3413844482890266e18,-1.341837312721264e18,-1.3422901771535017e18,-1.3427430415857388e18,-1.3431959060179766e18,-1.343648770450214e18,-1.3441016348824512e18,-1.344554499314689e18,-1.3450073637469263e18,-1.3454602281791636e18,-1.3459130926114012e18,-1.3463659570436388e18,-1.3468188214758764e18,-1.3472716859081137e18,-1.347724550340351e18,-1.3481774147725885e18,-1.348630279204826e18,-1.3490831436370634e18,-1.3495360080693012e18,-1.3499888725015386e18,-1.3504417369337756e18,-1.3508946013660134e18,-1.3513474657982508e18,-1.3518003302304883e18,-1.352253194662726e18,-1.3527060590949632e18,-1.3531589235272008e18,-1.3536117879594383e18,-1.3540646523916756e18,-1.3545175168239132e18,-1.3549703812561508e18,-1.3554232456883878e18,-1.3558761101206257e18,-1.356328974552863e18,-1.3567818389851005e18,-1.357234703417338e18,-1.3576875678495752e18,-1.358140432281813e18,-1.3585932967140503e18,-1.3590461611462879e18,-1.3594990255785254e18,-1.359951890010763e18,-1.360404754443e18,-1.3608576188752376e18,-1.3613104833074752e18,-1.3617633477397125e18,-1.3622162121719503e18,-1.3626690766041874e18,-1.3631219410364252e18,-1.3635748054686625e18,-1.3640276699008998e18,-1.3644805343331377e18,-1.364933398765375e18,-1.3653862631976123e18,-1.3658391276298499e18,-1.3662919920620874e18,-1.3667448564943247e18,-1.3671977209265623e18,-1.3676505853587996e18,-1.368103449791037e18,-1.3685563142232748e18,-1.369009178655512e18,-1.36946204308775e18,-1.3699149075199872e18,-1.3703677719522243e18,-1.370820636384462e18,-1.3712735008166994e18,-1.371726365248937e18,-1.3721792296811745e18,-1.3726320941134118e18,-1.3730849585456492e18,-1.3735378229778867e18,-1.3739906874101243e18,-1.3744435518423619e18,-1.3748964162745994e18,-1.3753492807068365e18,-1.3758021451390743e18,-1.3762550095713116e18,-1.376707874003549e18,-1.3771607384357868e18,-1.3776136028680238e18,-1.3780664673002614e18,-1.378519331732499e18,-1.3789721961647365e18,-1.379425060596974e18,-1.3798779250292114e18,-1.3803307894614487e18,-1.3807836538936863e18,-1.3812365183259238e18,-1.3816893827581612e18,-1.382142247190399e18,-1.382595111622636e18,-1.3830479760548733e18,-1.3835008404871112e18,-1.3839537049193485e18,-1.384406569351586e18,-1.3848594337838236e18,-1.385312298216061e18,-1.3857651626482985e18,-1.3862180270805358e18,-1.3866708915127734e18,-1.387123755945011e18,-1.3875766203772483e18,-1.3880294848094856e18,-1.3884823492417234e18,-1.3889352136739607e18,-1.389388078106198e18,-1.3898409425384358e18,-1.390293806970673e18,-1.3907466714029107e18,-1.391199535835148e18,-1.3916524002673856e18,-1.3921052646996232e18,-1.3925581291318602e18,-1.3930109935640978e18,-1.3934638579963354e18,-1.393916722428573e18,-1.3943695868608102e18,-1.394822451293048e18,-1.395275315725285e18,-1.3957281801575224e18,-1.3961810445897603e18,-1.3966339090219976e18,-1.3970867734542354e18,-1.3975396378864724e18,-1.39799250231871e18,-1.3984453667509476e18,-1.398898231183185e18,-1.3993510956154225e18,-1.39980396004766e18,-1.4002568244798973e18,-1.4007096889121347e18,-1.4011625533443725e18,-1.4016154177766098e18,-1.4020682822088474e18,-1.4025211466410847e18,-1.402974011073322e18,-1.4034268755055598e18,-1.403879739937797e18,-1.4043326043700347e18,-1.4047854688022723e18,-1.4052383332345093e18,-1.405691197666747e18,-1.4061440620989844e18,-1.406596926531222e18,-1.4070497909634596e18,-1.407502655395697e18,-1.4079555198279342e18,-1.4084083842601718e18,-1.4088612486924093e18,-1.4093141131246467e18,-1.4097669775568845e18,-1.4102198419891215e18,-1.410672706421359e18,-1.4111255708535967e18,-1.411578435285834e18,-1.4120312997180716e18,-1.4124841641503089e18,-1.4129370285825464e18,-1.413389893014784e18,-1.4138427574470216e18,-1.414295621879259e18,-1.4147484863114964e18,-1.4152013507437338e18,-1.415654215175971e18,-1.416107079608209e18,-1.4165599440404462e18,-1.4170128084726838e18,-1.417465672904921e18,-1.4179185373371584e18,-1.4183714017693962e18,-1.4188242662016335e18,-1.419277130633871e18,-1.4197299950661087e18,-1.420182859498346e18,-1.4206357239305833e18,-1.4210885883628209e18,-1.4215414527950584e18,-1.4219943172272957e18,-1.4224471816595333e18,-1.4229000460917706e18,-1.4233529105240084e18,-1.4238057749562458e18,-1.424258639388483e18,-1.424711503820721e18,-1.425164368252958e18,-1.4256172326851955e18,-1.426070097117433e18,-1.4265229615496707e18,-1.426975825981908e18,-1.4274286904141453e18,-1.4278815548463828e18,-1.4283344192786202e18,-1.428787283710858e18,-1.4292401481430953e18,-1.429693012575333e18,-1.4301458770075702e18,-1.4305987414398075e18,-1.4310516058720453e18,-1.4315044703042826e18,-1.4319573347365202e18,-1.4324101991687575e18,-1.432863063600995e18,-1.4333159280332324e18,-1.43376879246547e18,-1.4342216568977075e18,-1.434674521329945e18,-1.4351273857621824e18,-1.4355802501944197e18,-1.4360331146266575e18,-1.4364859790588948e18,-1.4369388434911322e18,-1.4373917079233697e18,-1.437844572355607e18,-1.4382974367878446e18,-1.4387503012200822e18,-1.4392031656523197e18,-1.439656030084557e18,-1.4401088945167944e18,-1.440561758949032e18,-1.4410146233812695e18,-1.441467487813507e18,-1.4419203522457444e18,-1.442373216677982e18,-1.4428260811102193e18,-1.4432789455424566e18,-1.4437318099746944e18,-1.4441846744069317e18,-1.4446375388391693e18,-1.4450904032714066e18,-1.4455432677036442e18,-1.4459961321358817e18,-1.446448996568119e18,-1.4469018610003566e18,-1.447354725432594e18,-1.4478075898648315e18,-1.4482604542970688e18,-1.4487133187293066e18,-1.449166183161544e18,-1.4496190475937812e18,-1.4500719120260188e18,-1.4505247764582561e18,-1.450977640890494e18,-1.4514305053227313e18,-1.4518833697549688e18,-1.4523362341872061e18,-1.4527890986194435e18,-1.453241963051681e18,-1.4536948274839186e18,-1.4541476919161562e18,-1.4546005563483935e18,-1.455053420780631e18,-1.4555062852128684e18,-1.455959149645106e18,-1.4564120140773435e18,-1.4568648785095808e18,-1.4573177429418184e18,-1.4577706073740557e18,-1.4582234718062932e18,-1.4586763362385308e18,-1.4591292006707684e18,-1.4595820651030057e18,-1.460034929535243e18,-1.4604877939674806e18,-1.460940658399718e18,-1.4613935228319557e18,-1.461846387264193e18,-1.4622992516964306e18,-1.462752116128668e18,-1.4632049805609052e18,-1.463657844993143e18,-1.4641107094253804e18,-1.464563573857618e18,-1.4650164382898552e18,-1.4654693027220928e18,-1.46592216715433e18,-1.4663750315865677e18,-1.4668278960188052e18,-1.4672807604510423e18,-1.4677336248832801e18,-1.4681864893155174e18,-1.4686393537477553e18,-1.4690922181799926e18,-1.46954508261223e18,-1.4699979470444675e18,-1.4704508114767048e18,-1.4709036759089423e18,-1.47135654034118e18,-1.4718094047734175e18,-1.4722622692056545e18,-1.472715133637892e18,-1.4731679980701297e18,-1.4736208625023672e18,-1.4740737269346048e18,-1.474526591366842e18,-1.4749794557990797e18,-1.475432320231317e18,-1.4758851846635543e18,-1.476338049095792e18,-1.4767909135280294e18,-1.4772437779602668e18,-1.4776966423925043e18,-1.478149506824742e18,-1.4786023712569795e18,-1.4790552356892168e18,-1.4795081001214543e18,-1.4799609645536916e18,-1.4804138289859292e18,-1.4808666934181665e18,-1.4813195578504044e18,-1.4817724222826417e18,-1.4822252867148787e18,-1.4826781511471165e18,-1.4831310155793539e18,-1.4835838800115914e18,-1.484036744443829e18,-1.4844896088760666e18,-1.484942473308304e18,-1.4853953377405412e18,-1.4858482021727788e18,-1.4863010666050163e18,-1.486753931037254e18,-1.487206795469491e18,-1.4876596599017288e18,-1.488112524333966e18,-1.4885653887662034e18,-1.4890182531984412e18,-1.4894711176306785e18,-1.489923982062916e18,-1.4903768464951534e18,-1.490829710927391e18,-1.4912825753596285e18,-1.4917354397918659e18,-1.4921883042241032e18,-1.4926411686563407e18,-1.4930940330885783e18,-1.4935468975208156e18,-1.4939997619530534e18,-1.4944526263852908e18,-1.4949054908175278e18,-1.4953583552497656e18,-1.495811219682003e18,-1.4962640841142408e18,-1.496716948546478e18,-1.4971698129787154e18,-1.497622677410953e18,-1.4980755418431903e18,-1.4985284062754278e18,-1.4989812707076654e18,-1.499434135139903e18,-1.49988699957214e18,-1.5003398640043779e18,-1.5007927284366152e18,-1.5012455928688527e18,-1.5016984573010903e18,-1.5021513217333274e18,-1.5026041861655652e18,-1.5030570505978025e18,-1.50350991503004e18,-1.5039627794622776e18,-1.504415643894515e18,-1.5048685083267523e18,-1.5053213727589898e18,-1.5057742371912274e18,-1.506227101623465e18,-1.5066799660557025e18,-1.5071328304879398e18,-1.5075856949201772e18,-1.5080385593524147e18,-1.508491423784652e18,-1.5089442882168899e18,-1.5093971526491272e18,-1.5098500170813645e18,-1.510302881513602e18,-1.5107557459458394e18,-1.5112086103780772e18,-1.5116614748103145e18,-1.512114339242552e18,-1.5125672036747894e18,-1.513020068107027e18,-1.5134729325392643e18,-1.5139257969715018e18,-1.5143786614037394e18,-1.5148315258359764e18,-1.5152843902682143e18,-1.5157372547004516e18,-1.5161901191326892e18,-1.5166429835649267e18,-1.517095847997164e18,-1.5175487124294016e18,-1.518001576861639e18,-1.5184544412938765e18,-1.518907305726114e18,-1.5193601701583516e18,-1.5198130345905887e18,-1.5202658990228262e18,-1.5207187634550638e18,-1.521171627887301e18,-1.521624492319539e18,-1.5220773567517763e18,-1.5225302211840138e18,-1.5229830856162511e18,-1.5234359500484884e18,-1.5238888144807263e18,-1.5243416789129636e18,-1.524794543345201e18,-1.5252474077774385e18,-1.525700272209676e18,-1.5261531366419133e18,-1.526606001074151e18,-1.5270588655063885e18,-1.5275117299386255e18,-1.5279645943708634e18,-1.5284174588031007e18,-1.5288703232353385e18,-1.5293231876675758e18,-1.5297760520998129e18,-1.5302289165320507e18,-1.530681780964288e18,-1.5311346453965256e18,-1.5315875098287631e18,-1.5320403742610007e18,-1.5324932386932378e18,-1.5329461031254753e18,-1.533398967557713e18,-1.5338518319899505e18,-1.534304696422188e18,-1.534757560854425e18,-1.535210425286663e18,-1.5356632897189002e18,-1.5361161541511375e18,-1.5365690185833754e18,-1.5370218830156127e18,-1.53747474744785e18,-1.5379276118800876e18,-1.538380476312325e18,-1.5388333407445627e18,-1.5392862051768e18,-1.5397390696090373e18,-1.540191934041275e18,-1.5406447984735124e18,-1.5410976629057498e18,-1.5415505273379876e18,-1.542003391770225e18,-1.542456256202462e18,-1.5429091206346998e18,-1.543361985066937e18,-1.5438148494991747e18,-1.5442677139314122e18,-1.5447205783636495e18,-1.545173442795887e18,-1.5456263072281244e18,-1.546079171660362e18,-1.5465320360925996e18,-1.546984900524837e18,-1.5474377649570742e18,-1.547890629389312e18,-1.5483434938215493e18,-1.5487963582537866e18,-1.5492492226860244e18,-1.5497020871182615e18,-1.5501549515504993e18,-1.5506078159827366e18,-1.5510606804149742e18,-1.5515135448472118e18,-1.551966409279449e18,-1.5524192737116864e18,-1.552872138143924e18,-1.5533250025761615e18,-1.5537778670083988e18,-1.5542307314406367e18,-1.5546835958728737e18,-1.555136460305111e18,-1.5555893247373489e18,-1.5560421891695862e18,-1.556495053601824e18,-1.5569479180340613e18,-1.5574007824662986e18,-1.5578536468985362e18,-1.5583065113307738e18,-1.558759375763011e18,-1.5592122401952486e18,-1.559665104627486e18,-1.5601179690597233e18,-1.560570833491961e18,-1.5610236979241984e18,-1.5614765623564362e18,-1.5619294267886735e18,-1.5623822912209106e18,-1.5628351556531484e18,-1.5632880200853857e18,-1.5637408845176233e18,-1.5641937489498609e18,-1.5646466133820982e18,-1.5650994778143355e18,-1.565552342246573e18,-1.5660052066788106e18,-1.5664580711110482e18,-1.5669109355432858e18,-1.5673637999755228e18,-1.5678166644077606e18,-1.568269528839998e18,-1.5687223932722353e18,-1.569175257704473e18,-1.5696281221367101e18,-1.5700809865689477e18,-1.5705338510011853e18,-1.5709867154334228e18,-1.5714395798656604e18,-1.5718924442978977e18,-1.572345308730135e18,-1.5727981731623726e18,-1.5732510375946102e18,-1.5737039020268475e18,-1.5741567664590853e18,-1.5746096308913224e18,-1.5750624953235597e18,-1.5755153597557975e18,-1.5759682241880348e18,-1.5764210886202724e18,-1.57687395305251e18,-1.5773268174847473e18,-1.5777796819169848e18,-1.5782325463492221e18,-1.5786854107814597e18,-1.5791382752136973e18,-1.5795911396459346e18,-1.580044004078172e18,-1.5804968685104097e18,-1.580949732942647e18,-1.5814025973748844e18,-1.5818554618071222e18,-1.5823083262393592e18,-1.582761190671597e18,-1.5832140551038344e18,-1.583666919536072e18,-1.5841197839683095e18,-1.5845726484005466e18,-1.5850255128327841e18,-1.5854783772650217e18,-1.5859312416972593e18,-1.5863841061294966e18,-1.5868369705617344e18,-1.5872898349939715e18,-1.5877426994262088e18,-1.5881955638584466e18,-1.588648428290684e18,-1.5891012927229217e18,-1.5895541571551588e18,-1.5900070215873964e18,-1.590459886019634e18,-1.5909127504518712e18,-1.5913656148841088e18,-1.5918184793163464e18,-1.5922713437485837e18,-1.592724208180821e18,-1.5931770726130588e18,-1.593629937045296e18,-1.5940828014775337e18,-1.594535665909771e18,-1.5949885303420083e18,-1.5954413947742461e18,-1.5958942592064835e18,-1.596347123638721e18,-1.5967999880709586e18,-1.5972528525031956e18,-1.5977057169354332e18,-1.5981585813676708e18,-1.5986114457999084e18,-1.599064310232146e18,-1.5995171746643832e18,-1.5999700390966205e18,-1.600422903528858e18,-1.6008757679610957e18,-1.601328632393333e18,-1.6017814968255708e18,-1.602234361257808e18,-1.6026872256900454e18,-1.603140090122283e18,-1.6035929545545203e18,-1.604045818986758e18,-1.6044986834189952e18,-1.6049515478512328e18,-1.6054044122834703e18,-1.605857276715708e18,-1.6063101411479452e18,-1.6067630055801828e18,-1.60721587001242e18,-1.6076687344446574e18,-1.6081215988768952e18,-1.6085744633091325e18,-1.60902732774137e18,-1.6094801921736074e18,-1.6099330566058447e18,-1.6103859210380826e18,-1.6108387854703199e18,-1.6112916499025574e18,-1.611744514334795e18,-1.6121973787670323e18,-1.6126502431992696e18,-1.6131031076315072e18,-1.6135559720637448e18,-1.614008836495982e18,-1.6144617009282196e18,-1.614914565360457e18,-1.6153674297926948e18,-1.615820294224932e18,-1.6162731586571694e18,-1.6167260230894072e18,-1.6171788875216443e18,-1.6176317519538819e18,-1.6180846163861194e18,-1.618537480818357e18,-1.6189903452505943e18,-1.6194432096828316e18,-1.6198960741150692e18,-1.6203489385473065e18,-1.6208018029795443e18,-1.6212546674117816e18,-1.6217075318440195e18,-1.6221603962762565e18,-1.6226132607084938e18,-1.6230661251407316e18,-1.623518989572969e18,-1.6239718540052065e18,-1.6244247184374438e18,-1.6248775828696814e18,-1.6253304473019187e18,-1.6257833117341563e18,-1.6262361761663939e18,-1.6266890405986314e18,-1.6271419050308687e18,-1.627594769463106e18,-1.6280476338953439e18,-1.6285004983275812e18,-1.6289533627598185e18,-1.629406227192056e18,-1.6298590916242934e18,-1.630311956056531e18,-1.6307648204887685e18,-1.631217684921006e18,-1.6316705493532434e18,-1.6321234137854807e18,-1.6325762782177183e18,-1.6330291426499558e18,-1.6334820070821934e18,-1.6339348715144307e18,-1.6343877359466683e18,-1.6348406003789056e18,-1.635293464811143e18,-1.6357463292433807e18,-1.636199193675618e18,-1.6366520581078556e18,-1.637104922540093e18,-1.6375577869723305e18,-1.638010651404568e18,-1.6384635158368054e18,-1.638916380269043e18,-1.6393692447012803e18,-1.6398221091335178e18,-1.6402749735657551e18,-1.640727837997993e18,-1.6411807024302303e18,-1.6416335668624676e18,-1.6420864312947052e18,-1.6425392957269425e18,-1.6429921601591803e18,-1.6434450245914176e18,-1.6438978890236552e18,-1.6443507534558925e18,-1.6448036178881298e18,-1.6452564823203674e18,-1.645709346752605e18,-1.6461622111848425e18,-1.6466150756170798e18,-1.6470679400493174e18,-1.6475208044815547e18,-1.647973668913792e18,-1.6484265333460298e18,-1.6488793977782671e18,-1.6493322622105047e18,-1.649785126642742e18,-1.6502379910749796e18,-1.6506908555072172e18,-1.6511437199394545e18,-1.651596584371692e18,-1.6520494488039293e18,-1.652502313236167e18,-1.6529551776684042e18,-1.653408042100642e18,-1.6538609065328794e18,-1.6543137709651167e18,-1.6547666353973542e18,-1.6552194998295916e18,-1.6556723642618294e18,-1.6561252286940667e18,-1.6565780931263043e18,-1.6570309575585416e18,-1.657483821990779e18,-1.6579366864230164e18,-1.658389550855254e18,-1.6588424152874916e18,-1.6592952797197286e18,-1.6597481441519665e18,-1.6602010085842038e18,-1.6606538730164416e18,-1.661106737448679e18,-1.6615596018809162e18,-1.6620124663131538e18,-1.662465330745391e18,-1.6629181951776287e18,-1.6633710596098662e18,-1.6638239240421038e18,-1.6642767884743409e18,-1.6647296529065784e18,-1.665182517338816e18,-1.6656353817710536e18,-1.6660882462032911e18,-1.6665411106355284e18,-1.666993975067766e18,-1.6674468395000033e18,-1.6678997039322406e18,-1.6683525683644785e18,-1.6688054327967158e18,-1.669258297228953e18,-1.6697111616611907e18,-1.6701640260934282e18,-1.6706168905256658e18,-1.671069754957903e18,-1.6715226193901407e18,-1.671975483822378e18,-1.6724283482546156e18,-1.6728812126868529e18,-1.6733340771190907e18,-1.673786941551328e18,-1.674239805983565e18,-1.674692670415803e18,-1.6751455348480402e18,-1.6755983992802778e18,-1.6760512637125153e18,-1.676504128144753e18,-1.6769569925769902e18,-1.6774098570092275e18,-1.677862721441465e18,-1.6783155858737027e18,-1.6787684503059402e18,-1.6792213147381773e18,-1.679674179170415e18,-1.6801270436026524e18,-1.6805799080348897e18,-1.6810327724671276e18,-1.6814856368993649e18,-1.6819385013316024e18,-1.6823913657638397e18,-1.6828442301960773e18,-1.683297094628315e18,-1.6837499590605522e18,-1.6842028234927895e18,-1.684655687925027e18,-1.6851085523572646e18,-1.685561416789502e18,-1.6860142812217398e18,-1.686467145653977e18,-1.6869200100862141e18,-1.687372874518452e18,-1.6878257389506893e18,-1.688278603382927e18,-1.6887314678151644e18,-1.6891843322474017e18,-1.6896371966796393e18,-1.6900900611118766e18,-1.6905429255441142e18,-1.6909957899763517e18,-1.6914486544085893e18,-1.6919015188408264e18,-1.6923543832730642e18,-1.6928072477053015e18,-1.693260112137539e18,-1.6937129765697766e18,-1.6941658410020137e18,-1.6946187054342515e18,-1.6950715698664888e18,-1.6955244342987264e18,-1.695977298730964e18,-1.6964301631632013e18,-1.6968830275954386e18,-1.6973358920276762e18,-1.6977887564599137e18,-1.6982416208921513e18,-1.6986944853243889e18,-1.699147349756626e18,-1.6996002141888635e18,-1.700053078621101e18,-1.7005059430533384e18,-1.7009588074855762e18,-1.7014116719178135e18,-1.7018645363500508e18,-1.7023174007822884e18,-1.7027702652145257e18,-1.7032231296467635e18,-1.7036759940790008e18,-1.7041288585112381e18,-1.7045817229434757e18,-1.7050345873757133e18,-1.7054874518079506e18,-1.7059403162401882e18,-1.7063931806724257e18,-1.7068460451046628e18,-1.7072989095369006e18,-1.707751773969138e18,-1.7082046384013755e18,-1.708657502833613e18,-1.70911036726585e18,-1.709563231698088e18,-1.7100160961303252e18,-1.7104689605625628e18,-1.7109218249948004e18,-1.711374689427038e18,-1.711827553859275e18,-1.7122804182915126e18,-1.7127332827237501e18,-1.7131861471559875e18,-1.7136390115882253e18,-1.7140918760204623e18,-1.7145447404527002e18,-1.7149976048849375e18,-1.7154504693171748e18,-1.7159033337494126e18,-1.71635619818165e18,-1.7168090626138872e18,-1.7172619270461248e18,-1.7177147914783624e18,-1.7181676559105997e18,-1.7186205203428372e18,-1.7190733847750746e18,-1.719526249207312e18,-1.7199791136395497e18,-1.720431978071787e18,-1.7208848425040248e18,-1.7213377069362621e18,-1.7217905713684992e18,-1.722243435800737e18,-1.7226963002329743e18,-1.723149164665212e18,-1.7236020290974495e18,-1.7240548935296868e18,-1.724507757961924e18,-1.7249606223941617e18,-1.7254134868263992e18,-1.7258663512586368e18,-1.7263192156908744e18,-1.7267720801231114e18,-1.7272249445553492e18,-1.7276778089875866e18,-1.7281306734198239e18,-1.7285835378520617e18,-1.7290364022842988e18,-1.7294892667165363e18,-1.729942131148774e18,-1.7303949955810115e18,-1.730847860013249e18,-1.7313007244454863e18,-1.7317535888777236e18,-1.7322064533099612e18,-1.7326593177421988e18,-1.733112182174436e18,-1.733565046606674e18,-1.734017911038911e18,-1.7344707754711483e18,-1.734923639903386e18,-1.7353765043356234e18,-1.735829368767861e18,-1.7362822332000986e18,-1.736735097632336e18,-1.7371879620645734e18,-1.7376408264968108e18,-1.7380936909290483e18,-1.738546555361286e18,-1.7389994197935232e18,-1.7394522842257605e18,-1.7399051486579983e18,-1.7403580130902356e18,-1.740810877522473e18,-1.7412637419547108e18,-1.7417166063869478e18,-1.7421694708191857e18,-1.742622335251423e18,-1.7430751996836605e18,-1.743528064115898e18,-1.7439809285481354e18,-1.7444337929803727e18,-1.7448866574126103e18,-1.7453395218448479e18,-1.7457923862770852e18,-1.746245250709323e18,-1.74669811514156e18,-1.7471509795737974e18,-1.7476038440060352e18,-1.7480567084382725e18,-1.7485095728705103e18,-1.7489624373027476e18,-1.749415301734985e18,-1.7498681661672225e18,-1.7503210305994598e18,-1.7507738950316974e18,-1.751226759463935e18,-1.7516796238961723e18,-1.7521324883284096e18,-1.7525853527606474e18,-1.7530382171928847e18,-1.7534910816251223e18,-1.75394394605736e18,-1.754396810489597e18,-1.7548496749218348e18,-1.755302539354072e18,-1.7557554037863096e18,-1.7562082682185472e18,-1.7566611326507843e18,-1.7571139970830218e18,-1.7575668615152594e18,-1.758019725947497e18,-1.7584725903797345e18,-1.758925454811972e18,-1.7593783192442092e18,-1.7598311836764467e18,-1.7602840481086843e18,-1.7607369125409216e18,-1.7611897769731594e18,-1.7616426414053965e18,-1.762095505837634e18,-1.7625483702698716e18,-1.7630012347021092e18,-1.7634540991343468e18,-1.763906963566584e18,-1.7643598279988214e18,-1.764812692431059e18,-1.7652655568632965e18,-1.7657184212955338e18,-1.7661712857277716e18,-1.7666241501600087e18,-1.767077014592246e18,-1.7675298790244838e18,-1.7679827434567212e18,-1.7684356078889587e18,-1.7688884723211963e18,-1.7693413367534336e18,-1.7697942011856712e18,-1.7702470656179085e18,-1.770699930050146e18,-1.7711527944823836e18,-1.771605658914621e18,-1.7720585233468582e18,-1.772511387779096e18,-1.7729642522113334e18,-1.7734171166435707e18,-1.7738699810758085e18,-1.7743228455080456e18,-1.7747757099402834e18,-1.7752285743725207e18,-1.7756814388047583e18,-1.7761343032369958e18,-1.776587167669233e18,-1.7770400321014705e18,-1.777492896533708e18,-1.7779457609659456e18,-1.778398625398183e18,-1.7788514898304207e18,-1.7793043542626578e18,-1.779757218694895e18,-1.780210083127133e18,-1.7806629475593702e18,-1.781115811991608e18,-1.781568676423845e18,-1.7820215408560827e18,-1.7824744052883203e18,-1.7829272697205576e18,-1.7833801341527951e18,-1.7838329985850327e18,-1.78428586301727e18,-1.7847387274495073e18,-1.7851915918817452e18,-1.7856444563139825e18,-1.78609732074622e18,-1.7865501851784573e18,-1.7870030496106947e18,-1.7874559140429325e18,-1.7879087784751698e18,-1.7883616429074074e18,-1.788814507339645e18,-1.789267371771882e18,-1.7897202362041196e18,-1.790173100636357e18,-1.7906259650685947e18,-1.7910788295008323e18,-1.7915316939330696e18,-1.791984558365307e18,-1.7924374227975444e18,-1.792890287229782e18,-1.7933431516620193e18,-1.7937960160942572e18,-1.7942488805264942e18,-1.7947017449587318e18,-1.7951546093909693e18,-1.7956074738232067e18,-1.7960603382554442e18,-1.7965132026876815e18,-1.796966067119919e18,-1.7974189315521567e18,-1.7978717959843942e18,-1.7983246604166316e18,-1.798777524848869e18,-1.7992303892811064e18,-1.7996832537133437e18,-1.8001361181455816e18,-1.800588982577819e18,-1.8010418470100564e18,-1.8014947114422938e18,-1.801947575874531e18,-1.802400440306769e18,-1.8028533047390062e18,-1.8033061691712438e18,-1.8037590336034813e18,-1.8042118980357187e18,-1.804664762467956e18,-1.8051176269001935e18,-1.805570491332431e18,-1.8060233557646684e18,-1.806476220196906e18,-1.8069290846291433e18,-1.807381949061381e18,-1.8078348134936184e18,-1.8082876779258557e18,-1.8087405423580936e18,-1.8091934067903306e18,-1.8096462712225682e18,-1.8100991356548058e18,-1.8105520000870433e18,-1.8110048645192806e18]}
},{}],33:[function(require,module,exports){
module.exports={"expected":[2.0,0.5106743242381243,0.4130156812257143,1.9669843652719137,0.5320468334375723,0.4443272198084238,1.941237381896233,0.6104617359617828,0.20076876089731888,1.983598588439949,0.936755117286874,0.7401584394611067,1.5248929027165818,1.6986836942176156,0.10892821150120358,1.9895131472310315,0.6201806934706795,0.194484854979175,1.7700395372706854,0.47496360558132256,0.301436930763884,1.8634452297456232,0.01051121856726911,1.3799752578767155,1.2037795686443329,1.9005044934399566,0.35998397647847036,1.979582435665654,0.9577839204307721,0.04086853712154792,1.5068535268838357,1.7135935590472688,0.14745633310051243,0.6994089629673936,1.9981606730535026,0.18218563778602337,1.756434558482531,1.4513705159667847,1.2041096635522215,1.9003578199235056,0.3597249354468335,0.4098142295684002,1.9261820756648385,1.1415101800240404,0.0052653521798540215,1.3403747183521066,1.8298450092392944,0.2576187979876069,0.5297908905175481,0.18237972628157895,1.0002255363371273,1.4510696107780334,1.4698109651959395,1.021337108716405,0.1704067710054158,0.6592011772171271,1.994688318869375,1.841440215650844,0.07364792961239697,0.003323449179278626,0.14710406695572553,1.91801495358989,1.9982013286940887,0.37608443976526384,1.9093438820012505,1.183396990657,0.00181208265836319,1.3001607944895794,1.852779336001795,0.286722516987469,0.6793406806011566,1.959003729403347,1.728224474288002,1.4885416629900243,0.03510854106603112,1.7704347323449343,1.975119768916711,0.5487311160968816,0.24349095378859642,1.817748814659618,1.3603623901026547,1.7422315837646787,1.120353345002265,0.11913526927841678,0.4271751868321333,0.8582687799029363,1.890866972931001,1.590366010969964,1.1630431902482008,0.0995450375388498,1.8741768815046989,0.8935042036127873,1.9096242409018835,0.13649732436797923,1.0850310661551945,1.5251333213644545,1.8524269414640917,0.9364732034783797,0.4933389694535849,0.5870119382317798,1.0419929869606896,1.7925837604026849,0.045042101848070115,0.9795603493173464,1.703432750439227,1.9483373582664814,0.7131724985111281,1.8181367755168774,0.058724157997539383,0.007595621744621361,1.67213402533412,1.9337766329612593,0.7547427743559038,0.34873135220791773,0.0741567817288169,1.9315153107306933,1.6674799425206372,0.006844057545234095,0.796769175099735,0.31661914057706997,0.719182594538816,0.5425468807738141,1.698964004580867,0.01280325652150327,1.4381725761386517,0.28577786815994843,1.0357298692389507,0.5813117169689895,0.4987526950769692,0.020598425931607878,1.3990093000894275,1.5197889647518146,0.0022538726486501792,0.6208552219692601,0.4619110770177831,1.998961042666113,0.38740122892977724,0.09683654075600445,0.000288558384623272,1.5954133967923592,0.42607018688835974,1.9999969752640192,0.4220488444054694,0.6657359753734688,1.1265732425112267,1.560220167409816,1.354508609825239,0.031426876530130765,0.24760486413356408,0.6254116512953198,1.973711172231123,1.7664237440532329,1.3944939041967148,0.02160355419649762,1.7325057504505037,1.1346344602344984,1.982626765537232,0.28234352604929036,0.8440305692955506,1.3061337021872836,1.7024734875636236,1.177231875470208,0.09337587053234953,0.3130361486299773,0.8015880924939874,0.007430606102358905,0.14384851003588583,1.0706761476891733,1.7747407342534467,1.8448105060859614,0.759514618526265,1.9320049980506726,0.16692331423832096,1.0276030843121107,0.06039642969960257,1.8209554852116174,0.7178883948691541,0.18600453423694474,1.9436710113037723,0.9844786852240921,1.8263313019659293,0.06368313513597201,1.2521975376145593,0.16171710545701756,0.21767514942362898,0.941383152393191,1.8498446860098796,1.9939673414995103,1.2102415258996304,1.6781320885195292,0.00862866435431442,0.8108880131408469,1.8717775444623777,0.09741636608529536,1.167894510843102,1.7091885571552563,1.8930907732103113,0.8534010360332063,1.4950341391360715,1.9808232948485571,0.5944306014810372,1.7389260898934,0.023607276596233073,1.3857655080737308,1.5320354322068828,1.971508129850201,1.082343076230682,1.7672893814148907,1.9995136516789942,0.39884502228968477,1.568047255519272,4.6320769925833893e-5,1.5837838411585274,1.3275021487730407,0.04584602096298973,1.3048494518907832,1.6030026349434046,0.0005611878888047706,0.7157576511628726,1.36793498490794,0.027946016919143557,0.4699253859876873,0.6121005498784056,0.0029347930166830904,1.5116673492998118,1.4076835422926035,0.018728316649495147,0.5069778404641079,0.5727219381716071,0.007162721766190372,0.29244482091172685,0.829824694326087,0.011335567495308618,1.6921532916028492,1.1913838169166722,0.087394665163263,0.3235704468033337,1.4848335363442882,0.005781518356143822,1.6603912753999095,1.233524038711253,0.07061601504126802,1.8370189242928316,0.9652348993224777,1.937126966133885,1.6274010755908077,1.275229956773071,0.05556581624302037,1.812649096239055,0.7041042223225186,1.95130223997562,1.9388090221309133,0.970083778355015,1.8343545131151613,1.7867679182708516,1.0514622080878975,0.15395356432323792,1.9230855275594552,0.9270157353691966,0.03075946635716864,1.7594235237292775,1.0944723835285992,1.6886436439323136,1.9056452954200336,0.8250460579464263,0.295881430396739,1.9860171753443259,1.1373068609596402,0.11117159437181967,1.886520760737155,0.8676589242040619,1.8985025998934737,1.9779154163243402,0.6076335687852288,1.7485508391874363,0.026818553348014862,0.9105179159720869,0.23732553043022975,1.9679949481128747,0.6476561383987671,1.7764434567202536,0.037641667573867,0.9535433248821036,1.5798380731360466,1.1393908137757869e-5,0.6883339906767962,0.402729010006863,1.9996531768361319,0.44578603735096467,0.18444062460838662,1.9427750318255526,0.7295914736942186,0.3687043455448389,1.997588175826039,0.48218934437163974,0.5988698679136402,1.9798662183493163,1.4992435687283225,0.3358537531857114,1.9936678785864355,0.519555666171627,0.559748480011554,0.008985862170155623,1.4614216925629668,0.3042383278598517,0.009276269588709973,1.6816895981751503,0.5214458638279622,1.9934235597552414,0.33424498259256774,0.7734492942049392,0.004338552339632096,0.5968977195491458,0.4840332538673504,1.9974363535099569,1.8290538114382149,0.7316658231041204,1.9420546487207226,0.1831960732970359,0.44758022941692177,1.9995941333915266,0.40100282916678975,0.690381394993894,1.9556420282536298,0.20882941016830048,0.9556950737276639,1.9998928864004228,0.07418237370908531,0.6496727898979873,1.6675303631219551,0.23593415162091813,0.3778222050143054,1.8646674631015803,0.47221461983380775,1.1820043903573223,1.9774629664667134,0.012814059751443896,0.8697942521282791,1.8855220878926091,0.11018662217072095,0.5702846735161007,1.9856559429654128,0.294353569920349,1.398947208533365,1.9047298349132042,0.0022493311612542533,1.096616497420441,1.7580203986548968,0.0302315904239131,0.7848615972412255,1.9222549819470363,0.15280722748820086,1.0536132012783277,1.7854365594916404,0.04165463714127737,1.31846656444863,1.5915086785169903,0.00018378504030880372,1.0105101962858152,1.8113919797917015,0.05485999702289712,0.7015286400902532,1.6257223343037093,0.0019400759063605832,1.5239273752749212,1.3945561260906294,0.06982311098217597,1.2356179087228618,1.9644248977566299,0.00555254035071584,0.9243257448210361,1.4338065382353058,0.08651615089365783,1.7024252928397638,1.1772985176288782,0.011014459978123559,1.4486000082921964,1.8800252000349198,0.00742236887874459,1.1510172764539432,1.2195657407668146,0.018315676810435888,1.8447742724243343,1.5098155093932262,0.12496466738598533,1.6384957895825512,1.7503367339539015,0.06037325555453743,1.3699370005848552,0.9940254237245274,0.0006356581790946114,1.604719539765512,1.3027973056288802,0.03837829197416831,1.329536565409561,1.5820336616841404,0.1616801870023582,1.569818643617226,0.768792576514893,0.034385962431102146,1.7686689425196112,1.0801962332899697,0.0012798889321609108,1.533858009185522,1.383777370256238,0.02407480465969203,1.7403756894033224,1.1230979494466538,0.11782969645105135,1.8930603079795691,0.8534680193275985,0.015578654703204742,1.7107054991317456,1.1657707302901466,0.009350270851950837,1.8728307545928184,0.8962540499039723,0.24667259236920946,1.971492078853629,1.2081352137637191,0.08053873139277223,1.4202955701807816,0.9392330252993649,0.004091177267006363,1.9603672994262316,1.2501126111764487,0.41428400362255946,1.9999279181107772,0.9823250140020248,0.19281707624972422,1.6139972898566457,0.7158225733020247,0.05008457506294084,1.9984804275644827,1.0254498743201201,0.6120381381561367,1.9327835313648138,1.3325947377244565,0.34663550479503513,1.776100845033974,0.5070367543835532,0.1449635043632017,1.9852087217303924,0.7994774096709834,0.3146030117279697,1.9900207251515103,1.1114774865248938,0.12340046028357776,1.898263894652129,0.32362032061392787,0.2838452074341604,1.983024246484533,0.5838244462632416,0.49636190352212806,1.996308446933857,0.8846232654473054,0.2544192947150413,1.974199557317256,0.6234153812354031,0.45958241022107704,1.9990832384789698,0.38958914026945,0.7040395406969917,1.9513231114607765,0.663706681388524,0.4238079756616733,1.9999999533044162,0.9706270243162117,0.6631311427685302,1.951134565013043,0.2267674301922823,0.926948201579309,1.999056886520743,0.46009677241901714,0.1746671727346465,1.9743373159117072,0.746089481980239,0.884016169369853,1.996255792026293,0.10373861552368335,0.5832687700471961,1.920997251863973,0.2842719225698489,0.32317026615916644,1.898532322365556,0.5346189457187887,1.1108700759971406,1.9901066715655074,0.026834132555279,0.798878661810839,1.985103803439675,0.1452806123803414,0.5065050723953122,1.7764861277613553,0.34709833130652623,1.332018271936127,1.9330036560369934,0.16845607051694678,1.0248388681984286,1.9985139227290258,0.3803627206609246,0.7152366257494898,1.6144795997791959,0.1931780188329938,0.9817139134458819,1.8278854399722104,0.06465771950715993,1.249520791023114,1.9605374842831838,0.2194004799015158,0.9386229668223993,1.851298770377976,0.080779214846742,1.2075373607789495,1.6801617258859416,0.008994921747696338,1.461361616450783,1.873128870912797,0.09861026017710073,1.16516795634998,1.9809290746986323,0.015686303019277648,0.8528634446876516,1.497434824562201,0.0043322537914314285,1.122491375579031,1.7407863952154845,0.3065698551688617,1.3832129014297223,1.9118800054516452,0.0012491622011950865,1.079586987589867,1.2891084170623228,0.03454504231186084,0.7681979811282662,1.5703208027536637,0.16201355648777804,1.581536547250693,1.7959028228543295,0.0382107714870189,1.3022147425018864,1.0659036127500099,0.0006576340115569401,0.9934142364132422,1.370504770411962,0.060582584134803774,1.749932556931399,1.6389660648046982,0.12466897425547685,1.5092896093063919,1.4102069195151778,0.01819941765154931,1.2189694150853418,1.6715375827231997,0.007496883869640758,1.8797347605999342,1.4491461732979223,0.010924179764877806,1.6901548867232699,1.1940971361583947,0.08626763979267615,1.4332557629135294,1.4872501132487554,0.005488406984598959,1.1340959037969671,1.2362118562029336,0.0695989063331266,1.83550269850892,0.9679985249381211,0.20135930308320593,1.625245453911722,1.2778872737609368,0.054660515797482545,1.3540003705103338,1.0111213598998126,0.00017225434137957407,1.9378530050244416,0.7435468067740647,0.04148025033102931,1.7850581157421195,1.5958499551424272,0.15248266431293023,1.5556869034889442,0.7854585246542124,0.030082622350229293,1.9919385487832288,1.0972248193257539,0.002290488867961682,1.904469303670373,1.3995075878529488,0.29392062780152495,1.7287761014691778,0.5708366450312625,0.10990788307158894,1.885237960944221,0.8704002726418958,0.012716712506628647,1.6985752244736378,1.182605347274228,0.4716955792871834,1.8643602688617333,0.3783008145018063,0.2355399862565707,1.96729727501718,0.6502453213645304,0.07395153129749044,1.841875055372499,0.9563056811745726,0.20845575116049198,1.9554618328084838,0.6909626183334405,0.4005135224834767,1.999576534813165,0.4480898076290417,0.18284361556994977,1.9418494401719393,0.7322546573681425,0.044880968484770745,1.997392430264154,0.48455690885656033,0.5963384527542193,1.9804145516302478,0.2743372678725229,0.3337890480946113,1.9933533935296455,0.5219826217102981,0.13622334845867645,1.987994185391481,0.8162548588470122,0.8129370316750786,1.9107974592946433,0.5602973425345311,0.5190197186761831,1.8906199556284449,0.33631081149625575,0.27201829715934334,1.927750760402645,0.5994298143127846,1.039162438828511,1.9976304132070792,0.9016213281913543,0.7290030946864232,1.9701989661127826,0.18479446173894887,0.4452773942826429,1.8197624648335342,0.40321932757816725,0.2156605764734847,1.9564528004248802,0.6798555138250952,0.9529327941318888,1.9998485924874625,0.07523106376764177,1.7225344335474628,1.9457169184873622,0.23772098594297675,0.37565980301503465,1.8660532229496982,0.4745653066065745,1.1792847148771493,1.9780429749694126,0.013259082652635423,0.8670531255515962,1.9946322295879462,0.11145183648480628,0.5677894714547653,1.7310839174719037,0.29631556381577084,1.3964100999253481,1.905904296833234,0.0020677846755923213,0.12081708958335646,1.992360746666355,0.030910072960506296,0.7821620057907939,1.558490814188902,0.1542795583442319,1.5931350178163601,1.8758910404352505,0.0422331080047631,1.3158441534895713,1.9390193671294633,0.6284185826092181,1.0077451446177002,1.3571560781508394,0.9329395415100289,1.759335407061359,1.6278768970501507,0.1316880231684241,0.4194070476450402,1.8373532003010904,0.021021817893494887,0.19655577227611143,1.9651522011700024,0.005847332213796186,1.8864580910814865,1.9988080995210091,0.26582890866654585,1.7004544811057176,1.692594295762642,0.2584352794352136,1.4461269757444097,0.9106528026006683,0.5015597195086423,1.148283248213588,1.2222625892196912,0.4377524673087798,0.8359756412849502,1.5121923861982833,0.21006555074900424,0.5396673368489402,1.7521617932359919,0.059430605627630584,1.9996496011595815,1.9187636581131713,0.0005409011141735975,1.9427298671241164,1.9957472626262127,0.039140670587098025,1.7938541551405431,0.48230520806445987,0.1714648062735037,1.567544134846775,0.7714837010927222,0.38460611627514163,1.2858745913549603,1.0829521845794439,0.5596268857229297,0.9763202013813486,1.3863293266098853,0.3041410592192363,1.7385141340200454,1.6520230427965914,0.22278380968784672,1.993439056909828,1.854116974319672,0.015096231771080104,1.9802672336821994,1.1684970028245938,0.009731309221439388,1.8714779538880166,0.3671401702037518,0.10095940771368628,1.6776827669886987,1.7149178882854306,0.07945503766575934,1.4177848885865332,0.9419933117536177,0.6902526236152879,1.9595928726309837,1.2527889332984365,0.025402363910694614,1.8422777555210526,1.5389269573844742,0.19118788189687397,1.6118123758954848,0.7184748209555165,0.049224073218551045,1.9983242290326642,0.09139609772843094,1.0731277602094025e-6,1.931783297567657,1.335201209191236,0.3445446531036258,1.774354141011266,0.5094444705203873,0.14353284803180744,1.9856787899126351,0.802187177467587,0.026062762901378767,1.9896272682117355,1.1142249891748959,0.5316331462818416,1.8970452912594973,0.325659596852399,0.2819180225337373,1.9223073279568224,1.6755252572604593,0.10224621955816593,1.9965420153400353,0.8873704044533393,0.7428252196125098,1.9735717675847004,0.1765783274814947,0.014593265451119719,1.8114711309794767,0.3917817189007521,0.22463081114212358,1.6542417803081633,0.6663120806376215,0.9672522878687356,1.3890302013493816,0.0698728371078795,0.6605288859126505,1.6588741661516906,1.2830656256143536,0.38691825503728283,1.8587997093068178,1.565129289824327,0.17310898761310323,1.9749560096652035,0.0110345142008893,0.03995651738205619,1.472369536534769,0.10496846490127976,0.00044883384494542877,1.9199165083648047,0.28620579165304527,1.4095258856971051,1.7540893826590729,0.5370682005956124,1.108121535404875,1.2615553365563756,0.8330860117610557,0.7961707689311607,1.5465461255737443,1.1453849863403134,0.5041019611510054,1.7782255841415955,0.046452145896976216,0.26040415625847224,1.694704824114468,2.892962699507784e-5,0.08884818273177908,1.9986607990770864,0.05114512618635214,1.7685823086828658,1.965914811975591,0.19481474753380468,1.5337434889526347,1.8389513355940141,0.41702393774608393,1.2468421365588305,1.123232347406319,0.6960979158412727,0.9358632505494724,1.4233568412018287,0.08187149173873765,0.6311404064072587,1.9400228644697188,0.09828721482535419,0.3623969513108539,1.8744735212908532,0.008895280968548192,1.162440138958258,1.9814627785026389,0.0161779162176805,1.8509067911854273,1.9927179630344132,0.11942475605612013,0.5524364963169113,1.7426410363753306,0.30856487300136515,1.380657364683245,0.9824604220990844,0.001114811798384352,1.0768302904151847,1.994324781545075,0.03526925215630905,0.7655090179281607,1.5725899892309259,0.16352568553287328,1.5792848068284888,1.7975738779287513,0.037457371562582,1.9951626858771654,1.9447606282431935,0.0007617212537046614,0.9906491573405559,1.3730717229817624,0.06153400564133449,1.74810049423139,1.6410906828759977,0.12333529705668378,1.5069079752093653,1.8465762249236959,0.017678025645929574,1.216270519503335,1.154354053303176,0.00783863479857183,1.8784166591304072,1.4516150150702711,0.25432904952802016,0.602116208860634,1.7048244390479423,0.08514760095473106,1.4307619441821133,0.9276928554562024,0.005202899795645921,1.9635268360682434,1.9870002647468583,0.4236972928058137,1.8339800843479195,1.526800247844756,0.13475069430779052,1.6230850515135082,0.7047528027762504,0.33160680860317004,1.9990509969636525,1.0138863105895037,0.6227238229257614,1.0454631686171607,1.3216653166362602,0.3554348722538423,0.7350788478186667,1.5980683688761126,0.15101824454540247,1.9831609606533136,1.8161344959185026,0.841166130446541,1.991584355388041,1.9545930404215652,0.0024813503757102895,1.90328639621477,0.3151468748681525,0.07284970450565265,1.7268798633898101,0.5733358564303777,0.233654370351426,1.4795718443387886,0.8731426120183952,0.7567001618088567,1.185485315896651,1.18532332071705,0.46934982245484824,1.8030131412427197,1.4794271785728283,0.10857625871919452,1.9476950174635919,1.7267666380595852,0.07291148594843488,1.9999366038766722,0.0647056353132498,0.0024929700555740286,1.9546421393994884,0.21948513450934004,0.02937351898228202,1.816229747316223,1.55324852662922,1.2074048784698435,1.5982004816594388,0.734919888262519,0.8955114793588546,1.9971890584923697,1.0452984851017335,0.0001221645698779028,1.7112305463909863,1.3512585664760621,0.3317294369508903,1.7634238434962648,0.5244132322404766,0.1348333539483697,1.9884176013856771,0.0242379204428258,0.02232755898080807,1.9870267463399793,1.131191774147274,0.5165972511707059,1.8893590967576737,0.3383817150655474,0.27012529321776446,1.9287791738903606,0.6019649718952524,0.0948469452079278,1.99781684487465,0.9043734548511138,0.7263424383511072,1.9695252309987366,0.18639908336286404,0.44297880063937467,1.8213429505346515,0.40544038906274793,0.21394825548287233,1.9572562594166911,0.6824763678697521,0.9501708744189244,1.9997966535844238,0.07628682474613091,0.6444983099755508,1.6716379255254914,0.23951364876301318,0.37350217481316406,1.8674323608269034,0.4769200109306463,1.1765636685595546,1.978615505211007,0.013711650320684221,0.86431301550636,1.4873683739218162,1.076665923293779,0.5652975741389958,1.732967759612579,0.29828293818636986,1.3938699603071325,1.9070718320751516,0.0018938685271058242,0.11950289307462025,1.2780173662515173,0.031595965301876916,0.7794640799618543,1.9814943597810217,0.15575835570372554,1.5909065081935896,1.874553475360625,0.041441658292713957,1.313219327539445,1.0543587409135307,0.6309871826793618,1.004980033729065,1.3597374997489116,0.9356987374809316,0.6962549762999215,1.630026658957061,0.13031977029766406,0.4171578872583912,0.827902649746794,0.020461563895262547,0.19491252036500417,1.9658721248870314,0.006149725515072979,1.8851749595523224,1.9986693143516052,0.08878026385521864,1.6984783135932076,1.934054067178189,0.26029321155237994,1.4436505320438457,0.9134072492385242,0.5039588124099402,1.1455480861776064,1.2249577382199686,0.019384294384497736,0.8332485547307791,1.9905135518540638,0.2083729960960341,0.5372143318932663,1.7539811013778699,0.05849514743329409,1.9995725847971557,1.9198518545087895,0.00045378606120527465,1.9418039225977666,1.9959982021673612,0.039910396072439513,0.7489245654411514,0.48467296599636933,0.17301629155321696,1.565265286550007,0.7741765729399392,0.0329629603125724,1.2832237327087859,1.9502257613627505,0.5571459637816002,0.973555903061962,1.3888783290324165,0.06757540530149675,1.7366469318485749,1.6541170952243165,0.11523879634082634,1.993751490722535,1.8555518181992332,0.014621339558699264,1.1995481341897434,1.1712219870060598,0.010119919331662341,1.870118489734008,1.4668017258521415,0.24304712985237187,1.6756468005331613,1.716848581201548,0.0783783825615505,1.4152710125472936,0.9447540417355801,0.0036066673741071975,1.95881110864684,1.2554633225588878,0.409810556006343,0.8023487759755797,1.5412541400185193,0.1895648718409909,1.6096227839264947,0.7211292211921263,0.048370841147386434,1.9981603971662754,1.931723440667062,0.606946922635288,1.9307759392177244,1.3378051176600396,0.3424588131206505,1.7726015161623754,0.5118559375172855,0.1421087403748108,1.9861413214492036,0.8048984577702611,0.8243109938492579,1.2529484290189494,1.1169716184437526,0.5291918200294554,1.8958198289260184,0.32770402919723474,0.2799963281942194,1.923372419619331,1.6775615321442578,1.050716554673437,1.9967679640387128,0.8901184046419033,0.009754265100269222,1.9729365337785523,0.1781505124793501,0.015067708582921946,1.8130839699175856,0.3939789480589033,1.2745120876296683,1.6521480256092285,0.668920031313857,0.9644887319449922,1.3864813756497096,0.9761553945754875,0.6579292247030701,1.6609517507774159,1.2857166139355216,1.4841803951973573,1.8602130514427317,1.5674083962842809,0.17155712502242437,1.975567248760988,0.011447943392499771,0.03918635407732285,1.9957624365449136,0.10620515782224571,0.0005354932759774611,1.9188287310480838,0.2881451185122307,1.407001664888323,1.752270417827627,0.5395209951173784,1.1053721680993736,1.9908675251113712,0.8358130228865143,0.018878102287658405,1.5488596647968116,1.1481202153102632,0.5017026416163787,1.7799590900940268,0.3512972064194321,0.25854588654962063,1.9349795627768445,5.3785734609457236e-5,0.08771222262876033,1.9988000395171124,0.9214044543031906,1.7668103539946842,1.9651953283946164,0.19645763280003192,1.531403097157819,1.8309747137467913,0.419272832927708,0.20349544150108023,1.1259759639884461,0.6987334586766947,0.9331040246756087,1.9993058084347175,0.0829707887769725,0.6285716375730155,1.684205383288448,0.09709518326660516,0.3602692029687249,1.8758114853151513,0.49156655384653003,1.159711079525231,1.9819889778972177,0.01667705186510804,0.8473955782708392,1.5022247667070339,0.12073855147416057,0.549965453335455,1.7444899991920777,0.3105651776490178,1.3780989173743103,1.9141360134517158,0.0009880990193205097,1.0740730057847494,1.2943981389854842,0.8668897373806498,0.7628218476807532,1.5748547976005227,0.1650442103841765,1.577028637109055,1.7992388346354513,0.036711331381309775,0.23782769739750287,1.0714208893028863,0.0008734488193817835,0.9878841497657943,1.9998457103007925,0.06249260279752822,1.7462627114444609,1.9565009059846683,0.1220083229657476,1.504522465219058,0.8447681038384426,0.4451402380020466,1.2135699702849794,1.1570854885796626,0.008187971939905503,0.9017853831866689,1.4540804037274828,0.2524894316425449,0.5995808692915334,0.6261040230008188,0.0840345572134098,1.4282648317812219,1.8905449767299976,0.004924998972314687,1.962783162063729,1.9874409047710961,0.02287728001541922,1.8324510934519629,0.4266817642066105,0.1361402947319995,1.6209198849149216,0.7073958272076476,0.33366611555889625,1.3488227632399428,1.0166511551024124,0.6201644444953052,1.0427006897278672,0.2567642022960639,0.353323231810997,0.7324134955169398,1.6002822096906772,0.14956031621782462,1.9836625127398408,1.817729259085271,0.028751187849656024,1.9912225801923529,1.9554131691774495,0.0026798390584498177,1.9020965820979092,0.31716441611324175,0.07388932746667753,1.7249780674796011,0.5758383301665793,0.10740088740915765,1.477143572058237,1.8642773568044042,0.7540190178136001,1.1827674263504369,1.1880398771503777,0.46700812305218087,1.8615660082228986,1.4818520031074838,0.2319864470397649,1.9485739720261712,1.7286632078917274,0.0718785292551466,1.3996587084205379,0.9618313749152261,0.0023016537905690138,1.9538151466556348,0.22121672554878857,0.39609631562816705,1.8146291155541943,1.5555498382375883,1.2046990492997776,1.5959823400782192,0.7375871459985986,0.0432573742174559,1.9969780620656974,1.0480606376892145,0.5912849011348613,1.7131716238933938,1.3538461873790075,0.3296749355026398,1.7616349112424394,1.6251167892153848,1.1196121102143828,1.9888334597928419,0.8216938165512129,0.0217502397026047,1.2363720412571007,0.14074541403212537,0.514178479834075,1.8880914377158344,1.4331071794769874,1.3403067672588742,1.929800485795274,0.60450317291236,0.09367497359899013,1.4492934567899751,0.04755718153493971,0.7236838744419438,1.9688440827515148,1.2188085594633065,1.5434882049627368,1.8229171561262054,0.40766599663796754,0.21224194476004754,1.639092867079015,0.0033845478856496802,0.31639994657176473,1.9997370700884394,0.9932493867243465,0.0006636252825095168,1.673684011404998,0.2413121263740624,0.37134933690623784,1.7960026182809297,0.0105007709103766,0.16948714509818397,1.9791805528138458,0.45935453079840727,0.03458801126900546,1.2892662266492243,0.11400263729867077,0.5628090006222073,1.9119476582549186,0.06853962816895942,1.3913268091010014,1.9082324317118098,1.954129109846042,0.11819542897686819,1.280672453886266,0.03228926220359052,0.7767678403831463,0.46032478089276574,1.1650053649380983,0.009244692389634102,1.7905439124773392,0.3644022960650438,1.9962323385475726,1.680282564387389,0.00037721943528656876,1.0022148847623562,0.33045218136283516,0.9384584251087887,1.755725227336743,1.6321716035870422,0.20675103595088684,1.9901446411747852,1.8279778945113154,0.019908799592651683,0.14021033962354545,1.9665846634030741,0.5062695119551861,0.05032738307051743,1.4412658248403702,1.331762766561716,0.61275352364088,1.9330629686225018,0.08987884826714954,1.4411706961257587,1.8839346337799656,0.5063616981154548,1.9665574838896887,1.2276511671601391,1.8223218909187597,0.8305227431827982,0.4149991534620059,0.20668649434010866,1.632089464482616,0.004171270752745593,0.3230489202743906,0.2843870624263246,1.719427634042689,0.0003743136862841556,1.680360256799145,1.9962415261590847,0.3643204617419523,1.7904789901107692,1.174872147071168,0.17457410007256224,1.9809816843429249,0.7768711714664477,0.032262547709456024,1.2805707084921014,1.9510836492172599,0.6629759294110121,0.06892104953661449,1.391424358033782,1.3829627064953671,0.6638619378065092,0.5629043405016171,0.11395348886837187,1.4896886197167227,1.8569801204031742,0.45944371045552856,1.9791590292603574,1.173945661998913,0.010516098211249325,0.8847870194457663,0.37143177910213054,1.0560743761613418,1.6736056679823517,0.0006674921661536937,0.2837301591715792,1.999739495175506,1.7564104233281053,0.0033758393720351165,1.111641310825948,1.989997480261611,0.40758059266921287,0.8395745525853742,1.543577184143433,0.1448780283364416,1.968870331676794,1.884374219986539,0.04752488537338562,1.3327502014322368,0.09371977434830836,0.6044058131613869,0.09031312635301492,1.3404064432209988,0.05003307012782554,0.7159806338949604,0.5142711369358148,1.9641913445352106,1.5367347565154295,1.8274499048931243,0.8215895114463694,1.9888176568895057,1.1197173533303306,0.004076294023854787,1.761703598767773,0.32975360201640347,1.001273980146334,1.7130973116181074,0.00016726384984233622,0.24656418751287112,1.9969862913022522,0.357343898276127,0.009372775237637798,1.1659333005327246,1.9807779410462403,0.4526212735706404,1.8527617142562463,1.4967614480470746,1.2718521014522692,0.12256077933978005,1.9086257668912685,0.06564994076694586,1.3997558769866973,1.9115611947036584,0.6553321790171831,1.9485404102792734,0.10978446379822815,0.03434311699951498,0.7689529662227437,0.4670978188901004,0.1700115968283803,1.5821677067017088,0.011868931199205845,1.8015241327633533,0.24192541943555146,1.0651292273975905,0.0006297947603113307,1.7250510765588776,0.2900898883190254,0.3170869757816819,0.9565762822730104,0.0026720892682569053,0.21166270972431644,1.9912365888449608,0.4002967536811771,0.01834709715378713,1.551169007357781,0.1496160872280774,0.49930713213698386,1.8801034813840654,1.4484526673736107,1.3241820139311182,1.9359567964222992,0.6202625068227025,1.926383446958484,0.08251159243964501,1.8876585413441784,0.7072944634673958,1.9644684647875417,1.2354576934869483,1.529058642176401,1.8325098258940478,0.8126709615663127,0.2018265783788944,1.6258509189788284,0.00493551227931599,0.9303453102982572,1.999198973076115,0.2718326244276519,1.7067083065880726,1.0490004350663693,0.2525598495407553,0.3581463461027983,1.7855385835113633,0.00817444002719081,1.1569807989176906,0.18495136505157228,0.7847006070882777,0.03027183228931274,1.504613986801132,0.12205906985515846,0.5474978513846409,0.6801121281378151,0.06245572205840577,0.07152866197952523,1.9152535373222985,0.5701358226430295,1.945628857175865,1.297039633536792,0.036739795672935505,1.8661886072188945,0.17059599821030247,1.1818422879579584,1.5747680553433987,1.8008976802439238,0.3776931537389179,1.994604166507801,1.0741787189827894,0.0009928158543025534,0.9851192348306139,1.9998904600016933,0.3104883971663861,0.002749117916782229,1.6453251971886624,1.0935942343524623,0.4011348438169806,1.818270485436468,0.01665777850079908,1.2108677880790735,1.970825766606096,0.49147527580872474,1.8757603168103891,1.4565423204188315,1.935587650685119,0.5970485913862731,0.6286700610741385,0.08292851707920956,1.4257644448041449,0.055856116434541914,0.5213011195166728,0.13661464200400464,1.2442643898768482,0.023469100402107035,1.837501237527662,1.9875891202752465,0.19639453819870967,1.6187499706711463,0.9313897164134795,0.335730517401962,1.9987948423941564,1.0194158722981286,5.26919208586607e-5,1.6927896477688704,1.997576719700251,0.3512165359542758,0.008308570591401998,1.6024914606587675,1.1480153789503693,0.4459232645674044,0.7935681549885729,0.02809660753636689,1.2641210021987024,1.956225992703068,0.5394269003354233,1.9008998704172861,1.4070984903181096,0.074936031606749,0.6478104245953855,0.5783440471055838,1.2960398121935552,1.4747116514674297,0.03921574349742152,0.7513397546252801,1.9755439539096287,0.16002887625069362,0.013133423880725914,0.8678223293448017,1.9947122308193228,0.23021847916750415,1.0832221062110818,1.7305542062573127,0.9760494200206571,1.9999835839940645,1.7451178500765048,0.0021179660745415108,1.6522283833206104,0.2229542712802286,0.39389463007086,1.8130222550175765,1.5578469020298038,0.1538656909787267,0.4923769942269439,0.7402564101821347,1.8713450836756547,1.316580385735095,0.10107804008806265,0.5887628033151266,1.9233317186027383,1.3564311027217189,0.05551164168307676,1.8958669342841112,0.5292853439083225,0.1320732210813237,1.5222320854620648,0.025463061884938076,0.42809043398895874,1.9861237289139007,0.1910286287716303,0.005763830568084827,1.7726688133593473,1.9988456775965264,0.26635604195569196,1.7010081366878875,1.69203429920318,1.0308720470283483,0.26473520143346174,0.9098798806459574,0.007182431017285773,1.6097068096442904,1.983970385203925,0.43839440809485075,1.8437081810911917,0.02600136320459101,1.2553608336681101,0.5403564134885311,0.6877253393988926,0.0596944375450007,1.3680882690494034,0.07841952711888578,1.9224119692272112,1.9429884411806195,1.3046924413235415,0.0389259648420488,1.8701707285389206,0.4816414001844559,0.16059742288025858,1.1996520059305682,0.014639406058094884,0.3839946015652266,1.9937396533786464,0.22445979041981423,0.0013824701929400218,1.7367186163932606,0.30223376814073444,0.30469861307814294,1.739037155814978,1.6514344439935327,1.0856018863557937,1.9933500062358966,0.8554359522852852,1.8077071189135303,0.013522038809113845,1.9727186856155248,0.48458212343113216,1.8718582945944273,1.4636670846775126,1.30796251096353,1.9418395521772198,0.5805108570069029,0.0797584694560991,1.418489842290414,0.058530876289395795,0.6909906024091651,1.9598109587614885,0.12760322407779034,1.2618167561571154,0.805821368731992,0.4355554124966169,0.19164449651376136,1.145652961361773,0.006777307125536369,0.9133016430726877,0.3494009524239573,1.0274382933989212,2.5111812516076526e-6,1.6985541700336613,1.0218036691740302,0.34513095177269293,0.9189181077511702,0.006137992945528525,0.18901402116735655,1.9855476244702754,0.8014265193314799,1.8388039020521392,1.5192994462755056,0.13037210081424289,1.961377528484946,0.5233993645196877,1.4144148887122214,1.3596385895460192,1.9220071390636957,0.5856339394052307,1.93993043716417,1.3133199965315996,1.4586658951114808,0.7435752471019843,1.9737487103190294,0.155701545810066,1.5606946411082117,1.8110173672673313,0.8498611450233019,1.9926852985549228,1.6548285006305166,0.0019003950694642668,0.9680279341442944,1.999997367143379,0.29820741838171616,1.7328956442917354,0.001102062381918234,0.22803030169754757,0.3875315363627607,0.8644180407386274,0.013694161759944201,1.1941260007557921,0.16367414815989034,0.4768296676934076,0.040173985491065434,1.4716853810176544,0.10462261271958273,1.9448493703691487,0.6445973921035779,0.07624622109671964,1.3733230121943403,0.6919864455958343,0.5363804516611301,1.957225593077852,1.2608062207150135,0.02729376226248803,1.8467203628765576,0.44306684059606116,0.186337454211844,1.6052296329684428,1.7777380005077772,0.9042679363502897,0.26092670218007796,1.0365051805432957,1.6879546537343162,1.0228503190648348,1.9986203485313627,0.33830223203612286,1.7690785576345291,1.6160476610244658,1.1310866847805823,1.987043760496634,0.8103254729590148,1.5184044798011465,1.2475941004757145,0.13488651858460998,0.524319985770635,1.8933483649691585,0.053674863082874946,0.08156423191152395,0.6318618468772512,0.5939069923469612,0.09862300152917669,1.321921767834099,1.8740968155782214,0.7348176770986743,1.9716437534307265,1.5615611996363827,0.016039183974790316,1.8162909846288025,0.39838729071896783,0.21941887133085225,1.1002460091854014,1.7421210982799775,0.9589624557991944,0.2989536026323881,0.9816844941108749,1.7266938209075005,1.077604026061396,0.233828405476191,0.38038581568873564,1.8029499619535074,1.5719535763456576,1.1852191511053656,1.9767673443419587,0.7568029826786264,0.0376680728697929,1.3003180421485663,0.10869903641828438,0.6436190254760112,1.916632108284928,0.072809990803402,1.4019439066105108,1.9033318712492209,0.5444371280510985,0.12370892141837986,1.5075767800863749,1.8461629023883164,0.788056524102695,0.45062410015262155,1.1535872546976995,0.007741955469823036,1.7834081977424914,1.9978785424872896,0.254846369100306,1.0455690635827999,0.00012643491085106984,1.0137803159039966,1.9990556084728428,0.9269188559654178,0.005282260535876326,1.1321244897764422,0.19976182273478438,1.988458670162132,1.8344080548307566,0.022270678137751077,1.2387949308148305,1.963555198789809,0.7040114347636479,0.05401376022192206,1.4308576074722614,0.08519040961699642,0.6234426395124273,1.9371608620501677,0.09473184044170235,0.04378970864663556,1.8784673134325933,0.7260819296283825,0.15142858361585976,1.2163740143511432,1.81568579882459,0.8419323791889359,1.9916845262914964,1.0992043171524553,1.6410093242638726,0.0031826039658563454,0.31458158617096443,0.292513468175576,0.9907551575869686,1.6643095857155021,1.0685567584913727,1.9951730942708727,0.3732910846540186,1.797509929079589,1.1862478458782888,0.16810040101313062,0.4700077574385385,1.8633582871921468,0.03524135300927611,1.4876048684492424,1.9474470336895426,0.6521094971917201,0.07320266262399089,1.3807553869220548,0.06443129468579267,0.6747770564451356,0.5525312938774143,0.11937452464107534,0.029187099652064563,1.8509624725109837,0.7791998987109666,0.1816986751119497,1.162544734960291,0.008909394117462166,0.896283315433338,1.997246905125143,1.0445232154313633,1.6821086503480447,1.7106847991596315,0.2757073142763804,1.999408653567706,0.3248087084505745,1.6223488422727401,1.123127149870685,1.9882995311509077,0.8182104692355179,1.8293740282674116,1.5338331285587175,1.2299761101070543,0.517276751730133,1.8897136474799103,0.05111166446042725,1.3436344873883823,1.9284912630407658,0.6150544200179204,1.9339573008925908,1.4524543035925674,0.046484084316568475,0.7270889492953772,0.5041940164901111,0.14666397842294043,1.5464573509853505,0.019437402552094585,0.40481658177807933,0.21442821743774,1.108226918191944,0.0030996918198993306,0.9509459780285999,0.32121514632239645,0.28613155459876705,0.0007988813581366605,1.6710627617431717,0.23900994493916738,1.9960223731131184,0.881375366059642,0.011018815555151829,1.5867411672766536,0.47089583077720054,0.7645944498445965,1.8587453969904102,1.4866905807295527,0.11236616653433174,1.9503101156759095,0.6606285977085539,0.069833913374169,1.3945831630464003,1.9067448594823238,0.6662121534990282,0.11987104715708008,1.2772718249446167,1.4918618761330829,1.8556920147507574,1.9816426713605138,0.17651818179331202,1.5915324030037525,1.7883702978201317,0.8872650747618476,1.9965332017592137,0.24287016006710838,1.709947896943611,1.0057560752562746,0.28199180153270575,0.3255813244894471,1.7580395897385395,0.0035837203238078263,1.114119677516188,0.41778867184099044,0.8271382276666915,0.02061804502992237,1.5414818737179428,0.1435875726982907,0.5093520996160817,0.721389344287704,1.3446174565690343,0.08846086616542614,1.9318217736746464,0.6095886275975312,0.09135182897441396,1.3380600413416222,0.049256927255079686,0.7183731051970108,1.9674595677468263,1.224201509205142,1.5388376609242573,0.8340137920530112,0.41213078195639574,1.989186555919884,1.634829570989569,1.7534710883656057,0.9418874857426315,1.9995949711984182,0.998779671235902,1.7148437648001882,1.6777607142962325,0.2449264709191421,0.8803359124056941,1.792642988319792,0.009716562233776038,1.1683925126889172,1.9802881828787537,0.45471042447960774,0.03316086226201953,1.2839679237160992,0.11658053592774642,0.557841901072016,0.6691756259678967,1.3881632430656126,1.3862315497291098,1.9105327887259818,1.9524587701517317,0.11560073795101733,1.2859761706818147,0.0336980484272692,0.7713805024267588,0.46498885181423844,1.1704573431723047,1.584193938705083,0.8883053733089821,0.3686815260588663,1.995737491121981,1.6762187228600478,0.0005443928377285578,0.9966845571657968,1.9996524015188823,0.9439791909278512,1.752091934109285,1.636446975450923,0.21013055642541256,0.4104372136990856,1.8248640536504588,0.018825756923065096,0.1430475300629609,1.9679875630960102,0.5014678241752917,1.8812849953963418,1.4462218443448138,0.09222866623050874,0.6076606336566099,1.9310593761317745,1.3370745827066128,1.4362009235075757,0.05210800927781689,0.5111787744189973,0.14250775883906142,1.2330327824960465,1.8254561855306162,0.8250750284633301,0.41949335939938315,0.20333170105397824,1.6277943886220705,0.9429326590712678,0.32712973347627416,0.28053510246246416,1.7155754611825897,0.00023829934277208586,1.6844028921830025,1.9967053201105358,0.8893470843241592,1.787079648650563,1.5932203592898557,0.177708639136955,0.4555882938524285,0.7822654661311004,0.030883926192771027,1.2752582445052654,1.9527776020439958,0.5497235904703845,0.06691773360169417,1.3965074179266452,1.3778481524276744,0.6586585643565306,0.5678850661468018,1.2849728256595172,1.4848592707844244,1.8598170561502578,0.46410466772100845,1.9780208777172776,0.16636091518368845,0.01133115010369723,0.8792953013773612,0.37574261246574414,1.0615951245314248,1.6695079670615018,1.7226077143290552,0.9876133119116076,1.9998504314515961,1.7527814970582558,0.002937046081357253,1.1061438686225806,1.9907625845929307,0.40313427218992437,0.8450356843851625,1.5482107858482899,0.14775816495658067,0.5023756341237254,0.7291051343599347,0.04585482853440137,1.327529950158734,0.09607116912527991,0.5993326879349749,0.08803032952669343,1.3456012660788064,1.4280200541917405,0.7106824160119369,0.519112659141483,0.13787581808872307,1.5320603461498754,1.8305427375206453,0.41864122469851384,1.9879778030414266,1.1252060559864714,0.004590355583585559,1.7652751784530896,0.9237855929069249,1.0068042634673966,1.709209301508409,1.6836392103016435,0.2502120050038511,1.9974000749047545,0.8983673621546604,1.7814515381797484,1.160477122516017,1.981842056193166,0.4480014129266605,1.8498601932058036,1.5015535339402502,1.266525913588,1.9554931110233267,1.906302353008662,0.06369346805577625,1.3788172460560777,0.07399154321058321,0.6501460136259181,1.9467746993697301,0.10727880341038187,0.03579477226733496,0.7635758279996374,0.4717855861879313,0.1669395908510205,1.5776622841071501,0.012733569724395988,0.870295162544758,0.23833032338899507,1.0706467969766187,0.0008413209462854176,1.7288486843999613,0.2939956972539498,0.31305753129167035,0.9621020371238761,1.107184806948171,0.21507724968938569,1.9919519761238975,0.8440015051978609,0.017307608478237424,1.5557750318953516,0.15253893301511579,0.49452761658029554,1.8774643327487879,1.4533888345704122,1.3189454149223128,0.6002921118249741,0.6253843695391943,1.924286668431125,1.4289659853340186,1.8901916859343975,0.7020108452241496,1.9629926197823027,1.2408289132913697,1.5243576143888853,1.8355609420201096,0.4260460914757902,1.1241673150448859,1.6215280254572297,0.005499503479795553,0.9248295004031689,1.998962383165229,0.26805329071766815,1.7027847791830923,1.0434760216895183,0.2562452239445404,0.3539153716887361,0.907396003595416,1.5996613511257198,1.1515166576927633,0.18816804781531937,1.8504114580159512,0.02893623259994893,1.5093808336911811,0.124720235067184,0.5425730460190803,0.685356739497036,0.060546253574140674,1.3704063078057998,0.6511269557532544,0.5751356751039135,1.9438156766568433,1.477825443125476,0.03823980005267047,1.868938950999338,1.976316211509726,1.1872776115730677,1.5702337248459903,1.8041969874778965,0.3820316476386709,0.23248368849522305,1.0796926557158206,0.0012544646226781975,0.29325465408324913,1.9999570231891788,0.30649348005665533,1.7407151832997778,1.6495399745318045,1.0880867714895361,0.3967150559113317,1.815078967003863,0.015667606417885782,1.2054586073620759,0.15738944081690942,0.7368383685939265,1.8730771897704237,1.4614556626339157,1.93752606468933,0.5919932979923997,0.6338106353095072,0.08073748140634163,1.42075392361964,0.057692976047750144,0.5261639343831078,1.960507993582623,1.5252487695716646,0.02467513669190402,1.840510386068099,1.9867054297448714,0.1931153962831217,1.6143959656501436,1.7704159734883391,0.3398745425723908,1.9985081401512559,1.0249448401813743,1.1211856985382518e-5,1.0344113785868958,1.9979462359266897,0.34701804239370715,0.007612320096640146,1.6068961255217107,1.1425437241754084,0.4413279470922413,0.7989825017022483,0.026809745808834662,1.2587830395876587,1.9578296992595372,0.6843631738038214,1.8984857910183583,0.057476349149133577,0.07705065135693134,0.6426398371428946,0.5833651339310216,1.3013176996667937,1.4698369397620972,0.040763973549866495,0.7459869525990812,1.9743134495075685,1.5710934311876346,0.014041867270428443,0.8623425660420694,1.994129049105803,0.2267002144858815,1.08873195634213,1.734319430796113,0.299701481836234,1.9999999800809465,0.9701220515214853,0.0017734818490929838,1.0891295643908123,0.22644717363152833,0.3895051788688785,0.01585274009963944,1.5624282159436347,1.1965722536508703,0.48761995866837016,0.7456008762380375,1.868618199032402,1.3113296847779907,1.940643576480214,0.6328366433143373,1.9211939424967701,1.3615927376886996,0.0573430392196701,1.8983104741112975,0.6847419821102508,0.12933963334913023,1.51750783445714,0.02671800908379096,0.4326357830744828,1.9851905513545005,1.1421485994352307,1.6072133456243376,1.7761676882527389,1.998564757485426,0.2626092288511612,1.6970534599336569,1.6960158495981337,1.0253439036837324,0.2684947767604441,0.9153890627225281,0.006535977997049747,1.1435798662570829,0.19287965558214315,0.4338271919948533,1.840726598258968,0.024763345338040144,1.2500099741203663,0.5354519573854795,0.6929838617025663,1.8944664396362807,1.3629406110243967,0.08058041559964457,0.6341821266162562,1.9411333935743873,1.3099551274594998,0.04046863579636406,1.8728824824859345,0.4863786431937531,0.1576044809481867,1.2050679176762717,1.5552364435163044,0.3883604766256159,1.9931066073797443,1.0876891264931599,0.0016884392873367515,1.740446940979412,0.30620593894915504,1.999960644411337,1.7353002816474632,1.6556203534701464,1.0800905694424565,1.9939715403132183,0.8609103768723254,1.8044341869365796,1.5699057520538793,1.9739867745942346,0.4798508694589526,1.8691364484498079,0.038349211906243186,1.302696275498163,1.9436836803003041,0.5754970782465709,0.07760825130939664,1.4134606987743137,0.06040953580091524,0.6857356794263989,1.9582442151053006,0.1249133597055383,1.5097243122965371,0.8003992937095932,0.4401291522083184,0.1884011958377565,1.1511220646775848,0.007435265987815631,0.9077934853688335,0.3536107353233555,1.697803732984091,5.409650944865341e-6,1.7025007386225441,0.26778135638682965,0.3409614786661298,0.9244314461155918,0.005541390598094442,1.1345965184731546,1.9864693794318615,0.8068497327368308,1.8357801893810226,1.2510235013615376,0.13311575482255966,1.9628849503467776,1.8949340599771514,1.4194416180731393,1.354472806131029,1.924134224461212,0.5906734656584498,1.9380282043974888,1.3185670482503475,0.04306264818754513,0.4854806575119841,1.9724749795493959,0.15275091340755664,1.5561068470828943,1.8142403168288523,0.8443958201706739,0.22163721675258996,1.6506388049808387,0.002256442730910968,0.9625009430773168,0.3127674901535653,0.9781439898971113,1.7291219414641805,1.6624431306355962,1.9938562139976024,0.383169222005571,0.8698993552687273,0.01279714966423906,1.188697930068845,0.16671883265544307,0.472124584654638,1.8646142072817504,1.3036939066886126,0.1070989958901053,1.9466461259716663,1.918041896663132,0.07414231220944167,1.3784477771779555,1.901807231037885,0.5412875838211171,1.9556108012115194,1.2661411422347828,0.02859188980958638,0.7915186165399204,0.44766859454917685,0.1831349220713433,0.007308382143148218,1.781202395136698,0.8987644929532155,1.9974287622839522,1.0420312434371568,1.6839304925172471,1.0173211063184155,1.9988954790331845,0.923387570335617,1.7655320771984755,0.004628639746920182,0.19764323752653323,1.9879160112720071,0.8157582892545218,1.5231257145449508,1.2422321993826453,0.13767361853521276,0.5194626999627104,1.8908495783701191,1.4276592447127376,0.08376590133482742,1.927562103221406,1.9383905066000215,0.09624196776075222,1.3271527533423022,1.876769805069543,0.7294894195237475,1.9703212558128615,1.212915333991055,0.01704075334830024,0.8454300642537581,0.40281403342254385,0.21597406484350934,1.643723303274566,1.7458165255426559,0.9534374347675045,0.29502057447045194,0.9872141538174489,1.7228835999675831,1.0720892099965995,0.23739409678745205,0.868861413756685,1.7996413630561245,1.5764812634742404,0.16614050530449143,1.9779375659502567,0.4644417400712053,0.036179224134447296,1.29503842614582,0.11122017503768811,0.648791666703924,1.9144074507571867,1.377478525515441,1.3968738550661892,1.9056902402037745,1.9559187308918604,0.12105791910022279,1.5028040692129487,1.8490971979534376,0.7826550958376338,0.45525348965702406,1.1590495966907395,0.008443956396448349,1.7868333452174032,0.35975434843299325,0.2511696418264975,1.6846938884743508,0.00022966475272667708,1.0082503230003206,0.33494735344895277,0.9324354927802763,1.7596640399473389,1.126640645484294,0.20309048758014636,1.98928134497154,1.8313472816528198,1.5308353675446205,0.13714398486985313,1.9650198740639229,0.7092984635225201,0.05223526339364004,1.435841678176991,1.3374503841549663,0.5980081557971431,1.9352170199275185,0.09239618482032508,0.04542294440642536,1.8810962740378616,0.5011218178386674,1.9680876818532371,1.549419644307478,1.8188725812725322,0.8364740145313323,1.9909576512408496,1.1047058268483183,1.6367548279277935,0.003638716742496828,0.31861895789472416,0.2886158707266956,1.723606587537474,0.0005576426416968872,1.0630384144215816,1.9957005934889693,0.3689911574314292,1.7941612667676907,1.1808114553624032,0.17118203490247885,1.9797923257729089,1.8605545390602398,0.03380088132951953,1.286358666134752,1.9492017604652467,0.6572996748212223,0.0711398630753961,1.3858633056285279,0.06639860050561164,0.6695523645947934,0.5574838882320959,1.9501082776195628,0.030528323955026915,1.8538541232774475,0.45437584805600184,0.17853242636395528,1.1679990099861763,0.00966112833795063,1.792399544765464,1.9968215682159953,1.050047357732067,1.6780541775160145,1.7145645607899884,0.2795314965463255,1.999583531162797,0.9414889752814035,1.6266681179160747,1.117637040329423,1.9891279308515037,0.4124537556967056,1.8262715970658663,1.5385013367413554,1.2245905187984487,0.512440840114156,1.8871753512173317,0.04938074383772795,1.3384357016366446,1.9305307673876713,0.6099561689211708,1.9319665718494694,1.4475155251376566,0.04816518324374797,0.721772749930738,0.5090043015940511,0.1437937395114155,1.5418174343203068,0.020537479839935147,1.991097577441808,0.21101823941187414,1.1137230866199694,0.0035500343113100685,0.9454230786734303,0.3252866368490278,0.282269708606226,1.7173155969937084,1.6751526725185495,0.24260944395958872,1.9964999113643338,1.794797046603985,0.010215225619043644,1.5912104967068488,1.9795823883759844,0.45768225736955237,0.779831679826079,1.4915142731476956,1.2776553409351055,0.11968160808084305,0.6658358846266259,1.3848972604413674,1.3894955495306542,0.0696874293735259,0.5565453024990961,1.950434309633971,0.1125500840226894,0.03279255926011715,0.4534988044712478,1.9805728681826338,0.17339319544147658,0.009516497642485522,1.7917604924413406,0.881771746606837,0.3737959550579406,1.0591053620966129,1.7138317823895424,1.0002257715587584,0.285852066976902,0.9404438902331915,1.7544210839481056,0.003131177549819175,0.20796377144802247,1.9904212548241955,1.826860839663543,0.019515804296556416,1.546122991282902,1.9670926557292212,0.5045407256347862,0.04970618349305422,1.443049935657323,1.3298856542693636,0.09500720860080092,0.6146860228320439,1.9286394298535774,1.4393847465613174,0.05098575100770941,0.5080925418324375,1.9660454634434623,0.13914235794537566,0.020326931843973828,1.8291509373868244,0.81860302191275,0.20547706478927907,0.003462444011561705,1.7570956382786633,0.9363674131225318,0.2829990880705542,1.0043099930706423,1.7109655767109748,0.0001163449965886354,0.2485639090351771,0.8858283112598724,1.789259115743349,1.1729133373777914,0.1756986085363048,1.9813658312877878,0.4500829955875998,0.7886895747343765,0.11443992138664238,1.2689291667658185,0.55288832472061,0.06819722750202306,1.9030538467312574,1.9086263089580668,0.6619892301957522,0.5646942439489986,1.9475746640464684,0.1084055387385624,0.035136388544474095,0.4611182368022665,1.9787531130738307,0.16832198811155175,0.010805767142272549,1.5714221397818187,1.996150184239375,1.6795916740782744,1.068158502529424,1.7201552904327981,0.9911543309705071,0.2922314064712598,0.9495016701171743,1.7484356385015605,1.109664411074005,0.21353423468767452,1.991633074493362,1.8217249847080739,1.226630356434209,1.5536997039637743,1.9693608573417793,1.883443994778242,0.735442264348263,0.09031366541448826,1.3213084597660902,0.6025797431884748,0.6230728628442092,1.9252358677388848,1.884374825873404,0.7140739966653231,0.5160108010912426,1.9636619090906058,1.5350553779646057,1.2482216021441923,0.41576357133431696,1.1116426007306959,0.20000127349539765,0.004257681553047954,1.615537316094627,1.9994573330497882,0.2767051469962074,1.0133811630042135,1.681050475204688,1.0459678349761388,0.2545802117126337,0.8948451227450863,1.5895204984673668,0.007791611211775518,0.18086832759826965,1.983068515090078,1.8517211128402242,1.279666225159795,1.5072327951871418,1.954442414613114,0.5447925244666204,0.682990097172435,0.06892152307788202,1.9123772441731237,0.6534656306748134,0.5728790078252622,1.9446370401112123,1.4800150926579585,0.7670181298800605,0.46878201509474127,1.9768528138627928,1.5805492688533982,1.1947613593261757,0.3721648614361811,1.9953139670022928,0.23408500021621692,0.0007023557172151085,1.7264195350514346,1.999760556420687,0.3156352798330313,0.9585636056381514,1.7423886023680706,1.1006431800586047,0.21916941821087865,0.8405046242931768,1.5443677904153068,0.01611047172170965,0.15066436699489527,1.9715492877648995,1.8791573450832477,1.3318615412569192,1.4592413696084072,1.9366553413236434,0.594271816931025,0.6314907211565614,1.3507855188834297,1.888572776616304,0.7053930467719889,0.5239688890616981,1.2373904166560952,1.5273696629673268,0.8206625032585909,1.8391563672931226,1.9871077323540356,1.6242982861393545,1.1407157502473213,0.3304531454918519,1.9991173967189502,0.2704707277091306,1.022451231767585,1.6876648855251186,1.997058942997112,0.35662230947258555,0.009244516299804939,1.7779888646309607,1.1550160363815265,1.612937964730369,0.7866434981973726,1.4975789542365054,0.0273864677550264,0.12301313258632962,1.957110014205878,1.9039512202922069,0.06176563184224382,0.07226926366462272,1.9160530975263197,0.6449705483552999,0.58109892058269,1.2989383812605597,1.8620976534143932,0.040062050997992094,0.47648950867671425,1.1837978788389227,1.573139193981639,0.874845885608196,0.37925141012768304,1.99439584282786,0.22828411186663689,0.0010834059334381418,0.29075379041846294,1.9999179226939272,0.3090490966159781,0.9676289510662225,1.6468434203627753,1.0916136668579672,0.3995430470833383,0.849466492126909,1.8112508374393204,1.2089229832555692,0.15548769800277318,0.7334236271129202,1.8747983472770322,0.041585708669053645,1.4672807307047484,1.9397940924648738,1.9260282190754063,0.08213722626712916,0.053208449524690726,1.41477815348347,0.6967363408399181,0.5319661508523481,1.2461927674560447,1.8330314470448448,0.02614831125388961,0.43058356862853786,1.9856151681161092,1.6171861227914828,0.006093911013118292,0.3372186804448649,1.9986952404567822,0.264296343255666,3.4250802825597226e-5,1.6942227061396231,1.9977131389012117,0.3497041574710422,0.9129039633799598,1.6040778307825534,1.1460478824016813,0.4442684919652815,0.7955148335155373,1.8420745500560467,0.02531802973221997,0.12740817030170237,0.6810049663669275,1.900034759155409,1.3746641709877596,1.418127256282111,1.9196535665222618,0.6365046823193081,0.1052675090770262,0.0369932708414632,1.4640207336062971,0.7494136093730951,0.484240083278784,1.192707207389963,1.5656819540166422,0.8658509295324863,0.38638904181163425,1.9933958872708684,1.7249789615182913,0.0015466595564261887,0.29717797743573304,0.9639473624898497,0.30251977351968273,0.0019905491851612833,1.6537348859984293,1.9925096719429654,0.3923137191937144,0.8584407477488236,1.8059134070704603,1.2000431427896063,0.4906642192688174,0.7421777666163818,1.8703673600726969,0.03903633392706607,0.10195126660754583,1.942855505541528,1.9225660657530792,1.4249117176018502,1.3677170767850635,1.896748969865809,0.6881045912516294,0.13108696090111416,1.254974858422164,1.5118686732176696,0.8028440294503236,0.43806416125249703,1.1386424549326561,1.6100231696157086,0.9203595312870946,1.7802979982606517,1.998190899003605,1.6995882069431802,3.159827891563438e-7,0.259249645693706,1.0187682691754814,0.3428395199810993,0.9219445064213384,1.6112822287503266,1.984323161132896,0.4367497163406857,0.8044029964421509,1.8371471240605306,1.2534371622183076,0.1318750158352079,0.6896155989951875,1.4079589038929887,0.05564286867214163,0.07919349908154305,1.9231783548691275,1.9423245479560434,0.10125300022902317,1.3162017028540247,1.8711491435538607,0.7406419194432079,0.1595179799192814,1.2016006775709953,1.8068536769787664,0.01677571702884728,0.3935771691140296,0.0009881567086400533,1.6525309261392283,0.9751074969665755,1.7448515579909993,1.9999857916358508,0.2960478478588775,0.0014595279151177198,0.22354768096110378,1.993577055090479,0.38513439936564775,0.8674266526444249,0.15436823274556077,1.1911468402607095,0.4828785940138671,0.750953122972231,1.8658647481075357,1.306069461947997,0.10597870422841937,0.6379863092141724,1.9190279921046494,0.07508772208973724,0.05920326747879823,0.5301168457451999,1.959250820530562,0.12663267435729242,1.2637359668536792,1.5040546740814669,0.7939587629881341,0.19047511509877646,1.1476205745018855,1.7732665902719602,0.008257298060231455,0.3509128150297971,1.0294266039159954,1.693077464125166,1.0299302784692463,1.7071664243127112,1.9987751705164674,0.3360289619113701,0.005919909609568341,1.6184363227367697,1.9858826278148696,0.42927729202555187,0.8133072555475055,0.12638735633357756,1.244651468134422,0.530561709267175,0.6982517739513263,1.8919799667711292,1.3577818526304453,0.08276942409864319,0.5874450720185396,1.939249561843211,0.09731245157513424,1.3247946867179228,0.48244736857099035,1.973294010608829,0.15463730328931802,0.01480047332120804,1.5506284373393298,0.8478948751030952,0.40081520050545005,1.093196789462092,1.7373554071728088,0.0027196177717939696,0.3101993291246442,0.9746037597627262,1.7315409186645234,0.0010106790997973514,0.22929622756054258,1.9945626742355755,0.37800567840376775,1.2020942023763308,1.5744413460765356,1.9752250746426983,0.1703730572579728,0.7597489740339021,0.10103217204252057,1.297420782208694,0.5796557478057337,0.6464573462592091,1.9154142892872659,0.07167699663345961,0.6900946480268462,0.5381437919500196,1.95664816399769,0.12225025944915224,1.2724753717765225,0.43633342504932116,0.7850904521874251,0.1851827175318248,0.006887257396990032,1.5955472557426722,0.9022881477581309,0.25958824753430676,1.0384928962100828,1.6865096861862603,0.00017931997427511615,0.27155907807896595,0.9198572454432516,1.767805685673202,0.004975203302405529,0.19553471405606748,1.1190742654686723,0.42185183394482884,1.2554620676092585,1.5287198535201978,1.9616364274517037,0.5225712657982391,0.7069127805423723,1.4244555190082209,1.3492961813309485,0.08642083037071102,0.5957255109723971,1.936097282476623,0.09344618739320809,0.7426646603065428,1.8799138832096387,1.971171506087061,0.14982619372234518,1.2193371167224683,0.39191361324084006,0.8389352543991546,0.21817711111784488,1.1022249047716175,1.638676123246861,0.0034292258384357455,0.2975365213689789,0.9836733103853722,1.7253259387828472,1.0756207574866026,1.6740842515060834,0.8653516046971104,0.3709281429487934,0.01193033070627958,0.16419106638512349,1.173307778706719,0.4674356464387106,0.037129181793156274,1.4814092635948717,1.2887476269509293,0.5714419466058744,0.6549574772353577,1.3741969304415595,1.8998150376642016,0.06550776135935388,0.5462087454859446,0.6623661732182615,0.11794007681684882,0.7960081084777272,1.8525531494634557,1.9827759373867497,0.17995737336743722,1.165539631581281,1.784642897055508,1.9977470709149143,0.25352131753473517,1.0475560208250831,1.6798854136057428,0.0003922440551001882,0.33759608884672265,1.9995084418208595,1.7619621833216605,1.1301525529951697,1.6325912480388363,0.8112506573047173,1.8333101097526843,0.021855157283350635,1.5363978970246215,1.2270204056316558,0.514620111163498,0.053370747513976635,1.4326517709495288,1.3407817655534386,0.6216006828375178,1.9332957666590762,1.3228136718749177,1.8745541048072114,0.04740336152861624,0.49805587523402317,1.9689690813729288,0.14508504713690018,0.018072386070920654,1.8226300190951013,1.9914265801233488,0.21255323742292898,1.1112446077317253,1.7494891423555052,1.9999242516809648,0.32344773800288606,0.9927442045731522,1.6657950495533904,0.00035963981578235327,0.379646548675894,1.9962883028172578,1.7963083075014157,0.01057391706093913,1.5891969558622456,0.7577170067177654,1.8623528895788206,0.03471985340702877,1.489340528238,1.9480815020468514,0.11850108895721967,0.07245746089573213,0.06159140256906581,1.3917916653205142,0.6728967195796798,1.9122132311872693,1.2704601785927938,1.498015980312083,0.03216204467428552,0.45141162638667764,1.9810590890324953,0.17479951261257765,0.009176283601200486,0.35623663372872294,0.8842489274024883,0.24751581717918048,1.056615231933243,1.712082755725242,1.9990961036571946,0.284108286613059,0.9379541960240073,1.7560559771491322,0.0033315111143641385,0.4235615158254893,0.8201667988883415,1.8282610821068563,0.02000922993683607,1.5440317989713026,1.966455034656252,1.888803819110618,0.05048575350682927,1.4408124188677116,1.9292280920314981,0.09394887855860834,0.0943319557438006,1.3313861593892813,1.4416240131186084,0.7251758836979798,0.5059224099473689,1.217293801974899,1.5447904132014885,0.019829619434626133,1.8277539786266477,1.9902004682136267,0.20699416474034427,0.0032581577487333924,0.3152679556922162,0.9388568630625318,0.2847400306288983,1.0018156958589346,1.6725361641715375,1.9952651158892434,0.24692048818396228,0.8833506696415498,1.79078831540465,0.009298925823878701,0.17428901780188877,0.7665281296421134,1.8577244712699907,0.032389960398193085,0.11328400857567023,1.9509274563487766,1.9125833985860639,0.6720422206540836,1.3909594228861564,1.9075818345253501,0.07211985595721204,0.11892848702897696,1.279182399986939,1.4901290350130951,0.03448400779481353,0.4590187553178443,1.1634743365677012,1.5899274477475094,0.8953462389255772,1.7957609280525042,1.9963657439851115,0.37893747365286223,0.00033579577488074275,0.27635727847188274,0.9936485678725175,0.3241139982970417,0.9470107026082158,1.630968227207936,1.1121433329142674,0.41617259960102404,0.8290977394070006,1.823143894733735,0.018243948542522093,0.14461623104638088,0.7135911732830567,0.49883828239315164,0.04767889746064602,0.08928061953303801,1.9325418118859987,1.933620157136552,0.0905230471103623,1.3399313762872405,1.4334669515872638,0.716465060016495,0.14617312848787012,1.2261395421200065,1.537160946422287,0.021667513531140936,0.4137410503606703,1.9888928701694755,1.633291422044576,0.9500049301342532,1.761376173083883,1.999536386262554,0.27842981405917044,0.00041798100353862555,1.6792219340650139,1.0484593622703369,0.36551937950089997,0.8923649716823543,1.5875038796157273,1.1664314703589833,0.46154277826617085,1.98260840426626,1.853025468616058,1.2820601325362175,0.11751434849972664,0.6615150348220997,0.5470148350224955,0.06583008936070667,1.3992927537384163,1.911353360360325,1.9518508675966153,0.11467410626783747,1.28788164674584,1.4822017557396072,0.7694445209713411,0.46667040298217943,1.1724170090923731,1.5825783902812258,0.011791452787966117,0.37022537977427905,1.9955520601777132,1.6747520032197962,0.0006119954085406221,1.7247030590430563,0.9845775806562919,0.3174561073732549,0.0035044664223626842,1.6379799604640155,1.9897773090188053,0.21761354681556333,0.8380427439107091,1.8179589687397852,1.2202193886235353,0.5085313205102017,1.9709555201583302,1.8803432262943316,0.044950410358805204,0.09306482639997482,1.9357787904846795,1.9303317708875656,0.08678898166638149,1.3484486193609955,0.5041030883264203,0.7077775691519261,0.1414860623805907,1.9618841313022504,1.5294872752920523,0.8231169294345717,0.42111415460574675,1.1181762670099948,1.6262448618983214,0.004885508623412305,1.7672259483275616,0.9997218750382628,1.7141845791557633,0.00019685512683265127,1.6858518090446792,1.0393965943441996,0.35853382489010166,0.9013881312855094,1.5948205020742563,1.9804739017893187,0.1846587631190275,0.7842072878156456,1.4954137978871678,1.2733454250829461,0.12181731042986987,1.9563843744186205,1.905015062705611,0.06263158167772487,0.07134114916611045,1.9150498885914624,1.9490307512217342,0.5788353134596562,1.296557202986185,0.45725896574320946,0.7606269677307638,0.17087833060083846,1.181345492979459,1.5751813909460481,0.013221076180145452,0.3772977803190345,1.0635803394853978,1.6680291192279082,0.0009704372425458629,1.7309240126167076,0.944919940120517,0.31085438473576354,0.0027866796415971784,0.21070873719109728,1.0940971993436446,0.40153950521064363,0.8470010762921203,1.5498732770845236,1.211361596188498,0.15415453354057296,0.7310204088997743,1.4470648456904596,1.325649906435371,0.09692366728683666,0.6188271209114413,0.5882690738440182,0.08313006669767398,0.7184735754363291,1.8915707525983299,1.9648773660549392,0.5297633614493951,1.243774467195464,1.8316489410907209,0.8141958154720514,0.20276257080708437,1.1271792691791933,1.6191467664573054,0.005822055009647387,0.2798810340222757,1.9988195099688555,1.7078055773256247,5.800561342994559e-5,1.692425243521129,0.8902835514323207,0.35160105817494125,0.00837368508904468,1.6020881752291354,1.148514989898142,0.446343892334763,0.030652004132252775,1.503273376917049,1.2646082233340556,0.12619254026433435,1.9589948891227649,1.9011190235086526,1.376975628609221,0.07474427104555181,0.5687349549556528,0.6388294995364483,0.10638425606466917,0.03632410733080893,1.865411950374039,1.9778239874916683,0.482104732203822,1.1902590534811364,1.5677370584600103,0.8683231081796375,0.3844214246254434,1.0726308009054188,1.6612512614076296,0.0014110917797993672,0.31898786080092323,1.999980561671808,1.7454546858010507,0.0021509561008378197,1.651845351264817,1.9922018647503221,0.39429653123957065,0.016941079408884674,1.5574275477423332,1.2024864102659873,0.15902829264769835,0.04557320869793824,1.4551608602026147,1.3170595555257485,0.5984695962644427,1.9420214647346756,1.923525597141948,0.07954660330573027,0.055345783133571524,0.5199389804401022,0.6904754435581442,0.13232425799973735,0.02313598842551834,1.8366521036754877,0.8052899918120952,0.19731926056453153,1.1361718054403687,1.6119977198419944,1.9992996047471316,0.3421581085613413,1.0178640366591027,0.2598574961706128,1.4438896127622058e-6,0.3601415080109299,1.998136115342084,1.7808632881331585,0.007242998223920494,1.6093063010049131,1.1395380482840836,1.8493632667523978,0.028463112813810865,1.5110915402908458,1.2558492462962723,0.13063967795424314,0.06336299686768587,1.897148828917667,1.3685579473234992,0.6492635082482294,1.922216741651874,1.9431564624547777,1.476077151358896,0.038786506801469556,1.8699216827195047,0.7430516811086422,0.16087210836260235,0.012883889456526854,1.805377651845585,0.859336082435754,0.2312101264708718,1.9926197511157901,1.654418987526252,1.9998486150733537,0.3018719734408627,0.9630435810420813,1.7393773932060856,0.0015973481154040181,0.22197824393949217,1.9932917145672566,1.8139249617686222,0.01531882756260261,1.5649359462585433,1.1935945612177998,1.8770120227736693,0.7485381827747472,1.4632194183609992,1.9382162525735058,0.10486397478901555,0.08396790042881674,1.9200083697427992,1.4189486174033834,0.058360695747328384,1.8996402440876738,1.9599526177731694,1.5235550967132543,0.02511621188912727,1.8415864160142903,1.9863802091735288,0.4435168487828489,0.005598623686074777,0.3337900161104036,0.9138049464049279,0.26741163374465104,1.9977738587693652,1.6948733619978373,1.0324233748566791,0.26368410151749266,1.9986486480431758,1.7751642175544338,0.006194007876924812,0.1887185527268096,0.79102581895596,0.4313272497744768,0.026354171755880285,1.8335314348656575,1.2470692147682652,1.9020248696481932,0.6958746711683312,1.4139550643179064,1.3601099364596723,0.08177865348306335,0.5851742095404762,1.3032137708351554,1.4680801137616368,0.041328006994091226,1.8743598269800756,0.7342953940424797,1.5694594676667872,1.2080384715377543,1.8107217138234204,1.9939118585485107,0.3988200954626907,0.001302087391729878,1.7356681965881082,0.9685328744738813,0.30839559836447306,1.9999291007604176,1.733239255350397,1.0871481909581717,0.2277092685962191,1.9942998238631766,1.8086212420845071,0.8739486635414073,0.15789721370534404,0.7377474783341604,0.47726027544518745,0.040315863453772915,1.4712398570062082,1.2998012878452867,0.5819203015196027,0.644125225407318,1.3634465449588955,1.4106944292023944,0.06145309827286882,0.5359328911095941,1.2505357072539425,0.12344806078563109,0.02717666103830263,0.43427487491051175,0.7875271456135042,1.6136522960410318,1.1541225210853863,1.777420341751817,0.9047708228022386,0.35593022228563354,7.194055888559703e-6,1.6974427088638044,1.0233553787651009,0.2698524728937072,0.9173712109762397,0.3311251685531159,1.1416110782517301,0.44054674179751674,1.9869625754286941,1.839647909820242,0.8197728546889477,0.12960686214956363,1.9609491798988787,0.524764424869669,0.05716194000366581,1.4221957313861662,1.3516322912262067,0.6323316091242717,0.10327419981713082,1.9369717210244561,1.4600445566521194,0.0439483987621091,0.4880863525737015,1.1971046444604165,0.15114209638134146,0.015949190549156556,1.8159990594335325,0.8413974963436848,1.6560007577953741,0.0018059546535527105,1.7417823889532926,0.9594672299866014,0.31497613718688744,0.9811793866671181,1.6571210177034152,1.0781076871468986,0.23350384703662674,0.862880431144108,0.3728690422851204,1.1956483454548545,0.16282424093765158,1.9766589552541276,1.868150968360127,0.03780554659288726,0.10393252630822025,1.9443399098529741,0.5736969216449472,0.6526174263580978,1.3718826726601,1.4024064439042097,0.6838479648346829,0.12887656413032889,1.9547118881470995,1.5080119942147032,0.029317166313403087,0.4417783994055765,1.1430811725302903,0.181387422329219,0.007679340323062389,1.7830941155762448,0.8957445358526149,0.2551833748030695,1.3930653470217713e-5,1.7039149673069476,1.014285460699544,0.33946675174841556,0.9264150216586696,1.6148243122261112,0.004341455303615627,0.1994589686403313,0.8088017719173497,0.4164977935156351,1.2490975805102562,0.1341090618141133,1.9634199314516096,0.5168024020411659,0.054177668428196046,0.08095137184714685,1.9248923728946643,1.9408144775308842,0.6017500096260802,1.3204518995664687,0.09068962455642848,0.7363145333353585,0.1570971391098901,1.969582614791018,1.554452573048517,0.01760337592189165,0.3971482127728122,1.9917494145681358,1.6491270100497686,0.002391965861754608,1.7478355381444897,0.9504049210448521,0.2928705929810602,0.0012274212396919948,1.7207824693147806,1.069060755653859,0.38160481924406764,0.8718718204569151,1.5706797175680935,1.186744177142156,0.16782016150886736,1.9785672758060666,1.8636130938238735,1.3017981387244635,0.10799636678974545,1.9472852946545962,0.5655086233432313,0.073392512678077,1.38028819718303,1.9026650196942012,1.9579743655180841,0.5520795557236012,1.2680579901973639,1.5001774139081558,0.789573623392634,0.4493278613868851,1.9815392061477464,1.5992267133720426,0.008842234045906228,0.3543299312209607,1.9972842393604147,1.6898385737600625,1.0541247495338513,1.7103292987832854,1.9989869663421502,0.3326831285133106,0.005442779197752601,1.7576861664897225,1.123628484608185,0.20492821678556294,0.8177137157323396,1.5248199128008193,1.2403018456517894,0.13868251786325858,1.9658114007089202,1.8899441648572617,0.05127123099654929,0.08456463904365341,0.5915333028983292,0.6155207330073402,0.09539232804335007,1.3290317618344063,1.8777246558164888,0.7275750010930406,0.5037553520040436,1.2148584174053276,1.5468803750640263,0.8434651618045651,0.4044106885220272,1.097659749227591,0.20851619843823144,0.00306007279197118,0.3134522475125606,1.9998216700689464,1.7284767886916224,0.9993213873507353,1.6706881246124716,1.0600081409742328,0.37450132257663504,0.0126473350313282,1.578105448455318,1.1778246411724922,0.17288456429188304,0.03837793582607818,1.8590041503526753,1.2931372733979147,1.495065871648643,1.9501527249214137,1.9136004584607775,0.07001950868976392,0.06388430395643208,1.9065317135024156,0.66668841681443,0.5602085117723257,0.028816015142493878,1.850146240933187,0.7807139621319094,0.4569226395898618,1.9797638079980229,1.5919396563781443,0.010086692681663734,0.3612835929572098,1.042972596114189,0.24320028229379864,0.0002742707721711257,0.2746380218337747,1.999354080302484,0.3259544204939042,0.9445200647762483,1.6290311594189881,1.1146215570461553,0.4181994882279022,0.8266406603528647,1.5325200414587505,0.018721282146770712,0.14332685393557965,0.054859573005511475,1.8857703437756947,1.3450916605195813,0.08825323976228872,1.9316383114776476,0.6071624094095402,0.09156289525228278,0.0460175174427081,1.882035256336172,0.7188578874021126,0.5116514307991448,0.017214388991858787,1.5392631728918085,0.8345119997375308,0.21538956040834567,1.989260522899175,1.635219829636668,0.003810220463970948,0.3200761956129219,1.9996092207827827,0.2801589704265667,0.0004932008717508651,0.2380039125311636,1.9958828754284685,0.3674492997985309,0.011249782364673333,1.786745374691598,1.168890471557339,1.8646668110477507,0.7729286082221448,1.4853341154138031,0.030750478421323946,0.11634392308382902,0.6591690152565534,1.9098743044237385,1.3960088551731755,0.06711317334927858,1.9103238064924706,0.6581494339250007,1.501989404540342,1.2854920382398907,1.8548877924111187,0.7718723464812745,0.4645621090207427,0.008566580478928332,1.5846038871527717,0.8888074208706768,0.3682898163036349,1.9957839594493885,1.6765908138354577,1.0073081474433951,0.2809123476482731,1.9996389548541889,0.31928118141282513,0.9535798073009952,0.20366002548843953,1.9894184883491182,0.4108453459436865,0.02093277672592897,1.8193913405873903,1.2226517762214324,0.5107051294597068,0.7198990319788807,1.436689490285117,0.04569280885261273,0.0920168704586456,0.6081601672591225,1.9312435864822737,0.08780822007890421,0.04877695096051782,1.8862732719139403,0.710163909616202,1.5486321451544702,1.2325414668058585,1.8251709149627113,0.8255724561021863,0.4190820760521834,0.002898581080406193,1.6281875414266933,0.9434370375778476,0.32675609638580183,1.9993145110918265,0.27389175518424347,1.0620980564264388,0.24390975821934235,1.996664217611494,1.7935883302511442,0.8989062883976847,0.17170958319701635,1.1599424035124122,0.45601212966272875,0.03355841290063055,1.8495745795497602,1.275743888402137,0.5592345741130542,0.667711315008292,1.906073274498166,1.387662748891085,0.07041881239009429,0.5583290160005745,1.2747737784139301,0.11163504887112319,0.03329968314757936,1.4764293034940057,0.7630495040399425,1.5936259408829414,1.1788919788650571,1.7929739397438067,0.8797968175537069,0.3753480247001597,1.061090881401849,1.7152233807700608,0.9982366574618781,0.28724584902871675,1.999841566554208,0.3126639604280208,1.1167013261951055,1.6430309525264029,1.990693949795422,1.8257405132770013,0.844536612351908,0.14224861451498483,1.9675968216785886,0.5028138996372693,0.7286188641638511,1.8772043741499913,1.3280072367589433,0.6090887641376121,0.6165223104400259,1.9278996642345594,1.437597058537193,1.354606074399867,0.5098253318192678,1.2216679021225116,0.13813190867719838,0.020727887712654658,1.8302612609687188,0.8166472665564899,0.2042707788298027,1.1247048209823103,1.7583936365811275,0.9343824564562209,0.3334914001250452,1.0062990797701525,1.675847415993828,8.798164009304887e-5,0.24987782451138874,0.8878046440779114,0.353501992942748,1.1709538435394413,1.6000947737378075,1.9817460953829493,0.4484227373183195,0.7906341902944974,1.501116412710461,1.9523051283385442,0.5511099905054242,0.6762809596475797,1.3950820591717523,0.06036075837473731,0.66011785995071,0.1168167654310237,1.9469371991448992,1.4862161455190328,1.3028321127295985,1.864159458239329,1.9783433243750241,0.16721916168908435,0.011099349896672384,1.7984681318631188,0.8707961060647031,0.23865776921414228,0.00046202110939175256,1.6631203449240355,0.989165312590338,0.2936380047750442,1.9999618987291052,1.634440153653407,0.0023175712111205282,0.21476433454114152,1.9918878844974324,0.3962831117161638,1.2246925494557055,0.14694721091916085,1.9698475476556703,0.4949635845333267,0.7373610289980437,1.8728129305214503,1.9341512281722548,0.6007552456395012,0.6249160109828628,1.3441443833970532,0.08052437233516319,0.7121684907239999,0.5177523801873138,1.963128660843235,0.13356695340975266,1.2501479720479316,1.8352832826475882,1.9882165618918584,0.19880938452571384,1.133700308744716,1.764275161709151,0.006552256889243546,0.27533301665519416,0.00029841202572689074,1.7031440861606189,1.0439807329891446,0.2559076202798314,1.9979807902695685,1.7824190574594732,0.007545751646702681,0.1820109146944362,1.9834310522187273,0.4408787356805578,0.029057007251207856,0.11963194174340819,1.2582597385884646,0.543022347207188,0.06423966996197683,1.898247844303387,1.9131896837515603,0.0772593050024114,0.5746783984227546,1.9439825090330092,0.103451522204148,0.7650842153481394,0.4704683131043649,1.976425384977333,0.16223145750466783,0.012487857142602254,1.562310362625197,1.9951196587414985,1.671436265691586,1.0791890578023904,1.7277851194090004,0.0017819765964641743,0.31418629162624867,0.9605510929495867,1.7410544881497763,1.0986639668119904,0.22041364744010106,1.9930001942032027,1.815371547375197,1.2158438318049916,1.562876049471261,1.9720184623923203,0.48715483017042926,0.043630919905672805,0.09496266846851387,1.310814844994789,0.5924545820154974,0.6333405781485022,1.9209830234780862,1.8894834961816156,0.7034927957117446,0.5257191139480026,1.9606484425967015,0.12907329913839294,0.02456372704979659,0.4247757834014466,1.9867874074921328,0.19341392225083676,0.00533814654548348,1.6067828418624832,1.9990318672766445,0.2691117174295158,1.0244397996761685,1.6891076778448697,1.0349162695195904,0.3551008184158926,0.9058506796719521,1.7767376090380718,0.006474289184729698,0.18726276539505904,1.9850350799926684,1.8458733920729378,1.2690300146973925,1.516733760784827,1.95768441620124,0.5349723097712411,0.0610792538228182,0.07301353598802618,1.362435779837221,0.6431117175858088,0.5829059279329869,1.9409501361810089,1.4702828418992333,0.7562763071430517,0.47818530745212495,1.9744270930321184,1.5715080649503959,0.013957629293777307,0.3808121225561838,0.8528273204620864,0.2270206269900379,0.001177948303223264,1.6494316010122203,1.9999414291336775,0.3076125298661807,0.9696170863522544,1.7349330301318244,1.089632736886924],"x":[1.6470993291652855e6,4.5286443388456706e14,9.057288661220349e14,1.3585932983595028e15,1.8114577305969702e15,2.264322162834438e15,2.717186595071906e15,3.1700510273093735e15,3.6229154595468415e15,4.075779891784309e15,4.528644324021777e15,4.981508756259244e15,5.434373188496713e15,5.887237620734181e15,6.340102052971648e15,6.792966485209115e15,7.245830917446583e15,7.698695349684051e15,8.151559781921519e15,8.604424214158986e15,9.057288646396454e15,9.510153078633922e15,9.963017510871388e15,1.0415881943108856e16,1.0868746375346326e16,1.1321610807583794e16,1.1774475239821262e16,1.2227339672058728e16,1.2680204104296196e16,1.3133068536533664e16,1.3585932968771132e16,1.40387974010086e16,1.4491661833246068e16,1.4944526265483536e16,1.5397390697721004e16,1.585025512995847e16,1.6303119562195938e16,1.6755983994433406e16,1.7208848426670872e16,1.766171285890834e16,1.811457729114581e16,1.8567441723383276e16,1.9020306155620744e16,1.9473170587858212e16,1.992603502009568e16,2.0378899452333148e16,2.0831763884570616e16,2.1284628316808084e16,2.173749274904555e16,2.2190357181283016e16,2.264322161352049e16,2.309608604575795e16,2.3548950477995424e16,2.400181491023289e16,2.445467934247036e16,2.4907543774707828e16,2.5360408206945296e16,2.581327263918276e16,2.626613707142023e16,2.6719001503657696e16,2.717186593589516e16,2.762473036813263e16,2.8077594800370096e16,2.853045923260757e16,2.8983323664845036e16,2.9436188097082504e16,2.9889052529319972e16,3.034191696155744e16,3.0794781393794908e16,3.1247645826032376e16,3.170051025826984e16,3.215337469050731e16,3.2606239122744776e16,3.3059103554982244e16,3.351196798721971e16,3.3964832419457184e16,3.441769685169465e16,3.4870561283932116e16,3.5323425716169584e16,3.5776290148407052e16,3.622915458064452e16,3.668201901288198e16,3.713488344511946e16,3.758774787735693e16,3.804061230959439e16,3.849347674183186e16,3.894634117406933e16,3.939920560630679e16,3.985207003854426e16,4.030493447078173e16,4.07577989030192e16,4.121066333525667e16,4.166352776749413e16,4.21163921997316e16,4.256925663196907e16,4.3022121064206536e16,4.3474985496444e16,4.392784992868147e16,4.4380714360918936e16,4.483357879315641e16,4.528644322539387e16,4.573930765763134e16,4.619217208986882e16,4.664503652210627e16,4.709790095434375e16,4.755076538658122e16,4.800362981881869e16,4.845649425105614e16,4.890935868329362e16,4.936222311553108e16,4.981508754776855e16,5.026795198000602e16,5.072081641224349e16,5.117368084448096e16,5.162654527671842e16,5.2079409708955896e16,5.253227414119336e16,5.298513857343083e16,5.343800300566829e16,5.389086743790576e16,5.4343731870143224e16,5.47965963023807e16,5.524946073461816e16,5.570232516685563e16,5.61551895990931e16,5.660805403133056e16,5.706091846356804e16,5.75137828958055e16,5.796664732804298e16,5.841951176028043e16,5.88723761925179e16,5.932524062475538e16,5.977810505699285e16,6.02309694892303e16,6.068383392146778e16,6.113669835370525e16,6.158956278594272e16,6.2042427218180184e16,6.249529165041765e16,6.294815608265512e16,6.340102051489258e16,6.385388494713005e16,6.430674937936752e16,6.475961381160499e16,6.5212478243842456e16,6.566534267607992e16,6.611820710831739e16,6.657107154055486e16,6.702393597279233e16,6.747680040502979e16,6.792966483726726e16,6.838252926950473e16,6.883539370174219e16,6.928825813397966e16,6.974112256621714e16,7.019398699845461e16,7.064685143069206e16,7.109971586292954e16,7.155258029516701e16,7.200544472740447e16,7.245830915964194e16,7.291117359187941e16,7.336403802411688e16,7.381690245635434e16,7.42697668885918e16,7.472263132082926e16,7.517549575306675e16,7.562836018530422e16,7.60812246175417e16,7.653408904977915e16,7.69869534820166e16,7.743981791425408e16,7.789268234649155e16,7.834554677872902e16,7.879841121096648e16,7.925127564320395e16,7.97041400754414e16,8.01570045076789e16,8.060986893991637e16,8.106273337215382e16,8.15155978043913e16,8.196846223662877e16,8.242132666886624e16,8.28741911011037e16,8.332705553334115e16,8.377991996557862e16,8.42327843978161e16,8.468564883005358e16,8.513851326229104e16,8.559137769452851e16,8.604424212676598e16,8.649710655900344e16,8.69499709912409e16,8.740283542347837e16,8.785569985571584e16,8.830856428795331e16,8.876142872019077e16,8.921429315242824e16,8.966715758466573e16,9.012002201690318e16,9.057288644914066e16,9.102575088137811e16,9.147861531361558e16,9.193147974585306e16,9.238434417809053e16,9.283720861032798e16,9.329007304256544e16,9.374293747480291e16,9.41958019070404e16,9.464866633927787e16,9.510153077151533e16,9.55543952037528e16,9.600725963599027e16,9.646012406822774e16,9.691298850046518e16,9.736585293270266e16,9.781871736494013e16,9.82715817971776e16,9.872444622941506e16,9.917731066165254e16,9.963017509389002e16,1.0008303952612747e17,1.0053590395836494e17,1.009887683906024e17,1.0144163282283987e17,1.0189449725507734e17,1.0234736168731482e17,1.0280022611955227e17,1.0325309055178974e17,1.037059549840272e17,1.0415881941626469e17,1.0461168384850216e17,1.0506454828073962e17,1.0551741271297709e17,1.0597027714521456e17,1.0642314157745203e17,1.0687600600968949e17,1.0732887044192694e17,1.0778173487416442e17,1.0823459930640189e17,1.0868746373863936e17,1.0914032817087683e17,1.095931926031143e17,1.1004605703535178e17,1.1049892146758923e17,1.1095178589982669e17,1.1140465033206416e17,1.1185751476430163e17,1.123103791965391e17,1.1276324362877656e17,1.1321610806101403e17,1.1366897249325152e17,1.1412183692548898e17,1.1457470135772645e17,1.150275657899639e17,1.1548043022220138e17,1.1593329465443885e17,1.1638615908667632e17,1.1683902351891378e17,1.1729188795115123e17,1.177447523833887e17,1.1819761681562618e17,1.1865048124786366e17,1.1910334568010112e17,1.195562101123386e17,1.2000907454457606e17,1.2046193897681354e17,1.2091480340905098e17,1.2136766784128845e17,1.2182053227352592e17,1.222733967057634e17,1.2272626113800085e17,1.2317912557023834e17,1.236319900024758e17,1.2408485443471326e17,1.2453771886695074e17,1.249905832991882e17,1.2544344773142566e17,1.2589631216366314e17,1.263491765959006e17,1.2680204102813806e17,1.2725490546037554e17,1.27707769892613e17,1.2816063432485048e17,1.2861349875708795e17,1.290663631893254e17,1.2951922762156288e17,1.2997209205380035e17,1.3042495648603782e17,1.3087782091827526e17,1.3133068535051274e17,1.317835497827502e17,1.3223641421498768e17,1.3268927864722515e17,1.3314214307946262e17,1.335950075117001e17,1.3404787194393757e17,1.3450073637617502e17,1.3495360080841248e17,1.3540646524064995e17,1.3585932967288742e17,1.363121941051249e17,1.3676505853736235e17,1.3721792296959982e17,1.3767078740183728e17,1.3812365183407477e17,1.3857651626631224e17,1.390293806985497e17,1.3948224513078717e17,1.3993510956302464e17,1.4038797399526211e17,1.4084083842749957e17,1.4129370285973702e17,1.417465672919745e17,1.4219943172421197e17,1.4265229615644946e17,1.4310516058868691e17,1.4355802502092438e17,1.4401088945316186e17,1.444637538853993e17,1.4491661831763677e17,1.4536948274987424e17,1.458223471821117e17,1.462752116143492e17,1.4672807604658666e17,1.4718094047882413e17,1.4763380491106157e17,1.4808666934329907e17,1.485395337755365e17,1.48992398207774e17,1.4944526264001146e17,1.498981270722489e17,1.503509915044864e17,1.5080385593672384e17,1.5125672036896134e17,1.517095848011988e17,1.521624492334363e17,1.5261531366567373e17,1.530681780979112e17,1.5352104253014867e17,1.539739069623861e17,1.5442677139462358e17,1.5487963582686106e17,1.5533250025909856e17,1.55785364691336e17,1.562382291235735e17,1.5669109355581094e17,1.5714395798804842e17,1.575968224202859e17,1.5804968685252333e17,1.585025512847608e17,1.5895541571699827e17,1.5940828014923574e17,1.598611445814732e17,1.603140090137107e17,1.6076687344594816e17,1.6121973787818563e17,1.616726023104231e17,1.6212546674266054e17,1.6257833117489802e17,1.630311956071355e17,1.6348406003937293e17,1.6393692447161043e17,1.643897889038479e17,1.6484265333608538e17,1.6529551776832285e17,1.657483822005603e17,1.6620124663279776e17,1.666541110650352e17,1.671069754972727e17,1.6755983992951014e17,1.6801270436174765e17,1.684655687939851e17,1.689184332262226e17,1.6937129765846006e17,1.698241620906975e17,1.7027702652293498e17,1.707298909551724e17,1.7118275538740992e17,1.7163561981964736e17,1.7208848425188486e17,1.725413486841223e17,1.729942131163598e17,1.7344707754859725e17,1.738999419808347e17,1.743528064130722e17,1.7480567084530963e17,1.7525853527754714e17,1.7571139970978458e17,1.7616426414202208e17,1.7661712857425952e17,1.77069993006497e17,1.7752285743873446e17,1.779757218709719e17,1.7842858630320938e17,1.7888145073544685e17,1.7933431516768435e17,1.797871795999218e17,1.802400440321593e17,1.8069290846439674e17,1.811457728966342e17,1.8159863732887168e17,1.8205150176110912e17,1.825043661933466e17,1.8295723062558406e17,1.8341009505782154e17,1.83862959490059e17,1.8431582392229648e17,1.8476868835453395e17,1.8522155278677142e17,1.856744172190089e17,1.8612728165124634e17,1.865801460834838e17,1.8703301051572128e17,1.8748587494795872e17,1.8793873938019622e17,1.883916038124337e17,1.8884446824467117e17,1.8929733267690864e17,1.8975019710914608e17,1.9020306154138355e17,1.90655925973621e17,1.911087904058585e17,1.9156165483809594e17,1.9201451927033344e17,1.9246738370257088e17,1.929202481348084e17,1.9337311256704586e17,1.938259769992833e17,1.9427884143152077e17,1.947317058637582e17,1.951845702959957e17,1.9563743472823315e17,1.9609029916047066e17,1.965431635927081e17,1.969960280249456e17,1.9744889245718304e17,1.9790175688942048e17,1.98354621321658e17,1.9880748575389542e17,1.9926035018613293e17,1.9971321461837037e17,2.0016607905060787e17,2.006189434828453e17,2.0107180791508278e17,2.0152467234732026e17,2.019775367795577e17,2.0243040121179517e17,2.0288326564403264e17,2.0333613007627014e17,2.037889945085076e17,2.0424185894074506e17,2.0469472337298253e17,2.0514758780522e17,2.0560045223745747e17,2.060533166696949e17,2.0650618110193238e17,2.0695904553416986e17,2.0741190996640733e17,2.078647743986448e17,2.0831763883088227e17,2.0877050326311974e17,2.0922336769535722e17,2.096762321275947e17,2.1012909655983213e17,2.105819609920696e17,2.1103482542430707e17,2.114876898565445e17,2.11940554288782e17,2.1239341872101946e17,2.1284628315325696e17,2.1329914758549443e17,2.1375201201773187e17,2.1420487644996934e17,2.146577408822068e17,2.151106053144443e17,2.1556346974668173e17,2.1601633417891923e17,2.1646919861115667e17,2.1692206304339418e17,2.173749274756316e17,2.1782779190786906e17,2.1828065634010656e17,2.18733520772344e17,2.191863852045815e17,2.1963924963681894e17,2.2009211406905645e17,2.205449785012939e17,2.209978429335314e17,2.2145070736576883e17,2.2190357179800627e17,2.2235643623024378e17,2.228093006624812e17,2.2326216509471872e17,2.2371502952695616e17,2.2416789395919366e17,2.246207583914311e17,2.2507362282366858e17,2.2552648725590605e17,2.259793516881435e17,2.2643221612038096e17,2.2688508055261843e17,2.2733794498485594e17,2.2779080941709338e17,2.2824367384933085e17,2.2869653828156832e17,2.291494027138058e17,2.2960226714604326e17,2.300551315782807e17,2.3050799601051818e17,2.3096086044275565e17,2.3141372487499312e17,2.318665893072306e17,2.3231945373946806e17,2.3277231817170554e17,2.33225182603943e17,2.3367804703618048e17,2.3413091146841792e17,2.345837759006554e17,2.3503664033289286e17,2.354895047651303e17,2.359423691973678e17,2.3639523362960525e17,2.3684809806184275e17,2.3730096249408022e17,2.3775382692631766e17,2.3820669135855514e17,2.3865955579079258e17,2.3911242022303008e17,2.3956528465526752e17,2.4001814908750502e17,2.4047101351974246e17,2.4092387795197997e17,2.413767423842174e17,2.4182960681645485e17,2.4228247124869235e17,2.427353356809298e17,2.431882001131673e17,2.4364106454540474e17,2.4409392897764224e17,2.4454679340987968e17,2.449996578421172e17,2.4545252227435462e17,2.4590538670659206e17,2.4635825113882957e17,2.46811115571067e17,2.472639800033045e17,2.4771684443554195e17,2.4816970886777946e17,2.486225733000169e17,2.4907543773225437e17,2.4952830216449184e17,2.4998116659672928e17,2.5043403102896675e17,2.5088689546120422e17,2.5133975989344173e17,2.5179262432567917e17,2.5224548875791664e17,2.526983531901541e17,2.5315121762239158e17,2.5360408205462906e17,2.540569464868665e17,2.5450981091910397e17,2.5496267535134144e17,2.5541553978357888e17,2.558684042158164e17,2.5632126864805386e17,2.5677413308029133e17,2.572269975125288e17,2.5767986194476627e17,2.581327263770037e17,2.5858559080924118e17,2.5903845524147866e17,2.594913196737161e17,2.599441841059536e17,2.6039704853819104e17,2.6084991297042854e17,2.6130277740266602e17,2.6175564183490346e17,2.6220850626714093e17,2.6266137069937837e17,2.6311423513161587e17,2.635670995638533e17,2.640199639960908e17,2.6447282842832826e17,2.6492569286056576e17,2.653785572928032e17,2.6583142172504064e17,2.6628428615727814e17,2.667371505895156e17,2.671900150217531e17,2.6764287945399053e17,2.6809574388622803e17,2.6854860831846547e17,2.6900147275070294e17,2.694543371829404e17,2.6990720161517786e17,2.7036006604741533e17,2.708129304796528e17,2.712657949118903e17,2.7171865934412774e17,2.7217152377636525e17,2.726243882086027e17,2.7307725264084016e17,2.7353011707307763e17,2.7398298150531507e17,2.7443584593755254e17,2.7488871036979e17,2.753415748020275e17,2.7579443923426496e17,2.7624730366650243e17,2.767001680987399e17,2.7715303253097738e17,2.7760589696321485e17,2.780587613954523e17,2.7851162582768976e17,2.7896449025992723e17,2.7941735469216467e17,2.7987021912440218e17,2.8032308355663965e17,2.8077594798887712e17,2.812288124211146e17,2.8168167685335206e17,2.821345412855895e17,2.8258740571782698e17,2.8304027015006445e17,2.834931345823019e17,2.839459990145394e17,2.8439886344677683e17,2.8485172787901434e17,2.853045923112518e17,2.8575745674348925e17,2.8621032117572672e17,2.8666318560796416e17,2.8711605004020166e17,2.875689144724391e17,2.880217789046766e17,2.8847464333691405e17,2.8892750776915155e17,2.89380372201389e17,2.8983323663362643e17,2.9028610106586394e17,2.907389654981014e17,2.911918299303389e17,2.916446943625763e17,2.920975587948138e17,2.9255042322705126e17,2.930032876592887e17,2.934561520915262e17,2.9390901652376365e17,2.9436188095600115e17,2.948147453882386e17,2.952676098204761e17,2.957204742527136e17,2.96173338684951e17,2.966262031171885e17,2.970790675494259e17,2.975319319816634e17,2.9798479641390086e17,2.984376608461384e17,2.988905252783758e17,2.993433897106133e17,2.9979625414285075e17,3.002491185750882e17,3.007019830073257e17,3.0115484743956314e17,3.0160771187180064e17,3.020605763040381e17,3.025134407362756e17,3.02966305168513e17,3.034191696007505e17,3.038720340329879e17,3.043248984652254e17,3.047777628974629e17,3.0523062732970035e17,3.0568349176193786e17,3.061363561941753e17,3.065892206264128e17,3.070420850586502e17,3.0749494949088774e17,3.079478139231252e17,3.084006783553626e17,3.0885354278760006e17,3.093064072198376e17,3.097592716520751e17,3.1021213608431245e17,3.1066500051655e17,3.1111786494878746e17,3.1157072938102496e17,3.1202359381326234e17,3.1247645824549984e17,3.1292932267773734e17,3.133821871099747e17,3.138350515422122e17,3.142879159744497e17,3.147407804066872e17,3.151936448389246e17,3.156465092711622e17,3.160993737033996e17,3.1655223813563706e17,3.170051025678745e17,3.17457967000112e17,3.179108314323495e17,3.183636958645869e17,3.188165602968244e17,3.192694247290619e17,3.197222891612994e17,3.201751535935368e17,3.206280180257743e17,3.210808824580118e17,3.2153374689024915e17,3.2198661132248666e17,3.2243947575472416e17,3.2289234018696166e17,3.2334520461919904e17,3.2379806905143654e17,3.2425093348367405e17,3.247037979159114e17,3.251566623481489e17,3.256095267803864e17,3.2606239121262394e17,3.265152556448613e17,3.269681200770988e17,3.274209845093363e17,3.278738489415737e17,3.283267133738112e17,3.287795778060487e17,3.292324422382862e17,3.296853066705236e17,3.301381711027611e17,3.305910355349986e17,3.3104389996723603e17,3.314967643994735e17,3.319496288317109e17,3.324024932639485e17,3.3285535769618586e17,3.3330822212842336e17,3.3376108656066086e17,3.342139509928983e17,3.3466681542513574e17,3.3511967985737325e17,3.3557254428961075e17,3.360254087218481e17,3.364782731540856e17,3.369311375863231e17,3.373840020185606e17,3.37836866450798e17,3.382897308830355e17,3.38742595315273e17,3.3919545974751046e17,3.396483241797479e17,3.4010118861198534e17,3.405540530442229e17,3.410069174764603e17,3.414597819086978e17,3.4191264634093523e17,3.4236551077317274e17,3.428183752054102e17,3.432712396376477e17,3.437241040698852e17,3.4417696850212256e17,3.4462983293436006e17,3.450826973665975e17,3.45535561798835e17,3.4598842623107245e17,3.4644129066330995e17,3.468941550955474e17,3.473470195277849e17,3.4779988396002234e17,3.482527483922598e17,3.487056128244973e17,3.491584772567347e17,3.496113416889722e17,3.5006420612120966e17,3.505170705534472e17,3.509699349856846e17,3.514227994179221e17,3.518756638501595e17,3.52328528282397e17,3.527813927146345e17,3.5323425714687194e17,3.5368712157910944e17,3.541399860113469e17,3.545928504435844e17,3.5504571487582176e17,3.554985793080593e17,3.5595144374029677e17,3.564043081725342e17,3.5685717260477165e17,3.5731003703700915e17,3.5776290146924666e17,3.58215765901484e17,3.586686303337216e17,3.5912149476595904e17,3.5957435919819654e17,3.600272236304339e17,3.604800880626714e17,3.609329524949089e17,3.613858169271463e17,3.618386813593838e17,3.622915457916213e17,3.627444102238588e17,3.631972746560962e17,3.6365013908833376e17,3.641030035205712e17,3.645558679528086e17,3.650087323850461e17,3.654615968172836e17,3.659144612495211e17,3.6636732568175846e17,3.6682019011399597e17,3.672730545462335e17,3.67725918978471e17,3.6817878341070835e17,3.6863164784294586e17,3.6908451227518336e17,3.6953737670742074e17,3.6999024113965824e17,3.7044310557189574e17,3.7089597000413325e17,3.713488344363706e17,3.7180169886860806e17,3.7225456330084563e17,3.72707427733083e17,3.731602921653205e17,3.73613156597558e17,3.740660210297955e17,3.745188854620329e17,3.749717498942704e17,3.754246143265079e17,3.758774787587453e17,3.763303431909828e17,3.767832076232203e17,3.772360720554578e17,3.7768893648769517e17,3.781418009199327e17,3.785946653521702e17,3.790475297844076e17,3.7950039421664506e17,3.799532586488825e17,3.8040612308112006e17,3.8085898751335744e17,3.8131185194559494e17,3.8176471637783245e17,3.822175808100699e17,3.826704452423073e17,3.8312330967454483e17,3.8357617410678234e17,3.840290385390197e17,3.844819029712572e17,3.8493476740349466e17,3.8538763183573216e17,3.858404962679696e17,3.862933607002071e17,3.867462251324446e17,3.8719908956468205e17,3.876519539969195e17,3.881048184291569e17,3.885576828613944e17,3.890105472936319e17,3.894634117258694e17,3.899162761581068e17,3.903691405903443e17,3.9082200502258176e17,3.9127486945481926e17,3.917277338870568e17,3.9218059831929414e17,3.9263346275153165e17,3.930863271837691e17,3.935391916160066e17,3.9399205604824403e17,3.9444492048048154e17,3.94897784912719e17,3.953506493449565e17,3.958035137771939e17,3.9625637820943136e17,3.9670924264166886e17,3.971621070739063e17,3.976149715061438e17,3.9806783593838125e17,3.9852070037061875e17,3.989735648028562e17,3.994264292350937e17,3.998792936673311e17,4.003321580995686e17,4.007850225318061e17,4.012378869640435e17,4.01690751396281e17,4.0214361582851846e17,4.02596480260756e17,4.0304934469299334e17,4.035022091252309e17,4.0395507355746835e17,4.044079379897058e17,4.0486080242194323e17,4.0531366685418074e17,4.0576653128641824e17,4.062193957186556e17,4.066722601508932e17,4.071251245831306e17,4.075779890153681e17,4.080308534476055e17,4.08483717879843e17,4.089365823120805e17,4.093894467443179e17,4.098423111765554e17,4.102951756087929e17,4.107480400410304e17,4.112009044732678e17,4.1165376890550534e17,4.121066333377428e17,4.1255949776998016e17,4.1301236220221766e17,4.134652266344552e17,4.139180910666927e17,4.1437095549893005e17,4.1482381993116755e17,4.1527668436340506e17,4.1572954879564243e17,4.1618241322787994e17,4.1663527766011744e17,4.1708814209235494e17,4.175410065245923e17,4.179938709568298e17,4.184467353890673e17,4.188995998213048e17,4.193524642535422e17,4.1980532868577965e17,4.202581931180172e17,4.207110575502546e17,4.211639219824921e17,4.216167864147296e17,4.220696508469671e17,4.225225152792045e17,4.22975379711442e17,4.234282441436795e17,4.2388110857591686e17,4.243339730081544e17,4.247868374403918e17,4.252397018726294e17,4.2569256630486675e17,4.2614543073710426e17,4.2659829516934176e17,4.270511596015792e17,4.2750402403381664e17,4.279568884660541e17,4.2840975289829165e17,4.28862617330529e17,4.293154817627665e17,4.2976834619500397e17,4.302212106272415e17,4.306740750594789e17,4.311269394917164e17,4.315798039239539e17,4.320326683561913e17,4.324855327884288e17,4.3293839722066624e17,4.3339126165290374e17,4.338441260851412e17,4.342969905173787e17,4.347498549496161e17,4.3520271938185363e17,4.356555838140911e17,4.361084482463285e17,4.36561312678566e17,4.3701417711080346e17,4.3746704154304096e17,4.379199059752784e17,4.383727704075159e17,4.3882563483975334e17,4.3927849927199085e17,4.397313637042283e17,4.401842281364657e17,4.406370925687032e17,4.410899570009407e17,4.415428214331782e17,4.419956858654156e17,4.424485502976531e17,4.4290141472989056e17,4.4335427916212806e17,4.438071435943655e17,4.4426000802660294e17,4.4471287245884045e17,4.451657368910779e17,4.456186013233154e17,4.4607146575555283e17,4.4652433018779034e17,4.469771946200278e17,4.474300590522653e17,4.4788292348450266e17,4.4833578791674016e17,4.4878865234897766e17,4.492415167812151e17,4.496943812134526e17,4.5014724564569005e17,4.5060011007792755e17,4.510529745101649e17,4.515058389424025e17,4.5195870337463994e17,4.524115678068774e17,4.528644322391148e17,4.533172966713523e17,4.537701611035898e17,4.542230255358272e17,4.546758899680648e17,4.551287544003022e17,4.555816188325397e17,4.560344832647771e17,4.564873476970146e17,4.569402121292521e17,4.573930765614895e17,4.57845940993727e17,4.582988054259645e17,4.58751669858202e17,4.5920453429043936e17,4.596573987226769e17,4.6011026315491437e17,4.6056312758715174e17,4.6101599201938925e17,4.6146885645162675e17,4.6192172088386426e17,4.623745853161016e17,4.6282744974833914e17,4.6328031418057664e17,4.63733178612814e17,4.641860430450515e17,4.64638907477289e17,4.650917719095265e17,4.655446363417639e17,4.659975007740014e17,4.664503652062389e17,4.6690322963847635e17,4.673560940707138e17,4.6780895850295123e17,4.682618229351888e17,4.687146873674262e17,4.691675517996637e17,4.696204162319012e17,4.700732806641387e17,4.7052614509637606e17,4.7097900952861357e17,4.714318739608511e17,4.7188473839308845e17,4.7233760282532595e17,4.727904672575634e17,4.7324333168980096e17,4.7369619612203834e17,4.7414906055427584e17,4.7460192498651334e17,4.750547894187508e17,4.755076538509882e17,4.7596051828322566e17,4.7641338271546323e17,4.768662471477006e17,4.773191115799381e17,4.7777197601217555e17,4.7822484044441306e17,4.786777048766505e17,4.79130569308888e17,4.795834337411255e17,4.800362981733629e17,4.804891626056004e17,4.809420270378378e17,4.813948914700753e17,4.8184775590231277e17,4.823006203345503e17,4.827534847667877e17,4.832063491990252e17,4.8365921363126266e17,4.841120780635001e17,4.845649424957376e17,4.8501780692797504e17,4.8547067136021254e17,4.8592353579245e17,4.863764002246875e17,4.868292646569249e17,4.8728212908916243e17,4.877349935213998e17,4.881878579536373e17,4.886407223858748e17,4.8909358681811226e17,4.8954645125034976e17,4.899993156825872e17,4.904521801148247e17,4.909050445470621e17,4.9135790897929965e17,4.918107734115371e17,4.922636378437745e17,4.92716502276012e17,4.931693667082495e17,4.93622231140487e17,4.940750955727244e17,4.945279600049619e17,4.9498082443719936e17,4.9543368886943686e17,4.9588655330167424e17,4.9633941773391174e17,4.9679228216614925e17,4.972451465983867e17,4.976980110306242e17,4.9815087546286163e17,4.9860373989509914e17,4.990566043273365e17,4.995094687595741e17,4.999623331918115e17,5.0041519762404896e17,5.008680620562864e17,5.013209264885239e17,5.017737909207614e17,5.022266553529988e17,5.0267951978523635e17,5.031323842174738e17,5.035852486497113e17,5.040381130819487e17,5.044909775141862e17,5.049438419464237e17,5.0539670637866106e17,5.0584957081089856e17,5.0630243524313606e17,5.067552996753736e17,5.0720816410761094e17,5.076610285398485e17,5.0811389297208595e17,5.085667574043233e17,5.0901962183656083e17,5.0947248626879834e17,5.0992535070103584e17,5.103782151332732e17,5.108310795655107e17,5.112839439977482e17,5.117368084299856e17,5.121896728622231e17,5.126425372944606e17,5.130954017266981e17,5.135482661589355e17,5.14001130591173e17,5.144539950234105e17,5.1490685945564794e17,5.153597238878854e17,5.158125883201228e17,5.162654527523604e17,5.1671831718459776e17,5.1717118161683526e17,5.176240460490728e17,5.180769104813102e17,5.1852977491354765e17,5.1898263934578515e17,5.1943550377802266e17,5.1988836821026003e17,5.2034123264249754e17,5.20794097074735e17,5.2124696150697254e17,5.216998259392099e17,5.221526903714474e17,5.226055548036849e17,5.2305841923592237e17,5.235112836681598e17,5.2396414810039725e17,5.244170125326348e17,5.248698769648722e17,5.253227413971097e17,5.2577560582934714e17,5.2622847026158464e17,5.266813346938221e17,5.271341991260596e17,5.275870635582971e17,5.2803992799053446e17,5.28492792422772e17,5.289456568550094e17,5.293985212872469e17,5.2985138571948435e17,5.3030425015172186e17,5.307571145839593e17,5.312099790161968e17,5.3166284344843424e17,5.321157078806717e17,5.325685723129092e17,5.330214367451466e17,5.334743011773841e17,5.3392716560962157e17,5.343800300418591e17,5.348328944740965e17,5.35285758906334e17,5.357386233385714e17,5.361914877708089e17,5.366443522030464e17,5.3709721663528384e17,5.3755008106752134e17,5.380029454997588e17,5.384558099319963e17,5.3890867436423366e17,5.3936153879647123e17,5.398144032287087e17,5.402672676609461e17,5.4072013209318355e17,5.4117299652542106e17,5.4162586095765856e17,5.4207872538989594e17,5.425315898221335e17,5.4298445425437094e17,5.4343731868660845e17,5.438901831188458e17,5.443430475510833e17,5.447959119833208e17,5.452487764155583e17,5.457016408477957e17,5.461545052800332e17,5.466073697122707e17,5.470602341445081e17,5.4751309857674566e17,5.479659630089831e17,5.4841882744122054e17,5.48871691873458e17,5.493245563056955e17,5.49777420737933e17,5.502302851701704e17,5.506831496024079e17,5.511360140346454e17,5.515888784668829e17,5.5204174289912026e17,5.5249460733135776e17,5.5294747176359526e17,5.5340033619583264e17,5.5385320062807014e17,5.5430606506030765e17,5.5475892949254515e17,5.552117939247825e17,5.556646583570201e17,5.5611752278925754e17,5.565703872214949e17,5.570232516537324e17,5.574761160859699e17,5.579289805182074e17,5.583818449504448e17,5.588347093826823e17,5.592875738149198e17,5.597404382471572e17,5.601933026793947e17,5.606461671116322e17,5.610990315438697e17,5.615518959761071e17,5.620047604083446e17,5.624576248405821e17,5.629104892728195e17,5.6336335370505696e17,5.638162181372944e17,5.6426908256953197e17,5.6472194700176934e17,5.6517481143400685e17,5.6562767586624435e17,5.660805402984818e17,5.665334047307192e17,5.6698626916295674e17,5.6743913359519424e17,5.678919980274316e17,5.683448624596691e17,5.6879772689190656e17,5.6925059132414406e17,5.697034557563815e17,5.70156320188619e17,5.706091846208565e17,5.7106204905309395e17,5.715149134853314e17,5.7196777791756883e17,5.724206423498064e17,5.728735067820438e17,5.733263712142813e17,5.737792356465187e17,5.742321000787562e17,5.7468496451099366e17,5.7513782894323117e17,5.755906933754687e17,5.7604355780770605e17,5.764964222399436e17,5.76949286672181e17,5.774021511044184e17,5.77855015536656e17,5.783078799688934e17,5.787607444011309e17,5.792136088333683e17,5.796664732656058e17,5.801193376978433e17,5.805722021300808e17,5.810250665623182e17,5.814779309945556e17,5.819307954267932e17,5.823836598590307e17,5.828365242912681e17,5.832893887235055e17,5.83742253155743e17,5.841951175879805e17,5.84647982020218e17,5.851008464524554e17,5.855537108846929e17,5.860065753169304e17,5.864594397491679e17,5.869123041814053e17,5.873651686136428e17,5.878180330458802e17,5.882708974781178e17,5.887237619103551e17,5.891766263425926e17,5.896294907748301e17,5.900823552070675e17,5.905352196393051e17,5.909880840715425e17,5.9144094850378e17,5.918938129360174e17,5.92346677368255e17,5.927995418004923e17,5.932524062327299e17,5.937052706649674e17,5.941581350972047e17,5.946109995294422e17,5.950638639616797e17,5.955167283939172e17,5.959695928261546e17,5.964224572583922e17,5.968753216906296e17,5.973281861228671e17,5.977810505551044e17,5.98233914987342e17,5.986867794195795e17,5.99139643851817e17,5.995925082840544e17,6.00045372716292e17,6.004982371485293e17,6.009511015807667e17,6.014039660130043e17,6.018568304452417e17,6.023096948774793e17,6.027625593097166e17,6.032154237419542e17,6.036682881741916e17,6.041211526064289e17,6.045740170386665e17,6.05026881470904e17,6.054797459031415e17,6.05932610335379e17,6.063854747676165e17,6.068383391998538e17,6.072912036320914e17,6.077440680643287e17,6.081969324965663e17,6.086497969288038e17,6.091026613610412e17,6.095555257932787e17,6.100083902255163e17,6.104612546577536e17,6.10914119089991e17,6.113669835222286e17,6.11819847954466e17,6.122727123867035e17,6.127255768189409e17,6.131784412511785e17,6.136313056834159e17,6.140841701156532e17,6.145370345478908e17,6.149898989801284e17,6.154427634123658e17,6.158956278446033e17,6.163484922768408e17,6.168013567090781e17,6.172542211413156e17,6.17707085573553e17,6.181599500057906e17,6.186128144380282e17,6.190656788702655e17,6.19518543302503e17,6.199714077347405e17,6.204242721669778e17,6.208771365992154e17,6.213300010314529e17,6.217828654636904e17,6.222357298959278e17,6.226885943281652e17,6.231414587604027e17,6.235943231926401e17,6.240471876248776e17,6.245000520571151e17,6.249529164893527e17,6.2540578092159e17,6.258586453538276e17,6.26311509786065e17,6.267643742183025e17,6.272172386505399e17,6.276701030827773e17,6.281229675150149e17,6.285758319472524e17,6.290286963794898e17,6.294815608117272e17,6.299344252439648e17,6.303872896762021e17,6.308401541084397e17,6.312930185406772e17,6.317458829729146e17,6.321987474051521e17,6.326516118373894e17,6.33104476269627e17,6.335573407018644e17,6.340102051341019e17,6.344630695663395e17,6.34915933998577e17,6.353687984308143e17,6.358216628630518e17,6.362745272952893e17,6.367273917275267e17,6.371802561597642e17,6.376331205920017e17,6.380859850242392e17,6.385388494564767e17,6.38991713888714e17,6.394445783209516e17,6.39897442753189e17,6.403503071854264e17,6.40803171617664e17,6.412560360499016e17,6.417089004821389e17,6.421617649143763e17,6.426146293466139e17,6.430674937788513e17,6.435203582110888e17,6.439732226433262e17,6.444260870755638e17,6.448789515078012e17,6.453318159400385e17,6.457846803722761e17,6.462375448045137e17,6.46690409236751e17,6.471432736689885e17,6.475961381012261e17,6.480490025334634e17,6.485018669657009e17,6.489547313979383e17,6.494075958301759e17,6.498604602624133e17,6.503133246946508e17,6.507661891268883e17,6.512190535591259e17,6.516719179913631e17,6.521247824236006e17,6.525776468558382e17,6.530305112880755e17,6.534833757203131e17,6.539362401525505e17,6.543891045847881e17,6.548419690170254e17,6.552948334492628e17,6.557476978815004e17,6.562005623137379e17,6.566534267459753e17,6.571062911782129e17,6.575591556104504e17,6.580120200426876e17,6.584648844749252e17,6.589177489071626e17,6.593706133394002e17,6.598234777716376e17,6.602763422038751e17,6.607292066361126e17,6.611820710683501e17,6.616349355005874e17,6.62087799932825e17,6.625406643650625e17,6.629935287972998e17,6.634463932295374e17,6.638992576617748e17,6.643521220940123e17,6.648049865262497e17,6.652578509584872e17,6.657107153907247e17,6.661635798229622e17,6.666164442551996e17,6.670693086874372e17,6.675221731196748e17,6.67975037551912e17,6.684279019841495e17,6.68880766416387e17,6.693336308486244e17,6.69786495280862e17,6.702393597130994e17,6.70692224145337e17,6.711450885775743e17,6.715979530098117e17,6.720508174420493e17,6.725036818742867e17,6.729565463065242e17,6.734094107387617e17,6.738622751709992e17,6.743151396032365e17,6.74768004035474e17,6.752208684677115e17,6.756737328999489e17,6.761265973321865e17,6.76579461764424e17,6.770323261966615e17,6.774851906288988e17,6.779380550611363e17,6.783909194933738e17,6.788437839256113e17,6.792966483578487e17,6.797495127900863e17,6.802023772223237e17,6.80655241654561e17,6.811081060867986e17,6.81560970519036e17,6.820138349512736e17,6.82466699383511e17,6.829195638157485e17,6.83372428247986e17,6.838252926802232e17,6.842781571124608e17,6.847310215446984e17,6.851838859769358e17,6.856367504091732e17,6.860896148414108e17,6.865424792736483e17,6.869953437058857e17,6.874482081381231e17,6.879010725703606e17,6.883539370025981e17,6.888068014348355e17,6.89259665867073e17,6.897125302993106e17,6.901653947315479e17,6.906182591637853e17,6.910711235960229e17,6.915239880282604e17,6.919768524604978e17,6.924297168927354e17,6.928825813249728e17,6.933354457572102e17,6.937883101894476e17,6.942411746216851e17,6.946940390539227e17,6.951469034861601e17,6.955997679183976e17,6.960526323506351e17,6.965054967828724e17,6.969583612151099e17,6.974112256473475e17,6.978640900795849e17,6.983169545118225e17,6.987698189440598e17,6.992226833762973e17,6.996755478085348e17,7.001284122407721e17,7.005812766730097e17,7.010341411052472e17,7.014870055374847e17,7.019398699697221e17,7.023927344019597e17,7.02845598834197e17,7.032984632664346e17,7.037513276986719e17,7.042041921309094e17,7.04657056563147e17,7.051099209953843e17,7.055627854276219e17,7.060156498598593e17,7.064685142920968e17,7.069213787243342e17,7.073742431565718e17,7.078271075888092e17,7.082799720210467e17,7.087328364532841e17,7.091857008855215e17,7.096385653177591e17,7.100914297499964e17,7.10544294182234e17,7.109971586144716e17,7.11450023046709e17,7.119028874789464e17,7.12355751911184e17,7.128086163434213e17,7.132614807756588e17,7.137143452078962e17,7.141672096401338e17,7.146200740723713e17,7.150729385046086e17,7.155258029368462e17,7.159786673690836e17,7.16431531801321e17,7.168843962335585e17,7.173372606657961e17,7.177901250980335e17,7.18242989530271e17,7.186958539625084e17,7.191487183947459e17,7.196015828269833e17,7.200544472592207e17,7.205073116914583e17,7.209601761236959e17,7.214130405559332e17,7.218659049881708e17,7.223187694204082e17,7.227716338526456e17,7.232244982848831e17,7.236773627171205e17,7.241302271493581e17,7.245830915815955e17,7.25035956013833e17,7.254888204460704e17,7.25941684878308e17,7.263945493105453e17,7.268474137427828e17,7.273002781750204e17,7.277531426072577e17,7.282060070394953e17,7.286588714717326e17,7.291117359039702e17,7.295646003362076e17,7.30017464768445e17,7.304703292006826e17,7.309231936329202e17,7.313760580651575e17,7.31828922497395e17,7.322817869296325e17,7.327346513618698e17,7.331875157941074e17,7.336403802263448e17,7.340932446585824e17,7.345461090908198e17,7.349989735230572e17,7.354518379552947e17,7.359047023875322e17,7.363575668197696e17,7.368104312520072e17,7.372632956842447e17,7.37716160116482e17,7.381690245487195e17,7.386218889809569e17,7.390747534131945e17,7.395276178454319e17,7.399804822776694e17,7.40433346709907e17,7.408862111421444e17,7.413390755743817e17,7.417919400066193e17,7.422448044388568e17,7.426976688710941e17,7.431505333033317e17,7.436033977355692e17,7.440562621678066e17,7.44509126600044e17,7.449619910322815e17,7.45414855464519e17,7.458677198967565e17,7.463205843289939e17,7.467734487612315e17,7.47226313193469e17,7.476791776257062e17,7.481320420579438e17,7.485849064901812e17,7.490377709224187e17,7.494906353546563e17,7.499434997868937e17,7.503963642191313e17,7.508492286513686e17,7.51302093083606e17,7.517549575158436e17,7.52207821948081e17,7.526606863803185e17,7.53113550812556e17,7.535664152447936e17,7.540192796770308e17,7.544721441092684e17,7.549250085415058e17,7.553778729737434e17,7.558307374059808e17,7.562836018382182e17,7.567364662704558e17,7.571893307026931e17,7.576421951349306e17,7.580950595671681e17,7.585479239994057e17,7.59000788431643e17,7.594536528638806e17,7.59906517296118e17,7.603593817283553e17,7.608122461605929e17,7.612651105928303e17,7.617179750250679e17,7.621708394573053e17,7.626237038895428e17,7.630765683217804e17,7.635294327540179e17,7.639822971862551e17,7.644351616184927e17,7.648880260507301e17,7.653408904829676e17,7.657937549152051e17,7.662466193474426e17,7.666994837796801e17,7.671523482119174e17,7.676052126441549e17,7.680580770763924e17,7.685109415086299e17,7.689638059408673e17,7.694166703731049e17,7.698695348053423e17,7.703223992375796e17,7.707752636698172e17,7.712281281020547e17,7.716809925342921e17,7.721338569665297e17,7.725867213987671e17,7.730395858310047e17,7.73492450263242e17,7.739453146954794e17,7.74398179127717e17,7.748510435599544e17,7.753039079921919e17,7.757567724244294e17,7.762096368566669e17,7.766625012889042e17,7.771153657211418e17,7.775682301533792e17,7.780210945856168e17,7.784739590178542e17,7.789268234500916e17,7.793796878823292e17,7.798325523145664e17,7.80285416746804e17,7.807382811790415e17,7.81191145611279e17,7.816440100435164e17,7.82096874475754e17,7.825497389079914e17,7.830026033402289e17,7.834554677724663e17,7.839083322047037e17,7.843611966369413e17,7.848140610691786e17,7.852669255014162e17,7.857197899336538e17,7.861726543658911e17,7.866255187981285e17,7.870783832303661e17,7.875312476626035e17,7.87984112094841e17,7.884369765270785e17,7.88889840959316e17,7.893427053915534e17,7.897955698237907e17,7.902484342560283e17,7.907012986882659e17,7.911541631205033e17,7.916070275527407e17,7.920598919849783e17,7.925127564172156e17,7.92965620849453e17,7.934184852816906e17,7.938713497139281e17,7.943242141461656e17,7.94777078578403e17,7.952299430106405e17,7.95682807442878e17,7.961356718751153e17,7.965885363073528e17,7.970414007395904e17,7.974942651718278e17,7.979471296040653e17,7.983999940363028e17,7.988528584685402e17,7.993057229007777e17,7.99758587333015e17,8.002114517652526e17,8.006643161974902e17,8.011171806297275e17,8.01570045061965e17,8.020229094942025e17,8.0247577392644e17,8.029286383586774e17,8.03381502790915e17,8.038343672231524e17,8.042872316553898e17,8.047400960876273e17,8.051929605198647e17,8.056458249521023e17,8.060986893843396e17,8.065515538165772e17,8.070044182488147e17,8.074572826810522e17,8.079101471132896e17,8.08363011545527e17,8.088158759777645e17,8.092687404100019e17,8.097216048422394e17,8.101744692744769e17,8.106273337067145e17,8.110801981389518e17,8.115330625711892e17,8.119859270034268e17,8.124387914356641e17,8.128916558679017e17,8.133445203001393e17,8.137973847323767e17,8.142502491646141e17,8.147031135968516e17,8.15155978029089e17,8.156088424613265e17,8.160617068935639e17,8.165145713258015e17,8.16967435758039e17,8.174203001902764e17,8.178731646225139e17,8.183260290547514e17,8.187788934869888e17,8.192317579192262e17,8.196846223514637e17,8.201374867837012e17,8.205903512159387e17,8.210432156481761e17,8.214960800804136e17,8.219489445126511e17,8.224018089448884e17,8.22854673377126e17,8.233075378093636e17,8.237604022416009e17,8.242132666738385e17,8.246661311060758e17,8.251189955383133e17,8.255718599705508e17,8.260247244027882e17,8.264775888350258e17,8.269304532672634e17,8.273833176995007e17,8.278361821317381e17,8.282890465639757e17,8.28741910996213e17,8.291947754284506e17,8.29647639860688e17,8.301005042929256e17,8.30553368725163e17,8.310062331574003e17,8.314590975896379e17,8.319119620218753e17,8.323648264541128e17,8.328176908863503e17,8.332705553185879e17,8.337234197508252e17,8.341762841830627e17,8.346291486153001e17,8.350820130475377e17,8.355348774797751e17,8.359877419120125e17,8.364406063442501e17,8.368934707764876e17,8.373463352087249e17,8.377991996409624e17,8.382520640732e17,8.387049285054373e17,8.391577929376749e17,8.396106573699123e17,8.400635218021498e17,8.405163862343872e17,8.409692506666246e17,8.414221150988622e17,8.418749795310996e17,8.423278439633371e17,8.427807083955747e17,8.432335728278122e17,8.436864372600494e17,8.44139301692287e17,8.445921661245244e17,8.450450305567619e17,8.454978949889994e17,8.459507594212369e17,8.464036238534744e17,8.468564882857117e17,8.473093527179492e17,8.477622171501868e17,8.482150815824242e17,8.486679460146616e17,8.491208104468992e17,8.495736748791366e17,8.50026539311374e17,8.504794037436115e17,8.50932268175849e17,8.513851326080865e17,8.51837997040324e17,8.522908614725614e17,8.52743725904799e17,8.531965903370363e17,8.536494547692737e17,8.541023192015113e17,8.545551836337487e17,8.550080480659862e17,8.554609124982237e17,8.559137769304612e17,8.563666413626985e17,8.56819505794936e17,8.572723702271735e17,8.577252346594111e17,8.581780990916485e17,8.58630963523886e17,8.590838279561235e17,8.595366923883607e17,8.599895568205983e17,8.604424212528358e17,8.608952856850733e17,8.613481501173107e17,8.618010145495483e17,8.622538789817857e17,8.627067434140232e17,8.631596078462606e17,8.63612472278498e17,8.640653367107356e17,8.645182011429729e17,8.649710655752105e17,8.65423930007448e17,8.658767944396855e17,8.663296588719228e17,8.667825233041604e17,8.672353877363978e17,8.676882521686353e17,8.681411166008728e17,8.685939810331103e17,8.690468454653478e17,8.69499709897585e17,8.699525743298226e17,8.704054387620602e17,8.708583031942976e17,8.71311167626535e17,8.717640320587726e17,8.7221689649101e17,8.726697609232474e17,8.731226253554849e17,8.735754897877224e17,8.740283542199599e17,8.744812186521974e17,8.749340830844348e17,8.753869475166724e17,8.758398119489096e17,8.762926763811471e17,8.767455408133847e17,8.771984052456221e17,8.776512696778596e17,8.781041341100972e17,8.785569985423346e17,8.79009862974572e17,8.794627274068095e17,8.799155918390469e17,8.803684562712845e17,8.808213207035218e17,8.812741851357594e17,8.817270495679969e17,8.821799140002342e17,8.826327784324717e17,8.830856428647092e17,8.835385072969467e17,8.839913717291841e17,8.844442361614217e17,8.848971005936591e17,8.853499650258966e17,8.858028294581339e17,8.862556938903715e17,8.86708558322609e17,8.871614227548465e17,8.876142871870839e17,8.880671516193215e17,8.885200160515588e17,8.889728804837962e17,8.894257449160338e17,8.898786093482712e17,8.903314737805088e17,8.907843382127461e17,8.912372026449837e17,8.916900670772211e17,8.921429315094584e17,8.92595795941696e17,8.930486603739336e17,8.93501524806171e17,8.939543892384084e17,8.94407253670646e17,8.948601181028833e17,8.953129825351209e17,8.957658469673582e17,8.962187113995958e17,8.966715758318333e17,8.971244402640707e17,8.975773046963082e17,8.980301691285457e17,8.984830335607831e17,8.989358979930205e17,8.993887624252581e17,8.998416268574956e17,9.00294491289733e17,9.007473557219704e17,9.012002201542079e17,9.016530845864454e17,9.021059490186828e17,9.025588134509203e17,9.030116778831579e17,9.034645423153953e17,9.039174067476328e17,9.043702711798702e17,9.048231356121076e17,9.052760000443451e17,9.057288644765825e17,9.061817289088201e17,9.066345933410577e17,9.07087457773295e17,9.075403222055324e17,9.0799318663777e17,9.084460510700073e17,9.088989155022449e17,9.093517799344824e17,9.098046443667199e17,9.102575087989573e17,9.107103732311946e17,9.111632376634322e17,9.116161020956696e17,9.120689665279071e17,9.125218309601446e17,9.129746953923822e17,9.134275598246195e17,9.13880424256857e17,9.143332886890945e17,9.14786153121332e17,9.152390175535694e17,9.156918819858068e17,9.161447464180444e17,9.165976108502819e17,9.170504752825193e17,9.175033397147567e17,9.179562041469943e17,9.184090685792316e17,9.188619330114692e17,9.193147974437068e17,9.197676618759441e17,9.202205263081816e17,9.20673390740419e17,9.211262551726565e17,9.21579119604894e17,9.220319840371314e17,9.22484848469369e17,9.229377129016065e17,9.233905773338438e17,9.238434417660813e17,9.242963061983188e17,9.247491706305562e17,9.252020350627937e17,9.256548994950312e17,9.261077639272687e17,9.265606283595062e17,9.270134927917435e17,9.27466357223981e17,9.279192216562185e17,9.28372086088456e17,9.288249505206935e17,9.292778149529311e17,9.297306793851684e17,9.301835438174058e17,9.306364082496433e17,9.310892726818808e17,9.315421371141183e17,9.319950015463557e17,9.324478659785933e17,9.329007304108307e17,9.33353594843068e17,9.338064592753056e17,9.342593237075432e17,9.347121881397805e17,9.35165052572018e17,9.356179170042555e17,9.360707814364929e17,9.365236458687304e17,9.369765103009678e17,9.374293747332054e17,9.378822391654428e17,9.383351035976803e17,9.387879680299178e17,9.392408324621554e17,9.396936968943926e17,9.401465613266301e17,9.405994257588676e17,9.41052290191105e17,9.415051546233426e17,9.4195801905558e17,9.424108834878176e17,9.428637479200549e17,9.433166123522924e17,9.437694767845299e17,9.442223412167674e17,9.446752056490048e17,9.451280700812424e17,9.455809345134798e17,9.460337989457171e17,9.464866633779547e17,9.469395278101921e17,9.473923922424297e17,9.478452566746671e17,9.482981211069046e17,9.487509855391421e17,9.492038499713795e17,9.496567144036169e17,9.501095788358545e17,9.505624432680919e17,9.510153077003293e17,9.514681721325669e17,9.519210365648044e17,9.523739009970417e17,9.528267654292792e17,9.532796298615167e17,9.537324942937542e17,9.541853587259917e17,9.546382231582291e17,9.550910875904667e17,9.555439520227039e17,9.559968164549414e17,9.56449680887179e17,9.569025453194164e17,9.573554097516539e17,9.578082741838915e17,9.582611386161289e17,9.587140030483663e17,9.591668674806038e17,9.596197319128412e17,9.600725963450788e17,9.605254607773161e17,9.609783252095537e17,9.614311896417912e17,9.618840540740285e17,9.62336918506266e17,9.627897829385036e17,9.63242647370741e17,9.636955118029784e17,9.64148376235216e17,9.646012406674534e17,9.650541050996909e17,9.655069695319282e17,9.659598339641658e17,9.664126983964033e17,9.668655628286408e17,9.673184272608782e17,9.677712916931158e17,9.682241561253532e17,9.686770205575905e17,9.691298849898281e17,9.695827494220655e17,9.700356138543031e17,9.704884782865404e17,9.70941342718778e17,9.713942071510156e17,9.718470715832527e17,9.722999360154903e17,9.727528004477279e17,9.732056648799653e17,9.736585293122028e17,9.741113937444403e17,9.745642581766778e17,9.750171226089152e17,9.754699870411525e17,9.759228514733901e17,9.763757159056276e17,9.76828580337865e17,9.772814447701025e17,9.777343092023401e17,9.781871736345774e17,9.786400380668148e17,9.790929024990524e17,9.795457669312899e17,9.799986313635273e17,9.804514957957647e17,9.809043602280023e17,9.813572246602397e17,9.81810089092477e17,9.822629535247146e17,9.827158179569522e17,9.831686823891896e17,9.836215468214271e17,9.840744112536646e17,9.84527275685902e17,9.849801401181394e17,9.85433004550377e17,9.858858689826144e17,9.86338733414852e17,9.867915978470893e17,9.872444622793268e17,9.876973267115643e17,9.881501911438016e17,9.886030555760392e17,9.890559200082767e17,9.895087844405142e17,9.899616488727516e17,9.904145133049892e17,9.908673777372265e17,9.91320242169464e17,9.917731066017014e17,9.92225971033939e17,9.926788354661765e17,9.931316998984138e17,9.935845643306514e17,9.940374287628888e17,9.944902931951263e17,9.949431576273637e17,9.953960220596013e17,9.958488864918387e17,9.963017509240762e17,9.967546153563136e17,9.97207479788551e17,9.976603442207886e17,9.981132086530259e17,9.985660730852635e17,9.99018937517501e17,9.994718019497384e17,9.999246663819759e17,1.0003775308142134e18,1.0008303952464508e18,1.0012832596786883e18,1.0017361241109257e18,1.0021889885431633e18,1.0026418529754008e18,1.0030947174076381e18,1.0035475818398756e18,1.0040004462721132e18,1.0044533107043505e18,1.004906175136588e18,1.0053590395688256e18,1.005811904001063e18,1.0062647684333005e18,1.0067176328655378e18,1.0071704972977754e18,1.0076233617300128e18,1.0080762261622502e18,1.0085290905944878e18,1.0089819550267254e18,1.0094348194589627e18,1.0098876838912001e18,1.0103405483234377e18,1.0107934127556751e18,1.0112462771879126e18,1.01169914162015e18,1.0121520060523876e18,1.012604870484625e18,1.0130577349168623e18,1.0135105993490999e18,1.0139634637813375e18,1.0144163282135748e18,1.0148691926458124e18,1.0153220570780499e18,1.0157749215102872e18,1.0162277859425247e18,1.0166806503747621e18,1.0171335148069997e18,1.0175863792392371e18,1.0180392436714746e18,1.0184921081037121e18,1.0189449725359497e18,1.019397836968187e18,1.0198507014004244e18,1.020303565832662e18,1.0207564302648993e18,1.0212092946971369e18,1.0216621591293743e18,1.0221150235616119e18,1.0225678879938493e18,1.0230207524260867e18,1.0234736168583242e18,1.0239264812905617e18,1.0243793457227991e18,1.0248322101550367e18,1.0252850745872742e18,1.0257379390195116e18,1.026190803451749e18,1.0266436678839864e18,1.027096532316224e18,1.0275493967484614e18,1.0280022611806989e18,1.0284551256129364e18,1.0289079900451739e18,1.0293608544774112e18,1.0298137189096488e18,1.0302665833418863e18,1.0307194477741236e18,1.0311723122063612e18,1.0316251766385987e18,1.0320780410708361e18,1.0325309055030735e18,1.032983769935311e18,1.0334366343675485e18,1.033889498799786e18,1.0343423632320234e18,1.034795227664261e18,1.0352480920964986e18,1.0357009565287357e18,1.0361538209609733e18,1.0366066853932108e18,1.0370595498254482e18,1.0375124142576858e18,1.0379652786899232e18,1.0384181431221608e18,1.0388710075543981e18,1.0393238719866355e18,1.0397767364188731e18,1.0402296008511105e18,1.040682465283348e18,1.0411353297155855e18,1.041588194147823e18,1.0420410585800603e18,1.0424939230122979e18,1.0429467874445353e18,1.0433996518767729e18,1.0438525163090103e18,1.0443053807412477e18,1.0447582451734853e18,1.0452111096057226e18,1.0456639740379601e18,1.0461168384701976e18,1.0465697029024351e18,1.0470225673346725e18,1.0474754317669101e18,1.0479282961991475e18,1.0483811606313848e18,1.0488340250636224e18,1.0492868894958598e18,1.0497397539280974e18,1.0501926183603348e18,1.0506454827925723e18,1.0510983472248099e18,1.051551211657047e18,1.0520040760892846e18,1.0524569405215222e18,1.0529098049537596e18,1.053362669385997e18,1.0538155338182346e18,1.0542683982504721e18,1.0547212626827095e18,1.055174127114947e18,1.0556269915471844e18,1.056079855979422e18,1.0565327204116593e18,1.0569855848438968e18,1.0574384492761344e18,1.0578913137083717e18,1.0583441781406092e18,1.0587970425728467e18,1.0592499070050842e18,1.0597027714373216e18,1.0601556358695592e18,1.0606085003017966e18,1.061061364734034e18,1.0615142291662714e18,1.0619670935985089e18,1.0624199580307465e18,1.062872822462984e18,1.0633256868952214e18,1.063778551327459e18,1.0642314157596963e18,1.0646842801919337e18,1.0651371446241713e18,1.0655900090564087e18,1.0660428734886463e18,1.0664957379208836e18,1.0669486023531212e18,1.0674014667853586e18,1.0678543312175959e18,1.0683071956498335e18,1.068760060082071e18,1.0692129245143085e18,1.0696657889465459e18,1.0701186533787835e18,1.0705715178110209e18,1.0710243822432584e18,1.0714772466754957e18,1.0719301111077332e18,1.0723829755399708e18,1.0728358399722081e18,1.0732887044044457e18,1.0737415688366833e18,1.0741944332689206e18,1.074647297701158e18,1.0751001621333956e18,1.075553026565633e18,1.0760058909978705e18,1.0764587554301079e18,1.0769116198623455e18,1.0773644842945829e18,1.0778173487268202e18,1.0782702131590578e18,1.0787230775912954e18,1.0791759420235328e18,1.0796288064557702e18,1.0800816708880078e18,1.0805345353202451e18,1.0809873997524826e18,1.08144026418472e18,1.0818931286169576e18,1.0823459930491951e18,1.0827988574814324e18,1.08325172191367e18,1.0837045863459075e18,1.0841574507781448e18,1.0846103152103823e18,1.0850631796426199e18,1.0855160440748573e18,1.0859689085070948e18,1.0864217729393322e18,1.0868746373715697e18,1.0873275018038072e18,1.0877803662360445e18,1.0882332306682821e18,1.0886860951005197e18,1.089138959532757e18,1.0895918239649946e18,1.090044688397232e18,1.0904975528294694e18,1.0909504172617069e18,1.0914032816939443e18,1.0918561461261819e18,1.0923090105584193e18,1.0927618749906568e18,1.0932147394228942e18,1.0936676038551318e18,1.0941204682873691e18,1.0945733327196067e18,1.0950261971518442e18,1.0954790615840815e18,1.0959319260163191e18,1.0963847904485564e18,1.096837654880794e18,1.0972905193130314e18,1.0977433837452689e18,1.0981962481775064e18,1.098649112609744e18,1.0991019770419813e18,1.0995548414742188e18,1.1000077059064563e18,1.1004605703386936e18,1.1009134347709312e18,1.1013662992031686e18,1.1018191636354062e18,1.1022720280676436e18,1.102724892499881e18,1.1031777569321185e18,1.103630621364356e18,1.1040834857965934e18,1.104536350228831e18,1.1049892146610685e18,1.1054420790933059e18,1.1058949435255433e18,1.1063478079577809e18,1.1068006723900183e18,1.1072535368222557e18,1.1077064012544932e18,1.1081592656867308e18,1.1086121301189682e18,1.1090649945512055e18,1.1095178589834431e18,1.1099707234156806e18,1.110423587847918e18,1.1108764522801555e18,1.1113293167123931e18,1.1117821811446304e18,1.1122350455768678e18,1.1126879100091053e18,1.1131407744413428e18,1.1135936388735803e18,1.1140465033058177e18,1.1144993677380553e18,1.1149522321702929e18,1.11540509660253e18,1.1158579610347676e18,1.1163108254670052e18,1.1167636898992425e18,1.11721655433148e18,1.1176694187637175e18,1.1181222831959551e18,1.1185751476281924e18,1.1190280120604298e18,1.1194808764926674e18,1.1199337409249048e18,1.1203866053571423e18,1.1208394697893798e18,1.1212923342216174e18,1.1217451986538547e18,1.1221980630860922e18,1.1226509275183296e18,1.1231037919505672e18,1.1235566563828046e18,1.124009520815042e18,1.1244623852472796e18,1.124915249679517e18,1.1253681141117544e18,1.1258209785439919e18,1.1262738429762295e18,1.1267267074084668e18,1.1271795718407044e18,1.1276324362729418e18,1.1280853007051793e18,1.1285381651374167e18,1.1289910295696541e18,1.1294438940018917e18,1.1298967584341292e18,1.1303496228663666e18,1.1308024872986042e18,1.1312553517308417e18,1.1317082161630789e18,1.1321610805953165e18,1.1326139450275539e18,1.1330668094597914e18,1.1335196738920289e18,1.1339725383242664e18,1.1344254027565039e18,1.1348782671887412e18,1.1353311316209787e18,1.1357839960532163e18,1.1362368604854537e18,1.1366897249176911e18,1.1371425893499287e18,1.1375954537821661e18,1.1380483182144035e18,1.138501182646641e18,1.1389540470788785e18,1.139406911511116e18,1.1398597759433535e18,1.1403126403755909e18,1.1407655048078285e18,1.1412183692400658e18,1.1416712336723032e18,1.1421240981045408e18,1.1425769625367782e18,1.1430298269690157e18,1.1434826914012532e18,1.1439355558334907e18,1.144388420265728e18,1.1448412846979656e18,1.145294149130203e18,1.1457470135624406e18,1.146199877994678e18,1.1466527424269155e18,1.147105606859153e18,1.1475584712913902e18,1.1480113357236278e18,1.1484642001558653e18,1.1489170645881028e18,1.1493699290203402e18,1.1498227934525778e18,1.1502756578848152e18,1.1507285223170527e18,1.1511813867492901e18,1.1516342511815276e18,1.1520871156137651e18,1.1525399800460024e18,1.15299284447824e18,1.1534457089104776e18,1.153898573342715e18,1.1543514377749524e18,1.15480430220719e18,1.1552571666394273e18,1.155710031071665e18,1.1561628955039025e18,1.1566157599361398e18,1.157068624368377e18,1.1575214888006147e18,1.1579743532328522e18,1.1584272176650895e18,1.158880082097327e18,1.1593329465295647e18,1.159785810961802e18,1.1602386753940393e18,1.1606915398262769e18,1.1611444042585144e18,1.1615972686907517e18,1.1620501331229893e18,1.162502997555227e18,1.1629558619874644e18,1.1634087264197018e18,1.163861590851939e18,1.1643144552841766e18,1.1647673197164142e18,1.1652201841486515e18,1.165673048580889e18,1.1661259130131267e18,1.166578777445364e18,1.1670316418776015e18,1.1674845063098388e18,1.1679373707420764e18,1.168390235174314e18,1.1688430996065513e18,1.1692959640387889e18,1.1697488284710262e18,1.1702016929032637e18,1.1706545573355013e18,1.171107421767739e18,1.1715602861999762e18,1.1720131506322138e18,1.172466015064451e18,1.1729188794966886e18,1.173371743928926e18,1.1738246083611635e18,1.174277472793401e18,1.1747303372256384e18,1.175183201657876e18,1.1756360660901135e18,1.1760889305223508e18,1.1765417949545882e18,1.1769946593868257e18,1.1774475238190633e18,1.1779003882513006e18,1.1783532526835382e18,1.1788061171157757e18,1.1792589815480133e18,1.1797118459802506e18,1.180164710412488e18,1.1806175748447255e18,1.1810704392769628e18,1.1815233037092004e18,1.181976168141438e18,1.1824290325736755e18,1.182881897005913e18,1.1833347614381501e18,1.183787625870388e18,1.1842404903026253e18,1.1846933547348626e18,1.1851462191671004e18,1.1855990835993375e18,1.186051948031575e18,1.1865048124638126e18,1.1869576768960502e18,1.1874105413282877e18,1.187863405760525e18,1.1883162701927624e18,1.188769134625e18,1.1892219990572375e18,1.1896748634894748e18,1.1901277279217126e18,1.1905805923539497e18,1.191033456786187e18,1.1914863212184248e18,1.1919391856506621e18,1.1923920500828997e18,1.1928449145151373e18,1.1932977789473746e18,1.1937506433796122e18,1.1942035078118495e18,1.194656372244087e18,1.1951092366763246e18,1.195562101108562e18,1.1960149655407992e18,1.196467829973037e18,1.1969206944052744e18,1.1973735588375117e18,1.1978264232697495e18,1.1982792877019866e18,1.1987321521342244e18,1.1991850165664617e18,1.1996378809986993e18,1.2000907454309368e18,1.200543609863174e18,1.2009964742954115e18,1.201449338727649e18,1.2019022031598866e18,1.202355067592124e18,1.2028079320243617e18,1.2032607964565988e18,1.203713660888836e18,1.204166525321074e18,1.2046193897533112e18,1.205072254185549e18,1.205525118617786e18,1.2059779830500237e18,1.2064308474822612e18,1.2068837119144986e18,1.207336576346736e18,1.2077894407789737e18,1.208242305211211e18,1.2086951696434483e18,1.2091480340756861e18,1.2096008985079235e18,1.210053762940161e18,1.2105066273723983e18,1.2109594918046356e18,1.2114123562368735e18,1.2118652206691108e18,1.2123180851013484e18,1.212770949533586e18,1.213223813965823e18,1.2136766783980605e18,1.214129542830298e18,1.2145824072625357e18,1.2150352716947732e18,1.2154881361270106e18,1.215941000559248e18,1.2163938649914854e18,1.216846729423723e18,1.2172995938559603e18,1.2177524582881981e18,1.2182053227204352e18,1.2186581871526728e18,1.2191110515849103e18,1.2195639160171476e18,1.2200167804493852e18,1.2204696448816225e18,1.22092250931386e18,1.2213753737460977e18,1.2218282381783352e18,1.2222811026105725e18,1.22273396704281e18,1.2231868314750474e18,1.2236396959072847e18,1.2240925603395226e18,1.2245454247717599e18,1.2249982892039974e18,1.2254511536362348e18,1.225904018068472e18,1.22635688250071e18,1.2268097469329472e18,1.2272626113651848e18,1.2277154757974223e18,1.2281683402296596e18,1.228621204661897e18,1.2290740690941345e18,1.229526933526372e18,1.2299797979586094e18,1.230432662390847e18,1.2308855268230843e18,1.231338391255322e18,1.2317912556875594e18,1.2322441201197967e18,1.2326969845520346e18,1.2331498489842716e18,1.2336027134165092e18,1.2340555778487468e18,1.2345084422809843e18,1.2349613067132216e18,1.235414171145459e18,1.2358670355776965e18,1.2363199000099338e18,1.2367727644421716e18,1.237225628874409e18,1.2376784933066468e18,1.2381313577388838e18,1.2385842221711212e18,1.239037086603359e18,1.2394899510355963e18,1.2399428154678339e18,1.2403956799000712e18,1.2408485443323087e18,1.241301408764546e18,1.2417542731967836e18,1.2422071376290212e18,1.2426600020612588e18,1.243112866493496e18,1.2435657309257334e18,1.2440185953579712e18,1.2444714597902085e18,1.2449243242224458e18,1.2453771886546834e18,1.2458300530869207e18,1.2462829175191583e18,1.2467357819513958e18,1.2471886463836334e18,1.2476415108158707e18,1.248094375248108e18,1.2485472396803456e18,1.2490001041125832e18,1.2494529685448207e18,1.249905832977058e18,1.2503586974092956e18,1.250811561841533e18,1.2512644262737705e18,1.251717290706008e18,1.2521701551382454e18,1.252623019570483e18,1.2530758840027203e18,1.2535287484349578e18,1.2539816128671954e18,1.254434477299433e18,1.2548873417316703e18,1.2553402061639076e18,1.2557930705961452e18,1.2562459350283825e18,1.2566987994606203e18,1.2571516638928576e18,1.2576045283250952e18,1.2580573927573325e18,1.2585102571895698e18,1.2589631216218076e18,1.259415986054045e18,1.2598688504862825e18,1.2603217149185198e18,1.2607745793507574e18,1.2612274437829947e18,1.2616803082152323e18,1.2621331726474698e18,1.2625860370797071e18,1.2630389015119447e18,1.263491765944182e18,1.2639446303764196e18,1.2643974948086572e18,1.2648503592408945e18,1.265303223673132e18,1.2657560881053693e18,1.266208952537607e18,1.2666618169698445e18,1.267114681402082e18,1.2675675458343194e18,1.2680204102665567e18,1.2684732746987942e18,1.2689261391310316e18,1.2693790035632694e18,1.2698318679955067e18,1.2702847324277443e18,1.2707375968599816e18,1.271190461292219e18,1.2716433257244567e18,1.272096190156694e18,1.2725490545889316e18,1.273001919021169e18,1.2734547834534065e18,1.2739076478856438e18,1.2743605123178813e18,1.274813376750119e18,1.275266241182356e18,1.2757191056145938e18,1.276171970046831e18,1.276624834479069e18,1.2770776989113062e18,1.2775305633435436e18,1.277983427775781e18,1.2784362922080184e18,1.278889156640256e18,1.2793420210724936e18,1.2797948855047311e18,1.2802477499369684e18,1.2807006143692058e18,1.2811534788014433e18,1.281606343233681e18,1.2820592076659185e18,1.2825120720981558e18,1.2829649365303933e18,1.2834178009626307e18,1.283870665394868e18,1.2843235298271058e18,1.284776394259343e18,1.2852292586915807e18,1.285682123123818e18,1.2861349875560556e18,1.286587851988293e18,1.2870407164205304e18,1.287493580852768e18,1.2879464452850053e18,1.288399309717243e18,1.2888521741494802e18,1.289305038581718e18,1.2897579030139553e18,1.2902107674461926e18,1.2906636318784302e18,1.2911164963106675e18,1.2915693607429053e18,1.2920222251751427e18,1.2924750896073802e18,1.2929279540396175e18,1.2933808184718548e18,1.2938336829040924e18,1.29428654733633e18,1.2947394117685676e18,1.2951922762008049e18,1.2956451406330424e18,1.2960980050652797e18,1.296550869497517e18,1.297003733929755e18,1.2974565983619922e18,1.2979094627942298e18,1.298362327226467e18,1.2988151916587046e18,1.2992680560909422e18,1.2997209205231795e18,1.300173784955417e18,1.3006266493876544e18,1.301079513819892e18,1.3015323782521293e18,1.301985242684367e18,1.3024381071166044e18,1.3028909715488415e18,1.3033438359810793e18,1.3037967004133166e18,1.3042495648455544e18,1.3047024292777917e18,1.3051552937100293e18,1.3056081581422666e18,1.306061022574504e18,1.3065138870067415e18,1.306966751438979e18,1.3074196158712166e18,1.3078724803034537e18,1.3083253447356915e18,1.3087782091679288e18,1.3092310736001664e18,1.309683938032404e18,1.3101368024646413e18,1.3105896668968788e18,1.3110425313291162e18,1.3114953957613537e18,1.3119482601935913e18,1.3124011246258286e18,1.312853989058066e18,1.3133068534903035e18,1.313759717922541e18,1.3142125823547786e18,1.3146654467870162e18,1.3151183112192535e18,1.3155711756514908e18,1.3160240400837284e18,1.3164769045159657e18,1.3169297689482035e18,1.3173826333804408e18,1.3178354978126781e18,1.3182883622449157e18,1.318741226677153e18,1.3191940911093908e18,1.3196469555416282e18,1.3200998199738657e18,1.320552684406103e18,1.3210055488383406e18,1.321458413270578e18,1.3219112777028155e18,1.322364142135053e18,1.32281700656729e18,1.323269870999528e18,1.3237227354317652e18,1.3241755998640028e18,1.3246284642962404e18,1.3250813287284777e18,1.3255341931607153e18,1.3259870575929526e18,1.3264399220251901e18,1.3268927864574277e18,1.3273456508896653e18,1.3277985153219023e18,1.32825137975414e18,1.3287042441863775e18,1.3291571086186148e18,1.3296099730508526e18,1.33006283748309e18,1.3305157019153275e18,1.3309685663475648e18,1.331421430779802e18,1.33187429521204e18,1.3323271596442772e18,1.3327800240765146e18,1.3332328885087521e18,1.3336857529409897e18,1.334138617373227e18,1.3345914818054646e18,1.3350443462377021e18,1.3354972106699392e18,1.335950075102177e18,1.3364029395344143e18,1.3368558039666522e18,1.3373086683988895e18,1.3377615328311265e18,1.3382143972633644e18,1.3386672616956017e18,1.3391201261278392e18,1.3395729905600768e18,1.3400258549923144e18,1.3404787194245514e18,1.340931583856789e18,1.3413844482890266e18,1.341837312721264e18,1.3422901771535017e18,1.3427430415857388e18,1.3431959060179766e18,1.343648770450214e18,1.3441016348824512e18,1.344554499314689e18,1.3450073637469263e18,1.3454602281791636e18,1.3459130926114012e18,1.3463659570436388e18,1.3468188214758764e18,1.3472716859081137e18,1.347724550340351e18,1.3481774147725885e18,1.348630279204826e18,1.3490831436370634e18,1.3495360080693012e18,1.3499888725015386e18,1.3504417369337756e18,1.3508946013660134e18,1.3513474657982508e18,1.3518003302304883e18,1.352253194662726e18,1.3527060590949632e18,1.3531589235272008e18,1.3536117879594383e18,1.3540646523916756e18,1.3545175168239132e18,1.3549703812561508e18,1.3554232456883878e18,1.3558761101206257e18,1.356328974552863e18,1.3567818389851005e18,1.357234703417338e18,1.3576875678495752e18,1.358140432281813e18,1.3585932967140503e18,1.3590461611462879e18,1.3594990255785254e18,1.359951890010763e18,1.360404754443e18,1.3608576188752376e18,1.3613104833074752e18,1.3617633477397125e18,1.3622162121719503e18,1.3626690766041874e18,1.3631219410364252e18,1.3635748054686625e18,1.3640276699008998e18,1.3644805343331377e18,1.364933398765375e18,1.3653862631976123e18,1.3658391276298499e18,1.3662919920620874e18,1.3667448564943247e18,1.3671977209265623e18,1.3676505853587996e18,1.368103449791037e18,1.3685563142232748e18,1.369009178655512e18,1.36946204308775e18,1.3699149075199872e18,1.3703677719522243e18,1.370820636384462e18,1.3712735008166994e18,1.371726365248937e18,1.3721792296811745e18,1.3726320941134118e18,1.3730849585456492e18,1.3735378229778867e18,1.3739906874101243e18,1.3744435518423619e18,1.3748964162745994e18,1.3753492807068365e18,1.3758021451390743e18,1.3762550095713116e18,1.376707874003549e18,1.3771607384357868e18,1.3776136028680238e18,1.3780664673002614e18,1.378519331732499e18,1.3789721961647365e18,1.379425060596974e18,1.3798779250292114e18,1.3803307894614487e18,1.3807836538936863e18,1.3812365183259238e18,1.3816893827581612e18,1.382142247190399e18,1.382595111622636e18,1.3830479760548733e18,1.3835008404871112e18,1.3839537049193485e18,1.384406569351586e18,1.3848594337838236e18,1.385312298216061e18,1.3857651626482985e18,1.3862180270805358e18,1.3866708915127734e18,1.387123755945011e18,1.3875766203772483e18,1.3880294848094856e18,1.3884823492417234e18,1.3889352136739607e18,1.389388078106198e18,1.3898409425384358e18,1.390293806970673e18,1.3907466714029107e18,1.391199535835148e18,1.3916524002673856e18,1.3921052646996232e18,1.3925581291318602e18,1.3930109935640978e18,1.3934638579963354e18,1.393916722428573e18,1.3943695868608102e18,1.394822451293048e18,1.395275315725285e18,1.3957281801575224e18,1.3961810445897603e18,1.3966339090219976e18,1.3970867734542354e18,1.3975396378864724e18,1.39799250231871e18,1.3984453667509476e18,1.398898231183185e18,1.3993510956154225e18,1.39980396004766e18,1.4002568244798973e18,1.4007096889121347e18,1.4011625533443725e18,1.4016154177766098e18,1.4020682822088474e18,1.4025211466410847e18,1.402974011073322e18,1.4034268755055598e18,1.403879739937797e18,1.4043326043700347e18,1.4047854688022723e18,1.4052383332345093e18,1.405691197666747e18,1.4061440620989844e18,1.406596926531222e18,1.4070497909634596e18,1.407502655395697e18,1.4079555198279342e18,1.4084083842601718e18,1.4088612486924093e18,1.4093141131246467e18,1.4097669775568845e18,1.4102198419891215e18,1.410672706421359e18,1.4111255708535967e18,1.411578435285834e18,1.4120312997180716e18,1.4124841641503089e18,1.4129370285825464e18,1.413389893014784e18,1.4138427574470216e18,1.414295621879259e18,1.4147484863114964e18,1.4152013507437338e18,1.415654215175971e18,1.416107079608209e18,1.4165599440404462e18,1.4170128084726838e18,1.417465672904921e18,1.4179185373371584e18,1.4183714017693962e18,1.4188242662016335e18,1.419277130633871e18,1.4197299950661087e18,1.420182859498346e18,1.4206357239305833e18,1.4210885883628209e18,1.4215414527950584e18,1.4219943172272957e18,1.4224471816595333e18,1.4229000460917706e18,1.4233529105240084e18,1.4238057749562458e18,1.424258639388483e18,1.424711503820721e18,1.425164368252958e18,1.4256172326851955e18,1.426070097117433e18,1.4265229615496707e18,1.426975825981908e18,1.4274286904141453e18,1.4278815548463828e18,1.4283344192786202e18,1.428787283710858e18,1.4292401481430953e18,1.429693012575333e18,1.4301458770075702e18,1.4305987414398075e18,1.4310516058720453e18,1.4315044703042826e18,1.4319573347365202e18,1.4324101991687575e18,1.432863063600995e18,1.4333159280332324e18,1.43376879246547e18,1.4342216568977075e18,1.434674521329945e18,1.4351273857621824e18,1.4355802501944197e18,1.4360331146266575e18,1.4364859790588948e18,1.4369388434911322e18,1.4373917079233697e18,1.437844572355607e18,1.4382974367878446e18,1.4387503012200822e18,1.4392031656523197e18,1.439656030084557e18,1.4401088945167944e18,1.440561758949032e18,1.4410146233812695e18,1.441467487813507e18,1.4419203522457444e18,1.442373216677982e18,1.4428260811102193e18,1.4432789455424566e18,1.4437318099746944e18,1.4441846744069317e18,1.4446375388391693e18,1.4450904032714066e18,1.4455432677036442e18,1.4459961321358817e18,1.446448996568119e18,1.4469018610003566e18,1.447354725432594e18,1.4478075898648315e18,1.4482604542970688e18,1.4487133187293066e18,1.449166183161544e18,1.4496190475937812e18,1.4500719120260188e18,1.4505247764582561e18,1.450977640890494e18,1.4514305053227313e18,1.4518833697549688e18,1.4523362341872061e18,1.4527890986194435e18,1.453241963051681e18,1.4536948274839186e18,1.4541476919161562e18,1.4546005563483935e18,1.455053420780631e18,1.4555062852128684e18,1.455959149645106e18,1.4564120140773435e18,1.4568648785095808e18,1.4573177429418184e18,1.4577706073740557e18,1.4582234718062932e18,1.4586763362385308e18,1.4591292006707684e18,1.4595820651030057e18,1.460034929535243e18,1.4604877939674806e18,1.460940658399718e18,1.4613935228319557e18,1.461846387264193e18,1.4622992516964306e18,1.462752116128668e18,1.4632049805609052e18,1.463657844993143e18,1.4641107094253804e18,1.464563573857618e18,1.4650164382898552e18,1.4654693027220928e18,1.46592216715433e18,1.4663750315865677e18,1.4668278960188052e18,1.4672807604510423e18,1.4677336248832801e18,1.4681864893155174e18,1.4686393537477553e18,1.4690922181799926e18,1.46954508261223e18,1.4699979470444675e18,1.4704508114767048e18,1.4709036759089423e18,1.47135654034118e18,1.4718094047734175e18,1.4722622692056545e18,1.472715133637892e18,1.4731679980701297e18,1.4736208625023672e18,1.4740737269346048e18,1.474526591366842e18,1.4749794557990797e18,1.475432320231317e18,1.4758851846635543e18,1.476338049095792e18,1.4767909135280294e18,1.4772437779602668e18,1.4776966423925043e18,1.478149506824742e18,1.4786023712569795e18,1.4790552356892168e18,1.4795081001214543e18,1.4799609645536916e18,1.4804138289859292e18,1.4808666934181665e18,1.4813195578504044e18,1.4817724222826417e18,1.4822252867148787e18,1.4826781511471165e18,1.4831310155793539e18,1.4835838800115914e18,1.484036744443829e18,1.4844896088760666e18,1.484942473308304e18,1.4853953377405412e18,1.4858482021727788e18,1.4863010666050163e18,1.486753931037254e18,1.487206795469491e18,1.4876596599017288e18,1.488112524333966e18,1.4885653887662034e18,1.4890182531984412e18,1.4894711176306785e18,1.489923982062916e18,1.4903768464951534e18,1.490829710927391e18,1.4912825753596285e18,1.4917354397918659e18,1.4921883042241032e18,1.4926411686563407e18,1.4930940330885783e18,1.4935468975208156e18,1.4939997619530534e18,1.4944526263852908e18,1.4949054908175278e18,1.4953583552497656e18,1.495811219682003e18,1.4962640841142408e18,1.496716948546478e18,1.4971698129787154e18,1.497622677410953e18,1.4980755418431903e18,1.4985284062754278e18,1.4989812707076654e18,1.499434135139903e18,1.49988699957214e18,1.5003398640043779e18,1.5007927284366152e18,1.5012455928688527e18,1.5016984573010903e18,1.5021513217333274e18,1.5026041861655652e18,1.5030570505978025e18,1.50350991503004e18,1.5039627794622776e18,1.504415643894515e18,1.5048685083267523e18,1.5053213727589898e18,1.5057742371912274e18,1.506227101623465e18,1.5066799660557025e18,1.5071328304879398e18,1.5075856949201772e18,1.5080385593524147e18,1.508491423784652e18,1.5089442882168899e18,1.5093971526491272e18,1.5098500170813645e18,1.510302881513602e18,1.5107557459458394e18,1.5112086103780772e18,1.5116614748103145e18,1.512114339242552e18,1.5125672036747894e18,1.513020068107027e18,1.5134729325392643e18,1.5139257969715018e18,1.5143786614037394e18,1.5148315258359764e18,1.5152843902682143e18,1.5157372547004516e18,1.5161901191326892e18,1.5166429835649267e18,1.517095847997164e18,1.5175487124294016e18,1.518001576861639e18,1.5184544412938765e18,1.518907305726114e18,1.5193601701583516e18,1.5198130345905887e18,1.5202658990228262e18,1.5207187634550638e18,1.521171627887301e18,1.521624492319539e18,1.5220773567517763e18,1.5225302211840138e18,1.5229830856162511e18,1.5234359500484884e18,1.5238888144807263e18,1.5243416789129636e18,1.524794543345201e18,1.5252474077774385e18,1.525700272209676e18,1.5261531366419133e18,1.526606001074151e18,1.5270588655063885e18,1.5275117299386255e18,1.5279645943708634e18,1.5284174588031007e18,1.5288703232353385e18,1.5293231876675758e18,1.5297760520998129e18,1.5302289165320507e18,1.530681780964288e18,1.5311346453965256e18,1.5315875098287631e18,1.5320403742610007e18,1.5324932386932378e18,1.5329461031254753e18,1.533398967557713e18,1.5338518319899505e18,1.534304696422188e18,1.534757560854425e18,1.535210425286663e18,1.5356632897189002e18,1.5361161541511375e18,1.5365690185833754e18,1.5370218830156127e18,1.53747474744785e18,1.5379276118800876e18,1.538380476312325e18,1.5388333407445627e18,1.5392862051768e18,1.5397390696090373e18,1.540191934041275e18,1.5406447984735124e18,1.5410976629057498e18,1.5415505273379876e18,1.542003391770225e18,1.542456256202462e18,1.5429091206346998e18,1.543361985066937e18,1.5438148494991747e18,1.5442677139314122e18,1.5447205783636495e18,1.545173442795887e18,1.5456263072281244e18,1.546079171660362e18,1.5465320360925996e18,1.546984900524837e18,1.5474377649570742e18,1.547890629389312e18,1.5483434938215493e18,1.5487963582537866e18,1.5492492226860244e18,1.5497020871182615e18,1.5501549515504993e18,1.5506078159827366e18,1.5510606804149742e18,1.5515135448472118e18,1.551966409279449e18,1.5524192737116864e18,1.552872138143924e18,1.5533250025761615e18,1.5537778670083988e18,1.5542307314406367e18,1.5546835958728737e18,1.555136460305111e18,1.5555893247373489e18,1.5560421891695862e18,1.556495053601824e18,1.5569479180340613e18,1.5574007824662986e18,1.5578536468985362e18,1.5583065113307738e18,1.558759375763011e18,1.5592122401952486e18,1.559665104627486e18,1.5601179690597233e18,1.560570833491961e18,1.5610236979241984e18,1.5614765623564362e18,1.5619294267886735e18,1.5623822912209106e18,1.5628351556531484e18,1.5632880200853857e18,1.5637408845176233e18,1.5641937489498609e18,1.5646466133820982e18,1.5650994778143355e18,1.565552342246573e18,1.5660052066788106e18,1.5664580711110482e18,1.5669109355432858e18,1.5673637999755228e18,1.5678166644077606e18,1.568269528839998e18,1.5687223932722353e18,1.569175257704473e18,1.5696281221367101e18,1.5700809865689477e18,1.5705338510011853e18,1.5709867154334228e18,1.5714395798656604e18,1.5718924442978977e18,1.572345308730135e18,1.5727981731623726e18,1.5732510375946102e18,1.5737039020268475e18,1.5741567664590853e18,1.5746096308913224e18,1.5750624953235597e18,1.5755153597557975e18,1.5759682241880348e18,1.5764210886202724e18,1.57687395305251e18,1.5773268174847473e18,1.5777796819169848e18,1.5782325463492221e18,1.5786854107814597e18,1.5791382752136973e18,1.5795911396459346e18,1.580044004078172e18,1.5804968685104097e18,1.580949732942647e18,1.5814025973748844e18,1.5818554618071222e18,1.5823083262393592e18,1.582761190671597e18,1.5832140551038344e18,1.583666919536072e18,1.5841197839683095e18,1.5845726484005466e18,1.5850255128327841e18,1.5854783772650217e18,1.5859312416972593e18,1.5863841061294966e18,1.5868369705617344e18,1.5872898349939715e18,1.5877426994262088e18,1.5881955638584466e18,1.588648428290684e18,1.5891012927229217e18,1.5895541571551588e18,1.5900070215873964e18,1.590459886019634e18,1.5909127504518712e18,1.5913656148841088e18,1.5918184793163464e18,1.5922713437485837e18,1.592724208180821e18,1.5931770726130588e18,1.593629937045296e18,1.5940828014775337e18,1.594535665909771e18,1.5949885303420083e18,1.5954413947742461e18,1.5958942592064835e18,1.596347123638721e18,1.5967999880709586e18,1.5972528525031956e18,1.5977057169354332e18,1.5981585813676708e18,1.5986114457999084e18,1.599064310232146e18,1.5995171746643832e18,1.5999700390966205e18,1.600422903528858e18,1.6008757679610957e18,1.601328632393333e18,1.6017814968255708e18,1.602234361257808e18,1.6026872256900454e18,1.603140090122283e18,1.6035929545545203e18,1.604045818986758e18,1.6044986834189952e18,1.6049515478512328e18,1.6054044122834703e18,1.605857276715708e18,1.6063101411479452e18,1.6067630055801828e18,1.60721587001242e18,1.6076687344446574e18,1.6081215988768952e18,1.6085744633091325e18,1.60902732774137e18,1.6094801921736074e18,1.6099330566058447e18,1.6103859210380826e18,1.6108387854703199e18,1.6112916499025574e18,1.611744514334795e18,1.6121973787670323e18,1.6126502431992696e18,1.6131031076315072e18,1.6135559720637448e18,1.614008836495982e18,1.6144617009282196e18,1.614914565360457e18,1.6153674297926948e18,1.615820294224932e18,1.6162731586571694e18,1.6167260230894072e18,1.6171788875216443e18,1.6176317519538819e18,1.6180846163861194e18,1.618537480818357e18,1.6189903452505943e18,1.6194432096828316e18,1.6198960741150692e18,1.6203489385473065e18,1.6208018029795443e18,1.6212546674117816e18,1.6217075318440195e18,1.6221603962762565e18,1.6226132607084938e18,1.6230661251407316e18,1.623518989572969e18,1.6239718540052065e18,1.6244247184374438e18,1.6248775828696814e18,1.6253304473019187e18,1.6257833117341563e18,1.6262361761663939e18,1.6266890405986314e18,1.6271419050308687e18,1.627594769463106e18,1.6280476338953439e18,1.6285004983275812e18,1.6289533627598185e18,1.629406227192056e18,1.6298590916242934e18,1.630311956056531e18,1.6307648204887685e18,1.631217684921006e18,1.6316705493532434e18,1.6321234137854807e18,1.6325762782177183e18,1.6330291426499558e18,1.6334820070821934e18,1.6339348715144307e18,1.6343877359466683e18,1.6348406003789056e18,1.635293464811143e18,1.6357463292433807e18,1.636199193675618e18,1.6366520581078556e18,1.637104922540093e18,1.6375577869723305e18,1.638010651404568e18,1.6384635158368054e18,1.638916380269043e18,1.6393692447012803e18,1.6398221091335178e18,1.6402749735657551e18,1.640727837997993e18,1.6411807024302303e18,1.6416335668624676e18,1.6420864312947052e18,1.6425392957269425e18,1.6429921601591803e18,1.6434450245914176e18,1.6438978890236552e18,1.6443507534558925e18,1.6448036178881298e18,1.6452564823203674e18,1.645709346752605e18,1.6461622111848425e18,1.6466150756170798e18,1.6470679400493174e18,1.6475208044815547e18,1.647973668913792e18,1.6484265333460298e18,1.6488793977782671e18,1.6493322622105047e18,1.649785126642742e18,1.6502379910749796e18,1.6506908555072172e18,1.6511437199394545e18,1.651596584371692e18,1.6520494488039293e18,1.652502313236167e18,1.6529551776684042e18,1.653408042100642e18,1.6538609065328794e18,1.6543137709651167e18,1.6547666353973542e18,1.6552194998295916e18,1.6556723642618294e18,1.6561252286940667e18,1.6565780931263043e18,1.6570309575585416e18,1.657483821990779e18,1.6579366864230164e18,1.658389550855254e18,1.6588424152874916e18,1.6592952797197286e18,1.6597481441519665e18,1.6602010085842038e18,1.6606538730164416e18,1.661106737448679e18,1.6615596018809162e18,1.6620124663131538e18,1.662465330745391e18,1.6629181951776287e18,1.6633710596098662e18,1.6638239240421038e18,1.6642767884743409e18,1.6647296529065784e18,1.665182517338816e18,1.6656353817710536e18,1.6660882462032911e18,1.6665411106355284e18,1.666993975067766e18,1.6674468395000033e18,1.6678997039322406e18,1.6683525683644785e18,1.6688054327967158e18,1.669258297228953e18,1.6697111616611907e18,1.6701640260934282e18,1.6706168905256658e18,1.671069754957903e18,1.6715226193901407e18,1.671975483822378e18,1.6724283482546156e18,1.6728812126868529e18,1.6733340771190907e18,1.673786941551328e18,1.674239805983565e18,1.674692670415803e18,1.6751455348480402e18,1.6755983992802778e18,1.6760512637125153e18,1.676504128144753e18,1.6769569925769902e18,1.6774098570092275e18,1.677862721441465e18,1.6783155858737027e18,1.6787684503059402e18,1.6792213147381773e18,1.679674179170415e18,1.6801270436026524e18,1.6805799080348897e18,1.6810327724671276e18,1.6814856368993649e18,1.6819385013316024e18,1.6823913657638397e18,1.6828442301960773e18,1.683297094628315e18,1.6837499590605522e18,1.6842028234927895e18,1.684655687925027e18,1.6851085523572646e18,1.685561416789502e18,1.6860142812217398e18,1.686467145653977e18,1.6869200100862141e18,1.687372874518452e18,1.6878257389506893e18,1.688278603382927e18,1.6887314678151644e18,1.6891843322474017e18,1.6896371966796393e18,1.6900900611118766e18,1.6905429255441142e18,1.6909957899763517e18,1.6914486544085893e18,1.6919015188408264e18,1.6923543832730642e18,1.6928072477053015e18,1.693260112137539e18,1.6937129765697766e18,1.6941658410020137e18,1.6946187054342515e18,1.6950715698664888e18,1.6955244342987264e18,1.695977298730964e18,1.6964301631632013e18,1.6968830275954386e18,1.6973358920276762e18,1.6977887564599137e18,1.6982416208921513e18,1.6986944853243889e18,1.699147349756626e18,1.6996002141888635e18,1.700053078621101e18,1.7005059430533384e18,1.7009588074855762e18,1.7014116719178135e18,1.7018645363500508e18,1.7023174007822884e18,1.7027702652145257e18,1.7032231296467635e18,1.7036759940790008e18,1.7041288585112381e18,1.7045817229434757e18,1.7050345873757133e18,1.7054874518079506e18,1.7059403162401882e18,1.7063931806724257e18,1.7068460451046628e18,1.7072989095369006e18,1.707751773969138e18,1.7082046384013755e18,1.708657502833613e18,1.70911036726585e18,1.709563231698088e18,1.7100160961303252e18,1.7104689605625628e18,1.7109218249948004e18,1.711374689427038e18,1.711827553859275e18,1.7122804182915126e18,1.7127332827237501e18,1.7131861471559875e18,1.7136390115882253e18,1.7140918760204623e18,1.7145447404527002e18,1.7149976048849375e18,1.7154504693171748e18,1.7159033337494126e18,1.71635619818165e18,1.7168090626138872e18,1.7172619270461248e18,1.7177147914783624e18,1.7181676559105997e18,1.7186205203428372e18,1.7190733847750746e18,1.719526249207312e18,1.7199791136395497e18,1.720431978071787e18,1.7208848425040248e18,1.7213377069362621e18,1.7217905713684992e18,1.722243435800737e18,1.7226963002329743e18,1.723149164665212e18,1.7236020290974495e18,1.7240548935296868e18,1.724507757961924e18,1.7249606223941617e18,1.7254134868263992e18,1.7258663512586368e18,1.7263192156908744e18,1.7267720801231114e18,1.7272249445553492e18,1.7276778089875866e18,1.7281306734198239e18,1.7285835378520617e18,1.7290364022842988e18,1.7294892667165363e18,1.729942131148774e18,1.7303949955810115e18,1.730847860013249e18,1.7313007244454863e18,1.7317535888777236e18,1.7322064533099612e18,1.7326593177421988e18,1.733112182174436e18,1.733565046606674e18,1.734017911038911e18,1.7344707754711483e18,1.734923639903386e18,1.7353765043356234e18,1.735829368767861e18,1.7362822332000986e18,1.736735097632336e18,1.7371879620645734e18,1.7376408264968108e18,1.7380936909290483e18,1.738546555361286e18,1.7389994197935232e18,1.7394522842257605e18,1.7399051486579983e18,1.7403580130902356e18,1.740810877522473e18,1.7412637419547108e18,1.7417166063869478e18,1.7421694708191857e18,1.742622335251423e18,1.7430751996836605e18,1.743528064115898e18,1.7439809285481354e18,1.7444337929803727e18,1.7448866574126103e18,1.7453395218448479e18,1.7457923862770852e18,1.746245250709323e18,1.74669811514156e18,1.7471509795737974e18,1.7476038440060352e18,1.7480567084382725e18,1.7485095728705103e18,1.7489624373027476e18,1.749415301734985e18,1.7498681661672225e18,1.7503210305994598e18,1.7507738950316974e18,1.751226759463935e18,1.7516796238961723e18,1.7521324883284096e18,1.7525853527606474e18,1.7530382171928847e18,1.7534910816251223e18,1.75394394605736e18,1.754396810489597e18,1.7548496749218348e18,1.755302539354072e18,1.7557554037863096e18,1.7562082682185472e18,1.7566611326507843e18,1.7571139970830218e18,1.7575668615152594e18,1.758019725947497e18,1.7584725903797345e18,1.758925454811972e18,1.7593783192442092e18,1.7598311836764467e18,1.7602840481086843e18,1.7607369125409216e18,1.7611897769731594e18,1.7616426414053965e18,1.762095505837634e18,1.7625483702698716e18,1.7630012347021092e18,1.7634540991343468e18,1.763906963566584e18,1.7643598279988214e18,1.764812692431059e18,1.7652655568632965e18,1.7657184212955338e18,1.7661712857277716e18,1.7666241501600087e18,1.767077014592246e18,1.7675298790244838e18,1.7679827434567212e18,1.7684356078889587e18,1.7688884723211963e18,1.7693413367534336e18,1.7697942011856712e18,1.7702470656179085e18,1.770699930050146e18,1.7711527944823836e18,1.771605658914621e18,1.7720585233468582e18,1.772511387779096e18,1.7729642522113334e18,1.7734171166435707e18,1.7738699810758085e18,1.7743228455080456e18,1.7747757099402834e18,1.7752285743725207e18,1.7756814388047583e18,1.7761343032369958e18,1.776587167669233e18,1.7770400321014705e18,1.777492896533708e18,1.7779457609659456e18,1.778398625398183e18,1.7788514898304207e18,1.7793043542626578e18,1.779757218694895e18,1.780210083127133e18,1.7806629475593702e18,1.781115811991608e18,1.781568676423845e18,1.7820215408560827e18,1.7824744052883203e18,1.7829272697205576e18,1.7833801341527951e18,1.7838329985850327e18,1.78428586301727e18,1.7847387274495073e18,1.7851915918817452e18,1.7856444563139825e18,1.78609732074622e18,1.7865501851784573e18,1.7870030496106947e18,1.7874559140429325e18,1.7879087784751698e18,1.7883616429074074e18,1.788814507339645e18,1.789267371771882e18,1.7897202362041196e18,1.790173100636357e18,1.7906259650685947e18,1.7910788295008323e18,1.7915316939330696e18,1.791984558365307e18,1.7924374227975444e18,1.792890287229782e18,1.7933431516620193e18,1.7937960160942572e18,1.7942488805264942e18,1.7947017449587318e18,1.7951546093909693e18,1.7956074738232067e18,1.7960603382554442e18,1.7965132026876815e18,1.796966067119919e18,1.7974189315521567e18,1.7978717959843942e18,1.7983246604166316e18,1.798777524848869e18,1.7992303892811064e18,1.7996832537133437e18,1.8001361181455816e18,1.800588982577819e18,1.8010418470100564e18,1.8014947114422938e18,1.801947575874531e18,1.802400440306769e18,1.8028533047390062e18,1.8033061691712438e18,1.8037590336034813e18,1.8042118980357187e18,1.804664762467956e18,1.8051176269001935e18,1.805570491332431e18,1.8060233557646684e18,1.806476220196906e18,1.8069290846291433e18,1.807381949061381e18,1.8078348134936184e18,1.8082876779258557e18,1.8087405423580936e18,1.8091934067903306e18,1.8096462712225682e18,1.8100991356548058e18,1.8105520000870433e18,1.8110048645192806e18]}
},{}],34:[function(require,module,exports){
module.exports={"expected":[2.0,1.9798450101169913,1.9201924877023455,1.8234470247275238,1.6935084288476034,1.5356145222332822,1.3561300050653586,1.1622898945991833,0.9619078817653742,0.7630613614469594,0.5737658328542996,0.4016517949150644,0.25365716101572555,0.13574759185428842,0.05267601977800174,0.00779105817630088,0.002902018943190421,0.03820597915119017,0.11227983687872245,0.22213767641951687,0.36335113048466605,0.5302278875979567,0.7160411490566982,0.913300786051556,1.1140552666062948,1.310212181672036,1.493864449971296,1.6576090522849782,1.794845447007279,1.9000416378435296,1.9689571684697738,1.998814055240826,1.9884087676551192,1.9381607426446927,1.8500954770809983,1.7277628800369187,1.576094176024161,1.4012031274325563,1.210139588892087,1.0106053277753413,0.810643566110448,0.618314758464319,0.44137167518147624,0.28694688836870563,0.1612652580580357,0.06939300822397043,0.015033507398561574,0.00037798596010962804,0.026017207681284682,0.09091765605321367,0.19246319531536293,0.3265605268346068,0.4878041898907768,0.6696944556887894,0.8648993312944886,1.0655501121220805,1.2635585692563722,1.4509429857967824,1.6201498997041912,1.764358583702533,1.877755988657853,1.9557710674708857,1.9952590338932334,1.9946281287974,1.9539037839550324,1.874727596882667,1.760291158079303,1.6152073980774349,1.4453246403070668,1.257490855296707,1.059277619119292,0.858674903314824,0.6637689992980507,0.48241656011617906,0.3219278989233507,0.1887723104047483,0.08831729363943686,0.024612188320561446,0.00022494595444311205,0.01613861578748277,0.07171171811072496,0.16470410229392296,0.29136724721219986,0.4465953640570386,0.6241312105790712,0.816818320397446,1.0168894800139971,1.2162798250329259,1.4069519346809822,1.5812198200763117,1.7320587462848411,1.8533883992430091,1.9403179830951482,1.9893433680751111,1.9984883419063353,1.9673842708786942,1.8972849594659875,1.7910161094928663,1.6528614161514177,1.4883898923350687,1.3042313818405773,1.1078093105000077,0.907041448034596,0.7100207429178779,0.5246890957869145,0.35851722158714616,0.21820350520554066,0.10940398971023346,0.03650438136936107,0.0024432619201759653,0.00859363439841565,0.05470757741397303,0.13892623885691602,0.2578547661886508,0.4066991528787003,0.5794594847112599,0.769171796206096,0.9681887879251846,1.168488088959453,1.3619956385368397,1.5409111512495197,1.6980225463999377,1.8269966668288546,1.9226345683513906,1.9810810890922013,1.9999802509828952,1.9785702291900642,1.9177140612589665,1.8198648580874766,1.6889669190756673,1.5302967374964709,1.3502503051587067,1.1560852901071668,0.9556284801694157,0.7569602852983348,0.5680890164092136,0.39662807052926163,0.24948903491782826,0.1326030811228749,0.05068187957702863,0.0070276722569343475,0.003400159376375278,0.03994556590617171,0.11519074724855383,0.2261025716661208,0.3682101857607897,0.5357852344839099,0.7220727710119763,0.919563548516972,1.1202967177536975,1.316180728731855,1.4993195009325289,1.662330714153733,1.798643389689065,1.902762766345643,1.9704917941573938,1.999100317383591,1.9874351270318191,1.935966446689112,1.846768977818725,1.723438268586063,1.5709457773845892,1.3954384734493352,1.2039910526505273,1.004320756647035,0.8044762910306382,0.6125133821663523,0.43617005102664996,0.2825546937214517,0.15785954219565101,0.0671110554840777,0.013967303249871055,0.0005705090702815552,0.02746069744764401,0.09355392543253283,0.1961859763422109,0.33121975428116546,0.49321205039295024,0.6756329584991578,0.8711290954849252,1.071820016024122,1.269615873170702,1.4565435199249626,1.6250679066289453,1.768395818664235,1.8807497107968865,1.9576005999084336,1.9958506282136934,1.9939579378457157,1.951998823114907,1.8716646550870761,1.7561937024498686,1.6102405969677824,1.4396887053695302,1.251412970954491,1.0530027847673653,0.8524560573986126,0.657856823370832,0.47704937387004986,0.3173220535271857,0.18511346739333845,0.08575294090040964,0.023245694860980937,0.0001113950980625722,0.017282584767003617,0.07406709355968588,0.16817593907571848,0.2958155956564421,0.45184091132788584,0.6299625087720679,0.8230003100004063,1.0231729651513313,1.2224115185457756,1.412684668128017,1.5863225070881666,1.736325697651162,1.8566476142408002,1.9424380828337184,1.990238891376913,1.9981231902451544,1.9657731635106632,1.8944928400964485,1.7871555283971392,1.6480879932753556,1.4828960442581216,1.298238565467759,1.1015590961379487,0.9007857816977639,0.7040117903897337,0.5191690778221825,0.3537086499984886,0.21430021341629968,0.1065633193334542,0.03484083977045416,0.0020239064273325225,0.009435369223081858,0.056776472242406784,0.14213889658038614,0.2620816846393673,0.41176994505944176,0.585169747091926,0.7752913482255723,0.974470950565275,1.1746796283713596,1.3678469738921475,1.546186415338357,1.7025090934338913,1.8305136441875758,1.925040206748668,1.9822784172929802,1.999921004711629,1.9772567966627244,1.9151993869141561,1.816250308397218,1.6843981964647925,1.524958007080981,1.3443567710536262,1.1498745205529095,0.9493508311611518,0.7508688087406756,0.5624292595988298,0.391628178148661,0.2453505525276295,0.12949283086458008,0.04872523557565134,0.00630350679252345,0.003937663544149039,0.04172307292400257,0.11813660584457253,0.23009803433989573,0.37309419549269673,0.5413609169405518,0.7281153705463437,0.9258294880642136,1.12653341741734,1.3221367872745422,1.5047548297550328,1.667026215261197,1.8024097875268552,1.905448237493177,1.9719880873269837,1.9993471170278418,1.9864224846620924,1.9337351818988409,1.8434090328464585,1.7190850827455697,1.565774827509171,1.3896582004237625,1.1978344591635028,0.9980360148574485,0.7983167387527511,0.6067273108279678,0.43099069704643633,0.27819083675344836,0.15448708922593934,0.06486595002362883,0.012940045454349902,0.0008025076806755793,0.028942600604618063,0.0962259976498665,0.199940506442863,0.33590539723283297,0.4986399280229923,0.6815842731699199,0.877363949822757,1.0780870831767138,1.27566252778794,1.4621260214816756,1.6299612246000519,1.7724027035016054,1.8837086450537133,1.9593923090046945,1.9964028883919824,1.9932484875093872,1.9500562601926994,1.8685672842510646,1.7520663786557802,1.605249692554245,1.4340354035924676,1.2453251562941479,1.046725856909519,0.8462430391782059,0.6519581614266153,0.47170284314564104,0.31274317256782136,0.18148681079800355,0.08322469912299835,0.021917781276383552,3.7337876007015325e-5,0.018465369152630973,0.07645904153830296,0.17168063127272815,0.3002917580002963,0.4571081098049793,0.6358084227186578,0.8291892907434011,1.0294555350020949,1.2285344272408574,1.4184011013417053,1.5914020355134866,1.7405635656000418,1.8598729933418188,1.9445209581206528,1.991095302189076,1.9977186146800667,1.9641239100011227,1.8916653900180602,1.7832638562054233,1.6432889721976516,1.4773831227367984,1.2922339692578795,1.095304870391123,0.8945340341275205,0.6980145288141266,0.5136680517337633,0.3489256056476824,0.21042795522403746,0.10375793794920107,0.03321542006110412,0.001643969028372716,0.010316229403405819,0.05888262254596954,0.1453854381311247,0.26633774941287025,0.41686397117101603,0.5908963944520094,0.781419775794953,0.9807541215527471,1.1808642682813288,1.3736837800150972,1.5514401061375724,1.7069678927395588,1.833997817889904,1.9274093078762142,1.98343694742723,1.9998222635263123,1.9759047644130225,1.9126485639926982,1.8126035184243547,1.6798024414704578,1.519598541856169,1.3384496355330224,1.1436578312498247,0.9430751826957184,0.7447871723752213,0.5567867859725195,0.3866523152590917,0.24124187730719782,0.12641696392834278,0.046806165057427074,0.00561859038618262,0.004514510216162559,0.04353842999668067,0.121117296310994,0.23412390662777594,0.37800296677160505,0.5469547147393858,0.734168708989106,0.9320983572006464,1.1327651192596198,1.3280801220474932,1.5101702217541015,1.6716953701443922,1.8061444917553409,1.908097945215203,1.9734459888778222,1.9995544444254811,1.985370880543322,1.9314670364044542,1.8400157748753605,1.7147034944579573,1.560581530640167,1.3838625366651547,1.1916700516043541,0.9917513506414144,0.7921651525673277,0.6009567729878185,0.4258338178150428,0.27385548982854535,0.15114803235410168,0.0626577805198758,0.011951774586698494,0.001073972627808173,0.030462858620026623,0.0989337671636622,0.2037266373207609,0.340617270615754,0.5040876083902104,0.6875481646361685,0.8836036480434939,1.084351066043023,1.2816982942772257,1.467690269968882,1.6348296603413353,1.7763790799506414,1.886632674556247,1.9611461239907144,1.9969157926148893,1.9924998058103474,1.94807617191579,1.8654356067147466,1.74790934971814,1.600234881967646,1.4283649582701858,1.2392276517722787,1.0404470834720645,0.8400360940554976,0.6460732464508449,0.4663771791204062,0.3081914369022205,0.17789248386455148,0.08073266816778302,0.020628500016720563,2.7772133861514448e-6,0.019686922226663794,0.07888746756933496,0.1752180404565642,0.30479555744422926,0.46239675144461856,0.64166872151652,0.8353850181735214,1.035736941417243,1.234648309275314,1.4241010085344834,1.5964582047209768,1.7447721827437968,1.8630644091499886,1.9465665266865093,1.9919125666851047,1.9972746311910057,1.9624365754924327,1.8888027209096445,1.7793412466310494,1.638464542470031,1.4718513455205624,1.2862178303806853,1.0890468802893796,0.888286452255492,0.6920291950707742,0.5081862348012738,0.3441682774555769,0.2065868835754805,0.10098795636462543,0.03162818644210719,0.0013034647300770308,0.011236180147156882,0.06102594513590176,0.1486657352770051,0.2706227924031992,0.42198103000949827,0.5966392006002997,0.7875568368533955,0.9870380527144708,1.1870417644082425,1.3795058263634252,1.5566720161366114,1.7113987682031346,1.8374490503178906,1.9297417781591926,1.9845566337353078,1.9996840313270248,1.9745141858435766,1.9100616932470391,1.8089246322099228,1.6751798356161176,1.5142185535102786,1.3325291319172434,1.1374354677448069,0.9368017826485527,0.7387156164148734,0.551161818396797,0.3817006783973562,0.2371631715410527,0.12337560180469276,0.04492474382193823,0.004972950090788242,0.005130676608106177,0.0453915654211704,0.12413270091656503,0.2381800295157921,0.3829363057105212,0.5525664069363955,0.7402325472454043,0.9383699083186026,1.1389915771406773,1.3340104983004526,1.5155654630321036,1.676337994380963,1.8098473548611815,1.9107117848535238,1.9748654412256914,1.999722291387474,1.984280356211783,1.9291620997931163,1.8365893379324503,1.7102936767872716,1.5553660919028771,1.3780517110910466,1.1854980734547271,0.9854670122308148,0.7860217754498179,0.5952019965708044,0.4206996170192485,0.26954882418418946,0.14784250346626093,0.060486634191173394,0.01100252968167148,0.0013848931893375438,0.03202141144658521,0.10167712702239695,0.2075442194311775,0.3453551883201911,0.5095548763220369,0.6935243973355913,0.8898479436914352,1.0906117172081529,1.2877229342375383,1.4732360456098061,1.6396730215588895,1.7803247909521462,1.8895216838111222,1.9628619755942185,1.997389320623716,1.991711922320012,1.946058636493845,1.8622697461731716,1.7437227798314194,1.5951963632831458,1.4226775933741287,1.233120698228546,1.034166712454437,0.8338354671926187,0.6402023108860935,0.4610725921476052,0.30366702631491105,0.17433062856196058,0.07827694646508754,0.019377902006044945,7.714475279807509e-6,0.020947195740178004,0.08135227573463966,0.17878802690632456,0.3093268160970988,0.4677066273557602,0.647543173695478,0.8415872475718251,1.0420169362932292,1.2407529231629342,1.4297841645712208,1.6014908150018925,1.7489513828503997,1.8662217356104862,1.948574707735276,1.9926906525846557,1.9967912573144462,1.96071122663096,1.8859049458410064,1.775387854609526,1.6336148946479825,1.4663009311036388,1.2801903864618351,1.0827853730110253,0.8820432828491069,0.6860560255689188,0.502723843545608,0.3394368533272838,0.20277715018540665,0.09825348398850364,0.03007920160615818,0.00100240698169074,0.0121951851181068,0.06320635535513452,0.15197965845279682,0.2749366443593477,0.42712091946093833,0.6023979387073477,0.7937022889992744,0.9933224958476317,1.1932118727531469,1.3853128829775359,1.5618819386854077,1.7158015448139872,1.8408672051546398,1.9320375254696116,1.9856374319917651,1.9995063135736721,1.9730851158794303,1.907438876853488,1.8052137950626952,1.6705305614855326,1.5088182545424678,1.3265954940542222,1.1312076758088696,0.9305308788067379,0.7326543806740464,0.5455545790470276,0.3767734631433769,0.23311459632998088,0.12036886462151108,0.04308104618159003,0.004366611407849996,0.005786138382618544,0.04728240600229994,0.12718270055873337,0.24226624279506348,0.3878940174523434,0.5581957718807702,0.7463066458053284,0.9446438937041418,1.145212545127666,1.339927681795324,1.5209403404879076,1.680953904596211,1.813518230588562,1.913289653166658,1.9762463883050139,1.9998506512842051,1.9831509547410826,1.9268204631054164,1.8331298573551886,1.705855803912642,1.5501287172965963,1.3722259532175212,1.179318768495961,0.9791832478445497,0.7798868500514304,0.5894632088790734,0.4155882974497984,0.26527100992544217,0.14457063312442986,0.05835259679349525,0.010092348232542236,0.0017352570845173831,0.03361819752454798,0.10445596886865005,0.2113931019871942,0.35011896320796654,0.5150415158721361,0.6995127352188523,0.8960965901289518,1.0968687893884639,1.2937362097077694,1.4787631293573116,1.6444911169495557,1.7842396806582932,1.8923755587080477,1.964539796042533,1.9978234537150448,1.990884868158243,1.9440037336155496,1.8590698276717217,1.7395068343568991,1.5901343355122357,1.4169735335439255,1.2270045368756108,1.0278849919188322,0.8276414035021408,0.6343455866226693,0.4557892917479004,0.299170119511298,0.17080138557644808,0.07585763101109189,0.018166036640565042,5.2149466676976175e-5,0.02224613991484725,0.08385336867918347,0.18239044961475537,0.3138853549829317,0.47303752780884034,0.6534315472262185,0.8477957339624436,1.0482952715829421,1.2468480277832488,1.4354503449782208,1.6064996675780208,1.753101000849737,1.8693448480152954,1.950545421947787,1.993429529154838,1.9962685121427057,1.9589479315645608,1.8829721792684593,1.7714038362919964,1.6287402202832375,1.460732098716788,1.2741518755734065,1.0765205958729493,0.8758047725011711,0.6800952562369049,0.4972810937207782,0.3347315201446702,0.19899890553058985,0.09555462882711918,0.028568526735084143,0.00074080767441842,0.013193206437409843,0.06542376708186992,0.15532707676510982,0.27927913489272116,0.4322834365098055,0.60817238131411,0.7998558894993111,0.9996072027291938,1.199374349608892,1.3911047204901088,1.5670696680020741,1.7201760486708562,1.8442521473898155,1.9342964591300058,1.9866792995071973,1.9992891172857536,1.9716176109661139,1.9047802184080878,1.8014711535533765,1.6658548027159772,1.503397858253833,1.3206489563113115,1.1249747014277776,0.9242627188585351,0.7266037045596373,0.5399652893980413,0.37187086411247017,0.2290963115848912,0.11739687113895236,0.041275144958815124,0.0037995982865540734,0.006480869650248078,0.049210877055514746,0.13026717476839833,0.2463823850681982,0.3928759061772943,0.5638425872236608,0.752390764754035,0.9509200655469477,1.1514277775045798,1.345831438815098,1.5262946418243222,1.6855429184708401,1.8171569739449742,1.9158314483337364,1.9775887755711186,1.9999395190457094,1.9819827207403393,1.9244422188313592,1.8296374697864466,1.7013900511212414,1.5448696136873252,1.3663854931505621,1.173132380798342,0.9729003056793006,0.7737606186898807,0.5837406365834588,0.410500060993676,0.2610222160174792,0.1413325505610532,0.05625575261720084,0.00922126618969088,0.0021250504746700427,0.035253153784003954,0.10727018294362922,0.21527313296537665,0.3549084071190791,0.5205473103291312,0.7055129417584856,0.9023493405467928,1.1031220354420177,1.2997378831750321,1.4842713029022556,1.6492837562081237,1.7881235944387766,1.8951941865246285,1.9661795190649571,1.998218174741456,1.9900186759920386,1.9419115444454151,1.8558359776008309,1.7352616798161375,1.5850489985952447,1.4112530040789333,1.2208794092894912,1.0216021699808626,0.8214541476374035,0.6285033049898794,0.4505274866014628,0.29470089411011713,0.16730489430611117,0.07347481736400063,0.016992951786557464,0.0001360804324812559,0.023583703444930215,0.0863906476147579,0.1860251662931769,0.3184709940484848,0.4783892422435777,0.6593336095295625,0.8540102321224811,1.0545716993044794,1.2529333823917175,1.4410993259525984,1.6114845646095315,1.7572208728399044,1.872433623007614,1.9524785914847043,1.9941291672114931,1.9957064163231912,1.9571467599399874,1.8800045370305158,1.7673893490392785,1.6238407119157632,1.4551450683176403,1.268102536224927,1.0702527963218733,0.8695711676204668,0.674147122513404,0.49185820030440763,0.3300524637593176,0.19525229884447226,0.09289149747989756,0.027096221497546646,0.0005186771409031454,0.014230204685202641,0.06767809273258418,0.15870785799737985,0.2836500924835591,0.4374683772470116,0.6139623003415593,0.8060173952981599,1.0058919251253622,1.2055289515698668,1.3968811101352618,1.5722349991815951,1.724522106989518,1.8476037433246704,1.936518489916855,1.9876821951299413,1.9990324510420963,1.970111729067162,1.902085822922766,1.7976968555090849,1.6611527439904759,1.4979575787392734,1.3146897535649553,1.118736790791766,0.9179975503841671,0.720563827061458,0.5343941702156909,0.36699307494766054,0.2251084760201303,0.11445973874502458,0.03950711148316155,0.0032719331227948345,0.007214842970489244,0.051176902409997393,0.13338600171494708,0.2505282937556681,0.39788177511038214,0.5695066299270644,0.7584846637806755,0.9571981759506837,1.1576370287819577,1.3517215361727641,1.531628155557066,1.6901048547478241,1.8207634412072755,1.918337069958985,1.9788925500022987,1.9999888911618817,1.9807757003524995,1.9220274609069186,1.8261123131684789,1.6968965948016885,1.5395889887995082,1.360530561576861,1.166939154711912,0.9666184338985911,0.7676433233391532,0.5780345057145237,0.40543510862649423,0.25680261027923157,0.1381283836739099,0.054196184483473964,0.00838931795917719,0.002554257963700457,0.036926215647425376,0.11011965809156432,0.21918415911219802,0.3597233308799952,0.5260720422246647,0.7115247799579111,0.9086059479739478,1.1093712083778877,1.3057277175851316,1.489760348682612,1.6540507500345907,1.7919763788866354,1.897977455930656,1.9677810798956852,1.998573468112247,1.9891133800343175,1.9397821516209142,1.8525683236911596,1.730987483884394,1.5799405533929862,1.4055162309287175,1.214745557401018,1.0153184947995304,0.8152739439827391,0.6226756967463628,0.4452873845391563,0.2902595266372293,0.1638412928556081,0.07112859964022644,0.015858693778588062,0.0002595040575850138,0.024959833499296757,0.08896401232374085,0.18969203337749208,0.3230835521700294,0.4837615592778687,0.6652491274856511,0.8602304965912521,1.060845971551057,1.259008746628796,1.4467308843707098,1.616445309202791,1.7613108360941325,1.8754879385867897,1.954374139989632,1.9947895391203052,1.995104992057583,1.9553077828999468,1.877002136343318,1.7633445514159467,1.6189165630664193,1.4495400605830142,1.2620426073533,1.0639822219234447,0.8633427144224712,0.6682118593378978,0.486455377490127,0.32539986898466966,0.19153747811058475,0.09026419513543538,0.025662344046761487,0.0003360241548664433,0.01530613890209298,0.0699692432658855,0.16212186861539246,0.2880493444874709,0.4426755368775913,0.6197674670993808,0.812186563028565,1.0121764148019567,1.2116754355411703,1.4026418237566451,1.5773777282036354,1.728839548109213,1.850921860577937,1.938703530064352,1.9886460792475358,1.9987363249805057,1.9685675296619198,1.8993557968207027,1.793891050007106,1.6564245710313599,1.4924976308793325,1.3087181211918395,1.1124941902858172,0.9117356208453593,0.7145349867427968,0.5288414415484344,0.36214028831194356,0.22115124714714807,0.11155758345062927,0.037777015588476126,0.0027836367583281563,0.007988029352811954,0.053180404411718674,0.136539058210846,0.2547038051022299,0.40291142652971457,0.5751876762722234,0.7645881021885486,0.9634779769424437,1.16384005370658,1.3575977412211624,1.5369406710226388,1.6946395332396473,1.8243374899271627,1.920806419075229,1.9801576601020519,1.9999987656826221,1.9795299412524958,1.9195762847102404,1.8225545267380403,1.6923756124365938,1.534287051207353,1.3546613897547053,1.16073933485715,0.960337880624008,0.7615352056203892,0.5723450416531172,0.4003936404036397,0.2526123593769838,0.13495825902129488,0.052173973741171165,0.007596536401304754,0.0030228625987788194,0.03863731703209705,0.11300428176363486,0.2231260259498853,0.3645635443106914,0.5316154933429871,0.7175480123614462,0.914866165286383,1.115616061366141,1.3117054763514913,1.4952300498920614,1.6587919101421582,1.7957978818243183,1.9007252569923596,1.9693444152762405,1.998889319794041,1.9881690160424754,1.9376156392488393,1.8492669950087928,1.7266844153839276,1.5748092016787252,1.3997634406845398,1.2086032234851722,1.0090342145679938,0.8091010366442664,0.6168629920708735,0.44006919253471144,0.28584619251783794,0.16041071803038587,0.06881907051084213,0.014763307417557936,0.00042241546700094723,0.026374475723514812,0.09157336116328318,0.1933909060335267,0.32772284716058697,0.48915426671584905,0.6711778674431539,0.8664562816805373,1.067117840501369,1.2650738805295396,1.4523447977971697,1.6213817054182287,1.7653707290668397,1.8785076741134175,1.95623199259213,1.9954106187978582,1.9944642631009448,1.9534310730804516,1.8739650957957377,1.759269603183337,1.6139679682295838,1.443917296899595,1.2559723283138038,1.0577091203530258,0.8571196589185035,0.6622897011418293,0.48107283867901196,0.320773919589074,0.1878545900570434,0.08767282556686717,0.024266951018042215,0.00019285593074891416,0.016420966590794395,0.0722971281858742,0.16556897377256286,0.29247671714272927,0.44790470972878693,0.6255876522945838,0.8183631490206404,1.0184604235342167,1.2178135587488796,1.4083866338175,1.5824976519402298,1.7331282014995812,1.8542063680905043,1.9408514932677063,1.9895709137884716,1.9984007507973967,1.9669850737432855,1.8965902479325598,1.7900538873692753,1.651670470592082,1.4870182303312185,1.3027342950599197,1.1062471464803791,0.9054771775759056,0.7085174217309947,0.5233073227181373,0.3573126958810273,0.21722478126892142,0.10869051988514389,0.03608492561014576,0.0023347284798982404,0.008800398257887032,0.05522130392618041,0.13972621971661991,0.2589087541834699,0.40796466177385604,0.5808855018690776,0.7707008389035044,0.9697592204822063,1.1700366072712682,1.3634598218616392,1.5422319783872191,1.6991467748354236,1.8278789789366083,1.923239398148076,1.9813840559010163,1.9999691422179064,1.9782454926453636,1.9170887870580553,1.8189642510208301,1.6878272825958738,1.5289640103269715,1.3487782095048444,1.154533166114641,0.9540588939252864,0.7554365067922313,0.5666724691217825,0.39537585545328835,0.24845162881733274,0.13182230181701504,0.05018920026375018,0.0068429528293734165,0.0035308458709359947,0.04038639035290781,0.1159239400229275,0.2270985777822324,0.36942885623234023,0.537177444728677,0.7235824010632514,0.921129745217934,1.1218563477470214,1.3176709233641746,1.5006801904881573,1.6635070492644075,1.7995879523100413,1.903437481177001,1.9708694634578925,1.9991657173113153,1.9871856213170151,1.9354120929021705,1.8459321219495448,1.7223526442776407,1.5696551461310453,1.3939948605702024,1.202452650151958,1.0027495775026278,0.8029356694395787,0.6110654205541354,0.43487311669636064,0.28146106606988586,0.157013305331282,0.06654632119766568,0.013706835969135578,0.0006248082260427168,0.0278275742420242,0.0942185910693778,0.1971216381631482,0.3323886957771254,0.49456715155598086,0.6771195952286044,0.8726873414844025,1.0733870584289207,1.2711285445330824,1.4579408444932302,1.6262935582777192,1.7694003914004541,1.881492710313934,1.9580520759106732,1.9959923817127376,1.9937842547608342,1.951516704607747,1.87089353534485,1.7551646652939668,1.608995122864936,1.4382769993556983,1.2498919388705272,1.0514337393856836,0.8509022469070233,0.6563808818386977,0.4757107964706667,0.316174798288438,0.1842037801506209,0.08511749112819866,0.022910097526670503,8.917812341024955e-5,0.017574643717804705,0.07466165554558779,0.16904903731501564,0.2969320355768984,0.45315568925864425,0.63142262604161,0.8245469093111577,1.02474370311615,1.2239430787493049,1.4141153134091216,1.5875945681647343,1.7373878977670891,1.8574571361306633,1.942962294686632,1.9904566622236182,1.9980257417472727,1.9653644238151284,1.8937892854921827,1.7861855191559044,1.6468906304501765,1.4815195935202834,1.2967385115184575,1.0999959061216278,0.8992224677723519,0.7025113697079319,0.5177920323113148,0.3525104883352349,0.21332923347306232,0.1058586612920982,0.03443090838236862,0.0019252260184765557,0.009651917598739734,0.05729952034189956,0.1429473603454806,0.26314297491201344,0.4130412812502231,0.5865998816648199,0.7768226324845692,0.9760416584731991,1.1762264447241135,1.36930754655385,1.5475018686546633,1.7036264015079705,1.8313877683537596,1.9256359110795478,1.9825716889589686,1.9999000219378023,1.976922405264274,1.914565066201632,1.815341627825617,1.6832517849296158,1.523620076407918,1.3428812532012262,1.148320893615963,0.947781721809944,0.7493474677412943,0.5610170121761889,0.39038195196799175,0.24432058294095627,0.12872063592515737,0.04824194244575308,0.006128597008480119,0.0040781877158413415,0.04217336652489989,0.1188785175486805,0.23110165770146618,0.3743190744745092,0.5427576766953873,0.7296277077168356,0.9273964403696199,1.1280918210418227,1.3236238229998598,1.5061105552008625,1.668195981162357,1.8033464406435387,1.9061140213571544,1.9723561642042642,1.9994026497469015,1.9861632347001499,1.9331715996166159,1.8425638362343446,1.7179923416618992,1.564478590324916,1.3882107184335926,1.1962940803371533,0.9964648318342416,0.7967780858885609,0.6052832111887213,0.4296993622591667,0.2771043204974063,0.15364918894942137,0.06431044146978693,0.01268932116184629,0.0008666743405921773,0.029319071660237284,0.0968995975605006,0.20088408240983946,0.33708091372779625,0.4999999999999525,0.683074076155221,0.8789234298878964,1.0796533777120414,1.2771724994922073,1.4635188034260485,1.6311806737728203,1.7733996639310154,1.8844429292851692,1.9598343180555797,1.996534804886443,1.9930649938962328,1.9495647530957279,1.867787576311366,1.7510298998847384,1.603998223390092,1.432619390731888,1.2438016791869004,1.0451563268868571,0.8446907239638077,0.6504856348152501,0.47036946265521795,0.31160268673901215,0.18058519259126393,0.08259829275020925,0.02159183716569202,2.4994827919178064e-5,0.01876712471514519,0.07706273195088553,0.17256192178695573,0.30141512381341584,0.4584282680638899,0.6372721578703615,0.8307375996538531,1.0310260053703375,1.2300637534381234,1.4198276362600306,1.5926682755589758,1.7416184686621854,1.8606740362995269,1.9450358509485084,1.9913032895676213,1.9976113126422521,1.9637056438899356,1.8909530201320313,1.7822860981601436,1.6420852394001064,1.4760019376318714,1.2907310073890075,1.0937407161211556,0.8929717384831004,0.6965170679010738,0.5122957881713959,0.3477338553522381,0.20946475762605066,0.10306211952418476,0.03281502923563362,0.001555145548628456,0.010542553742046379,0.05941497157341313,0.14620235286893846,0.267406300044541,0.4181410844420509,0.5923305899524751,0.7829532411329307,0.9823250427718125,1.1824093215788165,1.3751406843238478,1.552750133674474,1.7080782363208402,1.834863719588522,1.9279958632121383,1.9837205123667374,1.9997914075724266,1.9755607313686254,1.9120052218228456,1.811686800238896,1.6786493001608997,1.5182554605252707,1.3369707537622462,1.14210276273333,0.94150661221394,0.7432683289725412,0.5553788941956657,0.38541212719730134,0.240219384916046,0.12565338385542768,0.04633227720003774,0.005453497154261577,0.004664866514548227,0.043998174966027315,0.12186789764088968,0.2351351075938004,0.3792340058832784,0.5483559688350254,0.7356836935444694,0.9336660032190744,1.1343222349616073,1.329563940130713,1.511520929541545,1.6728585206326692,1.8070731983717734,1.9087547718147424,1.9738044587935988,1.9996001077424397,1.9851018965740863,1.9308942478873368,1.8391622709039779,1.7136036797600849,1.5592797387241162,1.3824112427365365,1.1901277572920486,0.9901802257981623,0.7906285292036588,0.5995165923605346,0.42454813357588483,0.27277612788320527,0.15031850176090944,0.062111519640180246,0.011710803185524643,0.0011480042574272264,0.030848909066964025,0.09961627474221324,0.2046780901642784,0.34179931567925737,0.5054525974612254,0.6890410750328191,0.8851643005778985,1.0859165508431545,1.283205506682356,1.469078454277514,1.6360428588720763,1.777368388695229,1.8873582144993013,1.9615786486317242,1.9970378668943534,1.9923065089165306,1.9475752956425891,1.8646473413745357,1.7468654702709068,1.598977467172713,1.4269446944925834,1.2377017898161538,1.0388771308018865,0.83848533543169,0.644604192922102,0.46504904820485127,0.30705776553017394,0.17699897030600142,0.08011532993623627,0.020312222003788127,3.0857939203876583e-7,0.019998362482171905,0.07950026256396947,0.1761074884364472,0.3059258047793517,0.463722237887787,0.643136016735883,0.8369349755286277,1.0373070821583603,1.2361753410610492,1.4255233767444462,1.5977185737213029,1.745819747085637,1.8638569415358905,1.9470720801520716,1.9921107623803744,1.9971574798514844,1.9620087994862532,1.888081563878986,1.7783557784012105,1.6372544872453294,1.4704654806027426,1.284712019956445,1.0874818235466146,0.8867252365997271,0.6905347530734496,0.5068188073891196,0.3429829855998654,0.2056315063670512,0.10030100503933304,0.03123735199396027,0.001224501687797197,0.011472271509389231,0.06156757406459512,0.14949106872098172,0.27169856118809077,0.4232638699172766,0.5980774003803822,0.7890924227017102,0.9886091251963206,1.1885849936238957,1.3809590047743152,1.5579765661505487,1.712502103435389,1.838306695347465,1.9303191613323782,1.9848304807480666,1.9996433034118328,1.9741605247418361,1.9094093550306548,1.8079999126191724,1.674020010079035,1.5128703745707144,1.3310469446409066,1.135879019071026,0.935233812991711,0.737199330600278,0.5497583378747894,0.3804665774393907,0.2361481967318616,0.12262066675822558,0.044460279954713244,0.004817679931834906,0.0052908590944128475,0.04586074359994374,0.12489196222494536,0.2391987681457476,0.38417345632851907,0.5539721000261075,0.7417501193466725,0.9399381861309464,1.1405473434170477,1.3354910401337852,1.5169110998111024,1.6774944835141574,1.8107680782951765,1.9113596282452177,1.9752142900211198,1.9997580834987279,1.9840016488596026,1.92858012766521,1.8357275603135284,1.7091868319156758,1.5540587966729689,1.3765966625472903,1.1839539245742823,0.9838960076238603,0.784487242280217,0.5937657918395789,0.4194196341102483,0.2684766591823827,0.14702137532125226,0.05994964256179558,0.010771320689690445,0.001468786864555205,0.0324170260366341,0.10236851531113234,0.20850351157075342,0.34654371526382155,0.5109247285726234,0.6950203561766732,0.8914097070523412,1.0921763304395165,1.289227327811659,1.474619577452045,1.640879921528778,1.7813064089361972,1.890238450808374,1.963284998741495,1.9975015478664802,1.991508829780386,1.9455484108280252,1.8614729545673798,1.742671540939181,1.593933052522936,1.4212531347770787,1.2315925116919813,1.0325963991466736,0.8322863264113186,0.6387367884648059,0.45974976326543093,0.3025402141774183,0.17344525494356378,0.07766870075842969,0.019071302583265393,1.5120352885311661e-5,0.021268308387403012,0.08197415110719464,0.1796855972204806,0.3104639003116352,0.46903738962912533,0.6490139710272238,0.8431387921513733,1.043586685389862,1.2422776002223295,1.4312023098920732,1.6027452631749575,1.7499915670952415,1.8670057261211968,1.949070901870196,1.9928790487683101,1.9966642613004657,1.960273957626083,1.8851750301499761,1.774394715119151,1.6323985647909274,1.4649104411119167,1.2786817869587241,1.0812194756120712,0.8804832088468338,0.684564661514735,0.501361306294411,0.3382580667279603,0.20182963110202257,0.09757542689616261,0.029697938972498283,0.0009333074957630361,0.012441034178785837,0.06375724279178119,0.15281337800394756,0.2760195888068243,0.42840943533585174,0.6038400859609825,0.7952399347050262,0.9948936575381051,1.1947532169325012,1.3867622780929274,1.5631809596492203,1.7168978281174017,1.8417165596398775,1.932605713674579,1.9859015502613762,1.999455715305844,1.9727218406893154,1.906777568356649,1.8042811105912253,1.669364097531671,1.5074650312445583,1.3251100598160226,1.129649908454522,0.9289635719066089,0.7311407123377349,0.5441555652144355,0.37554549803388726,0.23210717919229684,0.11962260441996986,0.042626024649905614,0.004221170454725254,0.005956140729941217,0.047760998858866976,0.12795059185621427,0.24329247885077676,0.38913723071169337,0.5596058484423903,0.7478267455114413,0.9462127413665106,1.1467669005287096,1.3414048889002772,1.5222808531083079,1.6821036866953172,1.814430934473354,1.913928487761943,1.9765856022012271,1.9998765707760318,1.9828625350143296,1.9262293303534346,1.8322598401272807,1.704741972585599,1.5488159703886586,1.3707672075300785,1.1777728260381102,0.9776124255255434,0.7783544676871077,0.5880310367714301,0.4143140664276722,0.2642060842154619,0.143757939860522,0.05782489562460691,0.009870910782097564,0.0018290094916982857,0.03402336063172451,0.10515621055911595,0.21236019553260477,0.3513139250871177,0.516416177195823,0.7010116834169864,0.8976594026298896,1.098432469251912,1.295237725030183,1.4801419540862693,1.6456916706883713,1.7852135691099327,1.8930835244486108,1.9649533009874631,1.9979258294883493,1.9906719879945713,1.9434841787099653,1.8582645412720227,1.738448277541525,1.5888651786850414,1.4155449363908972,1.2254740861189146,1.0263143799977719,0.826093941751364,0.6328836531940913,0.45447181714834306,0.29805021111518326,0.16992418686872202,0.07525850185381111,0.01786912791798989,6.942956336408734e-5,0.022576912270459548,0.08448429986675898,0.18329610681092212,0.31502923116433157,0.4743735133498601,0.654905788576744,0.8493488044833604,1.0498645670330868,1.248370289894668,1.4368642113960615,1.6077481453756333,1.7541337639121974,1.8701202656846732,1.951032237153389,1.9936081183856051,1.996131676470354,1.9585011868323003,1.8822335337473444,1.770403064768106,1.6275176638363793,1.4593370385726336,1.2726405465782484,1.0749539196679017,0.8742459017723025,0.678607029031757,0.49592350044793376,0.3335592853615731,0.19805928199749534,0.0948854927496765,0.028196850975022447,0.0006815744741272001,0.013448803485979988,0.06598389126745918,0.1561691494930606,0.2803692122285669,0.4335775774581504,0.6096184190793155,0.8013955343285171,1.0011783915703787,1.2009137478718264,1.3925502750618484,1.5683631086070347,1.721265236744475,1.8450931777828532,1.9348554299243765,1.9869336786015082,1.999228650663822,1.9712447360362553,1.9041099657512042,1.800530541040458,1.6646817464183683,1.5020396440472386,1.3191603337828206,1.123415676921555,0.9226961366207169,0.7250927134886429,0.538570797513262,0.3706490833535757,0.22809649190967396,0.11665931525817486,0.04082958373514389,0.0036639922838999084,0.006660685143840772,0.049698865686433114,0.1310436657248104,0.24741607801536258,0.3941251329733362,0.5652569915619368,0.7539133320240976,0.9524894210929995,1.1529806606363138,1.3473052528448415,1.5276299773385102,1.6866859481217673,1.8180616222306203,1.9164612488999477,1.9779183411698351,1.9999555648943383,1.9816846000310362,1.9238419488038616,1.8287592473134597,1.7002692773329002,1.5435514669522805,1.3649231079370727,1.171584705824718,0.9713297276924656,0.772230447656816,0.5823125536673804,0.40923163218818237,0.2599645716618364,0.14052832427797446,0.05573736275192176,0.009009609027125998,0.002228657910774756,0.035667849405147445,0.10797925037770673,0.21624798971843262,0.35610975673514855,0.5219267264294485,0.7070148201080562,0.9039131404597409,1.1046847201753833,1.3012364609388896,1.4856453660572158,1.6504779162963108,1.7890897148911835,1.8958933230452986,1.966583489474938,1.9983106950016634,1.9897960166126767,1.9413826808215577,1.855022228214454,1.7341958468885026,1.5837740458302203,1.4098203247965508,1.2193467547626813,1.020031321482589,0.8199084260387913,0.627045018297402,0.4492154183221312,0.2935879336897227,0.16643590515671192,0.07288482842054267,0.01670574549148718,0.00016323406572016363,0.023924122444071938,0.08703060969681187,0.18693887459964287,0.3196216170159293,0.47973039828354613,0.6608112366691257,0.8555647672415339,1.0561404791239373,1.2544531694287446,1.4425088576224836,1.6127270227191821,1.7582461739280228,1.8732004372081574,1.952956008532727,1.9942979424354497,1.9955597463972135,1.9566905571258506,1.8792571908543896,1.7663809850104535,1.6226119771677667,1.4537454931232876,1.2665885374321375,1.0686854031911923,0.8680135617373885,0.6726620909394483,0.4905056046322799,0.32888682709328887,0.19432060797491568,0.09223130884693709,0.026734147291584964,0.00046931256585269754,0.014495539626101617,0.0682474315433318,0.15955825064200424,0.2847472596517828,0.4387680921525776,0.6154121715027908,0.8075589784379872,1.0074630790584451,1.2070663431130648,1.3983227670666287,1.5735228083393418,1.7256041568125928,1.8484364164065528,1.9370682212224226,1.987926825001459,1.998962118454373,1.9697292691253723,1.9014066525794027,1.796748352107063,1.6599731416826229,1.4965944272708345,1.3131980015438904,1.1171765707119026,0.9164317546855787,0.7190555729368486,0.5330042553584124,0.36577752679734366,0.22411629329818372,0.11373091631699106,0.03907102816629615,0.003146167426781421,0.0074044645079802685,0.05167426754069393,0.13417106166042403,0.25156940276544404,0.39913696610129357,0.5709253061757539,0.760009638476329,0.9587679773939595,1.159188378308607,1.3531918989145948,1.5329582612218662,1.691241086803147,1.8216599981618813,1.9189578116202377,1.9792124542863379,1.9999950627335357,1.980467890435817,1.9214180773134348,1.8252259201384737,1.695768922820329,1.538265494301514,1.359064594598613,1.1653898083528011,0.9650481622787843,0.7661154240760392,0.5766105683964264,0.40417253213784843,0.25575228905287517,0.13733265613707613,0.05368712639716644,0.008187449444518546,0.0026677163364503542,0.037350427402843445,0.11083752326240726,0.22016674056793883,0.3609310207820784,0.5274561586174882,0.7130295291376754,0.9101706735317705,1.1109328362581392,1.3072232985996108,1.4911295959908801,1.6552384693051736,1.7929346931799515,1.8986677356168642,1.968175499814665,1.9986561292049947,1.9888809502338742,1.939244000167819,1.851746143459636,1.729914416942842,1.5786598550481665,1.404079526105048,1.2132107596408246,1.013747471769528,0.8137300235893679,0.6212211143894438,0.44398077440416817,0.2891535581522229,0.16298054758786717,0.07054777421401603,0.015581201255107313,0.0002965301548606414,0.025309885696099266,0.08961298002305185,0.19061375670454217,0.32424087647613165,0.48510783284366166,0.6667300820509916,0.8617864349074156,1.0624141737761659,1.2605259985628305,1.4481360256189093,1.6176816985499167,1.7623286347105314,1.8762461190308732,1.9548421400230405,1.994948493671156,1.9949484936711526,1.9548421400230311,1.8762461190308581,1.762328634710511,1.617681698549892,1.4481360256189322,1.2605259985628003,1.0624141737760777,0.8617864349074409,0.6667300820509621,0.4851078328436348,0.32424087647610855,0.19061375670449032,0.0896129800230624,0.02530988569609227,0.0002965301548598642,0.015581201255102872,0.07054777421404856,0.16298054758788427,0.289153558152205,0.44398077440419426,0.6212211143894728,0.8137300235894545,1.0137474717695594,1.2132107596407997,1.4040795261050767,1.578659855048192,1.7299144169428633,1.8517461434596525,1.93924400016783,1.9888809502338707,1.9986561292049931,1.968175499814643,1.8986677356168504,1.7929346931799324,1.6552384693051927,1.4911295959908033,1.307223298599527,1.1109328362581645,0.9101706735317392,0.7130295291376454,0.5274561586175106,0.36093102078201056,0.2201667405679193,0.11083752326239282,0.037350427402834896,0.0026677163364480228,0.00818744944452987,0.053687126397176654,0.13733265613706325,0.25575228905289604,0.40417253213791926,0.5766105683964549,0.7661154240760697,0.9650481622788156,1.165389808352832,1.3590645945986952,1.5382654943014924,1.6957689228203514,1.8252259201384913,1.921418077313425,1.9804678904358344,1.9999950627335354,1.979212454286343,1.9189578116202255,1.8216599981618633,1.6912410868030834,1.5329582612218398,1.3531918989146186,1.1591883783085761,0.9587679773939282,0.7600096384762985,0.5709253061757256,0.3991369661012685,0.2515694027654609,0.13417106166040838,0.05167426754066595,0.007404464507976494,0.0031461674267838635,0.03907102816630481,0.11373091631700549,0.22411629329823946,0.365777526797324,0.5330042553584402,0.7190555729368786,0.9164317546855533,1.11717657071199,1.3131980015439202,1.4965944272708618,1.6599731416826464,1.7967483521070822,1.9014066525794409,1.9697292691253798,1.9989621184543718,1.9879268250014541,1.9370682212224115,1.848436416406536,1.7256041568125713,1.573522808339316,1.3983227670665999,1.2070663431130342,1.007463079058357,0.8075589784379564,0.6154121715027618,0.4387680921525987,0.28474725965176084,0.1595582506419565,0.06824743154334101,0.014495539626096288,0.0004693125658535857,0.02673414729159218,0.09223130884697406,0.19432060797493433,0.3288868270933121,0.49050560463230686,0.6726620909394241,0.868013561737476,1.0686854031912234,1.2665885374321129,1.4537454931233156,1.6226119771677912,1.76638098501051,1.8792571908544042,1.9566905571258597,1.9955597463972166,1.9942979424354463,1.9529560085327176,1.873200437208142,1.7582461739280024,1.612727022719202,1.4425088576224554,1.2544531694286594,1.056140479123906,0.8555647672415028,0.6608112366690961,0.47973039828347086,0.31962161701586467,0.18693887459965775,0.0870306096967991,0.023924122444065055,0.00016323406571960852,0.016705745491503277,0.07288482842055444,0.16643590515672924,0.2935879336897449,0.4492154183222048,0.6270450182974838,0.8199084260388221,1.0200313214825636,1.2193467547627117,1.4098203247966314,1.5837740458301997,1.734195846888524,1.8550222282144704,1.9413826808215684,1.9897960166126893,1.998310695001658,1.96658348947493,1.8958933230452844,1.7890897148911993,1.6504779162962437,1.4856453660571884,1.3012364609389138,1.104684720175352,0.9039131404597097,0.7070148201079718,0.521926726429421,0.35610975673512457,0.21624798971841308,0.10797925037769251,0.03566784940513912,0.0022286579107726467,0.009009609027130216,0.05573736275191332,0.14052832427799045,0.2599645716618957,0.40923163218816183,0.582312553667409,0.7722304476568465,0.9713297276924969,1.1715847058248048,1.364923107937049,1.543551466952307,1.7002692773329224,1.8287592473134455,1.9238419488038954,1.9816846000310422,1.9999555648943388,1.9779183411698287,1.9164612488999353,1.8180616222305694,1.6866859481217444,1.527629977338532,1.3473052528448122,1.152980660636283,0.9524894210929682,0.7539133320240672,0.5652569915619085,0.3941251329733564,0.24741607801534193,0.13104366572476678,0.049698865686423344,0.006660685143837108,0.003663992283897799,0.040829583735152775,0.11665931525821627,0.22809649190965775,0.37064908335360003,0.5385707975132898,0.7250927134886185,0.9226961366208049,1.1234156769215862,1.3191603337828504,1.5020396440472656,1.6646817464183494,1.8005305410405108,1.9041099657512175,1.9712447360362493,1.9992286506638233,1.986933678601503,1.9348554299243652,1.8450931777828365,1.7212652367444532,1.568363108607009,1.3925502750618197,1.2009137478717957,1.0011783915703474,0.8013955343284863,0.609618419079339,0.4335775774580777,0.28036921222850564,0.15616914949307426,0.06598389126744797,0.01344880348597488,0.0006815744741304197,0.02819685097504321,0.09488549274966573,0.1980592819975141,0.3335592853615965,0.49592350044796085,0.6786070290318404,0.8742459017723336,1.0749539196678763,1.2726405465782786,1.459337038572712,1.6275176638364037,1.770403064768126,1.8822335337473324,1.9585011868323092,1.996131676470362,1.993608118385608,1.9510322371533793,1.8701202656846578,1.7541337639122143,1.607748145375563,1.4368642113960335,1.2483702898946376,1.0498645670330555,0.8493488044833855,0.6549057885766613,0.47437351334983346,0.3150292311643501,0.18329610681090402,0.08448429986674633,0.022576912270452887,6.942956336364325e-5,0.017869127917995775,0.07525850185382299,0.16992418686873945,0.2980502111152056,0.45447181714836926,0.6328836531941205,0.8260939417513389,1.0263143799978032,1.2254740861190005,1.415544936390874,1.588865178685067,1.7384482775415462,1.8582645412720389,1.9434841787099946,1.9906719879945678,1.9979258294883473,1.964953300987455,1.8930835244486222,1.785213569109878,1.6456916706883473,1.4801419540862917,1.295237725030153,1.098432469251881,0.8976594026298019,0.7010116834169564,0.5164161771958453,0.3513139250870938,0.21236019553258545,0.10515621055910196,0.034023360631716404,0.0018290094916963984,0.009870910782094011,0.057824895624617456,0.14375793986056762,0.2642060842154832,0.41431406642769764,0.588031036771407,0.7783544676871383,0.9776124255256315,1.177772826038085,1.3707672075301076,1.5488159703886848,1.704741972585581,1.8322598401273296,1.9262293303534463,1.9828625350143354,1.9998765707760313,1.9765856022012325,1.9139284877619072,1.8144309344733358,1.6821036866953358,1.522280853108281,1.3414048889002477,1.1467669005286787,0.9462127413664793,0.7478267455114109,0.559605848442362,0.38913723071162354,0.24329247885075633,0.12795059185619895,0.04776099885885743,0.005956140729943993,0.004221170454733247,0.04262602464993104,0.11962260441995776,0.23210717919231694,0.3755454980339118,0.544155565214514,0.73114071233782,0.9289635719065835,1.129649908454553,1.3251100598160523,1.5074650312445854,1.6693640975317363,1.8042811105912437,1.9067775683566384,1.9727218406893225,1.9994557153058472,1.985901550261371,1.9326057136745676,1.8417165596398606,1.7168978281173797,1.5631809596491473,1.386762278092951,1.1947532169324706,0.9948936575380737,0.7952399347050512,0.6038400859609016,0.428409435335826,0.27601958880680266,0.1528133780039309,0.06375724279177009,0.01244103417877196,0.0009333074957643683,0.029697938972492066,0.09757542689617615,0.20182963110204144,0.33825806672798375,0.5013613062944382,0.6845646615147648,0.8804832088468649,1.0812194756121025,1.2786817869588087,1.4649104411119445,1.6323985647909516,1.7743947151191348,1.8851750301499908,1.9602739576261077,1.9966642613004635,1.9928790487683066,1.949070901870186,1.8670057261211812,1.7499915670951833,1.6027452631749326,1.4312023098920448,1.242277600222299,1.0435866853898876,0.8431387921512862,0.6490139710271945,0.4690373896291469,0.31046390031161253,0.17968559722046262,0.08197415110715967,0.021268308387396573,1.5120352885200639e-5,0.0190713025832715,0.07766870075844179,0.17344525494358143,0.3025402141774407,0.45974976326545736,0.6387367884647821,0.8322863264113496,1.0325963991467617,1.231592511692012,1.4212531347771071,1.5939330525229614,1.742671540939202,1.8614729545674245,1.945548410828017,1.9915088297803902,1.997501547866478,1.963284998741502,1.8902384508083339,1.7813064089361776,1.640879921528754,1.4746195774520172,1.289227327811629,1.0921763304394285,0.89140970705231,0.6950203561766974,0.5109247285725961,0.3465437152637978,0.20850351157073432,0.10236851531111846,0.032417026036626106,0.0014687868645534286,0.010771320689703323,0.05994964256182567,0.14702137532126858,0.26847665918240404,0.41941963411022753,0.5937657918396595,0.7844872422803031,0.9838960076238349,1.1839539245743131,1.3765966625473194,1.5540587966730424,1.709186831915738,1.8357275603135457,1.9285801276652215,1.984001648859608,1.9997580834987272,1.9752142900211127,1.9113596282452048,1.8107680782951914,1.6774944835141343,1.516911099811027,1.3354910401338091,1.1405473434170166,0.9399381861309151,0.7417501193466423,0.5539721000260285,0.38417345632853905,0.23919876814572727,0.12489196222493015,0.045860743599951403,0.005290859094403744,0.004817679931838015,0.044460279954705695,0.12262066675824068,0.2361481967318818,0.38046657743946,0.5497583378748174,0.7371993306002533,0.9352338129917424,1.135879019071057,1.331046944640936,1.5128703745707412,1.6740200100790583,1.8079999126191573,1.9094093550306679,1.9741605247418559,1.9996433034118337,1.984830480748061,1.9303191613323876,1.8383066953474478,1.7125021034353267,1.55797656615057,1.3809590047742863,1.188584993623865,0.9886091251963461,0.789092422701624,0.5980774003803535,0.42326386991725107,0.27169856118806923,0.14949106872099516,0.0615675740645647,0.011472271509384568,0.0012245016877959758,0.031237351993968043,0.10030100503934669,0.20563150636707017,0.34298298559988905,0.5068188073891469,0.6905347530734794,0.8867252365997583,1.087481823546646,1.284712019956475,1.4704654806027704,1.6372544872453096,1.7783557784012303,1.8880815638790267,1.962008799486246,1.9971574798514866,1.9921107623803707,1.9470720801520616,1.8638569415358461,1.7458197470856538,1.5977185737212776,1.4255233767444178,1.2361753410610739,1.0373070821582722,0.8369349755285967,0.6431360167359068,0.46372223788776057,0.3059258047793292,0.17610748843639723,0.07950026256395726,0.019998362482177012,3.0857939203876583e-7,0.02031222200380578,0.08011532993624848,0.1769989703060192,0.3070577655301966,0.46504904820482973,0.6446041929221844,0.838485335431777,1.0388771308019178,1.2377017898161842,1.4269446944925603,1.5989774671727837,1.7468654702709654,1.8646473413745228,1.9475752956425991,1.9923065089165344,1.9970378668943511,1.9615786486317157,1.887358214499287,1.7773683886952094,1.6360428588720521,1.4690784542774862,1.283205506682326,1.0859165508431232,0.8851643005779238,0.6890410750327893,0.5054525974611488,0.34179931567927646,0.20467809016425942,0.09961627474219958,0.030848909066956254,0.0011480042574230076,0.011710803185511987,0.062111519640171475,0.15031850176092598,0.2727761278832268,0.424548133575957,0.5995165923605111,0.7906285292036339,0.9901802257981936,1.1901277572921352,1.382411242736618,1.5592797387240949,1.7136036797600671,1.839162270903995,1.9308942478873692,1.9851018965740819,1.9996001077424403,1.9738044587935917,1.9087547718147295,1.8070731983717212,1.672858520632646,1.5115209295415668,1.3295639401306834,1.1343222349615762,0.9336660032189865,0.7356836935444391,0.5483559688350481,0.37923400588325384,0.23513510759374368,0.12186789764090189,0.0439981749660181,0.0046648665145452295,0.005453497154264908,0.046332277200064276,0.12565338385541525,0.24021938491606643,0.3854121271973261,0.5553788941956936,0.7432683289726265,0.9415066122139714,1.142102762733361,1.3369707537622757,1.518255460525346,1.6786493001609646,1.8116868002389144,1.9120052218228818,1.975560731368632,1.9997914075724283,1.9837205123667419,1.9279958632121268,1.8348637195884734,1.7080782363208984,1.5527501336744005,1.3751406843238185,1.1824093215787856,0.9823250427717244,0.7829532411329556,0.5923305899523945,0.41814108444202536,0.2674063000445197,0.1462023528688925,0.05941497157342168,0.0105425537420335,0.0015551455486301213,0.032815029235656046,0.10306211952417355,0.209464757626035,0.347733855352348,0.5122957881714232,0.6965170679011579,0.8929717384830751,1.0937407161211303,1.2907310073891463,1.476001937631899,1.6420852394001741,1.7822860981601631,1.8909530201320197,1.963705643889944,1.9976113126422579,1.9913032895676097,1.9450358509484982,1.8606740362995398,1.7416184686621645,1.5926682755589048,1.4198276362599507,1.2300637534381482,1.031026005370306,0.8307375996538222,0.6372721578703853,0.4584282680637679,0.30141512381343416,0.1725619217869382,0.07706273195087343,0.018767124715150074,2.4994827920177265e-5,0.0215918371656868,0.08259829275022168,0.18058519259131456,0.3116026867389937,0.4703694626552445,0.6504856348152794,0.8446907239638387,1.0451563268869453,1.2438016791868758,1.4326193907319165,1.603998223390117,1.751029899884759,1.86778757631141,1.9495647530957378,1.9930649938962364,1.99653480488645,1.959834318055555,1.8844429292851281,1.7733996639309955,1.6311806737727959,1.4635188034261213,1.2771724994921225,1.0796533777119535,0.8789234298878653,0.6830740761551373,0.5000000000000238,0.33708091372781535,0.2008840824097523,0.09689959756048716,0.02931907166021619,0.000866674340595508,0.012689321161842182,0.06431044146983811,0.15364918894943802,0.27710432049746725,0.42969936225914573,0.6052832111886979,0.7967780858885917,0.9964648318343298,1.19629408033724,1.3882107184335692,1.564478590324895,1.7179923416619212,1.8425638362343921,1.9331715996166476,1.9861632347001454,1.9994026497469006,1.9723561642042569,1.9061140213571652,1.8033464406434523,1.6681959811623759,1.5061105552008356,1.32362382299983,1.1280918210418478,0.9273964403694752,0.7296277077168054,0.5427576766953595,0.37431907447448476,0.2311016577014825,0.11887851754866574,0.0421733665248909,0.004078187715838455,0.006128597008489889,0.04824194244574531,0.1287206359251728,0.2443205829409768,0.3903819519680617,0.5610170121762681,0.7493474677412697,0.9477817218099753,1.1483208936158815,1.342881253201309,1.5236200764079932,1.6832517849296387,1.8153416278256351,1.9145650662015987,1.9769224052642929,1.9999000219378034,1.9825716889589626,1.925635911079536,1.8313877683537738,1.7036264015079885,1.5475018686545894,1.369307546553821,1.1762264447240827,0.9760416584732247,0.776822632484594,0.5865998816647138,0.4130412812501977,0.263142974911973,0.1429473603454937,0.05729952034189856,0.009651917598735293,0.001925226018478443,0.03443090838238416,0.10585866129209942,0.2133292334730641,0.3525104883352588,0.5177920323113422,0.7025113697080161,0.8992224677723548,1.0999959061216307,1.2967385115185146,1.481519593520236,1.6468906304502438,1.7861855191559588,1.8937892854921965,1.9653644238151442,1.9980257417472693,1.9904566622236062,1.942962294686593,1.8574571361306473,1.7373878977670487,1.587594568164755,1.414115313409119,1.2239430787491914,1.0247437031161186,0.8245469093110709,0.6314226260416338,0.4531556892586418,0.29693203557681547,0.16904903731498233,0.07466165554555426,0.01757464371780937,8.917812341058262e-5,0.022910097526677276,0.08511749112822276,0.18420378015067185,0.3161747982884402,0.47571079647069336,0.6563808818387271,0.8509022469070824,1.0514337393858,1.2498919388705299,1.4382769993557265,1.6089951228649835,1.7551646652939503,1.8708935353449072,1.951516704607748,1.9937842547608409,1.9959923817127323,1.9580520759106803,1.8814927103138657,1.769400391400434,1.6262935582776725,1.457940844493177,1.2711285445330796,1.0733870584288894,0.8726873414843714,0.6771195952285479,0.4945671515559048,0.33238869577712316,0.19712163816314643,0.09421859106935249,0.02782757424200355,0.0006248082260396082,0.013706835969136133,0.0665463211976769,0.15701330533125302,0.28146106606994725,0.43487311669643347,0.6110654205541642,0.8029356694396095,1.0027495775025739,1.202452650152072,1.3939948605703094,1.569655146131071,1.7223526442776622,1.8459321219495313,1.9354120929021716,1.9871856213170338,1.999165717311314,1.970869463457878,1.9034374811770118,1.7995879523100395,1.663507049264299,1.5006801904881053,1.317670923364118,1.1218563477470465,0.9211297452179028,0.7235824010632214,0.5371774447286239,0.36942885623229393,0.22709857778223053,0.11592394002291284,0.04038639035289904,0.003530845870938104,0.006842952829383742,0.05018920026375118,0.13182230181703058,0.24845162881737215,0.39537585545326803,0.566672469121862,0.7554365067922342,0.954058893925346,1.1545331661147,1.3487782095048204,1.5289640103269742,1.6878272825958964,1.818964251020848,1.917088787058079,1.9782454926453643,1.9999691422179064,1.9813840559010103,1.923239398148064,1.8278789789365588,1.6991467748354216,1.5422319783872167,1.3634598218616893,1.1700366072712094,0.9697592204821182,0.7707008389035015,0.5808855018690491,0.40796466177389956,0.25890875418342973,0.13972621971657495,0.055221303926170084,0.008800398257882924,0.0023347284798945767,0.036084925610138985,0.10869051988519685,0.21722478126894096,0.3573126958810513,0.5233073227181149,0.7085174217309703,0.9054771775760216,1.1062471464804104,1.3027342950599767,1.4870182303311963,1.6516704705920624,1.7900538873692946,1.8965902479325862,1.9669850737433006,1.998400750797395,1.9895709137884712,1.940851493267696,1.8542063680904732,1.7331282014995404,1.5824976519402276,1.4083866338174973,1.217813558748849,1.0184604235342423,0.8183631490205536,0.6255876522945811,0.4479047097287845,0.29247671714268697,0.1655689737725926,0.07229712818584122,0.01642096659079384,0.0001928559307495803,0.024266951018055316,0.08767282556684508,0.18785459005704508,0.32077391958909696,0.4810728386790387,0.6622897011418856,0.8571196589184783,1.0577091203530289,1.255972328313834,1.443917296899623,1.6139679682296535,1.7592696031833204,1.873965095795739,1.9534310730804352,1.994464263100951,1.9954106187978498,1.9562319925921376,1.8785076741134026,1.7653707290668743,1.6213817054181816,1.4523447977970911,1.265073880529537,1.0671178405013377,0.8664562816805907,0.6711778674431779,0.4891542667157488,0.32772284716058475,0.19339090603350828,0.09157336116329384,0.026374475723520696,0.00042241546699761656,0.014763307417563265,0.068819070510864,0.160410718030372,0.28584619251782006,0.4400691925347374,0.6168629920709024,0.8091010366443251,1.0090342145679685,1.2086032234851751,1.3997634406845687,1.5748092016787507,1.7266844153839882,1.8492669950087792,1.9376156392488402,1.9881690160424803,1.9988893197940434,1.969344415276219,1.9007252569923212,1.7957978818243165,1.6587919101421131,1.495230049892108,1.3117054763514076,1.115616061366025,0.9148661652863517,0.7175480123613889,0.5316154933430347,0.36456354431068916,0.2231260259498118,0.11300428176362043,0.03863731703208062,0.0030228625987808178,0.007596536401305087,0.05217397374120836,0.13495825902132486,0.2526123593770423,0.40039364040361924,0.5723450416531198,0.7615352056204197,0.9603378806240678,1.160739334857237,1.3546613897546815,1.5342870512073796,1.6923756124366165,1.8225545267380743,1.9195762847102862,1.9795299412524963,1.9999987656826221,1.9801576601020456,1.920806419075239,1.824337489927097,1.6946395332396453,1.5369406710226123,1.3575977412211067,1.1638400537066051,0.9634779769423272,0.7645881021885181,0.5751876762721693,0.4029114265296666,0.2547038051022469,0.13653905821083023,0.05318040441170857,0.007988029352804404,0.002783636758332597,0.037777015588477014,0.1115575834506306,0.22115124714716772,0.3621402883120114,0.5288414415485121,0.7145349867427997,0.9117356208453622,1.1124941902857637,1.3087181211919234,1.4924976308794093,1.656424571031362,1.793891050007125,1.899355796820679,1.968567529661942,1.9987363249805115,1.9886460792475311,1.9387035300643412,1.8509218605779652,1.7288395481092111,1.5773777282035402,1.4026418237566165,1.2116754355411397,1.0121764148019823,0.8121865630285621,0.619767467099273,0.4426755368775417,0.2880493444874289,0.16212186861540634,0.06996924326588438,0.01530613890208754,0.00033602415486799764,0.02566234404677492,0.09026419513542483,0.19153747811060318,0.32539986898469286,0.4864553774901783,0.6682118593379811,0.8633427144224741,1.063982221923476,1.2620426073533304,1.4495400605829913,1.6189165630664886,1.7633445514159487,1.8770021363433194,1.9553077828999645,1.9951049920575805,1.9947895391202963,1.9543741399896226,1.8754879385867746,1.761310836094094,1.616445309202811,1.4467308843707074,1.2590087466287656,1.0608459715510257,0.8602304965911647,0.6652491274856484,0.4837615592778661,0.3230835521700063,0.1896920333774571,0.08896401232370454,0.02495983349929609,0.0002595040575850138,0.015858693778578514,0.07112859964024854,0.16384129285565652,0.2902595266372514,0.4452873845391824,0.622675696746313,0.8152739439827978,1.015318494799647,1.2147455574010486,1.405516230928746,1.5799405533929423,1.7309874838843766,1.8525683236912207,1.9397821516209248,1.9891133800343264,1.9985734681122482,1.9677810798956916,1.8979774559306049,1.791976378886599,1.6540507500345454,1.4897603486826343,1.3057277175851558,1.1093712083778566,0.9086059479738883,0.7115247799578539,0.5260720422246622,0.35972333087999286,0.21918415911217837,0.11011965809155,0.03692621564740162,0.002554257963700235,0.008389317959177522,0.05419618448348418,0.13812838367388258,0.25680261027929063,0.40543510862649657,0.5780345057145522,0.7676433233392114,0.9666184338985373,1.1669391547119987,1.3605305615768901,1.5395889887995349,1.6968965948017314,1.8261123131684482,1.9220274609069197,1.9807757003525055,1.9999888911618815,1.9788925500022807,1.9183370699589952,1.8207634412072737,1.6901048547478015,1.5316281555570155,1.3517215361726815,1.1576370287819828,0.9571981759506808,0.7584846637807278,0.5695066299270104,0.39788177511031175,0.2505282937556661,0.13338600171493142,0.05117690241001438,0.007214842970482027,0.0032719331228042714,0.03950711148316233,0.11445973874503912,0.2251084760200962,0.3669930749476408,0.5343941702157942,0.7205638270614609,0.9179975503842267,1.1187367907917407,1.3146897535649311,1.4979575787393746,1.6611527439904994,1.797696855509121,1.9020858229227426,1.9701117290671557,1.9990324510420976,1.9876821951299364,1.9365184899168342,1.847603743324684,1.7245221069895162,1.5722349991815694,1.3968811101352332,1.2055289515697805,1.005891925125274,0.806017395298157,0.6139623003415304,0.43746837724705623,0.2836500924834975,0.15870785799733222,0.06767809273257286,0.014230204685192538,0.0005186771409014801,0.027096221497567075,0.09289149747994663,0.1952522988444909,0.33005246375936204,0.4918582003043612,0.6741471225134068,0.8695711676205825,1.0702527963219044,1.2681025362250118,1.4551450683176177,1.6238407119157654,1.7673893490393535,1.880004537030544,1.957146759940013,1.995706416323189,1.9941291672114927,1.9524785914846947,1.8724336230075846,1.7572208728398468,1.6114845646095293,1.4410993259525702,1.2529333823916873,1.0545716993044196,0.8540102321223657,0.6593336095295597,0.47838924224355095,0.3184709940484618,0.18602516629319177,0.08639064761471049,0.02358370344492966,0.0001360804324802567,0.016992951786568455,0.07347481736399097,0.16730489430616002,0.29470089411013933,0.45052748660151276,0.6285033049899349,0.8214541476374064,1.0216021699808655,1.2208794092895217,1.4112530040789877,1.5850489985953162,1.7352616798161395,1.8558359776008322,1.9419115444454258,1.990018675992051,1.9982181747414507,1.9661795190649565,1.8951941865246145,1.7881235944388099,1.6492837562080567,1.4842713029021786,1.2997378831750024,1.1031220354419864,0.9023493405468465,0.7055129417584014,0.5205473103290288,0.35490840711905514,0.21527313296535722,0.10727018294364077,0.03525315378400318,0.002125050474662382,0.009221266189695099,0.0562557526172206,0.14133255056104022,0.2610222160174812,0.4105000609937701,0.5837406365835132,0.7737606186899388,0.9729003056792751,1.1731323807983731,1.3663854931505914,1.5448696136873754,1.701390051121284,1.8296374697864481,1.9244422188313712,1.981982720740345,1.999939519045709,1.9775887755711,1.9158314483337353,1.8171569739449724,1.6855429184707966,1.5262946418243437,1.3458314388150152,1.151427777504577,0.9509200655469164,0.752390764753977,0.5638425872236836,0.39287590617722423,0.24638238506817767,0.1302671747683829,0.049210877055496205,0.006480869650247745,0.0037995982865542954,0.041275144958824006,0.11739687113896713,0.22909631158494737,0.3718708641124725,0.5399652893980439,0.7266037045596675,0.9242627188585947,1.124974701427865,1.3206489563113142,1.50339785825386,1.6658548027159368,1.8014711535534125,1.9047802184081253,1.9716176109661214,1.999289117285755,1.986679299507206,1.9342964591299845,1.8442521473897528,1.7201760486708344,1.5670696680020484,1.3911047204901323,1.1993743496089169,0.9996072027290771,0.7998558894992804,0.608172381314055,0.4322834365098265,0.2792791348927389,0.15532707676504742,0.0654237670818486,0.013193206437400185,0.0007408076744174208,0.02856852673508492,0.0955546288271325,0.1989989055306085,0.33473152014471486,0.4972810937207808,0.6800952562369078,0.8758047725012021,1.0765205958729807,1.2741518755734913,1.4607320987167907,1.6287402202832397,1.7714038362920341,1.882972179268434,1.9589479315645857,1.996268512142706,1.9934295291548343,1.9505454219477683,1.869344848015322,1.753101000849679,1.606499667577996,1.4354503449781926,1.2468480277831908,1.0482952715829676,0.8477957339624407,0.6534315472261891,0.4730375278088137,0.3138853549828675,0.18239044961477002,0.08385336867918225,0.022246139914834817,5.214946667631004e-5,0.018166036640581806,0.07585763101108223,0.17080138557646563,0.2991701195112596,0.4557892917479506,0.6343455866227514,0.8276414035021437,1.0278849919188635,1.2270045368755584,1.4169735335440057,1.5901343355123296,1.739506834356901,1.859069827671738,1.9440037336155411,1.9908848681582398,1.997823453715037,1.9645397960425324,1.8923755587080209,1.7842396806583265,1.6444911169495753,1.4787631293571843,1.2937362097077394,1.0968687893884044,0.8960965901288924,0.6995127352188495,0.5150415158721087,0.35011896320794267,0.21139310198715744,0.10445596886861086,0.0336181975245472,0.0017352570845156068,0.010092348232534576,0.058352596793525,0.1445706331244755,0.26527100992544417,0.41558829744984693,0.5894632088790243,0.7798868500515165,0.9791832478446378,1.1793187684959916,1.3722259532175767,1.5501287172965514,1.7058558039126441,1.8331298573552532,1.9268204631054284,1.9831509547410935,1.9998506512842056,1.9762463883050132,1.9132896531666106,1.8135182305885438,1.6809539045961464,1.5209403404879294,1.3399276817953214,1.1452125451276352,0.9446438937040821,0.7463066458052431,0.5581957718807675,0.3878940174523411,0.24226624279504294,0.12718270055870418,0.04728240600227307,0.005786138382618211,0.004366611407852883,0.04308104618160746,0.12036886462148544,0.2331145963300375,0.3767734631433791,0.5455545790470556,0.732654380674104,0.9305308788067125,1.131207675808971,1.3265954940542384,1.5088182545424949,1.6705305614855877,1.8052137950626885,1.9074388768534891,1.9730851158794374,1.9995063135736735,1.9856374319917525,1.9320375254696156,1.8408672051546304,1.7158015448139654,1.5618819386853584,1.3853128829774677,1.1932118727531442,0.9933224958476004,0.7937022889993411,0.6023979387072798,0.42712091946086606,0.27493664435933596,0.15197965845278028,0.0632063553551534,0.012195185118095364,0.0010024069816954029,0.03007920160616584,0.0982534839885234,0.20277715018538278,0.3394368533272646,0.5027238435457091,0.686056025568935,0.8820432828491662,1.0827853730109858,1.2801903864618245,1.466300931103742,1.633614894648007,1.7753878546095727,1.8859049458409944,1.960711226630961,1.9967912573144475,1.9926906525846504,1.9485747077352524,1.8662217356104918,1.748951382850398,1.6014908150018674,1.4297841645711797,1.2407529231628485,1.0420169362932263,0.8415872475718083,0.6475431736954353,0.4677066273558058,0.3093268160970247,0.1787880269063229,0.08135227573462733,0.020947195740168678,7.714475279918531e-6,0.019377902006062264,0.0782769464650942,0.17433062856198622,0.3036670263149539,0.4610725921475838,0.640202310886083,0.8338354671926496,1.0341667124544824,1.233120698228618,1.4226775933741056,1.595196363283148,1.7437227798314403,1.8622697461732018,1.9460586364938737,1.9917119223200104,1.997389320623715,1.9628619755942367,1.8895216838110884,1.780324790952091,1.6396730215588873,1.473236045609791,1.2877229342376035,1.0906117172080794,0.8898479436913334,0.6935243973355749,0.5095548763220095,0.3453551883202318,0.20754421943119317,0.10167712702234577,0.03202141144658088,0.0013848931893352123,0.011002529681663598,0.06048663419116962,0.14784250346632188,0.2695488241842109,0.42069961701929715,0.5952019965707682,0.7860217754498208,0.985467012230832,1.185498073454772,1.378051711091102,1.5553660919028558,1.7102936767872738,1.8365893379324674,1.9291620997931385,1.984280356211796,1.9997222913874741,1.9748654412256907,1.910711784853505,1.8098473548612133,1.6763379943808983,1.5155654630321131,1.3340104983004366,1.138991577140632,0.9383699083186422,0.7402325472453055,0.5525664069363929,0.3829363057104965,0.23818002951575334,0.12413270091657735,0.04539156542117373,0.005130676608104401,0.00497295009079135,0.04492474382196021,0.12337560180468043,0.2371631715410546,0.38170067839738087,0.5511618183968376,0.7387156164149584,0.9368017826485414,1.1374354677448237,1.3325291319171657,1.51421855351033,1.675179835616172,1.8089246322099246,1.9100616932470462,1.9745141858435615,1.9996840313270268,1.9845566337352922,1.9297417781591863,1.8374490503178735,1.7113987682031726,1.5566720161366443,1.3795058263633306,1.1870417644082256,0.9870380527144251,0.7875568368534482,0.596639200600323,0.4219810300094031,0.27062279240317777,0.1486657352769738,0.061025945135876336,0.011236180147158548,0.0013034647300772528,0.03162818644211496,0.10098795636465163,0.20658688357553423,0.344168277455579,0.5081862348012887,0.6920291950708175,0.8882864522555655,1.0890468802894815,1.286217830380688,1.47185134552059,1.6384645424699784,1.7793412466311047,1.8888027209096916,1.9624365754924376,1.9972746311910092,1.9919125666851114,1.9465665266864762,1.8630644091499295,1.7447721827437759,1.5964582047209401,1.4241010085345194,1.2346483092753386,1.0357369414171123,0.8353850181734904,0.6416687215164643,0.4623967514446401,0.30479555744423736,0.17521804045648215,0.0788874675693172,0.01968692222664914,2.7772133860404224e-6,0.02062850001672112,0.08073266816779534,0.17789248386458556,0.308191436902274,0.4663771791203968,0.6460732464508608,0.8400360940555427,1.0404470834721384,1.2392276517723642,1.4283649582701885,1.6002348819676597,1.7479093497181797,1.8654356067147269,1.9480761719158226,1.9924998058103478,1.996915792614887,1.961146123990698,1.8866326745562587,1.7763790799505679,1.6348296603413222,1.4676902699688417,1.2816982942771682,1.084351066043034,0.883603648043491,0.6875481646361388,0.5040876083901707,0.34061727061569835,0.20372663732075913,0.09893376716365476,0.03046285862001552,0.0010739726278053974,0.01195177458671215,0.0626577805198768,0.15114803235411822,0.2738554898284985,0.42583381781510343,0.6009567729878993,0.7921651525673444,0.9917513506414599,1.1916700516043013,1.383862536665236,1.5605815306402517,1.7147034944579693,1.8400157748753854,1.9314670364044397,1.9853708805433175,1.9995544444254776,1.973445988877815,1.9080979452151778,1.806144491755356,1.6716953701444006,1.510170221753989,1.3280801220474636,1.1327651192595465,0.9320983572006718,0.7341687089891032,0.5469547147393706,0.3780029667715694,0.2341239066277192,0.12111729631099932,0.043538429996675676,0.004514510216159562,0.005618590386188949,0.0468061650574495,0.12641696392834423,0.24124187730720903,0.3866523152591277,0.5567867859724711,0.7447871723753066,0.9430751826957355,1.1436578312498558,1.3384496355330786,1.5195985418561353,1.679802441470533,1.812603518424365,1.9126485639927169,1.9759047644130356,1.9998222635263116,1.983436947427232,1.9274093078762027,1.8339978178898708,1.7069678927395067,1.5514401061375818,1.3736837800150943,1.180864268281284,0.9807541215526873,0.7814197757948669,0.5908963944520198,0.41686397117100205,0.2663377494129262,0.1453854381310863,0.058882622545934904,0.010316229403405375,0.0016439690283744923,0.03321542006108669,0.10375793794924015,0.2104279552241003,0.34892560564769537,0.5136680517337908,0.6980145288140751,0.8945340341275092,1.0953048703912391,1.2922339692579095,1.4773831227368384,1.6432889721976212,1.7832638562054164,1.8916653900181193,1.964123910001131,1.997718614680071,1.9910953021890812,1.9445209581206568,1.8598729933418028,1.7405635656000111,1.5914020355134268,1.4184011013417286,1.2285344272408545,1.0294555350020635,0.8291892907433421,0.6358084227185888,0.4571081098049887,0.3002917580002942,0.1716806312727026,0.07645904153831817,0.018465369152614097,3.733787600712635e-5,0.021917781276387105,0.08322469912302222,0.18148681079798068,0.31274317256789574,0.4717028431456556,0.6519581614266448,0.8462430391782649,1.0467258569094935,1.245325156294137,1.434035403592483,1.6052496925542812,1.7520663786558242,1.8685672842510517,1.9500562601927025,1.993248487509404,1.996402888391978,1.9593923090046714,1.8837086450537186,1.7724027035015943,1.6299612246001103,1.4621260214816225,1.2756625277878553,1.078087083176718,0.8773639498227259,0.6815842731699777,0.4986399280229282,0.33590539723275636,0.199940506442857,0.09622599764985307,0.02894260060463094,0.0008025076806769116,0.012940045454367444,0.06486595002363482,0.15448708922595988,0.27819083675349954,0.4309906970464211,0.6067273108280815,0.7983167387527819,0.9980360148575012,1.1978344591635823,1.389658200423752,1.5657748275091792,1.7190850827455963,1.8434090328464907,1.9337351818988724,1.9864224846620928,1.999347117027841,1.9719880873269715,1.9054482374931454,1.8024097875267984,1.6670262152611894,1.5047548297550057,1.3221367872745933,1.1265334174172597,0.9258294880641115,0.7281153705463272,0.5413609169405112,0.3730941954927277,0.2300980343398349,0.11813660584451746,0.041723072923993576,0.003937663544144376,0.006303506792519009,0.048725235575647896,0.12949283086464092,0.2453505525276547,0.3916281781487141,0.562429259598807,0.7508688087406784,0.9493508311612895,1.1498745205529615,1.3443567710536954,1.5249580070809654,1.6843981964647998,1.816250308397236,1.9151993869141775,1.9772567966627417,1.999921004711629,1.9822784172929757,1.9250402067486507,1.8305136441875385,1.7025090934338234,1.5461864153383544,1.3678469738921184,1.1746796283713077,0.9744709505653147,0.7752913482254726,0.5851697470919105,0.41176994505941067,0.26208168463932224,0.14213889658039924,0.05677647224236804,0.009435369223078527,0.002023906427335409,0.034840839770473475,0.10656331933344598,0.21430021341630145,0.3537086499985125,0.5191690778222349,0.704011790389818,0.9007857816977598,1.1015590961379658,1.2982385654678026,1.4828960442581802,1.648087993275428,1.787155528397141,1.8944928400964591,1.9657731635106472,1.9981231902451588,1.9902388913768985,1.9424380828337127,1.8566476142407804,1.7363256976511936,1.586322507088095,1.4126846681279173,1.222411518545752,1.0231729651512855,0.8230003100004454,0.629962508772085,0.45184091132778825,0.2958155956564147,0.1681759390756853,0.0740670935596982,0.017282584767004394,0.0001113950980645706,0.023245694860990707,0.08575294090043672,0.18511346739332368,0.3173220535271878,0.4770493738700705,0.6578568233708881,0.8524560573986928,1.053002784767354,1.2514129709545077,1.4396887053695646,1.61024059696783,1.7561937024499263,1.871664655087074,1.9519988231149146,1.9939579378457208,1.9958506282136974,1.957600599908404,1.8807497107968818,1.7683958186642104,1.6250679066288987,1.4565435199249914,1.2696158731705964,1.071820016024105,0.8711290954848872,0.6756329584990945,0.4932120503929722,0.331219754281158,0.19618597634219226,0.09355392543251062,0.027460697447625138,0.0005705090702818882,0.013967303249872831,0.06711105548409158,0.1578595421956832,0.2825546937215132,0.4361700510266465,0.6125133821663682,0.8044762910305784,1.0043207566471088,1.2039910526506274,1.3954384734493446,1.570945777384615,1.7234382685860257,1.8467689778187681,1.9359664466891493,1.9874351270318225,1.9991003173835893,1.9704917941574052,1.9027627663456523,1.7986433896889948,1.6623307141537096,1.4993195009324833,1.3161807287318892,1.1202967177537089,0.9195635485169584,0.7220727710119428,0.5357852344838538,0.36821018576080944,0.22610257166612113,0.11519074724854417,0.03994556590615894,0.0034001593763691718,0.007027672256932571,0.05068187957703074,0.13260308112289054,0.2494890349177903,0.39662807052932636,0.5680890164092098,0.7569602852983514,0.9556284801694577,1.1560852901071204,1.3502503051587926,1.5302967374964733,1.6889669190756873,1.8198648580875068,1.9177140612589523,1.978570229190061,1.9999802509828952,1.981081089092194,1.9226345683513661,1.8269966668288689,1.6980225463999408,1.5409111512494036,1.361995638536794,1.1684880889593803,0.968188787925203,0.7691717962060898,0.5794594847113346,0.4066991528786521,0.2578547661885964,0.1389262388569199,0.05470757741396737,0.008593634398425087,0.0024432619201807393,0.03650438136938572,0.1094039897102348,0.21820350520555798,0.3585172215871866,0.5246890957868795,0.7100207429179759,0.9070414480346094,1.107809310500046,1.3042313818406344,1.4883898923350434,1.6528614161515032,1.7910161094928811,1.8972849594660075,1.967384270878712,1.9984883419063342,1.9893433680751098,1.9403179830951363,1.8533883992429798,1.7320587462847858,1.581219820076318,1.4069519346809634,1.2162798250328848,1.0168894800139303,0.8168183203973558,0.6241312105790684,0.4465953640570184,0.29136724721224294,0.16470410229388044,0.07171171811068688,0.01613861578748066,0.0002249459544438892,0.02461218832055001,0.08831729363947305,0.18877231040481324,0.32192789892336726,0.4824165601162196,0.6637689992980116,0.8586749033148058,1.0592776191194138,1.2574908552967372,1.445324640307117,1.615207398077409,1.7602911580792981,1.8747275968827304,1.9539037839550453,1.9946281287974066,1.9952590338932357,1.9557710674708848,1.8777559886578397,1.7643585837024989,1.620149899704132,1.4509429857967924,1.263558569256361,1.065550112122044,0.8648993312944275,0.6696944556887079,0.48780418989078034,0.32656052683459014,0.19246319531533596,0.09091765605323099,0.026017207681263033,0.000377985960109517,0.015033507398567347,0.06939300822399097,0.16126525805801895,0.2869468883687799,0.44137167518149045,0.6183147584643579,0.8106435661105136,1.0106053277753184,1.2101395888920898,1.4012031274325807,1.5760941760242033,1.727762880036971,1.8500954770809916,1.9381607426446967,1.988408767655125,1.998814055240823,1.9689571684697524,1.9000416378435312,1.794845447007266,1.6576090522850289,1.4938644499712348,1.3102121816719454,1.1140552666062884,0.9133007860515239,0.7160411490567525,0.5302278875978852,0.36335113048458434,0.2221376764195061,0.11227983687870324,0.03820597915120316,0.002902018943192086,0.007791058176315313,0.052676019778010175,0.13574759185431406,0.25365716101570035,0.4016517949150543,0.5737658328544131,0.7630613614469948,0.9619078817654353,1.1622898945991558,1.3561300050653555,1.5356145222333004,1.6935084288476367,1.8234470247275643,1.9201924877023386,1.9798450101169927,2.0],"x":[-804.247719318987,-804.0466071111053,-803.8454949032237,-803.6443826953418,-803.4432704874602,-803.2421582795785,-803.0410460716968,-802.8399338638151,-802.6388216559333,-802.4377094480516,-802.2365972401698,-802.0354850322882,-801.8343728244065,-801.6332606165247,-801.432148408643,-801.2310362007612,-801.0299239928796,-800.8288117849979,-800.6276995771161,-800.4265873692344,-800.2254751613526,-800.0243629534709,-799.8232507455893,-799.6221385377075,-799.4210263298258,-799.219914121944,-799.0188019140624,-798.8176897061808,-798.616577498299,-798.4154652904173,-798.2143530825355,-798.0132408746538,-797.8121286667721,-797.6110164588904,-797.4099042510087,-797.2087920431269,-797.0076798352452,-796.8065676273635,-796.6054554194818,-796.4043432116001,-796.2032310037183,-796.0021187958366,-795.8010065879549,-795.5998943800731,-795.3987821721915,-795.1976699643097,-794.996557756428,-794.7954455485464,-794.5943333406645,-794.393221132783,-794.1921089249012,-793.9909967170195,-793.7898845091378,-793.588772301256,-793.3876600933743,-793.1865478854926,-792.9854356776109,-792.7843234697292,-792.5832112618474,-792.3820990539657,-792.180986846084,-791.9798746382023,-791.7787624303206,-791.5776502224388,-791.3765380145571,-791.1754258066753,-790.9743135987937,-790.773201390912,-790.5720891830302,-790.3709769751486,-790.1698647672667,-789.9687525593852,-789.7676403515035,-789.5665281436217,-789.36541593574,-789.1643037278582,-788.9631915199765,-788.7620793120949,-788.5609671042131,-788.3598548963314,-788.1587426884496,-787.9576304805679,-787.7565182726863,-787.5554060648045,-787.3542938569228,-787.153181649041,-786.9520694411593,-786.7509572332776,-786.5498450253959,-786.3487328175142,-786.1476206096324,-785.9465084017507,-785.745396193869,-785.5442839859874,-785.3431717781057,-785.1420595702239,-784.9409473623422,-784.7398351544605,-784.5387229465787,-784.3376107386971,-784.1364985308153,-783.9353863229336,-783.7342741150519,-783.5331619071701,-783.3320496992885,-783.1309374914067,-782.929825283525,-782.7287130756433,-782.5276008677615,-782.3264886598798,-782.1253764519982,-781.9242642441164,-781.7231520362348,-781.522039828353,-781.3209276204713,-781.1198154125897,-780.9187032047079,-780.7175909968262,-780.5164787889444,-780.3153665810627,-780.1142543731809,-779.9131421652993,-779.7120299574176,-779.5109177495358,-779.3098055416541,-779.1086933337724,-778.9075811258907,-778.706468918009,-778.5053567101272,-778.3042445022455,-778.1031322943638,-777.902020086482,-777.7009078786004,-777.4997956707186,-777.298683462837,-777.0975712549553,-776.8964590470734,-776.6953468391919,-776.4942346313101,-776.2931224234284,-776.0920102155467,-775.8908980076649,-775.6897857997832,-775.4886735919015,-775.2875613840198,-775.0864491761381,-774.8853369682563,-774.6842247603746,-774.4831125524929,-774.2820003446112,-774.0808881367295,-773.8797759288477,-773.678663720966,-773.4775515130842,-773.2764393052026,-773.075327097321,-772.8742148894391,-772.6731026815575,-772.4719904736756,-772.270878265794,-772.0697660579124,-771.8686538500306,-771.6675416421489,-771.4664294342671,-771.2653172263854,-771.0642050185038,-770.863092810622,-770.6619806027403,-770.4608683948585,-770.2597561869768,-770.0586439790951,-769.8575317712134,-769.6564195633317,-769.4553073554499,-769.2541951475682,-769.0530829396865,-768.8519707318048,-768.6508585239231,-768.4497463160413,-768.2486341081596,-768.047521900278,-767.8464096923962,-767.6452974845146,-767.4441852766328,-767.2430730687511,-767.0419608608694,-766.8408486529876,-766.639736445106,-766.4386242372242,-766.2375120293425,-766.0363998214608,-765.835287613579,-765.6341754056973,-765.4330631978156,-765.2319509899339,-765.0308387820522,-764.8297265741704,-764.6286143662887,-764.427502158407,-764.2263899505253,-764.0252777426437,-763.8241655347618,-763.6230533268802,-763.4219411189983,-763.2208289111168,-763.0197167032351,-762.8186044953533,-762.6174922874716,-762.4163800795898,-762.2152678717082,-762.0141556638265,-761.8130434559447,-761.611931248063,-761.4108190401812,-761.2097068322995,-761.0085946244179,-760.8074824165361,-760.6063702086544,-760.4052580007726,-760.2041457928909,-760.0030335850093,-759.8019213771275,-759.6008091692458,-759.399696961364,-759.1985847534824,-758.9974725456007,-758.796360337719,-758.5952481298373,-758.3941359219555,-758.1930237140738,-757.9919115061921,-757.7907992983104,-757.5896870904287,-757.3885748825469,-757.1874626746652,-756.9863504667835,-756.7852382589017,-756.5841260510201,-756.3830138431383,-756.1819016352566,-755.9807894273749,-755.7796772194931,-755.5785650116115,-755.3774528037297,-755.176340595848,-754.9752283879664,-754.7741161800845,-754.5730039722029,-754.3718917643212,-754.1707795564395,-753.9696673485578,-753.768555140676,-753.5674429327943,-753.3663307249126,-753.1652185170309,-752.9641063091492,-752.7629941012674,-752.5618818933857,-752.3607696855039,-752.1596574776223,-751.9585452697406,-751.7574330618588,-751.5563208539771,-751.3552086460953,-751.1540964382137,-750.952984230332,-750.7518720224502,-750.5507598145686,-750.3496476066867,-750.148535398805,-749.9474231909235,-749.7463109830417,-749.54519877516,-749.3440865672782,-749.1429743593965,-748.9418621515149,-748.7407499436331,-748.5396377357514,-748.3385255278696,-748.1374133199879,-747.9363011121062,-747.7351889042245,-747.5340766963428,-747.332964488461,-747.1318522805793,-746.9307400726976,-746.7296278648159,-746.5285156569342,-746.3274034490524,-746.1262912411707,-745.925179033289,-745.7240668254072,-745.5229546175257,-745.3218424096439,-745.1207302017622,-744.9196179938805,-744.7185057859987,-744.5173935781171,-744.3162813702354,-744.1151691623536,-743.9140569544719,-743.7129447465901,-743.5118325387084,-743.3107203308268,-743.109608122945,-742.9084959150633,-742.7073837071815,-742.5062714992998,-742.3051592914182,-742.1040470835364,-741.9029348756548,-741.701822667773,-741.5007104598913,-741.2995982520094,-741.0984860441279,-740.8973738362462,-740.6962616283644,-740.4951494204827,-740.294037212601,-740.0929250047193,-739.8918127968376,-739.6907005889558,-739.4895883810741,-739.2884761731924,-739.0873639653106,-738.886251757429,-738.6851395495472,-738.4840273416655,-738.2829151337838,-738.081802925902,-737.8806907180204,-737.6795785101386,-737.478466302257,-737.2773540943753,-737.0762418864934,-736.8751296786118,-736.6740174707301,-736.4729052628484,-736.2717930549667,-736.0706808470849,-735.8695686392032,-735.6684564313215,-735.4673442234398,-735.2662320155581,-735.0651198076763,-734.8640075997946,-734.6628953919128,-734.4617831840312,-734.2606709761495,-734.0595587682677,-733.858446560386,-733.6573343525042,-733.4562221446226,-733.255109936741,-733.0539977288591,-732.8528855209775,-732.6517733130956,-732.450661105214,-732.2495488973324,-732.0484366894506,-731.8473244815689,-731.6462122736871,-731.4451000658054,-731.2439878579238,-731.042875650042,-730.8417634421603,-730.6406512342785,-730.4395390263968,-730.2384268185151,-730.0373146106334,-729.8362024027517,-729.6350901948699,-729.4339779869882,-729.2328657791065,-729.0317535712248,-728.8306413633431,-728.6295291554613,-728.4284169475796,-728.227304739698,-728.0261925318162,-727.8250803239346,-727.6239681160528,-727.4228559081711,-727.2217437002894,-727.0206314924076,-726.819519284526,-726.6184070766442,-726.4172948687625,-726.2161826608808,-726.015070452999,-725.8139582451173,-725.6128460372356,-725.4117338293539,-725.2106216214722,-725.0095094135904,-724.8083972057087,-724.607284997827,-724.4061727899453,-724.2050605820637,-724.0039483741818,-723.8028361663002,-723.6017239584183,-723.4006117505368,-723.1994995426551,-722.9983873347733,-722.7972751268916,-722.5961629190098,-722.3950507111282,-722.1939385032465,-721.9928262953647,-721.791714087483,-721.5906018796012,-721.3894896717195,-721.1883774638379,-720.9872652559561,-720.7861530480744,-720.5850408401926,-720.3839286323109,-720.1828164244293,-719.9817042165475,-719.7805920086658,-719.579479800784,-719.3783675929024,-719.1772553850207,-718.976143177139,-718.7750309692573,-718.5739187613755,-718.3728065534938,-718.1716943456121,-717.9705821377304,-717.7694699298487,-717.5683577219669,-717.3672455140852,-717.1661333062035,-716.9650210983217,-716.7639088904401,-716.5627966825583,-716.3616844746766,-716.1605722667949,-715.9594600589131,-715.7583478510315,-715.5572356431497,-715.356123435268,-715.1550112273864,-714.9538990195045,-714.7527868116229,-714.5516746037412,-714.3505623958595,-714.1494501879778,-713.948337980096,-713.7472257722143,-713.5461135643326,-713.3450013564509,-713.1438891485692,-712.9427769406874,-712.7416647328057,-712.5405525249239,-712.3394403170423,-712.1383281091606,-711.9372159012788,-711.7361036933971,-711.5349914855153,-711.3338792776337,-711.132767069752,-710.9316548618702,-710.7305426539886,-710.5294304461067,-710.328318238225,-710.1272060303435,-709.9260938224617,-709.72498161458,-709.5238694066982,-709.3227571988165,-709.1216449909349,-708.9205327830531,-708.7194205751714,-708.5183083672896,-708.3171961594079,-708.1160839515262,-707.9149717436445,-707.7138595357628,-707.512747327881,-707.3116351199993,-707.1105229121176,-706.9094107042359,-706.7082984963542,-706.5071862884724,-706.3060740805907,-706.104961872709,-705.9038496648272,-705.7027374569457,-705.501625249064,-705.3005130411822,-705.0994008333005,-704.8982886254187,-704.6971764175371,-704.4960642096554,-704.2949520017736,-704.0938397938919,-703.8927275860101,-703.6916153781284,-703.4905031702468,-703.289390962365,-703.0882787544833,-702.8871665466015,-702.6860543387198,-702.4849421308382,-702.2838299229564,-702.0827177150748,-701.881605507193,-701.6804932993113,-701.4793810914296,-701.2782688835479,-701.0771566756662,-700.8760444677844,-700.6749322599027,-700.473820052021,-700.2727078441393,-700.0715956362576,-699.8704834283758,-699.6693712204941,-699.4682590126124,-699.2671468047306,-699.066034596849,-698.8649223889672,-698.6638101810855,-698.4626979732038,-698.261585765322,-698.0604735574404,-697.8593613495586,-697.658249141677,-697.4571369337953,-697.2560247259134,-697.0549125180318,-696.8538003101501,-696.6526881022684,-696.4515758943867,-696.2504636865049,-696.0493514786232,-695.8482392707415,-695.6471270628598,-695.4460148549781,-695.2449026470963,-695.0437904392146,-694.8426782313328,-694.6415660234512,-694.4404538155695,-694.2393416076877,-694.038229399806,-693.8371171919242,-693.6360049840426,-693.434892776161,-693.2337805682791,-693.0326683603975,-692.8315561525156,-692.630443944634,-692.4293317367524,-692.2282195288706,-692.0271073209889,-691.8259951131071,-691.6248829052254,-691.4237706973438,-691.222658489462,-691.0215462815803,-690.8204340736985,-690.6193218658168,-690.4182096579351,-690.2170974500534,-690.0159852421717,-689.8148730342899,-689.6137608264082,-689.4126486185265,-689.2115364106448,-689.0104242027631,-688.8093119948813,-688.6081997869996,-688.407087579118,-688.2059753712361,-688.0048631633546,-687.8037509554728,-687.6026387475911,-687.4015265397094,-687.2004143318276,-686.999302123946,-686.7981899160642,-686.5970777081825,-686.3959655003008,-686.194853292419,-685.9937410845373,-685.7926288766556,-685.5915166687739,-685.3904044608922,-685.1892922530104,-684.9881800451287,-684.787067837247,-684.5859556293653,-684.3848434214837,-684.1837312136018,-683.9826190057202,-683.7815067978383,-683.5803945899568,-683.3792823820751,-683.1781701741933,-682.9770579663116,-682.7759457584298,-682.5748335505482,-682.3737213426665,-682.1726091347847,-681.971496926903,-681.7703847190212,-681.5692725111395,-681.3681603032579,-681.1670480953761,-680.9659358874944,-680.7648236796126,-680.5637114717309,-680.3625992638493,-680.1614870559675,-679.9603748480858,-679.759262640204,-679.5581504323223,-679.3570382244407,-679.155926016559,-678.9548138086773,-678.7537016007955,-678.5525893929138,-678.3514771850321,-678.1503649771504,-677.9492527692687,-677.7481405613869,-677.5470283535052,-677.3459161456235,-677.1448039377417,-676.9436917298601,-676.7425795219783,-676.5414673140966,-676.3403551062149,-676.1392428983331,-675.9381306904515,-675.7370184825697,-675.535906274688,-675.3347940668064,-675.1336818589245,-674.9325696510429,-674.7314574431612,-674.5303452352795,-674.3292330273978,-674.128120819516,-673.9270086116343,-673.7258964037526,-673.5247841958709,-673.3236719879892,-673.1225597801074,-672.9214475722257,-672.7203353643439,-672.5192231564623,-672.3181109485806,-672.1169987406988,-671.9158865328171,-671.7147743249353,-671.5136621170537,-671.312549909172,-671.1114377012902,-670.9103254934085,-670.7092132855267,-670.508101077645,-670.3069888697635,-670.1058766618817,-669.904764454,-669.7036522461182,-669.5025400382365,-669.3014278303549,-669.1003156224731,-668.8992034145914,-668.6980912067096,-668.4969789988279,-668.2958667909462,-668.0947545830645,-667.8936423751828,-667.692530167301,-667.4914179594193,-667.2903057515376,-667.0891935436558,-666.8880813357742,-666.6869691278926,-666.4858569200107,-666.284744712129,-666.0836325042472,-665.8825202963657,-665.681408088484,-665.4802958806022,-665.2791836727205,-665.0780714648387,-664.876959256957,-664.6758470490754,-664.4747348411936,-664.2736226333119,-664.0725104254301,-663.8713982175484,-663.6702860096668,-663.469173801785,-663.2680615939033,-663.0669493860215,-662.8658371781398,-662.6647249702581,-662.4636127623764,-662.2625005544947,-662.061388346613,-661.8602761387313,-661.6591639308496,-661.4580517229679,-661.2569395150862,-661.0558273072044,-660.8547150993227,-660.653602891441,-660.4524906835592,-660.2513784756776,-660.0502662677958,-659.8491540599141,-659.6480418520324,-659.4469296441506,-659.245817436269,-659.0447052283872,-658.8435930205055,-658.6424808126238,-658.441368604742,-658.2402563968603,-658.0391441889786,-657.838031981097,-657.6369197732153,-657.4358075653334,-657.2346953574518,-657.0335831495701,-656.8324709416884,-656.6313587338067,-656.4302465259249,-656.2291343180432,-656.0280221101614,-655.8269099022798,-655.6257976943981,-655.4246854865163,-655.2235732786346,-655.0224610707528,-654.8213488628712,-654.6202366549895,-654.4191244471077,-654.218012239226,-654.0169000313442,-653.8157878234625,-653.614675615581,-653.4135634076991,-653.2124511998175,-653.0113389919356,-652.810226784054,-652.6091145761724,-652.4080023682906,-652.2068901604089,-652.0057779525271,-651.8046657446454,-651.6035535367637,-651.402441328882,-651.2013291210003,-651.0002169131185,-650.7991047052368,-650.5979924973551,-650.3968802894734,-650.1957680815917,-649.9946558737099,-649.7935436658282,-649.5924314579465,-649.3913192500647,-649.1902070421831,-648.9890948343013,-648.7879826264196,-648.586870418538,-648.3857582106561,-648.1846460027746,-647.9835337948928,-647.7824215870111,-647.5813093791294,-647.3801971712476,-647.1790849633659,-646.9779727554842,-646.7768605476025,-646.5757483397208,-646.374636131839,-646.1735239239573,-645.9724117160756,-645.7712995081939,-645.5701873003122,-645.3690750924304,-645.1679628845487,-644.9668506766669,-644.7657384687853,-644.5646262609037,-644.3635140530218,-644.1624018451402,-643.9612896372583,-643.7601774293768,-643.5590652214951,-643.3579530136133,-643.1568408057316,-642.9557285978498,-642.7546163899681,-642.5535041820865,-642.3523919742047,-642.151279766323,-641.9501675584412,-641.7490553505595,-641.5479431426779,-641.3468309347961,-641.1457187269144,-640.9446065190326,-640.7434943111509,-640.5423821032692,-640.3412698953875,-640.1401576875058,-639.939045479624,-639.7379332717423,-639.5368210638607,-639.335708855979,-639.1345966480973,-638.9334844402155,-638.7323722323338,-638.5312600244521,-638.3301478165703,-638.1290356086887,-637.9279234008069,-637.7268111929252,-637.5256989850435,-637.3245867771617,-637.1234745692801,-636.9223623613983,-636.7212501535166,-636.5201379456349,-636.3190257377531,-636.1179135298714,-635.9168013219897,-635.715689114108,-635.5145769062264,-635.3134646983445,-635.1123524904629,-634.9112402825812,-634.7101280746995,-634.5090158668178,-634.307903658936,-634.1067914510543,-633.9056792431725,-633.7045670352909,-633.5034548274092,-633.3023426195274,-633.1012304116457,-632.9001182037639,-632.6990059958823,-632.4978937880006,-632.2967815801188,-632.0956693722371,-631.8945571643553,-631.6934449564736,-631.492332748592,-631.2912205407102,-631.0901083328285,-630.8889961249467,-630.687883917065,-630.4867717091835,-630.2856595013017,-630.08454729342,-629.8834350855382,-629.6823228776565,-629.4812106697748,-629.2800984618931,-629.0789862540114,-628.8778740461297,-628.6767618382479,-628.4756496303662,-628.2745374224845,-628.0734252146028,-627.8723130067211,-627.6712007988393,-627.4700885909576,-627.2689763830758,-627.0678641751942,-626.8667519673126,-626.6656397594307,-626.464527551549,-626.2634153436672,-626.0623031357857,-625.861190927904,-625.6600787200222,-625.4589665121405,-625.2578543042587,-625.056742096377,-624.8556298884954,-624.6545176806136,-624.4534054727319,-624.2522932648501,-624.0511810569684,-623.8500688490868,-623.648956641205,-623.4478444333233,-623.2467322254415,-623.0456200175598,-622.8445078096781,-622.6433956017964,-622.4422833939147,-622.241171186033,-622.0400589781513,-621.8389467702696,-621.6378345623879,-621.4367223545062,-621.2356101466244,-621.0344979387427,-620.833385730861,-620.6322735229792,-620.4311613150976,-620.2300491072158,-620.0289368993341,-619.8278246914524,-619.6267124835706,-619.425600275689,-619.2244880678072,-619.0233758599255,-618.8222636520438,-618.621151444162,-618.4200392362803,-618.2189270283986,-618.017814820517,-617.8167026126353,-617.6155904047534,-617.4144781968718,-617.2133659889901,-617.0122537811084,-616.8111415732267,-616.6100293653449,-616.4089171574632,-616.2078049495814,-616.0066927416998,-615.8055805338181,-615.6044683259363,-615.4033561180546,-615.2022439101728,-615.0011317022912,-614.8000194944095,-614.5989072865277,-614.397795078646,-614.1966828707642,-613.9955706628825,-613.794458455001,-613.5933462471191,-613.3922340392375,-613.1911218313556,-612.990009623474,-612.7888974155924,-612.5877852077106,-612.3866729998289,-612.1855607919471,-611.9844485840654,-611.7833363761837,-611.582224168302,-611.3811119604203,-611.1799997525385,-610.9788875446568,-610.7777753367751,-610.5766631288934,-610.3755509210117,-610.1744387131299,-609.9733265052482,-609.7722142973665,-609.5711020894847,-609.3699898816031,-609.1688776737213,-608.9677654658396,-608.766653257958,-608.5655410500761,-608.3644288421946,-608.1633166343128,-607.9622044264311,-607.7610922185494,-607.5599800106676,-607.3588678027859,-607.1577555949042,-606.9566433870225,-606.7555311791408,-606.554418971259,-606.3533067633773,-606.1521945554956,-605.9510823476139,-605.7499701397322,-605.5488579318504,-605.3477457239687,-605.1466335160869,-604.9455213082053,-604.7444091003237,-604.5432968924418,-604.3421846845602,-604.1410724766783,-603.9399602687968,-603.7388480609151,-603.5377358530333,-603.3366236451516,-603.1355114372698,-602.9343992293881,-602.7332870215065,-602.5321748136247,-602.331062605743,-602.1299503978612,-601.9288381899795,-601.7277259820979,-601.5266137742161,-601.3255015663344,-601.1243893584526,-600.9232771505709,-600.7221649426892,-600.5210527348075,-600.3199405269258,-600.118828319044,-599.9177161111623,-599.7166039032807,-599.515491695399,-599.3143794875173,-599.1132672796355,-598.9121550717538,-598.7110428638721,-598.5099306559903,-598.3088184481087,-598.1077062402269,-597.9065940323452,-597.7054818244635,-597.5043696165817,-597.3032574087001,-597.1021452008183,-596.9010329929366,-596.6999207850549,-596.4988085771731,-596.2976963692914,-596.0965841614097,-595.895471953528,-595.6943597456464,-595.4932475377645,-595.2921353298829,-595.0910231220012,-594.8899109141195,-594.6887987062378,-594.487686498356,-594.2865742904743,-594.0854620825925,-593.8843498747109,-593.6832376668292,-593.4821254589474,-593.2810132510657,-593.0799010431839,-592.8787888353023,-592.6776766274206,-592.4765644195388,-592.2754522116571,-592.0743400037753,-591.8732277958936,-591.672115588012,-591.4710033801302,-591.2698911722485,-591.0687789643667,-590.867666756485,-590.6665545486035,-590.4654423407217,-590.26433013284,-590.0632179249583,-589.8621057170765,-589.6609935091948,-589.4598813013131,-589.2587690934314,-589.0576568855497,-588.8565446776679,-588.6554324697862,-588.4543202619045,-588.2532080540228,-588.0520958461411,-587.8509836382593,-587.6498714303776,-587.4487592224958,-587.2476470146142,-587.0465348067326,-586.8454225988507,-586.644310390969,-586.4431981830872,-586.2420859752057,-586.040973767324,-585.8398615594422,-585.6387493515605,-585.4376371436787,-585.236524935797,-585.0354127279154,-584.8343005200336,-584.6331883121519,-584.4320761042701,-584.2309638963884,-584.0298516885068,-583.828739480625,-583.6276272727433,-583.4265150648615,-583.2254028569798,-583.0242906490981,-582.8231784412164,-582.6220662333347,-582.4209540254529,-582.2198418175713,-582.0187296096896,-581.8176174018079,-581.6165051939262,-581.4153929860444,-581.2142807781627,-581.013168570281,-580.8120563623992,-580.6109441545176,-580.4098319466358,-580.2087197387541,-580.0076075308724,-579.8064953229906,-579.605383115109,-579.4042709072272,-579.2031586993455,-579.0020464914638,-578.800934283582,-578.5998220757003,-578.3987098678186,-578.197597659937,-577.9964854520553,-577.7953732441734,-577.5942610362918,-577.3931488284101,-577.1920366205284,-576.9909244126467,-576.7898122047649,-576.5886999968832,-576.3875877890014,-576.1864755811198,-575.9853633732381,-575.7842511653563,-575.5831389574746,-575.3820267495928,-575.1809145417112,-574.9798023338295,-574.7786901259477,-574.577577918066,-574.3764657101842,-574.1753535023025,-573.974241294421,-573.7731290865391,-573.5720168786575,-573.3709046707756,-573.169792462894,-572.9686802550124,-572.7675680471306,-572.5664558392489,-572.3653436313671,-572.1642314234854,-571.9631192156037,-571.762007007722,-571.5608947998403,-571.3597825919585,-571.1586703840768,-570.9575581761951,-570.7564459683134,-570.5553337604317,-570.3542215525499,-570.1531093446682,-569.9519971367865,-569.7508849289047,-569.5497727210231,-569.3486605131413,-569.1475483052596,-568.946436097378,-568.7453238894961,-568.5442116816146,-568.3430994737328,-568.1419872658511,-567.9408750579694,-567.7397628500876,-567.5386506422059,-567.3375384343242,-567.1364262264425,-566.9353140185608,-566.734201810679,-566.5330896027973,-566.3319773949155,-566.1308651870339,-565.9297529791522,-565.7286407712704,-565.5275285633887,-565.3264163555069,-565.1253041476253,-564.9241919397437,-564.7230797318618,-564.5219675239802,-564.3208553160983,-564.1197431082167,-563.9186309003351,-563.7175186924533,-563.5164064845716,-563.3152942766898,-563.1141820688081,-562.9130698609265,-562.7119576530447,-562.510845445163,-562.3097332372812,-562.1086210293995,-561.9075088215178,-561.7063966136361,-561.5052844057544,-561.3041721978726,-561.1030599899909,-560.9019477821092,-560.7008355742275,-560.4997233663458,-560.298611158464,-560.0974989505823,-559.8963867427007,-559.6952745348189,-559.4941623269373,-559.2930501190555,-559.0919379111738,-558.8908257032921,-558.6897134954103,-558.4886012875287,-558.2874890796469,-558.0863768717652,-557.8852646638835,-557.6841524560017,-557.48304024812,-557.2819280402383,-557.0808158323566,-556.8797036244749,-556.6785914165931,-556.4774792087114,-556.2763670008297,-556.075254792948,-555.8741425850664,-555.6730303771845,-555.4719181693029,-555.270805961421,-555.0696937535395,-554.8685815456578,-554.667469337776,-554.4663571298943,-554.2652449220125,-554.0641327141309,-553.8630205062492,-553.6619082983674,-553.4607960904857,-553.2596838826039,-553.0585716747222,-552.8574594668406,-552.6563472589588,-552.4552350510771,-552.2541228431953,-552.0530106353136,-551.851898427432,-551.6507862195502,-551.4496740116685,-551.2485618037869,-551.047449595905,-550.8463373880234,-550.6452251801417,-550.44411297226,-550.2430007643783,-550.0418885564965,-549.8407763486148,-549.6396641407331,-549.4385519328514,-549.2374397249697,-549.0363275170879,-548.8352153092062,-548.6341031013244,-548.4329908934428,-548.2318786855611,-548.0307664776793,-547.8296542697976,-547.6285420619158,-547.4274298540342,-547.2263176461526,-547.0252054382707,-546.824093230389,-546.6229810225072,-546.4218688146256,-546.220756606744,-546.0196443988622,-545.8185321909805,-545.6174199830987,-545.416307775217,-545.2151955673354,-545.0140833594536,-544.8129711515719,-544.6118589436901,-544.4107467358084,-544.2096345279267,-544.008522320045,-543.8074101121633,-543.6062979042815,-543.4051856963998,-543.2040734885181,-543.0029612806364,-542.8018490727547,-542.6007368648729,-542.3996246569913,-542.1985124491096,-541.9974002412278,-541.7962880333462,-541.5951758254644,-541.3940636175827,-541.192951409701,-540.9918392018192,-540.7907269939376,-540.5896147860558,-540.3885025781741,-540.1873903702924,-539.9862781624106,-539.7851659545289,-539.5840537466472,-539.3829415387655,-539.1818293308838,-538.980717123002,-538.7796049151203,-538.5784927072386,-538.377380499357,-538.1762682914753,-537.9751560835934,-537.7740438757118,-537.57293166783,-537.3718194599484,-537.1707072520667,-536.9695950441849,-536.7684828363032,-536.5673706284214,-536.3662584205398,-536.1651462126581,-535.9640340047763,-535.7629217968946,-535.5618095890128,-535.3606973811311,-535.1595851732495,-534.9584729653677,-534.757360757486,-534.5562485496042,-534.3551363417225,-534.154024133841,-533.9529119259591,-533.7517997180775,-533.5506875101956,-533.349575302314,-533.1484630944323,-532.9473508865506,-532.7462386786689,-532.5451264707871,-532.3440142629054,-532.1429020550237,-531.941789847142,-531.7406776392603,-531.5395654313785,-531.3384532234968,-531.1373410156151,-530.9362288077333,-530.7351165998517,-530.5340043919699,-530.3328921840882,-530.1317799762065,-529.9306677683247,-529.7295555604431,-529.5284433525613,-529.3273311446796,-529.126218936798,-528.9251067289161,-528.7239945210345,-528.5228823131528,-528.3217701052711,-528.1206578973894,-527.9195456895076,-527.7184334816259,-527.5173212737442,-527.3162090658625,-527.1150968579808,-526.913984650099,-526.7128724422173,-526.5117602343355,-526.3106480264539,-526.1095358185722,-525.9084236106904,-525.7073114028087,-525.5061991949269,-525.3050869870453,-525.1039747791637,-524.9028625712818,-524.7017503634002,-524.5006381555183,-524.2995259476368,-524.098413739755,-523.8973015318733,-523.6961893239916,-523.4950771161098,-523.2939649082282,-523.0928527003464,-522.8917404924647,-522.690628284583,-522.4895160767012,-522.2884038688196,-522.0872916609378,-521.8861794530561,-521.6850672451744,-521.4839550372926,-521.2828428294109,-521.0817306215292,-520.8806184136475,-520.6795062057657,-520.478393997884,-520.2772817900023,-520.0761695821207,-519.875057374239,-519.6739451663572,-519.4728329584755,-519.2717207505938,-519.0706085427121,-518.8694963348304,-518.6683841269486,-518.4672719190669,-518.2661597111852,-518.0650475033035,-517.8639352954218,-517.66282308754,-517.4617108796583,-517.2605986717766,-517.0594864638949,-516.8583742560131,-516.6572620481314,-516.4561498402497,-516.255037632368,-516.0539254244864,-515.8528132166045,-515.6517010087229,-515.4505888008412,-515.2494765929595,-515.0483643850778,-514.847252177196,-514.6461399693143,-514.4450277614326,-514.2439155535509,-514.0428033456691,-513.8416911377874,-513.6405789299057,-513.439466722024,-513.2383545141423,-513.0372423062605,-512.8361300983788,-512.6350178904971,-512.4339056826154,-512.2327934747337,-512.0316812668519,-511.83056905897024,-511.62945685108855,-511.4283446432068,-511.2272324353251,-511.02612022744336,-510.82500801956166,-510.62389581168,-510.4227836037982,-510.2216713959165,-510.0205591880348,-509.8194469801531,-509.61833477227134,-509.41722256438965,-509.2161103565079,-509.0149981486262,-508.8138859407445,-508.61277373286276,-508.41166152498107,-508.2105493170993,-508.0094371092176,-507.80832490133594,-507.6072126934542,-507.40610048557244,-507.20498827769075,-507.003876069809,-506.80276386192736,-506.6016516540456,-506.40053944616386,-506.19942723828217,-505.9983150304004,-505.7972028225187,-505.59609061463703,-505.3949784067553,-505.19386619887354,-504.9927539909919,-504.79164178311015,-504.59052957522846,-504.3894173673467,-504.18830515946496,-503.9871929515833,-503.7860807437016,-503.5849685358198,-503.38385632793813,-503.1827441200564,-502.9816319121747,-502.780519704293,-502.57940749641125,-502.37829528852956,-502.1771830806478,-501.9760708727661,-501.7749586648844,-501.5738464570027,-501.3727342491209,-501.17162204123923,-500.97050983335754,-500.7693976254758,-500.5682854175941,-500.36717320971235,-500.16606100183066,-499.96494879394896,-499.7638365860672,-499.5627243781855,-499.3616121703038,-499.160499962422,-498.9593877545404,-498.75827554665864,-498.5571633387769,-498.3560511308952,-498.15493892301345,-497.9538267151318,-497.75271450725006,-497.5516022993683,-497.3504900914866,-497.14937788360487,-496.9482656757232,-496.7471534678415,-496.54604125995974,-496.344929052078,-496.1438168441963,-495.9427046363146,-495.7415924284329,-495.54048022055116,-495.3393680126694,-495.1382558047877,-494.937143596906,-494.7360313890243,-494.5349191811426,-494.33380697326083,-494.1326947653791,-493.93158255749745,-493.7304703496157,-493.529358141734,-493.32824593385226,-493.1271337259705,-492.9260215180889,-492.7249093102071,-492.5237971023254,-492.3226848944437,-492.12157268656193,-491.92046047868024,-491.71934827079855,-491.5182360629168,-491.3171238550351,-491.11601164715336,-490.91489943927166,-490.71378723139,-490.5126750235082,-490.3115628156265,-490.1104506077448,-489.9093383998631,-489.70822619198134,-489.50711398409965,-489.3060017762179,-489.10488956833615,-488.9037773604545,-488.70266515257276,-488.50155294469107,-488.3004407368093,-488.0993285289276,-487.89821632104594,-487.6971041131642,-487.49599190528244,-487.29487969740075,-487.093767489519,-486.8926552816373,-486.6915430737556,-486.49043086587386,-486.28931865799217,-486.0882064501105,-485.8870942422287,-485.68598203434703,-485.4848698264653,-485.28375761858354,-485.0826454107019,-484.88153320282015,-484.6804209949384,-484.4793087870567,-484.27819657917496,-484.0770843712933,-483.8759721634116,-483.6748599555298,-483.47374774764813,-483.2726355397664,-483.0715233318847,-482.870411124003,-482.66929891612125,-482.4681867082395,-482.2670745003578,-482.0659622924761,-481.8648500845944,-481.6637378767127,-481.4626256688309,-481.26151346094923,-481.06040125306754,-480.8592890451858,-480.6581768373041,-480.45706462942235,-480.2559524215406,-480.05484021365896,-479.8537280057772,-479.6526157978955,-479.4515035900138,-479.250391382132,-479.0492791742504,-478.84816696636864,-478.6470547584869,-478.4459425506052,-478.24483034272345,-478.04371813484175,-477.84260592696006,-477.6414937190783,-477.4403815111966,-477.23926930331487,-477.0381570954332,-476.8370448875515,-476.63593267966974,-476.434820471788,-476.2337082639063,-476.0325960560246,-475.83148384814285,-475.63037164026116,-475.4292594323794,-475.2281472244977,-475.027035016616,-474.8259228087343,-474.6248106008526,-474.42369839297083,-474.2225861850891,-474.02147397720745,-473.8203617693257,-473.61924956144395,-473.41813735356226,-473.2170251456805,-473.0159129377989,-472.8148007299171,-472.6136885220354,-472.4125763141537,-472.21146410627193,-472.01035189839024,-471.80923969050855,-471.6081274826268,-471.40701527474505,-471.20590306686336,-471.00479085898166,-470.8036786511,-470.6025664432182,-470.4014542353365,-470.2003420274548,-469.9992298195731,-469.79811761169134,-469.59700540380965,-469.3958931959279,-469.19478098804615,-468.9936687801645,-468.79255657228276,-468.59144436440107,-468.3903321565193,-468.1892199486376,-467.98810774075594,-467.7869955328742,-467.58588332499244,-467.38477111711074,-467.183658909229,-466.9825467013473,-466.7814344934656,-466.58032228558386,-466.37921007770217,-466.1780978698205,-465.9769856619387,-465.77587345405703,-465.5747612461753,-465.37364903829354,-465.1725368304119,-464.97142462253015,-464.7703124146484,-464.5692002067667,-464.36808799888496,-464.1669757910033,-463.9658635831216,-463.7647513752398,-463.56363916735813,-463.3625269594764,-463.1614147515947,-462.960302543713,-462.75919033583125,-462.5580781279495,-462.3569659200678,-462.1558537121861,-461.9547415043044,-461.7536292964227,-461.5525170885409,-461.35140488065923,-461.15029267277754,-460.9491804648958,-460.7480682570141,-460.54695604913235,-460.3458438412506,-460.14473163336896,-459.9436194254872,-459.7425072176055,-459.5413950097238,-459.340282801842,-459.1391705939604,-458.93805838607864,-458.7369461781969,-458.5358339703152,-458.33472176243345,-458.13360955455175,-457.93249734667006,-457.7313851387883,-457.5302729309066,-457.32916072302487,-457.1280485151432,-456.9269363072615,-456.72582409937974,-456.524711891498,-456.3235996836163,-456.1224874757346,-455.92137526785285,-455.72026305997116,-455.5191508520894,-455.3180386442077,-455.116926436326,-454.9158142284443,-454.7147020205626,-454.51358981268083,-454.3124776047991,-454.11136539691745,-453.9102531890357,-453.70914098115395,-453.50802877327226,-453.3069165653905,-453.1058043575089,-452.9046921496271,-452.7035799417454,-452.5024677338637,-452.30135552598193,-452.10024331810024,-451.89913111021855,-451.6980189023368,-451.49690669445505,-451.29579448657336,-451.09468227869166,-450.89357007081,-450.6924578629282,-450.4913456550465,-450.2902334471648,-450.0891212392831,-449.88800903140134,-449.68689682351965,-449.4857846156379,-449.28467240775615,-449.0835601998745,-448.88244799199276,-448.68133578411107,-448.4802235762293,-448.27911136834757,-448.07799916046594,-447.8768869525842,-447.67577474470244,-447.47466253682074,-447.27355032893905,-447.0724381210573,-446.8713259131756,-446.67021370529386,-446.46910149741217,-446.2679892895305,-446.0668770816487,-445.86576487376703,-445.6646526658853,-445.46354045800354,-445.2624282501219,-445.06131604224015,-444.8602038343584,-444.6590916264767,-444.45797941859496,-444.2568672107133,-444.0557550028316,-443.8546427949498,-443.65353058706813,-443.4524183791864,-443.2513061713047,-443.050193963423,-442.84908175554125,-442.6479695476595,-442.4468573397778,-442.2457451318961,-442.0446329240144,-441.8435207161327,-441.6424085082509,-441.44129630036923,-441.24018409248754,-441.0390718846058,-440.8379596767241,-440.63684746884235,-440.4357352609606,-440.23462305307896,-440.0335108451972,-439.8323986373155,-439.63128642943377,-439.430174221552,-439.2290620136704,-439.02794980578864,-438.8268375979069,-438.6257253900252,-438.42461318214345,-438.22350097426175,-438.02238876638006,-437.8212765584983,-437.6201643506166,-437.41905214273487,-437.2179399348532,-437.0168277269715,-436.81571551908974,-436.614603311208,-436.4134911033263,-436.2123788954446,-436.01126668756285,-435.81015447968116,-435.6090422717994,-435.40793006391766,-435.206817856036,-435.0057056481543,-434.8045934402726,-434.60348123239083,-434.4023690245091,-434.20125681662745,-434.0001446087457,-433.79903240086395,-433.59792019298226,-433.3968079851005,-433.1956957772188,-432.9945835693371,-432.7934713614554,-432.5923591535737,-432.39124694569193,-432.19013473781024,-431.98902252992855,-431.7879103220468,-431.58679811416505,-431.38568590628336,-431.18457369840166,-430.9834614905199,-430.7823492826382,-430.5812370747565,-430.3801248668748,-430.1790126589931,-429.97790045111134,-429.77678824322965,-429.5756760353479,-429.37456382746615,-429.1734516195845,-428.97233941170276,-428.771227203821,-428.5701149959393,-428.3690027880576,-428.16789058017594,-427.9667783722942,-427.76566616441244,-427.56455395653074,-427.36344174864905,-427.1623295407673,-426.9612173328856,-426.76010512500386,-426.5589929171221,-426.3578807092405,-426.1567685013587,-425.95565629347703,-425.7545440855953,-425.55343187771354,-425.3523196698319,-425.15120746195015,-424.9500952540684,-424.7489830461867,-424.54787083830496,-424.34675863042327,-424.1456464225416,-423.9445342146598,-423.74342200677813,-423.5423097988964,-423.3411975910147,-423.140085383133,-422.93897317525125,-422.7378609673695,-422.5367487594878,-422.3356365516061,-422.13452434372437,-421.9334121358427,-421.7322999279609,-421.53118772007923,-421.33007551219754,-421.1289633043158,-420.9278510964341,-420.72673888855235,-420.5256266806706,-420.32451447278896,-420.1234022649072,-419.92229005702546,-419.72117784914377,-419.520065641262,-419.3189534333804,-419.11784122549864,-418.9167290176169,-418.7156168097352,-418.51450460185345,-418.31339239397175,-418.11228018609006,-417.9111679782083,-417.71005577032656,-417.50894356244487,-417.3078313545632,-417.1067191466815,-416.90560693879974,-416.704494730918,-416.5033825230363,-416.3022703151546,-416.10115810727285,-415.90004589939116,-415.6989336915094,-415.49782148362766,-415.296709275746,-415.0955970678643,-414.8944848599826,-414.69337265210083,-414.4922604442191,-414.29114823633745,-414.0900360284557,-413.88892382057395,-413.68781161269226,-413.4866994048105,-413.2855871969288,-413.0844749890471,-412.8833627811654,-412.6822505732837,-412.48113836540193,-412.28002615752024,-412.07891394963855,-411.8778017417568,-411.67668953387505,-411.47557732599336,-411.27446511811166,-411.0733529102299,-410.8722407023482,-410.6711284944665,-410.47001628658484,-410.2689040787031,-410.06779187082134,-409.86667966293965,-409.6655674550579,-409.46445524717615,-409.2633430392945,-409.06223083141276,-408.861118623531,-408.6600064156493,-408.4588942077676,-408.25778199988594,-408.0566697920042,-407.85555758412244,-407.65444537624074,-407.45333316835905,-407.2522209604773,-407.0511087525956,-406.84999654471386,-406.6488843368321,-406.4477721289505,-406.2466599210687,-406.04554771318703,-405.8444355053053,-405.64332329742354,-405.4422110895419,-405.24109888166015,-405.0399866737784,-404.8388744658967,-404.63776225801496,-404.43665005013327,-404.2355378422516,-404.0344256343698,-403.83331342648813,-403.6322012186064,-403.4310890107247,-403.229976802843,-403.02886459496125,-402.8277523870795,-402.6266401791978,-402.4255279713161,-402.22441576343437,-402.0233035555527,-401.8221913476709,-401.62107913978923,-401.41996693190754,-401.2188547240258,-401.0177425161441,-400.81663030826235,-400.6155181003806,-400.41440589249896,-400.2132936846172,-400.01218147673546,-399.81106926885377,-399.609957060972,-399.4088448530904,-399.20773264520864,-399.0066204373269,-398.8055082294452,-398.60439602156345,-398.40328381368175,-398.20217160580006,-398.0010593979183,-397.79994719003656,-397.59883498215487,-397.3977227742732,-397.1966105663915,-396.99549835850974,-396.794386150628,-396.5932739427463,-396.3921617348646,-396.19104952698285,-395.98993731910116,-395.7888251112194,-395.58771290333766,-395.386600695456,-395.1854884875743,-394.9843762796926,-394.78326407181083,-394.5821518639291,-394.38103965604745,-394.1799274481657,-393.97881524028395,-393.77770303240226,-393.5765908245205,-393.3754786166388,-393.1743664087571,-392.9732542008754,-392.7721419929937,-392.57102978511193,-392.36991757723024,-392.16880536934855,-391.9676931614668,-391.76658095358505,-391.56546874570336,-391.36435653782166,-391.1632443299399,-390.9621321220582,-390.7610199141765,-390.55990770629484,-390.3587954984131,-390.15768329053134,-389.95657108264965,-389.7554588747679,-389.5543466668862,-389.3532344590045,-389.15212225112276,-388.951010043241,-388.7498978353593,-388.5487856274776,-388.34767341959594,-388.1465612117142,-387.94544900383244,-387.74433679595074,-387.54322458806905,-387.3421123801873,-387.1410001723056,-386.93988796442386,-386.7387757565421,-386.5376635486605,-386.3365513407787,-386.135439132897,-385.9343269250153,-385.73321471713354,-385.5321025092519,-385.33099030137015,-385.1298780934884,-384.9287658856067,-384.72765367772496,-384.52654146984327,-384.3254292619616,-384.1243170540798,-383.9232048461981,-383.7220926383164,-383.5209804304347,-383.319868222553,-383.11875601467125,-382.9176438067895,-382.7165315989078,-382.5154193910261,-382.31430718314436,-382.1131949752627,-381.9120827673809,-381.7109705594992,-381.50985835161754,-381.3087461437358,-381.1076339358541,-380.90652172797235,-380.7054095200906,-380.50429731220896,-380.3031851043272,-380.10207289644546,-379.90096068856377,-379.699848480682,-379.49873627280033,-379.29762406491864,-379.0965118570369,-378.8953996491552,-378.69428744127345,-378.49317523339175,-378.29206302551006,-378.0909508176283,-377.88983860974656,-377.68872640186487,-377.4876141939832,-377.2865019861014,-377.08538977821974,-376.884277570338,-376.6831653624563,-376.4820531545746,-376.28094094669285,-376.07982873881116,-375.8787165309294,-375.67760432304766,-375.476492115166,-375.2753799072843,-375.0742676994025,-374.87315549152083,-374.6720432836391,-374.47093107575745,-374.2698188678757,-374.06870665999395,-373.86759445211226,-373.6664822442305,-373.4653700363488,-373.2642578284671,-373.0631456205854,-372.8620334127036,-372.66092120482193,-372.45980899694024,-372.25869678905855,-372.0575845811768,-371.85647237329505,-371.6553601654134,-371.45424795753166,-371.2531357496499,-371.0520235417682,-370.8509113338865,-370.6497991260047,-370.4486869181231,-370.24757471024134,-370.04646250235965,-369.8453502944779,-369.6442380865962,-369.4431258787145,-369.24201367083276,-369.040901462951,-368.8397892550693,-368.6386770471876,-368.4375648393059,-368.2364526314242,-368.03534042354244,-367.83422821566074,-367.63311600777905,-367.4320037998973,-367.2308915920156,-367.02977938413386,-366.8286671762521,-366.6275549683705,-366.4264427604887,-366.225330552607,-366.0242183447253,-365.82310613684353,-365.6219939289619,-365.42088172108015,-365.2197695131984,-365.0186573053167,-364.81754509743496,-364.61643288955327,-364.4153206816716,-364.2142084737898,-364.0130962659081,-363.8119840580264,-363.6108718501447,-363.409759642263,-363.20864743438125,-363.0075352264995,-362.8064230186178,-362.6053108107361,-362.40419860285436,-362.2030863949727,-362.0019741870909,-361.8008619792092,-361.59974977132754,-361.3986375634458,-361.1975253555641,-360.99641314768235,-360.7953009398006,-360.59418873191896,-360.3930765240372,-360.19196431615546,-359.99085210827377,-359.789739900392,-359.58862769251033,-359.38751548462864,-359.1864032767469,-358.9852910688652,-358.78417886098345,-358.58306665310175,-358.38195444522006,-358.1808422373383,-357.97973002945656,-357.77861782157487,-357.5775056136932,-357.3763934058114,-357.17528119792973,-356.974168990048,-356.7730567821663,-356.5719445742846,-356.37083236640285,-356.16972015852116,-355.9686079506394,-355.76749574275766,-355.566383534876,-355.3652713269943,-355.1641591191125,-354.96304691123083,-354.7619347033491,-354.56082249546745,-354.3597102875857,-354.15859807970395,-353.95748587182226,-353.7563736639405,-353.5552614560588,-353.3541492481771,-353.1530370402954,-352.9519248324136,-352.750812624532,-352.54970041665024,-352.34858820876855,-352.1474760008868,-351.94636379300505,-351.7452515851234,-351.54413937724166,-351.3430271693599,-351.1419149614782,-350.9408027535965,-350.7396905457148,-350.5385783378331,-350.33746612995134,-350.13635392206965,-349.9352417141879,-349.7341295063062,-349.5330172984245,-349.33190509054276,-349.130792882661,-348.9296806747793,-348.7285684668976,-348.5274562590159,-348.3263440511342,-348.12523184325244,-347.92411963537074,-347.72300742748905,-347.5218952196073,-347.3207830117256,-347.11967080384386,-346.9185585959621,-346.7174463880805,-346.5163341801987,-346.315221972317,-346.1141097644353,-345.91299755655353,-345.7118853486719,-345.51077314079015,-345.3096609329084,-345.1085487250267,-344.90743651714496,-344.70632430926327,-344.5052121013816,-344.3040998934998,-344.1029876856181,-343.9018754777364,-343.7007632698547,-343.499651061973,-343.29853885409125,-343.0974266462095,-342.8963144383278,-342.6952022304461,-342.49409002256436,-342.2929778146827,-342.0918656068009,-341.8907533989192,-341.68964119103754,-341.4885289831558,-341.2874167752741,-341.08630456739235,-340.8851923595106,-340.68408015162896,-340.4829679437472,-340.28185573586546,-340.08074352798377,-339.879631320102,-339.67851911222033,-339.47740690433864,-339.2762946964569,-339.0751824885752,-338.87407028069345,-338.67295807281175,-338.47184586493006,-338.2707336570483,-338.06962144916656,-337.86850924128487,-337.6673970334032,-337.4662848255214,-337.26517261763973,-337.064060409758,-336.8629482018763,-336.6618359939946,-336.46072378611285,-336.25961157823116,-336.0584993703494,-335.85738716246766,-335.656274954586,-335.4551627467043,-335.2540505388225,-335.05293833094083,-334.8518261230591,-334.65071391517745,-334.4496017072957,-334.24848949941395,-334.04737729153226,-333.8462650836505,-333.6451528757688,-333.4440406678871,-333.2429284600054,-333.0418162521236,-332.840704044242,-332.63959183636024,-332.4384796284785,-332.2373674205968,-332.03625521271505,-331.8351430048334,-331.63403079695166,-331.4329185890699,-331.2318063811882,-331.0306941733065,-330.8295819654248,-330.6284697575431,-330.42735754966134,-330.2262453417796,-330.0251331338979,-329.8240209260162,-329.6229087181345,-329.42179651025276,-329.220684302371,-329.0195720944893,-328.8184598866076,-328.6173476787259,-328.4162354708442,-328.21512326296244,-328.0140110550807,-327.81289884719905,-327.6117866393173,-327.4106744314356,-327.20956222355386,-327.0084500156721,-326.8073378077905,-326.6062255999087,-326.405113392027,-326.2040011841453,-326.00288897626353,-325.80177676838184,-325.60066456050015,-325.3995523526184,-325.1984401447367,-324.99732793685496,-324.79621572897327,-324.5951035210916,-324.3939913132098,-324.1928791053281,-323.9917668974464,-323.7906546895647,-323.58954248168294,-323.38843027380125,-323.1873180659195,-322.9862058580378,-322.7850936501561,-322.58398144227436,-322.3828692343927,-322.1817570265109,-321.9806448186292,-321.77953261074754,-321.5784204028658,-321.37730819498404,-321.17619598710235,-320.9750837792206,-320.77397157133896,-320.5728593634572,-320.37174715557546,-320.17063494769377,-319.969522739812,-319.76841053193033,-319.56729832404864,-319.3661861161669,-319.16507390828514,-318.96396170040344,-318.76284949252175,-318.56173728464006,-318.3606250767583,-318.15951286887656,-317.95840066099487,-317.7572884531132,-317.5561762452314,-317.35506403734973,-317.153951829468,-316.95283962158624,-316.7517274137046,-316.55061520582285,-316.34950299794116,-316.1483907900594,-315.94727858217766,-315.746166374296,-315.5450541664143,-315.3439419585325,-315.14282975065083,-314.9417175427691,-314.7406053348874,-314.5394931270057,-314.33838091912395,-314.13726871124226,-313.93615650336056,-313.7350442954788,-313.5339320875971,-313.3328198797154,-313.1317076718336,-312.930595463952,-312.72948325607024,-312.5283710481885,-312.3272588403068,-312.12614663242505,-311.9250344245434,-311.72392221666166,-311.5228100087799,-311.3216978008982,-311.1205855930165,-310.9194733851348,-310.7183611772531,-310.51724896937134,-310.3161367614896,-310.1150245536079,-309.9139123457262,-309.7128001378445,-309.51168792996276,-309.310575722081,-309.1094635141993,-308.9083513063176,-308.7072390984359,-308.5061268905542,-308.30501468267244,-308.1039024747907,-307.90279026690905,-307.7016780590273,-307.5005658511456,-307.29945364326386,-307.0983414353821,-306.8972292275005,-306.6961170196187,-306.495004811737,-306.2938926038553,-306.09278039597353,-305.89166818809184,-305.69055598021015,-305.4894437723284,-305.2883315644467,-305.08721935656496,-304.88610714868327,-304.6849949408016,-304.4838827329198,-304.2827705250381,-304.0816583171564,-303.8805461092747,-303.67943390139294,-303.47832169351125,-303.2772094856295,-303.0760972777478,-302.8749850698661,-302.67387286198436,-302.4727606541027,-302.2716484462209,-302.0705362383392,-301.86942403045754,-301.6683118225758,-301.46719961469404,-301.26608740681235,-301.0649751989306,-300.86386299104896,-300.6627507831672,-300.46163857528546,-300.26052636740377,-300.059414159522,-299.8583019516403,-299.65718974375864,-299.4560775358769,-299.25496532799514,-299.05385312011344,-298.85274091223175,-298.65162870435006,-298.4505164964683,-298.24940428858656,-298.04829208070487,-297.8471798728232,-297.6460676649414,-297.44495545705973,-297.243843249178,-297.04273104129624,-296.8416188334146,-296.64050662553285,-296.43939441765116,-296.2382822097694,-296.03717000188766,-295.836057794006,-295.6349455861243,-295.4338333782425,-295.23272117036083,-295.03160896247914,-294.8304967545974,-294.6293845467157,-294.42827233883395,-294.22716013095226,-294.02604792307056,-293.8249357151888,-293.6238235073071,-293.4227112994254,-293.2215990915436,-293.020486883662,-292.81937467578024,-292.6182624678985,-292.4171502600168,-292.21603805213505,-292.0149258442534,-291.81381363637166,-291.6127014284899,-291.4115892206082,-291.21047701272647,-291.0093648048448,-290.8082525969631,-290.60714038908134,-290.4060281811996,-290.2049159733179,-290.0038037654362,-289.8026915575545,-289.60157934967276,-289.400467141791,-289.1993549339093,-288.9982427260276,-288.7971305181459,-288.5960183102642,-288.39490610238244,-288.1937938945007,-287.99268168661905,-287.7915694787373,-287.5904572708556,-287.38934506297386,-287.1882328550921,-286.9871206472105,-286.7860084393287,-286.584896231447,-286.3837840235653,-286.18267181568353,-285.98155960780184,-285.78044739992015,-285.5793351920384,-285.3782229841567,-285.17711077627496,-284.97599856839327,-284.7748863605116,-284.5737741526298,-284.3726619447481,-284.1715497368664,-283.9704375289847,-283.76932532110294,-283.56821311322125,-283.3671009053395,-283.16598869745775,-282.9648764895761,-282.76376428169436,-282.56265207381267,-282.3615398659309,-282.1604276580492,-281.95931545016754,-281.7582032422858,-281.55709103440404,-281.35597882652235,-281.1548666186406,-280.9537544107589,-280.7526422028772,-280.55152999499546,-280.35041778711377,-280.149305579232,-279.9481933713503,-279.74708116346864,-279.5459689555869,-279.34485674770514,-279.14374453982344,-278.94263233194175,-278.74152012406,-278.5404079161783,-278.33929570829656,-278.13818350041487,-277.9370712925332,-277.7359590846514,-277.53484687676973,-277.333734668888,-277.13262246100624,-276.9315102531246,-276.73039804524285,-276.5292858373611,-276.3281736294794,-276.12706142159766,-275.925949213716,-275.7248370058343,-275.5237247979525,-275.32261259007083,-275.12150038218914,-274.9203881743074,-274.7192759664257,-274.51816375854395,-274.3170515506622,-274.11593934278056,-273.9148271348988,-273.7137149270171,-273.5126027191354,-273.3114905112536,-273.110378303372,-272.90926609549024,-272.7081538876085,-272.5070416797268,-272.30592947184505,-272.10481726396335,-271.90370505608166,-271.7025928481999,-271.5014806403182,-271.30036843243647,-271.0992562245548,-270.8981440166731,-270.69703180879134,-270.4959196009096,-270.2948073930279,-270.0936951851462,-269.89258297726445,-269.69147076938276,-269.490358561501,-269.2892463536193,-269.0881341457376,-268.8870219378559,-268.6859097299742,-268.48479752209244,-268.2836853142107,-268.08257310632905,-267.8814608984473,-267.68034869056555,-267.47923648268386,-267.2781242748021,-267.0770120669205,-266.8758998590387,-266.674787651157,-266.4736754432753,-266.27256323539353,-266.07145102751184,-265.87033881963015,-265.6692266117484,-265.46811440386665,-265.26700219598496,-265.06588998810327,-264.8647777802216,-264.6636655723398,-264.4625533644581,-264.2614411565764,-264.0603289486947,-263.85921674081294,-263.65810453293125,-263.4569923250495,-263.25588011716775,-263.0547679092861,-262.85365570140436,-262.65254349352267,-262.4514312856409,-262.2503190777592,-262.0492068698775,-261.8480946619958,-261.6469824541141,-261.44587024623235,-261.2447580383506,-261.0436458304689,-260.8425336225872,-260.64142141470546,-260.44030920682377,-260.239196998942,-260.0380847910603,-259.8369725831786,-259.6358603752969,-259.4347481674152,-259.23363595953344,-259.03252375165175,-258.83141154377,-258.6302993358883,-258.42918712800656,-258.22807492012487,-258.0269627122432,-257.8258505043614,-257.62473829647973,-257.423626088598,-257.2225138807163,-257.02140167283454,-256.82028946495285,-256.61917725707116,-256.4180650491894,-256.2169528413077,-256.01584063342597,-255.81472842554427,-255.61361621766255,-255.41250400978083,-255.2113918018991,-255.0102795940174,-254.80916738613567,-254.60805517825395,-254.40694297037226,-254.20583076249054,-254.0047185546088,-253.8036063467271,-253.60249413884537,-253.40138193096368,-253.20026972308193,-252.9991575152002,-252.79804530731852,-252.59693309943677,-252.39582089155508,-252.19470868367335,-251.99359647579166,-251.7924842679099,-251.5913720600282,-251.3902598521465,-251.18914764426478,-250.98803543638306,-250.78692322850134,-250.58581102061962,-250.3846988127379,-250.18358660485617,-249.98247439697448,-249.78136218909276,-249.580249981211,-249.37913777332932,-249.1780255654476,-248.9769133575659,-248.77580114968416,-248.57468894180244,-248.37357673392074,-248.172464526039,-247.9713523181573,-247.77024011027558,-247.56912790239386,-247.36801569451214,-247.16690348663042,-246.96579127874872,-246.764679070867,-246.56356686298525,-246.36245465510356,-246.16134244722184,-245.96023023934012,-245.7591180314584,-245.55800582357668,-245.356893615695,-245.15578140781324,-244.95466919993154,-244.75355699204982,-244.55244478416807,-244.35133257628638,-244.15022036840466,-243.94910816052297,-243.74799595264122,-243.5468837447595,-243.3457715368778,-243.14465932899608,-242.94354712111436,-242.74243491323264,-242.54132270535095,-242.3402104974692,-242.13909828958748,-241.9379860817058,-241.73687387382407,-241.53576166594235,-241.33464945806062,-241.1335372501789,-240.9324250422972,-240.73131283441546,-240.53020062653377,-240.32908841865205,-240.1279762107703,-239.9268640028886,-239.7257517950069,-239.5246395871252,-239.32352737924344,-239.12241517136172,-238.92130296348003,-238.7201907555983,-238.5190785477166,-238.31796633983487,-238.11685413195315,-237.91574192407143,-237.7146297161897,-237.513517508308,-237.3124053004263,-237.11129309254454,-236.91018088466285,-236.70906867678113,-236.50795646889944,-236.3068442610177,-236.10573205313597,-235.90461984525427,-235.70350763737252,-235.50239542949083,-235.3012832216091,-235.1001710137274,-234.89905880584567,-234.69794659796395,-234.49683439008226,-234.29572218220054,-234.0946099743188,-233.8934977664371,-233.69238555855537,-233.49127335067365,-233.29016114279193,-233.08904893491024,-232.88793672702852,-232.68682451914677,-232.48571231126508,-232.28460010338335,-232.08348789550166,-231.8823756876199,-231.6812634797382,-231.4801512718565,-231.27903906397475,-231.07792685609306,-230.87681464821134,-230.67570244032962,-230.4745902324479,-230.27347802456617,-230.07236581668448,-229.87125360880276,-229.670141400921,-229.46902919303932,-229.2679169851576,-229.06680477727588,-228.86569256939416,-228.66458036151244,-228.46346815363074,-228.262355945749,-228.0612437378673,-227.86013152998558,-227.65901932210386,-227.45790711422214,-227.25679490634042,-227.05568269845872,-226.85457049057698,-226.65345828269525,-226.45234607481356,-226.25123386693184,-226.05012165905012,-225.8490094511684,-225.64789724328668,-225.446785035405,-225.24567282752324,-225.04456061964154,-224.84344841175982,-224.64233620387807,-224.44122399599638,-224.24011178811466,-224.03899958023297,-223.83788737235122,-223.63677516446953,-223.4356629565878,-223.23455074870608,-223.03343854082436,-222.83232633294264,-222.63121412506095,-222.4301019171792,-222.22898970929748,-222.0278775014158,-221.82676529353407,-221.62565308565235,-221.42454087777062,-221.2234286698889,-221.0223164620072,-220.82120425412546,-220.62009204624377,-220.41897983836205,-220.2178676304803,-220.0167554225986,-219.81564321471689,-219.6145310068352,-219.41341879895344,-219.21230659107172,-219.01119438319003,-218.8100821753083,-218.6089699674266,-218.40785775954487,-218.20674555166315,-218.00563334378143,-217.8045211358997,-217.603408928018,-217.4022967201363,-217.20118451225454,-217.00007230437285,-216.79896009649113,-216.5978478886094,-216.3967356807277,-216.19562347284597,-215.99451126496427,-215.79339905708252,-215.59228684920083,-215.3911746413191,-215.1900624334374,-214.98895022555567,-214.78783801767395,-214.58672580979226,-214.3856136019105,-214.1845013940288,-213.9833891861471,-213.78227697826537,-213.58116477038365,-213.38005256250193,-213.17894035462024,-212.97782814673852,-212.77671593885677,-212.57560373097508,-212.37449152309335,-212.17337931521163,-211.9722671073299,-211.7711548994482,-211.5700426915665,-211.36893048368475,-211.16781827580306,-210.96670606792134,-210.76559386003962,-210.5644816521579,-210.36336944427617,-210.16225723639448,-209.96114502851273,-209.760032820631,-209.55892061274932,-209.3578084048676,-209.15669619698588,-208.95558398910416,-208.75447178122243,-208.55335957334074,-208.352247365459,-208.1511351575773,-207.95002294969558,-207.74891074181383,-207.54779853393214,-207.34668632605042,-207.14557411816872,-206.94446191028698,-206.74334970240525,-206.54223749452356,-206.34112528664184,-206.14001307876012,-205.9389008708784,-205.73778866299668,-205.53667645511496,-205.33556424723324,-205.13445203935154,-204.93333983146982,-204.73222762358807,-204.53111541570638,-204.33000320782466,-204.12889099994297,-203.92777879206122,-203.72666658417953,-203.5255543762978,-203.32444216841606,-203.12332996053436,-202.92221775265264,-202.72110554477095,-202.5199933368892,-202.31888112900748,-202.1177689211258,-201.91665671324407,-201.71554450536235,-201.51443229748062,-201.3133200895989,-201.11220788171718,-200.91109567383546,-200.70998346595377,-200.50887125807205,-200.3077590501903,-200.1066468423086,-199.90553463442689,-199.7044224265452,-199.50331021866344,-199.30219801078172,-199.10108580290003,-198.89997359501828,-198.6988613871366,-198.49774917925487,-198.29663697137315,-198.09552476349143,-197.8944125556097,-197.693300347728,-197.4921881398463,-197.29107593196454,-197.08996372408285,-196.88885151620113,-196.6877393083194,-196.4866271004377,-196.28551489255597,-196.08440268467427,-195.88329047679252,-195.68217826891083,-195.4810660610291,-195.27995385314742,-195.07884164526567,-194.87772943738395,-194.67661722950226,-194.4755050216205,-194.2743928137388,-194.0732806058571,-193.87216839797537,-193.67105619009365,-193.46994398221193,-193.26883177433024,-193.0677195664485,-192.86660735856677,-192.66549515068508,-192.46438294280335,-192.26327073492163,-192.0621585270399,-191.8610463191582,-191.6599341112765,-191.45882190339475,-191.25770969551306,-191.05659748763134,-190.8554852797496,-190.6543730718679,-190.45326086398617,-190.25214865610448,-190.05103644822273,-189.849924240341,-189.64881203245932,-189.4476998245776,-189.24658761669588,-189.04547540881416,-188.84436320093243,-188.6432509930507,-188.442138785169,-188.2410265772873,-188.03991436940558,-187.83880216152383,-187.63768995364214,-187.43657774576042,-187.23546553787872,-187.03435332999697,-186.83324112211525,-186.63212891423356,-186.4310167063518,-186.22990449847012,-186.0287922905884,-185.8276800827067,-185.62656787482496,-185.42545566694324,-185.22434345906154,-185.02323125117982,-184.8221190432981,-184.62100683541638,-184.41989462753466,-184.21878241965294,-184.01767021177122,-183.81655800388953,-183.6154457960078,-183.41433358812606,-183.21322138024436,-183.01210917236264,-182.81099696448095,-182.6098847565992,-182.40877254871748,-182.2076603408358,-182.00654813295404,-181.80543592507235,-181.60432371719062,-181.4032115093089,-181.20209930142718,-181.00098709354546,-180.79987488566377,-180.59876267778205,-180.3976504699003,-180.1965382620186,-179.99542605413689,-179.79431384625516,-179.59320163837344,-179.39208943049172,-179.19097722261003,-178.98986501472828,-178.7887528068466,-178.58764059896487,-178.38652839108315,-178.18541618320143,-177.9843039753197,-177.783191767438,-177.58207955955626,-177.38096735167454,-177.17985514379285,-176.97874293591113,-176.7776307280294,-176.5765185201477,-176.375406312266,-176.17429410438427,-175.97318189650252,-175.77206968862083,-175.5709574807391,-175.3698452728574,-175.16873306497567,-174.96762085709395,-174.76650864921226,-174.5653964413305,-174.3642842334488,-174.1631720255671,-173.96205981768537,-173.76094760980365,-173.55983540192193,-173.35872319404024,-173.1576109861585,-172.95649877827677,-172.75538657039507,-172.55427436251335,-172.35316215463163,-172.1520499467499,-171.9509377388682,-171.7498255309865,-171.54871332310475,-171.34760111522306,-171.14648890734134,-170.9453766994596,-170.7442644915779,-170.54315228369617,-170.34204007581448,-170.14092786793273,-169.939815660051,-169.73870345216932,-169.5375912442876,-169.33647903640588,-169.13536682852416,-168.93425462064243,-168.7331424127607,-168.532030204879,-168.3309179969973,-168.12980578911558,-167.92869358123383,-167.72758137335214,-167.52646916547042,-167.32535695758872,-167.12424474970697,-166.92313254182525,-166.72202033394356,-166.5209081260618,-166.31979591818012,-166.1186837102984,-165.9175715024167,-165.71645929453496,-165.51534708665324,-165.31423487877154,-165.1131226708898,-164.9120104630081,-164.71089825512638,-164.50978604724466,-164.30867383936294,-164.10756163148122,-163.90644942359953,-163.7053372157178,-163.50422500783606,-163.30311279995436,-163.10200059207264,-162.90088838419092,-162.6997761763092,-162.49866396842748,-162.2975517605458,-162.09643955266404,-161.89532734478234,-161.69421513690062,-161.4931029290189,-161.29199072113718,-161.09087851325546,-160.88976630537377,-160.68865409749202,-160.4875418896103,-160.2864296817286,-160.08531747384689,-159.88420526596516,-159.68309305808344,-159.48198085020172,-159.28086864232003,-159.07975643443828,-158.8786442265566,-158.67753201867487,-158.47641981079312,-158.27530760291143,-158.0741953950297,-157.873083187148,-157.67197097926626,-157.47085877138454,-157.26974656350285,-157.06863435562113,-156.8675221477394,-156.6664099398577,-156.465297731976,-156.26418552409424,-156.06307331621252,-155.86196110833083,-155.6608489004491,-155.4597366925674,-155.25862448468567,-155.05751227680395,-154.85640006892226,-154.6552878610405,-154.4541756531588,-154.2530634452771,-154.05195123739534,-153.85083902951365,-153.64972682163193,-153.44861461375024,-153.2475024058685,-153.04639019798677,-152.84527799010507,-152.64416578222335,-152.44305357434163,-152.2419413664599,-152.0408291585782,-151.83971695069647,-151.63860474281475,-151.43749253493306,-151.23638032705134,-151.0352681191696,-150.8341559112879,-150.63304370340617,-150.43193149552448,-150.23081928764273,-150.029707079761,-149.82859487187932,-149.62748266399757,-149.42637045611588,-149.22525824823416,-149.02414604035243,-148.8230338324707,-148.621921624589,-148.4208094167073,-148.21969720882558,-148.01858500094383,-147.81747279306214,-147.61636058518042,-147.4152483772987,-147.21413616941697,-147.01302396153528,-146.81191175365356,-146.6107995457718,-146.40968733789012,-146.2085751300084,-146.0074629221267,-145.80635071424496,-145.60523850636324,-145.40412629848154,-145.2030140905998,-145.0019018827181,-144.80078967483638,-144.59967746695466,-144.39856525907294,-144.19745305119122,-143.99634084330953,-143.7952286354278,-143.59411642754606,-143.39300421966436,-143.19189201178264,-142.99077980390092,-142.7896675960192,-142.58855538813748,-142.3874431802558,-142.18633097237404,-141.98521876449234,-141.78410655661062,-141.58299434872887,-141.38188214084718,-141.18076993296546,-140.97965772508377,-140.77854551720202,-140.5774333093203,-140.3763211014386,-140.17520889355688,-139.97409668567516,-139.77298447779344,-139.57187226991172,-139.37076006203,-139.16964785414828,-138.9685356462666,-138.76742343838487,-138.56631123050312,-138.36519902262143,-138.1640868147397,-137.962974606858,-137.76186239897626,-137.56075019109457,-137.35963798321285,-137.1585257753311,-136.9574135674494,-136.7563013595677,-136.555189151686,-136.35407694380424,-136.15296473592252,-135.95185252804083,-135.7507403201591,-135.5496281122774,-135.34851590439567,-135.14740369651395,-134.94629148863223,-134.7451792807505,-134.5440670728688,-134.3429548649871,-134.14184265710534,-133.94073044922365,-133.73961824134193,-133.53850603346024,-133.3373938255785,-133.13628161769677,-132.93516940981507,-132.73405720193333,-132.53294499405163,-132.3318327861699,-132.1307205782882,-131.92960837040647,-131.72849616252475,-131.52738395464306,-131.32627174676134,-131.1251595388796,-130.9240473309979,-130.72293512311617,-130.52182291523445,-130.32071070735273,-130.119598499471,-129.9184862915893,-129.7173740837076,-129.51626187582588,-129.31514966794415,-129.11403746006243,-128.9129252521807,-128.711813044299,-128.51070083641727,-128.30958862853558,-128.10847642065386,-127.90736421277214,-127.70625200489042,-127.5051397970087,-127.30402758912697,-127.10291538124527,-126.90180317336355,-126.70069096548184,-126.4995787576001,-126.29846654971838,-126.09735434183668,-125.89624213395496,-125.69512992607325,-125.49401771819153,-125.29290551030981,-125.09179330242809,-124.89068109454638,-124.68956888666466,-124.48845667878295,-124.28734447090122,-124.0862322630195,-123.88512005513779,-123.68400784725607,-123.48289563937436,-123.28178343149263,-123.08067122361092,-122.8795590157292,-122.6784468078475,-122.47733459996577,-122.27622239208404,-122.07511018420233,-121.87399797632061,-121.6728857684389,-121.47177356055718,-121.27066135267548,-121.06954914479374,-120.86843693691203,-120.66732472903031,-120.4662125211486,-120.26510031326688,-120.06398810538515,-119.86287589750344,-119.66176368962172,-119.46065148174002,-119.2595392738583,-119.05842706597657,-118.85731485809485,-118.65620265021315,-118.45509044233143,-118.25397823444972,-118.05286602656798,-117.85175381868626,-117.65064161080456,-117.44952940292283,-117.24841719504113,-117.0473049871594,-116.84619277927769,-116.64508057139597,-116.44396836351426,-116.24285615563254,-116.04174394775083,-115.8406317398691,-115.63951953198737,-115.43840732410567,-115.23729511622395,-115.03618290834224,-114.8350707004605,-114.6339584925788,-114.43284628469708,-114.23173407681537,-114.03062186893365,-113.82950966105193,-113.62839745317021,-113.42728524528849,-113.22617303740678,-113.02506082952506,-112.82394862164334,-112.62283641376162,-112.42172420587991,-112.22061199799819,-112.01949979011648,-111.81838758223476,-111.61727537435304,-111.41616316647132,-111.2150509585896,-111.0139387507079,-110.81282654282617,-110.61171433494445,-110.41060212706273,-110.20948991918102,-110.0083777112993,-109.8072655034176,-109.60615329553586,-109.40504108765415,-109.20392887977243,-109.00281667189071,-108.801704464009,-108.60059225612727,-108.39948004824556,-108.19836784036384,-107.99725563248214,-107.79614342460042,-107.5950312167187,-107.39391900883697,-107.19280680095525,-106.99169459307355,-106.79058238519183,-106.58947017731012,-106.38835796942838,-106.18724576154668,-105.98613355366496,-105.78502134578325,-105.58390913790153,-105.38279693001981,-105.18168472213809,-104.98057251425637,-104.77946030637466,-104.57834809849294,-104.37723589061122,-104.1761236827295,-103.97501147484779,-103.77389926696607,-103.57278705908436,-103.37167485120263,-103.17056264332092,-102.9694504354392,-102.76833822755748,-102.56722601967577,-102.36611381179404,-102.16500160391233,-101.96388939603061,-101.7627771881489,-101.56166498026718,-101.36055277238547,-101.15944056450374,-100.95832835662203,-100.75721614874031,-100.55610394085859,-100.35499173297688,-100.15387952509515,-99.95276731721344,-99.75165510933172,-99.55054290145002,-99.3494306935683,-99.14831848568657,-98.94720627780485,-98.74609406992315,-98.54498186204142,-98.3438696541597,-98.14275744627798,-97.94164523839626,-97.74053303051456,-97.53942082263283,-97.33830861475113,-97.1371964068694,-96.93608419898769,-96.73497199110597,-96.53385978322424,-96.33274757534254,-96.13163536746082,-95.9305231595791,-95.72941095169737,-95.52829874381567,-95.32718653593395,-95.12607432805224,-94.9249621201705,-94.7238499122888,-94.52273770440708,-94.32162549652536,-94.12051328864365,-93.91940108076192,-93.71828887288021,-93.51717666499849,-93.31606445711678,-93.11495224923506,-92.91384004135335,-92.71272783347162,-92.51161562558991,-92.31050341770819,-92.10939120982647,-91.90827900194476,-91.70716679406303,-91.50605458618132,-91.3049423782996,-91.1038301704179,-90.90271796253617,-90.70160575465445,-90.50049354677273,-90.29938133889102,-90.0982691310093,-89.89715692312758,-89.69604471524586,-89.49493250736414,-89.29382029948243,-89.09270809160071,-88.891595883719,-88.69048367583727,-88.48937146795556,-88.28825926007384,-88.08714705219214,-87.88603484431042,-87.6849226364287,-87.48381042854697,-87.28269822066525,-87.08158601278355,-86.88047380490183,-86.67936159702012,-86.47824938913838,-86.27713718125668,-86.07602497337496,-85.87491276549325,-85.67380055761153,-85.4726883497298,-85.27157614184809,-85.07046393396637,-84.86935172608466,-84.66823951820294,-84.46712731032122,-84.2660151024395,-84.06490289455779,-83.86379068667607,-83.66267847879436,-83.46156627091263,-83.2604540630309,-83.0593418551492,-82.85822964726748,-82.65711743938577,-82.45600523150405,-82.25489302362233,-82.05378081574061,-81.8526686078589,-81.65155639997718,-81.45044419209546,-81.24933198421374,-81.04821977633202,-80.84710756845031,-80.64599536056859,-80.44488315268688,-80.24377094480515,-80.04265873692344,-79.84154652904172,-79.64043432116001,-79.4393221132783,-79.23820990539656,-79.03709769751485,-78.83598548963313,-78.63487328175142,-78.4337610738697,-78.232648865988,-78.03153665810626,-77.83042445022456,-77.62931224234283,-77.42820003446113,-77.2270878265794,-77.02597561869767,-76.82486341081596,-76.62375120293424,-76.42263899505254,-76.22152678717082,-76.0204145792891,-75.81930237140737,-75.61819016352567,-75.41707795564395,-75.21596574776224,-75.0148535398805,-74.81374133199878,-74.61262912411708,-74.41151691623536,-74.21040470835365,-74.00929250047191,-73.80818029259021,-73.60706808470849,-73.40595587682678,-73.20484366894506,-73.00373146106335,-72.80261925318162,-72.6015070452999,-72.40039483741819,-72.19928262953647,-71.99817042165476,-71.79705821377303,-71.59594600589132,-71.3948337980096,-71.1937215901279,-70.99260938224617,-70.79149717436444,-70.59038496648273,-70.38927275860101,-70.1881605507193,-69.98704834283758,-69.78593613495586,-69.58482392707414,-69.38371171919243,-69.18259951131071,-68.981487303429,-68.78037509554729,-68.57926288766555,-68.37815067978384,-68.17703847190212,-67.97592626402042,-67.7748140561387,-67.57370184825697,-67.37258964037525,-67.17147743249355,-66.97036522461183,-66.76925301673012,-66.56814080884838,-66.36702860096666,-66.16591639308496,-65.96480418520323,-65.76369197732153,-65.5625797694398,-65.36146756155809,-65.16035535367637,-64.95924314579464,-64.75813093791294,-64.55701873003122,-64.3559065221495,-64.15479431426779,-63.95368210638607,-63.75256989850435,-63.551457690622634,-63.35034548274092,-63.14923327485919,-62.94812106697748,-62.747008859095764,-62.54589665121404,-62.34478444333233,-62.14367223545061,-61.942560027568895,-61.74144781968718,-61.54033561180546,-61.33922340392375,-61.13811119604202,-60.936998988160305,-60.73588678027859,-60.53477457239687,-60.333662364515156,-60.13255015663344,-59.93143794875172,-59.73032574087001,-59.52921353298829,-59.32810132510657,-59.12698911722486,-58.92587690934313,-58.72476470146142,-58.5236524935797,-58.32254028569798,-58.12142807781627,-57.92031586993455,-57.719203662052834,-57.51809145417112,-57.3169792462894,-57.115867038407686,-56.914754830525965,-56.713642622644244,-56.51253041476253,-56.31141820688081,-56.110305998999095,-55.90919379111738,-55.70808158323566,-55.50696937535395,-55.305857167472226,-55.10474495959051,-54.9036327517088,-54.70252054382708,-54.50140833594536,-54.300296128063636,-54.09918392018192,-53.89807171230021,-53.69695950441849,-53.49584729653677,-53.29473508865506,-53.09362288077334,-52.892510672891625,-52.691398465009904,-52.49028625712818,-52.28917404924647,-52.08806184136475,-51.886949633483034,-51.685837425601314,-51.4847252177196,-51.283613009837886,-51.082500801956165,-50.88138859407445,-50.68027638619274,-50.47916417831102,-50.278051970429296,-50.076939762547575,-49.87582755466586,-49.67471534678415,-49.473603138902426,-49.27249093102071,-49.07137872313899,-48.87026651525728,-48.669154307375564,-48.46804209949384,-48.26692989161212,-48.06581768373041,-47.86470547584869,-47.663593267966974,-47.46248106008525,-47.26136885220354,-47.060256644321825,-46.859144436440104,-46.65803222855839,-46.45692002067668,-46.255807812794956,-46.054695604913235,-45.853583397031514,-45.6524711891498,-45.451358981268086,-45.250246773386365,-45.04913456550465,-44.84802235762293,-44.64691014974122,-44.4457979418595,-44.24468573397778,-44.04357352609607,-43.84246131821435,-43.64134911033263,-43.44023690245091,-43.23912469456919,-43.03801248668748,-42.836900278805764,-42.63578807092404,-42.43467586304233,-42.23356365516061,-42.032451447278895,-41.83133923939718,-41.63022703151545,-41.42911482363374,-41.228002615752025,-41.026890407870305,-40.82577819998859,-40.62466599210687,-40.423553784225156,-40.22244157634344,-40.02132936846172,-39.82021716058001,-39.61910495269828,-39.417992744816566,-39.21688053693485,-39.01576832905313,-38.81465612117142,-38.6135439132897,-38.41243170540798,-38.21131949752627,-38.01020728964455,-37.809095081762834,-37.60798287388112,-37.40687066599939,-37.20575845811768,-37.00464625023596,-36.803534042354244,-36.60242183447253,-36.40130962659081,-36.200197418709095,-35.99908521082738,-35.79797300294566,-35.59686079506395,-35.39574858718222,-35.194636379300505,-34.99352417141879,-34.79241196353707,-34.591299755655356,-34.39018754777364,-34.18907533989192,-33.98796313201021,-33.78685092412849,-33.58573871624677,-33.38462650836506,-33.18351430048333,-32.98240209260162,-32.7812898847199,-32.58017767683818,-32.37906546895647,-32.17795326107475,-31.976841053193034,-31.775728845311317,-31.574616637429596,-31.373504429547882,-31.172392221666165,-30.971280013784448,-30.77016780590273,-30.56905559802101,-30.367943390139295,-30.166831182257578,-29.96571897437586,-29.764606766494143,-29.56349455861243,-29.36238235073071,-29.16127014284899,-28.960157934967274,-28.75904572708556,-28.557933519203843,-28.356821311322122,-28.155709103440405,-27.95459689555869,-27.753484687676973,-27.552372479795256,-27.35126027191354,-27.150148064031818,-26.949035856150104,-26.747923648268387,-26.54681144038667,-26.345699232504952,-26.144587024623235,-25.943474816741517,-25.7423626088598,-25.541250400978083,-25.34013819309637,-25.139025985214648,-24.93791377733293,-24.736801569451213,-24.535689361569496,-24.334577153687782,-24.13346494580606,-23.932352737924344,-23.731240530042626,-23.530128322160913,-23.329016114279195,-23.127903906397478,-22.926791698515757,-22.725679490634043,-22.524567282752326,-22.32345507487061,-22.12234286698889,-21.921230659107174,-21.720118451225456,-21.51900624334374,-21.31789403546202,-21.116781827580304,-20.91566961969859,-20.71455741181687,-20.513445203935152,-20.312332996053435,-20.11122078817172,-19.910108580290004,-19.708996372408283,-19.507884164526565,-19.30677195664485,-19.105659748763134,-18.904547540881417,-18.703435332999696,-18.50232312511798,-18.301210917236265,-18.100098709354548,-17.89898650147283,-17.69787429359111,-17.496762085709396,-17.295649877827678,-17.09453766994596,-16.893425462064243,-16.69231325418253,-16.49120104630081,-16.29008883841909,-16.088976630537374,-15.887864422655658,-15.686752214773941,-15.485640006892224,-15.284527799010505,-15.083415591128789,-14.882303383247072,-14.681191175365354,-14.480078967483637,-14.278966759601921,-14.077854551720202,-13.876742343838487,-13.67563013595677,-13.474517928075052,-13.273405720193335,-13.072293512311617,-12.8711813044299,-12.670069096548184,-12.468956888666465,-12.267844680784748,-12.06673247290303,-11.865620265021313,-11.664508057139598,-11.463395849257878,-11.262283641376163,-11.061171433494446,-10.860059225612728,-10.65894701773101,-10.457834809849295,-10.256722601967576,-10.05561039408586,-9.854498186204141,-9.653385978322426,-9.452273770440708,-9.25116156255899,-9.050049354677274,-8.848937146795555,-8.647824938913839,-8.446712731032122,-8.245600523150404,-8.044488315268687,-7.8433761073869706,-7.642263899505252,-7.441151691623536,-7.2400394837418185,-7.038927275860101,-6.837815067978385,-6.636702860096667,-6.43559065221495,-6.234478444333233,-6.033366236451515,-5.832254028569799,-5.6311418206880814,-5.430029612806364,-5.228917404924648,-5.02780519704293,-4.826692989161213,-4.625580781279495,-4.424468573397777,-4.223356365516061,-4.0222441576343435,-3.821131949752626,-3.6200197418709092,-3.4189075339891923,-3.217795326107475,-3.0166831182257576,-2.8155709103440407,-2.614458702462324,-2.4133464945806065,-2.2122342866988887,-2.0111220788171718,-1.8100098709354546,-1.6088976630537375,-1.4077854551720204,-1.2066732472903032,-1.0055610394085859,-0.8044488315268687,-0.6033366236451516,-0.4022244157634344,-0.2011122078817172,0.0]}
},{}],35:[function(require,module,exports){
module.exports={"expected":[2.0,1.9798450101169927,1.9201924877023386,1.8234470247275643,1.6935084288476367,1.5356145222333004,1.3561300050653555,1.1622898945991558,0.9619078817654353,0.7630613614469948,0.5737658328544131,0.4016517949150543,0.25365716101570035,0.13574759185431406,0.052676019778010175,0.007791058176315313,0.002902018943192086,0.03820597915120316,0.11227983687870324,0.2221376764195061,0.36335113048458434,0.5302278875978852,0.7160411490567525,0.9133007860515239,1.1140552666062884,1.3102121816719454,1.4938644499712348,1.6576090522850289,1.794845447007266,1.9000416378435312,1.9689571684697524,1.998814055240823,1.988408767655125,1.9381607426446967,1.8500954770809916,1.727762880036971,1.5760941760242033,1.4012031274325807,1.2101395888920898,1.0106053277753184,0.8106435661105136,0.6183147584643579,0.44137167518149045,0.2869468883687799,0.16126525805801895,0.06939300822399097,0.015033507398567347,0.000377985960109517,0.026017207681263033,0.09091765605323099,0.19246319531533596,0.32656052683459014,0.48780418989078034,0.6696944556887079,0.8648993312944275,1.065550112122044,1.263558569256361,1.4509429857967924,1.620149899704132,1.7643585837024989,1.8777559886578397,1.9557710674708848,1.9952590338932357,1.9946281287974066,1.9539037839550453,1.8747275968827304,1.7602911580792981,1.615207398077409,1.445324640307117,1.2574908552967372,1.0592776191194138,0.8586749033148058,0.6637689992980116,0.4824165601162196,0.32192789892336726,0.18877231040481324,0.08831729363947305,0.02461218832055001,0.0002249459544438892,0.01613861578748066,0.07171171811068688,0.16470410229388044,0.29136724721224294,0.4465953640570184,0.6241312105790684,0.8168183203973558,1.0168894800139303,1.2162798250328848,1.4069519346809634,1.581219820076318,1.7320587462847858,1.8533883992429798,1.9403179830951363,1.9893433680751098,1.9984883419063342,1.967384270878712,1.8972849594660075,1.7910161094928811,1.6528614161515032,1.4883898923350434,1.3042313818406344,1.107809310500046,0.9070414480346094,0.7100207429179759,0.5246890957868795,0.3585172215871866,0.21820350520555798,0.1094039897102348,0.03650438136938572,0.0024432619201807393,0.008593634398425087,0.05470757741396737,0.1389262388569199,0.2578547661885964,0.4066991528786521,0.5794594847113346,0.7691717962060898,0.968188787925203,1.1684880889593803,1.361995638536794,1.5409111512494036,1.6980225463999408,1.8269966668288689,1.9226345683513661,1.981081089092194,1.9999802509828952,1.978570229190061,1.9177140612589523,1.8198648580875068,1.6889669190756873,1.5302967374964733,1.3502503051587926,1.1560852901071204,0.9556284801694577,0.7569602852983514,0.5680890164092098,0.39662807052932636,0.2494890349177903,0.13260308112289054,0.05068187957703074,0.007027672256932571,0.0034001593763691718,0.03994556590615894,0.11519074724854417,0.22610257166612113,0.36821018576080944,0.5357852344838538,0.7220727710119428,0.9195635485169584,1.1202967177537089,1.3161807287318892,1.4993195009324833,1.6623307141537096,1.7986433896889948,1.9027627663456523,1.9704917941574052,1.9991003173835893,1.9874351270318225,1.9359664466891493,1.8467689778187681,1.7234382685860257,1.570945777384615,1.3954384734493446,1.2039910526506274,1.0043207566471088,0.8044762910305784,0.6125133821663682,0.4361700510266465,0.2825546937215132,0.1578595421956832,0.06711105548409158,0.013967303249872831,0.0005705090702818882,0.027460697447625138,0.09355392543251062,0.19618597634219226,0.331219754281158,0.4932120503929722,0.6756329584990945,0.8711290954848872,1.071820016024105,1.2696158731705964,1.4565435199249914,1.6250679066288987,1.7683958186642104,1.8807497107968818,1.957600599908404,1.9958506282136974,1.9939579378457208,1.9519988231149146,1.871664655087074,1.7561937024499263,1.61024059696783,1.4396887053695646,1.2514129709545077,1.053002784767354,0.8524560573986928,0.6578568233708881,0.4770493738700705,0.3173220535271878,0.18511346739332368,0.08575294090043672,0.023245694860990707,0.0001113950980645706,0.017282584767004394,0.0740670935596982,0.1681759390756853,0.2958155956564147,0.45184091132778825,0.629962508772085,0.8230003100004454,1.0231729651512855,1.222411518545752,1.4126846681279173,1.586322507088095,1.7363256976511936,1.8566476142407804,1.9424380828337127,1.9902388913768985,1.9981231902451588,1.9657731635106472,1.8944928400964591,1.787155528397141,1.648087993275428,1.4828960442581802,1.2982385654678026,1.1015590961379658,0.9007857816977598,0.704011790389818,0.5191690778222349,0.3537086499985125,0.21430021341630145,0.10656331933344598,0.034840839770473475,0.002023906427335409,0.009435369223078527,0.05677647224236804,0.14213889658039924,0.26208168463932224,0.41176994505941067,0.5851697470919105,0.7752913482254726,0.9744709505653147,1.1746796283713077,1.3678469738921184,1.5461864153383544,1.7025090934338234,1.8305136441875385,1.9250402067486507,1.9822784172929757,1.999921004711629,1.9772567966627417,1.9151993869141775,1.816250308397236,1.6843981964647998,1.5249580070809654,1.3443567710536954,1.1498745205529615,0.9493508311612895,0.7508688087406784,0.562429259598807,0.3916281781487141,0.2453505525276547,0.12949283086464092,0.048725235575647896,0.006303506792519009,0.003937663544144376,0.041723072923993576,0.11813660584451746,0.2300980343398349,0.3730941954927277,0.5413609169405112,0.7281153705463272,0.9258294880641115,1.1265334174172597,1.3221367872745933,1.5047548297550057,1.6670262152611894,1.8024097875267984,1.9054482374931454,1.9719880873269715,1.999347117027841,1.9864224846620928,1.9337351818988724,1.8434090328464907,1.7190850827455963,1.5657748275091792,1.389658200423752,1.1978344591635823,0.9980360148575012,0.7983167387527819,0.6067273108280815,0.4309906970464211,0.27819083675349954,0.15448708922595988,0.06486595002363482,0.012940045454367444,0.0008025076806769116,0.02894260060463094,0.09622599764985307,0.199940506442857,0.33590539723275636,0.4986399280229282,0.6815842731699777,0.8773639498227259,1.078087083176718,1.2756625277878553,1.4621260214816225,1.6299612246001103,1.7724027035015943,1.8837086450537186,1.9593923090046714,1.996402888391978,1.993248487509404,1.9500562601927025,1.8685672842510517,1.7520663786558242,1.6052496925542812,1.434035403592483,1.245325156294137,1.0467258569094935,0.8462430391782649,0.6519581614266448,0.4717028431456556,0.31274317256789574,0.18148681079798068,0.08322469912302222,0.021917781276387105,3.733787600712635e-5,0.018465369152614097,0.07645904153831817,0.1716806312727026,0.3002917580002942,0.4571081098049887,0.6358084227185888,0.8291892907433421,1.0294555350020635,1.2285344272408545,1.4184011013417286,1.5914020355134268,1.7405635656000111,1.8598729933418028,1.9445209581206568,1.9910953021890812,1.997718614680071,1.964123910001131,1.8916653900181193,1.7832638562054164,1.6432889721976212,1.4773831227368384,1.2922339692579095,1.0953048703912391,0.8945340341275092,0.6980145288140751,0.5136680517337908,0.34892560564769537,0.2104279552241003,0.10375793794924015,0.03321542006108669,0.0016439690283744923,0.010316229403405375,0.058882622545934904,0.1453854381310863,0.2663377494129262,0.41686397117100205,0.5908963944520198,0.7814197757948669,0.9807541215526873,1.180864268281284,1.3736837800150943,1.5514401061375818,1.7069678927395067,1.8339978178898708,1.9274093078762027,1.983436947427232,1.9998222635263116,1.9759047644130356,1.9126485639927169,1.812603518424365,1.679802441470533,1.5195985418561353,1.3384496355330786,1.1436578312498558,0.9430751826957355,0.7447871723753066,0.5567867859724711,0.3866523152591277,0.24124187730720903,0.12641696392834423,0.0468061650574495,0.005618590386188949,0.004514510216159562,0.043538429996675676,0.12111729631099932,0.2341239066277192,0.3780029667715694,0.5469547147393706,0.7341687089891032,0.9320983572006718,1.1327651192595465,1.3280801220474636,1.510170221753989,1.6716953701444006,1.806144491755356,1.9080979452151778,1.973445988877815,1.9995544444254776,1.9853708805433175,1.9314670364044397,1.8400157748753854,1.7147034944579693,1.5605815306402517,1.383862536665236,1.1916700516043013,0.9917513506414599,0.7921651525673444,0.6009567729878993,0.42583381781510343,0.2738554898284985,0.15114803235411822,0.0626577805198768,0.01195177458671215,0.0010739726278053974,0.03046285862001552,0.09893376716365476,0.20372663732075913,0.34061727061569835,0.5040876083901707,0.6875481646361388,0.883603648043491,1.084351066043034,1.2816982942771682,1.4676902699688417,1.6348296603413222,1.7763790799505679,1.8866326745562587,1.961146123990698,1.996915792614887,1.9924998058103478,1.9480761719158226,1.8654356067147269,1.7479093497181797,1.6002348819676597,1.4283649582701885,1.2392276517723642,1.0404470834721384,0.8400360940555427,0.6460732464508608,0.4663771791203968,0.308191436902274,0.17789248386458556,0.08073266816779534,0.02062850001672112,2.7772133860404224e-6,0.01968692222664914,0.0788874675693172,0.17521804045648215,0.30479555744423736,0.4623967514446401,0.6416687215164643,0.8353850181734904,1.0357369414171123,1.2346483092753386,1.4241010085345194,1.5964582047209401,1.7447721827437759,1.8630644091499295,1.9465665266864762,1.9919125666851114,1.9972746311910092,1.9624365754924376,1.8888027209096916,1.7793412466311047,1.6384645424699784,1.47185134552059,1.286217830380688,1.0890468802894815,0.8882864522555655,0.6920291950708175,0.5081862348012887,0.344168277455579,0.20658688357553423,0.10098795636465163,0.03162818644211496,0.0013034647300772528,0.011236180147158548,0.061025945135876336,0.1486657352769738,0.27062279240317777,0.4219810300094031,0.596639200600323,0.7875568368534482,0.9870380527144251,1.1870417644082256,1.3795058263633306,1.5566720161366443,1.7113987682031726,1.8374490503178735,1.9297417781591863,1.9845566337352922,1.9996840313270268,1.9745141858435615,1.9100616932470462,1.8089246322099246,1.675179835616172,1.51421855351033,1.3325291319171657,1.1374354677448237,0.9368017826485414,0.7387156164149584,0.5511618183968376,0.38170067839738087,0.2371631715410546,0.12337560180468043,0.04492474382196021,0.00497295009079135,0.005130676608104401,0.04539156542117373,0.12413270091657735,0.23818002951575334,0.3829363057104965,0.5525664069363929,0.7402325472453055,0.9383699083186422,1.138991577140632,1.3340104983004366,1.5155654630321131,1.6763379943808983,1.8098473548612133,1.910711784853505,1.9748654412256907,1.9997222913874741,1.984280356211796,1.9291620997931385,1.8365893379324674,1.7102936767872738,1.5553660919028558,1.378051711091102,1.185498073454772,0.985467012230832,0.7860217754498208,0.5952019965707682,0.42069961701929715,0.2695488241842109,0.14784250346632188,0.06048663419116962,0.011002529681663598,0.0013848931893352123,0.03202141144658088,0.10167712702234577,0.20754421943119317,0.3453551883202318,0.5095548763220095,0.6935243973355749,0.8898479436913334,1.0906117172080794,1.2877229342376035,1.473236045609791,1.6396730215588873,1.780324790952091,1.8895216838110884,1.9628619755942367,1.997389320623715,1.9917119223200104,1.9460586364938737,1.8622697461732018,1.7437227798314403,1.595196363283148,1.4226775933741056,1.233120698228618,1.0341667124544824,0.8338354671926496,0.640202310886083,0.4610725921475838,0.3036670263149539,0.17433062856198622,0.0782769464650942,0.019377902006062264,7.714475279918531e-6,0.020947195740168678,0.08135227573462733,0.1787880269063229,0.3093268160970247,0.4677066273558058,0.6475431736954353,0.8415872475718083,1.0420169362932263,1.2407529231628485,1.4297841645711797,1.6014908150018674,1.748951382850398,1.8662217356104918,1.9485747077352524,1.9926906525846504,1.9967912573144475,1.960711226630961,1.8859049458409944,1.7753878546095727,1.633614894648007,1.466300931103742,1.2801903864618245,1.0827853730109858,0.8820432828491662,0.686056025568935,0.5027238435457091,0.3394368533272646,0.20277715018538278,0.0982534839885234,0.03007920160616584,0.0010024069816954029,0.012195185118095364,0.0632063553551534,0.15197965845278028,0.27493664435933596,0.42712091946086606,0.6023979387072798,0.7937022889993411,0.9933224958476004,1.1932118727531442,1.3853128829774677,1.5618819386853584,1.7158015448139654,1.8408672051546304,1.9320375254696156,1.9856374319917525,1.9995063135736735,1.9730851158794374,1.9074388768534891,1.8052137950626885,1.6705305614855877,1.5088182545424949,1.3265954940542384,1.131207675808971,0.9305308788067125,0.732654380674104,0.5455545790470556,0.3767734631433791,0.2331145963300375,0.12036886462148544,0.04308104618160746,0.004366611407852883,0.005786138382618211,0.04728240600227307,0.12718270055870418,0.24226624279504294,0.3878940174523411,0.5581957718807675,0.7463066458052431,0.9446438937040821,1.1452125451276352,1.3399276817953214,1.5209403404879294,1.6809539045961464,1.8135182305885438,1.9132896531666106,1.9762463883050132,1.9998506512842056,1.9831509547410935,1.9268204631054284,1.8331298573552532,1.7058558039126441,1.5501287172965514,1.3722259532175767,1.1793187684959916,0.9791832478446378,0.7798868500515165,0.5894632088790243,0.41558829744984693,0.26527100992544417,0.1445706331244755,0.058352596793525,0.010092348232534576,0.0017352570845156068,0.0336181975245472,0.10445596886861086,0.21139310198715744,0.35011896320794267,0.5150415158721087,0.6995127352188495,0.8960965901288924,1.0968687893884044,1.2937362097077394,1.4787631293571843,1.6444911169495753,1.7842396806583265,1.8923755587080209,1.9645397960425324,1.997823453715037,1.9908848681582398,1.9440037336155411,1.859069827671738,1.739506834356901,1.5901343355123296,1.4169735335440057,1.2270045368755584,1.0278849919188635,0.8276414035021437,0.6343455866227514,0.4557892917479506,0.2991701195112596,0.17080138557646563,0.07585763101108223,0.018166036640581806,5.214946667631004e-5,0.022246139914834817,0.08385336867918225,0.18239044961477002,0.3138853549828675,0.4730375278088137,0.6534315472261891,0.8477957339624407,1.0482952715829676,1.2468480277831908,1.4354503449781926,1.606499667577996,1.753101000849679,1.869344848015322,1.9505454219477683,1.9934295291548343,1.996268512142706,1.9589479315645857,1.882972179268434,1.7714038362920341,1.6287402202832397,1.4607320987167907,1.2741518755734913,1.0765205958729807,0.8758047725012021,0.6800952562369078,0.4972810937207808,0.33473152014471486,0.1989989055306085,0.0955546288271325,0.02856852673508492,0.0007408076744174208,0.013193206437400185,0.0654237670818486,0.15532707676504742,0.2792791348927389,0.4322834365098265,0.608172381314055,0.7998558894992804,0.9996072027290771,1.1993743496089169,1.3911047204901323,1.5670696680020484,1.7201760486708344,1.8442521473897528,1.9342964591299845,1.986679299507206,1.999289117285755,1.9716176109661214,1.9047802184081253,1.8014711535534125,1.6658548027159368,1.50339785825386,1.3206489563113142,1.124974701427865,0.9242627188585947,0.7266037045596675,0.5399652893980439,0.3718708641124725,0.22909631158494737,0.11739687113896713,0.041275144958824006,0.0037995982865542954,0.006480869650247745,0.049210877055496205,0.1302671747683829,0.24638238506817767,0.39287590617722423,0.5638425872236836,0.752390764753977,0.9509200655469164,1.151427777504577,1.3458314388150152,1.5262946418243437,1.6855429184707966,1.8171569739449724,1.9158314483337353,1.9775887755711,1.999939519045709,1.981982720740345,1.9244422188313712,1.8296374697864481,1.701390051121284,1.5448696136873754,1.3663854931505914,1.1731323807983731,0.9729003056792751,0.7737606186899388,0.5837406365835132,0.4105000609937701,0.2610222160174812,0.14133255056104022,0.0562557526172206,0.009221266189695099,0.002125050474662382,0.03525315378400318,0.10727018294364077,0.21527313296535722,0.35490840711905514,0.5205473103290288,0.7055129417584014,0.9023493405468465,1.1031220354419864,1.2997378831750024,1.4842713029021786,1.6492837562080567,1.7881235944388099,1.8951941865246145,1.9661795190649565,1.9982181747414507,1.990018675992051,1.9419115444454258,1.8558359776008322,1.7352616798161395,1.5850489985953162,1.4112530040789877,1.2208794092895217,1.0216021699808655,0.8214541476374064,0.6285033049899349,0.45052748660151276,0.29470089411013933,0.16730489430616002,0.07347481736399097,0.016992951786568455,0.0001360804324802567,0.02358370344492966,0.08639064761471049,0.18602516629319177,0.3184709940484618,0.47838924224355095,0.6593336095295597,0.8540102321223657,1.0545716993044196,1.2529333823916873,1.4410993259525702,1.6114845646095293,1.7572208728398468,1.8724336230075846,1.9524785914846947,1.9941291672114927,1.995706416323189,1.957146759940013,1.880004537030544,1.7673893490393535,1.6238407119157654,1.4551450683176177,1.2681025362250118,1.0702527963219044,0.8695711676205825,0.6741471225134068,0.4918582003043612,0.33005246375936204,0.1952522988444909,0.09289149747994663,0.027096221497567075,0.0005186771409014801,0.014230204685192538,0.06767809273257286,0.15870785799733222,0.2836500924834975,0.43746837724705623,0.6139623003415304,0.806017395298157,1.005891925125274,1.2055289515697805,1.3968811101352332,1.5722349991815694,1.7245221069895162,1.847603743324684,1.9365184899168342,1.9876821951299364,1.9990324510420976,1.9701117290671557,1.9020858229227426,1.797696855509121,1.6611527439904994,1.4979575787393746,1.3146897535649311,1.1187367907917407,0.9179975503842267,0.7205638270614609,0.5343941702157942,0.3669930749476408,0.2251084760200962,0.11445973874503912,0.03950711148316233,0.0032719331228042714,0.007214842970482027,0.05117690241001438,0.13338600171493142,0.2505282937556661,0.39788177511031175,0.5695066299270104,0.7584846637807278,0.9571981759506808,1.1576370287819828,1.3517215361726815,1.5316281555570155,1.6901048547478015,1.8207634412072737,1.9183370699589952,1.9788925500022807,1.9999888911618815,1.9807757003525055,1.9220274609069197,1.8261123131684482,1.6968965948017314,1.5395889887995349,1.3605305615768901,1.1669391547119987,0.9666184338985373,0.7676433233392114,0.5780345057145522,0.40543510862649657,0.25680261027929063,0.13812838367388258,0.05419618448348418,0.008389317959177522,0.002554257963700235,0.03692621564740162,0.11011965809155,0.21918415911217837,0.35972333087999286,0.5260720422246622,0.7115247799578539,0.9086059479738883,1.1093712083778566,1.3057277175851558,1.4897603486826343,1.6540507500345454,1.791976378886599,1.8979774559306049,1.9677810798956916,1.9985734681122482,1.9891133800343264,1.9397821516209248,1.8525683236912207,1.7309874838843766,1.5799405533929423,1.405516230928746,1.2147455574010486,1.015318494799647,0.8152739439827978,0.622675696746313,0.4452873845391824,0.2902595266372514,0.16384129285565652,0.07112859964024854,0.015858693778578514,0.0002595040575850138,0.02495983349929609,0.08896401232370454,0.1896920333774571,0.3230835521700063,0.4837615592778661,0.6652491274856484,0.8602304965911647,1.0608459715510257,1.2590087466287656,1.4467308843707074,1.616445309202811,1.761310836094094,1.8754879385867746,1.9543741399896226,1.9947895391202963,1.9951049920575805,1.9553077828999645,1.8770021363433194,1.7633445514159487,1.6189165630664886,1.4495400605829913,1.2620426073533304,1.063982221923476,0.8633427144224741,0.6682118593379811,0.4864553774901783,0.32539986898469286,0.19153747811060318,0.09026419513542483,0.02566234404677492,0.00033602415486799764,0.01530613890208754,0.06996924326588438,0.16212186861540634,0.2880493444874289,0.4426755368775417,0.619767467099273,0.8121865630285621,1.0121764148019823,1.2116754355411397,1.4026418237566165,1.5773777282035402,1.7288395481092111,1.8509218605779652,1.9387035300643412,1.9886460792475311,1.9987363249805115,1.968567529661942,1.899355796820679,1.793891050007125,1.656424571031362,1.4924976308794093,1.3087181211919234,1.1124941902857637,0.9117356208453622,0.7145349867427997,0.5288414415485121,0.3621402883120114,0.22115124714716772,0.1115575834506306,0.037777015588477014,0.002783636758332597,0.007988029352804404,0.05318040441170857,0.13653905821083023,0.2547038051022469,0.4029114265296666,0.5751876762721693,0.7645881021885181,0.9634779769423272,1.1638400537066051,1.3575977412211067,1.5369406710226123,1.6946395332396453,1.824337489927097,1.920806419075239,1.9801576601020456,1.9999987656826221,1.9795299412524963,1.9195762847102862,1.8225545267380743,1.6923756124366165,1.5342870512073796,1.3546613897546815,1.160739334857237,0.9603378806240678,0.7615352056204197,0.5723450416531198,0.40039364040361924,0.2526123593770423,0.13495825902132486,0.05217397374120836,0.007596536401305087,0.0030228625987808178,0.03863731703208062,0.11300428176362043,0.2231260259498118,0.36456354431068916,0.5316154933430347,0.7175480123613889,0.9148661652863517,1.115616061366025,1.3117054763514076,1.495230049892108,1.6587919101421131,1.7957978818243165,1.9007252569923212,1.969344415276219,1.9988893197940434,1.9881690160424803,1.9376156392488402,1.8492669950087792,1.7266844153839882,1.5748092016787507,1.3997634406845687,1.2086032234851751,1.0090342145679685,0.8091010366443251,0.6168629920709024,0.4400691925347374,0.28584619251782006,0.160410718030372,0.068819070510864,0.014763307417563265,0.00042241546699761656,0.026374475723520696,0.09157336116329384,0.19339090603350828,0.32772284716058475,0.4891542667157488,0.6711778674431779,0.8664562816805907,1.0671178405013377,1.265073880529537,1.4523447977970911,1.6213817054181816,1.7653707290668743,1.8785076741134026,1.9562319925921376,1.9954106187978498,1.994464263100951,1.9534310730804352,1.873965095795739,1.7592696031833204,1.6139679682296535,1.443917296899623,1.255972328313834,1.0577091203530289,0.8571196589184783,0.6622897011418856,0.4810728386790387,0.32077391958909696,0.18785459005704508,0.08767282556684508,0.024266951018055316,0.0001928559307495803,0.01642096659079384,0.07229712818584122,0.1655689737725926,0.29247671714268697,0.4479047097287845,0.6255876522945811,0.8183631490205536,1.0184604235342423,1.217813558748849,1.4083866338174973,1.5824976519402276,1.7331282014995404,1.8542063680904732,1.940851493267696,1.9895709137884712,1.998400750797395,1.9669850737433006,1.8965902479325862,1.7900538873692946,1.6516704705920624,1.4870182303311963,1.3027342950599767,1.1062471464804104,0.9054771775760216,0.7085174217309703,0.5233073227181149,0.3573126958810513,0.21722478126894096,0.10869051988519685,0.036084925610138985,0.0023347284798945767,0.008800398257882924,0.055221303926170084,0.13972621971657495,0.25890875418342973,0.40796466177389956,0.5808855018690491,0.7707008389035015,0.9697592204821182,1.1700366072712094,1.3634598218616893,1.5422319783872167,1.6991467748354216,1.8278789789365588,1.923239398148064,1.9813840559010103,1.9999691422179064,1.9782454926453643,1.917088787058079,1.818964251020848,1.6878272825958964,1.5289640103269742,1.3487782095048204,1.1545331661147,0.954058893925346,0.7554365067922342,0.566672469121862,0.39537585545326803,0.24845162881737215,0.13182230181703058,0.05018920026375118,0.006842952829383742,0.003530845870938104,0.04038639035289904,0.11592394002291284,0.22709857778223053,0.36942885623229393,0.5371774447286239,0.7235824010632214,0.9211297452179028,1.1218563477470465,1.317670923364118,1.5006801904881053,1.663507049264299,1.7995879523100395,1.9034374811770118,1.970869463457878,1.999165717311314,1.9871856213170338,1.9354120929021716,1.8459321219495313,1.7223526442776622,1.569655146131071,1.3939948605703094,1.202452650152072,1.0027495775025739,0.8029356694396095,0.6110654205541642,0.43487311669643347,0.28146106606994725,0.15701330533125302,0.0665463211976769,0.013706835969136133,0.0006248082260396082,0.02782757424200355,0.09421859106935249,0.19712163816314643,0.33238869577712316,0.4945671515559048,0.6771195952285479,0.8726873414843714,1.0733870584288894,1.2711285445330796,1.457940844493177,1.6262935582776725,1.769400391400434,1.8814927103138657,1.9580520759106803,1.9959923817127323,1.9937842547608409,1.951516704607748,1.8708935353449072,1.7551646652939503,1.6089951228649835,1.4382769993557265,1.2498919388705299,1.0514337393858,0.8509022469070824,0.6563808818387271,0.47571079647069336,0.3161747982884402,0.18420378015067185,0.08511749112822276,0.022910097526677276,8.917812341058262e-5,0.01757464371780937,0.07466165554555426,0.16904903731498233,0.29693203557681547,0.4531556892586418,0.6314226260416338,0.8245469093110709,1.0247437031161186,1.2239430787491914,1.414115313409119,1.587594568164755,1.7373878977670487,1.8574571361306473,1.942962294686593,1.9904566622236062,1.9980257417472693,1.9653644238151442,1.8937892854921965,1.7861855191559588,1.6468906304502438,1.481519593520236,1.2967385115185146,1.0999959061216307,0.8992224677723548,0.7025113697080161,0.5177920323113422,0.3525104883352588,0.2133292334730641,0.10585866129209942,0.03443090838238416,0.001925226018478443,0.009651917598735293,0.05729952034189856,0.1429473603454937,0.263142974911973,0.4130412812501977,0.5865998816647138,0.776822632484594,0.9760416584732247,1.1762264447240827,1.369307546553821,1.5475018686545894,1.7036264015079885,1.8313877683537738,1.925635911079536,1.9825716889589626,1.9999000219378034,1.9769224052642929,1.9145650662015987,1.8153416278256351,1.6832517849296387,1.5236200764079932,1.342881253201309,1.1483208936158815,0.9477817218099753,0.7493474677412697,0.5610170121762681,0.3903819519680617,0.2443205829409768,0.1287206359251728,0.04824194244574531,0.006128597008489889,0.004078187715838455,0.0421733665248909,0.11887851754866574,0.2311016577014825,0.37431907447448476,0.5427576766953595,0.7296277077168054,0.9273964403694752,1.1280918210418478,1.32362382299983,1.5061105552008356,1.6681959811623759,1.8033464406434523,1.9061140213571652,1.9723561642042569,1.9994026497469006,1.9861632347001454,1.9331715996166476,1.8425638362343921,1.7179923416619212,1.564478590324895,1.3882107184335692,1.19629408033724,0.9964648318343298,0.7967780858885917,0.6052832111886979,0.42969936225914573,0.27710432049746725,0.15364918894943802,0.06431044146983811,0.012689321161842182,0.000866674340595508,0.02931907166021619,0.09689959756048716,0.2008840824097523,0.33708091372781535,0.5000000000000238,0.6830740761551373,0.8789234298878653,1.0796533777119535,1.2771724994921225,1.4635188034261213,1.6311806737727959,1.7733996639309955,1.8844429292851281,1.959834318055555,1.99653480488645,1.9930649938962364,1.9495647530957378,1.86778757631141,1.751029899884759,1.603998223390117,1.4326193907319165,1.2438016791868758,1.0451563268869453,0.8446907239638387,0.6504856348152794,0.4703694626552445,0.3116026867389937,0.18058519259131456,0.08259829275022168,0.0215918371656868,2.4994827920177265e-5,0.018767124715150074,0.07706273195087343,0.1725619217869382,0.30141512381343416,0.4584282680637679,0.6372721578703853,0.8307375996538222,1.031026005370306,1.2300637534381482,1.4198276362599507,1.5926682755589048,1.7416184686621645,1.8606740362995398,1.9450358509484982,1.9913032895676097,1.9976113126422579,1.963705643889944,1.8909530201320197,1.7822860981601631,1.6420852394001741,1.476001937631899,1.2907310073891463,1.0937407161211303,0.8929717384830751,0.6965170679011579,0.5122957881714232,0.347733855352348,0.209464757626035,0.10306211952417355,0.032815029235656046,0.0015551455486301213,0.0105425537420335,0.05941497157342168,0.1462023528688925,0.2674063000445197,0.41814108444202536,0.5923305899523945,0.7829532411329556,0.9823250427717244,1.1824093215787856,1.3751406843238185,1.5527501336744005,1.7080782363208984,1.8348637195884734,1.9279958632121268,1.9837205123667419,1.9997914075724283,1.975560731368632,1.9120052218228818,1.8116868002389144,1.6786493001609646,1.518255460525346,1.3369707537622757,1.142102762733361,0.9415066122139714,0.7432683289726265,0.5553788941956936,0.3854121271973261,0.24021938491606643,0.12565338385541525,0.046332277200064276,0.005453497154264908,0.0046648665145452295,0.0439981749660181,0.12186789764090189,0.23513510759374368,0.37923400588325384,0.5483559688350481,0.7356836935444391,0.9336660032189865,1.1343222349615762,1.3295639401306834,1.5115209295415668,1.672858520632646,1.8070731983717212,1.9087547718147295,1.9738044587935917,1.9996001077424403,1.9851018965740819,1.9308942478873692,1.839162270903995,1.7136036797600671,1.5592797387240949,1.382411242736618,1.1901277572921352,0.9901802257981936,0.7906285292036339,0.5995165923605111,0.424548133575957,0.2727761278832268,0.15031850176092598,0.062111519640171475,0.011710803185511987,0.0011480042574230076,0.030848909066956254,0.09961627474219958,0.20467809016425942,0.34179931567927646,0.5054525974611488,0.6890410750327893,0.8851643005779238,1.0859165508431232,1.283205506682326,1.4690784542774862,1.6360428588720521,1.7773683886952094,1.887358214499287,1.9615786486317157,1.9970378668943511,1.9923065089165344,1.9475752956425991,1.8646473413745228,1.7468654702709654,1.5989774671727837,1.4269446944925603,1.2377017898161842,1.0388771308019178,0.838485335431777,0.6446041929221844,0.46504904820482973,0.3070577655301966,0.1769989703060192,0.08011532993624848,0.02031222200380578,3.0857939203876583e-7,0.019998362482177012,0.07950026256395726,0.17610748843639723,0.3059258047793292,0.46372223788776057,0.6431360167359068,0.8369349755285967,1.0373070821582722,1.2361753410610739,1.4255233767444178,1.5977185737212776,1.7458197470856538,1.8638569415358461,1.9470720801520616,1.9921107623803707,1.9971574798514866,1.962008799486246,1.8880815638790267,1.7783557784012303,1.6372544872453096,1.4704654806027704,1.284712019956475,1.087481823546646,0.8867252365997583,0.6905347530734794,0.5068188073891469,0.34298298559988905,0.20563150636707017,0.10030100503934669,0.031237351993968043,0.0012245016877959758,0.011472271509384568,0.0615675740645647,0.14949106872099516,0.27169856118806923,0.42326386991725107,0.5980774003803535,0.789092422701624,0.9886091251963461,1.188584993623865,1.3809590047742863,1.55797656615057,1.7125021034353267,1.8383066953474478,1.9303191613323876,1.984830480748061,1.9996433034118337,1.9741605247418559,1.9094093550306679,1.8079999126191573,1.6740200100790583,1.5128703745707412,1.331046944640936,1.135879019071057,0.9352338129917424,0.7371993306002533,0.5497583378748174,0.38046657743946,0.2361481967318818,0.12262066675824068,0.044460279954705695,0.004817679931838015,0.005290859094403744,0.045860743599951403,0.12489196222493015,0.23919876814572727,0.38417345632853905,0.5539721000260285,0.7417501193466423,0.9399381861309151,1.1405473434170166,1.3354910401338091,1.516911099811027,1.6774944835141343,1.8107680782951914,1.9113596282452048,1.9752142900211127,1.9997580834987272,1.984001648859608,1.9285801276652215,1.8357275603135457,1.709186831915738,1.5540587966730424,1.3765966625473194,1.1839539245743131,0.9838960076238349,0.7844872422803031,0.5937657918396595,0.41941963411022753,0.26847665918240404,0.14702137532126858,0.05994964256182567,0.010771320689703323,0.0014687868645534286,0.032417026036626106,0.10236851531111846,0.20850351157073432,0.3465437152637978,0.5109247285725961,0.6950203561766974,0.89140970705231,1.0921763304394285,1.289227327811629,1.4746195774520172,1.640879921528754,1.7813064089361776,1.8902384508083339,1.963284998741502,1.997501547866478,1.9915088297803902,1.945548410828017,1.8614729545674245,1.742671540939202,1.5939330525229614,1.4212531347771071,1.231592511692012,1.0325963991467617,0.8322863264113496,0.6387367884647821,0.45974976326545736,0.3025402141774407,0.17344525494358143,0.07766870075844179,0.0190713025832715,1.5120352885200639e-5,0.021268308387396573,0.08197415110715967,0.17968559722046262,0.31046390031161253,0.4690373896291469,0.6490139710271945,0.8431387921512862,1.0435866853898876,1.242277600222299,1.4312023098920448,1.6027452631749326,1.7499915670951833,1.8670057261211812,1.949070901870186,1.9928790487683066,1.9966642613004635,1.9602739576261077,1.8851750301499908,1.7743947151191348,1.6323985647909516,1.4649104411119445,1.2786817869588087,1.0812194756121025,0.8804832088468649,0.6845646615147648,0.5013613062944382,0.33825806672798375,0.20182963110204144,0.09757542689617615,0.029697938972492066,0.0009333074957643683,0.01244103417877196,0.06375724279177009,0.1528133780039309,0.27601958880680266,0.428409435335826,0.6038400859609016,0.7952399347050512,0.9948936575380737,1.1947532169324706,1.386762278092951,1.5631809596491473,1.7168978281173797,1.8417165596398606,1.9326057136745676,1.985901550261371,1.9994557153058472,1.9727218406893225,1.9067775683566384,1.8042811105912437,1.6693640975317363,1.5074650312445854,1.3251100598160523,1.129649908454553,0.9289635719065835,0.73114071233782,0.544155565214514,0.3755454980339118,0.23210717919231694,0.11962260441995776,0.04262602464993104,0.004221170454733247,0.005956140729943993,0.04776099885885743,0.12795059185619895,0.24329247885075633,0.38913723071162354,0.559605848442362,0.7478267455114109,0.9462127413664793,1.1467669005286787,1.3414048889002477,1.522280853108281,1.6821036866953358,1.8144309344733358,1.9139284877619072,1.9765856022012325,1.9998765707760313,1.9828625350143354,1.9262293303534463,1.8322598401273296,1.704741972585581,1.5488159703886848,1.3707672075301076,1.177772826038085,0.9776124255256315,0.7783544676871383,0.588031036771407,0.41431406642769764,0.2642060842154832,0.14375793986056762,0.057824895624617456,0.009870910782094011,0.0018290094916963984,0.034023360631716404,0.10515621055910196,0.21236019553258545,0.3513139250870938,0.5164161771958453,0.7010116834169564,0.8976594026298019,1.098432469251881,1.295237725030153,1.4801419540862917,1.6456916706883473,1.785213569109878,1.8930835244486222,1.964953300987455,1.9979258294883473,1.9906719879945678,1.9434841787099946,1.8582645412720389,1.7384482775415462,1.588865178685067,1.415544936390874,1.2254740861190005,1.0263143799978032,0.8260939417513389,0.6328836531941205,0.45447181714836926,0.2980502111152056,0.16992418686873945,0.07525850185382299,0.017869127917995775,6.942956336364325e-5,0.022576912270452887,0.08448429986674633,0.18329610681090402,0.3150292311643501,0.47437351334983346,0.6549057885766613,0.8493488044833855,1.0498645670330555,1.2483702898946376,1.4368642113960335,1.607748145375563,1.7541337639122143,1.8701202656846578,1.9510322371533793,1.993608118385608,1.996131676470362,1.9585011868323092,1.8822335337473324,1.770403064768126,1.6275176638364037,1.459337038572712,1.2726405465782786,1.0749539196678763,0.8742459017723336,0.6786070290318404,0.49592350044796085,0.3335592853615965,0.1980592819975141,0.09488549274966573,0.02819685097504321,0.0006815744741304197,0.01344880348597488,0.06598389126744797,0.15616914949307426,0.28036921222850564,0.4335775774580777,0.609618419079339,0.8013955343284863,1.0011783915703474,1.2009137478717957,1.3925502750618197,1.568363108607009,1.7212652367444532,1.8450931777828365,1.9348554299243652,1.986933678601503,1.9992286506638233,1.9712447360362493,1.9041099657512175,1.8005305410405108,1.6646817464183494,1.5020396440472656,1.3191603337828504,1.1234156769215862,0.9226961366208049,0.7250927134886185,0.5385707975132898,0.37064908335360003,0.22809649190965775,0.11665931525821627,0.040829583735152775,0.003663992283897799,0.006660685143837108,0.049698865686423344,0.13104366572476678,0.24741607801534193,0.3941251329733564,0.5652569915619085,0.7539133320240672,0.9524894210929682,1.152980660636283,1.3473052528448122,1.527629977338532,1.6866859481217444,1.8180616222305694,1.9164612488999353,1.9779183411698287,1.9999555648943388,1.9816846000310422,1.9238419488038954,1.8287592473134455,1.7002692773329224,1.543551466952307,1.364923107937049,1.1715847058248048,0.9713297276924969,0.7722304476568465,0.582312553667409,0.40923163218816183,0.2599645716618957,0.14052832427799045,0.05573736275191332,0.009009609027130216,0.0022286579107726467,0.03566784940513912,0.10797925037769251,0.21624798971841308,0.35610975673512457,0.521926726429421,0.7070148201079718,0.9039131404597097,1.104684720175352,1.3012364609389138,1.4856453660571884,1.6504779162962437,1.7890897148911993,1.8958933230452844,1.96658348947493,1.998310695001658,1.9897960166126893,1.9413826808215684,1.8550222282144704,1.734195846888524,1.5837740458301997,1.4098203247966314,1.2193467547627117,1.0200313214825636,0.8199084260388221,0.6270450182974838,0.4492154183222048,0.2935879336897449,0.16643590515672924,0.07288482842055444,0.016705745491503277,0.00016323406571960852,0.023924122444065055,0.0870306096967991,0.18693887459965775,0.31962161701586467,0.47973039828347086,0.6608112366690961,0.8555647672415028,1.056140479123906,1.2544531694286594,1.4425088576224554,1.612727022719202,1.7582461739280024,1.873200437208142,1.9529560085327176,1.9942979424354463,1.9955597463972166,1.9566905571258597,1.8792571908544042,1.76638098501051,1.6226119771677912,1.4537454931233156,1.2665885374321129,1.0686854031912234,0.868013561737476,0.6726620909394241,0.49050560463230686,0.3288868270933121,0.19432060797493433,0.09223130884697406,0.02673414729159218,0.0004693125658535857,0.014495539626096288,0.06824743154334101,0.1595582506419565,0.28474725965176084,0.4387680921525987,0.6154121715027618,0.8075589784379564,1.007463079058357,1.2070663431130342,1.3983227670665999,1.573522808339316,1.7256041568125713,1.848436416406536,1.9370682212224115,1.9879268250014541,1.9989621184543718,1.9697292691253798,1.9014066525794409,1.7967483521070822,1.6599731416826464,1.4965944272708618,1.3131980015439202,1.11717657071199,0.9164317546855533,0.7190555729368786,0.5330042553584402,0.365777526797324,0.22411629329823946,0.11373091631700549,0.03907102816630481,0.0031461674267838635,0.007404464507976494,0.05167426754066595,0.13417106166040838,0.2515694027654609,0.3991369661012685,0.5709253061757256,0.7600096384762985,0.9587679773939282,1.1591883783085761,1.3531918989146186,1.5329582612218398,1.6912410868030834,1.8216599981618633,1.9189578116202255,1.979212454286343,1.9999950627335354,1.9804678904358344,1.921418077313425,1.8252259201384913,1.6957689228203514,1.5382654943014924,1.3590645945986952,1.165389808352832,0.9650481622788156,0.7661154240760697,0.5766105683964549,0.40417253213791926,0.25575228905289604,0.13733265613706325,0.053687126397176654,0.00818744944452987,0.0026677163364480228,0.037350427402834896,0.11083752326239282,0.2201667405679193,0.36093102078201056,0.5274561586175106,0.7130295291376454,0.9101706735317392,1.1109328362581645,1.307223298599527,1.4911295959908033,1.6552384693051927,1.7929346931799324,1.8986677356168504,1.968175499814643,1.9986561292049931,1.9888809502338707,1.93924400016783,1.8517461434596525,1.7299144169428633,1.578659855048192,1.4040795261050767,1.2132107596407997,1.0137474717695594,0.8137300235894545,0.6212211143894728,0.44398077440419426,0.289153558152205,0.16298054758788427,0.07054777421404856,0.015581201255102872,0.0002965301548598642,0.02530988569609227,0.0896129800230624,0.19061375670449032,0.32424087647610855,0.4851078328436348,0.6667300820509621,0.8617864349074409,1.0624141737760777,1.2605259985628003,1.4481360256189322,1.617681698549892,1.762328634710511,1.8762461190308581,1.9548421400230311,1.9949484936711526,1.994948493671156,1.9548421400230405,1.8762461190308732,1.7623286347105314,1.6176816985499167,1.4481360256189093,1.2605259985628305,1.0624141737761659,0.8617864349074156,0.6667300820509916,0.48510783284366166,0.32424087647613165,0.19061375670454217,0.08961298002305185,0.025309885696099266,0.0002965301548606414,0.015581201255107313,0.07054777421401603,0.16298054758786717,0.2891535581522229,0.44398077440416817,0.6212211143894438,0.8137300235893679,1.013747471769528,1.2132107596408246,1.404079526105048,1.5786598550481665,1.729914416942842,1.851746143459636,1.939244000167819,1.9888809502338742,1.9986561292049947,1.968175499814665,1.8986677356168642,1.7929346931799515,1.6552384693051736,1.4911295959908801,1.3072232985996108,1.1109328362581392,0.9101706735317705,0.7130295291376754,0.5274561586174882,0.3609310207820784,0.22016674056793883,0.11083752326240726,0.037350427402843445,0.0026677163364503542,0.008187449444518546,0.05368712639716644,0.13733265613707613,0.25575228905287517,0.40417253213784843,0.5766105683964264,0.7661154240760392,0.9650481622787843,1.1653898083528011,1.359064594598613,1.538265494301514,1.695768922820329,1.8252259201384737,1.9214180773134348,1.980467890435817,1.9999950627335357,1.9792124542863379,1.9189578116202377,1.8216599981618813,1.691241086803147,1.5329582612218662,1.3531918989145948,1.159188378308607,0.9587679773939595,0.760009638476329,0.5709253061757539,0.39913696610129357,0.25156940276544404,0.13417106166042403,0.05167426754069393,0.0074044645079802685,0.003146167426781421,0.03907102816629615,0.11373091631699106,0.22411629329818372,0.36577752679734366,0.5330042553584124,0.7190555729368486,0.9164317546855787,1.1171765707119026,1.3131980015438904,1.4965944272708345,1.6599731416826229,1.796748352107063,1.9014066525794027,1.9697292691253723,1.998962118454373,1.987926825001459,1.9370682212224226,1.8484364164065528,1.7256041568125928,1.5735228083393418,1.3983227670666287,1.2070663431130648,1.0074630790584451,0.8075589784379872,0.6154121715027908,0.4387680921525776,0.2847472596517828,0.15955825064200424,0.0682474315433318,0.014495539626101617,0.00046931256585269754,0.026734147291584964,0.09223130884693709,0.19432060797491568,0.32888682709328887,0.4905056046322799,0.6726620909394483,0.8680135617373885,1.0686854031911923,1.2665885374321375,1.4537454931232876,1.6226119771677667,1.7663809850104535,1.8792571908543896,1.9566905571258506,1.9955597463972135,1.9942979424354497,1.952956008532727,1.8732004372081574,1.7582461739280228,1.6127270227191821,1.4425088576224836,1.2544531694287446,1.0561404791239373,0.8555647672415339,0.6608112366691257,0.47973039828354613,0.3196216170159293,0.18693887459964287,0.08703060969681187,0.023924122444071938,0.00016323406572016363,0.01670574549148718,0.07288482842054267,0.16643590515671192,0.2935879336897227,0.4492154183221312,0.627045018297402,0.8199084260387913,1.020031321482589,1.2193467547626813,1.4098203247965508,1.5837740458302203,1.7341958468885026,1.855022228214454,1.9413826808215577,1.9897960166126767,1.9983106950016634,1.966583489474938,1.8958933230452986,1.7890897148911835,1.6504779162963108,1.4856453660572158,1.3012364609388896,1.1046847201753833,0.9039131404597409,0.7070148201080562,0.5219267264294485,0.35610975673514855,0.21624798971843262,0.10797925037770673,0.035667849405147445,0.002228657910774756,0.009009609027125998,0.05573736275192176,0.14052832427797446,0.2599645716618364,0.40923163218818237,0.5823125536673804,0.772230447656816,0.9713297276924656,1.171584705824718,1.3649231079370727,1.5435514669522805,1.7002692773329002,1.8287592473134597,1.9238419488038616,1.9816846000310362,1.9999555648943383,1.9779183411698351,1.9164612488999477,1.8180616222306203,1.6866859481217673,1.5276299773385102,1.3473052528448415,1.1529806606363138,0.9524894210929995,0.7539133320240976,0.5652569915619368,0.3941251329733362,0.24741607801536258,0.1310436657248104,0.049698865686433114,0.006660685143840772,0.0036639922838999084,0.04082958373514389,0.11665931525817486,0.22809649190967396,0.3706490833535757,0.538570797513262,0.7250927134886429,0.9226961366207169,1.123415676921555,1.3191603337828206,1.5020396440472386,1.6646817464183683,1.800530541040458,1.9041099657512042,1.9712447360362553,1.999228650663822,1.9869336786015082,1.9348554299243765,1.8450931777828532,1.721265236744475,1.5683631086070347,1.3925502750618484,1.2009137478718264,1.0011783915703787,0.8013955343285171,0.6096184190793155,0.4335775774581504,0.2803692122285669,0.1561691494930606,0.06598389126745918,0.013448803485979988,0.0006815744741272001,0.028196850975022447,0.0948854927496765,0.19805928199749534,0.3335592853615731,0.49592350044793376,0.678607029031757,0.8742459017723025,1.0749539196679017,1.2726405465782484,1.4593370385726336,1.6275176638363793,1.770403064768106,1.8822335337473444,1.9585011868323003,1.996131676470354,1.9936081183856051,1.951032237153389,1.8701202656846732,1.7541337639121974,1.6077481453756333,1.4368642113960615,1.248370289894668,1.0498645670330868,0.8493488044833604,0.654905788576744,0.4743735133498601,0.31502923116433157,0.18329610681092212,0.08448429986675898,0.022576912270459548,6.942956336408734e-5,0.01786912791798989,0.07525850185381111,0.16992418686872202,0.29805021111518326,0.45447181714834306,0.6328836531940913,0.826093941751364,1.0263143799977719,1.2254740861189146,1.4155449363908972,1.5888651786850414,1.738448277541525,1.8582645412720227,1.9434841787099653,1.9906719879945713,1.9979258294883493,1.9649533009874631,1.8930835244486108,1.7852135691099327,1.6456916706883713,1.4801419540862693,1.295237725030183,1.098432469251912,0.8976594026298896,0.7010116834169864,0.516416177195823,0.3513139250871177,0.21236019553260477,0.10515621055911595,0.03402336063172451,0.0018290094916982857,0.009870910782097564,0.05782489562460691,0.143757939860522,0.2642060842154619,0.4143140664276722,0.5880310367714301,0.7783544676871077,0.9776124255255434,1.1777728260381102,1.3707672075300785,1.5488159703886586,1.704741972585599,1.8322598401272807,1.9262293303534346,1.9828625350143296,1.9998765707760318,1.9765856022012271,1.913928487761943,1.814430934473354,1.6821036866953172,1.5222808531083079,1.3414048889002772,1.1467669005287096,0.9462127413665106,0.7478267455114413,0.5596058484423903,0.38913723071169337,0.24329247885077676,0.12795059185621427,0.047760998858866976,0.005956140729941217,0.004221170454725254,0.042626024649905614,0.11962260441996986,0.23210717919229684,0.37554549803388726,0.5441555652144355,0.7311407123377349,0.9289635719066089,1.129649908454522,1.3251100598160226,1.5074650312445583,1.669364097531671,1.8042811105912253,1.906777568356649,1.9727218406893154,1.999455715305844,1.9859015502613762,1.932605713674579,1.8417165596398775,1.7168978281174017,1.5631809596492203,1.3867622780929274,1.1947532169325012,0.9948936575381051,0.7952399347050262,0.6038400859609825,0.42840943533585174,0.2760195888068243,0.15281337800394756,0.06375724279178119,0.012441034178785837,0.0009333074957630361,0.029697938972498283,0.09757542689616261,0.20182963110202257,0.3382580667279603,0.501361306294411,0.684564661514735,0.8804832088468338,1.0812194756120712,1.2786817869587241,1.4649104411119167,1.6323985647909274,1.774394715119151,1.8851750301499761,1.960273957626083,1.9966642613004657,1.9928790487683101,1.949070901870196,1.8670057261211968,1.7499915670952415,1.6027452631749575,1.4312023098920732,1.2422776002223295,1.043586685389862,0.8431387921513733,0.6490139710272238,0.46903738962912533,0.3104639003116352,0.1796855972204806,0.08197415110719464,0.021268308387403012,1.5120352885311661e-5,0.019071302583265393,0.07766870075842969,0.17344525494356378,0.3025402141774183,0.45974976326543093,0.6387367884648059,0.8322863264113186,1.0325963991466736,1.2315925116919813,1.4212531347770787,1.593933052522936,1.742671540939181,1.8614729545673798,1.9455484108280252,1.991508829780386,1.9975015478664802,1.963284998741495,1.890238450808374,1.7813064089361972,1.640879921528778,1.474619577452045,1.289227327811659,1.0921763304395165,0.8914097070523412,0.6950203561766732,0.5109247285726234,0.34654371526382155,0.20850351157075342,0.10236851531113234,0.0324170260366341,0.001468786864555205,0.010771320689690445,0.05994964256179558,0.14702137532125226,0.2684766591823827,0.4194196341102483,0.5937657918395789,0.784487242280217,0.9838960076238603,1.1839539245742823,1.3765966625472903,1.5540587966729689,1.7091868319156758,1.8357275603135284,1.92858012766521,1.9840016488596026,1.9997580834987279,1.9752142900211198,1.9113596282452177,1.8107680782951765,1.6774944835141574,1.5169110998111024,1.3354910401337852,1.1405473434170477,0.9399381861309464,0.7417501193466725,0.5539721000261075,0.38417345632851907,0.2391987681457476,0.12489196222494536,0.04586074359994374,0.0052908590944128475,0.004817679931834906,0.044460279954713244,0.12262066675822558,0.2361481967318616,0.3804665774393907,0.5497583378747894,0.737199330600278,0.935233812991711,1.135879019071026,1.3310469446409066,1.5128703745707144,1.674020010079035,1.8079999126191724,1.9094093550306548,1.9741605247418361,1.9996433034118328,1.9848304807480666,1.9303191613323782,1.838306695347465,1.712502103435389,1.5579765661505487,1.3809590047743152,1.1885849936238957,0.9886091251963206,0.7890924227017102,0.5980774003803822,0.4232638699172766,0.27169856118809077,0.14949106872098172,0.06156757406459512,0.011472271509389231,0.001224501687797197,0.03123735199396027,0.10030100503933304,0.2056315063670512,0.3429829855998654,0.5068188073891196,0.6905347530734496,0.8867252365997271,1.0874818235466146,1.284712019956445,1.4704654806027426,1.6372544872453294,1.7783557784012105,1.888081563878986,1.9620087994862532,1.9971574798514844,1.9921107623803744,1.9470720801520716,1.8638569415358905,1.745819747085637,1.5977185737213029,1.4255233767444462,1.2361753410610492,1.0373070821583603,0.8369349755286277,0.643136016735883,0.463722237887787,0.3059258047793517,0.1761074884364472,0.07950026256396947,0.019998362482171905,3.0857939203876583e-7,0.020312222003788127,0.08011532993623627,0.17699897030600142,0.30705776553017394,0.46504904820485127,0.644604192922102,0.83848533543169,1.0388771308018865,1.2377017898161538,1.4269446944925834,1.598977467172713,1.7468654702709068,1.8646473413745357,1.9475752956425891,1.9923065089165306,1.9970378668943534,1.9615786486317242,1.8873582144993013,1.777368388695229,1.6360428588720763,1.469078454277514,1.283205506682356,1.0859165508431545,0.8851643005778985,0.6890410750328191,0.5054525974612254,0.34179931567925737,0.2046780901642784,0.09961627474221324,0.030848909066964025,0.0011480042574272264,0.011710803185524643,0.062111519640180246,0.15031850176090944,0.27277612788320527,0.42454813357588483,0.5995165923605346,0.7906285292036588,0.9901802257981623,1.1901277572920486,1.3824112427365365,1.5592797387241162,1.7136036797600849,1.8391622709039779,1.9308942478873368,1.9851018965740863,1.9996001077424397,1.9738044587935988,1.9087547718147424,1.8070731983717734,1.6728585206326692,1.511520929541545,1.329563940130713,1.1343222349616073,0.9336660032190744,0.7356836935444694,0.5483559688350254,0.3792340058832784,0.2351351075938004,0.12186789764088968,0.043998174966027315,0.004664866514548227,0.005453497154261577,0.04633227720003774,0.12565338385542768,0.240219384916046,0.38541212719730134,0.5553788941956657,0.7432683289725412,0.94150661221394,1.14210276273333,1.3369707537622462,1.5182554605252707,1.6786493001608997,1.811686800238896,1.9120052218228456,1.9755607313686254,1.9997914075724266,1.9837205123667374,1.9279958632121383,1.834863719588522,1.7080782363208402,1.552750133674474,1.3751406843238478,1.1824093215788165,0.9823250427718125,0.7829532411329307,0.5923305899524751,0.4181410844420509,0.267406300044541,0.14620235286893846,0.05941497157341313,0.010542553742046379,0.001555145548628456,0.03281502923563362,0.10306211952418476,0.20946475762605066,0.3477338553522381,0.5122957881713959,0.6965170679010738,0.8929717384831004,1.0937407161211556,1.2907310073890075,1.4760019376318714,1.6420852394001064,1.7822860981601436,1.8909530201320313,1.9637056438899356,1.9976113126422521,1.9913032895676213,1.9450358509485084,1.8606740362995269,1.7416184686621854,1.5926682755589758,1.4198276362600306,1.2300637534381234,1.0310260053703375,0.8307375996538531,0.6372721578703615,0.4584282680638899,0.30141512381341584,0.17256192178695573,0.07706273195088553,0.01876712471514519,2.4994827919178064e-5,0.02159183716569202,0.08259829275020925,0.18058519259126393,0.31160268673901215,0.47036946265521795,0.6504856348152501,0.8446907239638077,1.0451563268868571,1.2438016791869004,1.432619390731888,1.603998223390092,1.7510298998847384,1.867787576311366,1.9495647530957279,1.9930649938962328,1.996534804886443,1.9598343180555797,1.8844429292851692,1.7733996639310154,1.6311806737728203,1.4635188034260485,1.2771724994922073,1.0796533777120414,0.8789234298878964,0.683074076155221,0.4999999999999525,0.33708091372779625,0.20088408240983946,0.0968995975605006,0.029319071660237284,0.0008666743405921773,0.01268932116184629,0.06431044146978693,0.15364918894942137,0.2771043204974063,0.4296993622591667,0.6052832111887213,0.7967780858885609,0.9964648318342416,1.1962940803371533,1.3882107184335926,1.564478590324916,1.7179923416618992,1.8425638362343446,1.9331715996166159,1.9861632347001499,1.9994026497469015,1.9723561642042642,1.9061140213571544,1.8033464406435387,1.668195981162357,1.5061105552008625,1.3236238229998598,1.1280918210418227,0.9273964403696199,0.7296277077168356,0.5427576766953873,0.3743190744745092,0.23110165770146618,0.1188785175486805,0.04217336652489989,0.0040781877158413415,0.006128597008480119,0.04824194244575308,0.12872063592515737,0.24432058294095627,0.39038195196799175,0.5610170121761889,0.7493474677412943,0.947781721809944,1.148320893615963,1.3428812532012262,1.523620076407918,1.6832517849296158,1.815341627825617,1.914565066201632,1.976922405264274,1.9999000219378023,1.9825716889589686,1.9256359110795478,1.8313877683537596,1.7036264015079705,1.5475018686546633,1.36930754655385,1.1762264447241135,0.9760416584731991,0.7768226324845692,0.5865998816648199,0.4130412812502231,0.26314297491201344,0.1429473603454806,0.05729952034189956,0.009651917598739734,0.0019252260184765557,0.03443090838236862,0.1058586612920982,0.21332923347306232,0.3525104883352349,0.5177920323113148,0.7025113697079319,0.8992224677723519,1.0999959061216278,1.2967385115184575,1.4815195935202834,1.6468906304501765,1.7861855191559044,1.8937892854921827,1.9653644238151284,1.9980257417472727,1.9904566622236182,1.942962294686632,1.8574571361306633,1.7373878977670891,1.5875945681647343,1.4141153134091216,1.2239430787493049,1.02474370311615,0.8245469093111577,0.63142262604161,0.45315568925864425,0.2969320355768984,0.16904903731501564,0.07466165554558779,0.017574643717804705,8.917812341024955e-5,0.022910097526670503,0.08511749112819866,0.1842037801506209,0.316174798288438,0.4757107964706667,0.6563808818386977,0.8509022469070233,1.0514337393856836,1.2498919388705272,1.4382769993556983,1.608995122864936,1.7551646652939668,1.87089353534485,1.951516704607747,1.9937842547608342,1.9959923817127376,1.9580520759106732,1.881492710313934,1.7694003914004541,1.6262935582777192,1.4579408444932302,1.2711285445330824,1.0733870584289207,0.8726873414844025,0.6771195952286044,0.49456715155598086,0.3323886957771254,0.1971216381631482,0.0942185910693778,0.0278275742420242,0.0006248082260427168,0.013706835969135578,0.06654632119766568,0.157013305331282,0.28146106606988586,0.43487311669636064,0.6110654205541354,0.8029356694395787,1.0027495775026278,1.202452650151958,1.3939948605702024,1.5696551461310453,1.7223526442776407,1.8459321219495448,1.9354120929021705,1.9871856213170151,1.9991657173113153,1.9708694634578925,1.903437481177001,1.7995879523100413,1.6635070492644075,1.5006801904881573,1.3176709233641746,1.1218563477470214,0.921129745217934,0.7235824010632514,0.537177444728677,0.36942885623234023,0.2270985777822324,0.1159239400229275,0.04038639035290781,0.0035308458709359947,0.0068429528293734165,0.05018920026375018,0.13182230181701504,0.24845162881733274,0.39537585545328835,0.5666724691217825,0.7554365067922313,0.9540588939252864,1.154533166114641,1.3487782095048444,1.5289640103269715,1.6878272825958738,1.8189642510208301,1.9170887870580553,1.9782454926453636,1.9999691422179064,1.9813840559010163,1.923239398148076,1.8278789789366083,1.6991467748354236,1.5422319783872191,1.3634598218616392,1.1700366072712682,0.9697592204822063,0.7707008389035044,0.5808855018690776,0.40796466177385604,0.2589087541834699,0.13972621971661991,0.05522130392618041,0.008800398257887032,0.0023347284798982404,0.03608492561014576,0.10869051988514389,0.21722478126892142,0.3573126958810273,0.5233073227181373,0.7085174217309947,0.9054771775759056,1.1062471464803791,1.3027342950599197,1.4870182303312185,1.651670470592082,1.7900538873692753,1.8965902479325598,1.9669850737432855,1.9984007507973967,1.9895709137884716,1.9408514932677063,1.8542063680905043,1.7331282014995812,1.5824976519402298,1.4083866338175,1.2178135587488796,1.0184604235342167,0.8183631490206404,0.6255876522945838,0.44790470972878693,0.29247671714272927,0.16556897377256286,0.0722971281858742,0.016420966590794395,0.00019285593074891416,0.024266951018042215,0.08767282556686717,0.1878545900570434,0.320773919589074,0.48107283867901196,0.6622897011418293,0.8571196589185035,1.0577091203530258,1.2559723283138038,1.443917296899595,1.6139679682295838,1.759269603183337,1.8739650957957377,1.9534310730804516,1.9944642631009448,1.9954106187978582,1.95623199259213,1.8785076741134175,1.7653707290668397,1.6213817054182287,1.4523447977971697,1.2650738805295396,1.067117840501369,0.8664562816805373,0.6711778674431539,0.48915426671584905,0.32772284716058697,0.1933909060335267,0.09157336116328318,0.026374475723514812,0.00042241546700094723,0.014763307417557936,0.06881907051084213,0.16041071803038587,0.28584619251783794,0.44006919253471144,0.6168629920708735,0.8091010366442664,1.0090342145679938,1.2086032234851722,1.3997634406845398,1.5748092016787252,1.7266844153839276,1.8492669950087928,1.9376156392488393,1.9881690160424754,1.998889319794041,1.9693444152762405,1.9007252569923596,1.7957978818243183,1.6587919101421582,1.4952300498920614,1.3117054763514913,1.115616061366141,0.914866165286383,0.7175480123614462,0.5316154933429871,0.3645635443106914,0.2231260259498853,0.11300428176363486,0.03863731703209705,0.0030228625987788194,0.007596536401304754,0.052173973741171165,0.13495825902129488,0.2526123593769838,0.4003936404036397,0.5723450416531172,0.7615352056203892,0.960337880624008,1.16073933485715,1.3546613897547053,1.534287051207353,1.6923756124365938,1.8225545267380403,1.9195762847102404,1.9795299412524958,1.9999987656826221,1.9801576601020519,1.920806419075229,1.8243374899271627,1.6946395332396473,1.5369406710226388,1.3575977412211624,1.16384005370658,0.9634779769424437,0.7645881021885486,0.5751876762722234,0.40291142652971457,0.2547038051022299,0.136539058210846,0.053180404411718674,0.007988029352811954,0.0027836367583281563,0.037777015588476126,0.11155758345062927,0.22115124714714807,0.36214028831194356,0.5288414415484344,0.7145349867427968,0.9117356208453593,1.1124941902858172,1.3087181211918395,1.4924976308793325,1.6564245710313599,1.793891050007106,1.8993557968207027,1.9685675296619198,1.9987363249805057,1.9886460792475358,1.938703530064352,1.850921860577937,1.728839548109213,1.5773777282036354,1.4026418237566451,1.2116754355411703,1.0121764148019567,0.812186563028565,0.6197674670993808,0.4426755368775913,0.2880493444874709,0.16212186861539246,0.0699692432658855,0.01530613890209298,0.0003360241548664433,0.025662344046761487,0.09026419513543538,0.19153747811058475,0.32539986898466966,0.486455377490127,0.6682118593378978,0.8633427144224712,1.0639822219234447,1.2620426073533,1.4495400605830142,1.6189165630664193,1.7633445514159467,1.877002136343318,1.9553077828999468,1.995104992057583,1.9947895391203052,1.954374139989632,1.8754879385867897,1.7613108360941325,1.616445309202791,1.4467308843707098,1.259008746628796,1.060845971551057,0.8602304965912521,0.6652491274856511,0.4837615592778687,0.3230835521700294,0.18969203337749208,0.08896401232374085,0.024959833499296757,0.0002595040575850138,0.015858693778588062,0.07112859964022644,0.1638412928556081,0.2902595266372293,0.4452873845391563,0.6226756967463628,0.8152739439827391,1.0153184947995304,1.214745557401018,1.4055162309287175,1.5799405533929862,1.730987483884394,1.8525683236911596,1.9397821516209142,1.9891133800343175,1.998573468112247,1.9677810798956852,1.897977455930656,1.7919763788866354,1.6540507500345907,1.489760348682612,1.3057277175851316,1.1093712083778877,0.9086059479739478,0.7115247799579111,0.5260720422246647,0.3597233308799952,0.21918415911219802,0.11011965809156432,0.036926215647425376,0.002554257963700457,0.00838931795917719,0.054196184483473964,0.1381283836739099,0.25680261027923157,0.40543510862649423,0.5780345057145237,0.7676433233391532,0.9666184338985911,1.166939154711912,1.360530561576861,1.5395889887995082,1.6968965948016885,1.8261123131684789,1.9220274609069186,1.9807757003524995,1.9999888911618817,1.9788925500022987,1.918337069958985,1.8207634412072755,1.6901048547478241,1.531628155557066,1.3517215361727641,1.1576370287819577,0.9571981759506837,0.7584846637806755,0.5695066299270644,0.39788177511038214,0.2505282937556681,0.13338600171494708,0.051176902409997393,0.007214842970489244,0.0032719331227948345,0.03950711148316155,0.11445973874502458,0.2251084760201303,0.36699307494766054,0.5343941702156909,0.720563827061458,0.9179975503841671,1.118736790791766,1.3146897535649553,1.4979575787392734,1.6611527439904759,1.7976968555090849,1.902085822922766,1.970111729067162,1.9990324510420963,1.9876821951299413,1.936518489916855,1.8476037433246704,1.724522106989518,1.5722349991815951,1.3968811101352618,1.2055289515698668,1.0058919251253622,0.8060173952981599,0.6139623003415593,0.4374683772470116,0.2836500924835591,0.15870785799737985,0.06767809273258418,0.014230204685202641,0.0005186771409031454,0.027096221497546646,0.09289149747989756,0.19525229884447226,0.3300524637593176,0.49185820030440763,0.674147122513404,0.8695711676204668,1.0702527963218733,1.268102536224927,1.4551450683176403,1.6238407119157632,1.7673893490392785,1.8800045370305158,1.9571467599399874,1.9957064163231912,1.9941291672114931,1.9524785914847043,1.872433623007614,1.7572208728399044,1.6114845646095315,1.4410993259525984,1.2529333823917175,1.0545716993044794,0.8540102321224811,0.6593336095295625,0.4783892422435777,0.3184709940484848,0.1860251662931769,0.0863906476147579,0.023583703444930215,0.0001360804324812559,0.016992951786557464,0.07347481736400063,0.16730489430611117,0.29470089411011713,0.4505274866014628,0.6285033049898794,0.8214541476374035,1.0216021699808626,1.2208794092894912,1.4112530040789333,1.5850489985952447,1.7352616798161375,1.8558359776008309,1.9419115444454151,1.9900186759920386,1.998218174741456,1.9661795190649571,1.8951941865246285,1.7881235944387766,1.6492837562081237,1.4842713029022556,1.2997378831750321,1.1031220354420177,0.9023493405467928,0.7055129417584856,0.5205473103291312,0.3549084071190791,0.21527313296537665,0.10727018294362922,0.035253153784003954,0.0021250504746700427,0.00922126618969088,0.05625575261720084,0.1413325505610532,0.2610222160174792,0.410500060993676,0.5837406365834588,0.7737606186898807,0.9729003056793006,1.173132380798342,1.3663854931505621,1.5448696136873252,1.7013900511212414,1.8296374697864466,1.9244422188313592,1.9819827207403393,1.9999395190457094,1.9775887755711186,1.9158314483337364,1.8171569739449742,1.6855429184708401,1.5262946418243222,1.345831438815098,1.1514277775045798,0.9509200655469477,0.752390764754035,0.5638425872236608,0.3928759061772943,0.2463823850681982,0.13026717476839833,0.049210877055514746,0.006480869650248078,0.0037995982865540734,0.041275144958815124,0.11739687113895236,0.2290963115848912,0.37187086411247017,0.5399652893980413,0.7266037045596373,0.9242627188585351,1.1249747014277776,1.3206489563113115,1.503397858253833,1.6658548027159772,1.8014711535533765,1.9047802184080878,1.9716176109661139,1.9992891172857536,1.9866792995071973,1.9342964591300058,1.8442521473898155,1.7201760486708562,1.5670696680020741,1.3911047204901088,1.199374349608892,0.9996072027291938,0.7998558894993111,0.60817238131411,0.4322834365098055,0.27927913489272116,0.15532707676510982,0.06542376708186992,0.013193206437409843,0.00074080767441842,0.028568526735084143,0.09555462882711918,0.19899890553058985,0.3347315201446702,0.4972810937207782,0.6800952562369049,0.8758047725011711,1.0765205958729493,1.2741518755734065,1.460732098716788,1.6287402202832375,1.7714038362919964,1.8829721792684593,1.9589479315645608,1.9962685121427057,1.993429529154838,1.950545421947787,1.8693448480152954,1.753101000849737,1.6064996675780208,1.4354503449782208,1.2468480277832488,1.0482952715829421,0.8477957339624436,0.6534315472262185,0.47303752780884034,0.3138853549829317,0.18239044961475537,0.08385336867918347,0.02224613991484725,5.2149466676976175e-5,0.018166036640565042,0.07585763101109189,0.17080138557644808,0.299170119511298,0.4557892917479004,0.6343455866226693,0.8276414035021408,1.0278849919188322,1.2270045368756108,1.4169735335439255,1.5901343355122357,1.7395068343568991,1.8590698276717217,1.9440037336155496,1.990884868158243,1.9978234537150448,1.964539796042533,1.8923755587080477,1.7842396806582932,1.6444911169495557,1.4787631293573116,1.2937362097077694,1.0968687893884639,0.8960965901289518,0.6995127352188523,0.5150415158721361,0.35011896320796654,0.2113931019871942,0.10445596886865005,0.03361819752454798,0.0017352570845173831,0.010092348232542236,0.05835259679349525,0.14457063312442986,0.26527100992544217,0.4155882974497984,0.5894632088790734,0.7798868500514304,0.9791832478445497,1.179318768495961,1.3722259532175212,1.5501287172965963,1.705855803912642,1.8331298573551886,1.9268204631054164,1.9831509547410826,1.9998506512842051,1.9762463883050139,1.913289653166658,1.813518230588562,1.680953904596211,1.5209403404879076,1.339927681795324,1.145212545127666,0.9446438937041418,0.7463066458053284,0.5581957718807702,0.3878940174523434,0.24226624279506348,0.12718270055873337,0.04728240600229994,0.005786138382618544,0.004366611407849996,0.04308104618159003,0.12036886462151108,0.23311459632998088,0.3767734631433769,0.5455545790470276,0.7326543806740464,0.9305308788067379,1.1312076758088696,1.3265954940542222,1.5088182545424678,1.6705305614855326,1.8052137950626952,1.907438876853488,1.9730851158794303,1.9995063135736721,1.9856374319917651,1.9320375254696116,1.8408672051546398,1.7158015448139872,1.5618819386854077,1.3853128829775359,1.1932118727531469,0.9933224958476317,0.7937022889992744,0.6023979387073477,0.42712091946093833,0.2749366443593477,0.15197965845279682,0.06320635535513452,0.0121951851181068,0.00100240698169074,0.03007920160615818,0.09825348398850364,0.20277715018540665,0.3394368533272838,0.502723843545608,0.6860560255689188,0.8820432828491069,1.0827853730110253,1.2801903864618351,1.4663009311036388,1.6336148946479825,1.775387854609526,1.8859049458410064,1.96071122663096,1.9967912573144462,1.9926906525846557,1.948574707735276,1.8662217356104862,1.7489513828503997,1.6014908150018925,1.4297841645712208,1.2407529231629342,1.0420169362932292,0.8415872475718251,0.647543173695478,0.4677066273557602,0.3093268160970988,0.17878802690632456,0.08135227573463966,0.020947195740178004,7.714475279807509e-6,0.019377902006044945,0.07827694646508754,0.17433062856196058,0.30366702631491105,0.4610725921476052,0.6402023108860935,0.8338354671926187,1.034166712454437,1.233120698228546,1.4226775933741287,1.5951963632831458,1.7437227798314194,1.8622697461731716,1.946058636493845,1.991711922320012,1.997389320623716,1.9628619755942185,1.8895216838111222,1.7803247909521462,1.6396730215588895,1.4732360456098061,1.2877229342375383,1.0906117172081529,0.8898479436914352,0.6935243973355913,0.5095548763220369,0.3453551883201911,0.2075442194311775,0.10167712702239695,0.03202141144658521,0.0013848931893375438,0.01100252968167148,0.060486634191173394,0.14784250346626093,0.26954882418418946,0.4206996170192485,0.5952019965708044,0.7860217754498179,0.9854670122308148,1.1854980734547271,1.3780517110910466,1.5553660919028771,1.7102936767872716,1.8365893379324503,1.9291620997931163,1.984280356211783,1.999722291387474,1.9748654412256914,1.9107117848535238,1.8098473548611815,1.676337994380963,1.5155654630321036,1.3340104983004526,1.1389915771406773,0.9383699083186026,0.7402325472454043,0.5525664069363955,0.3829363057105212,0.2381800295157921,0.12413270091656503,0.0453915654211704,0.005130676608106177,0.004972950090788242,0.04492474382193823,0.12337560180469276,0.2371631715410527,0.3817006783973562,0.551161818396797,0.7387156164148734,0.9368017826485527,1.1374354677448069,1.3325291319172434,1.5142185535102786,1.6751798356161176,1.8089246322099228,1.9100616932470391,1.9745141858435766,1.9996840313270248,1.9845566337353078,1.9297417781591926,1.8374490503178906,1.7113987682031346,1.5566720161366114,1.3795058263634252,1.1870417644082425,0.9870380527144708,0.7875568368533955,0.5966392006002997,0.42198103000949827,0.2706227924031992,0.1486657352770051,0.06102594513590176,0.011236180147156882,0.0013034647300770308,0.03162818644210719,0.10098795636462543,0.2065868835754805,0.3441682774555769,0.5081862348012738,0.6920291950707742,0.888286452255492,1.0890468802893796,1.2862178303806853,1.4718513455205624,1.638464542470031,1.7793412466310494,1.8888027209096445,1.9624365754924327,1.9972746311910057,1.9919125666851047,1.9465665266865093,1.8630644091499886,1.7447721827437968,1.5964582047209768,1.4241010085344834,1.234648309275314,1.035736941417243,0.8353850181735214,0.64166872151652,0.46239675144461856,0.30479555744422926,0.1752180404565642,0.07888746756933496,0.019686922226663794,2.7772133861514448e-6,0.020628500016720563,0.08073266816778302,0.17789248386455148,0.3081914369022205,0.4663771791204062,0.6460732464508449,0.8400360940554976,1.0404470834720645,1.2392276517722787,1.4283649582701858,1.600234881967646,1.74790934971814,1.8654356067147466,1.94807617191579,1.9924998058103474,1.9969157926148893,1.9611461239907144,1.886632674556247,1.7763790799506414,1.6348296603413353,1.467690269968882,1.2816982942772257,1.084351066043023,0.8836036480434939,0.6875481646361685,0.5040876083902104,0.340617270615754,0.2037266373207609,0.0989337671636622,0.030462858620026623,0.001073972627808173,0.011951774586698494,0.0626577805198758,0.15114803235410168,0.27385548982854535,0.4258338178150428,0.6009567729878185,0.7921651525673277,0.9917513506414144,1.1916700516043541,1.3838625366651547,1.560581530640167,1.7147034944579573,1.8400157748753605,1.9314670364044542,1.985370880543322,1.9995544444254811,1.9734459888778222,1.908097945215203,1.8061444917553409,1.6716953701443922,1.5101702217541015,1.3280801220474932,1.1327651192596198,0.9320983572006464,0.734168708989106,0.5469547147393858,0.37800296677160505,0.23412390662777594,0.121117296310994,0.04353842999668067,0.004514510216162559,0.00561859038618262,0.046806165057427074,0.12641696392834278,0.24124187730719782,0.3866523152590917,0.5567867859725195,0.7447871723752213,0.9430751826957184,1.1436578312498247,1.3384496355330224,1.519598541856169,1.6798024414704578,1.8126035184243547,1.9126485639926982,1.9759047644130225,1.9998222635263123,1.98343694742723,1.9274093078762142,1.833997817889904,1.7069678927395588,1.5514401061375724,1.3736837800150972,1.1808642682813288,0.9807541215527471,0.781419775794953,0.5908963944520094,0.41686397117101603,0.26633774941287025,0.1453854381311247,0.05888262254596954,0.010316229403405819,0.001643969028372716,0.03321542006110412,0.10375793794920107,0.21042795522403746,0.3489256056476824,0.5136680517337633,0.6980145288141266,0.8945340341275205,1.095304870391123,1.2922339692578795,1.4773831227367984,1.6432889721976516,1.7832638562054233,1.8916653900180602,1.9641239100011227,1.9977186146800667,1.991095302189076,1.9445209581206528,1.8598729933418188,1.7405635656000418,1.5914020355134866,1.4184011013417053,1.2285344272408574,1.0294555350020949,0.8291892907434011,0.6358084227186578,0.4571081098049793,0.3002917580002963,0.17168063127272815,0.07645904153830296,0.018465369152630973,3.7337876007015325e-5,0.021917781276383552,0.08322469912299835,0.18148681079800355,0.31274317256782136,0.47170284314564104,0.6519581614266153,0.8462430391782059,1.046725856909519,1.2453251562941479,1.4340354035924676,1.605249692554245,1.7520663786557802,1.8685672842510646,1.9500562601926994,1.9932484875093872,1.9964028883919824,1.9593923090046945,1.8837086450537133,1.7724027035016054,1.6299612246000519,1.4621260214816756,1.27566252778794,1.0780870831767138,0.877363949822757,0.6815842731699199,0.4986399280229923,0.33590539723283297,0.199940506442863,0.0962259976498665,0.028942600604618063,0.0008025076806755793,0.012940045454349902,0.06486595002362883,0.15448708922593934,0.27819083675344836,0.43099069704643633,0.6067273108279678,0.7983167387527511,0.9980360148574485,1.1978344591635028,1.3896582004237625,1.565774827509171,1.7190850827455697,1.8434090328464585,1.9337351818988409,1.9864224846620924,1.9993471170278418,1.9719880873269837,1.905448237493177,1.8024097875268552,1.667026215261197,1.5047548297550328,1.3221367872745422,1.12653341741734,0.9258294880642136,0.7281153705463437,0.5413609169405518,0.37309419549269673,0.23009803433989573,0.11813660584457253,0.04172307292400257,0.003937663544149039,0.00630350679252345,0.04872523557565134,0.12949283086458008,0.2453505525276295,0.391628178148661,0.5624292595988298,0.7508688087406756,0.9493508311611518,1.1498745205529095,1.3443567710536262,1.524958007080981,1.6843981964647925,1.816250308397218,1.9151993869141561,1.9772567966627244,1.999921004711629,1.9822784172929802,1.925040206748668,1.8305136441875758,1.7025090934338913,1.546186415338357,1.3678469738921475,1.1746796283713596,0.974470950565275,0.7752913482255723,0.585169747091926,0.41176994505944176,0.2620816846393673,0.14213889658038614,0.056776472242406784,0.009435369223081858,0.0020239064273325225,0.03484083977045416,0.1065633193334542,0.21430021341629968,0.3537086499984886,0.5191690778221825,0.7040117903897337,0.9007857816977639,1.1015590961379487,1.298238565467759,1.4828960442581216,1.6480879932753556,1.7871555283971392,1.8944928400964485,1.9657731635106632,1.9981231902451544,1.990238891376913,1.9424380828337184,1.8566476142408002,1.736325697651162,1.5863225070881666,1.412684668128017,1.2224115185457756,1.0231729651513313,0.8230003100004063,0.6299625087720679,0.45184091132788584,0.2958155956564421,0.16817593907571848,0.07406709355968588,0.017282584767003617,0.0001113950980625722,0.023245694860980937,0.08575294090040964,0.18511346739333845,0.3173220535271857,0.47704937387004986,0.657856823370832,0.8524560573986126,1.0530027847673653,1.251412970954491,1.4396887053695302,1.6102405969677824,1.7561937024498686,1.8716646550870761,1.951998823114907,1.9939579378457157,1.9958506282136934,1.9576005999084336,1.8807497107968865,1.768395818664235,1.6250679066289453,1.4565435199249626,1.269615873170702,1.071820016024122,0.8711290954849252,0.6756329584991578,0.49321205039295024,0.33121975428116546,0.1961859763422109,0.09355392543253283,0.02746069744764401,0.0005705090702815552,0.013967303249871055,0.0671110554840777,0.15785954219565101,0.2825546937214517,0.43617005102664996,0.6125133821663523,0.8044762910306382,1.004320756647035,1.2039910526505273,1.3954384734493352,1.5709457773845892,1.723438268586063,1.846768977818725,1.935966446689112,1.9874351270318191,1.999100317383591,1.9704917941573938,1.902762766345643,1.798643389689065,1.662330714153733,1.4993195009325289,1.316180728731855,1.1202967177536975,0.919563548516972,0.7220727710119763,0.5357852344839099,0.3682101857607897,0.2261025716661208,0.11519074724855383,0.03994556590617171,0.003400159376375278,0.0070276722569343475,0.05068187957702863,0.1326030811228749,0.24948903491782826,0.39662807052926163,0.5680890164092136,0.7569602852983348,0.9556284801694157,1.1560852901071668,1.3502503051587067,1.5302967374964709,1.6889669190756673,1.8198648580874766,1.9177140612589665,1.9785702291900642,1.9999802509828952,1.9810810890922013,1.9226345683513906,1.8269966668288546,1.6980225463999377,1.5409111512495197,1.3619956385368397,1.168488088959453,0.9681887879251846,0.769171796206096,0.5794594847112599,0.4066991528787003,0.2578547661886508,0.13892623885691602,0.05470757741397303,0.00859363439841565,0.0024432619201759653,0.03650438136936107,0.10940398971023346,0.21820350520554066,0.35851722158714616,0.5246890957869145,0.7100207429178779,0.907041448034596,1.1078093105000077,1.3042313818405773,1.4883898923350687,1.6528614161514177,1.7910161094928663,1.8972849594659875,1.9673842708786942,1.9984883419063353,1.9893433680751111,1.9403179830951482,1.8533883992430091,1.7320587462848411,1.5812198200763117,1.4069519346809822,1.2162798250329259,1.0168894800139971,0.816818320397446,0.6241312105790712,0.4465953640570386,0.29136724721219986,0.16470410229392296,0.07171171811072496,0.01613861578748277,0.00022494595444311205,0.024612188320561446,0.08831729363943686,0.1887723104047483,0.3219278989233507,0.48241656011617906,0.6637689992980507,0.858674903314824,1.059277619119292,1.257490855296707,1.4453246403070668,1.6152073980774349,1.760291158079303,1.874727596882667,1.9539037839550324,1.9946281287974,1.9952590338932334,1.9557710674708857,1.877755988657853,1.764358583702533,1.6201498997041912,1.4509429857967824,1.2635585692563722,1.0655501121220805,0.8648993312944886,0.6696944556887894,0.4878041898907768,0.3265605268346068,0.19246319531536293,0.09091765605321367,0.026017207681284682,0.00037798596010962804,0.015033507398561574,0.06939300822397043,0.1612652580580357,0.28694688836870563,0.44137167518147624,0.618314758464319,0.810643566110448,1.0106053277753413,1.210139588892087,1.4012031274325563,1.576094176024161,1.7277628800369187,1.8500954770809983,1.9381607426446927,1.9884087676551192,1.998814055240826,1.9689571684697738,1.9000416378435296,1.794845447007279,1.6576090522849782,1.493864449971296,1.310212181672036,1.1140552666062948,0.913300786051556,0.7160411490566982,0.5302278875979567,0.36335113048466605,0.22213767641951687,0.11227983687872245,0.03820597915119017,0.002902018943190421,0.00779105817630088,0.05267601977800174,0.13574759185428842,0.25365716101572555,0.4016517949150644,0.5737658328542996,0.7630613614469594,0.9619078817653742,1.1622898945991833,1.3561300050653586,1.5356145222332822,1.6935084288476034,1.8234470247275238,1.9201924877023455,1.9798450101169913,2.0],"x":[0.0,0.2011122078817172,0.4022244157634344,0.6033366236451516,0.8044488315268687,1.0055610394085859,1.2066732472903032,1.4077854551720204,1.6088976630537375,1.8100098709354546,2.0111220788171718,2.2122342866988887,2.4133464945806065,2.614458702462324,2.8155709103440407,3.0166831182257576,3.217795326107475,3.4189075339891923,3.6200197418709092,3.821131949752626,4.0222441576343435,4.223356365516061,4.424468573397777,4.625580781279495,4.826692989161213,5.02780519704293,5.228917404924648,5.430029612806364,5.6311418206880814,5.832254028569799,6.033366236451515,6.234478444333233,6.43559065221495,6.636702860096667,6.837815067978385,7.038927275860101,7.2400394837418185,7.441151691623536,7.642263899505252,7.8433761073869706,8.044488315268687,8.245600523150404,8.446712731032122,8.647824938913839,8.848937146795555,9.050049354677274,9.25116156255899,9.452273770440708,9.653385978322426,9.854498186204141,10.05561039408586,10.256722601967576,10.457834809849295,10.65894701773101,10.860059225612728,11.061171433494446,11.262283641376163,11.463395849257878,11.664508057139598,11.865620265021313,12.06673247290303,12.267844680784748,12.468956888666465,12.670069096548184,12.8711813044299,13.072293512311617,13.273405720193335,13.474517928075052,13.67563013595677,13.876742343838487,14.077854551720202,14.278966759601921,14.480078967483637,14.681191175365354,14.882303383247072,15.083415591128789,15.284527799010505,15.485640006892224,15.686752214773941,15.887864422655658,16.088976630537374,16.29008883841909,16.49120104630081,16.69231325418253,16.893425462064243,17.09453766994596,17.295649877827678,17.496762085709396,17.69787429359111,17.89898650147283,18.100098709354548,18.301210917236265,18.50232312511798,18.703435332999696,18.904547540881417,19.105659748763134,19.30677195664485,19.507884164526565,19.708996372408283,19.910108580290004,20.11122078817172,20.312332996053435,20.513445203935152,20.71455741181687,20.91566961969859,21.116781827580304,21.31789403546202,21.51900624334374,21.720118451225456,21.921230659107174,22.12234286698889,22.32345507487061,22.524567282752326,22.725679490634043,22.926791698515757,23.127903906397478,23.329016114279195,23.530128322160913,23.731240530042626,23.932352737924344,24.13346494580606,24.334577153687782,24.535689361569496,24.736801569451213,24.93791377733293,25.139025985214648,25.34013819309637,25.541250400978083,25.7423626088598,25.943474816741517,26.144587024623235,26.345699232504952,26.54681144038667,26.747923648268387,26.949035856150104,27.150148064031818,27.35126027191354,27.552372479795256,27.753484687676973,27.95459689555869,28.155709103440405,28.356821311322122,28.557933519203843,28.75904572708556,28.960157934967274,29.16127014284899,29.36238235073071,29.56349455861243,29.764606766494143,29.96571897437586,30.166831182257578,30.367943390139295,30.56905559802101,30.77016780590273,30.971280013784448,31.172392221666165,31.373504429547882,31.574616637429596,31.775728845311317,31.976841053193034,32.17795326107475,32.37906546895647,32.58017767683818,32.7812898847199,32.98240209260162,33.18351430048333,33.38462650836506,33.58573871624677,33.78685092412849,33.98796313201021,34.18907533989192,34.39018754777364,34.591299755655356,34.79241196353707,34.99352417141879,35.194636379300505,35.39574858718222,35.59686079506395,35.79797300294566,35.99908521082738,36.200197418709095,36.40130962659081,36.60242183447253,36.803534042354244,37.00464625023596,37.20575845811768,37.40687066599939,37.60798287388112,37.809095081762834,38.01020728964455,38.21131949752627,38.41243170540798,38.6135439132897,38.81465612117142,39.01576832905313,39.21688053693485,39.417992744816566,39.61910495269828,39.82021716058001,40.02132936846172,40.22244157634344,40.423553784225156,40.62466599210687,40.82577819998859,41.026890407870305,41.228002615752025,41.42911482363374,41.63022703151545,41.83133923939718,42.032451447278895,42.23356365516061,42.43467586304233,42.63578807092404,42.836900278805764,43.03801248668748,43.23912469456919,43.44023690245091,43.64134911033263,43.84246131821435,44.04357352609607,44.24468573397778,44.4457979418595,44.64691014974122,44.84802235762293,45.04913456550465,45.250246773386365,45.451358981268086,45.6524711891498,45.853583397031514,46.054695604913235,46.255807812794956,46.45692002067668,46.65803222855839,46.859144436440104,47.060256644321825,47.26136885220354,47.46248106008525,47.663593267966974,47.86470547584869,48.06581768373041,48.26692989161212,48.46804209949384,48.669154307375564,48.87026651525728,49.07137872313899,49.27249093102071,49.473603138902426,49.67471534678415,49.87582755466586,50.076939762547575,50.278051970429296,50.47916417831102,50.68027638619274,50.88138859407445,51.082500801956165,51.283613009837886,51.4847252177196,51.685837425601314,51.886949633483034,52.08806184136475,52.28917404924647,52.49028625712818,52.691398465009904,52.892510672891625,53.09362288077334,53.29473508865506,53.49584729653677,53.69695950441849,53.89807171230021,54.09918392018192,54.300296128063636,54.50140833594536,54.70252054382708,54.9036327517088,55.10474495959051,55.305857167472226,55.50696937535395,55.70808158323566,55.90919379111738,56.110305998999095,56.31141820688081,56.51253041476253,56.713642622644244,56.914754830525965,57.115867038407686,57.3169792462894,57.51809145417112,57.719203662052834,57.92031586993455,58.12142807781627,58.32254028569798,58.5236524935797,58.72476470146142,58.92587690934313,59.12698911722486,59.32810132510657,59.52921353298829,59.73032574087001,59.93143794875172,60.13255015663344,60.333662364515156,60.53477457239687,60.73588678027859,60.936998988160305,61.13811119604202,61.33922340392375,61.54033561180546,61.74144781968718,61.942560027568895,62.14367223545061,62.34478444333233,62.54589665121404,62.747008859095764,62.94812106697748,63.14923327485919,63.35034548274092,63.551457690622634,63.75256989850435,63.95368210638607,64.15479431426779,64.3559065221495,64.55701873003122,64.75813093791294,64.95924314579464,65.16035535367637,65.36146756155809,65.5625797694398,65.76369197732153,65.96480418520323,66.16591639308496,66.36702860096666,66.56814080884838,66.76925301673012,66.97036522461183,67.17147743249355,67.37258964037525,67.57370184825697,67.7748140561387,67.97592626402042,68.17703847190212,68.37815067978384,68.57926288766555,68.78037509554729,68.981487303429,69.18259951131071,69.38371171919243,69.58482392707414,69.78593613495586,69.98704834283758,70.1881605507193,70.38927275860101,70.59038496648273,70.79149717436444,70.99260938224617,71.1937215901279,71.3948337980096,71.59594600589132,71.79705821377303,71.99817042165476,72.19928262953647,72.40039483741819,72.6015070452999,72.80261925318162,73.00373146106335,73.20484366894506,73.40595587682678,73.60706808470849,73.80818029259021,74.00929250047191,74.21040470835365,74.41151691623536,74.61262912411708,74.81374133199878,75.0148535398805,75.21596574776224,75.41707795564395,75.61819016352567,75.81930237140737,76.0204145792891,76.22152678717082,76.42263899505254,76.62375120293424,76.82486341081596,77.02597561869767,77.2270878265794,77.42820003446113,77.62931224234283,77.83042445022456,78.03153665810626,78.232648865988,78.4337610738697,78.63487328175142,78.83598548963313,79.03709769751485,79.23820990539656,79.4393221132783,79.64043432116001,79.84154652904172,80.04265873692344,80.24377094480515,80.44488315268688,80.64599536056859,80.84710756845031,81.04821977633202,81.24933198421374,81.45044419209546,81.65155639997718,81.8526686078589,82.05378081574061,82.25489302362233,82.45600523150405,82.65711743938577,82.85822964726748,83.0593418551492,83.2604540630309,83.46156627091263,83.66267847879436,83.86379068667607,84.06490289455779,84.2660151024395,84.46712731032122,84.66823951820294,84.86935172608466,85.07046393396637,85.27157614184809,85.4726883497298,85.67380055761153,85.87491276549325,86.07602497337496,86.27713718125668,86.47824938913838,86.67936159702012,86.88047380490183,87.08158601278355,87.28269822066525,87.48381042854697,87.6849226364287,87.88603484431042,88.08714705219214,88.28825926007384,88.48937146795556,88.69048367583727,88.891595883719,89.09270809160071,89.29382029948243,89.49493250736414,89.69604471524586,89.89715692312758,90.0982691310093,90.29938133889102,90.50049354677273,90.70160575465445,90.90271796253617,91.1038301704179,91.3049423782996,91.50605458618132,91.70716679406303,91.90827900194476,92.10939120982647,92.31050341770819,92.51161562558991,92.71272783347162,92.91384004135335,93.11495224923506,93.31606445711678,93.51717666499849,93.71828887288021,93.91940108076192,94.12051328864365,94.32162549652536,94.52273770440708,94.7238499122888,94.9249621201705,95.12607432805224,95.32718653593395,95.52829874381567,95.72941095169737,95.9305231595791,96.13163536746082,96.33274757534254,96.53385978322424,96.73497199110597,96.93608419898769,97.1371964068694,97.33830861475113,97.53942082263283,97.74053303051456,97.94164523839626,98.14275744627798,98.3438696541597,98.54498186204142,98.74609406992315,98.94720627780485,99.14831848568657,99.3494306935683,99.55054290145002,99.75165510933172,99.95276731721344,100.15387952509515,100.35499173297688,100.55610394085859,100.75721614874031,100.95832835662203,101.15944056450374,101.36055277238547,101.56166498026718,101.7627771881489,101.96388939603061,102.16500160391233,102.36611381179404,102.56722601967577,102.76833822755748,102.9694504354392,103.17056264332092,103.37167485120263,103.57278705908436,103.77389926696607,103.97501147484779,104.1761236827295,104.37723589061122,104.57834809849294,104.77946030637466,104.98057251425637,105.18168472213809,105.38279693001981,105.58390913790153,105.78502134578325,105.98613355366496,106.18724576154668,106.38835796942838,106.58947017731012,106.79058238519183,106.99169459307355,107.19280680095525,107.39391900883697,107.5950312167187,107.79614342460042,107.99725563248214,108.19836784036384,108.39948004824556,108.60059225612727,108.801704464009,109.00281667189071,109.20392887977243,109.40504108765415,109.60615329553586,109.8072655034176,110.0083777112993,110.20948991918102,110.41060212706273,110.61171433494445,110.81282654282617,111.0139387507079,111.2150509585896,111.41616316647132,111.61727537435304,111.81838758223476,112.01949979011648,112.22061199799819,112.42172420587991,112.62283641376162,112.82394862164334,113.02506082952506,113.22617303740678,113.42728524528849,113.62839745317021,113.82950966105193,114.03062186893365,114.23173407681537,114.43284628469708,114.6339584925788,114.8350707004605,115.03618290834224,115.23729511622395,115.43840732410567,115.63951953198737,115.8406317398691,116.04174394775083,116.24285615563254,116.44396836351426,116.64508057139597,116.84619277927769,117.0473049871594,117.24841719504113,117.44952940292283,117.65064161080456,117.85175381868626,118.05286602656798,118.25397823444972,118.45509044233143,118.65620265021315,118.85731485809485,119.05842706597657,119.2595392738583,119.46065148174002,119.66176368962172,119.86287589750344,120.06398810538515,120.26510031326688,120.4662125211486,120.66732472903031,120.86843693691203,121.06954914479374,121.27066135267548,121.47177356055718,121.6728857684389,121.87399797632061,122.07511018420233,122.27622239208404,122.47733459996577,122.6784468078475,122.8795590157292,123.08067122361092,123.28178343149263,123.48289563937436,123.68400784725607,123.88512005513779,124.0862322630195,124.28734447090122,124.48845667878295,124.68956888666466,124.89068109454638,125.09179330242809,125.29290551030981,125.49401771819153,125.69512992607325,125.89624213395496,126.09735434183668,126.29846654971838,126.4995787576001,126.70069096548184,126.90180317336355,127.10291538124527,127.30402758912697,127.5051397970087,127.70625200489042,127.90736421277214,128.10847642065386,128.30958862853558,128.51070083641727,128.711813044299,128.9129252521807,129.11403746006243,129.31514966794415,129.51626187582588,129.7173740837076,129.9184862915893,130.119598499471,130.32071070735273,130.52182291523445,130.72293512311617,130.9240473309979,131.1251595388796,131.32627174676134,131.52738395464306,131.72849616252475,131.92960837040647,132.1307205782882,132.3318327861699,132.53294499405163,132.73405720193333,132.93516940981507,133.13628161769677,133.3373938255785,133.53850603346024,133.73961824134193,133.94073044922365,134.14184265710534,134.3429548649871,134.5440670728688,134.7451792807505,134.94629148863223,135.14740369651395,135.34851590439567,135.5496281122774,135.7507403201591,135.95185252804083,136.15296473592252,136.35407694380424,136.555189151686,136.7563013595677,136.9574135674494,137.1585257753311,137.35963798321285,137.56075019109457,137.76186239897626,137.962974606858,138.1640868147397,138.36519902262143,138.56631123050312,138.76742343838487,138.9685356462666,139.16964785414828,139.37076006203,139.57187226991172,139.77298447779344,139.97409668567516,140.17520889355688,140.3763211014386,140.5774333093203,140.77854551720202,140.97965772508377,141.18076993296546,141.38188214084718,141.58299434872887,141.78410655661062,141.98521876449234,142.18633097237404,142.3874431802558,142.58855538813748,142.7896675960192,142.99077980390092,143.19189201178264,143.39300421966436,143.59411642754606,143.7952286354278,143.99634084330953,144.19745305119122,144.39856525907294,144.59967746695466,144.80078967483638,145.0019018827181,145.2030140905998,145.40412629848154,145.60523850636324,145.80635071424496,146.0074629221267,146.2085751300084,146.40968733789012,146.6107995457718,146.81191175365356,147.01302396153528,147.21413616941697,147.4152483772987,147.61636058518042,147.81747279306214,148.01858500094383,148.21969720882558,148.4208094167073,148.621921624589,148.8230338324707,149.02414604035243,149.22525824823416,149.42637045611588,149.62748266399757,149.82859487187932,150.029707079761,150.23081928764273,150.43193149552448,150.63304370340617,150.8341559112879,151.0352681191696,151.23638032705134,151.43749253493306,151.63860474281475,151.83971695069647,152.0408291585782,152.2419413664599,152.44305357434163,152.64416578222335,152.84527799010507,153.04639019798677,153.2475024058685,153.44861461375024,153.64972682163193,153.85083902951365,154.05195123739534,154.2530634452771,154.4541756531588,154.6552878610405,154.85640006892226,155.05751227680395,155.25862448468567,155.4597366925674,155.6608489004491,155.86196110833083,156.06307331621252,156.26418552409424,156.465297731976,156.6664099398577,156.8675221477394,157.06863435562113,157.26974656350285,157.47085877138454,157.67197097926626,157.873083187148,158.0741953950297,158.27530760291143,158.47641981079312,158.67753201867487,158.8786442265566,159.07975643443828,159.28086864232003,159.48198085020172,159.68309305808344,159.88420526596516,160.08531747384689,160.2864296817286,160.4875418896103,160.68865409749202,160.88976630537377,161.09087851325546,161.29199072113718,161.4931029290189,161.69421513690062,161.89532734478234,162.09643955266404,162.2975517605458,162.49866396842748,162.6997761763092,162.90088838419092,163.10200059207264,163.30311279995436,163.50422500783606,163.7053372157178,163.90644942359953,164.10756163148122,164.30867383936294,164.50978604724466,164.71089825512638,164.9120104630081,165.1131226708898,165.31423487877154,165.51534708665324,165.71645929453496,165.9175715024167,166.1186837102984,166.31979591818012,166.5209081260618,166.72202033394356,166.92313254182525,167.12424474970697,167.32535695758872,167.52646916547042,167.72758137335214,167.92869358123383,168.12980578911558,168.3309179969973,168.532030204879,168.7331424127607,168.93425462064243,169.13536682852416,169.33647903640588,169.5375912442876,169.73870345216932,169.939815660051,170.14092786793273,170.34204007581448,170.54315228369617,170.7442644915779,170.9453766994596,171.14648890734134,171.34760111522306,171.54871332310475,171.7498255309865,171.9509377388682,172.1520499467499,172.35316215463163,172.55427436251335,172.75538657039507,172.95649877827677,173.1576109861585,173.35872319404024,173.55983540192193,173.76094760980365,173.96205981768537,174.1631720255671,174.3642842334488,174.5653964413305,174.76650864921226,174.96762085709395,175.16873306497567,175.3698452728574,175.5709574807391,175.77206968862083,175.97318189650252,176.17429410438427,176.375406312266,176.5765185201477,176.7776307280294,176.97874293591113,177.17985514379285,177.38096735167454,177.58207955955626,177.783191767438,177.9843039753197,178.18541618320143,178.38652839108315,178.58764059896487,178.7887528068466,178.98986501472828,179.19097722261003,179.39208943049172,179.59320163837344,179.79431384625516,179.99542605413689,180.1965382620186,180.3976504699003,180.59876267778205,180.79987488566377,181.00098709354546,181.20209930142718,181.4032115093089,181.60432371719062,181.80543592507235,182.00654813295404,182.2076603408358,182.40877254871748,182.6098847565992,182.81099696448095,183.01210917236264,183.21322138024436,183.41433358812606,183.6154457960078,183.81655800388953,184.01767021177122,184.21878241965294,184.41989462753466,184.62100683541638,184.8221190432981,185.02323125117982,185.22434345906154,185.42545566694324,185.62656787482496,185.8276800827067,186.0287922905884,186.22990449847012,186.4310167063518,186.63212891423356,186.83324112211525,187.03435332999697,187.23546553787872,187.43657774576042,187.63768995364214,187.83880216152383,188.03991436940558,188.2410265772873,188.442138785169,188.6432509930507,188.84436320093243,189.04547540881416,189.24658761669588,189.4476998245776,189.64881203245932,189.849924240341,190.05103644822273,190.25214865610448,190.45326086398617,190.6543730718679,190.8554852797496,191.05659748763134,191.25770969551306,191.45882190339475,191.6599341112765,191.8610463191582,192.0621585270399,192.26327073492163,192.46438294280335,192.66549515068508,192.86660735856677,193.0677195664485,193.26883177433024,193.46994398221193,193.67105619009365,193.87216839797537,194.0732806058571,194.2743928137388,194.4755050216205,194.67661722950226,194.87772943738395,195.07884164526567,195.27995385314742,195.4810660610291,195.68217826891083,195.88329047679252,196.08440268467427,196.28551489255597,196.4866271004377,196.6877393083194,196.88885151620113,197.08996372408285,197.29107593196454,197.4921881398463,197.693300347728,197.8944125556097,198.09552476349143,198.29663697137315,198.49774917925487,198.6988613871366,198.89997359501828,199.10108580290003,199.30219801078172,199.50331021866344,199.7044224265452,199.90553463442689,200.1066468423086,200.3077590501903,200.50887125807205,200.70998346595377,200.91109567383546,201.11220788171718,201.3133200895989,201.51443229748062,201.71554450536235,201.91665671324407,202.1177689211258,202.31888112900748,202.5199933368892,202.72110554477095,202.92221775265264,203.12332996053436,203.32444216841606,203.5255543762978,203.72666658417953,203.92777879206122,204.12889099994297,204.33000320782466,204.53111541570638,204.73222762358807,204.93333983146982,205.13445203935154,205.33556424723324,205.53667645511496,205.73778866299668,205.9389008708784,206.14001307876012,206.34112528664184,206.54223749452356,206.74334970240525,206.94446191028698,207.14557411816872,207.34668632605042,207.54779853393214,207.74891074181383,207.95002294969558,208.1511351575773,208.352247365459,208.55335957334074,208.75447178122243,208.95558398910416,209.15669619698588,209.3578084048676,209.55892061274932,209.760032820631,209.96114502851273,210.16225723639448,210.36336944427617,210.5644816521579,210.76559386003962,210.96670606792134,211.16781827580306,211.36893048368475,211.5700426915665,211.7711548994482,211.9722671073299,212.17337931521163,212.37449152309335,212.57560373097508,212.77671593885677,212.97782814673852,213.17894035462024,213.38005256250193,213.58116477038365,213.78227697826537,213.9833891861471,214.1845013940288,214.3856136019105,214.58672580979226,214.78783801767395,214.98895022555567,215.1900624334374,215.3911746413191,215.59228684920083,215.79339905708252,215.99451126496427,216.19562347284597,216.3967356807277,216.5978478886094,216.79896009649113,217.00007230437285,217.20118451225454,217.4022967201363,217.603408928018,217.8045211358997,218.00563334378143,218.20674555166315,218.40785775954487,218.6089699674266,218.8100821753083,219.01119438319003,219.21230659107172,219.41341879895344,219.6145310068352,219.81564321471689,220.0167554225986,220.2178676304803,220.41897983836205,220.62009204624377,220.82120425412546,221.0223164620072,221.2234286698889,221.42454087777062,221.62565308565235,221.82676529353407,222.0278775014158,222.22898970929748,222.4301019171792,222.63121412506095,222.83232633294264,223.03343854082436,223.23455074870608,223.4356629565878,223.63677516446953,223.83788737235122,224.03899958023297,224.24011178811466,224.44122399599638,224.64233620387807,224.84344841175982,225.04456061964154,225.24567282752324,225.446785035405,225.64789724328668,225.8490094511684,226.05012165905012,226.25123386693184,226.45234607481356,226.65345828269525,226.85457049057698,227.05568269845872,227.25679490634042,227.45790711422214,227.65901932210386,227.86013152998558,228.0612437378673,228.262355945749,228.46346815363074,228.66458036151244,228.86569256939416,229.06680477727588,229.2679169851576,229.46902919303932,229.670141400921,229.87125360880276,230.07236581668448,230.27347802456617,230.4745902324479,230.67570244032962,230.87681464821134,231.07792685609306,231.27903906397475,231.4801512718565,231.6812634797382,231.8823756876199,232.08348789550166,232.28460010338335,232.48571231126508,232.68682451914677,232.88793672702852,233.08904893491024,233.29016114279193,233.49127335067365,233.69238555855537,233.8934977664371,234.0946099743188,234.29572218220054,234.49683439008226,234.69794659796395,234.89905880584567,235.1001710137274,235.3012832216091,235.50239542949083,235.70350763737252,235.90461984525427,236.10573205313597,236.3068442610177,236.50795646889944,236.70906867678113,236.91018088466285,237.11129309254454,237.3124053004263,237.513517508308,237.7146297161897,237.91574192407143,238.11685413195315,238.31796633983487,238.5190785477166,238.7201907555983,238.92130296348003,239.12241517136172,239.32352737924344,239.5246395871252,239.7257517950069,239.9268640028886,240.1279762107703,240.32908841865205,240.53020062653377,240.73131283441546,240.9324250422972,241.1335372501789,241.33464945806062,241.53576166594235,241.73687387382407,241.9379860817058,242.13909828958748,242.3402104974692,242.54132270535095,242.74243491323264,242.94354712111436,243.14465932899608,243.3457715368778,243.5468837447595,243.74799595264122,243.94910816052297,244.15022036840466,244.35133257628638,244.55244478416807,244.75355699204982,244.95466919993154,245.15578140781324,245.356893615695,245.55800582357668,245.7591180314584,245.96023023934012,246.16134244722184,246.36245465510356,246.56356686298525,246.764679070867,246.96579127874872,247.16690348663042,247.36801569451214,247.56912790239386,247.77024011027558,247.9713523181573,248.172464526039,248.37357673392074,248.57468894180244,248.77580114968416,248.9769133575659,249.1780255654476,249.37913777332932,249.580249981211,249.78136218909276,249.98247439697448,250.18358660485617,250.3846988127379,250.58581102061962,250.78692322850134,250.98803543638306,251.18914764426478,251.3902598521465,251.5913720600282,251.7924842679099,251.99359647579166,252.19470868367335,252.39582089155508,252.59693309943677,252.79804530731852,252.9991575152002,253.20026972308193,253.40138193096368,253.60249413884537,253.8036063467271,254.0047185546088,254.20583076249054,254.40694297037226,254.60805517825395,254.80916738613567,255.0102795940174,255.2113918018991,255.41250400978083,255.61361621766255,255.81472842554427,256.01584063342597,256.2169528413077,256.4180650491894,256.61917725707116,256.82028946495285,257.02140167283454,257.2225138807163,257.423626088598,257.62473829647973,257.8258505043614,258.0269627122432,258.22807492012487,258.42918712800656,258.6302993358883,258.83141154377,259.03252375165175,259.23363595953344,259.4347481674152,259.6358603752969,259.8369725831786,260.0380847910603,260.239196998942,260.44030920682377,260.64142141470546,260.8425336225872,261.0436458304689,261.2447580383506,261.44587024623235,261.6469824541141,261.8480946619958,262.0492068698775,262.2503190777592,262.4514312856409,262.65254349352267,262.85365570140436,263.0547679092861,263.25588011716775,263.4569923250495,263.65810453293125,263.85921674081294,264.0603289486947,264.2614411565764,264.4625533644581,264.6636655723398,264.8647777802216,265.06588998810327,265.26700219598496,265.46811440386665,265.6692266117484,265.87033881963015,266.07145102751184,266.27256323539353,266.4736754432753,266.674787651157,266.8758998590387,267.0770120669205,267.2781242748021,267.47923648268386,267.68034869056555,267.8814608984473,268.08257310632905,268.2836853142107,268.48479752209244,268.6859097299742,268.8870219378559,269.0881341457376,269.2892463536193,269.490358561501,269.69147076938276,269.89258297726445,270.0936951851462,270.2948073930279,270.4959196009096,270.69703180879134,270.8981440166731,271.0992562245548,271.30036843243647,271.5014806403182,271.7025928481999,271.90370505608166,272.10481726396335,272.30592947184505,272.5070416797268,272.7081538876085,272.90926609549024,273.110378303372,273.3114905112536,273.5126027191354,273.7137149270171,273.9148271348988,274.11593934278056,274.3170515506622,274.51816375854395,274.7192759664257,274.9203881743074,275.12150038218914,275.32261259007083,275.5237247979525,275.7248370058343,275.925949213716,276.12706142159766,276.3281736294794,276.5292858373611,276.73039804524285,276.9315102531246,277.13262246100624,277.333734668888,277.53484687676973,277.7359590846514,277.9370712925332,278.13818350041487,278.33929570829656,278.5404079161783,278.74152012406,278.94263233194175,279.14374453982344,279.34485674770514,279.5459689555869,279.74708116346864,279.9481933713503,280.149305579232,280.35041778711377,280.55152999499546,280.7526422028772,280.9537544107589,281.1548666186406,281.35597882652235,281.55709103440404,281.7582032422858,281.95931545016754,282.1604276580492,282.3615398659309,282.56265207381267,282.76376428169436,282.9648764895761,283.16598869745775,283.3671009053395,283.56821311322125,283.76932532110294,283.9704375289847,284.1715497368664,284.3726619447481,284.5737741526298,284.7748863605116,284.97599856839327,285.17711077627496,285.3782229841567,285.5793351920384,285.78044739992015,285.98155960780184,286.18267181568353,286.3837840235653,286.584896231447,286.7860084393287,286.9871206472105,287.1882328550921,287.38934506297386,287.5904572708556,287.7915694787373,287.99268168661905,288.1937938945007,288.39490610238244,288.5960183102642,288.7971305181459,288.9982427260276,289.1993549339093,289.400467141791,289.60157934967276,289.8026915575545,290.0038037654362,290.2049159733179,290.4060281811996,290.60714038908134,290.8082525969631,291.0093648048448,291.21047701272647,291.4115892206082,291.6127014284899,291.81381363637166,292.0149258442534,292.21603805213505,292.4171502600168,292.6182624678985,292.81937467578024,293.020486883662,293.2215990915436,293.4227112994254,293.6238235073071,293.8249357151888,294.02604792307056,294.22716013095226,294.42827233883395,294.6293845467157,294.8304967545974,295.03160896247914,295.23272117036083,295.4338333782425,295.6349455861243,295.836057794006,296.03717000188766,296.2382822097694,296.43939441765116,296.64050662553285,296.8416188334146,297.04273104129624,297.243843249178,297.44495545705973,297.6460676649414,297.8471798728232,298.04829208070487,298.24940428858656,298.4505164964683,298.65162870435006,298.85274091223175,299.05385312011344,299.25496532799514,299.4560775358769,299.65718974375864,299.8583019516403,300.059414159522,300.26052636740377,300.46163857528546,300.6627507831672,300.86386299104896,301.0649751989306,301.26608740681235,301.46719961469404,301.6683118225758,301.86942403045754,302.0705362383392,302.2716484462209,302.4727606541027,302.67387286198436,302.8749850698661,303.0760972777478,303.2772094856295,303.47832169351125,303.67943390139294,303.8805461092747,304.0816583171564,304.2827705250381,304.4838827329198,304.6849949408016,304.88610714868327,305.08721935656496,305.2883315644467,305.4894437723284,305.69055598021015,305.89166818809184,306.09278039597353,306.2938926038553,306.495004811737,306.6961170196187,306.8972292275005,307.0983414353821,307.29945364326386,307.5005658511456,307.7016780590273,307.90279026690905,308.1039024747907,308.30501468267244,308.5061268905542,308.7072390984359,308.9083513063176,309.1094635141993,309.310575722081,309.51168792996276,309.7128001378445,309.9139123457262,310.1150245536079,310.3161367614896,310.51724896937134,310.7183611772531,310.9194733851348,311.1205855930165,311.3216978008982,311.5228100087799,311.72392221666166,311.9250344245434,312.12614663242505,312.3272588403068,312.5283710481885,312.72948325607024,312.930595463952,313.1317076718336,313.3328198797154,313.5339320875971,313.7350442954788,313.93615650336056,314.13726871124226,314.33838091912395,314.5394931270057,314.7406053348874,314.9417175427691,315.14282975065083,315.3439419585325,315.5450541664143,315.746166374296,315.94727858217766,316.1483907900594,316.34950299794116,316.55061520582285,316.7517274137046,316.95283962158624,317.153951829468,317.35506403734973,317.5561762452314,317.7572884531132,317.95840066099487,318.15951286887656,318.3606250767583,318.56173728464006,318.76284949252175,318.96396170040344,319.16507390828514,319.3661861161669,319.56729832404864,319.76841053193033,319.969522739812,320.17063494769377,320.37174715557546,320.5728593634572,320.77397157133896,320.9750837792206,321.17619598710235,321.37730819498404,321.5784204028658,321.77953261074754,321.9806448186292,322.1817570265109,322.3828692343927,322.58398144227436,322.7850936501561,322.9862058580378,323.1873180659195,323.38843027380125,323.58954248168294,323.7906546895647,323.9917668974464,324.1928791053281,324.3939913132098,324.5951035210916,324.79621572897327,324.99732793685496,325.1984401447367,325.3995523526184,325.60066456050015,325.80177676838184,326.00288897626353,326.2040011841453,326.405113392027,326.6062255999087,326.8073378077905,327.0084500156721,327.20956222355386,327.4106744314356,327.6117866393173,327.81289884719905,328.0140110550807,328.21512326296244,328.4162354708442,328.6173476787259,328.8184598866076,329.0195720944893,329.220684302371,329.42179651025276,329.6229087181345,329.8240209260162,330.0251331338979,330.2262453417796,330.42735754966134,330.6284697575431,330.8295819654248,331.0306941733065,331.2318063811882,331.4329185890699,331.63403079695166,331.8351430048334,332.03625521271505,332.2373674205968,332.4384796284785,332.63959183636024,332.840704044242,333.0418162521236,333.2429284600054,333.4440406678871,333.6451528757688,333.8462650836505,334.04737729153226,334.24848949941395,334.4496017072957,334.65071391517745,334.8518261230591,335.05293833094083,335.2540505388225,335.4551627467043,335.656274954586,335.85738716246766,336.0584993703494,336.25961157823116,336.46072378611285,336.6618359939946,336.8629482018763,337.064060409758,337.26517261763973,337.4662848255214,337.6673970334032,337.86850924128487,338.06962144916656,338.2707336570483,338.47184586493006,338.67295807281175,338.87407028069345,339.0751824885752,339.2762946964569,339.47740690433864,339.67851911222033,339.879631320102,340.08074352798377,340.28185573586546,340.4829679437472,340.68408015162896,340.8851923595106,341.08630456739235,341.2874167752741,341.4885289831558,341.68964119103754,341.8907533989192,342.0918656068009,342.2929778146827,342.49409002256436,342.6952022304461,342.8963144383278,343.0974266462095,343.29853885409125,343.499651061973,343.7007632698547,343.9018754777364,344.1029876856181,344.3040998934998,344.5052121013816,344.70632430926327,344.90743651714496,345.1085487250267,345.3096609329084,345.51077314079015,345.7118853486719,345.91299755655353,346.1141097644353,346.315221972317,346.5163341801987,346.7174463880805,346.9185585959621,347.11967080384386,347.3207830117256,347.5218952196073,347.72300742748905,347.92411963537074,348.12523184325244,348.3263440511342,348.5274562590159,348.7285684668976,348.9296806747793,349.130792882661,349.33190509054276,349.5330172984245,349.7341295063062,349.9352417141879,350.13635392206965,350.33746612995134,350.5385783378331,350.7396905457148,350.9408027535965,351.1419149614782,351.3430271693599,351.54413937724166,351.7452515851234,351.94636379300505,352.1474760008868,352.34858820876855,352.54970041665024,352.750812624532,352.9519248324136,353.1530370402954,353.3541492481771,353.5552614560588,353.7563736639405,353.95748587182226,354.15859807970395,354.3597102875857,354.56082249546745,354.7619347033491,354.96304691123083,355.1641591191125,355.3652713269943,355.566383534876,355.76749574275766,355.9686079506394,356.16972015852116,356.37083236640285,356.5719445742846,356.7730567821663,356.974168990048,357.17528119792973,357.3763934058114,357.5775056136932,357.77861782157487,357.97973002945656,358.1808422373383,358.38195444522006,358.58306665310175,358.78417886098345,358.9852910688652,359.1864032767469,359.38751548462864,359.58862769251033,359.789739900392,359.99085210827377,360.19196431615546,360.3930765240372,360.59418873191896,360.7953009398006,360.99641314768235,361.1975253555641,361.3986375634458,361.59974977132754,361.8008619792092,362.0019741870909,362.2030863949727,362.40419860285436,362.6053108107361,362.8064230186178,363.0075352264995,363.20864743438125,363.409759642263,363.6108718501447,363.8119840580264,364.0130962659081,364.2142084737898,364.4153206816716,364.61643288955327,364.81754509743496,365.0186573053167,365.2197695131984,365.42088172108015,365.6219939289619,365.82310613684353,366.0242183447253,366.225330552607,366.4264427604887,366.6275549683705,366.8286671762521,367.02977938413386,367.2308915920156,367.4320037998973,367.63311600777905,367.83422821566074,368.03534042354244,368.2364526314242,368.4375648393059,368.6386770471876,368.8397892550693,369.040901462951,369.24201367083276,369.4431258787145,369.6442380865962,369.8453502944779,370.04646250235965,370.24757471024134,370.4486869181231,370.6497991260047,370.8509113338865,371.0520235417682,371.2531357496499,371.45424795753166,371.6553601654134,371.85647237329505,372.0575845811768,372.25869678905855,372.45980899694024,372.66092120482193,372.8620334127036,373.0631456205854,373.2642578284671,373.4653700363488,373.6664822442305,373.86759445211226,374.06870665999395,374.2698188678757,374.47093107575745,374.6720432836391,374.87315549152083,375.0742676994025,375.2753799072843,375.476492115166,375.67760432304766,375.8787165309294,376.07982873881116,376.28094094669285,376.4820531545746,376.6831653624563,376.884277570338,377.08538977821974,377.2865019861014,377.4876141939832,377.68872640186487,377.88983860974656,378.0909508176283,378.29206302551006,378.49317523339175,378.69428744127345,378.8953996491552,379.0965118570369,379.29762406491864,379.49873627280033,379.699848480682,379.90096068856377,380.10207289644546,380.3031851043272,380.50429731220896,380.7054095200906,380.90652172797235,381.1076339358541,381.3087461437358,381.50985835161754,381.7109705594992,381.9120827673809,382.1131949752627,382.31430718314436,382.5154193910261,382.7165315989078,382.9176438067895,383.11875601467125,383.319868222553,383.5209804304347,383.7220926383164,383.9232048461981,384.1243170540798,384.3254292619616,384.52654146984327,384.72765367772496,384.9287658856067,385.1298780934884,385.33099030137015,385.5321025092519,385.73321471713354,385.9343269250153,386.135439132897,386.3365513407787,386.5376635486605,386.7387757565421,386.93988796442386,387.1410001723056,387.3421123801873,387.54322458806905,387.74433679595074,387.94544900383244,388.1465612117142,388.34767341959594,388.5487856274776,388.7498978353593,388.951010043241,389.15212225112276,389.3532344590045,389.5543466668862,389.7554588747679,389.95657108264965,390.15768329053134,390.3587954984131,390.55990770629484,390.7610199141765,390.9621321220582,391.1632443299399,391.36435653782166,391.56546874570336,391.76658095358505,391.9676931614668,392.16880536934855,392.36991757723024,392.57102978511193,392.7721419929937,392.9732542008754,393.1743664087571,393.3754786166388,393.5765908245205,393.77770303240226,393.97881524028395,394.1799274481657,394.38103965604745,394.5821518639291,394.78326407181083,394.9843762796926,395.1854884875743,395.386600695456,395.58771290333766,395.7888251112194,395.98993731910116,396.19104952698285,396.3921617348646,396.5932739427463,396.794386150628,396.99549835850974,397.1966105663915,397.3977227742732,397.59883498215487,397.79994719003656,398.0010593979183,398.20217160580006,398.40328381368175,398.60439602156345,398.8055082294452,399.0066204373269,399.20773264520864,399.4088448530904,399.609957060972,399.81106926885377,400.01218147673546,400.2132936846172,400.41440589249896,400.6155181003806,400.81663030826235,401.0177425161441,401.2188547240258,401.41996693190754,401.62107913978923,401.8221913476709,402.0233035555527,402.22441576343437,402.4255279713161,402.6266401791978,402.8277523870795,403.02886459496125,403.229976802843,403.4310890107247,403.6322012186064,403.83331342648813,404.0344256343698,404.2355378422516,404.43665005013327,404.63776225801496,404.8388744658967,405.0399866737784,405.24109888166015,405.4422110895419,405.64332329742354,405.8444355053053,406.04554771318703,406.2466599210687,406.4477721289505,406.6488843368321,406.84999654471386,407.0511087525956,407.2522209604773,407.45333316835905,407.65444537624074,407.85555758412244,408.0566697920042,408.25778199988594,408.4588942077676,408.6600064156493,408.861118623531,409.06223083141276,409.2633430392945,409.46445524717615,409.6655674550579,409.86667966293965,410.06779187082134,410.2689040787031,410.47001628658484,410.6711284944665,410.8722407023482,411.0733529102299,411.27446511811166,411.47557732599336,411.67668953387505,411.8778017417568,412.07891394963855,412.28002615752024,412.48113836540193,412.6822505732837,412.8833627811654,413.0844749890471,413.2855871969288,413.4866994048105,413.68781161269226,413.88892382057395,414.0900360284557,414.29114823633745,414.4922604442191,414.69337265210083,414.8944848599826,415.0955970678643,415.296709275746,415.49782148362766,415.6989336915094,415.90004589939116,416.10115810727285,416.3022703151546,416.5033825230363,416.704494730918,416.90560693879974,417.1067191466815,417.3078313545632,417.50894356244487,417.71005577032656,417.9111679782083,418.11228018609006,418.31339239397175,418.51450460185345,418.7156168097352,418.9167290176169,419.11784122549864,419.3189534333804,419.520065641262,419.72117784914377,419.92229005702546,420.1234022649072,420.32451447278896,420.5256266806706,420.72673888855235,420.9278510964341,421.1289633043158,421.33007551219754,421.53118772007923,421.7322999279609,421.9334121358427,422.13452434372437,422.3356365516061,422.5367487594878,422.7378609673695,422.93897317525125,423.140085383133,423.3411975910147,423.5423097988964,423.74342200677813,423.9445342146598,424.1456464225416,424.34675863042327,424.54787083830496,424.7489830461867,424.9500952540684,425.15120746195015,425.3523196698319,425.55343187771354,425.7545440855953,425.95565629347703,426.1567685013587,426.3578807092405,426.5589929171221,426.76010512500386,426.9612173328856,427.1623295407673,427.36344174864905,427.56455395653074,427.76566616441244,427.9667783722942,428.16789058017594,428.3690027880576,428.5701149959393,428.771227203821,428.97233941170276,429.1734516195845,429.37456382746615,429.5756760353479,429.77678824322965,429.97790045111134,430.1790126589931,430.3801248668748,430.5812370747565,430.7823492826382,430.9834614905199,431.18457369840166,431.38568590628336,431.58679811416505,431.7879103220468,431.98902252992855,432.19013473781024,432.39124694569193,432.5923591535737,432.7934713614554,432.9945835693371,433.1956957772188,433.3968079851005,433.59792019298226,433.79903240086395,434.0001446087457,434.20125681662745,434.4023690245091,434.60348123239083,434.8045934402726,435.0057056481543,435.206817856036,435.40793006391766,435.6090422717994,435.81015447968116,436.01126668756285,436.2123788954446,436.4134911033263,436.614603311208,436.81571551908974,437.0168277269715,437.2179399348532,437.41905214273487,437.6201643506166,437.8212765584983,438.02238876638006,438.22350097426175,438.42461318214345,438.6257253900252,438.8268375979069,439.02794980578864,439.2290620136704,439.430174221552,439.63128642943377,439.8323986373155,440.0335108451972,440.23462305307896,440.4357352609606,440.63684746884235,440.8379596767241,441.0390718846058,441.24018409248754,441.44129630036923,441.6424085082509,441.8435207161327,442.0446329240144,442.2457451318961,442.4468573397778,442.6479695476595,442.84908175554125,443.050193963423,443.2513061713047,443.4524183791864,443.65353058706813,443.8546427949498,444.0557550028316,444.2568672107133,444.45797941859496,444.6590916264767,444.8602038343584,445.06131604224015,445.2624282501219,445.46354045800354,445.6646526658853,445.86576487376703,446.0668770816487,446.2679892895305,446.46910149741217,446.67021370529386,446.8713259131756,447.0724381210573,447.27355032893905,447.47466253682074,447.67577474470244,447.8768869525842,448.07799916046594,448.27911136834757,448.4802235762293,448.68133578411107,448.88244799199276,449.0835601998745,449.28467240775615,449.4857846156379,449.68689682351965,449.88800903140134,450.0891212392831,450.2902334471648,450.4913456550465,450.6924578629282,450.89357007081,451.09468227869166,451.29579448657336,451.49690669445505,451.6980189023368,451.89913111021855,452.10024331810024,452.30135552598193,452.5024677338637,452.7035799417454,452.9046921496271,453.1058043575089,453.3069165653905,453.50802877327226,453.70914098115395,453.9102531890357,454.11136539691745,454.3124776047991,454.51358981268083,454.7147020205626,454.9158142284443,455.116926436326,455.3180386442077,455.5191508520894,455.72026305997116,455.92137526785285,456.1224874757346,456.3235996836163,456.524711891498,456.72582409937974,456.9269363072615,457.1280485151432,457.32916072302487,457.5302729309066,457.7313851387883,457.93249734667006,458.13360955455175,458.33472176243345,458.5358339703152,458.7369461781969,458.93805838607864,459.1391705939604,459.340282801842,459.5413950097238,459.7425072176055,459.9436194254872,460.14473163336896,460.3458438412506,460.54695604913235,460.7480682570141,460.9491804648958,461.15029267277754,461.35140488065923,461.5525170885409,461.7536292964227,461.9547415043044,462.1558537121861,462.3569659200678,462.5580781279495,462.75919033583125,462.960302543713,463.1614147515947,463.3625269594764,463.56363916735813,463.7647513752398,463.9658635831216,464.1669757910033,464.36808799888496,464.5692002067667,464.7703124146484,464.97142462253015,465.1725368304119,465.37364903829354,465.5747612461753,465.77587345405703,465.9769856619387,466.1780978698205,466.37921007770217,466.58032228558386,466.7814344934656,466.9825467013473,467.183658909229,467.38477111711074,467.58588332499244,467.7869955328742,467.98810774075594,468.1892199486376,468.3903321565193,468.59144436440107,468.79255657228276,468.9936687801645,469.19478098804615,469.3958931959279,469.59700540380965,469.79811761169134,469.9992298195731,470.2003420274548,470.4014542353365,470.6025664432182,470.8036786511,471.00479085898166,471.20590306686336,471.40701527474505,471.6081274826268,471.80923969050855,472.01035189839024,472.21146410627193,472.4125763141537,472.6136885220354,472.8148007299171,473.0159129377989,473.2170251456805,473.41813735356226,473.61924956144395,473.8203617693257,474.02147397720745,474.2225861850891,474.42369839297083,474.6248106008526,474.8259228087343,475.027035016616,475.2281472244977,475.4292594323794,475.63037164026116,475.83148384814285,476.0325960560246,476.2337082639063,476.434820471788,476.63593267966974,476.8370448875515,477.0381570954332,477.23926930331487,477.4403815111966,477.6414937190783,477.84260592696006,478.04371813484175,478.24483034272345,478.4459425506052,478.6470547584869,478.84816696636864,479.0492791742504,479.250391382132,479.4515035900138,479.6526157978955,479.8537280057772,480.05484021365896,480.2559524215406,480.45706462942235,480.6581768373041,480.8592890451858,481.06040125306754,481.26151346094923,481.4626256688309,481.6637378767127,481.8648500845944,482.0659622924761,482.2670745003578,482.4681867082395,482.66929891612125,482.870411124003,483.0715233318847,483.2726355397664,483.47374774764813,483.6748599555298,483.8759721634116,484.0770843712933,484.27819657917496,484.4793087870567,484.6804209949384,484.88153320282015,485.0826454107019,485.28375761858354,485.4848698264653,485.68598203434703,485.8870942422287,486.0882064501105,486.28931865799217,486.49043086587386,486.6915430737556,486.8926552816373,487.093767489519,487.29487969740075,487.49599190528244,487.6971041131642,487.89821632104594,488.0993285289276,488.3004407368093,488.50155294469107,488.70266515257276,488.9037773604545,489.10488956833615,489.3060017762179,489.50711398409965,489.70822619198134,489.9093383998631,490.1104506077448,490.3115628156265,490.5126750235082,490.71378723139,490.91489943927166,491.11601164715336,491.3171238550351,491.5182360629168,491.71934827079855,491.92046047868024,492.12157268656193,492.3226848944437,492.5237971023254,492.7249093102071,492.9260215180889,493.1271337259705,493.32824593385226,493.529358141734,493.7304703496157,493.93158255749745,494.1326947653791,494.33380697326083,494.5349191811426,494.7360313890243,494.937143596906,495.1382558047877,495.3393680126694,495.54048022055116,495.7415924284329,495.9427046363146,496.1438168441963,496.344929052078,496.54604125995974,496.7471534678415,496.9482656757232,497.14937788360487,497.3504900914866,497.5516022993683,497.75271450725006,497.9538267151318,498.15493892301345,498.3560511308952,498.5571633387769,498.75827554665864,498.9593877545404,499.160499962422,499.3616121703038,499.5627243781855,499.7638365860672,499.96494879394896,500.16606100183066,500.36717320971235,500.5682854175941,500.7693976254758,500.97050983335754,501.17162204123923,501.3727342491209,501.5738464570027,501.7749586648844,501.9760708727661,502.1771830806478,502.37829528852956,502.57940749641125,502.780519704293,502.9816319121747,503.1827441200564,503.38385632793813,503.5849685358198,503.7860807437016,503.9871929515833,504.18830515946496,504.3894173673467,504.59052957522846,504.79164178311015,504.9927539909919,505.19386619887354,505.3949784067553,505.59609061463703,505.7972028225187,505.9983150304004,506.19942723828217,506.40053944616386,506.6016516540456,506.80276386192736,507.003876069809,507.20498827769075,507.40610048557244,507.6072126934542,507.80832490133594,508.0094371092176,508.2105493170993,508.41166152498107,508.61277373286276,508.8138859407445,509.0149981486262,509.2161103565079,509.41722256438965,509.61833477227134,509.8194469801531,510.0205591880348,510.2216713959165,510.4227836037982,510.62389581168,510.82500801956166,511.02612022744336,511.2272324353251,511.4283446432068,511.62945685108855,511.83056905897024,512.0316812668519,512.2327934747337,512.4339056826154,512.6350178904971,512.8361300983788,513.0372423062605,513.2383545141423,513.439466722024,513.6405789299057,513.8416911377874,514.0428033456691,514.2439155535509,514.4450277614326,514.6461399693143,514.847252177196,515.0483643850778,515.2494765929595,515.4505888008412,515.6517010087229,515.8528132166045,516.0539254244864,516.255037632368,516.4561498402497,516.6572620481314,516.8583742560131,517.0594864638949,517.2605986717766,517.4617108796583,517.66282308754,517.8639352954218,518.0650475033035,518.2661597111852,518.4672719190669,518.6683841269486,518.8694963348304,519.0706085427121,519.2717207505938,519.4728329584755,519.6739451663572,519.875057374239,520.0761695821207,520.2772817900023,520.478393997884,520.6795062057657,520.8806184136475,521.0817306215292,521.2828428294109,521.4839550372926,521.6850672451744,521.8861794530561,522.0872916609378,522.2884038688196,522.4895160767012,522.690628284583,522.8917404924647,523.0928527003464,523.2939649082282,523.4950771161098,523.6961893239916,523.8973015318733,524.098413739755,524.2995259476368,524.5006381555183,524.7017503634002,524.9028625712818,525.1039747791637,525.3050869870453,525.5061991949269,525.7073114028087,525.9084236106904,526.1095358185722,526.3106480264539,526.5117602343355,526.7128724422173,526.913984650099,527.1150968579808,527.3162090658625,527.5173212737442,527.7184334816259,527.9195456895076,528.1206578973894,528.3217701052711,528.5228823131528,528.7239945210345,528.9251067289161,529.126218936798,529.3273311446796,529.5284433525613,529.7295555604431,529.9306677683247,530.1317799762065,530.3328921840882,530.5340043919699,530.7351165998517,530.9362288077333,531.1373410156151,531.3384532234968,531.5395654313785,531.7406776392603,531.941789847142,532.1429020550237,532.3440142629054,532.5451264707871,532.7462386786689,532.9473508865506,533.1484630944323,533.349575302314,533.5506875101956,533.7517997180775,533.9529119259591,534.154024133841,534.3551363417225,534.5562485496042,534.757360757486,534.9584729653677,535.1595851732495,535.3606973811311,535.5618095890128,535.7629217968946,535.9640340047763,536.1651462126581,536.3662584205398,536.5673706284214,536.7684828363032,536.9695950441849,537.1707072520667,537.3718194599484,537.57293166783,537.7740438757118,537.9751560835934,538.1762682914753,538.377380499357,538.5784927072386,538.7796049151203,538.980717123002,539.1818293308838,539.3829415387655,539.5840537466472,539.7851659545289,539.9862781624106,540.1873903702924,540.3885025781741,540.5896147860558,540.7907269939376,540.9918392018192,541.192951409701,541.3940636175827,541.5951758254644,541.7962880333462,541.9974002412278,542.1985124491096,542.3996246569913,542.6007368648729,542.8018490727547,543.0029612806364,543.2040734885181,543.4051856963998,543.6062979042815,543.8074101121633,544.008522320045,544.2096345279267,544.4107467358084,544.6118589436901,544.8129711515719,545.0140833594536,545.2151955673354,545.416307775217,545.6174199830987,545.8185321909805,546.0196443988622,546.220756606744,546.4218688146256,546.6229810225072,546.824093230389,547.0252054382707,547.2263176461526,547.4274298540342,547.6285420619158,547.8296542697976,548.0307664776793,548.2318786855611,548.4329908934428,548.6341031013244,548.8352153092062,549.0363275170879,549.2374397249697,549.4385519328514,549.6396641407331,549.8407763486148,550.0418885564965,550.2430007643783,550.44411297226,550.6452251801417,550.8463373880234,551.047449595905,551.2485618037869,551.4496740116685,551.6507862195502,551.851898427432,552.0530106353136,552.2541228431953,552.4552350510771,552.6563472589588,552.8574594668406,553.0585716747222,553.2596838826039,553.4607960904857,553.6619082983674,553.8630205062492,554.0641327141309,554.2652449220125,554.4663571298943,554.667469337776,554.8685815456578,555.0696937535395,555.270805961421,555.4719181693029,555.6730303771845,555.8741425850664,556.075254792948,556.2763670008297,556.4774792087114,556.6785914165931,556.8797036244749,557.0808158323566,557.2819280402383,557.48304024812,557.6841524560017,557.8852646638835,558.0863768717652,558.2874890796469,558.4886012875287,558.6897134954103,558.8908257032921,559.0919379111738,559.2930501190555,559.4941623269373,559.6952745348189,559.8963867427007,560.0974989505823,560.298611158464,560.4997233663458,560.7008355742275,560.9019477821092,561.1030599899909,561.3041721978726,561.5052844057544,561.7063966136361,561.9075088215178,562.1086210293995,562.3097332372812,562.510845445163,562.7119576530447,562.9130698609265,563.1141820688081,563.3152942766898,563.5164064845716,563.7175186924533,563.9186309003351,564.1197431082167,564.3208553160983,564.5219675239802,564.7230797318618,564.9241919397437,565.1253041476253,565.3264163555069,565.5275285633887,565.7286407712704,565.9297529791522,566.1308651870339,566.3319773949155,566.5330896027973,566.734201810679,566.9353140185608,567.1364262264425,567.3375384343242,567.5386506422059,567.7397628500876,567.9408750579694,568.1419872658511,568.3430994737328,568.5442116816146,568.7453238894961,568.946436097378,569.1475483052596,569.3486605131413,569.5497727210231,569.7508849289047,569.9519971367865,570.1531093446682,570.3542215525499,570.5553337604317,570.7564459683134,570.9575581761951,571.1586703840768,571.3597825919585,571.5608947998403,571.762007007722,571.9631192156037,572.1642314234854,572.3653436313671,572.5664558392489,572.7675680471306,572.9686802550124,573.169792462894,573.3709046707756,573.5720168786575,573.7731290865391,573.974241294421,574.1753535023025,574.3764657101842,574.577577918066,574.7786901259477,574.9798023338295,575.1809145417112,575.3820267495928,575.5831389574746,575.7842511653563,575.9853633732381,576.1864755811198,576.3875877890014,576.5886999968832,576.7898122047649,576.9909244126467,577.1920366205284,577.3931488284101,577.5942610362918,577.7953732441734,577.9964854520553,578.197597659937,578.3987098678186,578.5998220757003,578.800934283582,579.0020464914638,579.2031586993455,579.4042709072272,579.605383115109,579.8064953229906,580.0076075308724,580.2087197387541,580.4098319466358,580.6109441545176,580.8120563623992,581.013168570281,581.2142807781627,581.4153929860444,581.6165051939262,581.8176174018079,582.0187296096896,582.2198418175713,582.4209540254529,582.6220662333347,582.8231784412164,583.0242906490981,583.2254028569798,583.4265150648615,583.6276272727433,583.828739480625,584.0298516885068,584.2309638963884,584.4320761042701,584.6331883121519,584.8343005200336,585.0354127279154,585.236524935797,585.4376371436787,585.6387493515605,585.8398615594422,586.040973767324,586.2420859752057,586.4431981830872,586.644310390969,586.8454225988507,587.0465348067326,587.2476470146142,587.4487592224958,587.6498714303776,587.8509836382593,588.0520958461411,588.2532080540228,588.4543202619045,588.6554324697862,588.8565446776679,589.0576568855497,589.2587690934314,589.4598813013131,589.6609935091948,589.8621057170765,590.0632179249583,590.26433013284,590.4654423407217,590.6665545486035,590.867666756485,591.0687789643667,591.2698911722485,591.4710033801302,591.672115588012,591.8732277958936,592.0743400037753,592.2754522116571,592.4765644195388,592.6776766274206,592.8787888353023,593.0799010431839,593.2810132510657,593.4821254589474,593.6832376668292,593.8843498747109,594.0854620825925,594.2865742904743,594.487686498356,594.6887987062378,594.8899109141195,595.0910231220012,595.2921353298829,595.4932475377645,595.6943597456464,595.895471953528,596.0965841614097,596.2976963692914,596.4988085771731,596.6999207850549,596.9010329929366,597.1021452008183,597.3032574087001,597.5043696165817,597.7054818244635,597.9065940323452,598.1077062402269,598.3088184481087,598.5099306559903,598.7110428638721,598.9121550717538,599.1132672796355,599.3143794875173,599.515491695399,599.7166039032807,599.9177161111623,600.118828319044,600.3199405269258,600.5210527348075,600.7221649426892,600.9232771505709,601.1243893584526,601.3255015663344,601.5266137742161,601.7277259820979,601.9288381899795,602.1299503978612,602.331062605743,602.5321748136247,602.7332870215065,602.9343992293881,603.1355114372698,603.3366236451516,603.5377358530333,603.7388480609151,603.9399602687968,604.1410724766783,604.3421846845602,604.5432968924418,604.7444091003237,604.9455213082053,605.1466335160869,605.3477457239687,605.5488579318504,605.7499701397322,605.9510823476139,606.1521945554956,606.3533067633773,606.554418971259,606.7555311791408,606.9566433870225,607.1577555949042,607.3588678027859,607.5599800106676,607.7610922185494,607.9622044264311,608.1633166343128,608.3644288421946,608.5655410500761,608.766653257958,608.9677654658396,609.1688776737213,609.3699898816031,609.5711020894847,609.7722142973665,609.9733265052482,610.1744387131299,610.3755509210117,610.5766631288934,610.7777753367751,610.9788875446568,611.1799997525385,611.3811119604203,611.582224168302,611.7833363761837,611.9844485840654,612.1855607919471,612.3866729998289,612.5877852077106,612.7888974155924,612.990009623474,613.1911218313556,613.3922340392375,613.5933462471191,613.794458455001,613.9955706628825,614.1966828707642,614.397795078646,614.5989072865277,614.8000194944095,615.0011317022912,615.2022439101728,615.4033561180546,615.6044683259363,615.8055805338181,616.0066927416998,616.2078049495814,616.4089171574632,616.6100293653449,616.8111415732267,617.0122537811084,617.2133659889901,617.4144781968718,617.6155904047534,617.8167026126353,618.017814820517,618.2189270283986,618.4200392362803,618.621151444162,618.8222636520438,619.0233758599255,619.2244880678072,619.425600275689,619.6267124835706,619.8278246914524,620.0289368993341,620.2300491072158,620.4311613150976,620.6322735229792,620.833385730861,621.0344979387427,621.2356101466244,621.4367223545062,621.6378345623879,621.8389467702696,622.0400589781513,622.241171186033,622.4422833939147,622.6433956017964,622.8445078096781,623.0456200175598,623.2467322254415,623.4478444333233,623.648956641205,623.8500688490868,624.0511810569684,624.2522932648501,624.4534054727319,624.6545176806136,624.8556298884954,625.056742096377,625.2578543042587,625.4589665121405,625.6600787200222,625.861190927904,626.0623031357857,626.2634153436672,626.464527551549,626.6656397594307,626.8667519673126,627.0678641751942,627.2689763830758,627.4700885909576,627.6712007988393,627.8723130067211,628.0734252146028,628.2745374224845,628.4756496303662,628.6767618382479,628.8778740461297,629.0789862540114,629.2800984618931,629.4812106697748,629.6823228776565,629.8834350855382,630.08454729342,630.2856595013017,630.4867717091835,630.687883917065,630.8889961249467,631.0901083328285,631.2912205407102,631.492332748592,631.6934449564736,631.8945571643553,632.0956693722371,632.2967815801188,632.4978937880006,632.6990059958823,632.9001182037639,633.1012304116457,633.3023426195274,633.5034548274092,633.7045670352909,633.9056792431725,634.1067914510543,634.307903658936,634.5090158668178,634.7101280746995,634.9112402825812,635.1123524904629,635.3134646983445,635.5145769062264,635.715689114108,635.9168013219897,636.1179135298714,636.3190257377531,636.5201379456349,636.7212501535166,636.9223623613983,637.1234745692801,637.3245867771617,637.5256989850435,637.7268111929252,637.9279234008069,638.1290356086887,638.3301478165703,638.5312600244521,638.7323722323338,638.9334844402155,639.1345966480973,639.335708855979,639.5368210638607,639.7379332717423,639.939045479624,640.1401576875058,640.3412698953875,640.5423821032692,640.7434943111509,640.9446065190326,641.1457187269144,641.3468309347961,641.5479431426779,641.7490553505595,641.9501675584412,642.151279766323,642.3523919742047,642.5535041820865,642.7546163899681,642.9557285978498,643.1568408057316,643.3579530136133,643.5590652214951,643.7601774293768,643.9612896372583,644.1624018451402,644.3635140530218,644.5646262609037,644.7657384687853,644.9668506766669,645.1679628845487,645.3690750924304,645.5701873003122,645.7712995081939,645.9724117160756,646.1735239239573,646.374636131839,646.5757483397208,646.7768605476025,646.9779727554842,647.1790849633659,647.3801971712476,647.5813093791294,647.7824215870111,647.9835337948928,648.1846460027746,648.3857582106561,648.586870418538,648.7879826264196,648.9890948343013,649.1902070421831,649.3913192500647,649.5924314579465,649.7935436658282,649.9946558737099,650.1957680815917,650.3968802894734,650.5979924973551,650.7991047052368,651.0002169131185,651.2013291210003,651.402441328882,651.6035535367637,651.8046657446454,652.0057779525271,652.2068901604089,652.4080023682906,652.6091145761724,652.810226784054,653.0113389919356,653.2124511998175,653.4135634076991,653.614675615581,653.8157878234625,654.0169000313442,654.218012239226,654.4191244471077,654.6202366549895,654.8213488628712,655.0224610707528,655.2235732786346,655.4246854865163,655.6257976943981,655.8269099022798,656.0280221101614,656.2291343180432,656.4302465259249,656.6313587338067,656.8324709416884,657.0335831495701,657.2346953574518,657.4358075653334,657.6369197732153,657.838031981097,658.0391441889786,658.2402563968603,658.441368604742,658.6424808126238,658.8435930205055,659.0447052283872,659.245817436269,659.4469296441506,659.6480418520324,659.8491540599141,660.0502662677958,660.2513784756776,660.4524906835592,660.653602891441,660.8547150993227,661.0558273072044,661.2569395150862,661.4580517229679,661.6591639308496,661.8602761387313,662.061388346613,662.2625005544947,662.4636127623764,662.6647249702581,662.8658371781398,663.0669493860215,663.2680615939033,663.469173801785,663.6702860096668,663.8713982175484,664.0725104254301,664.2736226333119,664.4747348411936,664.6758470490754,664.876959256957,665.0780714648387,665.2791836727205,665.4802958806022,665.681408088484,665.8825202963657,666.0836325042472,666.284744712129,666.4858569200107,666.6869691278926,666.8880813357742,667.0891935436558,667.2903057515376,667.4914179594193,667.692530167301,667.8936423751828,668.0947545830645,668.2958667909462,668.4969789988279,668.6980912067096,668.8992034145914,669.1003156224731,669.3014278303549,669.5025400382365,669.7036522461182,669.904764454,670.1058766618817,670.3069888697635,670.508101077645,670.7092132855267,670.9103254934085,671.1114377012902,671.312549909172,671.5136621170537,671.7147743249353,671.9158865328171,672.1169987406988,672.3181109485806,672.5192231564623,672.7203353643439,672.9214475722257,673.1225597801074,673.3236719879892,673.5247841958709,673.7258964037526,673.9270086116343,674.128120819516,674.3292330273978,674.5303452352795,674.7314574431612,674.9325696510429,675.1336818589245,675.3347940668064,675.535906274688,675.7370184825697,675.9381306904515,676.1392428983331,676.3403551062149,676.5414673140966,676.7425795219783,676.9436917298601,677.1448039377417,677.3459161456235,677.5470283535052,677.7481405613869,677.9492527692687,678.1503649771504,678.3514771850321,678.5525893929138,678.7537016007955,678.9548138086773,679.155926016559,679.3570382244407,679.5581504323223,679.759262640204,679.9603748480858,680.1614870559675,680.3625992638493,680.5637114717309,680.7648236796126,680.9659358874944,681.1670480953761,681.3681603032579,681.5692725111395,681.7703847190212,681.971496926903,682.1726091347847,682.3737213426665,682.5748335505482,682.7759457584298,682.9770579663116,683.1781701741933,683.3792823820751,683.5803945899568,683.7815067978383,683.9826190057202,684.1837312136018,684.3848434214837,684.5859556293653,684.787067837247,684.9881800451287,685.1892922530104,685.3904044608922,685.5915166687739,685.7926288766556,685.9937410845373,686.194853292419,686.3959655003008,686.5970777081825,686.7981899160642,686.999302123946,687.2004143318276,687.4015265397094,687.6026387475911,687.8037509554728,688.0048631633546,688.2059753712361,688.407087579118,688.6081997869996,688.8093119948813,689.0104242027631,689.2115364106448,689.4126486185265,689.6137608264082,689.8148730342899,690.0159852421717,690.2170974500534,690.4182096579351,690.6193218658168,690.8204340736985,691.0215462815803,691.222658489462,691.4237706973438,691.6248829052254,691.8259951131071,692.0271073209889,692.2282195288706,692.4293317367524,692.630443944634,692.8315561525156,693.0326683603975,693.2337805682791,693.434892776161,693.6360049840426,693.8371171919242,694.038229399806,694.2393416076877,694.4404538155695,694.6415660234512,694.8426782313328,695.0437904392146,695.2449026470963,695.4460148549781,695.6471270628598,695.8482392707415,696.0493514786232,696.2504636865049,696.4515758943867,696.6526881022684,696.8538003101501,697.0549125180318,697.2560247259134,697.4571369337953,697.658249141677,697.8593613495586,698.0604735574404,698.261585765322,698.4626979732038,698.6638101810855,698.8649223889672,699.066034596849,699.2671468047306,699.4682590126124,699.6693712204941,699.8704834283758,700.0715956362576,700.2727078441393,700.473820052021,700.6749322599027,700.8760444677844,701.0771566756662,701.2782688835479,701.4793810914296,701.6804932993113,701.881605507193,702.0827177150748,702.2838299229564,702.4849421308382,702.6860543387198,702.8871665466015,703.0882787544833,703.289390962365,703.4905031702468,703.6916153781284,703.8927275860101,704.0938397938919,704.2949520017736,704.4960642096554,704.6971764175371,704.8982886254187,705.0994008333005,705.3005130411822,705.501625249064,705.7027374569457,705.9038496648272,706.104961872709,706.3060740805907,706.5071862884724,706.7082984963542,706.9094107042359,707.1105229121176,707.3116351199993,707.512747327881,707.7138595357628,707.9149717436445,708.1160839515262,708.3171961594079,708.5183083672896,708.7194205751714,708.9205327830531,709.1216449909349,709.3227571988165,709.5238694066982,709.72498161458,709.9260938224617,710.1272060303435,710.328318238225,710.5294304461067,710.7305426539886,710.9316548618702,711.132767069752,711.3338792776337,711.5349914855153,711.7361036933971,711.9372159012788,712.1383281091606,712.3394403170423,712.5405525249239,712.7416647328057,712.9427769406874,713.1438891485692,713.3450013564509,713.5461135643326,713.7472257722143,713.948337980096,714.1494501879778,714.3505623958595,714.5516746037412,714.7527868116229,714.9538990195045,715.1550112273864,715.356123435268,715.5572356431497,715.7583478510315,715.9594600589131,716.1605722667949,716.3616844746766,716.5627966825583,716.7639088904401,716.9650210983217,717.1661333062035,717.3672455140852,717.5683577219669,717.7694699298487,717.9705821377304,718.1716943456121,718.3728065534938,718.5739187613755,718.7750309692573,718.976143177139,719.1772553850207,719.3783675929024,719.579479800784,719.7805920086658,719.9817042165475,720.1828164244293,720.3839286323109,720.5850408401926,720.7861530480744,720.9872652559561,721.1883774638379,721.3894896717195,721.5906018796012,721.791714087483,721.9928262953647,722.1939385032465,722.3950507111282,722.5961629190098,722.7972751268916,722.9983873347733,723.1994995426551,723.4006117505368,723.6017239584183,723.8028361663002,724.0039483741818,724.2050605820637,724.4061727899453,724.607284997827,724.8083972057087,725.0095094135904,725.2106216214722,725.4117338293539,725.6128460372356,725.8139582451173,726.015070452999,726.2161826608808,726.4172948687625,726.6184070766442,726.819519284526,727.0206314924076,727.2217437002894,727.4228559081711,727.6239681160528,727.8250803239346,728.0261925318162,728.227304739698,728.4284169475796,728.6295291554613,728.8306413633431,729.0317535712248,729.2328657791065,729.4339779869882,729.6350901948699,729.8362024027517,730.0373146106334,730.2384268185151,730.4395390263968,730.6406512342785,730.8417634421603,731.042875650042,731.2439878579238,731.4451000658054,731.6462122736871,731.8473244815689,732.0484366894506,732.2495488973324,732.450661105214,732.6517733130956,732.8528855209775,733.0539977288591,733.255109936741,733.4562221446226,733.6573343525042,733.858446560386,734.0595587682677,734.2606709761495,734.4617831840312,734.6628953919128,734.8640075997946,735.0651198076763,735.2662320155581,735.4673442234398,735.6684564313215,735.8695686392032,736.0706808470849,736.2717930549667,736.4729052628484,736.6740174707301,736.8751296786118,737.0762418864934,737.2773540943753,737.478466302257,737.6795785101386,737.8806907180204,738.081802925902,738.2829151337838,738.4840273416655,738.6851395495472,738.886251757429,739.0873639653106,739.2884761731924,739.4895883810741,739.6907005889558,739.8918127968376,740.0929250047193,740.294037212601,740.4951494204827,740.6962616283644,740.8973738362462,741.0984860441279,741.2995982520094,741.5007104598913,741.701822667773,741.9029348756548,742.1040470835364,742.3051592914182,742.5062714992998,742.7073837071815,742.9084959150633,743.109608122945,743.3107203308268,743.5118325387084,743.7129447465901,743.9140569544719,744.1151691623536,744.3162813702354,744.5173935781171,744.7185057859987,744.9196179938805,745.1207302017622,745.3218424096439,745.5229546175257,745.7240668254072,745.925179033289,746.1262912411707,746.3274034490524,746.5285156569342,746.7296278648159,746.9307400726976,747.1318522805793,747.332964488461,747.5340766963428,747.7351889042245,747.9363011121062,748.1374133199879,748.3385255278696,748.5396377357514,748.7407499436331,748.9418621515149,749.1429743593965,749.3440865672782,749.54519877516,749.7463109830417,749.9474231909235,750.148535398805,750.3496476066867,750.5507598145686,750.7518720224502,750.952984230332,751.1540964382137,751.3552086460953,751.5563208539771,751.7574330618588,751.9585452697406,752.1596574776223,752.3607696855039,752.5618818933857,752.7629941012674,752.9641063091492,753.1652185170309,753.3663307249126,753.5674429327943,753.768555140676,753.9696673485578,754.1707795564395,754.3718917643212,754.5730039722029,754.7741161800845,754.9752283879664,755.176340595848,755.3774528037297,755.5785650116115,755.7796772194931,755.9807894273749,756.1819016352566,756.3830138431383,756.5841260510201,756.7852382589017,756.9863504667835,757.1874626746652,757.3885748825469,757.5896870904287,757.7907992983104,757.9919115061921,758.1930237140738,758.3941359219555,758.5952481298373,758.796360337719,758.9974725456007,759.1985847534824,759.399696961364,759.6008091692458,759.8019213771275,760.0030335850093,760.2041457928909,760.4052580007726,760.6063702086544,760.8074824165361,761.0085946244179,761.2097068322995,761.4108190401812,761.611931248063,761.8130434559447,762.0141556638265,762.2152678717082,762.4163800795898,762.6174922874716,762.8186044953533,763.0197167032351,763.2208289111168,763.4219411189983,763.6230533268802,763.8241655347618,764.0252777426437,764.2263899505253,764.427502158407,764.6286143662887,764.8297265741704,765.0308387820522,765.2319509899339,765.4330631978156,765.6341754056973,765.835287613579,766.0363998214608,766.2375120293425,766.4386242372242,766.639736445106,766.8408486529876,767.0419608608694,767.2430730687511,767.4441852766328,767.6452974845146,767.8464096923962,768.047521900278,768.2486341081596,768.4497463160413,768.6508585239231,768.8519707318048,769.0530829396865,769.2541951475682,769.4553073554499,769.6564195633317,769.8575317712134,770.0586439790951,770.2597561869768,770.4608683948585,770.6619806027403,770.863092810622,771.0642050185038,771.2653172263854,771.4664294342671,771.6675416421489,771.8686538500306,772.0697660579124,772.270878265794,772.4719904736756,772.6731026815575,772.8742148894391,773.075327097321,773.2764393052026,773.4775515130842,773.678663720966,773.8797759288477,774.0808881367295,774.2820003446112,774.4831125524929,774.6842247603746,774.8853369682563,775.0864491761381,775.2875613840198,775.4886735919015,775.6897857997832,775.8908980076649,776.0920102155467,776.2931224234284,776.4942346313101,776.6953468391919,776.8964590470734,777.0975712549553,777.298683462837,777.4997956707186,777.7009078786004,777.902020086482,778.1031322943638,778.3042445022455,778.5053567101272,778.706468918009,778.9075811258907,779.1086933337724,779.3098055416541,779.5109177495358,779.7120299574176,779.9131421652993,780.1142543731809,780.3153665810627,780.5164787889444,780.7175909968262,780.9187032047079,781.1198154125897,781.3209276204713,781.522039828353,781.7231520362348,781.9242642441164,782.1253764519982,782.3264886598798,782.5276008677615,782.7287130756433,782.929825283525,783.1309374914067,783.3320496992885,783.5331619071701,783.7342741150519,783.9353863229336,784.1364985308153,784.3376107386971,784.5387229465787,784.7398351544605,784.9409473623422,785.1420595702239,785.3431717781057,785.5442839859874,785.745396193869,785.9465084017507,786.1476206096324,786.3487328175142,786.5498450253959,786.7509572332776,786.9520694411593,787.153181649041,787.3542938569228,787.5554060648045,787.7565182726863,787.9576304805679,788.1587426884496,788.3598548963314,788.5609671042131,788.7620793120949,788.9631915199765,789.1643037278582,789.36541593574,789.5665281436217,789.7676403515035,789.9687525593852,790.1698647672667,790.3709769751486,790.5720891830302,790.773201390912,790.9743135987937,791.1754258066753,791.3765380145571,791.5776502224388,791.7787624303206,791.9798746382023,792.180986846084,792.3820990539657,792.5832112618474,792.7843234697292,792.9854356776109,793.1865478854926,793.3876600933743,793.588772301256,793.7898845091378,793.9909967170195,794.1921089249012,794.393221132783,794.5943333406645,794.7954455485464,794.996557756428,795.1976699643097,795.3987821721915,795.5998943800731,795.8010065879549,796.0021187958366,796.2032310037183,796.4043432116001,796.6054554194818,796.8065676273635,797.0076798352452,797.2087920431269,797.4099042510087,797.6110164588904,797.8121286667721,798.0132408746538,798.2143530825355,798.4154652904173,798.616577498299,798.8176897061808,799.0188019140624,799.219914121944,799.4210263298258,799.6221385377075,799.8232507455893,800.0243629534709,800.2254751613526,800.4265873692344,800.6276995771161,800.8288117849979,801.0299239928796,801.2310362007612,801.432148408643,801.6332606165247,801.8343728244065,802.0354850322882,802.2365972401698,802.4377094480516,802.6388216559333,802.8399338638151,803.0410460716968,803.2421582795785,803.4432704874602,803.6443826953418,803.8454949032237,804.0466071111053,804.247719318987]}
},{}],36:[function(require,module,exports){
(function (__filename){
'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var vercos = require( './../lib' );


// FIXTURES //

var mediumNegative = require( './fixtures/julia/medium_negative.json' );
var mediumPositive = require( './fixtures/julia/medium_positive.json' );
var largeNegative = require( './fixtures/julia/large_negative.json' );
var largePositive = require( './fixtures/julia/large_positive.json' );
var hugeNegative = require( './fixtures/julia/huge_negative.json' );
var hugePositive = require( './fixtures/julia/huge_positive.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof vercos, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function computes the versed cosine (for -256*pi < x < 0 )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumNegative.x;
	expected = mediumNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed cosine (for 0 < x < 256*pi )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = mediumPositive.x;
	expected = mediumPositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed cosine (for -2**60 (pi/2) < x < -2**20 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largeNegative.x;
	expected = largeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed cosine (for 2**20 (pi/2) < x < 2**60 (pi/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = largePositive.x;
	expected = largePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed cosine (for x <= -2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugeNegative.x;
	expected = hugeNegative.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function computes the versed cosine (for x >= 2**60 (PI/2) )', function test( t ) {
	var expected;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	x = hugePositive.x;
	expected = hugePositive.expected;

	for ( i = 0; i < x.length; i++ ) {
		y = vercos( x[i] );
		if ( y === expected[ i ] ) {
			t.strictEqual( y, expected[ i ], 'x: '+x[i]+'. Expected: '+expected[i] );
		} else {
			delta = abs( y - expected[i] );
			tol = EPS * abs( expected[i] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[i]+'. y: '+y+'. Expected: '+expected[i]+'. tol: '+tol+'. delta: '+delta+'.' );
		}
	}

	t.end();
});

tape( 'the function returns `NaN` if provided a `NaN`', function test( t ) {
	var v = vercos( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `+infinity`', function test( t ) {
	var v = vercos( PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `NaN` if provided `-infinity`', function test( t ) {
	var v = vercos( NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );
	t.end();
});

}).call(this,"/lib/node_modules/@stdlib/math/base/special/vercos/test/test.js")
},{"./../lib":28,"./fixtures/julia/huge_negative.json":30,"./fixtures/julia/huge_positive.json":31,"./fixtures/julia/large_negative.json":32,"./fixtures/julia/large_positive.json":33,"./fixtures/julia/medium_negative.json":34,"./fixtures/julia/medium_positive.json":35,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-eps":56,"@stdlib/math/constants/float64-ninf":62,"@stdlib/math/constants/float64-pinf":63,"tape":121}],37:[function(require,module,exports){
'use strict';

// MAIN //

/**
* Evaluates a polynomial.
*
* #### Notes
*
* * The implementation uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*
* @example
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*/
function evalpoly( c, x ) {
	var p;
	var i;

	i = c.length;
	if ( i < 2 || x === 0.0 ) {
		if ( i === 0 ) {
			return 0.0;
		}
		return c[ 0 ];
	}
	i -= 1;
	p = ( c[ i ] * x ) + c[ i-1 ];
	i -= 2;
	while ( i >= 0 ) {
		p = ( p * x ) + c[ i ];
		i -= 1;
	}
	return p;
} // end FUNCTION evalpoly()


// EXPORTS //

module.exports = evalpoly;

},{}],38:[function(require,module,exports){
'use strict';

// MODULES //

var evalpoly = require( './evalpoly.js' );


// MAIN //

/**
* Generates a function for evaluating a polynomial.
*
* #### Notes
*
* * The compiled function uses [Horner's rule]{@link http://en.wikipedia.org/wiki/Horner's_method} for efficient computation.
*
*
* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
* @returns {Function} function for evaluating a polynomial
*
* @example
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/
function factory( c ) {
	var f;
	var n;
	var m;
	var i;

	// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
	if ( c.length > 500 ) {
		return polyval;
	}
	// Code generation. Start with the function definition...
	f = 'return function evalpoly(x){';

	// Create the function body...
	n = c.length;

	// If no coefficients, the function always returns 0...
	if ( n === 0 ) {
		f += 'return 0.0;';
	}
	// If only one coefficient, the function always returns that coefficient...
	else if ( n === 1 ) {
		f += 'return ' + c[ 0 ] + ';';
	}
	// If more than one coefficient, apply Horner's method...
	else {
		// If `x == 0`, return the first coefficient...
		f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

		// Otherwise, evaluate the polynomial...
		f += 'return ' + c[ 0 ];
		m = n - 1;
		for ( i = 1; i < n; i++ ) {
			f += '+x*';
			if ( i < m ) {
				f += '(';
			}
			f += c[ i ];
		}
		// Close all the parentheses...
		for ( i = 0; i < m-1; i++ ) {
			f += ')';
		}
		f += ';';
	}
	// Close the function:
	f += '}';

	// Add a source directive for debugging:
	f += '//# sourceURL=evalpoly.factory.js';

	// Create the function in the global scope:
	return ( new Function( f ) )(); // eslint-disable-line no-new-func

	/*
	* returns
	*    function evalpoly( x ) {
	*        if ( x === 0.0 ) {
	*            return c[ 0 ];
	*        }
	*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
	*    }
	*/

	/**
	* Evaluates a polynomial.
	*
	* @private
	* @param {number} x - value at which to evaluate a polynomial
	* @returns {number} evaluated polynomial
	*/
	function polyval( x ) {
		return evalpoly( c, x );
	} // end FUNCTON polyval()
} // end FUNCTION factory()


// EXPORTS //

module.exports = factory;

},{"./evalpoly.js":37}],39:[function(require,module,exports){
'use strict';

/**
* Evaluate a polynomial.
*
* @module @stdlib/math/base/tools/evalpoly
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* @example
* var evalpoly = require( '@stdlib/math/base/tools/evalpoly' );
*
* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
*
* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
* // returns 123.0
*
* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
* // returns 38.0
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var evalpoly = require( './evalpoly.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( evalpoly, 'factory', factory );


// EXPORTS //

module.exports = evalpoly;

},{"./evalpoly.js":37,"./factory.js":38,"@stdlib/utils/define-read-only-property":66}],40:[function(require,module,exports){
'use strict';

// MODULES //

var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
var EXP_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
var BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );


// MAIN //

/**
* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @param {number} x - input value
* @returns {integer32} unbiased exponent
*
* @example
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
* @example
* var exp = exponent( -3.14 );
* // returns 1
* @example
* var exp = exponent( 0.0 );
* // returns 0
* @example
* var exp = exponent( NaN );
* // returns 1024
*/
function exponent( x ) {
	// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
	var high = getHighWord( x );

	// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
	high = ( high & EXP_MASK ) >>> 20;

	// Remove the bias and return:
	return high - BIAS;
} // end FUNCTION exponent()


// EXPORTS //

module.exports = exponent;

},{"@stdlib/math/base/utils/float64-get-high-word":47,"@stdlib/math/constants/float64-exponent-bias":57,"@stdlib/math/constants/float64-high-word-exponent-mask":58}],41:[function(require,module,exports){
'use strict';

/**
* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-exponent
*
* @example
* var exponent = require( '@stdlib/math/base/utils/float64-exponent );
*
* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
* // returns -1019
*
* exp = exponent( -3.14 );
* // returns 1
*
* exp = exponent( 0.0 );
* // returns 0
*
* exp = exponent( NaN );
* // returns 1024
*/

// MODULES //

var exponent = require( './exponent.js' );


// EXPORTS //

module.exports = exponent;

},{"./exponent.js":40}],42:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
*
* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
* @returns {number} floating-point number
*
* @example
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
* @example
* var v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
* @example
* var v = fromWords( 0, 0 );
* // returns 0.0
* @example
* var v = fromWords( 2147483648, 0 );
* // returns -0.0
* @example
* var v = fromWords( 2146959360, 0 );
* // returns NaN
* @example
* var v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
* @example
* var v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/
function fromWords( high, low ) {
	UINT32_VIEW[ HIGH ] = high;
	UINT32_VIEW[ LOW ] = low;
	return FLOAT64_VIEW[ 0 ];
} // end FUNCTION fromWords()


// EXPORTS //

module.exports = fromWords;

},{"./indices.js":44}],43:[function(require,module,exports){
'use strict';

/**
* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-from-words
*
* @example
* var fromWords = require( '@stdlib/math/base/utils/float64-from-words' );
*
* var v = fromWords( 1774486211, 2479577218 );
* // returns 3.14e201
*
* v = fromWords( 3221823995, 1413754136 );
* // returns 3.141592653589793
*
* v = fromWords( 0, 0 );
* // returns 0.0
*
* v = fromWords( 2147483648, 0 );
* // returns -0.0
*
* v = fromWords( 2146959360, 0 );
* // returns NaN
*
* v = fromWords( 2146435072, 0 );
* // returns Number.POSITIVE_INFINITY
*
* v = fromWords( 4293918720, 0 );
* // returns Number.NEGATIVE_INFINITY
*/

// MODULES //

var fromWords = require( './from_words.js' );


// EXPORTS //

module.exports = fromWords;

},{"./from_words.js":42}],44:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
var LOW;

if ( isLittleEndian === true ) {
	HIGH = 1; // second index
	LOW = 0; // first index
} else {
	HIGH = 0; // first index
	LOW = 1; // second index
}


// EXPORTS //

module.exports = {
	'HIGH': HIGH,
	'LOW': LOW
};

},{"@stdlib/assert/is-little-endian":2}],45:[function(require,module,exports){
'use strict';

// MODULES //

var HIGH = require( './high.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} higher order word
*
* @example
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/
function getHighWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ HIGH ];
} // end FUNCTION getHighWord()


// EXPORTS //

module.exports = getHighWord;

},{"./high.js":46}],46:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var HIGH;
if ( isLittleEndian === true ) {
	HIGH = 1; // second index
} else {
	HIGH = 0; // first index
}


// EXPORTS //

module.exports = HIGH;

},{"@stdlib/assert/is-little-endian":2}],47:[function(require,module,exports){
'use strict';

/**
* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-high-word
*
* @example
* var getHighWord = require( '@stdlib/math/base/utils/float64-get-high-word' );
*
* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
* // returns 1774486211
*/

// MODULES //

var getHighWord = require( './get_high_word.js' );


// EXPORTS //

module.exports = getHighWord;

},{"./get_high_word.js":45}],48:[function(require,module,exports){
'use strict';

// MODULES //

var LOW = require( './low.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


// MAIN //

/**
* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
*
*
* #### References
*
* * [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {uinteger32} lower order word
*
* @example
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/
function getLowWord( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return UINT32_VIEW[ LOW ];
} // end FUNCTION getLowWord()


// EXPORTS //

module.exports = getLowWord;

},{"./low.js":50}],49:[function(require,module,exports){
'use strict';

/**
* Returns an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
*
* @module @stdlib/math/base/utils/float64-get-low-word
*
* @example
* var getLowWord = require( '@stdlib/math/base/utils/float64-get-low-word' );
*
* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
* // returns 2479577218
*/

// MODULES //

var getLowWord = require( './get_low_word.js' );


// EXPORTS //

module.exports = getLowWord;

},{"./get_low_word.js":48}],50:[function(require,module,exports){
'use strict';

// MODULES //

var isLittleEndian = require( '@stdlib/assert/is-little-endian' );


// MAIN //

var LOW;
if ( isLittleEndian === true ) {
	LOW = 0; // first index
} else {
	LOW = 1; // second index
}


// EXPORTS //

module.exports = LOW;

},{"@stdlib/assert/is-little-endian":2}],51:[function(require,module,exports){
'use strict';

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @module @stdlib/math/base/utils/float64-normalize
*
* @example
* var normalize = require( '@stdlib/math/base/utils/float64-normalize' );
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*/

// MODULES //

var normalize = require( './normalize.js' );


// EXPORTS //

module.exports = normalize;

},{"./normalize.js":52}],52:[function(require,module,exports){
'use strict';

// MODULES //

var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var abs = require( '@stdlib/math/base/special/abs' );


// VARIABLES //

// (1<<52)
var SCALAR = 4503599627370496;


// MAIN //

/**
* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
*
* @param {number} x - input value
* @returns {NumberArray} a two-element array containing `y` and `exp`
*
* @example
* var pow = require( '@stdlib/math/base/special/pow' );
*
* var out = normalize( 3.14e-319 );
* // returns [ 1.4141234400356668e-303, -52 ]
*
* var y = out[ 0 ];
* var exp = out[ 1 ];
*
* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
* // returns true
*
* @example
* var out = normalize( 0 );
* // returns [ 0.0, 0 ];
*
* @example
* var out = normalize( Number.POSITIVE_INFINITY );
* // returns [ Number.POSITIVE_INFINITY, 0 ]
*
* @example
* var out = normalize( Number.NEGATIVE_INFINITY );
* // returns [ Number.NEGATIVE_INFINIY, 0 ]
*
* @example
* var out = normalize( NaN );
* // returns [ NaN, 0 ]
*/
function normalize( x ) {
	if ( isnan( x ) || isInfinite( x ) ) {
		return [ x, 0 ];
	}
	if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
		return [ x*SCALAR, -52 ];
	}
	return [ x, 0 ];
} // end FUNCTION normalize()


// EXPORTS //

module.exports = normalize;

},{"@stdlib/math/base/assert/is-infinite":4,"@stdlib/math/base/assert/is-nan":6,"@stdlib/math/base/special/abs":9,"@stdlib/math/constants/float64-smallest-normal":64}],53:[function(require,module,exports){
'use strict';

/**
* Split a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* @module @stdlib/math/base/utils/float64-to-words
*
* @example
* var toWords = require( '@stdlib/math/base/utils/float64-to-words' );
*
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/

// MODULES //

var toWords = require( './to_words.js' );


// EXPORTS //

module.exports = toWords;

},{"./to_words.js":55}],54:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"@stdlib/assert/is-little-endian":2,"dup":44}],55:[function(require,module,exports){
'use strict';

// MODULES //

var indices = require( './indices.js' );


// VARIABLES //

var FLOAT64_VIEW = new Float64Array( 1 );
var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

var HIGH = indices.HIGH;
var LOW = indices.LOW;


// MAIN //

/**
* Splits a floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
*
* #### Notes
*
* ``` text
* float64 (64 bits)
* f := fraction (significand/mantissa) (52 bits)
* e := exponent (11 bits)
* s := sign bit (1 bit)
*
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |                                Float64                                |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* |              Uint32               |               Uint32              |
* |-------- -------- -------- -------- -------- -------- -------- --------|
* ```
*
* If little endian (more significant bits last):
*
* ``` text
*                         <-- lower      higher -->
* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
* ```
*
* If big endian (more significant bits first):
*
* ``` text
*                         <-- higher      lower -->
* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
* ```
*
* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
*
*
* #### References
*
* [Open Group]{@link http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm}
*
*
* @param {number} x - input value
* @returns {NumberArray} two-element array containing a higher order word and a lower order word
*
* @example
* var w = toWords( 3.14e201 );
* // returns [ 1774486211, 2479577218 ]
*/
function toWords( x ) {
	FLOAT64_VIEW[ 0 ] = x;
	return [ UINT32_VIEW[ HIGH ], UINT32_VIEW[ LOW ] ];
} // end FUNCTION toWords()


// EXPORTS //

module.exports = toWords;

},{"./indices.js":54}],56:[function(require,module,exports){
'use strict';

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-eps
* @type {number}
*
* @example
* var FLOAT64_EPSILON = require( '@stdlib/math/constants/float64-eps' );
* // returns 2.220446049250313e-16
*/


// MAIN //

/**
* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number is
*
* ``` tex
* \frac{1}{2^{52}}
* ```
*
* @constant
* @type {number}
* @default 2.220446049250313e-16
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
*/
var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


// EXPORTS //

module.exports = FLOAT64_EPSILON;

},{}],57:[function(require,module,exports){
'use strict';

/**
* The bias of a double-precision floating-point number's exponent.
*
* @module @stdlib/math/constants/float64-exponent-bias
* @type {integer32}
*
* @example
* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/math/constants/float64-exponent-bias' );
* // returns 1023
*/


// MAIN //

/**
* The bias of a double-precision floating-point number's exponent. The bias can be computed via
*
* ``` tex
* \mathrm{bias} = 2^{k-1} - 1
* ```
*
* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_EXPONENT_BIAS;

},{}],58:[function(require,module,exports){
'use strict';

/**
* High word mask for the exponent of a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-high-word-exponent-mask
* @type {uinteger32}
*
* @example
* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/math/constants/float64-high-word-exponent-mask' );
* // returns 2146435072
*/


// MAIN //

/**
* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000
* ```
*
* @constant
* @type {uinteger32}
* @default 0x7ff00000
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


// EXPORTS //

module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;

},{}],59:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-max-base2-exponent-subnormal' );
* // returns -1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* 00000000000 => 0 - BIAS = -1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default -1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;

},{}],60:[function(require,module,exports){
'use strict';

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-max-base2-exponent
* @type {integer32}
*
* @example
* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/math/constants/float64-max-base2-exponent' );
* // returns 1023
*/


// MAIN //

/**
* The maximum biased base 2 exponent for a double-precision floating-point number.
*
* ``` text
* 11111111110 => 2046 - BIAS = 1023
* ```
*
* where `BIAS = 1023`.
*
* @constant
* @type {integer32}
* @default 1023
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MAX_BASE2_EXPONENT;

},{}],61:[function(require,module,exports){
'use strict';

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* @module @stdlib/math/constants/float64-min-base2-exponent-subnormal
* @type {integer32}
*
* @example
* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/math/constants/float64-min-base2-exponent-subnormal' );
* // returns -1074
*/


// MAIN //

/**
* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
*
* ``` text
* -(BIAS+(52-1)) = -(1023+51) = -1074
* ```
*
* where `BIAS = 1023` and `52` is the number of digits in the significand.
*
* @constant
* @type {integer32}
* @default -1074
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


// EXPORTS //

module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;

},{}],62:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point negative infinity.
*
* @module @stdlib/math/constants/float64-ninf
* @type {number}
*
* @example
* var FLOAT64_NINF = require( '@stdlib/math/constants/float64-ninf' );
* // returns Number.NEGATIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point negative infinity has the bit sequence
*
* ``` binarystring
* 1 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.NEGATIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_NINF;

},{}],63:[function(require,module,exports){
'use strict';

/**
* Double-precision floating-point positive infinity.
*
* @module @stdlib/math/constants/float64-pinf
* @type {number}
*
* @example
* var FLOAT64_PINF = require( '@stdlib/math/constants/float64-pinf' );
* // returns Number.POSITIVE_INFINITY
*/


// MAIN //

/**
* Double-precision floating-point positive infinity has the bit sequence
*
* ``` binarystring
* 0 11111111111 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default Number.POSITIVE_INFINITY
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_PINF = Number.POSITIVE_INFINITY;


// EXPORTS //

module.exports = FLOAT64_PINF;

},{}],64:[function(require,module,exports){
'use strict';

/**
* Smallest positive double-precision floating-point normal number.
*
* @module @stdlib/math/constants/float64-smallest-normal
* @type {number}
*
* @example
* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/math/constants/float64-smallest-normal' );
* // returns 2.2250738585072014e-308
*/


// MAIN //

/**
* The smallest positive double-precision floating-point normal number has the value
*
* ``` tex
* \frac{1}{2^{1023-1}}
* ```
*
* which corresponds to the bit sequence
*
* ``` binarystring
* 0 00000000001 00000000000000000000 00000000000000000000000000000000
* ```
*
* @constant
* @type {number}
* @default 2.2250738585072014e-308
* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
*/
var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


// EXPORTS //

module.exports = FLOAT64_SMALLEST_NORMAL;

},{}],65:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @param {Object} obj - object on which to define the property
* @param {string} prop - property name
* @param {*} value - value to set
*
* @example
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/
function setReadOnly( obj, prop, value ) {
	Object.defineProperty( obj, prop, {
		'value': value,
		'configurable': false,
		'writable': false,
		'enumerable': true
	});
} // end FUNCTION setReadOnly()


// EXPORTS //

module.exports = setReadOnly;

},{}],66:[function(require,module,exports){
'use strict';

/**
* Defines a read-only property.
*
* @module @stdlib/utils/define-read-only-property
*
* @example
* var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
*
* var obj = {};
* setReadOnly( obj, 'foo', 'bar' );
* obj.foo = 'boop'; // => throws
*/

// MODULES //

var setReadOnly = require( './define_read_only_property.js' );


// EXPORTS //

module.exports = setReadOnly;

},{"./define_read_only_property.js":65}],67:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],68:[function(require,module,exports){

},{}],69:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"dup":68}],70:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],71:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":67,"ieee754":90}],72:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":92}],73:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":74,"./lib/keys.js":75}],74:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],75:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],76:[function(require,module,exports){
'use strict';

var keys = require('object-keys');
var foreach = require('foreach');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;

},{"foreach":86,"object-keys":95}],77:[function(require,module,exports){
module.exports = function () {
    for (var i = 0; i < arguments.length; i++) {
        if (arguments[i] !== undefined) return arguments[i];
    }
};

},{}],78:[function(require,module,exports){
'use strict';

var $isNaN = require('./helpers/isNaN');
var $isFinite = require('./helpers/isFinite');

var sign = require('./helpers/sign');
var mod = require('./helpers/mod');

var IsCallable = require('is-callable');
var toPrimitive = require('es-to-primitive/es5');

var has = require('has');

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return !!value;
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	},

	// http://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
	IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
		if (this.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};
		// jscs:disable
		for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}
		// jscs:enable
		var isData = has(Desc, '[[Value]]');
		var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
		if (isData && IsAccessor) {
			throw new TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.1
	IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.2
	IsDataDescriptor: function IsDataDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
			return false;
		}

		return true;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.3
	IsGenericDescriptor: function IsGenericDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return false;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
			return true;
		}

		return false;
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.4
	FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
		if (typeof Desc === 'undefined') {
			return Desc;
		}

		if (!this.IsPropertyDescriptor(Desc)) {
			throw new TypeError('Desc must be a Property Descriptor');
		}

		if (this.IsDataDescriptor(Desc)) {
			return {
				value: Desc['[[Value]]'],
				writable: !!Desc['[[Writable]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else if (this.IsAccessorDescriptor(Desc)) {
			return {
				get: Desc['[[Get]]'],
				set: Desc['[[Set]]'],
				enumerable: !!Desc['[[Enumerable]]'],
				configurable: !!Desc['[[Configurable]]']
			};
		} else {
			throw new TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
		}
	},

	// http://ecma-international.org/ecma-262/5.1/#sec-8.10.5
	ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
		if (this.Type(Obj) !== 'Object') {
			throw new TypeError('ToPropertyDescriptor requires an object');
		}

		var desc = {};
		if (has(Obj, 'enumerable')) {
			desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
		}
		if (has(Obj, 'configurable')) {
			desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
		}
		if (has(Obj, 'value')) {
			desc['[[Value]]'] = Obj.value;
		}
		if (has(Obj, 'writable')) {
			desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
		}
		if (has(Obj, 'get')) {
			var getter = Obj.get;
			if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
				throw new TypeError('getter must be a function');
			}
			desc['[[Get]]'] = getter;
		}
		if (has(Obj, 'set')) {
			var setter = Obj.set;
			if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
				throw new TypeError('setter must be a function');
			}
			desc['[[Set]]'] = setter;
		}

		if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
			throw new TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
		}
		return desc;
	}
};

module.exports = ES5;

},{"./helpers/isFinite":79,"./helpers/isNaN":80,"./helpers/mod":81,"./helpers/sign":82,"es-to-primitive/es5":83,"has":89,"is-callable":93}],79:[function(require,module,exports){
var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

},{}],80:[function(require,module,exports){
module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};

},{}],81:[function(require,module,exports){
module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};

},{}],82:[function(require,module,exports){
module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};

},{}],83:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

var isPrimitive = require('./helpers/isPrimitive');

var isCallable = require('is-callable');

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};

},{"./helpers/isPrimitive":84,"is-callable":93}],84:[function(require,module,exports){
module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

},{}],85:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],86:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],87:[function(require,module,exports){
'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],88:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":87}],89:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":88}],90:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],91:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],92:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],93:[function(require,module,exports){
'use strict';

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};

},{}],94:[function(require,module,exports){
var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;

module.exports = function inspect_ (obj, opts, depth, seen) {
    if (!opts) opts = {};
    
    var maxDepth = opts.depth === undefined ? 5 : opts.depth;
    if (depth === undefined) depth = 0;
    if (depth >= maxDepth && maxDepth > 0
    && obj && typeof obj === 'object') {
        return '[Object]';
    }
    
    if (seen === undefined) seen = [];
    else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    
    function inspect (value, from) {
        if (from) {
            seen = seen.slice();
            seen.push(from);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    
    if (typeof obj === 'string') {
        return inspectString(obj);
    }
    else if (typeof obj === 'function') {
        var name = nameOf(obj);
        return '[Function' + (name ? ': ' + name : '') + ']';
    }
    else if (obj === null) {
        return 'null';
    }
    else if (isSymbol(obj)) {
        var symString = Symbol.prototype.toString.call(obj);
        return typeof obj === 'object' ? 'Object(' + symString + ')' : symString;
    }
    else if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '="' + quote(attrs[i].value) + '"';
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) s += '...';
        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
    }
    else if (isArray(obj)) {
        if (obj.length === 0) return '[]';
        var xs = Array(obj.length);
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
        return '[ ' + xs.join(', ') + ' ]';
    }
    else if (isError(obj)) {
        var parts = [];
        for (var key in obj) {
            if (!has(obj, key)) continue;
            
            if (/[^\w$]/.test(key)) {
                parts.push(inspect(key) + ': ' + inspect(obj[key]));
            }
            else {
                parts.push(key + ': ' + inspect(obj[key]));
            }
        }
        if (parts.length === 0) return '[' + obj + ']';
        return '{ [' + obj + '] ' + parts.join(', ') + ' }';
    }
    else if (typeof obj === 'object' && typeof obj.inspect === 'function') {
        return obj.inspect();
    }
    else if (isMap(obj)) {
        var parts = [];
        mapForEach.call(obj, function (value, key) {
            parts.push(inspect(key, obj) + ' => ' + inspect(value, obj));
        });
        return 'Map (' + mapSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (isSet(obj)) {
        var parts = [];
        setForEach.call(obj, function (value ) {
            parts.push(inspect(value, obj));
        });
        return 'Set (' + setSize.call(obj) + ') {' + parts.join(', ') + '}';
    }
    else if (typeof obj === 'object' && !isDate(obj) && !isRegExp(obj)) {
        var xs = [], keys = [];
        for (var key in obj) {
            if (has(obj, key)) keys.push(key);
        }
        keys.sort();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (/[^\w$]/.test(key)) {
                xs.push(inspect(key) + ': ' + inspect(obj[key], obj));
            }
            else xs.push(key + ': ' + inspect(obj[key], obj));
        }
        if (xs.length === 0) return '{}';
        return '{ ' + xs.join(', ') + ' }';
    }
    else return String(obj);
};

function quote (s) {
    return String(s).replace(/"/g, '&quot;');
}

function isArray (obj) { return toStr(obj) === '[object Array]' }
function isDate (obj) { return toStr(obj) === '[object Date]' }
function isRegExp (obj) { return toStr(obj) === '[object RegExp]' }
function isError (obj) { return toStr(obj) === '[object Error]' }
function isSymbol (obj) { return toStr(obj) === '[object Symbol]' }

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has (obj, key) {
    return hasOwn.call(obj, key);
}

function toStr (obj) {
    return Object.prototype.toString.call(obj);
}

function nameOf (f) {
    if (f.name) return f.name;
    var m = f.toString().match(/^function\s*([\w$]+)/);
    if (m) return m[1];
}

function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
}

function isMap (x) {
    if (!mapSize) {
        return false;
    }
    try {
        mapSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet (x) {
    if (!setSize) {
        return false;
    }
    try {
        setSize.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isElement (x) {
    if (!x || typeof x !== 'object') return false;
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string'
        && typeof x.getAttribute === 'function'
    ;
}

function inspectString (str) {
    var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
    return "'" + s + "'";
    
    function lowbyte (c) {
        var n = c.charCodeAt(0);
        var x = { 8: 'b', 9: 't', 10: 'n', 12: 'f', 13: 'r' }[n];
        if (x) return '\\' + x;
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16);
    }
}

},{}],95:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":96}],96:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],97:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":70}],98:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":70}],99:[function(require,module,exports){
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":100}],100:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":102,"./_stream_writable":104,"core-util-is":72,"inherits":91,"process-nextick-args":98}],101:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":103,"core-util-is":72,"inherits":91}],102:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/BufferList":105,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"events":85,"inherits":91,"isarray":108,"process-nextick-args":98,"safe-buffer":115,"string_decoder/":109,"util":68}],103:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":100,"core-util-is":72,"inherits":91}],104:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./_stream_duplex":100,"./internal/streams/destroy":106,"./internal/streams/stream":107,"_process":70,"core-util-is":72,"inherits":91,"process-nextick-args":98,"safe-buffer":115,"util-deprecate":127}],105:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();
},{"safe-buffer":115}],106:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":98}],107:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":85}],108:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],109:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":115}],110:[function(require,module,exports){
module.exports = require('./readable').PassThrough

},{"./readable":111}],111:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":100,"./lib/_stream_passthrough.js":101,"./lib/_stream_readable.js":102,"./lib/_stream_transform.js":103,"./lib/_stream_writable.js":104}],112:[function(require,module,exports){
module.exports = require('./readable').Transform

},{"./readable":111}],113:[function(require,module,exports){
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":104}],114:[function(require,module,exports){
(function (process){
var through = require('through');
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = function (write, end) {
    var tr = through(write, end);
    tr.pause();
    var resume = tr.resume;
    var pause = tr.pause;
    var paused = false;
    
    tr.pause = function () {
        paused = true;
        return pause.apply(this, arguments);
    };
    
    tr.resume = function () {
        paused = false;
        return resume.apply(this, arguments);
    };
    
    nextTick(function () {
        if (!paused) tr.resume();
    });
    
    return tr;
};

}).call(this,require('_process'))
},{"_process":70,"through":126}],115:[function(require,module,exports){
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":71}],116:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":85,"inherits":91,"readable-stream/duplex.js":99,"readable-stream/passthrough.js":110,"readable-stream/readable.js":111,"readable-stream/transform.js":112,"readable-stream/writable.js":113}],117:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var ES = require('es-abstract/es5');
var replace = bind.call(Function.call, String.prototype.replace);

var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;

module.exports = function trim() {
	var S = ES.ToString(ES.CheckObjectCoercible(this));
	return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
};

},{"es-abstract/es5":78,"function-bind":88}],118:[function(require,module,exports){
'use strict';

var bind = require('function-bind');
var define = require('define-properties');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var boundTrim = bind.call(Function.call, getPolyfill());

define(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundTrim;

},{"./implementation":117,"./polyfill":119,"./shim":120,"define-properties":76,"function-bind":88}],119:[function(require,module,exports){
'use strict';

var implementation = require('./implementation');

var zeroWidthSpace = '\u200b';

module.exports = function getPolyfill() {
	if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
		return String.prototype.trim;
	}
	return implementation;
};

},{"./implementation":117}],120:[function(require,module,exports){
'use strict';

var define = require('define-properties');
var getPolyfill = require('./polyfill');

module.exports = function shimStringTrim() {
	var polyfill = getPolyfill();
	define(String.prototype, { trim: polyfill }, { trim: function () { return String.prototype.trim !== polyfill; } });
	return polyfill;
};

},{"./polyfill":119,"define-properties":76}],121:[function(require,module,exports){
(function (process){
var defined = require('defined');
var createDefaultStream = require('./lib/default_stream');
var Test = require('./lib/test');
var createResult = require('./lib/results');
var through = require('through');

var canEmitExit = typeof process !== 'undefined' && process
    && typeof process.on === 'function' && process.browser !== true
;
var canExit = typeof process !== 'undefined' && process
    && typeof process.exit === 'function'
;

var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

exports = module.exports = (function () {
    var harness;
    var lazyLoad = function () {
        return getHarness().apply(this, arguments);
    };
    
    lazyLoad.only = function () {
        return getHarness().only.apply(this, arguments);
    };
    
    lazyLoad.createStream = function (opts) {
        if (!opts) opts = {};
        if (!harness) {
            var output = through();
            getHarness({ stream: output, objectMode: opts.objectMode });
            return output;
        }
        return harness.createStream(opts);
    };
    
    lazyLoad.onFinish = function () {
        return getHarness().onFinish.apply(this, arguments);
    };

    lazyLoad.getHarness = getHarness

    return lazyLoad

    function getHarness (opts) {
        if (!opts) opts = {};
        opts.autoclose = !canEmitExit;
        if (!harness) harness = createExitHarness(opts);
        return harness;
    }
})();

function createExitHarness (conf) {
    if (!conf) conf = {};
    var harness = createHarness({
        autoclose: defined(conf.autoclose, false)
    });
    
    var stream = harness.createStream({ objectMode: conf.objectMode });
    var es = stream.pipe(conf.stream || createDefaultStream());
    if (canEmitExit) {
        es.on('error', function (err) { harness._exitCode = 1 });
    }
    
    var ended = false;
    stream.on('end', function () { ended = true });
    
    if (conf.exit === false) return harness;
    if (!canEmitExit || !canExit) return harness;

    var inErrorState = false;

    process.on('exit', function (code) {
        // let the process exit cleanly.
        if (code !== 0) {
            return
        }

        if (!ended) {
            var only = harness._results._only;
            for (var i = 0; i < harness._tests.length; i++) {
                var t = harness._tests[i];
                if (only && t.name !== only) continue;
                t._exit();
            }
        }
        harness.close();
        process.exit(code || harness._exitCode);
    });
    
    return harness;
}

exports.createHarness = createHarness;
exports.Test = Test;
exports.test = exports; // tap compat
exports.test.skip = Test.skip;

var exitInterval;

function createHarness (conf_) {
    if (!conf_) conf_ = {};
    var results = createResult();
    if (conf_.autoclose !== false) {
        results.once('done', function () { results.close() });
    }
    
    var test = function (name, conf, cb) {
        var t = new Test(name, conf, cb);
        test._tests.push(t);
        
        (function inspectCode (st) {
            st.on('test', function sub (st_) {
                inspectCode(st_);
            });
            st.on('result', function (r) {
                if (!r.ok && typeof r !== 'string') test._exitCode = 1
            });
        })(t);
        
        results.push(t);
        return t;
    };
    test._results = results;
    
    test._tests = [];
    
    test.createStream = function (opts) {
        return results.createStream(opts);
    };

    test.onFinish = function (cb) {
        results.on('done', cb);
    };
    
    var only = false;
    test.only = function (name) {
        if (only) throw new Error('there can only be one only test');
        results.only(name);
        only = true;
        return test.apply(null, arguments);
    };
    test._exitCode = 0;
    
    test.close = function () { results.close() };
    
    return test;
}

}).call(this,require('_process'))
},{"./lib/default_stream":122,"./lib/results":124,"./lib/test":125,"_process":70,"defined":77,"through":126}],122:[function(require,module,exports){
(function (process){
var through = require('through');
var fs = require('fs');

module.exports = function () {
    var line = '';
    var stream = through(write, flush);
    return stream;
    
    function write (buf) {
        for (var i = 0; i < buf.length; i++) {
            var c = typeof buf === 'string'
                ? buf.charAt(i)
                : String.fromCharCode(buf[i])
            ;
            if (c === '\n') flush();
            else line += c;
        }
    }
    
    function flush () {
        if (fs.writeSync && /^win/.test(process.platform)) {
            try { fs.writeSync(1, line + '\n'); }
            catch (e) { stream.emit('error', e) }
        }
        else {
            try { console.log(line) }
            catch (e) { stream.emit('error', e) }
        }
        line = '';
    }
};

}).call(this,require('_process'))
},{"_process":70,"fs":69,"through":126}],123:[function(require,module,exports){
(function (process){
module.exports = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

}).call(this,require('_process'))
},{"_process":70}],124:[function(require,module,exports){
(function (process){
var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');
var through = require('through');
var resumer = require('resumer');
var inspect = require('object-inspect');
var bind = require('function-bind');
var has = require('has');
var regexpTest = bind.call(Function.call, RegExp.prototype.test);
var yamlIndicators = /\:|\-|\?/;
var nextTick = typeof setImmediate !== 'undefined'
    ? setImmediate
    : process.nextTick
;

module.exports = Results;
inherits(Results, EventEmitter);

function Results () {
    if (!(this instanceof Results)) return new Results;
    this.count = 0;
    this.fail = 0;
    this.pass = 0;
    this._stream = through();
    this.tests = [];
}

Results.prototype.createStream = function (opts) {
    if (!opts) opts = {};
    var self = this;
    var output, testId = 0;
    if (opts.objectMode) {
        output = through();
        self.on('_push', function ontest (t, extra) {
            if (!extra) extra = {};
            var id = testId++;
            t.once('prerun', function () {
                var row = {
                    type: 'test',
                    name: t.name,
                    id: id
                };
                if (has(extra, 'parent')) {
                    row.parent = extra.parent;
                }
                output.queue(row);
            });
            t.on('test', function (st) {
                ontest(st, { parent: id });
            });
            t.on('result', function (res) {
                res.test = id;
                res.type = 'assert';
                output.queue(res);
            });
            t.on('end', function () {
                output.queue({ type: 'end', test: id });
            });
        });
        self.on('done', function () { output.queue(null) });
    }
    else {
        output = resumer();
        output.queue('TAP version 13\n');
        self._stream.pipe(output);
    }
    
    nextTick(function next() {
        var t;
        while (t = getNextTest(self)) {
            t.run();
            if (!t.ended) return t.once('end', function(){ nextTick(next); });
        }
        self.emit('done');
    });
    
    return output;
};

Results.prototype.push = function (t) {
    var self = this;
    self.tests.push(t);
    self._watch(t);
    self.emit('_push', t);
};

Results.prototype.only = function (name) {
    this._only = name;
};

Results.prototype._watch = function (t) {
    var self = this;
    var write = function (s) { self._stream.queue(s) };
    t.once('prerun', function () {
        write('# ' + t.name + '\n');
    });
    
    t.on('result', function (res) {
        if (typeof res === 'string') {
            write('# ' + res + '\n');
            return;
        }
        write(encodeResult(res, self.count + 1));
        self.count ++;

        if (res.ok) self.pass ++
        else self.fail ++
    });
    
    t.on('test', function (st) { self._watch(st) });
};

Results.prototype.close = function () {
    var self = this;
    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));
    self.closed = true;
    var write = function (s) { self._stream.queue(s) };
    
    write('\n1..' + self.count + '\n');
    write('# tests ' + self.count + '\n');
    write('# pass  ' + self.pass + '\n');
    if (self.fail) write('# fail  ' + self.fail + '\n')
    else write('\n# ok\n')

    self._stream.queue(null);
};

function encodeResult (res, count) {
    var output = '';
    output += (res.ok ? 'ok ' : 'not ok ') + count;
    output += res.name ? ' ' + res.name.toString().replace(/\s+/g, ' ') : '';
    
    if (res.skip) output += ' # SKIP';
    else if (res.todo) output += ' # TODO';
    
    output += '\n';
    if (res.ok) return output;
    
    var outer = '  ';
    var inner = outer + '  ';
    output += outer + '---\n';
    output += inner + 'operator: ' + res.operator + '\n';
    
    if (has(res, 'expected') || has(res, 'actual')) {
        var ex = inspect(res.expected);
        var ac = inspect(res.actual);
        
        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {
            output += inner + 'expected: |-\n' + inner + '  ' + ex + '\n';
            output += inner + 'actual: |-\n' + inner + '  ' + ac + '\n';
        }
        else {
            output += inner + 'expected: ' + ex + '\n';
            output += inner + 'actual:   ' + ac + '\n';
        }
    }
    if (res.at) {
        output += inner + 'at: ' + res.at + '\n';
    }
    if (res.operator === 'error' && res.actual && res.actual.stack) {
        var lines = String(res.actual.stack).split('\n');
        output += inner + 'stack: |-\n';
        for (var i = 0; i < lines.length; i++) {
            output += inner + '  ' + lines[i] + '\n';
        }
    }
    
    output += outer + '...\n';
    return output;
}

function getNextTest (results) {
    if (!results._only) {
        return results.tests.shift();
    }
    
    do {
        var t = results.tests.shift();
        if (!t) continue;
        if (results._only === t.name) {
            return t;
        }
    } while (results.tests.length !== 0)
}

function invalidYaml (str) {
    return regexpTest(yamlIndicators, str);
}

}).call(this,require('_process'))
},{"_process":70,"events":85,"function-bind":88,"has":89,"inherits":91,"object-inspect":94,"resumer":114,"through":126}],125:[function(require,module,exports){
(function (__dirname){
var deepEqual = require('deep-equal');
var defined = require('defined');
var path = require('path');
var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;
var has = require('has');
var trim = require('string.prototype.trim');

var nextTick = require('./next_tick');

module.exports = Test;

inherits(Test, EventEmitter);

var getTestArgs = function (name_, opts_, cb_) {
    var name = '(anonymous)';
    var opts = {};
    var cb;

    for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        var t = typeof arg;
        if (t === 'string') {
            name = arg;
        }
        else if (t === 'object') {
            opts = arg || opts;
        }
        else if (t === 'function') {
            cb = arg;
        }
    }
    return { name: name, opts: opts, cb: cb };
};

function Test (name_, opts_, cb_) {
    if (! (this instanceof Test)) {
        return new Test(name_, opts_, cb_);
    }

    var args = getTestArgs(name_, opts_, cb_);

    this.readable = true;
    this.name = args.name || '(anonymous)';
    this.assertCount = 0;
    this.pendingCount = 0;
    this._skip = args.opts.skip || false;
    this._timeout = args.opts.timeout;
    this._plan = undefined;
    this._cb = args.cb;
    this._progeny = [];
    this._ok = true;

    for (var prop in this) {
        this[prop] = (function bind(self, val) {
            if (typeof val === 'function') {
                return function bound() {
                    return val.apply(self, arguments);
                };
            }
            else return val;
        })(this, this[prop]);
    }
}

Test.prototype.run = function () {
    if (this._skip) {
        this.comment('SKIP ' + this.name);
    }
    if (!this._cb || this._skip) {
        return this._end();
    }
    if (this._timeout != null) {
        this.timeoutAfter(this._timeout);
    }
    this.emit('prerun');
    this._cb(this);
    this.emit('run');
};

Test.prototype.test = function (name, opts, cb) {
    var self = this;
    var t = new Test(name, opts, cb);
    this._progeny.push(t);
    this.pendingCount++;
    this.emit('test', t);
    t.on('prerun', function () {
        self.assertCount++;
    })
    
    if (!self._pendingAsserts()) {
        nextTick(function () {
            self._end();
        });
    }
    
    nextTick(function() {
        if (!self._plan && self.pendingCount == self._progeny.length) {
            self._end();
        }
    });
};

Test.prototype.comment = function (msg) {
    var that = this;
    trim(msg).split('\n').forEach(function (aMsg) {
        that.emit('result', trim(aMsg).replace(/^#\s*/, ''));
    });
};

Test.prototype.plan = function (n) {
    this._plan = n;
    this.emit('plan', n);
};

Test.prototype.timeoutAfter = function(ms) {
    if (!ms) throw new Error('timeoutAfter requires a timespan');
    var self = this;
    var timeout = setTimeout(function() {
        self.fail('test timed out after ' + ms + 'ms');
        self.end();
    }, ms);
    this.once('end', function() {
        clearTimeout(timeout);
    });
}

Test.prototype.end = function (err) { 
    var self = this;
    if (arguments.length >= 1 && !!err) {
        this.ifError(err);
    }
    
    if (this.calledEnd) {
        this.fail('.end() called twice');
    }
    this.calledEnd = true;
    this._end();
};

Test.prototype._end = function (err) {
    var self = this;
    if (this._progeny.length) {
        var t = this._progeny.shift();
        t.on('end', function () { self._end() });
        t.run();
        return;
    }
    
    if (!this.ended) this.emit('end');
    var pendingAsserts = this._pendingAsserts();
    if (!this._planError && this._plan !== undefined && pendingAsserts) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount
        });
    }
    this.ended = true;
};

Test.prototype._exit = function () {
    if (this._plan !== undefined &&
        !this._planError && this.assertCount !== this._plan) {
        this._planError = true;
        this.fail('plan != count', {
            expected : this._plan,
            actual : this.assertCount,
            exiting : true
        });
    }
    else if (!this.ended) {
        this.fail('test exited without ending', {
            exiting: true
        });
    }
};

Test.prototype._pendingAsserts = function () {
    if (this._plan === undefined) {
        return 1;
    }
    else {
        return this._plan - (this._progeny.length + this.assertCount);
    }
};

Test.prototype._assert = function assert (ok, opts) {
    var self = this;
    var extra = opts.extra || {};
    
    var res = {
        id : self.assertCount ++,
        ok : Boolean(ok),
        skip : defined(extra.skip, opts.skip),
        name : defined(extra.message, opts.message, '(unnamed assert)'),
        operator : defined(extra.operator, opts.operator)
    };
    if (has(opts, 'actual') || has(extra, 'actual')) {
        res.actual = defined(extra.actual, opts.actual);
    }
    if (has(opts, 'expected') || has(extra, 'expected')) {
        res.expected = defined(extra.expected, opts.expected);
    }
    this._ok = Boolean(this._ok && ok);
    
    if (!ok) {
        res.error = defined(extra.error, opts.error, new Error(res.name));
    }
    
    if (!ok) {
        var e = new Error('exception');
        var err = (e.stack || '').split('\n');
        var dir = path.dirname(__dirname) + '/';
        
        for (var i = 0; i < err.length; i++) {
            var m = /^[^\s]*\s*\bat\s+(.+)/.exec(err[i]);
            if (!m) {
                continue;
            }
            
            var s = m[1].split(/\s+/);
            var filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[1]);
            if (!filem) {
                filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[2]);
                
                if (!filem) {
                    filem = /(\/[^:\s]+:(\d+)(?::(\d+))?)/.exec(s[3]);

                    if (!filem) {
                        continue;
                    }
                }
            }
            
            if (filem[1].slice(0, dir.length) === dir) {
                continue;
            }
            
            res.functionName = s[0];
            res.file = filem[1];
            res.line = Number(filem[2]);
            if (filem[3]) res.column = filem[3];
            
            res.at = m[1];
            break;
        }
    }

    self.emit('result', res);
    
    var pendingAsserts = self._pendingAsserts();
    if (!pendingAsserts) {
        if (extra.exiting) {
            self._end();
        } else {
            nextTick(function () {
                self._end();
            });
        }
    }
    
    if (!self._planError && pendingAsserts < 0) {
        self._planError = true;
        self.fail('plan != count', {
            expected : self._plan,
            actual : self._plan - pendingAsserts
        });
    }
};

Test.prototype.fail = function (msg, extra) {
    this._assert(false, {
        message : msg,
        operator : 'fail',
        extra : extra
    });
};

Test.prototype.pass = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'pass',
        extra : extra
    });
};

Test.prototype.skip = function (msg, extra) {
    this._assert(true, {
        message : msg,
        operator : 'skip',
        skip : true,
        extra : extra
    });
};

Test.prototype.ok
= Test.prototype['true']
= Test.prototype.assert
= function (value, msg, extra) {
    this._assert(value, {
        message : msg,
        operator : 'ok',
        expected : true,
        actual : value,
        extra : extra
    });
};

Test.prototype.notOk
= Test.prototype['false']
= Test.prototype.notok
= function (value, msg, extra) {
    this._assert(!value, {
        message : msg,
        operator : 'notOk',
        expected : false,
        actual : value,
        extra : extra
    });
};

Test.prototype.error
= Test.prototype.ifError
= Test.prototype.ifErr
= Test.prototype.iferror
= function (err, msg, extra) {
    this._assert(!err, {
        message : defined(msg, String(err)),
        operator : 'error',
        actual : err,
        extra : extra
    });
};

Test.prototype.equal
= Test.prototype.equals
= Test.prototype.isEqual
= Test.prototype.is
= Test.prototype.strictEqual
= Test.prototype.strictEquals
= function (a, b, msg, extra) {
    this._assert(a === b, {
        message : defined(msg, 'should be equal'),
        operator : 'equal',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notEqual
= Test.prototype.notEquals
= Test.prototype.notStrictEqual
= Test.prototype.notStrictEquals
= Test.prototype.isNotEqual
= Test.prototype.isNot
= Test.prototype.not
= Test.prototype.doesNotEqual
= Test.prototype.isInequal
= function (a, b, msg, extra) {
    this._assert(a !== b, {
        message : defined(msg, 'should not be equal'),
        operator : 'notEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.deepEqual
= Test.prototype.deepEquals
= Test.prototype.isEquivalent
= Test.prototype.same
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.deepLooseEqual
= Test.prototype.looseEqual
= Test.prototype.looseEquals
= function (a, b, msg, extra) {
    this._assert(deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'deepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype.notDeepEqual
= Test.prototype.notEquivalent
= Test.prototype.notDeeply
= Test.prototype.notSame
= Test.prototype.isNotDeepEqual
= Test.prototype.isNotDeeply
= Test.prototype.isNotEquivalent
= Test.prototype.isInequivalent
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b, { strict: true }), {
        message : defined(msg, 'should not be equivalent'),
        operator : 'notDeepEqual',
        actual : a,
        notExpected : b,
        extra : extra
    });
};

Test.prototype.notDeepLooseEqual
= Test.prototype.notLooseEqual
= Test.prototype.notLooseEquals
= function (a, b, msg, extra) {
    this._assert(!deepEqual(a, b), {
        message : defined(msg, 'should be equivalent'),
        operator : 'notDeepLooseEqual',
        actual : a,
        expected : b,
        extra : extra
    });
};

Test.prototype['throws'] = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }

    var caught = undefined;

    try {
        fn();
    } catch (err) {
        caught = { error : err };
        var message = err.message;
        delete err.message;
        err.message = message;
    }

    var passed = caught;

    if (expected instanceof RegExp) {
        passed = expected.test(caught && caught.error);
        expected = String(expected);
    }

    if (typeof expected === 'function' && caught) {
        passed = caught.error instanceof expected;
        caught.error = caught.error.constructor;
    }

    this._assert(typeof fn === 'function' && passed, {
        message : defined(msg, 'should throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error: !passed && caught && caught.error,
        extra : extra
    });
};

Test.prototype.doesNotThrow = function (fn, expected, msg, extra) {
    if (typeof expected === 'string') {
        msg = expected;
        expected = undefined;
    }
    var caught = undefined;
    try {
        fn();
    }
    catch (err) {
        caught = { error : err };
    }
    this._assert(!caught, {
        message : defined(msg, 'should not throw'),
        operator : 'throws',
        actual : caught && caught.error,
        expected : expected,
        error : caught && caught.error,
        extra : extra
    });
};

Test.skip = function (name_, _opts, _cb) {
    var args = getTestArgs.apply(null, arguments);
    args.opts.skip = true;
    return Test(args.name, args.opts, args.cb);
};

// vim: set softtabstop=4 shiftwidth=4:


}).call(this,"/node_modules/tape/lib")
},{"./next_tick":123,"deep-equal":73,"defined":77,"events":85,"has":89,"inherits":91,"path":97,"string.prototype.trim":118}],126:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)

exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end, opts) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = [], _ended = false
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

//  stream.autoPause   = !(opts && opts.autoPause   === false)
  stream.autoDestroy = !(opts && opts.autoDestroy === false)

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
//    console.error(ended)
    if(_ended) return stream
    if(data === null) _ended = true
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable && stream.autoDestroy)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable && stream.autoDestroy)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    return stream
  }

  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
      stream.emit('resume')
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":70,"stream":116}],127:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[36]);
